ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,objectivec,Objective-C programming,Brad Cox,https://deprogrammaticaipsum.com/brad-cox/,brad cox,la monadologie time dynabook august issue byte magazine kernighan ritchie book c programming language,ever since aristotle philosopher struggled concept existence observe thing see world get purpose exist forever made thing everything else animus soul object lack gottfried leibniz published la monadologie proposed fundamental level object made indivisible entity called monad see inside monad internal state control action passion monad created destroyed atomically partially built partially annihilated simple substance without part represent pinnacle metaphysical exploration fact century martin heidegger completely upended whole field introduction time put forward ask question question presupposes understanding word word relies understanding understanding situated thus heidegger initiated called modern hermeneutics fact understood represent fundamentally true world outside experience working interpretation informed experience perspective history computing course spent long time without questioning relationship reality computer seen domain pure logic either procedure routine mechanical calculation instruction carried turing school function mathematically transformed data church school two paradigm silent meaning interpretation data acted upon left exercise reader concept form logician would recognise ontology heidegger would call merely ontics entered computing first slowly ontology heidegger say investigation ontics merely investigation thing system accepted simula broke barrier thing outside computer procedure written computer introducing software class programmer could say piece computer represents star animal cell employee could say simulated star information simulated star perform procedure researcher xerox parc developed idea context alan kay dynabook concept smalltalk programming environment finally publishing information objectoriented programming system august issue byte magazine object smalltalk clearly reflect leibnizian monadic simulation world object monad created destroyed either exist encapsulate private data inaccessible outside willed action including changing internal state receipt message crucially object decides receives message level indirection isolation found invoking named procedure taking full advantage way structuring software meant thinking entirely differently software designed built daniel robson one contributor byte issue smalltalk acknowledged would easier come object fresh shift paradigm procedural view software basic idea create software system objectoriented fashion come naturally without preconception nature software system objectoriented programming remove conceptual barrier thing building software software built people process organisation artifact natural resource real world analogous software avatar form object interacting sending message within software system small collection programmer author educator saw meant changing write software think software context creating software brad cox one people surface objectivec look like tool designing object internally execute c procedure indeed objectivec born desire software intel done hardware commoditise algorithm data structure component model analogous integrated circuit objectoriented programming evolutionary approach cox laid vision softwareics fair make usual comparison book objectivec k r c stroustrup book c k r user manual tool c book guide making effective use complex design system oop aea nothing short manifesto completely different way funding staffing delivering software product kernighan ritchie book open hello world example c programming language follows annotated table content purpose programming language help express idea code cox hand open story eli whitney industrial revolution cox industrial revolution primarily machinery harnessing steam coal power replacement artisinal cottege manufacture scaledup industrial process depend wellspecified interface standardised interchangeable part previously gunsmith made oneoff rifle endtoend process whitney argued rifle assembled standard component bolt fails field need replace bolt rifle cox take objectoriented look software production much way ivar jacobson took objectoriented look business process wanted programmer design object publish data sheet described object worked integrator would browse data sheet buy object could connect together build higherlevel assembly solved problem ten year later cox accept company cofounded promote objectivec found financial success far intel software find pick story another book superdistribution object property electronic frontier story eli whitney discussion software industrial revolution come get difficulty scaling component sale software sell software unit part cost borne initial construction subsequent copy free buy couple window object kick tyre scaling production graphical application either license infinite window probably rest gui toolkit none cox advocated objectoriented economy use application computer register use make micropayment application author however application also make use gui toolkit object portion payment transferred app author toolkit author toolkit us foundational data structure another payment made development cheap developer pay le use couple object computer distribute application user start using revenue share pas upstream increase scale app use described superdistribution objectoriented economics required custom hardware securely track object usage make correct micropayments small trial japan followed cox writing preblockchain time dapps written solidity made use micropayments form smart contract evaluation ethereum network technical capability implement idea superdistribution still problem charging fair amount creating software component innovation succeed promoting distribution software component scale free software license make provision paying creator superdistribution deserves modern reading idea behind softwareindustrial revolution still lot inform field cover photo adrian kosmaczewski
2,Lobsters,objectivec,Objective-C programming,Advancements in the Objective-C runtime,https://developer.apple.com/videos/play/wwdc2020/10163/,advancement objectivec runtime,,download hello welcome wwdchi everyone ben language runtimes team going talk change made year objectivec runtime io macos significantly improve memory use talk little bit different nt need change code going talk new apis learn year deprecation warning squash luck wo nt need anything apps get faster telling improvement well partly think cool interestingbut also kind improvement runtime possible internal data structure hidden behind apis apps access data structure directly thing get little crashy talk learn thing watch might happen someone else working codebase obviously access thing nt going cover three change sessionfirst change data structure objectivec runtime us track class take look change objectivec method listsfinally look change tagged pointer represented let start change runtime data class disk application binary class look like first class object contains information frequently accessed pointer metaclass superclass method cache also pointer data additional information stored called classrot ro stand readonly includes thing like class name information method protocol instance variablesswift class objectivec class share infrastructure swift class data structure well class first loaded disk memory start like change used understand happens useful know difference clean memory dirty memory clean memory memory nt changed loaded classrot clean readonly dirty memory memory changed process running class structure dirtied class get used runtime writes new data example creates fresh method cache point class dirty memory much expensive clean memory kept around long process runningclean memory hand evicted make room thing need system always reload diskmacos option swap dirty memory dirty memory especially costly io nt use swap dirty memory reason class data split two piece data kept clean better separating data never change allows class data kept clean memory data enough get u started runtime need track information class class first get used runtime allocates additional storage runtime allocated storage classrwt readwrite data data structure store new information generated runtime example class get linked tree structure using first subclass next sibling class pointer allows runtime traverse class currently use useful invalidating method cache method property readonly data well changed runtime category loaded add new method classand programmer add dynamically using runtime apis since classrot readonly need track thing classrwtnow turn take quite bit memory lot class use given device measured classrwt structure across system iphone could shrink remember need thing readwrite part changed runtime examining usage real device found around percent class ever actually method changed demangled name field used swift class nt even needed swift class unless something asks objectivec name split part nt usually usedand cut size classrwt half class need additional information allocate one extended record slide class use approximately percent class never need extended data saving around mb systemwidethis memory available productive us like storing app data actually see impact change mac running simple command terminallet take look going go terminal macbook going run command available mac called heap let inspect heap memory use running process going run mail app mac ran would output thousand line showing every heap allocation made mailso instead going grep type talking today classrwt type also going search headerand result come back see using classrwt type mail app tenth little nine hundred actually needed extended information easily calculate saving made change type halved size subtract number amount memory allocate extended type see saved quarter meg data mail appif extend system wide real saving term dirty memorynow lot code fetch data class deal class nt extended data course runtime handle outside everything keep working like always using le memory work code read structure within runtime updated time sticking apis really important code tried access data structure directly going stop working year o release since thing moved around code wo nt know new layout saw real code broke due change addition code watch external dependency might bringing app might digging data structure without realizing information structure available official apis function like classgetname classgetsuperclass use apis access information know keep working matter change behind scene apis found objectivec runtime documentation developerapplecomnext let dive little deeper class data structure take look another change relative method list every class list method attached write new method class get added list runtime us list resolve message sendseach method contains three piece information first method name selector selector string uniqued compared using pointer equality next method type encoding string represents parameter return type nt used sending message needed thing like runtime introspection message forwarding finally pointer method implementation actual code method write method get compiled c function implementation entry method list point function let look single methodi chosen init method contains entry method name type implementation piece data method list pointeron system mean method table entry occupies byte clean memory clean memory nt free still loaded disk occupies memory use zoomed view memory within process note scalethere big address space requires bit address within address space various piece carved stack heap executables library binary image loaded process shown blue let zoom look one binary imageshere show three method table entry pointing location binary show u another cost binary image loaded anywhere memory depending dynamic linker decides place mean linker need resolve pointer image fix point actual location memory load time also costnow note class method entry binary ever point method implementation within binary way make method metadata one binary code implementing another mean method list entry nt actually need able refer entire address space need able refer function within binary always nearby instead absolute address use relative offset within binary change made year several advantagesfirstly offset always matter image loaded memory nt fixed loaded disk nt need fixed held true readonly memory secure course offset mean halved amount memory needed platform measured mb method systemwide typical iphone since half size save mb memory app use delight user swizzling method list binary ca nt refer full address space swizzle method implemented anywhere besides said want keep method list read handle also global table mapping method swizzled implementationsswizzling rare vast majority method never actually get swizzled table nt end getting big even better table compact memory dirtied page time old style method list swizzling method would dirty entire page resulting many kilobyte dirty memory single swizzle table pay cost extra table entry always change invisible everything keep working like always relative method list supported new o version coming later yearwhen build corresponding minimum deployment target tool automatically generate relative method list binary need target older o version still worry xcode generate old style method list format well still fully supported still get benefit o built new relative method list system problem format use app time target year o release though get smaller binary le memory usage generally good tip objectivec swift minimum deployment target nt sdk apis available xcode know nt need support older o version often emit better optimized code data understand many need support older o version reason good idea increase deployment target whenever one thing watch building deployment target newer one intended target xcode usually prevents slip especially building library framework elsewhere bringing inwhen running older o older runtime see relative method nt know anything try interpret like oldstyle pointerbased method mean try read pair field pointer result two integer glued together pointer nonsense value certain crash actually used recognize happens crash runtime reading method information bad pointer look like two value smooshed together example running code dig structure read value code problem older runtimes app would crash user upgrade devicesso nt use apis apis keep working regardless thing change underneath example function given method pointer return value fieldslet explore one change coming year change tagged pointer format first need know tagged pointer arewe going get really low level nt worry like everything else talked nt need know interesting maybe help understand memory usage little better let start looking structure normal object pointer typically see printed big hexadecimal number saw earlier let break binary representationwe bit however nt really use bit bit middle ever set real object pointer low bit always alignment requirement object must always located address multiple pointer size high bit always address space limited nt actually go way high low bit always let pick one bit always make immediately tell u real object pointer assign meaning bit call tagged pointer example might stuff numeric value bit long teach nsnumber read bit teach runtime handle tagged pointer appropriately rest system treat thing like object pointer never know difference save u overhead allocating tiny number object every case like significant win quick aside value actually obfuscated combining randomized value initialized process startup security measure make difficult forge tagged pointer value ignore rest discussion since extra layer top aware actually try look value memory scrambled full format tagged pointer intel low bit set indicate tagged pointer discussed bit must always real pointer allows u tell apart next bit tag number indicates type tagged pointer example mean nsnumber nsdate since three tag bit eight possible tag typesthe rest bit payload data particular type use however like tagged nsnumber actual numbernow special case tag indicates extended tag extended tag us next eight bit encode type allowing tag type cost smaller payload allows u use tagged pointer type long fit data smaller spacethis get used thing like tagged uicolors nsindexsets seems really handy might disappointed hear runtime maintainer apple add tagged pointer type swift programmer happy know create kind tagged pointer ever used enum associated value class like tagged pointer swift runtime store enum discriminator spare bit associated value payload swift use value type actually make tagged pointer le important value longer need exactly pointer sized example swift uuid type two word held inline instead allocating separate object nt fit inside pointer tagged pointer intel let look arm flip thing aroundinstead bottom bit top bit set indicate tagged pointer tag number come next three bit payload us remaining bit use top bit indicate tagged pointer arm instead bottom bit like intel well actually tiny optimization objcmsgsend want common path msgsend fast possible common path normal pointer two le common case tagged pointer nil turn use top bit check single comparison save conditional branch common case msgsend compared checking nil tagged pointer separately like intel special case tag next bit used extended tag remaining bit used payload actually old format used io year release moving thing around bitthe tag bit stay top msgsend optimization still really useful tag number move bottom three bitsthe extended tag use occupies high eight bit following tag bitwhy well let consider normal pointer existing tool like dynamic linker ignore top bit pointer due arm feature called top byte ignore put extended tag top byte ignore bit aligned pointer bottom three bit always fiddle adding small number pointerwe add set low bit remember indication extended tag mean actually fit pointer extended tag pointer payload result tagged pointer normal pointer payload useful well open ability tagged pointer refer constant data binary string data structure would otherwise occupy dirty memorynow course change mean code access bit directly longer work io released later year bitwise check like would worked past give wrong answer future os app start mysteriously corrupting user data nt use code relies anything talked instead probably guess going say use apis type check like iskindofclass worked old tagged pointer format continue work new tagged pointer format nsstring nsnumber method keep working information tagged pointer retrieved standard apis worth noting also applies cf type wellwe nt want hide anything definitely nt want break anybody apps detail nt exposed need maintain flexibility make change like apps keep working fine long nt rely internal detailsso let wrap talk seen behind scene improvement shrunk overhead runtime leaving memory available user get improvement without anything except maybe consider raising deployment targetto help u make improvement year follow simple rule nt read internal bit directly use apis
3,Lobsters,objectivec,Objective-C programming,Tiger to Catalina: let’s port some code,https://www.sicpers.info/2020/07/tiger-to-catalina-lets-port-some-code/,tiger catalina let port code,bean much step make xcode happy step remove reference next objectivec runtime diagnose stack smash side quest rationalise version check ship ship see source github,many part modern software stack around long time tradeoff term user experience great thing software incrementally improved providing customer familiarity stability need learn entirely new thing existing thing keep working also great developer mean play red queen always running stand still focus improving customer experience knowing everything wrote date still work still work cocoa example continuous history back code written use cocoa apis going back let port old cocoa software see little effort stay date bean free word processor macos written objectivec using mostly cocoa carbon apis us cocoa text system current version bean free support macos open source version bean support intel powerpc would take make modern cocoa app couple hour work gave fullyworking bean catalina lot unnecessary sidequesting step make xcode happy bean built using o x sdk probably needed xcode xcode o x sdk let build macos sdk instead also accepted whatever suggested updated setting xcode showed enabled fobjcweak flag using automatic reference counting turn deployment target support build run right quite step remove reference next objectivec runtime bean us method swizzling ie swapping method implementation runtime mostly work around difference api behaviour tiger leopard code longer compiles error incomplete definition type struct objcmethod origmethod methodtypes file included note forward declaration struct objcmethod typedef struct objcmethod method reason apple introduced objectivec runtime leopard made impossible directly access data structure used runtime structure stayed header couple release long gone first thought first fix delete code eventually relented wrapped project still build back assuming update sdk setting build cleanly using clang xcode build beta xcode fact ok ship right diagnose stack smash launched crashed straight away stack trace look like thread queue comapplemainthread stop reason excbadaccess frame libmainthreadcheckerdylib checkerc frame libmainthreadcheckerdylib trampolinec frame libmainthreadcheckerdylib handlerstart frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview nsprivate viewdiddrawinlayer incontext um well definitely good backtrace api code except main top nstextview really changed much get infinite loop try draw cursor actually one many patch appkit app swizzled category nstextview replaces two method see stack trace could change swizzled method see way make work remove side quest rationalise version check everything work app built powerpc mac o x ported early point intel run couple change macos want fix one thing message appears launch would like get rid bean warning gestalt selector gestaltsystemversion returning instead bug gestalt documented limitation use nsprocessinfo operatingsystemversion property get correct system version number call location bean carboncore gestaltsystemversionblockinvoke bean libdispatchdylib dispatchclientcallout bean libdispatchdylib dispatchoncecallout bean carboncore gestaltsystemversion bean carboncore gestalt bean bean jhdocumentcontroller init bean appkit nscustomobject nibinstantiate little history back classic mac o gestalt used like unix programmer use sysctl soda drink maker use high fructose corn syrup want expose information add gestalt bloated enough drink gestalt api take selector pointer memory get written memory depends selector gestaltsystemversion selector make write o version number memory well us bit turned fine apple release many operating system used one octet major minor patch release number macos represented mac o x came along gestalt part carbon api version reported major release bumped first version patch level release jaguar point someone apple realised ever sixteen patch release sixteen minor release would break capped patchminor number told stop using gestaltsystemversion would like stop using lot version number check bean put one place given two way check version nsprocessinfo isoperatingsystematleastversion available use actually never relevant test version api added fall back gestalt separate gestaltsystemversionmajorminor selector exist back perfect fails earliest o bean run actually tell run quits apple added minimumsystem check launch service could use infoplist say whether app work mechanism supported ship done haha kidding done launching thing enough better test dark mode thing tiger thing bean assumes set background nstextview white explicitly set actually ship see source github particularly change needed make cocoa application work macos despite couple cpu family switch bunch change ui
4,Lobsters,objectivec,Objective-C programming,Objective-C Direct Methods,https://nshipster.com/direct/,objectivec direct method,nullability lightweight generic recently merged patch clang radar number feature landed objectoriented programming xerox alto invented alan kay dynamic dispatch objectivec runtime direct dispatch c function direct method objcdirect property direct objcdirectmembers clang attribute case making method direct probably noticeable performance advantage surprisingly fast ar glass anyone mike ash dissecting objcmsgsend hidden motif linkage unit according pierre,hard get excited new feature come objectivec day improvement service swift interoperability rather investment language see nullability lightweight generic surprising learn recently merged patch clang add new direct dispatch mechanism objectivec method genesis new language feature unclear go appleinternal radar number tell u much beyond relative age sometime early estimation fortunately feature landed enough documentation test coverage get good idea work kudos implementor pierre habouzit review manager john mccall llvm contributor week nshipster taking occasion review objectivec method dispatching try understand potential impact new language feature future codebases direct method could show early xcode likely announced wwdc understand significance direct method need know thing objectivec runtime let start discussion one step origin oop objectoriented programming alan kay coined term objectoriented programming late help adele goldberg dan ingalls colleague xerox parc kay put idea practice creation smalltalk programming language time research xerox parc also developed xerox alto would become inspiration apple macintosh gui computer brad cox tom love started work first version objectivec language sought take objectoriented paradigm smalltalk implement solid fundamental c series fortuitous event language would come official language next later apple u started learning objectivec iphone era language often seen yet another proprietary apple technology one myriad obscure byproduct company invented nih culture however objectivec objectoriented c one original objectoriented language strong claim oop credential oop mean good question era hype cycle rendered term almost meaningless however purpose today let focus something alan kay wrote sorry long ago coined term object topic get many people focus lesser idea big idea messaging alan kay dynamic dispatch objectivec runtime objectivec program consists collection object interact passing message turn invoke method function act message passing denoted square bracket syntax someobject amethod withanargument objectivec code compiled message sends transformed call function called objcmsgsend literally send message object argument objcmsgsend object selector message withanargument first argument receiver self instance method second argument cmd selector name method method parameter passed additional function argument objcmsgsend responsible determining underlying implementation call response message process known method dispatch objectivec class class maintains dispatch table resolve message sent runtime entry dispatch table method method key selector sel corresponding implementation imp pointer c function object receives message consults dispatch table class find implementation selector associated function called otherwise object consults dispatch table superclass continues inheritance chain match found root class nsobject deems selector unrecognized say nothing objectivec let thing like replace method implementation create new class dynamically runtime absolutely wild think indirection sound like lot way right hot path code expensive method called frequently could imagine benefit avoiding indirection end developer used c function way around dynamic dispatch direct dispatch c function saw objcmsgsend method invocation represented equivalent function passing implicit self first argument example consider following declaration objectivec class conventional dynamicallydispatched method interface myclass nsobject void dynamicmethod end developer wanted implement functionality myclass without going whole message sending shebang could declare static c function took instance myclass argument static void directfunction myclass unsafeunretained object approach translates call site myclass object myclass alloc init dynamic dispatch object dynamicmethod direct dispatch directfunction object direct method direct method look feel conventional method behavior c function direct method called directly call underlying implementation rather going objcmsgsend new llvm patch way annotate objectivec method avoid participation dynamic dispatch selectively objcdirect property direct objcdirectmembers make instance class method direct mark objcdirect clang attribute likewise method objectivec property made direct declaring direct property attribute interface myclass nsobject property nonatomic bool dynamicproperty property nonatomic direct bool directproperty void dynamicmethod void directmethod attribute objcdirect end count addition direct brings total number property attribute getter setter readwrite readonly atomic nonatomic weak strong copy retain unsafeunretained nullable nonnullable nullresettable class interface category class extension annotated objcdirectmembers attribute method property declaration contained within considered direct unless previously declared class attribute objcdirectmembers interface myclass property nonatomic bool directextensionproperty void directextensionmethod end annotating implementation objcdirectmembers similar effect causing nonpreviously declared member deemed direct including implicit method resulting property synthesis attribute objcdirectmembers implementation myclass bool directproperty void dynamicmethod void directmethod void directextensionmethod void directimplementationmethod end dynamic method overridden subclass direct method direct method overridden protocol declare direct method requirement class implement protocol requirement direct method applying annotation example see direct dynamic method indistinguishable call site myclass object myclass alloc init dynamic dispatch object dynamicmethod direct dispatch object directmethod direct method seem like slam dunk feature performanceminded developer among u twist case making method direct probably noticeable performance advantage turn objcmsgsend surprisingly fast thanks aggressive caching extensive lowlevel optimization intrinsic performance characteristic modern processor objcmsgsend extremely low overhead long past day iphone hardware could reasonably described resourceconstrained environment unless apple preparing new embedded platform ar glass anyone reasonable explanation apple implementing objectivec direct method stem something performance mike ash internet foremost expert objcmsgsend year post provided deepest complete understanding objectivec runtime find outside cupertino curious dissecting objcmsgsend great place start hidden motif objectivec method marked direct implementation hidden visibility direct method called within module pedantic linkage unit even show objectivec runtime hidden visibility two direct advantage smaller binary size external invocation without external visibility way invoke dynamically objectivec runtime direct method effectively private method want participate direct dispatch still want make api accessible externally wrap c function static inline void performdirectmethod myclass unsafeunretained object object directmethod hidden visibility used apple prevent swizzling private api use seem primary motivation according pierre implemented feature main benefit optimization code size reduction reportedly weight unused objectivec metadata account text section compiled binary could imagine next year developer conference engineer could go sdk framework annotating private method objcdirect private class objcdirectmembers lightweight way progressively tighten sdk true perhaps well become skeptical new objectivec feature service swift service apple despite important place history programming apple hard see objectivec history
5,Lobsters,objectivec,Objective-C programming,"Beyond Faster JSON Support for iOS/macOS, Part 9: CSV and SQLite",https://blog.metaobject.com/2020/06/beyond-faster-json-support-for-iosmacos.html,beyond faster json support iosmacos part csv sqlite,csv parsing gtfs h sqlite fmdb,looking mpwpliststreaming protocol using json parsing series one thing probably noticeable nt particularly jsonfocused fact nt even initially designed parsing generating could use deserialization task glad asked csv parsing one example performance book involves parsing comma separated value quickly within context getting time convert gtfs file something usable phone minute using using coredatasqlite slightly le second using custom inmemory data structure also several order magnitude faster query ondevice original project cv parser took around second nt significant part minute rest took couple hundred millisecond time make part faster well result slightly generalized mpwdelimitedtable h basic interface blockbased block called every row table called dictionary composed header row key content row value void void nsdictionary thedict int anindex block adapting mpwpliststreaming protocol straightforward void writeonbuilder id builder builder beginarray self nsdictionary thedict int anindex builder begindictionary nsstring key selfheaderkeys builder writeobject thedict key forkey key builder enddictionary builder endarray quickanddirty implementation based existing api clearly suboptimal api call first construct dictionary row header key iterate however work existing set builder nt build inmemory representation entire csv also relatively straightforward invert api usage modifying lowlevel api use mpwpliststreaming creating higherlevel block dictionaybased api top way also work mpwpliststreaming client sqlite another tabular data format sql data base macosios one common database sqlite usually accessed via coredata excellent much lightweight fmdb used fmdb bing quite delighted first impulse write mpwpliststreaming adapter looking code bit closely seemed quite bit would need mpwpliststreaming also think saw tradeoff convenient slow convenience based nsdictionary much complex potentially faster api based pulling individual type value instead decided try something ultra simple sits directly top sqlite capi implementation really quite simple compact interface mpwstreamqlite property nonatomic strong nsstring databasepath end implementation mpwstreamqlite db instancetype initwithpath nsstring newpath self super init selfdatabasepath newpath return self int exec nsstring sql re int rc db sql re autoreleasepool selfbuilder beginarray int step int re nsstring key numcols int numcols key re sqliterow step re autoreleasepool selfbuilder begindictionary int numcols const char text const char re text selfbuilder writeobject text forkey key selfbuilder enddictionary re selfbuilder endarray return rc int open return selfdatabasepath db void close db db dbnull course nt lot chiefly read update insert deletes however code striking brevity simplicity time convenient fast though still room improvement experience tend get three property time code simple convenient tends slow code convenient fast tends rather tricky code simple fast tends inconvenient use easy use following code turn table array dictionary import mpwfoundationmpwfoundationh int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwplistbuilder new db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return pretty good probably roughly par course returning generic data structure array dictionary going particularly efficient one first clue coredata predecessor eof nt particularly fast read fetching raw dictionary optimization much faster fetching object want get object instead easy replace mpwplistbuilder mpwobjectbuilder parametrized class create well define class presumably already havee task convert object class cold obviously also automated import mpwfoundationmpwfoundationh interface artist nsobject property assign long artistid property nonatomic strong nsstring name end implementation artist nsstring description return nsstring stringwithformat self class self selfartistid selfname end int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwobjectbuilder alloc initwithclass artist class db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return note generate plist representation intermediate step go straight database result set object generic intermediate format mpwpliststreaming protocol dematerialized representation plist object peer
6,Lobsters,objectivec,Objective-C programming,The Curious Case of Swift's Adoption of Smalltalk Keyword Syntax,https://blog.metaobject.com/2020/06/the-curious-case-of-swift-adoption-of.html,curious case swift adoption smalltalk keyword syntax,accepted multiple trailing closure trouble,really surprised learn swift recently adopted smalltalk keyword syntax accepted multiple trailing closure keyword terminated colon followed argument without surrounding brace mind boggles little course swift would nt swift nt special case special case specifically case multiple trailing closure special case trailing closure weird specialcasey enough example uiviewanimate withduration selfviewalpha completion selfviewremovefromsuperview note argument animate would seem terminate closing parenthesis actually case curly brace closing paren start closure actually also argument method socalled trailing closure little bit sympathy construct closure inside parenthesis look really really awkward course params apart sole x inside f x look awkward let quibble another thing enables method reasonably resemble control structure heard really great idea problem sometimes one closure argument stacking behind appears end functionmethod call get really really awkward ca nt tell block argument trailing closure nt get keyword well different method syntax one traditional cpascalcjava function call syntax xf already weirdish addition smalltalkobjectivec keywords inside f x syntax f arg x original trailingclosure syntax thing first closure smalltalk nonbrackted keyword syntax subsequent closure impressive scary kind way swift crescendo special case stopping short general result complexity semantics complexity behaviour ie bug complexity use ie workarounds understand proposal quite controversial heated discussion opponent proponent understand sympathize side one hand markedly better alternative hand special case special case difficult justify addition already special case beget special case beget special case course answer always smalltalk keyword syntax reasonable solution case also solves case general solution could look objectivesmalltalk us curly brace instead closure instead square bracket uiview animate selfviewalpha completion self view removefromsuperview special case every argument labeled syntax mush bracket inside parenthesis etc yes also handle userdefined control structure method nsnumber stdout println introduce special case willy nilly since keywords naturally go argument need operator different special syntax form allow binary keywords look little different instead write instead pow signature func pow x decimal int decimal really neeed go trouble defining operator swift b another special kind syntax b yes know detail detail forth course late chose smalltalk base syntax language turned objectivesmalltalk nt like gotten used via objectivec smalltalk syntax surprisingly flexible general smalltalk apis look lot like dsl without tooling overhead frustrating part stuff available wellknown least bother look andor ask instead choose thing willynilly everybody suffer consequence update guess trying get thought thing little bit could almost entire syntax language cost complexity implementation size brittleness cognitive load etc one special case special case would overall better boot
7,Lobsters,objectivec,Objective-C programming,The Origins of Objective-C at PPI/Stepstone and Its Evolution at NeXT,https://dl.acm.org/doi/pdf/10.1145/3386332,origin objectivec ppistepstone evolution next,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g w j endstream endobj obj annots r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r subtype form type xobject length stream вnh w endobj obj basefont imuzxnlinlibertinet encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bitspercomponent colorspace devicergb filter flatedecode height smask r subtype image type xobject width length stream f r x u e wu jyg l b µ suu ei ei l dq v ǝ h q pl kh e uc e p n soy ų ii b yy oedt endobj obj difference period zero four c l b c e h k l n r u v w type encoding endobj obj endobj obj ascent capheight charset aciltabcdefourhiklmnoperiodrstuvwzero descent flag fontbbox fontfile r fontname imuzxnlinlibertinet italicangle stemv type fontdescriptor xheight endobj obj bitspercomponent colorspace devicegray filter flatedecode height subtype image type xobject width length stream endobj obj filter flatedecode length stream b r ncc ĵ sa j r nj qp iwfbhzf х l c yt p pm k j f վ n r c u
8,Lobsters,objectivec,Objective-C programming,MPWTest: Reducing Test Friction by Going Beyond the xUnit Model,https://blog.metaobject.com/2020/05/mpwtest-reducing-test-friction-by-going.html,mpwtest reducing test friction going beyond xunit model,mpwtest setup mpwtest code codesmell use courage caveat outlook,popular demand quick rundown mpwtest simplest testing framework could possibly work personal unit testing framework make tdd fast fun frictionless created mpwtest bitten tdd bug definitely want write software without tdd ever could help long xctest even precursor sentestkit best parallel development certainly nt aware bit different difference make sufficiently better much prefer xunit variant worked junit sunit xctest vastly better tdd introduce significant amount overhead friction make testing experience much cumbersome need least partly explains antipathy see towards unit testing developer attitude see testing like eating vegetable know supposed good grudgingly really rather annoying benefit something know intellectually mpwtest tdd also still intellectually good also viscerally fun le like vegetable like tasty snack except snack yummy also healthy help stay flow get thing done let change code quickly safely key agile work setup first need build testlogger binary mpwtest project put mine usrlocalbin forget put anywhere like adjust path follows next add script build phase framework project mpwtest currently test framework testerusrlocalbintestlogger framework targetbuilddir fullproductname f tester tester framework else echo warning tester framework found test run fi bottom build phase pane project look something roughly like following separate test bundle extra target nada may seem big deal single target start getting framework additional test target really start add add decisionpoint really create additional test bundle project maybe repurpose existing one code class tested add nsarray testselectors method returning list test runtest method execute example json parser writing testselectors return testparsejsonstring testparsesimplejsondict testparsesimplejsonarray testparseliterals testparsenumbers testparseglossarytodict testdictafternumber testemptyelements teststringescapes testunicodeescapes testcommonstrings testspacebeforecolon could also determine name automagically prefer explicit list part specification test run otherwise easy lose test editing mistake none wiser implement test example testunicodeescapes void testunicodeescapes mpwmasonparser parser mpwmasonparser parser nsdata json self frameworkresource unicodeescapes category json nsarray array parser parseddata json nsstring first array intexpect first length length parsed unicode escaped string intexpect first expected value idexpect array n second newline yes mostly old code macro er expect intexpect expects integer equality scalar honest idexpect expects object equality also convenience nil nil true false well specialized one float set acceptable range theory put method anywhere tend place testing category bottom file end import debugmacrosh implementation mpwmasonparser testing debugmacrosh header various expcect macro header dependency code need link anything even separate test bundle separate test class hierarchy really simplifies thing lot first question find test particular class bottom file scroll class test scroll find incredibly useful test serve specification documentation example code class also need maintain parallel class hierarchy widely regarded fairly serious codesmell obvious reason need keep hierarchy sync along problem get sync etc use setup build project test run automatically part build test failure reported xcode would expect step tend add name test testselectors hit build ensure test red xcode build add empty test method hit build ensure test green either add actual expect test expecttrue false impelemented placeholder may seem like lot step really mostly letting xcode check thing edits need done anyhow hitting cmdb couple time editing nt hurt fact test run part every build build without running test give completely different level confidence code translates courage running test time also splendid motivation keep test green test fail build fails build fails run program last least running test every build also strong motivation keep test fast testing nt separate activity integral part development process writing code compiling caveat drawback approach one pretty xcode unit test integration nt work done apple already left platform idea behind focused making integrated solution noted displaying test failure error jumping line failed testexpectation work hook mechanism xcode us get information compiler simply output line number error message stdout tool format output way work wth xcode end enojoy blinkenlights xcode unit test integration able run test individually simple mouseclick bling really reinforces idea test separate entity test always run always green always fast nt need even want ui ui distraction test fade background another slightly annoying issue debugging test run part build test failure build failure block executables running however xcode debugs executables ca nt actually get debuggable run session nt use debugger much failure tdd usually manifest test failure rather something need debugger track nt much problem past would revert command line example lldb testlogger mpwfoundation debug foundation framework ca nt actually run framewework thought receently find set executable parameter target build scheme set testlogger debug framework heart content leaving problem xcode actually letting run executable due build failing far know facility debugging build phase workaround temporarily disabling test build phase accomplished misusing run script installing flag issue nt actually significant somewhat jarring might expect experience buttery smooth rest time course want pure test class create class test furthermore class actually asked test fixture object test default return class object also return instance setup teardown method way expect xunit code enumerate probe class system order find test also interesting straightforward need updated time time class system like probed outlook obviously happy people try mpwtest find useful find useful provide good feedback currently specific plan swift support objectivec compatible class probably work rest language probably nt dynamic enough support kind transparent integration certainly without compiler work currently investigating swift interop generally longer restricted cobjectivec might possible almost certainly use lesson learned create linguistically integrated testing objectivesmalltalk many aspect objectivesmalltalk gap bridged supersmooth actually large another takeaway unit testing really really simple fact asked kent beck response everyone build go build wonderful thing
9,Lobsters,objectivec,Objective-C programming,ObjFW 98 SE: Bringing Objective-C to Windows 98 SE and NT 4.0,https://blog.nil.im/?77,objfw se bringing objectivec window se nt,objfw se bringing objectivec window se nt ipx work around minor change nasty hack fallback add api used instead ported apis port everything else apis,objfw se bringing objectivec window se nt created utc yesterday got idea port objfw window nt considering lowest supported window version far window xp seemed like would much work however biggest problem getting toolchain still support window nt using old window xp window xp vm around anyway writing ipxspx support copying resulting binary window nt work complained addvectoredexceptionhandler removevectoredexceptionhandler course according msdn introduced window xp grepping gcc source yield result grepping entire mingw source used winpthread luckily used thread name commenting two line recompiling enough winpthread linked gcc default exception handling runtime need really want exception objfw compiler longer created binary missing symbol window nt got ofinvalidformatexception loop mingw implementation asprintf seems call snprintf expects return number byte would written sufficiently large buffer provided window nt return buffer small trying print error course call hence loop unfortunately asprintf implementation relied exact snprintf behavior part aleady work around easy enough able get hello world using ofstdout ofapplication minor change later test running successfully well disable socket something would try load icmpdll exist window nt look another time later evening wanted take thing thought window nt window se well difficult though window two version almost every api version w version wrongly stand ascii w stand wide meaning version take argument native localedependent codepage w version always us unicode w version introduced window nt objfw used w version exclusively since window console quite bad need nasty hack made bearable meant could even get hello world without porting hack apis first added fallback w version return errorcallnotimplemented w apis return error window got working hello world called day unfortunately forgot take screenshot got quite late next day decided calling w version first falling back version fails errorcallnotimplemented nt make lot sense never gon na nonnt version window support unicode decided add api detect objfw running window nt used instead already hello world working one using ofapplication using ofstdout main order get working ported ofapplication apis finally got proper hello world time port everything else apis voilà test running successfully well window se addition disabling socket also disable dlls thread dlls figured yet nt work thread already know fix waitforsingleobject support waiting thread coolest thing result binary work anything window se window using feature available guess shabby weekend see get remaining issue fixed know maybe objfw workgroups next
10,Lobsters,objectivec,Objective-C programming,A modern chat client built on Matrix,https://gitlab.com/ditto-chat/ditto-mobile,modern chat client built matrix,ditto mobile,ditto mobile project id
11,Lobsters,objectivec,Objective-C programming,Santa: Binary whitelisting system extension for macOS,https://github.com/google/santa,santa binary whitelisting system extension macos,santa doc doc http santareadthedocsio get help santadev issue security policy adminrelated feature intention expectation security performancerelated feature known issue pagezero missing issue sync server upvote moroz zentral screenshots kext signing prebuilt presigned version kext signing certificate contributing contributing disclaimer,santa santa binary authorization system macos consists kernel extension system extension macos monitor execution userland daemon make execution decision based content sqlite database gui agent notifies user case block decision commandline utility managing system synchronizing database server named santa keep track binary naughty nice santa project google macintosh operation team doc santa doc stored doc directory read doc instance available http santareadthedocsio doc include deployment option detail part santa work instruction developing santa get help question otherwise need help getting started santadev group great place believe bug feel free report issue respond soon believe found vulnerability please read security policy disclosure reporting adminrelated feature multiple mode default monitor mode binary except marked blocked allowed run whilst logged recorded event database lockdown mode listed binary allowed run event logging kext loaded binary launch logged either mode unknown denied binary stored database enable later aggregation certificatebased rule override level instead relying binary hash fingerprint executables allowedblocked signing certificate therefore allowblock binary given publisher signed cert across version update binary allowed certificate signature validates correctly rule binary fingerprint override decision certificate ie allowlist certificate blocking binary signed certificate viceversa pathbased rule via nsregularexpressionicu allows similar feature found managed client precursor configuration profile used implementation mechanism application launch restriction via mcxalr binary implementation carry added benefit configurable via regex relying launchservices detailed wiki evaluating rule hold lowest precedence failsafe cert rule put deny rule would block certificate used sign launchd aka pid therefore component used macos binary every o update case entire new version therefore automatically allowed affect binary apple app store use various cert change regularly common apps likewise block santa santa us distinct separate cert google apps intention expectation single system process stop attack provide security santa written intention helping protect user people often download malware trust giving malware credential allowing unknown software exfiltrate data system centrally managed component santa help stop spread malware among large fleet machine independently santa aid analyzing running computer santa part defenseindepth strategy continue protect host whatever way see fit security performancerelated feature inkernel caching allowed binary cached kernel processing required make request done binary nt already cached userland component validate userland component daemon gui agent commandline utility communicate using xpc check signing certificate identical communication accepted kext us kpis kernel extension us provided kernel programming interface job mean kext code continue work across o version known issue santa block execution execve variant nt protect dynamic library loaded dlopen library disk replaced library loaded using dyldinsertlibraries version address pagezero missing issue exploited version macos working also protecting similar avenue attack kext communication security kext accept connection single client time said client must running root nt yet found good way ensure kext accepts connection valid client database protection sqlite database installed permission root user readwrite considering approach secure script santa currently written ignore execution nt binary weighing administration cost v benefit found nt worthwhile additionally number application make use temporary generated script ca nt possibly allowlist would cause problem happy revisit least make option would useful others sync server santactl commandline client includes flag synchronize management server uploads event occurred machine downloads new rule several opensource server sync upvote appenginebased server implement social voting make managing large fleet easier moroz simple golang server serf hardcoded rule simple configuration file zentral centralized service pull data multiple source deploy configuration multiple service alternatively santactl configure rule locally without sync server screenshots tool like santa nt really lend screenshots video instead kext signing kernel extension macos later must signed using appleprovided developer id certificate kernel extension flag without way load extension enable kextdevmode disable sip depending o version two possible solution distribution purpose use prebuilt presigned version kext supply time change made kext code update prebuilt version make use nt prevent making change nonkext part santa distributing make change kext make pull request merge distribute new version presigned kext apply kext signing certificate apple grant broad distribution within organization wo nt issue testing purpose contributing patch project much welcome please see contributing file disclaimer official google product
12,Lobsters,objectivec,Objective-C programming,ReDoomEd,http://twilightedge.com/mac/redoomed/,redoomed,redoomed maclinuxbsd beta port id doom map editor nextstep doom john romero john carmack nextstep doomed port doomed original source code released publicly cocoa api gnustep framework ultimate doom doom ii released publicly download archiveorg iwad doomwad requires mac o x tiger later requires xcode gnustepmake w base guiback version history checksum doomed doombsp c id software inc license unknown redoomed sourcesmodifications c josh freeman license gnu agpl later approved version pikopixel c josh freeman license gnu agpl later approved version,redoomed maclinuxbsd beta port id doom map editor nextstep development doom game john romero john carmack wrote nextstep application designing game level called doomed redoomed independentlydeveloped port doomed nextstep maclinuxbsd us doomed original source code released publicly modified run cocoa modern descendant nextstep cocoa native api mac o x supported platform using gnustep framework doomed used custom text format storing doom level level doom ultimate doom doom ii released publicly doomed format available download archiveorg editing project file also requires copy iwad corresponding game retail version doomwad video mac app requires mac o x tiger later linux install script source code requires xcode gnustepmake w base guiback version history checksum doomed doombsp c id software inc license unknown redoomed sourcesmodifications c josh freeman license gnu agpl later approved version pikopixel c josh freeman license gnu agpl later approved version
13,Lobsters,objectivec,Objective-C programming,Objective-Smalltalk,http://objective.st/,objectivesmalltalk,objective hello world news cocoa head berlin presentation video mpwdrawingcontext fosdem smalltalk devroom video paper dl pdf,objective objective programming language make creating wellarchitected efficient program straightforward easy fun fast hello world stdout println hello world newsaugust update publication august maringolo suggested objective better name giving try january objectivest website running dynamically digital ocean droplet december port using gnustep october scheme handler via property path october defining scheme handler property path april definition syntax july real class method definition syntax may objectivesmalltalk repl available embeddable nstextview subclass addition unix command line may unicode support addition symbol like also support various operatorlike construct like extended equality test arrow assignment attaching connector port march local variable message stsh algorithm take account syntax actual live object accurate result february head berlin presentation february live coding demo video driving apple quartz api via mpwdrawingcontext february presented fosdem smalltalk devroom video available august identifier paper accepted dl pdf
14,Lobsters,objectivec,Objective-C programming,Bypassing objc_msgSend,https://saagarjha.com/blog/2019/12/15/bypassing-objc-msgsend/,bypassing objcmsgsend,little bit idle speculation jumping implementation nonpointer tagged pointer lack back pointer invalidating method cache class uncached path look add back patched clang fast yet macbook pro retina early intel r core tm cpu future extension,fastest path objcmsgsend transfer execution imp dozen instruction otool tv usrliblibobjcdylib p objcmsgsend head n usrliblibobjcdylib text text section objcmsgsend testq rdi rdi je testb dil jne movabsq objcabsolutepackedisaclassmask andq objcemptyvtable rdi movq rsi andl shlq addq cmpq objcemptyvtable rsi jne movq xorq jmpq one hottest hottest code path system good reason optimized even minimal saving translate directly measurable performance increase across objectivec application even fast implementation sometimes good enough objectivec dynamic language feature come price even using majority code executed typical objcmsgsend call implementation lookup rather check see execution proceed fast path check comparatively cheap even bigger issue function largely serf optimization barrier compiler look like nothing impenetrable trampoline unknown target even simplest member access inlined every method call must clobber multiple register almost always requires move accumulator usually undesirable leave result attribute objcdirect closely related attribute objcdirectmembers attempt solve problem converting method call essentially cstyle static dispatch change met controversy introduced call would longer go runtime machinery breaking many feature objectivec including swizzling kvo even subclassing luckily another way get performance benefit without losing objectivec best feature little bit idle speculation key insight guess vast majority method call go compile time looking type receiver message sending time objcmsgsend confirming already know practical difference fast path direct function call need check quickly possible target expects jumping way around want support objectivec dynamism implementation come advantage objcmsgsend human compiler static type information understanding surrounding code let u guess statically high accuracy target fact speculate call go predicted method taking leaf objcmsgsend book wrap direct call barest minimum checking make sure correct prediction psuedocode convert call foo bar reciever foo something like target foo bar jump foo bar else objcmsgsend foo selector bar correct skip cache lookup objcmsgsend performs also make direct call method one compiler know optimize around jumping implementation almost done question left go target foo bar condition far tell foo foo send selector bar case execution directly proceed foo bar reciever nil reciever subclass foo foo bar swizzled checking first done easily second bit complicated theory asking foo ismemberofclass fooclass obvious reason really want overhead come skip even call objectgetclass directly ripping isa foo comparing runtime metadata subtlety nonpointer isas tagged pointer avoid entirely masking isa appropriately sending nonstandard case slow path encounter last case method swizzled determined information available objcmsgsend alone instead need keep around side table boolean value must check call method swizzled runtime code interposed front runtime must update corresponding entry subsequent call go runtime update jeandaniel dupas pointed via email invalidation quite simple originally made since methodexchangeimplementations take two method parameter lack back pointer class come objectivec runtime deal invalidating method cache class letting refill uncached objcmsgsend path look add back real implementation would need support runtime something similar mark entry table invalid upon swizzling forcing method call go slow path objcmsgsend start unsetting entry uncached path verifies target swizzled go back optimized path check place call method directly try patched clang would emit llvm ir performed operation described whenever would emitted simple message send never touched llvm project implementation clumsy probably incorrect however work fine simple program tested try compiling llvm thing since needed name repository llvmproject henceforth naming technique expresscall making expresscall swiftcall would shorter significantly potential confusing aside originally started writing transformation pas convert method call detecting call objcmsgsend unfortunately turned code generator message sends era type information necessary predict target ended patch code generator gain access information fast yet better way see fast slow optimization highly synthetic benchmark one creates simple objectivec array type integer fill random number sum since horrible person get scroll past import foundation import objectivec import algorithm import array import chrono import dlfcnh import iostream import random import typetraits import unorderedmap import utility const auto benchmarksize const auto trial interface integerarray nsobject instancetype initwithnumbers nsuinteger number count nsuinteger count nsuinteger count nsuinteger numberatindex nsuinteger index nsuinteger directcount attribute objcdirect nsuinteger directnumberatindex nsuinteger index attribute objcdirect nsuinteger swizzledcount nsuinteger swizzlednumberatindex nsuinteger index end implementation integerarray nsuinteger number nsuinteger count instancetype initwithnumbers nsuinteger number count nsuinteger count self super init number number count count return self nsuinteger count return count nsuinteger numberatindex nsuinteger index return number index nsuinteger directcount return count nsuinteger directnumberatindex nsuinteger index return number index nsuinteger swizzledcount return nsuinteger swizzlednumberatindex nsuinteger index return index end enum benchmark expresscall messagesend direct swizzledexpresscall swizzledmessagesend end auto measure benchmark benchmark std generator std array nsuinteger benchmarksize number std uniformintdistribution nsuinteger distribution nsuintegermax benchmarksize std generate numbersbegin numbersend return distribution generator integerarray array integerarray alloc initwithnumbers numbersdata count numberssize nsuinteger sum auto time std chrono systemclock switch benchmark case benchmark expresscall nsuinteger arraycount sum array numberatindex break case benchmark messagesend nsuinteger reinterpretcast nsuinteger integerarray sel objcmsgsend array selector count sum reinterpretcast nsuinteger integerarray sel nsuinteger objcmsgsend array selector numberatindex break case benchmark direct nsuinteger arraydirectcount sum array directnumberatindex break case benchmark swizzledexpresscall nsuinteger arrayswizzledcount sum array swizzlednumberatindex break case benchmark swizzledmessagesend nsuinteger reinterpretcast nsuinteger integerarray sel objcmsgsend array selector swizzledcount sum reinterpretcast nsuinteger integerarray sel nsuinteger objcmsgsend array selector swizzlednumberatindex break default assert false make sure program actually calculation returning sum return std makepair std chrono durationcast std chrono microsecond std chrono systemclock time sum int main void swizzle dummy method point actual implementation auto integerarraycount classgetinstancemethod integerarrayclass selector count classreplacemethod integerarrayclass selector swizzledcount methodgetimplementation integerarraycount methodgettypeencoding integerarraycount staticcast bool dlsym dlopen null rtldlazy objcexpresscallintegerarrayswizzledcount true auto integerarraynumberatindex classgetinstancemethod integerarrayclass selector numberatindex classreplacemethod integerarrayclass selector swizzlednumberatindex methodgetimplementation integerarraynumberatindex methodgettypeencoding integerarraynumberatindex staticcast bool dlsym dlopen null rtldlazy objcexpresscallintegerarrayswizzlednumberatindex true std array benchmark benchmark end trial benchmark std unorderedmap benchmark std chrono microsecond time std randomdevice random std generator random auto benchmark end std fill benchmarksbegin trial benchmarksbegin trial benchmark time benchmark std chrono microsecond randomize order run benchmark iteration std shuffle benchmarksbegin benchmarksend generator std cout benchmarking average time sum benchmarksize number trial trial std endl auto benchmark benchmark time benchmark measure benchmark generator first auto name expresscall objcmsgsend objcdirect swizzled expresscall swizzled objcmsgsend auto benchmark end std cout namesbegin time benchmark count trial µs std endl return measure time take optimized implementation normal method call simulated calling objcmsgsend directly prevent compiler converting optimized form good measure throw attribute objcdirect implementation well swizzled version two test well simulate runtime setting flag expresscall indicate abandon trying directly call method finally reasonablesounding probably misguided attempt preventing cpu branch predictor cache funny thing randomize order test computer macbook pro retina early intel r core tm cpu result build binclang expresscallbenchmarkmm expresscallbenchmark isysroot xcrun showsdkpath isystem xcodeselect p isystem xcodeselect p fmodules fcxxmodules framework foundation build expresscallbenchmark benchmarking average time sum number trial expresscall objcmsgsend direct swizzled expresscall swizzled objcmsgsend result require explanation clear expresscall significantly faster anything call method marked attribute objcdirect compiler managed inline implementions two time difference overhead check whether expresscall target valid one half microsecond per trial work twothirds nanosecond per method call swizzled objcmsgsend manages take fastest path function coming two nanosecond overhead call swizzled expresscall extra check taking difference unswizzled objcmsgsend take longer count numberatindex selector end colliding method cache lookup causing additional scanning necessary future extension expresscall easily outperforms objcmsgsend speculation pay ideally almost time even though particularly optimized branch highly predictable expect modern cpu able speculate memory access ahead time current implementation slight cost term code size memory usage may worth changing frontend implementation selectively apply expresscall optimization perhaps could augmented profileguided optimization information additional runtime support even slow swizzled case could performed check perform exactly one top objcmsgsend may able skip finally extra space saving check could factored short function benefit inlining desired may still performance benefit pushing speculated target stack prior calling checking function conditionally tail call objcmsgsend
15,Lobsters,objectivec,Objective-C programming,The Four Stages of Objective-Smalltalk,https://blog.metaobject.com/2019/12/the-4-stages-of-objective-smalltalk.html,four stage objectivesmalltalk,objectivesmalltalk webscript shasta webscript shasta objectivec without c instant build etoilé project eero language beyond object architecture oriented programming approach composition refinement objectoriented design alan kay architecture oriented metaprogramming three example,one feature confusing objectivesmalltalk actually several part significant frequently focus one fine without realising part also exist unfortunate valuable complement fact described stage logically built top webscript shasta objectivec always great integration language particularly plethora scripting language tcl python ruby lisp scheme variant etc due fact runtime dynamic also simple cbased term implemented c peer c however suffer two somewhat disparate language competing object model runtimes storage strategy etc one language issue webscript part webobjects essentially objectivecscript language interpreted peer could even implement category existing objectivec object syntactically compatible often could copypaste code two close ideal scripting language environment however fact objectivec already hybrid ugly compromise mean compromise often longer make sense webscript environment example objectivec string need added character plain double quote already taken c string c string webscripts primitive type like int declared really object declaration dummy nop square bracket message sends needed objectivec distinguish message rest c syntax also irrelevant webscript first stage objectivesmalltalk wasis good aspect webscript without syntactic weirdness needed match syntactic weirdness objectivec needed objectivec jammed c one figured obvious fact language essentially variant smalltalk believe pretty much match brent simmons called shasta implementationwise work similarly webscript everything language object get converted tofrom primitive sending receiving message needed great much interactive programming model havehad one seems deteriorating speak video isolated fragment interacting tweaking full application running video objectivec without c course getting rid syntactic weirdness objectivec scripting language mean longer syntactically compatible objectivec shame shame syntactic equivalence objectivec webscript meant could easily move code script become stable want reuse copy paste code objectivec file good go need faster objectivec code want explore create variant etc paste webscript smooth integration scripting programming rare valuable obvious solution native aotcompiled version scripting language use replace objectivec many scripting language struggled mightily becoming compiled language either getting requiring jit compiler enormous size complexity engineering effort attack surface since semantic model scripting language ist objectivec know aotcompile language fairly straightforward compiler probably lot simpler even cobjectivec compiler currently used plugging existing toolchain nice idea seems obvious apparently nt everything far would taken together make really nice replacement objectivec much productive let face fun developer experience however even given advantage simpler language smoothly integrated scriptingprogramming instant build really clear yet another oo language really sufficient example etoilé project eero language never went anywhere despite nice beyond object architecture oriented programming ever since diplomarbeit approach composition refinement objectoriented design back interested software architecture architecture description language adls way overcoming problem constructing larger piece software one thing noticed early element adl closely match generalise element programming language example objectoriented language object generalises component message connector seemed specific pogramming language specialisation instantiation general architecture language explore idea needed language amenable experimentation malleable enough allow metasystem abstract away object message simplesmall enough make experimentation feasible simple variant smalltalk would trick mature variant tend push towards building rather abstracting eat young alan kay objectivesmalltalk fit bill perfectly substrate architectureoriented programming fact built onwith objectivec came largely connect cunix world smalltalk world mean already good start build reinventing wheel simply picking arguably successfulpopular architectural style oo subsuming callreturn style unix pipe filter rest surprisingly least even specific style appear align reasonably well element programming language oo already welldeveloped objective smalltalk dataflow map smalltalk assignment operator needed made polymorphic anyway rest least partially map nonmessage identifier also polymorphic smalltalk built abstraction objectivesmalltalk admit surprise well work work together yes thesis yes see confirmation bias everywhere also bit longshot architecture oriented metaprogramming architectural style described implemented framework interface hardcoded language implementation however three example feasible create linguistic support defining architectural style language allowing user define refine architectural style ongoing work one key takeaway stage already quite useful probably worthy project get even addition later stage another need get back getting stage ready nt actually needed stage least initially
16,Lobsters,objectivec,Objective-C programming,Technical Deep Dive: How does Retroactive work?,https://medium.com/@cormiertyshawn895/deep-dive-how-does-retroactive-work-95fe0e5ea49e,technical deep dive retroactive work,download xcode category nsobject put n hipster hat revise swizzling skill id bool return void self selector,stack trace fascinating look like sort access violation initializing font going fix swizzling comapplecoretext ctfontgetclientobject comappleuifoundation uifontgetextradata comappleuifoundation nsfont initwithtypefaceinfo key renderingmode comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments comappleprokit nscell proappearanceextensions prosetfont comappleappkit nstextfieldcell setfont comappleappkit nstextfieldcell init comappleappkit nsibobjectdata nibinstantiatewithowner option toplevelobjects comappleappkit nsnib instantiatenibwithexternalnametable option comappleappkit nsnib instantiatewithowner option toplevelobjects comappleappkit nsviewcontroller loadview comappleappkit nsviewcontroller loadviewifrequired comappleappkit nsviewcontroller view comappleappkit nswindowcontroller windowdidload comappleappkit nswindowcontroller window create new framework xcode swizzle broken method aperture fill selector removedit swizzle time swizzle existing app course use xcodeif xcode yet download xcode create new xcode project macos framework templatemake sure language objectiveccreate new filecreate objectivec filethe easiest way swizzle something make category nsobject call methodexchangeimplementations load name file swizzling name whatever wantif want swizzle problematic initializer nsprofont time put n hipster hat revise swizzling skillsimport objectivec runtime header let fun beginimport objcruntimeh refer back problem report suspect comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments obvious idea initialize regular system font instead whatever special pro font aperture trying failing initialize nsfont swizzledprosystemfontwithfontname nsstring name pointsize cgfloat size fontappearance id appearance usesystemhelveticaadjustments bool adjustment return nsfont systemfontofsize size use dynamic objectivec runtime exchange aperture implementation void load methodexchangeimplementations classgetclassmethod nsclassfromstring nsprofont nsselectorfromstring prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments classgetclassmethod self class selector swizzledprosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments wishful thinking initializing font fail probably get u next step
17,Lobsters,objectivec,Objective-C programming,High Performance Numeric Programming with Swift: Explorations and Reflections,https://www.fast.ai/2019/01/10/swift-numerics/,high performance numeric programming swift exploration reflection,high performance numeric programming swift exploration reflection swift web application command line tool basemath background chris lattner swift tensorflow serious effort differentiable programming named tensor differentiate swift llvm contributed protocoloriented programming value type automatic reference counting arc common problem gc finalizers copyonwrite protocol helpful guidance generic float double gyb basic math function performance trick result using c swift package manager reduction temporary storage wart dynamic feature objectivec notation tool thought packaging installation great stride c many significant restriction aten julia challenge solution cppsharp already done twice conclusion,high performance numeric programming swift exploration reflection written jan jeremy howard past week working building numeric programming library swift wait swift io programmer use building apps nowadays swift run linux mac used web application command line tool nearly anything else think using swift numeric programming training machine learning model area many people working little information around topic week research experimentation managed create couple library achieve speed carefully optimized vectorized c code whilst concise easy use article take journey show learned use swift effectively numeric programming include example mainly basemath library provides generic math function float double optimized version various collection along way plenty say positive negative swift language someone deep emotional connection favorite programming language like see criticism might want skip post future post also show get additional speed functionality interfacing intel performance library c background generally around new year try experiment new language framework one approach worked particularly well look people built favorite language book library approach led early user delphi typescript c anders hejlsberg used turbo pascal perl larry wall used rn jquery john resig read modern javascript learnt chris lattner wrote wonderful llvm creating new deep learning framework called swift tensorflow shorten decided take look note boring swift wrapper tensorflow first serious effort seen incorporate differentiable programming deep heart widely used language hoping give u language framework first time treat differentiableprogramming firstclass citizen programming world allow u thing like write custom gpu kernel swift provide compiletime check named tensor axis name size matching differentiate arbitrary code whilst also providing vectorized fused implementation automatically thing available least yet fact early day project nearly none deep learning functionality work yet fully expect happen eventually happens confident using differentiable programming swift far better experience swift language lucky enough bump chris recent conference told interest kind enough offer help get started swift always found work matter much productivity happiness work another excellent reason spend time project chris terrifically helpful supernice thanks chris swift swift generalpurpose multiparadigm compiled programming language started chris lattner apple supported many concept objectivec main language used programming apple device chris described language syntax sugar llvm since map closely many idea compiler framework coding around year time used dozen language even contributed always hope start looking new language mindopening new idea find swift definitely disappoint swift try expressive flexible concise safe easy use fast language compromise significantly least one area personal view language used enjoyed limitation found frustrating time python slow runtime poor support parallel processing easy use c c hard use c slow compile time fast c expressive javascript unsafe unless use typescript somewhat slow easy use flexible julia poor support general purpose programming fast expressive numeric programming edit may bit unfair julia come long way since last looked java verbose getting better particularly use kotlin le flexible due jvm issue somewhat slow overall language many useful application area c f perhaps fewest compromise major programming language still requires installation runtime limited flexibility due garbage collection difficulty making code really fast except window interface via ccli say swift actually pretty good job avoiding major compromise possibly rust used seriously make informed comment best area mentioned far either know another single language make claim note also downside address last section article look briefly turn concise create new array b add every element let bamap anonymous function automatic name first parameter optionally add name type like type b inferred automatically see lot done small amount code expressive line code work array object support certain operation defined sequence swift standard library also add support sequence object even add existing swift type type library soon object get functionality free flexible much swift use mobile apps desktop apps server code even system programming work well parallel computing also handle somewhat smallmemory device safe swift fairly strong type system good job noticing done something going work good support optional value without making code verbose need extra speed flexibility generally way bypass swift check fast swift avoids thing make language slow eg use garbage collection allows use value type nearly everywhere minimizes need locking us llvm behind scene excellent support creating optimized machine code swift also make easy compiler know thing immutable avoids aliasing also help compiler optimize see often get performance carefully optimized c code easy use one area perhaps bit compromise quite easy write basic swift program obscure type issue pop mysterious error message long way real site problem occurred installing distributing application library challenging also language changing lot better information online date requires change make work said far easier use something like c protocoloriented programming main trick let swift avoid compromise use protocoloriented programming basic idea try use value type much possible language easeofuse important reference type widely used since allow use garbage collection virtual function overriding superclass behavior forth protocoloriented programming swift way getting many benefit whilst avoiding overhead reference type addition avoiding reference type avoid complex bug introduced two variable pointing thing value type also great match functional style programming since allow better support immutability related functional concern many programmer particularly javascript world recently developed understanding code concise understandable correct leveraging functional style used language like c already familiar idea defining something struct give value type using class give reference type exactly swift handle thing get protocol let mention couple fundamental automatic reference counting arc copyonwrite automatic reference counting arc doc swift us automatic reference counting arc track manage app memory usage case mean memory management work swift need think memory management arc automatically free memory used class instance instance longer needed reference counting traditionally used dynamic language like perl python seeing modern compiled language quite unusual however swift compiler work hard track reference carefully without introducing overhead arc important handling swift reference type still need use sometimes also handle memory use value type object sharing memory copyonwrite semantics embedded reference type chris also mentioned number benefit provides deterministic destruction eliminates common problem gc finalizers allows scaling system tcan want gc eliminates unpredictableunreproducible pause copyonwrite one major problem value type language something like big array want pas whole thing function since would require lot slow memory allocation copying language use pointer reference situation swift however pass reference original memory reference mutates object get copied done behind scene automatically get best performance characteristic value reference type combined refered copyonwrote rather delightfully refered doc cow yes cow face emoji cow also help programming functional style yet still allowing mutation without overhead unnecessary copying verbosity manual reference protocol value type use inheritance hierarchy get benefit objectoriented programming although still use use reference type also supported swift instead swift give u protocol many language typescript c java idea describes property method object contain first glance protocol look lot like interface instance definition basemath library composedstorage protocol describing collection wrap collection defines two property data endindex one method subscript special method swift provides indexing functionality like array protocol definition simply say anything conforms protocol must provide implementation three thing public protocol composedstorage associatedtype storage mutablecollection storageindexint typealias indexint var data storage get set var endindex int get subscript int storageelement get set generic protocol generic protocol use type marker like generic class instead use associatedtype keyword case composedstorage saying data attribute contains something generic type called storage conforms mutablecollection protocol type turn associatedtype called index must type int order conform composedstorage also say subscript method return whatever type storage element associatedtype contains see protocol provide quite expressive type system look see something also implementation provided protocol public extension composedstorage subscript int storageelement get return data set data newvalue var endindex int return datacount thing get really interesting providing implementation automatically adding functionality object conforms protocol instance entire definition basemath alignedstorage class provides arraylike functionality internally us alignedmemory often required fast vectorized code public class alignedstorage supportsbasicmath basevector composedstorage public typealias elementt public var data unsafemutablebufferpointer public required init data unsafemutablebufferpointer selfdatadata public required convenience init count int selfinit unsafemutablebufferpointer count public required convenience init array array selfinit unsafemutablebufferpointer array deinit unsafemutablerawbufferpointer data deallocate public var p mutptrt get return datap public func copy self return init datacopy see much code yet class provides functionality protocol randomaccesscollection mutablecollection expressiblebyarrayliteral equatable basevector together include hundred method map find droplast distance possible protocol class conforms basevector composedstorage provide functionality protocol extension either directly protocol turn conform incidentally may noticed defined alignedstorage class struct despite earlier hype value type important realize still situation class required apple documentation provides helpful guidance topic one thing structs yet support deinit ability run code object destroyed case need deallocate memory done object need deinit mean need class one common situation find really need use protocol want behavior abstract class swift support abstract class get effect using protocol eg code composedstorage defines data implement protocol extension therefore act like abstract property true multiple inheritance supported swift class conform multiple protocol extension sometimes refered mixins swift protocol extension share lot idea trait rust typeclasses haskell generic float double numeric programming creating library probably want transparently support least float double however swift make easy protocol called binaryfloatingpoint theory support type unfortunately three math function swift defined protocol ab max min standard math operator could course simply provide separate functionality type got deal creating two version everything user deal problem interestingly enough found discussion issue online swift library suffer issue multiple place discussed swift used much numeric programming kind issue deal btw search numerical programming code online often see use cgfloat type suffers objectivec naming convention limitation learn later provides support one float double depending system running fact cgfloat exists linux port swift rather odd created applespecific compatibility reason almost certainly something wanting use resolving problem actually fairly straightforward good example use protocol basemath created supportsbasicmath protocol extracted public protocol supportsbasicmath binaryfloatingpoint func self func logb self func nearbyint self func rint self func sin self tell swift float conforms protocol also provide implementation method extension float supportsbasicmath inlinable public func float return self inlinable public func logb float return foundationlogb self inlinable public func nearbyint float return foundationnearbyint self inlinable public func rint float return foundationrint self inlinable public func sin float return foundationsin self library code simply use supportsbasicmath constraint generic type call usual math function directly swift already provides support basic math operator transparent way anything make work thinking must major pain write wrapper function handy trick used meant computer trick use gyb template autogenerate method using python code like f binfs func f b self self end f look swift code base see trick used liberally example define basic math function hopefully future version see generic math function standard library meantime use supportsbasicmath basemath performance trick result one really cool thing swift wrapper like runtime overhead see marked inlinable attribute tell llvm ok replace call function actual function body kind zerooverhead abstraction one important feature c really amazing see concise expressive language swift let experiment see work running simple benchmark adding every element array float swift assuming already allocated array appropriate size use code note benchmark simple function basemath time block code benchmark title swift add swift add m million floating point addition millisecond pretty impressive look happens try one minor tweak benchmark title swift ptr add let swift ptr add m nearly code yet twice fast happened basemath add p property array return pointer array memory code using pointer instead array object normally swift handle complexity cow fully optimize loop like using pointer instead skip check swift run code full speed note due copyonwrite possible array move assign also move thing resize therefore grab pointer time need code still pretty clunky swift make easy u provide elegant idiomatic interface added new map method array put result preallocated array instead creating new array definition map us typealiases basemath make bit concise inlinable public func map basevector f unaryf dest selfelementtelement let psrc p let pdest destp let n count n pdest f psrc see plain swift code cool thing let u use clear concise code still get performance saw benchmark title map add map add m think quite remarkable able create simple api fast pointer code class user complexity entirely hidden away course really know fast yet compared c let next using c one really nice thing swift easy add c code write use external c library use c code simply create new package swift package manager spm pop c file source directory h file sourcesinclude directory oh btw basemath h file entirely autogenerated c file using gyb level c integration extremely rare implication huge mean every c library including functionality built operating system optimized math library tensorflow underlying c api forth accessed swift directly reason need drop c without manual interfacing code extra build step sum function c float double version similar two generated single gyb template void smaddfloat const float psrc const float val float pdst const int len int len pdst psrc val call need pas count basemath add c property array purpose alternatively could simply use numericcast result benchmark title c add smaddfloat c add m basically speed swift encouraging result show get performance optimized c using swift swift idiomatic concise swift thanks method like reduce map look much closer math equation language fast reduction let try different experiment taking sum array idiomatic swift code benchmark title reduce sum reduce sum m thing loop benchmark title loop sum size loop sum m let see earlier pointer trick help time benchmark title pointer sum let size pointer sum m well odd faster suggests getting best possible performance let switch c see performs float smsumfloat const float psrc const int len float r int len r psrc return r result benchmark title c sum smsumfloat c sum m compared performance intel optimized performance library version sum found even faster handoptimized assembler get perform better swift however need know little trick provided llvm vectorization doc compile ffastmath flag numeric programming like recommend always use least flag used experiment although also add marchnative change optimization level ofast xswiftc ounchecked xcc ffastmath xcc need flag strictly speaking addition associative due quirk floating point practice unlikely something people care default clang use strictly correct behavior mean vectorize loop simd ffastmath telling compiler mind treating addition associative amongst thing vectorize loop giving u improvement speed important thing remember good performance c code like ensure const marked everything change done code unfortunately seem currently way get swift vectorize reduction least use c get good performance limitation language optimization swift team gotten around implementing yet good news basemath add sum method array us optimized c version use basemath get performance automatically result test failure manage get pure swift reach performance c least got nice c version call swift let move another test see get better performance avoiding reduction temporary storage want function reduction sumofsquares ideally like able combine map style sum without getting performance penalty swift unoptimized reduction make work trick use temporary storage use map function store result preallocated memory pas c sum implementation want something like static variable storing preallocated memory deal locking handle contention thread avoid use thread local storage tl like language swift provides tl functionality however rather make part core language like say c provides class access threadcurrentthreaddictionary basemath add preallocated memory dictionary make available internally tempstore internal implementation unary function reduction also binary ternary version available inlinable public func sum f unaryf element selfmap f tempstore return tempstoresum use follows benchmark title lib sum sqr floatsqr lib sum sqr m provides nice speedup regular swift reduce version benchmark title reduce sumsqr reduce sumsqr m c version float smsumsqrfloat const float restrict psrc const int len float r pragma clang loop interleavecount int len r sqrf psrc return r let try benchmark title c sumsqr smsumsqrfloat c sumsqr m c implementation sum standard unary math function made available basemath call implementation simply using benchmark title lib sumsqr c sumsqr m summary whilst swift version using temporary storage calling c final sum twice fast using reduce using c another time faster wart see lot like numeric programming swift get performance optimized c convenience automatic memory management elegant syntax concise flexible language used python fastest used c actually fortran let go stack high bar idea could compare single language flexibility python speed c amazing achievement overall view general take bit code swift python write stuff want write fewer way abstract common code instance use decorator lot python use write load code use args kwargs lot new dynamic feature swift provide functionality go far zip multiple variable together swift zip pair pair multiple variable use nested parens destructure code write get type lined nicely also find swift performance harder reason optimize c c quirk around performance need use const sometimes even requiring restrict help compiler generally better documented better understood consistent also c compiler clang gcc provide powerful additional capability using pragmas omp loop even autoparallelize code said swift closer achieving combination python expressiveness c speed language used issue still aware one thing consider protocoloriented programming requires different way thing probably used long run probably good thing since learning new programming style help become better programmer could lead frustration first week issue particularly challenging swift compiler often idea source protocol type problem really ability guess type still pretty flaky extremely minor change changing name type changing type constraint defined change something used work something spit four screen error message advice try create minimal version type structure standalone test file get thing working first note however ease use generally requires compromise python particularly easy perfectly happy shoot foot swift least make sure first know untie shoelace chris told pitch building swift first place important thing optimize end end time get correct implementation whatever trying includes time pound code time debug time refactormaintain making change existing codebase enough experience yet suspect metric swift turn great performer part swift fan compromise made due apple history objectivec packaging system community lack c support precise largely part swift ecosystem fan language quite delightful ecosystem fixed situation swift programmer deal let look issue turn objectivec objectivec language developed designed bring objectoriented feature smalltalk c successful project picked next basis programming nextstep next acquisition apple became primary language coding apple device today showing age constraint imposed decision make strict superset c instance objectivec support true function overloading instead us something called selector simply required keyword argument function full name defined concatenation function name selector name idea also used applescript provides something similar allow name print mean different thing different context print page print document print page thru document applescript turn inherited idea hypertalk language created apple muchloved missed hypercard program given history surprising today idea required named argument something folk apple quite attachment perhaps importantly provided useful compromise designer objectivec since able avoid adding true function overloading language keeping close compatibility c unfortunately constraint impact swift today year situation led introduction objectivec swift provide true function overloading particularly important numeric programming really want create whole separate function float double complex number quaternion default keyword name still required lead verbose visually cluttered code apple style guide strongly promotes style coding objectivec swift style guide closely mirror rather allowing programmer really leverage swift unique capability opt requiring named argument prefixing parameter name basemath us everywhere optional argument needed another area thing get rather verbose come working foundation apple main class library also used objectivec swift standard library missing lot functionality need often need turn foundation get stuff done enjoy pleasure using elegantly designed language swift something particularly sad using access unwieldy library foundation instance swift standard library provide builtin way format float fixed precision decided add functionality supportsbasicmath protocol code extension supportsbasicmath public func string digit int string let fmt numberformatter fmtminimumfractiondigits digit fmtmaximumfractiondigits digit return fmtstring selfnsnumber self fact add functionality float double writing extension really cool ability handle failed conversion swift operator look verbosity code actually use numberformatter class foundation even accept float double awkward nsnumber type objectivec clunky workaround lack generic objectivec add nsnumber property supportsbasicmath casting swift language help support concise style f style closure concision important numeric programming since let u write code reflect closely math implementing understand whole equation glance masterful exposition much see iverson turing award lecture notation tool thought objectivec also namespaces mean project pick letter prefix add symbol foundation library still us name inherited objectivec find using type like cgfloat function like cfabsolutetimegetcurrent every time type one symbol sure baby unicorn cry swift team made surprising decision use objectivec implementation foundation library running swift apple device use native swift library linux result sometimes see different behavior platform instance unit test framework apple device unable find run test written protocol extension work fine linux overall feel like constraint history objectivec seem bleed swift programming often time happens real friction pop time however issue seem reducing hope future see swift break objectivec shackle instance perhaps see real effort create idiomatic swift replacement objectivec class library using python lot last couple year one thing always bothered many people python community ever used one language since great beginner language widely taught undergraduate result lack awareness different language thing different way choice pro con instead python world tendency folk think python way one true way seeing something similar swift way even worse swift programmer got start objectivec programmer lot discussion see online objectivec programmer writing swift style closely parallel thing done objectivec nearly nearly programming xcode almost certainly least favorite ide except wonderful swift playground feature lot advice find online show solve swift problem getting xcode thing rather writing code swift programmer writing io apps also find lot guidance lay mobile gui almost information thing like distribute command line program linux compile static library general linux support swift still new much information available use many library tool work linux time tracking problem protocol conformance trying figure optimize piece code information could find would mailing list discussion amongst apple swift language team discussion tend focus innards compiler library rather use big missing middle ground app developer discussing use xcode swift language implementation discussing modify compiler good community forming around around discorse forum http forumsswiftorg hopefully time turn useful knowledge base swift programmer packaging installation swift officially sanctioned package system called swift package manager spm unfortunately one worst packaging system ever used noticed nearly every language creating package manager reinvents everything scratch fails leverage success failure previous attempt swift follows unfortunate pattern truly excellent packaging system best perhaps still perl cpan includes international automated testing service test package wide range system deeply integrates documentation excellent tutorial much another terrific modern system conda handle languagespecific library focus python also handle automatically installing compatible system library binary manages everything home directory even need root access work well linux mac window handle distribution compiled module source spm hand none benefit system even though swift compiled language provide way create distribute compiled package mean user package install prerequisite building spm let describe build package instance use basemath remember add flag required good performance build something us way dependency handled really awkward git tag branch used dependency easy way switch local dev build packaged version like instance e flag pip conda develop command instead modify package file change location dependency remember switch back commit would take far long document deficiency spm instead work assumption useful feature appreciated whatever packaging system using probably spm hopefully someone get around setting condabased system swift start using also installation swift mess linux instance ubuntu supported different version require different installers mac swift version tied xcode version confusing awkward way command line xcode version somewhat separate yet somewhat linked way make brain hurt conda seems like could provide best option avoid since single conda package used support flavor linux mac also supported way work done get swift conda would possible say conda install swift system everything would work would also provide solution versioning isolated environment complex dependency tracking window luck old unofficial port cygwin swift run fine window subsystem linux official native window swift yet sadly excellent news front hero named saleem abdulrasool made great stride towards making complete native port entirely indepdently last day gotten point vast majority swift test suite pass c whilst apple went objectivec c object solution rest world went c eventually objectivec extension also added c create objectivec attempt unify concept across language resulting language mutant many significant restriction however nice subset language get around biggest limitation c instance use function overloading access rich standard library unfortunately swift interface c even something simple header file containing overloaded function cause swift language interop fail big problem numeric programmer many useful numeric library today written c instance aten library heart pytorch c good reason numeric programmer lean towards c provides feature needed concise expressive solution numeric programming problem example julia programmer rightly proud easy support critical broadcasting functionality language documented julia challenge c challenge elegant fast solution find something like pure c however mean large increasing number important building block numeric programming bound swift programmer serious problem write plain c wrapper c class create swift class us wrapper big boring job sure many people likely embark language shown potential way around instance c window provides work ijw interfacing ccli superset c support net even interestingly cppsharp project leverage llvm autogenerate c wrapper c code calling overhead solving problem easy swift swift us llvm already interface c objectivec perhaps better placed come great solution nearly language except perhaps julia since already done twice conclusion swift really interesting language support fast concise expressive numeric programming swift tensorflow project may best opportunity creating programming language differentiable programming first class citizen swift also let u easily interface c code library however swift linux still immature packaging system weak installation clunky library suffer rough spot due historical tie objectivec stack data science world mainly stuck using either r least pleasant language ever used beautifully designed data munging plotting library anywhere python painfully slow hard parallelize extremely expressive best deep learning library available really need another option something fast flexible provides good interop existing library overall swift language look exactly need much ecosystem need replaced least dramatically leveledup data science ecosystem speak although project seems likely create important piece really good place spending time interested part something huge amount potential really great people working make happen ok helping smooth wart along way
18,Lobsters,objectivec,Objective-C programming,objc_msgSend’s New Prototype,https://www.mikeash.com/pyblog/objc_msgsends-new-prototype.html,objcmsgsend new prototype,prototype changed system v abi variation standard abi click information comment r feed page pygments,objcmsgsend new prototype apple new os looked documentation may noticed prototype objcmsgsend changed previously declared function took id sel variadic argument returned id declared function take return void similar function like objcmsgsendsuper also became voidvoid change true prototypethere big surprisingly difficult question behind true prototype objcmsgsend say parameter actually take actually return question nt straightforward answer may heard objcmsgsend implemented assembly commonly called need every bit performance get true entirely complete possible implement c speed fast path objcmsgsend critical thing load class object look selector class method cache jump method implementation found cache perspective method implementation look like caller invoked directly objcmsgsend jump straight method implementation without making function call effectively disappears job done implementation careful disturb register used pas argument function caller call objcmsgsend going directly call method implementation passing parameter way would direct function call objcmsgsend look implementation jump parameter still exactly implementation expects implementation return return directly caller return value provided standard mechanism answer question prototype objcmsgsend method implementation end calling wait nt whole point dynamic method lookup message sending nt know method implementation calling true however know type signature implementation compiler get information declaration method interface protocol block us generate appropriate parameter passing return value fetching code override method compiler complains nt match type signature possible work around hiding declaration adding method runtime case end type signature method implementation nt match call site behavior call depends two type signature match abi level anything perfectly reasonable correct behavior abis match parameter happen line complete nonsense nt hint answer article question old prototype worked circumstance abis matched failed strangely others abis nt match new prototype never work unless cast appropriate type first long cast correct type always work new way thing thus encourages thing correctly make harder thing wrong minimal prototypealthough prototype objcmsgsend depends method implementation called two thing common across method implementation first parameter always id self second parameter always sel cmd number type additional parameter unknown return type two parameter known objcmsgsend need two piece information perform method dispatch work always place able find could write approximate generalized prototype objcmsgsend represent objcmsgsend id self sel cmd mean nt know depends particular method implementation called course c way represent wildcard like return value try pick something common since objectivec object would make sense assume return value id id objcmsgsend id self sel cmd cover case return value object also case void case different type value nt used parameter c actually way indicate arbitrary number parameter arbitrary type form variadic function prototype ellipsis end parameter list mean variable number arbitrarily typed value follows id objcmsgsend id self sel cmd exactly prototype used recent change abi mismatchesthe pertinent question runtime whether abi call site match abi method implementation say receiver retrieve parameter location format caller pass caller put parameter rdx implementation need retrieve parameter rdx otherwise havoc ensue minimal prototype may able express concept passing arbitrary number arbitrary type actually work runtime need use abi method implementation implementation almost certainly using different prototype usually fixed number argument guarantee abi variadic function match abi function fixed number argument platform match almost perfectly others nt match intel abilet look concrete example macos us standard system v abi ton detail abi focus basic parameter passed register integer parameter passed register rdi rsi rdx rcx order floating point parameter passed sse register calling variadic function register al set number sse register used pas parameter integer return value placed rax rdx floatingpoint return value placed abi variadic function almost identical abi normal function one exception passing number sse register used al however harmless using variadic abi call normal function normal function ignore content al c language mess thing bit c specifies certain type get promoted wider type passed variadic argument integer smaller int char short get promoted int float get promoted double method signature includes one type possible caller pas parameter exact type using variadic prototype integer nt actually matter integer get stored bottom bit appropriate register bit end place either way however catastrophic float converting smaller integer int requires padding extra bit converting float double involves converting value different structure altogether bit float nt line corresponding bit double try use variadic prototype call nonvariadic function take float parameter function receive garbage illustrate problem quick example use old variadic prototype objcmsgsend define objcolddispatchprototypes import foundationfoundationh import objcmessageh interface foo nsobject end implementation foo void log float x printf fn x end int main int argc char argv id obj foo new obj log float mpi objcmsgsend obj selector log float mpi produce output see value came correctly written message send got completely mangled passed explicit call objcmsgsend remedied casting objcmsgsend right signature recall objcmsgsend actual prototype whatever method end invoked correct way use cast corresponding function pointer type call work correctly void id sel float objcmsgsend obj selector log mpi abilet look another relevant example io us variation standard abi integer parameter passed register floating point parameter passed additional parameter passed stack return value placed register register would passed parameter true normal parameter variadic parameter never passed register always passed stack even parameter register available need careful analysis work practice abis completely mismatched method called uncast objcmsgsend receive garbage parameter new prototypethe new prototype short sweet nt correct however neither old prototype one much obviously incorrect good thing old prototype made easy use without casting worked often enough could easily end thinking everything ok hit problematic case bug unclear prototype nt even allow pas two required parameter self cmd call parameter immediately crash pretty obvious went wrong try use without casting compiler complain much better weird broken parameter value still function type still cast function pointer appropriate type invoke way work correctly long get type right enjoy article selling whole book full volume ii iii available epub pdf print ibooks kindle click information comment comment r feed page add thought post comment spam offtopic post deleted without notice culprit may publicly humiliated sole discretion javascript required submit comment due antispam measure please enable javascript reload page code syntax highlighting thanks pygments
19,Lobsters,objectivec,Objective-C programming,Darling Progress Report Q2 2019,http://blog.darlinghq.org/2019/07/darling-progress-report-q2-2019.html,darling progress report,summary progress darling community discord http darling core james urquhart kamillys new website sergey project website appkit kamillys nested framework andrew framework nesting v reexporting foundation curioustommy kamillys corefoundation improved tommy going forward open issue github wiki,summary progress excited say april june saw community involvement ever many pull request submitted spanned bug fix low level assembly higher level module appkit framework thanks everyone contribution hope level engagement continue darling community discord relied solely github issue long time become apparent platform people ask general question share knowledge coordinate effort necessary official discord server open everybody join order discus anything darling related invite link http feel free join invite anyone may interested darling core community submitted pull request ever received james urquhart pull request gave u stub many framework including drawsprocket agl carbon coreservices applicationservices wow list thank james james also fixed low level bug system call large number argument would nt work properly application finally fixed problem darling using clocksleep instead clocknanosleep bug stat system call commits sent kamillys gave u stub addressbook carbon framework new website sergey remade project website using hugo new website look modern adapts mobile device refresh look snazzy frequently asked question section site perfectly placed answer commonly sought information whole page right balance content without overwhelming viewer technical detail new site also highlight key feature goal darling including fast free compatible easy use native appkit continued improvement seen implementation appkit sergey squashed bug including crashing spelling engine present pointer wrong printing format got pasteboard work appkit ctrlcctrlv away even pretend command want github user kamillys also submitted pr gave appkit stub nsapplication nsworkspace appkit also also reexports applicationservices solving crash due undefined symbol program loaded nested framework framework macos appear one framework hood made subframeworks usually reexported linked appears one big framework build system nt support nested framework june andrew added support system framework accelerate file structure macos accomplished using cmake magic carefully replicating structure system framework framework nesting v reexporting reexporting dynamic library present also containing symbol library framework reexporting symbol typically function constant class link appkit without linking foundation use foundation symbol nested framework one framework placed inside case larger framework broken subframeworks like coreservices applicationservices need parent framework reexport subframeworks order appear one framework another use case nesting framework framework relies supporting library meant used framework like keeping private case parent framework would nt reexport would instead link child framework foundation good amount attention received foundation time nskeyedarchivernskeyedunarchiver many bug fix improvement submitted curioustommy stability area important nskeyedarchiver used serialize object extensively almost every cocoa application addition improvement tommy gave foundation symbol nsscriptclassdefinition category nsobject fixed issue macro nsobjcruntimeh stub also added kamillys nsscriptclassdescription nscallbacks function foundation missing change improve general compatibility name implies foundation fundamental relied many library application corefoundation error handling nsset improved tommy better checking parameter particularly someone try insert nil object set nt supposed possible possible thanks tommy going forward strong community involvement always exciting motivating received lot feedback pull request question way contribute learn join discord linked top post first trying help open source project may seem unclear help none open issue github jump discord perfect place ask start wiki also useful contains build instruction workarounds known build problem also nice see community step fix specific bug anticipated last progress report release macos coming month drop support application darling plan continue supporting application long time gui support improves strong option application stop working due lack capability see month darling project
20,Lobsters,objectivec,Objective-C programming,6 mac apps that fit everyone,https://sobolevn.me/2019/07/6-best-mac-apps,mac apps fit everyone,tldr dotfiles command line productivity using better cli sindresorhus done openinterminallite spectacle wonderful repo use lookandfeel online,often see list awesome apps going use one fit one different list contains simple yet powerful productivity booster totally fit everyone tldr list mac apps using found dotfiles rest setup previous ontopic article command line productivity using better cli new project sindresorhus simple yet amazing reason traditional mac clock show date calendar someone asks date today open calendar app seriously app solves improved clock calendar timezones new app announced might also want hide original clock status bar done next app allows highlighting currently focused window sound like much feel app amazing work great light dark background watch video look awesome traveling around file finder might need open current folder inside terminal draganddrop terminal many user like use openinterminallite add new icon finder open anything inside terminal editor single click spectacle allows using keyboard shortcut reorganize window desktop lifesaver people lot opened window complex workflow want ide opened next browser two key press want terminal sorted two key press simple whole set different quick preview plugins wonderful repo amazing thing quick preview like highlight code allows view image size highlight prettyprints transforms json really mention flux everyone already one installed flux turn monitor color warm night allows eye brain rest use try demo lookandfeel online apps use problem solve provide like favorite apps dotfiles comment
21,Lobsters,objectivec,Objective-C programming,Skiptracing: Reversing Spotify.app,https://medium.com/@lerner98/skiptracing-reversing-spotify-app-3a6df367287d,skiptracing reversing spotifyapp,skiptracing reversing spotifyapp project data http hooking finding hook http githubcomnevynspmediakeytap http hookcase http githubcomstevenmichaudhookcase finding hooking rest http conclusion,skiptracing reversing spotifyappi one personal project finish think software developer relate awesome idea due work responsibility end forgotten buried tasksnow success story one said project completed story longforgotten project revived given new life fact hoping writing force eventually finish project enough introduction let get itthe projectthe goal project build spotify client learns listening habit skip song would normally skip like many program desire come laziness want create find playlist mood certain music want select song library shuffle rest song flow deleted queueto accomplish need learn sort model able perform task maybe future post able train model first need data train withthe datai basically want entire listening history including song skip fairly straightforward get extended history even though spotify api allows get last played song set cron job repeatedly poll endpoint effectively keeping track every listen code posted http hard part tracking skip spotify web api provides endpoint past created service control playback using spotify applescript api rest post pertain macos spotify client could use service keep track skipped felt like shying away challenge else could accomplish hookingi recently learned process called hooking intercept function call made target binary thought would perfect way track skipsthe common type hook interpose hook type hook overwrites relocation plt exactly mean plt procedure linkage table allows code reference external function think libc without knowing function memory reference entry plt linker performs relocation function symbol plt runtime one benefit approach external function loaded different address relocation plt need changed every reference function codeso create interpose hook say printf whenever process hooking call printf implementation printf called instead libc oftentimes custom library also call standard implementation got little bit background belt hooking almost ready try inserting hook spotify first need figure want hookfinding hookas stated earlier interpose hook created external function look function libc objectivec runtimewhile researching hook thought good place start looking would spotify handle medium control key macbook seemed safe assume handler key would call function called say next button clicked spotify app eventually came across spmediakeytap library http githubcomnevynspmediakeytap figured give shot see whether spotify copy pasted code library would make life whole lot easierin spmediakeytap library method startwatchingmediakeys ran string command spotify binary see method sure enough bingo load spotify binary ida free version course search string find corresponding method partial disassembly startwatchingmediakeysif look corresponding source code function find interesting parameter tapeventcallback cgeventtapcreate function source code startwatchingmediakeysif look back disassembly see subroutine passed tapeventcallback parameter look either source code disassembly function see one library function cgeventtapenable called cgeventtapenable called tapeventcallbacklet try hook functionthe first thing need create library define custom cgeventtapenable fairly simple following code include corefoundationcorefoundationh include dlfcnh include stdlibh include stdioh void cgeventtapenable cfmachportref tap bool enable typeof cgeventtapenable oldtapenable printf hooked n oldtapenable dlsym rtldnext cgeventtapenable oldtapenable tap enable dlsym function call get address actual library cgeventtapenable function call old implementation accidentally break anything let compile library like credit http gcc fnocommon c filename c gcc dynamiclib library name filename ogreat let try running spotify inserting hook dyldinsertlibraries library name applicationsspotifyappcontentsmacosspotify hit enter uh oh spotify opened fine apple system integrity protection sip let u load unsigned library seems sort complaint codesigning luckily member apple reasonably priced developer program codesign library crisis averted let sign library certificate run previous command surprisingly apple let insert library signed old identity one used signing original binary look like find another way dig hook spotifyas side note astute reader might notice function hooking cgeventtapenable called medium key event time even could insert hook would triggered edge case likely seen output section main purpose detail initial fail oversight serve learning experiencehookcaseafter digging came across awesome library hookcase http githubcomstevenmichaudhookcase hookcase let u implement much powerful type hook interpose hook patch hookpatch hook inserted modifying function wish hook trigger interrupt interrupt handled kernel transfer execution personal code interested highly recommend reading hookcase documentation much detailedpatch hook allow u hook call external function function within target binary since rely plt hookcase provides u framework insert patch andor interpose hook well kernel extension handle interrupt generated patch hook run custom code truly great framework invaluable projectfinding way hook function within spotify binary one question let revisit spmediakeytap source code see medium control key handled callback function see nxkeytypeprevious nxkeytypeplay etc pressed execute handleandreleasemediakeyevent selector delegate notified said selector let look delegate method repo turn lay template handling key let search function receivedmediakeyevent ida look graph view corresponding function look pretty similar see one common function called type key integer parameter set distinguish let hook see log key pressedwe see disassembly get two parameter pointer playerdelegate property sptclientappdelegate singleton integer specifying type event occurred pauseplay next previous looking include highly recommend check see actually wrapper contains meat woah look complex let try break bitlooking structure graph single node towards top many outgoing edge ida helpfully suggests switch statement esi second integer parameter described earlier look like spotify handling little previous pauseplay next though let focus block handle next admittedly took time decipher want draw attention call line fourth bottom look case find similar pattern calling register seems like good function look know let crack open new tool debugger lot trouble initially trying debug spotify could due masterful debugger think came pretty clever solutionwe first set hook trigger breakpoint within code executing assembly instruction int debugger like gdb lldb use trigger breakpointshere hook look like hookcase framework adding hookcase template library also add userhooks array compile using template makefile hookcase provides substituting filename course library inserted spotify following command hcinsertlibrary full path hook dylib applicationsspotifyappcontentsmacosspotifywe run lldb attach running spotify process like continuing past initial trap try pressing spotify active window first press may open itunes int line hook triggered debuggerwe step reach entrypoint notice pc offset address one shown ida honestly best grasp happens assume due process loaded memory current process push instruction located ida address instruction give u offset ida address call instruction add offset address set breakpoint accordingly b continuewhen hit target instruction print content register subtract offset address voila get titular address hook function confirm suspicion add userhooks array compile run lo behold time press click next button spotify app message loggednow hooked skip function resti post rest code go process reverse engineering rest post already pretty longin short also hooked previous function good exercise following along either hook first check past halfway current song anything assuming gotten bored song fit back pop last skipwhere way found check current song past halfway deserves word initial way actually call popen run corresponding applescript command feel righti ran classdump spotify binary found two class spapplescriptobjectmodel spapplescripttrack method expose necessary property need playback position duration track id hooked getters property called next back hook think make sense swizzle trouble getting work use file keep track skip first line hold number skip skip increment counter write track id timestamp file line specified counter back press simply decrement counter way press back button set file write new skip one backtracked anyways code http hope enjoyed post learned something know learned hell lot throughout process let know think think could done anything betterdifferently thanks
22,Lobsters,objectivec,Objective-C programming,The C Object System,http://ldeniau.web.cern.ch/ldeniau/html/cos-dls09-draft.pdf,c object system,,obj pgfprgb pattern devicergb endobj obj length filter flatedecode stream xڝ vk ا u j ev ח j pimem nz q r oeq tυ hf g db w djfk w p ѵ c n b k endstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream k z ep p j dܟ k v xm j ʣ wdll ʆ lt od xщ b f tn ct jx vyم p ưǡz v q q endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename imgconceptspdf ptexpagenumber ptexinfodict r bbox resource procset pdf text imageb imagec imagei colorspace r r font r xobject r r r r r r r r r r r length filter flatedecode stream vkc k ƭ c ww yh wjkj p oxb cbq ƈ b h endstream endobj obj title scala scalable language author laurent deniau creator keynote producer mac o x quartz pdfcontext creationdate moddate endobj obj iccbased r endobj obj iccbased r endobj obj type font subtype truetype basefont bzhlkncourierboldoblique fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj type font subtype truetype basefont blwdxdcapitalsregular fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj length r type xobject subtype image width height colorspace r interpolate true smask r bitspercomponent filter flatedecode stream eu uьly ń բ pŋ qvd x k qvnl ntwo ʐm l zd n v bt sm iok l r eqc ip j endstream endobj obj length r type xobject subtype image width height colorspace r interpolate true smask r bitspercomponent filter flatedecode stream cc r fh
23,Lobsters,objectivec,Objective-C programming,"LLVM JIT, Objective-C and Swift on macOS: knowledge dump",https://stanislaw.github.io/2018/09/03/llvm-jit-objc-and-swift-knowledge-dump.html,llvm jit objectivec swift macos knowledge dump,mutation testing swift mull could work looking contributor tl dr anyone want run swift llvm jit mull mullprojectllvmjitobjc selector unrecognised invoking objectivec method using llvm executionengine llvmdev possible execute objectivec code via llvm jit registered objectivec code macho binary objectivec code llvm runtimedyld appendix example macho file simple objectivec code llvm jit section memory manager registration selector registration class registration category known issue known issue duplicate definition class known issue objcreadclasspair work objcallocateclasspair conclusion llvmjitobjc appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code appendix b altenative approach objectivec registration using clang known issue objcreadclasspair work objcallocateclasspair,post counterpart another post mutation testing swift mull could work looking contributor tl dr possible run objectivec swift code llvm jit macos system one way make work subclass sectionmemorymanager used llvm jit engine intercept memory section related objectivec get allocated memory find objectivec metadata section parse objectivec class information metadata use number objectivec runtime api method register found objectivec class objectivec runtime although approach target objectivec code objectivec runtime also seems enable support combined swift objectivec code given objectivec class registered swift code enabled objectivec interoperability seems run without major issue llvm jit information actual summer based detail llvm jit objectivec runtime found anyone want run swift llvm jit want llvm jit run swift objectivec code want mull mutation testing tool support programming language mull accepts input program precompiled llvm bitcode find performs mutation program run program numerous modified mutated clone using llvm jit running program mutation memory llvm jit save time mull recompile relink program scratch mull find performs mutation llvm ir level never go back ast level approach give great advantage performance also imposes constraint mull support programming language run llvm jit case important llvm jit run swift objectivec prototype code found mullprojectllvmjitobjc research topic started stackoverflow topic selector unrecognised invoking objectivec method using llvm executionengine information found llvmdev thread created llvmdev possible execute objectivec code via llvm jit via mailing list registered objectivec code objectivec code known objectivec runtime code activated almost run always something objectivec runtime like kind code following popular error get unregistered objectivec code objectivec selector registered get exception unregistered selector selector message match selector known objective c runtime register objectivec class code even execute program exit get crash libobjccacheerasenolock unregistered class something wrong objectivec runtime internal cache class category method registered exception unrecognized selector unregistered category method unrecognized selector sent instance unregistered class also mean might execute without error possible obtain thing like nsstringfromclass nil unregisteredclass known objectivec runtime nsclassfromstring unregisteredclass nil macho binary objectivec code objectivec code compiled object file compiler also emits special objectivecrelated section object file executable library objectivec code loaded memory dyld loader read loaded code trigger callback register objectivec class objectivec runtime running process objectivecrelated section name start objc example objcselrefs contains information selector objcclasslist contains reference objectivec class declaration objccatlist contains reference objectivec class category others llvm jit dyld trigger code objectivec registration dynamic loader implementation llvm jit us llvm runtimedyld class related class macho aware objectivec special code objectivec registration needed approach described one way accomplish know objectivec section look like macho object file see appendix example macho file simple objectivec code llvm jit section memory manager llvm jit given object file execution allocates memory load content allocated memory memory allocated one important task llvm jit applies relocation symbol relative offset original object file llvm jit us relative offset calculate resolve real symbol address allocated memory running process relocation finished llvm jit mark code section allocated memory executable execute code contained section sectionmemorymanager one memory management class provided llvm two important method allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override bool finalizememory std string errmsg nullptr override sectionmemorymanager used memory allocation allocatedatasection method called per data section object file example object file macho binary objectivec code section memory manager allocatedatasection called section objcselrefs objcclasslist etc create subclass sectionmemorymanager called objcenabledmemorymanager override allocatedatasection function collect pointer section objcenabledmemorymanager collecting objectivec related section objcenabledmemorymanager allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override pointer sectionmemorymanager allocatedatasection size alignment sectionid sectionname isreadonly sectionnamefind objc llvm stringref npos errs sectionmemorymanager allocatedatasection objc sectionname pointer pointer size size n objectsectionentry entry pointer size sectionname objcsectionspushback entry return pointer allocated section sectionmemorymanager allocatedatasection objc objcconst pointer size sectionmemorymanager allocatedatasection objc objcdata pointer size sectionmemorymanager allocatedatasection objc objcselrefs pointer size sectionmemorymanager allocatedatasection objc objcclassrefs pointer size sectionmemorymanager allocatedatasection objc objcclassname pointer size sectionmemorymanager allocatedatasection objc objcmethtype pointer size sectionmemorymanager allocatedatasection objc objcmethname pointer size sectionmemorymanager allocatedatasection objc objcclasslist pointer size given pointer objectivec related section allocated memory collected possible traverse section objectivec registration routine hand code right moment right llvm jit finalizes memory objcenabledmemorymanager register objectivec finalize memory bool objcenabledmemorymanager finalizememory std string errmsg registerobjc bool success sectionmemorymanager finalizememory errmsg return success registration selector following first crash see running unregistered objectivec code llvm jit selector match selector known objectivec runtime lli nsforwarding warning selector message alloc match selector known objective c runtime abort lli nsautoreleasepool alloc unrecognized selector sent class lli terminating app due uncaught exception nsinvalidargumentexception reason nsautoreleasepool alloc unrecognized selector sent class objcselrefs section responsible selector entry objcselrefs simply selector ie pointer char string reason exception selector object file allocated llvm jit selector known objectivec runtime given collected information section get access content objcselrefs section register selector using code registration simply rewriting selector entry objcselrefs section point selector registered objectivec runtime void registerselectors void selrefssectionptr uintptrt selrefssectionsize sectionstart selrefssectionptr memory paddedaligned jit second half section memory empty selrefssectionsize cursor sectionstart cursor sectionstart selrefssectionsize cursor cursor sizeof sel sel selector sel cursor const char name selgetname selector selector selregistername name code executed selector loaded code point selector entry objcselrefs section selector entry point selector known objectivec runtime make exception go away registration class registration class important part prototype also hacky us public internal method objectivec runtime api objcreadclasspair found objcinternalh header file libobjc objcregisterclasspair method defined objcobjcinternalh class metaclass construction compilergenerated memory image cl cl isa must objcmaxclasssize byte extra byte used metadata must zero info objcimageinfo would emitted static compiler return nil class name already exists return nil superclass nil class marked root return nil superclass construction call objcregisterclasspair struct objcimageinfo objcexport class nullable objcreadclasspair class nonnull cl const struct objcimageinfo nonnull info objcavailable endif done objcselrefs section given collected information class objcclasslist section iterate class call objcregisterclasspair function every class pointer code register objectivec class objcreadclasspair objcregisterclasspair class mull objc runtime registeroneclass classrefptr class superclass classref classrefptr metaclassref classref getisapointer class runtimeclass objcreadclasspair class classref null assert runtimeclass following might wrong class registered objcreadclasspair still hack flag call objcregisterclasspair make sure dispose objcdisposeclasspair jit deallocates assert objcclassisregistered class runtimeclass hereobjcclass runtimeclassinternal hereobjcclass runtimeclass hereobjcclass runtimemetaclassinternal hereobjcclass runtimeclassinternal isa define rwconstructing hereclassrwt sourceclassdata runtimeclassinternal data hereclassrwt sourcemetaclassdata hereclassrwt runtimemetaclassinternal data sourceclassdata flag rwconstructing sourcemetaclassdata flag rwconstructing objcregisterclasspair runtimeclass return runtimeclass experience creating objectivec class using objectivec runtime know pair method objcallocateclasspair objcregisterclasspair must used create new objectivec class difference create new class rather activate existing class reading information definition exists objcclasslist section objcreadclasspair method used instead objcallocateclasspair method turn objcreadclasspair written play well objcregisterclasspair method need small hack set rwconstructing flag class struct pretend new class want objcregisterclasspair register registration category category definition objccatlist section pointer class trivial connect definition class belongs class registered objcreadclasspairobjcregisterclasspair read information category use classaddmethod method public objectivec runtime api add category instance class method registered class known issue known issue duplicate definition class calling objcregisterclasspair class pointer obtained objcreadclasspair always trigger warning objc class firstclass implemented one two used one undefined one detail notice however pointer class equal looking code cause warning seems code built objcreadclasspair case mind exception annoying nothing criminal going hood known issue objcreadclasspair work objcallocateclasspair beginning thought possible register objectivec class public method objcallocateclasspair objcregisterclasspair contrast objcreadclasspair read existing objectivec class definition macho register objectivec runtime objcallocateclasspair creates new class struct class register class objectivec runtime approach creates redundancy definition macho new class struct created two copy class structs exist memory unregistered structs memory allocated macho section memory created objectivec runtime method problem u another problem seems hard fix objcallocateclasspair designed create new class break swift code contains objectivec class turn code generated file swift code objectivecbased class hardcoded objectivec definition written macho creating new parallel class hierarchy objectivec runtime work start get crash related pointer pointing wrong offset memory typical static offsetrelated crash using registering mixed swiftobjectivec class objcallocateclasspair another issue objcallocateclasspair possible specify want create swiftenhanced objectivec class objcallocateclasspair decides whether creates struct normal objectivec swiftenhanced class layout based superclass weird check source code possible create swift class subclass objectivec class objcallocateclasspair create objectivec class swift class example want use objcallocateclasspair register swift class subclass xctestcase objectivec class create class struct objectivec class instead swift class conclusion post shared important part learned llvm jit objectivec topic prototype code llvmjitobjc raw contains basic test case approach described flaw overlooked part objectivec implement still believe framework reading objectivec section loaded runtimedyld using method objectivec runtime register objectivec content class selector category right approach also believe rather small joint effort developer llvm jit swift objectivec runtime approach could implemented would hack internals objectivec runtime another approach also exist see appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code following illustrates objectivecrelated section appear macho object file compile file clang fobjcarc objcm import foundationfoundationh interface someclass nsobject void hello end implementation someclass void hello printf hello someclassn end int main someclass obj someclass new obj hello return many way see objectivec section macho file including listing section header using otool otool l aout aout mach header magic cputype cpusubtype cap filetype ncmds sizeofcmds flag section sectname objcclasslist segname data addr size offset align reloff nreloc flag section sectname objcimageinfo segname data addr size offset align reloff nreloc flag section sectname objcconst segname data addr size offset align reloff nreloc flag section sectname objcselrefs segname data addr size offset align reloff nreloc flag section sectname objcclassrefs segname data addr size offset align reloff nreloc flag section sectname objcdata segname data addr size offset align reloff nreloc flag listing section header using llvmobjdump sectionheaders aout aout file format macho section idx name size address type text text stub text stubhelper text cstring data objcclassname data objcmethname data objcmethtype data unwindinfo data nlsymbolptr data lasymbolptr data objcclasslist data objcimageinfo data objcconst data objcselrefs data objcclassrefs data objcdata data listing section header using machoview hopper also possible see navigate content objectivec section objcclasslist section pointer someclass class data look like objcclasslist section pointer someclass metadata metadata someclass class contained another section called objcdata objcdata section struct someclass metadata actual data someclass hello method found objcconst section data field struct rendered objcclasssomeclassdata objcconst section struct metadata someclass appendix b altenative approach objectivec registration using clang llvmdev forum david chisnall proposed called best way objectivec registration following quote david found llvmdev thread year ago put together proofofconcept implementation cgobjcruntime emitted load function called runtime function registering selector generating class adding method code anymore probably bitrotted extent clean reimplementation would probably easier hundred line code would work objectivec runtime jit context said earlier thread best way add new subclass cgobjcruntime generates code using public create new cgobjcruntime subclass creates module init function construct class using public apis adding something like fobjcruntimejit clang flag particularly difficult mean code used objectivec runtime reason go cgobjcruntime approach easier go runtimedyld solve one problem time sectionmemorymanager already gave u objectivec section could focus register objectivec runtime llvm jit without figure hack clang emit section llvm ir would additional challenge also still clear public objectivec runtime api would emitted code use given limitation public method objcallocateclasspair described known issue objcreadclasspair work objcallocateclasspair
24,Lobsters,objectivec,Objective-C programming,iTerm2 has a new drawing engine that uses Metal 2,https://gitlab.com/gnachman/iterm2/wikis/Metal-Renderer,new drawing engine us metal,introduction benefit availability prefs profile text prefs advanced height top bottom margin terminal pane prefs general advanced gpu setting disable gpu renderer disconnected power support http wwwpatreoncomgnachman troubleshooting prefs general gpu rendering help gpu renderer availability report performance issue http prefs advanced log stats text drawing performance console copy performance stats report drawing problem capture gpu frame http,introduction new drawing engine us metal many user significantly improve performance benefit frame per second rendering buttery smooth increased throughput eg cat giant file finish sooner user see improved latency time pressing key seeing drawn availability metal renderer available version new renderer available configuration transparent window supported must opaque subpixel antialiasing becomes complex must disable ligature ascii nonascii font prefs profile text ligature hard support gpubased renderer adjusted prefs advanced height top bottom margin terminal pane le metal renderer used vertical spacing font configured font panel must set le default also temporarily disabled certain condition another view find bar drawn overtop terminal device plugged charger controlled prefs general advanced gpu setting disable gpu renderer disconnected power restriction relaxed macos mojave come support support http wwwpatreoncomgnachman issue please see troubleshooting disable prefs general gpu rendering see working find nt enabled select help gpu renderer availability report performance issue create new issue http needed make sure prefs advanced log stats text drawing performance console create new window scroll big file whatever slow select copy performance stats paste issue report cmdv note recorded stats erased becomes active drawing timed became active copied stats report drawing problem make session drawing wrong active ie would receive keyboard input select capture gpu frame enabled metal use wait second file bug http attach please let know problem
25,Lobsters,objectivec,Objective-C programming,macOS VPN architecture from System Preferences down to nesessionmanager,https://blog.timac.org/2018/0717-macos-vpn-architecture/,macos vpn architecture system preference nesessionmanager,rdar apps connect vpn service system preference application architecture preference pane networkprefpane process anpneservice anpneservicesmanager networkextensionframework nesession apis use nesessiont anpneservice nesession apis scnetworkconnectionc daemon architecture summary following article reference update vpnstatus replacement macos builtin vpn status,macos contains builtin vpn client natively support ipsec well post describe part internal architecture macos vpn client information used following article build application replicates functionality vpn status menu bar application also allow auto connect vpn service something currently possible macos apple employee reading blog post find bug report scutil nt support vpn service rdar please note describe undocumented internal apis macos apple could change implementation time note could become outdated give guarantee completely accurate apps connect vpn service macos least builtin application connect vpn service network prefpane system preference application vpn status menu menu bar command line tool scutil scutil let list service scutil nc list timac timac scutil nc list available network connection service current set enabled disconnected ppp ppp also let start vpn connection scutil nc start however command line tool working vpn service vpn status implemented menu extra private api unrelated public nsstatusitem api loaded systemuiserver process binary located path systemlibrarycoreservicesmenu extrasvpnmenu vpn status app seems like smaller target system preference application decided instead analyze network prefpane work main reason attaching debugger network prefpane easier attaching debugger systemuiserver process system preference application architecture system preference application complex application load preference pane created using public preferencepanes framework systemlibraryframeworkspreferencepanesframework plugin architecture well described apple documentation architecture preference pane plugin responsible network preference pane networkprefpane networkprefpane process network preference pane located path systemlibrarypreferencepanesnetworkprefpane least part code run separate process using xpc contentsxpcservicescomapplepreferencenetworkremoteservicexpc network preference pane open separate process comapplepreferencenetworkremoteservice visible anpneservice anpneservicesmanager network preference pane represents different service support using objectivec class anptoplevelservice case really interested anpneservice subclass stripped interface anpneservice class note instance created using neconfiguration object later nesessiont later also note method connect disconnect interface anpneservice anptoplevelservice property retain neconfiguration configuration property assign nesessiont session instancetype initwithconfiguration neconfiguration inconfiguration nsstring name void connect void disconnect end anpneservice service managed anpneservicesmanager singleton stripped interface interface anpneservicesmanager nsobject property retain nsarray anpneservice mservices property assign dispatchqueuet neservicequeue id sharedneservicesmanager void reloadconfigurations void processconfigurations nsarray neconfiguration inconfigurations end anpneservice instance created anpneservicesmanager singleton using neconfiguration received networkextensionframework networkextensionframework note networkextensionframework systemlibraryframeworksnetworkextensionframework public framework however neconfigurationmanager neconfiguration class private class within public framework simplified interface neconfigurationmanager interface neconfigurationmanager nsobject id sharedmanager void loadconfigurationswithcompletionqueue dispatchqueuet completionqueue handler void nsarray neconfiguration nullable configuration nserror nullable error handler end simplified interface neconfiguration interface neconfiguration nsobject property readonly nsuuid identifier property copy nsstring name property copy nevpn vpn end nevpn class also private relies public class nevpnprotocol interface nevpn nsobject property copy nevpnprotocol protocol end nesession apis use nesessiont anpneservice previously mentioned anpneservice instance owns nesessiont let look seen designated initializer anpneservice take neconfiguration object initializer take care creating nesessiont session implementation look like instancetype initwithconfiguration neconfiguration inconfiguration self super init self configuration inconfiguration get configuration identifier initialize nesessiont nsuuid uuid inconfiguration identifier uuidt uuidbytes uuid getuuidbytes uuidbytes session nesessioncreate uuidbytes nesessiontypevpn self setupeventcallback self refreshsession return self session used anpneservice connect method conjunction nesessionstart api void connect nesessionstart self session similarly anpneservice disconnect method us session nesessionstop api void disconnect nesessionstop self session nesession apis nesession apis implemented private dynamic library usrlibsystemlibsystemnetworkextensiondylib extracting nesession apis simple using nm timac timac nm usrlibsystemlibsystemnetworkextensiondylib grep nesession nesessionaddressmatchessubnets nesessionagentgetadvisory nesessionagentgetadvisoryinterfaceindex nesessionalwaysonvpnconfigspresent nesessionappvpnconfigspresent nesessioncancel nesessioncopyappdatafromflowdivertsocket nesessioncopyappdatafromflowdiverttoken nesessioncopypolicymatch nesessioncopysecuritysessioninfo nesessioncopysocketattributes nesessioncreate nesessiondisablerestrictions nesessionenableondemand nesessionestablishipc nesessionfallbackadvisory nesessionfallbackdefault nesessiongetconfigidfromnetworkagent nesessiongetconfigurationid nesessiongetinfo nesessiongetstatus nesessioninfotypetostring nesessioninitializenecpdropall nesessionmanagergetpid nesessionmanagerhasactivesessions nesessionmanagerisrunning nesessionondemandconfigspresent nesessionpolicycopyflowdiverttoken nesessionpolicycopyflowdiverttokenwithkey nesessionpolicymatchgetfilterunit nesessionpolicymatchgetflowdivertunit nesessionpolicymatchgetscopedinterfaceindex nesessionpolicymatchgetservice nesessionpolicymatchgetserviceaction nesessionpolicymatchgetservicetype nesessionpolicymatchisdrop nesessionpolicymatchisflowdivert nesessionpolicymatchserviceisregistered nesessionrelease nesessionretain nesessionsendbarrier nesessionservicegetdnsserviceid nesessionservicematchesaddress nesessionseteventhandler nesessionsetsocketattributes nesessionshoulddisablenexus nesessionstart nesessionstartonbehalfof nesessionstartwithoptions nesessionstatustostring nesessionstop nesessionstopallwithplugintype nesessionstopreasontostring nesessionsystemappvpnconfigspresent nesessiontypetostring nesessionuseassystemvpn case limited number apis really interesting extern nesessiont nesessioncreate uuidt serviceid int sessionconfigtype extern void nesessionrelease nesessiont session extern void nesessionstart nesessiont session extern void nesessionstop nesessiont session extern void nesessioncancel nesessiont session typedef void nesessionseteventhandlerblock xpcobjectt result extern void nesessionseteventhandler nesessiont session dispatchqueuet queue nesessionseteventhandlerblock block typedef void nesessiongetstatusblock nesessionstatust result extern void nesessiongetstatus nesessiont session dispatchqueuet queue nesessiongetstatusblock block finding correct prototype function simplified thanks open source file scnetworkconnectionc nesessionmanager daemon look implementation nesession function note function sending request xpc root dameon nesessionmanager located path usrlibexecnesessionmanager daemon listening command handle method void nesmsession handlecommand fromclient looking logging string find code command ignore restart command pending start command already exists stop current session requested overriding restart command received start command start rejected received start command skip sstart command session state received stop command reason received enable demand command example service started method void createconnectparameterswithstartmessage called architecture daemon scope article architecture summary let summarize vpn architecture system preference application nesessionmanager root daemon following article unveil application called vpnstatus replicate functionality vpn status menu menu bar list vpn service status connect vpn service disconnect vpn service application also add possibility auto connect vpn service application running auto connect vpn service something currently possible macos reference update blog post vpnstatus application available vpnstatus replacement macos builtin vpn status
26,Lobsters,objectivec,Objective-C programming,Brad Cox,https://deprogrammaticaipsum.com/brad-cox/,brad cox,la monadologie time dynabook august issue byte magazine kernighan ritchie book c programming language,ever since aristotle philosopher struggled concept existence observe thing see world get purpose exist forever made thing everything else animus soul object lack gottfried leibniz published la monadologie proposed fundamental level object made indivisible entity called monad see inside monad internal state control action passion monad created destroyed atomically partially built partially annihilated simple substance without part represent pinnacle metaphysical exploration fact century martin heidegger completely upended whole field introduction time put forward ask question question presupposes understanding word word relies understanding understanding situated thus heidegger initiated called modern hermeneutics fact understood represent fundamentally true world outside experience working interpretation informed experience perspective history computing course spent long time without questioning relationship reality computer seen domain pure logic either procedure routine mechanical calculation instruction carried turing school function mathematically transformed data church school two paradigm silent meaning interpretation data acted upon left exercise reader concept form logician would recognise ontology heidegger would call merely ontics entered computing first slowly ontology heidegger say investigation ontics merely investigation thing system accepted simula broke barrier thing outside computer procedure written computer introducing software class programmer could say piece computer represents star animal cell employee could say simulated star information simulated star perform procedure researcher xerox parc developed idea context alan kay dynabook concept smalltalk programming environment finally publishing information objectoriented programming system august issue byte magazine object smalltalk clearly reflect leibnizian monadic simulation world object monad created destroyed either exist encapsulate private data inaccessible outside willed action including changing internal state receipt message crucially object decides receives message level indirection isolation found invoking named procedure taking full advantage way structuring software meant thinking entirely differently software designed built daniel robson one contributor byte issue smalltalk acknowledged would easier come object fresh shift paradigm procedural view software basic idea create software system objectoriented fashion come naturally without preconception nature software system objectoriented programming remove conceptual barrier thing building software software built people process organisation artifact natural resource real world analogous software avatar form object interacting sending message within software system small collection programmer author educator saw meant changing write software think software context creating software brad cox one people surface objectivec look like tool designing object internally execute c procedure indeed objectivec born desire software intel done hardware commoditise algorithm data structure component model analogous integrated circuit objectoriented programming evolutionary approach cox laid vision softwareics fair make usual comparison book objectivec k r c stroustrup book c k r user manual tool c book guide making effective use complex design system oop aea nothing short manifesto completely different way funding staffing delivering software product kernighan ritchie book open hello world example c programming language follows annotated table content purpose programming language help express idea code cox hand open story eli whitney industrial revolution cox industrial revolution primarily machinery harnessing steam coal power replacement artisinal cottege manufacture scaledup industrial process depend wellspecified interface standardised interchangeable part previously gunsmith made oneoff rifle endtoend process whitney argued rifle assembled standard component bolt fails field need replace bolt rifle cox take objectoriented look software production much way ivar jacobson took objectoriented look business process wanted programmer design object publish data sheet described object worked integrator would browse data sheet buy object could connect together build higherlevel assembly solved problem ten year later cox accept company cofounded promote objectivec found financial success far intel software find pick story another book superdistribution object property electronic frontier story eli whitney discussion software industrial revolution come get difficulty scaling component sale software sell software unit part cost borne initial construction subsequent copy free buy couple window object kick tyre scaling production graphical application either license infinite window probably rest gui toolkit none cox advocated objectoriented economy use application computer register use make micropayment application author however application also make use gui toolkit object portion payment transferred app author toolkit author toolkit us foundational data structure another payment made development cheap developer pay le use couple object computer distribute application user start using revenue share pas upstream increase scale app use described superdistribution objectoriented economics required custom hardware securely track object usage make correct micropayments small trial japan followed cox writing preblockchain time dapps written solidity made use micropayments form smart contract evaluation ethereum network technical capability implement idea superdistribution still problem charging fair amount creating software component innovation succeed promoting distribution software component scale free software license make provision paying creator superdistribution deserves modern reading idea behind softwareindustrial revolution still lot inform field cover photo adrian kosmaczewski
27,Lobsters,objectivec,Objective-C programming,Advancements in the Objective-C runtime,https://developer.apple.com/videos/play/wwdc2020/10163/,advancement objectivec runtime,,download hello welcome wwdchi everyone ben language runtimes team going talk change made year objectivec runtime io macos significantly improve memory use talk little bit different nt need change code going talk new apis learn year deprecation warning squash luck wo nt need anything apps get faster telling improvement well partly think cool interestingbut also kind improvement runtime possible internal data structure hidden behind apis apps access data structure directly thing get little crashy talk learn thing watch might happen someone else working codebase obviously access thing nt going cover three change sessionfirst change data structure objectivec runtime us track class take look change objectivec method listsfinally look change tagged pointer represented let start change runtime data class disk application binary class look like first class object contains information frequently accessed pointer metaclass superclass method cache also pointer data additional information stored called classrot ro stand readonly includes thing like class name information method protocol instance variablesswift class objectivec class share infrastructure swift class data structure well class first loaded disk memory start like change used understand happens useful know difference clean memory dirty memory clean memory memory nt changed loaded classrot clean readonly dirty memory memory changed process running class structure dirtied class get used runtime writes new data example creates fresh method cache point class dirty memory much expensive clean memory kept around long process runningclean memory hand evicted make room thing need system always reload diskmacos option swap dirty memory dirty memory especially costly io nt use swap dirty memory reason class data split two piece data kept clean better separating data never change allows class data kept clean memory data enough get u started runtime need track information class class first get used runtime allocates additional storage runtime allocated storage classrwt readwrite data data structure store new information generated runtime example class get linked tree structure using first subclass next sibling class pointer allows runtime traverse class currently use useful invalidating method cache method property readonly data well changed runtime category loaded add new method classand programmer add dynamically using runtime apis since classrot readonly need track thing classrwtnow turn take quite bit memory lot class use given device measured classrwt structure across system iphone could shrink remember need thing readwrite part changed runtime examining usage real device found around percent class ever actually method changed demangled name field used swift class nt even needed swift class unless something asks objectivec name split part nt usually usedand cut size classrwt half class need additional information allocate one extended record slide class use approximately percent class never need extended data saving around mb systemwidethis memory available productive us like storing app data actually see impact change mac running simple command terminallet take look going go terminal macbook going run command available mac called heap let inspect heap memory use running process going run mail app mac ran would output thousand line showing every heap allocation made mailso instead going grep type talking today classrwt type also going search headerand result come back see using classrwt type mail app tenth little nine hundred actually needed extended information easily calculate saving made change type halved size subtract number amount memory allocate extended type see saved quarter meg data mail appif extend system wide real saving term dirty memorynow lot code fetch data class deal class nt extended data course runtime handle outside everything keep working like always using le memory work code read structure within runtime updated time sticking apis really important code tried access data structure directly going stop working year o release since thing moved around code wo nt know new layout saw real code broke due change addition code watch external dependency might bringing app might digging data structure without realizing information structure available official apis function like classgetname classgetsuperclass use apis access information know keep working matter change behind scene apis found objectivec runtime documentation developerapplecomnext let dive little deeper class data structure take look another change relative method list every class list method attached write new method class get added list runtime us list resolve message sendseach method contains three piece information first method name selector selector string uniqued compared using pointer equality next method type encoding string represents parameter return type nt used sending message needed thing like runtime introspection message forwarding finally pointer method implementation actual code method write method get compiled c function implementation entry method list point function let look single methodi chosen init method contains entry method name type implementation piece data method list pointeron system mean method table entry occupies byte clean memory clean memory nt free still loaded disk occupies memory use zoomed view memory within process note scalethere big address space requires bit address within address space various piece carved stack heap executables library binary image loaded process shown blue let zoom look one binary imageshere show three method table entry pointing location binary show u another cost binary image loaded anywhere memory depending dynamic linker decides place mean linker need resolve pointer image fix point actual location memory load time also costnow note class method entry binary ever point method implementation within binary way make method metadata one binary code implementing another mean method list entry nt actually need able refer entire address space need able refer function within binary always nearby instead absolute address use relative offset within binary change made year several advantagesfirstly offset always matter image loaded memory nt fixed loaded disk nt need fixed held true readonly memory secure course offset mean halved amount memory needed platform measured mb method systemwide typical iphone since half size save mb memory app use delight user swizzling method list binary ca nt refer full address space swizzle method implemented anywhere besides said want keep method list read handle also global table mapping method swizzled implementationsswizzling rare vast majority method never actually get swizzled table nt end getting big even better table compact memory dirtied page time old style method list swizzling method would dirty entire page resulting many kilobyte dirty memory single swizzle table pay cost extra table entry always change invisible everything keep working like always relative method list supported new o version coming later yearwhen build corresponding minimum deployment target tool automatically generate relative method list binary need target older o version still worry xcode generate old style method list format well still fully supported still get benefit o built new relative method list system problem format use app time target year o release though get smaller binary le memory usage generally good tip objectivec swift minimum deployment target nt sdk apis available xcode know nt need support older o version often emit better optimized code data understand many need support older o version reason good idea increase deployment target whenever one thing watch building deployment target newer one intended target xcode usually prevents slip especially building library framework elsewhere bringing inwhen running older o older runtime see relative method nt know anything try interpret like oldstyle pointerbased method mean try read pair field pointer result two integer glued together pointer nonsense value certain crash actually used recognize happens crash runtime reading method information bad pointer look like two value smooshed together example running code dig structure read value code problem older runtimes app would crash user upgrade devicesso nt use apis apis keep working regardless thing change underneath example function given method pointer return value fieldslet explore one change coming year change tagged pointer format first need know tagged pointer arewe going get really low level nt worry like everything else talked nt need know interesting maybe help understand memory usage little better let start looking structure normal object pointer typically see printed big hexadecimal number saw earlier let break binary representationwe bit however nt really use bit bit middle ever set real object pointer low bit always alignment requirement object must always located address multiple pointer size high bit always address space limited nt actually go way high low bit always let pick one bit always make immediately tell u real object pointer assign meaning bit call tagged pointer example might stuff numeric value bit long teach nsnumber read bit teach runtime handle tagged pointer appropriately rest system treat thing like object pointer never know difference save u overhead allocating tiny number object every case like significant win quick aside value actually obfuscated combining randomized value initialized process startup security measure make difficult forge tagged pointer value ignore rest discussion since extra layer top aware actually try look value memory scrambled full format tagged pointer intel low bit set indicate tagged pointer discussed bit must always real pointer allows u tell apart next bit tag number indicates type tagged pointer example mean nsnumber nsdate since three tag bit eight possible tag typesthe rest bit payload data particular type use however like tagged nsnumber actual numbernow special case tag indicates extended tag extended tag us next eight bit encode type allowing tag type cost smaller payload allows u use tagged pointer type long fit data smaller spacethis get used thing like tagged uicolors nsindexsets seems really handy might disappointed hear runtime maintainer apple add tagged pointer type swift programmer happy know create kind tagged pointer ever used enum associated value class like tagged pointer swift runtime store enum discriminator spare bit associated value payload swift use value type actually make tagged pointer le important value longer need exactly pointer sized example swift uuid type two word held inline instead allocating separate object nt fit inside pointer tagged pointer intel let look arm flip thing aroundinstead bottom bit top bit set indicate tagged pointer tag number come next three bit payload us remaining bit use top bit indicate tagged pointer arm instead bottom bit like intel well actually tiny optimization objcmsgsend want common path msgsend fast possible common path normal pointer two le common case tagged pointer nil turn use top bit check single comparison save conditional branch common case msgsend compared checking nil tagged pointer separately like intel special case tag next bit used extended tag remaining bit used payload actually old format used io year release moving thing around bitthe tag bit stay top msgsend optimization still really useful tag number move bottom three bitsthe extended tag use occupies high eight bit following tag bitwhy well let consider normal pointer existing tool like dynamic linker ignore top bit pointer due arm feature called top byte ignore put extended tag top byte ignore bit aligned pointer bottom three bit always fiddle adding small number pointerwe add set low bit remember indication extended tag mean actually fit pointer extended tag pointer payload result tagged pointer normal pointer payload useful well open ability tagged pointer refer constant data binary string data structure would otherwise occupy dirty memorynow course change mean code access bit directly longer work io released later year bitwise check like would worked past give wrong answer future os app start mysteriously corrupting user data nt use code relies anything talked instead probably guess going say use apis type check like iskindofclass worked old tagged pointer format continue work new tagged pointer format nsstring nsnumber method keep working information tagged pointer retrieved standard apis worth noting also applies cf type wellwe nt want hide anything definitely nt want break anybody apps detail nt exposed need maintain flexibility make change like apps keep working fine long nt rely internal detailsso let wrap talk seen behind scene improvement shrunk overhead runtime leaving memory available user get improvement without anything except maybe consider raising deployment targetto help u make improvement year follow simple rule nt read internal bit directly use apis
28,Lobsters,objectivec,Objective-C programming,Tiger to Catalina: let’s port some code,https://www.sicpers.info/2020/07/tiger-to-catalina-lets-port-some-code/,tiger catalina let port code,bean much step make xcode happy step remove reference next objectivec runtime diagnose stack smash side quest rationalise version check ship ship see source github,many part modern software stack around long time tradeoff term user experience great thing software incrementally improved providing customer familiarity stability need learn entirely new thing existing thing keep working also great developer mean play red queen always running stand still focus improving customer experience knowing everything wrote date still work still work cocoa example continuous history back code written use cocoa apis going back let port old cocoa software see little effort stay date bean free word processor macos written objectivec using mostly cocoa carbon apis us cocoa text system current version bean free support macos open source version bean support intel powerpc would take make modern cocoa app couple hour work gave fullyworking bean catalina lot unnecessary sidequesting step make xcode happy bean built using o x sdk probably needed xcode xcode o x sdk let build macos sdk instead also accepted whatever suggested updated setting xcode showed enabled fobjcweak flag using automatic reference counting turn deployment target support build run right quite step remove reference next objectivec runtime bean us method swizzling ie swapping method implementation runtime mostly work around difference api behaviour tiger leopard code longer compiles error incomplete definition type struct objcmethod origmethod methodtypes file included note forward declaration struct objcmethod typedef struct objcmethod method reason apple introduced objectivec runtime leopard made impossible directly access data structure used runtime structure stayed header couple release long gone first thought first fix delete code eventually relented wrapped project still build back assuming update sdk setting build cleanly using clang xcode build beta xcode fact ok ship right diagnose stack smash launched crashed straight away stack trace look like thread queue comapplemainthread stop reason excbadaccess frame libmainthreadcheckerdylib checkerc frame libmainthreadcheckerdylib trampolinec frame libmainthreadcheckerdylib handlerstart frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview drawinsertionpointinrect color turnedon frame appkit nstextview nsprivate viewdiddrawinlayer incontext um well definitely good backtrace api code except main top nstextview really changed much get infinite loop try draw cursor actually one many patch appkit app swizzled category nstextview replaces two method see stack trace could change swizzled method see way make work remove side quest rationalise version check everything work app built powerpc mac o x ported early point intel run couple change macos want fix one thing message appears launch would like get rid bean warning gestalt selector gestaltsystemversion returning instead bug gestalt documented limitation use nsprocessinfo operatingsystemversion property get correct system version number call location bean carboncore gestaltsystemversionblockinvoke bean libdispatchdylib dispatchclientcallout bean libdispatchdylib dispatchoncecallout bean carboncore gestaltsystemversion bean carboncore gestalt bean bean jhdocumentcontroller init bean appkit nscustomobject nibinstantiate little history back classic mac o gestalt used like unix programmer use sysctl soda drink maker use high fructose corn syrup want expose information add gestalt bloated enough drink gestalt api take selector pointer memory get written memory depends selector gestaltsystemversion selector make write o version number memory well us bit turned fine apple release many operating system used one octet major minor patch release number macos represented mac o x came along gestalt part carbon api version reported major release bumped first version patch level release jaguar point someone apple realised ever sixteen patch release sixteen minor release would break capped patchminor number told stop using gestaltsystemversion would like stop using lot version number check bean put one place given two way check version nsprocessinfo isoperatingsystematleastversion available use actually never relevant test version api added fall back gestalt separate gestaltsystemversionmajorminor selector exist back perfect fails earliest o bean run actually tell run quits apple added minimumsystem check launch service could use infoplist say whether app work mechanism supported ship done haha kidding done launching thing enough better test dark mode thing tiger thing bean assumes set background nstextview white explicitly set actually ship see source github particularly change needed make cocoa application work macos despite couple cpu family switch bunch change ui
29,Lobsters,objectivec,Objective-C programming,Objective-C Direct Methods,https://nshipster.com/direct/,objectivec direct method,nullability lightweight generic recently merged patch clang radar number feature landed objectoriented programming xerox alto invented alan kay dynamic dispatch objectivec runtime direct dispatch c function direct method objcdirect property direct objcdirectmembers clang attribute case making method direct probably noticeable performance advantage surprisingly fast ar glass anyone mike ash dissecting objcmsgsend hidden motif linkage unit according pierre,hard get excited new feature come objectivec day improvement service swift interoperability rather investment language see nullability lightweight generic surprising learn recently merged patch clang add new direct dispatch mechanism objectivec method genesis new language feature unclear go appleinternal radar number tell u much beyond relative age sometime early estimation fortunately feature landed enough documentation test coverage get good idea work kudos implementor pierre habouzit review manager john mccall llvm contributor week nshipster taking occasion review objectivec method dispatching try understand potential impact new language feature future codebases direct method could show early xcode likely announced wwdc understand significance direct method need know thing objectivec runtime let start discussion one step origin oop objectoriented programming alan kay coined term objectoriented programming late help adele goldberg dan ingalls colleague xerox parc kay put idea practice creation smalltalk programming language time research xerox parc also developed xerox alto would become inspiration apple macintosh gui computer brad cox tom love started work first version objectivec language sought take objectoriented paradigm smalltalk implement solid fundamental c series fortuitous event language would come official language next later apple u started learning objectivec iphone era language often seen yet another proprietary apple technology one myriad obscure byproduct company invented nih culture however objectivec objectoriented c one original objectoriented language strong claim oop credential oop mean good question era hype cycle rendered term almost meaningless however purpose today let focus something alan kay wrote sorry long ago coined term object topic get many people focus lesser idea big idea messaging alan kay dynamic dispatch objectivec runtime objectivec program consists collection object interact passing message turn invoke method function act message passing denoted square bracket syntax someobject amethod withanargument objectivec code compiled message sends transformed call function called objcmsgsend literally send message object argument objcmsgsend object selector message withanargument first argument receiver self instance method second argument cmd selector name method method parameter passed additional function argument objcmsgsend responsible determining underlying implementation call response message process known method dispatch objectivec class class maintains dispatch table resolve message sent runtime entry dispatch table method method key selector sel corresponding implementation imp pointer c function object receives message consults dispatch table class find implementation selector associated function called otherwise object consults dispatch table superclass continues inheritance chain match found root class nsobject deems selector unrecognized say nothing objectivec let thing like replace method implementation create new class dynamically runtime absolutely wild think indirection sound like lot way right hot path code expensive method called frequently could imagine benefit avoiding indirection end developer used c function way around dynamic dispatch direct dispatch c function saw objcmsgsend method invocation represented equivalent function passing implicit self first argument example consider following declaration objectivec class conventional dynamicallydispatched method interface myclass nsobject void dynamicmethod end developer wanted implement functionality myclass without going whole message sending shebang could declare static c function took instance myclass argument static void directfunction myclass unsafeunretained object approach translates call site myclass object myclass alloc init dynamic dispatch object dynamicmethod direct dispatch directfunction object direct method direct method look feel conventional method behavior c function direct method called directly call underlying implementation rather going objcmsgsend new llvm patch way annotate objectivec method avoid participation dynamic dispatch selectively objcdirect property direct objcdirectmembers make instance class method direct mark objcdirect clang attribute likewise method objectivec property made direct declaring direct property attribute interface myclass nsobject property nonatomic bool dynamicproperty property nonatomic direct bool directproperty void dynamicmethod void directmethod attribute objcdirect end count addition direct brings total number property attribute getter setter readwrite readonly atomic nonatomic weak strong copy retain unsafeunretained nullable nonnullable nullresettable class interface category class extension annotated objcdirectmembers attribute method property declaration contained within considered direct unless previously declared class attribute objcdirectmembers interface myclass property nonatomic bool directextensionproperty void directextensionmethod end annotating implementation objcdirectmembers similar effect causing nonpreviously declared member deemed direct including implicit method resulting property synthesis attribute objcdirectmembers implementation myclass bool directproperty void dynamicmethod void directmethod void directextensionmethod void directimplementationmethod end dynamic method overridden subclass direct method direct method overridden protocol declare direct method requirement class implement protocol requirement direct method applying annotation example see direct dynamic method indistinguishable call site myclass object myclass alloc init dynamic dispatch object dynamicmethod direct dispatch object directmethod direct method seem like slam dunk feature performanceminded developer among u twist case making method direct probably noticeable performance advantage turn objcmsgsend surprisingly fast thanks aggressive caching extensive lowlevel optimization intrinsic performance characteristic modern processor objcmsgsend extremely low overhead long past day iphone hardware could reasonably described resourceconstrained environment unless apple preparing new embedded platform ar glass anyone reasonable explanation apple implementing objectivec direct method stem something performance mike ash internet foremost expert objcmsgsend year post provided deepest complete understanding objectivec runtime find outside cupertino curious dissecting objcmsgsend great place start hidden motif objectivec method marked direct implementation hidden visibility direct method called within module pedantic linkage unit even show objectivec runtime hidden visibility two direct advantage smaller binary size external invocation without external visibility way invoke dynamically objectivec runtime direct method effectively private method want participate direct dispatch still want make api accessible externally wrap c function static inline void performdirectmethod myclass unsafeunretained object object directmethod hidden visibility used apple prevent swizzling private api use seem primary motivation according pierre implemented feature main benefit optimization code size reduction reportedly weight unused objectivec metadata account text section compiled binary could imagine next year developer conference engineer could go sdk framework annotating private method objcdirect private class objcdirectmembers lightweight way progressively tighten sdk true perhaps well become skeptical new objectivec feature service swift service apple despite important place history programming apple hard see objectivec history
30,Lobsters,objectivec,Objective-C programming,"Beyond Faster JSON Support for iOS/macOS, Part 9: CSV and SQLite",https://blog.metaobject.com/2020/06/beyond-faster-json-support-for-iosmacos.html,beyond faster json support iosmacos part csv sqlite,csv parsing gtfs h sqlite fmdb,looking mpwpliststreaming protocol using json parsing series one thing probably noticeable nt particularly jsonfocused fact nt even initially designed parsing generating could use deserialization task glad asked csv parsing one example performance book involves parsing comma separated value quickly within context getting time convert gtfs file something usable phone minute using using coredatasqlite slightly le second using custom inmemory data structure also several order magnitude faster query ondevice original project cv parser took around second nt significant part minute rest took couple hundred millisecond time make part faster well result slightly generalized mpwdelimitedtable h basic interface blockbased block called every row table called dictionary composed header row key content row value void void nsdictionary thedict int anindex block adapting mpwpliststreaming protocol straightforward void writeonbuilder id builder builder beginarray self nsdictionary thedict int anindex builder begindictionary nsstring key selfheaderkeys builder writeobject thedict key forkey key builder enddictionary builder endarray quickanddirty implementation based existing api clearly suboptimal api call first construct dictionary row header key iterate however work existing set builder nt build inmemory representation entire csv also relatively straightforward invert api usage modifying lowlevel api use mpwpliststreaming creating higherlevel block dictionaybased api top way also work mpwpliststreaming client sqlite another tabular data format sql data base macosios one common database sqlite usually accessed via coredata excellent much lightweight fmdb used fmdb bing quite delighted first impulse write mpwpliststreaming adapter looking code bit closely seemed quite bit would need mpwpliststreaming also think saw tradeoff convenient slow convenience based nsdictionary much complex potentially faster api based pulling individual type value instead decided try something ultra simple sits directly top sqlite capi implementation really quite simple compact interface mpwstreamqlite property nonatomic strong nsstring databasepath end implementation mpwstreamqlite db instancetype initwithpath nsstring newpath self super init selfdatabasepath newpath return self int exec nsstring sql re int rc db sql re autoreleasepool selfbuilder beginarray int step int re nsstring key numcols int numcols key re sqliterow step re autoreleasepool selfbuilder begindictionary int numcols const char text const char re text selfbuilder writeobject text forkey key selfbuilder enddictionary re selfbuilder endarray return rc int open return selfdatabasepath db void close db db dbnull course nt lot chiefly read update insert deletes however code striking brevity simplicity time convenient fast though still room improvement experience tend get three property time code simple convenient tends slow code convenient fast tends rather tricky code simple fast tends inconvenient use easy use following code turn table array dictionary import mpwfoundationmpwfoundationh int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwplistbuilder new db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return pretty good probably roughly par course returning generic data structure array dictionary going particularly efficient one first clue coredata predecessor eof nt particularly fast read fetching raw dictionary optimization much faster fetching object want get object instead easy replace mpwplistbuilder mpwobjectbuilder parametrized class create well define class presumably already havee task convert object class cold obviously also automated import mpwfoundationmpwfoundationh interface artist nsobject property assign long artistid property nonatomic strong nsstring name end implementation artist nsstring description return nsstring stringwithformat self class self selfartistid selfname end int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwobjectbuilder alloc initwithclass artist class db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return note generate plist representation intermediate step go straight database result set object generic intermediate format mpwpliststreaming protocol dematerialized representation plist object peer
31,Lobsters,objectivec,Objective-C programming,The Curious Case of Swift's Adoption of Smalltalk Keyword Syntax,https://blog.metaobject.com/2020/06/the-curious-case-of-swift-adoption-of.html,curious case swift adoption smalltalk keyword syntax,accepted multiple trailing closure trouble,really surprised learn swift recently adopted smalltalk keyword syntax accepted multiple trailing closure keyword terminated colon followed argument without surrounding brace mind boggles little course swift would nt swift nt special case special case specifically case multiple trailing closure special case trailing closure weird specialcasey enough example uiviewanimate withduration selfviewalpha completion selfviewremovefromsuperview note argument animate would seem terminate closing parenthesis actually case curly brace closing paren start closure actually also argument method socalled trailing closure little bit sympathy construct closure inside parenthesis look really really awkward course params apart sole x inside f x look awkward let quibble another thing enables method reasonably resemble control structure heard really great idea problem sometimes one closure argument stacking behind appears end functionmethod call get really really awkward ca nt tell block argument trailing closure nt get keyword well different method syntax one traditional cpascalcjava function call syntax xf already weirdish addition smalltalkobjectivec keywords inside f x syntax f arg x original trailingclosure syntax thing first closure smalltalk nonbrackted keyword syntax subsequent closure impressive scary kind way swift crescendo special case stopping short general result complexity semantics complexity behaviour ie bug complexity use ie workarounds understand proposal quite controversial heated discussion opponent proponent understand sympathize side one hand markedly better alternative hand special case special case difficult justify addition already special case beget special case beget special case course answer always smalltalk keyword syntax reasonable solution case also solves case general solution could look objectivesmalltalk us curly brace instead closure instead square bracket uiview animate selfviewalpha completion self view removefromsuperview special case every argument labeled syntax mush bracket inside parenthesis etc yes also handle userdefined control structure method nsnumber stdout println introduce special case willy nilly since keywords naturally go argument need operator different special syntax form allow binary keywords look little different instead write instead pow signature func pow x decimal int decimal really neeed go trouble defining operator swift b another special kind syntax b yes know detail detail forth course late chose smalltalk base syntax language turned objectivesmalltalk nt like gotten used via objectivec smalltalk syntax surprisingly flexible general smalltalk apis look lot like dsl without tooling overhead frustrating part stuff available wellknown least bother look andor ask instead choose thing willynilly everybody suffer consequence update guess trying get thought thing little bit could almost entire syntax language cost complexity implementation size brittleness cognitive load etc one special case special case would overall better boot
32,Lobsters,objectivec,Objective-C programming,The Origins of Objective-C at PPI/Stepstone and Its Evolution at NeXT,https://dl.acm.org/doi/pdf/10.1145/3386332,origin objectivec ppistepstone evolution next,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g w j endstream endobj obj annots r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r subtype form type xobject length stream вnh w endobj obj basefont imuzxnlinlibertinet encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bitspercomponent colorspace devicergb filter flatedecode height smask r subtype image type xobject width length stream f r x u e wu jyg l b µ suu ei ei l dq v ǝ h q pl kh e uc e p n soy ų ii b yy oedt endobj obj difference period zero four c l b c e h k l n r u v w type encoding endobj obj endobj obj ascent capheight charset aciltabcdefourhiklmnoperiodrstuvwzero descent flag fontbbox fontfile r fontname imuzxnlinlibertinet italicangle stemv type fontdescriptor xheight endobj obj bitspercomponent colorspace devicegray filter flatedecode height subtype image type xobject width length stream endobj obj filter flatedecode length stream b r ncc ĵ sa j r nj qp iwfbhzf х l c yt p pm k j f վ n r c u
33,Lobsters,objectivec,Objective-C programming,MPWTest: Reducing Test Friction by Going Beyond the xUnit Model,https://blog.metaobject.com/2020/05/mpwtest-reducing-test-friction-by-going.html,mpwtest reducing test friction going beyond xunit model,mpwtest setup mpwtest code codesmell use courage caveat outlook,popular demand quick rundown mpwtest simplest testing framework could possibly work personal unit testing framework make tdd fast fun frictionless created mpwtest bitten tdd bug definitely want write software without tdd ever could help long xctest even precursor sentestkit best parallel development certainly nt aware bit different difference make sufficiently better much prefer xunit variant worked junit sunit xctest vastly better tdd introduce significant amount overhead friction make testing experience much cumbersome need least partly explains antipathy see towards unit testing developer attitude see testing like eating vegetable know supposed good grudgingly really rather annoying benefit something know intellectually mpwtest tdd also still intellectually good also viscerally fun le like vegetable like tasty snack except snack yummy also healthy help stay flow get thing done let change code quickly safely key agile work setup first need build testlogger binary mpwtest project put mine usrlocalbin forget put anywhere like adjust path follows next add script build phase framework project mpwtest currently test framework testerusrlocalbintestlogger framework targetbuilddir fullproductname f tester tester framework else echo warning tester framework found test run fi bottom build phase pane project look something roughly like following separate test bundle extra target nada may seem big deal single target start getting framework additional test target really start add add decisionpoint really create additional test bundle project maybe repurpose existing one code class tested add nsarray testselectors method returning list test runtest method execute example json parser writing testselectors return testparsejsonstring testparsesimplejsondict testparsesimplejsonarray testparseliterals testparsenumbers testparseglossarytodict testdictafternumber testemptyelements teststringescapes testunicodeescapes testcommonstrings testspacebeforecolon could also determine name automagically prefer explicit list part specification test run otherwise easy lose test editing mistake none wiser implement test example testunicodeescapes void testunicodeescapes mpwmasonparser parser mpwmasonparser parser nsdata json self frameworkresource unicodeescapes category json nsarray array parser parseddata json nsstring first array intexpect first length length parsed unicode escaped string intexpect first expected value idexpect array n second newline yes mostly old code macro er expect intexpect expects integer equality scalar honest idexpect expects object equality also convenience nil nil true false well specialized one float set acceptable range theory put method anywhere tend place testing category bottom file end import debugmacrosh implementation mpwmasonparser testing debugmacrosh header various expcect macro header dependency code need link anything even separate test bundle separate test class hierarchy really simplifies thing lot first question find test particular class bottom file scroll class test scroll find incredibly useful test serve specification documentation example code class also need maintain parallel class hierarchy widely regarded fairly serious codesmell obvious reason need keep hierarchy sync along problem get sync etc use setup build project test run automatically part build test failure reported xcode would expect step tend add name test testselectors hit build ensure test red xcode build add empty test method hit build ensure test green either add actual expect test expecttrue false impelemented placeholder may seem like lot step really mostly letting xcode check thing edits need done anyhow hitting cmdb couple time editing nt hurt fact test run part every build build without running test give completely different level confidence code translates courage running test time also splendid motivation keep test green test fail build fails build fails run program last least running test every build also strong motivation keep test fast testing nt separate activity integral part development process writing code compiling caveat drawback approach one pretty xcode unit test integration nt work done apple already left platform idea behind focused making integrated solution noted displaying test failure error jumping line failed testexpectation work hook mechanism xcode us get information compiler simply output line number error message stdout tool format output way work wth xcode end enojoy blinkenlights xcode unit test integration able run test individually simple mouseclick bling really reinforces idea test separate entity test always run always green always fast nt need even want ui ui distraction test fade background another slightly annoying issue debugging test run part build test failure build failure block executables running however xcode debugs executables ca nt actually get debuggable run session nt use debugger much failure tdd usually manifest test failure rather something need debugger track nt much problem past would revert command line example lldb testlogger mpwfoundation debug foundation framework ca nt actually run framewework thought receently find set executable parameter target build scheme set testlogger debug framework heart content leaving problem xcode actually letting run executable due build failing far know facility debugging build phase workaround temporarily disabling test build phase accomplished misusing run script installing flag issue nt actually significant somewhat jarring might expect experience buttery smooth rest time course want pure test class create class test furthermore class actually asked test fixture object test default return class object also return instance setup teardown method way expect xunit code enumerate probe class system order find test also interesting straightforward need updated time time class system like probed outlook obviously happy people try mpwtest find useful find useful provide good feedback currently specific plan swift support objectivec compatible class probably work rest language probably nt dynamic enough support kind transparent integration certainly without compiler work currently investigating swift interop generally longer restricted cobjectivec might possible almost certainly use lesson learned create linguistically integrated testing objectivesmalltalk many aspect objectivesmalltalk gap bridged supersmooth actually large another takeaway unit testing really really simple fact asked kent beck response everyone build go build wonderful thing
34,Lobsters,objectivec,Objective-C programming,ObjFW 98 SE: Bringing Objective-C to Windows 98 SE and NT 4.0,https://blog.nil.im/?77,objfw se bringing objectivec window se nt,objfw se bringing objectivec window se nt ipx work around minor change nasty hack fallback add api used instead ported apis port everything else apis,objfw se bringing objectivec window se nt created utc yesterday got idea port objfw window nt considering lowest supported window version far window xp seemed like would much work however biggest problem getting toolchain still support window nt using old window xp window xp vm around anyway writing ipxspx support copying resulting binary window nt work complained addvectoredexceptionhandler removevectoredexceptionhandler course according msdn introduced window xp grepping gcc source yield result grepping entire mingw source used winpthread luckily used thread name commenting two line recompiling enough winpthread linked gcc default exception handling runtime need really want exception objfw compiler longer created binary missing symbol window nt got ofinvalidformatexception loop mingw implementation asprintf seems call snprintf expects return number byte would written sufficiently large buffer provided window nt return buffer small trying print error course call hence loop unfortunately asprintf implementation relied exact snprintf behavior part aleady work around easy enough able get hello world using ofstdout ofapplication minor change later test running successfully well disable socket something would try load icmpdll exist window nt look another time later evening wanted take thing thought window nt window se well difficult though window two version almost every api version w version wrongly stand ascii w stand wide meaning version take argument native localedependent codepage w version always us unicode w version introduced window nt objfw used w version exclusively since window console quite bad need nasty hack made bearable meant could even get hello world without porting hack apis first added fallback w version return errorcallnotimplemented w apis return error window got working hello world called day unfortunately forgot take screenshot got quite late next day decided calling w version first falling back version fails errorcallnotimplemented nt make lot sense never gon na nonnt version window support unicode decided add api detect objfw running window nt used instead already hello world working one using ofapplication using ofstdout main order get working ported ofapplication apis finally got proper hello world time port everything else apis voilà test running successfully well window se addition disabling socket also disable dlls thread dlls figured yet nt work thread already know fix waitforsingleobject support waiting thread coolest thing result binary work anything window se window using feature available guess shabby weekend see get remaining issue fixed know maybe objfw workgroups next
35,Lobsters,objectivec,Objective-C programming,A modern chat client built on Matrix,https://gitlab.com/ditto-chat/ditto-mobile,modern chat client built matrix,ditto mobile,ditto mobile project id
36,Lobsters,objectivec,Objective-C programming,Santa: Binary whitelisting system extension for macOS,https://github.com/google/santa,santa binary whitelisting system extension macos,santa doc doc http santareadthedocsio get help santadev issue security policy adminrelated feature intention expectation security performancerelated feature known issue pagezero missing issue sync server upvote moroz zentral screenshots kext signing prebuilt presigned version kext signing certificate contributing contributing disclaimer,santa santa binary authorization system macos consists kernel extension system extension macos monitor execution userland daemon make execution decision based content sqlite database gui agent notifies user case block decision commandline utility managing system synchronizing database server named santa keep track binary naughty nice santa project google macintosh operation team doc santa doc stored doc directory read doc instance available http santareadthedocsio doc include deployment option detail part santa work instruction developing santa get help question otherwise need help getting started santadev group great place believe bug feel free report issue respond soon believe found vulnerability please read security policy disclosure reporting adminrelated feature multiple mode default monitor mode binary except marked blocked allowed run whilst logged recorded event database lockdown mode listed binary allowed run event logging kext loaded binary launch logged either mode unknown denied binary stored database enable later aggregation certificatebased rule override level instead relying binary hash fingerprint executables allowedblocked signing certificate therefore allowblock binary given publisher signed cert across version update binary allowed certificate signature validates correctly rule binary fingerprint override decision certificate ie allowlist certificate blocking binary signed certificate viceversa pathbased rule via nsregularexpressionicu allows similar feature found managed client precursor configuration profile used implementation mechanism application launch restriction via mcxalr binary implementation carry added benefit configurable via regex relying launchservices detailed wiki evaluating rule hold lowest precedence failsafe cert rule put deny rule would block certificate used sign launchd aka pid therefore component used macos binary every o update case entire new version therefore automatically allowed affect binary apple app store use various cert change regularly common apps likewise block santa santa us distinct separate cert google apps intention expectation single system process stop attack provide security santa written intention helping protect user people often download malware trust giving malware credential allowing unknown software exfiltrate data system centrally managed component santa help stop spread malware among large fleet machine independently santa aid analyzing running computer santa part defenseindepth strategy continue protect host whatever way see fit security performancerelated feature inkernel caching allowed binary cached kernel processing required make request done binary nt already cached userland component validate userland component daemon gui agent commandline utility communicate using xpc check signing certificate identical communication accepted kext us kpis kernel extension us provided kernel programming interface job mean kext code continue work across o version known issue santa block execution execve variant nt protect dynamic library loaded dlopen library disk replaced library loaded using dyldinsertlibraries version address pagezero missing issue exploited version macos working also protecting similar avenue attack kext communication security kext accept connection single client time said client must running root nt yet found good way ensure kext accepts connection valid client database protection sqlite database installed permission root user readwrite considering approach secure script santa currently written ignore execution nt binary weighing administration cost v benefit found nt worthwhile additionally number application make use temporary generated script ca nt possibly allowlist would cause problem happy revisit least make option would useful others sync server santactl commandline client includes flag synchronize management server uploads event occurred machine downloads new rule several opensource server sync upvote appenginebased server implement social voting make managing large fleet easier moroz simple golang server serf hardcoded rule simple configuration file zentral centralized service pull data multiple source deploy configuration multiple service alternatively santactl configure rule locally without sync server screenshots tool like santa nt really lend screenshots video instead kext signing kernel extension macos later must signed using appleprovided developer id certificate kernel extension flag without way load extension enable kextdevmode disable sip depending o version two possible solution distribution purpose use prebuilt presigned version kext supply time change made kext code update prebuilt version make use nt prevent making change nonkext part santa distributing make change kext make pull request merge distribute new version presigned kext apply kext signing certificate apple grant broad distribution within organization wo nt issue testing purpose contributing patch project much welcome please see contributing file disclaimer official google product
37,Lobsters,objectivec,Objective-C programming,ReDoomEd,http://twilightedge.com/mac/redoomed/,redoomed,redoomed maclinuxbsd beta port id doom map editor nextstep doom john romero john carmack nextstep doomed port doomed original source code released publicly cocoa api gnustep framework ultimate doom doom ii released publicly download archiveorg iwad doomwad requires mac o x tiger later requires xcode gnustepmake w base guiback version history checksum doomed doombsp c id software inc license unknown redoomed sourcesmodifications c josh freeman license gnu agpl later approved version pikopixel c josh freeman license gnu agpl later approved version,redoomed maclinuxbsd beta port id doom map editor nextstep development doom game john romero john carmack wrote nextstep application designing game level called doomed redoomed independentlydeveloped port doomed nextstep maclinuxbsd us doomed original source code released publicly modified run cocoa modern descendant nextstep cocoa native api mac o x supported platform using gnustep framework doomed used custom text format storing doom level level doom ultimate doom doom ii released publicly doomed format available download archiveorg editing project file also requires copy iwad corresponding game retail version doomwad video mac app requires mac o x tiger later linux install script source code requires xcode gnustepmake w base guiback version history checksum doomed doombsp c id software inc license unknown redoomed sourcesmodifications c josh freeman license gnu agpl later approved version pikopixel c josh freeman license gnu agpl later approved version
38,Lobsters,objectivec,Objective-C programming,Objective-Smalltalk,http://objective.st/,objectivesmalltalk,objective hello world news cocoa head berlin presentation video mpwdrawingcontext fosdem smalltalk devroom video paper dl pdf,objective objective programming language make creating wellarchitected efficient program straightforward easy fun fast hello world stdout println hello world newsaugust update publication august maringolo suggested objective better name giving try january objectivest website running dynamically digital ocean droplet december port using gnustep october scheme handler via property path october defining scheme handler property path april definition syntax july real class method definition syntax may objectivesmalltalk repl available embeddable nstextview subclass addition unix command line may unicode support addition symbol like also support various operatorlike construct like extended equality test arrow assignment attaching connector port march local variable message stsh algorithm take account syntax actual live object accurate result february head berlin presentation february live coding demo video driving apple quartz api via mpwdrawingcontext february presented fosdem smalltalk devroom video available august identifier paper accepted dl pdf
39,Lobsters,objectivec,Objective-C programming,Bypassing objc_msgSend,https://saagarjha.com/blog/2019/12/15/bypassing-objc-msgsend/,bypassing objcmsgsend,little bit idle speculation jumping implementation nonpointer tagged pointer lack back pointer invalidating method cache class uncached path look add back patched clang fast yet macbook pro retina early intel r core tm cpu future extension,fastest path objcmsgsend transfer execution imp dozen instruction otool tv usrliblibobjcdylib p objcmsgsend head n usrliblibobjcdylib text text section objcmsgsend testq rdi rdi je testb dil jne movabsq objcabsolutepackedisaclassmask andq objcemptyvtable rdi movq rsi andl shlq addq cmpq objcemptyvtable rsi jne movq xorq jmpq one hottest hottest code path system good reason optimized even minimal saving translate directly measurable performance increase across objectivec application even fast implementation sometimes good enough objectivec dynamic language feature come price even using majority code executed typical objcmsgsend call implementation lookup rather check see execution proceed fast path check comparatively cheap even bigger issue function largely serf optimization barrier compiler look like nothing impenetrable trampoline unknown target even simplest member access inlined every method call must clobber multiple register almost always requires move accumulator usually undesirable leave result attribute objcdirect closely related attribute objcdirectmembers attempt solve problem converting method call essentially cstyle static dispatch change met controversy introduced call would longer go runtime machinery breaking many feature objectivec including swizzling kvo even subclassing luckily another way get performance benefit without losing objectivec best feature little bit idle speculation key insight guess vast majority method call go compile time looking type receiver message sending time objcmsgsend confirming already know practical difference fast path direct function call need check quickly possible target expects jumping way around want support objectivec dynamism implementation come advantage objcmsgsend human compiler static type information understanding surrounding code let u guess statically high accuracy target fact speculate call go predicted method taking leaf objcmsgsend book wrap direct call barest minimum checking make sure correct prediction psuedocode convert call foo bar reciever foo something like target foo bar jump foo bar else objcmsgsend foo selector bar correct skip cache lookup objcmsgsend performs also make direct call method one compiler know optimize around jumping implementation almost done question left go target foo bar condition far tell foo foo send selector bar case execution directly proceed foo bar reciever nil reciever subclass foo foo bar swizzled checking first done easily second bit complicated theory asking foo ismemberofclass fooclass obvious reason really want overhead come skip even call objectgetclass directly ripping isa foo comparing runtime metadata subtlety nonpointer isas tagged pointer avoid entirely masking isa appropriately sending nonstandard case slow path encounter last case method swizzled determined information available objcmsgsend alone instead need keep around side table boolean value must check call method swizzled runtime code interposed front runtime must update corresponding entry subsequent call go runtime update jeandaniel dupas pointed via email invalidation quite simple originally made since methodexchangeimplementations take two method parameter lack back pointer class come objectivec runtime deal invalidating method cache class letting refill uncached objcmsgsend path look add back real implementation would need support runtime something similar mark entry table invalid upon swizzling forcing method call go slow path objcmsgsend start unsetting entry uncached path verifies target swizzled go back optimized path check place call method directly try patched clang would emit llvm ir performed operation described whenever would emitted simple message send never touched llvm project implementation clumsy probably incorrect however work fine simple program tested try compiling llvm thing since needed name repository llvmproject henceforth naming technique expresscall making expresscall swiftcall would shorter significantly potential confusing aside originally started writing transformation pas convert method call detecting call objcmsgsend unfortunately turned code generator message sends era type information necessary predict target ended patch code generator gain access information fast yet better way see fast slow optimization highly synthetic benchmark one creates simple objectivec array type integer fill random number sum since horrible person get scroll past import foundation import objectivec import algorithm import array import chrono import dlfcnh import iostream import random import typetraits import unorderedmap import utility const auto benchmarksize const auto trial interface integerarray nsobject instancetype initwithnumbers nsuinteger number count nsuinteger count nsuinteger count nsuinteger numberatindex nsuinteger index nsuinteger directcount attribute objcdirect nsuinteger directnumberatindex nsuinteger index attribute objcdirect nsuinteger swizzledcount nsuinteger swizzlednumberatindex nsuinteger index end implementation integerarray nsuinteger number nsuinteger count instancetype initwithnumbers nsuinteger number count nsuinteger count self super init number number count count return self nsuinteger count return count nsuinteger numberatindex nsuinteger index return number index nsuinteger directcount return count nsuinteger directnumberatindex nsuinteger index return number index nsuinteger swizzledcount return nsuinteger swizzlednumberatindex nsuinteger index return index end enum benchmark expresscall messagesend direct swizzledexpresscall swizzledmessagesend end auto measure benchmark benchmark std generator std array nsuinteger benchmarksize number std uniformintdistribution nsuinteger distribution nsuintegermax benchmarksize std generate numbersbegin numbersend return distribution generator integerarray array integerarray alloc initwithnumbers numbersdata count numberssize nsuinteger sum auto time std chrono systemclock switch benchmark case benchmark expresscall nsuinteger arraycount sum array numberatindex break case benchmark messagesend nsuinteger reinterpretcast nsuinteger integerarray sel objcmsgsend array selector count sum reinterpretcast nsuinteger integerarray sel nsuinteger objcmsgsend array selector numberatindex break case benchmark direct nsuinteger arraydirectcount sum array directnumberatindex break case benchmark swizzledexpresscall nsuinteger arrayswizzledcount sum array swizzlednumberatindex break case benchmark swizzledmessagesend nsuinteger reinterpretcast nsuinteger integerarray sel objcmsgsend array selector swizzledcount sum reinterpretcast nsuinteger integerarray sel nsuinteger objcmsgsend array selector swizzlednumberatindex break default assert false make sure program actually calculation returning sum return std makepair std chrono durationcast std chrono microsecond std chrono systemclock time sum int main void swizzle dummy method point actual implementation auto integerarraycount classgetinstancemethod integerarrayclass selector count classreplacemethod integerarrayclass selector swizzledcount methodgetimplementation integerarraycount methodgettypeencoding integerarraycount staticcast bool dlsym dlopen null rtldlazy objcexpresscallintegerarrayswizzledcount true auto integerarraynumberatindex classgetinstancemethod integerarrayclass selector numberatindex classreplacemethod integerarrayclass selector swizzlednumberatindex methodgetimplementation integerarraynumberatindex methodgettypeencoding integerarraynumberatindex staticcast bool dlsym dlopen null rtldlazy objcexpresscallintegerarrayswizzlednumberatindex true std array benchmark benchmark end trial benchmark std unorderedmap benchmark std chrono microsecond time std randomdevice random std generator random auto benchmark end std fill benchmarksbegin trial benchmarksbegin trial benchmark time benchmark std chrono microsecond randomize order run benchmark iteration std shuffle benchmarksbegin benchmarksend generator std cout benchmarking average time sum benchmarksize number trial trial std endl auto benchmark benchmark time benchmark measure benchmark generator first auto name expresscall objcmsgsend objcdirect swizzled expresscall swizzled objcmsgsend auto benchmark end std cout namesbegin time benchmark count trial µs std endl return measure time take optimized implementation normal method call simulated calling objcmsgsend directly prevent compiler converting optimized form good measure throw attribute objcdirect implementation well swizzled version two test well simulate runtime setting flag expresscall indicate abandon trying directly call method finally reasonablesounding probably misguided attempt preventing cpu branch predictor cache funny thing randomize order test computer macbook pro retina early intel r core tm cpu result build binclang expresscallbenchmarkmm expresscallbenchmark isysroot xcrun showsdkpath isystem xcodeselect p isystem xcodeselect p fmodules fcxxmodules framework foundation build expresscallbenchmark benchmarking average time sum number trial expresscall objcmsgsend direct swizzled expresscall swizzled objcmsgsend result require explanation clear expresscall significantly faster anything call method marked attribute objcdirect compiler managed inline implementions two time difference overhead check whether expresscall target valid one half microsecond per trial work twothirds nanosecond per method call swizzled objcmsgsend manages take fastest path function coming two nanosecond overhead call swizzled expresscall extra check taking difference unswizzled objcmsgsend take longer count numberatindex selector end colliding method cache lookup causing additional scanning necessary future extension expresscall easily outperforms objcmsgsend speculation pay ideally almost time even though particularly optimized branch highly predictable expect modern cpu able speculate memory access ahead time current implementation slight cost term code size memory usage may worth changing frontend implementation selectively apply expresscall optimization perhaps could augmented profileguided optimization information additional runtime support even slow swizzled case could performed check perform exactly one top objcmsgsend may able skip finally extra space saving check could factored short function benefit inlining desired may still performance benefit pushing speculated target stack prior calling checking function conditionally tail call objcmsgsend
40,Lobsters,objectivec,Objective-C programming,The Four Stages of Objective-Smalltalk,https://blog.metaobject.com/2019/12/the-4-stages-of-objective-smalltalk.html,four stage objectivesmalltalk,objectivesmalltalk webscript shasta webscript shasta objectivec without c instant build etoilé project eero language beyond object architecture oriented programming approach composition refinement objectoriented design alan kay architecture oriented metaprogramming three example,one feature confusing objectivesmalltalk actually several part significant frequently focus one fine without realising part also exist unfortunate valuable complement fact described stage logically built top webscript shasta objectivec always great integration language particularly plethora scripting language tcl python ruby lisp scheme variant etc due fact runtime dynamic also simple cbased term implemented c peer c however suffer two somewhat disparate language competing object model runtimes storage strategy etc one language issue webscript part webobjects essentially objectivecscript language interpreted peer could even implement category existing objectivec object syntactically compatible often could copypaste code two close ideal scripting language environment however fact objectivec already hybrid ugly compromise mean compromise often longer make sense webscript environment example objectivec string need added character plain double quote already taken c string c string webscripts primitive type like int declared really object declaration dummy nop square bracket message sends needed objectivec distinguish message rest c syntax also irrelevant webscript first stage objectivesmalltalk wasis good aspect webscript without syntactic weirdness needed match syntactic weirdness objectivec needed objectivec jammed c one figured obvious fact language essentially variant smalltalk believe pretty much match brent simmons called shasta implementationwise work similarly webscript everything language object get converted tofrom primitive sending receiving message needed great much interactive programming model havehad one seems deteriorating speak video isolated fragment interacting tweaking full application running video objectivec without c course getting rid syntactic weirdness objectivec scripting language mean longer syntactically compatible objectivec shame shame syntactic equivalence objectivec webscript meant could easily move code script become stable want reuse copy paste code objectivec file good go need faster objectivec code want explore create variant etc paste webscript smooth integration scripting programming rare valuable obvious solution native aotcompiled version scripting language use replace objectivec many scripting language struggled mightily becoming compiled language either getting requiring jit compiler enormous size complexity engineering effort attack surface since semantic model scripting language ist objectivec know aotcompile language fairly straightforward compiler probably lot simpler even cobjectivec compiler currently used plugging existing toolchain nice idea seems obvious apparently nt everything far would taken together make really nice replacement objectivec much productive let face fun developer experience however even given advantage simpler language smoothly integrated scriptingprogramming instant build really clear yet another oo language really sufficient example etoilé project eero language never went anywhere despite nice beyond object architecture oriented programming ever since diplomarbeit approach composition refinement objectoriented design back interested software architecture architecture description language adls way overcoming problem constructing larger piece software one thing noticed early element adl closely match generalise element programming language example objectoriented language object generalises component message connector seemed specific pogramming language specialisation instantiation general architecture language explore idea needed language amenable experimentation malleable enough allow metasystem abstract away object message simplesmall enough make experimentation feasible simple variant smalltalk would trick mature variant tend push towards building rather abstracting eat young alan kay objectivesmalltalk fit bill perfectly substrate architectureoriented programming fact built onwith objectivec came largely connect cunix world smalltalk world mean already good start build reinventing wheel simply picking arguably successfulpopular architectural style oo subsuming callreturn style unix pipe filter rest surprisingly least even specific style appear align reasonably well element programming language oo already welldeveloped objective smalltalk dataflow map smalltalk assignment operator needed made polymorphic anyway rest least partially map nonmessage identifier also polymorphic smalltalk built abstraction objectivesmalltalk admit surprise well work work together yes thesis yes see confirmation bias everywhere also bit longshot architecture oriented metaprogramming architectural style described implemented framework interface hardcoded language implementation however three example feasible create linguistic support defining architectural style language allowing user define refine architectural style ongoing work one key takeaway stage already quite useful probably worthy project get even addition later stage another need get back getting stage ready nt actually needed stage least initially
41,Lobsters,objectivec,Objective-C programming,Technical Deep Dive: How does Retroactive work?,https://medium.com/@cormiertyshawn895/deep-dive-how-does-retroactive-work-95fe0e5ea49e,technical deep dive retroactive work,download xcode category nsobject put n hipster hat revise swizzling skill id bool return void self selector,stack trace fascinating look like sort access violation initializing font going fix swizzling comapplecoretext ctfontgetclientobject comappleuifoundation uifontgetextradata comappleuifoundation nsfont initwithtypefaceinfo key renderingmode comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments comappleprokit nscell proappearanceextensions prosetfont comappleappkit nstextfieldcell setfont comappleappkit nstextfieldcell init comappleappkit nsibobjectdata nibinstantiatewithowner option toplevelobjects comappleappkit nsnib instantiatenibwithexternalnametable option comappleappkit nsnib instantiatewithowner option toplevelobjects comappleappkit nsviewcontroller loadview comappleappkit nsviewcontroller loadviewifrequired comappleappkit nsviewcontroller view comappleappkit nswindowcontroller windowdidload comappleappkit nswindowcontroller window create new framework xcode swizzle broken method aperture fill selector removedit swizzle time swizzle existing app course use xcodeif xcode yet download xcode create new xcode project macos framework templatemake sure language objectiveccreate new filecreate objectivec filethe easiest way swizzle something make category nsobject call methodexchangeimplementations load name file swizzling name whatever wantif want swizzle problematic initializer nsprofont time put n hipster hat revise swizzling skillsimport objectivec runtime header let fun beginimport objcruntimeh refer back problem report suspect comappleprokit nsprofont prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments obvious idea initialize regular system font instead whatever special pro font aperture trying failing initialize nsfont swizzledprosystemfontwithfontname nsstring name pointsize cgfloat size fontappearance id appearance usesystemhelveticaadjustments bool adjustment return nsfont systemfontofsize size use dynamic objectivec runtime exchange aperture implementation void load methodexchangeimplementations classgetclassmethod nsclassfromstring nsprofont nsselectorfromstring prosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments classgetclassmethod self class selector swizzledprosystemfontwithfontname pointsize fontappearance usesystemhelveticaadjustments wishful thinking initializing font fail probably get u next step
42,Lobsters,objectivec,Objective-C programming,High Performance Numeric Programming with Swift: Explorations and Reflections,https://www.fast.ai/2019/01/10/swift-numerics/,high performance numeric programming swift exploration reflection,high performance numeric programming swift exploration reflection swift web application command line tool basemath background chris lattner swift tensorflow serious effort differentiable programming named tensor differentiate swift llvm contributed protocoloriented programming value type automatic reference counting arc common problem gc finalizers copyonwrite protocol helpful guidance generic float double gyb basic math function performance trick result using c swift package manager reduction temporary storage wart dynamic feature objectivec notation tool thought packaging installation great stride c many significant restriction aten julia challenge solution cppsharp already done twice conclusion,high performance numeric programming swift exploration reflection written jan jeremy howard past week working building numeric programming library swift wait swift io programmer use building apps nowadays swift run linux mac used web application command line tool nearly anything else think using swift numeric programming training machine learning model area many people working little information around topic week research experimentation managed create couple library achieve speed carefully optimized vectorized c code whilst concise easy use article take journey show learned use swift effectively numeric programming include example mainly basemath library provides generic math function float double optimized version various collection along way plenty say positive negative swift language someone deep emotional connection favorite programming language like see criticism might want skip post future post also show get additional speed functionality interfacing intel performance library c background generally around new year try experiment new language framework one approach worked particularly well look people built favorite language book library approach led early user delphi typescript c anders hejlsberg used turbo pascal perl larry wall used rn jquery john resig read modern javascript learnt chris lattner wrote wonderful llvm creating new deep learning framework called swift tensorflow shorten decided take look note boring swift wrapper tensorflow first serious effort seen incorporate differentiable programming deep heart widely used language hoping give u language framework first time treat differentiableprogramming firstclass citizen programming world allow u thing like write custom gpu kernel swift provide compiletime check named tensor axis name size matching differentiate arbitrary code whilst also providing vectorized fused implementation automatically thing available least yet fact early day project nearly none deep learning functionality work yet fully expect happen eventually happens confident using differentiable programming swift far better experience swift language lucky enough bump chris recent conference told interest kind enough offer help get started swift always found work matter much productivity happiness work another excellent reason spend time project chris terrifically helpful supernice thanks chris swift swift generalpurpose multiparadigm compiled programming language started chris lattner apple supported many concept objectivec main language used programming apple device chris described language syntax sugar llvm since map closely many idea compiler framework coding around year time used dozen language even contributed always hope start looking new language mindopening new idea find swift definitely disappoint swift try expressive flexible concise safe easy use fast language compromise significantly least one area personal view language used enjoyed limitation found frustrating time python slow runtime poor support parallel processing easy use c c hard use c slow compile time fast c expressive javascript unsafe unless use typescript somewhat slow easy use flexible julia poor support general purpose programming fast expressive numeric programming edit may bit unfair julia come long way since last looked java verbose getting better particularly use kotlin le flexible due jvm issue somewhat slow overall language many useful application area c f perhaps fewest compromise major programming language still requires installation runtime limited flexibility due garbage collection difficulty making code really fast except window interface via ccli say swift actually pretty good job avoiding major compromise possibly rust used seriously make informed comment best area mentioned far either know another single language make claim note also downside address last section article look briefly turn concise create new array b add every element let bamap anonymous function automatic name first parameter optionally add name type like type b inferred automatically see lot done small amount code expressive line code work array object support certain operation defined sequence swift standard library also add support sequence object even add existing swift type type library soon object get functionality free flexible much swift use mobile apps desktop apps server code even system programming work well parallel computing also handle somewhat smallmemory device safe swift fairly strong type system good job noticing done something going work good support optional value without making code verbose need extra speed flexibility generally way bypass swift check fast swift avoids thing make language slow eg use garbage collection allows use value type nearly everywhere minimizes need locking us llvm behind scene excellent support creating optimized machine code swift also make easy compiler know thing immutable avoids aliasing also help compiler optimize see often get performance carefully optimized c code easy use one area perhaps bit compromise quite easy write basic swift program obscure type issue pop mysterious error message long way real site problem occurred installing distributing application library challenging also language changing lot better information online date requires change make work said far easier use something like c protocoloriented programming main trick let swift avoid compromise use protocoloriented programming basic idea try use value type much possible language easeofuse important reference type widely used since allow use garbage collection virtual function overriding superclass behavior forth protocoloriented programming swift way getting many benefit whilst avoiding overhead reference type addition avoiding reference type avoid complex bug introduced two variable pointing thing value type also great match functional style programming since allow better support immutability related functional concern many programmer particularly javascript world recently developed understanding code concise understandable correct leveraging functional style used language like c already familiar idea defining something struct give value type using class give reference type exactly swift handle thing get protocol let mention couple fundamental automatic reference counting arc copyonwrite automatic reference counting arc doc swift us automatic reference counting arc track manage app memory usage case mean memory management work swift need think memory management arc automatically free memory used class instance instance longer needed reference counting traditionally used dynamic language like perl python seeing modern compiled language quite unusual however swift compiler work hard track reference carefully without introducing overhead arc important handling swift reference type still need use sometimes also handle memory use value type object sharing memory copyonwrite semantics embedded reference type chris also mentioned number benefit provides deterministic destruction eliminates common problem gc finalizers allows scaling system tcan want gc eliminates unpredictableunreproducible pause copyonwrite one major problem value type language something like big array want pas whole thing function since would require lot slow memory allocation copying language use pointer reference situation swift however pass reference original memory reference mutates object get copied done behind scene automatically get best performance characteristic value reference type combined refered copyonwrote rather delightfully refered doc cow yes cow face emoji cow also help programming functional style yet still allowing mutation without overhead unnecessary copying verbosity manual reference protocol value type use inheritance hierarchy get benefit objectoriented programming although still use use reference type also supported swift instead swift give u protocol many language typescript c java idea describes property method object contain first glance protocol look lot like interface instance definition basemath library composedstorage protocol describing collection wrap collection defines two property data endindex one method subscript special method swift provides indexing functionality like array protocol definition simply say anything conforms protocol must provide implementation three thing public protocol composedstorage associatedtype storage mutablecollection storageindexint typealias indexint var data storage get set var endindex int get subscript int storageelement get set generic protocol generic protocol use type marker like generic class instead use associatedtype keyword case composedstorage saying data attribute contains something generic type called storage conforms mutablecollection protocol type turn associatedtype called index must type int order conform composedstorage also say subscript method return whatever type storage element associatedtype contains see protocol provide quite expressive type system look see something also implementation provided protocol public extension composedstorage subscript int storageelement get return data set data newvalue var endindex int return datacount thing get really interesting providing implementation automatically adding functionality object conforms protocol instance entire definition basemath alignedstorage class provides arraylike functionality internally us alignedmemory often required fast vectorized code public class alignedstorage supportsbasicmath basevector composedstorage public typealias elementt public var data unsafemutablebufferpointer public required init data unsafemutablebufferpointer selfdatadata public required convenience init count int selfinit unsafemutablebufferpointer count public required convenience init array array selfinit unsafemutablebufferpointer array deinit unsafemutablerawbufferpointer data deallocate public var p mutptrt get return datap public func copy self return init datacopy see much code yet class provides functionality protocol randomaccesscollection mutablecollection expressiblebyarrayliteral equatable basevector together include hundred method map find droplast distance possible protocol class conforms basevector composedstorage provide functionality protocol extension either directly protocol turn conform incidentally may noticed defined alignedstorage class struct despite earlier hype value type important realize still situation class required apple documentation provides helpful guidance topic one thing structs yet support deinit ability run code object destroyed case need deallocate memory done object need deinit mean need class one common situation find really need use protocol want behavior abstract class swift support abstract class get effect using protocol eg code composedstorage defines data implement protocol extension therefore act like abstract property true multiple inheritance supported swift class conform multiple protocol extension sometimes refered mixins swift protocol extension share lot idea trait rust typeclasses haskell generic float double numeric programming creating library probably want transparently support least float double however swift make easy protocol called binaryfloatingpoint theory support type unfortunately three math function swift defined protocol ab max min standard math operator could course simply provide separate functionality type got deal creating two version everything user deal problem interestingly enough found discussion issue online swift library suffer issue multiple place discussed swift used much numeric programming kind issue deal btw search numerical programming code online often see use cgfloat type suffers objectivec naming convention limitation learn later provides support one float double depending system running fact cgfloat exists linux port swift rather odd created applespecific compatibility reason almost certainly something wanting use resolving problem actually fairly straightforward good example use protocol basemath created supportsbasicmath protocol extracted public protocol supportsbasicmath binaryfloatingpoint func self func logb self func nearbyint self func rint self func sin self tell swift float conforms protocol also provide implementation method extension float supportsbasicmath inlinable public func float return self inlinable public func logb float return foundationlogb self inlinable public func nearbyint float return foundationnearbyint self inlinable public func rint float return foundationrint self inlinable public func sin float return foundationsin self library code simply use supportsbasicmath constraint generic type call usual math function directly swift already provides support basic math operator transparent way anything make work thinking must major pain write wrapper function handy trick used meant computer trick use gyb template autogenerate method using python code like f binfs func f b self self end f look swift code base see trick used liberally example define basic math function hopefully future version see generic math function standard library meantime use supportsbasicmath basemath performance trick result one really cool thing swift wrapper like runtime overhead see marked inlinable attribute tell llvm ok replace call function actual function body kind zerooverhead abstraction one important feature c really amazing see concise expressive language swift let experiment see work running simple benchmark adding every element array float swift assuming already allocated array appropriate size use code note benchmark simple function basemath time block code benchmark title swift add swift add m million floating point addition millisecond pretty impressive look happens try one minor tweak benchmark title swift ptr add let swift ptr add m nearly code yet twice fast happened basemath add p property array return pointer array memory code using pointer instead array object normally swift handle complexity cow fully optimize loop like using pointer instead skip check swift run code full speed note due copyonwrite possible array move assign also move thing resize therefore grab pointer time need code still pretty clunky swift make easy u provide elegant idiomatic interface added new map method array put result preallocated array instead creating new array definition map us typealiases basemath make bit concise inlinable public func map basevector f unaryf dest selfelementtelement let psrc p let pdest destp let n count n pdest f psrc see plain swift code cool thing let u use clear concise code still get performance saw benchmark title map add map add m think quite remarkable able create simple api fast pointer code class user complexity entirely hidden away course really know fast yet compared c let next using c one really nice thing swift easy add c code write use external c library use c code simply create new package swift package manager spm pop c file source directory h file sourcesinclude directory oh btw basemath h file entirely autogenerated c file using gyb level c integration extremely rare implication huge mean every c library including functionality built operating system optimized math library tensorflow underlying c api forth accessed swift directly reason need drop c without manual interfacing code extra build step sum function c float double version similar two generated single gyb template void smaddfloat const float psrc const float val float pdst const int len int len pdst psrc val call need pas count basemath add c property array purpose alternatively could simply use numericcast result benchmark title c add smaddfloat c add m basically speed swift encouraging result show get performance optimized c using swift swift idiomatic concise swift thanks method like reduce map look much closer math equation language fast reduction let try different experiment taking sum array idiomatic swift code benchmark title reduce sum reduce sum m thing loop benchmark title loop sum size loop sum m let see earlier pointer trick help time benchmark title pointer sum let size pointer sum m well odd faster suggests getting best possible performance let switch c see performs float smsumfloat const float psrc const int len float r int len r psrc return r result benchmark title c sum smsumfloat c sum m compared performance intel optimized performance library version sum found even faster handoptimized assembler get perform better swift however need know little trick provided llvm vectorization doc compile ffastmath flag numeric programming like recommend always use least flag used experiment although also add marchnative change optimization level ofast xswiftc ounchecked xcc ffastmath xcc need flag strictly speaking addition associative due quirk floating point practice unlikely something people care default clang use strictly correct behavior mean vectorize loop simd ffastmath telling compiler mind treating addition associative amongst thing vectorize loop giving u improvement speed important thing remember good performance c code like ensure const marked everything change done code unfortunately seem currently way get swift vectorize reduction least use c get good performance limitation language optimization swift team gotten around implementing yet good news basemath add sum method array us optimized c version use basemath get performance automatically result test failure manage get pure swift reach performance c least got nice c version call swift let move another test see get better performance avoiding reduction temporary storage want function reduction sumofsquares ideally like able combine map style sum without getting performance penalty swift unoptimized reduction make work trick use temporary storage use map function store result preallocated memory pas c sum implementation want something like static variable storing preallocated memory deal locking handle contention thread avoid use thread local storage tl like language swift provides tl functionality however rather make part core language like say c provides class access threadcurrentthreaddictionary basemath add preallocated memory dictionary make available internally tempstore internal implementation unary function reduction also binary ternary version available inlinable public func sum f unaryf element selfmap f tempstore return tempstoresum use follows benchmark title lib sum sqr floatsqr lib sum sqr m provides nice speedup regular swift reduce version benchmark title reduce sumsqr reduce sumsqr m c version float smsumsqrfloat const float restrict psrc const int len float r pragma clang loop interleavecount int len r sqrf psrc return r let try benchmark title c sumsqr smsumsqrfloat c sumsqr m c implementation sum standard unary math function made available basemath call implementation simply using benchmark title lib sumsqr c sumsqr m summary whilst swift version using temporary storage calling c final sum twice fast using reduce using c another time faster wart see lot like numeric programming swift get performance optimized c convenience automatic memory management elegant syntax concise flexible language used python fastest used c actually fortran let go stack high bar idea could compare single language flexibility python speed c amazing achievement overall view general take bit code swift python write stuff want write fewer way abstract common code instance use decorator lot python use write load code use args kwargs lot new dynamic feature swift provide functionality go far zip multiple variable together swift zip pair pair multiple variable use nested parens destructure code write get type lined nicely also find swift performance harder reason optimize c c quirk around performance need use const sometimes even requiring restrict help compiler generally better documented better understood consistent also c compiler clang gcc provide powerful additional capability using pragmas omp loop even autoparallelize code said swift closer achieving combination python expressiveness c speed language used issue still aware one thing consider protocoloriented programming requires different way thing probably used long run probably good thing since learning new programming style help become better programmer could lead frustration first week issue particularly challenging swift compiler often idea source protocol type problem really ability guess type still pretty flaky extremely minor change changing name type changing type constraint defined change something used work something spit four screen error message advice try create minimal version type structure standalone test file get thing working first note however ease use generally requires compromise python particularly easy perfectly happy shoot foot swift least make sure first know untie shoelace chris told pitch building swift first place important thing optimize end end time get correct implementation whatever trying includes time pound code time debug time refactormaintain making change existing codebase enough experience yet suspect metric swift turn great performer part swift fan compromise made due apple history objectivec packaging system community lack c support precise largely part swift ecosystem fan language quite delightful ecosystem fixed situation swift programmer deal let look issue turn objectivec objectivec language developed designed bring objectoriented feature smalltalk c successful project picked next basis programming nextstep next acquisition apple became primary language coding apple device today showing age constraint imposed decision make strict superset c instance objectivec support true function overloading instead us something called selector simply required keyword argument function full name defined concatenation function name selector name idea also used applescript provides something similar allow name print mean different thing different context print page print document print page thru document applescript turn inherited idea hypertalk language created apple muchloved missed hypercard program given history surprising today idea required named argument something folk apple quite attachment perhaps importantly provided useful compromise designer objectivec since able avoid adding true function overloading language keeping close compatibility c unfortunately constraint impact swift today year situation led introduction objectivec swift provide true function overloading particularly important numeric programming really want create whole separate function float double complex number quaternion default keyword name still required lead verbose visually cluttered code apple style guide strongly promotes style coding objectivec swift style guide closely mirror rather allowing programmer really leverage swift unique capability opt requiring named argument prefixing parameter name basemath us everywhere optional argument needed another area thing get rather verbose come working foundation apple main class library also used objectivec swift standard library missing lot functionality need often need turn foundation get stuff done enjoy pleasure using elegantly designed language swift something particularly sad using access unwieldy library foundation instance swift standard library provide builtin way format float fixed precision decided add functionality supportsbasicmath protocol code extension supportsbasicmath public func string digit int string let fmt numberformatter fmtminimumfractiondigits digit fmtmaximumfractiondigits digit return fmtstring selfnsnumber self fact add functionality float double writing extension really cool ability handle failed conversion swift operator look verbosity code actually use numberformatter class foundation even accept float double awkward nsnumber type objectivec clunky workaround lack generic objectivec add nsnumber property supportsbasicmath casting swift language help support concise style f style closure concision important numeric programming since let u write code reflect closely math implementing understand whole equation glance masterful exposition much see iverson turing award lecture notation tool thought objectivec also namespaces mean project pick letter prefix add symbol foundation library still us name inherited objectivec find using type like cgfloat function like cfabsolutetimegetcurrent every time type one symbol sure baby unicorn cry swift team made surprising decision use objectivec implementation foundation library running swift apple device use native swift library linux result sometimes see different behavior platform instance unit test framework apple device unable find run test written protocol extension work fine linux overall feel like constraint history objectivec seem bleed swift programming often time happens real friction pop time however issue seem reducing hope future see swift break objectivec shackle instance perhaps see real effort create idiomatic swift replacement objectivec class library using python lot last couple year one thing always bothered many people python community ever used one language since great beginner language widely taught undergraduate result lack awareness different language thing different way choice pro con instead python world tendency folk think python way one true way seeing something similar swift way even worse swift programmer got start objectivec programmer lot discussion see online objectivec programmer writing swift style closely parallel thing done objectivec nearly nearly programming xcode almost certainly least favorite ide except wonderful swift playground feature lot advice find online show solve swift problem getting xcode thing rather writing code swift programmer writing io apps also find lot guidance lay mobile gui almost information thing like distribute command line program linux compile static library general linux support swift still new much information available use many library tool work linux time tracking problem protocol conformance trying figure optimize piece code information could find would mailing list discussion amongst apple swift language team discussion tend focus innards compiler library rather use big missing middle ground app developer discussing use xcode swift language implementation discussing modify compiler good community forming around around discorse forum http forumsswiftorg hopefully time turn useful knowledge base swift programmer packaging installation swift officially sanctioned package system called swift package manager spm unfortunately one worst packaging system ever used noticed nearly every language creating package manager reinvents everything scratch fails leverage success failure previous attempt swift follows unfortunate pattern truly excellent packaging system best perhaps still perl cpan includes international automated testing service test package wide range system deeply integrates documentation excellent tutorial much another terrific modern system conda handle languagespecific library focus python also handle automatically installing compatible system library binary manages everything home directory even need root access work well linux mac window handle distribution compiled module source spm hand none benefit system even though swift compiled language provide way create distribute compiled package mean user package install prerequisite building spm let describe build package instance use basemath remember add flag required good performance build something us way dependency handled really awkward git tag branch used dependency easy way switch local dev build packaged version like instance e flag pip conda develop command instead modify package file change location dependency remember switch back commit would take far long document deficiency spm instead work assumption useful feature appreciated whatever packaging system using probably spm hopefully someone get around setting condabased system swift start using also installation swift mess linux instance ubuntu supported different version require different installers mac swift version tied xcode version confusing awkward way command line xcode version somewhat separate yet somewhat linked way make brain hurt conda seems like could provide best option avoid since single conda package used support flavor linux mac also supported way work done get swift conda would possible say conda install swift system everything would work would also provide solution versioning isolated environment complex dependency tracking window luck old unofficial port cygwin swift run fine window subsystem linux official native window swift yet sadly excellent news front hero named saleem abdulrasool made great stride towards making complete native port entirely indepdently last day gotten point vast majority swift test suite pass c whilst apple went objectivec c object solution rest world went c eventually objectivec extension also added c create objectivec attempt unify concept across language resulting language mutant many significant restriction however nice subset language get around biggest limitation c instance use function overloading access rich standard library unfortunately swift interface c even something simple header file containing overloaded function cause swift language interop fail big problem numeric programmer many useful numeric library today written c instance aten library heart pytorch c good reason numeric programmer lean towards c provides feature needed concise expressive solution numeric programming problem example julia programmer rightly proud easy support critical broadcasting functionality language documented julia challenge c challenge elegant fast solution find something like pure c however mean large increasing number important building block numeric programming bound swift programmer serious problem write plain c wrapper c class create swift class us wrapper big boring job sure many people likely embark language shown potential way around instance c window provides work ijw interfacing ccli superset c support net even interestingly cppsharp project leverage llvm autogenerate c wrapper c code calling overhead solving problem easy swift swift us llvm already interface c objectivec perhaps better placed come great solution nearly language except perhaps julia since already done twice conclusion swift really interesting language support fast concise expressive numeric programming swift tensorflow project may best opportunity creating programming language differentiable programming first class citizen swift also let u easily interface c code library however swift linux still immature packaging system weak installation clunky library suffer rough spot due historical tie objectivec stack data science world mainly stuck using either r least pleasant language ever used beautifully designed data munging plotting library anywhere python painfully slow hard parallelize extremely expressive best deep learning library available really need another option something fast flexible provides good interop existing library overall swift language look exactly need much ecosystem need replaced least dramatically leveledup data science ecosystem speak although project seems likely create important piece really good place spending time interested part something huge amount potential really great people working make happen ok helping smooth wart along way
43,Lobsters,objectivec,Objective-C programming,objc_msgSend’s New Prototype,https://www.mikeash.com/pyblog/objc_msgsends-new-prototype.html,objcmsgsend new prototype,prototype changed system v abi variation standard abi click information comment r feed page pygments,objcmsgsend new prototype apple new os looked documentation may noticed prototype objcmsgsend changed previously declared function took id sel variadic argument returned id declared function take return void similar function like objcmsgsendsuper also became voidvoid change true prototypethere big surprisingly difficult question behind true prototype objcmsgsend say parameter actually take actually return question nt straightforward answer may heard objcmsgsend implemented assembly commonly called need every bit performance get true entirely complete possible implement c speed fast path objcmsgsend critical thing load class object look selector class method cache jump method implementation found cache perspective method implementation look like caller invoked directly objcmsgsend jump straight method implementation without making function call effectively disappears job done implementation careful disturb register used pas argument function caller call objcmsgsend going directly call method implementation passing parameter way would direct function call objcmsgsend look implementation jump parameter still exactly implementation expects implementation return return directly caller return value provided standard mechanism answer question prototype objcmsgsend method implementation end calling wait nt whole point dynamic method lookup message sending nt know method implementation calling true however know type signature implementation compiler get information declaration method interface protocol block us generate appropriate parameter passing return value fetching code override method compiler complains nt match type signature possible work around hiding declaration adding method runtime case end type signature method implementation nt match call site behavior call depends two type signature match abi level anything perfectly reasonable correct behavior abis match parameter happen line complete nonsense nt hint answer article question old prototype worked circumstance abis matched failed strangely others abis nt match new prototype never work unless cast appropriate type first long cast correct type always work new way thing thus encourages thing correctly make harder thing wrong minimal prototypealthough prototype objcmsgsend depends method implementation called two thing common across method implementation first parameter always id self second parameter always sel cmd number type additional parameter unknown return type two parameter known objcmsgsend need two piece information perform method dispatch work always place able find could write approximate generalized prototype objcmsgsend represent objcmsgsend id self sel cmd mean nt know depends particular method implementation called course c way represent wildcard like return value try pick something common since objectivec object would make sense assume return value id id objcmsgsend id self sel cmd cover case return value object also case void case different type value nt used parameter c actually way indicate arbitrary number parameter arbitrary type form variadic function prototype ellipsis end parameter list mean variable number arbitrarily typed value follows id objcmsgsend id self sel cmd exactly prototype used recent change abi mismatchesthe pertinent question runtime whether abi call site match abi method implementation say receiver retrieve parameter location format caller pass caller put parameter rdx implementation need retrieve parameter rdx otherwise havoc ensue minimal prototype may able express concept passing arbitrary number arbitrary type actually work runtime need use abi method implementation implementation almost certainly using different prototype usually fixed number argument guarantee abi variadic function match abi function fixed number argument platform match almost perfectly others nt match intel abilet look concrete example macos us standard system v abi ton detail abi focus basic parameter passed register integer parameter passed register rdi rsi rdx rcx order floating point parameter passed sse register calling variadic function register al set number sse register used pas parameter integer return value placed rax rdx floatingpoint return value placed abi variadic function almost identical abi normal function one exception passing number sse register used al however harmless using variadic abi call normal function normal function ignore content al c language mess thing bit c specifies certain type get promoted wider type passed variadic argument integer smaller int char short get promoted int float get promoted double method signature includes one type possible caller pas parameter exact type using variadic prototype integer nt actually matter integer get stored bottom bit appropriate register bit end place either way however catastrophic float converting smaller integer int requires padding extra bit converting float double involves converting value different structure altogether bit float nt line corresponding bit double try use variadic prototype call nonvariadic function take float parameter function receive garbage illustrate problem quick example use old variadic prototype objcmsgsend define objcolddispatchprototypes import foundationfoundationh import objcmessageh interface foo nsobject end implementation foo void log float x printf fn x end int main int argc char argv id obj foo new obj log float mpi objcmsgsend obj selector log float mpi produce output see value came correctly written message send got completely mangled passed explicit call objcmsgsend remedied casting objcmsgsend right signature recall objcmsgsend actual prototype whatever method end invoked correct way use cast corresponding function pointer type call work correctly void id sel float objcmsgsend obj selector log mpi abilet look another relevant example io us variation standard abi integer parameter passed register floating point parameter passed additional parameter passed stack return value placed register register would passed parameter true normal parameter variadic parameter never passed register always passed stack even parameter register available need careful analysis work practice abis completely mismatched method called uncast objcmsgsend receive garbage parameter new prototypethe new prototype short sweet nt correct however neither old prototype one much obviously incorrect good thing old prototype made easy use without casting worked often enough could easily end thinking everything ok hit problematic case bug unclear prototype nt even allow pas two required parameter self cmd call parameter immediately crash pretty obvious went wrong try use without casting compiler complain much better weird broken parameter value still function type still cast function pointer appropriate type invoke way work correctly long get type right enjoy article selling whole book full volume ii iii available epub pdf print ibooks kindle click information comment comment r feed page add thought post comment spam offtopic post deleted without notice culprit may publicly humiliated sole discretion javascript required submit comment due antispam measure please enable javascript reload page code syntax highlighting thanks pygments
44,Lobsters,objectivec,Objective-C programming,Darling Progress Report Q2 2019,http://blog.darlinghq.org/2019/07/darling-progress-report-q2-2019.html,darling progress report,summary progress darling community discord http darling core james urquhart kamillys new website sergey project website appkit kamillys nested framework andrew framework nesting v reexporting foundation curioustommy kamillys corefoundation improved tommy going forward open issue github wiki,summary progress excited say april june saw community involvement ever many pull request submitted spanned bug fix low level assembly higher level module appkit framework thanks everyone contribution hope level engagement continue darling community discord relied solely github issue long time become apparent platform people ask general question share knowledge coordinate effort necessary official discord server open everybody join order discus anything darling related invite link http feel free join invite anyone may interested darling core community submitted pull request ever received james urquhart pull request gave u stub many framework including drawsprocket agl carbon coreservices applicationservices wow list thank james james also fixed low level bug system call large number argument would nt work properly application finally fixed problem darling using clocksleep instead clocknanosleep bug stat system call commits sent kamillys gave u stub addressbook carbon framework new website sergey remade project website using hugo new website look modern adapts mobile device refresh look snazzy frequently asked question section site perfectly placed answer commonly sought information whole page right balance content without overwhelming viewer technical detail new site also highlight key feature goal darling including fast free compatible easy use native appkit continued improvement seen implementation appkit sergey squashed bug including crashing spelling engine present pointer wrong printing format got pasteboard work appkit ctrlcctrlv away even pretend command want github user kamillys also submitted pr gave appkit stub nsapplication nsworkspace appkit also also reexports applicationservices solving crash due undefined symbol program loaded nested framework framework macos appear one framework hood made subframeworks usually reexported linked appears one big framework build system nt support nested framework june andrew added support system framework accelerate file structure macos accomplished using cmake magic carefully replicating structure system framework framework nesting v reexporting reexporting dynamic library present also containing symbol library framework reexporting symbol typically function constant class link appkit without linking foundation use foundation symbol nested framework one framework placed inside case larger framework broken subframeworks like coreservices applicationservices need parent framework reexport subframeworks order appear one framework another use case nesting framework framework relies supporting library meant used framework like keeping private case parent framework would nt reexport would instead link child framework foundation good amount attention received foundation time nskeyedarchivernskeyedunarchiver many bug fix improvement submitted curioustommy stability area important nskeyedarchiver used serialize object extensively almost every cocoa application addition improvement tommy gave foundation symbol nsscriptclassdefinition category nsobject fixed issue macro nsobjcruntimeh stub also added kamillys nsscriptclassdescription nscallbacks function foundation missing change improve general compatibility name implies foundation fundamental relied many library application corefoundation error handling nsset improved tommy better checking parameter particularly someone try insert nil object set nt supposed possible possible thanks tommy going forward strong community involvement always exciting motivating received lot feedback pull request question way contribute learn join discord linked top post first trying help open source project may seem unclear help none open issue github jump discord perfect place ask start wiki also useful contains build instruction workarounds known build problem also nice see community step fix specific bug anticipated last progress report release macos coming month drop support application darling plan continue supporting application long time gui support improves strong option application stop working due lack capability see month darling project
45,Lobsters,objectivec,Objective-C programming,6 mac apps that fit everyone,https://sobolevn.me/2019/07/6-best-mac-apps,mac apps fit everyone,tldr dotfiles command line productivity using better cli sindresorhus done openinterminallite spectacle wonderful repo use lookandfeel online,often see list awesome apps going use one fit one different list contains simple yet powerful productivity booster totally fit everyone tldr list mac apps using found dotfiles rest setup previous ontopic article command line productivity using better cli new project sindresorhus simple yet amazing reason traditional mac clock show date calendar someone asks date today open calendar app seriously app solves improved clock calendar timezones new app announced might also want hide original clock status bar done next app allows highlighting currently focused window sound like much feel app amazing work great light dark background watch video look awesome traveling around file finder might need open current folder inside terminal draganddrop terminal many user like use openinterminallite add new icon finder open anything inside terminal editor single click spectacle allows using keyboard shortcut reorganize window desktop lifesaver people lot opened window complex workflow want ide opened next browser two key press want terminal sorted two key press simple whole set different quick preview plugins wonderful repo amazing thing quick preview like highlight code allows view image size highlight prettyprints transforms json really mention flux everyone already one installed flux turn monitor color warm night allows eye brain rest use try demo lookandfeel online apps use problem solve provide like favorite apps dotfiles comment
46,Lobsters,objectivec,Objective-C programming,Skiptracing: Reversing Spotify.app,https://medium.com/@lerner98/skiptracing-reversing-spotify-app-3a6df367287d,skiptracing reversing spotifyapp,skiptracing reversing spotifyapp project data http hooking finding hook http githubcomnevynspmediakeytap http hookcase http githubcomstevenmichaudhookcase finding hooking rest http conclusion,skiptracing reversing spotifyappi one personal project finish think software developer relate awesome idea due work responsibility end forgotten buried tasksnow success story one said project completed story longforgotten project revived given new life fact hoping writing force eventually finish project enough introduction let get itthe projectthe goal project build spotify client learns listening habit skip song would normally skip like many program desire come laziness want create find playlist mood certain music want select song library shuffle rest song flow deleted queueto accomplish need learn sort model able perform task maybe future post able train model first need data train withthe datai basically want entire listening history including song skip fairly straightforward get extended history even though spotify api allows get last played song set cron job repeatedly poll endpoint effectively keeping track every listen code posted http hard part tracking skip spotify web api provides endpoint past created service control playback using spotify applescript api rest post pertain macos spotify client could use service keep track skipped felt like shying away challenge else could accomplish hookingi recently learned process called hooking intercept function call made target binary thought would perfect way track skipsthe common type hook interpose hook type hook overwrites relocation plt exactly mean plt procedure linkage table allows code reference external function think libc without knowing function memory reference entry plt linker performs relocation function symbol plt runtime one benefit approach external function loaded different address relocation plt need changed every reference function codeso create interpose hook say printf whenever process hooking call printf implementation printf called instead libc oftentimes custom library also call standard implementation got little bit background belt hooking almost ready try inserting hook spotify first need figure want hookfinding hookas stated earlier interpose hook created external function look function libc objectivec runtimewhile researching hook thought good place start looking would spotify handle medium control key macbook seemed safe assume handler key would call function called say next button clicked spotify app eventually came across spmediakeytap library http githubcomnevynspmediakeytap figured give shot see whether spotify copy pasted code library would make life whole lot easierin spmediakeytap library method startwatchingmediakeys ran string command spotify binary see method sure enough bingo load spotify binary ida free version course search string find corresponding method partial disassembly startwatchingmediakeysif look corresponding source code function find interesting parameter tapeventcallback cgeventtapcreate function source code startwatchingmediakeysif look back disassembly see subroutine passed tapeventcallback parameter look either source code disassembly function see one library function cgeventtapenable called cgeventtapenable called tapeventcallbacklet try hook functionthe first thing need create library define custom cgeventtapenable fairly simple following code include corefoundationcorefoundationh include dlfcnh include stdlibh include stdioh void cgeventtapenable cfmachportref tap bool enable typeof cgeventtapenable oldtapenable printf hooked n oldtapenable dlsym rtldnext cgeventtapenable oldtapenable tap enable dlsym function call get address actual library cgeventtapenable function call old implementation accidentally break anything let compile library like credit http gcc fnocommon c filename c gcc dynamiclib library name filename ogreat let try running spotify inserting hook dyldinsertlibraries library name applicationsspotifyappcontentsmacosspotify hit enter uh oh spotify opened fine apple system integrity protection sip let u load unsigned library seems sort complaint codesigning luckily member apple reasonably priced developer program codesign library crisis averted let sign library certificate run previous command surprisingly apple let insert library signed old identity one used signing original binary look like find another way dig hook spotifyas side note astute reader might notice function hooking cgeventtapenable called medium key event time even could insert hook would triggered edge case likely seen output section main purpose detail initial fail oversight serve learning experiencehookcaseafter digging came across awesome library hookcase http githubcomstevenmichaudhookcase hookcase let u implement much powerful type hook interpose hook patch hookpatch hook inserted modifying function wish hook trigger interrupt interrupt handled kernel transfer execution personal code interested highly recommend reading hookcase documentation much detailedpatch hook allow u hook call external function function within target binary since rely plt hookcase provides u framework insert patch andor interpose hook well kernel extension handle interrupt generated patch hook run custom code truly great framework invaluable projectfinding way hook function within spotify binary one question let revisit spmediakeytap source code see medium control key handled callback function see nxkeytypeprevious nxkeytypeplay etc pressed execute handleandreleasemediakeyevent selector delegate notified said selector let look delegate method repo turn lay template handling key let search function receivedmediakeyevent ida look graph view corresponding function look pretty similar see one common function called type key integer parameter set distinguish let hook see log key pressedwe see disassembly get two parameter pointer playerdelegate property sptclientappdelegate singleton integer specifying type event occurred pauseplay next previous looking include highly recommend check see actually wrapper contains meat woah look complex let try break bitlooking structure graph single node towards top many outgoing edge ida helpfully suggests switch statement esi second integer parameter described earlier look like spotify handling little previous pauseplay next though let focus block handle next admittedly took time decipher want draw attention call line fourth bottom look case find similar pattern calling register seems like good function look know let crack open new tool debugger lot trouble initially trying debug spotify could due masterful debugger think came pretty clever solutionwe first set hook trigger breakpoint within code executing assembly instruction int debugger like gdb lldb use trigger breakpointshere hook look like hookcase framework adding hookcase template library also add userhooks array compile using template makefile hookcase provides substituting filename course library inserted spotify following command hcinsertlibrary full path hook dylib applicationsspotifyappcontentsmacosspotifywe run lldb attach running spotify process like continuing past initial trap try pressing spotify active window first press may open itunes int line hook triggered debuggerwe step reach entrypoint notice pc offset address one shown ida honestly best grasp happens assume due process loaded memory current process push instruction located ida address instruction give u offset ida address call instruction add offset address set breakpoint accordingly b continuewhen hit target instruction print content register subtract offset address voila get titular address hook function confirm suspicion add userhooks array compile run lo behold time press click next button spotify app message loggednow hooked skip function resti post rest code go process reverse engineering rest post already pretty longin short also hooked previous function good exercise following along either hook first check past halfway current song anything assuming gotten bored song fit back pop last skipwhere way found check current song past halfway deserves word initial way actually call popen run corresponding applescript command feel righti ran classdump spotify binary found two class spapplescriptobjectmodel spapplescripttrack method expose necessary property need playback position duration track id hooked getters property called next back hook think make sense swizzle trouble getting work use file keep track skip first line hold number skip skip increment counter write track id timestamp file line specified counter back press simply decrement counter way press back button set file write new skip one backtracked anyways code http hope enjoyed post learned something know learned hell lot throughout process let know think think could done anything betterdifferently thanks
47,Lobsters,objectivec,Objective-C programming,The C Object System,http://ldeniau.web.cern.ch/ldeniau/html/cos-dls09-draft.pdf,c object system,,obj pgfprgb pattern devicergb endobj obj length filter flatedecode stream xڝ vk ا u j ev ח j pimem nz q r oeq tυ hf g db w djfk w p ѵ c n b k endstream endobj obj type page content r resource r mediabox parent r endobj obj colorspace r pattern r extgstate r font r r r r r r r r r r r procset pdf text endobj obj length filter flatedecode stream k z ep p j dܟ k v xm j ʣ wdll ʆ lt od xщ b f tn ct jx vyم p ưǡz v q q endstream endobj obj type page content r resource r mediabox parent r endobj obj type xobject subtype form formtype ptexfilename imgconceptspdf ptexpagenumber ptexinfodict r bbox resource procset pdf text imageb imagec imagei colorspace r r font r xobject r r r r r r r r r r r length filter flatedecode stream vkc k ƭ c ww yh wjkj p oxb cbq ƈ b h endstream endobj obj title scala scalable language author laurent deniau creator keynote producer mac o x quartz pdfcontext creationdate moddate endobj obj iccbased r endobj obj iccbased r endobj obj type font subtype truetype basefont bzhlkncourierboldoblique fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj type font subtype truetype basefont blwdxdcapitalsregular fontdescriptor r width r firstchar lastchar encoding macromanencoding endobj obj length r type xobject subtype image width height colorspace r interpolate true smask r bitspercomponent filter flatedecode stream eu uьly ń բ pŋ qvd x k qvnl ntwo ʐm l zd n v bt sm iok l r eqc ip j endstream endobj obj length r type xobject subtype image width height colorspace r interpolate true smask r bitspercomponent filter flatedecode stream cc r fh
48,Lobsters,objectivec,Objective-C programming,"LLVM JIT, Objective-C and Swift on macOS: knowledge dump",https://stanislaw.github.io/2018/09/03/llvm-jit-objc-and-swift-knowledge-dump.html,llvm jit objectivec swift macos knowledge dump,mutation testing swift mull could work looking contributor tl dr anyone want run swift llvm jit mull mullprojectllvmjitobjc selector unrecognised invoking objectivec method using llvm executionengine llvmdev possible execute objectivec code via llvm jit registered objectivec code macho binary objectivec code llvm runtimedyld appendix example macho file simple objectivec code llvm jit section memory manager registration selector registration class registration category known issue known issue duplicate definition class known issue objcreadclasspair work objcallocateclasspair conclusion llvmjitobjc appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code appendix b altenative approach objectivec registration using clang known issue objcreadclasspair work objcallocateclasspair,post counterpart another post mutation testing swift mull could work looking contributor tl dr possible run objectivec swift code llvm jit macos system one way make work subclass sectionmemorymanager used llvm jit engine intercept memory section related objectivec get allocated memory find objectivec metadata section parse objectivec class information metadata use number objectivec runtime api method register found objectivec class objectivec runtime although approach target objectivec code objectivec runtime also seems enable support combined swift objectivec code given objectivec class registered swift code enabled objectivec interoperability seems run without major issue llvm jit information actual summer based detail llvm jit objectivec runtime found anyone want run swift llvm jit want llvm jit run swift objectivec code want mull mutation testing tool support programming language mull accepts input program precompiled llvm bitcode find performs mutation program run program numerous modified mutated clone using llvm jit running program mutation memory llvm jit save time mull recompile relink program scratch mull find performs mutation llvm ir level never go back ast level approach give great advantage performance also imposes constraint mull support programming language run llvm jit case important llvm jit run swift objectivec prototype code found mullprojectllvmjitobjc research topic started stackoverflow topic selector unrecognised invoking objectivec method using llvm executionengine information found llvmdev thread created llvmdev possible execute objectivec code via llvm jit via mailing list registered objectivec code objectivec code known objectivec runtime code activated almost run always something objectivec runtime like kind code following popular error get unregistered objectivec code objectivec selector registered get exception unregistered selector selector message match selector known objective c runtime register objectivec class code even execute program exit get crash libobjccacheerasenolock unregistered class something wrong objectivec runtime internal cache class category method registered exception unrecognized selector unregistered category method unrecognized selector sent instance unregistered class also mean might execute without error possible obtain thing like nsstringfromclass nil unregisteredclass known objectivec runtime nsclassfromstring unregisteredclass nil macho binary objectivec code objectivec code compiled object file compiler also emits special objectivecrelated section object file executable library objectivec code loaded memory dyld loader read loaded code trigger callback register objectivec class objectivec runtime running process objectivecrelated section name start objc example objcselrefs contains information selector objcclasslist contains reference objectivec class declaration objccatlist contains reference objectivec class category others llvm jit dyld trigger code objectivec registration dynamic loader implementation llvm jit us llvm runtimedyld class related class macho aware objectivec special code objectivec registration needed approach described one way accomplish know objectivec section look like macho object file see appendix example macho file simple objectivec code llvm jit section memory manager llvm jit given object file execution allocates memory load content allocated memory memory allocated one important task llvm jit applies relocation symbol relative offset original object file llvm jit us relative offset calculate resolve real symbol address allocated memory running process relocation finished llvm jit mark code section allocated memory executable execute code contained section sectionmemorymanager one memory management class provided llvm two important method allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override bool finalizememory std string errmsg nullptr override sectionmemorymanager used memory allocation allocatedatasection method called per data section object file example object file macho binary objectivec code section memory manager allocatedatasection called section objcselrefs objcclasslist etc create subclass sectionmemorymanager called objcenabledmemorymanager override allocatedatasection function collect pointer section objcenabledmemorymanager collecting objectivec related section objcenabledmemorymanager allocatedatasection uintptrt size unsigned alignment unsigned sectionid stringref sectionname bool isreadonly override pointer sectionmemorymanager allocatedatasection size alignment sectionid sectionname isreadonly sectionnamefind objc llvm stringref npos errs sectionmemorymanager allocatedatasection objc sectionname pointer pointer size size n objectsectionentry entry pointer size sectionname objcsectionspushback entry return pointer allocated section sectionmemorymanager allocatedatasection objc objcconst pointer size sectionmemorymanager allocatedatasection objc objcdata pointer size sectionmemorymanager allocatedatasection objc objcselrefs pointer size sectionmemorymanager allocatedatasection objc objcclassrefs pointer size sectionmemorymanager allocatedatasection objc objcclassname pointer size sectionmemorymanager allocatedatasection objc objcmethtype pointer size sectionmemorymanager allocatedatasection objc objcmethname pointer size sectionmemorymanager allocatedatasection objc objcclasslist pointer size given pointer objectivec related section allocated memory collected possible traverse section objectivec registration routine hand code right moment right llvm jit finalizes memory objcenabledmemorymanager register objectivec finalize memory bool objcenabledmemorymanager finalizememory std string errmsg registerobjc bool success sectionmemorymanager finalizememory errmsg return success registration selector following first crash see running unregistered objectivec code llvm jit selector match selector known objectivec runtime lli nsforwarding warning selector message alloc match selector known objective c runtime abort lli nsautoreleasepool alloc unrecognized selector sent class lli terminating app due uncaught exception nsinvalidargumentexception reason nsautoreleasepool alloc unrecognized selector sent class objcselrefs section responsible selector entry objcselrefs simply selector ie pointer char string reason exception selector object file allocated llvm jit selector known objectivec runtime given collected information section get access content objcselrefs section register selector using code registration simply rewriting selector entry objcselrefs section point selector registered objectivec runtime void registerselectors void selrefssectionptr uintptrt selrefssectionsize sectionstart selrefssectionptr memory paddedaligned jit second half section memory empty selrefssectionsize cursor sectionstart cursor sectionstart selrefssectionsize cursor cursor sizeof sel sel selector sel cursor const char name selgetname selector selector selregistername name code executed selector loaded code point selector entry objcselrefs section selector entry point selector known objectivec runtime make exception go away registration class registration class important part prototype also hacky us public internal method objectivec runtime api objcreadclasspair found objcinternalh header file libobjc objcregisterclasspair method defined objcobjcinternalh class metaclass construction compilergenerated memory image cl cl isa must objcmaxclasssize byte extra byte used metadata must zero info objcimageinfo would emitted static compiler return nil class name already exists return nil superclass nil class marked root return nil superclass construction call objcregisterclasspair struct objcimageinfo objcexport class nullable objcreadclasspair class nonnull cl const struct objcimageinfo nonnull info objcavailable endif done objcselrefs section given collected information class objcclasslist section iterate class call objcregisterclasspair function every class pointer code register objectivec class objcreadclasspair objcregisterclasspair class mull objc runtime registeroneclass classrefptr class superclass classref classrefptr metaclassref classref getisapointer class runtimeclass objcreadclasspair class classref null assert runtimeclass following might wrong class registered objcreadclasspair still hack flag call objcregisterclasspair make sure dispose objcdisposeclasspair jit deallocates assert objcclassisregistered class runtimeclass hereobjcclass runtimeclassinternal hereobjcclass runtimeclass hereobjcclass runtimemetaclassinternal hereobjcclass runtimeclassinternal isa define rwconstructing hereclassrwt sourceclassdata runtimeclassinternal data hereclassrwt sourcemetaclassdata hereclassrwt runtimemetaclassinternal data sourceclassdata flag rwconstructing sourcemetaclassdata flag rwconstructing objcregisterclasspair runtimeclass return runtimeclass experience creating objectivec class using objectivec runtime know pair method objcallocateclasspair objcregisterclasspair must used create new objectivec class difference create new class rather activate existing class reading information definition exists objcclasslist section objcreadclasspair method used instead objcallocateclasspair method turn objcreadclasspair written play well objcregisterclasspair method need small hack set rwconstructing flag class struct pretend new class want objcregisterclasspair register registration category category definition objccatlist section pointer class trivial connect definition class belongs class registered objcreadclasspairobjcregisterclasspair read information category use classaddmethod method public objectivec runtime api add category instance class method registered class known issue known issue duplicate definition class calling objcregisterclasspair class pointer obtained objcreadclasspair always trigger warning objc class firstclass implemented one two used one undefined one detail notice however pointer class equal looking code cause warning seems code built objcreadclasspair case mind exception annoying nothing criminal going hood known issue objcreadclasspair work objcallocateclasspair beginning thought possible register objectivec class public method objcallocateclasspair objcregisterclasspair contrast objcreadclasspair read existing objectivec class definition macho register objectivec runtime objcallocateclasspair creates new class struct class register class objectivec runtime approach creates redundancy definition macho new class struct created two copy class structs exist memory unregistered structs memory allocated macho section memory created objectivec runtime method problem u another problem seems hard fix objcallocateclasspair designed create new class break swift code contains objectivec class turn code generated file swift code objectivecbased class hardcoded objectivec definition written macho creating new parallel class hierarchy objectivec runtime work start get crash related pointer pointing wrong offset memory typical static offsetrelated crash using registering mixed swiftobjectivec class objcallocateclasspair another issue objcallocateclasspair possible specify want create swiftenhanced objectivec class objcallocateclasspair decides whether creates struct normal objectivec swiftenhanced class layout based superclass weird check source code possible create swift class subclass objectivec class objcallocateclasspair create objectivec class swift class example want use objcallocateclasspair register swift class subclass xctestcase objectivec class create class struct objectivec class instead swift class conclusion post shared important part learned llvm jit objectivec topic prototype code llvmjitobjc raw contains basic test case approach described flaw overlooked part objectivec implement still believe framework reading objectivec section loaded runtimedyld using method objectivec runtime register objectivec content class selector category right approach also believe rather small joint effort developer llvm jit swift objectivec runtime approach could implemented would hack internals objectivec runtime another approach also exist see appendix b altenative approach objectivec registration using clang appendix example macho file simple objectivec code following illustrates objectivecrelated section appear macho object file compile file clang fobjcarc objcm import foundationfoundationh interface someclass nsobject void hello end implementation someclass void hello printf hello someclassn end int main someclass obj someclass new obj hello return many way see objectivec section macho file including listing section header using otool otool l aout aout mach header magic cputype cpusubtype cap filetype ncmds sizeofcmds flag section sectname objcclasslist segname data addr size offset align reloff nreloc flag section sectname objcimageinfo segname data addr size offset align reloff nreloc flag section sectname objcconst segname data addr size offset align reloff nreloc flag section sectname objcselrefs segname data addr size offset align reloff nreloc flag section sectname objcclassrefs segname data addr size offset align reloff nreloc flag section sectname objcdata segname data addr size offset align reloff nreloc flag listing section header using llvmobjdump sectionheaders aout aout file format macho section idx name size address type text text stub text stubhelper text cstring data objcclassname data objcmethname data objcmethtype data unwindinfo data nlsymbolptr data lasymbolptr data objcclasslist data objcimageinfo data objcconst data objcselrefs data objcclassrefs data objcdata data listing section header using machoview hopper also possible see navigate content objectivec section objcclasslist section pointer someclass class data look like objcclasslist section pointer someclass metadata metadata someclass class contained another section called objcdata objcdata section struct someclass metadata actual data someclass hello method found objcconst section data field struct rendered objcclasssomeclassdata objcconst section struct metadata someclass appendix b altenative approach objectivec registration using clang llvmdev forum david chisnall proposed called best way objectivec registration following quote david found llvmdev thread year ago put together proofofconcept implementation cgobjcruntime emitted load function called runtime function registering selector generating class adding method code anymore probably bitrotted extent clean reimplementation would probably easier hundred line code would work objectivec runtime jit context said earlier thread best way add new subclass cgobjcruntime generates code using public create new cgobjcruntime subclass creates module init function construct class using public apis adding something like fobjcruntimejit clang flag particularly difficult mean code used objectivec runtime reason go cgobjcruntime approach easier go runtimedyld solve one problem time sectionmemorymanager already gave u objectivec section could focus register objectivec runtime llvm jit without figure hack clang emit section llvm ir would additional challenge also still clear public objectivec runtime api would emitted code use given limitation public method objcallocateclasspair described known issue objcreadclasspair work objcallocateclasspair
49,Lobsters,objectivec,Objective-C programming,iTerm2 has a new drawing engine that uses Metal 2,https://gitlab.com/gnachman/iterm2/wikis/Metal-Renderer,new drawing engine us metal,introduction benefit availability prefs profile text prefs advanced height top bottom margin terminal pane prefs general advanced gpu setting disable gpu renderer disconnected power support http wwwpatreoncomgnachman troubleshooting prefs general gpu rendering help gpu renderer availability report performance issue http prefs advanced log stats text drawing performance console copy performance stats report drawing problem capture gpu frame http,introduction new drawing engine us metal many user significantly improve performance benefit frame per second rendering buttery smooth increased throughput eg cat giant file finish sooner user see improved latency time pressing key seeing drawn availability metal renderer available version new renderer available configuration transparent window supported must opaque subpixel antialiasing becomes complex must disable ligature ascii nonascii font prefs profile text ligature hard support gpubased renderer adjusted prefs advanced height top bottom margin terminal pane le metal renderer used vertical spacing font configured font panel must set le default also temporarily disabled certain condition another view find bar drawn overtop terminal device plugged charger controlled prefs general advanced gpu setting disable gpu renderer disconnected power restriction relaxed macos mojave come support support http wwwpatreoncomgnachman issue please see troubleshooting disable prefs general gpu rendering see working find nt enabled select help gpu renderer availability report performance issue create new issue http needed make sure prefs advanced log stats text drawing performance console create new window scroll big file whatever slow select copy performance stats paste issue report cmdv note recorded stats erased becomes active drawing timed became active copied stats report drawing problem make session drawing wrong active ie would receive keyboard input select capture gpu frame enabled metal use wait second file bug http attach please let know problem
50,Lobsters,objectivec,Objective-C programming,macOS VPN architecture from System Preferences down to nesessionmanager,https://blog.timac.org/2018/0717-macos-vpn-architecture/,macos vpn architecture system preference nesessionmanager,rdar apps connect vpn service system preference application architecture preference pane networkprefpane process anpneservice anpneservicesmanager networkextensionframework nesession apis use nesessiont anpneservice nesession apis scnetworkconnectionc daemon architecture summary following article reference update vpnstatus replacement macos builtin vpn status,macos contains builtin vpn client natively support ipsec well post describe part internal architecture macos vpn client information used following article build application replicates functionality vpn status menu bar application also allow auto connect vpn service something currently possible macos apple employee reading blog post find bug report scutil nt support vpn service rdar please note describe undocumented internal apis macos apple could change implementation time note could become outdated give guarantee completely accurate apps connect vpn service macos least builtin application connect vpn service network prefpane system preference application vpn status menu menu bar command line tool scutil scutil let list service scutil nc list timac timac scutil nc list available network connection service current set enabled disconnected ppp ppp also let start vpn connection scutil nc start however command line tool working vpn service vpn status implemented menu extra private api unrelated public nsstatusitem api loaded systemuiserver process binary located path systemlibrarycoreservicesmenu extrasvpnmenu vpn status app seems like smaller target system preference application decided instead analyze network prefpane work main reason attaching debugger network prefpane easier attaching debugger systemuiserver process system preference application architecture system preference application complex application load preference pane created using public preferencepanes framework systemlibraryframeworkspreferencepanesframework plugin architecture well described apple documentation architecture preference pane plugin responsible network preference pane networkprefpane networkprefpane process network preference pane located path systemlibrarypreferencepanesnetworkprefpane least part code run separate process using xpc contentsxpcservicescomapplepreferencenetworkremoteservicexpc network preference pane open separate process comapplepreferencenetworkremoteservice visible anpneservice anpneservicesmanager network preference pane represents different service support using objectivec class anptoplevelservice case really interested anpneservice subclass stripped interface anpneservice class note instance created using neconfiguration object later nesessiont later also note method connect disconnect interface anpneservice anptoplevelservice property retain neconfiguration configuration property assign nesessiont session instancetype initwithconfiguration neconfiguration inconfiguration nsstring name void connect void disconnect end anpneservice service managed anpneservicesmanager singleton stripped interface interface anpneservicesmanager nsobject property retain nsarray anpneservice mservices property assign dispatchqueuet neservicequeue id sharedneservicesmanager void reloadconfigurations void processconfigurations nsarray neconfiguration inconfigurations end anpneservice instance created anpneservicesmanager singleton using neconfiguration received networkextensionframework networkextensionframework note networkextensionframework systemlibraryframeworksnetworkextensionframework public framework however neconfigurationmanager neconfiguration class private class within public framework simplified interface neconfigurationmanager interface neconfigurationmanager nsobject id sharedmanager void loadconfigurationswithcompletionqueue dispatchqueuet completionqueue handler void nsarray neconfiguration nullable configuration nserror nullable error handler end simplified interface neconfiguration interface neconfiguration nsobject property readonly nsuuid identifier property copy nsstring name property copy nevpn vpn end nevpn class also private relies public class nevpnprotocol interface nevpn nsobject property copy nevpnprotocol protocol end nesession apis use nesessiont anpneservice previously mentioned anpneservice instance owns nesessiont let look seen designated initializer anpneservice take neconfiguration object initializer take care creating nesessiont session implementation look like instancetype initwithconfiguration neconfiguration inconfiguration self super init self configuration inconfiguration get configuration identifier initialize nesessiont nsuuid uuid inconfiguration identifier uuidt uuidbytes uuid getuuidbytes uuidbytes session nesessioncreate uuidbytes nesessiontypevpn self setupeventcallback self refreshsession return self session used anpneservice connect method conjunction nesessionstart api void connect nesessionstart self session similarly anpneservice disconnect method us session nesessionstop api void disconnect nesessionstop self session nesession apis nesession apis implemented private dynamic library usrlibsystemlibsystemnetworkextensiondylib extracting nesession apis simple using nm timac timac nm usrlibsystemlibsystemnetworkextensiondylib grep nesession nesessionaddressmatchessubnets nesessionagentgetadvisory nesessionagentgetadvisoryinterfaceindex nesessionalwaysonvpnconfigspresent nesessionappvpnconfigspresent nesessioncancel nesessioncopyappdatafromflowdivertsocket nesessioncopyappdatafromflowdiverttoken nesessioncopypolicymatch nesessioncopysecuritysessioninfo nesessioncopysocketattributes nesessioncreate nesessiondisablerestrictions nesessionenableondemand nesessionestablishipc nesessionfallbackadvisory nesessionfallbackdefault nesessiongetconfigidfromnetworkagent nesessiongetconfigurationid nesessiongetinfo nesessiongetstatus nesessioninfotypetostring nesessioninitializenecpdropall nesessionmanagergetpid nesessionmanagerhasactivesessions nesessionmanagerisrunning nesessionondemandconfigspresent nesessionpolicycopyflowdiverttoken nesessionpolicycopyflowdiverttokenwithkey nesessionpolicymatchgetfilterunit nesessionpolicymatchgetflowdivertunit nesessionpolicymatchgetscopedinterfaceindex nesessionpolicymatchgetservice nesessionpolicymatchgetserviceaction nesessionpolicymatchgetservicetype nesessionpolicymatchisdrop nesessionpolicymatchisflowdivert nesessionpolicymatchserviceisregistered nesessionrelease nesessionretain nesessionsendbarrier nesessionservicegetdnsserviceid nesessionservicematchesaddress nesessionseteventhandler nesessionsetsocketattributes nesessionshoulddisablenexus nesessionstart nesessionstartonbehalfof nesessionstartwithoptions nesessionstatustostring nesessionstop nesessionstopallwithplugintype nesessionstopreasontostring nesessionsystemappvpnconfigspresent nesessiontypetostring nesessionuseassystemvpn case limited number apis really interesting extern nesessiont nesessioncreate uuidt serviceid int sessionconfigtype extern void nesessionrelease nesessiont session extern void nesessionstart nesessiont session extern void nesessionstop nesessiont session extern void nesessioncancel nesessiont session typedef void nesessionseteventhandlerblock xpcobjectt result extern void nesessionseteventhandler nesessiont session dispatchqueuet queue nesessionseteventhandlerblock block typedef void nesessiongetstatusblock nesessionstatust result extern void nesessiongetstatus nesessiont session dispatchqueuet queue nesessiongetstatusblock block finding correct prototype function simplified thanks open source file scnetworkconnectionc nesessionmanager daemon look implementation nesession function note function sending request xpc root dameon nesessionmanager located path usrlibexecnesessionmanager daemon listening command handle method void nesmsession handlecommand fromclient looking logging string find code command ignore restart command pending start command already exists stop current session requested overriding restart command received start command start rejected received start command skip sstart command session state received stop command reason received enable demand command example service started method void createconnectparameterswithstartmessage called architecture daemon scope article architecture summary let summarize vpn architecture system preference application nesessionmanager root daemon following article unveil application called vpnstatus replicate functionality vpn status menu menu bar list vpn service status connect vpn service disconnect vpn service application also add possibility auto connect vpn service application running auto connect vpn service something currently possible macos reference update blog post vpnstatus application available vpnstatus replacement macos builtin vpn status
51,Lobsters,objectivec,Objective-C programming,Macros in C / Objective-C,https://yurylapitsky.com/metamacros,macro c objectivec,macro c objectivec c preprocessor libextc macro gcc manual good style know well enough boy draft sssstringify note link macro concat subscript array accounting summary quite interesting example provided lars wirzenius p thank reading reference github repository c preprocessor documentation gnu reference objcgetprotocol stringinizing c preprocessor trick implementing similar data type,macro c objectivec even c trick suspicious us preprocessor define new syntax c programmer learned bitter experience inventing new syntax confuses maintenance programmer therefore cause bug think however benefit case outweigh potential problem since amount repetitive code saved great lars wirzenius c preprocessor c preprocessor crucial part compilation target assuming target c cbased language larger one file used commonly via include import construction reuse already implemented function class different file sometimes code isolated want limit scope specific target conditional inclusion helpful via ifdef comment point help make code clearer comment needed binary preprocessor silently remove u also use define preprocessor define constant rarely used way nowadays objectivec style became obsolete replaced specifying static variable however preprocessor could also powerful thing completely different perspective using macro recently found interesting idea libextc framework like share macro note article try compete documentation c preproccessor familiar subject worth check something like gcc manual macro rule defines specific pattern replaced specified construction several type macro functionlike macro without parameter nevertheless common following structure define expressiontoreplace replacement define keyword generally starting expression preprocessorrelated start macro definition already mentioned define constant way try build advanced expression hidden shortexpression say better see hundred time hear example macro define appdelegate uiapplication sharedapplication delegate popular time ago io project objectivec actually good style snippet whenever preprocessor find appdelegate used code appdelegate would replaced right part uiapplication sharedapplication delegate appdelegate window uiapplication sharedapplication delegate window usually think macro advanced find replace tool macro could used different purpose like reusing code code generation others painful macro characteristic debug code inside macro macro rule actual code need produced expanding macro using preprocessor however interesting technique help think different term article chosen play metamacrosh libextc metamacros file used several opensource project real example macro used fancy theory real know well enough boy let try one define metamacroexprify vaargs true place passed argument inside first pair round bracket add true end wrapped expression surprisingly provide true result expression return true anonymous function language suspect know enough standard basically following preprocessor produce following completely valid expression compiler may produce warning insert void cast error example printf following output draft left operand comma operator evaluated void expression sequence point evaluation right operand evaluated result type attempt made modify result comma operator access next sequence point behavior undefined sssstringify define metamacrostringify value value c preprocessor treat special symbol value right stringinized example note retrieved example concrete protocol implementation provided libextobjc new objectivec protocol name apple us name interface objectivec support abstract protocol outofthebox interface declare method provide implementation concrete protocol interface provides method declaration also implementation swift support concrete protocol version technique one way get multiple inheritance behavior however know hierarchy limitation link back macro define concreteprotocol name create class used contain method used protocol interface name protocolmethodcontainer nsobject name end implementation name protocolmethodcontainer class loaded runtime add concrete protocol list void load pass actual protocol first parameter class second extaddconcreteprotocol objcgetprotocol metamacrostringify name self fprintf stderr error could load concrete protocol sn metamacrostringify name something else removed insignificant end macro produce class objectivec interface class body provided protocol name line objcgetprotocol metamacrostringify name target see name provided parameter used declaration interface part class name implementation also passed objcgetprotocol parameter function expects const char name stringinizing wrap expanded name value doublequotes name value placed compiler use expression variable try calculate required value http languageobjc http gccgnuorgonlinedocscppstringizinghtml stringizing concat define metamacroconcat b b already know right example usage symbol concatenates left provided argument right one previous concrete protocol macro would use superprotocol name part produced code interface name protocolmethodcontainer nsobject name presented preprocessing interface superprotocolprotocolmethodcontainer nsobject superprotocol using provided macro metamacroconcat produce subscript array macro define metamacroat n metamacroconcat metamacroat n vaargs description say n numerical rest argument used source value example metamacroat b c produce c work see another interesting thing macro could reused inside another macro great way build something advanced back example know metamacroconcat connects provided argument result macro metamacroatn vaargs aha look like specific macro specific n metamacroat expansion define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs define metamacrohead vaargs consequently define metamacrohead metamacrohead vaargs define metamacrohead first first whole logic based macro receives first argument pregenerated sequence argument pregenerated sequence shift element initially right pregenerated element cut related element varargs item cut nth first left right example accounting define metamacroargcount metamacroat vaargs reasonable would able count provided argument logic pregenerated sequence provides actual count varargs shift subscript appropriate number let take example metamacroargcount b c metamacroat b c getting element b c actually argument count equal whole logic build predefined number limited shift beautiful summary macro yet another tool embodying idea source code preprocessor long time helping basic stuff however tool could used much advanced idea like code generation metamacrosh header hint fact think concrete protocol implementation interesting example realworld usage challenge otherwise requires interaction objectivec runtime arguable one better think macro good bad price generated code without ability debug quite high sometimes quite good le evil comparing alternative also want mention quite interesting example provided lars wirzenius data type redefined based context used general name provided macro think currently use generic template thing still solution open mind something new add one idea something probably important extend mind maybe next time problem could interpreted differently using new experience completely unrelated tool language know p lot thing worth attention libextc libextobjc check thank reading reference github repository libextc c preprocessor documentation gnu reference objcgetprotocol stringinizing c preprocessor trick implementing similar data type
52,Lobsters,objectivec,Objective-C programming,"These 299 macOS apps are so buggy, Apple had to fix them in AppKit",https://worthdoingbadly.com/appkitcompat/,macos apps buggy apple fix appkit,full list bundle id csv format learned stroughtonsmith may may asked checkfixes apps patch look like raymond chen stuff noticed list apps automatic tabbing app list february jul commit io examined slaunchaman ida free script also look xrefs found html csv conclusion get bad reputation learned η advice post,photoshop matlab panic transmit eclipse common among apps macos applies compatibillity fix full list bundle id along function check first caller function also available csv format note list apps apple developed compatibility tweak make run newer macos version list demonstrates even best apps often need tweak newer macos addition patch applied older version apps extracted list interesting thing found learned browsing stroughtonsmith twitter feed saw tweet know really made nsimage explicitly check bundle adam bell may interesting always thought apple thorough compatibility microsoft later reply dropped even crazier tidbit appkit hundred bundle id check various reason guilherme rambo inside may hundred got ta take look others asked turn apple call checkfixes internally apps compatibility fix applied checking bool cfappversionchecklessthan cfstringref cfsystemversion function return true current app match specified bundle id linked prior macos version thus older version app would fix applied newer version built newer sdk would found unique app id passed cfappversionchecklessthan statically analyzing appkit foundation corefoundation macos apple top list unique app id expected since apple likely used trick private apis third party use causing compatibility issue line adobe course second place bundle id looking list apps tell lot apps apple considers essential mac platform put special effort make work newer system version apps apple consider important productivity apps large company adobe suite microsoft office suite autodesk autocad maya matlab ableton live intuit quickenquickbooks turbocad vmware fusion communication apps google chrome opera browser twitter mac tencent qq wechat aol messenger citrix gotomeeting cisco spark hipchat sketch spotify evernote dropbox surprisingly high number game suspect even id gamespecific library opengl blizzard game installer diablo hero storm starcraft world warcraft hearthstone battlenet grid reloaded dragon age course opensource apps firefox vlc blender eclipse aquamacs emacs port openjdk textual irc indie favorite panic coda transmit omni group omnifocus omnigraffle omniplan omniweb sketch bbedittextwrangler device driver manufacturer gon na fix em garmin trainingcenter epson hp installer fujitsu scansnap apple internal apps comappleistmerlin probably ironic comappleistsoftwaredepotchecker comappleisthrmerlin many apps heard breadth software staggering show much testing apple must discover bug instead testing say clicktoroot bug high sierra patch look like patch change behaviour drastically crazy window backward compatibility patch raymond chen writes patch nsopenglcontextcurrentcontext example simple ida graph view function attempt translating pseudocode make clear compatibility change adding autoreleasepool class nsopenglcontext class func currentcontext nsopenglcontext cfappversionchecklessthan commicrosoftpowerpoint cfsystemversionyosemite autoreleasepool let cglcontext cglgetcurrentcontext pthreadmutexlock nsopenglcontexttocglcontextobjmaplock let context nsopenglcontexttocglcontextobjmap cglcontext pthreadmutexunlock nsopenglcontexttocglcontextobjmaplock return context else autorelease pool let cglcontext cglgetcurrentcontext pthreadmutexlock nsopenglcontexttocglcontextobjmaplock let context nsopenglcontexttocglcontextobjmap cglcontext pthreadmutexunlock nsopenglcontexttocglcontextobjmaplock return context patch similarily small dragon age patch found make nsbundle imageforresource call bundle pathforimageresource instead bundle urlsforimageresource creates image using file instead url stuff noticed list apps microsoft excelpowerpointword patch cfarraysortvalues change sorting algorithm slightly break sorting apps automatic tabbing introduced sierra disabled using compatibility feature compatiblity patch affect apps one company example nssavepaneluselocalhosturlsdefaultvaluefunction fix save panel bunch adobe apps compatibility patch affect apps many different developer example nstableview related patch affected apps hp installer sketch teamviewer demonstrating table hardtm photoshop vectorworks cad touch bar api patch touch bar api new surposed already compatibility issue preference method named behaviour change eclipse vmware dragon age apple keynote apple motion microsoft office suite dubious honour getting patch method specifically named list system apps comappleloginwindow would need compatibility patch guess apple using compatibility system patch thingschange behaviour specific system apps done via say method swizzling app instead framework patch seems turn slower code path example apps checked likely slows core graphic using synchronous method great use backwards compatibility allows almost every app run faster newer o still prevent issue application app list two reaction someone find app fixed apple reaction developer comic life sure feel honored ashamed list airy february reaction developer textual irc fuck nsbundle emsquared committed jul textual irc example actually interesting able find commit fixed bug looking patch patch disables nsbundleunload entirely code get unloaded simply searched nsbundle textual source actually found commit fixed issue textual plugin system deactivated plugins first unloading plugin bundle calling unload handler plugin course new nsbundle implementation unload handler code would gone bundle unload calling handler would crash app fix course call unload handler deallocating bundle fascinating see side application compat patch bug manifested app worked around apple finally fixed properly developer much cursing io surprisingly io uikit zero bundle id check fix applied apps linked old sdks however found three bundle id foundation confirmed string applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibraryframeworksfoundationframeworkfoundation grep com sort found compopcap examined return random resource nsbundle pathforresource oftype commackiev comstuckpixelincfunnypictures slaunchaman found app popular app app extracting data hard hour without spending dime pulled list using static analysis since dynamic analysis putting breakpoint cfappversionchecklessthan would require trigger every method containing patch impossible conduct static analysis needed scriptable disassembler chose ida free since ida industry standard reverse engineering free version support disassembling macos framework first loaded systemlibraryframeworksappkitframeworkappkit foundation corefoundation ida free next needed script looked code invokes cfappversionchecklessthan called xrefs crossreferences ida xref find argument passed function find one function call function since want know example function actually us nsbundle newimageforresourcewithprospectivename imageclass way dump information ida output window ida usually scripted using idapython free version support idc clike scripting language written one idc script consult idc script script also look xrefs addition ida renamed idc method ida older function name still present ida decided update newer name checking ida idcidc header file name mapping resulting script found loaded via file script file ida printed calling function bundle id extract properly fixed hand copied list generated html csv version python script finally count number apps took csv cut f appkitcsvsortuniqwc conclusion apple get bad reputation supposed lack backwards compatibility nothing truth macos includes tweak specific important apps keep working new o version list apps macos check fascinating show apple belief essential application platform learned backwards compatbility hard complicated user interface element hard see many many nstableview patch wide list apps affected sometimes better specialcase apps reduce performance apps see patch ida free scripting language idc bad compared idapython idaswift wen η thanks theslinker advice post
53,Lobsters,objectivec,Objective-C programming,Mach-O exploration. Tools - nm,https://yurylapitsky.com/exploring_mac-o_binaries_nm,macho exploration tool nm,macho exploration tool nm exploring macho binary tool pagestuff introduction symbol table trying binary previous post pagestuff ldsymsh file example post difference trylock lock thank reading reference,macho exploration tool nm started exploring macho binary tool pagestuff introduction today plan take look another commandline tool helpful binary analysis already used couple post find specific method declared binary tool nm short description man usually nm display name list symbol table symbol table symbol table represents identifier source code mapped specific address identifier clanguages function global variable defined referenced program objectivec us class instance method basically talking representation binary note interesting fact found reading nm manpage since xcode release version nm nmclassic llvmnm moment default version llvmnm seems used post trying think simple way understand something try see eye nm different option differ formatting additional information however start enough use call without parameter target binary use binary used previous post pagestuff also might want check source code going output sampleclass cxxdestruct sampleclass property sampleclass setproperty u nslog u objcclass nsobject objcclass sampleclass objcivar sampleclassproperty u objcmetaclass nsobject objcmetaclass sampleclass u cfconstantstringclassreference mhexecuteheader u objcemptycache main u objcautoreleasepoolpop u objcautoreleasepoolpush u objcgetproperty u objcmsgsend u objcsetpropertynonatomiccopy u objcstorestrong u dyldstubbinder basically column address type symbol first distinct difference noticed item list address moreover item also u type also see familiar name sampleclass class name property name property nslog function stuff mixed preffixes objc implementation function let examine documentation u referenced defined file undefined item marked u function constant defined outside binary nslog nsobject provided foundation framework function either part arc implementation objectivec runtime etc inserted clang u nslog u objcclass nsobject u objcmetaclass nsobject u cfconstantstringclassreference u objcemptycache u objcautoreleasepoolpop u objcautoreleasepoolpush u objcgetproperty u objcmsgsend u objcsetpropertynonatomiccopy u objcstorestrong u dyldstubbinder global function text object mhexecuteheader main main clearly global function story mhexecuteheader bit complicated found answer ldsymsh file basically say address mach header macho executable file word border line header local function text object sampleclass cxxdestruct sampleclass property sampleclass setproperty see later method locally defined property property defined compiler generated implementation cxxdestruct interesting guest initially part objectivec implementation however currently serf deallocation function objectivec objectivec implementation surprisingly definition took definition man nm symbol section objcclass sampleclass objcivar sampleclassproperty objcmetaclass sampleclass remember pagestuff produced previous post symbol page related data meanwhile tsymbols text page type checked see type define part code linked together internal symbol marked defined right place placed inside binary u symbol require attention linked external resource outside binary part left untouched address address field provides information symbol lie relatively assembler code make sense consider isolation need disassembled code around existing symbol address need use another tool provides disassembly code example lldb one tool check next post example another formatting option found extremely useful output text text nonexternal sampleclass cxxdestruct text text nonexternal sampleclass property text text nonexternal sampleclass setproperty undefined external nslog foundation undefined external objcclass nsobject libobjc data objcdata external objcclass sampleclass data objcivar nonexternal private external objcivar sampleclassproperty undefined external objcmetaclass nsobject libobjc data objcdata external objcmetaclass sampleclass undefined external cfconstantstringclassreference corefoundation text text referenced dynamically external mhexecuteheader undefined external objcemptycache libobjc text text external main undefined external objcautoreleasepoolpop libobjc undefined external objcautoreleasepoolpush libobjc undefined external objcgetproperty libobjc undefined external objcmsgsend libobjc undefined external objcsetpropertynonatomiccopy libobjc undefined external objcstorestrong libobjc undefined external dyldstubbinder libsystem see type replaced segment section also additional column appeared point symbol defined framework name used option lot grep find specific symbol post difference trylock lock thank reading reference
54,Lobsters,objectivec,Objective-C programming,Bringing Objective-C to the Amiga,https://heap.zone/blog/?76,bringing objectivec amiga,bringing objectivec amiga objfw bebbo amigagcc getting objfw compile easy fix,bringing objectivec amiga created utc porting objfw time objectivec morphos starting port amigaos thought nice objectivec modern amigalike operating system could real thing classic amiga thus ported amigaos today first thing first need compiler compiler modern enough support exception objectivec released amiga never gcc amiga however new crosscompiler around bebbo amigagcc successor amigacrosstoolchain fork unfortunately downloaded lot lot archive via plain insecure http would go execute downloaded file never really wanted system amigagcc check everything github file downloads never get executed system build toolchain minor patch make build macos toolchain getting objfw compile easy running resulting test binary immediately resulted program aborted huh strange already expecting exception really work first test using exception would usually fail immediate abort figure aborting easy task without debugger set breakpoint look backtrace first thing try creating empty binary link objfw runtime see initialization worked worked added exception mix got progam aborted test moved add define abort print source file line exit first theory one switch srcruntimeexceptionm fell called abort nt catch anything meaning code usual suspect would libc libgcc went ahead added define libgcc source finally found called abort uwinitcontext ouch bad pretty much first thing called unwindraiseexception uwframestatefor returned urcendofstack making assert uwinitcontext fail well never happen unless dwarf info garbage tried exception c worked knew unwinding could nt entirely broken looking assembly output small test program throw catch c objc obvious difference trying several thing hour including rebuilding toolchain objc support trying switching amigacrosstoolchain amigagcc failed finally found way make work using rather would suddenly work tried compiling objc renaming testcase mm nt work naming using worked figured work way though least something work according even bring unnecessary c code shortly working almost test work except one weird one serialization breaking spending hour finally found culprit added defines pri initially using amigacrosstoolchain switched amigagcc debugging exception problem amigacrosstoolchain lacked amigagcc actively undefined redefining wrong way truncating result bit solution define fix finally got already working porting effort amigaos done yet bother making socket work yet everything still linked statically rather library work coming day working day think enough progress
55,Lobsters,objectivec,Objective-C programming,Introduction to Objective-C in MorphOS 3.10,http://morphos-team.net/guide/objective-c,introduction objectivec morphos,introduction objectivec morphos,introduction objectivec morphos jacek piszczek objectivec objectivec conceptually similar boopsi generally addon c programming language objc boopsi calling method implies calling dispatcher function resolve actual method call invokes addition reference counting boopsi morphos follow memory management principlesthe main difference come fact boopsi class need manually created function manually assigned id let even start extra hassle write code dispatcher made programmer reluctant add new class application turn making overall code le object orientedhere objectivec fill example simple mui class c struct mydata long dummy ulong maskminmax struct iclass cl object obj struct muipaskminmax msg dosupermethoda cl obj msg msg minmaxinfo minwidth msg minmaxinfo defwidth msg minmaxinfo maxwidth msg minmaxinfo minheight msg minmaxinfo defheight msg minmaxinfo maxheight return ulong mdraw struct iclass cl object obj struct muipdraw msg int dosupermethoda cl obj msg setapen rp obj dri obj dripens textpen imleft obj mright obj move rp obj mleft obj mbottom obj draw rp obj mtop obj move rp obj mright obj mbottom obj draw rp obj mtop obj return dispatcher myclass switch msg methodid case muimaskminmax return maskminmax cl obj aptr msg case muimdraw return mdraw cl obj aptr msg return dosupermethoda cl obj msg dispatcherend mcc muicreatecustomclass null muicarea null sizeof struct mydata dispatcherref myclass muideletecustomclass mcc comparison simple mui class objectivec interface myarea muiarea end implementation myarea bool draw ulong flag struct rastport rp selfrastport super draw flag setapen rp selfdrawinfo dripens textpen int selfleft selfright move rp selfleft selfbottom draw rp selftop move rp selfright selfbottom draw rp selftop return yes void askminmax struct muiminmax minmax minmax minwidth minmax minheight minmax defwidth minmax defheight minmax maxwidth minmax maxheight end objectivec class still need boopsi dispatcher right yes objectivec class get initialized later instantiated muiframework create boopsi counterpart dynamically one strength objc possible determine method overloaded programmer runtime part objc runtimes framework available morphos objectivec support generally built around gcc compiler implies partial support variant meaning arc yet currently two framework shipped morphos obframework muiframework obframework framework essentially foundation cocoa contains root object class well core application threading signalling messaging data management class data class apart prefix compatible foundation class class obarray obdata obdictionary obenumerator obhashtable obindexset obmaptable obnumber obset obstring including mutable variant object coding support autorelease pool etc morphos native part include obapplication base class objectivec application morphos obcontext global runtime info class oblocalization insource localization support writing cd file hand obperform class supporting sort method invocation obperformqueue generic replacement mui pushmethod obsignalhandler execlibrary signal handler class obstringnative convenience class handling system charset encoded string obsystemtime convenience class query system time obthread threading support class obtimer obscheduledtimer timing support class muiframework framework essentially wrapper mui boopsi interface mui public class many party class get equivalent objc framework underlying boopsi instance created demand usually mui application window constructed muiframework feature list mui method overloaded maskminmax iclass cl object obj struct muipaskminmax msg becomes void askminmax struct muiminmax minmaxinfo setter getters mui attribute overloaded muiadisabled becomes bool disabled void setdisabled bool disabled used like myobjectdisabled yes objectivec setting getting mui attribute work even underlying boopsi object yet instantiated murky ownership issue add object muifamily subclass retained set value property object type retained notifies notable exception since notify target retained since often cause retain cycle unicode everywhere since obframework obstring class unicode aware string mui apps unicode well framework convert native system codepage necessary passing muilibrary internationalization mui apps done using oblocalization buttoncontents obl click label button user need click first string displayed text button latter hint translator purpose label cd file generated automatically obcd utility initialize localization support call oblocalizedstring opencatalog myapplicationcatalog withlocale null right creating muiapplication object notification mui attribute set usual addrowbutton notify selector selected trigger false performselector selector addrow withtarget list overload muibutton class void selected method notify dead object issue easily worked around thanks autorelease pool simply add self retain autorelease method notify invokes also simple detection zombie object calling method already dealloc object produce informative debug message rather random crash muifamily protocol extended several class followed similar principle inherit muicfamily directly protocol based obarray class interface class implement protocol muiapplication muigroup muimenu muilist muimenuitem muimenustrip mui obsolete input handling method removed class need overload handleevent muikey method use handledevents property set handled idcmp flag muirequest muicheckmark muibutton class avoid call muimakeobject underlying boopsi instance may always accessed via muiinstance property muiobject class applicable method parameter property use strong typing muiarea contextmenu property return muimenustrip rather muiobject id muislave muiprocess well pushmethod intentionally disabled since obframework offer better functionality working objectivec environment unsupported feature following list name unsupported functionality party mccs mccs generally need added framework become usable contact sdk maintainer find get added objectivec attribute nt automagically available boopsi interface also implies setup mui notify mean adding mystate property class inherits muinotify mean muiamyclassmystate attribute supportedgenerally necessary objectivec mui application objectivec used create standalone mui custom class mcc debug release library framework come flavor debug release build debug build meant used programmer testing perform lot extra check provide resource tracking application leak object give detailed report exit debug build work machine sdk installed runtime feature please consider following note exception work framework never throw synchronized work framework use oballocobfree allocate memory several method may require programmer us see obdata example method forwarding currently unsupported current state framework current framework yet stable api therefore sdk allow linking statically change within couple month example objcmui used today release logtool synergy zoom defrag upcoming iris email client written objectivec
56,Lobsters,objectivec,Objective-C programming,iPhone X home button,http://blog.zats.io/2017/12/27/iPhone-X-home-button/,iphone x home button,finding home indicator class twitter building putting together afterword zats warpling shaps,soon saw iphone x home indicator replacing physical button got interested behavior visible lock screen arbitrary wallpaper background app showing arbitrary content case video game also change quite quickly obviously uikit expose anything remotely similar let figure built finding home indicator class figure look relevant code tried think similar ui element initially thought system status bar would closest relative like home indicator life lock screen like home indicator added every app window first naive attempt look uikit contains status barrelevant code looking uikit header dump find github find anything seemed correspond new home indicator next like explore springboard app life coreservices folder contains various system functionality corresponding lock home screen dumping class containing springboard classdump brew install classdump show interesting sbhomegrabberview good start classdump applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibrarycoreservicesspringboardappspringboard interface sbhomegrabberview uiview uisettingskeypathobserver sbattentionawarenessclientdelegate mtlumadodgepillbackgroundluminanceobserver sbhomegrabbersettings setting mtlumadodgepillview pillview sbattentionawarenessclient idletouchawarenessclient bool touchesareidle bool autohides long long luma unsigned long long suppresslumaupdates property nonatomic bool autohides synthesize autohidesautohides void cxxdestruct void lumadodgepilldiddetectbackgroundluminancechange id next let load entire code springboard dummy app add view window check actually one interested code cleaner essential idea import dlfcnh somewhere viewdidload dlopen binarypath cstringusingencoding rtldnow uiview const view nsclassfromstring sbhomegrabberview alloc init view sizetofit selfview addsubview view modification get know looking let figure built learn implementation detail use hopper disassembler even free version fine purpose app help reduce friction reading disassembly still know basic need open binary find method interest jumping toggle pseudo code top generate readable mix objectivec c assembly typed name class see method implemented time build intuition learn spot interesting method never hurt start public uikit method since apple engineer use started sbhomegrabberview initwithframe unless comfortable reading assembly switch pseudocode mode try make much sense possible sometimes code quite selfexplanatory sometimes find dead end personal note find reading implementation detail interesting fun sometimes want understand certain behaviour better back sbhomegrabberview see rather thin wrapper aside various oh hey awattentionawarenessconfiguration need revisit later add mtlumadodgepillview subview initially thought defined metal framework mostly due mtl prefix seems bit specific defined lowlevel framework metal also matthias pointed twitter prefix class actually mt mtl luckily load binary springboard app also get access library load subsequently make finding library defining class easy using dladdr const class mtlumadodgepillviewclass nsclassfromstring mtlumadodgepillview dlinfo dlinfo dladdr bridge void mtlumadodgepillviewclass dlinfo dlinfodlifname path binary defining symbol class case code run part app set investigate also use lldb lesser known lldbfeature able set variable advantage using lldb recompile app disadvantage lldb requires bit help type since access header file hence casting additional variable function return type lldb e dlinfo dlinfo lldb e void dladdr bridge void nsclassfromstring mtlumadodgepillview dlinfo lldb p dlinfodlifname const char applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibraryprivateframeworksmaterialkitframeworkmaterialkit see defined systemlibraryprivateframeworksmaterialkitframeworkmaterialkit class mtlumadodgepillview protocol mtlumadodgepillbackgroundluminanceobserver nsobject void lumadodgepilldiddetectbackgroundluminancechange mtlumadodgepillview end interface mtlumadodgepillview uiview property nonatomic weak id mtlumadodgepillbackgroundluminanceobserver backgroundlumninanceobserver property nonatomic mtlumadodgepillviewstyle style property nonatomic readonly mtlumadodgepillviewbackgroundluminance backgroundluminance end thing point figure possible value mtlumadodgepillviewstyle mtlumadodgepillviewbackgroundluminance enough look description method convert integer value string going use constant typedef nsenum nsinteger mtlumadodgepillviewstyle mtlumadodgepillviewstylenone mtlumadodgepillviewstylethin mtlumadodgepillviewstylegray mtlumadodgepillviewstyleblack mtlumadodgepillviewstylewhite typedef nsenum nsinteger mtlumadodgepillviewbackgroundluminance mtlumadodgepillviewbackgroundluminanceunknown mtlumadodgepillviewbackgroundluminancedark mtlumadodgepillviewbackgroundluminancelight last interesting api backgroundlumninanceobserver invoke callback every time view changed appearance building mtlumadodgepillview getting closer mtlumadodgepillviewstyle wrapper sort internally privateclass galore proxy call cabackdroplayer private io using whole slew cafilters private io including one called kcafilterhomeaffordancebase cabackdroplayer powering various blur effect since io introduced nutshell clone view hierarchy behind layer gather statistic content also calayer allows apply quartzcore filter layer cloning view hierarchy along filter applied allows produce variation effect provided uivisualeffectview let take basic blur example uiblureffect blur uiblureffect effectwithstyle uiblureffectstylelight uivisualeffectview blurview uivisualeffectview alloc initwitheffect blur build need gaussian blur saturation filter solid white color composed using source blend mode rough code filtering part cafilter const blur id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur blur setvalue forkey inputradius cafilter const saturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate saturate setvalue forkey inputamount cabackdroplayer backdrop nsclassfromstring cabackdroplayer new backdropfilters blur saturate calayer overlay calayer new overlaybackgroundcolor uicolor cgcolor overlaycompositefilter id nsclassfromstring cafilter filterwithtype kcafiltersourceover layer addsublayer backdrop layer addsublayer overlay putting together final touch open mtlumadodgepillview initwithframe show list filter materialkit creates order replicate effect cafilter const blur id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur cafilter const colorbrightness id nsclassfromstring cafilter filterwithtype kcafiltercolorbrightness cafilter const colorsaturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate get actual value filter pause using view debugger select one added view copy address view layer section right console use selected address reference view layer lldb po frame stylewhite backgroundluminanceunknown lldb po calayer filter nsarrayi homeaffordancebase gaussianblur colorbrightness colorsaturate lldb po calayer filter valueforkey inputamount lldb po calayer filter valueforkey inputaddwhite noticed casting type integer calling property help lldb figure type object behind pointer repeating valueforkey dance every property found mentioned mtlumadodgepillview initwithframe bit tedious want look original style definition file assuming come plist somewhere finished reconstruct view using quartzcore cafilter const homeaffordancebase id nsclassfromstring cafilter filterwithtype kcafilterhomeaffordancebase uiimage const lumadodgemap uiimage imagenamed lumadodgepillmap inbundle nsbundle bundleforclass viewclass compatiblewithtraitcollection nil homeaffordancebase setvalue bridge id lumadodgemapcgimage forkey inputcolormap cafilter const blurfilter id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur cafilter const colorbrightness id nsclassfromstring cafilter filterwithtype kcafiltercolorbrightness cafilter const colorsaturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate mtlumadodgepillviewstylethin value homeaffordancebase setvalue forkey inputamount homeaffordancebase setvalue forkey inputaddwhite homeaffordancebase setvalue forkey inputoverlayopacity blurfilter setvalue forkey inputradius blurfilter setvalue yes forkey inputhardedges colorbrightness setvalue forkey inputamount colorsaturate setvalue forkey inputamount calayer layer nsclassfromstring cabackdroplayer new layerframe cgrectinset selfviewbounds layerfilters homeaffordancebase blurfilter colorsaturate colorsaturate layercornerradius selfviewlayer addsublayer layer mysterious home affordance base filter seems use passed lumadodgepullmap image map input image everything else seems fairly straight forward use filter saw implementation uivisualeffectview get final result afterword hope article showed reverse engineering far le magical endeavor appeared objectivec help abundance information retained binary make reverse engineering fun adventure feel free share thought ask question twitter zats thanks go warpling shaps others suggestion improve post
57,Lobsters,objectivec,Objective-C programming,Why many developers still prefer Objective-C to Swift,https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift,many developer still prefer objectivec swift,note sponsor hacking swift reach world largest swift community main reason holding back switching swift primary language steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher ever felt developer might get little stigmatized using objectivec talking social medium steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment feel see conference use swift time steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher think introduction swift helped hindered development objectivec language steve troughtonsmith michael lauer dan leivers todd thomas ian mcdowell simon wolf marco arment marcel weiher think objectivec swift developer thank steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher taking time contribute view article let know twitter sponsor hacking swift reach world largest swift community,several year io sdk announced developer flocking objectivec sought get slice app development gold rush time gone swift u three year largely pushed older sibling limelight objectivec rising star app development world started become secondclass citizen apple ecosystem yes might occasionally get dusted slide two wwdc majority conference talk worldwide swift apple pushing swift hard education space major language feature come swift first still using objectivec alone many developer still prefer objectivec swift good reason got touch objectivec developer ask holding back whether feel objectivec development become stigmatized note view expressed personal may represent view employer people listed order responded answer edited length sponsor hacking swift reach world largest swift community main reason holding back switching swift primary language steve troughtonsmith variety reason avoid swift first foremost nt enjoy using find language much difficult read parse objc especially iflet variable assignment loop switch statement chaotically overused apple body sample code like arkit newcomer different language written thing kind platform swift definitely extreme low end legibility spectrum yet convinced apple level participation language four year swift used important piece io o framework maintain running list swift apps apple twitter macos definitely le shy adopting new feature io understand case abi stability etc apple using everything nt see need betatesting behalf lose nothing waiting swift ready gain benefit objectivec meantime fully belief apple build something say way forward nt mean right choice anecdotally heard first year apple divided swift anybody apple course massive body objc developer swift much surprise many u fully belief apple build something say way forward nt mean right choice seen whole bunch misstep discoveryd io io mehs macos touch bar apple past several year certainly nt hurt wait see pan michael lauer see incentive extremely productive objectivec view language elegant concise expressive firstclass async concurrency swift jump minute contrast hear slow compilation time massive duplication runtime library yet see significant runtime performance improvement dan leivers prototype small project use objectivec purely ease updating significant period time passed often likely type client also maintain objectivec apps number client simply time reason switch swift cutting new code project swift often end scenario mentioned prototype peter molnar honest version main roadblock missing source code compatibility even still waiting abi stability think one issue left personally feel le important source compatibility work todd thomas xcode support swift seems laughable stupid long compile time large project crappy refactoring debugging tweetbot mac fairly sizable project take second compile retina mbp includes framework library app also swift abi stable yet need ship swift libs app likely start slowly converting part app swift build time hour full clean build adding would great ian mcdowell ton shared c code business logic shared window android write ui native uikitappkit objectivec lot objectivec file bridge two language yet adopted swift much aside script internal tool hearing team using swift compile time slower objectivecc hundred xcode project eventually compiled giant static library linked app binary done reduce app launch time build time hour full clean build adding would great simon wolf primary coding project client large codebase evolved several year whilst introduce swift lot work involves editing existing code prevents using much swift consultant also aware time new major version swift either charge update see correctly working code take neither ideal proposition marco arment judgment swift pragmatic decision already expert objectivec extremely productive using benefit switching swift compelling enough overcome cost marcel weiher lot best work includes heavy metaprogramming judicious mixing c part objectivec dynamic messaging part get difficult much example write coredata swift also churn tried find sample code apple pencil swift none compiles today ever felt developer might get little stigmatized using objectivec talking social medium steve troughtonsmith little deeply unpopular use objc say like objc swift swift truly massive hype train definitely nt want stand way like anything creates passionate fullyboughtin fan point engaging reasoned discussion swift user aware downside happy make compromise perceived benefit nt perceive benefit michael lauer absolutely feel like constantly must defend dinosaur believe amy worrall talk iosdevuk objectivec unrest audience seemed people understanding dan leivers definitely drive new shiny perhaps many io community ended first place entirely unsurprising still push bleeding edge believe amy worrall talk iosdevuk objectivec unrest audience seemed people understanding peter molnar feeling reading job title job description necessarily social medium everyone looking senior swift developer todd thomas worry much app speak good user care written ian mcdowell felt stigma lot still using objectivec use swift personal project love understand reason use work simon wolf little believe swift bad objectivec one true cocoa language tend avoid heated argument pro con swift also seen people rude objectivec developer mac developer tend edge io community anyway probably conflict think mac developer keen use latest greatest still battling nscell marco arment already starting every transition happens way objectivec developer made fun carbon developer natural side effect whenever language currently considered language progress anymore still using pragmatic reason php developer web side accustomed feel see conference use swift time steve troughtonsmith fully excluded swiftonly conference one nothing nt want care swift best practice design pattern language fully formed apple using scale nt want collate dozen communityled design pattern want apple swiftonly conference one nothing knowing swift one true future apple development done lot push away wanting make apps outright onetwo punch io ui swift transition certainly made feel like nt platform want develop anymore michael lauer sad course translate everything see effort refuse submit talk conference demand example swift thankfully still conference rest u dan leivers least mostly consistent peter molnar think part evolution true much life around objectivec swift new thanks continuously changing lot talk obviously lot also obsolete tomorrow todd thomas guess want forward looking conference probably use swift mind personally also pay huge amount attention conference either ian mcdowell feel great future simon wolf mind realize swift new shiny thing since know swift well enough understand really worry buried head sand bothered learn swift may feel left think approach conducive good developer marco arment bother conference organizer attendee stay closer bleeding edge course use swift translating swift snippet objectivec conference tutorial stack overflow one cost continuing use objectivec today far proven especially burdensome time burden increase marcel weiher admit find lot swift talk superficial often laughably illinformed guess feel disappointment know sound harsh obviously exception omg think introduction swift helped hindered development objectivec language steve troughtonsmith swift absolutely catastrophic objectivec development new apis feature longer sample code wwdc slide tutorial github stackoverflow whatever stackoverflow millennial joke losing access context knowledge devastating plus side objc language gained bunch quality lifesyntactic sugar feature help interop swift better fantastic swift absolutely catastrophic objectivec development really resent fact objc die make swift live two language could lived independently everything would fine developer like could pick language appropriate task hand passionate massive movement behind swift made impossible well apple cessation creating objc resource developer michael lauer mostly hindered benefit got thanks swift lightweight generic nullability dream could objectivec manpower behind dan leivers think initially helped help feel mostly put back burner todd thomas think helped added many useful thing language swift complain ian mcdowell objectivec gotten nice feature swift including available syntax nullability specifier stable language nt expected change unwrapping swift pain helped adopt better practice objectivec simon wolf helped far change improvement objectivec result swift addition writing little swift encouraged look objectivec coding practice le inclined let nil object sweep thing carpet unwrapping swift pain helped adopt better practice objectivec marco arment swift effectively stopped development objectivec language neither surprising unreasonable fortunately objectivec pretty mature year swift introduction brought lot improvement keep objectivec usable u move swift marcel weiher obviously hindered objectivec ok really need bullet head development surprising somewhat disturbing many obvious defect library preferred coding style would trivial fix without introducing whole new language swift arrived attributed swift almost improvement held back order make swift look good though pretty sure happened however biggest negative impact likely prevent development successor actual improvement really enough information build beast apple ignored crime think along question also asked long people using objectivec think fair say familiarity language always going important choosing stay move come surprise hear people said using objectivec either immediately iphone sdk first launched shortly couple used well ten year one yes twenty seven year add one responder said started objectivec relatively recently perhaps still life old dog yet one thing last year wrote book called objectivec swift developer introduction included section titled love objectivec wrote read first complete draft book thought wow read like snark guide objectivec felt like almost every chapter complained something result spent time editing book make little upbeat trying present thing artificial light genuinely loved working objectivec switched swift day announced swift app live app store first day possible result many respect objective c seems bad swift much better working swift long going back objectivec feel bit like returning rural home town christmas used living big city tell whether loved objectivec stockholm syndrome whether apple apis darned powerful regardless think important realize amazing software built objectivec many people love much today always find thing book make cringe gentle old language come long way served u well least deserves dignity retirement thank steve troughtonsmith michael lauer dan leivers peter molnar todd thomas ian mcdowell simon wolf marco arment marcel weiher taking time contribute view article still prefer using objectivec swift let know twitter sponsor hacking swift reach world largest swift community
58,Lobsters,objectivec,Objective-C programming,Objective-C Implementation and Performance Details for C and C++ Programmers,https://swolchok.github.io/objcperf/,objectivec implementation performance detail c c programmer,article,ivars quite efficient access c c struct member recall struct member access simple loading offset struct struct somestruct double dbl added make clear offset handled giving x nonzero offset int x int int accessmember struct somestruct return x int accessarray int return globl accessmember accessmember accessmember bb ldp add ret globl accessarray accessarray accessarray bb ldp add ret read x accessstruct load offset location pointed happens ldp load pair instruction let u load two ints case case exactly pas array ints accessarray compare ivar access import foundationfoundationh interface someclass nsobject int x int end implementation someclass int accessivar return x end someclass accessivar someclass accessivar bb adrp objcivar someclassx page ldrsw objcivar someclassx pageoff ldr adrp objcivar someclassy page ldrsw objcivar someclassy pageoff ldr add ret instead one load per struct member access previously combined ldp looking load pcrelative pointer offset adrp pcrelative address page ldrsw load register signed word second load ldr using offset self pseudoc something like ptrdifft xoffset someclassxivar offset int x int char self xoffset ptrdifft yoffset someclassyivar offset int int char self yoffset return x c expert code generated ivar access virtually identical code generated following contrived example access via pointertomember struct somestruct double dbl int x int int somestruct xptr somestruct x int somestruct yptr somestruct int accessviamemptr somestruct return xptr yptr assembly bb adrp xptr page ldr xptr pageoff ldr adrp yptr page ldr yptr pageoff ldr add ret loh adrpldr loh adrpldr section data data globl xptr xptr xptr quad globl yptr yptr yptr quad article explains reason extra indirection ivar access solve fragile base class problem unlike c superclass ivars added subclass nt recompiled adjust ivar offset instead objectivec runtime make adjustment load time
