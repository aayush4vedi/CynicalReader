ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,vcs,Git & VCS,"Debian Janitor: > 60,000 Lintian Tags Automatically Fixed",https://www.jelmer.uk/janitor-update-3.html,debian janitor lintian tag automatically fixed,debian janitor lintianbrush series scheduling lintian fix janitor lintian udd lintianbrush inner working fixer example fixer policy priority priorityextraisreplacedbypriorityoptional usrsharelintianbrushfixerspriorityextraisreplacedbypriorityoptionalpy debmutate http salsadebianorgjelmerlintianbrushtreemastertestspriorityextraisreplacedbypriorityoptional readme manual page success fixer landing page go top,debian janitor automated system commits fix minor issue debian package fixed software gradually started proposing merges early december first set change sent ran lintianbrush sid package maintained git post part series progress janitor scheduling lintian fix determine package process janitor look import lintian output across archive available udd prioritize package severe issue fixer package selected clone packaging repository run lintianbrush lintianbrush provides framework applying set package run set pristine version repository handle heavy lifting inner working fixer fixer executable get run clean checkout package make change fixer written python shell language contract fixer pretty simple fixer exit nonzero change reverted fixer considered failed exit zero made change write summary change standard fixer uncertain change made report standard output using pseudoheader default lintianbrush discard change uncertainty running locally still apply specifying uncertain summary message standard used commit message possibly changelog message package use gbp dch example fixer look example package priority deprecated since debian policy released august see policy priority instead package use priority lintian warn package us deprecated value associated tag priorityextraisreplacedbypriorityoptional lintianbrush fixer script automatically replace system lintianbrush installed source fixer life usrsharelintianbrushfixerspriorityextraisreplacedbypriorityoptionalpy copy reference debmutatecontrol import controleditor lintianbrushfixer import reportresult fixedlintiantag controleditor updater para updaterparagraphs paraget priority extra para priority optional fixedlintiantag para priorityextraisreplacedbypriorityoptional reportresult change priority extra priority optional fixer written python us debmutate library easily modify control file preserving formatting back possible preserve formatting current fixer come test eg particular fixer test found http salsadebianorgjelmerlintianbrushtreemastertestspriorityextraisreplacedbypriorityoptional detail writing new fixer see readme lintianbrush detail debugging see manual page success fixer list fixer currently available number successful mergespushes per fixer footnote information janitor lintianfixes effort see landing page go top
2,Lobsters,vcs,Git & VCS,Ignoring mass reformatting commits with git blame,https://akrabat.com/ignoring-revisions-with-git-blame/,ignoring mass reformatting commits git blame,stephen pep rescue doc change store ignored commits file,recently merged pr stephen reformats entire codebase align pep decade old resulted lot change file stephen name attached affect git blame example git blame l robertoalsina robertoalsina font know ca stephen finucane n stephen finucane fontnamelower stephen finucane fullnamelower stephen finucane fullnamelower replace italic stephen finucane roberto alsina font n afm pfblist basename robertoalsina stephen implicated changed loop run tool reformatted ignorerev rescue fortunately resolved using ignorerev doc ignore change made revision assigning blame change never happened line changed added ignored commit blamed previous commit changed line nearby line option may specified multiple time ignore one revision rerunning command ignoring reformmatting commit git blame ignorerev l robertoalsina robertoalsina font know ca roberto alsina n roberto alsina fontnamelower roberto alsina fullnamelower roberto alsina fullnamelower replace italic roberto alsina roberto alsina font n afm pfblist basename robertoalsina see actual change roberto march particularly like formatting update remains line number continue match editor magic store ignored commits file remembering type ignorerev get tedious quite quickly remembers commit hash anyway help git blame also support writing commit hash file referencing file ignorerevsfile create gitblameignorerevs like run code black resolve various style issue commit full character hash allowed comment ignore commits file git blame ignorerevsfile gitblameignorerevs l tell git name file git blame always use git config blameignorerevsfile gitblameignorerevs note need set perproject git blame error find file original command exactly want git blame l robertoalsina robertoalsina font know ca stephen finucane n stephen finucane fontnamelower stephen finucane fullnamelower stephen finucane fullnamelower replace italic stephen finucane roberto alsina font n afm pfblist basename robertoalsina never need think mass reformatting ever truly magic
3,Lobsters,vcs,Git & VCS,gitoxide: pure rust implementation of git,https://github.com/Byron/gitoxide,gitoxide pure rust implementation git,gix easy safe use api development status gitoxide program program gitobject gitodb giturl gitprotocol gitpacketline gittransport gitrepository gitcommitgraph gitconfig gitref gitindex gitdiff gitfeatures parallel gittui stress testing idea demo installation binary release release section cargo rustup usage gix gixp project goal purerust implementation git learn best write best possible idiomatic rust best performing implementation assure ondisk consistency take shortcut quality cross platform support including window window testsed ci nongoals replicate command functionality perfectly incompatible git use async io everywhere roadmap future roadmap cargo feature guide gitoxide fast http prettycli leancli prodashrenderlinecrossterm prodashrenderlinetermion convenience feature max maxtermion lean leantermion light small gitfeatures parallel interrupthandler note disableinterrupts interrupthandler pipe gittransport httpclientcurl serialization support gitobject giturl gitodb gitprotocol gitoxidecore plumbing v porcelain plumbing porcelain shortcoming lean light small packfiles use memory map packfiles load file bigger bit system giturl credit itertools license fun fact problem various shape form time,gix commandline interface cli access git repository written optimize userexperience perform good better canonical implementation furthermore provides easy safe use api form various small crate implementing tool breeze please see development status listing crate capability development status gitoxide cli please note functionality come gitoxidecore library mirror capability relies git crate limit amount thread used operation support choose human json output format gix program convenient human gixp program plumbing lower level command use automation gitobject gitodb giturl gitprotocol gitpacketline gittransport gitrepository gitcommitgraph gitconfig gitref gitindex gitdiff gitfeatures parallel feature toggle function execute serially gittui terminal user interface seeking replace improve tig stress testing idea demo installation binary release curl lsfs http rawgithubusercontentcombyrongitoxidemainciinstallsh sh git byrongitoxide crate gixmaxtermion see release section manual installation various alternative build slimmer smaller depending need linux macos window cargo cargo rust package manager easily obtained rustup build binary effortlessly particular cpu additional performance gain default installation max cargo install gitoxide linux little faster compile termion version also result slightly smaller binary cargo install gitoxide nodefaultfeatures feature maxtermion smaller binary even faster build time traded le fancy cli implementation use lean leantermion respectively cargo install gitoxide nodefaultfeatures feature lean usage installed two binary gix high level command porcelain everyday use optimized pleasant user experience gixp low level command plumbing use specialized case project goal purerust implementation git including transport object database reference cli tui simple commandline interface provided common git operation optimized user experience simplegit goto implementation anyone want solve problem around git become alternative gitpython process become foundation free distributed alternative github maybe even github learn best write best possible idiomatic rust fantastic resource see abstraction work use use rust type system make misuse impossible best performing implementation use rust type system optimize work done without hard use make use parallelism get go assure ondisk consistency assure read never interfere concurrent writes assure multiple concurrent writes nt cause trouble take shortcut quality binary may use anyhow error exhaustively knowing error solely userfacing library use lightweight custom error implemented using quickerror internationalization nothing concerned right io error due insufficient amount open file handle nt always lead operation failure cross platform support including window tool experience available reason support window window testsed ci failure prevent release nongoals replicate git command functionality perfectly git git reason use path one simplicity make getting started git easy incompatible git ondisk format must remain compatible never contend use async io everywhere part git operation heavily relying memory mapped io well cpu decompress data nt lend well async io box use blocking well gitfeatures interrupt bring operation async world control long running operation connecting streaming tcp connection especially receiving server async seems like must though behind feature flag roadmap future roadmap provide cli basic user journey cargo feature guide cargo us feature toggle control dependency pulled allowing user specialize crate fit usage ideally additive guide document feature available crate provided function gitoxide toplevel commandline interface fast make crate execute fast possible supporting parallel computation otherwise longrunning function well fast hardware accelerated hashing disabled binary visibly smaller http support synchronous http http transport eg clone fetch push expense compile time binary size mutually exclusive prettycli use clap build prettiest best documented userfriendly cli expense file size provides terminal user interface detailed exhaustive progress provides line renderer leaner progress leancli use argh produce usable binary decent documentation smallest size usually le prettycli prettycli enabled well leancli take precedence pay building unnecessary dependency provides line renderer lean pretty progress prodashrenderlinecrossterm prodashrenderlinetermion mutually exclusive verbose flag powered interactive progress mechanism double log well interactive progress appears short duration convenience feature combine common choice one name max prettycli fast prodashrendertuicrossterm http default unix window maxtermion prettycli fast prodashrendertuitermion http unix faster compile time little smaller lean leancli fast prodashrenderlinecrossterm unix window significantly smaller max without progress terminal user interface leantermion leancli fast prodashrenderlinetermion unix faster compile time little smaller light leancli fast crossplatform nature come simplified log based progress small leancli small possibly threading fast log based progress cleanup temporary file interrupt gitfeatures crate help controlling capability available toplevel crate us gitoxidecore gitoxide crate us gitfeatures feature toggle additive parallel use scoped thread channel parallelize common workload multiple object enabled used everywhere make sense cache likely used instantiated per thread memory used top cost thread multicrate implementation use hardware acceleration thus bearing potential throughput cpu support like amd ryzen intel core mutuallyexclusive interrupthandler listen interrupt termination request provide longrunning operation tooling allow aborting input stream note gitfeatures interrupt inithandler must called start application application already set handler handler effect unset utility still triggered programmatically however interrupting ctrlc sigterm may lead leaking temporary file disableinterrupts take precedence interrupthandler set well set interrupt triggered programmatically user inject mean supporting interrupt useful multiple interruptible operation time triggered independently facility global one probably useful server implementation pipe inmemory unidirectional pipe using byte efficient transfer mechanism gittransport httpclientcurl add support http http transport using rust binding libcurl serialization support follows feature toggle control serialization public facing simple data type data structure implement serde serialize serde deserialize feature provided crate gitobject giturl gitodb gitprotocol gitoxidecore plumbing v porcelain term coming git implementation even though wo nt necessarily point command plumbing porcelain term plumbing refers lowerlevel rarely used command complement porcelain invoked certain use case term porcelain refers decent user experience primarily intended use human case type program must selfdocument capability using help flag derive rule try adhere plumbing show progress logging output default supported logging enabled show timestamps utc need git repository instead take variable via commandline porcelain provides output stderr default provide progress information need allow disabling nt show unless operation take time timestamps shown localtime nonprogress information go stdout shortcoming lean light small build nt support path cli packfiles use memory map even though comfortable use fast squelch io error potential remedy could generalize pack make possible work inmemory buffer directly way one would initialize pack reading whole file memory thus squelching io error expense latency well memory efficiency packfiles load file bigger bit system system address memory potential remedy implement sliding window map unmap portion file needed implementation nt use simd probably cost one could upgrade crate look unmaintained code giturl might restrictive git allows part us browser grade url parser credit itertools mit licensed use izip macro code mit licensed use various abstraction implement decompression compression directly top rather lowlevel minizoxide crate license project licensed either option fun fact originally really fascinated problem believe gitoxide possible provide fastest solution absolutely blown away git first time experienced git year ago tried implement various shape form multiple time rust finally feel found right tool job
4,Lobsters,vcs,Git & VCS,git branch --delete master,https://danso.ca/blog/git-branch-delete/,git branch delete master,git branch delete master released one week ago changing new repository changing existing repository,git branch delete master git version released one week ago includes simple nice new feature init allow setting default initial branch name via config mean changing new repository creating git repository using git init git create default branch traditionally branch called git creates branch begin staging committing file find name distasteful change name branch time git invocation git branch move master whatever newest release git set default branch name main repos user creates want edit socalled global git configuration git config global initdefaultbranch main new repository initialize use default branch main changing existing repository setting affect new repository create future changing existing repo difficult existing repo rename branch git branch move master main push new branch assuming remote repository named git push origin main finally delete original branch git push origin delete master three step renamed git branch without making big deal avoiding wrath internet reactionary
5,Lobsters,vcs,Git & VCS,Highlights from Git 2.28,https://github.blog/2020-07-27-highlights-from-git-2-28/,highlight git,released git released introducing statement software freedom conservancy githubrenaming gitlab bitbucket source changedpath bloom filter blog post explaining juicy technical detail file generation number loose object packed object blog post derrick stolee new bloom filter source source source tidbit configuration source github action workflow gitgitgadget source git mailing list source filter filter git lf source sparse checkout shrink size monorepo source rest iceberg previous version,open source git project released git feature bug fix contributor new last caught latest git back released look interesting feature change introduced since introducing initdefaultbranch initialize new git repository scratch git init git always created initial first branch name master git new configuration option initdefaultbranch introduced replace hardcoded term background change statement software freedom conservancy excellent place look starting git git init instead look value initdefaultbranch creating first branch new repository value unset initdefaultbranch default master important note configuration variable set user overriding default value easy git config global initdefaultbranch main configuration variable affect new repository cause branch existing project renamed git clone also continue respect head repository cloning see change branch name maintainer initiate one change support many community github wider git community considering renaming default branch name repository master learn complementary change github making see githubrenaming gitlab bitbucket also making similar change source changedpath bloom filter git commitgraph file format extended store changedpath bloom filter mean sense new information help git find point history touched given path much quickly example git log path git blame git take advantage optimization deliver handful sizeable performance improvement get worth taking refresher commit graph whether new concept familiar familiar want take deeper dive check blog post explaining juicy technical detail simplest term commitgraph file store information commits essence commitgraph act like cache commonlyaccessed information commits parent root tree thing like also store computed information like commit generation number changedpath bloom filter moment store information understand answer helpful cursory understanding git store object git store object one two way either loose object case object content stored single file unique object disk packed object case object assembled compressed format pack file matter way commit stored still parse decompress field like root tree parent accessed commitgraph file information immediate given commit c git know exactly look commitgraph file field store read immediately decompression piecing together required shave time usual git operation commitgraph really shine computed data store generation number sort reachability index help git answer question thing like reachability topological ordering quickly since generation number new release trying explain quickly would lose lot benefit careful exposition refer instead blog post freshlyminted hubber derrick stolee matter new ok made far got pretty good handle commit graph useful let get juicy detail git commitgraph file learned store changedpath bloom filter changedpath bloom filter ask bloom filter probabilistic set set item querying set presence item x return either x definitely set x might set never x definitely set commitgraph store one bloom filter commits reside commitgraph populates bloom filter list path changed commit first parent bloom filter huge boon performance lot git command general pattern something like git command computes diffs sometimes proportionally expensive bloom filter allows git compute far fewer diffs skipping computation certain commits bloom filter return definitely path interest take git log pathtofile example prior git git log would compute diff every revision walk determining whether show ie whether diff entry pathtofile git newer git skip computing many diffs altogether consulting commit c changedpath bloom filter querying pathtofile querying return definitely git know computing diff strictly uninteresting computing diffs commits expensive least relative complexity algorithm generated reducing number diffs computed overall greatly improve performance try run command git commitgraph write reachable changedpaths generates commitgraph file changed path bloom filter enabled able see performance improvement command like git log path git log l git blame anything else computes firstparent diffs given pathspec source source source tidbit talked headlining change past couple release let look new feature run git pull repository tracking remote branch one four thing happen might change change server client long change direction resolving difference straightforward change nothing server strictly ahead client client fastforwards state serverbut change client server happens depends whether pullrebase configuration set branch rebased top pulling otherwise merge performedthese merges clutter history tricky back without starting pull scratch git warns case specifically pullrebase unset explicitly specify rebase argument git pull source git includes github action workflow use run git integration test variety platform compiler extra effort required part fork gitgit github push run array test necessary validate change wait git use mailing list development yes use gitgitgadget gitgit repository mean open pull request gitgitgadget send mailing list behalf comfortable contributing git like instead composing email manually contribute git start finish using github source hand mind sending email two much easier interact git mailing list encounter bug running git bugreport running new command open editor prepopulated form question useful debugging issue also includes helpful information system like cpu architecture version git running onwhen done send file body email git mailing list rest assured opened helpful bug report source talked number time git clean smudge filter corresponding process filter simulates multiple clean smudge filter single process recently protocol filter relatively straightforward git supply one end content filter produce otherin git information supplied protocol like metadata branch checked case git checkout remote contacted case git fetch new information could used tool like eg git lf order figure remote contact extra data source last least git status learned new trick might recall recent blog post talked sparse checkout shrink size monorepo git status remind sparse checkout telling percentage file checked outfor fan gitpromptsh prompt display sparse sparse checkout source rest iceberg sample change latest couple release check release note previous version git repository note since bloom filter persisted automatically pas changedpaths explicitly subsequent write good idea disable configuration automatically generates commitgraphs like fetchwritecommitgraph gcwritecommitgraph
6,Lobsters,vcs,Git & VCS,One year of automatic DB migrations from git,https://abe-winter.github.io/2020/08/03/yr-of-git.html,one year automatic db migration git,automig autogenerate feature pro written migration year simple readable source truth standard tool across different language cluttered migration dir turn something complicated something simple almost good con data migration supported something go wrong fix extra lifting integrate orms dialect support picnic branch conflict issue rebasing migrating production involves upfront work testing annoying column order weird parser,last yearplus solo work used tool called automig automatically turn sql schema change delta applied db plug wrote hate writing migration feel like work computer know general guarantee migration produce something equivalent schemasql orm definition sqlalchemy alembic autogenerate feature compare running db orm spec running db loop migration generation creates different set tradeoff automig analyzes sql file directly article pro con retrospective year pro written migration year love writing migration process add column fewer step win simple readable source truth long trust tool know open schemasql file whatever choose name get schema readable doc database reliable indicator database actually standard tool across different language used automig different python golang project care linked design tool decision inside codebase automig standard tool would portable skillset cluttered migration dir personal hygiene decision legit gripe migration directory favorite hundred file little good automig also faster reinitialization start git head rather applying hundred change last month turn something complicated something simple almost good con see bunch migrationrelated work longer think longer dread adding db column index capability le tool simpler declarative tradeoff one lived happily con data migration supported automig good schema migration easy way transform column run code db tool answer roadmap need able work around twostep migration default value larger user data migration involve lot design see example github ghost tool future think migration native feature db upload schema specify whether migration run upfront read tie type storage locality something go wrong fix gripe using tool maintain user legit point declarative diffing tool logic migration write sql running arbitrary sql give lot flexibility give infinite freedom choose incompatible dialect extra lifting integrate orms automig generate sqlalchemy definition schemasql use single language framework defining db orm probably useful specified using sql dialect support picnic switched postgres sqlite project pain support different dialect ran thing like different support transactional ddl since first wrote seen comment skeema migra committers tool support one db mysql postgres respectively rely db heavy lifting lot positive approach branch conflict issue rebasing nonlinear git history source error automig opaque switch work around manuallyspecified migration likely better branch especially need support outoforder change encountered problem solo codebases see issue big team sometimes deploy nonmain branch migrating production involves upfront work use main backend language framework run migration life easy automig extra requirement need bundle git folder ie whole history ran lambda also bundle git binary ubuntu binary work spent whole day learning build git statically realized could grab centos one good news work done per platform testing annoying automig work committed change sometimes round git commit amend thing work column order automig guarantee column order add column add column b caused issue backup restore problem tool necessarily approach using git sql source truth weird parser parser library easily confused especially uppercase lowercase name look like keywords multilayer use python sqlparse wrap ie janky issue approach much specific tool use cause problem
8,Lobsters,vcs,Git & VCS,Git-tagup: A Tool to Find & Tag Git Commits Based on Version Numbers in Commit Messages,https://initialcommit.com/projects/git-tagup,gittagup tool find tag git commits based version number commit message,semver gittagup bitbucket page python package index pypi,find tag git commits based version number commit message like often add version number commit commit message something like git commit bump version still like probably forget create tag new version push remote repository end project many untagged commits month year ago never get real tag created gittagup conveniently search active branch git repository find untagged commits containing version number commit message one find tool asks user whether want create tag currently semver versioning format supported happy take request format happy tagging python greater pip package manager python install gittagup browse git repository want add tag usually project root directory containing git directory cd pathtoprojectroot run program version number found commit message answer prompt create tag n skip nt forget push new tag remote done cd pathtoprojectroot gittagup create tag commit message bump version ynq n create tag commit message bump version ynq create tag commit message bump version ynq q learn project gittagup bitbucket page python package index pypi
9,Lobsters,vcs,Git & VCS,gitqlite is a tool for running SQL queries on git repositories,https://github.com/augmentable-dev/gitqlite,gitqlite tool running sql query git repository,askgit installation installation instruction coming soon using docker docker hub running command pwd running command stdin usage table example query,askgit askgit commandline tool running sql query git repository meant adhoc querying git repository disk common interface sql alternative patching together various shell command execute query look like many commits authored user emailcom select count commits authoremail user emailcom indepth example documentation found installation installation instruction coming soon go get v tagssqlitevtable githubcomaugmentabledevaskgit use go tool chain install binary gobin gobin pwd go get v tagssqlitevtable githubcomaugmentabledevaskgit produce binary current directory using docker build image locally using docker docker build askgit latest use official image docker hub docker pull augmentableaskgit latest running command askgit operates git repository repository need attached volume example us bash builtin command pwd current working directory pwd print absolute pathname current working directory docker run v pwd repo ro askgit select commits running command stdin piping command via stdin docker command need told run noninteractively well attaching repository repo cat querysql docker run v pwd repo ro askgit usage askgit h output date usage instruction version cli typically first argument sql query string askgit select commits current working directory used path git repository query default use repo flag specify alternate path even remote repository reference http ssh askgit clone remote repository temporary directory executing query also pas query via stdin cat querysql askgit default output ascii table use format json format csv alternative see h option table commits similar git log commits table includes commits history currently checked commit column type id text message text summary text authorname text authoremail text authorwhen datetime committername text committeremail text committerwhen datetime parentid text parentcount int treeid text addition int deletion int file file table iterates file commit history default checked repository full table every file every tree commit history use commitid column filter file belong work tree specific commit column type commitid text treeid text fileid text name text mode text type text content text ref column type name text type text hash text example query return commits history currently checked branchcommit repo return deduplicated email address commit author select distinct authoremail commits return commit count every author email select authoremail count commits group authoremail order count desc excluding merge commits select authoremail count commits parentcount group authoremail order count desc expensive query iterate every file every tree every commit current history output set file tree certain commit select file commitidsomecommitid commit short id select file commitid like shortenedcommitid return author email line addedremoved ordered total number commits history select count commits sum addition addition sum deletion deletion authoremail commits group authoremail order commits return commit count author broken day week select count commits count case strftime w authorwhen end sunday count case strftime w authorwhen end monday count case strftime w authorwhen end tuesday count case strftime w authorwhen end wednesday count case strftime w authorwhen end thursday count case strftime w authorwhen end friday count case strftime w authorwhen end saturday authoremail commits group authoremail order commits
10,Lobsters,vcs,Git & VCS,Manage your dotfiles with Git,https://news.opensuse.org/2020/03/27/Manage-dotfiles-with-Git/,manage dotfiles git,manage dotfiles git dot git git come rescue bash zsh setup new machine source,manage dotfiles git mar sogal poher license dot commonly referred dotfiles small plain text file contain configuration time reside home directory hidden prefixed dot hence name apps find well homeconfig directory come managing ie keep track change moving around different workstation backing different solution good old usb stick rsyncing syncing copying central folder symlinking supposed found article focus manage efficient simple way git git come rescue example use homedotfiles git repository feel free change need first initialize repository git init bare homedotfiles git command use refer repository advised create alias alias dotfilesusrbingit gitdir homedotfiles worktree home add line shell configuration file homebashrc use bash homezshrc use zsh next configure git show untracked file required use entire home work tree dotfiles config local statusshowuntrackedfiles point able check state repository add configuration file commit wish example add bashrc dotfiles add bashrc dotfiles commit added bashrc add remote repository selfhosted git public one push change dotfiles remote add origin git yourgitexamplecomdotfilesgit dotfiles push setup new machine set configure new system dotfiles repository first clone locally online repository git clone bare git yourgitexamplecomdotfilesgit homedotfiles defined alias alias dotfilesusrbingit gitdir homedotfiles worktree home remember put shell configuration file apply change repository cloned system file already exist get error probably happen file created default opensuse installation user account creation homebashrc file worry rename delete time change configuration file tracked git remember commit push change source following article used source article thanks lot author
11,Lobsters,vcs,Git & VCS,git commit accepts several message flags (-m) to allow multiline commits,https://www.stefanjudis.com/today-i-learned/git-commit-accepts-several-message-flags-m-to-allow-multiline-commits/,git commit accepts several message flag allow multiline commits,git documentation shared short terminal session twitter little video stephan schneider,use git command line might used message flag allows developer define commit message inline calling git commit git commit commit message biggest fan approach prefer edit commit message vim use writing commit message give opportunity doublecheck file committing today learned git commit command accepts multiple message flag turn use option multiple time git documentation includes following paragraph multiple option given value concatenated separate paragraph run following command git co commit title commit description result commit author stefan judis date tue jul commit title commit description testtxt file changed insertion deletion use multiple flag create multiline commits admit handy case edited several people pointed achieve commit structure including title body multiple line opening quote pressing enter closing commit quote git commit commit title commit description master commit title file changed insertion deletion create mode want see command action shared short terminal session twitter little video thanks stephan schneider shared little git tip company slack
12,Lobsters,vcs,Git & VCS,git-assembler: update git branches using high-level instructions,https://www.thregr.org/~wavexx/software/git-assembler/,gitassembler update git branch using highlevel instruction,basic setup git configuration assembly file reference assembly graph reference gitrerere git configuration,gitassembler best used short git alias see basic setup git configuration extra detail suggested shorthand git need run within git repository primary location configuration file gitassembly file contains instruction update defined branch performing merge rebase operation complete list command available assembly file reference default without argument gitassembler read assembly file display graph representation defined branch without performing action cat gitassembly merge master test git master test graph layout documented assembly graph reference dryrunn flag display instead flattened list operation performed order current repository git dryrun gitassembler merging test master actually perform operation assemblea flag always required true also create recreate flag seen conjunction dryrun cat gitassembly base new master merge new bugfix git dryrun gitassembler branch new need creation master git dryrun create gitassembler creating branch new master gitassembler merging bugfix new default defined branch either displayed updated list explicit target given command line cat gitassembly merge b merge c git b c git c git av gitassembler merging c working large project list default target overridden assembly file nonexistent branch ignored unless dependedon one requested target branch exist defined also ignored magic introduced gitassembler involving conflict conflict arise merge operation gitassembler drop branch merged onto assuming simple merge conflict cat gitassembly merge master git av gitassembler merging master automerging test conflict content merge conflict test recorded preimage test automatic merge failed fix conflict commit result u test error committing possible unmerged file hint fix work tree use git addrm file hint appropriate mark resolution make commit fatal exiting unresolved conflict gitassembler error merging master gitassembler stopping branch master fixcommit rerun gitassembler use git addcommit usual resolve conflict git merge abort cancel merge aborting merge useful example invoke different merge strategy remove offending rule disregard merge completely soon merge resolved aborted state instantly reflected git fix merge git commit git av gitassembler already date course merge aborted merge rule removed git simply try next invocation additional information displayed two branch involved current run cat gitassembly merge master merge git master git av gitassembler merging automerging test conflict content merge conflict test recorded preimage test automatic merge failed fix conflict commit result u test error committing possible unmerged file hint fix work tree use git addrm file hint appropriate mark resolution make commit fatal exiting unresolved conflict gitassembler error merging gitassembler stopping branch fixcommit rerun gitassembler master adorned graph indicate initial branch git started note name current branch git master fixing merge running git av second time continue restore initial branch fix conflict git commit git av gitassembler merging master gitassembler restoring initial branch master conflict arising rebase operation drop branch rebased work exactly fix conflict either rebase continue rebase abort normally would situation get complex stage lesser extent base involved somewhere graph since staging branch deleted recreated every update merge conflict keep repeating unless conflict handled within branch merged always desired situation gitrerere required see git configuration basic gist rerere enabled record conflict resolved apply solution whenever happens allows merge operation repeat successfully git applies merges deterministic order declaration order order let control maximize chance successful reproducible resolution git additionally autocommit successful rerere solution operation continue without manual intervention case git rerere might lead surprising sometimes broken result conflict resolution main reason enabled default reading rerere documentation experimenting toy repository highly encouraged starting use staging branch gitassembly file set stone change adapt rule whatever make work better adapt rule according branch working remove done also rebase everything mean pushedstate aside still work plain merges rebase cleanup mix two method intervening manually contrast similar tool gitassembler stateless care get current repository state branch layout defined gitassembler make sense work
13,Lobsters,vcs,Git & VCS,Building Subversion,https://corecursive.com/054-software-that-doesnt-suck/,building subversion,episode cv software equivalent telephone book sorted telephone number cv backward would look like right,software tool get way episode jim discus build great developer tool started worst software use every day transcriptthis machinetranslated transcript podcast page episode hereintroductionjim basically coworker mine said cv repository indexed backward cv software equivalent telephone book sorted telephone number funny lunch comment right basically thinking know dish every night thing accept something like say well wait second cv backward would look like right adam welcome corecursive adam gordon bell today topic would look like cv backward cv source control management tool think early gitjim blandy guest brings u story making cv better would guess number feature current source control tool probably use every day influenced jim work also think interesting insight build great developer tool also recognize improvement existing tool topple current market leader something done twicewe started story year year mosaic web browser came know email around time web fairly young cv popular opensource source control system network transparent cv communejim went trip going go europe japan came back u job apartment friend gotten job friend carl fogel gotten job working university illinois urbana champaign geneediting mode emacs emacs visit file full genetic data emacs bring apply color like select know rectangle stuff like thatbut living illinois lab uiuc living indiana collaborating across net way collaborated across net shipped people patch emailed people patch ftp source network transparent version control thing old friend college gone work silicon valley startup except want live silicon valley want live commune hill virginia ran frame relay line commune know rural telephone access right commune everybody else making hammock nut butter hacking code silicon valley income probably significant portion whole commune income realized kind lousy collaboration distance name jim kingdon amazing hacker sort disappeared world know amazingly talented took cv version control system like said designed situation lot people using computer right cv repository one part file system shared user people checking copy tree home directory making local change update commits right activity one machine one local file system people would share computer back jim kingdon took cv version control system designed work locally basically sheer force intellectual ripped apart client server invented protocol go like protocol even like know minimize round trip time keep latency amazing stuff right program designed network program turned network program used kerberos authentication real network security back used collaboration startup working signus solution silicon valley know amazing thing publish used ithe wrote maybe people company used heard done trying collaborate friend carl illinois wrote said hey know think could get copy code say oh yeah sure one condition ask question basically want get support thing think probably publish first placeadam make sense yeahjim said oh yeah sure fine know give copy sends tarball source immediately asked question like told ask questionscarl started using like amazing right set server machine somewhere checkout get source work locally nobody get way commit poof everybody else seeright whole new world know blown away much better collaborate net using network transparent cv adam since cv gpl jim take improvement release world like forkwaiting table drug testingjim first official cv mainstream cv distribution like oh yeah interesting work know idea going thing everybody nobody like existing code everybody like imaginary code imaginary code always perfect adam yeah like already done use itjim yeah could use want wanted thing know month becomes clear network transparency network transparency basically everybody switching cyclic cv called capitulate say okay guess merge change network transparent cv came know within year opensource world using think kind collaboration happen open source know distributed teamsit people everywhere get volunteer idea coming physical locality took opensource world storm within year pretty much cv standardadam network transparent cv became standard open source corporate world jim got interest contracting work helping people understand use jim one biggest thrill ever got going around different company government group teaching use cvsand got invitation teach day think threeday course goddard space flight center east coast teaching folk satellite development weather analysis remember one day lunch one said know bug cv wonder could help u said sure walked cubicle aes say well okay let let check something check tree cv say well say oh stuff analyzes satellite data satellite image analyze hurricane predict going go something like seeing checkout right cv list file downloads server check like whoa actually helping people stuff know right person trying know track hurricane made thing able really exciting feeling really interested software using get something done able itcyclic softwareadam jim buddy carl let good opportunity go waste start business cyclic software offer support cyclic cv networktransparent source control jim little business failed die first four horrible way business always die paid salary earned back initial investment actually made little bit money beyond customer one client goldman sachs turned goldman sachs using cv internally really liked network transparent cv goldman sachs wanted u port think wanted reserved checkout something like thatand two guy basically grad student age like okay going write contract goldman sachs go consult lawyer stuff like send goldman sachs little contract know full legal department come bear thing everything wrote becomes exhibit big whatever page boilerplate adam faxed lawyer jim well faxed think emailed u maybe snailmailed snailmailed u think day fax would reasonable might fax machineso reading contract get paragraph say contractor agreed submit goldman sachs request drug testing know come carl square could possibly geti mean even drink right moral issue style would completely passed test ever could ever get u take also obnoxious right care go back carl like back room carrying contract say carl want u take drug test carl say oh sign wait table like best write goldman sachs email back say look great ready sign however paragraph got go without comment get back another copy contract goldman sachs paragraph gone sign work hear hacker goldman sachs later people ended work said told u later like nobody ever done nobody ever complained cool yeah kinda nice kind thing two right mean family time employee start worry peopleand like choice something walk away two really nice really whatever please anything want adam let fast forward company success eventually move thing jim joined sigma solution using cv every day start notice certain thing tool like jim actually interesting think repository like get repository something like think database right database put know commits right check tree right one common thing going want version control system gon na say hey version code want pull change happened since please send diffs prior date current dateideally three file touched old date new date get data three file backing database organized way make efficient common thing diff query diff two revisionsthis checkout merge right common operation way cv stored data gigantic directory tree shaped way source managing except fit individual file rcs file held different revision connection set revision stored one file set revision stored another file commit touched two file indication anywhere data two file two commits anything might log message date would samebut indication single atomic commit adam something take granted right atomic commits without atomic commits introduce inconsistency issue especially somebody slow operation like creating branch going file file somebody else pushing change time guaranteed branch get file commit since happening parallel interleaved also case lack structured atomic commit actually made implementation slower jim cv update way cv decided change shipping would scan entire directory tree would open every single file directory tree see whether might changed since date askedand actually update ship server current version file would actually check see whether file version would ship diffs back terrible right supposes got file three changeddo check every one file somebody poll data organized way give sort centralized indication like know changed performance bad sigma solution want cut branch would announce ahead time would schedule branching want anybody else committing branching would totally screw thing right okay friday pm going cut branch activity would stop access server would cut offthey would start branch remember branch requires walking however know hundred thousand file got know sickness gcc gdb canoe assembler canoe linker basically entire new toolchain work know hundred thousand filesand would walk across hundred thousand file make branch every single one would take like know minute cut branch say okay opened branch everybody start working crazy adam seem bit crazy right jim talking cv performance degraded based size repository based size changeset something kind take granted today source control performance related size changeset change one file cheap change file expensive branch changing file free enter rewriteadam jim thinking design better system buddy carl got approached company looking shake corporate development introducing idea open source software development jim around time cathedral bizarre essay written lot company saying wait second internal software development dynamic see going dynamic make work well bring house development jim collabnet interested saw cv knew sucked willing fund writing replacement itand approached carl carl approached know exactly happened anyway ended working carl started carl already started drafting idea replacement cv something friend mine said cv worst piece software use every day interesting sentence got word worst right worst piece software got word every day right like bad using every day answer need badly willing put crap somebody say piece software good target rewriteadam mythical rewrite jim started planning called subversion started talking everyone whole thing predates git mercurial five six year wayjim told sickness people oh yeah think person going able cut branch pretty much instantaneously constant time believe methey said believe see cutting branch nothing creating name particular revision free operation big big deal yeah already started working new design subversion collabnet said great fund get people network stuff adam step missing something like come design like email carl say idea jim yeah design repository basically coworker mine said yeah cv repository indexed backward cv repository software equivalent telephone book sorted telephone number exactly wrong thing funny funny lunch comment right somebody say like oh funny really true thing accept something like say well wait second cv backward would look like right proper organization version control repository basically thinking know dish every night ended coming design actually people come original read thing turn think perforce actually similar repository structure subversion basically idea want share whenever commit right commit change say one two file want recognize directory tree commit directory tree commit almost identical difference two file changed actually want want share much structure two tree possible go ahead represent tree share much structure possible adam sound like persistent data structure jim yeah mean persistence like way functional people use word persistent persistent data structure right adam terminology confusing thinkjim persistent sense saved disk going go away exit program also persistent functional programming sense adam yeah like immutable tree whatever programming language choice make change cause immutable like make copy element need change kind update pointersjim exactly ever heard chris book functional data structure adam seen picture one friend bought said understand itjim bad chris go stuff hard understand get kinda minded blowing think good worthwhile investment lot algorithm play well incremental context right making series small incremental change large data structure way persistent data structure trying really hard share much data possible really work favor building subversionadam idea happens next jim well idea carl started working carl get funding collabnet fantastic suddenly guy web dev expert protocol u ended getting office chicago traveling indiana chicago meet brian fitzpatrick ben collin sussmanand agreed early wanted break nice reusable set library right going want work subversion working directory working directorylibrary access metadata want speak protocol library protocol want know different backends storage interface back end adam design couple working jim yeah five u thinkadam split module like work working directory part jim yeah working server part people took sort command line part somebody took working directory library thing like think think know another kind project much careful drift one person understanding design another person understanding design thing building exist yet case subversion clear goal become properly designed modern cv net transparent cv fact imitating replacing something already existed think created lot clarity people mind think actually project could undertaken lot le coordination would normally need something sizeadam yeah make sense like existence proof something like existing knew well using assume using subversionjim yeah use cv first day started able dog food really great day right celebrating successadam guy like celebrate like distributed jim oh would go chicago great office think called printer row chicago whole bunch old building used full printing press newspaper stuff cage elevator whether could see elevator shaft iron bar cage looked could see gigantic relay controlled elevator relay driven elevator yeah oh partied would drive would drive chicago quite frequently bet whoever wrote first security hole buy everybody else dinner know whether want call celebration know losing bet something like worked year actually found kind exhausting year really wanted go back working gdb think subversion started selfhosting within next year thatadam jim designed new version control system succeeds take world subversion atomic commits free branching performance proportional change size great change quickly replaces cv becoming leaderjim rose height next like within three four year think really nice got recommendation consulting newsletter like gardener group gave u know listed u essential tool best breed something like really funny like know domarketing research idea know want hacker know serious businessy industry newsletter recommending kind ridiculousadam gardner quadrant something probably graphic showed jim yeah exactly good quadrant crazy adam probably somewhere meeting people suit figuring like far left far right jim yeah silly people attention know way work adam within five year started replaced version control system git mercurial although probably people still using subversion right jim really think shouldjim yeah actually somebody come try talk consulting subversion great idea end tried really talk said people developing anymore actively supported bring developer want hire developer work project gon na know everybody know git funny position trying talk somebody using something one original designer yeah think anybody using anymoreadam mean sad jim git mercurial sad know yeah mean nice thing set standard usabilityi think subversion time became popular set standard usability people willing put got started terrible cli mildly horrible cli right option sort ferociously confusing overwhelmingly confusing know think response pressure welldesigned interface like mercurial beautiful cli subversion fine cliso think know could influence lot different way influence outlasts use actual code adam subversion year old year jim want u use influence still question wanted ask jim subversion addressing shortcoming cv shortcoming subversion git helped address subversion problemsjim know git us content hash identify file content identify directory contentsand beautiful model hash really essential distributed nature git mean basically got data matter got data everybody tell got branch need sent data anymore somebody suggested subversion actually assigning fresh number node created somebody basically said well know using content hash worst decision ever made think term impact said rename modify file rename way tell old version file new version file related kind vindication cite even git really know sort look file say yeah look close seems right basically give cheesy parameter say hard try look themand kluge reconstructs post facto like know even know anything happened sort guess must rename even total kluge mergeadam know started using git people talking distributed case guess happen big thing seemed different like merging like free sudden like merging branching like guy answer think like like right seem like reason distributed mixed merging better except dojim kind sad story great thing merging git pick example mercurial great thing merging git like merge merge say right say parent parent new chainset got parent right restriction merge mean mistake made subversion thought merges actually mean something textually right actually way say reconciliation change change think really overthought lot need good textual merge tool use whatever heuristic want whatever heuristic work well project shelf merger great job case want specialized tool drop whatever want say okay end story adam interesting like almost problem decide take kind define thing get punted like let worry jim absolutely building tool jobadam better merging branch git distributed content hash better merging really big difference subversion huge time though imagine developer behind tool developer using many time day must like celebrity jim said like thoughjim although remember one time moved another company using subversion hold copy entire neutral chain gcc gdb bfd linker assembler forth think also copy c library large repository used every day fine founder company said one day know know jim subversion suck said hope understand way mean said oh definitely get mean thank much proud adam greatest compliment jim really though want somebody say used stuff every day okay likeadam want want jim oh know everybody want get five star everything like mean anything actually five star right like go bike shop trading bike treat decently right gave five star wanted transaction like skipping home right transaction right think lot software right get help get work done heritage help get day adam especially developer tool right tool like definition tool like want hammer something crazy want hammerjim want maximize engagement hammer right stupid want maximize engagement version control system want job get way basically somebody say know suck actually pretty much exactly right thingadam right jim first threetime guest writer software suck thing jim story stick beside guy commune know making nut butter also building distributed software thing stick jim question worst software use every day also idea software tool get way interesting nobody ever say right everybody want change world like try build thing suck liked episode like podcast know tell coworkers really know podcasts spread people say word mouth know tell friend tell open podcast app search corecursive search adam gordon bell hit subscribe next time thank much listening
14,Lobsters,vcs,Git & VCS,"ydiff: side-by-side, character-level diffs in the terminal",https://github.com/joshuarli/ydiff#joshuarlis-ydiff-fork,ydiff sidebyside characterlevel diffs terminal,joshuarli ydiff fork ydiff screenshots performance installation,joshuarli ydiff fork ydiff distilled core heavily modified stripped specific feature subset assumes read git unified diffs stdin sidebyside rendering modified visually le noisy screenshots look like compared automatic width detection failed lol performance definitely smart enough port performant language made quite fast git log patch pv tmpsentrygitlog rwr r josh josh jun tmpsentrygitlog ymattwydiffpy wrap sidebyside coloralways pagercat tmpsentrygitlog pv devnull ydiff tmpsentrygitlog pv devnull also optimized build relatively clean cython binary run bit faster importantly faster start ydiffbin tmpsentrygitlog pv devnull hyperfine warmup ydiff devnull benchmark ydiff devnull time mean σ m m user m system m range min max m m run hyperfine warmup ydiffbin devnull benchmark ydiffbin devnull time mean σ m m user m system m range min max m m run installation download anywhere path set following git config git config global pagerdiff ydiff le git config global pagershow ydiff le git config global pagerlog le git config global colordiff never also recommend setting lessfsxr le use flag default could alternatively put git config optionally c compiler compile cython binary make ydiffbin
16,Lobsters,vcs,Git & VCS,Better git diff outputs with git submodules,https://www.jvt.me/posts/2018/05/04/git-submodule-diff-formats/,better git diff output git submodules,git submodules stack overflow format format format,recently playing around git submodules little bit frustrated output git diffs diff git avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog index avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog subproject commit subproject commit trying write commit message via viewing diff writing commits git commit verbose found nothing really useful diff describe writing commit gain understanding happened submodule run git log oneline centrealign site subtitle make site subtitle bold would added commit message theme subtitle change centrealign site subtitle make site subtitle bold however getting annoyed discovered option thanks stack overflow make much easier view change withdiff formatperhaps useful option actual diff change within submodule submodule vendorgitstartbootstrapcleanblog diff git avendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss bvendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss index avendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss bvendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss headermasthead margintop subheading textalign center fontsize fontweight fontweight bold lineheight display block margin set default running either git config global diffsubmodule diff git config global e adding short formatshort simply show commit beginning end stage diff git avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog index avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog subproject commit subproject commit git default always setting run either git config global diffsubmodule short git config global e adding log formatalternatively get log format nice putting changelogcommit message submodule vendorgitstartbootstrapcleanblog centrealign site subtitle make site subtitle bold set default running either git config global diffsubmodule log git config global e adding
17,Lobsters,vcs,Git & VCS,Did Github Change Their Repo Interface?,https://github.com/awesome-selfhosted/awesome-selfhosted,github change repo interface,awesomeselfhosted saass free network service web application nonfree contributing analytics personal dashboard ackee demo source code awstats source code countly source code druid source code fathom analytics freshlytics goaccess source code goatcounter source code hastic source code kiss source code koko analytics source code matomo source code offen demo source code open web analytics source code posthog source code rakam source code rudder source code serposcope source code shynet snowplow source code chartbrew demo source code metabase source code redash demo source code superset source code archiving digital preservation dp content management system access memory atom demo source code archivematica demo source code archivebox source code archivesspace demo source code collective access providence source code ckan source code automation internet thing iot accelerated text activeworkflow alltube youtubedl website source code amiunique source code beehive betanin couchpotato source code episode source code feedmixer demo gekko source code headphone healthchecks source code homebankconverter demo huginn kibitzr source code lazylibrarian leon demo source code lidarr source code medusa source code nefarious pyload source code radarr source code sickrage source code sonarr source code triggerhappy source code demo youtubedlmaterial zenbot zeroqueue blogging platform static site generator content management system weblogmatrix antville source code blog demo source code bludit demo source code cadmus canvas source code chyrp lite source code dante story source code dotclear source code formtools source code ghost source code hexo source code hotglue demo source code htmly demo source code known source code plume source code pluxml source code postleaf source code bookmark link sharing dyubookmarks demo espial firefox account server source code firefox sync server geekmarks source code golinks demo linkding demo lobster source code fuss bookmark source code pinry source code reminiscence shaarli demo shiori unmark ubookmark demo source code xbrowsersync source code ymarks calendaring contact management groupware http enwikipediaorgwikicomparisonofcaldavandcarddavimplementations baïkal source code calendarserver source code calypso source code davical source code davis decsync cc source code etesync server source code radicale source code sabredav source code xandikos source code agendav source code infcloud demo source code etesync web demo source code communication system custom communication system centrifugo demo cherry darkwireio source code freenet source code friend source code gnunet source code gotify source code client hawkpost source code jami source code jitsi meet source code jitsi video bridge source code kandan source code kchat leapchat letschat source code librenews source code live helper chat source code mattermost source code miaou source code mibew demo source code mumble source code client nodechat ots source code pushbits rallly source code retroshare source code rocketchat source code shhh spectrum source code spreed source code synapse matrix source code matrix console web source code element source code syndie textbelt tox source code tuber source code wbo demo zeronet source code zulip source code email complete solution dockermailserver excision mail source code inboxen source code homebox iredmail source code mailcow source code mailu demo source code mailinabox source code modoboa source code qmailtoaster source code simplelogin source code simple nixos mailserver wildduck source code mail transfer agent chasquid source code courier mta source code exim source code haraka source code mailcatcher source code maildrop mailhog opensmtpd source code postfix qmail source code sendmail slimta source code mail delivery agent cyrus source code dovecot source code piler source code mailing list newsletter dada mail source code listmonk source code mail good mailman mailtrain source code mailyherald source code mautic source code phplist source code postal schleuder source code sympa webmail client irc irc convos demo source code inspircd source code dispatch demo kiwi irc demo source code ngircd source code lounge demo source code quassel irc source code robust irc source code tiny tiny irc source code weechat znc source code sip sip ipbx asterisk astpp source code freepbx source code freeswitch source code fusionpbx source code homer source code kamailio source code kazoo source code ostel routr demo source code sipxcom source code demo source code wazo source code social network forum abilian sbe anahita source code bbpress source code bootcamp source code buddycloud source code buddypress source code cartulary commento coral source code diaspora demo source code discourse demo source code dyucomments demo epochtalk elgg source code flarum source code flaskbb source code fluxbb source code friendica source code glosa gnu social source code gosora source code hubzilla source code humhub source code isso source code lemmy source code loomio source code mastodon source code misago source code misskey source code movim source code mybb source code nodebb source code orange forum source code ossn source code oxwall source code patchwork phpbb source code pixelfed source code pleroma source code ppnet pumpio source code demo source code satellity source code scoold demo source code simple machine forum source code socialhome demo source code talkyard demo source code tokumei source code thredded demo source code twister source code twtxtnet source code demo vanilla forum source code zusam demo source code xmpp extensible messaging presence protocol xmpp server ejabberd source code kontalk source code metronome im source code mongooseim source code openfire source code prosody im source code tigase xmpp web client candy source code conversejs source code jsxc source code salut à toi source code conference management bigbluebutton demo source code conference organizing distribution cod source code frab source code indico demo source code open conference system ocs demo source code opencfp openconferenceware source code osem demo source code pretalx source code content management system cm blogging platform static site generator alfresco community edition source code apostrophe demo source code cm demo source code backdrop cm source code bigtree cm source code bolt cm demo source code cm made simple source code cockpit source code concrete cm source code contao source code couchcms source code directus source code drupal source code elabftw demo source code expressa getsimple cm source code impresspages cm demo source code joomla source code keystonejs demo source code modx source code neos source code noosfero october source code omeka demo source code pagekit source code pico source code pimcore source code plone source code processwire source code propertywebbuilder demo source code publify source code redaxo source code redaxscript demo source code roadiz source code silverstripe demo source code spip source code squidex demo source code strapi source code subrion demo source code textpattern demo source code typemill source code source code umbraco source code wagtail source code wondercms demo source code wordpress source code writefreely source code openeats demo recipe ecommerce attendize source code bagisto demo source code coreshop source code drupal commerce source code magento demo source code microweber demo source code openbazaar source code opencart source code open classified source code open source po source code oxid eshop demo source code open food network source code prestashop demo source code pretix source code reaction commerce source code saleor demo source code sharetribe source code shuup source code shopware community edition demo source code spree commerce demo source code sylius demo source code thelia demo source code woocommerce source code dns http dns document management casebox source code docat docspell source code edpaper everydocs mayan edms source code papermerge source code paperless teedy source code ebooks integrated library system il content management system archiving digital preservation calibre demo source code bicbucstriim source code calibre web cop demo source code epube source code komga source code mango evergreen source code koha demo source code rero il demo source code dspace source code eprints demo source code fedora common repository source code islandora source code samvera hyrax source code federated identityauthentication http identitymanagement feed reader commafeed source code feedbin source code feedhq source code freshrss demo source code client jarr demo source code kris feed demo source code leed source code leselys litereader demo moonmoon source code miniflux source code newsblur source code newsdash newspipe demo reader readerself source code r monster selfoss source code sismics reader demo source code stringer temboz tiny tiny r demo source code wind demo source code fulltext r source code politepol demo r fulltext proxy r merger rssbridge screaming liquid tiger file sharing synchronization groupware distributed filesystems http distributedfilesystems file transfersynchronization git annex source code kinto source code mydrive demo nextcloud demo source code opensshsftp source code owncloud source code client pydio source code samba source code seafile source code sparkleshare source code syncany syncthing source code unison zpush activesync source code peertopeer filesharing bittorrenttracker source code cloudtorrent dat project source code filepizza source code firefox send instantio demo magnetico magnetissimo opentracker source code peerflixserver qbittorrent source code rartracker torrentscsv transmission source code object storagefile server minio source code zenko cloudserver source code singleclickdragndrop upload bozon coquelicot source code droppy elixire source code client fibridge demo fileshelter demo file sharing goploader source code imgpush ipfspics jirafeau demo linxserver demo lufi demo source code lutim onionshare pictshare source code plik demo pomf projectsend source code psitransfer share sharry uguu source code upste source code xbackbone youtransfer demo source code beauty transfersh source code web based file manager apaxy source code directorylister source code encode explorer demo source code explorer source code filestash demo source code gobrowser gossa demo source code ifm resourcespace demo source code sprutio demo source code surfer tagspaces demo source code game dark room demo agario clone battlecraft elevatorsaga source code hextris demo legend green dragon demo lila source code mindustry source code minetest source code source code client nodevirtualgamepads posio piqueserver client quakejs quizmaster rconcli sourcebans source code teeworlds source code tournamentmango gateway terminal sharing asciinema demo gateone source code guacamole source code neko oneye demo source code osjs demo source code tmate source code groupware bluemind source code citadel source code corteza demo source code cozy cloud source code egroupware source code espocrm demo source code horde demo source code kolab source code kopano demo source code openmeetings source code sogo demo source code suitecrm source code tine demo source code zimbra collaboration source code human resource management hrm admidio demo source code icehrm demo source code orangehrm source code sentrifugo source code timeoffmanagement demo source code internet thing iot devicehive demo source code domoticz source code client fhem source code gladys source code home assistant demo source code mozilla gateway source code node red source code openhab source code thingsboard demo source code thingspeak demo source code knowledge management tool mindmaps demo mind demo tagtool demo source code weaviate demo learning course canvas lm demo source code chamilo lm source code edx source code ilias demo source code mahara source code moodle demo source code open eclass demo source code openolat demo source code relate source code rosariosis demo source code sakai demo source code map global positioning system gps awesomegis graphhopper source code hauk demo mapbbcodeshare demo open source routing machine osrm demo source code nominatim source code opengts demo source code openstreetmap source code client opentripplanner source code orion demo owntracks recorder owntracks tileserver gl source code tileserver php traccar demo source code μlogger demo umap source code medium streaming http enwikipediaorgwikilistofstreamingmediasystems http enwikipediaorgwikicomparisonofstreamingmediasystems multimedia streaming darwin streaming server source code gerbera source code homehost icecast source code client jellyfin demo source code karaoke forever source code mistserver source code readymedia source code rygel source code üwave demo source code audio streaming ampache demo source code airsonic source code client azuracast source code audioserve beet source code black candy compactd friendsradio demo funkwhale demo source code gnu fm source code gonic groove basin koel source code koozic demo source code libretime airtime source code lm demo moode audio source code mopidy source code moped mopidy musicbox mopidyparty mpd source code client ympd source code mstream source code musikcube source code navidrome music streamer demo source code client polaris snapcast sonerezh demo source code stretto demo client volumio source code video streaming bluecherry source code crtmpserver cytube demo hellowlol htpc manager fork invidious demo myflix oddworks open streaming platform source code peertube source code rapidbay restreamer source code shinobice streama synctube demo tube demo source code videolan client vlc source code zoneminder source code miscother alerthub anchr source code anuko demo source code asciiflow source code blynk source code cachet demo source code cstate demo cup source code cyberchef demo digitalcurrency demo domainmod demo source code flox demo formspree demo source code geneweb demo source code graphvl secure password demo googlewebfontshelper demo ytdlwebserver journal kimai demo source code king phisher mailygo monica source code musical artifact source code nnmm notica source code ombi demo source code otranscribe source code passcheck source code reactive resume demo source code releasebell source code revealjs demo source code revive adserver source code sane network scanning source code teslamate trello burndown vimbadmin demo source code web font repository webtrees demo source code money budgeting management http itassetmanagement akaunting source code btcpay server demo source code boodle budget app dot ledger demo source code economizzer demo source code exmoney firefly iii demo source code family accounting tool fava demo source code galette source code grr source code hospital run demo source code inventaire source code invoice ninja demo source code invoiceplane ihatemoney demo source code kresus demo source code ontrack partkeepr demo source code silverstrike demo source code stockazng monitoring http monitoring http metric metriccollection notetaking editor wikis bulletnotes source code boostnote source code codimd source code dailynotes dillinger source code dnote source code docpht demo source code drawio source code joplin source code leanote demo source code markdown edit source code meemo source code minimalistwebnotepad mininote opennote demo overleaf source code paperwork source code plainpad demo source code savepad standard note demo source code turndown source code trilium note turtl source code wreeto source code writing source code office suite collabora online development edition source code cryptpad source code ethercalc source code etherpad demo source code infinoted gobby source code onlyoffice source code phpoffice webodf source code password manager bitwarden source code bitwardenrs keeweb source code padloc source code passbolt source code passit demo source code passwall psono demo source code shaark syspass demo source code teampass source code pastebins bepasty source code bin cryptonote source code edpaste fiche demo filite demo fugacious source code gist demo hastebin demo source code mojopaste demo source code notehub paste source code pastebin demo pastebin pb privatebin demo source code purritobin demo sharppaste snibox demo source code snipt socksbin demo stikked demo personal dashboard monitoring baby buddy demo dashmachine habitica source code heimdall source code hiccup source code homepage homer organizr personal management system demo simpledash demo tipboard source code wger demo source code photo video gallery chevereto free source code coppermine demo source code cumulusclips demo fussel gallery cs source code lychee source code mediagoblin source code ownphotos photato photofloat demo photolight photonix demo source code photoprism source code photo stream demo photoview demo pigallery demo source code piwigo demo source code plumi source code quru image server demo source code sigal ubergallery source code zenphoto source code poll event calagator source code clerk dudle demo source code feedka demo fider demo source code framadate demo source code hitobito demo source code jd esurvey source code kyélà demo source code limesurvey demo source code meetable demo source code open event server phpback demo source code booking scheduling alfio demo source code booked demo source code easy appointment demo source code proxy imgproxy inlet iodine source code microproxy miniproxy source code nginx proxy manager source code phpproxy demo source code pomerium source code pound privoxy redbird sish squid source code swiperproxy source code tinyproxy source code traefik source code read later list nunux keeper source code wallabag demo source code resource planning farmos source code grocy demo source code tania enterprise resource planning erpnext demo source code ledgersmb demo source code odoo demo source code ofbiz source code tryton demo source code search engine software development project management ticketing task managementtodo list awesomesysadmincode review bonobo git server source code fossil goodwork demo gitblit source code gitbucket source code gitea demo source code gitlab demo source code gitlist source code gitolite source code gitprep demo source code git webui gogs demo source code kallithea source code klaus lavagna source code lazylead source code leantime source code octobox source code openproject source code pagure demo phabricator demo source code phproject demo source code projeqtor demo source code backlog demo redmine demo source code rhodecode demo source code scm manager source code sorcia source code taiga source code titra demo source code trac tuleap source code uvdesk demo source code zentao demo source code bug tracker ticketing idetools atheos source code babelfish codeserver source code eclipse che source code gitpod demo source code hakatime httplaceholder icecoder demo source code j bin source code api source code koding source code ml workspace regexr source code requestbin rstudio server source code sourcegraph source code wakapi continuous integration awesomesysadmincontinuous integration continuous deployment ux testing uier selenoid source code faasserverless serverless computing wikipedia appwrite source code fx ironfunctions ironio localstack source code openfaas source code trustedcgi api management dreamfactory source code fusio demo source code hapttic hasura source code kong source code krakend source code para source code postwoman demo source code tyk source code documentation generator static site generator docstore source code flatdoc markdowntree read doc demo source code localization accent source code pootle source code traduora source code weblate demo source code zanata source code static site generator http staticsitegeneratorsnet http wwwstaticgencom task managementtodo list project management ticketing kanbana kanboard source code mytinytodo demo source code nullboard demo php tasktodo list planka demo source code restyaboard demo source code task keeper taskboard demo source code taskfreak task task taskwarrior source code tinyissue todo demo todomini demo source code track getting thing source code vikunja demo source code volition wekan demo source code ticketing task managementtodo list project management bugzilla bumpy booby source code cerb source code diamantedesk demo source code djangotodo source code flyspray source code freescout helpy demo source code huboard mantisbt demo source code opensupports demo source code osticket source code otrs source code request tracker source code sentry onpremise source code sit source code thebuggenie source code zammad source code url shortener shortcoming gshort demo kutt source code linkshortenerbot demo liteshort demo lstu polr source code reducio reducepy schort demo shlink source code client shorturl demo simpleurlshortener demo simply shorten urlshortener urlshortener demo yourls source code vpn http vpn web server http web wikis documentation generator wikimatrix wiki engine wikiindex list wiki software wikipedia comparison wiki software wikipedia bookstack demo source code cowyo demo djangowiki demo documize source code dokuwiki source code gitit gollum jingo mediawiki demo source code moinmoin source code outline source code pepperminty wiki demo pinedocs pmwiki raneto tiddlywiki source code tiki demo source code twiki demo source code wiki demo wikijs demo wikiss source code xwiki demo source code zim source code selfhosting solution ansiblenas charjabox cloud computer source code dietpi source code dockstarter source code dplatform source code flap source code freedombone source code freedombox freenas source code homelabos source code nextcloudpi source code openmediavault source code piratebox sandstorm demo source code sovereign syncloud source code ubos wikisuite source code yunohost demo source code list license external link contributing githubcontributingmd author authorsmd license creative common attributionsharealike unported,awesomeselfhosted selfhosting practice locally hosting managing application instead renting saass provider list free software network service web application hosted locally nonfree software listed nonfree page see contributing analytics personal analyticsdashboards see personal dashboard back top web analytics ackee selfhosted analytics tool care privacy demo source code mit nodejs awstats generates web streaming ftp mail server statistic graphically source code perl countly real time mobile web analytics crash reporting push notification platform source code javascript druid distributed columnoriented realtime analytics data store source code java fathom analytics simple trustworthy website analytics mit go freshlytics privacy respecting cookie free low resource usage analytics platform mit dockernodejs goaccess realtime web log analyzer interactive viewer run terminal source code c goatcounter easy web statistic tracking personal data source code go hastic hackable time series pattern recognition tool ui grafana source code pythonnodejs kiss minimalistic kiss website statistic tool source code mit go koko analytics privacyfriendly open source analytics plugin wordpress source code php matomo leading opensource analytics platform give powerful analytics formerly known piwik source code php offen offen fair open web analytics tool gain insight user full access data lightweight self hosted free demo source code godocker open web analytics google analytics matomo alternative source code php posthog open source product analytics mixpanelamplitudeheap alternative source code mit python rakam custom analytics platform allows create analytics service integrate data source web mobile iot etc analyze data sql create dashboard source code java rudder customer data infrastructure software collecting storing processing routing event data apps website dozen marketing tool analytics platform opensource alternative segment et al source code go serposcope serposcope free opensource rank tracker monitor website ranking google improve seo performance source code mit java shynet modern privacyfriendly detailed web analytics work without cooky j python snowplow every single event website mobile apps desktop application serverside system stored data warehouse available action realtime source code scala business intelligence chartbrew open platform visualise product data connects db mysql postgresql mongodb apis directly get data using builtin query builder demo source code mit nodejs metabase simple dashboarding gui query tool nightly email slack integration w postgresql mysql redshift db source code clojure redash connect type database sql nosql query data visualize create dashboard everything url shared slack hipchat integration demo source code python superset modern enterpriseready business intelligence web application source code python social medium archiving digital preservation dp back top content management system solution also feature archiving digital preservation access memory atom webbased open source application standardsbased archival description access multilingual multirepository environment demo source code php archivematica mature digital preservation system designed maintain standardsbased longterm access collection digital object demo source code python archivebox selfhosted wayback machine creates html screenshot archive site bookmark browsing history r feed source source code mit python archivesspace archive information management application managing providing web access archive manuscript digital object demo source code ruby collective access providence highly configurable webbased framework management description discovery digital physical collection supporting variety metadata standard data type medium format source code php ckan ckan tool making open data website source code python automation back top see also internet thing iot accelerated text automatically generate multiple natural language description data varying wording structure clojure activeworkflow intelligent process workflow automation platform based software agent mit ruby alltube web interface youtubedl program download video audio website source code php amiunique learn identifiable internet browser fingerprinting tool source code mit java beehive flexible event agent system allows create agent perform automated task triggered event filter go betanin music organization maninthemiddle torrent client music player based beetsio similar sonarr radarr python couchpotato couchpotato automatic video library manager movie automatic torrentnzb searching downloading processing quality want source code python episode self hosted tv show episode tracker recommender built using django mit python par r feed extract last entry sends mastodon source code python feedmixer feedmixer wsgi micro web service take list feed url return new feed consisting recent n entry given feed return atom r json demo wtfpl python gekko gekko bitcoin ta trading backtesting bot support multiple exchange cryptocurrencies source code mit nodejs headphone automated music downloader nzb torrent written python support sabnzbd nzbget transmission µtorrent deluge blackhole python healthchecks django app listens ping sends alert ping late source code python homebankconverter web app convert export bank file compatible homebank csv demo draganddrop file conversion server session based authentication automatic temporary file maintenance logging capability php huginn allows build agent monitor act behalf mit ruby kibitzr lightweight personal web assistant powerful integration source code mit python lazylibrarian lazylibrarian program follow author grab metadata digital reading need us combination goodreads librarything optionally googlebooks source author info book info python leon opensource personal assistant live server demo source code mit nodejs lidarr lidarr music collection manager usenet bittorrent user source code c medusa automatic video library manager tv show watch new episode favorite show posted magic python free node based workflow automation tool easily automate task across different service source code nodejs nefarious web application automates downloading movie tv show python pyload lightweight customizable remotely manageable downloader site like rapidsharecom uploadedto source code python radarr radarr independent fork sonarr reworked automatically downloading movie via usenet bittorrent à la couchpotato source code c sickrage sickrage automatic video library manager tv show automatic torrentnzb searching downloading processing quality want source code python sonarr automatic tv show downloader manager usenet bittorrent grab sort rename new episode automatically upgrade quality file already downloaded better quality format becomes available source code c triggerhappy open source clone ifttt bridge internet service source code python interface interact downloader simple use download open indexhtml web browser demo mit youtubedlmaterial material design inspired youtube downloader based youtubedl support playlist quality select search dark mode much clean modern design mit nodejs zenbot zenbot lightweight extendable artificially intelligent trading bot bitcoin ether litecoin mit nodejs zeroqueue lowcode queue management system let run scheduled job anything nodejs blogging platform back top see also static site generator content management system weblogmatrix antville free open source project aimed development high performance feature rich weblog hosting software source code javascript blog facebookstyled blog free extremely lightweight singleuser easy install demo php blogotext free blogengine written php using sqlite offer unmatched simplicity installation great performance source code mit php bludit simple application build site blog second bludit us flatfiles text file json format store post page demo source code mit php cadmus cadmus extremely lightweight flatfile blogging platform powered markdown mit php canvas laravel publishing platform source code mit php chyrp lite extraawesome extralightweight blog engine source code php dante story self hosted medium platform built ruby rail source code mit ruby dotclear take control blog source code php formtools powerful flexible free open source phpmysql script manage form data source code php ghost blogging platform source code mit nodejs hexo fast simple powerful blog framework powered nodejs source code mit nodejs hotglue freehand cm allows construct website directly webbrowser us flat file storage provides intuitive gui demo source code php htmly databaseless blogging platform flatfile blog demo source code php known single website content source code php plume federated blogging engine based activitypub source code rust pluxml xmlbased blogcms platform source code php postleaf open source blogging platform inline editing handlebar template beautiful user interface source code mit nodejs bookmark link sharing back top dyubookmarks singlethreadedprocess bookmark app powered leveldb uwebsockets support importing delicious chrome demo java espial opensource webbased bookmarking server haskell firefox account server monorepo firefox account formerly separated auth content source code nodejs java firefox sync server sync firefox bookmark password history tab preference python geekmarks personal bookmarking service focused speed organization using hierarchical tag source code go golinks web application allows create smart bookmark command alias pointing web browser default search engine running instance similar yubnub demo mit go linkding minimal bookmark management fast clean ui simple installation docker run raspberry pi demo mit dockerpythonnodejs lobster run link aggregation site source code ruby fuss bookmark simple software service store bookmark especially designed hacker nt need fancy interface nice api source code python pinry tiling image board system people want save tag share image video webpage source code python reminiscence selfhosted bookmark archive manager python shaarli personal minimalist superfast nodatabase bookmarking link sharing platform demo zlib php shiori simple bookmark manager built go mit go unmark open source app link mit php ubookmark ldap enabled bookmarking service demo source code python xbrowsersync open source tool syncing browser data browser device source code mit nodejs ymarks keep browser bookmark synchronized without limiting one provider wtfpl c calendaring contact management back top groupware solution also feature calendaraddress book editing synchronization see http enwikipediaorgwikicomparisonofcaldavandcarddavimplementations caldav carddav server baïkal lightweight caldav carddav server based sabredav source code php calendarserver apple inc standardscompliant server implementing caldav carddav protocol shipped macos server source code python calypso pythonbased caldav carddav server forked radicale source code python davical server calendar sharing caldav us postgresql database data store source code php davis simple dockerizable fully translatable admin interface sabredav based symfony bootstrap largely inspired baïkal mit php decsync cc serverless contact calendar synchronization using file syncing method ie syncthing nextcloud etc source code kotlin etesync server endtoend encrypted journaled personal information server supporting calendar contact data offering client source code pythondjango radicale simple calendar contact server extremely low administrative overhead source code python sabredav open source carddav caldav webdav framework server source code mit php xandikos open source carddav caldav server minimal administrative overhead backed git repository source code python caldav carddav webbased client agendav multilanguage caldav web client rich ajax interface shared calendar support source code php infcloud open source caldavcarddav web client implementation demo source code javascript etesync web etesync official webbased client ie web app demo source code typescript communication system back top custom communication system centrifugo languageagnostic realtime messaging websocket sockjs server demo mit go cherry tiny webchat server go darkwireio endtoend encrypted instant web chat source code mit nodejs freenet anonymously share file browse publish freesites web site accessible freenet chat forum source code java friend chat powered web source code mit nodejs gnunet free software framework decentralized peertopeer networking source code c gotify selfhosted notification server android cli client similar pushbullet source code client mit go hawkpost hawkpost web app let create unique link share person desire send important information nt know encrypt message encrypted browser sent email address source code mit python jami free universal communication platform preserve user privacy freedom formerly gnu ring source code c jitsi meet jitsi meet opensource mit webrtc javascript application us jitsi videobridge provide high quality scalable video conference source code mit javascript jitsi video bridge webrtc compatible selective forwarding unit sfu allows multiuser video communication source code java kandan kandan open source alternative hipchat source code ruby kchat php based live chat application php leapchat ephemeral encrypted inbrowser chat room javascript letschat self hosted chat suite written node source code mit nodejs librenews decentralized secure breaking news notification system source code python live helper chat live support chat website source code php mattermost opensource onprem slackalternative integrated gitlab source code go miaou multiroom persistent chat server source code mit nodejs mibew mibew messenger opensource live support application written php mysql enables oneonone chat assistance realtime directly website demo source code php mumble lowlatency high quality voicetext chat software source code client c nodechat notsobasic opensource chat admin feature mit nodejs ots onetimesecret sharing platform symmetric aes encryption browser source code go pushbits selfhosted notification server relaying push notification via matrix similar pushbullet gotify isc go rallly rallly free collaborative scheduling service source code nodejs retroshare secured decentralized communication system offer decentralized chat forum messaging file transfer source code с rocketchat teamchat solution similar gitterim slack source code mit nodejs shhh keep secret email chat log share using secure link passphrase expiration date mit python spectrum spectrum open source instant messaging transport allows user chat together even using different im network source code c spreed webrtc audiovideo call conferencing server web client source code go synapse server matrix open standard decentralized persistent communication source code python matrix console web web client meant showcase matrix capability reference implementation matrix standard source code javascript element fullyfeatured matrix client web io android source code javascript syndie syndie libre system operating distributed forum java textbelt outgoing sm api us carrierspecific gateway deliver text message free without ad mit javascript tox distributed secure messenger audio video chat capability source code c tuber peertopeer video chat work source code mit javascript wbo web whiteboard collaborate realtime schema drawing note demo nodejsdocker zeronet open free uncensorable website using bitcoin cryptography bittorrent network source code python zulip zulip powerful open source group chat application source code python email back top complete solution simple deployment mail server eg inexperienced impatient admins dockermailserver fullstack simple mail server smtp imap antispam antivirus etc configuration file sql database keep simple versioned easy deploy upgrade mit docker excision mail fullstack security focused mailserver based opensmtpd openbsd using ansible source code isc shellansible inboxen inboxen service provides infinite number unique inboxes source code python homebox suite ansible script deploy fully functional mail server debian unobtrusive automatic much possible focusing stability security shell iredmail fullfeatured mail server solution based postfix dovecot source code shell mailcow mail server suite based dovecot postfix open source software provides modern web ui administration source code dockerphp mailu mailu simple yet fullfeatured mail server set docker image demo source code mit dockerpython mailinabox turn ubuntu server fully functional mail server one command source code shell modoboa modoboa mail hosting management platform including modern simplified web user interface source code mit python qmailtoaster stable fullfeatured easytoinstall mail server based qmail source code multiple linux simplelogin open source email alias solution protect email address come browser extension mobile apps source code mit dockerpython simple nixos mailserver complete mailserver solution leveraging nix ecosystem nix wildduck scalable nospof mail server source code nodejs mail transfer agent mtas smtp server chasquid smtp email server focus simplicity security ease operation source code go courier mta fast scalable enterprise mailgroupware server providing esmtp imap webmail mailing list basic webbased calendaring scheduling service source code c exim message transfer agent mta developed university cambridge source code c haraka highperformance pluginable smtp server written javascript source code mit javascript mailcatcher ruby gem deploys simply smtp mta gateway accepts mail display web interface useful debugging development source code mit ruby maildrop disposable email smtp server also useful development mit scala mailhog small golang executable run smtp mta gateway accepts mail display web interface useful debugging development mit go opensmtpd secure smtp server implementation openbsd project source code isc c postfix fast easy administer secure sendmail replacement c qmail secure sendmail replacement source code c sendmail message transfer agent mta sendmail c slimta mail transfer library built python source code mit python mail delivery agent mdas software cyrus intended run sealed server normal user permitted log source code c dovecot imap server written primarily security mind source code c piler feature rich open source email archiving solution source code c mailing list newsletter mailing list server mass mailing software one message many recipient dada mail webbased list management system used announcement list andor discussion list source code perl listmonk high performance selfhosted newsletter mailing list manager modern dashboard source code go mail good open source email campaign management tool nonprofit javascript mailman gnu mailing list server python mailtrain self hosted newsletter application built nodejs mysql mariadb source code nodejs mailyherald selfhosted mailchimp alternative easily integrate site help send manage application mailing support email marketing conducting daily stream notification send user source code ruby mautic mautic marketing automation software email social source code php phplist newsletter email marketing advanced management subscriber bounce plugins source code php postal fully featured open source mail delivery platform incoming outgoing email mit ruby schleuder gpgenabled mailing list manager resendingcapabilities source code ruby sympa mailing list manager perl webmail client irc back top irc communication software convos always online web irc client demo source code perl inspircd modular irc server written c linux bsd window macos source code c dispatch selfhosted web irc client written go demo mit go kiwi irc responsive web irc client theming support demo source code nodejs ngircd free portable lightweight internet relay chat server small private network source code c lounge selfhosted web irc client demo source code mit nodejs quassel irc distributed irc client meaning one multiple client attach detach central core source code c robust irc robustirc irc without netsplits distributed irc server based robustsession protocol source code go tiny tiny irc open source ajaxpowered chat platform support irc source code phpjava weechat fast light extensible chat client c znc advanced irc bouncer source code c sip back top sipipbx telephony software asterisk easy use advanced ip pbx system voip gateway conference server c astpp open source voip billing solution freeswitch support prepaid postpaid billing call rating credit control also provides many feature source code php freepbx webbased open source gui control manages asterisk source code php freeswitch scalable open source crossplatform telephony platform source code c fusionpbx open source project provides customizable flexible web interface powerful highly scalable multiplatform voice switch called freeswitch source code php homer troubleshooting monitoring voip call source code angularc kamailio modular sip server registrarproxyrouteretc source code c kazoo kazoo opensource highly scalable software platform designed provide carriergrade voip switch function feature source code erlang ostel secure sip telephony setup zrtp encryption ruby routr lightweight sip proxy location server registrar reliable scalable sip infrastructure demo source code mit javascript sipxcom open source unified communication system source code java voip troubleshooting monitoring platform demo source code kotlin wazo fullfeatured ipbx solution built atop asterisk integrated web administration interface restful api source code python social network forum back top abilian sbe open source collaboration social networking framework platform python anahita open source social networking framework platform source code php bbpress bbpress forum software twist creator wordpress easily setup discussion forum inside wordpressorg powered site source code php bootcamp enterprise social network source code mit python buddycloud tool library service community build usertouser group social messaging app save time scale support source code java buddypress powerful plugin take wordpressorg powered site beyond blog socialnetwork feature like user profile activity stream user group source code php cartulary r reader readability tool article archiver microblogger social graph manager reading list manager php commento commento discussion platform embed blog news article place want reader add comment mit go coral better commenting experience vox medium source code nodejs diaspora distributed social networking server demo source code ruby discourse advanced forum community solution based ruby j demo source code ruby dyucomments realtime markdownenabled comment engine powered leveldb demo java epochtalk next generation forum software mit nodejs elgg powerful open source social networking engine source code php flarum delightfully simple forum flarum nextgeneration forum software make online discussion fun source code mit php flaskbb flaskbb forum software written python using microframework flask easily create new topic post send user private message also includes basic administration moderation tool source code python fluxbb fast light userfriendly forum software website source code php friendica social communication server source code php glosa open source commentary system easy integrate static page import disqus java gnu social social communication software public private communication source code php gosora gosora ultrafast secure forum software written go balance usability functionality source code go hubzilla decentralized identity privacy publishing sharing cloud storage communicationssocial platform source code mit php humhub flexible kit private social network source code php isso lightweight commenting server written python javascript aim dropin replacement disqus source code mit python lemmy link aggregator reddit clone fediverse reddit alternative built rust source code rust loomio loomio collaborative decisionmaking tool make easy anyone participate decision affect source code ruby mastodon federated microblogging server alternative gnu social source code ruby misago misago fully featured modern forum application fast scalable responsive source code python misskey decentralized applike microblogging serversns fediverse using activitypub protocol like gnu social mastodon source code nodejs movim modern federated social network based xmpp fully featured groupchat subscription microblogging source code php mybb free extensible forum software package source code php nodebb nodejs based forum software built modern web source code nodejs orange forum orange forum easy deploy forum minimal dependency us little javascript source code go ossn open source social network ossn social networking software written php allows make social networking website help member build social relationship people share similar professional personal interest source code php oxwall oxwall used wide range project starting family site custom social network collaboration tool enterprise community solution source code php patchwork decentralized messaging sharing app built top secure scuttlebutt ssb nodejs phpbb flatforum bulletin board software solution used stay touch group people power entire website source code php pixelfed pixelfed opensource federated platform alternate instagram source code phphtmlvue pleroma federated microblogging server mastodon gnu social activitypub compatible source code elixir ppnet create host social network mit javascript pumpio stream server people really want social network source code nodejs lightweight simple comment engine nt spy user embedded blog article place reader add comment demo source code mit go satellity yet another open source forum written golang react postgresql source code mit go scoold stack overflow jar enterpriseready q platform fulltext search saml ldap integration social login support demo source code java simple machine forum free professional grade software package allows set online community within minute source code php socialhome federated decentralized profile builder social network engine demo source code python talkyard create community user suggest idea get question answered friendly openended discussion chat slackstackoverflowdiscourseredditdisqus hybrid demo source code scala tokumei anonymous microblogging platform source code isc rc thredded forum featurerich simple demo source code mit ruby twister fully decentralized microblogging platform leveraging free software implementation bitcoin bittorrent protocol source code mit c twtxtnet selfhosted decentralised micrologging platform ad tracking content data source code mit go rssatom feed aggregator commandline tool web service consume rssatom produce twtxtnet feed consumption twtxt client demo mit go vanilla forum simple flexible forum software source code php zusam free opensource way selfhost private forum group friend family demo source code php xmpp back top extensible messaging presence protocol software xmpp server ejabberd xmpp instant messaging server source code erlang kontalk kontalk open source messenger similar whatsapp app android currently including endtoend encryption server based tigase xmpp server source code java metronome im fork prosody im source code mit lua mongooseim mobile messaging platform focus performance scalability source code erlang openfire real time collaboration rtc server source code java prosody im featurerich easy configure xmpp server source code mit lua tigase xmpp server implementation java java xmpp web client candy multi user xmpp client written javascript source code mit javascript conversejs free opensource xmpp chat client browser source code javascript jsxc realtime xmpp web chat application video call file transfer encrypted communication also version nextcloudowncloud sogo source code mit javascript salut à toi multipurpose multi frontend libre decentralized communication tool source code python conference management back top bigbluebutton support realtime sharing audio video slide whiteboard control chat screen instructor engage remote student polling emojis breakout room demo source code java conference organizing distribution cod create conference event website built top drupal source code php frab webbased conference planning management system help collect submission manage talk speaker create schedule source code mit ruby indico featurerich event management system made cern place web born demo source code mit python open conference system ocs free web publishing tool create complete web presence scholarly conference demo source code php opencfp opencfp phpbased conference talk submission system mit php openconferenceware open source web application supporting conferencelike event customizable generalpurpose platform provides proposal session schedule track user profile source code mit ruby osem event management tailored free software conference demo source code mit ruby pretalx webbased event management including running call paper reviewing submission scheduling talk export import various related tool source code python content management system cm back top cm practical way setup website many feature cm often come third party plugins theme functionality easy add customize need see also blogging platform static site generator alfresco community edition open source enterprise content management software handle type content allowing user easily share collaborate content source code java apostrophe nodejs cm focus extensible incontext editing tool demo source code mit nodejs cm integrated cm ever includes everything need build website publishing sharing interacting community demo source code php backdrop cm comprehensive cm small medium sized business nonprofit source code php bigtree cm straightforward well documented capable written php mysql source code php bolt cm open source content management tool strives simple straightforward possible demo source code mit php cm made simple open source content management system faster easier management website content scalable small business large corporation source code php cockpit simple content platform manage structured content source code mit php concrete cm open source content management system source code mit php contao contao powerful open source cm allows create professional website scalable web application source code php couchcms simple opensource cm designer source code php directus directus powerful intuitive headless cm managing sql database custom architecture built around robust extensible api decoupled content management framework perfect website apps multiclient project source code php drupal advanced open source content management platform source code php elabftw online lab notebook research lab store experiment use database find reagent protocol use trusted timestamping legally timestamp experiment export pdf zip archive share demo source code php expressa content management system powering database driven website using json schema provides permission management automatic rest apis mit nodejs getsimple cm simplest content management system ever source code php impresspages cm easy code meet easy admin demo source code php joomla advanced content management system cm source code php keystonejs cm web application platform demo source code mit nodejs modx modx advanced content management publishing platform current version called revolution source code php neos neos neos version modern open source cm source code php noosfero noosfero web platform social solidarity economy network blog eportfolios cm r thematic discussion event agenda collective intelligence solidarity economy system ruby october free opensource selfhosted cm platform source code mit php omeka create complex narrative share rich collection adhering dublin core standard omeka server designed scholar museum library archive enthusiast demo source code php pagekit new modern cm create share source code mit php pico stupidly simple blazing fast flat file cm source code mit php pimcore multichannel experience engagement management platform source code php plone powerful opensource cm system source code python processwire processwire open source content management system cm web application framework aimed need designer developer client source code php propertywebbuilder ultimate ruby rail engine creating real estate website demo source code mit ruby publify simple full featured web publishing software source code mit ruby redaxo simple flexible useful content management system documentation available german source code mit php redaxscript ultra lightweight cm mysql sqlite postgresql demo source code php roadiz modern cm based node system handle many type service source code mit php silverstripe easy use cm powerful mvc framework underlying demo source code php spip publication system internet aimed collaborative work multilingual environment simplicity use web author source code php squidex headless cm based mongodb cqrs event sourcing demo source code mit net strapi advanced opensource content management framework headlesscms build powerful api effort source code mit nodejs subrion subrion free open source content management system allows build website purpose yes blog corporate mega portal demo source code php textpattern flexible elegant easytouse cm demo source code php typemill authorfriendly flatfilecms visual markdown editor based vuejs source code mit php powerful advanced cm large community source code php umbraco friendly cm free open source amazing community source code mit net wagtail django content management system focused flexibility user experience source code python wondercms wondercms smallest flat file cm since demo source code mit php wordpress world mostused blogging cm engine source code php writefreely writing software starting minimalist federated blog entire community source code go recipe management openeats recipe management site allows user create store share rate recipe create grocery list demo mit python recipe recipe django application manage tag search recipe using either built model external storage provider hosting pdf image file mit python ecommerce attendize ticket selling event management platform source code aal php bagisto leading laravel open source ecommerce framework multiinventory source taxation localization dropshipping exciting feature demo source code mit php coreshop coreshop ecommerce plugin pimcore source code php drupal commerce drupal commerce popular ecommerce module drupal cm support dozen payment shipping shopping related module source code php magento leading provider open omnichannel innovation demo source code php microweber drag drop cm online shop demo source code php openbazaar decentralized marketplace using cryptocurrency source code mit go opencart free open source shopping cart solution source code php open classified free opensource selfhosted cm classified site source code php open source po open source point sale web based point sale system source code mit php oxid eshop oxid eshop flexible open source ecommerce software wide range functionality demo source code php open food network online marketplace local food enables network independent online food store connect farmer food hub individual local business source code ruby prestashop prestashop offer free opensource fully scalable ecommerce solution demo source code php pretix django based ticket sale platform event source code python reaction commerce customizable realtime reactive javascript commerce platform source code nodejs saleor django based opensourced ecommerce storefront demo source code python sharetribe open source platform create peertopeer marketplace also available saas model source code mit ruby shuup django powered fully customizable open source ecommerce framework small large site source code python shopware community edition php based open source ecommerce software made germany demo source code mit php spree commerce spree complete modular apidriven open source ecommerce solution ruby rail demo source code ruby sylius powered open source fullstack platform ecommerce demo source code mit php thelia thelia open source flexible ecommerce solution demo source code php woocommerce wordpress based ecommerce solution source code php dns back top see http dns document management back top casebox manage organization information one system source code phpjava docat host doc simple versioned fancy mit pythondocker docspell auotagging document organizer archive source code scalajava edpaper pdf organizer user management mit php everydocs simple document management system private use basic functionality organize document digitally ruby mayan edms free open source electronic document management system electronic vault document preview generation ocr automatic categorization among feature source code python papermerge open source document management system focused scanned document electronic archive feature file browsing similar way dropboxgoogle drive ocr full text search text overlayselection source code python paperless scan index archive paper document python teedy ex sismicsdocs lightweight document management system packed feature expect big expensive solution source code java ebooks integrated library system il back top content management system archiving digital preservation solution also overlap library institutional repository software personal ebook management software calibre ebook library manager view convert catalog ebooks major ebook format provides builtin web server remote client demo source code python bicbucstriim provides webbased access calibre library ebook collection source code mit php calibre web web app providing clean interface browsing reading downloading ebooks using existing calibre database python cop lightweight ebook server alternative calibre content server demo source code php epube selfhosted web epub reader using epubjs bootstrap calibre source code php komga medium server comicsmangasbds api opds support modern web interface exploring library well web reader source code mit javadocker mango manga server web reader builtin mangadex downloader mit crystal enterpriseclass library management software evergreen highlyscalable software library help library patron find library material help library manage catalog circulate material source code plpgsql koha enterpriseclass il module acquisition circulation cataloging label printing offline circulation internet access available much demo source code perl rero il largescale il run service consortial feature intended primarily library network includes standard module circulation acquisition cataloging webbased public professionnal interface demo source code pythonother institutional repository digital library software dspace turnkey repository application providing durable access digital resource source code java eprints digital document management system flexible metadata workflow model primarily aimed academic institution demo source code perl fedora common repository robust modular repository system management dissemination digital content especially suited digital library archive access preservation source code java islandora drupal module browsing managing fedorabased digital repository source code php samvera hyrax frontend samvera framework ruby rail application browsing managing fedorabased digital repository source code ruby federated identityauthentication back top see http identitymanagement feed reader back top commafeed google reader inspired selfhosted r reader source code java feedbin simple fast nice looking r reader source code mit ruby feedhq feedhq webbased feed reader source code python freshrss selfhostable r feed aggregator demo source code client php jarr jarr another r reader webbased news aggregator reader fork newspipe demo source code python kris feed simple smart stupid feed reader demo source code php leed leed light feed free minimalist r aggregator source code php leselys elegant r reader python litereader read feed machine simple lite application demo php moonmoon simple feed aggregator planet like aggregate feed spit one single page source code php miniflux miniflux minimalist open source news reader written go postgresql source code go newsblur newsblur personal news reader brings people together talk world new sound old instrument source code mit python newsdash news dashboard inspired igoogle netvibes nodejs newspipe newspipe web news reader demo python reader python feed reader web app library use build standard library purepython dependency python readerself selfhosted r reader php mysql sqlite google reader alternative source code php r monster r monster easy use webbased r aggregator reader compatible fever api created alternative google reader mit php selfoss new multipurpose r reader live stream mashup aggregation web application source code php sismics reader free open source feed reader including major google reader feature demo source code java stringer workinprogress selfhosted antisocial r reader mit ruby temboz twocolumn feed reader emphasizing filtering capability manage information overload mit python tiny tiny r open source webbased news feed rssatom reader aggregator demo source code php wind open source beautiful r reader built using reactreduxsailsnode stream showcase personalized feed powered stream api demo source code nodejs rssatom automation fulltext r extract article content news site blog convert r feed contain extract story fulltext feed developed fivefiltersorg source code php politepol online tool creation r feed web page demo mit python r fulltext proxy mirror r feed return full content item extracted website mit nodejs r merger php script take multiple r atom feed input merge single r feed php rssbridge rssbridge php project capable generating atom feed website nt one unlicense php fetch rssatomfeeds push new content emailreceiver support opml python screaming liquid tiger simple script automatically generate valid r atom feed list medium file folder mit php file sharing synchronization back top groupware solution also feature file sharing synchronization distributed filesystems back top see http distributedfilesystems file transfersynchronization git annex file synchronization computer server external drive source code haskell kinto kinto minimalist json storage service synchronisation sharing ability source code python mydrive fully featured online storage solution uploaddownload file photovideo viewer web client demo nodejs nextcloud access share file calendar contact mail device term demo source code php opensshsftp secure file transfer program source code c owncloud allinone solution saving synchronizing viewing editing sharing file calendar address book source code client php pydio turn web server powerful file management system alternative mainstream cloud storage provider source code php samba samba standard window interoperability suite program linux unix provides secure stable fast file print service client using smbcifs protocol source code c seafile file hosting sharing solution primary team organization source code c sparkleshare self hosted instant secure file sync source code c syncany secure file sync software arbitrary storage backends opensource cloud storage filesharing application securely synchronize file kind storage java syncthing syncthing open source peertopeer file synchronisation tool source code go unison unison filesynchronization tool osx unix window ocaml zpush implementation microsoft activesync protocol source code php peertopeer filesharing bittorrenttracker simple robust bittorrent tracker client server implementation source code mit nodejs cloudtorrent torrent web client http retrievable streamable downloaded file go dat project powerful decentralized file sharing application built large ecosystem module source code mit nodejs filepizza peertopeer file transfer browser source code nodejs firefox send file sharing experiment allows send encrypted file user nodejs instantio streaming file transfer webtorrent demo mit nodejs magnetico magnetico first autonomous selfhosted bittorrent dht search engine suite designed endusers python magnetissimo search engine index popular torrent site mit elixir opentracker open free bittorrent tracker aim minimal resource usage intended run wlan router source code beerware c peerflixserver downloads torrent file provides direct link download direct link stream mit nodejs qbittorrent free crossplatform bittorrent client feature rich web ui remote access source code c rartracker complete private bittorrent tracker wtfpl php torrentscsv selfhostable torrent search engine rust transmission fast easy free bittorrent client source code c object storagefile server minio minio open source object storage server compatible amazon apis source code go zenko cloudserver zenko cloudserver opensource nodejs implementation server handling amazon protocol source code nodejs singleclickdragndrop upload bozon minimalist drag drop file sharing app php coquelicot coquelicot oneclick file sharing web application focus protecting user privacy source code ruby droppy droppy selfhosted cloud server interface similar desktop file manager capability edit file onthefly well view playback medium directly browser nodejs elixire simple yet advanced screenshot uploading link shortening service source code client python fibridge stream huge file browser without upload demo mit rust fileshelter fileshelter selfhosted software allows easily share file internet demo c file sharing open source selfhosted file sharing application based unique temporary link php goploader easy file sharing serverside encryption curlhttpiewget compliant source code mit go imgpush imgpush selfhosted file upload service easily integrated webapps mit python ipfspics ipfspics distributed image hosting website php jirafeau jirafeau web site permitting upload file simple way give unique link demo php linxserver simple file sharing pastebin api autoexpiry deletion key web seed support demo go lufi let upload file clientside encrypted demo source code perl lutim let upload image perl onionshare securely anonymously share file size python pictshare pictshare multi lingual open source image hosting service simple resizing upload api source code php plik plik scalable friendly temporary file upload system demo mit go pomf simple file uploading sharing source shut site pomfse mit php projectsend upload file assign specific client create give access file client source code php psitransfer simple open source selfhosted file sharing solution robust updownloadresume password protection nodejs share simple yet advanced uploader upload file image text moderation tool admins used friend family integration sharex mit nodejs sharry share file easily internet authenticated anonymous user way resumable downloads scalajava uguu store file deletes x amount time source code mit php clientside encrypted image host mit nodejs upste private file hosting application emphasis serving technology community source code php xbackbone simple fast lightweight file manager instant sharing tool integration like sharex free opensource screenshot utility window php youtransfer youtransfer simple elegant selfhosted file transfer sharing solution demo source code nodejs commandline file upload beauty minimalist file sharing written go used primarily unix shell eg curl built debian package easy install mit go transfersh easy file sharing command line source code mit go web based file manager apaxy theme built enhance experience browsing web directory using modautoindex apache module cs override default style directory listing source code unlicense html directorylister simple php based directory lister list directory subdirectory allows navigate within source code mit php encode explorer encode explorer single page file browser simple functional demo source code mit php explorer highlyconfigurable directory listing made nodejs source code mit nodejs filestash web file manager let manage data anywhere located ftp sftp webdav git minio dropbox google drive demo source code go gobrowser simple http file browser go gossa gossa light simple webserver file mit go modern file indexer http web server focus file directory displayed appealing way browsing enhanced different view breadcrumb tree overview demo source code mit php ifm single script file manager mit php resourcespace resourcespace open source digital asset management software simple fast free way organise digital asset demo source code php simple http interface index browse file public google cloud storage bucket mit go sprutio panel file manager drag drop feature code editor text search hotkeys demo source code python surfer simple static file server webui manage file mit nodejs tagspaces tagspaces offline crossplatform file manager organiser also function note taking app webdav version application installed top webdav server nextcloud owncloud demo source code javascript game back top game game server control panel dark room minimalist text adventure game browser demo agario clone agario clone written socketio canvas mit nodejs battlecraft fully distributed multiplayer browser game erlang elevatorsaga elevator programming game source code mit javascript hextris fast paced puzzle game inspired tetri demo legend green dragon legend green dragon textbased rpg originally developed eric stevens jt traub remake homage classic bb door game legend red dragon seth able robinson demo php lila forever free adless open source chess server powering lichessorg official io android client apps source code scala mindustry factoriolike tower defense game build production chain gather resource build complex facility source code java minetest open source voxel game engine play one many game mod game liking make game play multiplayer server source code c aka allows playing super mario online multiplayer mode official continuation program feature integrated server list source code client mit nodejstypescript nodevirtualgamepads turn smartphone game controller keyboard touchpad remote linux o machine mit nodejscoffescript posio geography multiplayer game mit python piqueserver server openspades firstperson shooter destructible voxel world client pythonc quakejs quakejs port javascript played browser mit nodejs quizmaster webapp conducting quiz including page player enter answer scala rconcli cli executing query remote valve source dedicated server using rcon protocol mit go sourcebans admin ban communication management system game running source engine source code php teeworlds open source retro multiplayer shooter source code c tournamentmango tournamentmango open source tournament bracket user management system build archive player keep track score time well regular character game alias mit javascript gateway terminal sharing back top asciinema web app hosting asciicasts demo elixirdocker gateone gate one webbased terminal emulator ssh client source code python guacamole guacamole clientless remote desktop gateway support standard protocol like vnc rdp source code javac neko self hosted virtual browser rabbit clone run docker dockergo oneye cloud software access data everywhere browser demo source code php osjs desktop implementation browser fullyfledged window manager application apis gui toolkits filesystem abstraction demo source code nodejs tmate instant terminal sharing source code isc c groupware back top bluemind groupware email calendar addressbooks exchange active sync exchange mapi protocol support source code java citadel groupware including email calendarscheduling address book forum mailing list im wiki blog engine r aggregation source code c corteza crm including unified workspace enterprise messaging low code environment rapidly securely delivering recordsbased management solution demo source code go cozy cloud personal cloud manage sync contact file calendar manage budget app store full community contribution source code nodejs egroupware software suite including calendar address book notepad project management tool client relationship management tool crm knowledge management tool wiki cm source code php espocrm crm frontend designed single page application rest api demo source code php horde horde project creating high quality open source application library based php horde framework demo source code php fullfeatured home hosted cloud drive personal assistant app launcher file converter streamer share tool php kolab kolab community unified communication collaboration system source code cpythonphp kopano groupware suite including email calendar task todos note featuring modern webapp deskapp mobile access zpushactivesync demo source code cpythonphp openmeetings openmeetings provides video conferencing instant messaging white board collaborative document editing groupware tool using api function streaming server remoting streaming source code java sogo sogo offer multiple way access calendaring messaging data caldav carddav groupdav well activesync including native outlook compatibility web interface demo source code objectivec suitecrm awardwinning enterpriseclass open source crm source code php tine contact calendar task webdav activesync voip mailclient crm sale project timetracker demo source code php zimbra collaboration email calendar collaboration server web interface lot integration source code java human resource management hrm back top admidio admidio free open source user management system website organization group system flexible role model possible reflect structure permission organization demo source code php icehrm icehrm employee management system allows company centralize confidential employee information demo source code php orangehrm orangehrm comprehensive hrm system capture essential functionality required enterprise source code php sentrifugo sentrifugo hrm system easily configured meet organizational need source code php timeoffmanagement simple yet powerful absence management software small medium size business demo source code mit nodejs internet thing iot back top devicehive open source iot platform wide range integration option demo source code java domoticz home automation system let monitor configure various device like light switch various sensorsmeters like temperature rain wind uv electra gas water much source code client cc fhem fhem used automate common task household like switching lamp heating also used log event like temperature power consumption control via web smartphone frontends telnet tcpip directly source code perl gladys gladys opensource home assistant run raspberry pi source code mit nodejs home assistant opensource home automation platform demo source code mit python mozilla gateway mozilla webthings mozilla open source implementation web thing including webthings gateway webthings framework source code nodejs node red browserbased flow editor help wiring hardware device apis online service create iot solution source code nodejs openhab vendor technology agnostic open source software home automation source code java thingsboard opensource iot platform device management data collection processing visualization demo source code java thingspeak open source internet thing application api store retrieve data thing using http demo source code ruby knowledge management tool back top mindmaps open source offline capable mind mapping application demo mind web application creating managing mind map demo mit javascript tagtool collaborative knowledge management tool create word cloud link element demo source code mit python weaviate graphql based knowledge graph demo go learning course back top canvas lm canvas trusted opensource learning management system lm revolutionizing way educate demo source code ruby chamilo lm chamilo lm allows create virtual campus provision online semionline training source code php edx open edx platform opensource code power edxorg source code python ilias ilias learning management system cope anything throw demo source code php mahara open source fully featured web application build student electronic portfolio source code php moodle moodle learning course platform one largest open source community worldwide demo source code php open eclass open eclass advanced elearning solution enhance teaching learning process demo source code php openolat openolat webbased learning management system teaching education assessment communication demo source code java relate relate webbased courseware package includes feature flexible rule statistic multicourse support class calendar source code mit python rosariosis rosariosis free student information system school management demo source code php sakai sakai project provides flexible featurerich environment teaching learning research collaboration demo source code java map global positioning system gps back top see also awesomegis get timezone geo coordinate lat lon mit godocker graphhopper fast routing library server using openstreetmap source code java hauk easy setup location sharing platform let temporarily share location anyone realtime demo php mapbbcodeshare tool sharing custom osm map support annotated marker polygon line multiformat importexport multiple layer shortlinks demo wtfplother php open source routing machine osrm high performance routing engine designed run openstreetmap data offering http api c library interface nodejs wrapper demo source code c nominatim server application reverse geocoding address coordinate openstreetmap data source code c opengts entrylevel fleet tracking system support variety tracking device protocol come rich webinterface reporting feature demo source code java openstreetmap collaborative project create free editable map world source code client ruby opentripplanner multimodal trip planning software based openstreetmap data consuming published gtfsformatted data suggest route using local public transit system source code javajavascript orion powerful owntracks apicompliant location data visualization frontend web demo mit pythonnodejs owntracks recorder store access data published owntracks location tracking apps clua tileserver gl vector raster map gl style server side rendering mapbox gl native map tile server mapbox gl j android io leaflet openlayers gi via wmts etc source code nodejs tileserver php serve map tile php hosting php traccar java application track gps position support load tracking device protocol android io app web interface view trip demo source code java μlogger collect geolocation user realtime display gps track website demo php umap create map openstreetmap layer minute embed site source code wtfpl python medium streaming back top see also http enwikipediaorgwikilistofstreamingmediasystems http enwikipediaorgwikicomparisonofstreamingmediasystems multimedia streaming darwin streaming server high performance server streaming quicktime medium rtp rtsp protocol originated apple qtss source code c gerbera gerbera upnp medium server allows stream digital medium throughout home network listen towatch variety upnp compatible device source code c homehost selfhosted react redux app stream medium collection music movie book podcasts comic etc mit nodejs icecast streaming audiovideo server used create internet radio station privately running jukebox many thing source code client c jellyfin medium server audio video book comic photo sleek interface robust transcoding capability almost modern platform client including roku android tv io xbox kodi demo source code c karaoke forever host awesome karaoke party everyone easily find queue song phone web browser player also browserbased support webgl visualization source code isc nodejs mistserver streaming medium server work well streaming environment source code c readymedia simple medium server software aim fully compliant dlnaupnpav client formerly known minidlna source code c rygel rygel upnp av mediaserver allows easily share audio video picture medium player software may use rygel become mediarenderer may controlled remotely upnp dlna controller source code c üwave üwave selfhosted collaborative listening platform user take turn playing talk gameplay video anything variety medium source like youtube soundcloud demo source code mit nodejs audio streaming ampache web based audiovideo streaming application demo source code php airsonic opensource webbased medium streamer jukebox fork subsonic last opensource release switched license source code client java azuracast modern accessible selfhosted web radio management suite source code php audioserve simple personal server serve audio file directory audiobooks music podcasts focused simplicity support sync play position client mit rust beet music library manager musicbrainz tagger commandline web interface source code mit python black candy music streaming server built rail stimulus mit ruby compactd remote music player support adding content mit nodejs friendsradio share music friend youtube soundcloud demo mit nodejs funkwhale modern webbased convivial multiuser free music server demo source code pythondjango gnu fm running music community website alternative lastfm source code php gonic lightweight music streaming server subsonic compatible go groove basin music player server webbased user interface inspired amarok mit nodejs koel personal music streaming server work source code mit php koozic music server powerful playlist feature subsonic compatibility demo source code python libretime simple open source platform let broadcast streaming radio web fork airtime source code php lm access selfhosted music using web interface demo c moode audio audiophilequality music playback wonderful raspberry pi family single board computer source code php mopidy extensible music server offer superset mpd api well integration party service like spotify soundcloud etc source code python moped responsive javascript client mopidy music server mit mopidy musicbox web client mopidy music server mopidyparty mopidy web extension designed party let guest manage sound python mpd daemon remotely play music stream music handle organize playlist many client available source code client c ympd standalone mpd web gui written c utilizing websockets bootstrapjs source code c mstream music streaming server gui management tool run mac window linux source code nodejs musikcube streaming audio server linuxmacoswindowsandroid client source code c navidrome music streamer modern music server streamer compatible subsonicairsonic demo source code client gojavascript polaris music browsing streaming application optimized large music collection ease use high performance mit rust snapcast synchronous multiroom audio server c sonerezh selfhosted webbased application stream music everywhere demo source code php stretto music player youtubesoundcloud import itunesspotify discovery demo client mit nodejs volumio free open source linux distribution designed finetuned exclusively music playback source code nodejs video streaming bluecherry closedcircuit television cctv software application support ip analog camera source code php crtmpserver high performance rtmprtsp streaming server c cytube cytube web application providing medium synchronization chat arbitrary number channel demo mit nodejs hellowlol htpc manager fork fully responsive interface manage favorite medium htpc mit python invidious invidious alternative frontend youtube demo crystal myflix selfhosted super lightweight netflix alternative mit shell oddworks oddworks open source video distribution platform built destroy barrier streaming television sdks roku apple iostvos google android amazon firetv mit nodejs open streaming platform selfhosted alternative twitch youtube live live ondemand video streaming source code mit python peertube decentralized video streaming platform using bittorrent directly web browser source code nodejs rapidbay selfhosted torrent videostreaming servicetorrent client allows searching playing video torrent browser chromecastappletvsmart tv mit pythondocker restreamer restreamer allows realtime video streaming website without streaming provider source code nodejsdocker shinobice open source cctv software written node ip local camera support nodejs streama self hosted streaming medium server mit java synctube lightweight simple setup cytube alternative watch video friend chat demo mit nodejshaxe tube youtubelike without censorship feature nt need video sharing app written go also support automatic transcoding aac multiple collection r feed demo source code mit go videolan client vlc crossplatform multimedia player client server supporting multimedia file well dvd audio cd vcds various streaming protocol source code multiple c zoneminder closedcircuit television cctv software application support ip usb analog camera source code php miscother back top alert management web application mit php alerthub alerthub simple tool get alerted github release mit nodejs anchr anchr toolbox tiny task internet including bookmark collection url shortening encrypted image uploads source code nodejs anuko anuko provides simple time project tracking selfhosted basis demo source code php asciiflow flow diagram drawing tool source code javajavascript blynk platform io android apps control arduino raspberry pi similar microcontroller board internet source code java cachet open source status page system everyone demo source code php cstate static status page hyperfast hugo clean design minimal j super light htmlcss high customization optional admin panel readonly api best used netlify docker demo mit go cup common unix print system us internet printing protocol ipp support printing local network printer source code c cyberchef perform manner cyber operation within web browser aes de blowfish encryption decryption creating hexdumps calculating hash much demo javascript digitalcurrency create selfhosted digital currency demo nodejs domainmod application manage domain internet asset central location domainmod includes data warehouse framework allows import whmcpanel web server data view export report data demo source code php flox self hosted movie tv series anime watch list rating system us movie database backend information demo mit php formspree send form url forward email php javascript sign required demo source code python geneweb geneweb open source genealogy software written ocaml come web interface used offline web service demo source code ocaml graphvl identity document verification using machine learning graphql mit python secure password rather saying password weak strong secure password let user know long would take someone crack password demo mit javascript googlewebfontshelper hasslefree way selfhost google font get eot ttf svg woff file cs snippet demo mit nodejs ytdlwebserver dockerready webserver downloading youtube video mit nodejs journal simple journaling encrypted entry sharing capability mit ruby kimai simple time project tracking demo source code php king phisher king phisher tool testing promoting user awareness simulating real world phishing attack python mailygo mailygo small tool written go allows send html form example static website without dynamic backend via email mit go monica personal relationship manager new kind crm organize interaction friend family source code php musical artifact helping catalog preserve free artifact need produce music source code mit ruby nnmm super tiny pastebinurl minifier microservice beerware php notica let send browser notification terminal desktop phone installation registration required source code mit nodejs ombi content request system plexemby connects sickrage couchpotato sonarr growing feature set demo source code c otranscribe free web app take pain transcribing recorded interview source code mit javascript passcheck web application featuring handy password tool including password generator strength checker haveibeenpwned breach checker source code mit javascript reactive resume oneofakind resume builder keep privacy mind completely secure customizable portable opensource free forever demo source code mit dockernodejs releasebell send release notification starred github repos source code mit nodejs revealjs framework easily creating beautiful presentation using html demo source code mit javascript revive adserver world popular free open source ad serving system formerly known openx adserver phpadsnew source code php sane network scanning allow remote client access image acquisition device scanner available local host source code c teslamate powerful data logger tesla vehicle mit elixir trello burndown easy use scrum burndown chart trello board mit godocker vimbadmin provides web based virtual mailbox administration system allow mail administrator easily manage domain mailbox alias demo source code php web font repository simple webfont hosting google font alternative font mit php webtrees webtrees web leading online collaborative genealogy application demo source code php money budgeting management back top see also http itassetmanagement akaunting akaunting free online open source accounting software designed small business freelancer source code php btcpay server selfhosted bitcoin cryptocurrencies payment processor demo source code mit c boodle simple accounting singlepage application clojure clojurescript clojure budget app budget app open source personal budgeting application java dot ledger webbased personal finance management tool demo source code ruby economizzer easy secure system manage personal money achieve goal accessed computer tablet smartphone demo source code mit php exmoney selfhosted personal finance app isc elixir firefly iii firefly iii modern financial manager help keep track money make budget forecast support credit card advanced rule engine import data many bank demo source code php family accounting tool webbased finance management tool partner partially shared expense scala fava fava web frontend beancount text based doubleentry accounting system demo source code mit python galette galette membership management web application towards non profit organization source code php grr asset management booking smallmedium company source code php hospital run hospital run offline enabled hospital management software demo source code nodejs inventaire collaborative resource mapper project yet focused exploring book mapping wikidata isbns source code nodejs invoice ninja powerful tool invoice client online demo source code aal php invoiceplane manage quote invoice payment customer small business mit php ihatemoney manage shared expense easily demo source code python kresus open source personal finance manager demo source code mit nodejs ontrack simple app track spend set goal mit rubyreact partkeepr partkeepr electronic part inventory management software help keep track available part assist reordering part demo source code php silverstrike personal finance management made easy demo source code mit pythondjango stockazng asset management system mit python monitoring back top see http monitoring http metric metriccollection notetaking editor back top see also wikis bulletnotes workflowy dynalist clone kanban trello calendar functionality organize everything source code mit nodejs boostnote notetaking app programmer focus markdown snippet customizability source code javascript codimd realtime collaborative markdown note platform formerly hackmd ce source code nodejs dailynotes app taking note tracking task daily basis markdown mit python dillinger last markdown editor ever source code mit nodejs dnote simple command line notebook multidevice sync web interface source code go docpht docpht take note quickly document anything without use database demo source code mit php drawio diagram software making flowchart process diagram org chart uml er network diagram source code javascript joplin joplin note taking application markdown editor encryption support mobile desktop platform run clientside syncs self hosted nextcloud similar consider like open source alternative evernote source code mit nodejs leanote leanote notepad open source cloud notepad demo source code go markdown edit online markdown editorviewer source code mit meemo personal note stream markdown support source code mit nodejs minimalistwebnotepad minimalist notepadcc clone php mininote simple markdown notetaking app persistence mit nodejs opennote opennote built open webbased alternative microsoft onenote evernote demo mit overleaf webbased collaborative latex editor source code ruby paperwork opensource notetaking archiving alternative evernote microsoft onenote google keep source code mit php plainpad modern note taking application cloud utilizing best feature progressive web apps technology demo source code php savepad minimalist notepad based notepadcc mit php standard note simple private note app protect privacy getting done standard note demo source code ruby turndown html markdown converter written javascript source code mit javascript trilium note trilium note hierarchical note taking application focus building large personal knowledge base nodejs turtl totally private personal database note taking app source code commonlisp wreeto wreeto open source notetaking knowledge management wiki system built top ruby rail framework source code ruby writing lightweight distractionfree text editor browser markdown latex supported lag writing source code mit javascript office suite back top collabora online development edition collabora online development edition code powerful libreofficebased online office support major document spreadsheet presentation file format integrate infrastructure source code c cryptpad cryptpad zero knowledge realtime collaborative editor richtext file sourcecode source code nodejs ethercalc web spreadsheet source code nodejs etherpad etherpad highly customizable open source online editor providing collaborative editing really realtime demo source code nodejs infinoted server gobby multiplatform collaborative text editor source code mit c onlyoffice office suite enables manage document project team customer relation one place source code nodejs phpoffice phpoffice contains library permit write read file office suite php webodf tool library view edit open document format odf file source code password manager back top bitwarden password manager webapp browser extension mobile app source code c bitwardenrs lightweight bitwarden server api implementation written rust rust keeweb webapp browser desktop password manager compatible keepass database source code mit padloc modern open source password manager individual team source code nodejs passbolt password manager dedicated managing password collaborative way web server using mysql database backend source code php passit simple password manage sharing feature group user administration interface demo source code python passwall open source password manager go psono promising password manager fully featured team demo source code python shaark one platform link story password album built laravel vuejs mit php syspass multiuser password management system demo source code php teampass password manager dedicated managing password collaborative way one symmetric key used encrypt sharedteam password stored server side file database work server apache mysql php source code php pastebins back top client side encrypted pastebin wtfpl python bepasty pastebin kind file source code python bin paste bin rust cryptonote simple open source web application let user encrypt share message read source code mit ruby edpaste selfhosted pastebin written laravel php framework mit php fiche command line pastebin need netcat demo mit c filite simple light standalone pastebin url shortener filesharing service demo mit rust fugacious open source shortterm secure messaging osssm source code ruby gist gist opensource application share code demo php hastebin open source pastebin written nodejs demo source code mit nodejs mojopaste perl based pastebin demo source code perl notehub free hasslefree pastebin markdown page simple clean password provided generatedshort link mit nodejs paste paste forked original source pastebincom used bought source code php pastebin simple pastebin service convenient api cli demo mit go pastebin simple fast featurerich standalone pastebin service mit rust pb lightweight pastebin url shortener built using flask python privatebin privatebin minimalist opensource online pastebindiscussion board server zero knowledge hosted data demo source code zlib php purritobin ultra fast minimalistic encrypted command line pastebin server knowledge paste data demo isc c sharppaste crossplatform c pastebin clientside encryption work mit c nancyfx snibox code snippet manager attractive tagoriented interface demo source code mit ruby snipt longterm memory coder share store code snippet mit python socksbin simple fast terminal based pastebin optional code highlighting specific client required need netcat demo python stikked advanced beautiful pastebin demo php simple deploy use secret message service using hashicorp vault secret storage mit go personal dashboard back top see also monitoring baby buddy help caregiver track baby sleep feeding diaper change tummy time demo python dashmachine another web application bookmark dashboard fun feature python habitica habit tracker app treat goal like role playing game previously called habitrpg source code nodejs heimdall heimdall elegant solution organise web application source code mit php hiccup beautiful static homepage get link service quickly builtin search editing pwa support localstorage caching easily organize start page source code mit homepage simple standalone selfhosted php page window server web mit php homer dead simple static homepage expose server service easy yaml configuration connectivity check organizr organizr aim one stop shop server frontend php personal management system central point managing personal data billing payment job holiday note etc demo mit php simpledash simple fully responsive dashboard forward service choice demo mit javascript tipboard inhouse tasty local dashboarding system source code python wger webbased personal workout fitness weight loggertracker also used simple gym management utility offer full rest api well demo source code python photo video gallery back top chevereto free powerful fast image hosting script allows create full featured image hosting website minute source code php coppermine multilingual photo gallery integrates various bulletin board includes upload approval password protected album demo source code php cumulusclips video sharing website cumulusclips video sharing script build youtube clone user upload rate comment video much demo php fussel fussel static photo gallery generator easily generate reactive gallery host optimized static folder asset mit python gallery cs gallerycss cs think simple maintainable understandable gallery without use javascript source code mit cs lychee open source grid album based photomanagementsystem source code mit php mediagoblin free software medium publishing platform anyone run think decentralized alternative flickr youtube soundcloud etc source code python ownphotos self hosted wannabe google photo clone slight focus cool graph mit python photato selfhosted photo gallery accessible responsive webui directly us index specific folder filesystem java photofloat web photo gallery done right via static json dynamic javascript demo python photolight easiest photo gallery php photonix new webbased photo management application object recognition location awareness color analysis ml algorithm demo source code python photoprism personal photo management powered go google tensorflow browse organize share personal photo collection using latest technology automatically tag find picture source code mit go photo stream minimalist selfhosted photo stream demo mit ruby photoview simple userfriendly photo gallery personal server made photographer aim provide easy fast way navigate directory thousand high resolution photo demo go pigallery directoryfirst photo gallery website rich ui optimised running low resource server demo source code mit dockernodejs piwigo photo gallery software web built active community user developer demo source code php plumi create sophisticated videosharing site source code python quru image server high performance dynamically resizing image server offering directory based access control cropping rotation color management tool demo source code python sigal yet another simple static gallery generator mit python ubergallery ubergallery easy use simple manage web photo gallery ubergallery require database support jpeg gif png file type simply upload image ubergallery automatically generate thumbnail output html source code mit php zenphoto opensource gallery cm project source code php poll event back top calagator event aggregator source code mit ruby clerk simple event logger keep track periodic event habit etc occur php dudle online scheduling application demo source code ruby feedka opensource web application serve platform get authentic kindful constructive feedback friend family coworkers demo ruby fider open source alternative uservoice customer feedback demo source code mit go framadate online service planning appointment make decision quickly easily make poll define date subject choose send poll link friend colleague discus make decision demo source code cecillb php hitobito web application manage complex group hierarchy member event lot demo source code ruby jd esurvey open source enterprise survey web application source code java kyélà participation poll group event demo source code php limesurvey featurerich open source web based polling software support extensive survey logic demo source code php meetable event aggregator demo source code mit php open event server enables organizer manage event concert conference meetups python phpback open source feedback system demo source code php booking scheduling alfio open source ticket reservation system demo source code java booked webbased calendar resource scheduling system allows administered management reservation number resource demo source code php easy appointment highly customizable web application allows customer book appointment via web demo source code php proxy back top reverse proxy help automatically utilize server push mechanism static website available middleware standalone application mit nodejs imgproxy fast secure standalone server resizing converting remote image work great need resize multiple image fly without preparing ton cached resized image redoing every time design change mit godocker inlet expose local endpoint internet kubernetes integration docker image cli available mit godocker iodine dns tunnel solution enabling start proxy listener source code isc c microproxy lightweight noncaching httphttps proxy server mit go miniproxy simple web proxy written php allow bypass internet content filter browse internet anonymously one php file source code php nginx proxy manager nginx proxy manager easy way accomplish reverse proxying host ssl termination source code mit nodejsdocker phpproxy web proxy script built specifically fast easy modify support video site youtube demo source code mit php pomerium identityaware reverse proxy successor obsolete oauthproxy insert oauth step proxying request backend safely expose selfhosted website public internet source code go pound lightweight reverse proxy load balancer httphttps c privoxy noncaching web proxy advanced filtering capability enhancing privacy modifying web page data http header controlling access removing ad obnoxious internet junk c redbird modern reverse proxy node includes cluster letsencrypt docker support javascript sish open source serveongrok alternative providing http w tcp tunnel localhost using ssh mit go proxy server builtin authentication telegrambot user management user statistic data spent handy pay per gb data dockerised simple install nodejs lightweight resourceefficient proxy server optimized highload go squid caching proxy web supporting http http ftp reduces bandwidth improves response time caching reusing frequentlyrequested web page source code c swiperproxy lightningfast open source web proxy easy run customize source code mit python tinyproxy lightweight httphttps proxy daemon source code c traefik træfɪk modern http reverse proxy load balancer made deploy microservices ease support several backends docker swarm mesosmarathon manage configuration automatically dynamically source code mit go read later list back top nunux keeper personal content curation service source code nodejs wallabag wallabag formerly poche web application allowing save article read later improved readability demo source code mit php resource planning back top farmos webbased farm record keeping application source code php grocy erp beyond fridge grocy webbased selfhosted grocery household management solution home demo source code mit php tania tania free open source farming management system everyone manage area reservoir farm task inventory crop growing progress go enterprise resource planning erpnext free open source erp system demo source code python ledgersmb integrated accounting erp system small midsize business double entry accounting budgeting invoicing quotation project order inventory management shipping demo source code perl odoo free open source erp system demo source code python ofbiz fo enterprise resource planning system suite business application flexible enough used across industry source code java tryton free open source business solution demo source code python search engine back top software development back top project management see also ticketing task managementtodo list awesomesysadmincode review bonobo git server set self hosted git server ii window manage user full control repository nice user friendly graphical interface source code mit c fossil distributed version control system featuring wiki bug tracker c goodwork self hosted project management collaboration tool powered laravel vuejs demo mit php gitblit pure java stack managing viewing serving git repository source code java gitbucket easily installable github clone powered scala source code scalajava gitea community managed fork gogs lightweight code hosting solution demo source code mit go gitlab self hosted git repository management code review issue tracking activity feed wikis demo source code mit ruby gitlist webbased git repository browser gitlist allows browse repository using favorite browser viewing file different revision commit history diffs source code php gitolite gitolite allows setup git hosting central server finegrained access control many powerful feature source code perl gitprep portable github clone demo source code perl git webui standalone web based user interface git repository python gogs painless selfhosted git service written go demo source code mit go kallithea source code management system support two leading version control system mercurial git web interface source code python klaus simple easytosetup git web viewer work isc python lavagna lavagna opensource issueproject management tool designed small team lightweight pure java easy install easy use source code java lazylead eliminate annoying work within ticketing system jira github trello allows automate daily action like ticket field verification email notification jqlgql meeting request teammate calendar source code mit ruby leantime leantime lean project management system small team startup helping manage project ideation delivery source code php octobox take back control github notification source code ruby openproject openproject webbased project management system source code ruby pagure lightweight powerful flexible gitcentric forge feature laying foundation federated decentralized development demo python phabricator collection web application help build better software demo source code php phproject high performance fullfeatured project management system demo source code php projeqtor complete mature multiuser project management system extensive functionality phase project demo source code php backlog project management collaboration tool powered ruby rail vuejs demo mit ruby redmine redmine flexible project management web application demo source code ruby rhodecode rhodecode open source platform software development team unifies simplifies repository management git subversion mercurial demo source code python scm manager easiest way share manage git mercurial subversion repository http source code java sorcia sorcia minimalist web frontend git repository finegrained user access control multiple theme choose based taste many source code go taiga agile project management tool based kanban scrum method source code python titra timetracking solution freelancer small team demo source code javascript trac trac enhanced wiki issue tracking system software development project python tuleap tuleap libre suite plan track code collaborate software project source code php uvdesk uvdesk community service oriented event driven extensible opensource helpdesk system used organization provide efficient support client effortlessly whichever way imagine demo source code mit php zentao agile scrum project management systemtool demo source code php bug tracker see ticketing idetools atheos webbased ide framework small footprint minimal requirement continued codiad source code mit php babelfish selfhosted server source code parsing parse file supported language extract abstract syntax tree convert universal abstract syntax tree enable analysis transformation go codeserver visual studio code browser hosted remote server source code mit nodejsdocker eclipse che open source workspace server cloud ide source code dockerjava gitpod online ide github gitlab demo source code typescriptgodocker hakatime wakatime server implementation analytics dashboard unlicense haskell httplaceholder quickly mock away webservice using httplaceholder httplaceholder let specify request look like response need returned mit c icecoder icecoder web ide browser based code editor allows develop website directly within web browser demo source code mit php j bin open source collaborative web development debugging tool source code mit nodejs api open source api compile run source code source code ruby koding simplest way manage entire dev infrastructure source code nodejs ml workspace allinone webbased ide machine learning data science docker regexr regexr htmljs based tool creating testing learning regular expression source code mit nodejs requestbin inspect http request debug webhooks mit python rstudio server web browser based ide r source code javac sourcegraph sourcegraph fast opensource fullyfeatured code search navigation engine written go source code go wakapi tracking tool coding statistic compatible wakatime go continuous integration see awesomesysadmincontinuous integration continuous deployment ux testing uier codeless lowcode user experience test editing management using selenium perform testing ui automation uier tends free self hostable alternative applitools endtest ghost inspector usetrace screenster many others nodejs selenoid lightweight selenium hub implementation launching browser within docker container source code go faasserverless serverless computing wikipedia appwrite end end backend server web native mobile developer source code php fx fx tool help function service painless server mit go ironfunctions serverless microservices platform ironio go localstack localstack fully functional local aws cloud stack includes lambda serverless computation source code pythonother openfaas serverless function made simple docker kubernetes source code mit go trustedcgi lightweight selfhosted lambdaapplicationscgiserverlessfunctions platform mit go api management dreamfactory turn sqlnosqlstructured data restful api source code php fusio opensource api management platform help build manage rest apis demo source code php hapttic simple http server forward request shell script handle webhooks receive go hasura fast instant realtime graphql apis postgres fine grained access control also trigger webhooks database event source code haskell kong world popular open source microservice api gateway platform source code lua krakend open source highperformance api gateway source code go para flexible modular backend frameworkserver object persistence api development authentication source code java postwoman free fast beautiful api request builder demo source code mit nodejsvuenuxt tyk fast scalable open source api gateway box tyk offer api management platform api gateway api analytics developer portal api management dashboard source code go documentation generator see also static site generator docstore static document hosting without serverside processing require recompile every time change article clone repository add article text directory get started source code javascript flatdoc small javascript file fetch markdown file render full page mit javascript markdowntree serve hierarchy tree directory markdown file use intended small site built markdown mit ruby read doc host documentation making fully searchable easy find import doc using major version control system including mercurial git subversion bazaar demo source code mit python localization accent opensource selfhosted developeroriented translation tool source code elixir pootle online translation localization tool source code python traduora translation management platform team source code dockernodejs weblate webbased translation tool tight version control integration demo source code python zanata webbased translation platform translator content creator developer manage localisation project source code java static site generator back top see http staticsitegeneratorsnet http wwwstaticgencom task managementtodo list back top see also project management ticketing kanbana create board track user project flat markdown file forked crepido mit nodejs kanboard simple open source visual task board source code mit php mytinytodo simple way manage todo list ajax style us php jquery sqlitemysql gtd compliant demo source code php nullboard singlepage minimalist kanban board compact highly readable quick use demo javascript php tasktodo list simple tasktodo list us json text file task mit php planka open source trello alternative demo source code mit nodejs restyaboard open source trellolike kanban board demo source code php task keeper list editor power user backed selfhosted server scala taskboard kanbaninspired app keeping track thing need get done demo source code mit php taskfreak simple efficient web based task manager written php php task simple task note manager written php jquery bootstrap using custom flat file database php task kanban based todo list manager written go mit go taskwarrior taskwarrior free open source software manages todo list command line flexible fast efficient unobtrusive job get way source code mit c tinyissue simple issue tracking team mit php todo simple todo list manager demo mit go todomini mobile friendly zerofeature todo list web app unix philosophy demo source code phpclojure track webbased application help implement david allen getting thing methodology source code ruby vikunja todo app organize life demo source code go volition opinionated opensource task management mit ruby wekan opensource trellolike kanban demo source code mit nodejs ticketing back top see also task managementtodo list project management bugzilla generalpurpose bugtracker testing tool originally developed used mozilla project perl bumpy booby simple responsive highly customizable php bug tracking system source code mit php cerb groupbased email management project source code dpl php diamantedesk diamantedesk free open source easytouse helpdesk solution demo source code php djangotodo djangotodo pluggable multiuser multigroup multilist todo ticketing system reusable app designed dropped existing django project source code pythondjango flyspray uncomplicated webbased bug tracking system source code php freescout open source clone help scout emailbased customer support application help desk shared mailbox php helpy helpy modern open source helpdesk customer support application feature include knowledgebase community discussion support ticket integrated email demo source code mit ruby huboard instant project management github issue connects directly github api mit ruby mantisbt self hosted bug tracker fit best software development demo source code php opensupports multi language ticket system faq role management metric canned response feature demo source code php osticket manage organize archive support request response one place source code php otrs trouble ticket system assigning ticket incoming query tracking communication source code perl request tracker enterprisegrade issue tracking system source code perl sentry onpremise powerful error tracking platform wide language support robust api source code pythondjango sit scmagnostic filebased offlinefirst immutable issue tracker source code mit rust thebuggenie friendly project management issue tracking tool extensive user right system source code php zammad easy use powerful opensource support ticketing system source code ruby url shortener hosting one please see shortcoming url shortener back top gshort privacyfriendly selfhosted url shortener demo go kutt modern url shortener support custom domain source code mit nodejs linkshortenerbot url shortener using telegram bot demo mit ruby liteshort userfriendly actually lightweight configurable url shortener demo mit python lstu let shorten url lightweight url shortener wtfpl perl polr modern minimalist modular lightweight url shortener source code php reducio url shortener service written scala using akkahttp redis mit scala reducepy url shortener service using tornado redis run docker kubernetes mit python schort login javascript short link demo python shlink url shortener rest api command line interface includes official progressive web application docker image source code client mit php shorturl simple url shortener tiny url demo mit go simpleurlshortener kiss url shortener public private account minimalist lightweight dependency demo mit php simply shorten simple url shortener shortens link mit java urlshortener shitty url shortener emoji ai powered mit nodejs urlshortener make long link short us lowercase write spell faster demo php yourls yourls set php script allow run url shortener feature include password protection url customization bookmarklets statistic api plugins jsonp source code mit php vpn back top see http vpn web server back top see http web wikis back top see also documentation generator wikimatrix wiki engine wikiindex list wiki software wikipedia comparison wiki software wikipedia bookstack bookstack simple selfhosted easytouse platform organizing storing information allows documentation stored book like fashion demo source code mit php cowyo cowyo featurerich wiki minimalist demo mit go djangowiki wiki system complex functionality simple integration superb interface store knowledge style use django model demo python documize modern doc wiki software builtin workflow single binary executable bring mysqlpercona source code go dokuwiki easy use lightweight standardscompliant wiki engine simple syntax allowing reading data outside wiki data stored plain file therefore database required source code php gitit wiki program store page uploaded file git repository modified using vcs command line tool wiki web interface haskell gollum simple gitpowered wiki sweet api local frontend mit ruby jingo git based wiki engine written nodejs decent design search capability good typography mit nodejs mediawiki mediawiki free opensource wiki software package written php serf platform wikipedia wikimedia project used hundred million people month demo source code php moinmoin advanced easy use extensible wikiengine large community user source code python outline open extensible wiki team built using react nodejs source code nodejs pepperminty wiki complete markdownpowered wiki contained single php file demo php pinedocs simple fast customizable lightweight site browsing file php pmwiki wikibased system collaborative creation maintenance website php raneto raneto open source knowledgebase platform us static markdown file power knowledgebase mit nodejs tiddlywiki reusable nonlinear personal web notebook source code nodejs tiki wiki cm groupware builtin feature demo source code php twiki twiki perlbased structured wiki application typically used run collaboration platform knowledge document management system knowledge base team portal demo source code perl wiki simple markdown based wiki engine demo mit go wikijs modern lightweight powerful wiki app built nodejs git markdown demo nodejs wikiss wiki simple use install source code php xwiki second generation wiki allows user extend functionality powerful extensionbased architecture demo source code java zim graphical text editor used maintain collection wiki page page contain link page simple formatting image source code python selfhosting solution back top selfhost web apps microservices lambda server advanced feature enable service reuse composition go ansiblenas build fullfeatured home server playbook ubuntu box mit yamldocker charjabox highly configurable ansible based homeserver setup using docker yamlansibledocker cloud computer computer cloud deploys one click make application accessible web browser source code mit docker dietpi minimal debian o optimized singleboard computer allows easily install manage several service selfhosting home source code shell dockstarter dockstarter help get started home server apps running docker source code mit shell dplatform deploy selfhosted apps easily simple bloatfree independent installation source code mit shell flap low maintenance framework manage selfhosted service source code dockershell freedombone home server configuration based debian source code shell freedombox community project develop design promote personal server running free software private personal communication pythonother freenas networkattached storage na software based freebsd openzfs file system support smb afp nfs iscsi ssh rsync ftptftp protocol advanced feature include fulldisk encryption plugins source code pythonother homelabos offlinefirst privacycentric opensource datacenter deploy service command source code mit docker nextcloudpi nextcloud preinstalled preconfigured text web management interface tool needed self host private data installation image raspberry pi odroid docker curl installer armbiandebian source code bashphp openmediavault openmediavault next generation network attached storage na solution based debian linux contains service like ssh ftp smbcifs daap medium server rsync bittorrent client many source code php piratebox diy anonymous offline filesharing communication system built free software inexpensive offtheshelf hardware pythonother sandstorm personal server running selfhosted apps easily securely demo source code cother sovereign set ansible playbook build maintain private cloud email calendar contact file sync irc bouncer vpn yamlother syncloud online file storage social network email server source code pythonother ubos linux distro run indie box personal server iot device singlecommand installation management apps jenkins mediawiki owncloud wordpress etc feature perlother wikisuite comprehensive integrated free libre open source enterprise software suite source code multiple clearos yunohost server operating system aiming make selfhosting accessible everyone demo source code pythonother list license back top external link back top contributing contributing guideline found githubcontributingmd author list author found authorsmd license list creative common attributionsharealike unported license
18,Lobsters,vcs,Git & VCS,What % Of GitHub Commit Messages Use The Imperative Mood?,https://initialcommit.io/blog/Git-Commit-Message-Imperative-Mood,github commit message use imperative mood,introduction git best practice imperative mood git documentation github activity data gdelt web part speech popular initial commit message git dataset github activity data github activity data dataset gdelt web part speech dataset gdelt web part speech assumption method result shoot email conclusion version control git oreilly medium,introduction one many git best practice write commit message using imperative mood traced back git documentation summarize describe change imperative mood eg make xyzzy frotz instead patch make xyzzy frotz changed xyzzy frotz giving order codebase change behavior example commit message written imperative mood bump version add gitignore refactor product repository functional isolation clarity merge branch master remove unneeded test fix bug preventing menu sliding mobile notice commit message start verb present tense help describe purpose commit clear concise way also help standardize format commit message general article explore frequently developer adhere rule estimating percentage commit message use imperative mood combining force two powerful public datasets google bigquery first github activity data dataset contains data almost million git repository second gdelt web part speech dataset contains billion language token extracted analyzed tagged global web activity using google natural language api link two datasets roughly estimate percentage git commits use imperative mood primer using google bigquery analyze simpler problem check previous article popular initial commit message git reading one dataset github activity data previous article used github activity data dataset find popular initial commit message git quite simple required data life single table commits table single database bigquerypublicdatagithubrepos database refresher public bigquerypublicdatagithubrepos database contains data million public github repository data includes repository name committed file name commit message author name timestamps article make use commit message data commits table analysis goal extract commit message message field commits table try determine percentage commits use imperative mood get thing started easily get total number nonempty commit message dataset january april running following query select count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds length trim lower message yield result total commits dataset gdelt web part speech dataset point need way identify whether commit message commits table us imperative mood gdelt web part speech dataset come dataset includes table called webpos record represents language token extracted online source record come source dozen language purpose language token single word noun verb adjective useful field webpos table many make use date source token published token text case single word language token tag representing token type verb noun adj num punct etc tense token past present future pluperfect mood token indicative imperative subjunctive interrogative url token source assumption method make imperfect assumption commit message imperative mood first word commit message must present tense imperative verb luckily google bigquery allows joining data multiple unrelated datasets single sql query allows u write following query access datasets return count commit message present tense imperative verb first word select count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds length trim lower message regular expression match first word commit message lower regexpextract message rw select lower token langen match english token postag verb match verb posmood imperative match imperative mood postense present match present tense filter plural token unless end double lower substr token lower substr token s group lower token result resulting output query commits dividing total number commits calculated yield therefore estimate approximately commit message github dataset use imperative mood keep mind several aspect method introduce error calculation oftentimes beginning commit message contains noise ticket number story id build tool stamp arbitrary tag data case regexpextract message rw function pick first word come across tag even intended starting point imperative mood verb appears later commit message suspect lead noticeable undercounting actual number imperative mood commit message dataset furthermore natural language database unique present tense verb labelled imperative quick google search believe significantly verb used imperative mood possible word list match would occur commit message data however feeling imperative verb typically used programmer commit message like fix merge bump add modify etc relatively common one well represented current set thought make query accurate feel free shoot email conclusion article used google bigquery access two public datasets enabled u estimate percentage git commits use imperative mood heard git interested great beginner book highly recommend version control git oreilly medium read book year ago clarified lot git concept command use almost every day
19,Lobsters,vcs,Git & VCS,Stacked Pull Requests: Keeping GitHub Diffs Small (2016),https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/,stacked pull request keeping github diffs small,nt catching bug broken window code review fatigue create wip pull request wip hub pr todos create stacked pull request commit git add patch commits n finished product feedback beautiful feedback tip merge squash landing stack github support updating target branch pr measure difference last stack,code review nt catching bug also help team build trust create shared coding standard force discussion vetting code design prevent broken window pull request get big cause code review fatigue learn post split large pr smaller pr ship dependent chain pr quickly create wip pull request git workflow start work feature branch git checkout b somefeature git commit first change gone far open wip pr give opportunity get organized come plan give team opportunity see going open let people progressively review progress following us github cli tool hub although could use site directly hub pullrequest wip adding somefeature x thing thing hack away committing early often keep team updated pushing checking pr todos wip ready ship close pr ready start stacked pr tip nt delete branch yet handy remote backup case create stacked pull request start creating new branch change somefeature unstaged git checkout b somefeature git reset master running git status show change made somefeature copied uncommitted state start creating commits make stacked pr commit reach git add patch create first logical commit branch git add patch change staged stash everything else verify thing still work git stash includeuntracked keepindex make test test pas time create first commit pr stack git commit make change x git push origin hub pullrequest somefeature make change x commits n next commit start creating new branch stash popped git checkout b git stash pop back git add patch create test next commit git add patch git stash includeuntracked keepindex make test git commit somefeature make change git push origin creating pr make sure base previous branch b flag hub pullrequest b repeat process made way stash finished product result stack focused reviewable pr git graph look bit like branch depending previous one master somefeature stacked pr ready review feedback beautiful feedback pinged team review comment start coming notice much feedback stacked pr provoke compare rather large pr garnered little feedback comment huge address feedback push enough stamp merge tip merge squash making additional commits branch sure propagate stack via git merge git rebase git co git commit addressing feedback git commit addressing feedback git push origin git co git merge integrate change make test rebasing focus keeping later branch tipped front earlier branch noble goal force resolve merge conflict commit time case stacked pr necessary squashing commits merge stack anyways make life easier use git merge multiple commits conflict able resolve one go go staying date master consider merging instead rebasing landing stack point collected lgtm pr stack time merge tempting merge stack since pr likely stamped first resist urge merging first pr cause following pr become unmergeable github support updating target branch pr instead go stack last first merge stack master result single wellreviewed commit master measure difference stacked pr lead thoroughly reviewed code shipping faster experience positive last stack line code comment feedback commits addressing feedback compare next stack large long running pr see difference cheer
20,Lobsters,vcs,Git & VCS,Using Google BigQuery to identify the most popular initial commit message in Git,https://initialcommit.io/blog/What-Is-The-Most-Popular-Initial-Commit-Message-In-Git,using google bigquery identify popular initial commit message git,introduction initial commit git background google bigquery google overview github activity data writing sql query google bigquery top popular initial commit message conclusion google bigquery estimate percentage commit message use imperative mood,introduction article explore initial commit message popular analyzing public github dataset google bigquery contains data almost million git repository leverage data compile list commonly used initial commit message dataset nt familiar initial commits check article initial commit git reading one start briefly explaining google bigquery background google bigquery google bigquery data warehouse hosted google cloud platform accessible web service designed host big data cloud environment provide fast convenient access data internet part service google provides numerous public datasets developer experiment many useful scientific research community including data food drug administration u census national oceanic atmospheric administration course github using github dataset article contains data million public github repository data includes repository name committed file name commit message author name timestamps mainly using commit message try gain insight common initial commit message developer use information github dataset see google overview github activity data interested link includes button access data via bigquery console note provide billing account detail even though access free let jump query git data writing sql query google bigquery google bigquery interface look like bottomleft panel console list different datasets available note selected githubrepos dataset expanded item expanded list represents table database making use commits table contains commit message information need commit message information stored message column table commits table contains data way present big white panel topcenter screen editor use write execute sql query datasets query used fetch group count commit message select trim lower message count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds arraylength parent length trim lower message group trim lower message order count desc limit query simply group together commits commit message count many commits contained message commits table field called parent store parent commit id commit filtered field using clause arraylength parent since initial commits nt parent note commits made detached head state would also contain parent manually excluded based commit message content used lower function ensure uppercaselowercase letter nt prevent message grouped together also used trim function remove leading trailing whitespace grouping added filter authordataseconds column bring back commits made january april ordered resulting commit message frequency occurrence highest lowest finally limited result record since maximum amount conveniently downloaded console interface way need let move finding top popular initial commit message running query simply picked top result ranking top commit message ranked frequency occurrence dataset commit messagecount total initial first initial initial create init update first initial create inital initial create ghpages branch via initial initial initial commit add default gitignore gitattribute top initial commits message combined total commits result see initial commit far popular message used representing sample second popular message first commit representing third ranked message init clearly percentage drop extremely quickly remaining result mostly made word initial init mixed another term like import version release checkin remaining message related including readmemd licensemd gitignore gitattribute file lastly message create ghpages branch via github likely indicating github page feature gaining traction tell initial commit message used dataset strongly weighted toward initial commit small minority favoring first commit smattering option probably tell name website run herd one favor initial commit conclusion article analyzed public github dataset google bigquery explore popular initial commit message used developer working git found topic interesting check analysis us google bigquery estimate percentage commit message use imperative mood
21,Lobsters,vcs,Git & VCS,Easily rename your Git default branch from master to main,https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx,easily rename git default branch master main,internet engineering task force ietf point masterslave metaphor update git rev news edition us master context master copy master recording move history nt changed note note check protected branch rule updating local clone update local alias note update git sponsor developing rider hosting,internet engineering task force ietf point masterslave oppressive metaphor never become fully detached history well addition inappropriate arcane masterslave metaphor technically historically inaccurate lot accurate option depending context cost nothing change vocabulary especially one le little speed bump getting new person excited tech might say using master masterslave technical relationship clearly instance mastercopy masterslave update good analysis whole main branch convo git rev news edition git likely us master context master copy master recording see word master nt always connote slave many evocative via basic wordassociation nt want look word prompt day choice cool dozen git repository master main branch changing would hassle right let see git branch master main push back remember move history nt changed even better git push u origin main set upstream timed githubwindowsterminalhere master git branch master maind githubwindowsterminalhere main git push u origin maintotal delta reused delta remote remote create pull request main github visiting remote http githubcomshanselmanwindowsterminalherepullnewmainremote http githubcomshanselmanwindowsterminalheregit new branch head main easy note changing default branch main also benefit starting autocomplete tab muscle memory still work another great option main github branch latest goal unambiguous need change default branch github setting repository also update tracking branch manually seen use git push u origin main bothgit branch u originmain main last thing think cicd github action azure devops pipeline build system pull specific branch change main however usually unless ci explicitly call branch name changing master main work note complex repos also check protected branch rule move reflog unchanged tl dr conclusion git branch master maingit push u origin main updating local clone someone local clone update local like git checkout master git branch master main git fetch git branch unsetupstream git branch u originmain git symbolicref refsremotesoriginhead refsremotesoriginmain tweet thanks brad xunitnet step go master branch rename master main locally get latest commits server remove link originmaster add link originmain update default branch originmain add alias git new default whatever starting branch like note longer needed set git config global aliasnew git init git symbolicref head refsheadsmain update git nt need alias new config option called initdefaultbranch set forget itgit config global initdefaultbranch main hope help good name latest trunk stable sponsor tried developing rider yet fast featurerich crossplatform ide improves code net aspnet net core xamarin unity application window mac linux hosting
22,Lobsters,vcs,Git & VCS,Speeding up a Git monorepo at Dropbox with <200 lines of code,https://dropbox.tech/application/speeding-up-a-git-monorepo-at-dropbox-with--200-lines-of-code,speeding git monorepo dropbox line code,magic pocket edgestore prereceive monorepo centric build tool like bazel automatic bisects reverts watchman index extension mode untracked cache fixed bug bugfix one large performance issue scalar exciting work done open source improve version control performance acknowledgement go watchman,migrated mercurial git improve local performance began consolidating repository hosted backend code monorepo grew experienced git performance issue grew linearly number file added inconveniently problem severe platform engineer work fortunately upstream improvement git small wrapper custom code able speed git operation without fragmenting unified growing repository originally code distributed across several dozen mercurial repository around tested found better local performance git importantly git become industry standard tool new engineer already used course hack week small group engineer migrated many repository mercurial git planned migrate rest backend business logic dropbox time lived mainly monolithic python web application infrastructural component built independently time extracted targeted component monolith separate service large number engineer still contribute monolith example magic pocket custom block storage system built separately day one metadata store edgestore started simple client side python library eventually spun sophisticated service practice meant monolith largest often consumer smaller service code separate repository consequently developer would write integration test service monolith repository test often failed service code changed since continuous integration ci process simply ran test head repository notion pinning hard diagnose root cause problem large frequency change meant would multiple failure week debugging test failure tracking change fixing build daily release painful process caused lot work release engineer made release process slow inconsistent due indeterminate nature test failure engineer trust ci test result inspect failure led problem solve needed single commit identifier reproducibly determine state code testing either needed polyglot tool set tool per language pin version dependency directly repositorybased pinning mechanism like git subtree merge repository one super repo received checkin every time one serverrelated repository changed via git prereceive hook provided global ordering change test result helped narrow repository caused breakage eventually realized would simplest merge relevant repository combined repository size large file estimated git performance would acceptable least year merge combined various initiative improve testing infrastructure quality helped u keep master much stabler much le work smoothed release process eventually seen even benefit like simple code sharing easy large scale refactoring good operability monorepo centric build tool like bazel simple automatic bisects reverts worked u year expected git performance started degrading specifically seemed degrade linearly number file added repository common operation like git status getting slower time late started investigating various option speed git user start checking large file severely impact performance many operation git fortunately workflow depended set prereceive hook limit size new file pushed repository prevent regression macos supported development platform dropbox engineer free use platform see fit example engineer working dropbox desktop client might work window server engineer prefer linux practice server engineer use macos focused effort order tackle local git performance needed control version git developer macos used additionally measure performance created small fork git measured timing operation like git status git pull automatically provisioned installed developer machine munged path developer use git one installed system homebrew copy git optdropboxoverridebingit time git status took two second average case many git operation slow grew linearly since ran lstat syscall every file repository check date since developer modify small subset file wasted cycle case interestingly git status faster linux compared macos substantial work open source community speed git large repository last year example git file system monitor fsmonitor detect changed file integrated watchman daemon watch buffer filesystem change fsmonitor git hook act thin wrapper around watchman useful abstraction internal git test would helpful need use alternate file watcher migrate away watchman git us index file contains entry file repository determines file staged commit index also support extension various feature like fsmonitor file ability cache result fsmonitor git operation need local filesystem state like add status diff check fsmonitor changed file update index change git fsmonitor watchman work macos index sorted file path default common operation like adding file index via git add requires full index rewrite insert new path right place slow repository large index git also introduced new splitindex mode convert index format delta could quickly appended split index file eventually consolidated shared index file making index writes significantly faster finally untracked cache mode cached directory mtimes git could skip traversing unmodified directory deployed fsmonitor watchman developer macbooks released instruction turn unfortunately performance bug git seemed ignore fsmonitor data case correctness bug operation like git status sometimes returned wrong result fsmonitor enabled dug fixed bug ultimately shifted focus lost team member git expertise priority second half repo reached file decided refocus problem upstream bugfix looked promising fixed one large performance issue time confident enable improvement user without intervention one core principle shipping developer tool would configured correctly everyone default settled shipping wrapper top git would automatically tweak configs enable fsmonitor developer already turned whitelisted set repository similar microsoft scalar principle without feature without need developer learn additional tool run additional command incrementally rolled git first week december saw significant reduction duration common operation worth noting operation nowhere fast running git smaller repository big improvement status quo acceptable purpose also sure time growing linearly number file repository finally enabled line custom plumbing code around git additional service large virtual filesystems maintain exciting work done open source improve version control performance large repository git mercurial prep work like disallowing large file setting right flag client git perform reasonably well almost zero ongoing maintenance burden many tradeoff deciding monorepo multiple repository version control scalability dealbreaker long time acknowledgement dozen engineer contributed work described many year mercurial git migration repository merges finally work described speed git various current former dropboxers include tim abbott jon goldberg nipunn koorapati jason michalski greg price mike solomon alex vandiver also many thanks maintainer git various microsoft engineer helped review patch contributed several major feature git like file system monitor kudos facebook building open sourcing watchman charles strahan wrote go watchman library use
24,Lobsters,vcs,Git & VCS,Managing GitHub Issue Labels Across Organizations and Repositories,https://alta3.com/blog/managing-github-issue-labels-across-organizations-and-repositories,managing github issue label across organization repository,github default label management label pygithub prerequisite personal access token install example file run list repos make backup current label set common set label every repo,github default issue label really really bad githubissuecentric organization suffered nondescriptive label far long finally took charge fixing issue addition poor default github provide ability manage issue label degree fidelity user organization need thing ca nt github default label management include updating default label old repos new one managing label across multiple organization user revision control management change making backup existing label existing repos solution used awesome label python project combination short python script used pygithub library end old label backed established new default issue label scheme likely last u many year come resulting issue label step followed script default thing repos prerequisite user access repository modified github personal access token created give descriptive name select repo scope install step set python environment configure venv venv source venvbinactivate python pip install upgrade pip wheel python pip install r requirementstxtexample env file githubusertoken yourtokenhere labelstoken githubusertoken labelsuser yourusername run list repos take minute update script fetch list user organization repository would like manage use list next step python listallrepospymake backup current label pipe resulting list run label fetch command repoisitory mkdir p repolabels python listallrepospy xargs label fetch owner repo filename repolabels labelstomlset common set label every repo viewedit defaultlabelstoml list label next use list repository run label sync update repository use new list issue label python listallrepospy xargs label sync owner repo filename allreposlabelstomlnow looking repository see list available label like image addition also created folder full old label run script regular basis keep track label created across repos also take good idea issue label one project expand use across others list source code used accomplish task repos available thanks reading happy label making
25,Lobsters,vcs,Git & VCS,gitea-release Tool Announcement,https://christine.website/blog/gitea-release-tool-2020-05-31,gitearelease tool announcement,gitearelease tool announcement tulpadev gitea changelogmd version file keep changelog semantic version release process automation automation drone plugin system structopt drone build history gitearelease repo changelog gitearelease nix contact method issue pull request contact,gitearelease tool announcement big fan automating thing possibly automated one biggest pain consistently creatingtagging release software manual process write changelogs bump version replicate changelogversions web ui whatever git forge project question using work great smaller scale quickly become huge pain butt need done often today written small tool help automate going forward named gitearelease one largest rust project date something incredibly happy using going forward repos gitea instance tulpadev gitearelease spiritual clone tool githubrelease optimized workflow biggest change work gitea repos instead github repos written rust instead go automatically scrape release note changelogmd well reading version software version changelogmd version file changelogmd file based keep changelog format modified slightly make easier tool example changelog tool accepts changelog notable change project documented file format based keep changelog http project adheres semantic versioning http fixed refrobnicate spurious rilkefs first release proof concept release created version tool make description release follows fixed refrobnicate spurious rilkefs allows changelog file ultimate source truth release note tool version file play well version file must single line containing semantic version string allows version file ultimate source truth software version data tool release process tool run release subcommand following action take place version file read loaded desired tag repo changelogmd file read change version cherrypicked file git repo checked see tag already exists tag exists tool exit nothing tag exist created changelog fragment body tag pushed gitea server using supplied gitea token gitea release created using changelog fragment release name generated version string automation automation tool work perfectly well locally nt make fully automated gitea repo use drone cicd tool gitea repos drone convenient simple use plugin system easy integrate structopt created drone plugin xenagitearelease configured pipeline step droneyml like kind pipeline name cirelease step name whatever unit testing step name autorelease image setting authusername cadey changelogpath changelogmd giteaserver http tulpadev giteatoken fromsecret giteatoken event push branch master allows bump version changelogmd push commit git new release automatically created see example action drone build history gitearelease repo also changelogmd file grows changelog gitearelease release pushed gitea use drone trigger deployment command example deployment pipeline used automatically update docker image gitearelease tool kind pipeline name docker step name build docker image image environment user root command cachix use xe nixbuild dockernix cp readlink result resultdockertgz volume name image path result event tag name push docker image image docker dind volume name image path result name dockersock path varrundockersock command docker load resultdockertgz echo dockerpassword docker login u dockerusername passwordstdin docker push xenagitearelease environment dockerusername fromsecret dockerusername dockerpassword fromsecret dockerpassword event tag volume name image temp name dockersock host path varrundockersock pipeline use nix build docker image load docker daemon log docker hub push used whatever want may also good idea push docker image every commit relabel tagged commits nt implemented repo hope tool useful accept feedback contact method want contribute directly project please feel free create issue pull request nt want create account git server get issue detail code diffs somehow everything fix issue integrate code want make tool better however well share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear tag gitea rust release
26,Lobsters,vcs,Git & VCS,"Debian Janitor: > 60,000 Lintian Tags Automatically Fixed",https://www.jelmer.uk/janitor-update-3.html,debian janitor lintian tag automatically fixed,debian janitor lintianbrush series scheduling lintian fix janitor lintian udd lintianbrush inner working fixer example fixer policy priority priorityextraisreplacedbypriorityoptional usrsharelintianbrushfixerspriorityextraisreplacedbypriorityoptionalpy debmutate http salsadebianorgjelmerlintianbrushtreemastertestspriorityextraisreplacedbypriorityoptional readme manual page success fixer landing page go top,debian janitor automated system commits fix minor issue debian package fixed software gradually started proposing merges early december first set change sent ran lintianbrush sid package maintained git post part series progress janitor scheduling lintian fix determine package process janitor look import lintian output across archive available udd prioritize package severe issue fixer package selected clone packaging repository run lintianbrush lintianbrush provides framework applying set package run set pristine version repository handle heavy lifting inner working fixer fixer executable get run clean checkout package make change fixer written python shell language contract fixer pretty simple fixer exit nonzero change reverted fixer considered failed exit zero made change write summary change standard fixer uncertain change made report standard output using pseudoheader default lintianbrush discard change uncertainty running locally still apply specifying uncertain summary message standard used commit message possibly changelog message package use gbp dch example fixer look example package priority deprecated since debian policy released august see policy priority instead package use priority lintian warn package us deprecated value associated tag priorityextraisreplacedbypriorityoptional lintianbrush fixer script automatically replace system lintianbrush installed source fixer life usrsharelintianbrushfixerspriorityextraisreplacedbypriorityoptionalpy copy reference debmutatecontrol import controleditor lintianbrushfixer import reportresult fixedlintiantag controleditor updater para updaterparagraphs paraget priority extra para priority optional fixedlintiantag para priorityextraisreplacedbypriorityoptional reportresult change priority extra priority optional fixer written python us debmutate library easily modify control file preserving formatting back possible preserve formatting current fixer come test eg particular fixer test found http salsadebianorgjelmerlintianbrushtreemastertestspriorityextraisreplacedbypriorityoptional detail writing new fixer see readme lintianbrush detail debugging see manual page success fixer list fixer currently available number successful mergespushes per fixer footnote information janitor lintianfixes effort see landing page go top
27,Lobsters,vcs,Git & VCS,Ignoring mass reformatting commits with git blame,https://akrabat.com/ignoring-revisions-with-git-blame/,ignoring mass reformatting commits git blame,stephen pep rescue doc change store ignored commits file,recently merged pr stephen reformats entire codebase align pep decade old resulted lot change file stephen name attached affect git blame example git blame l robertoalsina robertoalsina font know ca stephen finucane n stephen finucane fontnamelower stephen finucane fullnamelower stephen finucane fullnamelower replace italic stephen finucane roberto alsina font n afm pfblist basename robertoalsina stephen implicated changed loop run tool reformatted ignorerev rescue fortunately resolved using ignorerev doc ignore change made revision assigning blame change never happened line changed added ignored commit blamed previous commit changed line nearby line option may specified multiple time ignore one revision rerunning command ignoring reformmatting commit git blame ignorerev l robertoalsina robertoalsina font know ca roberto alsina n roberto alsina fontnamelower roberto alsina fullnamelower roberto alsina fullnamelower replace italic roberto alsina roberto alsina font n afm pfblist basename robertoalsina see actual change roberto march particularly like formatting update remains line number continue match editor magic store ignored commits file remembering type ignorerev get tedious quite quickly remembers commit hash anyway help git blame also support writing commit hash file referencing file ignorerevsfile create gitblameignorerevs like run code black resolve various style issue commit full character hash allowed comment ignore commits file git blame ignorerevsfile gitblameignorerevs l tell git name file git blame always use git config blameignorerevsfile gitblameignorerevs note need set perproject git blame error find file original command exactly want git blame l robertoalsina robertoalsina font know ca stephen finucane n stephen finucane fontnamelower stephen finucane fullnamelower stephen finucane fullnamelower replace italic stephen finucane roberto alsina font n afm pfblist basename robertoalsina never need think mass reformatting ever truly magic
28,Lobsters,vcs,Git & VCS,gitoxide: pure rust implementation of git,https://github.com/Byron/gitoxide,gitoxide pure rust implementation git,gix easy safe use api development status gitoxide program program gitobject gitodb giturl gitprotocol gitpacketline gittransport gitrepository gitcommitgraph gitconfig gitref gitindex gitdiff gitfeatures parallel gittui stress testing idea demo installation binary release release section cargo rustup usage gix gixp project goal purerust implementation git learn best write best possible idiomatic rust best performing implementation assure ondisk consistency take shortcut quality cross platform support including window window testsed ci nongoals replicate command functionality perfectly incompatible git use async io everywhere roadmap future roadmap cargo feature guide gitoxide fast http prettycli leancli prodashrenderlinecrossterm prodashrenderlinetermion convenience feature max maxtermion lean leantermion light small gitfeatures parallel interrupthandler note disableinterrupts interrupthandler pipe gittransport httpclientcurl serialization support gitobject giturl gitodb gitprotocol gitoxidecore plumbing v porcelain plumbing porcelain shortcoming lean light small packfiles use memory map packfiles load file bigger bit system giturl credit itertools license fun fact problem various shape form time,gix commandline interface cli access git repository written optimize userexperience perform good better canonical implementation furthermore provides easy safe use api form various small crate implementing tool breeze please see development status listing crate capability development status gitoxide cli please note functionality come gitoxidecore library mirror capability relies git crate limit amount thread used operation support choose human json output format gix program convenient human gixp program plumbing lower level command use automation gitobject gitodb giturl gitprotocol gitpacketline gittransport gitrepository gitcommitgraph gitconfig gitref gitindex gitdiff gitfeatures parallel feature toggle function execute serially gittui terminal user interface seeking replace improve tig stress testing idea demo installation binary release curl lsfs http rawgithubusercontentcombyrongitoxidemainciinstallsh sh git byrongitoxide crate gixmaxtermion see release section manual installation various alternative build slimmer smaller depending need linux macos window cargo cargo rust package manager easily obtained rustup build binary effortlessly particular cpu additional performance gain default installation max cargo install gitoxide linux little faster compile termion version also result slightly smaller binary cargo install gitoxide nodefaultfeatures feature maxtermion smaller binary even faster build time traded le fancy cli implementation use lean leantermion respectively cargo install gitoxide nodefaultfeatures feature lean usage installed two binary gix high level command porcelain everyday use optimized pleasant user experience gixp low level command plumbing use specialized case project goal purerust implementation git including transport object database reference cli tui simple commandline interface provided common git operation optimized user experience simplegit goto implementation anyone want solve problem around git become alternative gitpython process become foundation free distributed alternative github maybe even github learn best write best possible idiomatic rust fantastic resource see abstraction work use use rust type system make misuse impossible best performing implementation use rust type system optimize work done without hard use make use parallelism get go assure ondisk consistency assure read never interfere concurrent writes assure multiple concurrent writes nt cause trouble take shortcut quality binary may use anyhow error exhaustively knowing error solely userfacing library use lightweight custom error implemented using quickerror internationalization nothing concerned right io error due insufficient amount open file handle nt always lead operation failure cross platform support including window tool experience available reason support window window testsed ci failure prevent release nongoals replicate git command functionality perfectly git git reason use path one simplicity make getting started git easy incompatible git ondisk format must remain compatible never contend use async io everywhere part git operation heavily relying memory mapped io well cpu decompress data nt lend well async io box use blocking well gitfeatures interrupt bring operation async world control long running operation connecting streaming tcp connection especially receiving server async seems like must though behind feature flag roadmap future roadmap provide cli basic user journey cargo feature guide cargo us feature toggle control dependency pulled allowing user specialize crate fit usage ideally additive guide document feature available crate provided function gitoxide toplevel commandline interface fast make crate execute fast possible supporting parallel computation otherwise longrunning function well fast hardware accelerated hashing disabled binary visibly smaller http support synchronous http http transport eg clone fetch push expense compile time binary size mutually exclusive prettycli use clap build prettiest best documented userfriendly cli expense file size provides terminal user interface detailed exhaustive progress provides line renderer leaner progress leancli use argh produce usable binary decent documentation smallest size usually le prettycli prettycli enabled well leancli take precedence pay building unnecessary dependency provides line renderer lean pretty progress prodashrenderlinecrossterm prodashrenderlinetermion mutually exclusive verbose flag powered interactive progress mechanism double log well interactive progress appears short duration convenience feature combine common choice one name max prettycli fast prodashrendertuicrossterm http default unix window maxtermion prettycli fast prodashrendertuitermion http unix faster compile time little smaller lean leancli fast prodashrenderlinecrossterm unix window significantly smaller max without progress terminal user interface leantermion leancli fast prodashrenderlinetermion unix faster compile time little smaller light leancli fast crossplatform nature come simplified log based progress small leancli small possibly threading fast log based progress cleanup temporary file interrupt gitfeatures crate help controlling capability available toplevel crate us gitoxidecore gitoxide crate us gitfeatures feature toggle additive parallel use scoped thread channel parallelize common workload multiple object enabled used everywhere make sense cache likely used instantiated per thread memory used top cost thread multicrate implementation use hardware acceleration thus bearing potential throughput cpu support like amd ryzen intel core mutuallyexclusive interrupthandler listen interrupt termination request provide longrunning operation tooling allow aborting input stream note gitfeatures interrupt inithandler must called start application application already set handler handler effect unset utility still triggered programmatically however interrupting ctrlc sigterm may lead leaking temporary file disableinterrupts take precedence interrupthandler set well set interrupt triggered programmatically user inject mean supporting interrupt useful multiple interruptible operation time triggered independently facility global one probably useful server implementation pipe inmemory unidirectional pipe using byte efficient transfer mechanism gittransport httpclientcurl add support http http transport using rust binding libcurl serialization support follows feature toggle control serialization public facing simple data type data structure implement serde serialize serde deserialize feature provided crate gitobject giturl gitodb gitprotocol gitoxidecore plumbing v porcelain term coming git implementation even though wo nt necessarily point command plumbing porcelain term plumbing refers lowerlevel rarely used command complement porcelain invoked certain use case term porcelain refers decent user experience primarily intended use human case type program must selfdocument capability using help flag derive rule try adhere plumbing show progress logging output default supported logging enabled show timestamps utc need git repository instead take variable via commandline porcelain provides output stderr default provide progress information need allow disabling nt show unless operation take time timestamps shown localtime nonprogress information go stdout shortcoming lean light small build nt support path cli packfiles use memory map even though comfortable use fast squelch io error potential remedy could generalize pack make possible work inmemory buffer directly way one would initialize pack reading whole file memory thus squelching io error expense latency well memory efficiency packfiles load file bigger bit system system address memory potential remedy implement sliding window map unmap portion file needed implementation nt use simd probably cost one could upgrade crate look unmaintained code giturl might restrictive git allows part us browser grade url parser credit itertools mit licensed use izip macro code mit licensed use various abstraction implement decompression compression directly top rather lowlevel minizoxide crate license project licensed either option fun fact originally really fascinated problem believe gitoxide possible provide fastest solution absolutely blown away git first time experienced git year ago tried implement various shape form multiple time rust finally feel found right tool job
29,Lobsters,vcs,Git & VCS,git branch --delete master,https://danso.ca/blog/git-branch-delete/,git branch delete master,git branch delete master released one week ago changing new repository changing existing repository,git branch delete master git version released one week ago includes simple nice new feature init allow setting default initial branch name via config mean changing new repository creating git repository using git init git create default branch traditionally branch called git creates branch begin staging committing file find name distasteful change name branch time git invocation git branch move master whatever newest release git set default branch name main repos user creates want edit socalled global git configuration git config global initdefaultbranch main new repository initialize use default branch main changing existing repository setting affect new repository create future changing existing repo difficult existing repo rename branch git branch move master main push new branch assuming remote repository named git push origin main finally delete original branch git push origin delete master three step renamed git branch without making big deal avoiding wrath internet reactionary
30,Lobsters,vcs,Git & VCS,Highlights from Git 2.28,https://github.blog/2020-07-27-highlights-from-git-2-28/,highlight git,released git released introducing statement software freedom conservancy githubrenaming gitlab bitbucket source changedpath bloom filter blog post explaining juicy technical detail file generation number loose object packed object blog post derrick stolee new bloom filter source source source tidbit configuration source github action workflow gitgitgadget source git mailing list source filter filter git lf source sparse checkout shrink size monorepo source rest iceberg previous version,open source git project released git feature bug fix contributor new last caught latest git back released look interesting feature change introduced since introducing initdefaultbranch initialize new git repository scratch git init git always created initial first branch name master git new configuration option initdefaultbranch introduced replace hardcoded term background change statement software freedom conservancy excellent place look starting git git init instead look value initdefaultbranch creating first branch new repository value unset initdefaultbranch default master important note configuration variable set user overriding default value easy git config global initdefaultbranch main configuration variable affect new repository cause branch existing project renamed git clone also continue respect head repository cloning see change branch name maintainer initiate one change support many community github wider git community considering renaming default branch name repository master learn complementary change github making see githubrenaming gitlab bitbucket also making similar change source changedpath bloom filter git commitgraph file format extended store changedpath bloom filter mean sense new information help git find point history touched given path much quickly example git log path git blame git take advantage optimization deliver handful sizeable performance improvement get worth taking refresher commit graph whether new concept familiar familiar want take deeper dive check blog post explaining juicy technical detail simplest term commitgraph file store information commits essence commitgraph act like cache commonlyaccessed information commits parent root tree thing like also store computed information like commit generation number changedpath bloom filter moment store information understand answer helpful cursory understanding git store object git store object one two way either loose object case object content stored single file unique object disk packed object case object assembled compressed format pack file matter way commit stored still parse decompress field like root tree parent accessed commitgraph file information immediate given commit c git know exactly look commitgraph file field store read immediately decompression piecing together required shave time usual git operation commitgraph really shine computed data store generation number sort reachability index help git answer question thing like reachability topological ordering quickly since generation number new release trying explain quickly would lose lot benefit careful exposition refer instead blog post freshlyminted hubber derrick stolee matter new ok made far got pretty good handle commit graph useful let get juicy detail git commitgraph file learned store changedpath bloom filter changedpath bloom filter ask bloom filter probabilistic set set item querying set presence item x return either x definitely set x might set never x definitely set commitgraph store one bloom filter commits reside commitgraph populates bloom filter list path changed commit first parent bloom filter huge boon performance lot git command general pattern something like git command computes diffs sometimes proportionally expensive bloom filter allows git compute far fewer diffs skipping computation certain commits bloom filter return definitely path interest take git log pathtofile example prior git git log would compute diff every revision walk determining whether show ie whether diff entry pathtofile git newer git skip computing many diffs altogether consulting commit c changedpath bloom filter querying pathtofile querying return definitely git know computing diff strictly uninteresting computing diffs commits expensive least relative complexity algorithm generated reducing number diffs computed overall greatly improve performance try run command git commitgraph write reachable changedpaths generates commitgraph file changed path bloom filter enabled able see performance improvement command like git log path git log l git blame anything else computes firstparent diffs given pathspec source source source tidbit talked headlining change past couple release let look new feature run git pull repository tracking remote branch one four thing happen might change change server client long change direction resolving difference straightforward change nothing server strictly ahead client client fastforwards state serverbut change client server happens depends whether pullrebase configuration set branch rebased top pulling otherwise merge performedthese merges clutter history tricky back without starting pull scratch git warns case specifically pullrebase unset explicitly specify rebase argument git pull source git includes github action workflow use run git integration test variety platform compiler extra effort required part fork gitgit github push run array test necessary validate change wait git use mailing list development yes use gitgitgadget gitgit repository mean open pull request gitgitgadget send mailing list behalf comfortable contributing git like instead composing email manually contribute git start finish using github source hand mind sending email two much easier interact git mailing list encounter bug running git bugreport running new command open editor prepopulated form question useful debugging issue also includes helpful information system like cpu architecture version git running onwhen done send file body email git mailing list rest assured opened helpful bug report source talked number time git clean smudge filter corresponding process filter simulates multiple clean smudge filter single process recently protocol filter relatively straightforward git supply one end content filter produce otherin git information supplied protocol like metadata branch checked case git checkout remote contacted case git fetch new information could used tool like eg git lf order figure remote contact extra data source last least git status learned new trick might recall recent blog post talked sparse checkout shrink size monorepo git status remind sparse checkout telling percentage file checked outfor fan gitpromptsh prompt display sparse sparse checkout source rest iceberg sample change latest couple release check release note previous version git repository note since bloom filter persisted automatically pas changedpaths explicitly subsequent write good idea disable configuration automatically generates commitgraphs like fetchwritecommitgraph gcwritecommitgraph
31,Lobsters,vcs,Git & VCS,One year of automatic DB migrations from git,https://abe-winter.github.io/2020/08/03/yr-of-git.html,one year automatic db migration git,automig autogenerate feature pro written migration year simple readable source truth standard tool across different language cluttered migration dir turn something complicated something simple almost good con data migration supported something go wrong fix extra lifting integrate orms dialect support picnic branch conflict issue rebasing migrating production involves upfront work testing annoying column order weird parser,last yearplus solo work used tool called automig automatically turn sql schema change delta applied db plug wrote hate writing migration feel like work computer know general guarantee migration produce something equivalent schemasql orm definition sqlalchemy alembic autogenerate feature compare running db orm spec running db loop migration generation creates different set tradeoff automig analyzes sql file directly article pro con retrospective year pro written migration year love writing migration process add column fewer step win simple readable source truth long trust tool know open schemasql file whatever choose name get schema readable doc database reliable indicator database actually standard tool across different language used automig different python golang project care linked design tool decision inside codebase automig standard tool would portable skillset cluttered migration dir personal hygiene decision legit gripe migration directory favorite hundred file little good automig also faster reinitialization start git head rather applying hundred change last month turn something complicated something simple almost good con see bunch migrationrelated work longer think longer dread adding db column index capability le tool simpler declarative tradeoff one lived happily con data migration supported automig good schema migration easy way transform column run code db tool answer roadmap need able work around twostep migration default value larger user data migration involve lot design see example github ghost tool future think migration native feature db upload schema specify whether migration run upfront read tie type storage locality something go wrong fix gripe using tool maintain user legit point declarative diffing tool logic migration write sql running arbitrary sql give lot flexibility give infinite freedom choose incompatible dialect extra lifting integrate orms automig generate sqlalchemy definition schemasql use single language framework defining db orm probably useful specified using sql dialect support picnic switched postgres sqlite project pain support different dialect ran thing like different support transactional ddl since first wrote seen comment skeema migra committers tool support one db mysql postgres respectively rely db heavy lifting lot positive approach branch conflict issue rebasing nonlinear git history source error automig opaque switch work around manuallyspecified migration likely better branch especially need support outoforder change encountered problem solo codebases see issue big team sometimes deploy nonmain branch migrating production involves upfront work use main backend language framework run migration life easy automig extra requirement need bundle git folder ie whole history ran lambda also bundle git binary ubuntu binary work spent whole day learning build git statically realized could grab centos one good news work done per platform testing annoying automig work committed change sometimes round git commit amend thing work column order automig guarantee column order add column add column b caused issue backup restore problem tool necessarily approach using git sql source truth weird parser parser library easily confused especially uppercase lowercase name look like keywords multilayer use python sqlparse wrap ie janky issue approach much specific tool use cause problem
33,Lobsters,vcs,Git & VCS,Git-tagup: A Tool to Find & Tag Git Commits Based on Version Numbers in Commit Messages,https://initialcommit.com/projects/git-tagup,gittagup tool find tag git commits based version number commit message,semver gittagup bitbucket page python package index pypi,find tag git commits based version number commit message like often add version number commit commit message something like git commit bump version still like probably forget create tag new version push remote repository end project many untagged commits month year ago never get real tag created gittagup conveniently search active branch git repository find untagged commits containing version number commit message one find tool asks user whether want create tag currently semver versioning format supported happy take request format happy tagging python greater pip package manager python install gittagup browse git repository want add tag usually project root directory containing git directory cd pathtoprojectroot run program version number found commit message answer prompt create tag n skip nt forget push new tag remote done cd pathtoprojectroot gittagup create tag commit message bump version ynq n create tag commit message bump version ynq create tag commit message bump version ynq q learn project gittagup bitbucket page python package index pypi
34,Lobsters,vcs,Git & VCS,gitqlite is a tool for running SQL queries on git repositories,https://github.com/augmentable-dev/gitqlite,gitqlite tool running sql query git repository,askgit installation installation instruction coming soon using docker docker hub running command pwd running command stdin usage table example query,askgit askgit commandline tool running sql query git repository meant adhoc querying git repository disk common interface sql alternative patching together various shell command execute query look like many commits authored user emailcom select count commits authoremail user emailcom indepth example documentation found installation installation instruction coming soon go get v tagssqlitevtable githubcomaugmentabledevaskgit use go tool chain install binary gobin gobin pwd go get v tagssqlitevtable githubcomaugmentabledevaskgit produce binary current directory using docker build image locally using docker docker build askgit latest use official image docker hub docker pull augmentableaskgit latest running command askgit operates git repository repository need attached volume example us bash builtin command pwd current working directory pwd print absolute pathname current working directory docker run v pwd repo ro askgit select commits running command stdin piping command via stdin docker command need told run noninteractively well attaching repository repo cat querysql docker run v pwd repo ro askgit usage askgit h output date usage instruction version cli typically first argument sql query string askgit select commits current working directory used path git repository query default use repo flag specify alternate path even remote repository reference http ssh askgit clone remote repository temporary directory executing query also pas query via stdin cat querysql askgit default output ascii table use format json format csv alternative see h option table commits similar git log commits table includes commits history currently checked commit column type id text message text summary text authorname text authoremail text authorwhen datetime committername text committeremail text committerwhen datetime parentid text parentcount int treeid text addition int deletion int file file table iterates file commit history default checked repository full table every file every tree commit history use commitid column filter file belong work tree specific commit column type commitid text treeid text fileid text name text mode text type text content text ref column type name text type text hash text example query return commits history currently checked branchcommit repo return deduplicated email address commit author select distinct authoremail commits return commit count every author email select authoremail count commits group authoremail order count desc excluding merge commits select authoremail count commits parentcount group authoremail order count desc expensive query iterate every file every tree every commit current history output set file tree certain commit select file commitidsomecommitid commit short id select file commitid like shortenedcommitid return author email line addedremoved ordered total number commits history select count commits sum addition addition sum deletion deletion authoremail commits group authoremail order commits return commit count author broken day week select count commits count case strftime w authorwhen end sunday count case strftime w authorwhen end monday count case strftime w authorwhen end tuesday count case strftime w authorwhen end wednesday count case strftime w authorwhen end thursday count case strftime w authorwhen end friday count case strftime w authorwhen end saturday authoremail commits group authoremail order commits
35,Lobsters,vcs,Git & VCS,Manage your dotfiles with Git,https://news.opensuse.org/2020/03/27/Manage-dotfiles-with-Git/,manage dotfiles git,manage dotfiles git dot git git come rescue bash zsh setup new machine source,manage dotfiles git mar sogal poher license dot commonly referred dotfiles small plain text file contain configuration time reside home directory hidden prefixed dot hence name apps find well homeconfig directory come managing ie keep track change moving around different workstation backing different solution good old usb stick rsyncing syncing copying central folder symlinking supposed found article focus manage efficient simple way git git come rescue example use homedotfiles git repository feel free change need first initialize repository git init bare homedotfiles git command use refer repository advised create alias alias dotfilesusrbingit gitdir homedotfiles worktree home add line shell configuration file homebashrc use bash homezshrc use zsh next configure git show untracked file required use entire home work tree dotfiles config local statusshowuntrackedfiles point able check state repository add configuration file commit wish example add bashrc dotfiles add bashrc dotfiles commit added bashrc add remote repository selfhosted git public one push change dotfiles remote add origin git yourgitexamplecomdotfilesgit dotfiles push setup new machine set configure new system dotfiles repository first clone locally online repository git clone bare git yourgitexamplecomdotfilesgit homedotfiles defined alias alias dotfilesusrbingit gitdir homedotfiles worktree home remember put shell configuration file apply change repository cloned system file already exist get error probably happen file created default opensuse installation user account creation homebashrc file worry rename delete time change configuration file tracked git remember commit push change source following article used source article thanks lot author
36,Lobsters,vcs,Git & VCS,git commit accepts several message flags (-m) to allow multiline commits,https://www.stefanjudis.com/today-i-learned/git-commit-accepts-several-message-flags-m-to-allow-multiline-commits/,git commit accepts several message flag allow multiline commits,git documentation shared short terminal session twitter little video stephan schneider,use git command line might used message flag allows developer define commit message inline calling git commit git commit commit message biggest fan approach prefer edit commit message vim use writing commit message give opportunity doublecheck file committing today learned git commit command accepts multiple message flag turn use option multiple time git documentation includes following paragraph multiple option given value concatenated separate paragraph run following command git co commit title commit description result commit author stefan judis date tue jul commit title commit description testtxt file changed insertion deletion use multiple flag create multiline commits admit handy case edited several people pointed achieve commit structure including title body multiple line opening quote pressing enter closing commit quote git commit commit title commit description master commit title file changed insertion deletion create mode want see command action shared short terminal session twitter little video thanks stephan schneider shared little git tip company slack
37,Lobsters,vcs,Git & VCS,git-assembler: update git branches using high-level instructions,https://www.thregr.org/~wavexx/software/git-assembler/,gitassembler update git branch using highlevel instruction,basic setup git configuration assembly file reference assembly graph reference gitrerere git configuration,gitassembler best used short git alias see basic setup git configuration extra detail suggested shorthand git need run within git repository primary location configuration file gitassembly file contains instruction update defined branch performing merge rebase operation complete list command available assembly file reference default without argument gitassembler read assembly file display graph representation defined branch without performing action cat gitassembly merge master test git master test graph layout documented assembly graph reference dryrunn flag display instead flattened list operation performed order current repository git dryrun gitassembler merging test master actually perform operation assemblea flag always required true also create recreate flag seen conjunction dryrun cat gitassembly base new master merge new bugfix git dryrun gitassembler branch new need creation master git dryrun create gitassembler creating branch new master gitassembler merging bugfix new default defined branch either displayed updated list explicit target given command line cat gitassembly merge b merge c git b c git c git av gitassembler merging c working large project list default target overridden assembly file nonexistent branch ignored unless dependedon one requested target branch exist defined also ignored magic introduced gitassembler involving conflict conflict arise merge operation gitassembler drop branch merged onto assuming simple merge conflict cat gitassembly merge master git av gitassembler merging master automerging test conflict content merge conflict test recorded preimage test automatic merge failed fix conflict commit result u test error committing possible unmerged file hint fix work tree use git addrm file hint appropriate mark resolution make commit fatal exiting unresolved conflict gitassembler error merging master gitassembler stopping branch master fixcommit rerun gitassembler use git addcommit usual resolve conflict git merge abort cancel merge aborting merge useful example invoke different merge strategy remove offending rule disregard merge completely soon merge resolved aborted state instantly reflected git fix merge git commit git av gitassembler already date course merge aborted merge rule removed git simply try next invocation additional information displayed two branch involved current run cat gitassembly merge master merge git master git av gitassembler merging automerging test conflict content merge conflict test recorded preimage test automatic merge failed fix conflict commit result u test error committing possible unmerged file hint fix work tree use git addrm file hint appropriate mark resolution make commit fatal exiting unresolved conflict gitassembler error merging gitassembler stopping branch fixcommit rerun gitassembler master adorned graph indicate initial branch git started note name current branch git master fixing merge running git av second time continue restore initial branch fix conflict git commit git av gitassembler merging master gitassembler restoring initial branch master conflict arising rebase operation drop branch rebased work exactly fix conflict either rebase continue rebase abort normally would situation get complex stage lesser extent base involved somewhere graph since staging branch deleted recreated every update merge conflict keep repeating unless conflict handled within branch merged always desired situation gitrerere required see git configuration basic gist rerere enabled record conflict resolved apply solution whenever happens allows merge operation repeat successfully git applies merges deterministic order declaration order order let control maximize chance successful reproducible resolution git additionally autocommit successful rerere solution operation continue without manual intervention case git rerere might lead surprising sometimes broken result conflict resolution main reason enabled default reading rerere documentation experimenting toy repository highly encouraged starting use staging branch gitassembly file set stone change adapt rule whatever make work better adapt rule according branch working remove done also rebase everything mean pushedstate aside still work plain merges rebase cleanup mix two method intervening manually contrast similar tool gitassembler stateless care get current repository state branch layout defined gitassembler make sense work
38,Lobsters,vcs,Git & VCS,Building Subversion,https://corecursive.com/054-software-that-doesnt-suck/,building subversion,episode cv software equivalent telephone book sorted telephone number cv backward would look like right,software tool get way episode jim discus build great developer tool started worst software use every day transcriptthis machinetranslated transcript podcast page episode hereintroductionjim basically coworker mine said cv repository indexed backward cv software equivalent telephone book sorted telephone number funny lunch comment right basically thinking know dish every night thing accept something like say well wait second cv backward would look like right adam welcome corecursive adam gordon bell today topic would look like cv backward cv source control management tool think early gitjim blandy guest brings u story making cv better would guess number feature current source control tool probably use every day influenced jim work also think interesting insight build great developer tool also recognize improvement existing tool topple current market leader something done twicewe started story year year mosaic web browser came know email around time web fairly young cv popular opensource source control system network transparent cv communejim went trip going go europe japan came back u job apartment friend gotten job friend carl fogel gotten job working university illinois urbana champaign geneediting mode emacs emacs visit file full genetic data emacs bring apply color like select know rectangle stuff like thatbut living illinois lab uiuc living indiana collaborating across net way collaborated across net shipped people patch emailed people patch ftp source network transparent version control thing old friend college gone work silicon valley startup except want live silicon valley want live commune hill virginia ran frame relay line commune know rural telephone access right commune everybody else making hammock nut butter hacking code silicon valley income probably significant portion whole commune income realized kind lousy collaboration distance name jim kingdon amazing hacker sort disappeared world know amazingly talented took cv version control system like said designed situation lot people using computer right cv repository one part file system shared user people checking copy tree home directory making local change update commits right activity one machine one local file system people would share computer back jim kingdon took cv version control system designed work locally basically sheer force intellectual ripped apart client server invented protocol go like protocol even like know minimize round trip time keep latency amazing stuff right program designed network program turned network program used kerberos authentication real network security back used collaboration startup working signus solution silicon valley know amazing thing publish used ithe wrote maybe people company used heard done trying collaborate friend carl illinois wrote said hey know think could get copy code say oh yeah sure one condition ask question basically want get support thing think probably publish first placeadam make sense yeahjim said oh yeah sure fine know give copy sends tarball source immediately asked question like told ask questionscarl started using like amazing right set server machine somewhere checkout get source work locally nobody get way commit poof everybody else seeright whole new world know blown away much better collaborate net using network transparent cv adam since cv gpl jim take improvement release world like forkwaiting table drug testingjim first official cv mainstream cv distribution like oh yeah interesting work know idea going thing everybody nobody like existing code everybody like imaginary code imaginary code always perfect adam yeah like already done use itjim yeah could use want wanted thing know month becomes clear network transparency network transparency basically everybody switching cyclic cv called capitulate say okay guess merge change network transparent cv came know within year opensource world using think kind collaboration happen open source know distributed teamsit people everywhere get volunteer idea coming physical locality took opensource world storm within year pretty much cv standardadam network transparent cv became standard open source corporate world jim got interest contracting work helping people understand use jim one biggest thrill ever got going around different company government group teaching use cvsand got invitation teach day think threeday course goddard space flight center east coast teaching folk satellite development weather analysis remember one day lunch one said know bug cv wonder could help u said sure walked cubicle aes say well okay let let check something check tree cv say well say oh stuff analyzes satellite data satellite image analyze hurricane predict going go something like seeing checkout right cv list file downloads server check like whoa actually helping people stuff know right person trying know track hurricane made thing able really exciting feeling really interested software using get something done able itcyclic softwareadam jim buddy carl let good opportunity go waste start business cyclic software offer support cyclic cv networktransparent source control jim little business failed die first four horrible way business always die paid salary earned back initial investment actually made little bit money beyond customer one client goldman sachs turned goldman sachs using cv internally really liked network transparent cv goldman sachs wanted u port think wanted reserved checkout something like thatand two guy basically grad student age like okay going write contract goldman sachs go consult lawyer stuff like send goldman sachs little contract know full legal department come bear thing everything wrote becomes exhibit big whatever page boilerplate adam faxed lawyer jim well faxed think emailed u maybe snailmailed snailmailed u think day fax would reasonable might fax machineso reading contract get paragraph say contractor agreed submit goldman sachs request drug testing know come carl square could possibly geti mean even drink right moral issue style would completely passed test ever could ever get u take also obnoxious right care go back carl like back room carrying contract say carl want u take drug test carl say oh sign wait table like best write goldman sachs email back say look great ready sign however paragraph got go without comment get back another copy contract goldman sachs paragraph gone sign work hear hacker goldman sachs later people ended work said told u later like nobody ever done nobody ever complained cool yeah kinda nice kind thing two right mean family time employee start worry peopleand like choice something walk away two really nice really whatever please anything want adam let fast forward company success eventually move thing jim joined sigma solution using cv every day start notice certain thing tool like jim actually interesting think repository like get repository something like think database right database put know commits right check tree right one common thing going want version control system gon na say hey version code want pull change happened since please send diffs prior date current dateideally three file touched old date new date get data three file backing database organized way make efficient common thing diff query diff two revisionsthis checkout merge right common operation way cv stored data gigantic directory tree shaped way source managing except fit individual file rcs file held different revision connection set revision stored one file set revision stored another file commit touched two file indication anywhere data two file two commits anything might log message date would samebut indication single atomic commit adam something take granted right atomic commits without atomic commits introduce inconsistency issue especially somebody slow operation like creating branch going file file somebody else pushing change time guaranteed branch get file commit since happening parallel interleaved also case lack structured atomic commit actually made implementation slower jim cv update way cv decided change shipping would scan entire directory tree would open every single file directory tree see whether might changed since date askedand actually update ship server current version file would actually check see whether file version would ship diffs back terrible right supposes got file three changeddo check every one file somebody poll data organized way give sort centralized indication like know changed performance bad sigma solution want cut branch would announce ahead time would schedule branching want anybody else committing branching would totally screw thing right okay friday pm going cut branch activity would stop access server would cut offthey would start branch remember branch requires walking however know hundred thousand file got know sickness gcc gdb canoe assembler canoe linker basically entire new toolchain work know hundred thousand filesand would walk across hundred thousand file make branch every single one would take like know minute cut branch say okay opened branch everybody start working crazy adam seem bit crazy right jim talking cv performance degraded based size repository based size changeset something kind take granted today source control performance related size changeset change one file cheap change file expensive branch changing file free enter rewriteadam jim thinking design better system buddy carl got approached company looking shake corporate development introducing idea open source software development jim around time cathedral bizarre essay written lot company saying wait second internal software development dynamic see going dynamic make work well bring house development jim collabnet interested saw cv knew sucked willing fund writing replacement itand approached carl carl approached know exactly happened anyway ended working carl started carl already started drafting idea replacement cv something friend mine said cv worst piece software use every day interesting sentence got word worst right worst piece software got word every day right like bad using every day answer need badly willing put crap somebody say piece software good target rewriteadam mythical rewrite jim started planning called subversion started talking everyone whole thing predates git mercurial five six year wayjim told sickness people oh yeah think person going able cut branch pretty much instantaneously constant time believe methey said believe see cutting branch nothing creating name particular revision free operation big big deal yeah already started working new design subversion collabnet said great fund get people network stuff adam step missing something like come design like email carl say idea jim yeah design repository basically coworker mine said yeah cv repository indexed backward cv repository software equivalent telephone book sorted telephone number exactly wrong thing funny funny lunch comment right somebody say like oh funny really true thing accept something like say well wait second cv backward would look like right proper organization version control repository basically thinking know dish every night ended coming design actually people come original read thing turn think perforce actually similar repository structure subversion basically idea want share whenever commit right commit change say one two file want recognize directory tree commit directory tree commit almost identical difference two file changed actually want want share much structure two tree possible go ahead represent tree share much structure possible adam sound like persistent data structure jim yeah mean persistence like way functional people use word persistent persistent data structure right adam terminology confusing thinkjim persistent sense saved disk going go away exit program also persistent functional programming sense adam yeah like immutable tree whatever programming language choice make change cause immutable like make copy element need change kind update pointersjim exactly ever heard chris book functional data structure adam seen picture one friend bought said understand itjim bad chris go stuff hard understand get kinda minded blowing think good worthwhile investment lot algorithm play well incremental context right making series small incremental change large data structure way persistent data structure trying really hard share much data possible really work favor building subversionadam idea happens next jim well idea carl started working carl get funding collabnet fantastic suddenly guy web dev expert protocol u ended getting office chicago traveling indiana chicago meet brian fitzpatrick ben collin sussmanand agreed early wanted break nice reusable set library right going want work subversion working directory working directorylibrary access metadata want speak protocol library protocol want know different backends storage interface back end adam design couple working jim yeah five u thinkadam split module like work working directory part jim yeah working server part people took sort command line part somebody took working directory library thing like think think know another kind project much careful drift one person understanding design another person understanding design thing building exist yet case subversion clear goal become properly designed modern cv net transparent cv fact imitating replacing something already existed think created lot clarity people mind think actually project could undertaken lot le coordination would normally need something sizeadam yeah make sense like existence proof something like existing knew well using assume using subversionjim yeah use cv first day started able dog food really great day right celebrating successadam guy like celebrate like distributed jim oh would go chicago great office think called printer row chicago whole bunch old building used full printing press newspaper stuff cage elevator whether could see elevator shaft iron bar cage looked could see gigantic relay controlled elevator relay driven elevator yeah oh partied would drive would drive chicago quite frequently bet whoever wrote first security hole buy everybody else dinner know whether want call celebration know losing bet something like worked year actually found kind exhausting year really wanted go back working gdb think subversion started selfhosting within next year thatadam jim designed new version control system succeeds take world subversion atomic commits free branching performance proportional change size great change quickly replaces cv becoming leaderjim rose height next like within three four year think really nice got recommendation consulting newsletter like gardener group gave u know listed u essential tool best breed something like really funny like know domarketing research idea know want hacker know serious businessy industry newsletter recommending kind ridiculousadam gardner quadrant something probably graphic showed jim yeah exactly good quadrant crazy adam probably somewhere meeting people suit figuring like far left far right jim yeah silly people attention know way work adam within five year started replaced version control system git mercurial although probably people still using subversion right jim really think shouldjim yeah actually somebody come try talk consulting subversion great idea end tried really talk said people developing anymore actively supported bring developer want hire developer work project gon na know everybody know git funny position trying talk somebody using something one original designer yeah think anybody using anymoreadam mean sad jim git mercurial sad know yeah mean nice thing set standard usabilityi think subversion time became popular set standard usability people willing put got started terrible cli mildly horrible cli right option sort ferociously confusing overwhelmingly confusing know think response pressure welldesigned interface like mercurial beautiful cli subversion fine cliso think know could influence lot different way influence outlasts use actual code adam subversion year old year jim want u use influence still question wanted ask jim subversion addressing shortcoming cv shortcoming subversion git helped address subversion problemsjim know git us content hash identify file content identify directory contentsand beautiful model hash really essential distributed nature git mean basically got data matter got data everybody tell got branch need sent data anymore somebody suggested subversion actually assigning fresh number node created somebody basically said well know using content hash worst decision ever made think term impact said rename modify file rename way tell old version file new version file related kind vindication cite even git really know sort look file say yeah look close seems right basically give cheesy parameter say hard try look themand kluge reconstructs post facto like know even know anything happened sort guess must rename even total kluge mergeadam know started using git people talking distributed case guess happen big thing seemed different like merging like free sudden like merging branching like guy answer think like like right seem like reason distributed mixed merging better except dojim kind sad story great thing merging git pick example mercurial great thing merging git like merge merge say right say parent parent new chainset got parent right restriction merge mean mistake made subversion thought merges actually mean something textually right actually way say reconciliation change change think really overthought lot need good textual merge tool use whatever heuristic want whatever heuristic work well project shelf merger great job case want specialized tool drop whatever want say okay end story adam interesting like almost problem decide take kind define thing get punted like let worry jim absolutely building tool jobadam better merging branch git distributed content hash better merging really big difference subversion huge time though imagine developer behind tool developer using many time day must like celebrity jim said like thoughjim although remember one time moved another company using subversion hold copy entire neutral chain gcc gdb bfd linker assembler forth think also copy c library large repository used every day fine founder company said one day know know jim subversion suck said hope understand way mean said oh definitely get mean thank much proud adam greatest compliment jim really though want somebody say used stuff every day okay likeadam want want jim oh know everybody want get five star everything like mean anything actually five star right like go bike shop trading bike treat decently right gave five star wanted transaction like skipping home right transaction right think lot software right get help get work done heritage help get day adam especially developer tool right tool like definition tool like want hammer something crazy want hammerjim want maximize engagement hammer right stupid want maximize engagement version control system want job get way basically somebody say know suck actually pretty much exactly right thingadam right jim first threetime guest writer software suck thing jim story stick beside guy commune know making nut butter also building distributed software thing stick jim question worst software use every day also idea software tool get way interesting nobody ever say right everybody want change world like try build thing suck liked episode like podcast know tell coworkers really know podcasts spread people say word mouth know tell friend tell open podcast app search corecursive search adam gordon bell hit subscribe next time thank much listening
39,Lobsters,vcs,Git & VCS,"ydiff: side-by-side, character-level diffs in the terminal",https://github.com/joshuarli/ydiff#joshuarlis-ydiff-fork,ydiff sidebyside characterlevel diffs terminal,joshuarli ydiff fork ydiff screenshots performance installation,joshuarli ydiff fork ydiff distilled core heavily modified stripped specific feature subset assumes read git unified diffs stdin sidebyside rendering modified visually le noisy screenshots look like compared automatic width detection failed lol performance definitely smart enough port performant language made quite fast git log patch pv tmpsentrygitlog rwr r josh josh jun tmpsentrygitlog ymattwydiffpy wrap sidebyside coloralways pagercat tmpsentrygitlog pv devnull ydiff tmpsentrygitlog pv devnull also optimized build relatively clean cython binary run bit faster importantly faster start ydiffbin tmpsentrygitlog pv devnull hyperfine warmup ydiff devnull benchmark ydiff devnull time mean σ m m user m system m range min max m m run hyperfine warmup ydiffbin devnull benchmark ydiffbin devnull time mean σ m m user m system m range min max m m run installation download anywhere path set following git config git config global pagerdiff ydiff le git config global pagershow ydiff le git config global pagerlog le git config global colordiff never also recommend setting lessfsxr le use flag default could alternatively put git config optionally c compiler compile cython binary make ydiffbin
41,Lobsters,vcs,Git & VCS,Better git diff outputs with git submodules,https://www.jvt.me/posts/2018/05/04/git-submodule-diff-formats/,better git diff output git submodules,git submodules stack overflow format format format,recently playing around git submodules little bit frustrated output git diffs diff git avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog index avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog subproject commit subproject commit trying write commit message via viewing diff writing commits git commit verbose found nothing really useful diff describe writing commit gain understanding happened submodule run git log oneline centrealign site subtitle make site subtitle bold would added commit message theme subtitle change centrealign site subtitle make site subtitle bold however getting annoyed discovered option thanks stack overflow make much easier view change withdiff formatperhaps useful option actual diff change within submodule submodule vendorgitstartbootstrapcleanblog diff git avendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss bvendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss index avendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss bvendorgitstartbootstrapcleanblogassetsvendorstartbootstrapcleanblogscssmastheadscss headermasthead margintop subheading textalign center fontsize fontweight fontweight bold lineheight display block margin set default running either git config global diffsubmodule diff git config global e adding short formatshort simply show commit beginning end stage diff git avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog index avendorgitstartbootstrapcleanblog bvendorgitstartbootstrapcleanblog subproject commit subproject commit git default always setting run either git config global diffsubmodule short git config global e adding log formatalternatively get log format nice putting changelogcommit message submodule vendorgitstartbootstrapcleanblog centrealign site subtitle make site subtitle bold set default running either git config global diffsubmodule log git config global e adding
42,Lobsters,vcs,Git & VCS,Did Github Change Their Repo Interface?,https://github.com/awesome-selfhosted/awesome-selfhosted,github change repo interface,awesomeselfhosted saass free network service web application nonfree contributing analytics personal dashboard ackee demo source code awstats source code countly source code druid source code fathom analytics freshlytics goaccess source code goatcounter source code hastic source code kiss source code koko analytics source code matomo source code offen demo source code open web analytics source code posthog source code rakam source code rudder source code serposcope source code shynet snowplow source code chartbrew demo source code metabase source code redash demo source code superset source code archiving digital preservation dp content management system access memory atom demo source code archivematica demo source code archivebox source code archivesspace demo source code collective access providence source code ckan source code automation internet thing iot accelerated text activeworkflow alltube youtubedl website source code amiunique source code beehive betanin couchpotato source code episode source code feedmixer demo gekko source code headphone healthchecks source code homebankconverter demo huginn kibitzr source code lazylibrarian leon demo source code lidarr source code medusa source code nefarious pyload source code radarr source code sickrage source code sonarr source code triggerhappy source code demo youtubedlmaterial zenbot zeroqueue blogging platform static site generator content management system weblogmatrix antville source code blog demo source code bludit demo source code cadmus canvas source code chyrp lite source code dante story source code dotclear source code formtools source code ghost source code hexo source code hotglue demo source code htmly demo source code known source code plume source code pluxml source code postleaf source code bookmark link sharing dyubookmarks demo espial firefox account server source code firefox sync server geekmarks source code golinks demo linkding demo lobster source code fuss bookmark source code pinry source code reminiscence shaarli demo shiori unmark ubookmark demo source code xbrowsersync source code ymarks calendaring contact management groupware http enwikipediaorgwikicomparisonofcaldavandcarddavimplementations baïkal source code calendarserver source code calypso source code davical source code davis decsync cc source code etesync server source code radicale source code sabredav source code xandikos source code agendav source code infcloud demo source code etesync web demo source code communication system custom communication system centrifugo demo cherry darkwireio source code freenet source code friend source code gnunet source code gotify source code client hawkpost source code jami source code jitsi meet source code jitsi video bridge source code kandan source code kchat leapchat letschat source code librenews source code live helper chat source code mattermost source code miaou source code mibew demo source code mumble source code client nodechat ots source code pushbits rallly source code retroshare source code rocketchat source code shhh spectrum source code spreed source code synapse matrix source code matrix console web source code element source code syndie textbelt tox source code tuber source code wbo demo zeronet source code zulip source code email complete solution dockermailserver excision mail source code inboxen source code homebox iredmail source code mailcow source code mailu demo source code mailinabox source code modoboa source code qmailtoaster source code simplelogin source code simple nixos mailserver wildduck source code mail transfer agent chasquid source code courier mta source code exim source code haraka source code mailcatcher source code maildrop mailhog opensmtpd source code postfix qmail source code sendmail slimta source code mail delivery agent cyrus source code dovecot source code piler source code mailing list newsletter dada mail source code listmonk source code mail good mailman mailtrain source code mailyherald source code mautic source code phplist source code postal schleuder source code sympa webmail client irc irc convos demo source code inspircd source code dispatch demo kiwi irc demo source code ngircd source code lounge demo source code quassel irc source code robust irc source code tiny tiny irc source code weechat znc source code sip sip ipbx asterisk astpp source code freepbx source code freeswitch source code fusionpbx source code homer source code kamailio source code kazoo source code ostel routr demo source code sipxcom source code demo source code wazo source code social network forum abilian sbe anahita source code bbpress source code bootcamp source code buddycloud source code buddypress source code cartulary commento coral source code diaspora demo source code discourse demo source code dyucomments demo epochtalk elgg source code flarum source code flaskbb source code fluxbb source code friendica source code glosa gnu social source code gosora source code hubzilla source code humhub source code isso source code lemmy source code loomio source code mastodon source code misago source code misskey source code movim source code mybb source code nodebb source code orange forum source code ossn source code oxwall source code patchwork phpbb source code pixelfed source code pleroma source code ppnet pumpio source code demo source code satellity source code scoold demo source code simple machine forum source code socialhome demo source code talkyard demo source code tokumei source code thredded demo source code twister source code twtxtnet source code demo vanilla forum source code zusam demo source code xmpp extensible messaging presence protocol xmpp server ejabberd source code kontalk source code metronome im source code mongooseim source code openfire source code prosody im source code tigase xmpp web client candy source code conversejs source code jsxc source code salut à toi source code conference management bigbluebutton demo source code conference organizing distribution cod source code frab source code indico demo source code open conference system ocs demo source code opencfp openconferenceware source code osem demo source code pretalx source code content management system cm blogging platform static site generator alfresco community edition source code apostrophe demo source code cm demo source code backdrop cm source code bigtree cm source code bolt cm demo source code cm made simple source code cockpit source code concrete cm source code contao source code couchcms source code directus source code drupal source code elabftw demo source code expressa getsimple cm source code impresspages cm demo source code joomla source code keystonejs demo source code modx source code neos source code noosfero october source code omeka demo source code pagekit source code pico source code pimcore source code plone source code processwire source code propertywebbuilder demo source code publify source code redaxo source code redaxscript demo source code roadiz source code silverstripe demo source code spip source code squidex demo source code strapi source code subrion demo source code textpattern demo source code typemill source code source code umbraco source code wagtail source code wondercms demo source code wordpress source code writefreely source code openeats demo recipe ecommerce attendize source code bagisto demo source code coreshop source code drupal commerce source code magento demo source code microweber demo source code openbazaar source code opencart source code open classified source code open source po source code oxid eshop demo source code open food network source code prestashop demo source code pretix source code reaction commerce source code saleor demo source code sharetribe source code shuup source code shopware community edition demo source code spree commerce demo source code sylius demo source code thelia demo source code woocommerce source code dns http dns document management casebox source code docat docspell source code edpaper everydocs mayan edms source code papermerge source code paperless teedy source code ebooks integrated library system il content management system archiving digital preservation calibre demo source code bicbucstriim source code calibre web cop demo source code epube source code komga source code mango evergreen source code koha demo source code rero il demo source code dspace source code eprints demo source code fedora common repository source code islandora source code samvera hyrax source code federated identityauthentication http identitymanagement feed reader commafeed source code feedbin source code feedhq source code freshrss demo source code client jarr demo source code kris feed demo source code leed source code leselys litereader demo moonmoon source code miniflux source code newsblur source code newsdash newspipe demo reader readerself source code r monster selfoss source code sismics reader demo source code stringer temboz tiny tiny r demo source code wind demo source code fulltext r source code politepol demo r fulltext proxy r merger rssbridge screaming liquid tiger file sharing synchronization groupware distributed filesystems http distributedfilesystems file transfersynchronization git annex source code kinto source code mydrive demo nextcloud demo source code opensshsftp source code owncloud source code client pydio source code samba source code seafile source code sparkleshare source code syncany syncthing source code unison zpush activesync source code peertopeer filesharing bittorrenttracker source code cloudtorrent dat project source code filepizza source code firefox send instantio demo magnetico magnetissimo opentracker source code peerflixserver qbittorrent source code rartracker torrentscsv transmission source code object storagefile server minio source code zenko cloudserver source code singleclickdragndrop upload bozon coquelicot source code droppy elixire source code client fibridge demo fileshelter demo file sharing goploader source code imgpush ipfspics jirafeau demo linxserver demo lufi demo source code lutim onionshare pictshare source code plik demo pomf projectsend source code psitransfer share sharry uguu source code upste source code xbackbone youtransfer demo source code beauty transfersh source code web based file manager apaxy source code directorylister source code encode explorer demo source code explorer source code filestash demo source code gobrowser gossa demo source code ifm resourcespace demo source code sprutio demo source code surfer tagspaces demo source code game dark room demo agario clone battlecraft elevatorsaga source code hextris demo legend green dragon demo lila source code mindustry source code minetest source code source code client nodevirtualgamepads posio piqueserver client quakejs quizmaster rconcli sourcebans source code teeworlds source code tournamentmango gateway terminal sharing asciinema demo gateone source code guacamole source code neko oneye demo source code osjs demo source code tmate source code groupware bluemind source code citadel source code corteza demo source code cozy cloud source code egroupware source code espocrm demo source code horde demo source code kolab source code kopano demo source code openmeetings source code sogo demo source code suitecrm source code tine demo source code zimbra collaboration source code human resource management hrm admidio demo source code icehrm demo source code orangehrm source code sentrifugo source code timeoffmanagement demo source code internet thing iot devicehive demo source code domoticz source code client fhem source code gladys source code home assistant demo source code mozilla gateway source code node red source code openhab source code thingsboard demo source code thingspeak demo source code knowledge management tool mindmaps demo mind demo tagtool demo source code weaviate demo learning course canvas lm demo source code chamilo lm source code edx source code ilias demo source code mahara source code moodle demo source code open eclass demo source code openolat demo source code relate source code rosariosis demo source code sakai demo source code map global positioning system gps awesomegis graphhopper source code hauk demo mapbbcodeshare demo open source routing machine osrm demo source code nominatim source code opengts demo source code openstreetmap source code client opentripplanner source code orion demo owntracks recorder owntracks tileserver gl source code tileserver php traccar demo source code μlogger demo umap source code medium streaming http enwikipediaorgwikilistofstreamingmediasystems http enwikipediaorgwikicomparisonofstreamingmediasystems multimedia streaming darwin streaming server source code gerbera source code homehost icecast source code client jellyfin demo source code karaoke forever source code mistserver source code readymedia source code rygel source code üwave demo source code audio streaming ampache demo source code airsonic source code client azuracast source code audioserve beet source code black candy compactd friendsradio demo funkwhale demo source code gnu fm source code gonic groove basin koel source code koozic demo source code libretime airtime source code lm demo moode audio source code mopidy source code moped mopidy musicbox mopidyparty mpd source code client ympd source code mstream source code musikcube source code navidrome music streamer demo source code client polaris snapcast sonerezh demo source code stretto demo client volumio source code video streaming bluecherry source code crtmpserver cytube demo hellowlol htpc manager fork invidious demo myflix oddworks open streaming platform source code peertube source code rapidbay restreamer source code shinobice streama synctube demo tube demo source code videolan client vlc source code zoneminder source code miscother alerthub anchr source code anuko demo source code asciiflow source code blynk source code cachet demo source code cstate demo cup source code cyberchef demo digitalcurrency demo domainmod demo source code flox demo formspree demo source code geneweb demo source code graphvl secure password demo googlewebfontshelper demo ytdlwebserver journal kimai demo source code king phisher mailygo monica source code musical artifact source code nnmm notica source code ombi demo source code otranscribe source code passcheck source code reactive resume demo source code releasebell source code revealjs demo source code revive adserver source code sane network scanning source code teslamate trello burndown vimbadmin demo source code web font repository webtrees demo source code money budgeting management http itassetmanagement akaunting source code btcpay server demo source code boodle budget app dot ledger demo source code economizzer demo source code exmoney firefly iii demo source code family accounting tool fava demo source code galette source code grr source code hospital run demo source code inventaire source code invoice ninja demo source code invoiceplane ihatemoney demo source code kresus demo source code ontrack partkeepr demo source code silverstrike demo source code stockazng monitoring http monitoring http metric metriccollection notetaking editor wikis bulletnotes source code boostnote source code codimd source code dailynotes dillinger source code dnote source code docpht demo source code drawio source code joplin source code leanote demo source code markdown edit source code meemo source code minimalistwebnotepad mininote opennote demo overleaf source code paperwork source code plainpad demo source code savepad standard note demo source code turndown source code trilium note turtl source code wreeto source code writing source code office suite collabora online development edition source code cryptpad source code ethercalc source code etherpad demo source code infinoted gobby source code onlyoffice source code phpoffice webodf source code password manager bitwarden source code bitwardenrs keeweb source code padloc source code passbolt source code passit demo source code passwall psono demo source code shaark syspass demo source code teampass source code pastebins bepasty source code bin cryptonote source code edpaste fiche demo filite demo fugacious source code gist demo hastebin demo source code mojopaste demo source code notehub paste source code pastebin demo pastebin pb privatebin demo source code purritobin demo sharppaste snibox demo source code snipt socksbin demo stikked demo personal dashboard monitoring baby buddy demo dashmachine habitica source code heimdall source code hiccup source code homepage homer organizr personal management system demo simpledash demo tipboard source code wger demo source code photo video gallery chevereto free source code coppermine demo source code cumulusclips demo fussel gallery cs source code lychee source code mediagoblin source code ownphotos photato photofloat demo photolight photonix demo source code photoprism source code photo stream demo photoview demo pigallery demo source code piwigo demo source code plumi source code quru image server demo source code sigal ubergallery source code zenphoto source code poll event calagator source code clerk dudle demo source code feedka demo fider demo source code framadate demo source code hitobito demo source code jd esurvey source code kyélà demo source code limesurvey demo source code meetable demo source code open event server phpback demo source code booking scheduling alfio demo source code booked demo source code easy appointment demo source code proxy imgproxy inlet iodine source code microproxy miniproxy source code nginx proxy manager source code phpproxy demo source code pomerium source code pound privoxy redbird sish squid source code swiperproxy source code tinyproxy source code traefik source code read later list nunux keeper source code wallabag demo source code resource planning farmos source code grocy demo source code tania enterprise resource planning erpnext demo source code ledgersmb demo source code odoo demo source code ofbiz source code tryton demo source code search engine software development project management ticketing task managementtodo list awesomesysadmincode review bonobo git server source code fossil goodwork demo gitblit source code gitbucket source code gitea demo source code gitlab demo source code gitlist source code gitolite source code gitprep demo source code git webui gogs demo source code kallithea source code klaus lavagna source code lazylead source code leantime source code octobox source code openproject source code pagure demo phabricator demo source code phproject demo source code projeqtor demo source code backlog demo redmine demo source code rhodecode demo source code scm manager source code sorcia source code taiga source code titra demo source code trac tuleap source code uvdesk demo source code zentao demo source code bug tracker ticketing idetools atheos source code babelfish codeserver source code eclipse che source code gitpod demo source code hakatime httplaceholder icecoder demo source code j bin source code api source code koding source code ml workspace regexr source code requestbin rstudio server source code sourcegraph source code wakapi continuous integration awesomesysadmincontinuous integration continuous deployment ux testing uier selenoid source code faasserverless serverless computing wikipedia appwrite source code fx ironfunctions ironio localstack source code openfaas source code trustedcgi api management dreamfactory source code fusio demo source code hapttic hasura source code kong source code krakend source code para source code postwoman demo source code tyk source code documentation generator static site generator docstore source code flatdoc markdowntree read doc demo source code localization accent source code pootle source code traduora source code weblate demo source code zanata source code static site generator http staticsitegeneratorsnet http wwwstaticgencom task managementtodo list project management ticketing kanbana kanboard source code mytinytodo demo source code nullboard demo php tasktodo list planka demo source code restyaboard demo source code task keeper taskboard demo source code taskfreak task task taskwarrior source code tinyissue todo demo todomini demo source code track getting thing source code vikunja demo source code volition wekan demo source code ticketing task managementtodo list project management bugzilla bumpy booby source code cerb source code diamantedesk demo source code djangotodo source code flyspray source code freescout helpy demo source code huboard mantisbt demo source code opensupports demo source code osticket source code otrs source code request tracker source code sentry onpremise source code sit source code thebuggenie source code zammad source code url shortener shortcoming gshort demo kutt source code linkshortenerbot demo liteshort demo lstu polr source code reducio reducepy schort demo shlink source code client shorturl demo simpleurlshortener demo simply shorten urlshortener urlshortener demo yourls source code vpn http vpn web server http web wikis documentation generator wikimatrix wiki engine wikiindex list wiki software wikipedia comparison wiki software wikipedia bookstack demo source code cowyo demo djangowiki demo documize source code dokuwiki source code gitit gollum jingo mediawiki demo source code moinmoin source code outline source code pepperminty wiki demo pinedocs pmwiki raneto tiddlywiki source code tiki demo source code twiki demo source code wiki demo wikijs demo wikiss source code xwiki demo source code zim source code selfhosting solution ansiblenas charjabox cloud computer source code dietpi source code dockstarter source code dplatform source code flap source code freedombone source code freedombox freenas source code homelabos source code nextcloudpi source code openmediavault source code piratebox sandstorm demo source code sovereign syncloud source code ubos wikisuite source code yunohost demo source code list license external link contributing githubcontributingmd author authorsmd license creative common attributionsharealike unported,awesomeselfhosted selfhosting practice locally hosting managing application instead renting saass provider list free software network service web application hosted locally nonfree software listed nonfree page see contributing analytics personal analyticsdashboards see personal dashboard back top web analytics ackee selfhosted analytics tool care privacy demo source code mit nodejs awstats generates web streaming ftp mail server statistic graphically source code perl countly real time mobile web analytics crash reporting push notification platform source code javascript druid distributed columnoriented realtime analytics data store source code java fathom analytics simple trustworthy website analytics mit go freshlytics privacy respecting cookie free low resource usage analytics platform mit dockernodejs goaccess realtime web log analyzer interactive viewer run terminal source code c goatcounter easy web statistic tracking personal data source code go hastic hackable time series pattern recognition tool ui grafana source code pythonnodejs kiss minimalistic kiss website statistic tool source code mit go koko analytics privacyfriendly open source analytics plugin wordpress source code php matomo leading opensource analytics platform give powerful analytics formerly known piwik source code php offen offen fair open web analytics tool gain insight user full access data lightweight self hosted free demo source code godocker open web analytics google analytics matomo alternative source code php posthog open source product analytics mixpanelamplitudeheap alternative source code mit python rakam custom analytics platform allows create analytics service integrate data source web mobile iot etc analyze data sql create dashboard source code java rudder customer data infrastructure software collecting storing processing routing event data apps website dozen marketing tool analytics platform opensource alternative segment et al source code go serposcope serposcope free opensource rank tracker monitor website ranking google improve seo performance source code mit java shynet modern privacyfriendly detailed web analytics work without cooky j python snowplow every single event website mobile apps desktop application serverside system stored data warehouse available action realtime source code scala business intelligence chartbrew open platform visualise product data connects db mysql postgresql mongodb apis directly get data using builtin query builder demo source code mit nodejs metabase simple dashboarding gui query tool nightly email slack integration w postgresql mysql redshift db source code clojure redash connect type database sql nosql query data visualize create dashboard everything url shared slack hipchat integration demo source code python superset modern enterpriseready business intelligence web application source code python social medium archiving digital preservation dp back top content management system solution also feature archiving digital preservation access memory atom webbased open source application standardsbased archival description access multilingual multirepository environment demo source code php archivematica mature digital preservation system designed maintain standardsbased longterm access collection digital object demo source code python archivebox selfhosted wayback machine creates html screenshot archive site bookmark browsing history r feed source source code mit python archivesspace archive information management application managing providing web access archive manuscript digital object demo source code ruby collective access providence highly configurable webbased framework management description discovery digital physical collection supporting variety metadata standard data type medium format source code php ckan ckan tool making open data website source code python automation back top see also internet thing iot accelerated text automatically generate multiple natural language description data varying wording structure clojure activeworkflow intelligent process workflow automation platform based software agent mit ruby alltube web interface youtubedl program download video audio website source code php amiunique learn identifiable internet browser fingerprinting tool source code mit java beehive flexible event agent system allows create agent perform automated task triggered event filter go betanin music organization maninthemiddle torrent client music player based beetsio similar sonarr radarr python couchpotato couchpotato automatic video library manager movie automatic torrentnzb searching downloading processing quality want source code python episode self hosted tv show episode tracker recommender built using django mit python par r feed extract last entry sends mastodon source code python feedmixer feedmixer wsgi micro web service take list feed url return new feed consisting recent n entry given feed return atom r json demo wtfpl python gekko gekko bitcoin ta trading backtesting bot support multiple exchange cryptocurrencies source code mit nodejs headphone automated music downloader nzb torrent written python support sabnzbd nzbget transmission µtorrent deluge blackhole python healthchecks django app listens ping sends alert ping late source code python homebankconverter web app convert export bank file compatible homebank csv demo draganddrop file conversion server session based authentication automatic temporary file maintenance logging capability php huginn allows build agent monitor act behalf mit ruby kibitzr lightweight personal web assistant powerful integration source code mit python lazylibrarian lazylibrarian program follow author grab metadata digital reading need us combination goodreads librarything optionally googlebooks source author info book info python leon opensource personal assistant live server demo source code mit nodejs lidarr lidarr music collection manager usenet bittorrent user source code c medusa automatic video library manager tv show watch new episode favorite show posted magic python free node based workflow automation tool easily automate task across different service source code nodejs nefarious web application automates downloading movie tv show python pyload lightweight customizable remotely manageable downloader site like rapidsharecom uploadedto source code python radarr radarr independent fork sonarr reworked automatically downloading movie via usenet bittorrent à la couchpotato source code c sickrage sickrage automatic video library manager tv show automatic torrentnzb searching downloading processing quality want source code python sonarr automatic tv show downloader manager usenet bittorrent grab sort rename new episode automatically upgrade quality file already downloaded better quality format becomes available source code c triggerhappy open source clone ifttt bridge internet service source code python interface interact downloader simple use download open indexhtml web browser demo mit youtubedlmaterial material design inspired youtube downloader based youtubedl support playlist quality select search dark mode much clean modern design mit nodejs zenbot zenbot lightweight extendable artificially intelligent trading bot bitcoin ether litecoin mit nodejs zeroqueue lowcode queue management system let run scheduled job anything nodejs blogging platform back top see also static site generator content management system weblogmatrix antville free open source project aimed development high performance feature rich weblog hosting software source code javascript blog facebookstyled blog free extremely lightweight singleuser easy install demo php blogotext free blogengine written php using sqlite offer unmatched simplicity installation great performance source code mit php bludit simple application build site blog second bludit us flatfiles text file json format store post page demo source code mit php cadmus cadmus extremely lightweight flatfile blogging platform powered markdown mit php canvas laravel publishing platform source code mit php chyrp lite extraawesome extralightweight blog engine source code php dante story self hosted medium platform built ruby rail source code mit ruby dotclear take control blog source code php formtools powerful flexible free open source phpmysql script manage form data source code php ghost blogging platform source code mit nodejs hexo fast simple powerful blog framework powered nodejs source code mit nodejs hotglue freehand cm allows construct website directly webbrowser us flat file storage provides intuitive gui demo source code php htmly databaseless blogging platform flatfile blog demo source code php known single website content source code php plume federated blogging engine based activitypub source code rust pluxml xmlbased blogcms platform source code php postleaf open source blogging platform inline editing handlebar template beautiful user interface source code mit nodejs bookmark link sharing back top dyubookmarks singlethreadedprocess bookmark app powered leveldb uwebsockets support importing delicious chrome demo java espial opensource webbased bookmarking server haskell firefox account server monorepo firefox account formerly separated auth content source code nodejs java firefox sync server sync firefox bookmark password history tab preference python geekmarks personal bookmarking service focused speed organization using hierarchical tag source code go golinks web application allows create smart bookmark command alias pointing web browser default search engine running instance similar yubnub demo mit go linkding minimal bookmark management fast clean ui simple installation docker run raspberry pi demo mit dockerpythonnodejs lobster run link aggregation site source code ruby fuss bookmark simple software service store bookmark especially designed hacker nt need fancy interface nice api source code python pinry tiling image board system people want save tag share image video webpage source code python reminiscence selfhosted bookmark archive manager python shaarli personal minimalist superfast nodatabase bookmarking link sharing platform demo zlib php shiori simple bookmark manager built go mit go unmark open source app link mit php ubookmark ldap enabled bookmarking service demo source code python xbrowsersync open source tool syncing browser data browser device source code mit nodejs ymarks keep browser bookmark synchronized without limiting one provider wtfpl c calendaring contact management back top groupware solution also feature calendaraddress book editing synchronization see http enwikipediaorgwikicomparisonofcaldavandcarddavimplementations caldav carddav server baïkal lightweight caldav carddav server based sabredav source code php calendarserver apple inc standardscompliant server implementing caldav carddav protocol shipped macos server source code python calypso pythonbased caldav carddav server forked radicale source code python davical server calendar sharing caldav us postgresql database data store source code php davis simple dockerizable fully translatable admin interface sabredav based symfony bootstrap largely inspired baïkal mit php decsync cc serverless contact calendar synchronization using file syncing method ie syncthing nextcloud etc source code kotlin etesync server endtoend encrypted journaled personal information server supporting calendar contact data offering client source code pythondjango radicale simple calendar contact server extremely low administrative overhead source code python sabredav open source carddav caldav webdav framework server source code mit php xandikos open source carddav caldav server minimal administrative overhead backed git repository source code python caldav carddav webbased client agendav multilanguage caldav web client rich ajax interface shared calendar support source code php infcloud open source caldavcarddav web client implementation demo source code javascript etesync web etesync official webbased client ie web app demo source code typescript communication system back top custom communication system centrifugo languageagnostic realtime messaging websocket sockjs server demo mit go cherry tiny webchat server go darkwireio endtoend encrypted instant web chat source code mit nodejs freenet anonymously share file browse publish freesites web site accessible freenet chat forum source code java friend chat powered web source code mit nodejs gnunet free software framework decentralized peertopeer networking source code c gotify selfhosted notification server android cli client similar pushbullet source code client mit go hawkpost hawkpost web app let create unique link share person desire send important information nt know encrypt message encrypted browser sent email address source code mit python jami free universal communication platform preserve user privacy freedom formerly gnu ring source code c jitsi meet jitsi meet opensource mit webrtc javascript application us jitsi videobridge provide high quality scalable video conference source code mit javascript jitsi video bridge webrtc compatible selective forwarding unit sfu allows multiuser video communication source code java kandan kandan open source alternative hipchat source code ruby kchat php based live chat application php leapchat ephemeral encrypted inbrowser chat room javascript letschat self hosted chat suite written node source code mit nodejs librenews decentralized secure breaking news notification system source code python live helper chat live support chat website source code php mattermost opensource onprem slackalternative integrated gitlab source code go miaou multiroom persistent chat server source code mit nodejs mibew mibew messenger opensource live support application written php mysql enables oneonone chat assistance realtime directly website demo source code php mumble lowlatency high quality voicetext chat software source code client c nodechat notsobasic opensource chat admin feature mit nodejs ots onetimesecret sharing platform symmetric aes encryption browser source code go pushbits selfhosted notification server relaying push notification via matrix similar pushbullet gotify isc go rallly rallly free collaborative scheduling service source code nodejs retroshare secured decentralized communication system offer decentralized chat forum messaging file transfer source code с rocketchat teamchat solution similar gitterim slack source code mit nodejs shhh keep secret email chat log share using secure link passphrase expiration date mit python spectrum spectrum open source instant messaging transport allows user chat together even using different im network source code c spreed webrtc audiovideo call conferencing server web client source code go synapse server matrix open standard decentralized persistent communication source code python matrix console web web client meant showcase matrix capability reference implementation matrix standard source code javascript element fullyfeatured matrix client web io android source code javascript syndie syndie libre system operating distributed forum java textbelt outgoing sm api us carrierspecific gateway deliver text message free without ad mit javascript tox distributed secure messenger audio video chat capability source code c tuber peertopeer video chat work source code mit javascript wbo web whiteboard collaborate realtime schema drawing note demo nodejsdocker zeronet open free uncensorable website using bitcoin cryptography bittorrent network source code python zulip zulip powerful open source group chat application source code python email back top complete solution simple deployment mail server eg inexperienced impatient admins dockermailserver fullstack simple mail server smtp imap antispam antivirus etc configuration file sql database keep simple versioned easy deploy upgrade mit docker excision mail fullstack security focused mailserver based opensmtpd openbsd using ansible source code isc shellansible inboxen inboxen service provides infinite number unique inboxes source code python homebox suite ansible script deploy fully functional mail server debian unobtrusive automatic much possible focusing stability security shell iredmail fullfeatured mail server solution based postfix dovecot source code shell mailcow mail server suite based dovecot postfix open source software provides modern web ui administration source code dockerphp mailu mailu simple yet fullfeatured mail server set docker image demo source code mit dockerpython mailinabox turn ubuntu server fully functional mail server one command source code shell modoboa modoboa mail hosting management platform including modern simplified web user interface source code mit python qmailtoaster stable fullfeatured easytoinstall mail server based qmail source code multiple linux simplelogin open source email alias solution protect email address come browser extension mobile apps source code mit dockerpython simple nixos mailserver complete mailserver solution leveraging nix ecosystem nix wildduck scalable nospof mail server source code nodejs mail transfer agent mtas smtp server chasquid smtp email server focus simplicity security ease operation source code go courier mta fast scalable enterprise mailgroupware server providing esmtp imap webmail mailing list basic webbased calendaring scheduling service source code c exim message transfer agent mta developed university cambridge source code c haraka highperformance pluginable smtp server written javascript source code mit javascript mailcatcher ruby gem deploys simply smtp mta gateway accepts mail display web interface useful debugging development source code mit ruby maildrop disposable email smtp server also useful development mit scala mailhog small golang executable run smtp mta gateway accepts mail display web interface useful debugging development mit go opensmtpd secure smtp server implementation openbsd project source code isc c postfix fast easy administer secure sendmail replacement c qmail secure sendmail replacement source code c sendmail message transfer agent mta sendmail c slimta mail transfer library built python source code mit python mail delivery agent mdas software cyrus intended run sealed server normal user permitted log source code c dovecot imap server written primarily security mind source code c piler feature rich open source email archiving solution source code c mailing list newsletter mailing list server mass mailing software one message many recipient dada mail webbased list management system used announcement list andor discussion list source code perl listmonk high performance selfhosted newsletter mailing list manager modern dashboard source code go mail good open source email campaign management tool nonprofit javascript mailman gnu mailing list server python mailtrain self hosted newsletter application built nodejs mysql mariadb source code nodejs mailyherald selfhosted mailchimp alternative easily integrate site help send manage application mailing support email marketing conducting daily stream notification send user source code ruby mautic mautic marketing automation software email social source code php phplist newsletter email marketing advanced management subscriber bounce plugins source code php postal fully featured open source mail delivery platform incoming outgoing email mit ruby schleuder gpgenabled mailing list manager resendingcapabilities source code ruby sympa mailing list manager perl webmail client irc back top irc communication software convos always online web irc client demo source code perl inspircd modular irc server written c linux bsd window macos source code c dispatch selfhosted web irc client written go demo mit go kiwi irc responsive web irc client theming support demo source code nodejs ngircd free portable lightweight internet relay chat server small private network source code c lounge selfhosted web irc client demo source code mit nodejs quassel irc distributed irc client meaning one multiple client attach detach central core source code c robust irc robustirc irc without netsplits distributed irc server based robustsession protocol source code go tiny tiny irc open source ajaxpowered chat platform support irc source code phpjava weechat fast light extensible chat client c znc advanced irc bouncer source code c sip back top sipipbx telephony software asterisk easy use advanced ip pbx system voip gateway conference server c astpp open source voip billing solution freeswitch support prepaid postpaid billing call rating credit control also provides many feature source code php freepbx webbased open source gui control manages asterisk source code php freeswitch scalable open source crossplatform telephony platform source code c fusionpbx open source project provides customizable flexible web interface powerful highly scalable multiplatform voice switch called freeswitch source code php homer troubleshooting monitoring voip call source code angularc kamailio modular sip server registrarproxyrouteretc source code c kazoo kazoo opensource highly scalable software platform designed provide carriergrade voip switch function feature source code erlang ostel secure sip telephony setup zrtp encryption ruby routr lightweight sip proxy location server registrar reliable scalable sip infrastructure demo source code mit javascript sipxcom open source unified communication system source code java voip troubleshooting monitoring platform demo source code kotlin wazo fullfeatured ipbx solution built atop asterisk integrated web administration interface restful api source code python social network forum back top abilian sbe open source collaboration social networking framework platform python anahita open source social networking framework platform source code php bbpress bbpress forum software twist creator wordpress easily setup discussion forum inside wordpressorg powered site source code php bootcamp enterprise social network source code mit python buddycloud tool library service community build usertouser group social messaging app save time scale support source code java buddypress powerful plugin take wordpressorg powered site beyond blog socialnetwork feature like user profile activity stream user group source code php cartulary r reader readability tool article archiver microblogger social graph manager reading list manager php commento commento discussion platform embed blog news article place want reader add comment mit go coral better commenting experience vox medium source code nodejs diaspora distributed social networking server demo source code ruby discourse advanced forum community solution based ruby j demo source code ruby dyucomments realtime markdownenabled comment engine powered leveldb demo java epochtalk next generation forum software mit nodejs elgg powerful open source social networking engine source code php flarum delightfully simple forum flarum nextgeneration forum software make online discussion fun source code mit php flaskbb flaskbb forum software written python using microframework flask easily create new topic post send user private message also includes basic administration moderation tool source code python fluxbb fast light userfriendly forum software website source code php friendica social communication server source code php glosa open source commentary system easy integrate static page import disqus java gnu social social communication software public private communication source code php gosora gosora ultrafast secure forum software written go balance usability functionality source code go hubzilla decentralized identity privacy publishing sharing cloud storage communicationssocial platform source code mit php humhub flexible kit private social network source code php isso lightweight commenting server written python javascript aim dropin replacement disqus source code mit python lemmy link aggregator reddit clone fediverse reddit alternative built rust source code rust loomio loomio collaborative decisionmaking tool make easy anyone participate decision affect source code ruby mastodon federated microblogging server alternative gnu social source code ruby misago misago fully featured modern forum application fast scalable responsive source code python misskey decentralized applike microblogging serversns fediverse using activitypub protocol like gnu social mastodon source code nodejs movim modern federated social network based xmpp fully featured groupchat subscription microblogging source code php mybb free extensible forum software package source code php nodebb nodejs based forum software built modern web source code nodejs orange forum orange forum easy deploy forum minimal dependency us little javascript source code go ossn open source social network ossn social networking software written php allows make social networking website help member build social relationship people share similar professional personal interest source code php oxwall oxwall used wide range project starting family site custom social network collaboration tool enterprise community solution source code php patchwork decentralized messaging sharing app built top secure scuttlebutt ssb nodejs phpbb flatforum bulletin board software solution used stay touch group people power entire website source code php pixelfed pixelfed opensource federated platform alternate instagram source code phphtmlvue pleroma federated microblogging server mastodon gnu social activitypub compatible source code elixir ppnet create host social network mit javascript pumpio stream server people really want social network source code nodejs lightweight simple comment engine nt spy user embedded blog article place reader add comment demo source code mit go satellity yet another open source forum written golang react postgresql source code mit go scoold stack overflow jar enterpriseready q platform fulltext search saml ldap integration social login support demo source code java simple machine forum free professional grade software package allows set online community within minute source code php socialhome federated decentralized profile builder social network engine demo source code python talkyard create community user suggest idea get question answered friendly openended discussion chat slackstackoverflowdiscourseredditdisqus hybrid demo source code scala tokumei anonymous microblogging platform source code isc rc thredded forum featurerich simple demo source code mit ruby twister fully decentralized microblogging platform leveraging free software implementation bitcoin bittorrent protocol source code mit c twtxtnet selfhosted decentralised micrologging platform ad tracking content data source code mit go rssatom feed aggregator commandline tool web service consume rssatom produce twtxtnet feed consumption twtxt client demo mit go vanilla forum simple flexible forum software source code php zusam free opensource way selfhost private forum group friend family demo source code php xmpp back top extensible messaging presence protocol software xmpp server ejabberd xmpp instant messaging server source code erlang kontalk kontalk open source messenger similar whatsapp app android currently including endtoend encryption server based tigase xmpp server source code java metronome im fork prosody im source code mit lua mongooseim mobile messaging platform focus performance scalability source code erlang openfire real time collaboration rtc server source code java prosody im featurerich easy configure xmpp server source code mit lua tigase xmpp server implementation java java xmpp web client candy multi user xmpp client written javascript source code mit javascript conversejs free opensource xmpp chat client browser source code javascript jsxc realtime xmpp web chat application video call file transfer encrypted communication also version nextcloudowncloud sogo source code mit javascript salut à toi multipurpose multi frontend libre decentralized communication tool source code python conference management back top bigbluebutton support realtime sharing audio video slide whiteboard control chat screen instructor engage remote student polling emojis breakout room demo source code java conference organizing distribution cod create conference event website built top drupal source code php frab webbased conference planning management system help collect submission manage talk speaker create schedule source code mit ruby indico featurerich event management system made cern place web born demo source code mit python open conference system ocs free web publishing tool create complete web presence scholarly conference demo source code php opencfp opencfp phpbased conference talk submission system mit php openconferenceware open source web application supporting conferencelike event customizable generalpurpose platform provides proposal session schedule track user profile source code mit ruby osem event management tailored free software conference demo source code mit ruby pretalx webbased event management including running call paper reviewing submission scheduling talk export import various related tool source code python content management system cm back top cm practical way setup website many feature cm often come third party plugins theme functionality easy add customize need see also blogging platform static site generator alfresco community edition open source enterprise content management software handle type content allowing user easily share collaborate content source code java apostrophe nodejs cm focus extensible incontext editing tool demo source code mit nodejs cm integrated cm ever includes everything need build website publishing sharing interacting community demo source code php backdrop cm comprehensive cm small medium sized business nonprofit source code php bigtree cm straightforward well documented capable written php mysql source code php bolt cm open source content management tool strives simple straightforward possible demo source code mit php cm made simple open source content management system faster easier management website content scalable small business large corporation source code php cockpit simple content platform manage structured content source code mit php concrete cm open source content management system source code mit php contao contao powerful open source cm allows create professional website scalable web application source code php couchcms simple opensource cm designer source code php directus directus powerful intuitive headless cm managing sql database custom architecture built around robust extensible api decoupled content management framework perfect website apps multiclient project source code php drupal advanced open source content management platform source code php elabftw online lab notebook research lab store experiment use database find reagent protocol use trusted timestamping legally timestamp experiment export pdf zip archive share demo source code php expressa content management system powering database driven website using json schema provides permission management automatic rest apis mit nodejs getsimple cm simplest content management system ever source code php impresspages cm easy code meet easy admin demo source code php joomla advanced content management system cm source code php keystonejs cm web application platform demo source code mit nodejs modx modx advanced content management publishing platform current version called revolution source code php neos neos neos version modern open source cm source code php noosfero noosfero web platform social solidarity economy network blog eportfolios cm r thematic discussion event agenda collective intelligence solidarity economy system ruby october free opensource selfhosted cm platform source code mit php omeka create complex narrative share rich collection adhering dublin core standard omeka server designed scholar museum library archive enthusiast demo source code php pagekit new modern cm create share source code mit php pico stupidly simple blazing fast flat file cm source code mit php pimcore multichannel experience engagement management platform source code php plone powerful opensource cm system source code python processwire processwire open source content management system cm web application framework aimed need designer developer client source code php propertywebbuilder ultimate ruby rail engine creating real estate website demo source code mit ruby publify simple full featured web publishing software source code mit ruby redaxo simple flexible useful content management system documentation available german source code mit php redaxscript ultra lightweight cm mysql sqlite postgresql demo source code php roadiz modern cm based node system handle many type service source code mit php silverstripe easy use cm powerful mvc framework underlying demo source code php spip publication system internet aimed collaborative work multilingual environment simplicity use web author source code php squidex headless cm based mongodb cqrs event sourcing demo source code mit net strapi advanced opensource content management framework headlesscms build powerful api effort source code mit nodejs subrion subrion free open source content management system allows build website purpose yes blog corporate mega portal demo source code php textpattern flexible elegant easytouse cm demo source code php typemill authorfriendly flatfilecms visual markdown editor based vuejs source code mit php powerful advanced cm large community source code php umbraco friendly cm free open source amazing community source code mit net wagtail django content management system focused flexibility user experience source code python wondercms wondercms smallest flat file cm since demo source code mit php wordpress world mostused blogging cm engine source code php writefreely writing software starting minimalist federated blog entire community source code go recipe management openeats recipe management site allows user create store share rate recipe create grocery list demo mit python recipe recipe django application manage tag search recipe using either built model external storage provider hosting pdf image file mit python ecommerce attendize ticket selling event management platform source code aal php bagisto leading laravel open source ecommerce framework multiinventory source taxation localization dropshipping exciting feature demo source code mit php coreshop coreshop ecommerce plugin pimcore source code php drupal commerce drupal commerce popular ecommerce module drupal cm support dozen payment shipping shopping related module source code php magento leading provider open omnichannel innovation demo source code php microweber drag drop cm online shop demo source code php openbazaar decentralized marketplace using cryptocurrency source code mit go opencart free open source shopping cart solution source code php open classified free opensource selfhosted cm classified site source code php open source po open source point sale web based point sale system source code mit php oxid eshop oxid eshop flexible open source ecommerce software wide range functionality demo source code php open food network online marketplace local food enables network independent online food store connect farmer food hub individual local business source code ruby prestashop prestashop offer free opensource fully scalable ecommerce solution demo source code php pretix django based ticket sale platform event source code python reaction commerce customizable realtime reactive javascript commerce platform source code nodejs saleor django based opensourced ecommerce storefront demo source code python sharetribe open source platform create peertopeer marketplace also available saas model source code mit ruby shuup django powered fully customizable open source ecommerce framework small large site source code python shopware community edition php based open source ecommerce software made germany demo source code mit php spree commerce spree complete modular apidriven open source ecommerce solution ruby rail demo source code ruby sylius powered open source fullstack platform ecommerce demo source code mit php thelia thelia open source flexible ecommerce solution demo source code php woocommerce wordpress based ecommerce solution source code php dns back top see http dns document management back top casebox manage organization information one system source code phpjava docat host doc simple versioned fancy mit pythondocker docspell auotagging document organizer archive source code scalajava edpaper pdf organizer user management mit php everydocs simple document management system private use basic functionality organize document digitally ruby mayan edms free open source electronic document management system electronic vault document preview generation ocr automatic categorization among feature source code python papermerge open source document management system focused scanned document electronic archive feature file browsing similar way dropboxgoogle drive ocr full text search text overlayselection source code python paperless scan index archive paper document python teedy ex sismicsdocs lightweight document management system packed feature expect big expensive solution source code java ebooks integrated library system il back top content management system archiving digital preservation solution also overlap library institutional repository software personal ebook management software calibre ebook library manager view convert catalog ebooks major ebook format provides builtin web server remote client demo source code python bicbucstriim provides webbased access calibre library ebook collection source code mit php calibre web web app providing clean interface browsing reading downloading ebooks using existing calibre database python cop lightweight ebook server alternative calibre content server demo source code php epube selfhosted web epub reader using epubjs bootstrap calibre source code php komga medium server comicsmangasbds api opds support modern web interface exploring library well web reader source code mit javadocker mango manga server web reader builtin mangadex downloader mit crystal enterpriseclass library management software evergreen highlyscalable software library help library patron find library material help library manage catalog circulate material source code plpgsql koha enterpriseclass il module acquisition circulation cataloging label printing offline circulation internet access available much demo source code perl rero il largescale il run service consortial feature intended primarily library network includes standard module circulation acquisition cataloging webbased public professionnal interface demo source code pythonother institutional repository digital library software dspace turnkey repository application providing durable access digital resource source code java eprints digital document management system flexible metadata workflow model primarily aimed academic institution demo source code perl fedora common repository robust modular repository system management dissemination digital content especially suited digital library archive access preservation source code java islandora drupal module browsing managing fedorabased digital repository source code php samvera hyrax frontend samvera framework ruby rail application browsing managing fedorabased digital repository source code ruby federated identityauthentication back top see http identitymanagement feed reader back top commafeed google reader inspired selfhosted r reader source code java feedbin simple fast nice looking r reader source code mit ruby feedhq feedhq webbased feed reader source code python freshrss selfhostable r feed aggregator demo source code client php jarr jarr another r reader webbased news aggregator reader fork newspipe demo source code python kris feed simple smart stupid feed reader demo source code php leed leed light feed free minimalist r aggregator source code php leselys elegant r reader python litereader read feed machine simple lite application demo php moonmoon simple feed aggregator planet like aggregate feed spit one single page source code php miniflux miniflux minimalist open source news reader written go postgresql source code go newsblur newsblur personal news reader brings people together talk world new sound old instrument source code mit python newsdash news dashboard inspired igoogle netvibes nodejs newspipe newspipe web news reader demo python reader python feed reader web app library use build standard library purepython dependency python readerself selfhosted r reader php mysql sqlite google reader alternative source code php r monster r monster easy use webbased r aggregator reader compatible fever api created alternative google reader mit php selfoss new multipurpose r reader live stream mashup aggregation web application source code php sismics reader free open source feed reader including major google reader feature demo source code java stringer workinprogress selfhosted antisocial r reader mit ruby temboz twocolumn feed reader emphasizing filtering capability manage information overload mit python tiny tiny r open source webbased news feed rssatom reader aggregator demo source code php wind open source beautiful r reader built using reactreduxsailsnode stream showcase personalized feed powered stream api demo source code nodejs rssatom automation fulltext r extract article content news site blog convert r feed contain extract story fulltext feed developed fivefiltersorg source code php politepol online tool creation r feed web page demo mit python r fulltext proxy mirror r feed return full content item extracted website mit nodejs r merger php script take multiple r atom feed input merge single r feed php rssbridge rssbridge php project capable generating atom feed website nt one unlicense php fetch rssatomfeeds push new content emailreceiver support opml python screaming liquid tiger simple script automatically generate valid r atom feed list medium file folder mit php file sharing synchronization back top groupware solution also feature file sharing synchronization distributed filesystems back top see http distributedfilesystems file transfersynchronization git annex file synchronization computer server external drive source code haskell kinto kinto minimalist json storage service synchronisation sharing ability source code python mydrive fully featured online storage solution uploaddownload file photovideo viewer web client demo nodejs nextcloud access share file calendar contact mail device term demo source code php opensshsftp secure file transfer program source code c owncloud allinone solution saving synchronizing viewing editing sharing file calendar address book source code client php pydio turn web server powerful file management system alternative mainstream cloud storage provider source code php samba samba standard window interoperability suite program linux unix provides secure stable fast file print service client using smbcifs protocol source code c seafile file hosting sharing solution primary team organization source code c sparkleshare self hosted instant secure file sync source code c syncany secure file sync software arbitrary storage backends opensource cloud storage filesharing application securely synchronize file kind storage java syncthing syncthing open source peertopeer file synchronisation tool source code go unison unison filesynchronization tool osx unix window ocaml zpush implementation microsoft activesync protocol source code php peertopeer filesharing bittorrenttracker simple robust bittorrent tracker client server implementation source code mit nodejs cloudtorrent torrent web client http retrievable streamable downloaded file go dat project powerful decentralized file sharing application built large ecosystem module source code mit nodejs filepizza peertopeer file transfer browser source code nodejs firefox send file sharing experiment allows send encrypted file user nodejs instantio streaming file transfer webtorrent demo mit nodejs magnetico magnetico first autonomous selfhosted bittorrent dht search engine suite designed endusers python magnetissimo search engine index popular torrent site mit elixir opentracker open free bittorrent tracker aim minimal resource usage intended run wlan router source code beerware c peerflixserver downloads torrent file provides direct link download direct link stream mit nodejs qbittorrent free crossplatform bittorrent client feature rich web ui remote access source code c rartracker complete private bittorrent tracker wtfpl php torrentscsv selfhostable torrent search engine rust transmission fast easy free bittorrent client source code c object storagefile server minio minio open source object storage server compatible amazon apis source code go zenko cloudserver zenko cloudserver opensource nodejs implementation server handling amazon protocol source code nodejs singleclickdragndrop upload bozon minimalist drag drop file sharing app php coquelicot coquelicot oneclick file sharing web application focus protecting user privacy source code ruby droppy droppy selfhosted cloud server interface similar desktop file manager capability edit file onthefly well view playback medium directly browser nodejs elixire simple yet advanced screenshot uploading link shortening service source code client python fibridge stream huge file browser without upload demo mit rust fileshelter fileshelter selfhosted software allows easily share file internet demo c file sharing open source selfhosted file sharing application based unique temporary link php goploader easy file sharing serverside encryption curlhttpiewget compliant source code mit go imgpush imgpush selfhosted file upload service easily integrated webapps mit python ipfspics ipfspics distributed image hosting website php jirafeau jirafeau web site permitting upload file simple way give unique link demo php linxserver simple file sharing pastebin api autoexpiry deletion key web seed support demo go lufi let upload file clientside encrypted demo source code perl lutim let upload image perl onionshare securely anonymously share file size python pictshare pictshare multi lingual open source image hosting service simple resizing upload api source code php plik plik scalable friendly temporary file upload system demo mit go pomf simple file uploading sharing source shut site pomfse mit php projectsend upload file assign specific client create give access file client source code php psitransfer simple open source selfhosted file sharing solution robust updownloadresume password protection nodejs share simple yet advanced uploader upload file image text moderation tool admins used friend family integration sharex mit nodejs sharry share file easily internet authenticated anonymous user way resumable downloads scalajava uguu store file deletes x amount time source code mit php clientside encrypted image host mit nodejs upste private file hosting application emphasis serving technology community source code php xbackbone simple fast lightweight file manager instant sharing tool integration like sharex free opensource screenshot utility window php youtransfer youtransfer simple elegant selfhosted file transfer sharing solution demo source code nodejs commandline file upload beauty minimalist file sharing written go used primarily unix shell eg curl built debian package easy install mit go transfersh easy file sharing command line source code mit go web based file manager apaxy theme built enhance experience browsing web directory using modautoindex apache module cs override default style directory listing source code unlicense html directorylister simple php based directory lister list directory subdirectory allows navigate within source code mit php encode explorer encode explorer single page file browser simple functional demo source code mit php explorer highlyconfigurable directory listing made nodejs source code mit nodejs filestash web file manager let manage data anywhere located ftp sftp webdav git minio dropbox google drive demo source code go gobrowser simple http file browser go gossa gossa light simple webserver file mit go modern file indexer http web server focus file directory displayed appealing way browsing enhanced different view breadcrumb tree overview demo source code mit php ifm single script file manager mit php resourcespace resourcespace open source digital asset management software simple fast free way organise digital asset demo source code php simple http interface index browse file public google cloud storage bucket mit go sprutio panel file manager drag drop feature code editor text search hotkeys demo source code python surfer simple static file server webui manage file mit nodejs tagspaces tagspaces offline crossplatform file manager organiser also function note taking app webdav version application installed top webdav server nextcloud owncloud demo source code javascript game back top game game server control panel dark room minimalist text adventure game browser demo agario clone agario clone written socketio canvas mit nodejs battlecraft fully distributed multiplayer browser game erlang elevatorsaga elevator programming game source code mit javascript hextris fast paced puzzle game inspired tetri demo legend green dragon legend green dragon textbased rpg originally developed eric stevens jt traub remake homage classic bb door game legend red dragon seth able robinson demo php lila forever free adless open source chess server powering lichessorg official io android client apps source code scala mindustry factoriolike tower defense game build production chain gather resource build complex facility source code java minetest open source voxel game engine play one many game mod game liking make game play multiplayer server source code c aka allows playing super mario online multiplayer mode official continuation program feature integrated server list source code client mit nodejstypescript nodevirtualgamepads turn smartphone game controller keyboard touchpad remote linux o machine mit nodejscoffescript posio geography multiplayer game mit python piqueserver server openspades firstperson shooter destructible voxel world client pythonc quakejs quakejs port javascript played browser mit nodejs quizmaster webapp conducting quiz including page player enter answer scala rconcli cli executing query remote valve source dedicated server using rcon protocol mit go sourcebans admin ban communication management system game running source engine source code php teeworlds open source retro multiplayer shooter source code c tournamentmango tournamentmango open source tournament bracket user management system build archive player keep track score time well regular character game alias mit javascript gateway terminal sharing back top asciinema web app hosting asciicasts demo elixirdocker gateone gate one webbased terminal emulator ssh client source code python guacamole guacamole clientless remote desktop gateway support standard protocol like vnc rdp source code javac neko self hosted virtual browser rabbit clone run docker dockergo oneye cloud software access data everywhere browser demo source code php osjs desktop implementation browser fullyfledged window manager application apis gui toolkits filesystem abstraction demo source code nodejs tmate instant terminal sharing source code isc c groupware back top bluemind groupware email calendar addressbooks exchange active sync exchange mapi protocol support source code java citadel groupware including email calendarscheduling address book forum mailing list im wiki blog engine r aggregation source code c corteza crm including unified workspace enterprise messaging low code environment rapidly securely delivering recordsbased management solution demo source code go cozy cloud personal cloud manage sync contact file calendar manage budget app store full community contribution source code nodejs egroupware software suite including calendar address book notepad project management tool client relationship management tool crm knowledge management tool wiki cm source code php espocrm crm frontend designed single page application rest api demo source code php horde horde project creating high quality open source application library based php horde framework demo source code php fullfeatured home hosted cloud drive personal assistant app launcher file converter streamer share tool php kolab kolab community unified communication collaboration system source code cpythonphp kopano groupware suite including email calendar task todos note featuring modern webapp deskapp mobile access zpushactivesync demo source code cpythonphp openmeetings openmeetings provides video conferencing instant messaging white board collaborative document editing groupware tool using api function streaming server remoting streaming source code java sogo sogo offer multiple way access calendaring messaging data caldav carddav groupdav well activesync including native outlook compatibility web interface demo source code objectivec suitecrm awardwinning enterpriseclass open source crm source code php tine contact calendar task webdav activesync voip mailclient crm sale project timetracker demo source code php zimbra collaboration email calendar collaboration server web interface lot integration source code java human resource management hrm back top admidio admidio free open source user management system website organization group system flexible role model possible reflect structure permission organization demo source code php icehrm icehrm employee management system allows company centralize confidential employee information demo source code php orangehrm orangehrm comprehensive hrm system capture essential functionality required enterprise source code php sentrifugo sentrifugo hrm system easily configured meet organizational need source code php timeoffmanagement simple yet powerful absence management software small medium size business demo source code mit nodejs internet thing iot back top devicehive open source iot platform wide range integration option demo source code java domoticz home automation system let monitor configure various device like light switch various sensorsmeters like temperature rain wind uv electra gas water much source code client cc fhem fhem used automate common task household like switching lamp heating also used log event like temperature power consumption control via web smartphone frontends telnet tcpip directly source code perl gladys gladys opensource home assistant run raspberry pi source code mit nodejs home assistant opensource home automation platform demo source code mit python mozilla gateway mozilla webthings mozilla open source implementation web thing including webthings gateway webthings framework source code nodejs node red browserbased flow editor help wiring hardware device apis online service create iot solution source code nodejs openhab vendor technology agnostic open source software home automation source code java thingsboard opensource iot platform device management data collection processing visualization demo source code java thingspeak open source internet thing application api store retrieve data thing using http demo source code ruby knowledge management tool back top mindmaps open source offline capable mind mapping application demo mind web application creating managing mind map demo mit javascript tagtool collaborative knowledge management tool create word cloud link element demo source code mit python weaviate graphql based knowledge graph demo go learning course back top canvas lm canvas trusted opensource learning management system lm revolutionizing way educate demo source code ruby chamilo lm chamilo lm allows create virtual campus provision online semionline training source code php edx open edx platform opensource code power edxorg source code python ilias ilias learning management system cope anything throw demo source code php mahara open source fully featured web application build student electronic portfolio source code php moodle moodle learning course platform one largest open source community worldwide demo source code php open eclass open eclass advanced elearning solution enhance teaching learning process demo source code php openolat openolat webbased learning management system teaching education assessment communication demo source code java relate relate webbased courseware package includes feature flexible rule statistic multicourse support class calendar source code mit python rosariosis rosariosis free student information system school management demo source code php sakai sakai project provides flexible featurerich environment teaching learning research collaboration demo source code java map global positioning system gps back top see also awesomegis get timezone geo coordinate lat lon mit godocker graphhopper fast routing library server using openstreetmap source code java hauk easy setup location sharing platform let temporarily share location anyone realtime demo php mapbbcodeshare tool sharing custom osm map support annotated marker polygon line multiformat importexport multiple layer shortlinks demo wtfplother php open source routing machine osrm high performance routing engine designed run openstreetmap data offering http api c library interface nodejs wrapper demo source code c nominatim server application reverse geocoding address coordinate openstreetmap data source code c opengts entrylevel fleet tracking system support variety tracking device protocol come rich webinterface reporting feature demo source code java openstreetmap collaborative project create free editable map world source code client ruby opentripplanner multimodal trip planning software based openstreetmap data consuming published gtfsformatted data suggest route using local public transit system source code javajavascript orion powerful owntracks apicompliant location data visualization frontend web demo mit pythonnodejs owntracks recorder store access data published owntracks location tracking apps clua tileserver gl vector raster map gl style server side rendering mapbox gl native map tile server mapbox gl j android io leaflet openlayers gi via wmts etc source code nodejs tileserver php serve map tile php hosting php traccar java application track gps position support load tracking device protocol android io app web interface view trip demo source code java μlogger collect geolocation user realtime display gps track website demo php umap create map openstreetmap layer minute embed site source code wtfpl python medium streaming back top see also http enwikipediaorgwikilistofstreamingmediasystems http enwikipediaorgwikicomparisonofstreamingmediasystems multimedia streaming darwin streaming server high performance server streaming quicktime medium rtp rtsp protocol originated apple qtss source code c gerbera gerbera upnp medium server allows stream digital medium throughout home network listen towatch variety upnp compatible device source code c homehost selfhosted react redux app stream medium collection music movie book podcasts comic etc mit nodejs icecast streaming audiovideo server used create internet radio station privately running jukebox many thing source code client c jellyfin medium server audio video book comic photo sleek interface robust transcoding capability almost modern platform client including roku android tv io xbox kodi demo source code c karaoke forever host awesome karaoke party everyone easily find queue song phone web browser player also browserbased support webgl visualization source code isc nodejs mistserver streaming medium server work well streaming environment source code c readymedia simple medium server software aim fully compliant dlnaupnpav client formerly known minidlna source code c rygel rygel upnp av mediaserver allows easily share audio video picture medium player software may use rygel become mediarenderer may controlled remotely upnp dlna controller source code c üwave üwave selfhosted collaborative listening platform user take turn playing talk gameplay video anything variety medium source like youtube soundcloud demo source code mit nodejs audio streaming ampache web based audiovideo streaming application demo source code php airsonic opensource webbased medium streamer jukebox fork subsonic last opensource release switched license source code client java azuracast modern accessible selfhosted web radio management suite source code php audioserve simple personal server serve audio file directory audiobooks music podcasts focused simplicity support sync play position client mit rust beet music library manager musicbrainz tagger commandline web interface source code mit python black candy music streaming server built rail stimulus mit ruby compactd remote music player support adding content mit nodejs friendsradio share music friend youtube soundcloud demo mit nodejs funkwhale modern webbased convivial multiuser free music server demo source code pythondjango gnu fm running music community website alternative lastfm source code php gonic lightweight music streaming server subsonic compatible go groove basin music player server webbased user interface inspired amarok mit nodejs koel personal music streaming server work source code mit php koozic music server powerful playlist feature subsonic compatibility demo source code python libretime simple open source platform let broadcast streaming radio web fork airtime source code php lm access selfhosted music using web interface demo c moode audio audiophilequality music playback wonderful raspberry pi family single board computer source code php mopidy extensible music server offer superset mpd api well integration party service like spotify soundcloud etc source code python moped responsive javascript client mopidy music server mit mopidy musicbox web client mopidy music server mopidyparty mopidy web extension designed party let guest manage sound python mpd daemon remotely play music stream music handle organize playlist many client available source code client c ympd standalone mpd web gui written c utilizing websockets bootstrapjs source code c mstream music streaming server gui management tool run mac window linux source code nodejs musikcube streaming audio server linuxmacoswindowsandroid client source code c navidrome music streamer modern music server streamer compatible subsonicairsonic demo source code client gojavascript polaris music browsing streaming application optimized large music collection ease use high performance mit rust snapcast synchronous multiroom audio server c sonerezh selfhosted webbased application stream music everywhere demo source code php stretto music player youtubesoundcloud import itunesspotify discovery demo client mit nodejs volumio free open source linux distribution designed finetuned exclusively music playback source code nodejs video streaming bluecherry closedcircuit television cctv software application support ip analog camera source code php crtmpserver high performance rtmprtsp streaming server c cytube cytube web application providing medium synchronization chat arbitrary number channel demo mit nodejs hellowlol htpc manager fork fully responsive interface manage favorite medium htpc mit python invidious invidious alternative frontend youtube demo crystal myflix selfhosted super lightweight netflix alternative mit shell oddworks oddworks open source video distribution platform built destroy barrier streaming television sdks roku apple iostvos google android amazon firetv mit nodejs open streaming platform selfhosted alternative twitch youtube live live ondemand video streaming source code mit python peertube decentralized video streaming platform using bittorrent directly web browser source code nodejs rapidbay selfhosted torrent videostreaming servicetorrent client allows searching playing video torrent browser chromecastappletvsmart tv mit pythondocker restreamer restreamer allows realtime video streaming website without streaming provider source code nodejsdocker shinobice open source cctv software written node ip local camera support nodejs streama self hosted streaming medium server mit java synctube lightweight simple setup cytube alternative watch video friend chat demo mit nodejshaxe tube youtubelike without censorship feature nt need video sharing app written go also support automatic transcoding aac multiple collection r feed demo source code mit go videolan client vlc crossplatform multimedia player client server supporting multimedia file well dvd audio cd vcds various streaming protocol source code multiple c zoneminder closedcircuit television cctv software application support ip usb analog camera source code php miscother back top alert management web application mit php alerthub alerthub simple tool get alerted github release mit nodejs anchr anchr toolbox tiny task internet including bookmark collection url shortening encrypted image uploads source code nodejs anuko anuko provides simple time project tracking selfhosted basis demo source code php asciiflow flow diagram drawing tool source code javajavascript blynk platform io android apps control arduino raspberry pi similar microcontroller board internet source code java cachet open source status page system everyone demo source code php cstate static status page hyperfast hugo clean design minimal j super light htmlcss high customization optional admin panel readonly api best used netlify docker demo mit go cup common unix print system us internet printing protocol ipp support printing local network printer source code c cyberchef perform manner cyber operation within web browser aes de blowfish encryption decryption creating hexdumps calculating hash much demo javascript digitalcurrency create selfhosted digital currency demo nodejs domainmod application manage domain internet asset central location domainmod includes data warehouse framework allows import whmcpanel web server data view export report data demo source code php flox self hosted movie tv series anime watch list rating system us movie database backend information demo mit php formspree send form url forward email php javascript sign required demo source code python geneweb geneweb open source genealogy software written ocaml come web interface used offline web service demo source code ocaml graphvl identity document verification using machine learning graphql mit python secure password rather saying password weak strong secure password let user know long would take someone crack password demo mit javascript googlewebfontshelper hasslefree way selfhost google font get eot ttf svg woff file cs snippet demo mit nodejs ytdlwebserver dockerready webserver downloading youtube video mit nodejs journal simple journaling encrypted entry sharing capability mit ruby kimai simple time project tracking demo source code php king phisher king phisher tool testing promoting user awareness simulating real world phishing attack python mailygo mailygo small tool written go allows send html form example static website without dynamic backend via email mit go monica personal relationship manager new kind crm organize interaction friend family source code php musical artifact helping catalog preserve free artifact need produce music source code mit ruby nnmm super tiny pastebinurl minifier microservice beerware php notica let send browser notification terminal desktop phone installation registration required source code mit nodejs ombi content request system plexemby connects sickrage couchpotato sonarr growing feature set demo source code c otranscribe free web app take pain transcribing recorded interview source code mit javascript passcheck web application featuring handy password tool including password generator strength checker haveibeenpwned breach checker source code mit javascript reactive resume oneofakind resume builder keep privacy mind completely secure customizable portable opensource free forever demo source code mit dockernodejs releasebell send release notification starred github repos source code mit nodejs revealjs framework easily creating beautiful presentation using html demo source code mit javascript revive adserver world popular free open source ad serving system formerly known openx adserver phpadsnew source code php sane network scanning allow remote client access image acquisition device scanner available local host source code c teslamate powerful data logger tesla vehicle mit elixir trello burndown easy use scrum burndown chart trello board mit godocker vimbadmin provides web based virtual mailbox administration system allow mail administrator easily manage domain mailbox alias demo source code php web font repository simple webfont hosting google font alternative font mit php webtrees webtrees web leading online collaborative genealogy application demo source code php money budgeting management back top see also http itassetmanagement akaunting akaunting free online open source accounting software designed small business freelancer source code php btcpay server selfhosted bitcoin cryptocurrencies payment processor demo source code mit c boodle simple accounting singlepage application clojure clojurescript clojure budget app budget app open source personal budgeting application java dot ledger webbased personal finance management tool demo source code ruby economizzer easy secure system manage personal money achieve goal accessed computer tablet smartphone demo source code mit php exmoney selfhosted personal finance app isc elixir firefly iii firefly iii modern financial manager help keep track money make budget forecast support credit card advanced rule engine import data many bank demo source code php family accounting tool webbased finance management tool partner partially shared expense scala fava fava web frontend beancount text based doubleentry accounting system demo source code mit python galette galette membership management web application towards non profit organization source code php grr asset management booking smallmedium company source code php hospital run hospital run offline enabled hospital management software demo source code nodejs inventaire collaborative resource mapper project yet focused exploring book mapping wikidata isbns source code nodejs invoice ninja powerful tool invoice client online demo source code aal php invoiceplane manage quote invoice payment customer small business mit php ihatemoney manage shared expense easily demo source code python kresus open source personal finance manager demo source code mit nodejs ontrack simple app track spend set goal mit rubyreact partkeepr partkeepr electronic part inventory management software help keep track available part assist reordering part demo source code php silverstrike personal finance management made easy demo source code mit pythondjango stockazng asset management system mit python monitoring back top see http monitoring http metric metriccollection notetaking editor back top see also wikis bulletnotes workflowy dynalist clone kanban trello calendar functionality organize everything source code mit nodejs boostnote notetaking app programmer focus markdown snippet customizability source code javascript codimd realtime collaborative markdown note platform formerly hackmd ce source code nodejs dailynotes app taking note tracking task daily basis markdown mit python dillinger last markdown editor ever source code mit nodejs dnote simple command line notebook multidevice sync web interface source code go docpht docpht take note quickly document anything without use database demo source code mit php drawio diagram software making flowchart process diagram org chart uml er network diagram source code javascript joplin joplin note taking application markdown editor encryption support mobile desktop platform run clientside syncs self hosted nextcloud similar consider like open source alternative evernote source code mit nodejs leanote leanote notepad open source cloud notepad demo source code go markdown edit online markdown editorviewer source code mit meemo personal note stream markdown support source code mit nodejs minimalistwebnotepad minimalist notepadcc clone php mininote simple markdown notetaking app persistence mit nodejs opennote opennote built open webbased alternative microsoft onenote evernote demo mit overleaf webbased collaborative latex editor source code ruby paperwork opensource notetaking archiving alternative evernote microsoft onenote google keep source code mit php plainpad modern note taking application cloud utilizing best feature progressive web apps technology demo source code php savepad minimalist notepad based notepadcc mit php standard note simple private note app protect privacy getting done standard note demo source code ruby turndown html markdown converter written javascript source code mit javascript trilium note trilium note hierarchical note taking application focus building large personal knowledge base nodejs turtl totally private personal database note taking app source code commonlisp wreeto wreeto open source notetaking knowledge management wiki system built top ruby rail framework source code ruby writing lightweight distractionfree text editor browser markdown latex supported lag writing source code mit javascript office suite back top collabora online development edition collabora online development edition code powerful libreofficebased online office support major document spreadsheet presentation file format integrate infrastructure source code c cryptpad cryptpad zero knowledge realtime collaborative editor richtext file sourcecode source code nodejs ethercalc web spreadsheet source code nodejs etherpad etherpad highly customizable open source online editor providing collaborative editing really realtime demo source code nodejs infinoted server gobby multiplatform collaborative text editor source code mit c onlyoffice office suite enables manage document project team customer relation one place source code nodejs phpoffice phpoffice contains library permit write read file office suite php webodf tool library view edit open document format odf file source code password manager back top bitwarden password manager webapp browser extension mobile app source code c bitwardenrs lightweight bitwarden server api implementation written rust rust keeweb webapp browser desktop password manager compatible keepass database source code mit padloc modern open source password manager individual team source code nodejs passbolt password manager dedicated managing password collaborative way web server using mysql database backend source code php passit simple password manage sharing feature group user administration interface demo source code python passwall open source password manager go psono promising password manager fully featured team demo source code python shaark one platform link story password album built laravel vuejs mit php syspass multiuser password management system demo source code php teampass password manager dedicated managing password collaborative way one symmetric key used encrypt sharedteam password stored server side file database work server apache mysql php source code php pastebins back top client side encrypted pastebin wtfpl python bepasty pastebin kind file source code python bin paste bin rust cryptonote simple open source web application let user encrypt share message read source code mit ruby edpaste selfhosted pastebin written laravel php framework mit php fiche command line pastebin need netcat demo mit c filite simple light standalone pastebin url shortener filesharing service demo mit rust fugacious open source shortterm secure messaging osssm source code ruby gist gist opensource application share code demo php hastebin open source pastebin written nodejs demo source code mit nodejs mojopaste perl based pastebin demo source code perl notehub free hasslefree pastebin markdown page simple clean password provided generatedshort link mit nodejs paste paste forked original source pastebincom used bought source code php pastebin simple pastebin service convenient api cli demo mit go pastebin simple fast featurerich standalone pastebin service mit rust pb lightweight pastebin url shortener built using flask python privatebin privatebin minimalist opensource online pastebindiscussion board server zero knowledge hosted data demo source code zlib php purritobin ultra fast minimalistic encrypted command line pastebin server knowledge paste data demo isc c sharppaste crossplatform c pastebin clientside encryption work mit c nancyfx snibox code snippet manager attractive tagoriented interface demo source code mit ruby snipt longterm memory coder share store code snippet mit python socksbin simple fast terminal based pastebin optional code highlighting specific client required need netcat demo python stikked advanced beautiful pastebin demo php simple deploy use secret message service using hashicorp vault secret storage mit go personal dashboard back top see also monitoring baby buddy help caregiver track baby sleep feeding diaper change tummy time demo python dashmachine another web application bookmark dashboard fun feature python habitica habit tracker app treat goal like role playing game previously called habitrpg source code nodejs heimdall heimdall elegant solution organise web application source code mit php hiccup beautiful static homepage get link service quickly builtin search editing pwa support localstorage caching easily organize start page source code mit homepage simple standalone selfhosted php page window server web mit php homer dead simple static homepage expose server service easy yaml configuration connectivity check organizr organizr aim one stop shop server frontend php personal management system central point managing personal data billing payment job holiday note etc demo mit php simpledash simple fully responsive dashboard forward service choice demo mit javascript tipboard inhouse tasty local dashboarding system source code python wger webbased personal workout fitness weight loggertracker also used simple gym management utility offer full rest api well demo source code python photo video gallery back top chevereto free powerful fast image hosting script allows create full featured image hosting website minute source code php coppermine multilingual photo gallery integrates various bulletin board includes upload approval password protected album demo source code php cumulusclips video sharing website cumulusclips video sharing script build youtube clone user upload rate comment video much demo php fussel fussel static photo gallery generator easily generate reactive gallery host optimized static folder asset mit python gallery cs gallerycss cs think simple maintainable understandable gallery without use javascript source code mit cs lychee open source grid album based photomanagementsystem source code mit php mediagoblin free software medium publishing platform anyone run think decentralized alternative flickr youtube soundcloud etc source code python ownphotos self hosted wannabe google photo clone slight focus cool graph mit python photato selfhosted photo gallery accessible responsive webui directly us index specific folder filesystem java photofloat web photo gallery done right via static json dynamic javascript demo python photolight easiest photo gallery php photonix new webbased photo management application object recognition location awareness color analysis ml algorithm demo source code python photoprism personal photo management powered go google tensorflow browse organize share personal photo collection using latest technology automatically tag find picture source code mit go photo stream minimalist selfhosted photo stream demo mit ruby photoview simple userfriendly photo gallery personal server made photographer aim provide easy fast way navigate directory thousand high resolution photo demo go pigallery directoryfirst photo gallery website rich ui optimised running low resource server demo source code mit dockernodejs piwigo photo gallery software web built active community user developer demo source code php plumi create sophisticated videosharing site source code python quru image server high performance dynamically resizing image server offering directory based access control cropping rotation color management tool demo source code python sigal yet another simple static gallery generator mit python ubergallery ubergallery easy use simple manage web photo gallery ubergallery require database support jpeg gif png file type simply upload image ubergallery automatically generate thumbnail output html source code mit php zenphoto opensource gallery cm project source code php poll event back top calagator event aggregator source code mit ruby clerk simple event logger keep track periodic event habit etc occur php dudle online scheduling application demo source code ruby feedka opensource web application serve platform get authentic kindful constructive feedback friend family coworkers demo ruby fider open source alternative uservoice customer feedback demo source code mit go framadate online service planning appointment make decision quickly easily make poll define date subject choose send poll link friend colleague discus make decision demo source code cecillb php hitobito web application manage complex group hierarchy member event lot demo source code ruby jd esurvey open source enterprise survey web application source code java kyélà participation poll group event demo source code php limesurvey featurerich open source web based polling software support extensive survey logic demo source code php meetable event aggregator demo source code mit php open event server enables organizer manage event concert conference meetups python phpback open source feedback system demo source code php booking scheduling alfio open source ticket reservation system demo source code java booked webbased calendar resource scheduling system allows administered management reservation number resource demo source code php easy appointment highly customizable web application allows customer book appointment via web demo source code php proxy back top reverse proxy help automatically utilize server push mechanism static website available middleware standalone application mit nodejs imgproxy fast secure standalone server resizing converting remote image work great need resize multiple image fly without preparing ton cached resized image redoing every time design change mit godocker inlet expose local endpoint internet kubernetes integration docker image cli available mit godocker iodine dns tunnel solution enabling start proxy listener source code isc c microproxy lightweight noncaching httphttps proxy server mit go miniproxy simple web proxy written php allow bypass internet content filter browse internet anonymously one php file source code php nginx proxy manager nginx proxy manager easy way accomplish reverse proxying host ssl termination source code mit nodejsdocker phpproxy web proxy script built specifically fast easy modify support video site youtube demo source code mit php pomerium identityaware reverse proxy successor obsolete oauthproxy insert oauth step proxying request backend safely expose selfhosted website public internet source code go pound lightweight reverse proxy load balancer httphttps c privoxy noncaching web proxy advanced filtering capability enhancing privacy modifying web page data http header controlling access removing ad obnoxious internet junk c redbird modern reverse proxy node includes cluster letsencrypt docker support javascript sish open source serveongrok alternative providing http w tcp tunnel localhost using ssh mit go proxy server builtin authentication telegrambot user management user statistic data spent handy pay per gb data dockerised simple install nodejs lightweight resourceefficient proxy server optimized highload go squid caching proxy web supporting http http ftp reduces bandwidth improves response time caching reusing frequentlyrequested web page source code c swiperproxy lightningfast open source web proxy easy run customize source code mit python tinyproxy lightweight httphttps proxy daemon source code c traefik træfɪk modern http reverse proxy load balancer made deploy microservices ease support several backends docker swarm mesosmarathon manage configuration automatically dynamically source code mit go read later list back top nunux keeper personal content curation service source code nodejs wallabag wallabag formerly poche web application allowing save article read later improved readability demo source code mit php resource planning back top farmos webbased farm record keeping application source code php grocy erp beyond fridge grocy webbased selfhosted grocery household management solution home demo source code mit php tania tania free open source farming management system everyone manage area reservoir farm task inventory crop growing progress go enterprise resource planning erpnext free open source erp system demo source code python ledgersmb integrated accounting erp system small midsize business double entry accounting budgeting invoicing quotation project order inventory management shipping demo source code perl odoo free open source erp system demo source code python ofbiz fo enterprise resource planning system suite business application flexible enough used across industry source code java tryton free open source business solution demo source code python search engine back top software development back top project management see also ticketing task managementtodo list awesomesysadmincode review bonobo git server set self hosted git server ii window manage user full control repository nice user friendly graphical interface source code mit c fossil distributed version control system featuring wiki bug tracker c goodwork self hosted project management collaboration tool powered laravel vuejs demo mit php gitblit pure java stack managing viewing serving git repository source code java gitbucket easily installable github clone powered scala source code scalajava gitea community managed fork gogs lightweight code hosting solution demo source code mit go gitlab self hosted git repository management code review issue tracking activity feed wikis demo source code mit ruby gitlist webbased git repository browser gitlist allows browse repository using favorite browser viewing file different revision commit history diffs source code php gitolite gitolite allows setup git hosting central server finegrained access control many powerful feature source code perl gitprep portable github clone demo source code perl git webui standalone web based user interface git repository python gogs painless selfhosted git service written go demo source code mit go kallithea source code management system support two leading version control system mercurial git web interface source code python klaus simple easytosetup git web viewer work isc python lavagna lavagna opensource issueproject management tool designed small team lightweight pure java easy install easy use source code java lazylead eliminate annoying work within ticketing system jira github trello allows automate daily action like ticket field verification email notification jqlgql meeting request teammate calendar source code mit ruby leantime leantime lean project management system small team startup helping manage project ideation delivery source code php octobox take back control github notification source code ruby openproject openproject webbased project management system source code ruby pagure lightweight powerful flexible gitcentric forge feature laying foundation federated decentralized development demo python phabricator collection web application help build better software demo source code php phproject high performance fullfeatured project management system demo source code php projeqtor complete mature multiuser project management system extensive functionality phase project demo source code php backlog project management collaboration tool powered ruby rail vuejs demo mit ruby redmine redmine flexible project management web application demo source code ruby rhodecode rhodecode open source platform software development team unifies simplifies repository management git subversion mercurial demo source code python scm manager easiest way share manage git mercurial subversion repository http source code java sorcia sorcia minimalist web frontend git repository finegrained user access control multiple theme choose based taste many source code go taiga agile project management tool based kanban scrum method source code python titra timetracking solution freelancer small team demo source code javascript trac trac enhanced wiki issue tracking system software development project python tuleap tuleap libre suite plan track code collaborate software project source code php uvdesk uvdesk community service oriented event driven extensible opensource helpdesk system used organization provide efficient support client effortlessly whichever way imagine demo source code mit php zentao agile scrum project management systemtool demo source code php bug tracker see ticketing idetools atheos webbased ide framework small footprint minimal requirement continued codiad source code mit php babelfish selfhosted server source code parsing parse file supported language extract abstract syntax tree convert universal abstract syntax tree enable analysis transformation go codeserver visual studio code browser hosted remote server source code mit nodejsdocker eclipse che open source workspace server cloud ide source code dockerjava gitpod online ide github gitlab demo source code typescriptgodocker hakatime wakatime server implementation analytics dashboard unlicense haskell httplaceholder quickly mock away webservice using httplaceholder httplaceholder let specify request look like response need returned mit c icecoder icecoder web ide browser based code editor allows develop website directly within web browser demo source code mit php j bin open source collaborative web development debugging tool source code mit nodejs api open source api compile run source code source code ruby koding simplest way manage entire dev infrastructure source code nodejs ml workspace allinone webbased ide machine learning data science docker regexr regexr htmljs based tool creating testing learning regular expression source code mit nodejs requestbin inspect http request debug webhooks mit python rstudio server web browser based ide r source code javac sourcegraph sourcegraph fast opensource fullyfeatured code search navigation engine written go source code go wakapi tracking tool coding statistic compatible wakatime go continuous integration see awesomesysadmincontinuous integration continuous deployment ux testing uier codeless lowcode user experience test editing management using selenium perform testing ui automation uier tends free self hostable alternative applitools endtest ghost inspector usetrace screenster many others nodejs selenoid lightweight selenium hub implementation launching browser within docker container source code go faasserverless serverless computing wikipedia appwrite end end backend server web native mobile developer source code php fx fx tool help function service painless server mit go ironfunctions serverless microservices platform ironio go localstack localstack fully functional local aws cloud stack includes lambda serverless computation source code pythonother openfaas serverless function made simple docker kubernetes source code mit go trustedcgi lightweight selfhosted lambdaapplicationscgiserverlessfunctions platform mit go api management dreamfactory turn sqlnosqlstructured data restful api source code php fusio opensource api management platform help build manage rest apis demo source code php hapttic simple http server forward request shell script handle webhooks receive go hasura fast instant realtime graphql apis postgres fine grained access control also trigger webhooks database event source code haskell kong world popular open source microservice api gateway platform source code lua krakend open source highperformance api gateway source code go para flexible modular backend frameworkserver object persistence api development authentication source code java postwoman free fast beautiful api request builder demo source code mit nodejsvuenuxt tyk fast scalable open source api gateway box tyk offer api management platform api gateway api analytics developer portal api management dashboard source code go documentation generator see also static site generator docstore static document hosting without serverside processing require recompile every time change article clone repository add article text directory get started source code javascript flatdoc small javascript file fetch markdown file render full page mit javascript markdowntree serve hierarchy tree directory markdown file use intended small site built markdown mit ruby read doc host documentation making fully searchable easy find import doc using major version control system including mercurial git subversion bazaar demo source code mit python localization accent opensource selfhosted developeroriented translation tool source code elixir pootle online translation localization tool source code python traduora translation management platform team source code dockernodejs weblate webbased translation tool tight version control integration demo source code python zanata webbased translation platform translator content creator developer manage localisation project source code java static site generator back top see http staticsitegeneratorsnet http wwwstaticgencom task managementtodo list back top see also project management ticketing kanbana create board track user project flat markdown file forked crepido mit nodejs kanboard simple open source visual task board source code mit php mytinytodo simple way manage todo list ajax style us php jquery sqlitemysql gtd compliant demo source code php nullboard singlepage minimalist kanban board compact highly readable quick use demo javascript php tasktodo list simple tasktodo list us json text file task mit php planka open source trello alternative demo source code mit nodejs restyaboard open source trellolike kanban board demo source code php task keeper list editor power user backed selfhosted server scala taskboard kanbaninspired app keeping track thing need get done demo source code mit php taskfreak simple efficient web based task manager written php php task simple task note manager written php jquery bootstrap using custom flat file database php task kanban based todo list manager written go mit go taskwarrior taskwarrior free open source software manages todo list command line flexible fast efficient unobtrusive job get way source code mit c tinyissue simple issue tracking team mit php todo simple todo list manager demo mit go todomini mobile friendly zerofeature todo list web app unix philosophy demo source code phpclojure track webbased application help implement david allen getting thing methodology source code ruby vikunja todo app organize life demo source code go volition opinionated opensource task management mit ruby wekan opensource trellolike kanban demo source code mit nodejs ticketing back top see also task managementtodo list project management bugzilla generalpurpose bugtracker testing tool originally developed used mozilla project perl bumpy booby simple responsive highly customizable php bug tracking system source code mit php cerb groupbased email management project source code dpl php diamantedesk diamantedesk free open source easytouse helpdesk solution demo source code php djangotodo djangotodo pluggable multiuser multigroup multilist todo ticketing system reusable app designed dropped existing django project source code pythondjango flyspray uncomplicated webbased bug tracking system source code php freescout open source clone help scout emailbased customer support application help desk shared mailbox php helpy helpy modern open source helpdesk customer support application feature include knowledgebase community discussion support ticket integrated email demo source code mit ruby huboard instant project management github issue connects directly github api mit ruby mantisbt self hosted bug tracker fit best software development demo source code php opensupports multi language ticket system faq role management metric canned response feature demo source code php osticket manage organize archive support request response one place source code php otrs trouble ticket system assigning ticket incoming query tracking communication source code perl request tracker enterprisegrade issue tracking system source code perl sentry onpremise powerful error tracking platform wide language support robust api source code pythondjango sit scmagnostic filebased offlinefirst immutable issue tracker source code mit rust thebuggenie friendly project management issue tracking tool extensive user right system source code php zammad easy use powerful opensource support ticketing system source code ruby url shortener hosting one please see shortcoming url shortener back top gshort privacyfriendly selfhosted url shortener demo go kutt modern url shortener support custom domain source code mit nodejs linkshortenerbot url shortener using telegram bot demo mit ruby liteshort userfriendly actually lightweight configurable url shortener demo mit python lstu let shorten url lightweight url shortener wtfpl perl polr modern minimalist modular lightweight url shortener source code php reducio url shortener service written scala using akkahttp redis mit scala reducepy url shortener service using tornado redis run docker kubernetes mit python schort login javascript short link demo python shlink url shortener rest api command line interface includes official progressive web application docker image source code client mit php shorturl simple url shortener tiny url demo mit go simpleurlshortener kiss url shortener public private account minimalist lightweight dependency demo mit php simply shorten simple url shortener shortens link mit java urlshortener shitty url shortener emoji ai powered mit nodejs urlshortener make long link short us lowercase write spell faster demo php yourls yourls set php script allow run url shortener feature include password protection url customization bookmarklets statistic api plugins jsonp source code mit php vpn back top see http vpn web server back top see http web wikis back top see also documentation generator wikimatrix wiki engine wikiindex list wiki software wikipedia comparison wiki software wikipedia bookstack bookstack simple selfhosted easytouse platform organizing storing information allows documentation stored book like fashion demo source code mit php cowyo cowyo featurerich wiki minimalist demo mit go djangowiki wiki system complex functionality simple integration superb interface store knowledge style use django model demo python documize modern doc wiki software builtin workflow single binary executable bring mysqlpercona source code go dokuwiki easy use lightweight standardscompliant wiki engine simple syntax allowing reading data outside wiki data stored plain file therefore database required source code php gitit wiki program store page uploaded file git repository modified using vcs command line tool wiki web interface haskell gollum simple gitpowered wiki sweet api local frontend mit ruby jingo git based wiki engine written nodejs decent design search capability good typography mit nodejs mediawiki mediawiki free opensource wiki software package written php serf platform wikipedia wikimedia project used hundred million people month demo source code php moinmoin advanced easy use extensible wikiengine large community user source code python outline open extensible wiki team built using react nodejs source code nodejs pepperminty wiki complete markdownpowered wiki contained single php file demo php pinedocs simple fast customizable lightweight site browsing file php pmwiki wikibased system collaborative creation maintenance website php raneto raneto open source knowledgebase platform us static markdown file power knowledgebase mit nodejs tiddlywiki reusable nonlinear personal web notebook source code nodejs tiki wiki cm groupware builtin feature demo source code php twiki twiki perlbased structured wiki application typically used run collaboration platform knowledge document management system knowledge base team portal demo source code perl wiki simple markdown based wiki engine demo mit go wikijs modern lightweight powerful wiki app built nodejs git markdown demo nodejs wikiss wiki simple use install source code php xwiki second generation wiki allows user extend functionality powerful extensionbased architecture demo source code java zim graphical text editor used maintain collection wiki page page contain link page simple formatting image source code python selfhosting solution back top selfhost web apps microservices lambda server advanced feature enable service reuse composition go ansiblenas build fullfeatured home server playbook ubuntu box mit yamldocker charjabox highly configurable ansible based homeserver setup using docker yamlansibledocker cloud computer computer cloud deploys one click make application accessible web browser source code mit docker dietpi minimal debian o optimized singleboard computer allows easily install manage several service selfhosting home source code shell dockstarter dockstarter help get started home server apps running docker source code mit shell dplatform deploy selfhosted apps easily simple bloatfree independent installation source code mit shell flap low maintenance framework manage selfhosted service source code dockershell freedombone home server configuration based debian source code shell freedombox community project develop design promote personal server running free software private personal communication pythonother freenas networkattached storage na software based freebsd openzfs file system support smb afp nfs iscsi ssh rsync ftptftp protocol advanced feature include fulldisk encryption plugins source code pythonother homelabos offlinefirst privacycentric opensource datacenter deploy service command source code mit docker nextcloudpi nextcloud preinstalled preconfigured text web management interface tool needed self host private data installation image raspberry pi odroid docker curl installer armbiandebian source code bashphp openmediavault openmediavault next generation network attached storage na solution based debian linux contains service like ssh ftp smbcifs daap medium server rsync bittorrent client many source code php piratebox diy anonymous offline filesharing communication system built free software inexpensive offtheshelf hardware pythonother sandstorm personal server running selfhosted apps easily securely demo source code cother sovereign set ansible playbook build maintain private cloud email calendar contact file sync irc bouncer vpn yamlother syncloud online file storage social network email server source code pythonother ubos linux distro run indie box personal server iot device singlecommand installation management apps jenkins mediawiki owncloud wordpress etc feature perlother wikisuite comprehensive integrated free libre open source enterprise software suite source code multiple clearos yunohost server operating system aiming make selfhosting accessible everyone demo source code pythonother list license back top external link back top contributing contributing guideline found githubcontributingmd author list author found authorsmd license list creative common attributionsharealike unported license
43,Lobsters,vcs,Git & VCS,What % Of GitHub Commit Messages Use The Imperative Mood?,https://initialcommit.io/blog/Git-Commit-Message-Imperative-Mood,github commit message use imperative mood,introduction git best practice imperative mood git documentation github activity data gdelt web part speech popular initial commit message git dataset github activity data github activity data dataset gdelt web part speech dataset gdelt web part speech assumption method result shoot email conclusion version control git oreilly medium,introduction one many git best practice write commit message using imperative mood traced back git documentation summarize describe change imperative mood eg make xyzzy frotz instead patch make xyzzy frotz changed xyzzy frotz giving order codebase change behavior example commit message written imperative mood bump version add gitignore refactor product repository functional isolation clarity merge branch master remove unneeded test fix bug preventing menu sliding mobile notice commit message start verb present tense help describe purpose commit clear concise way also help standardize format commit message general article explore frequently developer adhere rule estimating percentage commit message use imperative mood combining force two powerful public datasets google bigquery first github activity data dataset contains data almost million git repository second gdelt web part speech dataset contains billion language token extracted analyzed tagged global web activity using google natural language api link two datasets roughly estimate percentage git commits use imperative mood primer using google bigquery analyze simpler problem check previous article popular initial commit message git reading one dataset github activity data previous article used github activity data dataset find popular initial commit message git quite simple required data life single table commits table single database bigquerypublicdatagithubrepos database refresher public bigquerypublicdatagithubrepos database contains data million public github repository data includes repository name committed file name commit message author name timestamps article make use commit message data commits table analysis goal extract commit message message field commits table try determine percentage commits use imperative mood get thing started easily get total number nonempty commit message dataset january april running following query select count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds length trim lower message yield result total commits dataset gdelt web part speech dataset point need way identify whether commit message commits table us imperative mood gdelt web part speech dataset come dataset includes table called webpos record represents language token extracted online source record come source dozen language purpose language token single word noun verb adjective useful field webpos table many make use date source token published token text case single word language token tag representing token type verb noun adj num punct etc tense token past present future pluperfect mood token indicative imperative subjunctive interrogative url token source assumption method make imperfect assumption commit message imperative mood first word commit message must present tense imperative verb luckily google bigquery allows joining data multiple unrelated datasets single sql query allows u write following query access datasets return count commit message present tense imperative verb first word select count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds length trim lower message regular expression match first word commit message lower regexpextract message rw select lower token langen match english token postag verb match verb posmood imperative match imperative mood postense present match present tense filter plural token unless end double lower substr token lower substr token s group lower token result resulting output query commits dividing total number commits calculated yield therefore estimate approximately commit message github dataset use imperative mood keep mind several aspect method introduce error calculation oftentimes beginning commit message contains noise ticket number story id build tool stamp arbitrary tag data case regexpextract message rw function pick first word come across tag even intended starting point imperative mood verb appears later commit message suspect lead noticeable undercounting actual number imperative mood commit message dataset furthermore natural language database unique present tense verb labelled imperative quick google search believe significantly verb used imperative mood possible word list match would occur commit message data however feeling imperative verb typically used programmer commit message like fix merge bump add modify etc relatively common one well represented current set thought make query accurate feel free shoot email conclusion article used google bigquery access two public datasets enabled u estimate percentage git commits use imperative mood heard git interested great beginner book highly recommend version control git oreilly medium read book year ago clarified lot git concept command use almost every day
44,Lobsters,vcs,Git & VCS,Stacked Pull Requests: Keeping GitHub Diffs Small (2016),https://unhashable.com/stacked-pull-requests-keeping-github-diffs-small/,stacked pull request keeping github diffs small,nt catching bug broken window code review fatigue create wip pull request wip hub pr todos create stacked pull request commit git add patch commits n finished product feedback beautiful feedback tip merge squash landing stack github support updating target branch pr measure difference last stack,code review nt catching bug also help team build trust create shared coding standard force discussion vetting code design prevent broken window pull request get big cause code review fatigue learn post split large pr smaller pr ship dependent chain pr quickly create wip pull request git workflow start work feature branch git checkout b somefeature git commit first change gone far open wip pr give opportunity get organized come plan give team opportunity see going open let people progressively review progress following us github cli tool hub although could use site directly hub pullrequest wip adding somefeature x thing thing hack away committing early often keep team updated pushing checking pr todos wip ready ship close pr ready start stacked pr tip nt delete branch yet handy remote backup case create stacked pull request start creating new branch change somefeature unstaged git checkout b somefeature git reset master running git status show change made somefeature copied uncommitted state start creating commits make stacked pr commit reach git add patch create first logical commit branch git add patch change staged stash everything else verify thing still work git stash includeuntracked keepindex make test test pas time create first commit pr stack git commit make change x git push origin hub pullrequest somefeature make change x commits n next commit start creating new branch stash popped git checkout b git stash pop back git add patch create test next commit git add patch git stash includeuntracked keepindex make test git commit somefeature make change git push origin creating pr make sure base previous branch b flag hub pullrequest b repeat process made way stash finished product result stack focused reviewable pr git graph look bit like branch depending previous one master somefeature stacked pr ready review feedback beautiful feedback pinged team review comment start coming notice much feedback stacked pr provoke compare rather large pr garnered little feedback comment huge address feedback push enough stamp merge tip merge squash making additional commits branch sure propagate stack via git merge git rebase git co git commit addressing feedback git commit addressing feedback git push origin git co git merge integrate change make test rebasing focus keeping later branch tipped front earlier branch noble goal force resolve merge conflict commit time case stacked pr necessary squashing commits merge stack anyways make life easier use git merge multiple commits conflict able resolve one go go staying date master consider merging instead rebasing landing stack point collected lgtm pr stack time merge tempting merge stack since pr likely stamped first resist urge merging first pr cause following pr become unmergeable github support updating target branch pr instead go stack last first merge stack master result single wellreviewed commit master measure difference stacked pr lead thoroughly reviewed code shipping faster experience positive last stack line code comment feedback commits addressing feedback compare next stack large long running pr see difference cheer
45,Lobsters,vcs,Git & VCS,Using Google BigQuery to identify the most popular initial commit message in Git,https://initialcommit.io/blog/What-Is-The-Most-Popular-Initial-Commit-Message-In-Git,using google bigquery identify popular initial commit message git,introduction initial commit git background google bigquery google overview github activity data writing sql query google bigquery top popular initial commit message conclusion google bigquery estimate percentage commit message use imperative mood,introduction article explore initial commit message popular analyzing public github dataset google bigquery contains data almost million git repository leverage data compile list commonly used initial commit message dataset nt familiar initial commits check article initial commit git reading one start briefly explaining google bigquery background google bigquery google bigquery data warehouse hosted google cloud platform accessible web service designed host big data cloud environment provide fast convenient access data internet part service google provides numerous public datasets developer experiment many useful scientific research community including data food drug administration u census national oceanic atmospheric administration course github using github dataset article contains data million public github repository data includes repository name committed file name commit message author name timestamps mainly using commit message try gain insight common initial commit message developer use information github dataset see google overview github activity data interested link includes button access data via bigquery console note provide billing account detail even though access free let jump query git data writing sql query google bigquery google bigquery interface look like bottomleft panel console list different datasets available note selected githubrepos dataset expanded item expanded list represents table database making use commits table contains commit message information need commit message information stored message column table commits table contains data way present big white panel topcenter screen editor use write execute sql query datasets query used fetch group count commit message select trim lower message count bigquerypublicdatagithubreposcommits authordateseconds authordateseconds arraylength parent length trim lower message group trim lower message order count desc limit query simply group together commits commit message count many commits contained message commits table field called parent store parent commit id commit filtered field using clause arraylength parent since initial commits nt parent note commits made detached head state would also contain parent manually excluded based commit message content used lower function ensure uppercaselowercase letter nt prevent message grouped together also used trim function remove leading trailing whitespace grouping added filter authordataseconds column bring back commits made january april ordered resulting commit message frequency occurrence highest lowest finally limited result record since maximum amount conveniently downloaded console interface way need let move finding top popular initial commit message running query simply picked top result ranking top commit message ranked frequency occurrence dataset commit messagecount total initial first initial initial create init update first initial create inital initial create ghpages branch via initial initial initial commit add default gitignore gitattribute top initial commits message combined total commits result see initial commit far popular message used representing sample second popular message first commit representing third ranked message init clearly percentage drop extremely quickly remaining result mostly made word initial init mixed another term like import version release checkin remaining message related including readmemd licensemd gitignore gitattribute file lastly message create ghpages branch via github likely indicating github page feature gaining traction tell initial commit message used dataset strongly weighted toward initial commit small minority favoring first commit smattering option probably tell name website run herd one favor initial commit conclusion article analyzed public github dataset google bigquery explore popular initial commit message used developer working git found topic interesting check analysis us google bigquery estimate percentage commit message use imperative mood
46,Lobsters,vcs,Git & VCS,Easily rename your Git default branch from master to main,https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx,easily rename git default branch master main,internet engineering task force ietf point masterslave metaphor update git rev news edition us master context master copy master recording move history nt changed note note check protected branch rule updating local clone update local alias note update git sponsor developing rider hosting,internet engineering task force ietf point masterslave oppressive metaphor never become fully detached history well addition inappropriate arcane masterslave metaphor technically historically inaccurate lot accurate option depending context cost nothing change vocabulary especially one le little speed bump getting new person excited tech might say using master masterslave technical relationship clearly instance mastercopy masterslave update good analysis whole main branch convo git rev news edition git likely us master context master copy master recording see word master nt always connote slave many evocative via basic wordassociation nt want look word prompt day choice cool dozen git repository master main branch changing would hassle right let see git branch master main push back remember move history nt changed even better git push u origin main set upstream timed githubwindowsterminalhere master git branch master maind githubwindowsterminalhere main git push u origin maintotal delta reused delta remote remote create pull request main github visiting remote http githubcomshanselmanwindowsterminalherepullnewmainremote http githubcomshanselmanwindowsterminalheregit new branch head main easy note changing default branch main also benefit starting autocomplete tab muscle memory still work another great option main github branch latest goal unambiguous need change default branch github setting repository also update tracking branch manually seen use git push u origin main bothgit branch u originmain main last thing think cicd github action azure devops pipeline build system pull specific branch change main however usually unless ci explicitly call branch name changing master main work note complex repos also check protected branch rule move reflog unchanged tl dr conclusion git branch master maingit push u origin main updating local clone someone local clone update local like git checkout master git branch master main git fetch git branch unsetupstream git branch u originmain git symbolicref refsremotesoriginhead refsremotesoriginmain tweet thanks brad xunitnet step go master branch rename master main locally get latest commits server remove link originmaster add link originmain update default branch originmain add alias git new default whatever starting branch like note longer needed set git config global aliasnew git init git symbolicref head refsheadsmain update git nt need alias new config option called initdefaultbranch set forget itgit config global initdefaultbranch main hope help good name latest trunk stable sponsor tried developing rider yet fast featurerich crossplatform ide improves code net aspnet net core xamarin unity application window mac linux hosting
47,Lobsters,vcs,Git & VCS,Speeding up a Git monorepo at Dropbox with <200 lines of code,https://dropbox.tech/application/speeding-up-a-git-monorepo-at-dropbox-with--200-lines-of-code,speeding git monorepo dropbox line code,magic pocket edgestore prereceive monorepo centric build tool like bazel automatic bisects reverts watchman index extension mode untracked cache fixed bug bugfix one large performance issue scalar exciting work done open source improve version control performance acknowledgement go watchman,migrated mercurial git improve local performance began consolidating repository hosted backend code monorepo grew experienced git performance issue grew linearly number file added inconveniently problem severe platform engineer work fortunately upstream improvement git small wrapper custom code able speed git operation without fragmenting unified growing repository originally code distributed across several dozen mercurial repository around tested found better local performance git importantly git become industry standard tool new engineer already used course hack week small group engineer migrated many repository mercurial git planned migrate rest backend business logic dropbox time lived mainly monolithic python web application infrastructural component built independently time extracted targeted component monolith separate service large number engineer still contribute monolith example magic pocket custom block storage system built separately day one metadata store edgestore started simple client side python library eventually spun sophisticated service practice meant monolith largest often consumer smaller service code separate repository consequently developer would write integration test service monolith repository test often failed service code changed since continuous integration ci process simply ran test head repository notion pinning hard diagnose root cause problem large frequency change meant would multiple failure week debugging test failure tracking change fixing build daily release painful process caused lot work release engineer made release process slow inconsistent due indeterminate nature test failure engineer trust ci test result inspect failure led problem solve needed single commit identifier reproducibly determine state code testing either needed polyglot tool set tool per language pin version dependency directly repositorybased pinning mechanism like git subtree merge repository one super repo received checkin every time one serverrelated repository changed via git prereceive hook provided global ordering change test result helped narrow repository caused breakage eventually realized would simplest merge relevant repository combined repository size large file estimated git performance would acceptable least year merge combined various initiative improve testing infrastructure quality helped u keep master much stabler much le work smoothed release process eventually seen even benefit like simple code sharing easy large scale refactoring good operability monorepo centric build tool like bazel simple automatic bisects reverts worked u year expected git performance started degrading specifically seemed degrade linearly number file added repository common operation like git status getting slower time late started investigating various option speed git user start checking large file severely impact performance many operation git fortunately workflow depended set prereceive hook limit size new file pushed repository prevent regression macos supported development platform dropbox engineer free use platform see fit example engineer working dropbox desktop client might work window server engineer prefer linux practice server engineer use macos focused effort order tackle local git performance needed control version git developer macos used additionally measure performance created small fork git measured timing operation like git status git pull automatically provisioned installed developer machine munged path developer use git one installed system homebrew copy git optdropboxoverridebingit time git status took two second average case many git operation slow grew linearly since ran lstat syscall every file repository check date since developer modify small subset file wasted cycle case interestingly git status faster linux compared macos substantial work open source community speed git large repository last year example git file system monitor fsmonitor detect changed file integrated watchman daemon watch buffer filesystem change fsmonitor git hook act thin wrapper around watchman useful abstraction internal git test would helpful need use alternate file watcher migrate away watchman git us index file contains entry file repository determines file staged commit index also support extension various feature like fsmonitor file ability cache result fsmonitor git operation need local filesystem state like add status diff check fsmonitor changed file update index change git fsmonitor watchman work macos index sorted file path default common operation like adding file index via git add requires full index rewrite insert new path right place slow repository large index git also introduced new splitindex mode convert index format delta could quickly appended split index file eventually consolidated shared index file making index writes significantly faster finally untracked cache mode cached directory mtimes git could skip traversing unmodified directory deployed fsmonitor watchman developer macbooks released instruction turn unfortunately performance bug git seemed ignore fsmonitor data case correctness bug operation like git status sometimes returned wrong result fsmonitor enabled dug fixed bug ultimately shifted focus lost team member git expertise priority second half repo reached file decided refocus problem upstream bugfix looked promising fixed one large performance issue time confident enable improvement user without intervention one core principle shipping developer tool would configured correctly everyone default settled shipping wrapper top git would automatically tweak configs enable fsmonitor developer already turned whitelisted set repository similar microsoft scalar principle without feature without need developer learn additional tool run additional command incrementally rolled git first week december saw significant reduction duration common operation worth noting operation nowhere fast running git smaller repository big improvement status quo acceptable purpose also sure time growing linearly number file repository finally enabled line custom plumbing code around git additional service large virtual filesystems maintain exciting work done open source improve version control performance large repository git mercurial prep work like disallowing large file setting right flag client git perform reasonably well almost zero ongoing maintenance burden many tradeoff deciding monorepo multiple repository version control scalability dealbreaker long time acknowledgement dozen engineer contributed work described many year mercurial git migration repository merges finally work described speed git various current former dropboxers include tim abbott jon goldberg nipunn koorapati jason michalski greg price mike solomon alex vandiver also many thanks maintainer git various microsoft engineer helped review patch contributed several major feature git like file system monitor kudos facebook building open sourcing watchman charles strahan wrote go watchman library use
49,Lobsters,vcs,Git & VCS,Managing GitHub Issue Labels Across Organizations and Repositories,https://alta3.com/blog/managing-github-issue-labels-across-organizations-and-repositories,managing github issue label across organization repository,github default label management label pygithub prerequisite personal access token install example file run list repos make backup current label set common set label every repo,github default issue label really really bad githubissuecentric organization suffered nondescriptive label far long finally took charge fixing issue addition poor default github provide ability manage issue label degree fidelity user organization need thing ca nt github default label management include updating default label old repos new one managing label across multiple organization user revision control management change making backup existing label existing repos solution used awesome label python project combination short python script used pygithub library end old label backed established new default issue label scheme likely last u many year come resulting issue label step followed script default thing repos prerequisite user access repository modified github personal access token created give descriptive name select repo scope install step set python environment configure venv venv source venvbinactivate python pip install upgrade pip wheel python pip install r requirementstxtexample env file githubusertoken yourtokenhere labelstoken githubusertoken labelsuser yourusername run list repos take minute update script fetch list user organization repository would like manage use list next step python listallrepospymake backup current label pipe resulting list run label fetch command repoisitory mkdir p repolabels python listallrepospy xargs label fetch owner repo filename repolabels labelstomlset common set label every repo viewedit defaultlabelstoml list label next use list repository run label sync update repository use new list issue label python listallrepospy xargs label sync owner repo filename allreposlabelstomlnow looking repository see list available label like image addition also created folder full old label run script regular basis keep track label created across repos also take good idea issue label one project expand use across others list source code used accomplish task repos available thanks reading happy label making
50,Lobsters,vcs,Git & VCS,gitea-release Tool Announcement,https://christine.website/blog/gitea-release-tool-2020-05-31,gitearelease tool announcement,gitearelease tool announcement tulpadev gitea changelogmd version file keep changelog semantic version release process automation automation drone plugin system structopt drone build history gitearelease repo changelog gitearelease nix contact method issue pull request contact,gitearelease tool announcement big fan automating thing possibly automated one biggest pain consistently creatingtagging release software manual process write changelogs bump version replicate changelogversions web ui whatever git forge project question using work great smaller scale quickly become huge pain butt need done often today written small tool help automate going forward named gitearelease one largest rust project date something incredibly happy using going forward repos gitea instance tulpadev gitearelease spiritual clone tool githubrelease optimized workflow biggest change work gitea repos instead github repos written rust instead go automatically scrape release note changelogmd well reading version software version changelogmd version file changelogmd file based keep changelog format modified slightly make easier tool example changelog tool accepts changelog notable change project documented file format based keep changelog http project adheres semantic versioning http fixed refrobnicate spurious rilkefs first release proof concept release created version tool make description release follows fixed refrobnicate spurious rilkefs allows changelog file ultimate source truth release note tool version file play well version file must single line containing semantic version string allows version file ultimate source truth software version data tool release process tool run release subcommand following action take place version file read loaded desired tag repo changelogmd file read change version cherrypicked file git repo checked see tag already exists tag exists tool exit nothing tag exist created changelog fragment body tag pushed gitea server using supplied gitea token gitea release created using changelog fragment release name generated version string automation automation tool work perfectly well locally nt make fully automated gitea repo use drone cicd tool gitea repos drone convenient simple use plugin system easy integrate structopt created drone plugin xenagitearelease configured pipeline step droneyml like kind pipeline name cirelease step name whatever unit testing step name autorelease image setting authusername cadey changelogpath changelogmd giteaserver http tulpadev giteatoken fromsecret giteatoken event push branch master allows bump version changelogmd push commit git new release automatically created see example action drone build history gitearelease repo also changelogmd file grows changelog gitearelease release pushed gitea use drone trigger deployment command example deployment pipeline used automatically update docker image gitearelease tool kind pipeline name docker step name build docker image image environment user root command cachix use xe nixbuild dockernix cp readlink result resultdockertgz volume name image path result event tag name push docker image image docker dind volume name image path result name dockersock path varrundockersock command docker load resultdockertgz echo dockerpassword docker login u dockerusername passwordstdin docker push xenagitearelease environment dockerusername fromsecret dockerusername dockerpassword fromsecret dockerpassword event tag volume name image temp name dockersock host path varrundockersock pipeline use nix build docker image load docker daemon log docker hub push used whatever want may also good idea push docker image every commit relabel tagged commits nt implemented repo hope tool useful accept feedback contact method want contribute directly project please feel free create issue pull request nt want create account git server get issue detail code diffs somehow everything fix issue integrate code want make tool better however well share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear tag gitea rust release
51,Lobsters,vcs,Git & VCS,git-fuzzy: interactive git with the help of fzf,https://github.com/bigH/git-fuzzy,gitfuzzy interactive git help fzf,installing required bash zsh fish antibody usage supported subcommands useful information enable debugging switch customizing remember adequately quote value used unquoted remember adequately quote value used unquoted remember adequately quote value used unquoted desmos many configuration option available backup usage projectspecific setting question ui flash issue stability hacking variable considered nonempty,gitfuzzy cli interface git relies heavily fzf version higher run git add git reset selecting cursoring commit interactively search diff query bar rh diff highlighted accordingly search log corresponding diff notice use left hand side sent log right hand side sent diff installing fzf required bash git clone http githubcombighgitfuzzygit add executable path echo export path pwd gitfuzzybin path bashrc zsh git clone http githubcombighgitfuzzygit add executable path echo export path pwd gitfuzzybin path zshrc fish git clone http githubcombighgitfuzzygit add executable path echo set x path pwd gitfuzzybin path configfishconfigfish antibody update zshrc file following line antibody bundle bighgitfuzzy path bin kind path usage simply install run git fuzzy begin using menu supported subcommands git fuzzy status git fuzzy status interact staged unstaged change git fuzzy branch git fuzzy branch search checkout look branch git fuzzy log git fuzzy log look commits git log typing search simply filter usual fzf style git fuzzy reflog git fuzzy reflog look entry git reflog typing search simply filter usual fzf style git fuzzy stash git fuzzy stash look entry git stash typing search simply filter usual fzf style git fuzzy diff git fuzzy diff interactively select diff subject drilling enables searching diff content diff browser git fuzzy pr git fuzzy pr interactively select opendiff github pull request useful information item menu accessed via cli running git fuzzy command many command simply pas additional cli args underlying command eg git fuzzy diff b xyz call git diff nameonly b xyz time git command output used preview listing header command run useful copypasting optionally enable debugging switch see command run background customizing ideal experience install git fuzzy diff us grep highlight search term default may clash diff formatting liking configure git fuzzy without affecting global setting export gfgrepcolor provided gfpreferredpager used way decorate diffs otherwise diffsofancy delta tried using raw diffs remember adequately quote value used unquoted export gfpreferredpager delta themegruvbox highlightremoved w width present bat used highlighting choose different default git fuzzy desire set git fuzzy export gfbatstylechanges export gfbatthemezenburn set globally bat instance export batstylechanges export batthemezenburn may often want use different branch remote use mergebase git fuzzy default originmaster export gfbaseremoteupstream export gfbasebranchmain may want diff search behave differently git fuzzy diff nt apply log command us diff query quoted fzf provided next argument default case mean g query default g export gfdiffsearchdefaults pickaxeregex may want custom format log andor reflog experience hidden command header save room enable freedom formatting parameter remember adequately quote value used unquoted trouble quoting format use pretty format alias see man gitconfig default prettyoneline abbrevcommit git fuzzy log export gflogmenuparams pretty cred h creset c yellow creset cgreen cr c bold blue creset topoorder git fuzzy reflog export gfreflogmenuparams prettyfuzzyformat also configure various git command default args various context hidden command header save room enable freedom formatting parameter remember adequately quote value used unquoted set default diffing branch commits preview export gfdiffcommitpreviewdefaults patchwithstat diffing branch commits preview export gfdiffcommitrangepreviewdefaults summary diffing individual file export gfdifffilepreviewdefaults indentheuristic use vertical terminalswindows often may want configure threshold switching vertical view ratio calculated running width height gfverticalthreshold calculated using gnu bc default export gfverticalthreshold height also configure size preview window calculated calculated using gnu bc try using desmos tweak calculation default complex shown use width horizontal scenario export gfhorizontalpreviewpercentcalculationmax min width use height horizontal scenario export gfverticalpreviewpercentcalculationmax min height may want customize default keyboard shortcut many configuration option available example export gitfuzzystatusaddkeyctrla backup git fuzzy take backup current sha branch index diff unstaged diff new file helpful case take action hastily like discarding file meant stage bug like snapshot simply set variable following entry zshrc corresponding gitignoreglobal directory repository perfectly fine export gfsnapshotdirectorygitfuzzysnapshots bc usage bc program run useful function defined min max like add others set default defining function export gfbclibmyfavoritevariable projectspecific setting git fuzzy source gitfuzzyconfig present add following gitignoreglobal avoid worry git picking file sourced end build top existing default configuration make preview bigger keep flexibility export gfhorizontalpreviewpercentcalculation gfhorizontalpreviewpercentcalculation question ui flash execute fzf man page state fzf switch alternate screen executing command filed issue enable making transition smoother stability hacking built working reasonably well said gone great pain polish existing functionality work pretty nicely made easy develop change feature using debug output check behavior debug output go devstderr hack using pipe zsh bash readline shortcut variable considered true nonempty debugging information export gfdebugmode yes command run program without header export gfcommanddebugmode yes fzf command run program export gfcommandfzfdebugmode yes log output command run git fuzzy export gfcommandlogoutput yes log internal command pretty noisy export gfinternalcommanddebugmode yes
52,Lobsters,vcs,Git & VCS,One Minute Presubmits,https://docs.google.com/presentation/d/14dxac2omYI5Feaoiw-u09qB1fQgJU7ASNJag7YMg3TI/edit#slide=id.g61b36395ff_1_0,one minute presubmits,,javascript nt enabled browser file ca nt opened enable reload
53,Lobsters,vcs,Git & VCS,"Fossil: A distributed VCS with Wiki, Issue tracker and Web Interface built in",https://www.fossil-scm.org/,fossil distributed vcs wiki issue tracker web interface built,fossil distributed version control bug tracking wiki forum technotes themeable extensible web interface example wiki embedded documentation download unversioned file selfhosting repository precompiled binary easytocompile source code proxy bandwidth efficient several different server configuration mirror content github autosync mode forking merging enduring file format selfchecks bsd license latest release quick start download compile source quick start guide,fossil fossil simple highreliability distributed software configuration management system advanced feature integrated bug tracking wiki forum technotes addition distributed version control like git mercurial fossil also support bug tracking wiki forum technotes builtin web interface fossil builtin themeable extensible intuitive web interface rich variety information page example promoting situational awareness entire website running instance fossil page see wiki embedded documentation case download page unversioned file clone fossil one selfhosting repository get source code get entire website selfcontained fossil single selfcontained standalone executable install simply download precompiled binary linux mac window put path easytocompile source code also available simple networking custom protocol tcp port fossil us ordinary http http ssh network communication work fine behind restrictive firewall including proxy protocol bandwidth efficient point fossil used comfortably dialup exceedingly slow wifi airliner simple server setup server required want set one fossil support several different server configuration including cgi scgi direct http also easily set fossil repository automatically mirror content github autosync fossil support autosync mode help keep project moving forward reducing amount needle forking merging often associated distributed project robust reliable fossil store content using enduring file format sqlite database transaction atomic even interrupted power loss system crash automatic selfchecks verify aspect repository consistent prior commit free opensource us bsd license latest release quick start download install using package manager compile source fossil init newrepository fossil open newrepository fossil add filesordirectories fossil commit commit message fossil ui repeat step order necessary see quick start guide detail
54,Lobsters,vcs,Git & VCS,Beta git conversion available for experimentation,https://lists.freebsd.org/pipermail/freebsd-git/2020-May/000288.html,beta git conversion available experimentation,beta git conversion available experimentation emaste freebsdorg http cgitbetafreebsdorg http cgitbetafreebsdorgdoc http cgitbetafreebsdorgports http cgitbetafreebsdorgsrc information freebsdgit mailing list,beta git conversion available experimentation ed maste emaste freebsdorg wed may utc pleased share git working group beta version freebsd doc port src repository browse repository http cgitbetafreebsdorg three individual repository http cgitbetafreebsdorgdoc http cgitbetafreebsdorgports http cgitbetafreebsdorgsrc compared current git mirror repos github ulrich put lot effort fix svnallfastexport handle mergeinfo address issue git conversion correctly represents vendor branch merges tag operation etc work still ongoing work long tail oddity subversion history caution order git hash repository change experimental purpose point yet used production purpose initial goal maintainer party contrib software freebsd clone check history individual component start experimenting managing vendor branch git model lot detail provided near future wanted share repository link interested party start working new repos information freebsdgit mailing list
55,Lobsters,vcs,Git & VCS,ingydotnet/git-subrepo,https://github.com/ingydotnet/git-subrepo,ingydotnetgitsubrepo,name synopsis description benefit installation command command option output option environment variable installation instruction window testing upgrading command completion bash zsh status note author license copyright,name gitsubrepo git submodule alternative synopsis git subrepo h help overview git subrepo clone remoteurl subdir git subrepo init subdir git subrepo pull subdir git subrepo push subdir git subrepo fetch subdir git subrepo branch subdir git subrepo commit subdir git subrepo config subdir git subrepo status subdir git subrepo clean subdir git subrepo help command git subrepo version git subrepo upgrade description git command clone external git repo subdirectory repo later upstream change pulled local change pushed back simple benefit command improvement gitsubmodule gitsubtree two git command similar goal various problem assumes main role people interacting repo attempt serve well owner person authorsownsmaintains repo user people usinginstalling repo collaborator people commit code repo subrepos gitsubrepo command benefit role following way simple intuitive commandline usage tab completion user get repo subrepos cloning repo user need install gitsubrepo ever collaborator need install unless want pushpull collaborator know subdir subrepo gitrepo file gitrepo file never get pushed back subrepo upstream well named branch remote generated manual operation owner deal complication keeping submodules sync subrepo repository contain subrepos branching subrepos different branch different subrepos different state etc movingrenamingdeleting subrepo subdir init existing subdirectory subrepo git history kept squeaky clean upstream history clonepull condensed single commit pull use merge rebase force strategy see subrepo history git log subrepo subdir fetch commits pushed back upstream condensed default trivial try subrepo operation reset back configuration required introduce history mess git command fix known rebase failure gitsubtree installation best short answer git clone http githubcomingydotnetgitsubrepo pathtogitsubrepo echo source pathtogitsubreporc bashrc complete installation instruction found note gitsubrepo need git version support worktree command subrepo command use name actual git command try operation similar git counterpart also attempt give similar output attempt make subrepo usage intuitive experienced git user please note command exact equivalent take argument keep git subrepo clone repository subdir b branch f msg e method mergerebase add repository subrepo subdir repository similar feel git clone specify remote repo url optionally subdirectory andor branch name repo fetched merged subdir subrepo history squashed single commit contains reference information information also stored special file called subdir gitrepo presence file indicates directory subrepo subsequent command refer subrepo name subdir subdir current information subrepo obtained force option reclone completely replace existing subdir method option decide join process branch performed default option merge clone command accepts branch edit force message option git subrepo init subdir r remote b branch method mergerebase turn existing subdirectory subrepo want expose subdirectory project published subrepo command split content normal subdirectory branch start tracking subrepo afterwards original repo look exactly except subdir gitrepo file specify remote optionally branch option value added subdir gitrepo file remote option upstream url branch option upstream branch push value needed git subrepo push command provided later push command saved subdir gitrepo also specify update option note need create empty upstream repo push using git subrepo push subdir method option decide join process branch performed default option merge init command accepts branch remote option git subrepo pull subdir mrf msg e b branch r remote u update subrepo subdir latest upstream change pull command fetch latest content remote branch pointed subrepo gitrepo file try merge change corresponding subdir making branch local commits subdir merging rebasing see fetched upstream content merge content new branch replaces subdir gitrepo file updated single pull commit added mainline history pull command attempt following command one go git subrepo fetch subdir git subrepo branch subdir git mergerebase subrepo subdir fetch subrepo subdir git subrepo commit subdir needed consequential push git updateref refssubrepo subdir pull subrepo subdir word could command effect command fail subrepo stop tell finish hand generally failure would merge rebase part conflict happen since git lot way resolve conflict personal taste subrepo command defers letting hand pulling new data method selected cloneinit used effect final result pull since becomes single commit affect resulting subrepo subdir branch often used subrepo push command see push information want change method use config command pull assume fastforward strategy default specify rebase merge force strategy latter clone force operation using current remote branch like clone command pull squash change since last pull clone one commit keep mainline history nice clean easily see subrepo history git log command git log refssubrepo subdir fetch set command used described detail pull command accepts branch edit force message remote update option git subrepo push subdir branch r remote b branch mr u f n push properly merged subrepo branch back upstream command take subrepo branch successful pull command push history back designated remote branch also use branch command merge thing pushing want although probably rare use case push command requires branch properly mergedrebased upstream head unless upstream head empty common first push init mean upstream head one commits branch default branch ref refssubrepo subdir pull pushed specify properly merged branch push push command check branch contains upstream head push upstream force option force push force push typically discouraged use option fully understand force option check proper merge branch force pushed push command accepts branch dryrun force merge rebase remote squash update option git subrepo fetch subdir r remote b branch fetch remoteupstream content subrepo create git reference called subrepo subdir fetch point commit fetchhead also create remote called subrepo subdir temporary easily remove subrepo clean command fetch command accepts branch remote option git subrepo branch subdir f f create branch local subrepo commits scan history mainline commits affect subdir create new branch called subrepo subdir useful pull push command hand use force option write existing subrepo subdir branch branch command accepts fetch force option git subrepo commit subdir subreporef msg e f f add subrepo branch current history single commit command generally used handmerge done subrepo branch merged rebased upstream command take head branch put content subrepo subdir add new commit top mainline history command requires upstream head subrepo subdir branch history way branch push upstream use force option commit anyway commit command accepts edit fetch force message option git subrepo status subdir f qv get status subrepo us option default quiet flag used print subrepo name one per line verbose option show recent local upstream commits use show subrepos subrepos ie subsubrepos status command accepts fetch quiet verbose option git subrepo clean subdir f remove artifact created fetch branch command fetch branch operation command call create temporary thing like ref branch remote command remove thing use force remove ref ref removed default sometimes needed command use clean current subrepos sometimes might change branch subrepo nt exist wo nt find use remove artifact ever created subrepo remove subrepo artifact git subrepo clean force clean command accepts force option git subrepo config subdir option value f read update configuration value subdirgitrepo file value stored gitrepo file generated need use force want change anything else method option example update method option subrepo git subrepo config foo method rebase git subrepo help command git help subrepo launch manpage shorter usage use git subrepo h use git subrepo help command get help specific command use get summary command help command accepts option git subrepo version qv command display version information gitsubrepo environment version number use git subrepo version use verbose version info quiet le version command accepts quiet verbose option git subrepo upgrade upgrade gitsubrepo software simply git pull git repository code running work master branch wo nt work installed gitsubrepo using make install case need make install latest code command option h show brief view command option help give overview help option available subrepo command version print gitsubrepo version version number try version command version info multiple subrepos issue command applicable subrepos also subrepos issue command note option work subset command work branch branchname b branchname use different upstream branchname remote head one saved gitrepo locally dryrun n push command everything push print actual git push command needed finish operation edit e edit commit message committing fetch f use option fetch upstream commits running command force f use option force certain command fail general case note force option mean different thing different command read command specific doc exact meaning merge use merge strategy include upstream subrepo commits pull setup push message message message specify commit message command line rebase r use rebase strategy include upstream subrepo commits pull setup push remote remoteurl r remoteurl use different remoteurl one saved gitrepo locally squash squash commits push one new commit update u branch remote used command update gitrepo file include value update output option quiet q print little info possible applicable command verbose v print information command execution result applicable command debug show actual git command executed hood applicable command debug x use bash set x option print every command run noisy extremely useful deep debugging applicable command environment variable gitsubrepo command export honor environment variable gitsubreporoot set rc file use method install enable git subrepo contains path gitsubrepo repository gitsubreporunning variable exported gitsubrepo running set pid gitsubrepo process running process like git hook instance use information adjust accordingly gitsubrepocommand variable exported gitsubrepo running set name gitsubrepo subcommand running use specify pager use long output command default pager le gitsubrepoquiet set quiet q output gitsubrepoverbose set verbose v output gitsubrepodebug set debugging output installation instruction currently way install gitsubrepo need get source code github git clone http githubcomingydotnetgitsubrepo pathtogitsubrepo first installation method preferred source rc file add line like one shell startup script source pathtogitsubreporc modify path manpath also enable command completion second method thing hand might afford control shell environment simply add lib man directory path manpath export gitsubreporoot pathtogitsubrepo export path pathtogitsubrepolib path export manpath pathtogitsubrepoman manpath see info turn command completion third method standard system install put gitsubrepo next git command make install possibly sudo method account upgrading command completion yet window command known work window environment let u know others work nt work testing gitsubrepo repository come extensive test suite run make test nt make system prove v test upgrading used rc path method installation run upgrade gitsubrepo git subrepo upgrade thing cd pathtogitsubrepo git pull used make install method run git pull make install possibly sudo command completion git subrepo command support tab based command completion nt use rc script see installation need enable manually use bash bash setup already provide command completion git need enable first source git completion script system git completion script might found following location somewhere else nt know etcbashcompletiondgit usrsharebashcompletiongit usrsharebashcompletioncompletionsgit optlocalsharebashcompletioncompletionsgit usrlocaletcbashcompletiondgit homebrewetcbashcompletiondgit case ca nt find repository contains copy git completion script source pathtogitsubreposharegitcompletionbash git completion enabled whether needed manually turn gitsubrepo completion command like source pathtogitsubreposharecompletionbash zsh z shell zsh manually enable gitsubrepo completion adding following line zshrc compinit function called fpath pathtogitsubreposharezshcompletion fpath status gitsubrepo command use well year seems get job done development still ongoing mostly fixing bug trying subrepo simple painless git submodule nothing permanent push shared remote ie always play around reset back beginning without pain command test suite run make test surely many bug expertise git subcommands please review code file issue anything seems wrong want chat gitsubrepo command join gitcommands ircfreenodenet note work posix system linux bsd osx etc work various window environment see window section gitsubrepo repo subrepos ext subdirectory written modern bash full test suite take look gitrepo file never top level dir next git dir author license copyright mit license mit copyright c ingy döt net
56,Lobsters,vcs,Git & VCS,Global Gitignore Files Are Cool and So Are You,https://www.viget.com/articles/global-gitignore-files-are-cool-and-so-are-you-1/,global gitignore file cool,setting harnessing incredible power todomd playground wrapping,setting first config setup need even allow radical concept define global gitignore file global git configuration git config global coreexcludesfile gitignore osx command add following config line gitconfig file core excludesfile userstriplegirldadgitignore load gitignore file whatever want probably nt exist file yet might create first harnessing incredible power two line global gitignore file fairly useful pretty much time cat gitignore todomd playground line file mean matter project working project easy space stash note thought progress idea spike etc todomd often fiddling around todomd file something writing markdown familiar text editor speaks soul quick easy text editing trick available never anything would nt expect looking automarkdownformatting editor use one two heading use nested list ask nothing nothing todomd file practice tend one todomd file per project right top ready pull keystroke often pull doc meeting said oh yeah small thing knock afternoon halfway feature development realize want make sweeping refactor elsewhere toss thought doc get back task hand end day switch brain feed small child mode thus obliterating everything workrelated short term memory open thing next day know exactly next thing dive preparing big enough refactor ca nt hold brain give interactive playground brain thought meantime text file nt terrible way plan dev work playground sometimes need human word markdown file move idea along playground directory come load directory code related given project keep git history nt like place play around find directory useful long running maintenance project fast moving greenfield one maintenance project tend find assembling pile script experiment various situation client request onetime obscure data export whip csv generation code save code playground directory client request different obscure data export pull last time something vaguely similar save startup time batch data need imported might well stash chance actually time kicking tire integration third party service playground file end useful time count eg everchanging userexportrb script item get promoted application code always fun file serve purpose wither away fine playground anything go wrapping personal space projectspecific note code helpful year developer multiple project organizational trick want brag memorize everything without markdown file let know comment
57,Lobsters,vcs,Git & VCS,"Distributed, offline-first bug tracker embedded in git, with bridges",https://github.com/MichaelMure/git-bug,distributed offlinefirst bug tracker embedded git bridge,gitbug fully embedded git distributed work offline prevents vendor lockin fast nt pollute project integrates tooling bridge bug tracker bridge installation release page workflow cli usage query command documentation interactive terminal ui web ui status wip bridge importer implementation incremental resume identity bug mediafiles automated test suite exporter implementation bug automated test suite bridge usage internals data model internal birdview misc planned feature contribute gitter lobby dedicated readme contributor backer become backer sponsor become sponsor license viktor teplov creative common attribution international cc,gitbug gitbug bug tracker fully embedded git need git repository bug tracker distributed use normal git remote collaborate push pull bug work offline plane sea keep reading writing bug prevents vendor lockin usual service went bad already full backup fast listing bug opening matter millisecond nt pollute project file added project integrates tooling use ui like cli terminal web integrate existing tool cli graphql api bridge bug tracker use bridge import export tracker proof concept still fully stable expect dragon unfinished business installation precompiled binary go release page download appropriate binary system copy binary anywhere path rename binary gitbug gitbugexe window linux package macos package freebsd packageport install via package manager pkg install gitbug port collection cd usrportsdevelgitbug make install clean compile git unstable git clone git githubcom michaelmuregitbuggit make install done already add golang binary directory path export path path go env goroot bin go env gopath bin workflow multiple way use gitbug native workflow pure gitbug experience similar fashion code use git bug push git bug pull push pull bug git remote collaborate teammate bridge workflow gitbug bridge bugtrackers use personal local remote interface sync git bug bridge pull git bug bridge push work terminal integrate editor work offline web ui workflow wip often project need bugtracker public accept edition anyone facing problem support workflow gitbug aim web ui accept external oauth authentication act public portal however web ui speed yet contribution much welcome cli usage create new identity git bug user create create new bug git bug add favorite editor open write title message push new entry remote git bug push remote pull update git bug pull remote list existing bug git bug l filter sort bug using query git bug l status open sort edit use command like show comment open close display modify bug detail command run git bug command help read command documentation interactive terminal ui interactive terminal ui available using command git bug termui browse edit bug web ui status wip launch rich web ui git bug webui web ui entirely packed inside go binary serve static content localhost http server web ui interact backend graphql api schema available bridge importer implementation github gitlab jira launchpad incremental import resume download new data identity identity update bug comment comment edition label status title edition mediafiles automated test suite exporter implementation github gitlab jira launchpad bug comment comment edition label status title edition automated test suite bridge usage interactively configure new github bridge manually git bug bridge configure name bridge targetgithub urlhttps githubcommichaelmuregitbug login login token token import bug git bug bridge pull name export modification git bug bridge push name deleting bridge git bug bridge rm name internals interested work look data model internal birdview misc planned feature medium embedding bridge extendable data model support arbitrary bug tracker inflatable raptor contribute pr accepted drop gitter lobby chat browse issue see worked discussed git clone git githubcom michaelmuregitbuggit run make build project make install install binary gopathbin work web ui look dedicated readme contributor project exists thanks people contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor license unless otherwise stated project released later license michael muré gitbug logo viktor teplov released creative common attribution international cc license viktor teplov
58,Lobsters,vcs,Git & VCS,Repository Madness,https://alexbilson.dev/posts/multi-repository-madness/,repository madness,background subversion mismatched repository forest irrelevant change branch sync mistake resolution psgitsync script,month ago three colleague added new feature legacy net application one technical challenge faced distributed nature application codebase background code history originally stored subversion svn organization shifted active repository svn git early one carryovers original multirepository structure build app add feature local machine needed clone eight repository except one master repo repository dependency least one sometimes one contained mostly business implementation others mostly object definition yet others primarily web service example working service controller wanted add new object interface create interface separate repo write implementation current repo certain object implemented second repo defined third long job realized change system might unforseen result three overcame technolory exception mismatched repos forest irrelevant uncommited change mistake syncing dozen feature branch mismatched repository every time repository updated team member might spend halfday tracking mysterious error exception would point method one repository developer tracked error source discover error originated repo threw error another repo entirely eventually caught error see git pull likely caused mismatch change repos two common culprit first developer pull update every repository one repository would become outofsync might cause build error sometimes would cause runtime error second developer failed commit push every change relevant feature work amount repo synchronization would resolve error often developer know missed change next painful experience forest irrelevant change developer change nearly impossible identify forest file creation update caused build process change relevant product release current feature every time code built repository would increment app version multiple assembly version file repos contained frontend code flood html would generated precursor razor view engine copied master view repository given repo would multiple terminal buffer full change call git status might rightly ass gitignore file would alleviate problem created remember change across eight repository time developer needed verify file changed need run git status eight separate directory since developer check change every commit feature require many commits ton room error branch sync mistake team operated single working branch per repository dev would also one feature branch every repo sometimes several completed feature waiting code review example needed make change three file implement story file different repo would need feature branch four devs two feature branch open across eight repository many potential branch iteration could checked locally sixteen million assuming everyone branch pushed remote repository uptodate every local machine always case resolution developer worked code every day personal process made work proficient despite challenge team productive first commits took action first add gitignore file exclude massive number generated file local build process receive authorization right away wrote quick dirty powershell script explicitly restore delete irrelevant file script became irrelevant configured gitignore file added branch forest change tamed built powershell script automate many git task reduced likelihood branch mistake mismatched repos script could switch branch across every repository pull latest change everywhere print comprehensive file status script ensure never see issue speed cut mistake interested implemented powershell script need copy check source code psgitsync script
59,Lobsters,vcs,Git & VCS,Question: How does git detect renames?,https://chelseatroy.com/2020/04/20/question-how-does-git-detect-renames/,question git detect renames,question stackoverflow answer first learn something reading output see use git file deleted commit file added commit point git run diff algorithm candidate file git documentation diff algorithm work repo containing git search result file description libxdiff juicy gossip talk google finally stepped away leadership searched git repo liked piece might also like time discovered people tout numpy vectorization time discovered time discovered like,reading time minutesi teach mobile software development class student ask excellent question answer question thoroughly concisely accurately spot defer answer class followup one question question learned using git log see history commits git log pathtofile see commits changed specific file current filename git log follow pathtofile see commits changed specific file throughout history even renamed git know file renamed decided track answer show answer also show go answering question like started google search git follow renames found stackoverflow answer first three result people varying opinion stackoverflow sometimes find useful starting point general question googling specific error message think answer looking likely best explained somebody blog post filter stackoverflow answer google search result adding stackoverflow end search query term like case even look stackoverflow verify find favorite source getting information software implementation software git open source running experiment software documentation see answer first learn something reading output see use git git track change code base addition subtraction underlying implementation concept change b instead delete add b one line example make new file text change text changed line file say never guess git look like remove line file add line never guess work way whole file git rename file iamafiletxt guesswhatiamtxt git look like remove file iamafiletxt add file guesswhatiamtxt true even rename file made change whatsoever undid change line file tell unchanged run git status git report change rename file mv command moving file renaming thing far command line concerned git report deleted file obtained new untracked file checking content commit file new name though git detects rename give git detects rename hood file deleted commit file committed last commit commit gone candidate file might renamed file added commit file last commit commit exist candidate file deleted file might renamed point git run diff algorithm candidate file would computationally expensive run whole repo time narrow rename candidate newly deleted file newly added file first access command git us git diff command git diff show individual change file branch whole repo want depending pas flag stand detect move purpose detect rename git documentation say flag detect renames n specified threshold similarity index ie amount additiondeletions compared file size example mean git consider deleteadd pair rename file changed without sign number read fraction decimal point ie becomes thus similarly limit detection exact renames use default similarity index diff algorithm work depends git give four choice diff algorithm use patienceminimalhistogrammyers choose diff algorithm variant follows default myers basic greedy diff algorithm currently default minimal spend extra time make sure smallest possible diff produced patience use patience diff algorithm generating patch histogram algorithm extends patience algorithm support lowoccurrence common element documentation suggests myers default algorithm default similarity index theoretically new file half deleted file given commit labeled rename sure enough change think probably half file rename git longer pick rename instead log deletion old file addition new file making guess constitutes half curiosity decided go see could understand better repo containing git decided search mention adding search end repo url github searched myers search result particular interest let click look go file comment top file tell u libxdiff davide libenzi interesting sound like dependency google get description libxdiff libxdiff library implement basic yet complete functionality create file differencespatches binary text file sound right line saw search beginning long comment file sound like describing algorithm know really mean think need understand in out myers algorithm grasp basic git rename detection going stop welcome look paper comment recommends dying know myers work course worth noting git store data change renames detects fact asked store change addition subtraction fetch data term unless specifically use flag ask use diff strategy look renames juicy gossip evidently modicum drama around command git library notorious progenitor linus torvalds supposedly said backport svn noobs renames matter first insulting intelligence subversion user linus notorious denigrating programmer talk google felt compelled reiterate every minute average think programmer stupid incompetent year finally stepped away leadership linux kernel part told precisely address pattern vicious verbal abuse toward technologist renames matter think renames matter importantly linus searched git repo commits authored committed explicitly mention renames commit message lot mention rename deal git functionality renames git repos first four page result found five commits exclusively chiefly devoted renaming command module git linus really thought renames matter rename thing reminder people say industry often hold research liked piece might also like time discovered people tout numpy vectorization know time discovered people scoff soap know time discovered classic sign bugprone code seem cause bug like like loading
60,Lobsters,vcs,Git & VCS,JEP 357: Migrate from Mercurial to Git,http://openjdk.java.net/jeps/357,jep migrate mercurial git,summary goal jcheck webrev defpath nongoals jdk update project consolidate jbs jep migrate github motivation emacs magit vim fugitivegit v code atom intellij eclipse netbeans visual studio description github gitlab openjdk author http githubcomopenjdk jcheck webrev defpath alternative testing risk assumption dependency,summary migrate openjdk community source code repository mercurial hg git goal migrate singlerepository openjdk project mercurial git preserve version control history including tag reformat commit message according git best practice port jcheck webrev defpath tool git create tool translate mercurial git hash nongoals migrate multirepository openjdk project jdk update project project migrate git consolidate single repository change bug system jbs aggressively decommission existing mercurial repos take action prematurely invalidate many url pointing repos comment bug jbs existing master mercurial repos least kept readonly archive defined transition period longer term mercurial url git url translator might put place jep address question whether openjdk git repository selfhosted hosted external provider issue topic jep migrate github propose change current jdk development process though jep enable change motivation three primary reason migrating git size version control system metadata available tooling available hosting initial prototype converted repository show significant reduction size version control metadata example git directory jdkjdk repository approximately mb git hg directory around gb mercurial depending mercurial version used reduction metadata preserve local disk space reduces clone time since fewer bit go wire git also feature shallow clone clone part history resulting even le metadata user need entire history many tool interacting git mercurial text editor git integration either natively form plugins including emacs magit plugin vim fugitivegit plugin v code builtin atom builtin almost integrated development environment ides also ship git integration outofthebox including intellij builtin eclipse builtin netbeans builtin visual studio builtin multiple desktop client available interacting git repository locally lastly many option available hosting git repository whether selfhosted hosted service description already prototyped program convert mercurial repository git repository us gitfastimport protocol import mercurial changesets git adjusts existing commit message align git best practice commit message mercurial jdkjdk repository structure jdkhgcommitmessage bugidline summaryline reviewersline contributedbyline bugidline text summaryline summary text reviewersline reviewedby username username n contributedbyline contributedby text username az text n n commit message git jdkjdk repository somewhat different structure jdkgitcommitmessage bugidline body trailer bugidline text body blankline text trailer blankline coauthor reviewer coauthor blankline coauthor coauthor coauthoredby realname email reviewer reviewedby username username n blankline n username az text n n reason change message structure use title single line followed blank line strongly encouraged git cli tool use title enables freeform body git ecosystem recognizes trailer ie line separated body newline example github gitlab recognizes coauthoredby trailer recognize commit multiple author git us additional field commit metadata denote committer commit distinct author use committer field signify sponsorship event sponsored commit author named author field commit sponsor named committer field sponsor also coauthor appropriate coauthoredby trailer added situation capture existing mercurial message structure another possible use distinct committer field identify backport commits feature release update release typically done someone author original commit content author committer field form realname email since every commit author openjdk author special email address used show author committer also openjdk author openjdkusername openjdkorg example git commit message crash starting jvm fixed tricky race condition jvm starting using mutex coauthoredby robin westberg rwestberg openjdkorg reviewedby darcy author committer field commit would author erik duveblad ehelin openjdkorg commit erik duveblad ehelin openjdkorg conversion process commit considered sponsored author listed contributedby line case first person contributedby line taken author sponsor taken committer additional contributor taken coauthor example converted repository available http githubcomopenjdk already prototyped backward compatible port mercurial tool jcheck webrev defpath also prototyped new tool gittranslate tool us file called hgcommits generated conversion tool committed git repository file contains sequence line contains two hexadecimal hash first hash mercurial changeset second hash git commit resulting converting mercurial changeset tool gittranslate simply query file hgcommits git translate tohg alternative keep using mercurial testing hgcommits mapping file described used verify metadata given commit correctly converted also source code tree two commits identical risk assumption outstanding risk error introduced part conversion risk mitigated rigorous verification described dependency
61,Lobsters,vcs,Git & VCS,Git clone over gRPC,https://encore.dev/blog/git-clone-grpc,git clone grpc,enter gitremotehelpers git remote helper gitreceivepack gituploadpack packfile transfer protocol implementing gitremotegrpc github defining schema implementing client implementing grpc server reading writing stream putting together,git supporting http ssh cloning always felt sufficient work perfectly fine developer cloning repository building infrastructure power encore new webbased editor wanted programmatically clone git repository plugged easily rest infrastructure like many backends encore us grpc internally crossservice communication make trivial endtoend authentication encryption really want build whole separate authentication mechanism ssh key able interact git repository enter gitremotehelpers git provides mechanism called git remote helper delegate communication git client server external program difficult build git remote helper us grpc instead easy turn summary git encounter remote url called transport address look executable named gitremote transport path invokes either one two argument first argument remote name available second argument address available either argument unavailable argument elided annoying difficult handle git remote helper support different capability protocol communicating remote server purpose useful flexible capability connect connect command responsible connecting remote server invoking either gitreceivepack gituploadpack remote end connect stdin stdout client side way let git handle application protocol packfile transfer protocol complex beast implement transport protocol implementing gitremotegrpc functionality build gitremotegrpc executable communicates grpc wish skip ahead view full solution view full source code github defining schema first part define grpc schema using protobufs since implementing connect capability requires bidirectional communication grpc stream perfect fit slightly tricky aspect need send additional metadata establish connection includes service invoke gitreceivepack gituploadpack well identifier repository easiest header metadata stream part protobuf schema schema look like syntax import googleprotobufemptyproto package gitpb service git rpc connect stream data return stream data message data byte data generate associated go file cd pathtorepo protoc gooutpluginsgrpc pathssourcerelative gitpbgitpbproto implementing client next let start writing main function program since supporting connect capability implement simple switch func main err run osargs err nil fmtfprintf osstderr vn osargs err osexit func run args string error stdin bufionewreader osstdin stdout osstdout read command stdin cmd err stdinreadstring n err nil return fmterrorf unexpected error reading stdin v err cmd cmd len cmd skip trailing newline switch case cmd capability err stdoutwrite byte connectnn err nil return err case stringshasprefix cmd connect service cmd len connect return connect args service stdin stdout default return fmterrorf unsupported command cmd simply par command responds accordingly connect command invoked delegate connect function define connect function responsible parsing remote address establishing grpc connection proxying stdinstdout data connection pas service call gituploadpack gitreceivepack well repository connect grpc header start defining helper function dial grpc server set stream grpcconnect par remote address args invokes connect endpoint func grpcconnect args string svc string gitpbgitconnectclient error var addr urlurl err error switch case len args addr err urlparse args case len args addr err urlparse args default err fmterrorf address given err nil return nil fmterrorf parsing remote address v err connect grpc would add authentication logic testing locally without tl certificate add grpcwithinsecure bypass tl conn err grpcdial addrhost grpcwithblock err nil return nil fmterrorf dial v addrhost err gitclient gitpbnewgitclient conn identify repository address path repopath stringstrimprefix addrpath ctx metadataappendtooutgoingcontext contextbackground service svc repository repopath return gitclientconnect ctx finally ready implement connect bit complex previous segment tried make everything understandable possible comment connect implement connect capability copying data remote end grpc func connect args string svc string stdin ioreader stdout iowriter error stream err grpcconnect args svc err nil return err communicate git connection established osstdoutwrite byte n writererr capture error writer side nil indicates stdin closed everything successful ioeof indicates failure send message stream writererr make chan error writer goroutine read stdin writes stream sends writeerr done sending nil indicates success nonnil error indicates something went wrong go func var buf byte n readerr stdinread buf n err streamsend gitpbdata data buf n err nil writererr fmterrorf write v err return readerr nil could nt read stdin ioeof indicates stdin closed expected translates closing write end stream readerr ioeof streamclosesend writererr nil else writererr fmterrorf reading stdin v readerr return read stream copy stdout read complete successfully wait write end complete returning msg err streamrecv err ioeof data server wait write end complete err writererr err nil return err return nil else err nil return fmterrorf read v err else err stdoutwrite msgdata err nil return fmterrorf writing stdout v err need client side hooray server side implementing grpc server server side even easier client side receive grpc request validate service repository header invoke native gitreceivepack gituploadpack executables distributed git grpc stream hooked stdin stdout first define main connect method server use helper define later type server struct assert server implement gitpbgitserver var gitpbgitserver server nil func server connect stream gitpbgitconnectserver error parse repository path service invoke grpc header note svc invoked directly executable parseheader must validate carefully svc repopath err parseheader stream err nil return err run service using two helper type streaming stdinstdout grpc var stderr bytesbuffer cmd execcommand svc repopath cmdstdin streamreader stream stream cmdstdout streamwriter stream stream cmdstderr stderr err cmdrun err nil return nil return statuserrorf codesinternal failed svc stderrbytes next implement parseheader function referred parseheader par grpc header validates service repository path func parseheader stream gitpbgitconnectserver service repopath string err error ctx streamcontext md ok metadatafromincomingcontext ctx ok return statuserror codesinvalidargument missing stream metadata repo mdget repository svc mdget service len repo len svc return statuserrorf codesinvalidargument invalid repository v service v repo svc danger check service name whitelist guard remote execution svc pushsvc svc fetchsvc return statuserrorf codesinvalidargument bad service svc todo change validation logic make sure repository one want expose true return statuserrorf codesinvalidargument unknown repository repo return svc repo nil reading writing stream finally write helper type implement iowriter ioreader using grpc stream look like streamwriter implement iowriter sending data stream type streamwriter struct stream gitpbgitconnectserver func sw streamwriter write p byte int error err swstreamsend gitpbdata data p err nil return err return len p nil streamreader implement ioreader reading stream type streamreader struct stream gitpbtransferconnectserver buf byte func sr streamreader read p byte int error remaining data previous message received stream simply return len srbuf n copy p srbuf srbuf srbuf n return n nil buffered data wait new message stream msg err srstreamrecv err nil return err read much data possible directly waiting caller anything remaining beyond get buffered next read call n copy p msgdata srbuf msgdata n return n nil putting together installing gitremotegrpc path running grpc server clone grpc let set demo repository mkdir tmpdemo cd tmpdemo git init initialized empty git repository tmpdemogit echo hello world exampletxt git add git commit initial commit run grpc server like cd hometmp grpcserver listening grpc finally clone grpc git clone grpc remote enumerating object done remote counting object done remote total delta reused delta receiving object done cat exampletxt hello world kept feeling backend development took much longer liked spend much time configuring build system managing kubernetes yaml file provisioning database built encore solve problemswith encore focus api take care rest setting build deployment system autoscaling kubernetes cluster provisioning database way focus make application unique create value user much faster ever
62,Lobsters,vcs,Git & VCS,Adding Comments to Gatsby with Netlify Serverless Functions + GitHub,https://healeycodes.com/adding-comments-to-gatsby-with-netlify-and-github/,adding comment gatsby netlify serverless function github,netlify serverless function healeycodesgatsbyserverlesscomments serverless function netlify documentation potential downside netlify review jamstack point gatsby website,wanted accept user comment gatsby website store github wanted comment go straight file called commentsjson repository could use something simple import comment commentsjson site code without database thirdparty plugins making ten network request netlify serverless function allowed use github api make repository change data submitted comment also hid secret api credential built prototype healeycodesgatsbyserverlesscomments us flow user enters comment click submit serverless function receives data hit github api read existing commentsjson appends new comment save new commit trigger netlify build new version website deployed new comment visible user second first click serverless function let pick serverless function receives user comment make use constant set netlify website setting deploys function written nodejs export handler function explained netlify documentation const fetch require nodefetch const auth processenvgithubpattoken const repo processenvgithubrepo const user processenvgithubuser const api http apigithubcomrepos user repo contentssrccommentsjson exportshandler async function event context callback const existingfile jsonparse await fetch api header authorization basic bufferfrom user auth tostring re restext let comment jsonparse bufferfrom existingfilecontent tostring const newcomment jsonparse eventbody commentspush author newcommentauthor email newcommentemail message newcommentmessage date datenow const re await fetch api method put header authorization basic bufferfrom user auth tostring body jsonstringify message new comment new date todatestring content buffer jsonstringify comment tostring sha existingfilesha re restext callback null statuscode potential downside someone spam comment website well hit build time limit pretty fast also small window millisecond api call two people comment time older comment overwritten fix alter serverless function open pullrequest comment change comment delayed protected malicious behavior also screen comment appropriateness lose data might rarely need handle merge conflict netlify review netlify betting big jamstack application bet would make developer experience dx best right rare read product working end recently netlify snappy deployment let rush change fix live issue within minute mean future success well tinycloud point dx kind big deal developer play huge role uptake product especially consider likely provide guidance tool organization invest even though final decision usually happens executive level netlify developer tooling let create prototype like one reading without mess configuration gatsby website hosted generous free tier transferring hosting hiccupfree recommend
63,Lobsters,vcs,Git & VCS,gitui release: terminal ui for git written in rust,http://extrawurst.github.io/general/2020/05/08/gitui-release.html,gitui release terminal ui git written rust,gitui rust github q q q q tig lazygit nihsyndrome q benefit using rust disclaimer safety speed ergonomic interop ecosystem crossterm tuirs rayon crossbeam detail follow next post next step opensource issue stashing rebase http extrawurstitchiogitui,today time announce gitui last couple week side project little tool may know occasional tweet already gitui becoming gui alternative using git far support feature goal extend needed focus build git cli substitute though gitui supposed help task cumbersome cli pure mortal like main feature far staging part file c hunk browsing commit history inspecting large diffschangesets reverting change stagingunstaging file tree written rust safety speed free github q use raw git cli complex task hard googled rebase stuff interactively stage hunk often enough realise people need something visual q use gui application insert name tried lot much need tend super slow grinding halt bigger repos one start cost money q build yet another gui application gui application complex free work terminal natural leave git interaction plus give nice nostalgic feeling q already tool idea terminal ui git new great example tig lazygit awesome inspired either found slowresourcehungry area complicated use navigate others maybe little nihsyndrome well q rust started using rust two year ago first fun professionally far project build something open gitui gave opportunity opensource something built rust think great fit kind tool benefit using rust disclaimer first course gitui could written language want start language war personal background started c programmer system programming language always appealed still appreciated comfort managed system like java c nodejavascript lately also go year kept watching something though combined strength two world think found rust safety rust unique memory model offer bare metal control without sacrificing safety speed system level language fast c people wrote o kernel gc pause sky limit ergonomic closure generic functional abstraction modularization everything inheritance interop seamless c interop allows tap huge ecosystem existing library framework ecosystem cargorust npmnodejs gradlejava really know surviving without rich tightly integrated ecosystem library cc course gitui reinventing wheel standing shoulder giant using following major dependency crossterm tuirs crossterm cross platform terminal library tuirs build immediate mode ui layer top rust wrapper top allowing work git natively call commandline rayon topic concurrency gitui us rayon threadpool crossbeam concurrency crossbeam allows waiting selecting multiple channel parallel much say gitui utilizes rust strength post getting hand already detail follow next post next step join fun start contributing opensource check issue file whatever would like see implemented next stashing rebase like see consider supporting work itchio http extrawurstitchiogitui
64,Lobsters,vcs,Git & VCS,Locating a compiler bug with git bisection,https://blog.yossarian.net/2020/05/07/Locating-a-compiler-bug-with-git-bisection,locating compiler bug git bisection,enosuchblog programming devblog background bug first step reproducing godbolt finding fix permalink finding fix real commits two release rescue manpage ninja,enosuchblog programming philosophy pedaling may tag programming devblog brief post step took confirm locate backport fix compiler bug plaguing professional project work straightforward application git bisect observation even compiler bug depending context compiler might buggy component git bisect incredibly flexible work extremely complex program backporting fix always difficult fraught background bug work llvmbased program analysis tool professionally currently work project make heavy use modified build llvm additional feature many component work assume llvm faithfully emits debug intrinsics ie call void llvmdbgwhatever location expression ie dilocation debugloc every sourcelevel variable normally reasonable assumption least unoptimized lessoptimized compilation allows u make assumption information find dwarf lowering source file minimized original compiled violated assumption include stdioh include stdlibh struct foo char buffer int bar int index struct foo stuff index sizeof stuffbuffer return return int stuffbuffer index int main int argc char argv return bar atoi argv corresponding llvm ir bar function attrs nounwind readnone uwtable define dsolocal bar localunnamedaddr dbg alloca structfoo align call void llvmdbgvalue metadata metadata metadata diexpression dbg getelementptr inbounds structfoo structfoo dbg call void nonnull dbg call void nonnull align false dbg icmp ugt dbg br label label dbg label preds sext dbg getelementptr inbounds structfoo structfoo dbg load align dbg tbaa sext dbg br label dbg label preds phi dbg call void nonnull dbg ret dbg thing immediately stand despite two variable scope index argument stuff one llvmdbg intrinsic present inspecting debug node reveals index stuff dilocalvariable name index arg scope file line type make sense index likely stored register target platform thus llvmdbgvalue intrinsic rather memorybased one lifetime intrinsics llvmlifetimestart llvmlifetimeend structure well expected alloca getelementptr creating indexing getelementptr llvmlifetimestart also attached metadata reference expected location stuff dilocation line column scope dilocalvariable stuff embedded ir completely orphaned function reference retainednodes distinct disubprogram name bar scope file line type islocal false isdefinition true scopeline flag diflagprototyped isoptimized true unit retainednodes dilocalvariable name stuff scope file line type dilocalvariable index also retainednodes curiously despite orphaned therefore requiring separate retention told extremely suspicious missing intrinsic debug node incorrectly marked connection orphaned dilocalvariable dilocation unsurprisingly variablelocation disconnect result broken dwarf information stuff specifically form missing dwatlocation would expect based alloca reflect stack location dwtagsubprogram dwatlowpc dwathighpc dwatframebase rsp dwatname bar dwatdeclfile tmpjunkc dwatdeclline dwatprototyped true dwattype int dwatexternal true dwtagformalparameter dwatlocation rdi dwatname index dwatdeclfile tmpjunkc dwatdeclline dwattype int dwtagvariable dwatname stuff dwatdeclfile tmpjunkc dwatdeclline dwattype foo first step reproducing since dealing modified llvm first step make sure cause problem quick trip godbolt settle showing missing intrinsic reference build llvmclang define dsolocal bar localunnamedaddr dbg alloca structfoo align call void llvmdbgvalue metadata metadata metadata diexpression dbg getelementptr inbounds structfoo structfoo dbg call void nonnull dbg call void nonnull align false dbg icmp ugt dbg br label label dbg sext dbg getelementptr inbounds structfoo structfoo dbg load align dbg tbaa sext dbg br label dbg phi dbg call void nonnull dbg ret dbg permalink finding fix point panic settle bug compiler directly fault need fix order continue compiler complicated beast rather find fix bug return godbolt see whether someone else done hard work u sometime llvm released latest trunk build indeed compiling trunk build permalink show two debug intrinsics expected correctly attached location metadata call define dsolocal bar localunnamedaddr dbg alloca structfoo align call void llvmdbgvalue metadata metadata metadata diexpression dbg getelementptr inbounds structfoo structfoo dbg call void nonnull dbg call void llvmdbgdeclare metadata structfoo metadata metadata diexpression dbg call void nonnull align dereferenceable false dbg icmp ugt dbg br label label dbg preds sext dbg getelementptr inbounds structfoo structfoo dbg load align dbg tbaa sext dbg br label dbg preds phi dbg call void nonnull dbg ret dbg walk backwards llvm also emits two intrinsics llvm identical buggy llvm ir define dsolocal bar localunnamedaddr dbg alloca structfoo align call void llvmdbgvalue metadata metadata metadata diexpression dbg getelementptr inbounds structfoo structfoo dbg call void nonnull dbg call void nonnull align false dbg icmp ugt dbg br label label dbg preds sext dbg getelementptr inbounds structfoo structfoo dbg load align dbg tbaa sext dbg br label dbg preds phi dbg call void nonnull dbg ret dbg know someone fixed bug somewhere llvm llvm release reassuring get u closer actually patching build work needed finding fix real knowing desired bugfix somewhere changeset llvm llvm leaf u naive strategy could grep git log release trying key something like dwarf debuginfo bug similar could try every commit two release stopping behavior change neither particularly appealing unstructured nature commit message make difficult ensure underconstraining search individually compiling commits two release would take u week git bisect rescue git bisect unsurprisingly answer exactly problem manpage command us binary search algorithm find commit history introduced bug use first telling commit known contain bug commit known bug introduced git bisect pick commit two endpoint asks whether selected commit continues narrowing range find exact commit introduced change going forward history looking bugfix rather regression good bad identifier little confusing avoid confusing much use git alternative old new term instead also course need actually run something bisected revision determine whether old new llvm project build blessedly straightforward mkdir build cd build cmake g ninja dllvmtargetstobuild dllvmenableprojects clang llvm cmake build binclang version binclang g tmptestcasec tmptestcase n flag filter dwarf info dwatname case stuff variable binllvmdwarfdump n stuff tmptestcase grep dwatlocation use ninja restrict backends faster compilation definition could add prune build sufficient purpose finally actually perform bisection repo root begin git checkout git bisect start know bug nt tag immediately git bisect old git bisect new perform actual test step current revision cd build leverage cmake cache speed thing still valid cmake build binclang g tmptestcasec tmptestcase binllvmdwarfdump n stuff tmptestcase grep dwatlocation oldornew eq echo new echo old cd git bisect oldornew repeat commits left debuginfo sroa need handle dbgvalue sroa pas diff git allvmlibtransformsutilslocalcpp bllvmlibtransformsutilslocalcpp index allvmlibtransformsutilslocalcpp bllvmlibtransformsutilslocalcpp void llvm convertdebugdeclaretodebugvalue dbgvariableintrinsic dii determine whether alloca either vla array static bool isarray allocainst ai return ai isarrayallocation ai gettype getelementtype isarrayty ai getallocatedtype ai getallocatedtype isarrayty determine whether alloca structure static bool isstructure allocainst ai return ai getallocatedtype ai getallocatedtype isstructty lowerdbgdeclare lower llvmdbgdeclare intrinsics appropriate set bool llvm lowerdbgdeclare function f stored stack dbgdeclare describe stack slot lexicalscope granularity later pass attempt elide stack slot ai isarray ai ai isarray ai isstructure ai continue volatile loadstore mean alloca ca nt elided anyway explain llvm optimizer includes pas named sroa short replacement sroa run default higher attempt replace aggregate value like array structure scalar ssa value effective sroa run requires llvmdbgdeclare value lowered one llvmdbgvalues ssa value may may reside memory location might register like index bug occurs lowering behavior relevant helper lowerdbgdeclare fails check one valid aggregate type structure incorrectly elides intrinsic without inserting replacement fix fundamentally single line change isarray addition isstructure serve make readable five minute later patched llvm correct behavior binclang version clang version target thread model posix installeddir storewilliamllvmprojectbuildbin binclang g tmptestcasec tmptestcase binllvmdwarfdump n stuff tmptestcase grep dwatlocation tmptestcase file format dwtagvariable dwatlocation dwopfbreg dwatname stuff dwatdeclfile tmptestcasec dwatdeclline dwattype foo
65,Lobsters,vcs,Git & VCS,Github Codespaces,https://github.com/features/codespaces,github codespaces,code without compromise simplify workflow extend customize dependency decluttered codespaces available everyone start using codespaces codespaces available repository leave codespace open want develop browser connect v code much codespaces cost codespaces different v code reload reload,code without compromise code build test debug deploy complete development environment browser simplify workflow automatically set dependency ssh key go code commit faster project extend customize configure editor dotfiles v code extension create consistent environment every codespace development cloud contribute code device using v code browser dependency decluttered contribute project without complicating local setup spin dev environment project nt worked switch ease codespaces available everyone codespaces available small group github user limited beta time user access beta based availability sign date start using codespaces codespaces beta see code button code tab supported repository codespaces available repository limited beta codespaces available repository public repository additional support available beta progress codespaces available private repository belong organization leave codespace open create codespace leave open long wish suspend automatically minute inactivity reconnect time codespaces browser v code want develop browser prefer open codespace github connect v code much codespaces cost pricing codespaces yet finalized codeediting functionality github always free plan offer simple payasyougo pricing codespaces cloud environment codespaces free limited beta codespaces different v code codespaces set cloudhosted containerized customizable v code environment set connect codespace browser v code perform action time signed another tab window reload refresh session signed another tab window reload refresh session
66,Lobsters,vcs,Git & VCS,Git Command Overview with Useful Flags and Aliases,https://blog.jakuba.net/git-command-overview-with-useful-flags-and-aliases/,git command overview useful flag alias,reference command since git history immutable actually change commit instead creates new one reset file word caution decide use production codebase suggest take lookt first play around different variant get stored reflog recover thing go wrong conclusion tip suggestion correction feedback please leave comment hit twitter sure reply every comment,post short guide making git usage little efficient going cover git work depth instead look common operation useful flag goal create set bash zsh alias daily use completel list alias presented article summarized end article section first briefly describe command useful flag suggest set mnemonic alias usage contrary people might think use builtin git alias functionality using git config eg git config global aliasco checkout rather plain shell alias alias gco git checkout reason simple much easier faster type gco git co make git usage enjoyable since almost alias prefixed g ga gco gc easy discover ever forget git config alias counterpart git status going skip ahead alphabetically cover git status right useful explaining command everyone ever tried git write git status point yet people met know extremely useful variant git status sb let illustrate straightforward example simply create three file modify look output git status differs git status sb tried make example selfcontained try mkdir statusdemo cd statusdemo git init initialized empty git repository homedarthprojectsstatusdemogit git commit initial commit allowempty master rootcommit initial commit touch git status branch master untracked file use git add file include committed nothing added commit untracked file present use git add track git status sb git add git commit add file master add file file changed insertion deletion create mode create mode create mode echo x rm echo x echo x git add git status branch master change committed use git restore staged file unstage modified change staged commit use git addrm file update committed use git restore file discard change working directory deleted modified untracked file use git add file include committed git status sb code example intentionally bit verbose keep reproducible simply follow along command command terminal playing around git great way learn since code highlighter post capture terminal output highlighting last two command screenshot showing git status git status sb share color highlighting format output differently git status sb simply drop text additional information keep important part output branch changed way mark modification deletion newly added file column md displayed also signifies change staged example modification staged git add hence display left column yellow regular git status modification deletion staged green second column might little confusing first promise take couple minute get used git experience much improved using git status sb regular git status suddenly terminal fill half screen status scroll around find previous command using git status time might seem like small thing least personally single command along suggested alias transformed git usage annoying joyful make matter even controversial suggest different alias git status sb might think insane single letter alias arbitrary git command reason least personal experience common command use terminal command top command history cd gc vim docker ga l create similar statisic using following command reference history awk cmd count end cmd print cmd cmd count grep v column sort nr nl head least case winner beat even cd followed gc git commit v make sense every time would want make new git commit cd directory check status statistic least git usage confirms git status sb random command command deserves special alias people suggest using alias g git status sb might leaning safe side definitely started way really anything else would deserve glorious one letter alias git status sb git add git separate working tree file edited index staged change ready comitted using git commit stage change using git add since include change git add come quite option check man gitadd example git add u stage file modified deleted newly added file add modification deletion addition one simply run git add sometimes want granular adding whole file git add p patch come launch interactive mode prompting user change whether want add index alias alias ga git add alias gau git add u alias gap git add p git branch branching integral art git git branch command deserves least one alias lucky u rely git checkout branching shenanigan mention git branch deleting branch sometimes useful well multiple way people preferring leave alias alias gb git branch alias gba git branch git commit creating new commits one common operation using git want decent setup firstly git commit v flag cause show complete diff open editor commit message one benefit using git commit v opposed git commit message get one last chance inspect changed might simple holding ctrld scroll vim matter second certainly time quick visual inspection catch unexpected file committed especially size diff much largersmaller expected weird character pop use v default option git commit command also use automatically stage modified file committing similar git add u lastly amend option give u way fix last commit pushed since git history immutable actually change commit instead creates new one reset head critical information mean amend used git push computer contains old commit git commit amend pushing required force push git push force tree simple extension tree origin server need overwritten local copy similar using git rebase git reset hard see later simple term git push force sense overwriting origin someone else ran git fetch git pull meantime different local tree compatible origin push anymore definitely way work around problem none trivial scope article interested followup article covering git push force topic feel free leave comment article message twitter alias gc git commit v alias gca git commit v alias gcam gca amend might want opt depending preference git cherrypick cherry picking allows u copy apply arbitrary commits head common operation come handy time time especially fixing previous gitrelated issue cherrypicking problem specific introduce default flag use basic alias alias gch git cherrypick git checkout git checkout first command directly manipulates working tree first introduce git checkout branch way switch branch also use switch working tree arbitrary commit history git checkout ref surprisingly git checkout better creating new branch git branch allows u create branch switch single command git branch b branch lastly use git checkout file discard change revert back version index case nothing staged head small example illustrate create commit new file make change stage make change use git checkout reset unstaged change use git reset clear stage git checkout reset remaining change one sidenote consider file named master also branch named master wanted use git checkout file wrote git checkout master git would actually refer branch instead reason git provides argument tell git process come filename mean git checkout master apply git checkout file named master good idea use option every time want apply git checkout file might forget branch name get confused result especially create lot temporary branchesfiles named foo test reason use git checkout filetxt opposed git checkout filetxt mkdir checkoutdemo cd checkoutdemo echo aaa filetxt git init initialized empty git repository checkoutdemogit git add git commit initial commit master rootcommit initial commit file changed insertion create mode filetxt echo bbb filetxt git status sb filetxt git add filetxt echo ccc filetxt git status sb mm filetxt cat filetxt aaa bbb ccc git checkout filetxt git status sb filetxt cat filetxt aaa bbb git reset unstaged change reset filetxt git status sb filetxt git checkout filetxt git status sb cat filetxt aaa code example intentionally bit verbose keep reproducible simply follow along command command terminal playing around git great way learn found example confusing due git status sb output correctly highlighted confused general thing properly colorized screenshot noted yellow mean staged green mean unstaged git checkout modifies unstaged change meaning remove green one git diff similarly git status checking change made working dir common operation git diff useful flag would recommend using default git diff allow git diff detect file renamed rename file use git diff show one file deleted another one newly added opposed showing rename note option work time git know certainty file renamed filesystem keep kind log rename operation written kind metadata git simply look content two file compare amount change small enough consider file renamed actually specify threshold change flag specifically would tell git consider something renamed file changed default set might seem silly first consider renaming file editor making change necessarily commit thing right file renamed yet would still expect git track rename personally use git diff often devoted second oneletter alias specifically opposed gd following opposed alias git status sb say one debatable considering git diff used much le often git status one useful flag git diff cached regular git diff show diff working directory index change could possibly stage git add sometimes might already staged change leaving others unstaged say git add p would like see change would comitted git diff cached come show difference staged change head alias gdc git diff cached honorary mention go worddiff flag common enough make alias still useful know suggest playing around also look man gitdiff default git diff show whole line changed worddiff try show diff within line single word useful making small tweak long line readmes documentation le code default git fetch sometimes people surprised see using git fetch followed git merge ffonly ask even bother running git fetch could git pull right problem git pull essentially two thing fetch change remote merges rebases depending flag head change issue see changed begin merge automating merge fine actually wanted happen reason think git pull inherently bad command often find people get surprised result pull something local copy expect reason alone might useful consider using combination git fetch looking change git log see shortly manually mergingrebasing needed default git fetch fetch tracking remote also option fetch remote alias gf git fetch alias gfa git fetch git log perhaps one command force many people use gui instead terminal interface git simply find useful information default git log output blame personally use git computer without proper git log alias well often resort either searching github git log alias use gui essentially two three part making git log usable one forcing print one line per commit either done using oneline custom format shown shortly pretty second graph visually represents branch history third optional show history branch past head pointing combined git log graph oneline applied facebook react time writing article look like output useful already infinitely better default display author commit made give u way customize color might important custom color scheme thus present full version pretty version screenshot created following command git log graph pretty format c yellow h c auto creset c white c cyan c magenta ar creset look complicated look second see really passing format string two different kind placeholder one color eg c yellow c auto others actual content h certainly customize command liking suggest look man gitlog pretty format section list possible format string option sometimes want view history current branch sometimes want see resort two alias differing use alias glgit log graph pretty format c yellow h c auto creset c white c cyan c magenta ar creset alias glagl git merge since branch integral part git merging branch equally important two important kind merges fastforward merge commit fastfoward mean current branch set ref merged example fastforward merging master originmaster pending change working directory essentially equivalent running git reset hard originmaster master label simply change commit history sometimes target ref directly ahead might lying parallel branch case git create merge commit join two branch together three important flag paid attention ff default try perform fastforward create merge commit noff creates merge commit every single time even fastforward possible ffonly try perform fastforward exit possible problem arising git usage come git something user expect first option ff quite dangerous simply know fastforward happen merge commit created unless examine history certain fastforward work might think git able fastforward run git merge ff surprised result maybe revert realize later even work fix suggest never use default ff option instead explicit either use ffonly noff benefit ffonly somewhat safer thus run without many worry basically check fastforward possible command simply fail decide want run noff version instead maybe reexamine history figure failed alias gm git merge noff alias gmf git merge ffonly git push much said git push tag flag cause git push tag remote repo meaning git push tag origin instead git push origin tag name alias gp git push alias gpt git push tag git reset manipulating head git reset one lesser understood command lead potentially dangerous situation multiple mode three useful one following example assume working dir clean pending change git reset soft move head leaf index working dir meaning run git reset soft head state right last commit made meaning change already staged git reset mixed default reset index leaf working dir default common use case run git reset without argument exactly git reset mixed unstage change leave working dir intact git reset hard favorite variant also dangerous one reset everything specified commit including working dir run git reset hard target reset staged unstaged change head essentially saying please discard change made specify target say git reset hard head mean please discard change set head current branch one commit ago useful made commit want discard completely mindful already pushed change sure general one last worthy mention git reset patch similarly git add patch p ask change want keep staged unstaged reset head respective suggested alias alias gr git reset alias grp git reset patch alias grh git reset hard alias grsh git reset soft head git rebase similarly git reset git rebase command one lesser understood dangerous command people use edit history really git history tree immutable ever add new commits exactly git rebase copy reapply existing commits different place possilby modifying along way let go example presented git rebase manpage available man gitrebase assume following history exists current branch topic b c topic e f g master point result either following command git rebase master git rebase master topic would b c topic e f g master first glance might seem git rebase somehow took commits b c moved start g look closely see renamed b c much intentional git rebase moving commits simply creating new one different place original commits still tree visible nothing pointing write ref c prior rebase ran rebase ran git tag ref would reappear history magic along git rebase created copy top g would happen ran git rebase interactively rebase last five commits sometimes people would squash commits submitting pull request important note replace five commits new one creates one new commit content five reset branch label head making appear original commits edited rebase replaying commits might run conflict case stop ask user resolve conflict conflict resolved rebase continue git rebase continue situation quite common devote alias well alias grb git rebase alias grbc git rebase continue alias grbi git rebase word caution decide use git rebase production codebase suggest take lookt git reflog first man gitreflog play around different rebase variant get stored reflog recover thing go wrong git remote listing managing remote common practice gitcontrolled project even mean pushing github sometimes might certain origin git remote v come handy simply print list remote alias grv git remote v git stash many thing worthy mention git stash especially since could accomplish using temporary branch cherrypicking sometimes change small enough warrant use git stash instead introduce handy alias alias gst git stash alias gstp git stash pop git show last command list git show simply tell git show changed commit including author date commit message detail might useful checking last commit either git show head git show without argument looking particular commit past alias gw might immediately think since gsprefixed one taken least somewhat phoentically resemblant command conclusion read far hope learned least thing two git massive tool hundred useful flag subcommands definitely time one extra trick sleeve save hour pain tip suggestion correction feedback please leave comment hit twitter sure reply every comment complete list alias mentioned article ready copypasted bashrc zshrc wherever else store alias sorry fish user alias git status sb alias ga git add alias gau git add u alias gap git add p alias gb git branch alias gba git branch alias gc git commit v alias gca git commit v alias gcam gca amend alias gch git cherrypick alias gco git checkout alias git diff alias gdc git diff cached alias gf git fetch alias gfa git fetch alias glgit log graph pretty format c yellow h c auto creset c white c cyan c magenta ar creset alias glagl alias gm git merge noff alias gmf git merge ffonly alias gp git push alias gpt git push tag alias gr git reset alias grp git reset patch alias grh git reset hard alias grsh git reset soft head alias grb git rebase alias grbc git rebase continue alias grbi git rebase alias grv git remote v alias gst git stash alias gstp git stash pop alias gw git show question feedback suggestion please share comment try answer every one something article nt clear nt afraid mention goal article informative possible
68,Lobsters,vcs,Git & VCS,Git branch naming conventions,https://deepsource.io/blog/git-branch-naming-conventions/,git branch naming convention,use issue tracker id branch name add short descriptor task use hyphen separator,deepsource http deepsourceio use git branch organize ongoing work ensure software delivery stay effective use git today high chance either using famed gitflow recent github flow workflow depend extensively using branch effectively naming new branch something many developer struggle withthere many convention format recommended time following convention becomes painful herein outline simple git branch naming convention easy follow take care common use issue tracker id branch namesmost convention recommend leading branch name prefix like hotfix feature chore variant categorization task practically using issue tracker tagging category task issue tracker anyway addition much additional context using categorical prefix seems redundant least requires additional decisionmaking naming branch worst leading issue tracker id convenient requires minimal thinking advantage issue created issue tracker case used tracking team progress becomes easy correlate relevant working branch task especially developer working many issue timesearching filtering much easier issue tracker know issue number becomes easy find branch using auto complete local git supersecretproject git master git checkout tab apply suggestion code review add short descriptor taskwhile using issue tracker id sufficient identify unique branch project case could chance nuance needed example could multiple branch needed work one issue possibly different peopleuse short actionable descriptor task issue id make branch name recognizable distinct easy search case issue id handy make sure descriptor concise descriptive enough give idea going use hyphen separatorsthis little opinionated hyphen make good separator branch name could use underscore key consistent thoughand three rule keep mind complex naming scheme rule follow make easy everyone team stay page naming thing difficult time helpful simple heuristic world almost everyone using sort issue tracking anyway approach make git branch naming easy possible
69,Lobsters,vcs,Git & VCS,Fast Intro to Git Internals,https://www.chromium.org/developers/fast-intro-to-git-internals,fast intro git internals,fast intro git internals,fast intro git internalsfast intro git internals
70,Lobsters,vcs,Git & VCS,Git fractals - Sierpiński triangle,http://philippe.bruhat.net/stuff/git-fractals/sierpinski.html,git fractal sierpiński triangle,triangle giving recursive approach started blogging git fractal graphviz fractalsgit gitdot,triangle giving recursive approach still wanted produce git graph mind started blogging git fractal thought maybe linear approach would work given hard recursively create triangle stop one step triangle finished propagate node needed merged node another recursively created triangle like pascal triangle triangle built line line using simple condition decide node created given position parent node given following setup trying create node n three possible parent node b c row fully built previous step n row n built n first column b exists le parent b potiential parent c exists le parent also potential parent nonexisting parent removed list potential parent new node created least one parent move next node tried create one node previous row repeated number needed line created must create row last node last line descendant node created therefore simple branch point presented graph generated using graphviz various sierpinski branch fractalsgit git repository step node step node step node step node step node step node step node graph generated using gitdot branch git graph created one second delay commits dateorder give node proper order gitdot graphviz
71,Lobsters,vcs,Git & VCS,Patterns for Managing Source Code Branches,https://martinfowler.com/articles/branching-patterns.html,pattern managing source code branch,base pattern integration path production source branching use semantic conflict mainline mainline integration release branch use release train healthy branch mainline self testing code deployment pipeline unit test need keep internal quality code high reviewed commits use self testing code refactor diff debugging mainline integration integration pattern mainline integration self testing code healthy branch reviewed commits use collaboration branch feature branching mainline integration use continuous integration integration frequency state dev ops report lowfrequency integration highfrequency integration comparing integration frequency self testing code diff debugging continuous integration everyone commits mainline every day keystone interface feature flag self testing code test driven development use feature branching comparing feature branching continuous integration frequency reduces difficulty explained extreme programming state dev ops report feature branching open source reviewed commits mainline integration feature branching continuous integration follows approach use pair programming extreme programming integration friction deployment pipeline qa production importance modularity keystone interface branch abstraction thus enhancing productivity team personal thought integration pattern continuous integration thoughtworks extreme programming path mainline production release continuous delivery healthy branch deployment pipeline release branch favor creating commits mainline use put integration friction environment branch longlived release branch maturity branch use deployment pipeline variation long lived release branch environment branch maturity branch use anti pattern poor man modular architecture hotfix branch use release train release branch feature branching agile release train use variation loading future train compared regular release mainline releaseready mainline continuous integration releaseready mainline mainline healthy branch continuous delivery continuous deployment use continuous integration continuous delivery integration frequency feature branching release branch delivering zone branching pattern experimental branch use future branch use branch abstraction collaboration branch mainline mainline integration use continuous integration experimental branch team integration branch use healthy branch looking branching policy gitflow written vincent driessen mainline feature branching collaboration branch maturity branch release branch hotfix branch healthy branch releaseready mainline github flow best description releaseready mainline release branch hotfix branch feature branching mainline integration reviewed commits trunkbased development indepth website mainline mainline integration feature branching continuous integration release branch releaseready mainline final thought recommendation source branching bodart law leroy illustration continuous integration,source code vital asset software development team decade set source code management tool developed keep code shape tool allow change tracked recreate previous version software see develops time tool also central coordination team multiple programmer working common codebase recording change developer make system keep track many line work help developer work merge line work together division development line work split merge central workflow software development team several pattern evolved help u keep handle activity like software pattern gold standard team follow software development workflow dependent context particular social structure team practice team follows task article discus pattern context single article describe pattern intersperse pattern explanation narrative section better explain context interrelationship help make easier distinguish identified pattern section dingbat base pattern thinking pattern find useful develop two main category one group look integration multiple developer combine work coherent whole look path production using branching help manage route integrated code base product running production pattern underpin tackle base pattern leaf couple pattern neither fundamental fit two main group leave till end source branching create copy record change copy several people work code base quickly becomes impossible work file want run compile colleague middle typing expression compile fail would holler compiling nt change anything even two would difficult sustain larger team would incomprehensible simple answer developer take copy code base easily work feature new problem arises merge two copy back together done source code control system make process much easier key record every change made branch commit ensure nobody forgets little change made utilsjava recording change make easier perform merge particularly several people changed file lead definition branch use article define branch particular sequence commits code base head tip branch latest commit sequence noun also verb branch mean creating new branch also think splitting original branch two branch merge commits one branch applied another definition using branch correspond observe developer talking source code control system tend use branch particular way illustrate common situation modern development team holding source code shared git repository one developer scarlett need make change clone git repository check master branch make couple change committing back master meanwhile another developer let call violet clone repository onto desktop check master branch scarlett violet working branch different one working master commits independent need merged push change back shared repository happens scarlett decides sure change made tag last commit reset master branch originmaster last commit cloned shared repository according definition branch gave earlier scarlett violet working separate branch separate separate master branch shared repository scarlett put aside work tag still branch according definition may well think branch git parlance tagged line code distributed version control system like git mean also get additional branch whenever clone repository scarlett clone local repository put laptop train home created third master branch effect occurs forking github forked repository extra set branch terminological confusion get worse run different version control system definition constitutes branch branch mercurial quite different branch git closer mercurial bookmark mercurial also branch unnamed head mercurial folk often branch cloning repository terminological confusion lead avoid term generic term useful codeline define codeline particular sequence version code base end tag branch lost git reflog notice intense similarity definition branch codeline codeline many way useful term use widely used practice article unless particular context git another tool terminology use branch codeline interchangeably consequence definition whatever version control system using every developer least one personal codeline working copy machine soon make local change clone project git repo checkout master update file new codeline even commit anything similarly make working copy trunk suberversion repository working copy codeline even subversion branch involved use old joke say fall tall building falling nt going hurt landing source code branching easy merging harder source control system record every change commit make process merging easier nt make trivial scarlett violet change name variable different name conflict source management system resolve without human intervention make awkward kind textual conflict least something source code control system spot alert human take look often conflict appear text merges without problem system still nt work imagine scarlett change name function violet add code branch call function old name call semantic conflict kind conflict happen system may fail build may build fail runtime problem familiar anyone worked concurrent distributed computing shared state code base developer making update parallel need somehow combine serializing change consensus update task made complicated fact getting system execute run correctly implies complex validity criterion shared state way creating deterministic algorithm find consensus human need find consensus consensus may involve mixing choice part different update often consensus reached original update resolve conflict start branching everybody would editing live code halfbaked change would bork system people would stepping give individual illusion frozen time one changing system change wait fully baked risking system illusion eventually price come due pay much pattern discussing alternative paying piper kent beck hence rest article lay various pattern support pleasant isolation rush wind hair fall minimizing consequence inevitable contact hard ground mainline single shared branch act current state product mainline special codeline consider current state team code whenever wish start new piece work pull code mainline local repository begin working whenever want share work rest team update mainline work ideally using mainline integration pattern discus shortly different team use different name special branch often encouraged convention version control system used git user often call master subversion user usually call trunk must stress mainline single shared codeline people talk master git mean several different thing since every repository clone local master usually team central repository shared repository act single point record project origin clone starting new piece work scratch mean cloning central repository already clone begin pulling master central repository date mainline case mainline master branch central repository working feature personal development branch may local master may create separate local branch working keep date change mainline pulling mainline change interval merging personal development branch similarly want create new version product release start current mainline need fix bug make product stable enough release use release branch use remember going talk client build engineer early job assemble build product team working send email every member team would reply sending various file code base ready integration copy file integration tree try compile code base would usually take couple week create build would compile ready form testing contrast mainline anyone quickly start uptodate build product tip mainline furthermore mainline nt make easier see state code base foundation many pattern exploring shortly one alternative mainline release train healthy branch commit perform automated check usually building running test ensure defect branch since mainline shared approved status important kept stable state early remember talking team another organization famous daily build product considered quite advanced practice time organization lauded nt mentioned write ups daily build nt always succeed indeed nt unusual find team whose daily build nt compiled several month combat strive keep branch healthy meaning build successfully software run bug ensure found critical write self testing code development practice mean write production code also write comprehensive suite automated test confident test pas code contains bug keep branch healthy running build every commit build includes running test suite system fail compile test fail number one priority fix anything else branch often mean freeze branch commits allowed fix make healthy tension around degree testing provide sufficient confidence health many thorough test require lot time run delaying feedback whether commit healthy team handle separating test multiple stage deployment pipeline first stage test run quickly usually ten minute still reasonably comprehensive refer suite commit suite although often referred unit test since commit suite usually mostly unit test ideally full range test run every commit however test slow example performance test need soak server couple hour nt practical day team usually build commit suite run every commit run later stage deployment pipeline often code run without bug enough say code good order maintain steady pace delivery need keep internal quality code high popular way use reviewed commits although shall see alternative use team clear standard health branch development workflow immense value keeping mainline healthy mainline healthy developer start new piece work pulling current mainline tangled defect get way work often hear people spending day trying fix work around bug code pull start new piece work healthy mainline also smooth path production new production candidate built time head mainline best team find need little work stabilize codebase often able release directly mainline production critical healthy mainline self testing code commit suite run minute significant investment build capability ensure within minute commit nt broken anything completely change whole development process make change much quickly confidently refactor code keep easy work drastically reduce cycle time desired capability code running production personal development branch wise keep healthy since way enables diff debugging desire run counter making frequent commits checkpoint current state might make checkpoint even failing compile try different path way resolve tension squash unhealthy commits done immediate work way healthy commits remain branch beyond hour keep personal branch healthy also make much easier commit mainline know error crop mainline integration purely due integration issue error within codebase alone make much quicker easier find fix integration pattern branching managing interplay isolation integration everyone work single shared codebase time nt work ca nt compile program middle typing variable name least degree need notion private workspace work modern source code control tool make easy branch monitor change branch point however need integrate thinking branching strategy really deciding integrate mainline integration developer integrate work pulling mainline merging healthy pushing back mainline mainline give clear definition current state team software look like one biggest benefit using mainline simplifies integration without mainline complicated task coordinating everyone team described mainline however developer integrate walk example work developer call scarlett start work cloning mainline repository git nt already clone central repository would clone checkout master branch already clone would pull mainline local master work locally making commits local master working colleague violet push change onto mainline working codeline scarlett oblivious change work task point reach point want integrate first part fetch current state mainline local master branch pull violet change working local master commits show originmaster separate codeline need combine change violet team like merging others rebasing general people use word merge whenever talk bringing branch together whether actually use git merge rebase operation follow usage unless actually discussing difference merging rebasing consider merge logical task implemented either whole discussion whether use vanilla merges use avoid fastforward merges use rebasing outside scope article although people send enough tripel karmeliet might write article issue quidproquos rage day scarlett fortunate merging violet code clean merge conflict deal may textual conflict source control system handle automatically semantic conflict much harder deal self testing code handy since conflict generate considerable amount work always introduce risk lot work mark alarming lump yellow point scarlett need verify merged code satisfies health standard mainline assuming mainline healthy branch usually mean building code running whatever test form commit suite mainline need even clean merge even clean merge hide semantic conflict failure commit suite purely due merge since merge parent green knowing help track problem look diffs clue build test successfully pulled mainline codeline important often overlooked nt yet finished integrating mainline finish integrating must push change mainline unless everyone else team isolated change essentially integrating integration pull push scarlett pushed work integrated rest project many team day require code review step commit added mainline pattern call reviewed commits discus later occasionally someone else integrate mainline scarlett push case pull merge usually occasional issue sorted without coordination seen team long build use integration baton developer holding baton could integrate nt heard much recent year build time improve use name suggests use mainline integration also using mainline product one alternative using mainline integration pull mainline merging change personal development branch useful pulling least alert scarlett change people integrated detect conflict work mainline scarlett push violet wo nt able detect conflict working scarlett change people use word integrate often miss important point common hear someone say integrating mainline branch merely pulling learned wary probe check see mean pull proper mainline integration consequence two different important confuse term another alternative scarlett middle work nt ready full integration rest team overlap violet want share case open collaboration branch feature branching put work feature branch integrate mainline feature complete feature branching developer open branch begin work feature continue working feature done integrate mainline example let follow scarlett would pick feature add collection local sale tax website begin current stable version product pull mainline local repository create new branch starting tip current mainline work feature long take making series commits local branch might push branch project repo others may look change working commits landing mainline time time may pull mainline tell change likely impact feature note nt integration described since nt push back mainline point seeing work others nt team like ensure code whether integrated kept central repository case scarlett would push feature branch central repository would also allow team member see working even integrated people work yet done working feature perform mainline integration incorporate feature product scarlett work one feature time open separate branch one use feature branching popular pattern industry today talk use need introduce principal alternative continuous integration first need talk role integration frequency integration frequency often integration remarkably powerful effect team operates research state dev ops report indicated elite development team integrate notably often low performer observation match experience experience many industry peer illustrate play considering two example integration frequency starring scarlett violet lowfrequency integration start lowfrequency case two hero begin episode work cloning mainline branch couple local commits nt want push yet work someone else put commit onto mainline ca nt quickly come another person name color maybe grayham team work keeping healthy branch pulling mainline commit scarlett nt anything pull first two commits mainline unchanged need pull marked merge yellow box one merges commits soon violet need thing point developer date mainline nt integrated since isolated scarlett unaware change violet made scarlett make couple local commits ready mainline integration easy push since pulled earlier violet however complicated exercise mainline integration integrate scientifically calculated size merges based many commits involved even ignore tongueshaped bulge cheek appreciate violet merge mostly likely difficult highfrequency integration previous example two colorful developer integrated handful local commits let see happens mainline integration every local commit first change apparent violet first commit integrates right away since mainline nt changed simple push scarlett first commit also mainline integration violet got first need merge since merging merge small scarlett next integration simple push mean violet next commit also require merging scarlett latest two commits however still pretty small merge one violet two scarlett external push mainline appears get picked usual rhythm scarlett violet integration similar happened integration smaller scarlett integrate time already mainline mean grayham would integrate whatever already mainline pushing developer continue remaining work integrating commit comparing integration frequency let look two overall picture low frequency high frequency two obvious difference firstly highfrequency integration name implies lot integration twice many toy example importantly integration much smaller lowfrequency case smaller integration mean le work since le code change might hold conflict importantly le work also le risk problem big merges much work involved uncertainty work time even big merges go smoothly occasionally go badly occasional pain end worse regular pain compare spending extra ten minute per integration fifty chance spending hour fixing integration prefer look effort better since hour rather hour twenty minute uncertainty make case feel much worse uncertainly lead integration fear let look difference frequency another perspective happens scarlett violet develop conflict first commits detect conflict occurred lowfrequency case nt detect violet final merge first time put together highfrequency case detected scarlett first merge low frequency high frequency frequent integration increase frequency merges reduces complexity risk frequent integration also alert team conflict much quickly two thing connected course nasty merges usually result conflict latent team work surfacing integration happens perhaps violet looking billing calculation saw included appraising tax author assumed particular taxation mechanism feature requires different treatment tax direct route take tax billing calculation separate function later billing calculation called couple place easy use move statement caller result make sense future evolution program scarlett however nt know violet wrote feature assuming billing function took care tax self testing code lifesaver strong test suite using part healthy branch spot conflict far le chance bug making way production even strong test suite acting gatekeeper mainline large integration make life harder code integrate harder find bug also higher chance multiple interfering bug extradifficult understand le look smaller commits also use diff debugging help narrow change introduced problem lot people nt realize source control system communication tool allows scarlett see people team frequent integration alerted right away conflict also aware everyone codebase evolving le like individual hacking away independently like team working together increasing frequency integration important reason reduce size feature advantage smaller feature quicker build quicker get production quicker start delivering value furthermore smaller feature reduces feedback time allowing team make better feature decision learn customer continuous integration developer mainline integration soon healthy commit share usually le day work team experienced highfrequency integration efficient le stressful natural question ask frequently go feature branching implies lower bound size changeset ca nt smaller cohesive feature continuous integration applies different trigger integration integrate whenever made hunk progress feature branch still healthy expectation feature complete worthwhile amount change codebase rule thumb everyone commits mainline every day precisely never day work sitting unintegrated local repository practice practitioner continuous integration integrate many time day happy integrate hour worth work le developer using continuous integration need get used idea reaching frequent integration point partially built feature need consider without exposing partially built feature running system often easy implementing discount algorithm relies coupon code code nt valid list yet code nt going get called even production similarly adding feature asks insurance claimant smoker build test logic behind code ensure nt used production leaving ui asks question last day building feature hiding partially built feature hooking keystone interface last often effective technique way easily hide partial feature use feature flag well hiding partially built feature flag also allow feature selectively revealed subset user often handy slow rollout new feature integrating partbuilt feature particularly concern worry buggy code mainline consequently use continuous integration also need self testing code confidence partially built feature mainline nt increase chance bug approach developer write test partially built feature writing feature code commit feature code test mainline together perhaps using test driven development term local repo people use continuous integration nt bother separate local branch work usually straightforward commit local master perform mainline integration done however perfectly fine open feature branch work developer prefer integrating back local master mainline frequent interval difference feature branching continuous integration nt whether feature branch developer integrate mainline use continuous integration alternative feature branching tradeoff two sufficiently involved deserve section article time tackle comparing feature branching continuous integration feature branching appears common branching strategy industry moment vocal group practitioner argue continuous integration usually superior approach key advantage continuous integration provides support higher often much higher integration frequency difference integration frequency depends small team able make feature team feature done le day perform feature branching continuous integration team longer feature length greater feature length greater difference two pattern indicated already higher frequency integration lead le involved integration le fear integration often difficult thing communicate lived world integrating every week month integration likely fraught activity hard believe something done many time day integration one thing frequency reduces difficulty counterintuitive notion hurt often smaller integration le likely turn epic merge misery despair feature branching argues smaller feature day week month right continuous integration allows team get benefit highfrequency integration decoupling feature length integration frequency team prefers feature length week two continuous integration allows still getting benefit highest integration frequency merges smaller requiring le work deal importantly explained merges frequently reduces risk nasty merge cut bad surprise brings reduces overall fear merging conflict arise code highfrequency integration discovers quickly lead nasty integration problem benefit strong enough team feature take couple day still continuous integration clear downside continuous integration lack closure climactic integration mainline lost celebration risk team nt good keeping healthy branch keeping commits feature together also make possible make late decision whether include feature upcoming release feature flag allow feature switched user perspective code feature still product concern often overblown code nt weigh anything mean team want continuous integration must develop strong testing regimen confident mainline remains healthy even many integration day team find skill difficult imagine others find possible liberating prerequisite mean feature branching better team nt force healthy branch require release branch stabilize code release size uncertainty merges obvious problem feature branching biggest problem may deter refactoring refactoring effective done regularly little friction refactoring introduce conflict conflict nt spotted resolved quickly merging get fraught refactoring thus work best high frequency integration surprise became popular part extreme programming also continuous integration one original practice feature branching also discourages developer making change nt seen part feature built undermines ability refactoring steadily improve code base found branch fork short lifetime le day merged trunk le three active branch total important aspect continuous delivery contribute higher performance merging code trunk master daily basis state devops report come across scientific study software development practice usually remain unconvinced due serious problem methodology one exception state dev ops report developed metric software delivery performance correlated wider measure organizational performance turn correlate business metric return investment profitability first assessed continuous integration found contributed higher software development performance finding repeated every survey since using continuous integration nt remove advantage keeping feature small frequently releasing small feature provides rapid feedback cycle wonder improving product many team use continuous integration also strive build thin slice product release new feature frequently feature branching code feature assessed quality unit feature code added product feature complete le frequent merges continuous integration support higher frequency integration feature length reduced time find conflict smaller merges encourages refactoring requires commitment healthy branch thus selftesting code scientific evidence contributes higher software delivery performance feature branching open source many people ascribe popularity feature branching github pullrequest model originated opensource development given worthwhile understand different context exist opensource work much commercial software development opensource project structured many different way common structure one person small group act maintainer programming maintainer work larger group programmer contributor maintainer usually nt know contributor sense quality code contribute maintainer also little certainty much time contributor actually put work let alone effective getting thing done context feature branching make whole lot sense someone going add feature small large idea going finished make sense wait till done integrating also important able review code ensure pass whatever quality bar code base many commercial software team different working context fulltime team people commit substantial usually fulltime software leader project know people well start reliable expectation code quality ability deliver since paid employee leader also greater control time put project thing coding standard group habit given different context clear branching strategy commercial team need operates opensource world continuous integration nearimpossible fit occasional contributor opensource work realistic alternative commercial work team assume work opensource environment automatically correct different context reviewed commits every commit mainline peerreviewed commit accepted code review long encouraged way improving code quality improving modularity readability removing defect despite commercial organization often found difficult fit software development workflow opensource world however widely adopted idea contribution project reviewed accepting onto project mainline approach spread widely development organization recent year particularly silicon valley workflow like fit particularly well github mechanism pullrequests workflow like begin scarlett finish hunk work wish integrate mainline integration assuming team practice successful build push mainline sends commit review member team say violet code review commit problem commit make comment backandforth scarlett violet happy done commit placed mainline reviewed commits grew popularity open source fit well organizational model committed maintainer occasional contributor allow maintainer keep close eye contribution also mesh well feature branching since completed feature mark clear point code review like certain contributor going complete feature review partial work better wait feature complete practice also spread widely larger internet firm google facebook build special tooling help make work smoothly developing discipline timely reviewed commits important developer finish work go onto something else couple day work longer top mind review comment come back frustrating completed feature much worse partially completed feature may difficult make progress review confirmed principle possible continuous integration reviewed commits indeed possible practice google follows approach although possible hard relatively rare reviewed commits feature branching common combination use although reviewed commits become popular practice last decade downside alternative even done well reviewed commits always introduces latency integration process encouraging lower integration frequency pair programming offer continuous code review process faster feedback cycle waiting code review like continuous integration refactoring one original practice extreme programming many team use reviewed commits nt quickly enough valuable feedback offer come late useful point awkward choice lot rework accepting something may work undermines quality codebase code review nt confined code hit mainline many tech leader find useful review code commit catching developer see concern culture refactoring valuable done well set community everyone team regularly reviewing code base fixing problem see tradeoff around reviewed commits rest primarily social structure team already mentioned opensource project commonly structure trusted maintainer many untrusted contributor commercial team frequently fulltime may similar structure project leader like maintainer trust small perhaps singular group maintainer wary code contributed rest team team member may allocated multiple project making much like opensource contributor social structure exists reviewed commits feature branching make great deal sense team higher degree trust often find mechanism keep code quality high without adding friction integration process reviewed commits valuable practice mean necessary route healthy code base particularly looking grow wellbalanced team nt overly dependent initial leader integration friction one problem reviewed commits often make hassle integrate example integration friction activity make integration take time effort integration fiction developer inclined lower frequency integration imagine dysfunctional organization insists commits mainline need form take halfanhour fill regime discourages people integrating frequently whatever attitude feature branching continuous integration valuable examine anything add kind friction unless clearly add value friction removed manual process common source friction particularly involves coordination separate organization kind friction often reduced using automated process improving developer education remove need pushing step later step deployment pipeline qa production find idea eliminating kind friction material continuous integration continuous delivery sort friction also crop path production difficulty treatment one thing make people reluctant consider continuous integration worked environment high degree integration friction take hour integration clearly absurd several time day joining team integration nonevent someone dash minute feel like different world suspect much argument merit feature branching continuous integration muddied people nt experienced world thus ca nt fully understand point view cultural factor influence integration friction particular trust member team team leader nt trust colleague decent job likely want prevent commits damage codebase naturally one driver reviewed commits team trust judgment colleague likely comfortable postcommit review cutting review entirely rely communal refactoring clean problem gain environment removing friction precommit review introduce thus encouraging higherfrequency integration often team trust important factor feature branch versus continuous integration argument importance modularity people care software architecture stress importance modularity wellbehaved system faced making small change system poor modularity understand nearly since even small change ripple many part codebase good modularity however need understand code one two module interface ignore rest ability reduce effort understanding need worth putting much effort modularity system grows modularity also impact integration system good module time scarlett violet working wellseparated part code base change wo nt cause conflict good modularity also enhances technique like keystone interface branch abstraction avoid need isolation branch provide often team forced use source branching lack modularity starves option feature branching poor man modular architecture instead building system ability easy swap feature runtimedeploytime couple source control providing mechanism manual merging dan bodart support go direction despite many attempt remains extremely difficult build good modular architecture start programming achieve modularity need constantly watch system grows tend modular direction refactoring key achieving refactoring requires highfrequency integration modularity rapid integration thus support healthy codebase say modularity hard achieve worth effort effort involves good development practice learning design pattern learning experience code base messy merges nt closed understandable desire forget instead ask merge messy answer often important clue modularity improved improving health code base thus enhancing productivity team personal thought integration pattern aim writer nt convince follow particular path instead inform factor consider decide path follow despite add opinion prefer pattern indicated earlier overall much prefer work team us continuous integration recognize context key many circumstance continuous integration nt best option reaction work change context preference want environment everyone easily keep refactoring codebase improving modularity keeping healthy enable u quickly respond changing business need day writer developer still choose work thoughtworks company full people favor way working believe extreme programming style one effective way develop software want observe team developing approach improve effectiveness profession path mainline production release mainline active branch regular drop new modified code keeping healthy important people start new work starting stable base healthy enough also release code directly mainline production philosophy keeping mainline alwaysreleasable state central tenet continuous delivery must determination skill present maintain mainline healthy branch usually deployment pipeline support intensive testing required team working way usually keep track release using tag released version team nt use continuous delivery need another approach release branch branch accepts commits accepted stabilize version product ready release typical release branch copy current mainline allow new feature added main development team continues add feature mainline picked future release developer working release focus solely removing defect stop release productionready fix defect created release branch merged mainline fault deal branch ready production release although scope work fix release branch hopefully smaller new feature code get increasingly difficult merge back mainline time go branch inevitably diverge commits modify mainline get harder merge release branch mainline problem applying commits release branch way easy neglect copy mainline particularly get harder due divergence resulting regression embarrassing consequently people favor creating commits mainline working cherrypick release branch cherrypick commit copied one branch another branch nt merged one commit copied previous commits since branch point example merge release branch would include cherrypick take cherrypick may cleanly apply release branch may rely change done downside writing release fix mainline many team find harder frustrating fix one way mainline rework release branch release occur particularly true schedule pressure get release team one version production time need single release branch product many release present production use software run customer kit upgraded customer wish many customer reluctant upgrade unless compelling new feature burned upgrade fail customer however still want bug fix especially involve security issue situation development team keep release branch open release still used applies fix needed development go get increasingly difficult apply fix older release often cost business mitigated encouraging customer frequently upgrade latest version keeping product stable essential burned customer reluctant unnecessary upgrade term heard release branch include releasepreparation branch stabilization branch candidate branch hardening branch release branch seems common use release branch valuable tool team nt able keep mainline healthy state allows portion team focus necessary bug fix needed ready production tester pull stable recent candidate tip branch everyone see done stabilize product despite value release branch best team nt use pattern singleproduction product nt need mainline kept sufficiently healthy commit mainline released directly case release tagged publicly visible version build number might noticed stuck clumsy adjective singleproduction previous paragraph pattern becomes essential team need manage multiple version production release branch may also handy significant friction release process release committee must approve production release chris oldwood put case release branch act like quarantine zone corporate cog slowly turn general friction removed release process much possible similar way need remove integration friction however circumstance mobile app store may possible many case tag sufficient time branch opened essential change required source release branch may also environment branch subject concern using pattern also variation longlived release branch ready describe shortly maturity branch branch whose head mark latest version level maturity code base team often want know date version source fact may complicated codebase varying level maturity qa engineer may want look latest staging version product someone debugging production failure want look latest production version maturity branch provide way tracking idea version code base reach certain level readiness copied specific branch consider maturity branch production getting production release ready open release branch stabilize product ready copy longrunning production branch think copy rather merge want production code exactly tested upstream branch one appeal maturity branch clearly show version code reach stage release workflow example want single commit production branch combine commits bit scmjiggerypokery pull case loses link finegrained commits mainline commits recorded commit message help people track later maturity branch usually named appropriate stage development flow hence term like production branch staging branch qa branch occasionally heard people refer production maturity branch release branch use sourcecontrol system support collaboration tracking history codebase using maturity branch allows people get couple important bit information showing version history particular stage release workflow find latest version currently running production code looking head relevant branch bug come sure nt beforehand look previous version branch see specific code base change production automation tie change specific branch example automated process deploy version production whenever commit made production branch alternative using maturity branch apply tagging scheme version ready qa tagged typically way includes build number build ready qa tagged ready production get get history searching code repository tag match tagging scheme automation similarly based tag assignment maturity branch thus add convenience workflow many organization find tagging work perfectly well look one pattern nt strong benefit cost often however need use sourcecode management system tracking like sign poor tooling team deployment pipeline variation long lived release branch think variation release branch pattern combine maturity branch release candidate wish release copy mainline release branch perrelease branch commits made onto release branch improve stability fix also merged mainline tag release happens copy mainline want another release commits may copied typical maturity branch merged merged must careful head release branch exactly match head mainline one way revert fix applied mainline merging team also squash commits merging ensure commit represents complete release candidate people find tricky good reason prefer cutting new branch release approach suitable product single release production time one reason team like approach ensures head release branch always point next release candidate rather dig head latest release branch however least git achieve effect release branch name move hard reset team cut new release branch leaving tag behind old release branch environment branch configure product run new environment applying source code commit software usually need run distinct environment developer workstation production server perhaps various testing staging environment usually running different environment requires configuration change url used access database location messaging system url key resource environmental branch branch contains commits apply source code reconfigure product run different environment may version running mainline wish run staging server cutting new branch starting version apply appropriate environment change rebuild product deploy staging environment change usually applied hand although folk responsible comfortable git may cherry pick change earlier branch environment branch pattern often combined maturity branch longlived qa maturity branch may include configuration adjustment qa environment merges branch would pick configuration change similarly long lived release branch may include configuration change use environment branch appealing approach allows u tweak application way need ready new environment keep change diff cherrypicked future version product however classic example anti pattern something look appealing start soon lead world misery dragon coronaviruses looming danger shift environment application behavior change move one environment another ca nt take version running production debug developer workstation make much harder fix problem introduce bug show certain environment dangerously production environment danger want ensure much possible code run production everywhere else problem environmental branch flexibility make appealing since change aspect code diffs easily introduce configuration patch lead varied behavior bug come result many organization wisely insist iron rule executable compiled must executable run every environment configuration change required must isolated mechanism explicit configuration file environment variable way minimized simple setting constant wo nt change execution leaving le room bug breed simple demarcation executable configuration easily become blurred software executes source directly eg javascript python ruby principle hold keep environmental change minimal nt use source branching apply general rule thumb able check version product run environment anything change purely due different deployment environment nt source control argument storing combination default parameter source control version application able switch different configuration needed based dynamic factor environment variable environment branch example using source branching poor man modular architecture application need run different environment ability switch different environment need firstclass part design environment branch useful jerryrigged mechanism application lacking design high priority removal sustainable alternative hotfix branch branch capture work fix urgent production defect serious bug appears production need fixed soon possible work bug higher priority work team work anything slow work hotfix hotfix work need done source control team properly record collaborate opening branch latest released version applying change hotfix branch fix applied production everyone chance decent night sleep hotfix applied mainline ensure nt regression next version release branch open next version hotfix need go time release long hotfix likely made top code changed awkward merge case good test expose bug really helpful team using release branch hotfix work done release branch new release made completed essentially turn old release branch hotfix branch release branch possible make hotfixes mainline cherrypick release branch le common hotfixes usually done strong timepressure team continuous delivery release hotfixes directly mainline may still use hotfix branch start latest commit rather last released commit labeled new release since team working way likely nt expose new feature hotfix likely folded release illustrates course continuous delivery hotfixes nt need sidestep normal release process team sufficiently responsive release process hotfix handled normal significant benefit continuous delivery mindset one special handling appropriate continuous delivery team disallow commits mainline hotfix completed fit mantra nobody important task fix mainline fact true defect found mainline even yet sent production suppose nt really special handling use hotfixes usually done time considerable pressure team pressure mostly likely make mistake condition even valuable usual use source control commit frequently seems reasonable keeping work branch let everyone know done deal problem exception would simple fix applied directly mainline interesting issue deciding hot bug fix something left normal development workflow frequently team release leave production bug fix regular rhythm development case decision depend primarily business impact bug fit release frequency team release train release set interval time like train departing regular schedule developer choose train catch completed feature team us release train set regular cadence release every two week every six month date set team cut release branch release following metaphor train schedule people decide train want feature catch target work train putting commit onto appropriate branch train loading train departs branch release branch accept fix team using monthly train would begin branch march based february release add new feature month go set date perhaps third wednesday month train departs featurefreezing branch start new branch april train add new feature meanwhile developer stabilize march train releasing production ready fix applied march train cherrypicked april train release train usually used feature branching scarlett sens done feature decide train catch think done march release integrate march train wait next one integrate team use softfreeze day train departs hard freeze release train softfreeze state developer push work onto train unless confident feature stable ready release feature exhibit bug added softfreeze reverted pushed train rather fixed train day people hear release train often hearing agile release train concept safe safe agile release train team organization structure referring largescale teamofteams share common release train schedule us release train pattern describing use central concept release train pattern regularity release process know advance release train depart plan feature complete train nt think get feature finished march train know catch next one release train particularly useful significant friction release process external testing group take couple week verify release release board need agree new version product case often wiser try remove release friction allow frequent release situation course may wellnigh impossible verification process used app store mobile device tuning release train match release friction may make best situation release train mechanism help concentrate everyone attention feature appear thus help predictability feature completed clear downside approach feature completed early train period sit train reading book waiting departure feature important mean product miss important capability several week month release train valuable stage improving team release process team difficulty making stable release jumping way continuous delivery jump far picking suitable release train period one hard plausible good first step team gain skill increase frequency train eventually abandoning continuous delivery capability grows variation loading future train base example feature train new train arrive platform pick feature time previous train departs another approach one train accepting feature time scarlett nt think feature done march train still push mostlydone feature april train push commits finish departs regular interval pull march train april train team prefer march train departs one merge u know small merges exponentially easier would prefer pull every march commit soon loading future train allows developer working april feature collaborate without disturbing work march train disadvantage folk april make change conflict march work march worker nt get feedback thus making future merges complicated compared regular release mainline one main benefit release train regular cadence release production multiple branch new development add complexity aim regular release achieve using mainline well decide release schedule cut release branch schedule whatever tip mainline releaseready mainline need release branch regular release like still option developer hold back nearlydone feature next release pushing mainline regular release date continuous integration folk always delay placing keystone keep feature flag turned want feature wait next scheduled release releaseready mainline keep mainline sufficiently healthy head mainline always put directly production started section commented make mainline healthy branch make health check sufficiently high release directly mainline recording release tag whenever wish spent lot time describing pattern alternative simple mechanism think time highlight one team excellent choice every commit made mainline releasable nt mean released subtle distinction continuous delivery continuous deployment team using continuous deployment release every change accepted mainline continuous delivery every change releasable business decision whether release continuous deployment thus subset continuous delivery think continuous delivery giving u option release time decision exercise option depends broader issue use coupled continuous integration part continuous delivery releaseready mainline common feature highperforming team given wellknown enthusiasm continuous delivery might expect say releaseready mainline always superior choice alternative describing section pattern however context pattern excellent one context trap another releaseready mainline effectiveness governed integration frequency team team us feature branching typically integrates new feature per month team likely bad place insistence releaseready mainline may barrier improvement bad place respond changing product need cycle time idea production long also likely complex merges verification feature large leading many conflict may show integration time continuing drain developer pull mainline feature branch drag discourages refactoring reduces modularity exacerbates problem key getting trap increase integration frequency many case difficult achieve maintaining releaseready mainline case often better give releaseready mainline encourage frequent integration use release branch stabilize mainline production time course hope remove need release branch improving deployment pipeline context highfrequency integration releaseready mainline obvious advantage simplicity need bother complexity various branch described even hotfixes applied mainline production making longer special enough deserve name furthermore keeping mainline releaseready encourages valuable discipline keep productionreadiness top developer mind ensuring problem nt gradually creep system either bug processproblems slow cycletime product full discipline continuous delivery developer integrating many time day mainline without breaking seems dauntingly difficult many yet achieved become habit team find remarkably reduces stress relatively easy keep key element delivering zone agile model branching pattern primary thrust article discussing pattern around team integration path production pattern like mention experimental branch collect together experimental work code base expected merged directly product experimental branch developer want try idea nt expect change simply integrated back mainline may discover new library think would good replacement one already using help make decision whether cut start branch try writing rewriting relevant part system using aim exercise nt contribute code code base learn applicability new tool specific context may work together colleague similarly new feature implement see couple way approach spend couple day alternative help decide one go key point expectation code experimental branch abandoned merged mainline nt absolute happens like result code integrated easily wo nt ignore opportunity nt expect case may relax number usual habit le testing willynilly code duplication rather trying refactor cleanly expect like experiment work scratch applying idea production code using experimental branch reminder guide using commits finished work experimental branch git usually add tag remove branch tag keep codeline around case want reexamine later use convention starting tag name exp make nature clear use experimental branch useful whenever want try something sure end using way whatever like however zany confident easily put one side sometimes thinking working regular work realize really experiment happens open new experimental branch reset main work branch last stable commit future branch single branch used change invasive handled approach rare pattern crop occasionally people using continuous integration sometimes team need make change intrusive code base usual technique integrating workinprogress nt apply well case team something look much like feature branching cut future branch pull mainline mainline integration end big difference future branch feature branch one future branch consequently people working future branch never stray far mainline divergent branch deal may several developer work future branch case continuous integration future branch integration first pull mainline future branch integrate change slow integration process cost using future branch use stress rare pattern suspect team continuous integration never need use seen particularly invasive change architecture system general last resort used ca nt figure use something like branch abstraction instead future branch still kept short possible create partition team like partition distributed system need keep absolute minimum collaboration branch branch created developer share work member team without formal integration team us mainline collaboration occurs mainline mainline integration occurs member team see developer sometimes developer want share work integration opening branch collabortion allows adhoc basis branch either pushed team central repository collaborator pull push directly personal repository shortlived repository set handle collaboration work collaboration branch usually temporary closed work integrated mainline use collaboration branch become progressively useful integration frequency decrease longlived feature branch often require informal collaboration team member need coodinate change area code important several people however team using continuous integration likely never need open collaboration branch since short period work nt visible main exception experimental branch definition never get integrated several people work experiment together need make experimental branch also collaboration branch team integration branch allow subteam integrate integrating mainline larger project may several team operating single logical code base team integration branch allows team member integrate without integrating member project using mainline effectively team treat team integration branch mainline within team integrating would overall project mainline addition integration team carry separate effort integrate project mainline use obvious driver using team integration branch codebases actively developed many developer make sense split separate team wary assumption run plenty team seem large work single mainline yet manage report hundred developer important driver team integration branch difference desired integration frequency project overall expects team feature branch couple week length subteam prefers continuous integration team set team integration branch continuous integration integrate feature working mainline done similar effect play difference standard overall project using healthy branch health standard subteam subteam might choose operate stricter level health wider project maintain mainline highenough degree stability similarly subteam struggling make commits healthy enough wellcontrolled mainline may choose use team integration branch use release branch stabilize code going mainline situation usually favor necessary particularly fraught situation also think team integration branch structured form collaboration branch one based formal project organization rather adhoc collaboration looking branching policy article talked branching term pattern nt wish advocate one approach branching rather lay common way people reflect tradeoff within wide range different context find software development lot branching approach described year tried understand work best used assessed halfformed pattern mind finally developed written pattern think useful look policy see think term pattern gitflow gitflow become one common branching policy run written vincent driessen appearing git getting popular day git branching often seen advanced topic git made branch appealing partly improved tooling handling file movement better also cloning repository essentially branch requiring similar thinking merge issue pushing back central repository gitflow us mainline calling develop single origin repository us feature branching coordinate multiple developer developer encouraged use personal repository collaboration branch coordinate developer working similar work traditionally named core branch git master gitflow master used production maturity branch gitflow us release branch work pass develop release branch master hotfixes organized hotfix branch gitflow nt say anything length feature branch hence expected integration frequency also silent whether mainline healthy branch level health needed presence release branch implies nt releaseready mainline driessen pointed addendum year gitflow designed kind project multiple version released production software installed customer site multiple live version course one main trigger using release branch however many user picked gitflow context singleproduction webapp point branching structure easily becomes complicated necessary gitflow popular sense many people say use common find people say using gitflow actually something quite different often actual approach closer github flow github flow gitflow really caught unnecessary complexity branching structure web application encouraged plenty alternative rise popularity github shock branching policy used developer would become well known policy called github flow best description scott chacon name like github flow surprise knowingly based reaction gitflow essential difference two different kind product mean different context hence different pattern gitflow assumed product several version production github flow assumes single version production highfrequency integration onto releaseready mainline context release branch nt needed production issue fixed way regular feature need hotfix branch sense hotfix branch usually mean deviation normal process removing branch drastically simplifies branching structure mainline feature branch github flow call mainline master developer work feature branching push feature branch regularly central repository support visibility integration mainline feature complete chacon indicates feature branch single line code run couple week process intended work way either case github pullrequest mechanism part mainline integration us reviewed commits gitflow github flow often get confused ever thing dig deeper name really understand going general theme using mainline feature branch trunkbased development wrote earlier mostly hear trunkdriven development synonym continuous integration also reasonable see trunkdriven development branching policy alternative gitflow github flow paul hammant written indepth website explain approach paul longtime colleague mine thoughtworks solid record wading client ossified branching structure trusty machete trunkbased development focus work mainline called trunk common synonym mainline thus avoiding kind longlived branch smaller team commit directly mainline using mainline integration larger team may use shortlived feature branching short mean couple day probably equates continuous integration practice team may use release branch called branch release releaseready mainline release trunk final thought recommendation since earliest program people found wanted program something little bit different existing program easy take copy source tweak desired source power make change desire action make harder copy accept new feature bug fix original source time become impossible many enterprise discovered early cobol program suffer extensively customized erp package today even name nt used time copy source code modify source branching even version control system involved said beginning long piece branching easy merging harder branching powerful technique make think goto statement global variable lock concurrency powerful easy use easier overuse often become trap unwary inexperienced source code control system help control branching carefully tracking change end act witness problem someone say branching evil everyday problem multiple developer contributing single codebase judicious use branching essential always wary remember paracelsus observation difference beneficial drug poison dosage first tip branching whenever considering using branch figure going merge time use technique trading alternative ca nt make sensible tradeoff decision without understanding cost technique branching piper exacts fee merge hence next guideline make sure understand alternative branching usually superior remember bodart law way solve problem improving modularity improve deployment pipeline tag enough change process would make branch unnecessary quite likely branch fact best route go right smell alerting deeper problem tackled next couple month getting rid need branch usually good thing remember leroy illustration branch diverge exponentially run without integrating consider often integrate branch aim double integration frequency obviously limit wo nt near unless zone continuous integration barrier integrating often barrier often exactly one need given excessive dose dynamite order improve development process since merging hard part branching pay attention making merging difficult sometimes process issue sometimes failing architecture whatever nt give stockholm syndrome merge problem especially one cause crisis signpost improving team effectiveness remember mistake valuable learn pattern described outline common configuration branching come across colleague travel naming explaining explaining useful hope help evaluate use remember pattern rarely universally good bad value depends context run branching policy whether wellknown one like gitflow trunkbased development something homegrown development organization hope understanding pattern within help decide whether good fit circumstance pattern would useful blend mix
72,Lobsters,vcs,Git & VCS,The Communicative Value of Using Git Well,https://jeremykun.com/2020/01/14/the-communicative-value-of-using-git-well/,communicative value using git well,survey git ground rubber duck debugging vimgitgutter hal abelson like,recently employer google forced switch mercurial instead usual version control system git process switching sparked discussion colleague value various version control system question like benefit git provide mercurial yielded clear answer suggesting many developer know informal twitter survey refute claim distinguished value git provides ability sculpt code change story allowing change granular possible providing good tool manipulating change treating change history firstclass object manipulated making branching cheap simple transparent might summed git let rewrite history much working code nonlinear nature make change hard communicate well wielding git well let easily draft edit decompose mix recombine change ease thus narrate large change way easy review reduces review cycle time make hindsight clear pull request play commit scene hunk line dialogue stage direction git director tool rest article expand idea interested learning git technical perspective enjoyed john wiegley git ground short book make rigorous many term use loosely article basic git familiarity required understand gist article philosophy using git surely unoriginal doubt influenced engineer worked thing read best thought refine incrementally expand upon picked others lisp great insight code data programmer take advantage metaprogramming git great insight code change data programmer take advantage metachanges change data produce working feature bug fix metachanges change make change ready review embracing metachanges enables better cleanliness clearer communication git support metachanges limit without sacrificing flexibility instance want treat git like replacement dropbox keep single default branch git pull edit code run git add git commit stuff git push save work push server could even alias git save admit basically project real importance sloppy usage violates personal philosophy git tell clear story commits commit message like stuff useless entire unit work smashed one change easily teased apart understood incrementally problematic code review crucial part software development cost cognitive burden unit code review scale superlinearly amount code review citation needed personal experience however sometimes large code review necessary large refactors extensive testing scenario complex feature often split distinct changesets pull request addition continuous integration framework require every merge changeset pull request test pas product deployable mean submit isolated changeset cause test fail performs partial refactors without work introducing opportunity make mistake light want reduce review burden reviewer encourage people reviewing reduce burden human toll best way help someone understand complex change break smallest possible reasonable meaningful unit change compose piece together logical way tell story git enables distinguishing unit change atomic unit change hunk diff subset line file set hunk possibly across many file assembled commit includes arbitrary message describes commit commits assembled linearly branch merged commits another branch often masterdefaultgolden branch technically commits node tree commit unique parent branch reference commit spirit said correct github concept pull request wrap list commits branch review approval process show list commits order take advantage three level specificity use hunk arrange thought commits voice command pull request direct ensemble particular feature implementer reduce review burden separating various concern composing feature different commits pull request whole might consist core feature work test incidental cleanupasyougo opportunistic refactoring go different commits core feature work usually comprises much le half total code review splitting even core feature work smaller commits make reviewing much easier example commits feature might suggestively look like following top first commit bottom last commit read user full name database unit test user name reading include user name user api response unit test user api name field display user name profile page integration test verify name displayed sanitize name field submission unit test name submission refactor name fullname style fix unit small reviewer read commits one time order present reviewer approves whole asks revision style result faster review code included one commit reviewer need reconstruct story scratch code inherently laid nonlinearly hard control reviewer see order crafting pull request well draw attention certain aspect change showing otherwise confusing implication story commit style natural way achieve key benefit story approach get better control code reviewer read code reduces cognitive burden reviewer increase likelihood bug found review also le obvious benefit outsized impact explaining work story prompt think critically change suggesting redesigns helping catch error using principle behind rubber duck debugging moreover revealing thought process reviewer understands better suggest better improvement code lumped one change easy reviewer second guess rationale behind particular line code line intentional included small commit message make clear intended reason question preemptively answered bit trust built finally practice organizing work clean story easier work actually become clean story learn quickly assemble efficient plan get work done end revising work le often least le often stupid reason design tooling git make crafting narrative code change easy tool enable staging area aka index branch cherrypicking interactive rebasing staging area index feature allows mark part change workspace included next commit word git three possible state change committed staged next commit yet staged default git diff show staged git diff staged allows see staged committed find staging area incredibly powerful sorting partial work mess make mess always know advance tentative change really want often make additional change see play run roadblock would resolve staging area help flexible rather commit change undo later see next paragraph experiment mess get good place start committing repeatedly stage first subset change want group commit git commit keep staging seamless editor support use vimgitgutter allows simply navigate block want stage type ha leader hunk add continue ready commit drop command line run git commit recall hunk smallest unit change git support minimal subset line changing single file three layer hunkcommitpull hierarchy change provides three layer commitment support hunk organize commit ready commit included feature working commits minimal semantic unit change comprehended reviewer context larger feature pull request smallest semantic unit approvable work feature work maintains repositorywide continuous integration invariant course always right sometimes make commits realize want go back differently branching rebasing cherrypicking come simplest case made mistake something committed interactive rebase basically go back point time made mistake correct go back present alternatively fix change commit use interactive rebasing combine two commits post hoc provided run merge conflict commits commits branch seamless also leave unstaged thing like extra logging note debug code commit magic string run script pushing remove commits branch whose message contains magic string another kind failure finishing half split feature work two smaller approvable unit case extract commits current branch new branch variety way branchrebase cherrypick prepare two separate dependent pull request impossible without keeping finegrained commit history developing otherwise go back manually split commits time consuming incidentally pain point mine using perforce mercurial system commit smallest approvable unit amend including local change none provide support splitting bigger change smaller change post hoc yet confidently easily go entire change back hunk git commits group hunk semantically meaningful named unit go together reorganized view others say benefit git branch cheap simple fast reorganization true benefit cheap branching mean end third kind mistake one missed even review error make master branch start causing bug production clean commit history small commits helpful allows one easily rolled back minimal bad change without rolling back entire pull request contained though want finally benefit easy review redoubled looking project history outside context review point new engineer want implement feature similar previous feature rather see code lumped one blob see evolution feature cleanest clearest form best practice like testing refactoring make abstraction included story famous quote hal abelson program must written people read incidentally machine execute view guide philosophy working revision code change must written people read incidentally change codebases nice groan let ask reflect hyperbole next time encounter confusing code review like like loading
73,Lobsters,vcs,Git & VCS,Software Forge Performance Index,https://forgeperf.org/,software forge performance index,lighthouse source code,webpage collect performance information various hosted software development service report updated weekly recently august utc generated lighthouse patch welcome expand detail methodology ran lighthouse alpine linux following command line lighthouse url onlycategoriesperformance accessibility emulatedformfactornone emulated mobile form factor disabled rare developer coding mobile device forge separate mobile site separate test suite would warranted left throttling setting lighthouse default le rare developer tethered phone working community le privileged internet access simulated latency also help reduce variable impact realworld latency additionally simulating lowbandwidth connection help draw difference service clearly cpu throttling disabled offset effect gpu available testing environment run test locally recommended remove constraint source code available wish run benchmark system take hour
74,Lobsters,vcs,Git & VCS,Git worktrees and pyenv: developing Python libraries faster,http://huonw.github.io/blog/2020/04/worktrees-and-pyenv//,git worktrees pyenv developing python library faster,git worktrees pyenv context stellargraph library machine learning graph extensive demo per month continuous integration validating demo stellargraph team paper cut sequential development slower code review le useful git history slower landing stash concurrent development concurrent development worktrees multiple worktrees parallel python dependency management virtual environment pyenv rescue pyenv pyenvvirtualenv pyenvjupyterkernel jupyter stellargraph demo wrapping,glorious work one task time able take start finish completely move onto next one sound great reality messier context switch common annoying inefficient switching mean task colleague delayed combine git worktrees pyenv plugins reduce overhead context switch keep development collaboration smooth possible working python library reducing pain context switch allows work many task concurrently usually one two large feature medium one variety small one day typically involves working larger feature hour consecutively either getting blocked needing time think subconsciously thus pick one smaller task context post talk use tool practice work stellargraph library machine learning graph stellargraph python library built using tensorflow kera common data science tool take fairly standard approach developing distributing code mean promptness collaboration important extensive demo documentation supporting multiple version python change happen via pull request per month code review required pull request merged without least one approving review testing also required pull request merged without passing continuous integration including validating demo add take minute stellargraph team project csiro brings together engineer data scientist ux designer researcher mostly fit first box part role engineer mixed team force multiplier optimising otherwise making code reliable improving tooling process listed others others le engineering experience research interest use strength best mean day often broken reviewing others pull request waiting approval feedback sometimes involves checking pull request code locally run responding code review pull request try keep review cycle tight possible usually involves editing code response small fix annoying paper cut validating requirement expectation larger complicated feature bug fix often involves proofofconcept implementation draft pull request involve working repository code local machine typically short task ranging minute hour day like new feature addition code task finish feature bug fix wait code review one colleague usually fast day two trying avoid context switching long time work sequential development suppose working feature notice paper cut b would take minute two fix maybe typo documentation minor bug something like third situation one approach fix change feature eventual pull request code land combine b suboptimal lead slower code review review larger unclear change purpose detangling required le useful git history combined ab change appears git blame investigation like looking code review except author likely answer question longer remember certainly forget sort detail quickly slower landing useful small fix fix b get caught delayed lengthier review pull request better approach work separate branch thus separate pull request concurrent work single copy repository frustrating bookkeeping work required fix dwarf actual effort fix save state workinprogress work branch featurea mean actual change file disk either wip commit stash taking care manage relevant temporary new file context directly stored version control editing file planning next create switch new branch bugfixb fix b create pull request restore work switching back featurea branch reapplyingremembering state step actual fix step much easier even faster either step require remembering thing code base also remembering thing git hard work concurrent development list much simpler multiple parallel copy source code changed independently change directory featurea checked one workinprogress work create new copy create new branch bugfixb fix b create pull request change back directory featurea picking left including thing like exact position file editor whole process take long step little bookkeeping directly fix remember planning next problem first version dramatically improve find minimal context switching work code mindset manage git one le time forget get distracted whole process faster using separate directory benefit switching branch make easier incremental compilation tooling reduce work although apply python much find easier find code one way implement clone repository multiple time separate directory like git clone git githubcom stellargraphstellargraphgit git clone git githubcom stellargraphstellargraphgit git clone git githubcom stellargraphstellargraphgit used effectively many year different project stylised view structure multiple clone single repository show isolated however copy isolated lead problem practice require full git state potentially large end inconsistent state especially remote branch originmaster may different originmaster depending git pull git fetch run confusion branch whenever switch away branch default branch exists copy created concurrent development worktrees better way use multiple worktrees behave almost identically multiple independent clone except share single git directory metadata therefore one access branch local remote state branch every copy worktree created single command similar git clone cd inside repository need multiple copy git worktree add someexistingbranch git worktree add b somenewbranch first argument add sibling directory new worktree second optional one name branch checkout start stellargraph directory act like normal git repository usual operation like creating switching branch committing stashing work fine stylised view worktrees show share single main git folder use fixed set worktrees numbered moment alternative never tried worktree individual branch starting new feature new branch foo system might look something like following git worktree add stellargraphfoo b foo cd stellargraphfoo edit code git push repeat finished finished worktree nt needed cd rm stellargraphfoo used worktrees sort project including scala c rust python brings special challenge parallel python dependency management multiple copy source tree great also lead confusing circumstance state mixed easy edit file wrong directory understand applying know spent time tracking incorrectlocation edits whenever multiple copy anything function file directory dependency management hard enough without time python common approach dependency make worse code need run correct virtual environment default managed separately current directory typically checkout would virtual environment case difference exact set dependency used allow copy install exact ondisk version stellargraph editable sequence terminal might look like cd venvbinactivate work like running test pytest test finished let move cd run test pytest test unfortunately made mistake pytest run line running virtual environment worktree properly reflecting state source tree needed run venvbinactivate cd line using venv directory pyenv rescue solve using pyenv pyenvvirtualenv instead creating virtual environment worktree venv subdirectory create pyenv virtual environment one associate using pyenv local example worktree ran something like pyenv virtualenv pyenv local command us python pip like pip install editable pytest anywhere within worktree automatically use virtual environment need manually activate deactivate virtual environment cutting major piece human error using pyenv version management benefit pyenvjupyterkernel allows automatically registering virtual environment jupyter making easy test feature bug fix notebook importantly work stellargraph demo virtual environment easily created different version python replace instance also testcompare python worktree use one pyenv local pyenv shell require manual activation deactivation wrapping use git worktrees parallel copy stellargraph python library share git metadata pyenv pyenvvirtualenv manage python virtual environment reduces overhead switching context make easier work collaborate efficiently fitting small fix gap around big feature
75,Lobsters,vcs,Git & VCS,GitHub is now free for teams,https://github.blog/2020-04-14-github-is-now-free-for-teams/,github free team,core github feature free everyone,happy announce making private repository unlimited collaborator available github account core github feature free everyone organization wanted use github private development subscribe one paid plan every developer earth access github price barrier mean team manage work together one place cicd project management code review package want everyone able ship great software platform developer love team need advanced feature like code owner enterprise feature like saml personalized support upgrade one paid plan also reducing price paid team plan per usermonth per usermonth effective immediately existing customer bill automatically reduced going forward learn faq compare plan pricing page
76,Lobsters,vcs,Git & VCS,Radicle Link: A peer-to-peer code collaboration protocol built on Git,https://radicle.xyz/radicle-link.html,radicle link peertopeer code collaboration protocol built git,work radicle link bitkeeper reverse engineer networking protocol git gossip well use git storage replication layer packfiles packfile protocol interactive git internals radiclelink radicle link pijul mercurial peertopeer network discovery secure scuttlebutt gossip work must replication validation update framework tracking discovery tracking track remote availability seed secure scuttlebutt offline localfirst development radiclecommunity,work radicle link article dive architecture design radicle peertopeer replication protocol power radicle discus decision build git ensure data availability replicate data across network behind every repository version control popular git created linus torvalds development linux kernel git marked rise distributed version control system developer realized centralized model svn cv nt scale well number contributor fact git created linus free bitkeeper license revoked linux kernel contributor tried reverse engineer networking protocol git brought distributed version control forefront changed way software developed today code collaboration platform forge started building top git introduced search discovery canonicity social collaboration issue code review gitbased workflow albeit always following distributed model git designed radicle designed provide functionality retaining git peertopeer nature building made distributed version control powerful first place git gossip well earliest version radicle adopted generalized approach tailored replicating collaboration artifact source code discovered illsuited demand realworld code collaboration hand current iteration specifically designed use case outstanding difference decision use git storage replication layer instead decentralized storage network ipfs experimentation decentralized storage realized replicating git repos storage layer nt permit use packfiles one key protocol make git useable scale essentially approach would make source code secondclass making impractical store repository large history reason simple packfile protocol interactive mean data transferred two party determine exactly need sent wire server put together packfile fly sending downstream incredibly efficient approach nt compatible simple file storage protocol ipfs operate premise content usually static unlike active code repository constantly updated dumb protocol simple bit inefficient ca nt handle writing data client server smart protocol common method transferring data requires process remote end intelligent read local data figure client need generate custom packfile git internals order keep git efficiency come data replication offering global decentralized repository storage chose design radicle peertopeer networking layer top git smart transfer protocol radicle would take care discovering peer offloading actual data transfer git radiclelink radicle link peertopeer protocol generic distributed version control backend aim general enough used top system pijul mercurial though initial implementation focused supporting git radicle link extends git peertopeer network discovery taking inspiration secure scuttlebutt peertopeer protocol social networking data disseminated via process called gossip participant network share spread data interested keeping redundant copy locally sharing delta peer radicle replicate data across connected repository according social graph contributor maintainer enabling source code changesets disseminated according use value peer interested certain project available project made network work repository base unit replication radicle publish repository network must first initialized project project combine source code issue proposed change single umbrella carry unique shareable peertopeer identifier entirety project data metadata including social artefact comment stored within repository create project owner repository defines project identity background projectjson file created predetermined disjoint branch repository convention radid file contains important metadata project name list maintainer well related link owner repository thus becomes founder project sign initial version project metadata file projectjson private key digest initial version becomes project id addition repository radicle project includes identity maintainer peer designated right project identity initially maintainer founder adding maintainer project metadata additional layer trust introduced around project update project metadata must signed quorum maintainer providing cryptographically secure way manage project state metadata example case transferring ownership history metadata file backed underlying dvcs verified upon replication ensuring wast tampered replication validation ensure data integrity authenticity peertopeer network adopt algorithm similar root file update process update framework tuf process peer fetch verify project metadata replicating latest changesets revision important since effectively allows data served peer secure manner physical location project data fetched becomes irrelevant user tracking discovery project published network specific repository source tree becomes identifiable maintainer tree allows repository addressed shareable url resolved physical location network purpose replication url following form rad projectid maintainerid peer decide data replicate tracking project tracking project signal interest mean impliestracking maintainer therefore replicating data within social graph context project maintainer repository may choose track repository owner called remote git terminology named reference remote repository remote repository found track remote tracking repository shall also transitively track configurable n degree availability improve data availability participant network choose act seed similar concept pub secure scuttlebutt seed alwayson node automatically track discovered project thereby increasing availability project network since seed may track large number repository given project replicating project seed greatly increase connectedness tracking graph tracking seed also increase number path leading back original upstream ensuring contribution flow back project maintainer even come participant within set tracked repository maintainer offline localfirst introduction hosted platform came new enhanced workflow like pull request issue tracking code review workflow unique nongit native still tied source code rich user interface feature result defined common developer experience making collaboration social interaction captured issue code review discussion important source code however also lockedin developer platform host workflow artifact lost access github account access source code would nt access issue review pull request even worse access valuable conversation could completely lost radicle central server unnecessary ensuring discoverability availability changesets social artifact addition returning fully distributed model enables complete offline experience source code available offline everything else radicle built provide convenient collaboration experience without intermediary vendor lockin git nexus replication build strength decentralized nature issue pull request comment review locally give developer tool manage design workflow see fit existing open source protocol instead platform radicle give developer freedom collaborate without reliance third party follow development radicle link development category radiclecommunity forum sign mailing list
77,Lobsters,vcs,Git & VCS,DragonFly BSD Source Code Full History,https://www.dragonflybsd.org/docs/developer/dfly_source_full_history/,dragonfly bsd source code full history,dragonfly bsd source code full history git repository leaf github obtain grafted history gitreplace first commit readme blame example leaf grafted history created svn git note graft commit create history repository graft commit graft history dragonfly bsd repository reference,dragonfly bsd source code full history author aaron li current dragonfly bsd git repository code history since fork freebsd history fork get full code history picked freebsd code history dragonfly bsd fork commit separate git repository grafted official dragonfly bsd code repository see detail pushed grafted history dragonfly bsd repository leaf github easier use others obtain grafted history get grafted history dragonfly bsd repository git remote add aly http githubcomliweitianuxdragonflybsdgit git fetch aly refsreplace refsreplace done prefer repository leaf server use git remote add aly git leafdragonflybsdorgalydragonflygit extends dragonfly bsd source code history commits freebsd epoch freebsd source method employed gitreplace dragonfly bsd first commit replaced historical commits freebsd source repository fact first commit really get modified interpreted differently git commits dragonfly bsd repository remain intact ie hash nt change regard grafted history separate branch use repository usual use grafted history example git log oneline wc l would without grafted history git blame readme sascha wildner top level dragonfly source directory sascha wildner jkh copyright information please see file copyright jkh directory additional copyright information also exists jkh source tree please see specific source directory jkh information jkh jkh makefile directory support number target jeroen ruigrokasmodai building component dragonfly source tree sascha wildner commonly used buildworld installworld rebuild sascha wildner install everything dragonfly system source tree sascha wildner except kernel kernelmodules content etc alex buildkernel installkernel target build install alex kernel module see please see top alex makefile directory information alex standard build target compiletime flag alex jeroen ruigrokasmodai building kernel somewhat involved process documentation jeroen ruigrokasmodai found matthias schmidt http wwwdragonflybsdorgdocshandbook sascha wildner also see build config man page jeroen ruigrokasmodai alex note want build install kernel bmah buildkernel installkernel target might need build sascha wildner world information available dragonfly handbook jkh aaron li kernel configuration file reside sysconfig subdirectory aaron li default kernel configuration used aaron li release build default bit vkernel kernel aaron li configuration file file contains entry possible aaron li device commonly used meant general aaron li reference actual kernel configuration file kernel built aaron li would nt even run also see config man page jkh jkh jkh source roadmap jkh bmah bin systemuser command jkh jkh contrib package contributed party jkh alex crypto cryptography stuff see cryptoreadme jkh aaron li doc documentation dragonfly bsd aaron li bmah etc template file etc jkh jkh game amusement jkh jkh gnu various command library gnu public license jkh please see gnucopying information jkh jkh include system include file jkh jkh lib system library jkh jkh libexec system daemon jkh jeroen ruigrokasmodai nrelease framework building live cd image jeroen ruigrokasmodai aaron li initrd build system statically linked rescue utility aaron li initial ramdisk creation aaron li jkh sbin system command jkh jkh share shared resource jkh jkh sys kernel source jkh jeroen ruigrokasmodai test system test jeroen ruigrokasmodai jkh tool utility regression testing miscellaneous task jkh jkh usrbin user command jkh jkh usrsbin system administration command yes see detailed change made see also readme blame example leaf grafted history created dragonfly bsd forked freebsd following commit branch date jun author hmp log mfc rev url svn git note dragonfly bsd git repository converted cv however perfect example many file renamesmoves properly tracked cv keyword freebsd expanded freebsd git repository therefore dragonfly bsd source code first commit exact copy freebsd code fork commit extra graft commit required concatenate two end create history repository git clone branch http githubcomfreebsdfreebsd cd git reset hard fork commit git init bare dragonflybsdhistorygit git push dragonflybsdhistorygit master cd git clone dragonflybsdhistorygit git clone http githubcomdragonflybsddragonflybsd dragonflybsd cd dragonflybsd firstcommit git revlist reverse head head n git checkout firstcommit cd dragonflybsdhistory rm rf cp dragonflybsd git config diffrenamelimit git add git commit create graft commit see also graft commit graft history dragonfly bsd repository cd dragonflybsd git remote add history dragonflybsdhistorygit git fetch history graftcommit git revparse verify historymaster firstcommit git revlist reverse head head n git replace firstcommit graftcommit reference
78,Lobsters,vcs,Git & VCS,Why my commit messages for configuration files describe my changes,https://utcc.utoronto.ca/~cks/space/blog/sysadmin/SysadminCommitMsgWhat,commit message configuration file describe change,cks local style writing logins worklog system,year wound adopting particular somewhat unusual style commit message many change system file like etcgroup thing like dns dhcp control file configuration file unusual thing commit message nt say change made say change abstract instance change etcgroup might say added x z group fred part text cks local style writing logins surface strange changed right diff putting commit message appears redundant feel somewhat like putting add x together comment code however quite true diff change commit message intended change go well two thing nt always go well happens explicit description intent important course programmer problem sysadmin sometimes programmer wound feeling sysadmins prone problem better placed able deal commit message bad side many mistake file deal perfectly valid functional result intended generally nt sort test programmer would catch mistake good side many change small enough intended described high detail short commit message way case many code change generally intention also appear worklog system commit message save finding relevant worklog since generally commit right looking diff still screen writing diff show may help actively notice error p nt help many control configuration file rather le readable well formatted code often give diffs actually changed harder see code change adding login two group diff etcgroup lot noise make hard see important signal
81,Lobsters,vcs,Git & VCS,February service disruptions post-incident analysis,https://github.blog/2020-03-26-february-service-disruptions-post-incident-analysis/,february service disruption postincident analysis,service interruption background mysql data lived single database cluster constantly scaling database handle additional load timeline february utc lasting minute february utc lasting minute february utc lasting two hour minute february utc lasting four hour minute learned observability performance improvement optimizing stability next step vitess additional technical organizational initiative summary,late february github experienced multiple service interruption resulted degraded service total eight hour minute four distinct event unexpected variation database load coupled unintended configuration issue introduced part ongoing scaling improvement led resource contention database cluster sincerely apologize negative impact interruption may caused know place trust github important make top priority maintain trust platform highly durable available committed applying learned incident avoid disruption moving forward background originally mysql data lived single database cluster time grew larger busier split functionally grouped set table new cluster created new cluster new feature however much core dataset still resides within original cluster constantly scaling database handle additional load driven new user new product case unexpected variance database load contributed cluster degradation unavailability timeline february utc lasting minute time unexpectedly resourceintensive query began running database cluster intent run load read replica pool much lower frequency inadvertently sent traffic master cluster increasing pressure host beyond surplus capacity pressure overloaded proxysql responsible connection pooling resulting inability consistently perform query february utc lasting minute two day later part planned master database promotion saw unexpectedly high load triggered similar proxysql failure intent maintenance give team visibility issue might experience master momentarily readonly initial load spike able use remediation step previous incident restore system working state suspended maintenance event type investigated system failed february utc lasting two hour minute third incident involving proxysql active database connection crossed critical threshold changed behavior new infrastructure connection remained critical threshold remediation system fell back degraded state time githubcom service affected stalled writes database cluster result previous investigation understood file descriptor limit proxysql node capped level significantly lower intended insufficient maintain throughput high load level specifically systemlevel limit process manager silently reduced limitnofile setting remediation also encountered race condition process manager service configuration slowed ability change file limit february utc lasting four hour minute application logic change database query pattern rapidly increased load master database cluster spike slowed cluster enough affect availability dependent service learned observability performance improvement used event identify operational readiness observability improvement around need operate proxysql made change allow u quickly detect address issue like future remediating issue straightforward tracked interaction system clear u need better system integration performance testing realistic load level area fully deploying production also devoting energy understanding performance characteristic proxysql scale trickledown effect service affect user optimizing stability decided freeze production deployment three day address shortterm hotspotting result final incident february helped u stabilize githubcom increased confidence service reliability gave u breathing room plan next step thoughtfully also helped identify longterm investment make mitigate underlying scalability issue next step shipped sizable chunk data partitioning effort worked past six month day incident one significant mysql table domain ability table given every authentication request github us table domain way deliberate performed work fulfill requirement zero downtime minimal userimpact accomplish removed join query ability table table database built new cluster move table data copied data new cluster using vitess vertical replication feature keeping copied data uptodate realtime moved read new cluster moved writes new cluster using vitess proxy layer vtgate step one two took month worth effort step three five completed four hour change reduced load cluster master percent query per second percent following graph show snapshot query performance march prior partitioning march partitioning query per second peaked immediately prior partitioning decreased peak queriessecond additional technical organizational initiative audit lower read leader database auditing read master database intent lower put unnecessary load master database reading replica data exacerbate capacity issue service reliability adding load critical database github auditing changing read replica database increase headroom sql database reduce risk overloaded production load varies widen usage feature flag requiring feature flag code update allows u disable problematic code dynamically dramatically speed recovery active incident complete inflight functional partitioning completing inflight functional partitioning database cluster working moving table comprise functional domain cluster last year close finishing work significant number table schema domain shipping improvement immediately reduce writes cluster percent storage requirement percent expect see another post coming month detail performance benefit work refine dashboard improving visibility effect deploys database cluster current deployment dashboard noisy making difficult determine deploy safety interview engineer involved incident noted cognitive load required process noisy dashboard predict refined dashboard allow u spot problem deploys earlier process invest additional data partitioning opportunity identified additional schema domain split cluster protect u request storage constraint shard scale begin sharding largest schema set functional partitioning buy u time sufficient solution scaling need plan use sharding tenant partitioning move u vertical scaling horizontal scaling enabling u expand capacity much easily grow summary know depend platform reliable immediate change made longterm plan progress continue use learned make github better every day
82,Lobsters,vcs,Git & VCS,How to Scope Down PRs,https://www.netlify.com/blog/2020/03/31/how-to-scope-down-prs/,scope pr,scope small pr easier reviewer small pr easier test break project clear expectation output branching label feature flag faster deploys ruby gem called flipper number concern single responsibility principle tracking left v code extension working piece wrapping twitter community,one valuable skill one posse developer learn scope work manageable pull request pr emphasis something seemingly trivial size many reason pertinent easier reviewer easier test easier iterate dive why move hows process use scope pr well team assist scope small pr easier reviewer someone read make sense code order evaluate much easier get smaller focused think reviewer standpoint job make sure whatever code reading make process best state possible smaller amount code lower cognitive load impose envision moving part potential side effect higher number change conversation also requires reviewer much work communicator take two skill actual code review ability communicate howwhy change need made reviewer sometimes handed huge chunk code would like take mean break concept apart explain difference talk iteration plan ok lot mental overhead everyone involved particularly potentially damaging team communication go poorly smaller pr keep conversation focused reduce need communication gymnastics small pr easier test large pr mean potential side effect moving part becomes opaque see altered le moving part clear testing strategy also much coverage test offer instance enormous pr test still spend good amount time matching content pr type test involved see coverage adequate fewer moving part also make clear else codebase affected bigger pr potential surprise might easier iterate work need adjusted revisited accepted much le investment personally term developer time chance went wrong direction long time without course correction increase size pr investment personal might attached work point le willing take feedback investment business concern developer time expensive went head week communicate work used helpful company bottom line ability ship product create smaller piece work adjust communicate quickly even thing outside project change shifting priority teammate also trust see subsequent work soon might amazed much quickly willing review work get break project number tool disposal scoping work may might available though let go clear expectation output one le tool people company project manager role different product manager typically effective helping break ticket manageable unit estimating size time work team duty fall engineer manager product manager find person accustomed duty one charge suggestion incredibly difficult estimate engineering work thing think take minute turn hour day vice versa start end output expect see ticket walk backwards part codebase affected change newer project ask someone seniority team help track area need updated possible break disparate task even dependent one another usually find way break step step forth using branching model outlined communicate reviewer clearly know expect many piece work one giant finished product branching branching model communicate working iteration work branch typically branch named semantically project question featurename refactorname sometimes versioning well nice thing using branch like frequent work one place one expecting everything done one go branching require coordination people team know work correlated certain piece merge work complete ton work need done specific branch likely need end end test validate merge break anything label typically team use branching label scope work effective used together instance maybe working one part particular feature part roadmap coworker working another piece use label different branch clearly see working make sure change tracked together mean everyone work incrementally insight work done globally project well small part feature flag also possible use feature flag gate check merge code slowly test production worked truliazillow would use model frequently cooky one could set browser stakeholder could check could also run splittesting work conflict long ever hit primetime would roll thing prod slowly monitoring work partnership team went allowed u coordinated especially important big release lot moving part made good use feature flag netlify recent release faster deploys specifically use ruby gem called flipper like testing production process allows u roll day one production make good use telemetry monitor well change functioning number concern effective pr see one love reviewer small focused scope work smallest number concern think work term many thing changing try limit number much great post single responsibility principle outline every module class responsibility single part functionality applied pull request well might seem first critical change made find time branching model necessary communicate people within pr work well furthermore pr possible one goal next iteration build word refactoring old code introducing new test much harder reviewer split two iterative pr easier ensure functionality change prior modifying implementation tracking left going leave unfinished work helpful keep track left stakeholder like teammate pm lot team make use project board also help go going project group example github board add issue well note tool like github jira help automation well even tracking thing within board useful coworkersreviewers todo list list change pr well help immediately see scope pr without check reference help speed execution mentioned also make use do sometimes track left v code extension go highlight comment also override customize team different convention way track work developer level truly whole project management discipline employ many different tool technique covering everything scope article hopefully help coding working piece one tricky skill might develop level get better scoping work find time waiting review smaller piece time fact think assume one large pr effective spend time working submitting pr unfortunately often come back haunt get locked review get better breaking large project also start learn cut work many piece two concurrent piece work reliant perhaps personalization project change need made within navigation well update data coming sidebar may similar piece figuring ahead time break apart thing cause fewer side effect nav sidebar potentially going break one another waiting nav review get cracking sidebar piece simplistic example illustrates plan situation ahead actual work make use productive hour possible wrapping hopefully help team effective work problem quicker review code effectively add conversation let know twitter community
83,Lobsters,vcs,Git & VCS,Mastering the git rebase workflow (2018),https://www.youtube.com/watch?v=UWwazJ_46s0,mastering git rebase workflow,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature git rebase youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature git rebase youtube
84,Lobsters,vcs,Git & VCS,GitLab CI/CD on Google Kubernetes Engine in 15 minutes or less,https://about.gitlab.com/blog/2020/03/27/gitlab-ci-on-google-kubernetes-engine/,gitlab cicd google kubernetes engine minute le,gitlab selfmanaged gitlab integration google kubernetes engine gke setup instruction working kubernetes cluster prerequisite google omniauth provider apis enabled get started step step step step apis mentioned prerequisite step step next step gitlab runner kubernetes executor doc resource agãª barros unsplash,use gitlab selfmanaged getting started gitlab ci using gitlab integration google kubernetes engine gke accomplished simple step several blog post documentation provide detailed setup instruction working kubernetes cluster post highlight essential step get going gitlab cicd le minute using gitlab gke integration one click install gitlab runner gke immediately start running ci pipeline runner lightweight agent execute ci job gitlab cicd pipeline prerequisite following prerequisities need configured order use built gitlab gke integration gitlab instance installed configured user credential google omniauth provider installed configured gitlab instance google cloud project following apis enabled google kubernetes engine api cloud resource manager api cloud billing api get started step going add shared runner instance level first administrator click icon left menu select step click green kubernetes button step screen kubernetes cluster come click icon right step give cluster name select cloud platform linked gcp account project populated menu either google integration configured correctly project missing needed permission check set apis mentioned prerequisite enabled choose zone run cluster purpose running ci number node cluster going many simultaneous job run given time using builtin gitlab google kubernetes integration set maximum four node set three click kubernetes take minute cluster created happening see screen like leave screen come back going area kubernetes cluster name step cluster created need install two application first install clicking button next take moment much quicker creating cluster initially step helm tiller installed application installed tutorial need install application click install button next gitlab runner go pretty quickly done button change button set shared runner gitlab instance run first ci pipeline next step running gitlab cicd gke build run first gitlab cicd pipeline link resource get started planning manage fleet gitlab runner may also thinking best set autoscaling gitlab runner set first runner gke review gitlab runner kubernetes executor doc additional detail gitlab runner us kubernetes run build kubernetes cluster resource cover image agãª barros unsplash
85,Lobsters,vcs,Git & VCS,How To Make Life Easier When Using Git,https://www.smashingmagazine.com/2020/03/make-life-easier-when-using-git/,make life easier using git,author finding old sock sort branch date find branch lost git previous branch show information branch one file make status easier read tweet see everything happened git reflog staged file never commited git team essential good communication talk use tool line ending autocollapse anything reduce stress cognitive load code reviewing going help improve quality code review reduce time take use git blame often little thing like git git blame missing file commit message template git automation git hook enforce branch naming strategy ease team development workflow git hook manual automation git bisect taking automating scientific method debugging scientific method every commit past tweet reading git explorer dang git pro git git doc thoughtbot git hook demystifying git internals git beginner advanced little thing like git atlassian advanced git tutorial github git cheatsheet git shortcut,authorshane hudson independent frontend developer uk worked variety project ranging national online healthcare triage service shane need know tree dangling blob use git every day feel like juggling act trick tip help make life bit easiergit released almost year ago time gone underdog unbeaten champion git init often first command run new project undoubtedly important tool many u use daily basis yet often seen magic brilliant scarythere lot written getting started git understanding git work hood technique better branching strategy article specifically target stuff make life better small wayfinding old socksthe whole point git able save work switch context something else could backup code future able make progress different feature asynchronously would awful throw bug would equally shame file named like notoriously become impossible messwe know life easier extent update neatly compartmentalised git branch shared team member however sure agree often time context switched go back impossible find right branch ever committed maybe stashed maybe committed work wrong branch everything going awful awful job theresort branch datemy first attempt figuring find lost work short blog post titled find branch lost git sort branch date output every single branch got locally beginning one recently committed fancy surprising helped many time sort branch commit date git branch sortcommitterdate previous branchwhat commit switched branch wanted get back could probably work frorm branch list anyway idea branch name branch detached head specific commitit turn way ease checkout previous branch git checkout act shorthand syntax use going back given amount checkout example checked branch featurethinga featurethingb bugfixthingc use get back featurethinga checkout branch n number checkout ago git checkout n show information branchesif looking way see last commit branch use option flag v show list branch last commit id message twice vv also show upstream remote branch linked list branch along commit id commit message remote git branch vv one filewe done somehow single file left wrong branch need redo work copy paste two branch nope thankfully way itit bit odd especially given git checkout go back previous branch use branch name checkout let specify specific file looking something would guess really handy know itgit checkout featuremyotherbranch thefiletxt make status easier readin tweet tomasz łakomy mentioned reducing output git status using sb flag said using git year nobody told strictly finding lost file case simplifying output could make easier see changedmost git command flag like always worth looking use customise workflow usually would use git status check file changed git status output branch master change staged commit use git add file update committed use git checkout file discard change working directory modified readmemd untracked file use git add file include committed anotherfile mynewfile using flag sb shorten output git status sb output master readmemd anotherfile mynewfile see everything happenedthere time something go completely wrong accidentally discarding staged change commiting git log enough get back last none tip helpful git reflogeverything git change head point pushpullbranchcheckoutcommit update reference log essentially act history everything done matter branch contrast git log everything changed time particular branchwith commit id able git show see change definitely one want use git checkout even select specific file shown see reference log activity git reflog look head given point reflog git show head checkout head get back point git checkout head staged file never commitedin extreme case git reflog unable help get file back eg ran hard reset staged file one trick sleeve every change stored gitobjects active project would full file impossible decipher however git command called git fsck used verify integrity check corrupt file within repository able use command lostfound flag find file related commit file called dangling blob also find dangling tree dangling commits use dangling want lostfound advantage extract appropriate file folder gitlostfound active project likely lot dangling file without even knowing git garbage cleanup command run regularly get rid themso using lostfound able list file see timedate made make lot easier see file looking note individual file still individual file use checkout file unrecognisable name hash need copy file want find change staged attached git tree git fsck lostfound see date file l lah gitlostfoundother copy relevant file want example cp indexhtml git teamusing git single user one thing team people usually mix background technology git become blessing curse powerful sharing codebase getting code review seeing progress whole team time everyone need shared understanding team intends use whether branch naming convention structure commit message exactly file committed essential good communication talk use toolit always important consider easy onboard new developer would happen began committing without knowing agreed principle convention end world would likely cause confusion take time get thing back agreed approachthis section tip trick getting repository know convention automate declare much possible ideal case new contributor would almost straight away working way rest teamsame line endingsby default window us do line ending rn crlf mac linux use unix line ending n lf really old version mac used use r cr team grows becomes likely mismatched line ending become problem usually inconvenience probably break code make commits pull request show kind irrelevant change quite often people ignore quite hassle go changethere solution get everyone team set local configs automatic line ending let configure lineendings individual basis git config coreeol lf git config coreautocrlf input course would mean making sure new contributor easy forget tell would whole team well way git work check config file repository gitconfig check user systemwide config gitconfig check global config etcgitconfig useful time turn none set repository add repositoryspecific configuration carry member teamthere however file get committed repository called gitattributes one default make new file save gitattributes file used setting attribute per file example could make git diff use exif data image file instead trying diff binary file case use wildcard make setting work file essentially acting teamwide config file adding gitattributes file make file checked using unix line ending letting anyone team edit file using local operating system default line ending textauto autocollapseit wellknown solution add packagemanaged file nodemodules gitignore file order keep compiled file locally add repository however sometimes file want check want see time pull requestfor situation least github add path annotated linguistgenerated gitattributes file check file root repository collapse file pull request still see changed without full content changeanything reduce stress cognitive load code reviewing going help improve quality code review reduce time takesfor example unity project would want checkin asset file actually care add attribute file like asset linguistgenerated use git blame oftenthis tip harry robert suggested post git little thing like git say alias git blame git praise feel like positive action seems like semantics renaming something change whenever seen team speak using git blame feature everyone tense certainly natural reaction think negative really powerful feature knowing last touched code looking blame even praise simply ask right person question save time figuring talk tonot think git blame good thing call praise want think communication tool help entire team reduce confusion prevent wasting time figuring know ides visual studio include feature annotation without negative connotation function instantly see last modified therefore talk git blame missing filerecently saw developer team trying figure removed file removed seems like useful time git blame work based line file help stuff however solution old trusty git log look log argument see long list change current branch add commit id see log specific commit use used target specific file get log file even one longer exists using specific file git log find log file deleted past commits git log missingfiletxt commit message templateone thing eventually get mentioned within team commit message could improved maybe could reference project management tool id bug commit fix maybe want encourage text instead empty messagethis one need run manually time someone clone repository git config file committed repository handy shared file repository named anything want act commit message template set commit template file given need run contributor repository git config committemplate templatefile git automationgit powerful automation immediately obvious consider know past activity within repository plus contributor lot information usefulgit hooksquite often find within team want repeated task work could ensuring test code linters pas let push using prepush hook enforce branch naming strategy using precommit hook smashing magazine konstantinos leimonis wrote article titled ease team development workflow git hook improving workflow using git hooksmanual automationone key automation feature git git bisect something many people heard probably used purpose work git tree history commits work bug introduced simplest way manually run git bisect start give good bad commit id git bisect goodor git bisect bad committhis powerful seems first iterate linearly git log could manually would repetitive process instead us binary search efficient way go commits least amount step begin bisect git bisect start tell git commit bug git bisect good tell git commit bug git bisect bad test bug could running script journey website unit test etc current commit bug git bisect bad current commit bug git bisect good repeat find first commit bug exit bisect either go back original branch git bisect reset stick current head git bisect reset head exit bisect specific commit git bisect reset commit id taking automating scientific methodin talk debugging scientific method stuart halloway explained git bisect functionality could used automate debugging focus clojure need know language find talk interesting useful git bisect actually partial automation scientific method write little program test something git bounce back fourth cutting world half time find boundary test change stuart hallowayat first git bisect feel interesting quite cool end useful stuart talk go long way showing actually counterproductive debug way u usually instead focus empirical fact whether test pass run commits since working version reduce feeling around dark kind debugging used toso automate git bisect pas script run appropriate commit previously said manually run script step bisect pas command run automatically run script step could script write specifically debug one particular issue could test unit functional integration type test could used could write test ensure regression happen use test previous commits begin bisect git bisect start tell git commit bug git bisect good tell git commit bug git bisect bad tell git run specific script commit example could run specific script git bisect run testbug use test runner git bisect run jest every commit pastone strength git bisect efficient use binary search iterate history nonlinear way however sometimes linear crawl history exactly need could write script read git log loop commit executing code familiar command git rebasekamran ahmed wrote tweet using rebase run test suite every commit see commit fails test already looked using git bisect efficiently generally useful usecase could usecases running script given set commits room creative maybe want way generate report code changed time maybe show history test parsing git log enough perhaps least directly useful trick article interesting raise possibility thing maybe realise possible run every commit current given commit id git rebase exec myscript readingit impossible scratch surface git article would end book article chosen little trick could new even someone using git yearsthere much git foundation complex scripting precise configuration integrating terminal resource look piqued interest git explorerthis interactive website make easy figure achieve trying dodang git everyone point get lost git know solve issue give solution lot common issue people havepro gitit book yet available online free pro git invaluable resource understanding gitgit docsit become meme tell developer read manual seriously git doc website man git example man gitcommit go detail internals git really usefulthoughtbotthe git category thoughtbot useful tip using gitgit hooksthe git hook website resource idea available git hooksdemystifying git internalstrees term seem bit odd article explains fundamental git work internally useful shown already use git full potentialgit beginner advancedmike riethmuller wrote useful article ideal beginner gitlittle thing like gitit article harry robert made realise much git learned enough move code aroundatlassian advanced git tutorialsthese tutorial go detail many topic mentioned articlegithub git cheatsheetit always handy good cheatsheet tool like gitgit shortcutsthis article go depth various flag git command recommends lot alias use ra il
86,Lobsters,vcs,Git & VCS,Setting Up Git Identities,https://www.micah.soy/posts/setting-up-git-identities/,setting git identity,first remove existing global identity require config exist order make commits identity generate gpg key export public key set global git config identity create git alias specify git identity reference,working many project across multiple identity difficult manage procedure leveraging git alias set identity project level project support gpgbased commit signing first remove existing global identity git config global unset username git config global unset useremail git config global unset usersigningkey require config exist order make commits without global user name user email git would use system hostname username make commits tell git throw error instead requiring specify identity every new project git config global useruseconfigonly true identity generate gpg key generate gpg publicprivate key pair choose rsa rsa default key type choose key size bit set key expire unless want repeat step periodically finally set name email address comment left blank key pair generated need export public key export public key identity export public key gpg listsecretkeys keyidformat long user examplecom user examplecom email address identity created output sec id format serial copy serial number run command output public key gpg armor export serial copy public key block add github gitlab setting public key github gitlab cryptographically verify commits placing verified label next set global git config identity need create identity git global config example git config global usergitlabname name git config global usergitlabemail gitlab examplecom git config global usergitlabsigningkey git config global usergithubname name git config global usergithubemail github examplecom git config global usergithubsigningkey git config global name git config global examplecom git config global git config global name git config global examplecom git config global create git alias setting git alias give u new git command use set identity project level really script set particular global identity local config git config global aliasidentity git config username git config user git config useremail git config user git config usersigningkey git config user specify git identity project specify git identity use cd pathtogitrepo git config useremail response git config usergithubemail github examplecom git identity github git config useremail github examplecom whenever start new project work existing project confident correct name email address gpg signing key used reference
87,Lobsters,vcs,Git & VCS,How different are different diff algorithms in Git?,https://link.springer.com/article/10.1007%2Fs10664-019-09772-z,different different diff algorithm git,myers histogram,diff automatic comparison program used find disagreement older newer version file storage including insertion deletion document renaming document movement etc diff utility extract code change line line one file compared file report list operation diff program fundamentally solved using longest common subsequence lcs problem initiated hunt macilroy since first run unix operating system diff command widely used many studiesthe git diff command numerous option application code change extraction footnote including extracting change related index commit path filesystem original content object even quantifying number change object relatively source researcher practitioner able use variation available option depending need extracting data mention diff algorithm essence diff algorithm contrasting two sequence receive insight transformation first second series operation using ordered deletion insertion subsequence flagged change delete insert concur scope diff algorithm selected option diffalgorithm algorithm git four diff algorithm namely myers minimal patience histogram utilized obtain difference two file located two different commits minimal histogram algorithm improved version myers patience respectively algorithm procedure finding item presented original document absent second one vice versa consequence different output may produced due similarity basic idea minimal histogram algorithm precursor paper contrasted two diff algorithm myers histogram myersmyers algorithm developed myers git diff command algorithm used default operation algorithm trace two primary identical sequence recursively least edited script since myers notice sequence actually equal comparison prior posterior subsequence executed repetitively entire remaining sequence figure indicates several code change first second version file guicommonelementsjava taken openmicroscopy projectfootnote seen figure code line first version transformed newer version line figure show myers algorithm generates diff output code change fig first myers scan line code sequentially first line version file find line pair match exact line two version file found algorithm line considered unmodified line eg pair line version fig algorithm scanning extract pair matched line remaining line code repetitively depicted fig c fig see unmodified line found myers algorithm pair line version pair line version version unpaired line version subsequently considered deleted line unpaired line version counted added line result myers algorithm produce paired unpaired line first second version file sequence illustrated fig fig set change older file newer filefig myers identifies diffthe minimal algorithm extended version myers operation algorithm finding change resulted comparison two object resembling myers extra attempt made keep patch size minimal possiblefootnote result diff list created using algorithm often identical myers apply minimal algorithm code fig diff output shown fig wella major limitation myers algorithm frequently catch blank line parenthesis conforms line match instead catching line unique ie line occur exactly least occurrence version code function declaration line assignment consequently myers sometimes produce unclear diff list describe actual code change position changed code code replace often written distantly inappropriate line located separately line represent modification additionally occasionally conflict identification changed code example code line fig fact line code derived unique line unmodified using myers algorithm unique line detected changed code even though show alteration make possible cause misidentification code changehistogramthe histogram algorithm enhanced version patience built bram cohen renowned bittorrent developerfootnote support lowoccurrence common element applied improve efficiency histogram initially built jgitfootnote introduced git patience mark important line within text focusing line smallest number occurrence essential diff automated procedure lcsbased problem well us different technique patience notice longest common subsequence marked line attained line emerge uniquely specific range line also written precisely similar file implies line single bracket new line usually disregarded otherwise patience retains distinctive line function definitionthe histogram strategy work similarly patience developing histogram appearance every line first version file every element second version subsequently shown match first sequence orderly way find existence element count occurrence element exist presence le first sequence expected potential lcs screening finished second sequence lowest occurrence lcs marked separator two section resulting partition ie section represents area lcs section represents region lcs executed repetitively using process beginning algorithm mean histogram performs similarly patience unique common element exists file otherwise selects element least occurrence comparison two diff algorithm ie myers patience histogram nevertheless declared much quickerfootnote easily understanding histogram generates diff output fig describe procedure fig first histogram scan element first version file count appearance line every line second version extracted match element first version sequentially find exact line count occurrence algorithm found line version match presence unique ie occurs exactly lowest occurrence considered potential lcs marked separator shown fig line version marked first separator two subsection created slicing area separator within subsection algorithm find unique pairing line unique scanning entire document unique algorithm consider subsection process applied subsection histogram compare line upper section version line version line version lower section due least appearance line upper section version thus line expected second separator lower section scanning process reexecuted beginning illustrated fig process yield new separator ie line version line version two new subsection ie line version line version upper section line version line version lower section process subsequently executed repetitively two new subsection resulting partition figure show final step comparing element version potential lcs marked separator expected unmodified line line considered deleted line version added line version result diff output generated described fig fig histogram identifies difffig output produced myers histogramin contrast myers histogram algorithm provides diff result easier software archive miner understand histogram clearly separate changed code line algorithm split changed line code trying match unique line two version file thus reduce occurrence conflict ie line unchanged code identified changed code diff list code written duplicate deleted inserted code example extract difference two version file fig using histogram git diff command obtain output depicted fig unique line code line fig detected changed code due role benchmark match line line identified changed code case myers influence sequence changed code additional block condition written line placed block code clearly understood new code inserted statement assignment code code line used one unique line match also obvious code line replaced one line code line closing curly brace line omitted file three new line code line added end code fig
88,Lobsters,vcs,Git & VCS,Git explorer,https://gitexplorer.com/,git explorer,,need enable javascript run app
89,Lobsters,vcs,Git & VCS,So You Want Git for Data?,https://www.dolthub.com/blog/2020-03-06-so-you-want-git-for-data/,want git data,asking git github data google search result git data dolt dolthub mean git data could git data tim liquidataco data catalog http githubcomkaggle purchased google http githubcomdatadotworld http githubcomquiltdataquilt described reasoning hacker news post data versioning data discovery top http githubcomqriioqri qricloud http githubcomgitgit sqlite gitlfs data pipeline versioning http githubcompachydermpachyderm http githubcomiterativedvc versioned database http githubcomatticlabsnoms attic lab sold salesforce replicache dolt http githubcomliquidataincdolt dolt sql database market branch merges postgresql mysql dolthub nominal fee,people asking git github data thread stack exchange almost seven year old number three google search result git data git data practice many product come market relation git data theme dolt dolthub answer blog try unpack various product space offer answer git data mean mean git data git github cover many aspect software development life cycle say git data mean mean git mean data versioning part version control care care rollback diffs lineage ie changed branchmerge sharing change others mean contentaddressed version good distributed quality solution provides care esoteric version control feature git like staging area multiple remote thinking github want online data catalog really want thriving open data community akin open source community want able collaborate remotely asynchronously private data project want pull request ie integrated human review data change want able create issue referring certain change part data moreover mean data mean data file data table mean unstructured data like image text web page mean csv table json blob mean big data like time series log entry mean relational database relational care schema data vice versa mean data transformation like exist data pipeline application mind data machine learning ie labeled data data visualization report data software application see git data quickly get complicated let parse offering could git data make sense building could git data researching blog entry encountered number product relationship git data narrowed list nine apologize missed send email tim liquidataco follow product selected provide introduction product judge whether fit definition git data product fell three general category data catalog data pipeline versioning versioned database data catalog tagline home data science initial release april github http githubcomkaggle core tool open source kaggle started hosting machine learning competition contest runner post open dataset set term contest receives model submission winner contest receives cash prize kaggle purchased google continues operate standalone entity evolved social network sort data scientist continuing run contest also hosting public datasets modeling code form notebook interface beautiful thriving vibrant community kaggle boast public datasets public notebook kaggle closest thing vibrant open data community akin open source community datasets distributed csvs json datasets versioned sense older version still available kaggle tooling beyond data model discovery good way tagline cloudnative data catalog initial release march github http githubcomdatadotworld core tool open source dataworld online tool building data project part data project data hosting data hosted dataworld public focus higher level data dataworld create data project data documentation query insight etc collaborate share project people interface slick modern public data catalog pretty robust source government data created test project linked couple datasets point kind lost next instinct point download data dataworld seemed want platform company pretty new wellfunded expect tool continue evolve next year data distributed multiple format could locate versioned dataset activity link dataset page look like data versioning really priority dataworld tagline manage data like code initial release september github http githubcomquiltdataquilt first introduced quilt era would described quilt yum homebrew npm data could pull data package locally central repository data immutable versioned multiple version package existed central repository diff branchmerge last year quilt released open data portal aws described reasoning hacker news post launch seemed indicate shift data versioning data discovery top look used data packaging technology additional user abstraction layer user want nt used new version quilt beyond searching sehn see anywhere quilt say check quilt looking add rigor discovery data store tagline invited data party initial release february github http githubcomqriioqri qri data catalog built distributed web command line tool well desktop application get access publish datasets qricloud recently released browse datasets web qri structure data component including schema data also metadata like readme transform component particularly cool allowing code operates data versioned data travel one container cloned diffed qri really seems chasing git github data analogy pretty closely struggled whether put qri data catalog versioned database section blog settled data catalog section fundamentally qri database wrapper around filebased data format query language nt think handle multiple table dataset right distributed web fan small datasets share version check qri company fairly new expect future tagline fast scalable distributed revision control system initial release april github http githubcomgitgit mirror git github contain lot data committing csv json file even sqlite database file git data versioning distribution popular github advertises user making powerful network couple constraint file github bigger use gitlfs get around limitation lose finegrained diffs diffs csv json marginal utility git anyway data need sorted way commit get utility conflict resolution happens line level builtin concept schema despite constraint one could make convincing argument git github git github data however using git data right tool job like using hammer fasten screw data pipeline versioning tagline reproducible data science scale initial release may github http githubcompachydermpachyderm pachyderm data pipeline versioning tool pachyderm model data stored set contentaddressed file repository pipeline code also stored contentaddressed set code file pipeline code run data pachyderm model sort merge commit allowing versioning concept like branching lineage across data pipeline find pachyderm model extremely intriguing versioning perspective modeling data plus code merge commit clever produce useful insight type versioning useful many machine learning application often transforming image large text file different file using code instance making every image set dimension may want reuse modified file many different pipeline work set change something go awry want able debug changed cause issue running largescale data pipeline file like common machine learning pachyderm tagline git data model initial release may github http githubcomiterativedvc similar pachyderm dvc version data pipeline unlike pachyderm dvc execution engine dvc wrapper around git allows large file like gitlfs versioning code along data also come friendly pipeline hook like visualization reproduce command documentation machine learning focus dvc seems lighter weight communitydriven pachyderm pachyderm seems enterprise focused looking data pipeline versioning without adopt execution engine check dvc versioned database tagline versioned forkable syncable database initial release january github http githubcomatticlabsnoms noms open source database produced attic lab attic lab sold salesforce january open source project seen many update since aaron boodman founder ceo recently announced new project may may nomsbased called replicache dolt based noms includes modified noms code lot experience noms implement merkle dag allows database truly distributed like git core storage engine tested modified extensively surrounding utility like query language commandline exist little limited want use noms probably going build functionality top looking core technology fork sync data distributed way check tagline git data initial release august github http githubcomliquidataincdolt dolt take git data rather literally dolt implement git command line associated operation table row instead file data schema modified working set using sql want permanently store version working set make commit dolt produce cellwise diffs merges making data debugging version tractible effectively result git versioning sql database make dolt sql database market branch merges run dolt offline treating data schema like source code run dolt online like would postgresql mysql dolthub github dolt set dolthub remote push dolt repository convenient data discovery interface well pull request data review repository permissioned nt get random people writing repository dolthub host public data free private data nominal fee biased think want git data one product fit label dolt
90,Lobsters,vcs,Git & VCS,Self-hosting a tiny git remote,https://benjaminwil.info/weblog/self-hosted-git-remote/,selfhosting tiny git remote,gitea gogs sourcehut git remote create synced directory owncloud syncthing use ssh add new repository initialize git repository git server getting git server push repository clone repository caveat use ssh,plenty fullfeatured git forge software developer probably used github bitbucket gitlab point maybe familiar gitea gogs sourcehut software great git forge valuable feature save user time effort working project sometimes though need simple git remote sync simple project need issue tracker wikis continuous integration way manage patch coming multiple contributor use case set tiny git remote access create synced directory first problem need solving remote live chosen use simple synced directory nothing special directory another directory intend sync using dropboxlike file syncing software worry ever sync working directory discus later many way sync directory whether use hosted service like google drive use selfhosted solution like owncloud personally use syncthing run medium server living room syncs device whenever connected network directory sync simply called git life home directory asking use ssh right suggest skipping use ssh section article add new repository next problem get projectdirectory computer computer b short answer would synced want right way git directory start initialize git repository bare flag git init bare gitmyprojectgit bare flag mean git repository initialized cloned actually going working directory try change directory new repo git even warns cd gitmyprojectgit fatal operation must run work tree read using bare git repository way pro git book specifically see git server getting git server push repository ready push work far built home git repository want sync git made first bare git repository gitmyprojectgit take working directory add bare repository remote git remote add syncthing gitmyprojectgit ready push work branch case mybranch git push syncthing mybranch clone repository ready clone project another workstation need make sure synced directory available fully synced messiest part syncthing least synced directory may use different path different workstation clone nice manually set origin mindful pushing pulling tiny git remote git clone origin syncthing gitmyprojectgit forget like often always change name remote later using git remote rename git clone gitmyprojectgit myproject cd myproject git remote rename origin syncthing caveat tiny git remote work great small project intend share anyone think important highlight caveat syncing software fails server client risk losing work git remote risk losing work must use multiple git remote syncing software fail already cloned project multiple workstation may able recover said need conscious state syncing software want successfully use tiny remote use ssh reader rightly pointed setup complex caveat pulling workstation via ssh git remote add benjaminwil homebenjaminwilmyproject lucky static ip address already know really lucky domain name like benjaminwilinfo luck nothing know mean reason prefer using synced directory described article builtin redundancy syncthing make local copy latest change whenever workstation running syncthing network lazy often wiping secondary device setting ssh key primary device personally static ip address home way take care problem ventured path said also remote set access via ssh backup valuable
91,Lobsters,vcs,Git & VCS,Ignoring bulk change commits with git blame,https://www.moxio.com/blog/43/ignoring-bulk-change-commits-with-git-blame,ignoring bulk change commits git blame,new feature git offer putting change context git good commit message problem bulk change phpcsfixer phpcbf git rescue git downloads page summary release highlight,longstanding objection making bulk change code using automated tool eg conform given code style clutter output git blame git case anymore post start explaining value git blame commits style change bulk problematic already understand problem want solution directly skip new feature git offer putting change context characteristic feature legacy code often clear operates way original developer may left reassigned another project documentation virtually nonexistent remaining developer remember detail anymore example one day might stumble upon follow piece code php function describebottles int amount string return amount bottle cider wall despite artificial example code already raise question default amount bottle described describe bottle cider bottle beer would customary alternative right still choice probably made good reason nt know reason would good reasoning behind choice documented using comment however happens legacy code case still find motivation behind current state code version control system git use version control right may helpful write good commit message focus rather might able distill context need find commit made given change git blame command git praise prefer positive mindset helpful show line file commit made last change line along timestamp author git blame describebottlesphp jane doe php john smith function describebottles int amount string return amount bottle cider wall jane doe output see line last changed commit lookup detail commit may find function describes bottle cider rather beer git show commit author another examplecom date wed sep change drink extensive user testing shown customer like cider better beer jira diff git adescribebottlesphp bdescribebottlesphp index adescribebottlesphp bdescribebottlesphp php function describebottles int amount string return amount bottle beer wall return amount bottle cider wall bingo found exact commit swapped beer cider importantly know even link jira ticket find information perhaps contains full user testing result providing u even context make git blame absolute life saver legacy project problem bulk change team behind describebottlesfunction always used coding standard opening brace line crlf line ending one day decide adopt coding style guide become popular php community luckily tool like phpcsfixer phpcbf automatically convert whole codebase new standard similar tool almost programming language team one huge commit style change repository touch every line without altering meaning intent code would use git blame find background line code output would git blame describebottlesphp regina phalange php regina phalange function describebottles int amount string regina phalange regina phalange return amount bottle cider wall regina phalange guess last commit touched line give u useful context anymore git show commit head master author regina phalange rphalange examplecom date thu sep fix line ending diff git adescribebottlesphp bdescribebottlesphp index adescribebottlesphp bdescribebottlesphp php function describebottles int amount string return amount bottle cider wall php function describebottles int amount string return amount bottle cider wall bulk change render git blame useless many team refrain applying automated style change magnitude mean live either coding standard would rather codebase follow standard git rescue limit impact unimportant bulk commits git add new option git blame using ignorerev one specify commit ignored git blame line changed ignored commit attributed previous commit touching line instead mean even bulk style change get back meaningful context real change function git blame ignorerev describebottlesphp jane doe php john smith function describebottles int amount string john smith return amount bottle cider wall jane doe note even line added ignored commit attributed commit originally added brace line multiple bulk commits added time take quite effort add ignorerev order get clean output git blame luckily git also provides way make easier u repository create file hold commit hash commits ignored git blame naming file gitblameignorerevs seems common convention cat gitblameignorerevs conversion code style fix line ending file contain full char commit hash line starting considered comment used explain make given commit unimportant call git blame ignorerevsfile option ignore commits git blame ignorerevsfile gitblameignorerevs describebottlesphp gitblameignorerevs versioned inside repository developer use maintain list ignored commits avoid typing extra option every command set blameignorerevsfile configuration variable git config blameignorerevsfile gitblameignorerevs cause git automatically ignore commits specified file every call git blame stick gitblameignorerevs naming convention even set configuration variable globally applies repository gitblameignorerevs file aware however git currently give error setting configured globally repository gitblameignorerevs file yet hope considered bug fixed upcoming version another limitation aware platform like github gitlab yet support file commits ignore blamebutton user interface would awesome added feature soon one last thing aware need least version git use new feature git downloads page find obtain latest git platform even upgrade yet reason already start building gitblameignorerevs file commits would like hide git blame way hit ground running time upgrade summary git contains absolute game changer even mentioned release highlight fear polluting git blame output longer blocker applying style change bulk commits ignored even share list ignored commits entire team go ahead switch new coding standard git wo nt hold back anymore
92,Lobsters,vcs,Git & VCS,A hierarchy aware `cd` command for easier navigation to your repositories,https://github.com/knl/rh,hierarchy aware cd command easier navigation repository,rhlua go usage dependency lua installation clink configure history faq called write lua nt lua slow omg loc different,rhlua go moduleslike hierarchy aware cd command easier navigation repository go organizes module based serverorganizationrepository hierachy example githubcomknlrh liked lot rhlua step toward structure repository keep machine making workflow smooth possible rhlua assumes repository checkedout specific umbrella folder filesystem example work umbrella repository would help navigate maintain repository hierarchy manner go module workserverorganizationrepository rhlua fully implemented lua order make fast rhlua heavily influenced based zlua took filesystemdatastore code usage rhlua list known repository predefined umbrella folder set installation rhlua server org repo frecency search la zlua andor fasdcd search repository whose name partially matching repo org org server server found cd folder omit server org search repository name search term form orgrepo try match org repo respective position similarly full blown term serverorgrepo could also use space instead best match match current folder jump next matching one example rhlua pkg jump workgithubcomnixosnixpkgs rhlua fpkg jump workgithubcomfreebsdpkg rhlua httpgithttps serverorgrepo look work server org repo folder cd folder nt exist clone git cd rhlua term tab autocomplete based term dependency apart working lua installation rhlua requires either zlua fasdcd latter set rhdata fasd installation copy rhlua script somewhere path zsh install put something like zshrc eval lua pathtorhlua init zsh work also initialized knlrh zsh plugin manager antigen ohmyzsh nt forget set rhroot bash install put something like bashrc eval lua pathtorhlua init bash work posix shell install put something like profile eval lua pathtorhlua init posix work fish shell install put something like configfishconfdzfish source lua pathtorhlua init fish work psub fish version required power shell install put something like iex lua pathtorhlua init powershell join n window install clink copy rhlua rhcmd clink home directory add clink home path rhcmd called anywhere ensure lua called path ensure lua called path window cmder install copy rhlua rhcmd cmdervendor add cmdervendor path ensure lua called path configure optional step use really need set rhcmd bashrczshrc change command default rh set rhdata bashrczshrc change datafile default zlua set rhroot bashrczshrc change store root default work history first official release faq called rh repository hierarchy write lua nt lua slow lua great language pretty fast example zlua faster alternative even tho code get interpreted requires loading lua executable plus basing code zlua allows gem run many platform omg loc mostly make self contained avoid loading many module everything sits single file different rhlua zlua initial release git diff stat b show zlua knlrhrhlua file changed insertion deletion code modification zlua support reading data file supporting function however part modified order desired functionality rhlua update data file ever read make decision jump
93,Lobsters,vcs,Git & VCS,I Want Decentralized Version Control for Structured Data,https://jonas-schuermann.name/projects/dvcs-for-structured-data/blog/2020-03-22-manifesto.html,want decentralized version control structured data,want decentralized version control structured data permalink decentralized offlinefirst reliable private efficient collaborative pijul relevant paper blog series,want decentralized version control structured data published jonas permalink synchronize application data device people question unable answer thinking idea new application could develop wanted synchronization decentralized participant complete copy data set offlinefirst work offline long want resync online reliable conflict handled properly random data loss private data endtoendencrypted desired efficient change data set transmitted participant collaborative multiple people work data set many application nowadays go easy saasroute one central database behind web service every frontend display instantaneous view part data set kind efficient collaborative break requirement protocol like caldavcarddav seem adhoc unprincipled basically work properly one online time avoiding conflict hand great decentralized version control system like pijulgitfossil many check every requirement built work textual data therefore unsuited database backend graphical application basically want dvcs nt operate text file proper data model like relational algebra algebraic datatypes started searching could nt find anything like decided build inspired made feel like could even accomplish task dvcs pijul pijul applies new perspective patch taken category theory result beautiful model history conflict represented handled insight going foundation exploration area first thing modelling system relational algebra nice simple way model data surprised fast came data model patch relation based pijul patch theory story another blog post looking caldav relevant paper blog series great job explaining pijul work practical level
95,Lobsters,vcs,Git & VCS,Improve GitHub forks discoverability,https://github.com/isaacs/github/issues/562,improve github fork discoverability,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
96,Lobsters,vcs,Git & VCS,How GitHub blocked me (and all my libraries),https://medium.com/@catamphetamine/how-github-blocked-me-and-all-my-libraries-c32c61f061d3,github blocked library,github blocked library libphonenumberjs reactphonenumberinput relativetimeformat javascripttimeago reactresponsiveui readexcelfile virtualscroller imageboard captchan universal imageboard frontend catamphetamine googlecached able cover corporate as international sanction vocal minority gitlab,github blocked library name nikolay web developer moscow russia hobby writing open source library libphonenumberjs reactphonenumberinput relativetimeformat javascripttimeago reactresponsiveui readexcelfile virtualscroller imageboard captchan universal imageboard frontend really enjoy like others happily using github catamphetamine primary way publishing source code communicating user recentlya googlecached version github profile blockedon march github banned account without notice unknown reason found people started sending email telling hosted library stopped working asking delete github account apparently person navigating library page github simply displayed found page even user account suspended page person exist library toothe ban resulted ten thousand people using library maintained able access source code able report bug seek assistance stuck library also relied github page hosting static asset example country flag icon stopped working properly resultthe hint github navigated website showed notification top saying account flagged profile hidden public believe mistake contact support account status reviewed sent support request github inc soon found issue ticket id almost week responded yet spoiler respond article posted hacker news flagged call disposing someone politically correct manner nowadayswhat could possibly reason ban maybe one repos contained mysterious blacklisted word hyperlink blacklisted website somewhere deep source code maybe called someone moron internet recently spoiler finally turned case whatever could justify immediately blocking public access bunch useful opensource project ten thousand people rely productionalso apparently comment issue repos instantly disappeared anyone comment contained valuable informationknowledgesolutions git version control make sure lose code github inc decides block true intellectual asset form comment posted issuespullrequestscommitsetc including employer private repos funny github marketing sharing cocreating time look easily strip community source code knowledge base people collectively created time effort several people contributed repos form code commits issue comment maniacally hunt one guy happened fall favor unknown reason called loose cannon trusted source incident teached corporation still corporation even proclaimed heart open source even played huge role growing open source community current state main focus every corporation good public relation image smooth operation giant machine best friend long good business accidentally happen get way simply screw even notice tomorrow corporate lawyer decides need cover corporate as tightly international sanction dodging potential lawsuit vocal minority anything else think twice readily dispose anyone betray ideal might thought stand forthe issue see private corporation hijacking good name open source using profit time sharing ideal open source movement emerged spirit freedomand blame private corporation marketing strategy misleading making people think github inc idealistic nonprofit organization reality private forprofit corporation u jurisdiction policy opinion personally find unfair towards regular people sincerely praise promote github social mediagithub play fair open source free trademark try make seem like invented provide people mean publicly host opensource project also mean code make disappear well legally behave manner remember great power must also come great responsibility anyway guess goodbye github wonderful relationship seems like view diverged much getting obsessively political every passing year leaving start moving everything gitlab competition vital maintaining healty ecosystem becomes monopoly quickly descends stagnation authoritarianism preserving diversity everything beautiful world call gitlab fanboy
97,Lobsters,vcs,Git & VCS,"The Evolution of VCS Internals Part 2 - Perforce, BitKeeper, Darcs, Monotone, Bazaar, Fossil",https://initialcommit.io/blog/Evolution-of-VCS-Internals-2,evolution vcs internals part perforce bitkeeper darcs monotone bazaar fossil,introduction first article series perforce helix core bitkeeper darcs darcs advanced revision control system monotone bazaar fossil perforce helix core second generation background architecture depot subversion svn workspace changelist branch stream file type rcs revision control system basic command helix core user guide sample perforce helix core history file bitkeeper third generation background architecture sccs source code control system sccs section parent child bitkeeper downloads link basic command bitkeeper manual bitkeeper source note sample bitkeeper history file obtained bitkeeper source note darcs darcs advanced revision control system third generation background tutorial architecture hunk recorded patch basic command darcs model darcs user manual sample darcs patch file monotone third generation background rust directed acyclic graph dag email thread developer email linus torvalds architecture manifest revision initial commit managed ref strict consistency eventual consistency netsync certificate lua basic command monotone doc sample monotone revision file bazaar third generation background gnu project canonical website architecture lightweight checkout revision id revision number patch queue manager pqm basic command bazaar doc sample bazaar pack file fossil third generation background figure fossil web portal fossil web site code architecture artifact artifact id manifest autosync manualmerge fossil page basic command sample fossil database table entry fossil doc summary jacob initialcommitio baby git guidebook developer coding essential guidebook developer uteknikaldomain,introduction article second series comparing technical detail historically significant version control system vcs nt yet recommend checking first article series second article discus six additional vcs perforce helix core bitkeeper darcs darcs advanced revision control system monotone bazaar fossil perforce helix core second generation background perforce helix core proprietary vcs created owned maintained perforce software inc typically set using centralized model although offer distributed model option written c c initially released primarily used large company track store lot content using large binary file case video game development industry although helix core typically cost prohibitive smaller project perforce offer free version team developer architecture perforce helix core set serverclient model server process called wait listens incoming client connection designated port typically port client process called come commandline gui flavor user run client connect server issue command support available various programming language apis including python java allows automated issuance processing helix core command via script integration also available ides like eclipse visual studio allowing user work version control within tool helix core server manages repository referred depot store file directory tree unlike subversion svn client checkout set file directory depot local copy called workspace atomic unit used group track change helix core depot called changelist changelists similar git commits helix core implement two similar form branching branch stream branch conceptually similar used separate line development history stream branch added functionality helix core us provide recommendation best merging practice throughout development process file added tracking helix core classifies using file type label two commonly used file type text binary binary file entire file content stored time file stored common vcs tactic dealing binary file amenable normal merge process since manual conflict resolution usually possible text file delta change revision stored text file history delta stored using rcs revision control system format track file corresponding v file server depot similar cv also leverage rcs file format preserving revision history file often compressed using gzip added depot decompressed synced back workspace note surprised longstanding proprietary software like perforce helix core would leverage essential component delta history file backend seemingly antiquated opensource root like rcs thinking may surprising considering many opensource license allow rebranding reselling commercial purpose without restriction testament power first generation vcs like rcs also highlight ongoing practical importance basic command list common helix core command r server p start helix core server process locally port storing server data server directory depot stream depotname use helix core client create depot type stream stream mainline depotname streamname create mainline stream specified depot stream list stream client depotname streamname create local client workspace bind stream client depotname streamname list workspace bound stream add filenameext add new file tracking technically adding changelist submitted depot edit filenameext check existing tracked file editing delete filenameext delete existing tracked file submit submit active changelist helix server depot storage sync sync workspace corresponding stream depot information perforce helix core see helix core user guide sample perforce helix core history file head access symbol lock comment date author state exp branch next date author state exp branch next desc log text cheese cheese log text bitkeeper third generation background bitkeeper distributed vcs created maintained bitmover inc written primarily c along tcl initially released originally proprietary software bitmover opensourced linus torvalds creator linux git used bitkeeper linux kernel development early due distributed model distaste cv previous vcs used track linux codebase primarily licensing reason linux development community switched using git linus torvalds created architecture bitkeeper provides peertopeer distributed model version control leverage sccs source code control system backend another interesting case modern third generation vcs leveraging first generation vcs core functionality sccs track revision file corresponding history file called sfile since filename prefixed using bitkeeper slightly modifies convention instead postfixing filename sccs store delta using method called interleaved delta information sccs see sccs section first article series however bitkeeper simply wrapper sccs greatly extends functionality adding layer tracking commits enabling distributed model one limiting factor sccs change multiple file grouped together single commit revision file tracked independently sfile new file revision stored file corresponding sfile time change checked bitkeeper preserve behavior file revision checked allows committed group bitkeeper terminology commit referred changeset changesets also stored sfiles new bitkeeper repository initialized empty directory following subdirectory tree structure created bitkeeper deleted etc config gone ignore log nfiles rootkey tip cmdlog feature repoid scandirs xidcache reader tmp bk bitkeeper sccs changeset highlight important item structure bitkeeperetcconfig file contains general repository configuration information setting including description repository email address local developer bitkeeperlogtip file contains reference recent changeset repository bitkeeperlogcmdlog file contains history log bitkeeper command executed repository hidden bksccs directory sfiles changeset file created bitkeeper stored therefore folder essentially repository new file added modified checkedin corresponding sfiles created updated folder change committed descriptive comment stored set changeset history file also use sfile format third generation vcs bitkeeper repository need set central repository although choosing centralized development workflow totally fine bitkeeper allows cloning pushing pulling repository network internet committed changesets opposed checkedin change transferred via method one difference bitkeeper git git encourages lightweight branching support many branch part single repository bitkeeper hand typically requires separate clone repository represent new line development pushing pulling merging take place workspace expected repository designated parent child repository act default source push pull merges avoiding need specify detail time command run bitkeeper installed mac osx via homebrew package manager download link several platform seem broken bitkeeper downloads page appear available using link file structure downloads note tested installed bitkeeper run command line using bk subcommand command basic command list common bitkeeper command note many command corresponding gui version open visual wizard help bk init initialize directory bitkeeper repository bk new filenameext checkin new file revision control bk get filenameext check file corresponding history file readonly mode bk edit filenameext check file corresponding history file editing bk delta checkin working directory change note point change committed bk commit commit outstanding revision new changeset revision committed yet bk pending list change included next commit bk clean remove working directory file nt changed since last revision bk log display log file revision changesets repository bk cmdlog display log command executed repository bk ignore tell bitkeeper ignore particular file pattern bk push transfer changesets local repository parent repository bk pull transfer changesets parent repository local repository merges done automatically possible bk merge local ancestor remote merge merge local remote change ancestor bk diff display change working directory existing revision repository information bitkeeper internals see bitkeeper manual bitkeeper source note sample bitkeeper history file obtained bitkeeper source note ad rick darcs darcs advanced revision control system third generation background darcs third generation vcs released david roundy goal creating easy use free open source distributed vcs one unique aspect darcs written haskell purely functional programming language curious haskell used imperative language like c java python check tutorial architecture unlike perforce bitkeeper darcs leverage first generation vcs implement backend functionality however darcs preserve notion working directory developer make change checked copy code darcs take somewhat unique philosophy come thinking revision contiguous block changed text file called hunk multiple hunk across file recorded together patch represents delta set hunk one file patch essentially darcs term commit vcs patch darcs work quite differently standard commits used git commit reference one parent commits form continuous chain development history darcs patch thought abstract term requirement darcs patch parent therefore patch thought standalone unit sequence unit easily reordered undone even without last history cherrypicked merged however patch includes line change bordering overlapping prior change need record dependent patch containing prior change sense chain dependency required exist patch note one example patch dependency many instance darcs applies patch dependency couple noteworthy consequence undoing removing patch patch depend dependent must removed well merging patch one repository another patch dependency must brought well assuming nt already exist destination point easily digested considering patch ie representation change line file nt make sense part file changing nt available operate example nt make sense change word line never added first place patch added line must present patch changed line meaning unlike git darcs support creation local branch darcs creating new branch essentially amount cloning another copy repository however multiple local copy hard linked share subset repository file mitigates redundancy storing entire duplicate copy new darcs repository initialized empty directory following subdirectory tree structure created darcs format hashedinventory inventory patch prefs binary boring motd pristinehashed darcs directory contains information darcs us manage track file revision highlight important item structure inventory folder populated inventory file help darcs piece together history repository patch populated patch file recorded pulled merged repository prefsbinaries file contains list regular expression tell darcs file treated binary prefsboring file contains list regular expression file ignore another way darcs differentiates vcs tool via interactive command interface vcs tool pretty minimalist come interactivity output message typically brief often cryptic default darcs command provide verbose output help speed learning curve user clarify action user taking clear developer prioritized user experience darcs also make trivial generate patch bundle sent email applied remote user useful remove need repository owner grant push access user basic command darcs init initialize directory darcs repository darcs add filenameext add new file track revision darcs remove filenameext remove file revision tracking darcs move source dest move rename tracked file darcs record record new patch change working directory darcs whatsnew show diff patch working directory darcs get darcsurl download copy darcs repository specified url darcs pull darcsurl retrieve change patch remote repository darcs push darcsurl transfer patch remote repository darcs send generate patch bundle sent email darcs apply patch apply patch email patch bundle darcs log list patch repository also use darcs change information darcs internals see darcs model darcs user manual sample darcs patch file initial commit jacob initialcommitio ignorethis addfile cheesetxt hunk cheesetxt cheese monotone third generation background monotone thirdgeneration vcs created graydon hoare later created rust programming language nathaniel smith richard levitte became monotone primary maintainer around montone latest stable release development seems slowed due rise popularity vcs primarily git monotone written c c monotone especially significant since first vcs use hash identifier represent filetree content well directed acyclic graph dag describe commits could chained together form traceable history concept devised jerome fisher see email thread developer detail idea central many vcs tool including git adopted idea monotone see email linus torvalds especially last paragraph noting influence inspiration git derived monotone detail architecture monotone store file delta possible instead whole copy content version hash used unique identifier organize access content local repository unlike git store repository directly text file packindex file disk monotone repository actual sqlite database stored local system issuing monotone command either interact purely file workspace adding file change transfer information back forth database making retrieving commits information monotone database queried using client monotone represents tree using manifest file manifest file monotone humanreadable text file group together path hash change included tree snapshot manifest file hashed yield unique identifier set change committed monotone creates structure called revision revision includes reference recent manifest representing change previous revision id chain way history change builtup new revision commits made initial commit onwards clarity may useful compare monotone terminology git git term monotone equivalent blob file tree manifest commit revision working dir workspace monotone database created independently monotone workspace mtn db init db dbname command used create initialize empty sqlite database act monotone database dbname format indicates managed database stored path homemonotonedatabases dbname mtn default managed database allow monotone assume default configuration like location database convenience next step create workspace using command mtn db dbname branch branchname setup projectname create new workspace folder called projectname current directory link specified database also create new branch specified name noted branch never renamed monotone preserve universal uniqueness branch use reversedomain naming convention like comdomainprojectname monotone creates mtn subdirectory part mtn setup command order identify directory monotone workspace store configuration revision information structure mtn directory follows mtn format log option revision structure somewhat simpler vcs tool seen since actual content stored separate sqlite database file instead directly mtn folder mtnoptions file used store workspace configuration parameter like path database current branch name new file workspace added tracking via mtn add command monotone temporarily keep track mtnrevision file file manifest revision compressed commit process saved database structure important table monotone database schema create table file id primary key strong hash file content data null compressed content file create table filedeltas id null strong hash file content base null join filesid filedeltasid delta null compressed rdiff construct current base unique id base create table revision id primary key text revision data null compressed encoded content revision create table revisionancestry parent null join revisionsid child null join revisionsid unique parent child create table manifest id primary key strong hash entry manifest data null compressed encoded content manifest create table manifestdeltas id null strong hash entry manifest base null join either manifestid manifestdeltasid delta null rdiff construct current base unique id base noteworthy difference monotone git git branch simply reference ref pointer specific commit therefore latest commit must exist branch order add via operation like push common consequence need pull merge commits remote branch pushing branch back git enforces strict consistency way two people two different version branch pullpush operation however monotone commit contains embedded branch label identifies branch therefore general acceptable multiple head development since monotone know belong branch monotone allows pushing commits remote without requirement prior pull merge mean fork must merged occasion dealing conflict process monotone embodies eventual consistency branch consistency enforced every step way happens end order synchronize revision remote repository public key must exchanged network transfer push pull performed repository typically made available port using mtn serve command communicate via custom protocol called netsync common networking command monotone sync synchronizes revision direction push pull nt used often push pull syncs strictly move data local remote database leaving workspace end alone separate mtn update command used reflect change local database workspace monotone us concept certificate associate information revision information include descriptive message date author certificate also used guarantee integrity revision attaching rsa key email address signature monotone gpg signing force enabled way disable final note system like cv git use shell script hook monotone us lua basic command mtn db init db dbname create new managed sqlite database monotonedatabases directory mtn genkey keyname generate publicprivate keypair communication signing mtn db dbname branch branchname setup projectname set new workspace branch mtn add filenameext add new file tracking mtn diff show difference workspace last revision mtn commit message message commit new revision database mtn status show information related state working directory whether file changed mtn log show revision history active branch mtn serve make monotone repository available network via netsync mtn db dbname push mtn servername branchname push revision remote database mtn db dbname pull mtn servername branchname pull revision remote database mtn db dbname sync mtn servername branchname sync revision remote database direction mtn update update workspace new revision database mtn propagate source dest performs merge unique head source dest branch recent common ancestor information monotone internals see monotone doc sample monotone revision file formatversion newmanifest oldrevision adddir addfile cheesetxt content bazaar third generation background bazaar opensource distributed vcs part gnu project development maintenance bazaar sponsored canonical bazaar predecessor baz originally released project taken martin pool bazaar written primarily python bazaar forked project called breezy added support python git detail breezy found website architecture bazaar offer flexibility choosing either distributed model similar git centralized model similar svn distributed model offer working directory full local revision history enables offline work commits centralized option us lightweight checkout create local copy checkedout revision without repository structure track history like svn requires user connected network order commit back central repository like vcs seen far bazaar understands revision set change applied one file bazaar revision uniquely identified using revision id built user email address commit date hash jacob addition revision tagged sequential revision number human readability revision number mainline branch single sequential integer like merged revision threepart comma separated revision number format like first number mainline revision change derived second identifies merged branch third number revision number merged branch default global configuration option stored bazaarbazaarconf file command alias defined file shortcut commonly used long command bazaar command written using format bzr globaloptions command option argument bzrignore file used ignore file nt need tracked new bazaar repository initialized empty directory following subdirectory tree structure created bzr readme branchformat branchlock checkout conflict dirstate format lock shelf view branch branchconf format lastrevision lock tag repository format index lock obsoletepacks packnames pack upload bzrcheckoutdirstate file contains information state tracked file working directory bzrcheckoutconflicts file contains information conflict resolution need addressed working directory bzrbranchlastrevision file indicates revision id tip current branch change committed repository bazaar compress pack file format store bzrrepositorypacks directory pack file organized via index name referenced bzrrepositoryindices folder bzrrepositorypacknames file initially revision corresponds pack file pack get periodically recombined prevent problem due large number pack file bazaar pulling branch remote local repository performed branch nt diverged diverged bzr merge url command must used instead bzr push bzrssh serverdirectory used deploy copy branch working directory specified location interesting feature bazaar patch queue manager pqm pqm separate program run service server wait email come email must gnupg signed usually contain patch intended merged public branch however pqm command run customized subject line email basic command bzr whoami name email set name email stored revision bzr init initialize current directory bazaar branch creates hidden bzr folder content bzr add filenameext add file revision tracking bzr status show information related state working directory file changed bzr diff show change current working directory last revision bzr commit commit message commit set changed file folder along descriptive commit message bzr revert remove working directory change made since head revision bzr uncommit remove head revision bzr branch existingbranch newbranch create new local copy existing branch bzr pull bring new commits remote repository local repository bzr merge url merge commits branch diverged history bzr push bzrssh serverdirectory deploy copy branch working directory specified location bzr info show information current branch bzr log show commit history associated descriptive message active branch information bazaar internals see bazaar doc sample bazaar pack file content pack file compressed nt able generate cleartext version know please drop line fossil third generation background fossil created dwayne richard hipp also creator sqlite rdbms released written c sql fossil unique provides fully functional distributed vcs also suite tool allow developer easily host web portal collaborate share information project tool include integrated bug tracking wiki forum tech note even builtin web interface weboriented feature system clearly designed collaboration efficiency mind technical nontechnical user screenshot web portal spun single command figure fossil web portal see image fossil web portal builtin page displaying repository timeline history committed file branch tag forum user create post ticketing system wiki fossil web site code actually selfhosting web portal worth checking architecture like monotone fossil us sqlite database store repository one multiple different project tracked single sqlite file fossil working directory identified hidden sqlite database file called fslckout fossil checkout root working directory file store configuration information including path reference corresponding sqlite repository example table structure fslckout file create table vvar name text primary key null value clob check typeof name text length name create table vfile id integer primary key vid integer reference blob chnged int default deleted boolean default isexe boolean islink boolean rid integer mrid integer mtime integer pathname text origname text mhash text unique pathname vid create table vmerge id integer reference vfile merge integer mhash text create unique index vmerge id mhash create trigger insert vmerge newmhash null begin select raise fail trying update newer checkout older version fossil end create table tbl idx stat another similarity fossil monotone developer push pull sync move change direction local remote repository transfer happen http specifying url operate purely repository change immediately observed working directory since fossil data transfer use http default web browser directly access fossil repository using repository url fossil file version referred artifact uniquely identified via artifact id artifact id recently hash file content similar git commit generates manifest file includes mapping file path corresponding artifact id well commit author date manifest file hashed generate artifact id act commit id structure notable table fossil repository schema create table blob rid integer primary key rcvid integer size integer uuid text unique null content blob check length uuid rid create table delta rid integer primary key srcid integer null reference blob create table user uid integer primary key login text unique pw text cap text cookie text ipaddr text cexpire datetime info text mtime date photo blob create table filename fnid integer primary key name text unique create table tag tagid integer primary key tagname text unique default fossil operates autosync mode provides centralized workflow minimizes effort required developer autosync mode commits automatically pushed centralized server committed locally commit made fossil check central repository new commits automatically pull local database like centralized workflow consistent network access required autosync mode work effectively autosync disabled fossil operates manualmerge mode preferable distributed workflow network access guaranteed committing mode syncs push pull merges must executed manually fossil web interface several page admin user enter raw script sql script html customize ticketing process lightweight scripting language used fossil processing content web interface see fossil page detail script also used implement hook certain operation executed fossil also able store unversioned content state file revision tracking enabled basic command fossil init dbfilename create empty sqlite database shell act new repository fossil clone url dbfilename create local copy fossil repository specified url fossil open dbfilename checkout working copy local repository fossil add filenameext add new file revision tracking fossil diff filenameext show change working directory file checkedout commit fossil commit commit set changed file folder local repository fossil status show information related state working directory untracked file modified file etc fossil branch l list branch repository fossil branch new newbranch sourcebranch create new branch based source branch fossil commit branch branch commit change new branch fossil update revision checkout specified revision branch working directory fossil merge branch merge specified branch current branch checked working directory fossil undo undo recent update merge revert fossil redo undo recent undo fossil pull url download new revision remote repository nt merge working directory fossil push url transfer new revision remote repository fossil sync url sync revision remote database direction fossil timeline show commit history associated descriptive message active branch fossil ui serve fossil repository local http open web browser fossil serve serve fossil repository http open web browser sample fossil database table entry working directory database fslckout data vfile table id vid chnged deleted isexe islink rid mrid mtime pathname origname mhash cheesetxt repository database data artifact table rid rcvid size atype srcid hash content sample manifest file content c f cheesetxt f p r u jstopak z information fossil internals check fossil doc summary article provided technical comparison historically relevant version control system question comment feel free reach jacob initialcommitio interested learning git code work check baby git guidebook developer interested learning basic coding software development check coding essential guidebook developer special thanks reddit user uteknikaldomain provided expert detail insight greatly contributed writing article
99,Lobsters,vcs,Git & VCS,GitFlow considered harmful (2015),https://www.endoflineblog.com/gitflow-considered-harmful,gitflow considered harmful,gitflow considered harmful edit april gitflow current job gitflow mistake make project history completely unreadable masterdevelop split redundant every every needlessly complex antigitflow gerrit moving forward edit june edit april comment powered disqus,gitflow considered harmful posted edit april workflow outlined post separate article describing gitflow probably popular git branching model use today seems everywhere certainly everywhere personally practically every project current job us often client chosen remember reading original gitflow article back first came deeply unimpressed thought weird overengineered solution nonexistent problem see single benefit using heavy approach quickly dismissed article continued use git way always describe way later article handson experience gitflow based observation others using say precisely trying use initial intuitive dislike grown wellfounded experienced distaste article want explain precisely reason distaste present alternative way branching superior least opinion gitflow every way gitflow mistake irritates gitflow much make project history completely unreadable absolutely worst part gitflow advice finished feature may merged develop branch definitely add upcoming release git merge noff myfeature noff flag cause merge always create new commit object even merge could performed fastforward paragraph alone caused damage part article combined advice presented absolute obvious truth fact nothing opinionbased convention unpopular one history project managed using gitflow time invariably start resemble giant ball spaghetti try find project progressed something like worst mess seen result applying gitflow principle far actually grabbed first example could get hold easily screenshot capture recent state project currently involved finding anything history looking like close impossible small team developer imagine much worse would look larger one author gitflow said us personal project perhaps never scale approach thus never realized created mess would increase exponentially new team member maybe never search something intangible maze gitflow make project history aside screenshot also capture rather hilarious mistake versioning tend happen quite often trying use gitflow mention think found let know comment fortunately people caught pretty quickly merge commits everywhere maybe great idea presented virtually nobody heed advice noff flag anymore least experience unfortunately damage mentality user already done conditioned think simple linear history somehow inferior le professional mergecommit hell discouraged learning using thing like cherrypicking rebasing messy history seems inevitable even worse start actually desirable inflate perceived difficulty project work want appear professional unnecessarily large amount branch used gitflow see still large number merge commits cluttering history rationalization original article us always creating merge commit also somewhat dubious quote latter case without noff impossible see git history commit object together implemented feature would manually read log message right except way find merge commit created noff flag know manually reading log message gain approach beyond still unconvinced let illustrate point concrete example let say working project whose history shown image problem code changed working issue history would rather faced investigating problem one shown one masterdevelop split redundant gitflow advocate two eternal branch master develop two one conventional standard using one year still idea certain nothing gained two branch instead one let quote original article source code develop branch reach stable point ready released change merged back master somehow tagged release number done detail discussed therefore time change merged back master new production release definition tend strict theoretically could use git hook script automatically build rollout software production server everytime commit master analyze two paragraph closely think agree master branch contributes nothing history think every commit master new release develop branch every commit master tagged information would ever need develop branch tag point keeping master around accomplishes nothing value accomplish however create useless merge commits make history even le readable add significant complexity workflow brings final biggest gripe gitflow needlessly complex branch used force gitflow elaborate set complicated rule describe interact rule coupled intangible history make everyday usage gitflow hard developer guess happens whenever set complex web rule like right people make mistake break accident case gitflow happens time short mean exhaustive list common blunder observed repeated constantly sometimes every day often developer case competent software area reverting somebody else change conflict happening merge inability find correct version history confusing branch change actually pushed happens often might called standard mistake starting support branch wrong initial branch finishing support branch merging wrong final branch forgetting tag release cause commit master right accidentally changing release place instead creating new one building actual release commit later tagged supposed release number could course say mistake result human error people read documentation learned experience everything would fine seen mistake made many time otherwise competent developer buy argument saying love one person tell tail ignore hundred people tell look behind mistake happen confirm based experience made different people different circumstance rational alternative admitting something fundamentally flawed method used mistake even worst part consider biggest failure gitflow give people clear vision versioning scheme especially true deviation standard workflow gitflow force example long release cycle lot back fourth qa development mistake example gave really stem fact people confused actually represents current state project since really understand state wonder make mistake try change publishing work actually meant accomplish antigitflow ok smarta imagine thinking gitflow bad propose use instead glad asked want describe alternative method used successfully number project clear talking oneperson project believe fulfills goal gitflow set accomplish lot simpler clearer lightweight way scale number developer call antigitflow similar lot point need change compared gitflow exact opposite wherever gitflow fall short described one eternal branch call master develop current next whatever personally like master name use rest description convention git world immediately conveys purpose branch feature release hotfix whatever else need temporary used convenience share code developer backup measure always removed change present land master feature integrated onto master branch primarily way keep history linear lot leeway want enforce make simply convention developer encouraged forced follow side spectrum use something like gerrit manage git repository recommend even practice code review permission system fantastic ever decide want code review easy start set permission way actually forbids pushing merge commits master way ensure linear history release done similarly gitflow create new branch release branching point master decide necessary feature new work aimed next release pushed master always necessary change pushed release branch opinion antipattern huge red flag release requires separate commits work topic another article simplicity let assume want change finally release ready tag top release branch one eternal branch one way get release versioned permanently merge release branch master push changed master change made release part master release branch deleted hotfixes similar release except branch arbitrary commit master release tag want make fix work master continues always necessary fix pushed hotfix branch fix ready procedure exactly release tag top branch creating new release merge master delete hotfix branch see workflow quite similar gitflow try avoid pitfall mentioned earlier linear history make merges andor rebases easier one eternal branch take away lot complex rule state project clear top master next release latest tag production workflow even though simpler loses nothing term expressiveness project history managed compared gitflow contrary history useful encouraging keeping linear make much easier search moving forward hope critical author gitflow article certainly intention simply shared way using git worked team rest world thinking others may find useful absolutely nothing wrong approach contain sound idea however also believe gitflow fundamentally flawed many aspect experience observing people trying apply confirm impression simpler equally would even argue expressive way manage project history see reason ever use gitflow anymore edit june thanks everyone great response article based feedback comment try address common issue raised followup post edit april workflow outlined post separate article describing please enable javascript view comment powered disqus
100,Lobsters,vcs,Git & VCS,Please stop recommending Git Flow,https://georgestocker.com/2020/03/04/please-stop-recommending-git-flow/,please stop recommending git flow,blog post gitflow complicated face http nviecompostsasuccessfulgitbranchingmodel gitflow violates shortlived branch rule gitflow abandon rebasing gitflow make continuous delivery improbable gitflow impossible work multiple repository gitflow impossible work monorepo well use gitflow ok team use gitflow use trunkbased development gitflow considered harmful,gitflow branching merging methodology popularized blog post entitled successful git branching model last ten year countless team snookered headline dare say lied read blog post author claim successfully introduced project purposefully talk project detail made successful rest u mistake trusting blog post claim truism strategy work situation people context apply logic branching model end right well quite tell unconvinced line reasoning let dig deeper gitflow branching model die fire gitflow complicated face even think microservices continuous delivery gitflow complicated take look image tell immediately intuitive source http nviecompostsasuccessfulgitbranchingmodel feature branch release branch master develop hotfix branch git tag thing tracked understood accounted build release process also need keep track branch time mental model need retain useful carry high cognitive load using git year even sure point could mentally keep going gitflow violates shortlived branch rule git number merge conflict people committing branch increase number people working branch gitflow number increase even three branch varying lifetime merge develop feature branch release branch hotfixes potential mergeconflicts linear going potentially triple opportunity merge conflict thank hesitate say worrying merge conflict valid reason pursue branching strategy like gitflow amount potential complexity introduced branch come together much overlook would fine organization low commitvelocity rate appreciable fast moving organization startup case gitflow abandon rebasing recognize rebasing complex topic important conversation pursue gitflow gon na give rebasing remember rebasing away merge commit point see two branch coming together visual complexity gitflow going need visually track branch mean rebasing want unwind problem gitflow make continuous delivery improbable continuous delivery practice team release directly production checkin reality merge master automated fashion look mess gitflow explain going able continuously deliver entire branching model predicated predictable long term release cycle releasing new code every minute hour much overhead mention one central practice cd rollforward fix gitflow treat hotfixes separate entity carefully preserved controlled separated work gitflow impossible work multiple repository advent microservices push towards idea microrepos well cue commenter shouting orthogonal individual team control repository workflow control check repository workflow work ever tried complex branching model like gitflow multiple team hoped everyone page happen soon system becomes manifest different revision different repository people know everything people pounding yaml update manifest production becomes existential question careful gitflow impossible work monorepo well microrepos due difficulty coordinating release one big branching workflow microservices team abide release work second time take team say go team ready stuff released team independent microservices independently deployable well tie workflow centralized branching model created monorepo use gitflow organization monthly quarterly release cycle team work multiple release parallel gitflow may good choice team startup internetfacing website web application may multiple release day gitflow good team small people gitflow put much ceremony overhead work team hand people working parallel release gitflow introduces enough ceremony ensure mess thing ok team use gitflow use answer branching model work team context culture practice cd want something streamlines process much possible people swear trunkbased development feature flag however scare hell testing perspective crucial point making ask question team problem branching model help u solve problem create sort development model encourage want encourage behavior branching model choose ultimately meant make human work together easily produce software branching model need take account need particular human using something someone wrote internet claimed successful author end note thought using considered harmful moniker common post like google search realized someone else already wrote gitflow considered harmful article also worth time
101,Lobsters,vcs,Git & VCS,Becoming a git pro. Part 1: internal git architecture,https://indepth.dev/becoming-a-git-pro-part-1-internal-git-architecture/,becoming git pro part internal git architecture,head file shell answer index file index index file initial commit change staged commit change committed change staged commit change committed empty tree initial commit change committed wrapper great book,git may seem like complex system ask google title quick search turn heck git hard git please stop pretending git simple easy learn git complex first glance statement may seem hold true understand underlying concept working git becomes delightful experience problem git flexible pretty much like webpack inherent characteristic flexible system complexity strongly believe way battle complexity get basic underneath provided user interface understand underlying mental model architecture magic unexpected result feel right home working complex toolsboth developer worked git start working awesome version control tool benefit material article experienced git user understand lifecycle checkout modify commit much better starting git article give great head starti using lowlevel called plumbing command post demonstrate git work hood need remember rarely used regular workflow indispensable explaining underlying git architecturethe article bit lengthy believe study following way skim article top bottom understand general flowread thoroughly follow along implementing exercise useby practicing reinforce knowledge gain use bash command exercise ok unix based o use window run gitbash installed alongside git accessed using context menu option git bash heregit folder run git init folder git creates git directory let open terminal create new directory working initialize empty git mkdir gitplayground cd gitplayground git init initialized empty git repository pathtogitplaygroundgit l git head config description hook info object refsthis git store commits relevant information manipulate commitswhen clone repository git copy single directory foldercreates remotetracking branch branch cloned repositorycreates check initial branch specified head filewe see later purpose head file serf git architecture takeaway cloning repository essentially copying git directory locationgit database git simple keyvalue data store put value repository get key value accessedwriting database hashobject command put value database hashobject return checksum hash used key command creates plain object git repository called blob let write simple string content database echo content git hashobject w stdin echo familiar shell main command snippet echo content git hashobject w stdinthe echo command output content string using pipe operator redirect pipe output git hashobject command param w passed hashobject command tell store object otherwise command simply tell key would stdin tell command read content stdin specify hashobject expects file path end mentioned earlier git hashobject command return hash save variablevariables also could split main execution variable assignment like echo content git hashobject w stdin assignment convenience using shorter version subsequent code snippet assign output variable variable used hash string expectedto read value variable need start name echo database catfile read value key database use catfile command p option command expects hash key object retrieve git catfile p contentas said git folder stored valuesobjects kept folder go gitobjects see folder created git name first two letter hash key l gitobjects info packthis way git usually store object one folder per one blob however git also merge multiple blob one file generate pack file pack directory see file stored git keep information related pack object info directory git generates hash blob based blob content object git immutable changing content would change hashlet write another string content repository echo content git hashobject w stdin expected see gitobjects folder contains two record l gitobjects info packtree integral part currently two blob repository content contentwe need way somehow group together also associate blob filename tree come play tree created using git mktree command following syntax fileblob association filemode objecttype objecthash filename see answer explanation filemode use mode defines blob regular file read written user permission used checking file working directory set permission filesdirectories corresponding tree entriesso associate two blob two file following initialtreehash printf st sn blob blob git mktree hashobject mktree command return hash key created tree object echo initialtreehash running command git creates third object repository type tree let see l gitobjects initial tree object initialtreehash content blob content blob using mktree specify another tree object parameter instead blob tree associated directory instead regular file example following command would create tree subtree associated nestedfolder directory printf st sn tree nestedfolder git mktreethe filemode mark directory use type tree instead blob git store nested directory project structureindex place tree assembled everyone working git familiar notion index staging area probably seen following diagram right side see git repository store git object blob tree commits tag used hashobject mktree command directly add blob tree object repository working directory left local file systemdirectory checkout project file section explains middle stage refer index file simply index binary file generally kept gitindex resembles structure tree object hold sorted list path name permission blobtree objectit place git prepares tree writes repository orchecks working directorywe one tree repository created previous chapter read tree index file repository using readtree command git readtree initialtreehashso expect index file two file check structure current index file using git lsfiles command git lsfiles made change index file exactly tree used populate index file correct structure index file let check working directory using checkoutindex command option git checkoutindex l cat content cat contentall right checked file added manually git repository without commits cool index file usually stay state initial tree probably know modified using git add file path git rm cached file path command single file git add git reset set modifieddeleted file let put knowledge practice create new tree repository containing one file blob associated new text file content file content string instead creating tree manually like previous section use index file thatcurrently following structure index file based initial tree tree used populate index base applying change change make index file tentative actually write tree repository object however add written git repository immediately discard current change tree later picked garbage collection gc removed also mean accidentally discard change file still usually recovered git run gc usually many loose object floating around referenced anywherelet start removing two file working directory rm run git status see following git status branch master initial commit change committed use git rm cached file unstage new file new file change staged commit use git addrm file update committed use git checkout file discard change working directory deleted deleted lot information report two deleted file two new file also say initial commit run git status git make two comparison compare index file current working directory change reported change staged commitit compare index file head commit change reported change committedso case see git report two deleted file change staged commit know got compared current working directory index file found two file missing working directory removed also see change committed git report two new file currently yet commits repository head file explained later resolve socalled empty tree object file git think started new fresh repository show initial commit treat every file index file new filenow run git add modify index file removing two file run git status report change since file either working tree index file git add git status branch master initial commit nothing commit createcopy file use git add track started task create new tree one new file let create file add index echo content git add run git status git status branch master initial commit change committed use git rm cached file unstage new file see one new file detected change reported change committed know git compared index file empty tree expect index file one new file blob let check git lsfiles save hash file blob index correct structure ready create tree repository let writetree command latesttreehash git writetree great created tree help index put hash new tree latesttreehash variable could done manually writing content blob repository creating tree mktree using index much convenientwhat interesting run git status see git still think new file git status branch master initial commit change committed use git rm cached file unstage new file although created saved tree repository update head file used comparison put commit hash branch reference head file since neither leave head file nowso newly created tree following object repository commit wrapper around tree section get even interesting everyday work git usually encounter tree blob work commit object really commit git actually put simply possible wrapper around tree object allows attaching message tree group file allows specifying parent commit two tree git repository initial tree latest tree let wrap first tree object commit using committree command take hash tree create commit initialcommithash echo initial commit git committree initialtreehash run command following checkout commit working directory git checkout initialcommithash head initial commitnow see two file working directory l cat content cat contentwhen run git checkout commithash git following read tree commit point index filechecks index file working directoryupdates head file commit hashthese operation manually previous sectiongit history chain commits know commit wrapper around tree also mentioned parent commit two tree initially wrapped one commit previous section still one orphan tree left let wrap new commit make initial commit parent new commit use committree operation used p option specify parent latestcommithash echo latest commit git committree latesttreehash p initialcommithash run git log see history pas hash latest commit see two commits git log prettyoneline latestcommithash hash latest commit hash initial commitand switch initial commit git checkout initialcommithash l commit git checkout latestcommithash l head reference checked commit head simple text file located githead reference currently checked commit since checked latest commit hash latestcommithash previous section exactly head file contains cat githead latestcommithash echo equal equalhowever usually head file reference currently checked commit branch reference reference commit directly detached state even head hold reference branch like ref refsheadsmasterit still resolve commit hashyou already know git us commit referenced head executing git status produce set change index file currently checked treecommit another usage head resolve commit used parent future commitinterestingly head file important operation manually clear content git think git repository report error fatal git repository parent directory gita branch text file pointing commit two commits repository constitute following history git log prettyoneline latestcommithash hash latest commit hash initial commitlet introduce fork existing history checkout initial commit modify file content make new commit using git commit command accustomed git checkout initialcommithash echo modified content git add git commit forked commit file changed insertion deletion code snippet check initial commit add working directoryreplaces content modified content stringupdates index file git addthe last git commit command already know performs multiple underthehood operation creates tree index filewrites tree repositorycreates commit object wrap treesets initial commit parent new commit since commit currently head filewe also need save hash commit variable since git update head current commit file read forkedcommithash cat githead following object git repository creates following commit history due presence fork two line work mean need introduce two branch track line work independently let create master branch track linear history starting latest commit forked branch track history forked commita branch text file contains hash commit part git reference group object reference commit reference type lightweight tag git store reference gitrefs folder branch stored directory gitrefsheads since branch simple text file create file content commit hashso point main branch latest commit echo latestcommithash gitrefsheadsmasterand point forked branch forked commit echo forkedcommithash gitrefsheadsforkedso finally come regular workflow used switch branch git checkout master switched branch master git log prettyoneline hash latest commit hash first commit l let see another forked branch git checkout forked switched branch forked git log prettyoneline forked commit initial commit git l cat modified contenta tag text file pointing commit probably know instead line work track branch also track individual commits using tag tag usually used mark important development milestone like release right commits repository give name using tag branch tag text file contains hash commit part git reference groupas already know git store reference gitrefs folder tag stored subfolder gitrefstags since simple text file create file put commit hash itso point latest commit echo forkedcommithash gitrefstagsforkedand point initial commit echo initialcommithash gitrefstagsinitialonce done switch commits using tag initial commit git checkout tagsinitial head second commit cat contentand forked commit git checkout tagsforked cat modified contentthere also annotated tag different lightweight tag actual object contain message like commit stored repository alongside objectsconclusion pretty lengthy article tried make transparent clear possible work article understand concept showed able work git effectively never fear unexpected resultsif want learn git highly recommend reading great book also free online process writing next article git explore concept merge rebase remote repository follow get notified
102,Lobsters,vcs,Git & VCS,Use the Git History to Identify Pain Points in Any Project,https://preslav.me/2020/03/01/use-the-git-history/,use git history identify pain point project,adam tornhill code crime scene software design xrays git rescue,heard adam tornhill work highly recommend set time aside check code crime scene software design xrays book author dive bit unexplored territory looking evolution codebase factor change time much tooling use mitigate tech debt preventive compiler linters static analysis tool etc trying prevent developer checking code might cause problem future fail catch code might perfectly fine still lead well functioning system process software development much developertoself developertoothers interaction much making machine certain thing interaction let grow reflected upon certain period time better tool help u one use daily basis git git rescue book tornhill discus multiple evolution basic idea file change often exception tend one issue occur hence need change rarely think simple fact work project long period time yet onboarding new team member looking unknown piece code simply retrospecting code knowledge invaluable code surprisingly simple git log formatformat nameonly egrep v sort uniq c sort rg head like add command list git alias open gitconfig file add following two line alias section codechanges git log formatformat nameonly egrep v sort uniq c sort rg head cc git codechanges sort file project number change take first one change occurred time consequently higher chance require change future let example chose completely accident look gorm one popular go orms top file appear time writing maingo scopego readmemd scopeprivatego maintestgo gormtestgo modelstructgo dogo modelgo utilsgo excluding readmemd file one clearly see dominance certain file others many go project start single maingo file time logic phase file package case certainly case gorm maingo one big chunk code easily get split two file especially since multiple file share go package go detail adam tornhil work even interesting stuff like identifying file get changed together etc take simple trick try use project working library frequently work see code crime scenejack ripper legacy codebases common think inspired forensic psychology method learn strategi adam tornhillgoodreads science fiction fantasy week design xraysare working codebase cost overrun death march heroic fight legacy code monster norm battle adam tornhillgoodreads science fiction fantasy week
103,Lobsters,vcs,Git & VCS,Coming soon: A new site for fully free collaboration,https://www.fsf.org/blogs/sysadmin/coming-soon-a-new-site-for-fully-free-collaboration,coming soon new site fully free collaboration,post forge gnu nongnu savannahhackerspublic gnuorg gnu ethical repository criterion free software directory librejs kallithea allura phabricator ongoing analysis libreplanet developer mailing list,said endofyear post highlighting work supporting free software development infrastructure free software foundation fsf planning launch public code hosting collaboration platform forge launch member fsf tech team currently reviewing ethical webbased software help team work project feature like merge request bug tracking common tool new site complement current gnu nongnu savannah server continue support improve collaboration awesome volunteer team way want volunteer please email savannahhackerspublic gnuorg note interest infrastructure important free software unfortunate much free software development currently relies site nt publish source code require encourage use proprietary software gnu ethical repository criterion aim set high standard free software code hosting hope meet new forge plan contributing improvement upstream new forge software choose boost score criterion tech team small size network maintain nt fulltime developer work fsf limited amount time spend software choose communicate upstream developer request improvement help clarify question related ethical repository criterion far researching list candidate program analyzing term ethical practical criterion software candidate looking found free software directory aim initially reach b rating gnu ethical repository criterion work towards reaching rating launch reaching b require librejs support third party tracking proper license information also came list practical criterion includes twofactor authentication high performance well supported upstream common forge feature filtering system targeted toward single organization company want user able sign create repos site looking system handle organization source code management need fully free option including kallithea allura phabricator also hope future able see decentralized federated collaboration platform meet need continue interested direction think need freedomrespecting forge time sensitive going free software available right allowing issue data imported exported feature want new forge least ensure user move another instance platform tracking ongoing analysis libreplanet wiki continue updating page information pertaining research free software upcoming forge project operate high level transparency publish source code run server document run system welcome volunteer help guide improve project reach u libreplanet developer mailing list interested participating next fsf tech team research system met initial requirement order find best option available know interested start trying performing extensive test stay tuned hear u software stack end choosing site launch announcement
104,Lobsters,vcs,Git & VCS,Fsf 2019 forge evaluation - LibrePlanet,https://libreplanet.org/wiki/Fsf_2019_forge_evaluation,fsf forge evaluation libreplanet,http wwwfsforgblogssysadminthefsftechteamdoingmoreforfreesoftware pagure http pagureio librejs http gitea http codebergorg http http sourcehut http listssrhtsircmpwnsrhtdiscuss http http http wwwgnuorgphilosophyjavascripttrapenhtml http wwwgnuorgphilosophywhodoesthatserverreallyserveenhtml http docsgitlabcomceintegration http gitlabcomgitlaborggitlabfosstreemasterappmodelsprojectservices http http wwwgnuorglicensesidentifylicensesclearlyenhtml,forge software evaluation disclaimer project considered good different way decision based long list criterion http wwwfsforgblogssysadminthefsftechteamdoingmoreforfreesoftware ongoing evaluation pagure seems likely current focus pro someone else run instance open free software http pagureio j aggregated easy support librejs user import export data issue merge request possible configure pagure use user namespaces project con eventually want make forge work without javascript rating gnu ethical criterion depending upon user authentication module use whether create may require work also may make change getting issue creation work rating initial b rating librejs support j required trivial okay site requires j work term making site work without j upstream patch welcome http support mercurial need research resource requirement performance load featureful administration interfacetools gui cli tool prevent abuse user banning possible gui ease deployment upgrading debugging finer point gnu ethical repo criterion importexport data gitea pro librejs partially supported look hard add full support someone else run instance open free software http codebergorg con poor usability j site gnu criterion ca nt make pull request ca nt attach file issue ca nt create ssh key user setting ca nt delete repo would need add functionality plain html j run user import export issue merge request http upstream hosted github requires running nonfree j signup http seem close within weeksmonths self hosting support mercurial need research resource requirement performance load featureful administration interfacetools gui cli ease deployment upgrading debugging finer point gnu ethical repo criterion importexport data sourcehut pro con upstream claim alpha software navigation code issue difficult development upstream http listssrhtsircmpwnsrhtdiscuss email web patch aka pull request completely web based pull request popular however srht web feature make much easier plain gnu mailman example mailto link need email accept pull request simply guide sending email patch etc need research resource requirement performance load featureful administration interfacetools gui cli tool prevent abuse ease deployment upgrading debugging importexport data pro active upstream factor authentication support freely licensed evaluated currently focused evaluated different forge program decided go project listed also seemed promising mainly designed use single projectorganization independent project open public gitlab pro lot feature popular con someone else run instance open free software nt exist gitlab community run instance accept projectsrepos related community gitlabcom nonfree version relies heavily nonfree feature antiabuse nt count gnu ethical repo criterion gitlabcom listed c operating f reclassified soon sometimes requires user run nonfree google recaptcha code slowly working moving away almost year http http http wwwgnuorgphilosophyjavascripttrapenhtml also problem like help google track user train ai model forge run something would fit requirement host project forge major issue preventing could solved fork want maintain fork would want recommend people contribute upstream randomly hit requirement run nonfree recaptcha want take contribution go upstream doc nonfree feature part gitlab ce nt want host documentation nonfree software would want take look nontrivial effort gitlab fair bit code documentation would want remove integrates nonfree software b service require running nonfree javascript c service substitute software http wwwgnuorgphilosophywhodoesthatserverreallyserveenhtml http docsgitlabcomceintegration google recaptcha sourcegraph trello bitbucket akismet youtrack jira different project service http gitlabcomgitlaborggitlabfosstreemasterappmodelsprojectservices gravatar somewhere else identifying code documentation removing maintaining appears nontrivial maintain fork rename would preferable say gitlab people think gitlabcom nonfree enterprise version gitlab renaming nontrivial gitlab known target spam script upstream us recaptcha see also akismet unethical due software substitute requiring nonfree j upstream working alternative help free software user would stuck developing antispam solution gitlab quite complicated adding librejs support would nontrivial gitlab licensing recommendation lead thousand developer leave code licensing unclear would need remove change nontrivial see http http wwwgnuorglicensesidentifylicensesclearlyenhtml given current presence nonfreeethical problem fork maintain expect new freedom issue work correct time related put hold plan add nonfree j tracking gitlabcom grateful however nonfree j tracking exists support mercurial
105,Lobsters,vcs,Git & VCS,Reposurgeon defeats all monsters,http://esr.ibiblio.org/?p=8607,reposurgeon defeat monster,kommandant,january reposurgeon performed successful conversion biggest repository ever entire history gnu compiler collection commits history stretching back part cv earliest portion predated cv stored rcs waited long talk give dust time settle conversion week heard nary peep gcc developer problem think score reposurgeon biggest victory yet go port really proved commits handled great beast load time two hour tell go garbage collector really aggressive set exactly gogc go language really proved bet made year ago paid handsomely increase throughput python pretty breathtaking least order magnitude would far constrained slowness svnadmin dump improved optimization algorithm knocked one n translation think combined effect machinecode speed much smaller object size reduced working set great deal meaning cache miss penalty got le frequent also got lot speedup various parallelization trick deserves mention go made easy wrote julien rivaud later improved function would run specified functional hook entire set repository event multithreading worker pool optimally sized machine number processor serialize debug switch running serially line easily readable code go got fewer us various part code never used language parallelism easy manage go implementation communicating sequential process nothing short genius model concurrency primitive done future language thanks thanks due word gcc translation deadline got past reposurgeon contributor notably edward cree daniel brook julien rivaud showed help guy understood stake put month steady hard work along make go port correct fast enough practical tool translation particular thanks julien without whose brilliance painstaking attention detail might never gotten subversion dump reader quite correct giving applause omit apprentice ian bruene whose unobtrusively excellent work kommandant provided replacement cmd class used original python reposurgeon cli work without recommend anyone else need build cli go guy exemplify best opensource collegiality success gcc lift almost much victory mine
106,Lobsters,vcs,Git & VCS,PyPy and CFFI have moved to Heptapod,https://morepypy.blogspot.com/2020/02/pypy-and-cffi-have-moved-to-heptapod.html,pypy cffi moved heptapod,http fossheptapodnetpypy heptapod clever cloud faq octobus development http fossheptapodnetpypy http fossheptapodnetpypycffi http baroquesoftwarecom http wwwpypyorg portable build nightly downloads release downloads hpy sprinting soon multibuild cibuildwheels,busy month much deep change jit pypy around development deployment packaging project hosting biggest news moved center development bitbucket new http fossheptapodnetpypy friendly fork gitlab called heptapod understands mercurial hosted clever cloud atlassian decided close mercurial hosting bitbucketorg pypy debated development model based longlived branch want keep ability immediately see branch commit came mercurial git see faq octobus whose business mercurial developed way use mercurial gitlab called heptapod product still development quite usable ie nt get way octobus partnered clever cloud hosting offer community fo project hosted bitbucket wish remain mercurial new home pypy took offer migrated repos http fossheptapodnetpypy happy smooth import repos heptapodgitlab learning small difference bitbucket gitlab pull request issue commits kept id work still done attribute issue pull request comment correct user want contribute pypy new home cffi previously also hosted bitbucket joined pypy group http fossheptapodnetpypycffi website secondly thanks work http baroquesoftwarecom leading redesign updating logo http wwwpypyorg website undergone facelift easier use smallscreen device thanks also psf hosting site packaging also building pypy source take fair amount time provide downloads form tarballs zipfiles platform debian homebrew provide package traditionally downloads worked specific flavor operating system year ago squeakypl started providing portable build adopted build system linux offering nightly downloads release downloads work glibc platform gone endoflife go another excuse use pypy run scipy excuse also longer hold although speed scipy still wrong answer working hpy sprinting soon latest version pip wheel setuptools together standard linux wheel tool multibuild cibuildwheels well next version make easier library developer build binary wheel pypy problem getting going please reach
109,Lobsters,vcs,Git & VCS,GitHub CLI is now in beta,https://github.blog/2020-02-12-supercharge-your-command-line-experience-github-cli-is-now-in-beta/,github cli beta,github cli macos window linux use github cli manual filter list need quickly view detail create pull request view status work easily check pull request help shape github cli sky limit open source repository google form learn github cli beta,introducing easier seamless way work github command cli beta million developer rely github make building software fun collaborative gh brings github experience right terminal install github cli today macos window linux come iterate feedback beta available today github team enterprise cloud yet available github enterprise server exploring support enterprise server beta use github cli started issue pull request many developer use every day check example gh improve experience contributing open source project learn manual filter list need find open source project want contribute clone repository see maintainer want community contribution use gh filter issue show help wanted label quickly view detail find issue describing bug seems like something fix use gh quickly open browser get detail need get started create pull request create branch make several commits fix bug described issue use gh create pull request share contribution using github cli create pull request also automatically creates fork already one push branch creates pull request get change merged view status work get quick snapshot next morning happened since created pull request gh show review check status pull request easily check pull request one maintainer reviewed pull request requested change probably switched branch since use gh checkout pull request branch never remember right command either make change push soon enough pull request help shape github cli hope love foundation built pull request issue even excited future explore look like build truly delightful experience github command line github cli continues make even seamless contribute project github sky limit achieve together wait hear experience github cli love feedback create issue open source repository provide feedback google form command feel like live without clunky missing let u know make github cli even better learn github cli beta
110,Lobsters,vcs,Git & VCS,The past and the future of hub,https://mislav.net/2020/01/github-cli/,past future hub,hub entire implementation hub cherrypicking commits jingweno pitched idea merge hard work delete entirety stub part ruby standard library considerable net gain converting markdown format publish new version invokes executable haphazardly puttogether workaround sending keystroke terminal posixcompatible flag parser scanning help text fun making package getting feature stopped suggesting used aliased form several year already focus functionality facilitates scripting user able script workflow design better abstraction around auxiliary custom built top core every component open source project implement unusual way potential barrier contribution github desktop github cli building mean future hub reach,maintaining hub commandline git extension year issue pull request closed star github countless hour invested thought might fitting reflect unlikely past share bit process working address future github command line entire implementation hub sat single ruby file le line code hub created pet project chris wanstrath cofounder thenceo github initial idea behind hub simple use wrap git hub expand argument type le working github example git clone owner repo instead typing full url fact expanding shorthand syntax full url hub back even consult github api perform feature liked idea hub started contributing project early involvement tapered course year one decided feature long run might great overall health project since relatively easy prototype new feature ruby started expanding hub wrap even git command enabling powerful thing literally nobody asked cherrypicking commits github url time together contributor also adding brand new command hub create fork pullrequest recognize time went completely initial design hub mostly aimed wrap existing git command hub command browse meanwhile original premise hub wrapper git disappointing people tried concluded make git magnitude slower sometimes even slowness hub prompted owen ou jingweno create reimplementation hub called written entirely upandcoming language called go much faster hit chord community coincidentally couple githubbers time paving way go used internally github microservices pitched idea github adopts implementation official way unfolded time gave mixed feeling also really impressed reimplementation idea shoving legacy side promoting relatively new project something sit well primarily initially included consulted planing also worried incompatibility implementation worked owen month teaching go process could get point new implementation passed entirety test suite since nomadic time one point even met vancouver sat hack project together making connection like make happy world open source october owen privilege merge hard work mainline subsequently delete entirety old ruby implementation turn git support merging branch even unrelated history able preserve complete history project single repository epic rewrite ever participated thank owen investing patience trust making hub better everyone continued call project never labeled github though limitation ensuing identity crisis design becoming apparent really endorse official product good faith hub continued live github org sandbox continued experiment possibility using github api command line sandbox year hub accumulated portfolio wild hack partly served practical purpose mostly done satisfy thirst experimentation speed execution back ruby day hub used stub part ruby standard library proved slow load trick like combined together would sometimes result considerable net gain hub generates man page first converting help text markdown syntax converting markdown format typically consumed man hub us hub release command publish new version ci run test suite written using bddstyle cucumber still executes ruby fact since test suite consistently invokes hub executable inspects outputoutcomes able keep entire test suite migrating ruby go largely enabled rewrite first place way test hub using standard go tooling generate code coverage report test run feasible u hub therefore measure code coverage using haphazardly puttogether workaround hub test shell completion script using cucumber well spinning interactive shell terminal emulator internally sending keystroke terminal inspecting result commandline flag parsing close git possible hub implement posixcompatible flag parser line code also defines list supported flag command scanning help text think something right hub never forgot fun making combined keeping healthy boundary dealing request significantly helped stave onset burnout clear however working project next year well first go project hub spectacularly messy evident existence construct package encapsulates basically half entire codebase furthermore hub getting feature form new command became dawn really resisting upholding original premise git wrapper stopped suggesting documentation people alias github shell fact used aliased form several year already expanding git command new feature may sound like fun gimmick fact surprisingly hard maintain even though git let add new custom command adding git whatever executables path possible override git core command using mechanism augment core command would need create new program act like git convince people alias program git point onward program need behave git every possible way every time bug year hub plenty say want implement git clone owner repo command autoexpand url repository consideration program would make right top head isolate owner repo argument need parse commandline flag exactly core git clone whenever think reached parity new version git add new flag may come might forced compensate core git clone also support cloning local directory owner repo portion also happens match directory happens exist locally expand url stay unchanged scan filesystem solve case previous item need first parse respect forward nested git invocation global flag git c dir worktree path clone expand repo clone url use http git ssh protocol make right decision default let user choose preference user intend clone repo githubcom github enterprise instance another host need support selecting hostname maintaining different mode enterprise authentication want support ssh clone url also need parse respect hostname alias sshconfig file expand git command new functionalityflags going add information git clone h remember also man gitclone git help clone web add new flag git command going make sure addition appear git completion bash zsh fish possibly shell hub made decision workarounds every point many always fell short always something missed edge case considered example brittlest hub feature extension core git completion inject extra command flag different shell never worked perfectly first place kept falling date frequently break newer release git end maintaining something like sisyphean task instead focusing git extension course last couple year gently steered direction project act commandline api client focus functionality facilitates scripting shipping feature able close dozen feature request hub explanation user able script workflow without hub necessarily implementing worked wonderfully redesigning hub today would make entirely different set decision first even consider making git proxy anymore love git time better spent thing carefully reimplementing part core git functionality git already plethora functionality instead extending understand way improve git design better abstraction around course latter much harder work since every abstraction inevitably fail encapsulate particular flow effect could potentially mitigated better defining understanding audience product second would focus strictly maintaining commandline scripting core little offer github api authentication encoding logic map git remote github repository auxiliary custom built top core furthermore anyone could roll command user need rely mainline cover usecases much would le technical debt time third instead feeding personal invented syndrome would opt use communitysupported library tool avoid maintaining many custom approach every component open source project implement unusual way potential barrier contribution feeling hub difficult contribute since many people offer make fix implement feature actually follow pull request luckily given chance make entirely different set decision first time year github investing official product hired work project day job new team largely people make awesome github desktop together sat made decision early start new product scratch rather building rickety foundation hub codebase github cli building exactly would chosen create person charge making good thing never really made effort understand audience hub actual team finally get explore hopefully build something ambitious term number feature offer much github api cover well help people productive daily work mean future hub since personally find valuable spend time maintaining two separate commandline client github gradually reduce involvement hub point either go complete featurefreeze mode find new maintainership still early tell exactly going play rest assured hub going continue exist receive bug fix notice still use hub every day intention disappointing people question idea github feature would like see command line please reach thank reading
111,Lobsters,vcs,Git & VCS,Some git aliases that I use,https://utcc.utoronto.ca/~cks/space/blog/programming/GitAliasesIUse,git alias use,firefox addons reflog worktrees,system administrator primarily use git develop local change keep track going project use care pull change local repository caused put together set git alias probably somewhat different programmer wind much reason periodically inventory firefox addons writing common alias today presented form would alias section gitconfig source remote geturl origin nt always remember url upstream local tracking repository something often wind want go thing like look issue release whatever plog log common git operation pull change upstream look alias us reflog theoretically show log pulled last reflog position confident always right thing often cut paste commit id printed git pull little bit work trust understanding slog log prettyslog normally reading repo log read full log repos nt really useful situation want quick overview look short log go along following gitconfig actually define slog format pretty slog format pslog log prettyslog combination git plog git slog show log pull theoretically short log form ffpull pull ffonly ffmerge merge ffonly two alias use nt entirely trust upstream repo rebased ffpull alias pull fastforward operation allowed equivalent setting git config pullff nt always remember ffmerge use worktrees probably set git alias something configures newly cloned repo setting want far think pullff probably future git alias practice mostly nt remember instance idiff alias git diff cached
112,Lobsters,vcs,Git & VCS,shit -- an implementation of Git using (almost) entirely POSIX shell,https://git.sr.ht/~sircmpwn/shit,shit implementation git using almost entirely posix shell,shit zlib status use,shit shit shell git implementation git using almost entirely posix shell caveat couple gnu coreutilsisms marked xxx gnuism throughout tested busybox well native zlib implementation required zlib fuck would use status enough plumbing command written make write initial commit initial commit written huzzah use nt okay fine plumbing command implemented live garbage manual process something like git clone http gitsrhtsircmpwnshit mkdir myproject cd myproject shitinit write code assume shit shit create new index file note subdirectory nt working yet shitupdateindex create tree object shitwritetree hashobject tree w print tree id stdout use make commit export gitauthorname name export gitauthoremail exampleorg shitcommittree tree sha hashobject commit w print new commit sha update master point new commit echo commit sha gitrefsheadsmaster tada
113,Lobsters,vcs,Git & VCS,The History of Git: The Road to Domination,https://www.welcometothejungle.com/en/articles/btc-history-git,history git road domination,undisputed leader crowded field million registered developer acquired microsoft survey developer stack overflow beginning bitkeeper torvalds announcement tired british slang defining git goal subversion appointing maintainer step back benevolent dictator widening git appeal gitcvsimport jgit gitgui gerrit shawn passed away git window distribution somsubhracom founding github powerset ruby rail nodejs homebrew data bitbucket user adoption android github enterprise gitlab repo google state gerrit microsoft change tune called linux cancer announcing git support one engineering system world largest git repository virtual filesystem git sold announcement open sourced github octoverse visual studio code microsoft azure osciepam research behind code get published twitter blok,linus torvalds urgently needed new version control system maintain development linux kernel went offline week wrote revolutionary new system scratch called git fifteen year later platform undisputed leader crowded fieldworldwide huge number startup collective multinationals including google microsoft use git maintain source code software project host git project others use git via commercial hosting company github founded bitbucket founded gitlab founded largest github million registered developer acquired microsoft whopping billion competitor sometimes categorized version control system vcs sometimes source code management system scm sometimes revision control system rcs torvalds think life short distinguish definition part appeal git open source like linux android however opensource vcs including concurrent version system cv subversion svn mercurial monotone alone explain ascendancythe best indication git market dominance survey developer stack overflow found respondent used git nearest competitor subversion penetration team foundation version control mercurial fact dominant git become data scientist stack overflow bother ask question surveywhat developer using source control git git subversion subversion team foundation team foundation mercurial mercurial cv perforce response response source stack overflow developer survey beginningup april torvalds managed contribution large disparate team volunteer developer linux increasingly popular opensource unixlike operating bitkeeper bk proprietary paidfor tool time linux development crew allowed use bk founder larry mcvoy took issue one linux developer inappropriate use bk torvalds announcement linux mailing list plan take working vacation decide finding new vcs linux clear liked bk frustrated linux could longer use unimpressed competition mentioned outcome vacation git several theory torvalds called git reason actually liked word learned beatles song tired verse two injoke name project one named git git british slang stupid person torvalds tell u madeup acronym information really backronym something made fact torvalds surprised git monumental success lying said saw coming absolutely git really get fundamental right thing could done better sure big picture git really finally solved really hard problem vcs saysdefining git goalstraditionally version control client server code sits single repository central server concurrent version system cv subversion team foundation version control tfvc example clientserver systemsa clientserver vcs work fine corporate environment development tightly controlled undertaken inhouse development team good network connection work well collaboration involving hundred thousand developer working voluntarily independently remotely eager try new thing code typical open source software os project linuxdistributed vcs pioneered bk broke mould git mercurial monotone followed example distributed vcs copy current version code resides developer device making easier developer work independently change code bk big conceptual influence usage model really get credit various reason wanted make git implementation logic completely different bk conceptual notion distributed vcs really number one goal bk taught importance say torvalds truly distributed mean fork nonissues anybody fork project development come back month year later say look great thing done another major drawback clientserver vcs especially opensource project whoever hosted central repository server owned source code distributed vcs however central repository lot clone nobody owns control code make site like github possible central master location contains source code suddenly host thing without politics go along one repo rule concept say torvaldsanother central goal reduce pain merging new branch main source code tree directory make source code hierarchy key assigning cryptographic unique secure index every object using hash unique git took new level applying every new version file content also using identify relate including tree commits meant using git diff git could quickly identify change newproposed version branch source code even entire tree comparing two index hash real reason git index act intermediate step merging incrementally fix conflict say torvaldsthis concept intermediate step staging area allow comparison version fix problem main source code addition going ahead full merge revolutionary however universally appreciated used vcsappointing maintainerhaving written git torvalds threw open opensource community review contribution stepped one developer particular shone junio hamano much month torvalds could take step back concentrate linux passing responsibility maintaining git hamano obvious allimportant hardtodescribe good taste came code feature say torvalds junio really get pretty much credit started take credit design project junio person maintained made pleasant tool use clearly good choice still leadingmaintaining git year later benevolent dictator mean control direction git final say change code hold record commitswidening git appealsome volunteer contributor supported hamano early day still contribute today although often employed full time company rely git want invest upkeep improvement one volunteer jeff king known peff started contributing student first commit spotted fixed bug gitcvsimport moving repository cv git graduate student computer science time say spent lot time lurking git mailing list answering question fixing thing bothered sometimes response people report around become one main contributor quite accident king employed github since working website contributing git itselfking single exemplary work two fellow contributor git started helped expand influence beyond linux community shawn pearce work jgit opened git java android ecosystem johannes schindelin work git window opened git window community subsequently went work google microsoft respectively shawn pearce early contributor git implemented gitgui first graphical interface git important work jgit purejava implementation git say king enabled whole ecosystem git user allowed eclipse plugin key part android project selecting git version control system also wrote gerrit google codereview system based around git used android many project sadly shawn passed away schindelin remains maintainer git window distribution today way git grew kernel community window support mostly afterthought say king git ported lot platform vaguely unixish window far biggest challenge portability issue c code also challenge shipping application part written bourne shell perl git window wrangle complexity single binary package big impact growth git window developer according somsubhracom git window downloaded time date founding githubtom prestonwerner introduced git coworker dave fayram working side project startup called powerset ability create branch within git work easily merge back master branch revolutionary regard amazing command line interface took bit getting used especially notion staging area say prestonwerner opportunity offer sourcecode hosting service based git evident good option host git repos big barrier ease use also missing modern web interface web developer thought well positioned improve situation making easy host git repos foster collaboration something git made possible make easy addsprestonwerner teamed chris wanstrath scott chacon pj hyett start developing github late github helped take git mainstream making easier use spreading word beyond linux fraternity github founder ruby developer github written ruby word spread fast community hitting big time adopted development framework ruby rail ruby rail switched github seemed like entire ruby community followed quickly think endorsement combined ruby developer willingness embrace newer better technology critical success say prestonwerner project like nodejs homebrew started github helped bring new community prestonwerner resigned ceo github amid allegation bullying inappropriate complaint procedure issue perhaps symptomatic company grown fasttoday according data github registered developer make considerably larger user gitlab say million usersadoption androidmany corporation use hosting service github enterprise gitlab bitbucket software project largest git installation tend internally therefore public bespoke modificationsthe first major corporate adopter thus providing huge endorsement git google decided march use git android linuxbased operating system mobile phone open source android needed platform allowed huge ecosystem developer clone work contribute code without requiring purchaselicense specific tool order time git considered sufficient manage project magnitude team built superrepository delegate subgit repository however google state repo meant replace git make easier work git help view repo managereview change source gerritmicrosoft change tunegiven history mutual animosity opensource community microsoft software giant unlikely supporter git thenmicrosoft ceo steve ballmer even called linux cancer microsoft competing vcs tfvcschindelin worked year git window without anyone microsoft noticing effort however took job microsoft huge cultural shift asked matter whether would ever window machine even work microsoft would died laughter jokesthe first evidence cultural shift came microsoft started contribute substantially library git development resource help speed git application embedded developer tool edward thomson part microsoft team remains maintainer microsoft shocked tech world announcing git support development toolsenvironment visual studio v git hosting would offered suite cloudbased tool service azure devops called team foundation service alternative tfvc even remarkable new opensourcefriendly ceo satya nadella microsoft gradual standardization git internal software development one engineering system initiative precedent set azure devops team started using git service repository source code entire development effort microsoft window suite product moved git hosted azure creating world largest git repository included considerable moderation help git scale rather downloading entire window repository client device virtual filesystem git open source ensures appropriate file downloaded engineer computer schindelin point company big history microsoft decides git enterpriseready business world listens carefully think git winner least right sold announcement june microsoft would acquire github billion microsoft stock came big surprise look fact maybe acquisition unexpected microsoft involved github since net developer platform open sourced according github octoverse two mostcontributedto technology github currently microsoft studio code microsoft osciepam research revealed microsoft largest corporate contributor github already mentioned microsoft standardized internal development gitnumber contributor opensource project project contributor microsoftvscode microsoftdocsazuredocs flutterflutter firstcontributionsfirstcontributions tensorflowtensorflow facebookreactnative kuberneteskubernetes definitelytypeddefinitelytyped ansibleansible homeassistanthomeassistant source github octoverse number active contributor company opensource project github company active contributor microsoft google red hat ibm intel facebook amazon pivotal sap github source osciepam research january despite acquisition caused concern among github client remember old microsoft stewardship opensource community bête noire ballmer bitbucket gitlab claim seen spike project moving github platformsthat concern shared torvalds though reservation m acquisition partly whole fundamental distributed nature avoids political issue avoids scary hosting company control project part reason worried think m different company microsoft open source simply enemy say purely personal level heard m spent lot money github made say two project started become billiondollar industry lot people say onehit wonder part life well lived thing make happy made positive meaningful influence world may made money personally git directly make possible real job passion linux starving student quite well respected programmer people successful git way upset contributor thanks linus torvalds founder git linux johannes schindelin software engineer microsoft maintainer git window jeff king os developer github tom prestonwerner chatterbug cofounder cofounder github edward thomson product manager github maintainer ben straub author pro git evan phoenix creator rubinius christian couder senior backend engineer gitlab todd barr chief marketing officer gitlab patrick stephen director delivery management epam article part behind code medium developer developer discover article video visiting behind code want contribute get published follow u twitter stay tuned illustration blok
114,Lobsters,vcs,Git & VCS,Flight Rules for git,https://github.com/k88hudson/git-flight-rules,flight rule git,flight rule git english español русский 简体中文 한국어 tiếng việt français 日本語 flight rule convention document git website table content doctoc repository want start local repository want clone remote repository set wrong remote repository stackoverflow topic want add code someone else repository suggesting code via pull request hub need update fork latest update original repository editing commits commit wrote wrong thing commit message committed wrong name email configured want remove file previous commit want delete remove last commit section deleteremove arbitrary commit interactive rebase tried push amended commit remote got error message replaces old commit new one avoid force pushing accidentally hard reset want change back accidentally committed pushed merge accidentally committed pushed file containing sensitive data change immediately regenerate immediately want remove large file ever existing repo history remove sensitive file recommended technique use thirdparty bfg builtin technique use gitfilterbranch final step pushing changed repo history need change content commit last staging want stage tracked file leave untracked file stage part tracked file need add staged change previous commit want stage part new file whole file want add change one file two different commits staged many edits want break separate commit want stage unstaged edits unstage staged edits link unstaged edits want move unstaged edits new branch want move unstaged edits different existing branch want discard local uncommitted change staged unstaged want discard specific unstaged change want discard specific unstaged file want discard unstaged local change want discard untracked file want unstage specific staged file branch want list branch create branch commit pulled frominto wrong branch want discard local commits branch one server committed master instead new branch link want keep whole file another refish wikipedia made several commits single branch different branch conflict interactive rebasing section want delete local branch deleted upstream accidentally deleted branch want delete branch want delete multiple branch want rename branch want checkout remote branch someone else working want create new remote branch current local one doc want set remote branch upstream local branch want set head track default remote branch made change wrong branch rebasing merging want undo rebasemerge rebased nt want force push thread need combine commits leave oldest first commit alone combine following commits second oldest rename commit safe merging strategy need merge branch single commit want combine unpushed commits need abort merge need update parent commit branch check commits branch merged possible issue interactive rebases rebase editing screen say noop conflict note git documentation stash stash edits stash specific file stash message apply specific stash list stash keeping unstaged edits finding want find string commit want find authorcommitter want list commits containing specific file want view commit history specific function revision range commit limit find tag commit referenced submodules clone submodules remove submodule miscellaneous object copy folder file one branch another restore deleted file delete tag recover deleted tag deleted patch diff patch github special ref exporting repository zip file push branch tag name tracking file want change file name capitalization without changing content file want overwrite local file git pull want remove file git keep file want revert file specific revision want list change specific file commits branch want git ignore change specific file debugging git gitbisect first configuration want add alias git command want add empty directory repository want cache username password repository want make git ignore permission filemode change want set global user want add command line coloring git idea wrong source git shortcut git bash powershell window profile resource book tutorial script tool firstaidgitio gitextracommands gitextras gitfire gittips gittown http wwwgittowncom gui client gitkraken gitcola gitup gitxdev sourcetree tower tig magit gitextensions fork gmaster gitk sublimemerge,flight rule git english español русский 한국어 tiếng việt français 日本語 flight rule guide astronaut programmer using git thing go wrong flight rule hardearned body knowledge recorded manual list stepbystep x occurs essentially extremely detailed scenariospecific standard operating procedure nasa capturing misstep disaster solution since early mercuryera ground team first started gathering lesson learned compendium list thousand problematic situation engine failure busted hatch handle computer glitch solution chris hadfield astronaut guide life convention document clarity sake example document use customized bash prompt order indicate current branch whether staged change branch enclosed parenthesis next branch name indicates staged change command work least git version see git website update local git version table content generated doctoc repository want start local repository initialize existing directory git repository want clone remote repository clone copy remote repository copy url repository run save folder named remote repository make sure connection remote server cloning purpose mean making sure connected internet clone folder different name default repository name git clone url nameofnewfolder set wrong remote repository possible problem cloned wrong repository simply delete directory created running git clone clone correct repository set wrong repository origin existing local repository change url origin running git remote seturl origin url actual repo see stackoverflow topic want add code someone else repository git nt allow add code someone else repository without access right neither github git rather hosted service git repository however suggest code using patch github fork pull request first bit forking fork copy repository git operation common action github bitbucket gitlab anywhere people host git repository fork repository hosted ui suggesting code via pull request forked repository normally need clone repository machine small edits github instance without cloning nt githubflightrules list let go locally using ssh git clone git githubcom using http git clone http cd resulting directory type git remote see list remote normally one remote origin point case also want remote point fork first follow git convention normally use remote name origin repository upstream whatever forked rename origin remote upstream git remote rename origin upstream also using git remote seturl take longer step set new remote point project git remote add origin git githubcom yournamegitflightrulesgit note two remote origin reference repository upstream reference original one origin read write upstream read finished making whatever change like push change normally branch remote named origin branch could use setupstream avoid specifying remote tracking branch every future push using branch instance featuremyfeature git push setupstream origin featuremyfeature way suggest pull request using cli using git although tool like hub ready make pull request go github another git host create new pull request note host automatically link original forked repository forget respond code review feedback need update fork latest update original repository upstream repository may updated update need pulled origin repo remember like people contributing suppose feature branch need update original repository update probably set remote point original project generally use upstream remote name master git remote add upstream linktooriginalrepository master git remote add upstream git githubcom fetch upstream get latest update master git fetch upstream master git merge upstreammaster using single command master git pull upstream master editing commits commit let say blindly committed change git commit sure actual content commit made show latest commit current head want see file specific commit also commitid commit interested git show commitid filename wrote wrong thing commit message wrote wrong thing commit yet pushed following change commit message without changing change commit git commit amend open default text editor edit message hand one command git commit amend xxxxxxx already pushed message amend commit force push recommended committed wrong name email configured single commit amend git commit amend noedit author new authorname authoremail mydomaincom alternative correctly configure author setting git config global author nameemail use git commit amend resetauthor noedit need change history see man page git filterbranch want remove file previous commit order remove change file previous commit following git checkout head myfile git add myfile git commit amend noedit case file newly added commit want remove git alone git rm cached myfile git commit amend noedit particularly useful open patch committed unnecessary file need force push update patch remote noedit option used keep existing commit message want delete remove last commit need delete pushed commits use following however irreversibly change history mess history anyone else already pulled repository short sure never ever git reset head hard git push forcewithlease remote branch nt pushed reset git state made last commit keeping staged change mybranch git reset soft head work nt pushed pushed truly safe thing git revert shaofbadcommit create new commit undoes previous commit change branch pushed rebasesafe ie devs nt expected pull use git push forcewithlease see section deleteremove arbitrary commit warning applies never possible git rebase onto git push forcewithlease remote branch interactive rebase remove line corresponding commit want see removed tried push amended commit remote got error message http githubcomyourusernamerepogit rejected mybranch mybranch nonfastforward error failed push ref http hint update rejected tip current branch behind hint remote counterpart integrate remote change eg hint git pull pushing hint see note fastforwards git push help detail note rebasing see amending replaces old commit new one must force push forcewithlease change already pushed preamended commit remote careful always make sure specify branch mybranch git push origin mybranch forcewithlease general avoid force pushing best create push new commit rather forcepushing amended commit cause conflict source history developer interacted branch question child branch forcewithlease still fail someone else also working branch push would overwrite change absolutely sure nobody working branch want update tip branch unconditionally use force f avoided general accidentally hard reset want change back accidentally git reset hard normally still get commit back git keep log everything day note valid work backed ie either committed stashed git reset hard remove uncommitted modification use caution safer option git reset keep see list past commits commit reset choose sha commit want return reset master git reset hard good go accidentally committed pushed merge accidentally merged feature branch main development branch ready merged still undo merge catch merge commit one parent usually two command use featurebranch git revert commit option say select parent number branch merge made parent revert note parent number commit identifier rather merge commit line merge parent number index desired parent line first identifier number second number accidentally committed pushed file containing sensitive data accidentally pushed file containing sensitive private data password key etc amend previous commit keep mind pushed commit consider data contains compromised step remove sensitive data public repo local copy remove sensitive data people pulled copy committed password change immediately committed key regenerate immediately amending pushed commit enough since anyone could pulled original commit containing sensitive data meantime edit file remove sensitive data run featurebranch git add editedfile featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch want remove entire file keep locally run featurebranch git rm cached sensitivefile echo sensitivefile gitignore featurebranch git add gitignore featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch alternatively store sensitive data local environment variable want completely remove entire file keep locally run featurebranch git rm sensitivefile featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch made commits meantime ie sensitive data commit previous commit rebase want remove large file ever existing repo history file want delete secret sensitive instead see remove sensitive file even delete large unwanted file recent commit still exists git history repo git folder make git clone download unneeded file action part guide require force push rewrite large section repo history working remote collaborator check first local work pushed two option rewriting history builtin gitfilterbranch bfgrepocleaner bfg significantly cleaner performant thirdparty download requires java describe alternative final step force push change requires special consideration top regular force push given great deal repo history permanently changed recommended technique use thirdparty bfg using bfgrepocleaner requires java download bfg jar link example use bfgjar download may version number eg delete specific file master git rm pathtofiletoremove master git commit commit removing filetoremove master java jar downloadsbfgjar deletefiles filetoremove note bfg must use plain file name even subdirectory also delete file pattern eg master git rm jpg master git commit commit removing jpg master java jar downloadsbfgjar deletefiles jpg bfg file exist latest commit affected example several large tga file repo earlier commit deleted subset call touch file present latest commit note renamed file part commit eg started commit changed running java jar downloadsbfgjar deletefiles remove git history either run deletefiles command filename matching pattern builtin technique use gitfilterbranch gitfilterbranch cumbersome le feature may use install run bfg replace filepattern may specific name pattern eg jpg remove file matching pattern history branch master git filterbranch force indexfilter git rm cached ignoreunmatch filepattern pruneempty tagnamefilter cat behindthescenes explanation tagnamefilter cat cumbersome simplest way apply original tag new commits using command cat pruneempty remove nowempty commits final step pushing changed repo history removed desired file test carefully nt broken anything repo easiest reclone repo start finish optionally use git garbage collection minimize local git folder size force push master git reflog expire expirenow git gc prunenow aggressive master git push origin force tag since rewrote entire git repo history git push operation may large return error remote end hung unexpectedly happens try increasing git post buffer master git config httppostbuffer master git push force work need manually push repo history chunk commits command try increasing number push operation succeeds master git push u origin head number refsheadmaster force push operation succeeds first time decrease number gradually conventional git push succeeds need change content commit last consider created eg three commits later realize missed something belongs contextually first commits bother create new commit containing change clean code base commits nt atomic ie change belonged nt commit situation may want change commit change belong include following commits unaltered case git rebase might save consider situation want change third last commit made yourbranch git rebase get interactive rebase mode allows edit last three commits text editor pop showing something like pick third last commit pick second last commit pick last commit change edit third last commit pick second last commit pick last commit tell rebase want edit third last commit keep two unaltered save close editor git start rebase stop commit want alter giving chance edit commit apply change missed applying initially committed commit editing staging afterwards run yourbranch git commit amend tell git recreate commit leave commit message unedited done hard part solved yourbranch git rebase continue rest work staging want stage tracked file leave untracked file stage part tracked file stage file ext txt git add u txt stage file inside directory src git add u src need add staged change previous commit mybranch git commit amend already know nt want change commit message tell git reuse commit message mybranch git commit amend c head want stage part new file whole file normally want stage part file run git add patch filenamex p work short open interactive mode would able use option split commit however file new option add new file need use e option manually choose line add running git diff cached git diff staged show line staged compared still saved locally want add change one file two different commits git add add entire file commit git add p allow interactively select change want add staged many edits want break separate commit git reset p open patch mode reset dialog similar git add p except selecting yes unstage change removing upcoming commit want stage unstaged edits unstage staged edits many case unstage staged file pick file want commit however want switch staged unstaged edits create temporary commit store staged file stage unstaged file stash reset temporary commit pop stash git commit wip git add also add untracked file git stash git reset head git stash pop index note reason use pop want keep idempotent much possible note staged file marked unstaged nt use index flag link explains unstaged edits want move unstaged edits new branch git checkout b mybranch want move unstaged edits different existing branch git stash git checkout mybranch git stash pop want discard local uncommitted change staged unstaged want discard local staged unstaged change mybranch git reset hard master git checkout f unstage file might staged git add revert local uncommitted change executed repo root also revert uncommitted change particular file directory git checkout somedirfiletxt yet another way revert uncommitted change longer type work subdirectory remove local untracked file file tracked git remain x also remove ignored file want discard specific unstaged change want get rid change working copy checkout undesired change keep good change git checkout p answer snippet want drop another strategy involves using stash stash good change reset working copy reapply good change git stash p select snippet want save git reset hard git stash pop alternatively stash undesired change drop stash git stash p select snippet nt want save git stash drop want discard specific unstaged file want get rid one specific file working copy alternatively discard multiple file working copy list git checkout myfirstfile mysecondfile want discard unstaged local change want get rid unstaged local uncommitted change want discard untracked file want get rid untracked file want unstage specific staged file sometimes one file accidentally ended staged file committed unstage git reset filename result unstaging file make look like untracked branch want list branch list local branch list remote branch list branch local remote create branch commit git checkout b branch pulled frominto wrong branch another chance use git reflog see head pointed bad pull master git reflog head pull origin wrongbranch fastforward head checkout checkout message go simply reset branch back desired commit git reset hard done want discard local commits branch one server confirm nt pushed change server git status show many commits ahead origin mybranch git status branch mybranch branch ahead originmybranch commits use git push publish local commits one way resetting match origin remote master git reset hard originmybranch committed master instead new branch create new branch remaining master master git branch mybranch reset branch master previous commit master git reset hard head head short stand first parent head similarly stand second parent commit merges parent note see link information alternatively nt want use head find commit hash want set master branch git log trick reset hash git push make sure change reflected remote example hash commit master branch supposed master git reset hard head checkout new branch continue working master git checkout mybranch want keep whole file another refish say working spike see note hundred change everything working commit another branch save work solution git add git commit adding change spike one big commit want put branch maybe feature maybe develop interested keeping whole file want split big commit smaller one say branch solution solution spike one ahead develop branch develop want add change solve bringing content branch develop git checkout solution get content file branch solution branch develop branch develop branch uptodate origindevelop change committed use git reset head file unstage modified commit usual note spike solution made analyze solve problem solution used estimation discarded everyone get clear visualization problem wikipedia made several commits single branch different branch say master branch running git log see made two commits master git log commit author alex lee alexlee examplecom date tue jul bug added csrf protection commit author alex lee alexlee examplecom date tue jul bug fixed spacing title commit author aki rose akirose examplecom date tue jul first commit let take note commit hash bug first let reset master branch correct commit master git reset hard head create fresh branch bug master git checkout b let cherrypick commit bug top branch mean applying commit commit directly top whatever head git cherrypick point possibility might conflict see conflict section interactive rebasing section resolve conflict let create new branch bug also based master git checkout master master git checkout b finally let cherrypick commit bug git cherrypick want delete local branch deleted upstream merge pull request github give option delete merged branch fork nt planning keep working branch cleaner delete local copy branch nt end cluttering working checkout lot stale branch upstream remote want fetch accidentally deleted branch regularly pushing remote safe time still sometimes may end deleting branch let say create branch create new file master git checkout b mybranch mybranch git branch mybranch touch footxt mybranch l readmemd footxt let add commit mybranch git add mybranch git commit footxt added mybranch footxt added file changed insertion create mode footxt mybranch git log commit author siemiatj siemiatj examplecom date wed jul footxt added commit author kate hudson katehudson examplecom date tue jul fix force pushing amending commits switching back master accidentally removing branch mybranch git checkout master switched branch master branch uptodate originmaster master git branch mybranch deleted branch mybranch master echo oh no deleted branch oh no deleted branch point get familiar reflog upgraded logger store history action repo master git reflog head checkout moving mybranch master head commit footxt added head checkout moving master mybranch see commit hash deleted branch let see restore deleted branch master git checkout b mybranchhelp switched new branch mybranchhelp mybranchhelp git reset hard head footxt added mybranchhelp l readmemd footxt voila got removed file back git reflog also useful rebasing go terribly wrong want delete branch delete remote branch master git push origin delete mybranch also master git push origin mybranch delete local branch master git branch mybranch delete local branch merged current branch upstream master git branch mybranch want delete multiple branch say want delete branch start fix master git branch grep fix xargs git branch want rename branch rename current local branch master git branch newname rename different local branch master git branch oldname newname delete oldname remote branch push newname local branch master git push origin oldname newname want checkout remote branch someone else working first fetch branch remote master git fetch say want checkout daves remote master git checkout track origindaves branch daves set track remote branch daves origin switched new branch daves track shorthand git checkout b branch remotename branch give local copy branch daves update pushed also show remotely want create new remote branch current local one would also like set remote branch upstream current one use following instead git push u remote head upstream mode simple default git mode pushdefault config following command push current branch regard remote branch registered previously u behavior mode git push described doc pushdefault want set remote branch upstream local branch set remote branch upstream current local branch using git branch setupstreamto remotename branch using shorthand git branch u remotename branch set upstream remote branch another local branch git branch u remotename branch localbranch want set head track default remote branch checking remote branch see remote branch head tracking case desired branch git branch r originhead originghpages originmaster change originhead track originmaster run command git remote sethead origin auto originhead set master made change wrong branch made uncommitted change realise wrong branch stash change apply branch want wrongbranch git stash wrongbranch git checkout correctbranch correctbranch git stash apply rebasing merging want undo rebasemerge may merged rebased current branch wrong branch ca nt figure finish rebasemerge process git save original head pointer variable called orighead dangerous operation simple recover branch state rebasemerge mybranch git reset hard orighead rebased nt want force push unfortunately force push want change reflected remote branch changed history remote branch wo nt accept change unless force push one main reason many people use merge workflow instead rebasing workflow large team get trouble developer force pushing use caution safer way use rebase reflect change remote branch instead following master git checkout mybranch mybranch git rebase master mybranch git checkout master master git merge ffonly mybranch see thread need combine commits let suppose working branch iswill become pullrequest master simplest case want combine commits single one nt care commit timestamps reset recommit make sure master branch date change committed mybranch git reset soft master mybranch git commit new awesome feature want control also preserve timestamps need something called interactive rebase mybranch git rebase master nt working another branch rebase relative head want squash last commits example rebase last etc master git rebase run interactive rebase command see something like text editor pick refactoring pick new awesome feature pick fixup pick another fix rebase onto command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell line reordered executed top bottom remove line commit lost however remove everything rebase aborted note empty commits commented line beginning comment wo nt affect rebase replace pick command list also remove commits removing corresponding line example want leave oldest first commit alone combine following commits second oldest edit letter next commit except first second say f pick refactoring pick new awesome feature f fixup f another fix want combine commits rename commit additionally add r next second commit simply use instead f pick refactoring pick new awesome feature fixup another fix rename commit next text prompt pop newer awesomer feature please enter commit message change line starting ignored empty message abort commit rebase progress onto currently editing commit rebasing branch master change committed modified readmemd everything successful see something like master successfully rebased updated refsheadsmaster safe merging strategy nocommit performs merge pretend merge failed autocommit giving user chance inspect tweak merge result committing noff maintains evidence feature branch existed keeping project history consistent master git merge noff nocommit mybranch need merge branch single commit master git merge squash mybranch want combine unpushed commits sometimes several work progress commits want combine push upstream nt want accidentally combine commits already pushed upstream someone else may already made commits reference master git rebase u interactive rebase list commits nt already pushed safe reorderfixsquash anything list need abort merge sometimes merge produce problem certain file case use option abort abort current conflict resolution process try reconstruct premerge state mybranch git merge abort command available since git version need update parent commit branch say master branch branch branched master branch branched make commit parent commit longer accurate head since branched fix git rebase onto git rebase onto first commit branch nt want bring along help sticky scenario might feature built another feature nt merged yet bugfix branch need reflected branch check commits branch merged check commits branch merged another branch diff head commits branch master git log graph leftright cherrypick oneline head tell commits one give list nonshared branch another option master git log master nomerges possible issue interactive rebases rebase editing screen say noop seeing noop mean trying rebase branch identical commit ahead current branch try making sure master branch rebase earlier instead conflict unable successfully complete rebase may resolve conflict first run git status see file conflict mybranch git status branch mybranch change staged commit use git add file update committed use git checkout file discard change working directory modified readmemd example readmemd conflict open file look following head code code newcommit need resolve difference code added new commit example everything middle line newcommit head want keep one branch version code use master git checkout readmemd merging use keep change local branch keep change branch rebasing use keep change local branch keep change branch explanation swap see note git documentation merges complicated use visual diff editor master git mergetool opendiff resolved conflict tested code git add file changed continue rebase git rebase continue mybranch git add readmemd mybranch git rebase continue resolving conflict end identical tree commit need git rebase skip instead time want stop entire rebase go back original state branch mybranch git rebase abort stash stash edits stash edits working directory also want stash untracked file use u option stash specific file stash one file working directory git stash push workingdirectorypathfilenameext stash multiple file working directory git stash push stash message git stash save message git stash push message apply specific stash list first check list stash message using apply specific stash list using git stash apply stash n n indicates position stash stack topmost stash position furthermore using timebased stash reference also possible git stash apply stash stash keeping unstaged edits manually create stash commit use git stash store git stash create git stash store message finding want find string commit find certain string introduced commit use following structure git log string find common parameter source mean show ref name given command line commit reached mean start every branch reverse print reverse order mean show first commit made change want find authorcommitter find commits authorcommitter use git log author name email git log committer name email keep mind author committer author person originally wrote code hand committer person committed code behalf original author want list commits containing specific file find commits containing specific file use git log path file would usually specify exact path may also use wild card path file name using wildcards useful inform namestatus see list committed file git log namestatus j want view commit history specific function trace evolution single function use git log l functionname filepath note combine git log option like revision range commit limit find tag commit referenced find tag containing specific commit git tag contains commitid submodules clone submodules git clone recursive git githubcomfoobargit already cloned git submodule update init recursive remove submodule creating submodule pretty straightforward deleting le command need git submodule deinit submodulename git rm submodulename git rm cached submodulename rm rf gitmodulessubmodulename miscellaneous object copy folder file one branch another git checkout branchyouwantthedirectoryfrom foldername filename restore deleted file first find commit file last existed git revlist n head filename checkout file git checkout deletingcommitid filename delete tag git tag tagname git push remote refstags tagname recover deleted tag want recover tag already deleted following step first need find unreachable tag git fsck unreachable grep tag make note tag hash restore deleted tag following making use git updateref git updateref refstags tagname hash tag restored deleted patch someone sent pull request github deleted original fork unable clone repository use git diff patch url become unavailable checkout pr using github special ref fetch content pr new branch called git fetch origin githubcom foobar new ref exporting repository zip file git archive format zip output fullpathtozipfilezip master push branch tag name tag remote repository name branch get following error trying push branch standard git push remote branch command git push origin branch error dst refspec match one error failed push ref git server fix specifying want push head reference git push origin refsheads branchname want push tag remote repository name branch use similar command git push origin refstags tagname tracking file want change file name capitalization without changing content file master git mv force myfile myfile want overwrite local file git pull master git fetch master git reset hard originmaster want remove file git keep file master git rm cached logtxt want revert file specific revision assuming hash commit want master git checkout want revert change made commit pas commit hash master git checkout want list change specific file commits branch assuming want compare last commit file commit git diff head pathtofilefile pathtofilefile go branch git diff master pathtofilefile staging pathtofilefile want git ignore change specific file work great config template file require locally adding credential nt committed git updateindex assumeunchanged filetoignore note remove file source control ignored locally undo tell git notice change clear ignore flag git updateindex noassumeunchanged filetostopignoring debugging git gitbisect command us binary search find commit git history introduced bug suppose master branch want find commit broke feature start bisect specify commit bad one known good assuming current version bad good git bisect bad git bisect good gitbisect selects commit middle range specified check asks whether good bad see something like bisecting revision left test roughly step commit message check commit good bad good git bisect good gitbisect select another commit range process selecting good bad repeat revision left inspect command finally print description first bad commit configuration want add alias git command o x linux git configuration file stored gitconfig added example alias use shortcut common typo alias section shown alias add amend commit amend c commit ca commit amend ci commit co checkout diff dc diff changed d diff staged extend commit amend c head f fetch loll log graph decorate prettyoneline abbrevcommit merge one log prettyoneline outstanding rebase u reword commit amend status unpushed log u wc whatchanged wip rebase u zap fetch p day log reverse nomerges branch datelocal sincemidnight author git config get username deletemergedbranches f git checkout quiet master git branch merged grep invertmatch xargs n git branch delete git checkout quiet f want add empty directory repository git support hack create gitignore file directory following content ignore everything directory except file gitignore another common convention make empty file folder titled gitkeep mkdir mydir touch mydirgitkeep also name file keep case second line would touch mydirkeep want cache username password repository might repository requires authentication case cache username password nt enter every push pull credential helper git config global credentialhelper cache set git use credential memory cache git config global credentialhelper cache set cache timeout hour setting second find credential helper git help grep credential show possible credential helper o specific credential caching git config global credentialhelper osxkeychain osx git config global credentialhelper manager git window git config global credentialhelper gnomekeyring ubuntu gnomebased distros credential helper likely found different distribution operating system want make git ignore permission filemode change git config corefilemode false want make default behaviour loggedin user use git config global corefilemode false want set global user configure user information used across local repository set name identifiable credit review version history git config global username firstname lastname set email address associated history marker git config global useremail validemail want add command line coloring git set automatic command line coloring git easy reviewing git config global colorui auto idea wrong screwed reset something merged wrong branch force pushed ca nt find commits know point alright want go back state git reflog reflog keep track change tip branch even tip nt referenced branch tag basically every time head change new entry added reflog work local repository sadly track movement change file nt recorded anywhere instance master git reflog head reset moving head checkout moving master head checkout moving master reflog show checkout master branch back hard reset older commit latest activity represented top labeled head turn accidentally moved back reflog contain commit master pointed accidentally dropped commits git reset hard using git reset possible change master back commit provides safety net case history accidentally changed copied edited source git shortcut git bash comfortable command might want create shortcut git bash allows work lot faster complex task really short command alias sqsquash function squash git rebase head copy command bashrc bashprofile powershell window using powershell window also set alias function add command profile whose path defined profile variable learn profile page microsoft documentation site setalias sq squashcommits function squashcommits git rebase head resource book tutorial script tool firstaidgitio searchable selection frequently asked git question gitextracommands collection useful extra git script gitextras git utility repo summary repl changelog population author commit percentage gitfire gitfire git plugin help event emergency adding current file committing pushing new branch prevent merge conflict gittips small git tip gittown generic highlevel git workflow support http wwwgittowncom gui client gitkraken downright luxurious git client window mac linux gitcola another git client window o x gitup newish gui opinionated way dealing git complication gitxdev another graphical git client o x sourcetree simplicity meet power beautiful free git gui window mac tower graphical git client o x paid tig terminal textmode interface git magit interface git implemented emacs package gitextensions shell extension visual studio plugin standalone git repository tool fork fast friendly git client mac beta gmaster git client window merge analyze refactors semantic diff merge beta gitk git client linux allow simple view repo state sublimemerge blazing fast extensible client provides merges powerful search syntax highlighting active development
115,Lobsters,vcs,Git & VCS,A new hash algorithm for Git,https://lwn.net/SubscriberLink/811068/cfeb6a67b8dfbe47/,new hash algorithm git,signing subscription git work simplified hash security matter moving stronger hash unconcerned made well documented inconvenient detail current state posted github repository log,lwnnet need without subscriber lwn would simply exist please consider signing subscription helping keep lwn publishing jonathan corbetfebruary git sourcecode management system famously built hashing algorithm become increasingly weak foundation year considered broken despite fact yet seem broken could used compromise git repository user increasingly worried security good news work moving git past underway time slowly coming fruition version code looked git work simplified understand matter git help idea underlying git database work follows oversimplified view git manages object skipped reader already familiar material git often described built contentaddressable filesystem one look object know object content may seem particularly useful one way know content particular substitute cryptographic hash content hash rather easier work useful property git store number object type using hash identify example hash driversblockfloppyc kernel calculated git conceptually least git store version floppyc file using hash name early version git actually somebody make change floppyc even removing extra space end line result completely different hash stored different name git repository thus full object often called blob name since new one created revision file tend proliferate editor kernel repository currently contains object blob type object stored git repository individual file object hold particular set content information file appears repository hierarchy floppyc moved driversstaging someday hash remain representation git object database change keeping track file organized directory hierarchy job tree object given tree object thought collection blob identified hash course associated location directory tree one might expect tree object hash used store repository finally commit object record state repository particular point time commit contains metadata committer date etc along hash tree object reflecting current state repository information git check repository given commit reproducing state file repository point importantly commit also contains hash previous commit multiple commits case merge thus record state repository previous state making possible determine exactly changed commits hash hash previous commit commits included calculation two chain development end file content resulting commits still different hash thus unlike sourcecode management system git conceptually least record delta one revision next thus form sort blockchain block containing state repository given commit hash security matter compromise kernelorg created fair amount concern security kernel source repository attacker able put backdoor kernel code result could eventual compromise vast number deployed system malicious code placed kernel build system could run behind number corporate government firewall pleasant scenario thanks use git also particularly likely one let u imagine attacker gained control kernelorg want place evil code floppyc something unspeakable like change replaces random sector segment rick astley video say somehow change would incorporated repository would included subsequent pull change floppyc change hash turn change every tree object containing evil floppyc every commit includes well head commit repository would certainly change would older one attacker tried make change appear happened distant past somewhere certainly developer actually memorizes hash would immediately notice change like rest u probably would git distributed nature git mean many copy repository soon developer try pull push corrupted repository operation fail due mismatched hash two repository corruption come light repository integrity also protected signed tag include hash specific commit cryptographic signature chain hash leading given tag changed without invalidating tag use signed tag universal kernel community rare nonexistent many project mainline kernel release signed way one see linus torvalds signature tag one know repository state intended tag applied depends strength hash used though attacker able modify floppyc way hash change modification could well go undetected news hash collision creates concern trusted detect hostile change longer assuring integrity repository world ended yet fortunately still reasonably expensive create sort hash collision creating new version floppyc hash would hard attacker would though new version would contain desired hostile code still function working floppy driver look like obfuscated c code contest entry least already creating beast probably still unfeasible writing clearly wall time weak git rapidly approaching moving stronger hash back early day git torvalds unconcerned possibility broken result never designed ability switch different hash fundamental git operates git code full declaration like unsigned char word type hash deeply wired code assumed hash would fit array time git developer brian carlson already work separate git core specific hash used indeed working since unclear hash might eventually replace possible create abstract type object hash would hide detail point work done merged decision replacement hash algorithm made number possibility considered git community settled nextgeneration git hash commit enshrining choice cite relatively long history wide support good performance community also decided mostly implemented transition plan well documented follows shamelessly cribbed file hash algorithm abstracted core git code transition surface relatively easy new version git made different hash algorithm along tool convert repository old hash new simple command like git convertrepo frobnicateblobs climbsubtrees liabilitywaivernone useshovels carbonoffsets user leave behind note specific commandline option may differ one problem plan though git repository operate vacuum sort flagday conversion might work tiny project going work well project like kernel git need able work hash foreseeable future number implication requirement make felt throughout system one transition design goal repository able interoperate repository managed older version git kernelorg update new format developer running older version still able pull push site happen git continues track hash object indefinitely blob tracking happen maintenance set translation table given hash generated one algorithm git able look corresponding hash needle say lookup succeed object actually repository translation table maintained pack file hold object contemporary git repository separate table loose object stored separate file rather pack cost lookup table seen high enough measure need taken minimize number loose object given repository handling object type bit complicated tree object example must contain hash object tree tree object requested git locate version translate object hash contained within returning similar translation required commits signed tag contain hash machinery place git installation interoperable transition eventually user upgraded version git point repository owner could begin turning capability removing translation table transition point complete inconvenient detail likely glitch along way naturally one simple humanfactors problem user supply hash value interpreted case unambiguous hash bit wide hash must example shorter hash could either since hash often abbreviated transition document describes multiphase process interpretation hash value would change user unlikely go process course way unambiguously give hash value new git code even mixed command line example come transition document git log git user interface relatively straightforward concise one still imagine user might tire relatively quickly obvious solution sort bracket fatigue fully transition project quickly possible another issue though lot hash value wild kernel repository currently contains commits fix tag one includes hash hash value also found bugtracker history release announcement vulnerability disclosure repository without compatibility hash become meaningless address issue one imagine git developer may eventually add mode translation old hash remain repository hash new object added current state much work implement transition done remains relatively unstable state even actively tested yet midjanuary carlson posted first part transition code clearly solves part problem first contains piece necessary set repository write read extensionsobjectformat word create repository unable read value writeonly repository generally agreed relatively low even sccs limited carlson purpose posting code stage try reveal core issue harder change work progress developer interested git going may well want take close look code converting working repository recommended though turn carlson work go well beyond put testing post ready really curious people see github repository work unlikely land system git user time yet good know getting close ready git developer carlson particular quietly working project year benefit log post comment
116,Lobsters,vcs,Git & VCS,Pairing in Github,https://www.sicpers.info/2020/01/pairing-in-github/,pairing github,look like,world free software good appropriately credit contributor community work git make hard pair program hackathon recently make single commit sat next lot people made plenty commits based conversation suggested lot thing try debug problem invented solution made commits highlynutritious green square github external evidence contributed two day time free software project pair committing make sure acknowledge contribution pair make equal github ui look like see u contributed commit commit like git commit fixed thing author jennifer h pair jennypair examplecom account linked ui committer pair author perfect github acknowledge author contribution graph committer egalitarian way acknowledge pair want follow moment happy least demonstrate authored change typed text editor posted graham
117,Lobsters,vcs,Git & VCS,The right way to email a git repository,https://statagroup.com/articles/git-bundle,right way email git repository,git bundle,tasked reviewing code challenge another candidate download projectzip file extract run tell part code autogenerating scaffolding part complex part really get idea code would work even written candidate even know entire project one big commit long nothing horribly wrong pas themmost company kind code challenge interview process may like dislike practice different reason one thing easily remove bunch headache stop asking zipfiles projectgit already provides wonderful feature called git bundle way package git repository single file contains entire git repository even branch generating one easiest thing imaginable present working directory inside repository simply run command
118,Lobsters,vcs,Git & VCS,GCC has a really high-quality Git repository now,http://esr.ibiblio.org/?p=8543,gcc really highquality git repository,day hole,yes month since posted precise day hole headsdown project deadline barely met preoccupied cleanup effort project reposurgeon biggest conversion yet history gnu compiler collection jan officially lifted subversion git effort required get done immense involved one hairraising close call still debugging go translation code four month ago word came gcc team firm deadline december choose reposurgeon set custom script written gcc hacker named maxim kyurkov took look promptly recoiled horror problem work kyurkov script looked pretty sane relied gitsvn bad work adequately live gatewaying subversion repository use batch conversion number murky bug including tendency badly screw location branch join problem facing kyurkov gcc guy never nose rubbed problem might misled gitsvn surface plausibility using winding subtly damaged conversion increased friction cost rest time head absolutely win dec going easy subversion dump analyzer problem persistent failure particularly weird case test suite analyzer hairball tended eat ram prodigious rate early became apparent great beast ii actually small job series fortunate occurrence followed one friend amazon able lend access really superpowered cloud machine second much important midoctober couple occasional reposurgeon contributor julien frnchfrgg rivaud daniel brook showed help daniel wangled bos permission go fulltime done bos whose company critically dependent gcc many many hour hard work followed profiling smashing hidden n loop exploded repo size reducing working set fixing analyzer bug doubled lifetime consumption modafinil every time scoped left came answer would barely make deadline probably moment perspective three week futile attempt patch latest round subversiondump analyzer bug realized trying patchandkludge way around last weird case probably going work code become rubble pile change anything without breaking anything looked like time scrap everything downstream firststage stream parser simplest part one completely sure correct rebuild analyzer first principle using learned recent failure course risk taking come deadline time analyzer right rather catastrophically broken simply time get cleaner code working qualified thinking odds great deal swallowed hard pulled trigger rewrite made fateful decision nov duke wellington famously said damned nearrun thing waited even week longer pull trigger would probably failed fortunately actually happened able factor new analyzer series pass much like codeanalysis phase compiler number fluctuated ended key point pas far simpler old code relationship welldefined several intermediate state structure become complication help scrapped eventually julien took two trickier intermediate pass could concentrate worst bunch meanwhile daniel unobtrusively finding way speed code slim memory usage day deadline gcc project lead sidekick showed project channel work improving conversion recipe formally getting nod conversion huge surprise lot cleanup verification tuning done official repository cutover jan one thing another jan could declare victory ship overworked picked cold normally big deal sniffle sneeze day barely slows time hacking cough headache flulike symptom except fever even occasional dizzy spell trouble spread left ear canal getting better planned go big prosecond amendment demonstration richmond jan bail last minute sick travel anyway mission got done gcc really highquality git repository sequel first gcc compiler mod posting something like usual frequency resume couple topic queued
119,Lobsters,vcs,Git & VCS,The Wave/Particle Duality of Git Commits,https://www.thirtythreeforty.net/posts/2020/01/the-wave-particle-duality-of-git-commits/,waveparticle duality git commits,waveparticle duality doubleslit experiment photo cc bysa jordgette something strange behaves like photon git something strange treated either patch snapshot duality git commits enables operation rebase git doc subscribe update,lot friend get confused encounter advanced git topic git rebase misunderstanding typically arises first merge conflict interrupt rebase process central point confusion usually git reapply one commit onto another friend confused snapshot could merge conflict obvious think final state order understand going first necessary take quick detour quantum planted firmly cheekwaveparticle dualityif already passingly familiar particular flavor apparent quantum nonsense afraid get lot confused turn particle photon electron etc property classical particle wave lead experimental result wellknown doubleslit experiment photon fired slit onto piece film create band passed slit acting photon particle however photon pas two sidebyside slit interfere create interference pattern piece film photon wavesthe small extra ripple interference second slit photo cc bysa jordgette upshot important realize photon neither particle wave rather something strange behaves like bothwhat photon git glad askedit easy see many git operation treat commits snapshot every git user know use checkout git checkout l lh head adjust padding social link total drwxrxrx georgev georgev jun archetype drwxrxrx georgev georgev jun asset drwxrxrx georgev georgev jun image drwxrxrx georgev georgev aug layout rwr r georgev georgev jan readmemd drwxrxrx georgev georgev aug static rwr r georgev georgev jun themetoml command show output unified patch git show commit author george hilliard thirtythreeforty gmailcom date tue dec adjust padding social link diff git aassetsscsshydehydesidebarscss bassetsscsshydehydesidebarscss index aassetsscsshydehydesidebarscss bassetsscsshydehydesidebarscss social textalign center padding padding include linknodecoration commit hash present command aspatch assnapshot flag indicate difference fact referring object going commits seems neither patch snapshot observed rather something strange treated either patch snapshot photon property particle wavewhen git treat commit patch appears difference snapshot parent git treat commit snapshot appears tree file staging area commit madethis duality git commits enables operation rebase git command rebase cherrypick formatpatch etc treat git commit patch rather snapshot viewed way git rebase operation suddenly make whole lot sense git take string commits interprets patch applies commit specifya simple rebase diff applied git doc process go smoothly creates new string commits destination snapshot modified according original commitsaspatches also possible rebase create merge conflict patch snapshot apply cleanlyis silly way think commits probably helpful least one person explained way hope help tooyou subscribe update via r email
120,Lobsters,vcs,Git & VCS,Towards decentralized code collaboration,https://radicle.xyz/towards-decentralized-code-collaboration.html,towards decentralized code collaboration,towards decentralized code collaboration user ban censorship nearly software relies open source code exploring alternative sourceforge gitlab gitea gogs federated gitlab bazaar scuttlebutt designing principle free software movement linux kernel mailing list radicle protocol code collaboration scuttlebutt revisiting bazaar emacs linus torvalds trusted bazaarstyle development retain flexibility git gossip well packfile protocol platform eventuallyconsistent,towards decentralized code collaboration overview radicle building throughout last decade open source become standard software development sharing code freely publicly made drastically cheaper easier build tech innovation surging result code hosting collaboration platform like github gitlab contributed heavily growth open source bringing mainstream audience defined standard vocabulary behavior made git accessible greater audience empowered social coding created global community developer undeniable fact completely changed way people write code status quo code collaboration platform also host largest repository open source development made code issue pull request review comment even social like solely within platform platform however owned corporation subject corporate law right define term service implement user currently place iranian syrian crimean github account response pressure u government vulnerable censorship well capitalist end often misaligned goal free open source community world nearly software relies open source code maintaining resilience health free open source ecosystem important ever believe dependence centrally hosted platform corporation distribution critical open source infrastructure unsustainable reliance centralized service contradicts value free open source ecosystem threatens wellbeing radicle conceived alternative goal eliminate intermediary create peertopeer ecosystem robust functional secure must intentional shift narrative prioritize adoption decentralized alternative code collaboration abide principle free open source software core open source ethos idea liberty open source inverting power structure creating access opportunity everyone github employee letter github exploring alternative alternative github exist ranging platform like sourceforge gitlab established method collaboration mailing list platform like gitea gogs offer selfhosted open source solution code collaboration low platform risk leave developer isolated environment access global network developer one proposed alternative federation proposal forgefed federated gitlab step right direction implementation underdeveloped lacking addition federation dependent domain name regularly seized government wellestablished opensource project linux kernel adopt bazaar accessible development environment nt confined single platform mailing list work falter held usability standard platform like github established peertopeer protocol like scuttlebutt provided u alternative solution share host information protocol able work offline without reliance server application built lack ability user easily coordinate global scale nt much issue blogging social networking use case come software collaboration canonical global registry necessary meet usability discoverability standard centralized platform today ability anybody contribute open source project matter necessary cultivate truly free open network designing principle set build alternative started thinking value recognize integral free open source code collaboration said developed following list guiding principle must prioritize user freedom word free software movement user freedom run copy distribute study change improve software thus free software matter liberty price must accessible uncensorable anyone freedom use software collaborate others single party able ban user accessing system content shared must auditable transparent addition user freedom control interaction content see individual basis must userfriendly software must easy use expect tremendous change behavior user responsiveness functionality must meet standard established current platform must offlinefirst must require internet connectivity dns online portal function must single point failure must always available must compromise security trust third party intermediary must required use every artefact system must attested cryptographic signature verified let look hosting platform like github gitlab context framework succeed userfriendly accessible since centrally controlled censorable prioritize user freedom look selfhosted solution like gitea phabricator gogs free uncensorable userfriendly however easily accessible due gatekeeping isolated environment user across phabricator deployment interact case currently available selfhosted solution looked also present single point failure require internet connectivity interaction system hypothetically federated gitlab could fill requirement however federated service offlinefirst offer sovereignty user identity user tied specific instance thus subject drawback centralized service bazaarstyle solution like linux kernel mailing list succeed almost outlined principle limited term user friendliness hard compare usability email thread sophisticated workflow possible platform like github gitlab radicle protocol code collaboration radicle adopts scuttlebutt social overlay paradigm establishing peertopeer replication layer top distributed version control system starting git user account login replaced public key cryptography hosted issue tracker replaced local peer replication idea single canonical upstream replaced patchbased peertopeer bazaar model complement replication layer introduce totallyordered consensusbacked registry hold canonical project metadata allows project anchor important project state repository guarantee global availability immutability three major theme highlight decision focus peertopeer code collaboration model build underlying distributed version control system replication adopt protocolfirst approach revisiting bazaar cathedral bazaar describes two approach free software development cathedral model exemplified project like emacs make release open available keep development exclusive called individual wizard hand bazaar linus torvalds validated massive success linux call completely open development frequent early release delegation throughout community many eyeball code possible conclusion essay speaks success bazaar development practice open source project word given enough eyeball bug shallow peertopeer networking make far easier developer maintainer develop shared trusted representation project state grounded actual source code secure peer identity peer replication patch become comprehensive tied local issue comment review connected development process comprehensive patch bazaarstyle development retain flexibility supporting sophisticated workflow radicle replaces idea single canonical upstream peertopeer model familiar open source hacker early make bazaarstyle development easier better potential caused radicle settle gossipbased social overlay built distributed version control system free always available without hassle selfhosting trusting company user data git gossip well next design decision came result experimentation decentralized storage building first version radicle ipfs ran performance functionality issue detailed analysis found major realization replicating git repos peertopeer storage layer left u choice losing packfile protocol one thing make git fast approach would make source code secondclass impractical store repository large history reflecting almost obvious thought returned use git distribute data storing collaboration artifact issue pull request comment git done data structure available git satisfy need paired gossip layer git becomes exactly necessary store replicate distribute code collaboration artifact building peertopeer overlay top git find performant solution one better adapted code collaboration issue comment review become local artifact cryptographically signed interacted offline protocol platform story big code hosting platform coincides general shift internet open protocol privatelyowned platform social coding platform today actually leverage open protocol git mercurial ssh built closed garden radicle approach meant return protocolfirst philosophy focusing building code collaboration primitive instead user experience reject data collection siloing intermediary reflected decision build extend git nexus replication build strength decentralized nature issue pull request comment review locally give developer tool manage design workflow without locking new experience despite frontend interface built radicle exists foremost open protocol platform complement eventuallyconsistent peertopeer replication layer global registry hold canonical project metadata also desirable provide functionality difficult address gossip level globally unique humanreadable identifier well giving ability project anchor important information project immutable totallyordered example latest repository head alleviate weakness replication layer unable prove user information shown latest available essence registry provide user trusted auditable shared view network otherwise lacking delivering connected social layer attracted developer platform like github designing system open protocol challenging requires consensusbased approach discus depth future wwwww wwwww wwwww piece place see radicle starting take shape highpotential alternative code hosting platform like github goal develop radicle support resilience health free open source ecosystem sustainable way lot share coming month please stay touch
121,Lobsters,vcs,Git & VCS,Highlights from Git 2.25,https://github.blog/2020-01-13-highlights-from-git-2-25/,highlight git,released git since git sparse checkout management made easy partial clone number possible qualifier sparse checkout partial clone documentation tidbit option source source setting source git blog post mark file type source source source source detect renames directory level source outreachy internship source source source source place source released source learn release note previous version,january update published indepth overview sparse checkout feature author derrick stolee learn sparse checkout feature open source git project released git feature bug fix contributor new look exciting feature change introduced since git sparse checkout management made easy past release might read mention topic like partial clone support sparse checkout blog post git take another step closer bringing mature configurable partial clone support user partial clone dive new change worth taking time discus partial clone today clone git repository copy data every version every file history large repository cost network transfer local storage make awkward even impossible even interested subset file past several version git learned ability execute partial clone mean clone work repository without content partial clone still considered experimental feature git point view instance many provider github support feature yet continually changing evolving within git release release let focus better understanding partial cloning reviewing perspective server client client must two thing first must able tell server want object repository likewise must also able tolerate local repository lack complete set object hand server must able interpret client request serve object able generate adequate response get done today let say repository manageable amount history many file fit comfortably hard drive case might want clone part repository content executing something like git clone filterblob none nocheckout yourrepositoryhere let break mean first specifying allows tell server cloning object choose example asked server avoid sending u blob use number possible qualifier next tell git skip checking repository receives response server git try check content realize missing object try request server prevent happening nocheckoutwhich tell git avoid checking repository entirely repository disk object server none checked readwritten toetc somehow tell git object okay skip checking repository able actually check thankfully use sparse checkout order make happen sparse checkout sparse checkout nothing list file path pattern git attempt populate working copy checking content repository effectively work like gitignore except act content working copy rather index downside sparse checkout rather difficult specify instance incantation avoid checking file depth two greater git clone filterblob none nocheckout yourrepositoryhere repo cd repo cat gitinfosparsecheckout eof eof git config coresparsecheckout git checkout partial clone git sparsecheckout git previous example get lot easier introduction new git sparsecheckout command review new feature shortly give sense workflow might change example using git sparsecheckout git clone filterblob none yourrepositoryhere repo cd repo git sparsecheckout init idea behind git sparsecheckoutcommand simple allow user play partial clone sparsecheckouts easily possible four thing set list path checkout print current list enable disable sparse checkout entirely note set list enable disable subcommands respectively instead writing complicated gitignore pattern gitinfosparsecheckout git sparsecheckout handle work checkout new path simply execute following git sparsecheckout set pathtocheckout however great power come great responsibility exceptionally large repository exceptionally long list sparsecheckout pattern may take git substantial time compute whether given path need checked thankfully git sparsecheckout come rescue cone mode working cone mode opted running git config coresparsecheckoutcone set allowed pattern becomes restrictive instead arbitrary gitignore pattern specify whether path file within given subdirectory checked example directory abc within large repository c work probably want c fully checked also want b checked enough get c much cone mode git sparsecheckout set abc exactly learn cone mode check documentation git sparsecheckout command experimental behavior subject change likewise many provider including github still experimenting partial clone support yet generally available make sure keep updated progress meantime publishing indepth overview sparse checkout feature author derrick stolee lot information different workflow including cone back within next couple day share link published tidbit several blog post ago talked rebasemerges option used preserve branch structure repository rebasing option rebasemerges replaced preservemerges deprecated release take deprecation even removing mention preservemerges help text git rebase still relying script use git rebase preservemerges release good time update source even though pull request issue may feel familiar u github git project work differently us mailing list email patch back forth feature git make workflow easier called branch description branch description used fill cover letter sending series patch useful wish send multiple version patch git instructed use branch description first paragraph fill placeholder value subject header coverletter email tell git use git formatpatch coverfromdescription subject source pair git feature might known git apply mergeconflictstyle setting may used git apply apply patch file repository perhaps even option leave conflict resolution state patch apply cleanly likewise latter configuration value used control git format merge conflict resolve git two work together git apply honor conflict style set encounter patch require merge conflict resolution applying source may recall git blog post git support function signature detection feature like git diffgrep showfunction functioncontext use need mark file type using one repository gitattributes file git support improved also detect function boundary program written elixir language source many command take pathspec example git add git commit git reset understand new option pathspecfromfile many pathspecs pas one command might write git add cat yourpathspecs yourpathspecs long might instead use xargs work fine example since xargs simply run git add however command git commit case running longer work write git commit pathspecfromfileyourpathspecs add many pathspecs argument desire handy scripting around git especially large repository source source source older blog post talked git ability detect renames directory level writing commits subtle bug caused detection mechanism fail content subdirectory moved root repository git bug squashed source one first git command likely learned git add one particularly neat way use command may learned option discussing earlier invoked git add split change trying stage piece colloquially hunk asks whether want stage one really useful want split change working copy multiple commits git trivia command since inception backed perl effort begun rewrite engine powering git add c like majority rest git cooler still project outreachy internship work still waiting remaining change make git add p featurecomplete expect feature soon source source source source may used git log graph look ascii rendering graph history repository ever used particularly large repository lot longrunning branch output may filled width terminal git command got lot love careful refactoring made possible significantly improve simplify output git log graph still faithful structure history beforeandafter shot quite fit cool ignore gratuitously awesome ascii art place source stop one git log tidbit wanted another one back git released talked way change output log git log format git format learned verb use part email address preceding working repository everybody company share email domain address useful seeing usernames without wasting space printing domain curious try git log format h c cyan al c yellow one company repository source learn sample change latest version check release note previous version git repository casing verb indicates whether show email address without applying mailmap translation
122,Lobsters,vcs,Git & VCS,Mercurial's Journey to and Reflections on Python 3,https://gregoryszorc.com/blog/2020/01/13/mercurial's-journey-to-and-reflections-on-python-3/,mercurial journey reflection python,porting mercurial python september june january april decision mercurial code base large attempt flag day conversion mercurial needed way run code much code python may june modern import convention history december type binary design use unicode based representing data flat wrong use case july previously blogged october april grew time eventually became six commit message search december march hg init started working well hg status hg commit track test passed python evolution file may november refined output black want underscore opinion reflected reflect overall mercurial project even consensus within future python mercurial mercurial still officially support python invariant detected test matter good test coverage removing python version bridge code likely require hundred commits nontrivial effort pyoxidizer commentary python succinctly experience porting mercurial project python significantly soured perception python much historically loved python language welcoming community still struggling understand python could manage inflict much hardship community choosing transition plan universally recognized failure nearly year python took away consistent syntax denoting bytesunicode string literal restored python initial approach python mirror folly many developer project make attempting rewrite instead performing incremental evolution powering ecosystem ripple effect failed rewrite percolate throughout ecosystem last year many second order effect see python poor choice made late inflicting significant hardship still seven year think forced conclude python effectively kneecapped year questionable implementation choice prevented user incurring incremental transition major language version known much opportunity energy squandered approach assuming world unicode flat wrong significant implication system level application reality impossible abstract difference operating system behavior without compromise result data loss outright wrong behavior loss functionality python attempt anyway making python unsuitable least highly undesirable certain system level application rely allows access osstr really soured python point time effort required port python staggering mercurial python introduces ton problem nt really solve many effectively sludged mud several year wind state feel strictly worse started sure strictly better year point talking year transition call python transition disruptive distracting project would understatement project maintainer natural ask could accomplished nt forced carry sideshow like encourage python project conduct thorough postmortem transition python,mercurial released november first version mercurial support python milestone come nearly year python first released december speaking maintainer mercurial avid user python feel like experience making mercurial work python worth sharing number lesson learned post logically divided two section mostly factual recount mercurial python porting effort opinionated commentary transition python python language ecosystem whole nt care mechanic porting large python project python may want skip next section two porting mercurial python let start brief history lesson mercurial support python told commit history mercurial version control tool first released april month git initially released version came march first reference python found code base september much happens june someone author bunch change make python c extension start recognize python thing quiet january handful change landed remove argument raise handful commits nothing worth calling mercurial meaningful journey python started code work started april effort make mercurial test harness run python part decision python released several month later september would minimum python version mercurial would support mercurial project decided wanted port python opposed another language one earliest decision perform port mercurial code base large attempt flag day conversion would python version python version one day everyone would switch python mercurial needed way run code much code python would maintain single code base user would gradually switch running python python may mercurial dropped support python dropping support older python version critical effectively impossible write python code ran wide gamut version incompatibility syntax language feature example needed python get print via future import printfunction project late start python port significantly attributed python compatibility holding u back main goal mercurial early porting work getting code base point import mercurial would work myriad place mercurial used syntax invalid python python could nt even parse source code let alone compile bytecode execute effort began earnest june global source code rewrite like using modern octal syntax modern exception catching syntax except exception e instead except exception e print instead print modern import convention along use future import absoluteimport early day port first goal get source code parsing valid python next step get module importing cleanly entailed fixing code ran import time work python thinking would need code base import clean python seriously thinking runtime behavior reality quickly ported lot module import cleanly moved higherlevel porting leaving longtail module import failure initial porting effort played month nt many people working early day people would basically hack python form itch scratching project energy focused improving existing python based product get rough idea timeline participation early porting effort history see test added december june code base ported modern import convention ready move meaningful porting one biggest early hurdle porting effort overcome string literal type mismatch python python string literal sequence byte python string literal sequence unicode code point fundamentally different type mercurial code base string type binary design use unicode based str representing data flat wrong use case knew mercurial would need eventually switch many string literal b preserve type compatibility would problematic early day mercurial python port mercurial project maintainer matt mackall set ground rule python port nt overly disrupt others wanted python port le happen background require every developer aware python lowlevel behavior order get work done existing python code base may seem like questionable decision probably disagreed extent time python porting work decision constrained work correct decision matt knew would year python port either necessary resulted meaningful return investment value proposition python always weak mercurial python nt demonstrate compelling advantage python use case matt trying minimize externalized cost python port would inflict project correctly recognized maintaining existing product supporting existing user important longterm bet infancy ground rule meant mass insertion b prefix everywhere desirable would require developer think whether type byte str distinction nt worry python practically never used unicodebased string type mercurial addition practical issue bulk b prefix insertion one added b character would cause lot line grow beyond length limit reformat code would require manual intervention would significantly slow porting subissue adding b prefix reformatting code would break annotateblame tolerable latter issue addressed teaching mercurial annotateblame feature skip revision project convention annotating commit message skipblame reason structural change easily ignored performing annotateblame stopgap solution b everywhere issue came july introduced custom python module importer rewrote source code part import running python previously blogged hack transparently add b prefix unprefixed string literal well modify common function called would nt need modify source code thing would run natively python source transformer allowed u benefit progressing python port without rewrite ten thousand line source code solution hacky enabled u make significant progress python port without externalizing lot cost onto others thought source transformer would relatively shortlived would removed shortly project inevitably decided go python surprise others built additional transforms year source transformer persisted way october removed first nonalpha python compatible version mercurial released common problem mercurial faced making code base dual python native dealing standard library difference problem stemmed change python change within version python wallpaper well april mercurialpycompat module introduced export alias wrapper around standard library functionality abstract difference python version file grew time eventually became mercurial version six honest sure used six beginning six probably would saved work eventually write lot shim converting str byte would needed invent pycompat layer form anyway sure six would saved enough effort justify baggage integrating party package mercurial mercurial accepts party package downstream packagers like debian get hot bothered end making questionable patch source code prefer minimize surface area problem minimizing dependency party package source transforming module importer pycompat compatibility shim started focus earnest making core functionality actually work python established convention annotating changesets needed python commit message search yield lot history nt full history since every python oriented change used convention see history source importer landed lot porting effort spent thing early hg process lifetime included handling environment variable loading config file argument parsing introduced test track progress hg command working python early history file show various error message changing underlying early process functionality slowly ported work python december hg version working python basic hg command dispatch ported python end represented inflection point python porting effort early process functionality working different people could pick different command code path start making code work python march basic repository opening hg file worked shortly thereafter hg init started working well hg status hg commit well within month enough mercurial functionality working python started track test passed python evolution file show reasonable history porting velocity may dropped support python significantly reduced complexity supporting python ton functionality python made easier target python hand untied utilize november landed test harness feature report exception seen test run later refined output frequent failure reported prominently feature greatly enabled ability target common exception allowing u write patch fix prevalent issue python uncover previously unknown failure end structural piece place complete port essentially required point time labor nt formal mechanism place target porting effort instead people would pick component test wanted hack make incremental change towards making work nt strict policy regressing python regression python porting progress semifrequent although tend correct regression quickly time developer saw flurry python patch slowly grew awareness accommodate python number python regression became le frequent useful sourcetransforming module importer incurred additional burden porting effort source transformer effectively converted unprefixed string literal byte literal b preserve string type behavior python various aspect python nt like existence byte various standard library functionality wanted unicode str nt accept byte even though python implementation used equivalent byte pycompat layer grew pretty large accommodate calling various standard library functionality another sideeffect nt initially anticipate kwargs calling convention python allows use dict string key turn key named argument function call python requires dict key str outright reject byte key even byte instance ascii safe underlying byte representation string data str instance would invent support function would convert dict key byte str use kwargs another convert kwargs dict str key byte key could use syntax access key source code also string type front sprinkle codebase raw string literal r force use str irregardless python version running source transformer changed unprefixed string literal existing r string would preserved str blind transformation string literal byte le ideal impose unwanted sideeffects string mercurial byte design thought would easier byteify string selectively undo native string actually warranted like key dicts take upfront cost examine every string make intelligent determination type go back forth whether correct call factor source transforming module importer unblocked python porting time project history much focus improving core product without externalizing many cost onto people critical core product work think right call mid number test failure python whittled reasonable le daunting number felt like victory grasp inevitable significant issue lingered one remaining question around addressing difference python version time python released scheduled release end year surprising number issue difference python version many u running python fewest failure spend extra effort get python working well another task deferred second half standing robust ci python coverage minimal wanting distraction pyoxidizer bit wanting overhaul mercurial ci system officially built buildbot cobbled together serverless ci system built top aws dynamodb storage lambda function cloudwatch event business logic spot instance job execution ci system executed python variant test harness linux python window gave developer insight versionspecific failure importantly also gave insight window failure previously well tested discovered python window lagging significantly behind posix time mercurial developer meetup october nearly test passing posix platform confident could declare python support least beta quality mercurial release planned early november one blocker ripping alpha label python support removing sourcetransforming module importer performance implication nt something wanted ship felt hacky blocker wanted automatically format source tree black removed source transformer rewrite lot source code apply change transformer performing would necessitate wrapping lot line would involve lot manual effort wanted blacken code base first mass rewriting source code would nt involve lot tedious reformatting since black would handle u automatically rewriting source tree black blocked specific feature landing black agree black behavior unwrapping commadelimited list item could fit single line one core contributor wrote patch black changed behavior trailing list item force item formatted multiple line personally find multiple line formatting much easier read behavior arguably better code review annotation line based feature landed black reformatted source tree started ripping source transformation starting inserting b literal everywhere late october source transformer ready release beta quality support python least unixlike platform described mostly factual overview mercurial port python time shift gear speculative opinionated part post want underscore opinion reflected reflect overall mercurial project even consensus within future python mercurial mercurial port python still ongoing shipped python support test harness clean python view shipping milestone arguably important one longer journey still lot work python support officially dead perspective python language maintainer linux distribution starting rip python package dropping python support new version world moving python mercurial still officially support python still yet determined long retain support python code base one release supporting python user still need port extension implemented python user still need start widely using mercurial python even developer need switch python old habit hard break anticipate long tail random bug mercurial python test may pas code coverage even python dynamic language ton invariant nt caught compile time discovered run time invariant detected test matter good test coverage featurelimitation dynamic language user likely finding long tail miscellaneous bug python year present code base littered ton random hack bridge gap python python support dropped need remove hack make source tree python native minimal shim wallpaper difference python version removing python version bridge code likely require hundred commits nontrivial effort likely deemed low priority glorified busy work code express purpose supporting python likely linger year also still shoring packaging distribution story python easier platform others created pyoxidizer partially poor experience python application packaging distribution mercurial project mercurial project already signed using pyoxidizer distributing mercurial future look oxidized mercurial distribution near future could argue pyoxidizer epic yak shave better support mercurial another post window support python powered mercurial window still handful known issue may require release consider python window stable still code base must support python adoption python feature limited python feature mercurial developer seem almost universally get excited type annotation already people playing around pytype using commentbased annotation pytype already caught bug eager go type annotation uncover lot dynamic typing bug poorly implemented apis beyond type annotation ca nt name feature people screaming adopt make lot sense mercurial long tail minor feature sure get utilized none marquee feature define major language release seem interesting u time tell commentary python described mercurial ongoing journey python want focus python opinion nt reflect mercurial project succinctly experience porting mercurial project python significantly soured perception python much historically loved python language welcoming community still struggling understand python could manage inflict much hardship community choosing transition plan believe python choice represent terrific example managing large project ecosystem maintainer largelydeployed system would benefit taking time understand reflect python misstep python released december took better part decade community embrace universally recognized failure hindsight many issue python obvious time could mitigated language maintainer accommodating dare say empathetic user initially python rather cavalier attitude towards backwards forward compatibility early year python attitude python maintainer python new better language target explicitly tool method ease transition nothing super polished especially early year adoption python overall community slow python developer wild justifiably complained value proposition python weak justify porting effort helping early advice targeting python rewrite source code become python native contrast using source run python library application maintainer potentially meant maintaining separate version code forcing endusers make giant leap would realistically orphan user old version fragmenting user base neither great alternative understand many project nt bite many project nontrivial size flag day transition python simply viable pathway python make code dual python compatible gradually switch runtime python initial version python made effectively impossible let give specific example python string literal effectively array byte python series unicode code point fundamentally different type python could write b explicit string literal byte could write u indicate unicode literal mimicking python behavior python could write b create byte instance whatever reason python initially removed u syntax meaning nt easy way explicitly denote type string literal consistent python python released september restored u support making viable write python source code worked python nearly year python took away consistent syntax denoting bytesunicode string literal another feature formatting string python allowed use formatting operator string type python initially removed implementation byte clue perfectly reasonable splice byte sequence buffer via use formatting string python language maintainer insisted otherwise nt community complained absence loudly enough feature restored python released september fun fact lack feature considered blocker mercurial moving python mercurial us byte almost universally meant nearly every use would changed something else day python byte still nt format method alternative effectively string concatenation massive step backwards expressiveness formatting initial approach python mirror folly many developer project make attempting rewrite instead performing incremental evolution established project large scale rewrite often go poorly python exception yes code level cpython likely python implementation incremental change python using code base language standard library level difference python significant enough even python core maintainer considered new language therefore rewrite random project attempt rewrite fails blast radius often contained project maybe nt publish new release soon otherwise would powering ecosystem ripple effect failed rewrite percolate throughout ecosystem last year many second order effect see python poor choice made late inflicting significant hardship still initial restrained adoption python obvious python ecosystem overwhelmingly rejected initial boil ocean approach python python maintainer eventually got message started restoring feature like u byte formatting back language placate community python accumulating new feature cumulative sum feature compelling enough win user many project including mercurial python first viable porting target python python released september almost year python released december seven year ecosystem falter long generally healthy may saved python total collapse python still going strong people generally happy really think python dodged bullet massive window language could hemorrhaged critical amount user base relegated afterthought one could draw analogy perl lost php python ruby whose fall grace aligned lengthy transition perl look back early history python think forced conclude python effectively kneecapped year questionable implementation choice prevented user incurring incremental transition major language version known lost year python much opportunity energy squandered yes python still healthy today python finally adopted scale earlier version python empathetic towards python user porting python python would even stronger community artificially hindered year wo nt know thing could looked like python core language team spent time paving smoother road major language version clear think python generally better language python fewer wart compelling feature better performance except startup time still slower python ecstatic community finally rallying around python python coding reached point curse breath need support python even older version python like wish world would move adopt future already would remiss failed mention gripe python beyond transition shenanigan perhaps least favorite feature python insistence world unicode python default string type backed byte python default string type backed unicode code point part transition large part standard library operate unicode space instead domain byte understand python want string unicode nt want user spend much energy thinking use str versus byte approach admirable somewhat defensible take stand solution arguably good enough user however approach assuming world unicode flat wrong significant implication system level application like version control tool myriad place python standard library python insists using unicodebacked str type reject byte example various networking module refuse accept byte hostnames url http library wo nt accept byte http header name value function proxy posixdefined function wo nt accept byte even though posix function call using char nt unicode aware filename handling python assumes existence global encoding filename us encoding convert str byte despite posix filesystem path bag byte rule terminates filename special case like python refusing accept byte thing like http header name spit wire byte python pendulum swung far towards unicode opinion python need accommodating allow byte make sense hope pendulum knock sense people swing back towards reasonable solution better acknowledges reality world live area like filename handling world complicated python effectively abstraction layer operating system apis exposing functionality often impedance mismatch operating system example posix linux tends use char everything nt care encoding window tends use bit character type encoding worm reality impossible abstract difference operating system behavior without compromise result data loss outright wrong behavior loss functionality python attempt anyway making python unsuitable least highly undesirable certain system level application rely like version control tool fairness python nt programming language get wrong language seen properly implement higherorder abstraction top operating system facility rust whose approach generalized use python solution normalizing default expose escape hatch allow access raw underlying type apis used operating system advanced consumer require example rust path type represents filesystem path allows access raw osstr value used operating system normalization byte unicode may lossy allows consumer eg create retrieve osnative filesystem path without data loss functionality critical domain python awarenessinsistence world unicode nt universally reduces python applicability domain speaking rust mercurial developer meetup october discussing use rust mercurial one core maintainer blurted something along line rust current state year ago mercurial would likely ported python rust instead python crazy initially sounded think agree assessment benefit hindsight key player python porting effort seeing complication headache python introducing learned rust witnessed benefit performance control correctness firsthand porting rust would likely correct move project point time however sure would opt rewrite rust today rewrite folly know one thing certainly would nt implement new version control tool python would probably choose rust implementation language new project system level space expected shelf life year really blog awesome rust back topic python really soured python point time effort required port python staggering mercurial python introduces ton problem nt really solve many effectively sludged mud several year wind state feel strictly worse started sure strictly better year point talking year transition call python transition disruptive distracting project would understatement project maintainer natural ask could accomplished nt forced carry sideshow ca nt shake feeling lot pain afflicted python transition could avoided python language leadership made different set decision highly prioritized transition experience like initially removing feature like u byte introducing gratuitous backwards compatibility break like item iteritems would also liked see feature like future maybe past would make easier python code target semantics earlier version order provide turnkey onramp onto new version simultaneously see python losing position justifiable tool domain like system level tooling due ongoing design decision poor implementation like startup overhead problem contrast see rust excelling python faltering find rust code surprisingly expressive write maintain given lowlevel therefore feel rust compelling alternative python surprisingly large number domain look know easy armchair quarterback critique benefit hindsightignorance sure lot nuance sure disagreement within python community lot issue maintaining large successful programming language community like python hard nt going please people time speaking maintainer mad respect people leading large community nicety aside everyone know python transition rough could gone better taken year get today like encourage python project conduct thorough postmortem transition python identify went well could gone better done next time large language change wanted speaking python user maintainer python project someone industry skeptical use python work due risk potentially company crippling higheffort migration future postmortem would help restore confidence python maintainer learned various misstep road python potentially ecosystem crippling mistake wo nt made python wildly successful past decade continue thrive several python migration painful involved much need move leave python behind u important lesson learned hope python community take opportunity reflect confident grow stronger taking time
124,Lobsters,vcs,Git & VCS,SourceHut prohibits repos with “large binary files”,https://twitter.com/stevelosh/status/1215814068549742593,sourcehut prohibits repos large binary file,,detected javascript disabled browser would like proceed legacy twitter yes
125,Lobsters,vcs,Git & VCS,Ensure your pull requests follow the Conventional Commits spec,https://github.com/zeke/semantic-pull-requests,ensure pull request follow conventional commits spec,semantic pull request semanticrelease conventional commit message probot alternative work enough semantic information configuration semantic example scenario conventional commit type installation githubcomappssemanticpullrequests configuration alternative amannnactionsemanticpullrequest license apache,semantic pull request github status check ensures pull request follow conventional commits spec using semanticrelease conventional commit message install probot app repos ensure pull request semantic merge wan na check pull request using github action workflow instead see alternative work note default behavior bot police commit message rather ensure every pr enough semantic information able trigger release appropriate goal gather semantic information way nt make life harder project contributor especially newcomer may know amend git commit history default pr title least one commit message need semantic prefix wish change behavior see configuration section scenario status status check message pr title semantic ready squashed commit semantic ready merged rebased nothing semantic add semantic commit pr title example scenario take pr example none commit message semantic pr title status remains yellow edit pr title adding semantic prefix like fix feat conventional commit type use squash merge squash branch onto master write standardized commit message installation githubcomappssemanticpullrequests configuration default configuration necessary wish override behavior add semanticyml file github directory following optional setting always validate pr title ignore commits titleonly true always validate commits ignore pr title commitsonly true always validate pr title commits titleandcommits true require least one commit valid relevant using commitsonly true titleandcommits true validate commits default anycommit true define list valid scope scope default type specified commitizenconventionalcommittypes used see http override valid type type feat fix doc style refactor perf test build ci chore revert allow use merge commits eg github merge branch master featurerideunicorns relevant using commitsonly true titleandcommits true allowmergecommits true allow use revert commits eg github revert feat ride unicorn relevant using commitsonly true titleandcommits true allowrevertcommits true alternative project github app install one many repository making convenient choice want use lot different repos even entire github organization full repos however want control exactly pull request semantically checked consider writing custom action workflow using github action like amannnactionsemanticpullrequest license apache
126,Lobsters,vcs,Git & VCS,Dealing with multiple git hosts,https://utf9k.net/blog/multiple-git-hosts/,dealing multiple git host,live github repository openbsd manual page server,note time writing using gitlab see reference dotfiles living moved back github kept reference gitlab post intact using work laptop like keep copy dotfiles tool work sync tool home live github repository personal account use plain old git sync change order push pull change github use ssh key rather password easy enough generate one course also one internal repository work juggling two sometimes annoying setting fresh laptop without proper configuration usually forget look like quick walkthrough juggle multiple git host let look barebones ssh configuration file cat sshconfig host githubexamplecom identityfile sshwork host gitlabcom identityfile sshpersonal host githubcom identityfile sshpersonal got three different host two different ssh key whenever use ssh check see host block defined match host provided use corresponding configuration let see look action ssh git githubexamplecom hi marcus successfully authenticated github provide shell access ssh git gitlabcom welcome gitlab marcuscrane connection githubexamplecom us key stored sshwork connection gitlabcom used key stored sshpersonal perfect also add additional configuration specific one host let look example option cat sshconfig host githubexamplecom identityfile sshwork host gitlabcom identityfile sshpersonal loglevel verbose host githubcom hostname notarealuser identityfile sshpersonal mostly two new command loglevel hostname let see action dive bit deeper ssh git githubcom ssh could resolve hostname notarealuser name service known ssh git gitlabcom authenticated gitlabcom welcome gitlab marcuscrane transferred sent received byte second byte per second sent received see sent request githubcom interpreted corresponding host block attempting log someone called notarealuser git server user default git generally part remote anyway see whenever run git remote add origin git githubcomuserblah git remote v quite handy regular server however instead connecting ssh user blahnet add username host block shorten command ssh blahnet loglevel command fairly straight forward set higher level logging see detail ssh hood specific host getting error message internal git host could toggle loglevel debug see request making way host example sure sort interesting stuff could post meant comprehensive mean reminder create ssh config file see various command offline running man sshconfig also read online via openbsd manual page server happy sshing
127,Lobsters,vcs,Git & VCS,Problems with Pull Requests and How to Fix Them,https://gregoryszorc.com/blog/2020/01/07/problems-with-pull-requests-and-how-to-fix-them/,problem pull request fix,git requestpull core pull request fundamentally nice ui feature layer built around common git feature branch workflow think time industry scrutinize pull request model evolve something better problem pull request posit foremost goal pull request foster incorporation high quality desired change target repository minimal overhead complexity submitter integrator everyone google previous study found number useful comment decrease review latency increase size change increase developer feel sizerelated factor greatest effect review latency developer strongly encouraged make small incremental change takeaway care defect rate quality andor velocity authoring reviewing smaller change opposed fewer larger change current implementation pull request actively discourages many smaller change workflow since smaller change result higher quality faster review today implementation pull request undermining quality velocity posit order u author smaller change must either create smaller pull request b pull request review put emphasis individual commits opposed overall game ref ghstack nt think implement multiple pull request model reliably without causing excessive burden people without fundamentally changing requirement pull request git branch nt think smaller change workflow easily practiced multiple pull request using common github model without effectively moving definition pull request away equivalence git branch gitlab evidence since larger change result higher defect rate slower review github default showing effectively mean github defaulting lower quality longerlasting review could offering project practice option change review default emphasizes individual commits instead submitter reviewer make effort craft subsequently review individual commits reward feedback discrete unit change get lumped together one massive pile feedback pull request whole order execute percommit review effectively review comment discussion need bucketed commit combined unified pull request timeline pull request unit integration read wait every commit reviewed integration occur author maintainer see change ready integrate prefer integrate soon possible without delay integrating often feel better progress principle need cognizant confuse movement meaningful progress think real power progress principle aim incorporate change soon ready later must argument overly hinge assumption smaller change superior quality andor velocity design workflow around assertion even nt buy change size argument there still valid reason think beyond pull request implemented today tool scalability named jgit reftable july unfortunately tight coupling pull request git branchesrefs introduces unbound growth myriad problem associated exploring alternative model use vcs data exchange zawinski law doc gitcinnabar use version control tool wire protocol part introduced problem scaling version control server guarantee easier scale http web service fronting relational database version control server commit tracking tracking commits another one area simpler modern feature pull request often nt work well solution came using explicit stable identifier track commits far robust heuristic pull request rely mean people perform advanced history rewriting near impunity would affect textbook example tooling deficiency dictating suboptimal workflow outcome pull request nt track commits explicitly im forced adopt nonideal workflow sacrifice something like commit quality order minimize risk review tool wo nt get confused another benefit tracking identifier enable percommit review viable http secondary benefit percommit review model enables incremental integration workflow commits series set integrate others without wait entire batch designing better integration request lot replace fork first change would make pull request move away required part workflow overwhelming majority case exists solely vehicle initiate pull request repository forked case someone wanting propose change repository strictly required existence imposed u current implementation pull request merely used vehicle initiate believe offer enough value justify existence preferred alternative fork use directly canonical repository shift focus branch individual commits ideal revolves around individual commits branch worth noting commitcentric model imply everyone writing reviewing series smaller commits making commitcentric nt force people adopt different commit authorship workflow enable project wish adopt commit hygiene best around need built robust http api conclusion,probably used least heard pull request pull request contribution workflow practiced made popular code collaboration site like github gitlab bitbucket others someone optionally creates fork author commits push branch creates pull request track integrating commits target repository branch pull request used vehicle code review tracking automated check discussion ready integrated integration usually performed project maintainer often click merge button pull request web page worth noting term pull request universally used gitlab call merge request example furthermore regard term pull request merge request poorly named term conflated terminology used version control tool eg git pull git merge implementation pull merge request may even perform pull merge also rebase pullmerge request nobody calling rebase request modern day pull request much version control tool operation even simple request pull merge branch nexus track integration proposed change change integrated ala github coined term popular collaboration platform implementing functionality refer general workflow implemented github gitlab bitbucket others pull request remainder post pull request existed essentially current form decade core workflow remained mostly unchanged different addition valueadd feature integrating status check like ci result ability rebase squash commits instead merging code review tooling improvement lot ui polish gitlab deserves call implementation merge request track much tool sideeffect gitlab builtin feature comparable tool also give kudos gitlab adding new feature pull request github asleep wheel company year ago ceo clear productcompany leadership really showed fortunately company others churning new useful feature terrific clip greatly benefiting industry nt evidence suspect pull request forking model used service implement came existence someone thought design collaboration web site built top git new novel distributed nature branching feature proceeded invent forking pull request pull request implemented github initially veneer common git workflow create clone create branch send somewhere without github would run git clone git branch command like git requestpull seen word generatesend branch somewhere github comparable step roughly create fork create branch fork submit pull request today even straight web interface without run git directly mean github conceptually thought purely serverside abstractionimplementation git feature branch workflow core pull request fundamentally nice ui feature layer built around common git feature branch workflow likely initially conceived polish valueadd feature historically clientside workflow core property pull request first day copied vendor like bitbucket gitlab bitbucket case implemented mercurial git bitbucket initially mercurial decade eternity computer industry say nt moving forward moving backward think time industry scrutinize pull request model evolve something better know thinking thinking pull request work great popular superior model compared came statement aside nuance true live version control space like paid deliver tool workflow developer improve productivity codeproduct quality deficiency pull request workflow implementation workflow among vendor like github gitlab bitbucket etc obvious begging overhauled replaced wholesale buckle started ten thousand word adventure everything nt think wanted know pull request problem pull request build better workflow first understand wrongsuboptimal pull request posit foremost goal pull request foster incorporation high quality desired change target repository minimal overhead complexity submitter integrator everyone pull request achieve goal fostering collaboration discus change including code review tracking automated check change linking related issue etc word way see world specific vendor pull request implementation implementation detail like implementation detail frequently scrutinized changed necessary let start dissecting problem pull request focusing size review unit research google microsoft others shown inverse correlation review unit size defect rate google word emphasis mine size distribution change important factor quality code review process previous study found number useful comment decrease review latency increase size change increase size also influence developer perception code review process survey mozilla contributor found developer feel sizerelated factor greatest effect review latency correlation change size review quality acknowledged google developer strongly encouraged make small incremental change exception large deletion automated refactoring finding study support value reviewing small change need research tool help developer create small selfcontained code change review succinctly larger change result fewer useful comment review meaning quality undermined make review take longer meaning productivity undermined takeaway care defect rate quality andor velocity authoring reviewing smaller change opposed fewer larger change stronger agree google opinion matter wholeheartedly endorse writing smaller change practiced form change authorship say without doubt smaller change superior superior author superior code reviewer superior people looking repository history later main downside model requires bit knowledge version control tool execute requires corresponding tooling play well change authorship model introduce little friction possible along way since number interaction tooling increase change size decrease velocity increase distinct unit change considered integration last point important germane post common implementation pull request today compatible many small change workflow argue current implementation pull request actively discourages many smaller change workflow since smaller change result higher quality faster review today implementation pull request undermining quality velocity nt mean pick since popular people made pull request popular let use github implementation pull request demonstrate point posit order u author smaller change must either create smaller pull request b pull request review put emphasis individual commits opposed overall merge diff let examine individually author smaller pull request would seemingly necessitate need dependency pull request order maintain velocity dependency pull request add potentially prohibitive amount overhead let explain nt want sacrifice overall rate author maintainer able integrate proposed change split existing proposed change smaller pull request would lot pull request without dependency author could wait pull request integrated sending next one would incur round trip author integrator would almost certainly slow overall process desirable obvious mitigation allow multiple related pull request flight simultaneously would necessitate invention dependency pull request order track relationship one pull request nt integrate another logically depends certainly technically doable imposes considerable overhead define dependency dependency automatically detected updated based commits dag yes happens force push ambiguous whether new commit logically new commit successor previous one really want impose additional hurdle submitter define dependency every pull request extreme case one pull request per commit make someone submitting series say twenty commits pull request really annotate nineteen dependency crazy another practical issue play interplay git branch pull request implemented github pull request tracked git branch n interdependent pull request mean n git branch worst case one git branch every git commit managing n inflight git branch would absurd would impose considerable overhead pull request submitter would perfectly highlight inefficiency git game ref branch management blogged two year ago succinctly accustomed workflow like mercurial nt require name commits branch git forced naming branch command requiring branch name feel grossly inefficient mountain overhead tooling could certainly implemented enable efficient submission pull request see ghstack example think interplay git branch github pull request sufficiently complex tooling workflow would intractable anything trivial bestcase scenario keep mind sufficiently userfriendly solution problem would also entail improving git rebase move branch rewritten ancestor commits instead leaving old version commits seriously someone implement feature arguably make sense default behavior local branch word nt think implement multiple pull request model reliably without causing excessive burden people without fundamentally changing requirement pull request git branch love proven wrong therefore nt think smaller change workflow easily practiced multiple pull request using common github model without effectively moving definition pull request away equivalence git branch later also nt mean imply dependency pull request ca nt implemented gitlab evidence gitlab implementation somewhat simple crude possibly anything complicated really hard speculate without fundamentally changing relationship pull request branch leaf u alternative pull request putting emphasis individual change rather merge diff let talk pull request historically placed emphasis merge diff github another provider take git branch submitted run git merge target branch behind scene display diff front center review main proposed unit change click file changed tab commence review seeing overall merge diff click commits tab select individual commit review commit use dropdown file changed tab select individual commit review relatively new feature welcome improvement facilitate performing commitbycommit review requirement realize benefit smaller change workflow unfortunately far sufficient fully realize benefit workflow default matter github default show merge diff conducting review bet large percentage user nt even know possible review individual commits since larger change result higher defect rate slower review github default showing merge diff effectively mean github defaulting lower quality longerlasting review suppose good engagement number inflates service usage immediately longterm due subsequent bug driving usage sincerely hope product manager thinking let design product undermines quality drive engagement unfortunately trivial change default show individual commits instead merge diff simple many author project nt practice clean commit authorship practice individual commits authored reviewed isolation one way classifying commit authorship style whether series commits authored commit good isolation whether effect applying overall series matter handful mature project like linux kernel firefox chrome git mercurial practice series individuallygood commits model call commitcentric workflow would wager majority project github similar service practice care final result series commits model litmus test practicing latter model whether pull request contain commits like fixup foo subsequent revision pull request create new commits instead amending existing one strong proponent clean commit history commit final repository history stand good isolation tend favor grownup software development practice version control guru said subjectdebate fodder another post github someone else switched pull request default percommit review without otherwise changing relationship pull request git branch would force lot le experienced user familiarize history rewriting git would impose considerable pain suffering pull request author would turn upset user hurt engagement etc therefore nt think feasible global default changed maybe git user experience history rewriting better nt decade behavior undo better position pull request implementation nt need make global change could right ship offering project practice clean commit practice option change review default emphasizes individual commits instead merge diff would go long way towards encouraging authoring reviewing individual commits positive benefit review velocity code quality outcome even service emphasize individual commits default pull request review still handful significant deficiency would undermine smaller change workflow desire possible review individual commits review comment still funneled single per pull request timeline view activity submitter reviewer make effort craft subsequently review individual commits reward feedback discrete unit change get lumped together one massive pile feedback pull request whole unified pile feedback currently poor job identifying commit applies give author little assistance knowing commits need amending address feedback undermines value commitcentric workflow effectively push commit author towards fixup style commit authorship order execute percommit review effectively review comment discussion need bucketed commit combined unified pull request timeline would massive change pull request user interface would daunting undertaking understandable nt happened yet undertaking would also require addressing subtly complex issue like preserve review face force push today github review comment lose context force push occur thing better used review comment left individual commits would flat deleted yes github really effectively lose code review comment several year even tooling improvement problem still remain adoption commitlevel review tracking occur technical problem would likely need resolution appease user workflow even github someone else implement robust percommit review pull request still problem velocity problem pull request unit integration read merging wait every commit reviewed integration occur may sound tolerable practice today argue le optimal world change integrates soon ready without wait change author maintainer see change ready integrate prefer integrate soon possible without delay longer readytointegrate change lingers longer susceptible bit rot change longer validgood due change system integrating judgedgood change sooner also reduces time meaningful feedback fundamental problem early series change nt caught integration integrating earlier change sooner without waiting one following expose problem sooner minimizes delta changed system often making regression hunting easier often minimizes blast radius something go wrong give author time le pressure amend subsequent commits nt integrated yet addition integrating often feel better progress principle state people feel better perform better work making continuous progress setback offset power small win aware explicit research area interpretation progress principle change authorship project maintenance supported anecdotal observation steady stream integrated change feel hell lot better single monolithic change lingering review purgatory often seem like eternity need cognizant confuse movement meaningful progress think real power progress principle aim incorporate change soon ready later applied version control code review mean integrating commit soon author reviewer machine overlord reporting status check agree ready without wait larger unit work like pull request succinctly move forward soon able desire integrate faster significant implication pull request looking github implementation pull request nt see today pull request could adapt desired end state without significant structural change starter review must grow ability track percommit state otherwise integrating individual commits without entirety part make little sense entail complexity described problem git branch effectively defining pull request happens commits pull request integrated author rebases merges local branch new change may may work nt work author easily find merge conflict hell one commit fails apply cleanly carefully curated stack commits quickly becomes liability impediment forward progress aside mercurial version control tool concept called changeset evolution track commits changesets mercurial parlance rewritten commits gracefully reacts situation like rebase example commits x x integrated via rebase x hg rebase onto x see x rewritten x skip attempting rebase x already applied cleanly sidestep lot problem history rewriting like merge conflict make enduser experience much pleasant result certainly possible integrate change soon ready pull request workflow think awkward time made enough change accommodate workflow little left pull request workflow know effectively different workflow altogether argument overly hinge assumption smaller change superior quality andor velocity design workflow around assertion strongly believe merit smaller unit change others may disagree disagree ask whether believe converse larger unit change better quality velocity suspect people ca nt justify believe merit argument smaller unit change impose additional perunit cost second order effect undermine touted quality velocity benefit even nt buy change size argument still valid reason think beyond pull request implemented today tool scalability implementation pull request today strongly coupled git work box pull request initiated git branch pushed remote git repository pull request created server creates git branchref referring pull request head commits github ref named pullidhead fetch remote git repository fetched default also pull request created updated git merge performed produce diff review github resulting merge commit saved pointed open pull request via pullidmerge ref also fetched locally merge ref deleted pull request closed herein resides scalability problem unbound growth git ref everincreasing rate change growing project git ref add overhead graph walking operation data exchange involved operation continuously getting optimized often use advanced data structure algorithm intrinsic scaling challenge unbound growth speaking version control tool maintainer want part technical solution enabling thing scale million git ref viable yesish requires higheffort solution like jgit reftable required review round spanned across month land design feature first proposed least far back july nt get wrong glad reftable exists yes fantastic solution real problem reading work probably make better engineer simultaneously solution problem need exist space scaling graph data structure algorithm million even billion node edge path version control tool million billion commits file fine scaling number distinct path graph introducing million dag head insane given much complexity introduces random area tool opinion requires unjustifiably large amount investment make work scale engineer inclination posed problem like avoid first place easiest problem solve nt unfortunately tight coupling pull request git branchesrefs introduces unbound growth myriad problem associated project may grow size experience problem someone experience problem space multiple company tell problem real performance scalability issue creates undermines viability using today implementation pull request reached certain scale since likely fix underlying scaling issue git nt think explosion git ref longterm deal breaker scaling pull request today remain git tool built top improve summary highlevel problem pull request follows review merge diff default encourages larger unit review undermines quality velocity outcome inability incrementally integrate commits within pull request slows velocity time meaningful feedback lower morale tight coupling pull request git branch add rigidity workflow shoehorn le flexible le desired workflow deficiency git user experience particular around happens rewrite including rebase occur significantly curtail workflow safely practiced pull request tight coupling pull request git branch lead performance issue scale invert language arrive set ideal outcome review experience optimized individual commits merge diff review unit smaller quality velocity outcome improved ability incrementally integrate individual commits larger set readytogo change incorporated sooner improving velocity time meaningful feedback morale use git branch impose significant restriction handling pull request use version control tool want without worry workflow shoehorned pull request work pull request server scale demanding use case relative ease let talk could achieve desirable outcome exploring alternative model pull request merely implementation pattern general problem space integrating proposed change pattern used tool describe want coin term integration request refer generic concept requesting change integrated elsewhere github pull request gitlab merge request implementation integration request example rather describe alternative tool detail outline key area different tool differ pull request ass benefit drawback different approach use vcs data exchange one classify implementation integration request utilize underlying version control tool git github came along probably running centralized version control tool nt support offline commits feature branch eg cv subversion world common mechanism integration request exchanging diffs patch various medium email post web service code review tool etc version control tool nt speak directly vcs server initiate integration request instead would run command would export textbased representation change send somewhere today classify integration request whether speak version control tool native protocol exchanging data whether exchange patch mechanism pull request speak vcs native protocol tool like review board phabricator exchange patch via custom http web service typically tool using nonnative exchange require additional clientside configuration including potentially installation custom tool eg rbtools review board arcanist phabricator although modern version control tool sometimes functionality builtin eg git mercurial fulfill zawinski law mercurial phabricator extension official distribution interesting outlier gerrit ingests integration request via git push see doc way gerrit ingestion via git push work fundamentally different pull request work pull request pushing local branch remote branch pull request built around remote branch gerrit push command like git push gerrit head refsformaster nongurus head refsformaster syntax mean push head commit effectively commit corresponding working directory refsformaster ref gerrit remote source dest syntax specifies mapping local revision identifier remote ref wizard behind curtain gerrit run special git server implement nonstandard behavior refsfor ref push refsformaster gerrit receives git push like normal git server would instead writing ref named refsformaster take incoming commits ingests code review request gerrit create git ref pushed commits mainly internal tracking gerrit store data git git data review comment functionality nt magical also pas parameter gerrit via ref name eg git push gerrit head refsformaster private create private review request requires special permission see debatable whether overloading ref name additional functionality good user experience average user ca nt argue nt cool hack surface may seem like using version control tool native data exchange superior workflow native modern emailing patch old school gone day configure clientside tool export submit patch instead run git push change turned integration request automatically mouse click technical level exchange methodology likely safer roundtripping textbased representation change without data loss surprisingly finicky eg json lack lossless binary data exchange without encoding eg first often mean many service exchanging textbased patch lossy especially presence content nt conform commonplace test would surprised many tool experience data loss converting version control commitsdiffs text digress git wire protocol exchange binary data safer exchanging text patch probably easier use since nt require additional clientside configuration despite native modern arguably robust exchange via version control tool may better starter use version control tool native wire protocol inhibits use arbitrary version control tool client integration request requires use version control tool wire protocol client likely need running version control tool approach like exchange text based patch client could running software wanted long could spit patch api request format server needed integration request could created meant le potential lockin people could use tool machine wanted hopefully would nt inflicting choice others case point majority firefox developer use mercurial vcs canonical repository large number use git client firefox using phabricator review board bugzilla code review phabricator ingests textbased patch choice vcs client nt matter much choice server vcs made without inciting holy war among developer would forced use tool nt prefer yes good reason using consistent tool including organizational overhead sometimes mandate tool use justified many case random open source contribution probably nt nt matter case like git mercurial tool like fantastic gitcinnabar make possible easily convert repository without data loss acceptable overhead adoption version control tool native wire protocol exclude inhibit productivity contributor since mandate use specific undesired tooling another issue using version control tool wire protocol often force strongly encourages work certain way take github pull request example pull request defined around remote git branch git push want update branch need know name requires overhead either create track branch find name want update contrast gerrit nt explicit remote branch push simply git push gerrit head refsformaster figure thing automatically later gerrit nt create local git branch initiate integration request pull request compelled undermine productivity compelling practice lessefficient workflow final point comparison involves scalability use version control tool wire protocol part integration request introduced problem scaling version control server take someone multiple job involving scaling version control server intimately aware lowlevel detail git mercurial wire protocol nt want business scaling version control server wire protocol git mercurial designed nowancient era computing nt designed network protocol expert fundamentally difficult scale wire protocol level heard story one time expensive single server google perforce perforcederived server several year ago google since moved better architecture poor network protocol version control tool many sideeffects including inability sheer difficulty using distributed storage server order scale compute horizontally need invest expensive network storage solution devise replication synchronization strategy take someone worked data synchronization product outside source control space three company problem nt want solve data synchronization intrinsically difficult rife difficult tradeoff almost always problem best avoided choice matter creating git ref part creating integration request introduced scaling challenge number git ref git ref live forever happens thousand developer possibly working repository number ref ref mutation grows hundred thousand million per year version control server handle ingesting push every second two reasonable performance unless google facebook handful company aware ca nt cry talking problem plague company name handful company size behemoth problem also guarantee many people nt clientside metric git push time reliability nt even realize problem scaling version control probably core part company business unfortunately often becomes something company allocate resource poorly designed utilized tool contrast challenge scaling integration request native version control server versus exchanging patch primitive approach probably sending patch http web service tool like phabricator review board patch get turned row relational database guarantee easier scale http web service fronting relational database version control server nothing else easier manage debug ton expert domain version control server domain yes true many hit scaling limit version control server nifty solution scaling exist large segment problem space including version control tool maintainer support crazy scaling vector tool could avoided completely integration request nt lean heavily version control tool default mode operation unfortunately solution like github pull request gerrit use git ref storing everything exert lot pressure scaling version control server make real problem reach certain scale hopefully paragraph enlightened implication choice data exchange mechanism integration request let move another point comparison commit tracking one classify implementation integration request track commits integration lifecycle mean integration request follows logical change evolves example submit commit amend system know commit evolved commit x x pull request nt track commits directly instead commit part git branch branch tracked entity pull request built around review interface present merge diff front center possible view individual commits far know none tool smart explicitly track map commits across new submission instead simply assume commit order commits reordered added removed middle existing series tool get confused quite easily github possible review comment left commit disappear entirely behavior since corrected github nt know print comment previous commit render part pull request timeline view familiar pull request may realize alternative commit tracking fact common alternative nt nothing predates pull request entirely still practiced various tool today way gerrit phabricator review board work commit message contains unique token identifying integration request commit eg commit message phabricator review contain line differential revision http gerrit something like changeid way annotation appears commit message differs tool gerrit web ui advertises shell oneliner clone repository performs git clone also us curl download shell script gerrit server install git commitmsg hook newlycloned repository git hook ensure newlycreated commit changeid xxx line containing randomly generated hopefully unique identifier phabricator review board leverage clientside tooling rewrite commit message submission respective tool commit message contains url code review one debate approach better advantage drawback fortunately debate germane post wo nt cover important metadata commit message used commit message metadata come play commit ingested integration request commit message lack metadata reference entity nt exist receiving system assumes new metadata match entity file incoming commit often automatically matched existing commit even git sha different approach inserting tracking identifier commit message work surprisingly well tracking evolution commits even amend reorder insert remove commits tool often figure match previous submission reconcile state accordingly although support varies tool mercurial extension submitting phabricator smart enough take local commit dag account change dependency review unit phabricator reflect new dag shape example tracking commits another one area simpler modern feature pull request often nt work well solution came yes inserting identifier commit message feel hacky brittle time tool nt implement commit rewriting well lead poor user experience ca nt argue result using explicit stable identifier track commits far robust heuristic pull request rely false negativepositive rate much lower know first hand experience attempted implement commit tracking heuristic code review tool mozilla phabricator deployed surprising number corner case could nt handle properly using mercurial obsolescence marker gave u commit evolution data generated directly version control tool nt work well enough hard imagine heuristic would eventually gave used stable identifier commit message fixed annoying corner case use explicit commit tracking identifier may seem like make meaningful difference impact profound obvious benefit tracking identifier allow rewriting commits without confusing integration request tool mean people perform advanced history rewriting near impunity would affect integration request heavy history rewriter like curating series individually highquality commits stand isolation submit series like github pull request receive feedback something need change enact change think rewriting history make rereview harder try empathetic reviewer make life easier whenever possible ask would appreciate someone reviewing change tend github pull request reorder commits add remove commit middle series realize may make review comment left commits hard find since github wo nt able sort history rewriting may mean review comment get lost ultimately acted upon leading bug otherwise deficient change textbook example tooling deficiency dictating suboptimal workflow outcome pull request nt track commits explicitly forced adopt nonideal workflow sacrifice something like commit quality order minimize risk review tool wo nt get confused general tool externalize kind cost tradeoff onto user work optimize generally agreedupon ideal outcome another benefit tracking identifier enable percommit review viable track logical evolution single commit start associate thing like review comment individual commits high degree confidence pull request implemented today attempt associate comment commits unable track commits across rewrite acceptably high degree success rewritten commits often fall crack orphaning data like review comment data loss bad need place collect orphaned data main pull request activity timeline facilitates function track commits reliably tool like gerrit phabricator prove possible nt severe problem data loss therefore nt need worry finding place collect orphaned data able create percommit review unit loosely coupled commits overall series want make interesting note different approach different tool doubly interesting note behavior possible review tool default let examine phabricator phabricator review unit differential revision differential name code review tool phabricator actually suite functionality like gitlab nearly feature complete differential revision represents single diff differential revision parentchild relationship others multiple revision associated like form conceptual stack phabricator terminology go http search stack see action stack bit misleading name parentchild relationship actually form dag phabricator capable rendering thing like multiple child graphical view phabricator official client side tool submitting phabricator arcanist arc default behavior collapsing git commits single differential revision phabricator preserve metadata individual commits render least commit message web ui see differential revision came word default arcanist construct multiple differential revision commit therefore construct parentchild relationship stack render honest sure modern version arcanist even support know mercurial mozilla authored custom client side tool submitting phabricator work around deficiency like arcanist mozilla may may generally suitable user outside mozilla sure another interesting aspect phabricator concept overarching series instead differential revision stand isolation form parentchild relationship constitute stack primary ui apis stack last looked anyway may seem radical may asking question like track overall state series convey information pertinent series whole good question without diving answer radical sound overall tracking entity series differential revision work used workflow mercurial project year say missing functionality much gerrit also worth examining like phabricator gerrit us identifier commit message track commit whereas phabricator rewrite commit message initially submission time contain url created part submission gerrit pepper commit message unique identifier commit creation time server maintains mapping commit identifier review unit implementation detail aside end result similar individual commits tracked easily distinguishes gerrit phabricator gerrit stronger grouping around multiple commits gerrit track commits submitted together render relation chain submitted together list automatically lack visual beauty phabricator implementation effective shown ui default unlike phabricator another difference phabricator gerrit us percommit review default whereas need nonofficial client phabricator submit series commits constitute linked chain gerrit default far tell way tell gerrit squash local commits single diff review want single review appear must first squash commits locally push squashed commit topic later post secondary benefit percommit review model enables incremental integration workflow commits series set integrate others without wait entire batch incremental integration commits drastically speed certain workflow commits integrate soon ready longer benefit model incredible actually deploying workflow tricky one problem version control tool may get confused rebase merge partially landed state another problem increase overall change rate repository may strain system version control ci deployment mechanism another potential problem involves communicating review signoff integration signoff many toolsworkflows conflate sign change sign landing change effectively identical many case valid case want track distinctly adopting workflow commits integrate incrementally expose corner case go path want thinking integrates commits integrated probably thinking anyway important designing better integration request described problem pull request alternate way going solving general problem integration request time answer million dollar problem designing better integration request factor time people spend pull request cost bug low quality change slip due design existing tooling improving integration request industry wide would lot valuable reminder pull request fundamentally nice ui set feature built around common git feature branch workflow property preserved earliest day pull request copied vendor like bitbucket gitlab year since mind pull request ripe overhaul replace fork first change would make pull request move away fork required part workflow may seem radical nt fork service like github fully fledged project like canonical project forked issue wiki release pull request etc show hand often use feature fork neither overwhelming majority case fork exists solely vehicle initiate pull request repository forked serf little additional meaningful functionality saying fork nt serve purpose certainly case someone wanting propose change repository fork strictly required existence imposed u current implementation pull request said impose previous sentence fork introduce overhead confusion existence fork may confuse someone canonical project life fork also add overhead version control tool existence force user manage additional git remote branch force people remember keep branch sync fork remembering keep local repository sync nt hard enough pushing fork need repush data already pushed canonical repository even though data already exists server different view git repository believe git working wire protocol improvement mitigate merely used vehicle initiate integration request believe fork offer enough value justify existence fork exist yes people forced use order contribute change valid use case fork would perform community splinter project create independent entity reason better guarantee data availability integrity fork essentially veneer top serverside git clone reason separate git repository used probably earliest version github pile abstraction git command service took popularity people copied feature almost verbatim nobody ever looked back thought thing like first place answer would replace fork go back first principle ask trying propose unit change existing project version control tool need propose change patchcommit replace fork need alternate mechanism submit patchescommits existing project preferred alternative fork use git push directly canonical repository could implemented like gerrit push special ref eg git push origin head refsformaster preferred solution version control server could grow smart push work possibly even changing command like git push server operating special mode one idea would git server expose different ref namespaces depending authenticated user example indygreg github wanted propose change project let say pythoncpython would git clone git githubcom pythoncpython would create branch say indygregproposedchange would git push origin indygregproposedchange branch prefix match authenticated username server let open pull request without fork using branch prefix le ideal relatively easy implement server better approach would rely remapping git ref name may require bit configuration current version git user willing stomach even better solution would git grow functionality make easier eg git push workspace origin proposedchange would push proposedchange workspace origin remote git would know translate proper remote ref update another idea would version control server invent new concept exchanging commits one based set commits instead dag synchronization essentially instead complicated discovery dance synchronize commits underlying git repository server would ingest expose representation set commits stored next within repository way scaling repository dag infinite head hard problem concrete implementation might client run git push workspace origin proposedchange tell remote server store proposedchange branch personal workspace sorry reusing term previous paragraph git server would receive commits generate standalone blob hold save blob keyvalue store like update mapping commitsbranches blob data store relational database somewhere would effectively segment core project data transient branch data keeping core repository clean pure allows server lean easiertoscale data store keyvalue blob store relational database instead version control tool know idea feasible facebook implemented mercurial infinitepush extension essentially siphon mercurial bundle standalone file holding commit data blob store push come wire hg pull time requested revision present repository server asks databasebacked blob index revision exists anywhere blobbundle fetched dynamically overlayed onto repository memory served client infinitepush extension official mercurial project somewhat lacking fault facebook core idea solid wish someone would spend time flush design bit really could lead logically scaling repository infinite dag head without complexity actually scaling scaling dag algorithm repository storage version control tool algorithm infinite head getting back subject integration request one could imagine target workspace push example git push workspacereview origin would push review workspace would automatically initiate code review astute reader blog may find idea familiar proposed user namespaces post year ago read implication away fork could fork done away requirement submit pull request yes gerrit git push origin head refsformaster mechanism prof gerrit approach much magic confusing normal user sure could git grow feature make user experience much better user nt need burdened complexity magic could simply run command like git submit review definitely shift focus branch individual commits ideal integration request revolves around individual commits branch client may submit branch initiate update integration request integration request composed set loosely coupled commits parentchild relationship exist express dependency commits commit evaluated individually although someone may need inspect multiple commits gain full understanding proposed change ui enabling operation group related commits mass deleting abandoned commits may warranted world branch would matter instead commits king would abandoning branch name tracker integration request would need something replace otherwise way knowing update existing integration request tool like phabricator gerrit review board add persistent identifier commits survive history rewriting branchbased pull request anyway history rewrite nt confuse review tool eg cause comment get orphaned see worth noting commitcentric integration request model imply everyone writing reviewing series smaller commits titan industry strongly encourage authorship smaller commits commitcentric integration request nt intrinsically force commitcentric integration request nt forcing change local workflow type person nt want curate ton small goodinisolation commits take bit work nobody would forcing instead commit authorship pattern submission proposed change could squash commits together part submission optionally rewriting local history process want keep dozen fixup commits around local history fine tooling collapse together submission nt think fixup commits valuable nt seen reviewer wanted could tool continue submit make visible like eg github pull request today would nt focus review like github pull request today making integration request commitcentric nt force people adopt different commit authorship workflow enable project wish adopt mature commit hygiene said hows tool implemented impose restriction nothing commitcentric review fundamentally prohibits use fixup commits local workflow create dedicated post espousing virtue commitcentric workflow state case proxy noting project nt using modern pull request precisely commitcentric workflow viable mozilla one blocker moving github pull request review tooling nt compatible world view review unit small view generally shared google facebook prominent open source project among others reason outlined earlier post think long pull request revolve around branch merge diffs nt robust face history rewriting due lack robust commit tracking project insist refined practice continue eschew pull request link review size quality established better quality along longterm effect lowering development cost due fewer bug tip scale favor even benefit receive using product like github gitlab bitbucket best around aspect better integration request exist tool today unfortunately many feature present pull request implemented github gitlab bitbucket etc improve pull request product need borrow idea tool integration request built around git branch gerrit phabricattor review board etc use identifier commit message track commits help tracking commits across change compelling advantage model robust commit tracking requirement commitcentric workflow would even improve functionality branchbased pull request welldesigned integration request would robust commit tracking mechanism gerrit bestinclass experience commitcentric workflow popular implementation integration request aware support caters workflow default fact nt think change behavior user hostile case since force user know rewrite commits often perilous git land would nice could gerrit squash commits review unit automatically server understand unwillingness implement feature set challenge around commit tracking wo nt bore gerrit also show group related commits front center viewing proposed change phabricator tool know one achieve reasonable commitcentric workflow without pitfall orphaned comment context overload etc mentioned earlier post requires nonstandard submission tooling commit series nt featured prominently web ui phabricator implementation solid gerrit another gerrit feature worth lauding submission mechanism simply git push special ref fork create need create git branch need create separate pull request push gerrit take commits pushed turn request review nt require additional clientside tooling using single common git command submit update integration request simpler arguably intuitive tool gerrit submission perfect git push origin head refsformaster syntax intuitive overloading submission option effectively encoding url parameter ref name gross albeit effective hack user likely quickly learn oneliner create intuitive alias elegance using git push initiate integration request put gerrit league would ecstatic githubs world reduced complexity submitting pull request simply clone canonical repository create commits run git command future submitting integration request hopefully look like gerrit alternative need built aspect better integration request nt yet exist need considerable work consider viable tool leverage native version control tool submission eg via git push need work support submission via generic http endpoint fine leveraging git push submission mechanism make enduser experience turnkey making submission mechanism bit unfortunate support believe cobble together pull request scratch via github apis example nt simple submit patch endpoint arguably even gerrit robust http api seem allow creating new commitsdiffs via api anyway limitation excludes nongit tool using tool also limit tooling submitting without using git example may want write bot proposes automated change much easier produce diff use git since former require filesystem matter serverless environment example larger issue many implementation overreliance git server storage pronounced gerrit git push stored git repository gerrit server every code review comment reply stored git well git generic keyvalue store store data want shoehorn properly cool gerrit data replicated via git clone pretty much eliminates took decentralized tool centralized via github series argument apply store everything git approach scale mean running git server scale git server write load heavy git server thousand developer possibly working repository looking potentially million new git ref per year git gerrit jgit people done fantastic work making tool scale feel much better eschewed make git scale infinite push ref problem used scalable approach like http ingestion endpoint writes data keyvalue store relational database order word use version control tool servicing integration request scale selfimposed footgun could avoided conclusion congratulation making brain dump massive wall text still plenty topic could covered nt includes specific topic code review various feature entail also largely ignored general topic like value integration request serve overall development lifecycle integration request code review serve nexus track evolution change throughout time hopefully post gave idea structural issue play integration pull request integration request someone position design implement better integration request tooling around including version control tool hopefully gave good idea go next
128,Lobsters,vcs,Git & VCS,imbox & git-fetch-email: IMAP to mbox,https://git.causal.agency/imbox/about/,imbox gitfetchemail imap mbox,,
129,Lobsters,vcs,Git & VCS,Managing my dotfiles as a git repository,https://drewdevault.com//2019/12/30/dotfiles.html,managing dotfiles git repository,repository,many tool managing dotfiles userspecific configuration file gnu stow example tried solution year settled simple system several year ago served well time since home git repository repository fact original idea sure first heard either extended upon somewhat since key making work well onebyte gitignore file line git ignore file home directory worry leaving personal file music video git repository public dotfiles repo order track anything need override gitignore file casebycase basis git add f force add vimrc used following command git add f vimrc commit push normally vimrc tracked git gitignore file apply file already tracked git future change vimrc show git status git diff etc easilly committed git commit added staging area normally git add using f longer necessary setting new machine quite easy installation run following command cd git init git remote add origin git gitsrht sircmpwndotfiles git fetch git checkout f master quick logout back feel right home additionally configured home prefix bin full binary lib library though continue use config rather etc put homebin ahead anything else path allows shadow system program wrapper script necessary example binxdgopen follows binsh case httphttps pdf exec qutebrowser mailto exec aerc exec usrbinxdgopen esac replacing needlessly annoyingtocustomize xdgopen one want falling back usrbinxdgopen necessary many nonshadowed script program found bin well however computer configured equally run different linux nonlinux distribution different concern desktop server laptop phone etc often useful reason able customize configuration host example homebin path homebin hostname also run several machine different architecture include homebin uname well customize sway configuration consider different device configuration host use following directive configswayconfig include configsway hostname hostspecific configuration also tracked git conveniently update one machine another take similar approach perhost configuration many piece software use rather using learning specialized tool find need quite adequately satisfied simple composition several unix primitive tool already familiar git version controlling configuration file desirable trait even system ditch middleman
130,Lobsters,vcs,Git & VCS,Monorepos: Moving Fast in a Huge Repository,https://www.facebook.com/atscaleevents/videos/systems-scale-2019-monorepos-moving-fast-in-a-huge-repository/457153524992062/,monorepos moving fast huge repository,,alright durham goode scaling source control facebook past seven year get started many used get everyone nt mercurial mercury facebookers yeah okay cool version bad always interesting get feel room see people used regardless used may encountered huge repository past may called honor facebook use monterey pop know google microsoft also dick modern repository case nt know monitory poll basically huge repository put code product service nt mean build monolithic software mean code next nice benefit like easy share code easy make atomic change across code base like security fix lot conversation monterey pose tend focus pro con great scale actually google exact topic today kinda wan na focus instead challenge working huge repository like facebook start think source control role larger development ecosystem repository called fbi source contains million commits getting thousand day million file working copy hundred gigabyte kind biggest repository use mercurial open source version control system similar get extended scale kind level need people often surprised say nt use get reason use mercurial cuz one easy extend able make scale level need also community historically supportive u combination thing led u get source control scale need meet business requirement within fbi source disallow feature branch server basically nt allow merges kind unusual come like good background instead developer always master always small incremental commits pas build pas test get coder viewed ready put master based master push individually one one result clean linear history easy u reason easy u maintain kind critical pattern use allow thousand people work repository altogether last thing might notice work mostly online environment almost always connected later see use enable scale need repost big come major challenge kinda breakdown two big bucket first sheer repository scale make thing fast traditional version control command need work repository become horrendously slow scale status might take minute clone could take hour list issue huge repository becomes huge burden development ecosystem thing like build become slower read many file also thing like repo code changing almost every second give developer confidence change making going break something problem span far source control code source control platform rest therefore unique opportunity enable ecosystem scale gon na stop scale kinda boil one question make huge repository feel small developer joined company want exact experience huge repository tiny get hub repository admittedly yet little way away goal made huge stride towards tell first data though chart showing growth number file repository particular chart showed year ago joined company convince needed scale source control chart today yeah every time see keep thinking like nt stop hiring like job would get lot easier tell nt done yet nt really like idea add little bit access little perspective entire get sorry entire linux kernel file fit somewhere bottom half blue line already order magnitude beyond already considered fairly large get repository number file access scale going crazy across board number commits commits number directory number file number old version file year size file required different solution like good part job boring everything else negative keep moral story keeping scaling source control critical keeping developer happy productive nt make scale developer would spend five minute pulling new commits get bored go get coffee end playing ping pong hour later get back work like info every minute build test infrastructure spends waiting source control minute spending engineer providing value critical make scale keep people productive happy make sure infrastructure fast efficient first problem started solve sheer repository scale size get material clone copy entire repository every commit every directory every file every old version data local machine ten gigabyte could hundred gigabyte could take hour realistically nt need data often gon na go back look code year ago heck often go back look comment month ago useful piece data machine especially local machine like laptop changed way curl work allow u download file engineer actually care way get huge win repository stop scaling size history start scaling actually use nt affect actual user experience want go check commit year ago download file demand need still run blame run log normal thing may noticed violates one core principle distributed version control everything work independently work line yes case able work offline situation wan na strike balance benefit distributed version control scaling benefit centralized version control put effort instance keep local data think engineer going need get plane least work committee previously working also still allow like peer peer pushing pulling like client need aware server still exchange local data amongst trying strike fine balance kinda get best world turn saved u five percent clone save five percent disc space used cut clone time hour minute kind first big time complexity win let u kind enable repository grow future great except repository grew future last percent even becoming problem last percent working copy familiar terminology word copy basically file checked cs cat picture everything engineer edit work daily basis grows everything becomes slow downloading data becomes slow right disc become slow checking file pending change slow cuz go file file check one changed course take bunch disc space realistically nt touch file source control engineer go edit sequel team database code part monterey ethos want enable want enable kind collaboration necessary really world download piece need access whole thing try get best world accomplish basically created file system indiana case defuse file system nt know fuse way making file system user land instead kernel land safer easier iterate faster u make progress kind thing allows u completely take read right working copy let u let u thing like make look like entire repository see file go directory download actual file time need need download materialize becomes order number thing actually access order size working copy may heard microsoft something similar bfs forget project bit mouthful similar concept similar goal main difference completely taken file system created kind shim top tradeoff get flexibility lose little bit performance overhead case similar thing taking entire file system see every right go see read see right seeing every right know exactly file changed engineer know hg status see pending change already know answer cuz watched happened tremendous performance performance consequence first normal file system status repository size would take minute indiana file system first time rendered chart bar small deserve pixel thought chart broken actually zoom presentation gave pixel see millisecond million today year still millisecond fix time complexity nt try make little little bit faster term check seen similar benefit checking hundred thousand file take many minute lawyer nt let see many many minute file system take second nice thing hundred thousand commits second million commits second year still second great tool start become constant time major downsize using file system like major downside every single tool access bunch file change wan na something like grab repository string use normal grip going go file file download either get local repository go network get search move next one grab actually becomes like order magnitude slower would tool suffers come strategy make thing scale kind environment grip little easy offload work service cloud say user gripping tell file delivers result layer local data might actually end faster similar user experience tool straightforward buck build system way back need rebuild reading file computing hash using hash determine need rebuild part project custom file system would go download data file compute hash determine nt need anything throw data away huge waste time done integrated build system file system make whole thing efficient two way first know file changed instead buck trying figure tell file changed second way file system know hash file get directly server without downloading data buck ask u hash file mean especially combine buck ability download remote build artifact cash mean entire build user access data absolutely relevant leave rest server somewhere kinda highlight goal source control build make scalable offer flexibility actually use source control make entire ecosystem around u efficient like said bunch caveat biggest tool must change huge investment actually like ca nt recommend take approach actually huge investment investment making tool scale better repo size going anyways file system forcing upon u making u earlier decided worthwhile trade big downside push engineer towards online even ca nt open file unless online happens cash begin decided tradeoff okay keeping back pocket ability give user option kind configure want configure much want downloaded versus control experience kinda give best world talked repository scaling working copy scaling like axis scale could talk time thing like log blame log file million commits blame file long push contingent particularly interesting cuz handle thousand developer pushing master time term technically order make sure work safely also term make sure nt interfere conflict cause cogeneration error bill break pitch wish time talk wan na kinda move next topic think actually interesting maybe applicable scale code ecosystem mean start company repository right world hire someone suddenly need code review need automated bill need automated test hire people need code search someone come along tell machine learning really hot right wan na put whole repository next thing know sky net asking source control access moral story code thing developer right foundation upon entire ecosystem rest critical scale make ecosystem scale gon na talk bit facebook think problem done kind approach broken three goal first want make code easy access sound obvious actually little complicated normal source control system built get mercurial glorified database command line top actually wan na use clean entire repository service want use need clone entire repository making stateful probably nt need making errorprone generally put barrier entry u create new service interact code exact opposite trying better approach would treat source control service like treat everything else like cash remote database created call source control service expose worst expose source control api api rpc face use thrift could imagine using grpc something allows structured request read write repository service thing like get commit message get file content run diff run blame normal operation would expect source control remotely mean service longer need copy repository become much stateless much easier maintain also allows u cool stuff like clean interface put index behind expensive operation used locally like blame become much faster index answer quickly future hope extend interface write future mean like ca nt claim done cuz still cutting hope extend right could thing like job bump version number instead job whole clone make commit push could single web request even web duo click button bump number code base much light weight could cool thing particularly like pattern design well abstract away difference version control system support mercurial mono repo also support longterm get repository behind api service nt care talking merkel talking get service provider provide one surface area support also help u migration version control system service nt care move something get mercury happen little transparently one thing notice api described work code server code server code machine machine development happens moving code around u hard set next goal making code easy exchange making easy access one thing making easy move around another give example development workflow today happen code death sorry machine deb serve facebook board apologize code machine someone else machine figuring get code point point b bit tough maybe get push pull know push pull know get firewall maybe put pool request pull trivial kinda put barrier entry collaborating exact opposite trying trying encourage developer collaborate set school breaking wall development silo way done kinda nice upload every commit anyone ever make server moment make uploaded behind scene synchronicity make easy download data love demo nt time could literally make commit right message one half could type hg checkout hash would work pushing point almost everyone company working repository together easy code move around call concept commit cloud cuz committed cloud interesting technical challenge like make server receive order magnitude commits end result user experience quite elegant pretty proud cool ramification instance mentioned exchanging commits easier easier trivial situation let say fire people multiple city coordinating group chat irc slack something people make commit fix paste hash group chat everyone firefighting environment access code without think really lower barrier entry kind collaboration upload everything also automatic backup lose laptop get stolen nt know explodes something get new laptop clone immediately comment given developer kind ease mind never lose data also upload comment also download little extra bookkeeping actually keep deposit train sink across machine make commit desktop work go home open laptop committee repository ready continue working really useful people work across platform make commit mac open window machine committee already test without without typing single thing lastly allows interesting interaction service uploading comment service start see stuff actively working without actually anything brings u last goal wan na talk bridge gap developer service scale workflow big run local machine build big many test code large index facebook way wan na approach lean data center power resource actually accomplish thing make scale better set goal bridge gap relying make development workflow scale future way gon na gon na rely fact source control service allows service easily access source control access code commit cloud mean progress code available service interact allowing u shift work close data center starting build bear kind vision future imagining world someone type editor ask typing upload commit cloud forward service useful developer produce result send back real time developer coding providing useful suggestion feedback like awareness consequence lot potential application could thing like static analysis server type could thing like running test build particularly interested like idea machine learning could upload code working machine learning could note pattern good pattern tell kinda funny tell good job use good pattern little weird nt know machine learning person kind excited potential beyond kind realtime developer feedback could thing like code review tool provided suggested change said better code would like accept could click accept service would write repository via connect cloud would show without clicking thing really make natural service interact developer vice versa moral story huge repost require huge ecosystem code foundation working code slow ecosystem gon na slow ecosystem slow developer going slow debt slow business going slow make code fast easy access open whole realm possibility previously exist term enable get work done productive say thank would eventually like open source quite ready yet particular interest business interest feel free come talk afterwards might way getting access early meantime thank much time
132,Lobsters,vcs,Git & VCS,Barebones git,https://artemix.org/blog/barebones-git.html,barebones git,bare beforehand create repository interact ssh manual documentation http cgi binary cgi project template documentation kickstart backup additional note guide,git probably one used collaboration tool around also core useful code versioning tool nothing used github gitlab sometimes want private git setup without collaboration environment built around tool setting gitlab even gitea server cumbersome especially dealing proxy user authentication backup etc really need repository local na host handful small vps local project may instead want go bare server git setup bare basically put git provides capability required work clientserver fashion without anything except sshd git yup two tool two tool need host git repository post gon na show create repository interact ssh set basic proxy server interact http beforehand git way resolve path ssh dumb good mean dumb set git server actually work target ssh path eg scpstyle user servertld groupprojectgit ssh server using user user ssh key one probably try find repository folder groupprojectgit user home folder entail create bare git repository inside home folder somewhere using full path able access general way since ssh direct access remote machine technically interact folder server read write right starting root providing path relative user home folder eg otherprojectgit organisational purpose gon na stay home folder create repository create serverside repository create known inside git bare repository structure contains git need version code tracked branch etc simply put create usually found inside project git command git init bare run inside empty folder create new folder init along way append folder path end init command eg git init bare projectgit example run client server create git repository homeprojectgit ssh servertld git init bare projectgit create project group homegroup init repository inside ssh servertld mkdir group git init bare groupprojectgit interact ssh two operation use interact remote git repository fetch retrieve change local git push push change remote server done using concept remote git assume already familiar nt case invite read manual remote documentation show overssh repository following format urlstyle ssh user hostxz port pathtorepogit scpstyle user hostxz pathtorepogit example remote would homeprojectgit servertld projectgit servertld project homegroupprojectgit servertld groupprojectgit servertld groupproject clone one usual git command simple git clone servertld projectgit http yeah http nt ssh machine nt want bother well wo nt able create manage repository http able push fetch already good start probably want want eg share repository someone git provides nifty cgi binary called githttpbackend invoke using git httpbackend wish automate task binary usually installed usrlibgitcoregithttpbackend example caddy configuration using cgi extension would simple following cgi usrlibgitcoregithttpbackend env gitprojectroothomemyuser githttpexportalltrue allow fetch operation every client reach gitservertld allow push operation authenticated client nt yet able find generic definition githttpbackend determines client authenticated still reading topic trying thing mostly caddy project template gitea provided project template use really useful quickly start project fear child git also covered template nativelysupported git concept rescue documentation explains optional argument git init point valid template directory every file inside directory start dot aka linux hidden file copied new git repository also set default template directory project initialize repository using git init nt specify template directory git check following order find directory requested path gittemplatedir environment variable set inittemplatedir git configuration variable set usrsharegitcoretemplates default template directory found still dumb template system especially since nt copy dotfiles gitignore editorconfig automagically copied still nt complex need really decent feature nt require install template management tool could also make simple bash script dotfiles eg something would rename every file starting dot starting still want complex template may want check neat tool called kickstart backup since git completely filesystemlevel easily backuped especially using incremental backup tool restic section showcase example backup git repository using restic assume already know restic showcase backingup repository creation let say servertld local network sftp server sftptld backup repository initialized projectgit groupprojectgit hosted git repository want backup restic r sftptld backup backup git backup every git folder projectgit groupprojectgit inside backup repository found sftptld additional note found guide pretty neat discovery topic invite check question
133,Lobsters,vcs,Git & VCS,Reviewing Pull Requests,https://chelseatroy.com/2019/12/18/reviewing-pull-requests/,reviewing pull request,asynchronous right previous post make code better strap folk need hear going like pull request review suck programmer tried x programmer hmmm interesting let try type programmer may take keyboard demonstrate start typing might look something original developer implement code reviewer like x solution block merge original developer implement code reviewer like x solution tried vague description alternative original developer implement code reviewer like x solution might instead something like pseudocode code compile get idea offense imagine somebody would even think implement like x example bad bad reviewer failing participate development sound code fact pull request review dead obvious reviewer pull run code flatly unacceptable stop distant cursory code review yes instead reviewer put money mouth pull request code verbatim example pull request see code copypastable code review time frustration create far go wow chelsea sound like massive demand reviewer time written post pairing work thing try pull request review additional documentation would relevant change suggesting provide link documentation spend time asking question pointing hidden gem code might otherwise overlooked judge reviewing skill whether review could supplanted important feedback change feedback change finally mentioning convention point exactly footnote post conclusion liked piece might also like remote work series listening series sicp series like,reading time minutesthis second post series asynchronous collaboration asynchronous mean people work time common distributed team especially across time zone see post far series right previous post talked asynchronous limitation code review code review know make code better code review le agreement love pairing immediate code review requires synchronous communication asynchronous code review need another option enter pull request prevalent approach code review programmer keep change set separate branch submits request merge main branch another programmer review code request prior merge shared include pull request submission post talk side interaction pull request review strap folk need hear going like pull request review suck mentioned favorite form code review pairing pull request work better asynchronous communication pull request review inferior pairing usually way reviewer pair programming programmer suggestion change code interaction go like programmer tried x followed programmer hmmm interesting let try type programmer may take keyboard demonstrate start typing might look something pairing expectation pair participate implementing alternative suggest meanwhile pull request review see lot crap original developer implement code reviewer like x solution block merge slightly le atrocious original developer implement code reviewer like x solution tried vague description alternative better original developer implement code reviewer like x solution might instead something like pseudocode code compile get idea way civil example seen exact thing done regularly except insult tacked onto beginning like offense imagine somebody would even think implement like x fact state pull request quality bad advice read good review address idea insult someone code frank absurd explain grown adult advice regularly see say try pointing thing like code yes still setting really low bar example mean still bad must demand adult professional software engineer mean try nice example bad bad reviewer failing participate development sound code instead dictating untested idea ivory tower reviewership delegating responsibility original developer feasibility test implementation idea recording idea way get credit work original implementer undertakes risk idea fired hip work original developer lost time chasing reviewer disrespectful original developer time waste reviewer knowledge great way criticize people work without examining one limitation fact pull request review dead obvious reviewer pull run code flatly unacceptable mean original developer became unavailable merge code reviewer would prepared take development reviewed context transfer failed proof pull request review could extremely effective still sometimes useful even bad badly much potential change code better stop distant cursory code review yes better instead reviewer put money mouth like something branch pull sucker test alternative fix push commit original developer review open source contribution work collaboration distributed team ought work pull request original reviewer work submitted change back final merge reviewer lack sufficient context modify code pull request failed goal context transfer original submitter transfer context pull request description possible understand factor may prevent reviewer pushing change maybe push access maybe want original developer feel like taking plum project doubting ability get case still pull try suggestion provide change code verbatim original developer comment example example come pull request python script context author know python expert particular library used used library reviewer best make knowledge useful original developer see code copypastable code know code work tried script saw work eyeball slightly involved example context tqdm library named arabic word progress pronounced tiqdam verbatim change suggesting propagates place code suggest change place well rather forcing original developer figure fact one change need review save time frustration create far go one pull request review previous job needed pull code notice something running slowly confirm original developer current speed unacceptable benchmark code determine running slowly identify inefficient query try different query benchmark difference submit result pr comment private repo show want emphasize far reviewer commitment participation problemsolving go pushed work back original developer would happened would resent would assumed rather understood whether performance important part app would prepared work app skill benchmarking knowledge query would wasted original developer would instead bunch googling instead reviewer appreciated help understood role performance app could run whole app machine make change got cement knowledge explaining something someone else wow chelsea sound like massive demand reviewer time fact take much time illustrates precisely pairing efficient immediate context transfer two people working together work happens condensed amount time relative amount work done written post pairing work interested folk argue pairing cost twice much code factoring time would take marginally useful code review pull request option available team reviewer spending time still better use resource original developer chase solution suggested lazy delegating commentary pull request thing try pull request review addition pulling running modifying code deploy tactic make participation code review useful possible example pull request screenshots additional documentation would relevant change suggesting provide link documentation make original developer go chase thing spend time asking question want full context code remember something prevents original developer continuing develop code becomes responsibility must prepared handle responsibility judging another developer choice asked question pointing hidden gem code might otherwise overlooked particular issue get lot people working panda pointing benefit developer project lot experience possibly specifically panda addition point resource original developer find something used might worth reading grain salt review becomes useful original developer googling around judge reviewing skill whether review could supplanted personal proofread google search god forbid nothing want make sure review provides value resource important feedback change feedback change finally mentioning convention point exactly talked little bit nature convention footnote post think important call cultural agreement may may last conclusion pull request potential compete pairing effectiveness code review tool usually compete though normalized pull request reviewer fail undertake participatory role building solution original developer talking edge case programming version dr house come consult thorny case talking vast majority code review reviewer another developer team original developer maximally effective pull request suggests code point working link documentation useful highlight laudable work original developer asks question making assumption judgment explains reasoning behind suggestion whether reasoning affect functionality adheres convention short demand reviewer full participation finishing solution original developer started prepares reviewer take responsibility code event original developer unable complete liked piece might also like remote work series warning post salty read listening series another thing read without cup sicp series completely unrelated blog get plug esoteric programming endeavor want like like loading
134,Lobsters,vcs,Git & VCS,Heptapod as a BitBucket replacement,https://heptapod.net/heptapod-as-a-bitbucket-replacement.html,heptapod bitbucket replacement,inviting generic project related mercurial main heptapod instance always part plan announced workflow blog post sourcehut importing project bitbucket heptapod standard instruction specific category heptapod issue inviting mercurial project devheptapodnet group mercurial generic project inviting opensource project related mercurial hosted bitbucket come devheptapodnet file issue tracker devheptapodnet plan general hosting,many time past month asked heptapod perfect team search new dvcs home must flee bitbucket hereby inviting generic project related mercurial main heptapod instance read detail current state bitbucket import feature future hosting plan always part plan recall august year bitbucket announced dropping support mercurial first semester culminating removal mercurial repository june octobus launched heptapod project two goal first showcase clear focused way use modern feature mercurial especially history rewriting capability detailed workflow blog post goal precisely provide alternative people could turn bitbucket drop mercurial support reason fear could happen nt expect happen fast nt foresee either rise sourcehut look indeed like perfect solution email based workflow since bitbucket announcement working hard bring heptapod speed serve possible replacement putting stronger focus import feature importing project bitbucket heptapod importing bitbucket standard gitlab feature course restricted git repository upstream gitlab although deactivate early heptapod prototype rather straightforward bring back bitbucket import work heptapod upstream gitlab except course currently mercurial repository want use instance follow standard instruction heptapod timeframe many experiment involving bitbucket import notably made several test run pypy project interesting case changesets lot issue worklow named branch based issue number course import take quite time work specific category heptapod issue bitbucket import currently lack important one pull request fork confident available couple week inviting mercurial project devheptapodnet decided long ago main instance development heptapod could also host project directly related mercurial started thought piece needed heptapod would generic anyway quicly outgrown devheptapodnet long group mercurial generic project imported extension care since configexpress formatsource recently hggit benefit right powerful continuous integration ci service contribution mercurial community inviting opensource project related mercurial hosted bitbucket come devheptapodnet happen file issue tracker devheptapodnet hosting request label discussion shall public requirement repository import fulfill related mercurial includes extension course also external tooling graphical interface server utility currently hosted bitbucket want focus project need new home soon fully freelibre open source project way everything devheptapodnet public main development repository reason nt want host hundred secondary clone whose relevance would nt clear official release generally give priority mature project significant user base using list mean complete requirement might tightened loosened future basically see go adjust accordingly doubt file issue anyway assured gentle tell project belong plan general hosting public hosting resourceintensive endeavor requires lot work force process automation especially delicate subject moderation heptapod still currently developped hosted primarily octobus small consulting company octobus nt extensive hosting capability hence ca nt alone octobus however explore partnership opportunity existing hosting company order build commercial offer explore possibility shared public hosting early really specific stay tuned
135,Lobsters,vcs,Git & VCS,An Overview of Git's Original C Header File,https://initialcommit.io/blog/Learn-Git-Header-Files,overview git original c header file,introduction git original header file sidenote version control git oreilly medium function prototype function signature baby git codebase summary jacob initialcommitio baby git guidebook developer,introduction git mostly written c programming language c us header file store information reusable across multiple file including variable function structure macro article provide background information c header file walk code git header file line line already familiar c header file skip directly section git original header file sidenote interested great beginner book using git highly recommend version control git oreilly medium read book year ago clarified lot git concept command use almost every day c statically typed language mean programmer must specify data type variable used code data type function argument return value must specified well example variable defined integer c like int mynumber called variable declaration c compiler check make sure variable declared type use also ensures value assigned variable match type compiler report error compilation either criterion met function definition must specify type information return type type argument let consider simple function add two number int addnumbers int x int return x note specified return type function initial int also specified type two argument x however case must declare function using follows int addnumbers int x int called function prototype function signature tell c compiler function name return type argument type required function called different file defined function call occurs definition single file oftentimes programmer want reuse variable function structure macro across multiple c source code file achieve variable function structure macro placed h header file header file included c source file follows include headerfileh way compiler get type information need variable function usedcalled also access macro structure defined header file luckily u git initial commit one header file called cacheh purpose file define include required library function signature default setting git c program function cacheh header included git original c source code file including initdbc updatecachec catfilec showdiffc writetreec readtreec committreec find code original version cacheh fully documented inline comment describing work extract fully documented baby git codebase license apply code full content file cacheh initial commit git codebase git initial commit original version tweaked compile modern o file h header file included source file via include preprocessing directive file contains include directive library header file token definition declaration external variable structure template function prototype execute code file cacheh macro defined yet prevent compiler error resulting multiple direct indirect inclusion header single c source file ifndef cacheh define cacheh define macro cacheh include stdioh standard c library defining inputoutput tool include stringh standard c library working character array include unistdh standard c library access posix o api include sysstath standard c library defining stat tool include fcntlh standard c library working file include stddefh standard c library type definition include stdlibh standard c library library definition include stdargh standard c library variable argument list include errnoh standard c library system error number window ifndef bgitwindows include sysmmanh standard c library memory management declaration window else include windowsh c library access window api include lmconsh c library declaring assorted window constant include directh c library working file system directory include ioh c library windowsonly function endif include opensslshah include sha hash tool openssl library include zlibh include compression tool zlib library linus torvalds basic data structure directory cache linus torvalds note note note native cpu byte format even trying portable trying efficient cache define operating system specific macro ifdef bgitunix define stattimesec st stxtim st stxtim e define stattimensec st stxtim st stxtimtvnsec elif defined bgitdarwin define stattimesec st stxtim st stxtim espectvsec define stattimensec st stxtim st stxtim espectvnsec elif defined bgitwindows define stattimesec st stxtim st stxtim e define stattimensec st stxtim endif window ifndef bgitwindows define openfile fname flag mode open fname flag mode window else define openfile fname flag mode open fname flag obinary mode endif template cacheheader cacheentry structure structure used store repository cache cache header structure consists signature version number cache entry hash identifies cache file signature constant whose value also given header file via cachesignature token cachesignature hardcoded loading cache header define cachesignature linus torvalds dirc template header structure identifies set cache entry struct cacheheader constant across header validate authenticity unsigned int signature store version git created cache unsigned int version number cache entry cache unsigned int entry hash identifies cache unsigned char cachetime structure declared member represent time stamp second nanosecond portion template time structure storing timestamps action taken file corresponding cache entry example time file modified info file time see http wwwquoracomwhatisthedifferencebetweenmtimeatimeandctime struct cachetime unsigned int sec unsigned int nsec cacheentry structure used store information metadata file corresponds cache entry note array structure member store representation hash deflated blob object corresponds cache entry hash used index blob object object database struct cacheentry struct cachetime ctime time file last status change struct cachetime mtime time file last modification unsigned int stdev device id device containing file file serial number distinguishes file file device unsigned int stino specifies mode file includes information file type permission unsigned int stmode unsigned int stuid user id file owner unsigned int stgid group id file unsigned int stsize size regular file byte unsigned char hash deflated blob object unsigned short namelen filename length path length unsigned char name filename path following declaration external variable defined source code file readcachec path object database const char array pointer cache entry struct cacheentry activecache number entry activecache array unsigned int activenr maximum number element activecache array hold unsigned int activealloc two token dbenvironment defaultdbenvironment defined program determine store object database default object database stored path defined defaultdbenvironment token dircacheobjects dbenvironment token defined environment variable user set specify existing valid object database define dbenvironment define defaultdbenvironment dircacheobjects macro used calculate size allocated cache entry define cacheentrysize len offsetof struct cacheentry name len define cesize ce cacheentrysize ce namelen see link detail macro http define allocnr x x following function prototype defined source file readcachec read content dircacheindex file activecache array extern int readcache void linus torvalds return statically allocated filename matching signature extern char unsigned char linus torvalds write memory buffer file extern int unsigned char void buf unsigned int size linus torvalds read unpack file memory write memory file extern void unsigned char char type unsigned long size extern int char buf unsigned len linus torvalds convert tofrom representation extern int char hex unsigned char linus torvalds static buffer extern char unsigned char print usage message standard error stream extern void usage const char err endif linus torvalds cacheh summary article provided overview c header file found git initial commit question comment feel free email jacob initialcommitio interested learning git code work check baby git guidebook developer
136,Lobsters,vcs,Git & VCS,Multiple vulnerabilities fixed in Git,https://www.openwall.com/lists/oss-security/2019/12/13/1,multiple vulnerability fixed git,prev next day month year list http gitsterctcgooglerscomt u http http http http http http http docsmicrosoftcomenuswindowswslabout http http http http powered blists mailing list open source software security wiki mailing list mailing list read mailing list wikipedia guideline proper formatting message,prev next day month year list date fri dec cet johannes schindelin johannesschindelin de osssecurity tsopenwallcom subject multiple vulnerability fixed git team first contribution list apologize advance mistake made git project released new version past tuesday december addressing whopping cf supported platform affected one way another apart affect git later git version way back affected probably earlier one stopped looking release train oldest still service fixed version link announcement http gitsterctcgooglerscomt u git window fixed version window backports mingit subset git window http highly recommend upgrade addressed issue exportmarks option git fastimport exposed also via instream command feature exportmarks allows overwriting arbitrary path obvious attack ask targeted user import malicious payload see also advisory http submodules cloned recursively certain circumstance git could fooled using git directory twice require directory empty exploit require window impression might way exploit also macos possibly linux maybe running window subsystem linux exploit found write file submodule directory would associated ntfs short name second submodule reusing directory would ntfs short name associated git file allowing git file overwritten despite protection coreprotectntfs allowing remote code execution recursive clone see also advisory http incorrect quoting commandline argument allowed remote code execution recursive clone conjunction ssh url windowsonly issue vulnerable code compiled window exploit found involves submodule name end backslash maliciouslycrafted ssh url exploit bug pas arbitrary option sshexe allowing remote code executed recursive clone see also advisory http permitted drive letter physical drive window letter usenglish alphabet restriction apply virtual drive assigned via subst letter path git mistook path relative path allowing writing outside worktree cloning vulnerability exploited window targeted user known use nonalphabetical drive letter logical drive registered substexe command allowing overwrite arbitrary file said logical drive regular git clone see also advisory http git unaware ntfs alternate data stream allowing file inside git directory overwritten clone description contains ntfs vulnerability exploited window also macos working smb mounted network share exploit involves naming directory git indexallocation allowing remote code execution regular git clone fix cve requires fix see also advisory http running git window subsystem linux also known wsl accessing working directory regular window drive none ntfs protection active vulnerability affect git running inside window subsystem linux http docsmicrosoftcomenuswindowswslabout working window drive ntfs short name enabled case default system drive ie c exploit us directory named allows remote code execution regular git clone reason git turn coreprotectntfs default also required address see also advisory http filename linuxunix contain backslashes window backslashes directory separator git use refuse write tracked file filename windowsonly vulnerability exploit us backslashes file name stored tree object allowing arbitrary file even outside git worktree written see also advisory http recursive clone currently affected vulnerability caused toolax validation submodule name allowing targeted attack via remote code execution recursive clone fun one exploit found complex allows targeted attack username useremail targeted user known also requires controlling least one web server least one submodule served exploit also requires colon valid character file name ie work targeted user us window unless using git inside window subsystem linux idea force git create two file directory commondir head fool git believing valid git directory commondir head valid branch name possible abuse reflogs directory default reflogs content format oldhash newhash ident epoch tz tab clone url naming another submodule name nest reflogs directory ensure directory exists whose name identical first part reflog entry right first slash url contains colon therefore legal directory name window using url break git directory redirect commondir directory written part recursive clone note targeted user ident need known well least reasonably small time range attack allow crafting submodule name note also remote code execution recursive clone attacker need control web server back one submodules pretend least one ref updated recursive clone ask set ref twice cloning via httphttps see also advisory http disallowed gitmodules entry set submodule name update command fix vulnerability git later recursive clone followed submodule update could execute code contained within repository without user explicitly asked exploit store command gitmodules file point script executable written part initial clone technically remote code execution vulnerability time window initial recursive clone call git submodule update user inspect malicious payload see also advisory http credit finding first vulnerability go microsoft security response center particular nicolas joly credit finding submodule update command vulnerability go joern schneeweisz credit fixing go jonathan nieder fastimport fix provided jeff king fix help garima singh thanks johannes powered blists mailing list please check open source software security wiki counterpart mailing list confused mailing list use read mailing list wikipedia check guideline proper formatting message
137,Lobsters,vcs,Git & VCS,Why Human-Processed Source Code Belongs in Git,https://thenewstack.io/why-human-processed-source-code-belongs-in-git/,humanprocessed source code belongs git,gitlab gitlab commit london checklist manifesto genesis process oriented work best process discovery mechanism brain dumping mental association tacit process knowledge made explicit development backlog refinement discerning low negative automation roi human code update review adoption human code auditability automation checklist go better together live checklist status sharing code code code stored git followup post gitlab commit london via,gitlab sponsored post anticipation gitlab commit london october darwin sanoy darwin senior cloud architect devops tooling team lead infor career focus automation led passion thing cloud devops cicd resides near philadelphia two child wife trail trying break mountain bike garage tuning easy think code computer thing truth human codifying kind knowledge century one type human knowledge like computer code anything else process execution knowledge familiar concept computer executing code take structured instruction executes order produce desired end result computer good meticulous duty perform instruction flawlessly many time would equivalent human realm detailed set ordered step must completed achieve desired result seems like apt description procedural checklist book checklist manifesto paint picture checklist usage creates dramatic impact quality outcome achieving consistency meticulous repetitive humanperformed task checklist literally save life many high stake circumstance like flying airplane performing surgery gitops commitment ensure everything needed success building operating software stored git fact git ultimately serf single source truth however time secretly limit everything everything computer performs leave thing human ensure integrity software true commitment everything git principle would encourage storage checklist human perform git much deeper connection human code computer code eventually automates procedure real focus operational checklist success software although discus lot checklist general think build deployment testing step genesis process oriented work processoriented computer work root work done human want relieved tedium precise ensured execution extremely detailed ordersensitive step work done repeating cycle motivation rid quality ensure giving work machine experience mental drift due tedium best process discovery mechanism period career overnight air travel frequent since busy mind possibility forgetting bring something real caused lot stress overnight air travel involves several point return milestone certain point longer available time double back home grab item later longer double back vehicle grab something either power master checklist solve amazing year keeping checklist noticed something else process creating executing checklist cause thing come mind need removed sometimes completely new type thing previously thought putting checklist checklist ordered tminus transition way spacecraft launch checklist tracked thing like leaving house last minute grab car also conditionals like international travel empty house brain dumping mental association seems create concrete checklist tacit knowledge process activates mind find related item natural part human cognition especially helpful regard discovering edge case conditional step long term maintenance master checklist also continues add value area someplace put new idea ought done make checklist effective assuring proper execution tacit process knowledge made explicit build software take place human processdriven work human checklist invaluable source information even checklist made specifically software build provides full extraction tacit knowledge performing process validated someone tacit knowledge exactly computer code tacit knowledge either tacit process knowledge knowhow expert hard time explaining become reflexive notice important part process execution unfamiliar development backlog refinement building refining checklist really represents somewhat automatic refinement process automation requirement rather trying empirically discover done coding discovery coding separated help different individual activity also help individual activity separating flow state coding focused checklist execution yield topnotch awareness improves quality outcome activity discerning low negative automation roi automate thing meme funny also commentary philosophical position taken far automation efficiency turn return investment several brave writer blogger published guideline situation roi automation tend area human judgment andor strong variability execution inherent characteristic process checklist help discern automation roi may low attempt create checklist lot judgment call help articulate whether code required make judgment possible costeffective another indicator checklist need new custom step every execution characteristic indicate would time spent maintaining code automation involved human performing task perhaps order magnitude process attempting automate also weed subprocesses naturally low automation roi also automating anything candidate automation discerning low negative roi done overall automation discovery process existence lownegative roi must believed filtered avoid automate matter roi trap human code update review adoption computer code benefit collaborativemaintenance update human code form master checklist also benefit collaborative approach whether ever boiled automation collaborative coding main feature git gaining benefit simple ensuring checklist stored git text format git perform humanreadable diffs change essentially naturally lead choosing markdown document format human code auditability since human challenge performing meticulous repetitive activity high fidelity tend want provide proof performed action prescribed describe alternative action taken storing completed checklist git facilitate auditability discussed later determine type done marking used order improve auditability whether include date time stamp done marking step automation checklist go better together devops engineer might experience frustration spending effort codifying checklist rather directly creating computer code activity list show valid reason make sense acknowledge purposely incorporate checklist process initial ongoing maintenance automation risk something might automated well documented human procedure lead u ignore fact noncodified human procedure large scale risk integrity full devops lifecycle software solution live checklist status sharing change event handy understand everything process especially multiple checklist must performed simultaneously saas checklist solution offer live sharing primary value gitstored list come close checklist watched frequently pushed git server individual viewing refresh view could even set looping git commit push script workstation executing checklist code code code stored git common think code computer code human code fit model form checklist detailed orderspecific interdependent execution instruction record human code way lead effective execution naturally arrive concept checklist discussed human code many similarity computer code including benefit visibility collaborative capability git offer human code critical development build testing operation software stack fit definition gitops single source truth success managing software stack wellwritten maintained human code best starting point creating computer code followup post look two free open source multiplatform tool make creation execution markdownbased checklist much easier also include configuration code get started easy done marking keep stress checklist execution low possible consistent team member case study discussion infrastructure best practice attend gitlab commit london oct gitlab inaugural user event showcase power devops action strategy technology discussion lesson learned behindthescenes look development lifecycle feature image via pixabay
138,Lobsters,vcs,Git & VCS,A walk through the Magit interface,https://emacsair.me/2017/09/01/magit-walk-through/,walk magit interface,post r twitter github macsair collecting frequentcommitter mile walk magit interface magit magical git interface magit everything actionable status buffer emacs theme solarized light solarized dark homepage zenburn homepage light emacs default dark emacs default hiding detail status buffer automatically updated acting see commit detail beyond default action invoking git command using popups popups v direct command staging change acting selection staging part hunk changing diff argument applying change consult described log buffer moving log innovative variant many command committing rebasing merging fetching pulling pushing branching,post r twitter github macsair collecting frequentcommitter mile walk magit interface article demonstrates essential feature order give impression interface work also hint design principle behind interface tip iceberg magit complete interface git limit essential feature everyone hope article succeeds demonstrating focus workflow allows user become effective git user concentrate essential workflow note advanced feature workflow optimized attention detail would rather concentrate big picture read article magit magical git interface instead afterwards magit everything actionable almost everything see magit buffer acted pressing key obvious seeing magit look screenshots accompanied text explaining see used perform variety action regardless magit buffer always show detail alternative view thing point without type copypaste information often would command line status buffer status buffer shown inside git repository typing cx g controlx followed g equivalent typing git status shell show quick overview current repository see magit show information git command line would also use git diff git diff cached git log oneline originmaster git log oneline originmaster command get information emacs theme many theme exist emacs throughout guide use solarized light theme status buffer look using popular theme solarized dark homepage zenburn homepage light emacs default dark emacs default hiding detail might noticed diff hunk readmemd shown respective section collapsed collapse diff section section larger single line moving cursor pressing tab note current section highlighted different background color always know extent current section moved one line would become current section current line well commits follow would highlighted currently need know detail unpulled commits could type tab still see name upstream branch many commits ahead master detail individual commits case hidden want see type tab command line would type something like git log oneline upstream status buffer always show much little currently appropriate without remember command show little much information instead temporally hide show detail needed pressing single key hiding much possible status buffer look like buffer showing little status buffer automatically updated use emacs edit save file located inside repository use magit perform action staging change status buffer automatically updated change something outside emacs press g refresh current status buffer g refresh magit buffer acting see major advantage magit git command line nearly everything see magit buffer acted hiding showing section one example besides tab another key work nearly everywhere ret return show detailed view thing point commit branch diff hunk stash commit detail example type ret cursor commit message diff commit shown case diff completely fit window could hide section metadata commit diffstat top bring complete diff view could move section view rest diff basic key movement key cp move one section cn move one section mp ie metap also commonly known altp mn would move previous next section level current section latter two command used navigate magit buffer quickly skipping child section example could jump one file another without step hunk first beyond default action interested diff commit message first place could typed status buffer instead ret already pressed ret type q quit ie hide current magit buffer case commit buffer go back previous buffer precisely previous window configuration case would take back status buffer ret performs likely action thing point many key perform equally useful action show diff l show log dozen mentioned invoking git command using popups cursor thing want act convenient many command default acting thing sometimes want act thing might inconvenient first move representation current buffer thing want act might even present current buffer many command therefore also allow act thing pressed twice show diff commit point pressing actually something show see window split two pane note emacs predates window system one would say frame split two window pane top still show status buffer pane bottom show diff popup diff popup show action bottom argument know command line use git top previously pressed cause popup bufferwindow disappear mean diff variant invoked dwim variant particular one act thing point alternatively could press letter show show index might want show diff arbitrary range case would press r type range completion popups also allow user set argument used invoked action call git diff popup example one enable use functioncontext argument typing f invoking action argument take value read user using completion appropriate usually argument used later enter popup enabled anymore however save argument want used default enter popup set argument desired instead invoking action type cc cc save default current popup setting persist emacs session cc cc one command available popups show type ct many popups commonly used one quickly learn key press mnemonic need something rarely come rescue show typing popups v direct command many magit command invoked first showing available variant picking one variant many popups possible press key twice invoke common variant often dwim variant also many command implemented using popup seen hideshow command tab visit command ret far command staging unstaging u always act file hunk point similar command discussed staging change magit make simple stage later commit change leaving change working tree committed separately command line invoke special staging unstaging session using git add patch git reset patch quite cumbersome go available hunk one one order magit act see stage hunk would move simply press without first tell git want stage also want stage done buffer automatically update cursor moved next hunk therefore stage multiple hunk pressing multiple time want magit bother hunk like git staged hunk appears inside section unstaging course work way move staged change press u also stage unstage everything pressing u acting selection also stage multiple file hunk mark sibling section using region region emacs term selected first press cspc mark one end region move cursor reach end alternatively could use mouse region constitutes valid acted unit look like example contributingmd readmemd selected lispmagitel selection active many command would normally act current section instead act selection ie marked section staging command region active constitute valid selection section fall sibling one another region look usually emacs make trivial see act current section selection staging part hunk besides sibling selection magit support second selection internal mark part hunk using region stage unstage otherwise apply part hunk see look like part hunk remove word selected using region pressed part would staged resulting note conveniently cursor placed take pride detail particular detail might important looked isolation go little extra step many place make difference changing diff argument instead using hunk internal region stage part hunk could also told git make hunk smaller using u argument press hunk question break two use opposite work status buffer well buffer may contain diffs far seen plain diff buffer commit buffer seen specify several argument using diff popup create diff buffer showing status buffer pressing cx g showing commit buffer pressing ret possible however change diff argument used current buffer press bring diff argument popup similar diff popup offer argument instead action show diff another buffer offer action affect current buffer press g use argument currently selected popup current buffer set argument default buffer type status buffer repository argument would used status buffer repository subsequently create last restart emacs permanently save new default use w similar popup exists l applying change graphical tool approach magit come staging feature described think one quite make one thing set magit apart tool however feature available staging unstaging also applying magit also discard reverse apply file file hunk hunk region point using exact interface described information apply variant consult manual noticed diff popup lacked favorite argument fear easy add argument existing popup described manual argument missing actually required cached fall category needed simply use diff variant show cached change index argument eg irreversibledelete missing strike balance making every argument available anyone might ever need overwhelming beginner argument ever fairly easy user add additional argument popup intend make trivial possible temporally show supported argument select one shown default using checkbox similar word user longer additional instead choose one need log buffer like possible show diff separate buffer course also possible log press l show log popup look like choosing log want see log shown actual log buffer look quite similar would get command line example variant notice argument displayed top moving log thing get interesting press ret show commit point separate buffer actually case better press spc display buffer current log buffer remains current buffer move log buffer using cp cn commit buffer automatically updated show commit cursor log buffer innovative variant many command seen magit provides command allow invoking certain variant git command without remember type many argument diff change example command save remember type cached useful innovative also many experienced user git command line probably created alias sort thing magit also provides many truly innovative command go beyond could alias include among others command committing rebasing stashing branching committing press c show committing popup c create regular new commit call git commit arranges current emacs session used giteditor commit message buffer opened one buffer another buffer show change committed done press cc cc also amend head pressing like git commit amend editing message amending press cc cd toggle showing change added head change make amended commit also fixup squash variant variant exist git term used correspond term might familiar git might good time show get information popup action argument show information variant type w give let change message without adding change similarly add staged change without forcing review message quite useful simple typo fix fixup let pick commit modified staged change immediately initiate rebase mostly like commits head commit modified picked using specialized log buffer rebasing rebasing popup also provides variety command unique magit one variant let edit single commit without go list commits rebased simply go commit want rebase log course including log unpushed commits status buffer press r enter rebase popup modify commit likewise variant allows editing message single commit performing interactive rebase supposed affect single commit done usual editing file gitrebasetodo magit make additional key binding convenience feature available rebase sequence progress loglike section information rebase shown status buffer like regular log course perform various action listed commits like viewing course conflict shown resolve conflict visiting file pressing ret conflict hunk would see something like use smerge package style edit file also use ediff package show two side optionally common ancestor separate window magit wrap feature provided package since actually part magit skip looking detail course could also abort rebase pressing r merging merging popup quite simple merge progress status buffer show information fetching pulling pushing without going detail popups fetching pulling pushing one thing worth noting though popups feature variant somewhat similar usually different branch actually git feature many git user know hardly documented learn different see branching branching popup used edit create andor checkout branch new variant particularly interesting creates check new branch whose upstream previously checked branch rewinds branch upstream useful began working new feature directly master realize using feature branch branching popup also one popups subpopup press c show branch configuration popup popup see value important git variable concerning current branch value obviously changed using shown key thank jonas bernoulli footnote
139,Lobsters,vcs,Git & VCS,A fast reimplementation of Powerlevel9k ZSH theme,https://github.com/romkatv/powerlevel10k,fast reimplementation zsh theme,speed flexibility outofthebox experience get started feature table content get started recommended font feature configuration wizard pure recommended font uncompromising performance timewarrior pyenv really fast compatibility migration almost much faster certainly pure compatibility pure transient prompt instant prompt best prompt style configuration wizard instant prompt pyenv nvm even caused theme manually enable instant prompt show command transient prompt current directory work directory difficult see prompt using rainbow style extremely customizable pure robbyrussell battery included pure direnv asdf venv conda pyenv goenv nodenv nvm nodeenv rbenv rvm fvm luaenv jenv plenv phpenv stack nodejs go rustc dotnet php laravel php framework java packagejson kubernetes terraform aws profile aws elastic beanstalk azure google cloud google application credential nordvpn ranger nnn vim midnight commander nix shell todo timewarrior taskwarrior extensible installation manual troubleshooting oh zsh prezto zim antibody antigen zplug zgen zplugin zinit homebrew arch linux configuration new user configuration wizard user remove configuration option compatibility extra missing space prompt compared font nerd font source code pro font awesome powerline nerd font recommended font meslo nerd font patched recommended font created automatic font installation manual font installation apple terminal hyper visual studio code gnome terminal konsole tilix window console host window terminal termux blink terminus terminator guake alacritty important try docker recommended font license mit license faq update manual oh zsh prezto zim antigen zplug zgen zplugin zinit homebrew arch linux important use uninstall configuration wizard installation instruction configuration wizard installation instruction manual oh zsh prezto zim antigen zplug zgen zplugin zinit homebrew arch linux use ask help report bug open issue gitter romanperepelitsa gmailcom pgp key aspect shell terminal affect promptrelated option related prompt using oh zsh migrate recommended font really fast zshpromptbenchmark m enable instant prompt instant prompt different symbol git status mean change format git status change format git status different symbol git status mean git status displayed prompt git status sometimes appear grey get colored short period time add username andor hostname prompt prompt segment appear disappear typing change prompt color change color palette used terminal set color configuration parameter change color palette used terminal set color configuration parameter spawn extra process gitstatus gitstatus configuration option make slow open issue fast load limited prompt prompt benchmark relationship compatibility always render exactly prompt given config troubleshooting troubleshooting open issue best prompt style configuration wizard pure zsh theme recommended font make look like robbyrussell oh zsh theme config prompt completed command display error status command instead command preceding post rzsh minimum supported zsh version screenshots animated gifs created recommended font zshsyntaxhighlighting recommended font created recommended font apache license package distribution troubleshooting question mark prompt different symbol git status mean icon glyph powerline symbol nt render icon glyph powerline symbol nt render install recommended font subpixel imperfection around powerline symbol recommended font error character range cursor wrong place previous section recommended font prompt line aligns frame prompt line longer frame issue prompt line shorter frame mangled issue prompt line shorter frame mangled issue prompt wrapping around weird way cursor wrong place right prompt wrong place cursor wrong place configuration wizard run automatically every time zsh started prompt style missing configuration wizard recommended font install recommended font recommended font extra missing space prompt compared extra space without background right side right prompt zsh documentation extra missing space around icon weird thing happen typing transient prompt stop working time weird thing happen typing make work plugin manager installation instruction ohmyzsh zplug prezto antigen directory difficult see prompt using rainbow style change terminal color palette change directory background andor foreground color horrific mess resizing terminal window mitigation zsh bug zsh patch branch discussion mitigation patch rebuild zsh source icon cut konsole nonmonospace font officially supported konsole arch linux logo dot bottom right corner recommended font table content,theme zsh emphasizes speed flexibility outofthebox experience ready get started see see go feature user go see table content bottom get started install recommended font optional highly recommended install plugin manager restart zsh type configure configuration wizard nt start automatically feature configuration wizard type configure access builtin configuration wizard right terminal style except pure functionally equivalent display information differ presentation configuration wizard creates based preference additional prompt customization done editing file plenty comment help navigate configuration option tip install recommended font running configure unlock prompt style faq troubleshooting uncompromising performance hit enter next prompt appears instantly prompt lag install cygwin raspberry pi cd linux git repository activate enough prompt segment fill four prompt line side screen wait crazy one ever probably impossible point prompt always fast matter note effect every command instantly reflected next prompt command prompt indicator meaning timew start hack linux hack linux time tracking enabled timewarrior touch x untracked file git repo rm copying unstaged change git repo echo pythonversion current python version pyenv zsh theme capable displaying information either produce prompt lag print prompt nt reflect current state system refresh later get fast prompt uptodate information faq really fast compatibility understands configuration parameter migration straightforward process configuration parameter still work prompt look almost much faster certainly faq pure compatibility produce prompt pure type configure select pure style still use feature transient prompt instant prompt sporting pure style customize prompt edit nt recognize pure configuration parameter need use instead etc relevant parameter file plenty comment help navigate faq best prompt style configuration wizard instant prompt zshrc load many plugins perhaps slow one example pyenv nvm may noticed take time zsh start remove zsh startup lag even caused theme feature called instant prompt need explicitly enable configure manually say tin print prompt instantly upon zsh startup allowing start typing plugins still loading theme increase zsh startup lag lot others little remove outright faq enable instant prompt show command behavior command depends global environment example kubectl run run image cluster defined current kubernetes context frequently change context prod testing might want display current context zsh prompt likewise aws azure google cloud credential prompt get pretty crowded enter show command feature make prompt segment appear relevant command currently typing configs created configure enable show command several prompt segment default relevant parameter kubernetes context show prompt segment kubecontext command typing invokes kubectl helm kubens kubectx oc istioctl kogito helmfile typeset g customize different prompt segment shown open search showoncommand either remove parameter display affected segment unconditionally change value transient prompt transient prompt enabled configure trim every prompt accepting command line transient prompt make much easier copypaste series command terminal scrollback tip enable transient prompt take advantage twoline prompt get benefit extra space typing command without usual drawback reduced scrollback density sparse prompt empty line prompt also work great combination transient prompt current directory work current working directory perhaps important prompt segment go great length highlight important part truncate least loss information horizontal space get scarce full directory nt fit leftmost segment get truncated shortest unique prefix screencast work becomes wo could nt truncated w would ambiguous wireguard session recorded next segment project turn p nothing else started p work directory segment shown one three color truncated segment bleak important segment bright never truncated include first last segment root git repository etc regular segment truncated use inbetween color tip copypaste truncated directory hit tab complete original troubleshooting directory difficult see prompt using rainbow style extremely customizable configured look like zsh theme pure robbyrussell emulation builtin emulate appearance theme need write suitable configuration file best way go run configure select style closest goal edit full range appearance span spartan ridiculous extravagant battery included come dozen builtin high quality segment run configure choose style except pure many segment get enabled default others manually enabled opening uncommenting enable many segment like wo nt slow prompt zsh startup segment meaning osicon o logo apple macos swirl debian etc dir current working directory vcs git repository status promptchar multifunctional prompt symbol change depending vi mode v insert command visual replace mode respectively turn red error context user hostname status exit code last command commandexecutiontime duration wall time last command backgroundjobs presence background job time current time direnv direnv status asdf tool version asdf virtualenv python environment venv anaconda virtual environment conda pyenv python environment pyenv goenv go environment goenv nodenv nodejs environment nodenv nvm nodejs environment nvm nodeenv nodejs environment nodeenv rbenv ruby environment rbenv rvm ruby environment rvm fvm flutter environment fvm luaenv lua environment luaenv jenv java environment jenv plenv perl environment plenv phpenv php environment phpenv haskellstack haskell version stack nodeversion nodejs version goversion go version rustversion rustc version dotnetversion dotnet version phpversion php version laravelversion laravel php framework version javaversion java version package name version packagejson kubecontext current kubernetes context terraform terraform workspace aws aws profile awsebenv aws elastic beanstalk environment azure azure account name gcloud google cloud cli account project googleappcred google application credential nordvpn nordvpn connection status ranger ranger shell nnn nnn shell vimshell vim shell sh midnightcommander midnight commander shell nixshell nix shell indicator todo todo item timewarrior timewarrior tracking status taskwarrior taskwarrior task count vpnip virtual private network indicator ip ip address bandwidth usage specified network interface load cpu load diskusage disk usage ram free ram swap used swap publicip public ip address proxy systemwide httphttpsftp proxy wifi wifi speed battery internal battery state charge level yep battery literally included extensible prompt segment need implement provides public api defining segment fast flexible builtin one linux fetch current cpu temperature reading screencast show define prompt segment display value segment defined use like segment standard customization parameter work box type help segment reference tip prefix name segment avoid clash future version installation manual git clone http echo source zshrc user mainland china use official mirror giteecom faster download 中国大陆用户可以使用 giteecom 上的官方镜像加速下载 git clone http echo source zshrc simplest kind installation work even using plugin manager make sure disable current theme plugin manager see troubleshooting help oh zsh git clone http zshcustom homeohmyzshcustom user mainland china use official mirror giteecom faster download 中国大陆用户可以使用 giteecom 上的官方镜像加速下载 git clone http zshcustom homeohmyzshcustom set zshtheme zshrc prezto add zstyle prezto module prompt theme zpreztorc zim add zmodule zimrc run zimfw install antibody add antibody bundle zshrc antigen add antigen theme zshrc make sure antigen apply somewhere zplug add zplug theme zshrc zgen add zgen load zshrc zplugin add zplugin ice zplugin light zshrc use ice optional type ice neither recommended officially supported zinit add zinit ice zinit light zshrc use ice optional type ice neither recommended officially supported homebrew brew install echo source zshrc arch linux yay sy noconfirm echo source zshrc configuration new user first run configuration wizard ask question configure prompt nt trigger automatically type configure configuration wizard creates based preference additional prompt customization done editing file plenty comment help navigate configuration option faq troubleshooting user using remove configuration option pick provide prompt ui used see compatibility faq troubleshooting extra missing space prompt compared font nt require custom font take advantage available work well nerd font source code pro font awesome powerline even default system font full choice style option available using nerd font recommended font meslo nerd font patched meslo nerd font patched gorgeous monospace font designed jim lyles bitstream customized apple customized andré berg finally patched truly customized script originally developed ryan l mcintyre nerd font contains glyph symbol may need battletested dozen different terminal major operating system faq recommended font created automatic font installation using termux configure install recommended font simply answer yes asked whether install meslo nerd font using different terminal proceed manual font installation manual font installation download four ttf file doubleclick file click install make meslolgs nf font available application system configure terminal use font open preference profile text set font meslolgs nf alternatively type configure answer yes asked whether install meslo nerd font apple terminal open terminal preference profile text click change font select meslolgs nf family hyper open hyper edit preference change value fontfamily moduleexportsconfig meslolgs nf visual studio code open file preference setting enter terminalintegratedfontfamily search box set value meslolgs nf gnome terminal default ubuntu terminal open terminal preference click selected profile profile check custom font text appearance select meslolgs nf regular konsole open setting edit current profile appearance click select font select meslolgs nf regular tilix open tilix preference click selected profile profile check custom font text appearance select meslolgs nf regular window console host old thing click icon top left corner property font set font meslolgs nf window terminal new thing open setting ctrl search fontface set value meslolgs nf every profile termux type configure answer yes asked whether install meslo nerd font blink type config go appearance tap add new font tap open gallery select meslolgs nfcss tap import type exit home view reload font terminus open setting appearance set font meslolgs nf terminator open preference using context menu profile select general tab selected already uncheck use system fixed width font already select meslolgs nf regular exit preference dialog clicking close guake right click open terminal open preference appearance tab uncheck use system fixed width font already select meslolgs nf regular exit preference dialog clicking close alacritty create open configalacrittyalacrittyyml following section font normal family meslolgs nf important run configure changing terminal font old may work incorrectly new font using different terminal know set font share knowledge sending pr expand list try docker try docker safely make change file system trying theme exit zsh image deleted docker run e term e colorterm rm alpine sh uec apk update apk add git zsh nano vim git clone http echo source zshrc cd exec zsh tip install recommended font running docker command get access prompt style tip run configure docker try different prompt style license released mit license faq update command update depends installed installation update command manual git c pull oh zsh git c zshcustom homeohmyzshcustom pull prezto zpreztoupdate zim zimfw update antigen antigen update zplug zplug update zgen zgen update zplugin zplugin update zinit zinit update homebrew brew update brew upgrade arch linux yay syu noconfirm needed important restart zsh updating use source zshrc uninstall remove reference zshrc might snippet top r xdgcachehome homecache n zsh source xdgcachehome homecache n zsh fi bottom f source added configuration wizard remove remove reference zshrc zpreztorc zimrc file may missing normal reference added manually installing refer installation instruction need reminder verify reference gone zshrc zpreztorc zimrc grep e zshrc zpreztorc zimrc devnull command produce output still reference need remove delete configuration file file created configuration wizard may contain manual edits delete source file file downloaded installed command delete depends installation method chosen refer installation instruction need reminder installation uninstall command manual rm rf oh zsh rm rf zshcustom homeohmyzshcustom prezto na zim zimfw uninstall antigen antigen purge zplug zplug clean zgen zgen reset zplugin zplugin delete zinit zinit delete homebrew brew uninstall brew untap arch linux yay r noconfirm restart zsh use source zshrc ask help report bug best way ask help report bug open issue gitter another option else fails email romanperepelitsa gmailcom necessary encrypt communication pgp key aspect shell terminal affect defines prompt nothing else set promptrelated option parameter everything within highlighted area screenshot produced control terminal content color outside area affect terminal window title color used l content style command completion command line color syntax highlighting autosuggestion etc prompt parameter zsh option related prompt using oh zsh migrate run command add list oh zsh theme git clone http replace zshtheme zshtheme sed ibak zshrc restart zsh exec zsh optional highly recommended install recommended font type configure choose favorite prompt style related really fast yes benchmark result obtained zshpromptbenchmark intel running ubuntu config demo theme prompt latency m m m time faster benchmark fairness acceptable latency given spartan configuration need current directory without truncation shortening render m time faster wo nt matter practice m fast enough threshold latency becomes noticeable around m careful configuration easy make prompt frustratingly slow hand nt require trading latency utility virtually instant configuration stay well m mark leaving latency budget plugins might install enable instant prompt see instant prompt learn instant prompt section explains enable list caveat aware instant prompt enabled either configure manually adding following code snippet top zshrc enable instant prompt stay close top zshrc initialization code may require console input password prompt yn confirmation etc must go block everything else may go r xdgcachehome homecache n zsh source xdgcachehome homecache n zsh fi important copy line verbatim nt replace source something else nt call zcompile nt redirect output etc instant prompt enabled duration zsh initialization standard input redirected devnull standard output standard error redirected temporary file zsh fully initialized standard file descriptor restored content temporary file printed using instant prompt carefully check output appears zsh startup may indicate initialization altered perhaps even broken instant prompt initialization code may require console input asking keyring password yn confirmation must moved instant prompt preamble zshrc initialization code merely print console never read work correctly instant prompt although output normally color may appear uncolored either leave suppress output move instant prompt preamble example zshrc break instant prompt enabled r xdgcachehome homecache n zsh source xdgcachehome homecache n zsh fi keychain idrsa agent ssh asks password chattyscript spam stdout even everything fine fixed version keychain idrsa agent ssh moved instant prompt ok perform console io point r xdgcachehome homecache n zsh source xdgcachehome homecache n zsh fi point zsh fully initialized console input wo nt work console output may appear uncolored chattyscript devnull spam output suppressed unset set verbose print warning detects console output initialization bring attention potential issue silence warning without suppressing console output recommended initialization code zshrc print console infeasible move instant prompt preamble suppress output completely disable instant prompt instant prompt break zsh initialization nt know fix note instant prompt requires zsh ok enable even using older version zsh wo nt anything different symbol git status mean using lean classic rainbow style git status may look like feature master merge symbol meaning source feature current branch replaced tag commit branch git status ignoresubmodulesdirty master remote tracking branch shown different local branch git revparse abbrevref symbolicfullname u many commits behind remote git status ignoresubmodulesdirty many commits ahead remote git status ignoresubmodulesdirty many commits behind push remote git revlist leftright count head push many commits ahead push remote git revlist leftright count head push many stash git stash list merge repository state git status ignoresubmodulesdirty many merge conflict git status ignoresubmodulesdirty many staged change git status ignoresubmodulesdirty many unstaged change git status ignoresubmodulesdirty many untracked file git status ignoresubmodulesdirty number staged unstaged untracked file unknown echo git config get bashshowdirtystate related change format git status change format git status change format git status open search mygitformatter edit source code related different symbol git status mean git status homegit displayed prompt using lean classic rainbow style contains following parameter nt show git status prompt repository whose workdir match pattern example set git repository homegit ignored multiple pattern combined foo barbaz typeset g see git status homegit prompt open remove git status sometimes appear grey get colored short period time tl dr git status prompt greyed mean currently computing uptodate git status background prompt get automatically refreshed computation completes current directory within git repository computes uptodate git status every command repository large machine slow computation take quite bit time take longer millisecond configurable via display last known git status grey continues compute uptodate git status background computation completes refreshes prompt new information time colored git status add username andor hostname prompt using lean classic rainbow style prompt show username hostname logged root via ssh little value showing username hostname logged local machine normal user absence username hostname prompt indication working locally nt root change however open close top see important parameter define segment shown prompt generally useful prompt segment listed enabled others commented one interest typeset g context user hostname search context find section config list parameter specific prompt segment see following line nt show context unless running privilege ssh tip remove next line always show context typeset g default sudo content visualidentifier expansion follow tip remove comment last line always see username hostname prompt change format username change color adjusting value parameter nearby plenty comment help navigate also move context different position even prompt segment appear disappear typing prompt segment configured shown current command typing invokes relevant tool show prompt segment kubecontext command typing invokes kubectl helm kubens kubectx oc istioctl kogito helmfile typeset g configs created configure may contain parameter kind customize different prompt segment shown open search showoncommand either remove parameter change value also define function zshrc toggle display prompt segment always command similar kubeonkubeoff function kubetoggle unset else fi reload zle zle pushinput zle acceptline fi invoke function typing kubetoggle also bind key adding two line zshrc zle n kubetoggle bindkey kubetoggle ctrl toggle kubecontext prompt change prompt color either change color palette used terminal set color configuration parameter change color palette used terminal exactly change terminal color palette aka color scheme theme depends kind terminal using look around terminal settingspreferences consult documentation change terminal color palette usually affect first color numbered order see effect prompt need use prompt style utilizes lownumbered color type configure select rainbow lean color pure original style use highernumbered color look terminal color palette set color configuration parameter open search color foreground background change value appropriate parameter example set foreground time prompt segment bright red typeset g color specified using number color look differently different terminal many terminal also support customization color color palette aka color scheme theme color always look type source apply change current zsh session see different color look terminal run following command print pn k k f f n done spawn extra process us gitstatus backend behind vcs prompt gitstatus spawn gitstatusd zsh see gitstatus detail may also spawn zsh perform computation without blocking prompt avoid security hazard background process nt shared different interactive shell terminate automatically parent zsh process terminates run exec configuration option make slow always fast configuration throw noticeable prompt latency using please open issue fast load yes provided using zsh loading time time first prompt measured following benchmark time repeat zsh dfis source note measure time first complete prompt also display limited prompt fullfeatured prompt ready running command current directory machine prompt benchmark take second m per invocation time faster time faster relationship forked march weeklong discussion already mature project large user base release cycle measured month spun iterate performance improvement new feature much higher pace independent project using one nt install issue filed project actually use individual commit right repository bug fix new feature committed repository get ported time virtually code rewritten currently meaningful overlap implementation committed maintaining backward compatibility configs indefinitely commitment cover configuration parameter recognized see compatibility additional parameter understands name parameter start consistency always render exactly prompt given config almost difference default git vcs backend enabled need svn hg add backends nt yet optimized enabling make prompt slow nt support strives bugcompatible come egregious bug accidentally rely bug prompt differ example ignores option set theme sourced respect option see different icon probably defined sourcing theme parameter get ignored honored want prompt look remove nt respect zlerpromptindent result right prompt extra space end compared set nt want space detail troubleshooting inconsistent spacing around icon fixed set get spacing detail troubleshooting dozen bug nt exist notice change prompt appearance switching please open issue best prompt style configuration wizard many opinion constitutes best prompt people mostly come personal preference however hidden implication different choice pure style exact replication pure zsh theme exists ease migration user theme unless one choose lean style pure want confine prompt color selected terminal color palette say solarized dark use rainbow lean color pure original style use fixed color thus look terminal color palette style except pure option use ascii charset prompt look le pretty render correctly font locale enable transient prompt take advantage twoline prompt get benefit extra space typing command without usual drawback reduced scrollback density command start offset also nice similarly enable transient prompt sparse prompt empty line prompt great choice using vi keymap choose prompt promptchar shown green wizard symbol change depending vi mode v insert command visual replace mode respectively command fails symbol turn red lean style always promptchar rainbow classic style twoline configuration without left frame value horizontal space prefer minimalist aesthetic use monospace font recommended font nonmonospace font require extra space icon larger single column use lean style compared classic rainbow save two character per prompt segment disable current time frame use icon extra icon enabled many icon option primarily serve decorative function informative icon background job indicator shown either way note run configuration wizard many time like type configure try new prompt style make look like robbyrussell oh zsh theme use config either download save source zshrc source directly cloned repository prompt completed command display error status command instead command preceding hit enter command typed start running error status nt yet known shown prompt command completes error status get known longer possible update prompt command error status every command reflected next prompt detail see post rzsh minimum supported zsh version zsh newer work fast startup requires zsh screenshots animated gifs created screenshots animated gifs recorded gnome terminal recommended font tango dark color palette custom background color instead twice dark syntax highlighting present provided zshsyntaxhighlighting recommended font created recommended font product many individual origin bitstream vera sans mono given birth menlo turn spawned meslo finally extra glyph added meslo script forked nerd font final font released term apache license meslolgs nf font recreated following command requires git docker git clone http githubcomromkatvnerdfontsgit cd nerdfonts build meslos everything go well four ttf file appear package distribution currently neither easy recommended package distribute instruction follow would allow easily update package new version released may change future soon troubleshooting question mark prompt look like regular normal mean untracked file current git repository type git status see file change symbol disable display untracked file altogether search untracked file faq different symbol git status mean also get weirdlooking question mark prompt terminal font missing glyph see icon glyph powerline symbol nt render icon glyph powerline symbol nt render restart terminal install recommended font run configure subpixel imperfection around powerline symbol three imperfection screenshot left right thin blue line subpixel gap content prompt segment following powerline connection incorrect alignment powerline connection following prompt segment connection appears shifted right thin red line powerline connection connection appears shifted zsh theme nt downtopixel control terminal content everything see screen made monospace character white powerline prompt segment made text white background followed rightpointing triangle prompt imperfection around powerline symbol see exactly imperfection powerline theme agnoster powerline etc several thing try deal imperfection try recommended font already using switching another font may help unlikely change terminal font size one point example powerline prompt look perfect font size break enable builtin powerline glyph terminal setting terminal support change font hinting andor antialiasing mode terminal setting shift text one pixel updownleftright terminal option try different terminal radical solution switch prompt style without background type configure select lean style modern lightweight look bonus nt suffer rendering imperfection afflict powerlinestyle prompt error character range type echo get error saying zsh character range locale nt support need fix running zsh ssh see running zsh locally google set locale o cursor wrong place type echo get error saying zsh character range see previous section echo command print cursor still wrong place install recommended font run configure nt help add unset zlerpromptindent bottom zshrc still issue run following command diagnose problem emulate l zsh setopt errreturn nounset local text print rl select part prompt terminal window paste read r prompt text local len text local frame pl len print lr frame text frame prompt line aligns frame romka adam output command aligned every part prompt left right indicates bug theme config use command diagnose print rl eq prompt eq rprompt look backslash escape output likely culprit open issue get stuck prompt line longer frame romka adam usually caused terminal bug misconfiguration make print ambiguouswidth character doublewidth instead single width example issue prompt line shorter frame mangled romka adam note prompt different original missing space check mark caused lowlevel bug macos see issue also happen prompt contains glyph designated wide unicode standard terminal incorrectly display nonwide terminal suffering limitation include konsole hyper integrated vscode terminal solution use different terminal remove wide glyph prompt prompt line shorter frame mangled romka adam caused misconfigured locale see issue prompt wrapping around weird way see cursor wrong place right prompt wrong place see cursor wrong place configuration wizard run automatically every time zsh started start automatically run configure parameter defined based prompt style choice configuration wizard creates bunch parameter add line zshrc source file next time start zsh configuration wizard nt run automatically mean evaluation zshrc terminates prematurely reach line source often happens due syntax error zshrc error get hidden configuration wizard screen nt notice exit configuration wizard look error message also use zsh start zsh without automatically running configuration wizard see error fix zshrc get rid prompt style missing configuration wizard zsh version colorterm environment variable neither truecolor configuration wizard wo nt offer pure style snazzy color scheme fix install zsh use terminal truecolor support verify print p f red f terminal display fewer color configuration wizard preselects lean style color style require least color fix use terminal color support make sure term environment variable set correctly verify print terminfo color locale system configuration wizard wo nt offer prompt style use unicode character fix install locale verify locale locale available first question asked configuration wizard ass capability terminal font answer indicate glyph nt render correctly configuration wizard wo nt offer prompt style use fix restart terminal install recommended font verify running configure checking glyph render correctly install recommended font download recommended font install like font google install font o extra missing space prompt compared tl dr add zshrc get prompt spacing using config might get additional space prompt come two flavor extra space without background right side right prompt tl dr add zshrc get rid space zsh documentation zlerpromptindent set used give indentation right hand side right prompt line editor given rprompt right hand side screen set value used typically used set value prompt appears flush right hand side screen respect parameter set leave unset thing setting get empty space right right prompt set prompt go edge terminal work every theme except issue fixed development branch fix nt yet made master add zshrc get spacing right edge prompt note several version zsh bug get triggered set work around bug using powerline prompt style notice visual artifact prompt wrong cursor position try removing zlerpromptindent zshrc extra missing space around icon tl dr add zshrc get spacing around icon spacing around icon inconsistent inconsistency constant source annoyance fixed add zshrc get spacing around icon note good idea define using configure weird thing happen typing source zshrc almost always bad idea run source zshrc whether using command may result random error misbehaving code progressive slowdown zsh made change zshrc file sourced restart zsh apply reliable way type exit start new zsh session also use exec zsh exactly equivalent complete zsh restart command much reliable source zshrc transient prompt stop working time see weird thing happen typing source zshrc make work plugin manager installation instruction nt work try disabling current theme end theme installing manually disable current theme framework plugin manager ohmyzsh open zshrc remove line set zshtheme might look like zshtheme zplug open zshrc remove zplug command refers current theme example currently using look zplug use prezto open zpreztorc put zstyle prezto module prompt theme remove command set theme zstyle prezto module prompt theme antigen open zshrc remove line set antigen theme might look like antigen theme install manually git clone http echo source zshrc method installation wo nt make anything slower otherwise subpar directory difficult see prompt using rainbow style rainbow style current working directory shown bright white text blue background white fixed always look appearance blue defined terminal color palette light may difficult see white text several way fix type configure choose readable prompt style change terminal color palette try tango dark solarized dark change blue color change directory background andor foreground color parameter looking called find horrific mess resizing terminal window resize terminal window horizontally back forth time might see ugly picture tl dr bug zsh nt specific see mitigation zsh bug issue caused bug zsh get triggered vertical distance start current prompt cursor henceforth vd change terminal window resized bug specific terminal window get shrunk horizontally two way terminal handle long line longer fit reflow truncate terminal content shrinking terminal reflows text shrinking terminal truncates text shrinking reflowing strategy change height terminal content content happens start current prompt cursor zsh print prompt wrong line truncation strategy never change height terminal content nt trigger bug zsh let see bug play slow motion start launching zsh df pasting following code function pause read function pause reset print l setopt promptsubst prompt pause left pl rightn prompt get expanded call pause let u observe state terminal initial state zsh keep track cursor position relative start current prompt case know cursor one line shrink terminal window look like point terminal sends sigwinch zsh notify change terminal dimension note signal sent content terminal reflown zsh receives sigwinch attempt erase current prompt print anew go position think current prompt one line cursor era terminal content follows print reexpanded prompt however resizing prompt longer one line cursor two line zsh end printing new prompt one line low case ended unwanted junk content vd increased make terminal window wider vd also decrease would result new prompt printed higher intended potentially erasing useful content process example shrinking terminal window increased vd simple oneline left prompt right prompt promptsubst note cursor prompt line hit escenter get simple oneline left prompt promptsubst right prompt vd bound increase upon terminal shrinking due command line wrapping around zsh patch bug described partially fixed terminal branch idea behind fix use sc save cursor terminal capability printing prompt rc restore cursor move cursor back original position prompt need refreshed patch work terminal reflow saved cursor position together text terminal window resized patch observable effect terminal nt reflow text resize patched unpatched zsh behave correctly terminal reflow text saved cursor position patched unpatched zsh redraw prompt incorrect position word patch fix resizing issue terminal keeping behavior unchanged others two alternative approach fixing bug may seem work first glance fact nt instead sc use terminal capability query current cursor position cup go back nt work absolute position start current prompt change text get reflown recompute vd based new terminal dimension attempting refresh prompt nt work zsh nt know whether terminal reflows text truncates zsh could somehow know terminal reflows text approach still would nt work terminal continuously reflow text rapidfire sigwinch window resized environment real terminal dimension go sync zsh think dimension eta patch making way upstream zsh see discussion mitigation mitigation option issue apply patch rebuild zsh source wo nt help using alacritty kitty terminal reflows text resize nt reflow saved cursor position terminal patch visible effect disable text reflowing window resize terminal setting terminal nt setting try different terminal avoid long line start prompt cursor disable ruler disable prompt connection disable right frame set right prompt last prompt line cause resizing issue cursor nt common might want keep element provided none succeeded newline icon cut konsole using konsole nonmonospace font icon may cut right side nonmonospace refers font glyph wider single column wider two column glyph designated wide unicode standard last line screenshot show cut arch linux logo several mitigation option issue use different terminal konsole terminal exhibit behavior use monospace font manually add extra space icon get cut example content osicon prompt segment get cut open search change follows typeset g extra space end use different icon monospace example arch linux logo get cut add following parameter typeset g plain arch place logo disable display icon get cut example content osicon prompt segment get cut open remove osicon note nonmonospace font officially supported konsole arch linux logo dot bottom right corner font incorrect dotted icon bold typeface two way fix issue use font correct arch linux logo bold typeface example recommended font display icon regular nonbold typeface open search remove b value typeset g bold table content
140,Lobsters,vcs,Git & VCS,Zsh prompt with asynchronous Git status,https://vincent.bernat.ch/en/blog/2019-zsh-async-vcs-info,zsh prompt asynchronous git status,zsh documentation zshasync define wrapper define worker schedule wrapper function complete code,zsh ship vcsinfo function fetching information vcs state current directory populating variable used shell prompt support several vcs including git svn example configuration autoload uz vcsinfo zstyle vcsinfo enable git local format prch branch b c u local actionformats format fg default prch sep fg green zstyle vcsinfo format format zstyle vcsinfo actionformats actionformats zstyle vcsinfo stagedstr fg green prch circle zstyle vcsinfo unstagedstr fg yellow prch circle zstyle vcsinfo checkforchanges true addzshhook precmd vcsinfo action include merge rebase bisect use prompt display current branch presence staged unstaged change well ongoing action look documentation detail example prompt including information vcsinfo function large repository information expensive fetch vcsinfo query git interaction zsh stuck possible solution execute vcsinfo asynchronously zshasync first step define wrapper around vcsinfo wrapper run separate process communicate result using standard output expects current directory first argument vbevcsinfo cd q vcsinfo print second step define worker vcsinfo attach function handle result received wrapper registered function call zle resetprompt force refresh prompt updated information source zsh asynczsh asyncinit asyncstartworker vcsinfo asyncregistercallback vcsinfo vbevcsinfodone vbevcsinfodone local stdout stdout zle resetprompt last step schedule wrapper function worker queue displaying prompt replaces synchronous invocation vcsinfo addzshhook precmd asyncjob vcsinfo vbevcsinfo pwd without relying vcsinfo possible better experience fetching current branch name retrieving expensive information however without much effort simple integration make prompt snappier look complete code contains small enhancement
141,Lobsters,vcs,Git & VCS,Git tips for trunk-based development,https://dev.to/alediaferia/git-tips-for-trunk-based-development-1i1g,git tip trunkbased development,trunkbased development little feature branch make sure feature branch let replay change top master local branch another option want control commits rebase interactively temporarily parking change use lease detailed explanation conclusion follow twitter dry augustyns unsplash clubhouseio,trunkbased development source code branching model aimed mitigating code integration delivery risk implemented successfully help reducing lead time delivering value production post going focus benefit trunkbased development rather try outline example git leveraged achieve better result implementing kind branching model git pull r trunkbased development master trunk branch likely update pretty often implementing little feature branch order keep sync make sure changeset always get applied top latest version master make sure feature branch git branch master myawesomefeature let replay change top master local branch git pull r origin master command make sure latest change origin fetched rebasing top another option want control commits rebase interactively git pull rebaseinteractive list commits going applied top master local branch pick brilliant commit pick even better commit pick average commit follow instruction included editor finetune list commits maybe change something like squashing last two commits pick brilliant commit pick even better commit fixup average commit note fixup discard commit message commit fixed temporarily parking change might started developing something new locally somebody team need review pull request order lose progress make sure store somewhere checking change review git stash gitstash help stashing change locally git stash u exploring possible aibased blockchain compiler u switch ensures also untracked file get stashed pretty neat stashing require message find pretty useful resuming parked work make sure change stashed git stash list stash aispike exploring possible aibased blockchain compiler ready check someone else code ready get back working automatically apply latest stashed change remove stash collection conflict occur otherwise manually git stash drop resolve conflict use pop without automatically dropping change stash collection command accept stash reference form stash index use unstash specific change git commit wip another option especially need push temporary change origin maybe want finish work different machine might temporarily committing everything coming back later clean branch history git branch mytempbranch master git add git commit wip current progress aibased blockchain compiler like prefix commits common label like wip work progress case ready resume work git checkout mytempbranch git reset assuming stored everything last commit reset restore current work directory state commit keeping modification wip commit unless specify hard git rebase even though mentioned rebase part pull section use pure git rebase command cover slightly different case think commit history current feature branch could use little clean git rebase might come handy time might couple commits could squashed one well maybe reordering commits give clarity overall branch history achieved pretty easily using git rebase interactive let say want review commits got branch since master pro tip nt remember many commits diverging master git log master visualize relevant one git branch lovelybranch master git rebase configured editor open commits waiting taken care pick begin pick made progress pick test pas pick added one test case pick refactored class name pick added doc pick fixed typo doc could rewrite history follows pick begin sqaush made progress fixup test pas fixup added one test case reword refactored class name reword added doc fixup fixed typo doc upon first squash requested amend commit message specify something descriptive like new compilation target webassembly subsequent fixups lose commit message first reword item require u specify new commit message renamed wasm class wa class finally last rewordwill become added missing documentation section webassembly target new compilation target webassembly renamed wasm class wa class added missing documentation section webassembly target much cleaner branch history use force lease branch already pushed remote rewriting history explicit overwriting git push forcewithlease lovelybranch lovelybranch overwrite remote history current branch expected eg match local ref origin detailed explanation forcewithlease refuse update branch unless state expect ie nobody updated branch upstream practice work checking upstream ref expect ref hash implicitly encode chain parent value unfortunately forcewithlease able protect ide fetch background git wo nt able detect difference expected remote ref general trunkbased development chance somebody else work feature branch parallel quite low nonexistent branching model supposed work small change time enabling developer work different thing hence different branch time conclusion command presented part usual development workflow hope overview helpful please leave feedback let know use git achieve trunkbased development want hear software engineering practice follow twitter photo dry augustyns unsplash originally published clubhouseio
142,Lobsters,vcs,Git & VCS,"The Principles of Versioning in Go (Go & Versioning, Part 11)",https://research.swtch.com/vgo-principles,principle versioning go go versioning part,principle versioning go pdf talk gave gophercon singapore version go module mirror checksum database versionaware go package discovery site version software engineering following definition presentation idea cppcon principle principle compatibility semantic versioning go compatibility guideline objection aesthetic objection updating import path update program gradually objection multiple major version build semantic import versioning objection hard experiment principle repeatability objection using latest version feature objection using latest version feature building library principle cooperation objection use declared incompatibility sat solver sat solver algorithm used go module masking many missing constraint example go module versus sat solving satsolverbased version selection conclusion using go module,principle versioning go posted tuesday december pdf blog post added package versioning go form go module reason made choice adapted updated talk gave gophercon singapore version start let make sure page taking look way gopathbased go get break suppose fresh go installation want write program import run go get remember using original gopathbased go get go module go get look downloads latest version right build happy suppose month later need c run go get c look downloads latest version c c go get c c import go get find already downloaded copy reuses copy unfortunately copy still latest copy c written using contains feature maybe bug fix c need missing c broken dependency old since build failed try go get u c go get u c unfortunately hour ago author published go get u us latest version every dependency including turn c still broken c author used worked fine introduced bug keep c working properly c broken old c broken new two way go get fails using gopath sometimes us dependency old time us dependency new really want case version c author used tested gopathbased go get awareness package version go programmer started asking better handling package version soon published goinstall original name go get various tool written many year separate go distribution help make installing specific version easier tool agree single approach work base creating versionaware tool versionaware godoc versionaware vulnerability checker needed add concept package version go many reason pressing reason help go get stop using code old new agreedupon meaning version vocabulary go developer tool enables entire go ecosystem become versionaware go module mirror checksum database safely speed go package downloads new versionaware go package discovery site made possible ecosystemwide understanding version version software engineering past two year added support package version go form go module built go command go module introduce new import path syntax called semantic import versioning along new algorithm selecting version use called minimal version selection might wonder language java maven node npm ruby bundler rust cargo solved problem might also wonder introduced new experimental go tool called dep early implemented general approach pioneered bundler cargo go module reuse dep design answer learned dep general bundlercargodep approach includes decision make software engineering complex challenging thanks learning problem dep design go module design made different decision make software engineering simpler easier instead software engineering software engineering different programming like following definition software engineering happens programming add time programmer programming mean getting program working problem solve write go code run get answer done programming difficult enough code keep working day day five programmer need work code code must adapt gracefully requirement change start think version control system track code change time coordinate programmer add unit test make sure bug fix reintroduced time six month new team member unfamiliar code think modularity design pattern divide program part team member work mostly independently use tool help find bug earlier look way make program clear possible bug le likely make sure small change tested quickly even large program programming turned software engineering definition explanation software engineering riff original theme google colleague titus winter whose preferred phrasing software engineering programming integrated time worth seven minute time see presentation idea cppcon video nearly go distinctive design decision motivated concern software engineering example people think format go code gofmt make code look nicer end debate among team member program layout degree important reason gofmt algorithm defines go source code formatted program like goimports gorename go fix edit source code easily help maintain code time another example go import path url code imported uuid ask uuid package searching uuid pkggodev turn dozen package name instead code import githubcomgoogleuuid clear package mean using url avoids ambiguity also reuses existing mechanism giving name making simpler easier coordinate programmer continuing example go import path written go source file separate build configuration file make go source file selfcontained make easier understand modify copy decision made toward goal simplifying software engineering principle three broad principle behind change dep design go module motivated wanting simplify software engineering principle compatibility repeatability cooperation rest post explains principle show led u make different decision go module dep responds fairly objection making change principle compatibility meaning name program change time first principle compatibility prefer idea program meaning name change time name meant one thing last year mean thing year next year example programmer sometimes confused detail stringssplit expect splitting hello world produce two string hello world input leading trailing repeated space result contains empty string example stringssplit x hello world hello world hello world hello world hello world hello world hello world hello world suppose decide would better overall change behavior stringssplit omit empty string given stringssplit specific meaning documentation implementation agree meaning program depend meaning changing meaning would break program would break principle compatibility implement new meaning need give new name fact year ago solve exact problem introduced stringsfields tailored spaceseparated field never return empty string example stringsfields x hello world hello world hello world hello world hello world hello world hello world hello world redefine stringssplit concerned compatibility following principle compatibility simplifies software engineering let ignore time trying understand programming people think well package written back stringssplit returned empty string package written last week expects stringssplit leave people tool worry time either example refactoring tool always move stringssplit call one package another without worrying change meaning fact important feature go language change new library feature declaration compatibility intended program written go specification continue compile run correctly unchanged lifetime specification go program work today continue work even future point release go arise go go etc committed would stop changing meaning name standard library program working go could expected continue working go ongoing commitment make easy user write code keep working even upgrade newer go version get faster implementation new feature compatibility versioning important think compatibility popular approach versioning encourages incompatibility semantic versioning unfortunate effect making incompatible change seem easy every semantic version take form vmajorminorpatch two version major number later like greater version expected backwards compatible earlier lesser one two version different major number expected compatibility relationship semantic versioning seems suggest okay make incompatible change package tell user incrementing major version number everything fine empty promise incrementing major version number enough everything fine stringssplit one meaning today different meaning tomorrow simply reading code software engineering programming need think time get worse suppose b written expect stringssplit c written expect stringssplit fine build happens package import b c stringssplit one meaning way build working program go module design realized principle compatibility absolutely essential simplifying software engineering must supported encouraged followed go faq encouraged compatibility since go november package intended public use try maintain backwards compatibility evolve go compatibility guideline good reference remove exported name encourage tagged composite literal different functionality required add new name instead changing old one complete break required create new package new import path go module gave old advice new name import compatibility rule old package new package import path new package must backwards compatible old package semantic versioning still want use semantic versioning many user expect import compatibility rule requires different semantic major version definition compatibility relationship must use different import path way go module put major version import path call semantic import versioning example identifies semantic version particular module version mything explicit version module path introduce major version larger add version module name distinguish version major version version version string package module reason really needed redefine split instead adding new function field could create string major version major version different split function unbuildable program built b say import string c say import different package okay build program b c split function expect string different import path people tool automatically understand name different package people already understand cryptorand mathrand name different package one need learn new disambiguation rule let return unbuildable program using semantic import versioning replace string example arbitrary package classic diamond dependency problem b c build fine different conflicting requirement try use build single choice work semantic import versioning cut diamond dependency thing conflicting requirement version must backwards compatible version version different import path program using major version keep separate two package different import path build fine objection aesthetic common objection semantic import versioning people like seeing major version import path short ugly course really mean people used seeing major version import path think two example major aesthetic shift go code seemed ugly time adopted simplified software engineering look completely natural first example export syntax back early go used export keyword mark function exported knew needed something lightweight mark individual struct field casting idea considering thing like leading underscore mean unexported leading plus declaration mean export eventually hit uppercase export idea using uppercase letter export signal looked strange u drawback could find otherwise idea sound satisfied goal appealing choice considering adopted remember thinking changing fmtprintf fmtprintf code ugly least jarring fmtprintf look like go least go writing good argument went along implemented change week got used fmtprintf look like go came appreciate precision exported reading code go back c java code see call like xdangerous miss able tell glance whether dangerous method public method anyone call second example import path mentioned briefly earlier early day go goinstall go get import path full url developer manually download install package named uuid would write import uuid changing url import path import githubcomgoogleuuid eliminated ambiguity added precision made go get possible people complain first longer path second nature u rely appreciate precision make software engineering work simpler export full url import motivated good software engineering argument real objection visual aesthetic time came appreciate benefit aesthetic judgement adapted expect happen major version import path get used come value precision simplicity bring objection updating import path another common objection upgrading say module module requires changing import path referring module even client code need change true upgrade requires rewriting import path also easy write tool global search replace intend make possible handle upgrade go fix although implemented yet previous objection one implicitly suggest keeping major version information separate version metadata file import path precise enough identify semantics like back import uuid might meant one dozen different package programmer tool look metadata file answer question major version stringssplit calling happens copy file one module another forget check metadata file instead keep import path semantically precise programmer tool need taught new way keep different major version package separate another benefit major version import path update package update program gradually stage maybe one package time always clear code converted objection multiple major version build another common objection build disallowed entirely way author think complexity arise situation example maybe package defines command line flag register http handler building single program would fail without explicit coordination version dep enforces exactly restriction people say simpler simplicity author simplicity user normally user outnumber author coexist single build diamond dependency back convert large program gradually way explained internetscale project fragment go package ecosystem incompatible group package use use detailed example see blog post semantic import versioning dep forced disallow multiple major version build go build system requires import path name unique package dep consider semantic import versioning contrast cargo system allow multiple major version build understand reason system allow multiple version reason go module allowing make hard work large program objection hard experiment final objection version import path unnecessary overhead starting design package user making frequent backwardsincompatible change absolutely true semantic versioning make exception exactly situation major version compatibility expectation iterate quickly first starting worry compatibility example need backwards compatible anything else semantic import versioning make similar exception major version mentioned import path case rationale time entered picture software engineering yet programming course mean use version people package accepting new version package might include breaking api change without corresponding import path change take responsibility update code happens principle repeatability result build given version package change time second principle repeatability program build repeatability mean building specific version package build decide dependency version use way repeatable change time build today match build code tomorrow programmer build next year package management system make guarantee saw earlier gopathbased go get provide repeatability first go get used version old go get u used version new might think course go get make mistake know anything version system make mistake going use dep example least bundler cargo work way dep asks every package include metadata file called manifest list requirement dependency version dep downloads c read c manifest learns c need later dep downloads newest version satisfying constraint yesterday meant today mean decision timedependent change day day build repeatable developer dep bundler cargo understood importance repeatability introduced second metadata file called lock file c whole program go call package main lock file list exact version use every dependency c dep let lock file override decision would normally make locking decision ensures stop changing time make build repeatable lock file apply whole program package main c library built part larger program lock file meant building c might satisfy additional constraint larger program dep others must ignore lock file associated library fall back default timebased decision add c larger build exact package get depends day summary dep start timebased decision version use add lock file override timebased decision repeatability lock file applied whole program go module go command instead make decision version use way change time build repeatable time without added complexity lock file override repeatability applies library whole program algorithm used go module simple despite imposing name minimal version selection work like package specifies minimum version dependency example suppose b request later c request later go module go command prefers use exact version latest version building b use building c use build library repeatable also shown figure different part build request different minimum version go command us latest requested version build see request later build chooses decision depend whether exist change time call minimal version selection two reason first package selects minimum version satisfying request equivalently maximum request second seems simplest approach could possibly work minimal version selection provides repeatability whole program library always without lock file remove time consideration every chosen version always one version mentioned explicitly package already chosen build objection using latest version feature usual first objection prioritizing repeatability claim preferring latest version dependency feature bug claim programmer either want lazy update dependency regularly tool like dep use latest dependency automatically argument benefit latest version outweigh loss repeatability argument hold scrutiny tool like dep provide lock file require programmer update dependency exactly repeatable build important using latest version deploy bug fix want sure bug fix change also picking different newer version dependency want delay upgrade ask ready run unit test integration test maybe even production canary start using upgraded dependency production everyone agrees lock file exist everyone agrees repeatability important automatic upgrade objection using latest version feature building library nuanced argument could make minimal version selection would admit repeatability matter whole program build argue library balance different latest dependency important repeatable build disagree programming increasingly mean connecting large library together large library increasingly organized collection smaller library reason prefer repeatability wholeprogram build become important library build extreme limit trend recent move cloud computing serverless hosting like amazon lambda google cloud function microsoft azure function code upload system library whole program certainly want production build server use version dependency development machine course matter important make easy programmer update dependency regularly also need tool report version package given build given binary including reporting update available known security problem version used principle cooperation maintain go package ecosystem must work together tool work around lack cooperation third principle cooperation often talk go community go open source ecosystem word community ecosystem emphasize work interconnected building contribution goal one unified system work coherent whole opposite want avoid ecosystem fragmented split group package work principle cooperation recognizes way keep ecosystem healthy thriving u work together matter technically sophisticated tool go open source ecosystem guaranteed fragment eventually fail implication okay fixing incompatibility requires cooperation avoid cooperation anyway example c requires later thanks repeatability build c use build c part larger build need okay released larger build maybe continuous integration testing discovers c work matter solution c author author cooperate release fix exact fix depends exactly went wrong maybe c depends buggy behavior fixed maybe c depends unspecified behavior changed solution c author release new c version cooperating evolution maybe simply bug solution author release fixed cooperating respecting principle compatibility point c author release c version specifies requires take minute look happened latest c latest work together introduced small fracture go package ecosystem c author author worked fix bug cooperating rest ecosystem repair fracture cooperation essential keeping ecosystem healthy adequate technical substitute repeatable build go module mean buggy picked user explicitly ask upgrade creates time c author author cooperate real solution go module system make attempt work around temporary incompatibility objection use declared incompatibility sat solver common objection approach depending cooperation unreasonable expect developer cooperate developer need way fix problem alone argument go truly depend others solution offered package manager like bundler cargo dep allow developer declare incompatibility package others employ sat solver find package combination ruled constraint argument break reason first algorithm used go module select version already give developer particular module complete control version selected module control fact sat constraint developer force use specific version dependency saying use exact version matter anyone else say power limited build specific module avoid giving developer control build second repeatability library build go module mean release new incompatible version dependency immediate effect build saw previous section breakage surface someone take step add version build point step back third version selection phrased problem sat solver often many possible satisfying selection sat solver must choose clear criterion saw earlier satbased package manager choose multiple valid possible selection preferring newer version case using newest version everything satisfies constraint clear preferred answer two possible selection latest b older c older b latest c preferred developer predict outcome resulting system difficult understand fourth output sat solver good input incompatibility omitted sat solver may well arrive combination still broken declared incompatibility information likely particularly incomplete combination involving dependency significant age difference may well never put together indeed analysis rust cargo ecosystem found cargo preference latest version masking many missing constraint cargo manifest latest version work exploring old version seems likely produce combination yet known broken produce working one overall step happy path selecting newest version every dependency sat solverbased package manager likely choose working configuration go module anything sat solver may well le likely find working configuration example go module versus sat solving counterargument given previous section bit abstract let make concrete continuing example working looking happens using sat solver like dep using dep concreteness immediate predecessor go module behavior specific dep mean single purpose example dep work way many package manager share problem detailed set stage remember c work fine combination c broken get noticed perhaps continuous integration testing question happens next c author find c work dep allows encourages issuing new version c c document need later idea documenting incompatibility help dep avoid future build dep avoiding incompatibility urgent lack repeatability library build mean soon released future fresh build c use break build emergency c new user broken author unavailable c author time fix actual bug argument c author must able take step protect user breakage step release c documenting incompatibility fix new build c preventing use emergency happen using go module minimal version selection repeatable build using go module release affect c user nothing explicitly requesting yet user keep using older version already use need document incompatibility nothing breaking time cooperate real fix looking dep approach documenting incompatibility releasing c great solution one thing premise author created build emergency releasing unavailable release fix important give c author way fix thing releasing c author might unavailable happens c author unavailable emergency caused automatic upgrade continues c new user stay broken repeatable build go module avoid emergency entirely also suppose bug author issue fixed workaround c requires use fixed c author issue c allow use contrast using go module c author issue c also undo issuing c simple example go module end working smoothly user dep avoid build breakage automatically creating time cooperation real fix ideally c get fixed c user even notice complex example maybe dep approach documenting incompatibility better complicated situation maybe keep thing working even real fix take long time arrive let take look let rewind clock little buggy released compare decision made dep go module figure show documented requirement relevant package version along way dep go module would build latest c latest dep using go module system using tool found working build everyone happy suppose buggy released dep build pick automatically break go module build keep using keep working simple situation looking move though let fix dep build release c document incompatibility dep build pick c automatically build start working go module document incompatibility way go module build also broken fix needed let create build complex enough break go module two step first release new b requires second release new requires new b point build use c break start releasing new b requires go module build unaffected far thanks repeatability look dep build pick b automatically broken happened dep prefers build using latest b latest c possible latest b want latest c want dep give look alternate version b c agree acceptable case dep decided keep latest b mean using mean using c since dep use latest c try older version c c look good say need later allows dep us c break know c incompatible dep dep know c released c author predicted would problem package management system agree package content must immutable published mean way c author retroactively document c work way change c requirement retroactively would violate repeatability releasing c updated requirement fix dep prefers use latest c time use c know avoid dep use latest everything start trying earlier version thing including maybe c using c make look like though know build break might break strictly speaking dep make decision dep realized use latest b latest c many option might proceed assumed dep kept latest b instead dep kept latest c would need use older older b producing working build shown third column diagram maybe dep build broken maybe depending arbitrary decision make satsolverbased version selection last checked given choice newer version one package versus another dep prioritizes one alphabetically earlier import path least small test case example demonstrates another way dep system like nearly package manager besides go module produce surprising result one preferred answer use latest everything apply often many choice clear preference exact answer depends detail sat solving algorithm heuristic often input order package presented solver underspecification nondeterminism solver another reason system need lock file event sake dep user let assume dep lucked choice keep build working still trying break go module user build break go module build let release new version version requires latest b turn requires latest go command build latest forced use latest b latest go module c go command us c combination c work finally broken go module build look dep build using c also broken dep make choice latest b latest c chose latest b build broke chose latest c build worked new requirement forcing dep choose latest b latest taking away dep choice latest c dep us older c build break like conclude first documenting incompatibility dep guarantee avoid incompatibility second repeatable build like go module also guarantee avoid incompatibility tool end building incompatible pair package saw take multiple intentional step lead go module broken build step lead dep broken build along way depbased build broke two time go module build using dep example immediate predecessor go module mean single dep respect work way nearly every package manager every language problem even really broken misbehaving much unfortunately designed designed try work around lack cooperation among various package maintainer tool work around lack cooperation real solution c versus incompatibility release new fixed version either c trying avoid incompatibility useful creates time c author author cooperate fix compared dep approach preferring latest version documenting incompatibility go module approach repeatable build minimal version selection documented incompatibility creates time cooperation automatically build emergency declared incompatibility explicit work user rely cooperation real fix conclusion three principle versioning go reason design go module deviate design dep cargo bundler others compatibility meaning name program change time repeatability result build given version package change time cooperation maintain go package ecosystem must work together tool work around lack cooperation principle motivated concern software engineering happens programming add time programmer compatibility eliminates effect time meaning program repeatability eliminates effect time result build cooperation explicit recognition matter advanced tool work programmer work around three principle also reinforce virtuous cycle compatibility enables new version selection algorithm provides repeatability repeatability make sure buggy new release ignored explicitly requested creates time cooperate fix cooperation turn reestablishes compatibility cycle go around go go module ready production use many company including google adopted go go release bring additional ergonomic improvement toward eventually deprecating removing support gopath adopting module see blog post series go blog starting using go module
143,Lobsters,vcs,Git & VCS,gitignore.io,http://gitignore.io/,gitignoreio,,search operating system ides programming language create
144,Lobsters,vcs,Git & VCS,Properly managing your .gitignore file,https://julien.danjou.info/properly-managing-your-gitignore/,properly managing gitignore file,purpose file format location fully documented git documentation problem wait ignore editor file every put gitignore,single month nt explain thought good opportunity write gitignore file everyone date magic filethe purpose gitignorethe gitignore file meant list file git track resides root directory repository list file path relative repository list wildcard file format location fully documented git documentation example valid content gitignore file foo bar using git command git add file matching listed gitignore ignored make sure nt commit file mistake example file bar directory file named foo completely ignored git commandsawesome problem soon developer realize directory cluttered temporary file might build system editor test file wroteso add file gitignore project end gitignore file contains entry like vscode dsstore ideawith sure ignore backup file vim folder macos temporary file visual studio code etcdo nt everybody us editor favorite pet tool nobody care repository working shared lot others developer sending pull request add kind entry ignore file generated pet editor wrong annoyingwait ignore editor file read git documentation answer lie git global ignore file work every repository system need hack repository default configgitignore mine swp dsstore dirlocalsel enough ignore editor o file repository nt git add wrong file mistake tweak global file location changing tweaking coreexcludesfile git configurationso put gitignore put gitignore file pattern generated build system project file might output runningfor example python project common pyc pycachewith make sure nobody committing compiled python filesthanks reading hope write better gitignore file future
145,Lobsters,vcs,Git & VCS,A Technical Guide to Version Control System (VCS) Internals,https://initialcommit.io/blog/Technical-Guide-VCS-Internals,technical guide version control system vcs internals,introduction part vcs release history timeline figure timeline creation version control system sccs source code control system first generation background architecture basic command eric allman guide oracle guide programming utility sample sccs history file rcs revision control system first generation background architecture basic command gnu rcs manual sample rcs history file cv concurrent version system second generation background architecture basic command gnu cv manual dick grune article sample cv history file svn subversion second generation background architecture basic command initial commit version control subversion book sample svn revision file git third generation background architecture basic command version control git oreilly medium baby git guidebook developer pro git book chapter git internals sample git blob tree commit file mercurial third generation background architecture basic command sample mercurial file summary part article baby git guidebook developer coding essential guidebook developer uteknikaldomain jacob initialcommitio,introduction article provide technical comparison historically significant version control system vcs original version article covered six vcs sccs rcs cv svn git mercurial due popular demand added six perforce helix core bitkeeper darcs monotone bazaar fossil first six covered article new addition covered part list vcs categorized generation first generation second generation third generation first generation vcs intended track change individual file checkedout file could edited locally one user time built assumption user would log shared unix host account second generation vcs introduced networking led centralized repository contained official version project good progress since allowed multiple user checkout work code time would committing back central repository furthermore network access required make commits third generation comprises distributed vcs distributed vcs copy repository created equal central copy repository open path commits branch merges created locally without network access pushed repository needed vcs release history timeline context timeline creation vcs tool figure timeline creation version control system sccs source code control system first generation background sccs considered one first successful vcs tool created developed marc rochkind bell lab written c created solve problem source file revision tracking furthermore made significantly easier track source bug introduced program sccs worth understanding basic level seed set modern vcs tool important developer today architecture like modern day vcs sccs set command allow developer work versioning file command used check file history tracked using sccs check specific file revision review compilation check specific file revision editing check new file revision along comment explaining change revert change made checked file basic branching merging change provide log file revision history special type file called sfile history file created file added tracking sccs file named using original file name prefixed stored subdirectory called sccs file called testtxt would get history file created sccs directory name stesttxt creation history file contains initial content original file well metadata assist version tracking checksum stored history file verify content tampered history file content compressed encoded see case later generation vcs since content original file stored history file retrieved working directory review compilation editing change made file line addition modification removal checked back history file increment revision number subsequent sccs checkins store delta change file opposed entire file content time decrease size history file time checkin made delta stored structure known delta table inside history file previously mentioned actual file content le copied verbatim special control sequence marking start end section added removed content since sccs history file nt use compression typically larger size actual file tracked sccs us delta method known interleaved delta beneficial since allows constanttime checkout regardless old checked revision ie older revision nt take longer checkout newer revision one important thing note file tracked checked separately sccs way checkin change multiple file part one atomic unit like commit git tracked file corresponding history file store revision history general mean version number different file project usually match however matching revision number achieved editing every file project even file real change checking one time increment revision number file keep consistent note including multiple file single commit like git sccs make individual checkin history file opposed one big commit including change file checked editing sccs lock placed file edited anyone else prevents change overwritten user also limit development since one user work given file time sccs support branch store sequence change within specific file branch merged back original version merged branched version parent basic command list common sccs command sccs create filenameext check new file sccs create new history file sccs directory default sccs get filenameext check file corresponding history file place working directory readonly mode sccs edit filenameext check file corresponding history file editing lock history file user modify sccs delta filenameext check modification specified file prompt comment store change history file remove lock sccs prt filenameext display revision log tracked file sccs diffs filenameext display difference current working copy file state file checked information sccs internals see eric allman guide oracle guide programming utility sample sccs history file ad jack ac comment ae ad jack ac ae ad jack ac date time created jack ae au au af e ai hi ae ai ad test sccs ae ae ai test sccs ae rcs revision control system first generation background rcs written c walter tichy alternative sccs nt open source time architecture rcs share many trait predecessor including handling revision filebyfile basis change across multiple file ca nt grouped together atomic commit tracked file intended modified one user time network functionality revision tracked file stored corresponding history file basic branching merging revision within individual file file set checked rcs first time corresponding history file created local rcs directory file postfixed v file named testtxt would tracked file called testtxt v rcs us reversedelta scheme storing file change file checked full snapshot file content stored history file file modified checked delta calculated based existing history file content old snapshot discarded new one saved along delta get back older state called reversedelta since check older revision rcs start newest version file applies consecutive delta older revision reached method allows quick checkout current revision since full snapshot current revision always available however older checkout revision longer checkout take since increasing number delta need calculated current snapshot case sccs take amount time fetch revision addition checksum stored rcs history file file integrity ensured basic command list common rcs command ci filenameext check new file rcs create new history file rcs directory default co filenameext check file corresponding history file place working directory readonly mode co l filenameext check file corresponding history file editing lock history file user modify ci filenameext check file change create new revision corresponding history file merge filetomergeintoext parentext filetomergefromext merge change two modified child parent file rcsdiff filenameext display difference current working copy file state file checked rcsclean remove working file nt lock information rcs internals see gnu rcs manual sample rcs history file head access symbol lock strict comment date author jstopak state exp branch next date author jstopak state exp branch next desc test log edited file text hi bud cool end log initial revision text hi cv concurrent version system second generation background cv created dick grune goal adding networking element version control also written c cv kicked second generation vcs tool allowed geographically dispersed development team work project together architecture cv frontend rcs provides set command interacting file project us rcs history file format command behind scene first time vcs history cv allowed multiple developer check work file simultaneously using centralized repository model first step set centralized repository remote server using cv project imported repository project imported cv file converted v history file stored central directory known module repository generally life remote server accessible local network internet developer check copy module copied working directory local machine file locked process limit number developer check module one time developer modify checked file commit change needed developer commits change developer need update working copy via usually automated merge process committing change occasionally merge conflict need manually resolved commit made cv also provides ability create merge branch basic command export cvsroot pathtorepository set cv repository root directory nt need specified command cv import import module modulename vendortag releasetag import directory file cv module running browse root directory project want import cv checkout modulename copy module working directory cv commit filenameext commit changed file back module central repository cv add filenametxt add new file track revision cv update update working copy merging committed change exist central repository working copy cv status show general information checked working copy module cv tag tagname file add identifying tag single file set file cv tag b newbranchname create new branch repository must checked working locally cv checkout r branchname checkout existing branch working directory cv update j branchtomerge merge existing branch local working copy information cv internals see gnu cv manual dick grune article sample cv history file head branch access symbol lock strict comment date author jstopak state exp branch next commitid date author jstopak state exp branch next commitid desc log initial revision text hi log imported source text svn subversion second generation background subversion created collabnet inc maintained apache software foundation written c designed robust centralized solution cv architecture like cv subversion us centralized repository model remote user must working network connection commit change central repository subversion introduced functionality atomic commits ensured commit would either fully succeed completely abandoned issue occurred cv commit operation failed midway example due network outage repository could left corrupted inconsistent state furthermore commit revision subversion include multiple file directory important since allows user track set related change together grouped unit instead past storage model track change separately file current storage model subversion us tracked file called fsfs file system atop file system name chosen since creates database structure using file directory structure match operating system filesystem running unique feature subversion filesystem designed track file directory contains different version file directory change time filesystem added time dimension addition folder first class citizen subversion empty folder committed subversion whereas rest even git empty folder unnoticed subversion repository created nearly empty database file folder created part directory called dbrevs created revision tracking information checkedin committed file stored commit include change multiple file stored new file rev directory named sequential numeric identifier starting file committed first time full content stored future commits file store change also called diffs delta order conserve space addition delta compressed using zlib compression algorithm reduce size default actually true point although storing file delta instead whole file time save storage space add time checkout commit operation since delta need strung together order recreate current state file reason default subversion store delta per file storing new full copy file achieves nice balance storage speed svn use conventional branching tagging system normal subversion repository layout three folder root trunk folder used production version application branch folder used store subfolders correspond individual branch tag folder used store tag represent specific usually significant project revision basic command svn create pathtorepository create new empty repository shell specified directory svn import pathtoproject svnurl import directory file specified subversion repository path svn checkout svnpath pathtocheckout copy stored repository path desired working directory svn commit commit message commit set changed file folder along descriptive commit message message initial commit typically set initial commit svn add filenametxt add new file track revision svn update update working copy merging committed change exist central repository working copy svn status show list tracked file changed working directory svn info show list general detail checkedout copy svn copy branchtocopy newbranchpathandname create new branch copying existing one svn switch existingbranch switch working directory existing branch checkout specified branch svn merge existingbranch merge specified branch current branch checked working directory note need committed afterwards svn log show commit history associated descriptive message active branch information svn internals see version control subversion book sample svn revision file delta svnb b hi endrep id type file count text cpath trunkhitxt copyroot delta svnb b k hitxt v file end endrep id type dir count text cpath trunk copyroot delta svnb b k trunk v dir end endrep id type dir pred count text cpath copyroot adddir false false false trunk addfile true false false trunkhitxt aaamh e nax c ftv e l git third generation background git created linus torvalds also creator linux written primarily c combined shell script great vcs due feature flexibility speed linus torvalds originally wrote linux codebase grown become popular vcs use today architecture git distributed vcs mean copy repository need designated centralized copy copy created equal stark contrast second generation vcs rely centralized copy user checkin checkout mean developer share change directly merging change official branch furthermore developer commit change local copy repository without repository knowing mean commits made without network internet connection developer work locally offline ready share work others point change pushed repository review testing deployment file added tracking git compressed using zlib compression algorithm result hashed using hash function yield unique hash value corresponds specifically content file git store object database located hidden gitobjects folder name file generated hash value file contains compressed content file called blob created time new file changed version existing file added repository git implement staging index act intermediate area change getting ready committed new change staged commit compressed content referenced special index file take form tree object tree git object connects blob object real file name file permission link tree way represents state particular set file directory related change staged commit index tree committed repository creates commit object git object database commit reference head tree particular revision well commit author email address date descriptive commit message commit also store reference parent commit time history project development established mentioned git object blob tree commits compressed hashed stored object database based hash value called loose object point diffs utilized save space make git fast since full content file revision accessible loose object however certain operation pushing commits remote repository storing many object manually running git garbage collection command cause git repackage object pack file packing process reverse diffs taken compressed eliminate redundant content reduce size process result pack file containing object content corresponding idx index file containing reference packed object location pack file pack file transferred network branch pushed pulled remote repository pulling fetching branch pack file unpacked create loose object object repository basic command git init initialize current directory git repository creates hidden git folder content git clone giturl download copy git repository specified url git add filenameext add untracked file changed file staging area creates corresponding entry object database git commit commit message commit set changed file folder along descriptive commit message git status show information related state working directory current branch untracked file modified file etc git branch newbranch create new branch based current checkedout branch git checkout branch checkout specified branch working directory git merge branch merge specified branch current branch checked working directory git pull update working copy merging committed change exist remote repository working copy git push pack loose object local active branch commits pack file transfer remote repository git log show commit history associated descriptive message active branch git stash save uncommitted change working directory cache retrieved later interested great beginner book using git highly recommend version control git oreilly medium read book year ago clarified lot git concept command use almost every day interested learning git code work check baby git guidebook developer information git internals see pro git book chapter git internals sample git blob tree commit file blob file hash value hi tree object hash value blob commit object hash value tree author jacob stopak committer jacob stopak initial commit mercurial third generation background mercurial created matt mackall written python also started goal hosting codebase linux git chosen instead second popular distributed vcs git used far le often architecture like git mercurial distributed version control system allows number developer work copy project independently others mercurial leverage many technology git compression hashing different way new file committed tracking mercurial corresponding revlog file created hidden directory hgstoredata think revlog revision log file modernized version history file used older vcs like cv rcs sccs unlike git creates new blob every version every staged file mercurial simply creates new entry revlog file conserve space new entry contains delta change previous version threshold number delta reached full snapshot file stored reduces lookup time applying many delta reconstruct particular file revision file revlogs named match file track postfixed extension file contained compressed delta content file used index quickly track different revision inside file small file low number revision index content stored file revlog file entry compressed performance hashed identification hash value referred nodeids whenever new commit made mercurial track file revision commit something called manifest manifest also revlog file store entry correspond particular state repository however instead storing individual file content like file revlogs manifest store list filename nodeids specify file revision entry exist revision project manifest entry also compressed hashed hash value referred nodeids lastly mercurial us one type revlog called changelog changelog contains list entry associate commit following information manifest nodeid identifies full set file revision exist particular time parent commit nodeid allows mercurial establish timeline branch project history one two parent id stored depending type commit normal v merge commit author commit date commit message changelog entry also generates hash known nodeid basic command hg init initialize current directory mercurial repository creates hidden hg folder content hg clone hgurl download copy mercurial repository specified url hg add filenameext add new file revision tracking hg commit commit message commit set changed file folder along descriptive commit message hg status show information related state working directory untracked file modified file etc hg update revision checkout specified branch working directory hg merge branch merge specified branch current branch checked working directory hg pull download new revision remote repository nt merge working directory hg push transfer new revision remote repository hg log show commit history associated descriptive message active branch sample mercurial file manifest revlog entry changelog revlog entry jacob stopak heytxt add heytxt information mercurial internals check following link summary article provided technical comparison historically relevant version control system continue learning internals important vcs check part article interested learning git code work check baby git guidebook developer interested learning basic coding software development check coding essential guidebook developer special thanks reddit user uteknikaldomain provided expert detail insight greatly contributed writing article question comment feel free reach jacob initialcommitio
146,Lobsters,vcs,Git & VCS,Fossil: GitHub Trip Report,https://fossil-scm.org/forum/forumpost/536ce98d85,fossil github trip report,,git used nearly everyone defacto standard use pretty much window argument window nt gone away face smartphones chromebooks cloud pushed margin wherever practical probably large part reason window phone tablet effort nt go anywhere point view entrenched victor becomes blind fact entrenched consequently longer move even sure conscious choice perhaps better metaphor gulliver strapped thousand lilliputian using rope woven process standardization interdependency gulliver could choose rise destroy rope poor tracking file across renames number one issue recent request fixing would nice quality life improvement u already using fossil doubt factor high anyone decision whether use fossil whether leave fossil something else inability shallow clone go scalability probably lot fossil adoption curve true software project nt linuxscale term sloc complexity development thus nt benefit element git design serve rare characteristic linux kernel development project nevertheless also true lot software project bigger complex sqlite yet still much smaller linux thus could benefit fossil supported largescale project better poor ticket ux markdown ticket serious complaint twostep filing process see value simplified filing interface normal user logged setup user annoying ticket field available fill time initial filing could controlled user cap saying whether user category user see full ticket ui filing speaking user cap another thing anticipate support various sso technology ldap openid oauth saml etc turn would require way map group system user category fossil would probably expand beyond current hardcoded set four inability subscribe notification change specific ticket file sound like pretty easy implement want someone scratch itch nt care difficulty implementing action triggered new checkins andor new ticket serverside tcl hook think hardest part making hook enforcing face distributed clone check something local repo push parent repo fails tcl hook refusing new material llvm downstream tool stuck rebase everything would nt release branch opposed release version tag solve downstream project could point branch care would get linear sequence change pushed release manager implement development feature freeze slush code freeze branch way within fossil today progressively restricting change frozen blob code land release branch thing might nice regard locking branch particular user fossil dvcs nature make absolute locking impossible part organized thinking assumption user nt actively malicious lowlevel dev check something feature freeze branch directly fossil already tool fix beyond socialadmin issue tech issue github moving away git repository hosting company moving upstack necessary avoid becoming another commodity provider git service continued focus git direct competition digital ocean usrbingit move upstack continue propping silicon valley salary fossil nt need merely need remain useful user think discussion remain focused possibly attracting new user fossil nt business need github inc subsidiary microsoft corporation
147,Lobsters,vcs,Git & VCS,Vagaries of Git Merge,http://tycon.github.io/git-inconsistencies.html,vagary git merge,example github example github conclusion p know definitive concise description git merge algorithm grateful drop note comment twitter,git merge algorithm seems inexplicable semantics leading interesting case describe couple example bottom line git merge inconsistent merge result seems depend version merged also merged thus two branch pulled set user commits may end different version git merge unintuitive result successful auto merge may necessarily expect note distinguish user commits merge commits post assuming merges automerges ie merge conflict expect two branch history user commits consistent ie final version example example show git automerging lead inconsistent result thus colleague working parallel branch exact set user commits code may still vulnerability bug colleague code independently review code notwithstanding colleague assurance demonstrate point let start file foojs containing javascriptjquery pseudocode computation data happens ajax type post url url data encrypt data success function response result html response datatype text let commit master git init git add foojs git commit foojs added fork two branch master git checkout b git checkout master git checkout b git checkout master three branch place let u manifest version control graph shown figure vertex graph distinct version diff version wrt parent highlighted edge leading version labeled git action led version case git commit commit message shown quote action numbered action explained greater detail figure three branch assigned different color background take look version graph follow explanation figure understand action fork branch described previously action following action master branch might decide remove encryption data contains nothing sensitive action colleague alice start development fastforwarding current master latest version action independently branch colleague bob decides add sensitive information password data since anyway sent encrypted action pull latest change bob git automerges say everything fine anything action bob may decide commit version sends data twice whatever reason action alice pull bob latest version onto decides review code see two ajax post first without data encryption second encryption since password sent second time find nothing wrong code hence sign action pull bob latest version want review code learn alice already signed code history user commits see relying alice judgment sign code deploy production code sends password unencrypted although alice see example github minor change used branch main instead master instead encrypt final commit history main shown observe branch set usergenerated commits merge commits result git automerge git branch main master git log commit head merge author gituser gituser examplecom date mon nov merge branch commit author gituser gituser examplecom date sun nov two ajax commit author gituser gituser examplecom date sun nov pwd added commit author gituser gituser examplecom date sun nov removed commit master author gituser gituser examplecom date sun nov adding foojs git checkout main switched branch main git log commit head main merge author gituser gituser examplecom date sun nov merge branch main commit author gituser gituser examplecom date sun nov two ajax commit merge author gituser gituser examplecom date sun nov merge branch main commit author gituser gituser examplecom date sun nov pwd added commit author gituser gituser examplecom date sun nov removed commit master author gituser gituser examplecom date sun nov adding foojs example previous example branch main obtained set user commits different number pullsmerges main pulled two step first merging intermediate version merging final version whereas pulled final version inconsistency show granularity merges matter describe another example demonstrates merge result also depends order merging branch two branch pull set user commits still end different version pull commits different order example also involves scenario automerge succeeds result agree intuition similar previous example let start file foojs containing javascriptjquery pseudocode computation data ajax type post data encrypt data url url success function response result html response datatype text let commit master git init git add foojs git commit foojs added fork four branch b c git checkout b git checkout master git checkout b b git checkout master git checkout b c git checkout master git checkout b git checkout master four branch make distinct change foojs commit four new commits visualized figure let u fork one branch temp master git checkout master git checkout b temp merge branch b c master temp different order show resultant version different master merge order c b temp merge order c b merges master branch visualized following figure labeled edge represents merge corresponding branch branch head shown previous figure usual diff version wrt previous version highlighted aside consider merge branch b would expected merge result sequence encrypted ajax followed data pwd logic finally unencrypted ajax merge conflict would fine actual result data pwd logic twice interspersed ajax call unencrypted encrypted data resp puzzling let u focus temp branch merges temp visualized result last merge expected given content contained inside merging temp version order expected merge previous version temp actual result replicates data pwd logic twice understand leaving aside concern intuitiveness one clearly see master temp different head version even pulled exact version albeit different order show order merges done matter bit disconcerting example available github minor variation conclusion example demonstrate git merge could lead inconsistent unintuitive result people understand git merge algorithm perhaps foresee behavior work way around however satisfactory justification welldesigned system must predictable behavior based interface internals p know definitive concise description git merge algorithm grateful drop note comment twitter
148,Lobsters,vcs,Git & VCS,Automatic versioning of Java applications using Git-Version Plugin,https://98elements.com/blog/automatic-versioning-of-java-applications-using-git-version-gradle-plugin/,automatic versioning java application using gitversion plugin,gitversion gradle plugin sample application http spring boot note semantic versioning configuration docker plugin spring boot actuator read,version management important part every software project yet often overlooked even often significantly improvedhow many time face following problem determine version component currently deployedthere direct link component version version control systemthe system behaves differently local computer cloud deployment closer investigation turn somebody forgot bump version applicationproperties new code run old version numberthese problem even painful microservices many component deployed different version special care must taken assure compatibilitybut configured properly automated version management longer nuisancewith gitversion gradle plugin generate version automatically based commits tag git repository easily integrated plugins provide versioning schema docker container expose version information via rest apisample applicationthe sample java web application available github http written using java spring bootat first let see gitbased automatic version management work dive configuration detailslet build application inspect generated artifact gradlew clean bootjar build successful actionable task executed l buildlibs application version look like git commit hash good guess git log n commit head master originmaster build docker image version tag gradlew clean docker info successfully built successfully tagged docker thread execution worker main completed took sec build successful actionable task executed uptodate also run application obtain version information via rest api docker run rm p curl http app version create git tag representing release plugin detect change version accordingly git tag release gradlew clean bootjar l buildlibs creating new commit plugin generate prerelease version git commit first commit release allowempty gradlew clean bootjar l buildlibs plugin appended version string represents number commits last tag hash new commitif uncommitted change plugin append dirty version string echo readme content readmemd gradlew clean bootjar l buildlibs note version string generated gitversion gradle plugin compatible semantic versioning follow convention release tag related quote semantic versioning prerelease version may denoted appending hyphen series dot separated identifier immediately following patch version identifier must comprise ascii alphanumerics hyphen identifier must empty numeric identifier must include leading zero prerelease version lower precedence associated normal version prerelease version indicates version unstable might satisfy intended compatibility requirement denoted associated normal version example got feature gitversion gradle plugin let see sample project configured let start configuration buildgradle plugins id compalantirgitversion version id compalantirdocker version use two plugins compalantir gitversion plugin docker plugin first one responsible version generation latter add support building docker containersthen declare gradle project version come gitversion plugin version gitversion configure docker image docker name projectname projectversion file tasksbootjaroutputsfiles dockerdependson bootjar get actuatorinfo endpoint come spring boot actuator dependency compile orgspringframeworkboot response returned endpoint configured applicationproperties infoappversion projectversion enable substitution gradle variable applicationproperties need add simple configuration buildgradle processresources expand projectproperties managed set automatic versioning gitversion gradle plugin line code help u avoid common pitfall version managementread moreto read used plugins library visit
149,Lobsters,vcs,Git & VCS,git-subtrac: all your git submodules in one place,https://apenwarr.ca/log/20191109,gitsubtrac git submodules one place,gitsubtree gitsubtrac gitsubtrac readme,gitsubtrac git submodules one place long ago wrote gitsubtree work around annoyance git submodules learned lot since development ecosystem improved lot shell script longer best way manipulate git repos whoa thus bring gitsubtrac bit like gitsubtree except us real git submodules difference plain submodules like gitsubtree encourages put content submodules superproject repo rather scattering around across multiple repository might owned multiple people randomly disappear get rebased etc result easy push pull fork merge rebase entire project matter many submodules like use someone fetch repo get submodule repos well wrote longer gitsubtrac readme describing use internal working think pretty cool feedback welcome
150,Lobsters,vcs,Git & VCS,Gitlab 12.5.0,https://gitlab.com/gitlab-org/gitlab/blob/master/CHANGELOG.md,gitlab,tag,find state project repository time version check tag
151,Lobsters,vcs,Git & VCS,Github for Mobile Beta,https://github.com/mobile,github mobile beta,organize task swipe keep work moving fit worklife style bring github wherever build reload reload,organize task swipe get inbox zero wrap task save notification come back later may new favorite way keep work organized lot todo need complex development environment desk commute coffee run unblock team wherever whenever need keep work moving whether need review bug fix merge code github mobile covered merge mark done go fit worklife style get fullynative github experience automatically collaborate dark mode based device watch adapt every screen size bring github wherever build perform action time signed another tab window reload refresh session signed another tab window reload refresh session
152,Lobsters,vcs,Git & VCS,GitHub Archive Program,https://archiveprogram.github.com/,github archive program,golden record voyager,convening github archive program advisory panel including expert anthropology archaeology history linguistics archival science futurism advise u content included archive best communicate inheritor thousand year long time ancient ruin angkor wat great zimbabwe macchu picchu yet built thousand year ago nevertheless consider plan broad range possibility next year program build best idea today introduction archive include technical guide qr decoding file format character encoding critical metadata raw data converted back source code use others future archive also include tech roadmap rosetta stone future curious mind inheriting archive data overview archive use tech tree serve quickstart manual software development computing bundled user guide archive describe work backwards raw data source code extract project directory file data format inspired including element long manual civilization archive also include information guidance applying open source context use today case future reader need rebuild technology scratch like golden record voyager help communicate story world future range possible future humanity working modern computer software run archive tech tree could extremely valuable however value likely historical perhaps ensuring today technology lost tomorrow carelessly considers unexpected use software discovered
153,Lobsters,vcs,Git & VCS,How to store your dotfiles using Git,https://www.atlassian.com/git/tutorials/dotfiles,store dotfiles using git,hacker news thread dotfiles showed elegant setup git git bare repository starting scratch git bare repository snippet install dotfiles onto new system migrate setup git repository bare store bitbucket snippet create short url alpine linux wrapping dotfiles live durdn atlassiandev,disclaimer title slightly hyperbolic proven solution problem think technique elegant though recently read amazing technique hacker news thread people solution store dotfiles user streakycobra showed elegant setup made much sense process switching system technique prerequisite install git word technique requires extra tooling symlinks file tracked version control system use different branch different computer replicate configuration easily new installation technique consists storing git bare repository side folder like homecfg homemyconfig using specially crafted alias command run repository usual git local folder would interfere git repository around starting scratch nt tracking configuration git repository start using technique easily line git init bare homecfgalias configusrbingit gitdir homecfg worktree homeconfig config local statusshowuntrackedfiles noecho alias configusrbingit gitdir homecfg worktree home homebashrc first line creates folder cfg git bare repository track file create alias config use instead regular git want interact configuration repository set flag local repository hide file explicitly tracking yet type config status command later file interested tracking show untracked also add alias definition hand bashrc use fourth line provided convenience packaged line snippet bitbucket linked shorturl set thing curl lks http bitdocfginit binbash executed setup file within home folder versioned normal command replacing git newly created config alias like config statusconfig add vimrcconfig commit add vimrc config add bashrcconfig commit add bashrc config push install dotfiles onto new system migrate setup already store configurationdotfiles git repository new system migrate setup following step prior installation make sure committed alias bashrc zsh alias configusrbingit gitdir homecfg worktree home source repository ignores folder clone nt create weird recursion problem echo cfg gitignore clone dotfiles bare repository dot folder home git clone bare gitrepourl homecfg define alias current shell scope alias configusrbingit gitdir homecfg worktree home checkout actual content bare repository home step might fail message like error following untracked working tree file would overwritten checkout bashrc gitignoreplease move remove switch branchesaborting home folder might already stock configuration file would overwritten git solution simple back file care remove nt care provide possible rough shortcut move offending file automatically backup folder mkdir p configbackup config checkout egrep awk print xargs mv configbackup rerun check problem set flag showuntrackedfiles specific local repository config config local statusshowuntrackedfiles done type config command add update dotfiles config statusconfig add vimrcconfig commit add vimrc config add bashrcconfig commit add bashrc config push shortcut remember step new machine want setup create simple script store bitbucket snippet like create short url call like curl lks http bitdocfginstall binbash completeness ended tested many freshly minted alpine linux container test git clone bare http bitbucketorgdurdncfggit homecfgfunction config usrbingit gitdir homecfg worktree home mkdir p configbackupconfig checkoutif echo checked config else echo backing preexisting dot file config checkout egrep awk print xargs mv configbackup fi config checkoutconfig config statusshowuntrackedfiles wrapping hope find technique useful track configuration curious dotfiles live also please stay connected following durdn awesome team atlassiandev
155,Lobsters,vcs,Git & VCS,Pondering a Monorepo Version Control System,http://beza1e1.tuxen.de/monorepo_vcs.html,pondering monorepo version control system,monorepo google repository microsofts git repository bazel awesome monorepo list advantage monorepos always wanted know monorepo afraid ask monorepo atomic change across everything git git wellknown flaw lf annex big subversion repository feature toggle integrated build system merging version control build system rational clearcase vesta scm design aspect monorepo open source build monorepo vcs discussion lobster zeroinstall,monorepos desirable feature git wrong version control system vcs realize one document right one would look like monorepo idea monorepo put everything single version control system contrast multirepo developer regularly use multiple repository nt precise definition google us monorepo google repository eventually developed custom version control system report commits per day file read query per second microsofts git repository requires significant change extension normal git facebook something similar mercurial implication monorepo approach usually contains package multiple programming language rely languagespecific tool like pip maven bazel seems fitting advanced build system come fact stem google internal blaze tooling consideration awesome monorepo list often people try store dependency monorepo well might include tool like compiler ides probably operating system goal reproducability external dependency vanish want read discussion monorepos read advantage monorepos dan luu browse always wanted know monorepo afraid ask argument monorepos strawman rant opinion monorepo guarantee single lint build test release process example chaos monorepo order multirepos question process repository structure one advantage monorepo atomic change across everything enables change api update user single commit multirepo inherent race condition eventually special tooling around fact however atomic change across everything also requires special tooling eventually google invests heavily clang ecosystem reason nothing free said let assume want go monorepo git talk version control system day people usually think git everybody want use despite git wellknown flaw ui even try hide implementation detail context monorepos relevant flaw git scale poorly beyond gigabyte data git need lf annex deal large binary file plenty git operation eg git status check every file checkout walking whole checkout feasible big monorepos lessen pain git download limited part history shallow clone show part repository sparse checkout still way around fact need full copy current head disk feasible big monorepos either alternative would suggest subversion apache foundation big subversion repository contains among others openoffice hadoop maven httpd couchdb zookeeper tomcat xerces course subversion flaw development slow day example merging painful however google branch monorepo instead use feature toggle maybe branch conceptually wrong big monorepos even try considered creating new vcs see open niche none open source vcss fill one central insight client probably never look every single file must avoid need download full copy working repository like working network file system thus lose ability work offline tradeoff integrated build system already wrote merging version control build system discussion learned proprietary solution like rational clearcase vesta scm summary thought already committed store repo network build system also want store artifact network store repo well implies vcs know file generated also committed put tooling repo sake reproducability thus build system simple need configure step relevant environment outside repo consider fact single machine might able generate artifact might require window linux machine might require special hardware however artifact generation reproducible matter client might well integrate continuous integration ci job system imagine edit code commit change already ran unit test locally artifact already next minute see artifact pop depended change artifact might window linux o x build artifact naturally part version committed switch different branch artifact change automatically explicit back forth ci system instead versioncontrolandbuildsystem fill missing generated file new committed version implement need notification mechanism version control system still need special client continously waiting new commits generate artifact vcs must manage client propagate artifact needed certainly much beyond usual job vcs design aspect since want store everything repo also want nontechnical people use already resembles network file system provide interface nearly easy use want enable designer store photoshop file manager store excel powerpoint file say nearly need additional concept like version commit mechanism hidden user wide range user security concern require access control mechanism fine granularity per filedirectory since big monorepos exist big organization naturally must integrated surrounding system ldap exchange etc monorepo open source vcs described sound great big company many big project however open source world consists small independent project loosely coupled loose coupling provides certain resilience diversity monorepo allows atomically change something everywhere also force degree looser coupling mean flexibility update dependency example tradeoff inevitable chaos wonder really need many build system scripting language open source project usually start single developer longterm goal use case git perfect maybe certain big project may benefit example would gnome adopt even seems partition multiple git repos work well enough build monorepo vcs os project need small company fine git repository small enough essentially product enterprise make sense build open source software spare time would worthwhile startup idea family need take risk right current job interesting enough small project done side work build foreseeable feature although fascinating technical challenge maybe someone else documented thought hopefully focus stuff maybe google already building discussion lobster alternative big company package management opinion looked around zeroinstall seems useable crossplatform languageindependent package manager course care distributing artifact distributed approach provides lot flexibility generate artifact advantage
156,Lobsters,vcs,Git & VCS,Highlights from Git 2.24,https://github.blog/2019-11-03-highlights-from-git-2-24/,highlight git,released git since git feature macro commit graph default adopting contributor covenant alternative history rewriting tool tidbit learn,open source git project released git feature bug fix contributor new look exciting feature change introduced since git feature macro since early day git shipped configuration subsystem let configure different global repositoryspecific setting example first time wrote commit new machine might reminded set username useremail setting already turn git config used many thing ranging anywhere identity commit line ending use way configuring alias git command algorithm chosen produce diffs usually configuring behavior requires single configuration change like enabling disabling aforementioned value know configuration value change example let say want live bleedingedge latest upstream git chance discover new configurable option git opt feature git configuration implies many others handselected developer git let opt certain feature adopt handful setting based characteristic repository example let pretend particularly large repository noticing slowdown enough searching might find setting indexversion could help discovering seem like stretch instead enable featuremanyfiles git config featuremanyfiles true opted feature make experience git smoothest setting signal git willing adopt whichever setting git developer feel make experience smoothest right mean indexversion coreuntrackedcache enable pathprefix compression untracked cache respectively feel even better knowing new feature release might help use case included macro source commit graph default may remember commit graph feature discussed previous highlight since introduction git feature received steady stream attention enabled kept reasonably date commit graph represent order magnitude improvement performance loading commits git commit graph enabled default meaning repository see improvement next time run git gc previously feature optin behind experimental corecommitgraph configuration well handful others extensive testing ready prime time besides new standard change commit graph commitgraph subcommands eg git commitgraph write git commitgraph verify support progress progress meter command behave usual way writing terminal default respecting progress override new configuration value automatically update commitgraph file fetching introduced take advantage commit graph chain write portion history onto commitgraph chain later compaction mean every time get new commits remote guaranteed commitgraph immediately wait around next autogc try today set fetchwritecommitgraph configuration variable true lot bug fix improve performance reliability commitgraph command especially faced corrupt repository commitgraph command also support git latest tracing mechanism source source source source source source source adopting contributor covenant since last release git project discussed length adopting code conduct solidify welcoming inclusive behavior mailing list git development take place communication git developer happens email intimidating unwelcoming new contributor may familiar value people contributing git git community long relied policy nice much possible quote thread approach right spirit may readily apparent new contributor unfamiliar existing culture likewise make individual feel uncomfortable engaging project solidified value adopting code conduct git project making clear behavior encourages tolerate new contributor able see explicitly project value put trust git choice using welltrusted widelyadopted contributor covenant code conduct enforced project leadership handle case individual adhere guideline new contributor assured git community behind adoption introduction code conduct ackedby prominent member git community source alternative history rewriting tool ever wanted perform complicated operation history expunging file repository history extracting history pertaining one may visited documentation git filterbranch git filterbranch longstanding powerful tool rewriting history git filterbranch aforementioned operation much however flexibility come hefty cost git filterbranch notoriously complicated use mention slow often lead user towards unintended change including repository corruption data loss word git filterbranch starting show age git git project instead recommends new independent tool git filterrepo git filterrepo serf avoid many pitfall user experienced git filterbranch instead reprocessing every commit order git filterrepo operates efficient stream representation history run much faster tool extremely powerful capability documented thoroughly highlight use git filterrepo git filterrepo analyze provides humanreadable selection metric profiling size repository includes many object kind file directory largest extension take space option space additional metric shape repository check another tool git sizer also filter history repository contain certain path path glob regex similar option source likewise run find replace operation history well strip blob larger fixed threshold source rewriting history rewritten commits along ancestor get new identify default git filterrepo update reference like commit message reference similar token git filterrepo also option rewrite name contributor using mailmap source source finally git filterrepo extensible provides flexible interface specifying callback python eg calling function git filterrepo encounter blobtreecommit new filetype etc well defining new subcommands entirely view portfolio demo extension define support complex history rewrite source git filterbranch however remain included usual distribution git time git filterrepo another alternative performing complex modification repository history official recommendation upstream source tidbit might aware many git command take one optional reference name argument example git log without argument display log everything reachable currently checkedout branch git log myfeature master show myfeature master branch called superdangerousoption probably want invoke git log since interpret argument option branch name could try disambiguate invoking git log refsheads superdangerousoption scripting may know namespace argument getting belongs git new way prevent sort option injection attack using endofoptions git see argument command know treat remaining argument interpret option instead string previously mentioned could write following get history admittedly pretty oddly named branch git log endofoptions superdangerousoption using standard intentional choice since already widelyused mechanism git separate reference name file example could also written git log endofoptions superdangerousoption master pathtofile get history range modified specific file source previous post talked git rebase new rebasemerges option allows user perform rebases preserving structure history git encounter merge point unify two history default us strategy known internally recursive likely merge strategy currently using might know tell git merge strategy use picking one may result different resolution git rebase rebasemerges support strategy strategyoption option git rebase rebase history preserving structural integrity specifying merge resolution strategy source git support number hook speciallynamed executable file git run various point workflow example prepush hook invoked running git push push actually occurs new hook added allow caller interact git merge carried resulting commit written intercept point caller place executable file choice githookspremergecommit source git learned handful new trick since last release handle partial clone date partial cloning git look like quick primer cloning repository user specify would like object using filter remote user clone designated promisor meaning promise send remaining object later user request road git supported single promisor remote latest release support one promisor remote especially interesting since mean user configure handful geographically close remote remote object work planned area stay tuned update feature future source last least git commandline completion engine learned complete configuration variable percommand configuration git hierarchy place gitconfig file found repository via gitconfig home directory git also support toplevel c flag specify configuration variable command example git c coreautocrlffalse add pathtomyfile invocation disable git autocrlf conversion duration git add internal command git may run part git add however forgot name variable trying set git commandline completion engine learned provide completion list configuration variable name git ever forget middle c need press tab source create commit configuration value git looking generate signature gitparlance nameemailpair shown wherever identity expected including github used commitgraph file behind scene since august achieve speedup percent operation traverse history fact tool appeared gitgit first released year ago example patience merge strategy widely regarded one move chunk diff usually known hunk look textually related example closing function brace fact produce awkwardlooking diffs learn sample change latest version check release note previous version git repository
157,Lobsters,vcs,Git & VCS,fudge: a lightweight Git WebUI written in Go,https://github.com/bovarysme/fudge,fudge lightweight git webui written go,fudge usage license license syntaxgo ayu blobsvg treesvg licensetwemoji,fudge delicious git webui usage move configexampleyml configyml edit run go run maingo license project licensed term mit license see license detail colour used syntaxgo taken ayu theme licensed term mit license ike ku image blobsvg treesvg licensed term ccby license twitter inc contributor see licensetwemoji detail
158,Lobsters,vcs,Git & VCS,Gitsplorer,https://magnusson.io/post/gitsplorer/,gitsplorer,git commit hash miner commit scc austin,ever found using git thinking great wish filesystem operation readonly ten time slower well friend news api golang codebase different time history figured clone repo check commit analyze check commit b analyze boo hiss inelegant leaf clutter need cleaned around disk got better way made git commit hash miner wanted race coworker see could get commit leading zero frequently used repository work side effect teaching git internals like object blob tree commits tag fit together figured could convince golang ast parser read git database instead filesystem could wanted much better way ala would required monkeypatching go standard library want hunt every system call end making sure got however git famously contentaddressable filesystem made filesystem point given commit repo pointed parser turn pretty easy combining libfuse use former read object git repository object easy read hand read packed object doable bit distraction already quite distraction use latter create basic readonly filesystem end readonly version git checkout writes nothing disk put prototype together python lazy called gitsplorer absolutely use anywhere near production system scratch itch pretty well though addition api comparison still got sometimes want poke around state repository given commit save stashcheckout dance reading git worktree manpage fun see bad idea came unscientific benchmark checkout linux kernel repository randomly selected commit run boyter scc linecounting tool checkout master gitsplorer ye olde git checkout result speak git checkout second gitsplorer second gitsplorer version also remarkable spending time using cpu git version us around cpu checkout cpu counting line python fuse filesystem singlethreaded beyond python slow must also point congestion line counting basic profiling wonderful profiler austin saw python process spends time reading git blob think verify decompresses content blob every call read make fuse getattr call interested metadata blob made attempt optimize friend ever wished git checkout readonly time slower today lucky day
159,Lobsters,vcs,Git & VCS,Architecting a Decentralized GitHub Backup,https://medium.com/@storjproject/architecting-a-decentralized-github-backup-c10a4e6913b8,architecting decentralized github backup,architecting decentralized github backup iran crimea cuba north korea syria http gitbackuporg,architecting decentralized github backupgitbackup tool back archive github repository tool process backing entirety github onto storj network currently stand pb data today october tool currently snapshotted repository across usersgithub largest store open source code world million user million public repository april believe reservoir free open source code act digital version public good similar developer library library empowers software engineer access collective knowledge around open source code development pattern free softwarewhile github wonderful service owned agendadriven global corporation thus prone downtime blockage censorship single point failure example microsoft acquisition linkedin show user content gradually taken away mean paywalls login wall furthermore july example developer based iran wrote medium github blocked private repository prohibited access github page soon github confirmed blocking developer iran crimea cuba north korea syria accessing private repositoriesif want guarantee preservation work hundred thousand open source developer need act let download currently using gharchiveorg get list github usernames public action since far repository backed constitutes tb data anticipate entirety public github repos pb still way goif want backup codebases repository github decentralized cloud check tool found http gitbackuporg
161,Lobsters,vcs,Git & VCS,My favourite Git commit,https://fatbusinessman.com/2019/my-favourite-git-commit,favourite git commit,dan carley convert template usascii fix error benefit coding open like commit explains reason change searchable using github commit search tell story make everyone little smarter build compassion trust good commits matter,like git commit message used well think one powerful tool available document codebase lifetime like illustrate showing favourite ever git commit commit time government digital service working govuk developer name dan carley rather unassuming name convert template usascii fix error quick aside one benefit coding open practised gd possible share example like outside organisation produced sure first introduced idea gd wellestablished time joined forever grateful like commit lost count number time shared example commit message fun ratio commit message code change think worth sharing different organisation different developer entire commit message might change whitespace fix bug depending team culture le flattering opinion inventor nonbreaking space instead dan took time craft really useful commit message benefit around like step way think really good example explains reason change best commit message seen explain changed explain instance introduced test feature branch match content etcnginxrouterroutesconf worked fine run bundle exec rake spec bundle exec rspec modulesrouterspec run bundle exec rake block failed argumenterror invalid byte sequence usascii without level detail could hazard guess commit fixed kind parsing error tool thanks commit message know exactly tool kind information really valuable document easy lose people forget original context behind work move team eventually leave organisation searchable one first thing commit message error message inspired change argumenterror invalid byte sequence usascii anyone else come across error search codebase either running git log grep invalid byte sequence using github commit search fact look search result multiple people found found problem came across tell story commit message go lot detail problem looked like process investigating looked like process fixing looked like example eventually found removing withcontent matcher made error go away nt weird character spec file could reproduced requiring puppet interpreter one area commit message really shine documenting change rather documenting particular file function line code make great place document kind extra information journey codebase taken make everyone little smarter one thing dan really appreciate document command ran stage great lightweight way spread knowledge around team reading commit message someone learn quite useful tip unix toolset pas exec argument find run command file found adding onto end command something interesting pass many filename single file command rather running command per file file mime tell mime type file iconv exists person review change learn thing anyone find commit later learn thing enough time enough commits become really powerful multiplier team build compassion trust test work one hour life wo nt get back last paragraph add extra bit human context reading word hard feel little bit dan frustration spend hour tracking sneaky bug satisfaction fixing imagine similar message attached shortterm hack piece prototype code made way production set root piece prototype code love commit message like make much easier remember every change human end making best decision could given information time good commits matter admit extreme example expect commits especially one size level detail still think excellent example explaining context behind change helping others learn contributing team collective mental model codebase interested learning bit benefit good commit message tool make easier structure change around recommend
163,Lobsters,vcs,Git & VCS,go-git-dir: simple git hosting with a built-in SSH server,https://github.com/belak/go-git-dir,gogitdir simple git hosting builtin ssh server,gogitdir origin requirement building running server config runtime config usage sample config repo creation,gogitdir project make incredibly easy host secure git server config easily rolled back aim solve number problem git server requires external dependency binary git store configuration repo managed nt hook system user account vendor lockin everything bare git repository origin main goal project enable simple git hosting full solution like bitbucket github gitlab gitea etc needed project inspired gitolite gitosis also includes builtin ssh server additional flexability considered stable usable enough experiment thankfully repos simply stored bare git repository fairly simple migrate git hosting solution vendor lockin requirement build requirement runtime requirement git gitreceivepack gituploadpack building clone repository somewhere outside gopath root source tree run go build create binary called gogitdir running server config number environment variable used configure gogitdir instance following required gitdirbasedir directory store repository folder must exist service start following optional gitdirbindaddr address port bind service default gitdirlogreadable true value log human readable gitdirlogdebug true value debug logging enabled runtime config runtime config stored admin repository cloned modified admin server specify group grouping user config convenience reason repos orgs grouping repos managed person additionally number option specified file change behavior server implicitrepos allows user admin access area create repos simply pushing userconfigkeys allows user specify ssh key config rather relying main admin config userconfigrepos allows user specify repos config rather relying main admin config orgconfigrepos allows org admins specify repos config rather relying main admin config usage simply run built binary gitdirbasedir set start using first run gogitdir push commit admin repo sample config well generated server ssh key updated time even runtime server restarts key loaded regenerated note need manually clone admin repository gitdirbasediradminadmin add user configyml set admin sample config sample admin configyml user belak isadmin true key belak tmp repos personalgitdir group admins belak repos gogitdir public true write admins read someotheruser orgs vault admins admins write someorguser read someotherorguser repos thevault write somerepoaccessuser option implicitrepos false userconfigkeys true userconfigrepos false orgconfigrepos false repo creation repos defined config created config loaded runtime implicit repos enabled trying access repo admin access implicitly create
164,Lobsters,vcs,Git & VCS,Monorepo or Multirepo? – Role-Based Repositories,https://blog.7mind.io/role-based-repositories.html,monorepo multirepo rolebased repository,monorepo multirepo rolebased repository summary problem monorepo good bad coherence cheap workflow isolation build time merge conflict vcs action take time multirepo good bad global refactorings integration solution idea reality sbt intellijidea fails run test dirty tool ammonite script coursier thing sbtprojectmatrix siracha p slide distage twitter update,monorepo multirepo rolebased repository summary lot code always hard find proper approach organize code typically engineer choose monorepo multirepo layout approach wellknown advantage disadvantage significantly affect team productivity possible establish combined workflow keeping advantage multirepo layout giving positive trait monorepo layout created draft tool implementing approach scala project using sbt problem monorepo good bad good point monorepo layout coherence always coherent codebase represents work may build product component together good guarantee compatibility make change build finish fine modify test repositorycomponent may affected change may always perform global operation globally single command sure discrepancy expected actual codebase state cheap workflow may use one ci job easily release deploy component together may easily refactor code significant shortcoming isolation monorepo prevent engineer using code use big project monorepo tendency degrade become unmaintainable time possible enforce strict code review artifact layouting preventing degradation easy time consuming build time case monolithic project monorepo build often test component together may addressed incremental compiler solve issue also may tackled keeping independent project within one repository case multirepo shorcomings see apply merge conflict team working monorepo environment maintain good vcs flow avoid interference good idea teach engineer use git properly discipline come free vcs action take time host huge project like chromium git may take lot time even perform checkout affect huge project huge team outside scope post multirepo good bad multirepo layout always considered first answer monorepo issue enforces strict isolation independent software component allows people quickly build independent component allows people interfere working independent project though multirepo disaster global refactorings affect shared component real pain even simple rename done one click may hard perform kind integration multiple component build comprehensive orchestration solution integration testing deployment setup sophisticated ci flow etc etc case release flow involves several component always real pain thing especially bad explicit implicit dependency component typical case usually least one shared library aka sdk many component aka microservices depend solution idea let assume product online auction platform example consisting several software component iam identity account management service billing billing service analytics analytics service bidding bidding service catalog item catalog service project use one shared sdk named sdk may also assume would several team working project example may assign sdk iam catalog project infrastructure team billing analytics finance team bidding store team imagine magic tool project allowing u choose project want work set corresponding environment prepares workspace component project prepare prepares workspace work billing analytics pull sdk well project prepare billing analytics prepares workspace work sdk iam catalog project prepare infrastructure prepares crossbuild project project prepare platform j jvm native infrastructure tool would need kind declarative description product stored repository rest flexible wish example case want keep source code one repository tool may pull component different repository take care commits etc etc may say repository role time may choose role wish activate may call approach rolebased repository rbr tool would solve problem need perform global refactoring may generate allinone project wish implement quick patch may generate project one component need integrate several component may choose exactly need etc etc reality unfortunately tool polyglot convenient easy use something done bazel far know good solution moment october thing become bad need scala especially bad need work crossplatform scala environment scalajs scala native sbt intellijidea sane way exclude project sbt build according criterion may write something like lazy val conditionalproject condition projectin else null ugly inconvenient hard compose crossplatform project always pain take least twice time build crossproject way example omit scalajs project build example idea frequently fails compile project sbtcrossproject plugin idea run test crossprojects sbt build become verbose hard maintain use crossprojects usually write least redundant expression per artifact created dirty tool prototype approach wish essentially library intended used ammonite script take declarative project definition emits sbt build file may find real project using case want play would need coursier installed clone project may try following command generates pure jvm project sbtgensc generates jvmjs crossproject sbtgensc j generates pure jvm project one component sbtgensc u distage currently sbtgen simple dirty prototype made team happy easy release need may choose work build test also surprisingly sbt startup time lot shorter generate project instead using sophisticated plugins avoid setting duplication encourage use sbtgen next time think organizing code try consider rbr flow even would write code generator may say sure disappointed thing sbtgen need support multirepository layout point source code need kept together build descriptor think functionality incorporated sbt plugins sbtprojectmatrix siracha make sbt project kinda configurable le rigid far actually need p idea role useful many different domain example may fuse microservices flexible monolith check slide may also read project distage module system automatic solver scala allows build multirole application may follow twitter update author similar tool netc j project approached recently may find tool think good proof showing idea viable think need new flexible polyglot build tool supporting rolebased approach bazel computational model suitable tool one day make another post
165,Lobsters,vcs,Git & VCS,RFC of a new Mercurial extension to directly operate on git repositories,https://phab.mercurial-scm.org/D6734,rfc new mercurial extension directly operate git repository,,diff
166,Lobsters,vcs,Git & VCS,Game of Trees - EuroBSDCon 2019 talk,https://www.openbsd.org/papers/eurobsdcon2019-gameoftrees.pdf,game tree eurobsdcon talk,,obj goto r fit endobj obj length filter flatedecode stream endstream endobj obj type page content r resource r mediabox trans r parent r endobj obj interpolate false type xobject subtype image width height bitspercomponent colorspace devicergb length filterflatedecode decodeparms stream
167,Lobsters,vcs,Git & VCS,ForgeFed: federating Git services,https://github.com/forgefed/forgefed,forgefed federating git service,forgefed federating git service activitypub activitystream collaboration join discussion mailing list mailing list gitfederation framalistesorg license document license,forgefed federating git service forgefed formerly gitpub decentralized federation protocol based activitypub extends activitystream provides server server api pull request forking subscription repository provided git web service service like github gitlab gogs gitea collaboration specification like must agreed upon least git web service implementation developer software please join discussion speak simply add work group experienced writing specification also welcome join effort mailing list still waiting tentative work group member join mailing list major discussion decision making happen framalistes mailing list nonmember may use github issue tracker send u mail gitfederation framalistesorg guarantee read mail github comment try license specification document licensed variation document license may obtain copy document license code component specification licensed mit license may obtain copy license
168,Lobsters,vcs,Git & VCS,Commit graph drawing algorithms,https://pvigier.github.io/2019/05/06/commit-graph-drawing-algorithms.html,commit graph drawing algorithm,commit graph drawing algorithm pierre gitamine type commit graph drawing algorithm commit graph sorting commits sorting date repository topological sorting topological sort temporal topological sorting placing commits curved branch straight branch type edge algorithm forbidden index show proof interval tree large repository optimization twitter graph git,commit graph drawing algorithm may pierre article one chapter master thesis entitled design implementation graphical user interface git describes algorithm designed draw commit graph prototype git client called gitamine adapted content fit better blog drawing graph complex topic general want draw specific type graph commit graph commit graph several several piece information simplify problem important one graph directed acyclic commits timestamps moreover among many way draw directed acyclic graph appropriate commit graph indeed programmer manipulate branch graph thus convenient representation allows visualize easily first study different type graph drawing algorithm used client describe place node commit graph nicely drawable finally cover optimization done gitamine draw browse graph real time type commit graph drawing algorithm start study commit graph drawing look done git client figure show portion commit graph displayed different git client part chosen lot merges clearly observe difference graph drawing algorithm used client git cola git extension gitk gitkraken smartgit sourcetree first thing observe standard way draw commit graph different way drawing commit graph classified according design choice one several commits row straight branch ie commits branch column curved branch see git extension smartgit seem use similar algorithm curved branch contrary gitkraken draw branch totally straight line sourcetree try keep branch straight possible sometimes curve git cola algorithm particularity placing several commits row others draw commit graph next commit history thus draw one commit per row gitk draw graph similar one printed command git log graph much compact graph commits reordered order follow date table sum characteristic graph drawing algorithm used client client one commit row straight branch git cola git extension yes gitk yes gitkraken yes yes smartgit yes sourcetree yes gitamine use algorithm draw one commit row able show commit graph commit history sidebyside git client whether draw straight curved branch matter taste personally found straight branch much readable unfortunately git client draw straight almost straight branch gitkraken sourcetree opensource thus design algorithm sorting commits two next section describe choose position node commit graph drawable readable simplify problem place node grid lose much pleasant human eye node aligned word would like find function commits map commit position grid sake simplicity let u take following notation commits ordered list parent unordered set child coordinate associated function coordinate associated function said previous section would like draw one commit row would also like edge directed following direction without loss generality choose edge go upward row row need parent commit commit namely f respect following condition order commits fulfills condition said topological sorting date snippet show content commit observe contains two different timestamps respectively first one author date ie date commit created second committer date corresponds date commit last modified tree parent author pierre vigier pierrevigier ymailcom committer pierre vigier pierrevigier ymailcom rewrite event arc voronoidiagram first idea sort commits author date work simple repository certain operation like rebase cherrypick allow put commits older author date child commits recent author date hence sort commit newest oldest author date set index sorted list would break topological condition second idea sort commits committer date appealing latest modification developer shown first moreover order topological case operation done commit committer date updated thus branch old commits according author date rebased committer date updated thus recent committer date parent however nothing guarantee operation git satisfy property instance commits repository created two different computer nonsynchronized clock problem may happen addition possible manually set author date committer date commit thus possible attribute older committer date commit one parent case order given committer date satisfy topological condition matter fact exist repository order according committer date topological order suspect gitkraken sort commits using committer date fails draw correctly graph one repository see figure picture left show repository displayed version gitk modified show committer date right column instead author date see commit message remove useless cpp committer date older parent gitk gitkraken topological sorting standard way obtain ordering node directed acyclic graph respect condition given topological sort pseudocode inspired section introduction algorithm procedure topologicalsort c function dfs c cexplored cexplored true cchildren dfs ci c c dfs c idea use depthfirst search first explore assign coordinate descendant commit setting one commit use topological sort order commits guaranteed graph drawn edge going upward however algorithm take date account consequently last update necessarily top graph could potentially anywhere topology allows may natural programmer moreover may many valid topological order commit graph algorithm output one assumption order commits traversed guarantee algorithm always output topological order temporal topological sorting solve issue raised previous section slightly modified algorithm commits traversed according committer date newest oldest procedure temporaltopologicalsort c function dfs c cexplored cexplored true cchildren dfs ci c c sorted newest committer date oldest dfs c called algorithm temporal topological sort take account topology graph timestamps commits would like highlight good property algorithm output topological order commits output guaranteed always regardless order commits anomaly committer date order induced committer date already valid topological order algorithm return order blazing fast time complexity number commits number edge placing commits previous section seen determine coordinate commit word shown compute order commits edge drawn upward section see strategy determine coordinate commit getting heart matter must introduce definition simplify discussion separate child commit two category branch child merge child branch child child continues branch creates new one merge child child end branch merging another one determine child branch child merge child using position list parent child two following definition formalize branch child defined merge child defined curved branch first algorithm describe simplistic method work well graph drawn curved branch idea maintain list active branch initially list empty iterate commits one one lowest coordinate largest find position procedure curvedbranches c initialize empty list active branch b c c lowest icoordinate largest cbranchchildren empty select cbranchchildren replace c b else insert c b cbranchchildren remove b cj index c b let u make remark algorithm commit replace one branch child one extend branch remove remaining branch child since could replaced first parent replaces another commit git client draw graph curved branch use similar algorithm however two point still ambiguous commit may several branch child strategy select leftmost one ie one lowest coordinate precise insert list active branch simplest solution append give detail version one straight branch straight branch section describe algorithm draw commit graph straight branch ie commits branch column advantage design easier visualize branch core concept git type edge firstly let u make distinction two type edge represented differently depicted figure edge commit one branch child edge commit one merge child algorithm secondly let u describe pseudocode algorithm used determine coordinate commits procedure straightbranches c initialize empty list active branch b c c lowest icoordinate largest compute forbidden jcoordinates j c cbranchchildren st dj j c empty select cbranchchildren st dj j c replace c b else insert c b cbranchchildren b dj nil cj index c b algorithm look quite similar one described previous section used list active branch however key difference compute set forbidden column column correspond coordinate place problem link child edge would overlap commits branch detail define compute later insert index equal nil one available otherwise append instead removing element set index nil previously algorithm curvedbranches could remove branch list active branch insert one middle would shift branch respectively left right branch left removed branch remove branch setting index nil append branch operation cause shift branch reason branch straight forbidden index see determine compute set forbidden index commit take look example would like compute coordinate commit second parent need draw edge parent merge child list active branch equal could insert index index equal nil append let u examine three case index edge would overlap commit index edge would overlap edge append index never used otherwise would equal nil overlap thus right choice append result graph shown figure shown must careful process commit merge child particular must sure obstacle prevents linking commit one merge child branch child problem edge follows column one child obstacle case since child present list active branch prevent commits edge occupying column thus give definition set layman term set index column would placed would impossible link one child simplify expression thanks following lemma lemma show proof let ji c equal j text st column j nonempty row itext ci j c underset cmergechildren cup j di c ji subseteq j j c j min c text min underset cmergechildren min di developed two method compute quickly first one maintain list commits still parent want compute commit compute retrieve equal according previous lemma second method us interval tree described section introduction algorithm data structure allows quickly find interval intersect given interval idea add interval row column associated data interval tree time add commit edge want find occupied column query interval overlap method implemented benchmarked large repository see efficient table present result benchmark method mean m standard deviation m list interval tree mean standard deviation computed measure see first method faster one currently used gitamine finally example commit graph drawn gitamine optimization previous section shown compute position commits graph nicely drawable section discus draw effectively first naive implementation allocates canvas sufficiently large draw whole graph draw however large repository canvas could large use lot memory memory usage number commits width graph ie number column used thus implementation scale well term memory moreover html canvass often implemented using gpu rendering video memory scarcer main memory addition chromium seems manage well big canvas indeed scrolling application suffers important slowdown thus next step allocate canvas large visible area method suffer problem described previously however need redraw time user scroll resizes window visible part graph change speed rendering need render actually visible finding node visible easy done constant time find first last commits visible integer division top bottom coordinate visible area height row however determining edge visible difficult indeed edge linked visible commit visible may edge connect commits side visible area depicted figure find quickly must recognize problem finding intersecting interval indeed represent edge interval row visible area also interval row edge visible interval overlap interval visible area use interval tree find visible edge number edge number edge visible table observe time take render visible part large commit graph without different optimization talked method mean m standard deviation m node edge visible commits edge visible commits edge mean standard deviation computed measure last optimization concern graph rendering commit list displayed next graph displaying whole list commits scale well thousand ten thousand commits thus apply idea previously display commits visible however give impression user commits displayed give ability scroll padding added displayed item interested adventure development vagabond follow twitter tag graph git
169,Lobsters,vcs,Git & VCS,"issue-bot, a bot to handle bug reports through mail for gitea's issue tracker",https://github.com/meli/issue-bot,issuebot bot handle bug report mail gitea issue tracker,problem solution problem solution brings configuration troubleshooting http docsgiteaioenusapiusage demo,issuebot bot handle bug report mail gitea issue tracker problem user register gitea instance file bug deterrent mailing list requires le effort lack bridging issue tracker solution user send new issue email address bot bot reply password allows author reply identity close issue bot binary also run periodically check new reply issue send update issue author subscribed issue subscription true default subscription status changed password problem solution brings spam configuration bot look configtoml file directory binary config need following value tag prefix email subject eg issuebotissues blah blah tag issuebotissues authtoken gitea instance api authtoken local part bot receiving address localpart issue domain melidelivery baseurl http gitmelidelivery repo meliissuebot botname issuebot botusername issuebot shell command bot pipe mail mailer cat print email stdout mailer usrsbinsendmail webmaster melidelivery send copy address mailer usrsbinsendmail setup mail server deliver mail destination localpart tag domain binary simply call binary write email binary standard input postfix done creating transport map pipe transport map file tell postfix send mail send localpart specific program pipe program open mastercf paste line bottom issuebot unix n n pipe userissuebot directorypathtobinarydir argvpathtobinary example issuebot unix n n pipe userissuebot directoryhomeissuebot argvhomeissuebotissuebot create transport map localpart domain issuebot notice colon end mean refers transfer address save file somewhere eg etcpostfixissuetransport make readable postfix issue postmap etcpostfixissuetransport finally add entry hash etcpostfixissuetransport transportmaps localrecipientmaps key maincf postfix reload load configuration change also need following setting allow tag recipient address recipientdelimiter setup periodic check preferred task scheduler run issuebotbin cron order fetch reply issue systemd done timer troubleshooting email stop working postfix nt pas mail bot make sure using nondefault setup like virtual mailbox case add transport along transport setup whatever email get binary nothing happens make sure binary executable readable pipe user configuration file directory binary mastercf flag transport entry mail must piped unaltered auth token work check issuing request api via curl example http docsgiteaioenusapiusage command using reply close etc nt work make sure added recipientdelimiter maincf file bot state saved database directory binary view data using cli tool root sqlite version enter help usage hint sqlite table issue sqlite select issue add restld title add restld title add restld gd title add restld issue demo email date fri sep domaintld issue gittld subject issue title issue body text formatting reply get date fri sep issue gittld domaintld subject issuebotissues issue issue title successfully created hello successfully submitted issue titled issue title issue found http receive reply user unsubscribe conversation send email gittld reply user post new comment send text gittld close issue send email gittld please keep email order able keep touch issue automated email issuebot issueshelp gittld reply notice sent subscribed issue date fri sep issue gittld domaintld subject issuebotissues new reply issue issue title hello new reply issue issue title receiving notice subscribed discussion unsubscribe send email gittld domaintld reply reply automated email issuebot issueshelp gittld
170,Lobsters,vcs,Git & VCS,Fix conflicts only once with git rerere,https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67,fix conflict git rerere,fix conflict git rerere rerere usual suspect control merge leave control merge tree pollutes history graph finalized rerere rescue enabling rerere amazing gitrelated video course conflict show recording fix title cooler solid title title conflict reemerges learn contextfree share contributor option embedded working directory longlived git rebase onto head option dedicated localsharing repository want learn number git article upvote hn total git let u know,fix conflict git rerereso fixed conflict somewhere repo later stumbled exactly one perhaps another merge ended rebasing instead cherrypicked faulty commit bang fix conflict againthat sucksespecially git nice offer mechanism spare chore least time rerere ok name lousy actually stand reuse recorded resolution knowin article try dive work limit best benefit itthe usual suspect control mergesa situation rerere come really handy control mergespicture working longlived branch perhaps heavy feature branch let call longlived naturally time pass get apprehensive eventually merging branch main development branch usually master time go divergence relieve tension ease final merge heading towards decide perform control merge merge master branch without polluting master see conflict lurking figure whether hard fixit indeed useful fix later would tempted leave control merge tree done instead rolling back say git reset hard orighead keep graph pristineso time pass get graph look like worse control merges polluting history graphthis ugly pollutes history graph across branch merge occur merge finalized branch inbut cancel control merge done refix conflict next time make control merge mention final merge towards master developer rerere rescuethis exactly rerere git feature take fingerprint every conflict happens pair matching fix fingerprint problematic commit get finalizedlater conflit match first fingerprint rerere automagically use matching fix youenabling rererererere command transverse behavior git active need least one two condition met rerereenabled configuration setting set trueyour repo contains rerere database gitrrcache directory quite fathom situation rerere enabled bad idea recommend go ahead enable globally git config global rerereenabled truecheck amazing gitrelated video course even free conflict show uplet say face conflictbearing divergence perhaps master changed title indexhtml certain way longlived otherwiselet try control merge longlived git merge masteryour first rerereenabled conflict notice linethis look like regular conflict pay attention third line recorded preimage indexhtmlthis tell u rerere lifted fingerprint conflict indeed ask file paying attention one tell u longlived merging git rerere statusindexhtmlif look repo indeed find fingerprint file tree preimagethis preimage file contains full fingerprint file conflict entire blob recording fixok let fix conflict instance go following combined title head meta charset title cooler solid title title head verify rerere remember complete merge git rerere diff aindexhtml bindexhtml html head meta charset title cooler title title title solid title title title cooler solid title title head body base title mark fixed usual way git add git rerere remaining tell file look right none rate rerere effectively remember fix need finalize current commit merge fall manually perform commit longlived merging git commit noeditrecorded resolution indexhtml longlived merge branch master longlived longlived pay attention second line recorded resolution indexhtmland indeed fix snapshot postimage repo tree postimage preimageso go right ahead roll back control merge want pollute history graph longlived git reset hard headhead cooler title longlived conflict reemergeslet assume longlived master keep marching perhaps former cs come latter cs appears albeit different content along j filethe time come new control merge seems order go longlived git merge masterautomerging stylecssconflict addadd merge conflict stylecssautomerging indexhtmlconflict content merge conflict indexhtmlrecorded preimage stylecssresolved indexhtml using previous resolutionautomatic merge failed fix conflict commit result longlived merging addadd conflict cs wellknown conflict indexhtml look closely around end recorded preimage stylecssresolved indexhtml using previous resolutionas see conflict indexhtml known already autofixed indeed ask git rerere remaining tell stylecss still troubleso let start marking indexhtml okay staging git add indexhtmlby way prefer rerere autostage file solved ask need tweak configuration like git config global rerereautoupdate truefrom consider setting let fix remaining conflict longlived merging git commit noeditrecorded resolution stylecss longlived merge branch master longlived longlived two pair fingerprint available including one stylecss tree postimage preimageand roll back commit like beforeto wrap let assume indexhtml get modified one last time adding content near end body commit itthis last necessary commit longlived instead yet another control merge decide final proper merge master master git merge longlivedautomerging stylecssconflict addadd merge conflict stylecssautomerging indexhtmlconflict content merge conflict indexhtmlstaged indexhtml using previous resolutionstaged stylecss using previous resolutionautomatic merge failed fix conflict commit result master merging note instead using previous resolution get staged indexhtml using previous resolutionstaged stylecss using previous resolutionthis asked rerere autostage completely fixed file indeed prompt mention staged modified lead think remaining conflict something git rerere remaining confirms showing anythingso need stop seeing automatic merge failed end mean regular merge strategy enough rerere help top could go still rerere heuristic guaranteed relevant context might git refuse autofinalize rererehelped operationto make sure adequately fixed doubt simple git diff git show file zero letter calm fearsit still job wrap commit master merging git commitusing git github want become true github master released part bestofclass github video training series hour video amazing content beginner expert alike learn morecontextfreeyou remember fingerprint independent context matter command resulted fingerprint pair lifted merge rebase cherrypick stash applypop checkout etc matter command reuses fixit matter path conflicting file snapshot content matter hand fingerprint usable diffs immediate context preserved usual merge conflict modified line close diff preimage rerere refuse consider imagefix pair fix new context yourselfbesides new conflict appears file already targeted fingerprint pair previous conflict rerere seems quite strict rule applicability previous fix find hard determine proximity threshold may well ignore previous fix decide ask new fix entire conflict set file usual ymmvcan share contributor like hook rerere database gitrrcache directory stay local repo shared upstream push regardless push setting option like hook mean share coworkers fellow code contributor really want actually rather good idea share several option usually based symbolic link symlinks option embedded working directoryyou absolutely dedicate directory wd sharing element otherwise kept local repo rrcache hook instanceyou could create directory named gitsystem root wd subfolders way git directory rrcache would symlink gitsystemrrcache osx linux git bash following way create foldermkdir gitsystem folder exists repo move otherwise create final location gitrrcache mv gitrrcache gitsystem mkdir gitsystemrrcache create symlinkln nfs gitsystemrrcacheon window would look like mkdir gitsystem following single lineif exist gitrrcache move gitrrcache gitsystem else mkdir gitsystemrrcachemklink gitrrcache gitsystemrrcache since window vista mklink command let create symlinks run elevatedprivileges command prompt one ran administrator admin enough local security policy could include specific user account create symbolic link authorization know symlinks evil hacker right info mklink window xp wanting get hurt window scripting run first set command git bash installed git window installer sharing local repo configs embedded working directory requires commit juggling keep thing neatly separatein situation idea include new fingerprint original fix commit keeping gitsystem content commit requires juggling fact want reset control merges keep fingerprintsonly later commit threepoint rebase help instance ensure committing gitsystem mistake longlived merging git reset gitsystem longlived merging git commit noedit commit gitsystem longlived git add gitsystem longlived git commit fix fingerprint control merge rewrite history preserve last commits longlived git rebase onto headoption dedicated localsharing repositorythe approach avoids commit juggling make sharing twostep process repo upstream sharing obviously dedicated sharing setting otherwise kept localyou change target symlink something fixed absolute ideally subdirectory central sharing repo something along line gitsharedlocalsyourprojectrrcache osxlinux orc usersyougitsharedlocalsyourprojectrrcache windowssharing local repo configs separate dedicated repository commit juggling twostep sharingin manner introduce extra content working directory due fingerprinting commit juggling share fingerprint need also go central sharing repo commit quick git pull rebase get whatever shared configs new server replay new stuff top git push actually share friend second time talking rebasing article confused merge v rebase odd thing like threepoint rebases got covered twostep eliminates risk broken commits mixing preimage fingerprint fix etcwant learn wrote number git article might particularly interested following one also enjoyed post say upvote hn thanks bunch although publicize much offer englishlanguage git training across europe based battletested celebrated total git training course fancy one let u know absolutely come uscanada anywhere else world considering incur travelling cost despite u superreasonably priced likely find costeffective deal using closer provider github someone else still want u follow link let talk
171,Lobsters,vcs,Git & VCS,Auto-update GitHub submodules,https://www.transposit.com/blog/2019.08.23-github_submodule/?c=lob,autoupdate github submodules,autoupdate github submodules update github repository submodule recent sha webhook doc repo post app deploy environment variable deploy production key deploy endpoint apps try intelligent runbooks simplified incident resolution try intelligent runbooks simplified incident resolution thanks touch soon,autoupdate github submodules update github repository submodule recent sha webhook tina huang aug git submodules allow nest one repository inside another transposit use submodules want opensource doc repo allow community contribution want keep remainder website separate private repository unfortunately setup led pretty manual unreliable process change would often go unpublished team member would commit doc repo forget update submodule sha worked git submodules probably experienced painful process updating submodule sha basic process first go submodule path within parent repo update submodule new sha usually involves git pull master parent repository commit updated sha example diff look like diff git asrcdocs bsrcdocsindex asrcdocs bsrcdocs subproject commit commit wanted automate process commit submodule parent repository automatically update sha found post explaining use github tree api update submodule specific commit decided use transposit build github webhook code update look like transposit params let owner envget parentowner let repo envget parentrepo let branch envget parentbranch let submoduleowner envget submoduleowner let submodulerepo envget submodulerepo let submodulebranch envget submodulebranch let submodulepath envget submodulepath let parentsha apirun githubgetbranchforrepo owner repo branch commitsha let submodulesha apirun githubgetbranchforrepo owner submoduleowner repo submodulerepo branch submodulebranch commitsha let treesha apirun githubcreategittree owner owner repo repo body basetree parentsha tree path submodulepath mode type commit sha submodulesha let commitsha apirun githubcreategitcommit owner owner repo repo body message autoupdate submodule submoduleowner submodulerepo submodulesha tree treeshasha parent parentsha let editsha apirun githubeditgitref owner owner ref head branch repo repo body sha commitshasha return editsha wrapped webhook configured github call voila use webhook asis tweak need fork app go deploy environment variable configure parent repository submodule go deploy production key add github credential go deploy endpoint copy webhook url go setting page submodule repository github add new webhook point url copied information github webhooks found commits submodule repository trigger webhook update parent repository sample check apps try intelligent runbooks simplified incident resolution request access try intelligent runbooks simplified incident resolution thanks touch soon done
174,Lobsters,vcs,Git & VCS,Git Aliases I Use (Because I'm Lazy),https://victorzhou.com/blog/git-aliases/,git alias use lazy,git side project optimizing thing probably git alias git alias bashprofile linux alias command bash alias zsh aliasing actually useful quick math history one minute saved per day ok practically useful feel update lobster post comment section epilogue,september updated september finally started using git heavily year ago first began building bigger side project true typing git status git push pretty easy got git experience know command get rather long one always got git commit amend noedit amends staged change recent commit without changing commit message git open text editor common use case fixing change committed maybe careless often finish commit find typo debug line second later typing character git commit amend noedit get old pretty fast pretty optimizing thing even probably one day procrastinated thinking way optimize git git alias google something like shorten git command quickly find git alias turn shortening command built git tell git want alias example shorten status copy pasting line terminal git config global alias status command actually update gitconfig file store global git configs whenever type alias git automatically replace status collection favorite git alias alias status diff co checkout br branch last log head cane commit amend noedit lo log oneline n pr pull rebase gitconfig git config global alias status git config global aliasd diff git config global aliasco checkout git config global aliasbr branch git config global aliaslast log head git config global aliascane commit amend noedit git config global aliaspr pull rebase git config global aliaslo log oneline n copy paste use alias finally one shorthand like use use text editor add bashprofile see linux alias command bash alias exactly think use different shell probably similar feature eg zsh aliasing ready using git look like g branch master branch date originmaster nothing commit working tree clean g co b newbranch switched new branch newbranch g lo author victor zhou gmailcom date mon aug bump version actually useful maybe depends person save little time like weird stuff like habitually spam git status opinion small price pay second setup new machine nice quality life improvement make feel fast efficient much time actually save debatable quick math let get ballpark estimate true amount time saved type around word per minute assuming average character per word boxed character per second table many character commonlyused shortcut save original commandshortened commandcharacters savedgit statusg diffg checkoutg branchg log headg commit amend noeditg next used history command see recent command breakdown commandtimes usedg git git command saved character since shorten git g total character saved commandtimes usedcharacters savedtotal character savedg git ldots boxed character saved average boxed character per git command assuming type git command average workday character saved convert one minute saved per day using earlier average typing speed charssec ok practically useful let reiterate said earlier make feel efficient maybe kind placebo effect actually make productive think use alias alias like feel free discus update good discusion lobster post comment section recommend giving read epilogue writing post realized git command often use neglecting git add git commit message git reset hard going add git alias git config global aliasa add git config global aliascm commit git config global aliasrh reset hard
175,Lobsters,vcs,Git & VCS,Elasticsearch is a great example of a modern monolithic application,https://twitter.com/dvassallo/status/1169798034110025728,elasticsearch great example modern monolithic application,,detected javascript disabled browser would like proceed legacy twitter yes
176,Lobsters,vcs,Git & VCS,humungus — an hg server,https://humungus.tedunangst.com/r/humungus,humungus hg server,doc downloads file change change r,understand pain overview doc downloads file change change r humungus hg server feature view change file changesets etc syntax highlighting read web access write access via ssh key serf multiple repository allows cloning via obvious url support go get serf file downloads online documentation via mandoc terminal based admin interface requirement mercurial githubcomgdamoreencoding githubcomgdamoretcell githubcomgorillamux githubcomlucasbeyergocolorful githubcommattngorunewidth githubcomrivotview golangorgxtext humungustedunangstcomrgerc setup init schemasql humungusdb insert config key value value servername humungusexamplecom insert config key value value listenaddr insert config key value value debug quit mkdir repos cd repos hg clone workstuffone hg clone workstufftwo hg clone workstufffun cd mkdir downloads mkdir fun cp filesfun fun cd humungus admin humungus recent change edt ted unangst tedu tedunangstcom tagged tip monitor long wait edt ted unangst tedu tedunangstcom mostly reasonable dark theme edt ted unangst tedu tedunangstcom improve user query edt ted unangst tedu tedunangstcom document ssh edt ted unangst tedu tedunangstcom note ssh write access edt ted unangst tedu tedunangstcom allow wildcard negative permission edt ted unangst tedu tedunangstcom ssh user check per connection update visible edt ted unangst tedu tedunangstcom access really write edt ted unangst tedu tedunangstcom parent edt ted unangst tedu tedunangstcom parent update web
177,Lobsters,vcs,Git & VCS,Navigating code on GitHub,https://help.github.com/en/articles/navigating-code-on-github,navigating code github,navigating code github note reference,navigating code github understand relationship within across repository navigating code directly github navigating code function use open source library semantic following language supported codeql go java javascript php python ruby typescript note code navigation work active branch feature enabled nt see link definition function method push branch try jump function method definition within repository clicking function method call file find reference function method within repository clicking function method call file clicking reference tab
178,Lobsters,vcs,Git & VCS,Stacked Pull Requests: Keeping GitHub Diffs Small (2016),https://graysonkoonce.com/stacked-pull-requests-keeping-github-diffs-small/,stacked pull request keeping github diffs small,nt catching bug broken window code review fatigue create wip pull request wip hub pr todos create stacked pull request commit git add patch commits n finished product feedback beautiful feedback tip merge squash landing stack github support updating target branch pr measure difference last stack,code review nt catching bug also help team build trust create shared coding standard force discussion vetting code design prevent broken window pull request get big cause code review fatigue learn post split large pr smaller pr ship dependent chain pr quickly create wip pull request git workflow start work feature branch git checkout b somefeature git commit first change gone far open wip pr give opportunity get organized come plan give team opportunity see going open let people progressively review progress following us github cli tool hub although could use site directly hub pullrequest wip adding somefeature x thing thing hack away committing early often keep team updated pushing checking pr todos wip ready ship close pr ready start stacked pr tip nt delete branch yet handy remote backup case create stacked pull request start creating new branch change somefeature unstaged git checkout b somefeature git reset master running git status show change made somefeature copied uncommitted state start creating commits make stacked pr commit reach git add patch create first logical commit branch git add patch change staged stash everything else verify thing still work git stash includeuntracked keepindex make test test pas time create first commit pr stack git commit make change x git push origin hub pullrequest somefeature make change x commits n next commit start creating new branch stash popped git checkout b git stash pop back git add patch create test next commit git add patch git stash includeuntracked keepindex make test git commit somefeature make change git push origin creating pr make sure base previous branch b flag hub pullrequest b repeat process made way stash finished product result stack focused reviewable pr git graph look bit like branch depending previous one master somefeature stacked pr ready review feedback beautiful feedback pinged team review comment start coming notice much feedback stacked pr provoke compare rather large pr garnered little feedback comment huge address feedback push enough stamp merge tip merge squash making additional commits branch sure propagate stack via git merge git rebase git co git commit addressing feedback git commit addressing feedback git push origin git co git merge integrate change make test rebasing focus keeping later branch tipped front earlier branch noble goal force resolve merge conflict commit time case stacked pr necessary squashing commits merge stack anyways make life easier use git merge multiple commits conflict able resolve one go go staying date master consider merging instead rebasing landing stack point collected lgtm pr stack time merge tempting merge stack since pr likely stamped first resist urge merging first pr cause following pr become unmergeable github support updating target branch pr instead go stack last first merge stack master result single wellreviewed commit master measure difference stacked pr lead thoroughly reviewed code shipping faster experience positive last stack line code comment feedback commits addressing feedback compare next stack large long running pr see difference cheer
179,Lobsters,vcs,Git & VCS,FreeBSD core team appoints a WG to explore transitioning from Subversion to Git,https://www.freebsd.org/news/status/report-2019-04-2019-06.html#FreeBSD-Core-Team,freebsd core team appoints wg explore transitioning subversion git,introduction administration page jenkinsadmin freebsdorg lwhsu freebsdorg fcp ci policy devsummit http core freebsdorg presentation survey result meetbsd talk topic deb freebsdfoundationorg election continue increase support freebsd partnership program alpha preview freebsdtesting monthly newsletter http wwwfreebsdfoundationorgjournal event attended upcoming event freebsdorg zeising freebsdorg http gitterimfreebsddesktoplobby http githubcomfreebsddesktop irc freebsdorg portmgrsecretary freebsdorg portmgr freebsdorg freebsdorg gmailcom dariusmihaim gmailcom mihai freebsdorg gmailcom dariusmihaim gmailcom mihai freebsdorg dougm freebsdorg alc freebsdorg markj freebsdorg mk semihalfcom mba semihalfcom mw semihalfcom bz freebsdorg asomers freebsdorg buggy markj freebsdorg andrew freebsdorg tuexen freebsdorg emaste freebsdorg ota jemailnejp trasz freebsdorg http cifreebsdorg kib freebsdorg kib freebsdorg freebsddrivers mellanoxcom mellanox socket direct adapter bluefield multicore system chip soc mellanox ofed freebsd documentation rmacklem freebsdorg jeff freebsdorg gallatin freebsdorg markj freebsdorg mst semihalfcom mindal semihalfcom mw semihalfcom broadcom soc series mw semihalfcom ar semihalfcom nxp soc mmuenz gmailcom gmailcom marcel freebsdorg araujo freebsdorg mihai freebsdorg alfonsosiciliano emailcom news home status home,introductionthis quarter report includes interesting topic easily accessible anyone even programmer report link presentation freebsd survey result bsdcan describe interesting experience hackaton might encourage host one possibly participant also provide date information status irc channelsfor technical skill give news role git freebsd project describe status tool hunt bug enhance security announce clone sysctlfinally experienced programming probably interested great work done driver particular aknowledgement due alan somers started bring date fuse implementation year behind important improvement include userfriendly experience trackpoints touchpads enabled default much low level work graphic many new bhyve feature update linux compatibility layer various kernel improvementshave nice read lorenzo salvadoreentries various official semiofficial team found administration page contact jenkins admin jenkinsadmin freebsdorg contact liwen hsu lwhsu freebsdorg freebsd ci team maintains continuous integration system related task freebsd project ci system regularly check committed change successfully built performs various test analysis result result build job archived artifact server testing debugging need ci team member examine failing build unstable test work expert area fix code adjust test infrastructure detail effort available weekly ci report fcp ci policy feedback state please provide comment freebsdtesting suitable list testing working group devsummit please see freebsdtesting related ticket information work progress fixing failing test case build adding drm port building test current adding test job http implementing automatic test bare metal hardware extending publishing embedded testbed planning running ztest network stack test help software get ci freebsd hosted ci solution contact freebsd core team core freebsdorg freebsd core team governing body freebsd core approved source commit bit doug moore dougm chuck silver chs brandon bergren bdragon vendor commit bit scott phillips scottph annual developer survey closed developer took survey average completion time minute public survey closed taken user completion rate presentation survey result took place bsdcan core team voted appoint working group explore transitioning source code source truth subversion git core asked ed maste chair group ed researching topic time example ed gave meetbsd talk topic variety viewpoint within core regarding host git repository however core feel git prudent path forward project received many season doc submission picked top candidate google announce accepted technical writer project hoping lot new refreshed man page contact deb goodkin deb freebsdfoundationorg freebsd foundation c nonprofit organization dedicated supporting promoting freebsd project community worldwide funding come individual corporate donation used fund manage software development project conference developer summit provide travel grant freebsd contributor foundation purchase support hardware improve maintain freebsd infrastructure provides resource improve security quality assurance release engineering effort publishes marketing material promote educate advocate freebsd project facilitates collaboration commercial vendor freebsd developer finally represents freebsd project executing contract license agreement legal arrangement require recognized legal entity highlight help freebsd last quarter held annual board meeting ottawa may board director officer election take place year meeting justin gibbs elected new president board director new freebsd foundation board director includes president founder justin gibbs vice president benedict reuschling secretary philip paeps treasurer marshall kirk mckusick director hiroki sato george nevilleneil robert n watson read election election management team gave update board respective area discussed key area project need help step fill hole reviewed updated month goal identified project support discussed conference likely attend went latest fundraising effort followed discussion get user contribute back project discussing increase number user contributor talked method making training material available partnership commercial user support help facilitate collaboration commercial user freebsd developer also meet company discus need bring information back project ed maste deb goodkin met commercial user germany beneficial also help u understand application freebsd used bsdcan brings high number commercial user excellent opportunity similar discussion need fourday freebsd summit bsdcan fundraising effort work funded donation grateful generous donation intel netapp vmware stormshield last quarter working hard get commercial user give back help u continue work supporting freebsd importantly like thank individual donor making donation last quarter total please consider making donation help u continue increase support freebsd also partnership program provide benefit larger commercial donor find information link share company o improvement foundation improves freebsd operating system employing technical staff maintain improve critical kernel subsystem add feature functionality fix problem foundation also provides grant fund individual project commits freebsd base system repository sponsored foundation quarter include improvement tmpfs inmemory msdos ufs filesystems device driver hardware compatibility fix virtual memory vm tool chain documentation testing continuous integration improvement fixed number race condition security issue found syzkaller google codecoverageguided system call fuzzer alan somers work updating freebsd support fuse userspace filesystems continued quarter full detail elsewhere quarterly report point work committed project branch bug fix improvement committed directly freebsd development branch edward napierala linuxulator project continued quarter resulting number improvement linuxulator linuxspecific functionality linsysfs work part path supporting linux strace debugging tool order facilitate debugging failure linux binary linuxulator mateusz guzik continued scalability performance improvement quarter bjoern zeeb integrated sdio stack detail elsewhere quarterly report progress made online raidz expansion project quarter matt ahrens posted alpha preview feature experimentation review freebsd foundation make alpha release image available testing near future foundation staff contributed nine freebsd security advisory erratum update quarter including cpu vulnerability workarounds related work included improving intel microcode update loading continuous integration quality assurance foundation provides fulltime staff member working improving automated testing continuous integration overall quality assurance effort second quarter foundation staff continued improve project ci infrastructure worked contributor fix failing build test case worked team project testing need hosted cifocused working group bsdcan continue publish ci weekly report freebsdtesting mailing list see freebsd ci section report information supporting freebsd infrastructure foundation provides hardware support improve freebsd infrastructure last quarter continued supporting freebsd hardware located around world freebsd advocacy education large part effort dedicated advocating project includes promoting work done others freebsd producing advocacy literature teach people freebsd help make path starting using freebsd contributing project easier attending getting freebsd contributor volunteer run freebsd event staff freebsd table give freebsd presentation freebsd foundation sponsor many conference event summit around globe event bsdrelated open source technology event geared towards underrepresented group support freebsdfocused event help provide venue sharing knowledge work together project facilitate collaboration developer commercial user help provide healthy ecosystem support nonfreebsd event promote raise awareness freebsd increase use freebsd different application recruit contributor project check advocacy education work last quarter represented freebsd linuxfest northwest bellingham washington sponsored helped organize freebsd developer summit bsdcan ottawa canada sponsored attended bsdcan set registration attended vienna freebsd security hackathon vienna austria represented freebsd hkoscon attended berlin freebsd developer summit presented comcast lab connect open source conference sponsored presented represented freebsd rootconf bangalore india committed attend oscon thing open committed sponsor help organize bay area developer summit provided freebsd advocacy material provided travel grant freebsd contributor attend many event continued producing freebsd advocacy material help people promote freebsd around world read conference adventure conference recap trip report monthly newsletter help educate world freebsd publishing professionally produced freebsd journal mentioned previously freebsd journal free publication find access latest issue http wwwfreebsdfoundationorgjournal find event attended upcoming event continued work new website developer help u improve website work begun make easier community member find information easily make site efficient legalfreebsd ip foundation owns freebsd trademark responsibility protect also provide legal support core team investigate question arise go http wwwfreebsdfoundationorg find support freebsd help contact freebsd graphic team freebsdorg contact niclas zeising zeising freebsdorg freebsd team maintains lower level freebsd graphic stack includes graphic driver graphic library mesa opengl implementation xorg xserver related library application wayland related library application last report half year ago several update change made freebsd graphic stack improve user experience improve input device handling evdev enabled default configuration late building enabled ibmlenovo trackpoints elantech synaptics touchpads default well input device library libinput updated last series update bringing userland input stack date work started made several improvement drm kernel driver longstanding memory leak intel driver fixed several update improvement made various drm kernel driver component port drm kernel driver using linux kernel source created committed freebsd port graphicsdrmdevelkmod driver requires recent linux kpi available recent version freebsd current version driver contains several development improvement generic drm drmko driver well driver unloaded reloaded ease development testing cause issue virtual console however ssh connection recommended aid debugging use debugfs improved still limitation preventing fully functional since debugfs based pseudofs possible prevent fully functional debugfs current state might look adding required functionality pseudofs use another framework new inkernel drm driver virtualbox vboxvideoko ported linux support currently experimental work progress example virtual console wo nt update loading driver x waylandbased compositor working mesa updated switched using use port default version llvm currently several userland xorg driver application library updated improvement various userland component make graphic stack made also continued regularly scheduled biweekly meeting although work remains sending timely meeting minute afterwards people interested helping find u freebsdorg mailing list gitter chat http gitterimfreebsddesktoplobby also available freebsdxorg efnet also team area github work repository found http githubcomfreebsddesktop contact irc admin irc freebsdorg freebsd irc admin team manages freebsd project presence activity freenode irc network looking registration management channel within official namespace freebsd channel moderation liaising freenode staff allocating freebsd hostmask cloak user general user support relating channel management freebsd project currently endorse irc official support channel see able guarantee consistent positive user experience irc admin working toward creating high quality experience standardising channel administration moderation expectation ensuring project ability manage channel within namespace last quarter irc admin cleaned deregistered registration channel defunct stale date founder inactive seen year channel found otherwise active retained freebsd channel registered previous total documented baseline configuration setting wiki channel including chanserv setting channel mode registration policy etc established multiple documented method reporting user abuse channel issue irc admin resolution upcoming change work existing freebsd channel standardise channel management setting access migrate forward andor consolidate existing duplicate freebsd channel channel standard naming convention work unofficial freebsd channel migrate official freebsd channel suitable update existing ircrelated website documentation source describe official state project managed irc presence freenode lastly repeat previous call vast majority broader user community interacts freenode irc network freebsd developer presence still need significantly improved freenode many opportunity increasing amount quality interaction freebsd user developer term developer keeping finger pulse community encouraging cultivating greater contribution project long term critical strong developer presence amongst user irc admin would like call developer join freebsd freenode channel increase presence user invited join freebsdirc freenode irc network question idea constructive criticism feedback freebsd project improve service experience provides community irc contact rené ladan portmgrsecretary freebsdorg contact freebsd port management team portmgr freebsdorg following done last quarter portmgr keep thing port tree going last quarter number port rose end quarter open pr commits excluding quarterly branch committers show slight decrease activity compared previous quarter people come go last quarter welcomed pedro giffuni pfg piotr kubaj pkubaj han petter selasky hselasky pedro han petter already active src committers said goodbye gordon kan tobez wosch infrastructure side new usescabal introduced various default version updated mysql python ruby samba julia gained default version web browser also updated firefox chromium last quarter antoine ran total expruns test various package update bump stack protector level strong switch default python version opposed remove sysdirh base deprecated year convert go port usesgo contact freebsd release engineering team freebsdorg freebsd release engineering team responsible setting publishing release schedule official project release freebsd announcing code freeze maintaining respective branch among thing second quarter freebsd release engineering team started cycle code slush starting may throughout cycle three beta build three rc build line originallypublished schedule final rc build started june final release build targeted july freebsd fourth release branch building stability reliability freebsd release engineering team also published schedule targeted start september one important thing note regarding published schedule excludes hard freeze branch test run eliminating code freeze entirely release cycle commits branch still require explicit approval release engineering team however additionally throughout quarter several development snapshot build released head branch much work sponsored freebsd foundation rubicon communication llc netgate project span multiple category kernel userspace port collection external project contact elena mihailescu gmailcom contact darius mihai dariusmihaim gmailcom contact mihai carabas mihai freebsdorg migration feature us saverestore feature migrate bhyve guest freebsd host another freebsd host migrate bhyve guest one need start empty guest destination host shared guest image using bhyve tool r option followed source host ip port listen migration request source host migration started executing bhyvectl command migrate migratelive option followed destination host ip port send message new feature added clear dirty bit migration round extend live migration highmem segment future task refactor live migration branch rebase live migration extend live migration unwired memory project sponsored matthew groom contact elena mihailescu gmailcom contact darius mihai dariusmihaim gmailcom contact mihai carabas mihai freebsdorg saverestore bhyve feature suspend resume facility added hypervisor bhyve bhyvectl tool used save guest state three file file guest memory file state various device state cpu another one metadata used restore process suspend bhyve guest bhyvectl tool must run suspend statefilename option followed guest name restore bhyve guest checkpoint one simply add r option followed main state file file given suspend option bhyvectl starting vm new feature added open ticket phabricator apply feedback received community future task add suspendresume support nvme add suspendresume support virtioconsole add suspendresume support virtioscsi add tsc offsetting restore amd cpu project sponsored matthew groom contact doug moore dougm freebsdorg contact alan cox alc freebsdorg contact mark johnston markj freebsdorg ongoing project aim teach swap pager send scsi unmap ata trim command swap device block swap space freed example application owning block exiting ssds become commonplace feature low latency random io request make appealing use swap device since lower latency mean application spend le time blocked waiting pagein swap device maximize write performance ssds require operating system send notification disk sector longer use help disk optimize usage nand flash cell freebsd notification called biodelete freebsd ufs zfs filesystems long time able transmit biodelete request device backing filesystem example ufs support enabled specifying newfs tunefs parameter however freebsd historically corresponding implementation swap device thanks doug moore current swapon send biodelete block specified device immediately prior configuring swap device enabled specifying e swapon parameter adding trimonce option swap device etcfstab entry inprogress work swap pager implement online block deletion biodelete transmitted block freed application hopefully implemented freebsd contact michal krawczyk mk semihalfcom contact maciej bielski mba semihalfcom contact marcin wojtas mw semihalfcom ena elastic network adapter smart nic available virtualized environment amazon web service aws ena driver support multiple transmit receive queue handle gb network traffic depending instance type used development freebsd similar linux dpdk since last update internal review improvement patch done followed validation various aws instance completed since last update upstream patch revision introduce major driver upgrade version along various fix improvement significant feature llq low latency queue independent queue reconfiguration using sysctl command implement netmap support ena todo internal review upstream netmap support project sponsored amazoncom inc contact bjoern zeeb bz freebsdorg sdio interface designed extension sd card allow attachment various peripheral eg wifi bluetooth work ongoing ilya bakulin mmccam stack provide infrastructure able sd card sdio device attached sidebyside facilitating freebsd cam framework based excellent work last year sdio support finished earlier year committed freebsd head intention merge later time facilitating newly available sdio bus work started port broadcom fullmac wifi driver work still progress expected complete later year wifi support raspberry pi embedded board become available likewise driver sdio device developed project sponsored freebsd foundation contact alan somers asomers freebsdorg fuse file system userspace allows userspace program implement file system widely used support outoftree file system like ntfs well exotic pseudo file system like sshfs freebsd fuse driver added gsoc project since time largely neglected fuse software buggy outofdate implementation year behind nearly finished fuse overhaul begain raised protocol level fixed many bug see added following feature optional kernelside permission check defaultpermissions implement vopmknod vopbmap vopadvlock allow interrupting fuse operation support named pipe unixdomain socket fusefs file system forward utimenow utimensat daemon kqueue support devfuse allow updating mount mount u allow exporting fusefs file system nfs serverinitiated invalidation name cache data cache respect rlimitfsize try support server old protocol also added following performance enhancement implement fuse fopenkeepcache fuseasyncread flag cache file attribute cache lookup entry positive negative serverselectable cache mode writethrough writeback uncached write clustering readahead use counter statistical reporting remains finish merging branch deal newly introduced bug project sponsored freebsd foundation contact mark johnston markj freebsdorg contact andrew turner andrew freebsdorg contact michael tuexen tuexen freebsdorg contact ed maste emaste freebsdorg see syzkaller entry quarterly report introduction syzkaller syzkaller continues find freebsd kernel bug number bug fixed past quarter continue investigate fix bug report syzkaller work extend syzkaller capabilites progressed andrew turner implemented support fuzzing compatibility layer kernel helping illuminate darker corner kernel possible use bhyve vm backend syzkaller efficient convenient fuzz freebsd freebsd planned work includes enabling use zfs base filesystem fuzzer vms extending range system call ioctls covered syzkaller enabling llvm sanitizers kernel catch issue making use netdump capture kernel dump panic found syzkaller making much easier diagnose bug syzkaller unable find reproducible test case project sponsored freebsd foundation contact yoshihiro ota ota jemailnejp kernel zlib upgrade progress xin delphij working closely zlib upgrade relocated contribzlib syscontribzlib order kernel code access zlib tree also deleted dead code depended zlib inflate inflate fork unzip uncompress gzip file also renamed crch avoid conflict zlibcrch next goal compile old zlib new zlib kernel allowing switch zlib user independently contact edward tomasz napierala trasz freebsdorg project aim improve linux compatibility layer make compatible recent linux release also lower bar potential developer want start contributing initial effort focused tooling make easier debug problem prevent future regression first part involved making possible use linux strace utility providing package reason freebsd truss ktrace trace linux binary decode linuxspecific flag structure second part involved providing linux test project binary linuxltp package ongoing work hook freebsd ci infrastructure http cifreebsdorg also number improvement fix bug discovered process one yet committed fix binary linked newer version libc effectively unbreaking binary recent ubuntu release project sponsored freebsd foundation contact konstantin belousov kib freebsdorg virtual memory machinedependent layer pmap need track mapping managed physical memory page able either destroy pageout change writeable readonly eg sync page content file without racing modification user writes mapping accounted creating pventry record address space implicitly linking pv entry pmap virtual address mapping previous work split lock protecting pv entry list vm lock pvhgloballock lock global address space see pmapc still later hashed perpage pv list lock introduced would reduce contention pv list maninulations different page unfortunately pvhgloballock still needed guarantee safety operation problem arises pmap us pmap lock protect page table tlb consistency perpmap lock different pv list lock updating page table entry never drop pmap lock necessary tlb invalidation done globally including signalling cpu ipi pv list lock unlocked necessary invalidation done instance pmap asked remove mapping specific page pmapremoveall check pv list page find mapping list might appear empty despite cpu tlb yet invalidated page reused cpu might change content using cached tlb entry allowing mean allowing silent data corruption opening security hole global pvh lock held pmaps invalidated tlbs mechanism obvious scalability issue instead generationcount based scheme handling delayed invalidation di developed thread might remove entry pv list acquired generation number marked page see pmapdelayedinvlpage eg pmapremoveall pmapremovewrite pmap code wait maximum current thread invalidation generation number pas page generation guarantee required tlb invalidation done original implementation di allowed get rid pvhgloballock used private mutex handle sequential queueing coming leaving thread protecting bounded region problem appeared eg scalability benchmark massive parallel unmaps causing thread contend di queueing current implementation di switched lockless queue algorithm using approach proposed tl harris relying doublecas coalesce generation count queueing us ifuncs select either previous locked di current lockless implementation old amd athlons implemented instruction fall locked implementation default lockless implementation still block waiting thread turnstile avoid priorityinversion issue practically wait occur rare typical parallel buildworld generates singledigit number event patch got lot testing peter holm continuous review mark johnston worked bug livelock problem implementation additional testing mateusz guzik helped identify priority inversion bug wait project sponsored freebsd foundation contact konstantin belousov kib freebsdorg execve family syscalls replaces executing image current process file containing program text data arbitrary preinitialized segment newly activated image usually called text file freebsd mark text file mark mutually exclusive opening file write word file opened write executed text file opened write execve syscall processing kernel need lock text file vnode done satisfy vfs call protocol ensure incompatible parallel change occuring text vnode vnode locked either exclusive mode mutually incompatible lock acquisition shared mode incompatible exclusive request allows shared owner principle reason would execve need exclusive vnode lock since modify neither content metadata text vnode exception marking vnode text done using vvtext flag vvflag protected vnode lock since modify vvflag vnode lock protecting modification taken exclusive end result execve file serialized instance user run parallel build executes one job compiling invocation compiler serialized execve count open write contained struct vnode member named vwritecount protected vnode lock well since text mutually exclusive open write reused vwritecount indicate text reference negative vwritecount count number text reference vwritecount content literally protected vnode interlock normally mutators also vnode lock least shared mode way longer need acquire exclusive text vnode lock execve removing serializing point additional positive effect started account precise number text reference vnode cleared vvtext last unmap text vnode potentially allowing obscure do mapping text file executed prevented writes mapping destroyed mark mapping text explicitly vmmapentry dereference vwritecount entry unmapped project sponsored freebsd foundation contact slava shwartsman han petter selasky konstantin belousov freebsddrivers mellanoxcom driver provides support lx ex dx adapter card driver provides support ethernet adapter card whereas driver provides support infiniband adapter rdma converged ethernet roce following update done driver ethernet added support mellanox socket direct adapter allows among rest capability run pcie gen lag interface support bluefield multicore system chip added support rshim driver bluefield multicore system chip soc rshim driver provides access rshim resource bluefield target accessible external host machine current rshim version provides device file boot image push virtual console access also creates virtual network interface connect bluefield target provides access internal rshim register firmware burning diagnostics tool added mstflint port package contains burning diagnostic tool mellanox nics package contains following tool mstflint tool allows query burn firmware mstconfig tool query set nonvolatile configurable option mellanox hcas mstregdump utility dump hardware register mellanox hardware mstmcra debug utility readswrites tofrom device configuration register space mstvpd utility dump oncard vpd upstream pushed upstream mfced driver detail content update found mellanox ofed freebsd documentation page general update submitted paper eurobsdcon joint talk netflix titled kernel tl tl hardware offload paper accepted mellanox intensively working improve cooperation freebsd community part effort freebsd user invited propose feature enhancement develop enrich enduser experience addition mellanox continues identify present right solution meet customer need project sponsored mellanox technology contact rick macklem rmacklem freebsdorg newer minor version made set optional operationsfeatures majority operation related posix operation posixfadvise posixfallocate lseek support seekholeseekdata also copy operation allows byte range file copied another file locally nfs server avoiding data transfer wire direction freebsdcurrent linux compatible copyfilerange syscall invoke copy operation mount also support mac labelling requires change rpcsecgss implementation add support may happen soon implementation progressing nicely time layouterror ioadvise allocate copy operation implemented still work done copy add asynchronous support large copy result long delay rpc reply major operation implemented next seek lseek seekholeseekdata work mount hoped implementation ready freebsdcurrenthead time release testing always appreciated done downloading modified kernel svn repository building testing couple recent freebsdcurrent system anyone conversant kerberos want take challenge adding support kernel rpc patch would also greatly appreciated contact jeff roberson jeff freebsdorg contact andrew gallatin gallatin freebsdorg contact mark johnston markj freebsdorg set patch improve state numa awareness freebsd kernel developed refined work also aim generally improve performance freebsd memory management subsystem system many cpu freebsd featured number large change improve performance system nonuniform memory architecture system memory access latency given address varies depending cpu another round improvement developed soon available freebsdcurrent short description patch follow already committed freebsdcurrent freebsd terminology memory page whose content may evicted referred wired page may wired different circumstance instance kernel memory wired userland application may request range memory wired using mlock mlockall system call freebsd historically defined systemwide limit number wired page avoid deadlock may arise much system memory reclaimed satisfy new memory allocation limit applied userland wiring request kernel wiring counted limit large source kernel wiring could cause mlock failure occurs frequently large zfs arc example freebsdcurrent limit changed userland wiring counted limit kernel contains number mechanism apply backpressure kernel memory usage use global limit wiring provide much benefit fix common problem large zfs system help enable architectural improvement code manages page wiring freebsd historically maintained two separate reference counter structure describes single physical page memory counter initially quite different property time become similar work merge two counter landed freebsdcurrent uservisible effect simplifies page management code remove large amount code existed solely transform reference one type code also made use heavily contended lock simplification improved kernel scalability workload enabled scalability improvement uma slab allocator used freebsd kernel backend service virtually dynamic memory allocation performed kernel first round numa improvement added numa awareness keg layer uma allocates manages slab however frontend uma provides several layer caching object provide domainaware caching time cache would become polluted object different memory domain however caching layer modified ensure object different memory domain partitioned helping ensure consumer perform domainlocal allocation free efficiently enable global firsttouch allocation policy umamanaged object boot freebsd kernel allocates number static data structure track physical memory structure historically lived lowest available range physical memory many inhabit numa domain memory track suboptimal one try affinitize workload particular numa domain executing workload kernel frequently access page structure local memory page structure placed local memory kernel perform many remote memory access inprogress work platform creates multiple array page tracking structure one per numa domain ensures array local domain complicates task initializing kernel data structure boot substantially reduce amount crossdomain communication occurs kernel performing useful work similarly patch affinitize percpu structure developed percpu memory allocation already return cpulocal memory structure allocated boot yet properly placed respect accessing cpu memory domain project sponsored netflixupdating platformspecific feature bringing support new hardware platform contact michal stanek mst semihalfcom contact kornel duleba mindal semihalfcom contact marcin wojtas mw semihalfcom semihalf team continued working freebsd support broadcom soc series quadcore communication processor targeted networking application router gateway control plane processing na completed since last update iproc pcie root complex internal external bus fix improvement including adding quirk driver bnxt ethernet support sysdevbnxtc driver extended support variant iflib made work without io cache coherency progress crypto engine acceleration ipsec offloading todo upstreaming work work expected submittedmerged head second half project sponsored juniper network inc contact marcin wojtas mw semihalfcom contact artur rojek ar semihalfcom semihalf team initiated working freebsd support nxp soc quadcore processor integrated packet processing acceleration high speed peripheral including gb ethernet pcie sata usb wide range networking storage security industrial application already completed platform base support rampup multiuser smp operation uart sata progress todo ethernet support gpio qspi upstreaming developed feature work expected submittedmerged head project sponsored alstom groupmany project build upon freebsd incorporate component freebsd project project may interest broader freebsd community sometimes include brief update submitted project quarterly report freebsd project make representation accuracy veracity claim submission bsdcam cambridge last year discussion create template hackathon way template devsummits test idea convinced swear tricked correct word host hackathon aberdeen project think benefit lot hackathons take little organisation worst part dealing getting money attendee pay event spoke deb goodkin foundation bsdcam arranged use new eventbrite based system handle ticketing overall system made straight forward attendee register get detail requirement event expense recouped foundation much easier putting together custom system even setting using eventbrite hackathon went well read benedict kristof report follow le well attended originally expected hacker planning future hackathons remember take heed common national holiday could planned event land easter expect major geopolitical event make thing unpredictable knew brexit would something need thank university aberdeen providing location hackathon encourage run hackathon next one home town benedict reuschling hackathon aberdeen happening week easter university aberdeen although kristof provost kp joined host tom jones still consider productive week u overall theme hackathon networking u provided something towards goal pr submitting unfinished work bit piece got together night tuesday april dinner talked plan week kristof talked asiabsdcon took tutorial testing freebsd add chapter developer handbook also used first meeting synchronize latest news freebsd developer viewpoint next day met frazer noble building hackathon taking place one newer building campus nicely integrated older house city since handful sat tom office hackathon plenty room also showed u room supposed hackathon people tom gave u little tour working university always interested education organization structured room equipment provide learning overall impression good amount space equipment available could used hackathon returning decided use special tag commits would identify coming hackathon chose event general enough term used event like conference sponsored line used past company individual sponsoring certain feature created review add line committers guide kristof couple change pf chapter freebsd handbook started going created review commit made making use short feedback cycle originally thought bringing people via hangout resolved contact people via usual irc channel needed input kristof tom worked network specific stuff whereas started work creating initial draft testing chapter would occasionally start talking something return work silence needed coordinate question simply asked could continue got answer provided nice atmosphere work tackled doc pr kristof found bug pf fixed afternoon spent different location within walking distance tom made sure got good impression student taste variety food available evening tom drove u town dinner various restaurant week aberdeen lot offer city starting second day kristof would meet hotel close aberdeen beach walk along university according tom possible see dolphin weather right gulf stream provides city enough warmth winter nt bad think far north tom also gave u tour zoological department university offered beautiful garden various plant tree well museum zoological specimen offered great spot photograph unwind bit technical discussion tom also tshirts made event already rare collector item return sunday tom took u tour scottish highland car day stopped couple place take picture tom would explain lot u lived life came stonehaven fish chip takeout restaurant lot award sustainable fishing certainly highlight week even could nt stop talking freebsd networking although people would maybe produced output three u certainly productive small group also made planning coordination easier flexible tom jones done lot preparation excellent guide would encourage host another hackathon future hope next time people take trip aberdeen spend time hacking freebsd kristof provost scotland never seen aberdeen charming city enthusiastically recommend visiting arrived little benedict made hotel easily turned time join benedict tom dinner despite small perhaps hackathon remarkably productive benedict went pf documentation handbook benedict could rework improve benedict work going take credit anyway tom looked gsoc proposal tried find potential mentor two promising proposal u candidate mentor well know soon student awarded slot tom also proposed patch eliminate rfc jumbograms enthusiastic support managed look couple open pf issue pfctl interfacegroup function check name interface interface group still thought interface name always ended number assumption wrong several year fixed diocrsettflags ioctl misused copyin held lock calling could result panic previous issue actually discovered local instance syzcaller set add pf support support merged may see issue detected syzcaller soon also diocrsettflags problem extended pf test check issue pf test fail pftsetrules call fails set rule actually cause issue yet make debugging test slightly easier may catch problem saturday tom took u discover pretty bit scotland turn lot really justice tom promising career scottish tourism board computer fad blow way home passed oslo took opportunity meet lunch two eurobsdcon local organiser eurobsdcon filling fast make sure register secure place contact michael muenz mmuenz gmailcom bring security intelligence maintain freebsd port zmaltail open source project based python act sensor andor central server listens defined port protocol compare ip address domain static dynamic feed contributed community install piece software multiple firewall let send central server able detect attack compromise fast within updated port latest version constantly contact core developer also coauthor sqlmap bring new feature second project currently trying add port wazuh wazuh fork ossec already port tree compared ossec wazuh intelligent addition like full elkstack integration apps dashboard wazuh installed webserver even window desktop monitor file integrity log file kind attack active response feature let eg send api call firewall dynamically block offender wazuh offer complete elkstack use also central logging solution better security insight network project sponsored max informationstechnologie ag contact sergiu weisz gmailcom contact marcel molenaar marcel freebsdorg contact marcelo araujo araujo freebsdorg contact mihai carabas mihai freebsdorg add support using qcow bhyve using libvdsk library libvdsk used substitute regular disk operation bhyve call libvdsk turn call diskspecific handler operation use feature one install libvdskenabled bhyve version along libvdsk libvdsk repo linked new feature added extend libvdsk make easier implement new format improve readwrite performance stability add support copyonwrite future task integrate libvdsk bhyve matthew groom contact alfonso sabato siciliano alfonsosiciliano emailcom nsysctl utility sbinsysctl clone get set kernel state supporting libxo extra option nsysctl libxoopts r tagname ddfggiilmnpqtt vv h box wy e sep b bufsize f filename name value value nsysctl libxoopts r tagname ddfggilmnpqtt vv h box wy e sep b bufsize aax could use nsysctl explore sysctl mib showing value info object output explicitly indicated option printed via libxo human machine readable format moreover value parsed display structured mode eg vmphysfree support efimapheader added untested someone could help trying via machdepefimap please refer tutorial thorough description news home status home
180,Lobsters,vcs,Git & VCS,git exercises: navigate a repository,https://jvns.ca/blog/2019/08/30/git-exercises--navigate-a-repository/,git exercise navigate repository,question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution question solution,question check matz commit ruby commit id find many line code ruby time solution git checkout find name c xargs wc l question check current master branch solution git checkout master question look history file hashc last commit id changed file solution git log hashc look first line get commit id got question get diff hashc changed last year compare file master branch file commit solution git diff hashc question find recent commit changed hashc look diff commit solution git log hashc look first line get commit id got git show question repository bunch tag every ruby release get list tag solution git tag question find many file changed tag tag solution git diff stat file question find commit commit check look file briefly go back master branch solution git log grep c head git checkout l git checkout master question find commit tag corresponds solution git show question list directory gitrefstags run cat see content one file solution cat question find commit id head corresponds right solution git show head question find many commits made test directory solution git log oneline test wc question get diff libtelnetrb commits many line file changed solution git diff libtempfilerb question many commits made ruby tag solution git log oneline wc question many commits authored matz ruby creator solution git log oneline author matz wc l question recent commit included word tkutil solution git log tkutil result question check commit create new branch point commit solution git checkout git branch mybranch question run git reflog see navigating repository done far solution git reflog
181,Lobsters,vcs,Git & VCS,The Bot That Helps You Merge,https://haacked.com/archive/2019/08/26/mergedroid/,bot help merge,wrote post semantic diff merge tool reduce number merge conflict developer need resolve manually códice software company introducing mergedroid mergedroid analyze repository report ran aspnet core repository language free plan github marketplace códice feedback,developer tool understand code semantics lot potential potential make developer productive reduce friction drudgery craft difficult put tool use practice many require steep learning curve use would nice could automate benefit tool see going example back wrote post semantic diff merge tool reduce number merge conflict developer need resolve manually tool featured created códice software company retains advisor great tool still requires lot manual step quickest easiest way realize benefit semantic diff merge introducing mergedroid mergedroid come concept simple install mergedroid onto github repository monitor pull request github report pull request would result merge conflict mergedroid go work examines pull request resolve semantically push commit useful well depends project lot contributor could useful consider amount time take resolve merge conflict conflict take second minute even hour depending complexity bot could resolve conflict save lot developer hour drudge work analyze repository códice published repository analyzer tell effective mergedroid would repository enter url public repository login github account try private repository analyzes sends report report ran aspnet core repository break section first part look full merges automated nearly merges conflict could resolved automatically using back envelope calculation estimate mergedroid would save hour human developer time next part report look conflict file level sometimes mergedroid automatically resolve every conflict merge resolve every conflict resolve merge could theory resolve many conflict report show many file level conflict could resolve language today support c visual basicnet java c c future may add language prof popular free plan today mergedroid offer free plan limited individual team five people working open source nonprofit repository plan offer plan people try work kink like try one repository go github marketplace install give códice feedback
182,Lobsters,vcs,Git & VCS,Fossil Versus Git,https://www.fossil-scm.org/index.html/doc/trunk/www/fossil-v-git.wiki,fossil versus git,nt stress git distributed version control system move versioncontrolled file content difference fossil git rbac popular database world featureful wiki ticketing bug tracking embedded documentation technical note web forum skinnable ui finegrained rolebased access control system github fossil rm fossil update fossil revert purpose easier git cgi script git selfhosting repository efficient chroot jail straightforward build install many builtin feature gitlab much resource hungry hosted small vps durable directed acyclic graph merkle tree block chain packfiles sqlite heavilytested durable groveling commit log thought design fossil dvcs detached head state huge number git user timeline fossil timeline closest equivalent github special checkin name builtin status report portable portable sqlite us javascript necessary tcl firstparty thirdparty msys posix portability environment gitlab nt portable window linux v sqlite linus torvalds linux kernel richard hipp sqlite development organization cathedral bazaar fo hierarchy lieutenant dictator lieutenant user loosely support flat organization pull request driveby contribution bundle rebasing mechanism fossil purpose autosync mode jim mccarthy dynamic software development beware guy room private branch exist fossil feedback loop size control theory ooda loop scale mloc sloccount automotive air impact wrench accepting contribution driveby contribution principle least astonishment individual branch v entire change history one v many checkout per repository open gitworktree several known problem spa browserify node sas typescript uglification done v actually amend command shunning mechanism rebase considered harmful test commit golden rule rebasing fossil merge branching document hash algorithm v v shattered attack full backwards compatibility first plan older algorithm competing based plan git golden rule rebasing shamble attack aside digression many thing lost exporting fossil repository github separate fossil repo main fossil selfhosting repo download page work althttpd zos reference tcl tk project moved cv fossil file,nt stress feature set fossil git overlap many way distributed version control system store tree checkin object local repository clone system local clone start full copy remote parent new content get added local clone later optionally pushed remote change remote pulled local clone system offer diffing patching branching merging cherrypicking bisecting private branch stash etc fossil inbound outbound git conversion feature start using one dvcs later decide like better easily move versioncontrolled file document set similarity interoperability aside focus important difference two especially impact user experience keep mind reading fossil website though try fair information might biased favor fossil spend time using fossil git ask around second opinion people used fossil git difference fossil git difference fossil git summarized following table description text follows gitfossilmore file versioning vcs ticket wiki doc note forum ui rbac sprawling inefficient selfcontained efficient oneoff custom pileoffiles data store popular database world run natively posix system native common desktop server platform bazaarstyle development cathedralstyle development designed linux kernel development designed sqlite development many contributor select contributor focus individual branch focus entire tree change one checkout per repository many checkout per repository remembers done remembers actually commit first test first featureful git provides file versioning service whereas fossil add integrated wiki ticketing bug tracking embedded documentation technical note web forum within single nicelydesigned skinnable web ui protected finegrained rolebased access control system additional capability available git addons fossil integrated design one way describe fossil githubinabox fossil operation local repo clone checkout directory single command example fossil let say fossil sync laptop prior taking network hosting repos sync private repos company network plus public internethosted repos use whether going working lunch transoceanic airplane trip one command get sync work several fossil subcommands fossil change get list file forgot commit prior end working day across repos whenever fossil told modify local checkout destructive way fossil rm fossil update fossil revert etc fossil remembers prior state able return checkout directory state fossil undo command undo commit fossil purpose long change remains confined local checkout directory fossil make undo easier git developer choose selfhost project rather using service github fossil much easier set since standalone fossil executable together cgi script suffice instantiate fullfeatured developer website accomplish using git requires locating installing configuring integrating managing wide assortment separate tool standing developer website using fossil done minute whereas using git requires hour day fossil small complete selfcontained clone git selfhosting repository get git source code clone fossil selfhosting repository get entire fossil website source code documentation ticket history mean get copy article historical version plus public content site efficient git actually collection many small tool one small part job recombined expert perform powerful operation git lot complexity many dependency people end installing via kind package manager simply creation complicated binary package best delegated people skilled creation normal git user expected build git source install fossil single selfcontained standalone executable default depends common platform library platform allows static linking day even get single executable external dependency notably deliver official window build fossil way zip file contains fossilexe selfcontained fossil executable setupexe style installer whole enchilada typical fossil executable mib counting system library share common git openssl zlib factor discussion property allow fossil easily run inside minimally configured chroot jail window memory stick raspberry pi tiny sd card etc install fossil one merely put executable somewhere path fossil straightforward build install many fossil user fact build install trunk version get new feature formal release contrast basic installation git take mib debian across file counting content usrsharedoc usrsharelocale need deploy platform count facility like posix shell perl interpreter tcltk platform needed fully use git part base platform full footprint git installation extends like mib thousand file complicates several common scenario git window chrooted git server docker image say git closely adheres unix philosophy summarized many small tool loosely joined many example successful unix software violates principle good effect apache python zfs infer absolute principle good software design sometimes many feature tightlycoupled work better actually matter effectiveness efficiency believe fossil achieves size comparison nt applestoapples anyway compared size fossil many builtin feature fairly minimal git installation must add lot thirdparty software git give fossilequivalent feature set consider gitlab thirdparty extension git wrapping many feature making roughly fossilequivalent though much resource hungry hence costly run equivalent fossil setup gitlab basic requirement easy accept dedicating local rack server blade since minimum requirement le description smallest thing could call server day go host cloud expect pay much comfortably host gitlab difference largely due basic technology choice ruby postgresql v c sqlite fossil project hosted small vps received many report fossil forum people successfully hosting fossil service barebones vps host spare raspberry pi board small host durable baseline data structure fossil git modulo formatting detail system manage directed acyclic graph dag merkle tree block chain structured checkin object checkins identified cryptographic hash checkin content checkin refers parent via hash difference git store object individual file git folder compressed bespoke packfiles whereas fossil store object sqlite database file using hybrid nosqlrelational data model checkin history git data storage system adhoc pileoffiles keyvalue database whereas fossil us proven heavilytested generalpurpose durable sql database difference implementation detail important practical consequence git one easily locate ancestor particular checkin following pointer embedded checkin object difficult go direction locate descendant checkin difficult fact neither native git github provide capability short groveling commit log git looking historical checkin ask came next child checkin fossil hand par essential information checkins parent child committers comment file changed etc relational database easily queried using concise sql statement find ancestor descendant checkin hybrid data model mentioned fossil manages checkin data nosql block chain structured data store backed set relational lookup table quick indexing artifact store see thought design fossil dvcs detail leaf checkins git lack ref become detached making difficult locate subject garbage collection detached head state problem caused untold grief huge number git user fossil detached head simply impossible always find way back block chain using one relational index automatically manages design difference show several place within tool fossil timeline generally detailed yet clear available git frontends contrast fossil timeline closest equivalent github inverse cryptic notation git meaning parent head fossil simply call prev next special checkin name fossil fossil many builtin status report help maintain situational awareness aid comprehension avoid error difference due part fossil start year later git able learn key design mistake portable fossil largely written iso c almost purely conforming original standard make little use knowingly make use fossil call posix window apis necessary portable ask given iso c nt define facility fossil need thing network socket file locking etc certainly wellknown platform fossil nt ported yet likely due lack interest rather inherent difficulty port believe stringent limit portability assumes least cpu several meg flataddressed fossil nt quite portable sqlite close half c code fossil actually embedded copy current version sqlite much fossilspecific set sqlite aside sql code calling sqlite number line sql code fossil nt large percentage since sql expressive declarative language outsized contribution fossil uservisible functionality fossil nt entirely c sql code web ui us javascript necessary serverside ui scripting us custom minimal tcl dialect called embedded fossil fossil build system test suite largely based quite portable half git code posix c third posix shell code largely socalled git window distribution firstparty thirdparty actually msys posix portability environment bundled git stuff would painful port git natively window git foreign citizen window speaking fossil lean toward posix norm given choice lfonly line ending treated firstclass citizen crlf example window build fossil truly native thirdparty extension git tend follow pattern gitlab nt portable window example matter gitlab nt even officially supported macos bsds uncommon linux many user regularly build run fossil system linux v sqlite fossil git promote different development style one specifically designed support creator main software development project linus torvalds designed git support development linux kernel richard hipp designed fossil support development sqlite project must rank high objective list important fo project yet two project almost entirely unlike one another natural dvcses created support project also differ many way following section explain four key difference linux sqlite software development project dictated design dvcs lowfriction usage path deciding two dvcses ask project like linux like sqlite development organization eric raymond seminal essayturnedbook cathedral bazaar detail two major development organization style found fo project happens linux sqlite fall opposite side dichotomy differing development organization style dictate different design lowfriction usage path tool created support project git promotes linux kernel bazaar development style looselyassociated mass developer contribute work hierarchy lieutenant manage clean contribution consideration linus torvalds power cherrypick individual contribution version linux kernel git allows anonymous developer rebase push specific locallynamed private branch git repo clone often nt really clone may arbitrary number difference relative repository originally cloned git encourages siloed development select work developer local repository may remain private indefinitely exactly one want bazaarstyle development fossil normal mode operation differs every one point specific designedin goal promoting sqlite cathedral development model personal engagement sqlite developer know name work together daily project trust hierarchy sqlite developer check change local repository immediately automatically synchronized central repository dictator lieutenant hierarchy linux kernel contribution richard hipp rarely override decision made trusted commit access repository fossil allows give user power repository fossil loosely support enforcement development organization social power hierarchy fossil great fit flat organization easy driveby contribution git pull request offer lowfriction path accepting driveby contribution fossil closest equivalent unique bundle feature requires higher engagement firing difference come directly initial designed purpose tool sqlite project nt accept outside contribution previouslyunknown developer linux kernel rebasing local repo clone syncs change parent change sent exactly committed locally rebasing mechanism fossil purpose sync push explicit push uncommon fossilbased project default rely autosync mode instead commit syncs immediately parent repository mode turn temporarily needed working offline fossil still truly distributed version control system starting default assume rarely communication parent repo merely reflection modern alwaysconnected computing environment conscious decision direct support sqlite cathedral development model nt want developer going dark showing week later massive bolus change u integrate jim mccarthy put well book software project management dynamic software development beware guy room branch name sync unlike git branch name fossil purely local label sync along everything else everyone see set branch name fossil design choice direct reflection linux v sqlite project outlook sqlite developer collaborate closely single coherent project whereas linux developer go tangent occasionally sync change private branch rare private branch exist fossil normally used handle rare exception case whereas many git project part straightline development process identical clone fossil autosync system try keep local clone identical repository cloned git encourages siloed development fossil fight fossil place lot emphasis synchronizing everyone work reporting state project work developer everyone especially project leader maintain better mental picture happening leading better situational awareness think difference term feedback loop size know mathematics control theory directly affect speed system safely make change larger feedback loop slower whole system must run order avoid loss control concept show context ooda loop concept originally developed explain success u sabre fighter aircraft onpaper superior later applied context business process management committing change private branch order delay public push parent repo increase size collaborator control loop either causing slow work order safely react work overcorrect response change dvcs used opposite style work lowfriction path scale linux kernel far bigger developer community sqlite thousand thousand contributor linux know others name thousand responsible producing roughly code sqlite mloc v mloc according sloccount linux kernel development process already uncommonly large back git designed specifically support consequence large set developer working large code base code sqlite come four programmer lead developer alone sqlite developer know well interact daily fossil designed development model think ask whether linus torvalds scale software configuration management problem richard hipp scale problem choosing dvcs automotive air impact wrench running rpm driving socketcap bolt cm best way hang picture living room wall accepting contribution writing git received many commits fossil resulting many line source code line count excludes test intree thirdparty dependency exclude default gui since integral fossil count size gitk obvious git bigger part firstmover advantage resulted larger user community result contribution reason believe relevant difference also play fall linux v sqlite framing licensing community structure react driveby contribution brief harder get new feature fossil git larger feature set necessarily good thing git command line interface famously arcane master arcane able wizardly thing studying art deeply year strike u good thing case use tool primary point user work almost one us dvcs sake people get paid specifically order drive dvcs use dvcses tool support effort necessarily want dvcs feature want dvcs easily internalized behavior thoroughly master despite spending small fraction working time thinking dvcs want pick tool use quickly set aside order get back actual job quickly possible professional software developer particular prone focusing feature set size choosing tool sometimes highly important consideration spend day every day favorite text editor time spend learning arcanum favorite programming language wellspent skill tool direct productivity driver turn directly drive much money developer make much idle time afford take amount thing professional software developer want ask question get paid mastering arcane feature dvcs unless good answer probably want choosing dvcs based many arcane feature argument similar type user hobbyist much time want spend mastering dvcs instead hobby supported use dvcs minimal set feature required achieve purpose drive selection dvcs level beyond feature slow u learning tool since must plow documentation feature likely ever use number feature grows point people normal motivation spend time master tool becomes le productive use core developer fossil project achieve balance feature set size ease use carefully choosing user give commit bit choosy contributed feature branch merge trunk say lot feature proposal end result fossil closely adheres principle least astonishment git individual branch v entire change history fossil git store history directed acyclic graph dag change git tends focus individual branch dag whereas fossil put emphasis entire dag example default behavior git synchronize single branch whereas fossil sync option sync entire dag git command github gitlab tend show single branch time whereas fossil usually show parallel branch git command like rebase help keep relevant change single branch whereas fossil encourages style many concurrent branch constantly springing existence undergoing active development parallel day week merging back main line disappearing difference emphasis arises different purpose two system git focus individual branch exactly want highlydistributed bazaarstyle project linux linus torvalds want see every checkin every contributor linux extreme visibility scale well fossil written cathedralstyle sqlite project handful active committers seeing change branch help keep whole team uptodate everybody else resulting tightly focused cohesive implementation one v many checkout per repository git commingles repository data initial checkout repository default mode operation git stick single workrepo tree even shortsighted way working fossil nt work way fossil repository sqlite database file normally stored outside working checkout directory open fossil repository number time number working directory common usage pattern one working directory per active working branch switching branch done cd command rather checking branch successively single working directory fossil allow switch branch within working checkout directory also often done simply inherent penalty either choice fossil git standard advice use switchinplace workflow fossil disturbance switching branch small use multiple checkout longlived working branch different enough switching place disruptive use git fossil style either manually symlinking git directory one working directory another use gitworktree feature nevertheless git default tie working directory repository mean standard method working git repo one working directory git tutorial teach style people learn use git relatively people use git multiple working directory per repository several known problem way working problem nt happen fossil clear separation repository working directory distinction matter switching branch inside single working directory loses local context switch instance software project runnable program must built source file invalidate build object switch artificially increasing time required switch version obviously affect software written staticallycompiled programming language c java haskell even affect program written dynamic language like javascript typical spa build process involves several pass browserify convert node package run web browser sas cs translation transpilation typescript javascript uglification etc processing work done given input file given working directory redo work switch version file differ version nt change often save substantial time switching branch cd rather swapping version inplace within working checkout directory another example might active longrunning test grinding away working directory get call customer requiring switch stable branch answer question term version customer running nt want stop test order switch lone working directory stable branch disk space cheap several working directory local state make switching version cheap fast plus cd faster type git checkout fossil update done v actually git put lot emphasis maintaining clean checkin history extraneous experimental branch individual developer often never make main repository branch often rebased pushed make appear development linear git strives record development project looked like mistake fossil contrast put emphasis recording exactly happened including messy error deadends experimental branch forth one might argue make history fossil project messy another point view make history accurate actual practice superior reporting tool available fossil mean added mess factor like git fossil amend command modifying prior commits unlike git work replacing data repository adding correction record repository affect later fossil operation present corrected data old information still repository overridden amendment point forward extreme situation fossil add shunning mechanism strict limitation prevent global history rewrite one commentator characterized git recording history according victor whereas fossil record history actually happened go detail topic separate article rebase considered harmful test commit one thing fall git default separation commit push several git subcommands jump straight commit step change could possibly tested fossil contrast make equivalent change local working checkout requiring separate checkin step commit change design difference fall naturally fossil defaultenabled autosync feature prime example git rebasing change happens local repository immediately successful even though nt tested change yet possible argue design tool like git nt automatically push change parent still test change pushing local change parent repo meantime made durable change local git repository blockchain must something drastic like git reset hard revert rebase cause problem push rebased local repo parent without testing first committed error public branch effectively violation golden rule rebasing lesser example git merge cherrypick revert command apply work one branch onto another work immediately without giving opportunity test change first locally unless give nocommit option fossil sensibly work way defaultenabled autosync feature instead jumping straight commit step fossil applies proposed merge local working directory requiring separate checkin step change committed repository blockchain give chance test change first either manually running software automatic test ideally another difference fossil requires explicit commit merge make give explicit commit message merge whereas git writes commit message default unless give optional edit flag override nt look difference workaround fossil autosync instead testfirst philosophical difference every commit pushed parent repo default encourages working style every commit tested first think inherently good thing incidentally good example git messy command design three command git merge hash git cherrypick hash git revert hash command fossil fossil merge hash fossil merge cherrypick hash fossil merge backout hash think function apply work done one branch another change command much work get applied one checkin whole branch merge direction sort thing mean point fossil command interface simpler git fewer concept keep track mental model fossil internal operation fossil implementation feature also simpler describe brief online help fossil merge currently line long want add line branching document equivalent documentation git aggregation man page three command line much mutually redundant eg git edit nocommit option get described three time time differently fossil documentation concise give nice split brief online help full online documentation hash algorithm v v fossil started using hash identify checkins git changed early news shattered attack broke demonstrating collision practical create two week later creator fossil delivered new release allowing clean migration full backwards compatibility old based repository october last major binary package repos offering fossil upgraded fossil switched default hash mode fossil forward conversion fully automatic solves shattered problem prevent reoccurrence similar problem foreseeable future meanwhile git community took august publish first plan solving problem moving variant older algorithm writing february plan nt implemented far author aware competing based plan requires complete repository conversion breaking public hash repo one way characterize massive upheaval git term wholeproject rebase violates git golden rule rebasing regardless eventual implementation detail fully expect git move eventually change take year percolate community almost three year fossil solved problem shamble attack published weakening case continuing use practical impact attack like shattered shamble git fossil blockchains nt clear want repository moved stronger hash algorithm someone figure make use weakness old one fossil covered year solution almost universally deployed aside digression many thing lost making git mirror fossil repo due limitation git relative fossil github add missing feature stock git part git proper exporting fossil repository github still include fossil ticket become github issue example fossilscmorg web site actually hosted several part strictly true everything selfhosting fossil project repo web forum hosted separate fossil repo main fossil selfhosting repo administration reason download page content nt normally synchronized fossil clone command unless add u option see download page work detail may also purely static element web site served via richard hipp lightweight web server althttpd configured front end fossil running cgi mode site estimate based pricing digital ocean fossil run fine smallest instance offer u closest match gitlab minimum requirement among digital ocean offering currently cost mean give waiting fossil ported remain hopeful someone may eventually port zos tcl around fossil may ask richard hipp longtime tcl user contributor sqlite started embedded database tcl specifically reference created fossil manage development sqlite natural use tclbased tool scripting build system test system etc came full circle tcl tk project moved cv fossil minority piece git core software suite written language primarily perl python tcl eg gitsendmail gitk respectively although interpreter quite portable nt installed default everywhere platform ca nt count window also bsds many nonlinux platform expands dependency footprint git considerably current git window distribution mib current fossilexe zip file window mib fossil much smaller despite using roughly similar amount highlevel scripting code interpreter compact built fossil fossil git support patch file common way allow driveby contribution lossy contribution path system unlike git pr fossil bundle patch file collapse multiple checkins together nt include checkin comment encode change made individual file content layer lose branching decision tag change file renames using patch file
183,Lobsters,vcs,Git & VCS,some gerc notes,https://flak.tedunangst.com/post/some-gerc-notes,gerc note,background internals diff patience diffing garbage use performance status fin,gerc good enough revision control partial reimplementation mercurial got bitbucket seems source control back news scattered note gerc development complete recommended use expect muchbackgroundi wrote humungus web frontend hg project hosting like available option easiest solution time run hg communicate via pipe drawback unstructured text protocol fragile parse frequently become desynced commentary linked post also hg slow running daemon mode fast eitheri initially started pygments code highlighting slow replacing simpler le featureful native go code faster maybe mercurial wellinternalsthe mercurial repo format quite nice conceptually main file format revlog indexed append log file course revlog format victim reality learning experience number repos created various stage mercurial development without knowing certain thing changed made development gerc frustratinginitially revlog always contained diff previous entry recreate particular version start last complete version apply diffs sequence great noticed corruption ah ha observed apply every diff follow chain parent revision pointer many case linear chain occasionally different noticed corruption repo previously workedi ended spending entirely much time flipping code around back forth trying test thing way noticing flag file header indicates method use approach correct one work given filethe right thing would study file format closely early easy success led believe simple matter tweak thereafter frustrating late night sure work need try one thing ad nauseum came together revlog format really quite nice work know going ondiffthe internal diff format binary delta human like readable text diffs implemented patience diffing easy sometimes mean gerc hg show different diffs usually fine sometimes patience better garbagei got play go profiling tool part runtime bad initially allocating far memory necessary example reconstructing file start original applies series delta create new file applying many change sequnece would throw away old file swapping buffer eliminates allocationin general found total number allocation best correlation performance figure allocating memory stop observe big winsalso found whatever reason least openbsd using multiple thread nominally single threaded program slow got speedup setting gomaxprocs appeared mostly time garbage collector seemed contending itselfusereplacing piped call hg library call gerc made humungus dramatically simpler lot easier iterate array structsthere also command line shell mimic hg commandperformanceconsistently faster hg chg gerc diff working directory close instantcarbon projhonk time chg log p wc real user system carbon projhonk time gerc log p wc real user system carbon projhonk time chg log p wc real user system carbon projhonk time gerc log p wc real user systemstatusgerc nowhere close done poke time time unlikely ever really come close hg replacementfinmercurial dying riding ship way bottom
184,Lobsters,vcs,Git & VCS,Sunsetting Mercurial support in Bitbucket,https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket,sunsetting mercurial support bitbucket,million registered user mercurial feature repository officially deprecated july timeline may affect team february new extended july focusing git stack overflow developer survey migrate export hgfastexport hggit mercurial plugin dedicated community thread number free paid mercurial hosting service community thread git tutorial,update july today mercurial repository snippet wikis turn readonly mode july longer accessible version control software market evolved lot since bitbucket began launched centralized version control norm supported mercurial repos git adoption grown year become default system helping team size work faster become distributedas surpass million registered user platform point growth conducting deeper evaluation market best support user going forward much consideration decided remove mercurial support bitbucket cloud api mercurial feature repository officially deprecated july learn decision important timeline get migration resource support timeline may affect team key date sunset mercurial functionality february user longer able create new mercurial repository extended july user able use mercurial feature hg repos wikis snippet readonly mode focusing git easy decision mercurial always special place bitbucket history devops adoption skyrocketed last decade customer adopting new way working exponential rate time bitbucket steadily grown version control management tool place manage entire software development lifecycle always work done year concentrate building deeper integration enhance automation collaboration improvement make even easier safer plan code test deploy within bitbucket building quality feature requires intense focus supporting two version control system mean splitting focus doubling shipping time technical overhead git popularly used tool mercurial run risk overlooked issue scale according stack overflow developer survey almost developer use git mercurial least popular version control system developer adoption fact mercurial usage bitbucket steadily declining percentage new bitbucket user choosing mercurial fallen le deprecation enable u focus building best possible experience user migrate export recommend team migrate existing mercurial repos git various git conversion tool market including hgfastexport hggit mercurial plugin happy support migration find discussion available option dedicated community thread prefer continue using mercurial system number free paid mercurial hosting service realize onesizefitsall solution created following resource best equip knowledge tool seamless transition community thread discus conversion tool migration tip offer troubleshooting help git tutorial cover anywhere basic creating pull request rebasing git hook want thank loyal user grown u year look forward new focus roadmap introducing exciting new feature
185,Lobsters,vcs,Git & VCS,Highlights from Git 2.23,https://github.blog/2019-08-16-highlights-from-git-2-23/,highlight git,experimental alternative git checkout blog post tidbit source source source tutorial learn,open source git project released git feature bug fix contributor new look exciting feature change introduced since git experimental alternative git checkout git brings new pair experimental command suite existing one git switch git restore two meant eventually provide better interface wellknown git checkout new command intend clear separation neatly divvying many responsibility git checkout show tried list possible git checkout might visited documentation figure might seen phrase switch branch restore working tree file scratched head huh specify exactly git checkout worth familiar gitspecific bit working copy index checked branch someone say working copy referring file repository appear hard drive hand someone say index lessfrequent staging area cache mean git added would committed run git commit finally someone say checked branch referring branch tried match content working copy turn git checkout quite lot use change branch git checkout branch supply branch create new branch git checkout branch newbranch want switch branch worry git checkout change individual file write git checkout filename reset filename working copy equivalent index want take change index specify alternative source git checkout treeish filename new command contrast aim clearly separate responsibility git checkout two narrower category operation change branch operation change file end git switch take care former git restore latter purpose let take look one detail simplest invocation git switch look like git switch myfeature switched branch myfeature branch date originmyfeature mode think git switch acting like optionless invocation git checkout want replace git checkout branch git checkout b short write git switch c mynewfeature switched new branch mynewfeature c short create replace muscle memory git checkout b start designated commit instead branching currently checkedout commit git switch c mynewfeature switched new branch mynewfeature handful example documentation including well example set tracking branch orphaned branch git restore hand make much easier figure exactly file change change change instead remembering tangled semantics git checkout git restore provides two option specify restored change go pas worktree pas anything change go working copy pas staged go index finally pas two changed content git restore also make easier understand content restoring come optional source option source specified content restored staging area otherwise restored specific tree note one difference git checkout git restore restore default nooverlay delete tracked file present source tree see discussion overlay blog post example want file mainc content working copy index three commits ago could write git restore source staged worktree mainc change would applied exactly lot example new documentation git restore keep mind command marked experimental might make another appearance future blog post change next release read new switch documentation restore documentation source tidbit ever wanted write script around list branch repository might wrapped invocation git branch git branch pattern list script need list tag want know commit branch point might turned git foreachref run without argument git foreachref provides list reference along commits point like git foreachref commit refsheadsmaster commit refsheadsmyfeature commit refsremotesoriginhead git foreachref also take multiple pattern show union run git foreachref dropped duplicate behind scene git foreachref try figure query determine list potentiallymatching result remove result irrelevant recently git foreachref know turn multiple pattern single query resorted default empty query manually sorted result git made significantly faster source conjunction git use reference alternate part connectivity check happens part cloning fetching pushing connectivity check git receives repository object cloning make sure object needed accept fetch push word form connected graph cloning repository specify alternate clone already set knownconnected object named reference alternate git make possible treat knownconnected object stopping point connectivity check mean look fewer object make quicker configure reference advertised use previous tidbit advertise reference greatly reduced cost result git making possible efficiently enumerate list reference another repository valid stopping point connectivity check repository source time need bring branch uptodate another run git merge git figure right way merge branch upstream go day time git ask help may find editing conflict marker resolving merge conflict manually ever situation wanted get might rungit merge abort abort merge repository restored previous state merge started changed something important otherwise want keep state unresolved merge still aborting merging process maybe made important change rather apply commit merging maybe want commit conflict asis without completing merge successfully git use new quit option git merge act like abort declares merge aborted unsuccessfully unlike abort leaf state working copy index untouched source merges git cherrypicker feel left git cherrypick learned new trick latest update regular user ofgit cherrypick quick background material git cherrypick applies change one commits top current branch applying single commit always abort cherrypick applying multiple commits application fails middle list could rungit reset git cherrypick continue git offer convenient memorable option git cherrypick skip ever presented conflict middle cherrypick sequence want skip change move easier ever source user git multipackindex remember mention couple release ago luck git multipackindex learned expire repack latest update note helpful familiar content multipackindex midx file continuing high level detail blog post primer internals midx file aggregation multiple packfiles contains collection packfiles object within well helpful bookkeeping information object belong packfile enough detail new trick repack subcommand break object contained midx several smaller packfiles recreates midx based new pack done want clean midx expire subcommand cause midx machinery clean reference packfiles object listed midx source interested performance detail commit graph may recall one earlier post updated exceptionally large repository exceptionally highly trafficked commit graph speed history traversal information case great reading repository big rewriting commit graph receive new object expensive git answer commit graph chain latest version git tell git write commit graph chain allows quick append operation take place full graph rewrite chain become long tell git merge git even manage chain span multiple repository useful repository us alternate expect indepth overview soon derrick stolee primary author behind commit graph source may used git grep search text git project may used git diff view active change two common display content repository support show surrounding function context p short showfunction w short functioncontext respectively git builtin rule determining valid function signature encloses valid function context extended cover language octave rust source source one last large repository change might noticed branch track remote running git status sometimes tell branch behind ahead remote branch track large repository computing value timeconsuming thus turned since git specify default setting configuration variable statusaheadbehind source git longsupported feature mailmap useful trying map multiple nameemail identity one example change email want take contribution without need rewrite history add mailmap entry git display old contribution new email however git shortlog automatically rewriting git log discrepancy resolved git log automatically apply mailmap rewriting making consistent behavior git shortlog source hoping see feature list ended able find good news new tutorial added provides definitive guide get started writing first contribution upstream git git opensource project relies opensource volunteer adding change bug fix new feature project getting started daunting task compile git style guideline discus change get help need answered new tutorial describes process landing first change walking firstperson perspective writing new command git psuh note typo curious figure mean implement check tutorial ever wanted write new command want see name release note certainly worth read source learn sample change latest version read release note view release note previous version git repository
186,Lobsters,vcs,Git & VCS,Shared Git repository over ssh for multiple users,https://raymii.org/s/tutorials/Shared_Git_repository_via_ssh_for_multiple_users.html,shared git repository ssh multiple user,like article consider sponsoring trying digital ocean vps link get credit day referral link folder permission repository script hook bash development git repository shared ssh tutorial,tutorial show set shared git repo multiple account ssh ssh gitolite software usefull small team people nt often need access repo nt want something like github bitbucket use existing infrastructure like article consider sponsoring trying digital ocean vps link get credit day referral link used sysadmin team script scattered folder permission first set new group user repository use groupadd command find easier edit etcgroup add line line gitusers note user add account system adduser useruseradd user create folder house repo mkdir p change group permission folder chgrp gitusers chmod gws repository create repository navigate folder initialize repository cd vargitrepository git init bare sharedgroup clone pull push commit repo like normal git clone gitssh script simple script make easier assuming group gitusers root path vargit binbash gitgroup gitusers repopath vargit z echo must specify repo name echo reponame exit fi mkdir path chgrp gitgroup path chmod path pushd path git init bare sharedgroup popd echo created repo echo clone url gitssh hostname f path need trigger jenkins build commit add following postreceive hook tag bash development git repository shared ssh tutorial
187,Lobsters,vcs,Git & VCS,Github issue closing times,https://leaverou.github.io/issue-closing/,github issue closing time,,median duration median timetoclose average duration average timetoclose slowest duration max timetoclose fastest duration min timetoclose based count issue recently updated issue
188,Lobsters,vcs,Git & VCS,Why you should stop using Git rebase,https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1,stop using git rebase,stop using git rebase,stop using git rebaseafter using git several year found gradually using advanced git command part daily workflow soon discovered git rebase quickly incorporated daily workflow familiar rebasing know powerful tool tempting use time however soon discovered rebasing present challenge obvious first start presenting quickly recap difference merging rebasinglet first consider basic example want integrate feature branch master merging create new commit g represents merge two branch commit graph clearly show happened see contour train track graph familiar larger gitreposexample mergingalternatively could rebase merging commits removed feature branch reset master commits reapplied top feature diffs reapplied commits usually identical original counterpart different parent commits hence different keysexample rebasingwe changed base commit feature b c literally rebasing merging feature masteris fastforward merge commits feature direct descendant masterexample fastforward mergingcompared merge approach resulting history linear divergent branch improved readability reason used prefer rebasing branch merging expect case developer wellhowever approach challenge may obviousconsider case dependency still use feature removed master featureis rebased onto master first reapplied commit break build long merge conflict rebase process continue uninterrupted error first commit remain present subsequent commits resulting chain broken commitsthis error discovered rebase process finished usually fixed applying new bugfix commit g topexample failed rebasingif get conflict rebasing however git pause conflicting commit allowing fix conflict proceeding solving conflict middle rebasing long chain commits often confusing hard get right another source potential errorsintroducing error extra problematic happens rebasing way new error introduced rewrite history may disguise genuine bug introduced history first written particular make harder use git bisect arguably powerful debugging tool git toolbox example consider following feature branch let say introduced bug towards end brancha branch bug introduced towards endyou may discover bug week branch merged master find commit introduced bug might search ten hundred commits process automated writing script test presence bug running automatically git bisect using command git bisect run yourtestsh bisect perform bisection search history identifying commit introduced bug example shown succeeds finding first faulty commit since broken commits contain actual bug looking forexample successfull git bisecton hand introduced additional broken commits rebasing e bisect run trouble case hope git identifies commit f bad one erroneously identifies dinstead since contains error break testexample failed git bisectthis problem greater may seem firstwhy use git important tool tracking source bug code git safety net rebasing give le priority favour desire achieve linear historya back bisect several hundred commits track bug system faulty commit located middle long chain commits compile due faulty rebase colleague performed unneccessary totally avoidable error resulted spending nearly day extra tracking commitso avoid chain broken commits rebasing one approach could let rebase process finish test code identify bug go back history fix bug introduced end could use interactive rebasinganother approach would git pause every step rebase process test bug fix immediately proceedingthis cumbersome errorprone process reason would achieve linear history simpler better way git merge simple onestep process conflict resolved single commit resulting merge commit clearly mark integration point branch history depicts actually happened happenedthe importance keeping history true underestimated rebasing lying team pretend commits written today fact written yesterday based another commit taken commits original context disguising actually happened sure code build sure commit message still make sense may believe cleaning clarifying history result may well oppositeit impossible say error challenge future brings codebase however certain true history useful rewritten fake one
189,Lobsters,vcs,Git & VCS,Patch workflow with mutt,http://kroah.com/log/blog/2019/08/14/patch-workflow-with-mutt-2019,patch workflow mutt,mutt aerc drew devault basic overview apply patch stable kernel tree quite year ago basic email reading usb stable mbsync offlineimap luis development patch review apply stable patch review apply quilt email asciinema bonus sending email command line summary need email client,given main development workflow kernel maintainer email spend lot time email client past decade used mutt every look around see anything else might work better one project look promising aerc started drew devault terminalbased email client written go relies lot go library handle lot grungy work dealing imap client email parsing fun thing come freeflow text parsing email require aerc usable state yet drew asked could document exactly use email client daytoday workflow see need done aerc consider switching note criticism mutt love tool spend time using userspace program anyone know email client suck mutt suck le everything else literally motto basic overview apply patch stable kernel tree quite year ago workflow evolved time instead writing private email drew figured time post something showing others sausage really made anyway email workflow divided different primary thing basic email reading management sorting reviewing new development patch applying source repository reviewing potential stable kernel patch applying source repository given stable kernel patch need already linus kernel tree first workflow work stable tree much different new patch workflow basic email reading email end either two inboxes local machine one everything sent directly either cc well number mailing list ensure read message sent maintainer subsystem like usb stable second inbox consists mailing list read message review needed referenced need look something mailing list big linuxkernel mailing list ensure local copy search offline due traveling well minor development mailing list like keep copy locally like linuxpci linuxfsdevel smaller vger list get maildir folder synced mail server using mbsync work really well much faster using offlineimap used many many year end really slow live continent mail server luis recent post switching mbsync finally pushed take time configure properly glad let ignore list inbox able read email client pointing simple alias alias muttlmutt f maillinux allows type muttl command line instantly bring spend time main mailbox local maildir get synced needed mailinbox simple mutt command line brings yes everything end one place handling mail prune relentlessly everything end one state need next read yet read left inbox need something soon read patch something everything require response already responded get deleted main inbox point time saved archive case need refer back like mailing list message last state make save message one two local maildirs todo stable everything todo new patch need review comment apply development tree everything stable something patch need get applied stable kernel tree side note script run frequently email patch need applied stable kernel tree hit linus tree way live email client everything need applied stable release one place sweep main inbox ever hour sort thing either quickly responding deleting archiving saving todo stable directory achieve constant inbox zero email well main workflow need easy way filter inbox pattern see one type message time read email write email respond existing email use vim editor hand key binding burned delete email save email one two mboxes press keystroke bulk deletearchivesave email task bet almost everyone need time tool like aerc able easily note filtering everything come one inbox easier filter mbox based thing process everything example want read message sent linuxusb mailing list right see anything else mutt press l limit brings prompt filter apply mbox ability limit message one type thing really powerful use many different way within mutt example viewing message sent linuxusb mailing list saving read complex work quickly well mailbox really really big example opening list mbox filtering linuxapi mailing list message read yet really fast mutt cache lot information mailbox require reading message time start generate internal structure message want save todo directory two keystroke sequence save message automatically binding set year ago jump specific mbox copy message location see using mutt exactly obvious binding part default configuration everyone end creating custom key binding whatever want take good amount time figure set thing want learning curve complex thing easily much like editor emacs vim configure complex thing easily getting level take lot time knowledge tool going rely spend time learn use tool really well hopefully aerc get level functionality soon odds everyone else something much like usecase unusual let get unusual use case fun thing development patch review apply decide time review apply patch subsystem maintain number different one pending patch one big maildir filter message subsystem care moment save message local mbox file call hey naming hard get worse linuxwork local directory keep development tree different subsystem like usb charmisc drivercore tty staging let look handle staging patch first go linuxworkstaging directory stay work open todo mbox quick pressed within mutt macro picked somewhere long ago remember filter staging message save local mbox following keystroke mutt l staging yes could skip l staging step staging instead nice see going save first message local mbox file open single keystroke command line alias alias smutt f dig around mbox sort patch driver type see everything driver filtering name save message another mbox called see told name got worse l erofs lot local mbox file intuitively named course alias open file quickly alias f alias f alias f number mbox file sometimes need filter even patch set thing saving different mboxes make thing go faster erofs patch one mbox let open review save patch look good enough apply another mbox turn patch need dealt right moving erofs staging directory requires people review save message back todo mbox single patch want apply need add acks maintainer erofs provided editing raw message directly within mutt open individual message maintainer cut reviewedby line edit original patch add line patch kernel maintainer right screaming something like automate patchwork crazy yeah one place need work time involved much common others actually review patch subsystem maintain unfortunately ability edit single message directly within email client essential end fix changelog text editing subject line correct fixing mail header foolish thing text format case editing patch corrupted need fixed want linkedin skill badge edit diff file hand still work one hard requirement editing raw message within email client email client nonstarter sorry single patch need applied tree already linuxworkstaging directory correct git branch patch need go handle branch patch move deserve totally different blog apply patch one two different way using git command line piping whole mbox git applying patch directly apply within mutt individually using macro lot patch apply pipe mbox file git comfortable go quick multiple patch also work well lot different terminal window open directory quickly toggle talking email client moment applying single patch local git tree took hitting l key key set macro mutt configuration file single line macro index l git sn macro pipe output current message git ability mutt pipe current message message external script essential workflow number different place leave email client able run something else message powerful functionality hard requirement applying development patch bunch task collect patch common theme filter patch smaller subset review manually responding problem saving good patch apply applying good patch jump back first step within email program able quickly get program well work directly email program key course test build sometimes test boot push git tree notify author patch applied set step applying patch outside email client workflow happen separate terminal window stable patch review apply process reviewing patch stable tree much like development patch process differs never use git applying anything stable kernel tree development kept series patch need applied previous release series patch maintained using tool called quilt quilt powerful handle set patch need applied top moving base easily tool based crazy set shell script written andrew morton long time ago currently maintained jean delvare rewritten perl make maintainable handle thousand patch easily quickly used many developer handle kernel patch distribution well project highly recommend allows reorder drop add middle series manipulate patch sort way well create new patch directly stable tree lot time end dropping patch middle series reviewer say applied adding new patch needed prerequisite existing patch change git would require lot rebasing rebasing git work developer working tree usually rule kernel development public tree never get rebased otherwise one use development anyway stable patch kept quilt series repository kept version control git complex yeah sorry queue always found create linuxstablerc git tree constantly rebased based stable queue run test system handle quilt patch tree found ever used anyone anything automated testing see email bit explanation git tree used background information behind u let look take patch linus tree apply current stable kernel queue first open stable mbox filter everything upstream subject line filter alsa look alsa patch look individual patch looking patch verify really something applied stable tree determine order apply patch based date original commit hit f pipe message script look fix tag message determine stable tree commit fix contained example patch go back kernel tree apply know stop place go apply patch hit another macro define mutt configuration macro index linuxstableapplyitfromemailn macro pager linuxstableapplyitfromemailn defined twice different key binding looking mailbox index message looking content single message case pipe whole email message applyitfromemail script script dig message find git commit id patch linus tree run different script take commit id export patch associated id edits message add signedoffby patch well dropping editor make needed tweak might needed sometimes file get renamed hand give one final change review patch editor usually easier email client directly better syntax highlighting search review text better go well save file script continues applies patch bunch stable kernel tree one another adding patch quilt series specific kernel version spawn separate terminal window mutt fun thing standard inputoutput piping message script ever figure without extra spawn process action video asciinema show multiple window time video applied patch save away might need refer move next one sound like lot different step process lot relatively quickly patch review step slowest one course automated later take new patch applied run kernel build test thing sending email saying applied tree like development patch happens outside email client workflow bonus sending email command line writing remembered script use mutt send email normally use mutt patch review use script one eventually got turned git sendemail hard requirement nice able simple mutt subject address msg errorlog within script needed thunderbird also used thunderbird compose address subject subject message msg time past dealing email server mutt connect easily ie gmail using oauth token summary need email client summarize drew list requirement able use email client kernel maintainership role work local mbox maildir folder easily open huge mbox maildir folder quickly custom key binding command default sane always good everyone used previous program training finger hard create new key binding common task like save message specific mbox easily filter message based various thing full regexes needed see pattern section man muttrc example people come year needed email client sendingresponding email bring editor choice full header know aerc already us vim great make easy send patch include file directly email body edit message directly email client save back local mbox came pipe current message external program use kernel development oh forgot handle gpg encrypted email mailing list send everything encrypted mailing list key needed decrypt message encrypt message sent list smime could used gpg work probably equally horrid code support recommend gpg probably used often bonus thing grown rely using mutt handle displaying html email piping external tool like send message command line specific subject specific attchment needed specify configuration file use command line option usually easier one configuration file work account another one personal one different email server setting provided configuration file include configuration file mutt allows keep core keybindings one config file specific email server option separate config file allowing make configuration management easier made far writing email client amazing must slow news day good thing hope writeup help others show mutt used handle developer workflow easily required good email client order able hopefully email client get state competition good maybe aerc get someday
190,Lobsters,vcs,Git & VCS,Finding a New Git Host,https://simulacrum.party/posts/finding-a-new-git-host/,finding new git host,ice pentagon sourcehut email twitter,trying find somewhere github host git repository lot option like take minute run pro con article simply journal experience various git host taken instructive prescriptive first talk nt want use github easily obvious answer question popular open source project developed github open source developer least somewhat active github many proprietary software project also use github rich feature set generally clean friendly ui wrong well first uncomfortable deeply coupled open sourcefree software ecosystem closed source proprietary product microsoft acquisition happened lot debate sincere microsoft recent surge participation open source think missing point problem necessarily microsoft specifically center open source software development run company profit microsoft mandate generate profit shareholder could come day github nt justifying cost pull plug decentralized protocol git supposed prevent exactly kind fragile centralization yet would prefer use product nt vulnerable fickle whim capitalist said take issue microsoft specifically well considering lucrative contract ice pentagon microsoft directly involved imperialism death destruction kidnapping murder support good conscience frankly quibbling intention toward open source software seems petty myopic comparison might try say github relatively autonomous entity microsoft umbrella issue even acquisition first heard saw twitter github invited cto ice speak constellation conference well representative northrop grumman major defense contractor public outcry dropped speaker ice main point contention speaker northrop grumman nt think allow people open source space nt want company work profit work alternative name tend hear often github gitlab like github private corporation code open source also seem treat employee pretty well beaten github market nice feature cicd free private repository maybe one nice thing gitlab also stand instance server alone really set apart github ultimately looking something profit gitlab respectable option gitlab bitbucket probably next commonly mentioned git hosting service decent product quite bloated atlassian product like jira sourcetree closed source run profit private corporation really option thought would remiss mention one recent entrant space sourcehut sourcehut open source either selfhost use hosted instance clean minimal interface prefer github style got excited new open source git host quickly transferred repository kind soured due author preference emailbased patch workflow rather pull request advantage needing contributor register sourcehut account personally find email workflow extremely intimidating think lot potential contributers well pull request system confusing first encounter think ultimately friendlier system author talked building sort web interface top email workflow intriguing least think sourcehut nt quite right last option talk gitea open source selfhosted solution unlike gitlab sourcehut choose selfhost gitea canonical hosted instance must run clean fast interface similar github easy deploy created oneclick gitea droplet digital ocean aside stand nginx reverse proxy let encrypt configuration breeze get going love fully control git server downside anyone want contribute project need register account instance obviously ideal saw work done federating gitea via activitypub would certainly improve situation going try time nt know ultimately right solution nt know going end meant said beginning article simply exploration domain nt good answer question suspect perfect git hosting solution nt exist yet spent time investigating various option serious downside fortunately nt popular project lot contributor free jump around try move sure product nt tried would love hear feel free reach via email twitter
191,Lobsters,vcs,Git & VCS,Mini Review of tog(1),http://akpoff.com/archive/2019/mini_review_of_tog.html,mini review tog,mini review tog tog game tree tog enter enter tog log tog blame tog diff tog tree tog enter tab tog tog tog tog git log stefan sperling joshua stein openbsd got current source game tree,mini review tog aaron poffenberger akp hypernotecom sun aug tried tog interactive readonly browser git repository included game tree may say swoon tog log diff blame tree view start view calling tog appropriate subcommand start default log mode switch tree pressing blame pressing enter diff pressing enter line hash already repo tog log launch current repo log view otherwise pas one repository path r commit c path file directory tog blame accepts parameter except path must file tog diff accepts repository path id object tog tree accepts optional commit c repository path terminal wide enough tog automatic split screen mode pressing enter line log view open diff pane right log pane press tab switch two split view work everywhere tog would normally switch new screen blame mode tog make easy see file entirety commit u work command line tog welcome addition toolset tog spend le time git log time reviewing code change congratulation thanks stefan sperling joshua stein producing useful usable tool openbsd got current pkg repo source available game tree site
192,Lobsters,vcs,Git & VCS,Game of Trees: a version control system under development for OpenBSD,https://gameoftrees.org/index.html,game tree version control system development openbsd,got resource openbsd openbsd git stefan sperling,got resource openbsd game tree work progress game tree got version control system prioritizes ease use simplicity flexibility got still development developed exclusively openbsd target audience openbsd developer got us git repository store versioned data git used functionality yet implemented got always remain possible work got git repository game tree developed stefan sperling occasional help support openbsd developer software freely usable reusable everyone bsd license mention openbsd internet complete without long thread source control migration tedu
194,Lobsters,vcs,Git & VCS,Don't ask if a monorepo is good for you – ask if you're good enough for a monorepo,http://yosefk.com/blog/dont-ask-if-a-monorepo-is-good-for-you-ask-if-youre-good-enough-for-a-monorepo.html,nt ask monorepo good ask good enough monorepo,dan luu post worse better branching getting forked worst programmer modularity demoted norm ideal tooling better standard summary,inspired dan luu post advantage single big repository many small one post fairly old confess hardly date state tooling managing multiple repos dealing one big one going make argument think mostly work regardless state tooling given day monorepo great really good absolutely terrible good multiple repos hand passable everyone never great never truly terrible either agree choice personal philosophy instance nobrainer choose passable thing successfully withstands contact apathetic mediocrity greater thing fall apart upon contact heartbeat might different might believe good choose monorepo like google ultimate force good technology safeguard personal data would nt want someone evil luckily google evil almost kidding superpower let google maintain grassroots bureaucracy find necessary make monorepos work well actually trait making sufficiently delusional chant least chanted nt evil entirely seriously nt first approximation evil worse better saying youyour org good evil saying open possibility nt see implication good discussed much deserve monorepos terrible good three reason branching modularity tooling strained let discus detail branching getting forked worst programmer good team nt multiple concurrent branch actual product delivery produced andor people get maintain branch simultaneously long time certainly ca nt branching due outright atrocity like someone adding feature killing feature example making app work android destroying ability build io process notsogood get idea branch working android another branch working io delivery platform postpone merge keep fork long postpone merge long necessary dumbass caused fork fix handiwork parallel delivering feature likely result digging deeper hole climb afterwards dumbass might take month year forever question becomes forked multirepo world repo maintained team dumbass got forked monorepo world entire code base got forked entire org held hostage dumbass might think result lot pressure fix problem wrong reason high murder rate nt cure people putting pressure whomever lower equilibrium level common human society place higher average murder rate place higher average fork rate argue lot place fork rate combine complete disaster monorepo might even realize bad fork rate place multiple repos largely shield consequence tragically might realize bad fork rate monorepo first couple year sowing reap next couple year code delivery dumbass multiple repos shit control repos single release branch single timeline test dumbass branch monorepo need maintain code branch growing share everybody else code morphing incompatibly branch simply exist soon single dumbass good luck modularity demoted norm ideal norm mundane ideal lofty merely typically nt want actually something nt want ideal like altruism want norm like wiping one as something demoted asswiping altruism something scarcely found wild multiple repos modularity norm must technically repo depending umpteen repos teammate expect able work repo minimal set dependency nt like clone lot repos worry version part tooling support might le great fact common multirepo failure mode people expect dependency make many repos small host useful selfcontained system note failure mode lethal kinda suck overmodularity benefit independence turn imaginary upon closer look people treat essentially internal apis way much reverence two module extremely tightly coupled conceptually independent technically term cloningbuildingtesting nt kill monorepo modularity mere ideal everybody clone whole thing supposed add gratuitous dependency easy add dependency term cloning building versioning nobody object dependency added way would needed clone repos course good team needle dependency would weeded code review culture would evolve time avoiding needle dependency notsogood team monorepo grow single giant ball circular dependency note adding dependency infinitely easier untangling much like forking easier merging difference gutfelt urgency merge ca nt maintain damned branch longer far greater far backed simple selfinterest urgency improve dependency structure tooling better standard part might age worse others might particularly date even standard tool capable change time generally speaking growing monorepo likely outgrow standard version management tool method well tool method dealing revision controlled code google used fuse driver avoid copying hundred million source line time instead getting file demand directory cd facebook used hack hg make fast large monorepo maybe already today day growing number offtheshelf tool scale infinite monorepos without investment sound reasonable always tool workflow struggle make work large monorepo starting script findgrep bunch small monorepos work small overall number source file working directory nt need tell tool nt try deal whole thing instead search subset use index etc etc tool day kinda sorta let manage revision multiple repository instance google repo think result far great experience potentially afforded large monorepo also never break badly large monorepo outgrowing ability tool well ability local toolsmiths find creative workarounds growth pain summary nt ask monorepo good ask good enough monorepo personally nt gut bet supply goodness given org remain sufficiently large time consistently avert potential disaster monorepos personal outlook want compliment nt call smart definitely nt call good know limit area take far pride knowing limit limit compliment call pragmatic yet culture worthy monorepo absolutely exist make sure actually one nt mistake ideal norm
195,Lobsters,vcs,Git & VCS,Can We Trust GitHub Stars?,https://blog.containo.us/can-we-trust-github-stars-e8aa8b6b0baa,trust github star,,announcing traefik traefik add couple long awaited feature also brings simplicity certain area simplicity always key feature traefik since beginning utterly important u also user read
197,Lobsters,vcs,Git & VCS,Personal do(n)tfiles - managing dotfiles with (just) git,https://github.com/tomekw/dontfiles,personal n tfiles managing dotfiles git,join github today sign file permalink dontfiles install new machine usage setup repository http topic resource reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time dontfiles install new machine install homebrew xcodeselect install usrbinruby e curl fssl http rawgithubusercontentcomhomebrewinstallmasterinstall install git clone repository git clone bare git githubcom tomekwdontfilesgit dontfiles pull change git worktree home gitdir homedontfiles checkout f master run installation script homebindontfilesinstallsh usage use dfgit git setup repository git init bare dontfiles see http personal n tfiles topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
199,Lobsters,vcs,Git & VCS,"Pista - a simple {bash, zsh} prompt written in rust",https://github.com/nerdypepper/pista,pista simple bash zsh prompt written rust,pista feature installation configuration,pista simple bash zsh prompt programmer feature shortened current working directory git info branchcommit aheadbehind status repo status superuser indicator fully configurable installation curl http shrustuprs ssf sh rust installed great check latest version pista work rustc rustc version rustc update rust required rustup update step install cratesio install pista cargo rust package manager want install source skip cargo install pista cargobinpista v pista yay step install source want install cratesio install source install source git clone http githubcomnerdypepperpista recursesubmodules cargo install path pista force cargobinpista v pista yay step bash bash user set pista regular variant pista minimal variant step zsh zsh user add zshrc autoload uz addzshhook pistaprompt prompt pista z pista zm miminal variant addzshhook precmd pistaprompt pista handle prompt modification enter virtual environment make sure disable virtualenv change export thats read nt happy default configuration default configuration drop bashrc zshrc get started remember source bashrc source zshrc observe change prompt string display regular user export promptchar export promptcharcolor green prompt string display root user export promptcharroot export promptcharrootcolor red shortencwd set homenerdypeppercode shortened hncode export export cwdcolor white expandtilde set homenerdypepper shortened export three possible state git repo unstaged working tree modified staged staging area modified clean staged change committed symbol represent clean repo state export gitclean export gitcleancolor green symbol represent unstaged repo state export gitwtmodified export gitwtmodifiedcolor red symbol represent staged repo state export gitindexmodified export gitindexmodifiedcolor yellow head ref peel branch export branchcolor green head ref peel commit detached state export commitcolor green color available black red green yellow blue magenta purple cyan white bright black bright red bright green bright yellow bright blue bright magenta purple bright cyan bright white
201,Lobsters,vcs,Git & VCS,Learning Git Concept by Hacking Github,https://medium.com/@madushandhanushka/learning-git-concept-by-hacking-github-e4993049c6b0,learning git concept hacking github,git internally work draw pixel drawing already contributed graph twitter,see git contribution graph github account check print name blog post tell along underlying git concept might help wellgithub provide way represent daily commitment graph github introduce contribution graph measurement daily contribution take feature motivation factor commits lot contribution mean contribution worth somehow give idea contribution done open source communityhow git internally worksas programmer use git save last successful state code git simple way keeping versioning history git repository git keep data combination following objectsblob object used store content single filetree reference another blog subtreecommit commit data author commiter ect reference tree objecttag reference commit objectblob nothing file changed whenever commit content git repository compress changed file blob type object generate hash value git also create another object called tree keep reference blob object many file changed git generate many blob hash value changed file also generate another object called tree track changed file commit generate another object called commit object commit object keep reference tree objectonce change another file first commit git check change file create new blob tree changed file create new commit object point tree object also keep reference previous commit using field called parenthere examplein example two file commits represented green color tree blob represented yellow purple color respectively first commit tree associated track file commit two file available next commit changing file since content changed generate new blob new hash id new commit new tree commit also pointing previous commit parent commit hashif read commit object content following command content would something like followsgit catfile p commit hash idtree dhanushka madushan dhanu gmailcom dhanushka madushan dhanu gmailcom commithere git maintain author name time commit marked see two timestamps commit objectauthor date timestamp commit message author date set change ever againcommit date date could change rebase commithow draw pixelimage composition many pixel let see draw pixel contribution graph first thing need select git repository forked repository github count contribution forked repository unless change merged original repository thus remember use original repository github measure contribution based following factscommitting repository default branch ghpages branchopening issueproposing pull requestsubmitting pull request reviewcoauthoring commits repository default branch ghpages branchhere used first method since change history changing commits first created new file repository added random word commit took last commit hash id running git logcommand put whatever date commit message running following command replace commit hash previously extracted commit hashgit filterbranch f envfilter gitcommit export gitauthordate fri jun export gitcommitterdate fri jun fiwhen git log executed see relevant commit message change author commit date change push remote branch since change commit history change push git push origin master change push force f option thus command would git push origin master fwarning push change github contribution graph draw according whole commit history always remember remove contribution commit history mean add contribution github delete contribution contribution permanentdrawing already contributed graphgithub contribution graph represent contribution color scale dark green light green dark green mean higher contribution light green mean lower contribution color scale generated dynamically based number contribution done selected one year period year contribution graph around contribution print dark dot contribution graph needed least contribution single day mean need run script time created script generate many commit following script script generate commit message binbash basic counter le doecho counter filetxtecho countergit add filetxtgit commit commit counter counter doneecho donei ran following script generate many commit massage day number commit per day change modcommit variable script ten commit ten day mean commit script read previous commit change commit timestamp history defined arr mon jul arr fri jul arr thu jul arr wed jul arr fri jul arr mon jul arr mon jul arr fri sep arr thu sep arr wed sep fixcommitdate echo commit id echo date git filterbranch envfilter gitcommit export gitauthordate export gitcommitterdate fi f rm committxtgit log pretty h committxtcountcommits awk end print nr committxt echo countcommitsinput committxt ifs read r linedo dateid count modcommit audate arr dateid echo line echo audate fixcommitdate line audate count count break fi echo todo todo echo change script want add many contribution array day trying recommend older year contribution graph add contribution graph would permanent hope article may also help understand underlying git concept join twitter read interesting tech stuff see next article cheer
202,Lobsters,vcs,Git & VCS,Adventures in upstreaming,https://www.jefftk.com/p/adventures-in-upstreaming,adventure upstreaming,playing openring setting page lot snippet source project page drew devault gitsendemailio scaleway documentation blog post,playing openring setting page lot snippet noticed snippet two atom feed coming properly looking feed saw content summary looking source saw issue summary runewidthtruncate policysanitize itemsummary summarylen changed locally rawsummary itemsummary len rawsummary rawsummary itemcontent summary runewidthtruncate policysanitize rawsummary summarylen summary present use otherwise fall back content turn right though content contain escaped html tag want policysanitize remove something work though sure correct rawsummary itemsummary len rawsummary rawsummary htmlunescapestring itemcontent summary runewidthtruncate policysanitize rawsummary summarylen work nice thing would send patch author right turned take much longer expected started going project page hosted seems github competitor written author drew devault thinking need download code make pull request first make account seems reasonable wanted sign paid plan nt something someone trying submit patch see offered want contribute paid plan please option went confirmed email though nt obvious way make pull request gave decided email patch author ran git formatpatch head package recent commit sent attachment drew wrote back promptly friendly saying accept patch sent git email protocol way git originally intended used thing got centralized github specially formatted patch sent email look output formatpatch email ok follow doc gitsendemailio also helpfully written author set git sendemail linux vps working run git sendemail sircmpwnpublicinbox listssrht first hang long time get unable initialize smtp properly check config use smtpdebug value serversmtpgmailcom encryptiontls hellojefftkcom usrlibgitcoregitsendemail line drew helpfully suggested try telnet make sure connect smtpgmailcom port telnet smtpgmailcom trying hang c running tiny vps scaleway mostly really cheap later figured scaleway block outgoing smtp port default make thing le attractive spammer documentation turn date needed go instance security group default security group check enable smtp box theory time though gmail blocking smtp scalway ip range decided try sending email laptop got different error ca nt locate netsmtpsslpm inc may need install net smtp ssl zmodule inc contains fortunately one described doc ran sudo h cpan net smtp ssl io socket ssl unfortunately sending email failed starttls failed ssl connect attempt failed ssl routine connectcrcert certificate verify failed line searching found blog post mentioned setting smtpsslcertpath sound like either git perl ca nt find root certificate authority failing closed best error message added gitconfig smtpsslcertpath etcsslcertpem worked overall lot work upstream simple patch known outset long would take probably would sent email describing bug thought could fixed mention patch
203,Lobsters,vcs,Git & VCS,I Git it,https://legends2k.github.io/note/git_concepts/,git,basic snapshot difference reachablity reference think like git reference reachability file containing commit id command affecting ref checkout v reset gist pro git checkout reset pro git reset move branch pointing caveat detached attachdetaching practise visualizing git rebase change commit id dividing pull fetch rebase rewriting commit see also obscure useful one learn trygithubio reference think like git pro git git tutorial atlassian git ready,basic like initializing repository staging commiting file explained simply make sense aha moving reference branching merging coupled git arcane command name confusing part basic git distributed vcs repo serverclient honestly git sub command graph manipulating command every codebase made graph commit node edge parent git diagram often arrow backwards reason git store snapshot difference ie entire file content blob finally figuring git command strangely named graph manipulation command creatingdeleting node moving around pointer kent beck node graph created commits node never really deleted traditional sense made unreachable see reachablity b c e f g h important linkedlist concept applies git first node lost list lost reference reference make commits reachable think like git plainly reference meaningful name commits facilitate easy gitspeak friendscolleagues branch tag reference creating branch reference way nail part graph want return later reachability reference referencenamed file containing commit id specific single repository remote reference local remotetracking reference commit remote repository many way referring commits man gitrevisions friend command affecting ref primary subcommands allow move ref directly commit merge rebase reset subcommands affect moving remote ref command like pull cherrypick work atop checkout v reset getting detail gist checkout mostly operates working tree reset operates index understand command first need understand head people know working tree stating area head head reference currently checked commit working tree mostly snapshot commit pointed head pro git summarizes nicely head parent next commit created checkout git checkout head file checkout file head get clean copy file commit head pointing replaces working tree copy course one could use ref head convenient default replace ref head omitted index stage checkout branch reference commitnode eg topic head set tip commit hence entire working tree file commit branch pointing reset plainly reset move head around used move head given commit different flavour depending happens index working tree hard soft mix crux move head checkout yes difference quoting pro git emphasis reset move head point changing head checkout reset move branch head pointing caveat reset head move branch reference along attached detached head whoa slow cowboy talking detached attached state head already know head reference commit say commit also another reference pointing branch name head moved reset attached branch reference move head master head git reset hard would move head master head would continue attached attached move head leaving master behind hence detached head state detached state head refers specific commit opposed referring named branch like git diagnostic message say useful poke around inspect code base particular commit making new commit would mean commit pointed head couple way identify head detached git status first line tell git status branch master git status head detached another way use git log learnt actually git log oneline head master initial commit git log oneline head master initial commit notice head attached see arrow pointing branch attached however detached state listed independent item attachdetaching head attach detach head reference done checkout subtle difference attach head checkout checkout commit using anything branch name detach head eg commit id head head etc since know associate head git detaches head want inspect code base particular unnamed except commit id commit normally matter commit branch reference since referred using raw commit id git take cue detach head practise highly recommend playing around visualizing git checkout reset also get hand dirty whole attachdetach business small snippet get started see happens command get executed git commit git commit git commit git commit git commit create topic branch checkout head attached topic git checkout b topic move head one commit behind topic also move topic head git reset detach head git checkout attach master git checkout master move back master git reset move master forwardbackward commit id git reset rebase rebase seems scary reputation web good reason course infamous rewriting history something teammate take kindly however locally within repo pushing great tool crux rebase given subgraph root node rebase change parent pointer one node another thereby rebasing entire subgraph new parent take note commit content also includes parent kind rebase entail since parentlineage changed change commit id commit content interactive rebase rebase quite useful frequently use amend recent commit fix reword edit drop squash commits interactive rebase one even create multiple commits usual continue rebase thing taken care normal dividing commit smaller part pull fetch merge rebase pulling remote branch might know change unrelated one coming case avoid merge commit linear commit history pas rebase override default merge strategy pull merge git pull rebase origin master git pull git fetch followed git merge creates new merge commit git pull rebase however git fetch git rebase pull commits remote current branch replay commits atop current branch tip work merge conflict otherwise resolve conflict normally resolution change become part one commits rebase halted end rewriting commit however force push change remote since resolution happened local commits rewriting commit history long public ok counter point pullwithrebase want logical separation set commits say completely new feature rebase make inline muddled unrelated history right tool use merge instead use git pull rebase change deserve separate branch seems appropriate answer git pull rebase see also get surprised git command every document obscure useful one learn trygithubio good diy resource reference think like git pro git git tutorial atlassian git ready
204,Lobsters,vcs,Git & VCS,Linux stable tree mirror at github,http://kroah.com/log/blog/2019/06/15/linux-stable-tree-mirror-at-github,linux stable tree mirror github,http githubcomgregkhlinux http gitkernelorgpubscmlinuxkernelgitstablelinuxgit http githubcomtorvaldslinux http peoplekernelorg,everyone seems like put kernel tree github random project based crazy notification get time figured time put semiofficial mirror stable kernel release githubcom found http githubcomgregkhlinux try keep date real source kernel stable release http gitkernelorgpubscmlinuxkernelgitstablelinuxgit differs linus tree http githubcomtorvaldslinux contains different stable tree branch stable release tag many device end building top mirror away also note readonly mirror pull request created gleefully ignored like happens linus github mirror people think needed git hosting site let know glad push place well notification also crossposted new http peoplekernelorg site go follow kernel developer stuff
205,Lobsters,vcs,Git & VCS,Innovating Version Control,https://bitsvsbytes.com/podcast/041-innovating-version-control-plastic-scm/,innovating version control,http wwwplasticscmcom one olaf molenveld vamp,pablo santos founder codicé software creator plastic scm http wwwplasticscmcom plastic try provide different take version control software like git svn talk future collaborating code also make plastic scm unique regard system enjoyed podcast also like one olaf molenveld vamp
206,Lobsters,vcs,Git & VCS,Home .git,https://martinovic.blog/post/home_git/,home git,setup cloning another viable solution gnu stow homesick rcm,git incredibly useful tool programmer use version work distribute easily computer year found lot workflow depends various configuration helper script path version well allow get started second familiar environment every new computer even server spend lot time ssh session bonus point making public repository others take look stuff possibly get inspiration improvement workflow make sure commit private key setup feel free check home repository see contains zshrc vimrc bin directory various script dotfiles stuff curated best fidgeting around computer start version simply initializing git repository home directory directory full stuff probably want commit like downloads picture private key shell history important set gitignore file immediately stop accidentally committing stuff want importantly ignore everything default gitignore blacklist folder except gitignore gitconfig note bin developmentsh instruct git keep hand file except gitignore gitconfig file note bin developmentsh directory want add file directory require force flag like basically need set add commit want push git hosting service choice cloning time clone new home directory try cloning using git clone command complain non empty directory get around need initialize first manually add remote finally force checkout like cd create empty git repository home folder git init add remote git remote add origin http githubcomtophatcroathome get stuff git fetch careful overwrite local file existing remote git reset hard originmaster running last command basically checkout file origin master branch overwrite file path careful already setup new machine saved bother copying config file thing remains install tool use configs brought feeling adventurous could make script like edit response blog post others pointed another viable solution using gnu stow homesick rcm still solution presented simplest setup understand depend tool besides git bunch way lot resource available
207,Lobsters,vcs,Git & VCS,Highlights from Git 2.22,https://github.blog/2019-06-07-highlights-from-git-2-22/,highlight git,released git source tidbit source source commit source source,open source git project released git feature bug fix brought contributor new look exciting feature change introduced since git rebase merges interactively might used git rebase alter history repository quick primer git rebase replay series commits new initial commit example might used git rebase make sure feature branch based latest change upstream say repository structure look like myfeature master let say working myfeature branch started master changed repository look like myfeature master make sure branch myfeature merges master cleanly could merge end result might hard others understand resolve conflict yet shared branch reviewer might prefer see commits written directly top current master might rebase remember rebasing operation take series commits applies top new base rebasing myfeature latest master instead get myfeature master git rebase take first new commit myfeature applied top new tip master remaining commits myfeature order none left example complicated let say myfeature branching structure want preserve replaying commits complicate thing let also assume want use rebase interactive feature like dropping reordering renaming commits mind giving interactive feature could used preservemerges use git rebase preservemerges edit history interactively repository structure might remain intact git new option rebasemerges since old option officially deprecated favor rebasemerges using rebasemerges allows preserve structure change also giving full power interactivity example let say branching structure based master upstream say originmaster changed since created branch want replay commits latest upstream preserve branching structure make modification commit message along way simulate fixing typo git might look like source create branch merge base given set two branch tell history common turn git precise way answer question git call merge base recent common ancestor among set commits might want compute merge base practice obvious answer merging git computes common ancestor base threeway merge content hence name merge base might also want use common ancestor cutoff point listing commits running git log b show commits b common ancestor word happened since two diverged also use leftright see commit side tripledot notation associated merge base context running git diff b show difference b merge base b another way showing happened b another instance might want use mergebase say working feature branch decide part way like start different branch let also say like start place master existing feature branch cut create thing well could manually inspect git log might cumbersome history particularly large could invoke git mergebase master myfeature compute merge base master myfeature copy got back paste git branch myotherfeature git git branch git checkout b learned tripledot merge base syntax specify like create branch merge base two branch say b run git branch myotherfeature b git checkout b myotherfeature b example source tidbit ever needed ask name branch checked could use git symbolicref aware existence hacked output git branch combination grep awk seem like rather unfulfilling option git use much natural git branch showcurrent get name branch currently checked want use output machinereadable setting git symbolicref still preferred though source say feature branch want get back content dir directory master might run git checkout master dir one file dirfiletxt present master mean go back state git treat checkout command request overlay content master copy dir copy content present master working tree delete tracked file master result combination two master however reasonable interpret request convert dir exact set content master adding deleting appropriate git way express git checkout nooverlay dir default behavior remains unchanged ie passing overlay source might noticed wherever git accepts option like git diff functioncontext show function context nearest hunk also accept git diff nofunctioncontext result using git parseoptions api used across many subcommands ensure commandline option parsed consistently git diff command written prior parseoptions api handcrafted parser git git diff us parseoptions api meaning expect consistent commandline option parsing part git source might heard term trailer describe extra bit information end commit like signedoffby coauthoredby might also know git log format option allowed list trailer part custom format specify like display filtering trailer key value say want get list individual often listed reviewer project git log pretty trailer keyreviewedby valueonly grep sort uniq c sort rn head source git ship new tracing mechanism support much flexible structured output format allows set destination receive longrunning performance telemetry data completely default organization wish use may optin choose aside worth noting define data go git project plan data source learn new flexible logging mechanism finding good bad commit git bisect try show pretty version commit ever since introduced bisect used difftree plumbing show commit long way pretty default show toplevel tree might find commit question changed src directory helpful also show machinereadable raw diff format giving hash clue actually changed merge commits show nothing git bisect show full stat diff summarizing change file line count merges count difference brought merge stop short showing full contentlevel diff view git show source last post talked git new directory rename detection mechanism internally git compare content source destination tree see whether think directory renamed sometimes git mark directory renamed fact git heuristic toned git mark directory renamed sure sure git leave path marked conflicting letting review change mark appropriately source many project use git tag mark location release repository history example git repository tag point commit something might known git tag point object blob tree commits even tag commits common usually mistake create tag pointing another tag one way make mistake running git tag f updated message mytag mytag may written meant update mytag message leave thing point unchanged invocation creates new tag point old tag likely meant point thing old tag point atto help prevent making mistake git warns create tag pointing another tag source earlier blog post wrote reachability bitmap improve graph traversal git bitmap generated default bare repository provide considerable speedup repository serving fetch source next time sampling change latest version read full release note find release note previous version git repository
208,Lobsters,vcs,Git & VCS,Precis: A minimal note taking app built over Github Pages,https://abhin4v.github.io/precis/,precis minimal note taking app built github page,precis note,precis precis minimal note taking webapp built github page website built using precis look note learn note
211,Lobsters,vcs,Git & VCS,Semantic is now Open Source,https://github.com/github/semantic,semantic open source,semantic example us command line tool usage parse language support code navigation development docker image nixstyle local build bazel build documentation unofficial support technology architecture treesitter contribution contribution guideline code conduct licensing mit license,semantic semantic haskell library command line tool parsing analyzing comparing source code hurry check documentation example us semantic command line tool usage run semantic help complete list uptodate option parse usage semantic parse sexpression jsonsymbols symbol protosymbols show quiet file generate parse tree path available option sexpression output sexpression parse tree default jsonsymbols symbol output json symbol list protosymbols output protobufs symbol list show output using show instance debug format subject change without notice quiet nt produce output show timing stats h help show help text language support language parse ast stack graph ruby javascript typescript python go php java json jsx tsx codeql haskell used code navigation githubcom supported partial support development na development semantic requires least ghc cabal strongly recommend using ghcup sandbox ghc version ghc package installed o package manager may install staticallylinked version ghc boot library semantic currently build unix system user operating system may wish use docker image use cabal nixstyle local build development get started quickly git clone git githubcom githubsemanticgit cd semantic scriptbootstrap cabal cabal cabal semantic help also use bazel build system development learn bazel might give better development experience check build documentation git clone git githubcom githubsemanticgit cd semantic scriptbootstrapbazel bazel build stack build tool officially supported unofficial stackyaml support available though make guarantee stability technology architecture architecturally semantic generates perlanguage haskell syntax type based treesitter grammar definition read blob filesystem provided via protocol buffer request return blob performs analysis render output one many supported format throughout lifestyle semantic leveraged number interesting algorithm technique including contribution contribution welcome please see contribution guideline code conduct detail participate community licensing semantic licensed mit license
212,Lobsters,vcs,Git & VCS,File versioning on Linux like on OpenVMS?,https://raymii.org/s/blog/File_versioning_and_deleting_on_OpenVMS.html,file versioning linux like openvms,clicking picture decus like article consider sponsoring trying digital ocean vps link get credit day referral link dir flag decus look file type get purge purge command create directory version limit delete tried remove folder reading documentation conclusion alpha blog dec decus itanium openvms pdp simh vax vms,read openvms article clicking picture week openvms adventure home folder decus system quite cluttered file specifically different version file since openvms default file versioning built mean edit file copy file existing file old file overwritten new file new version written old file still one best thing humble opinion far openvms require maintenance disk get filled fast article go purge delete command help deal file versioning removal like article consider sponsoring trying digital ocean vps link get credit day referral link dir flag home folder decus getting filled test file titbit dir size owner date protection look fancy new flag found get information dir directory decuserveuserexample maintpu journal example rwed rwed viminfo example rwed rwed example rwed rwed icreatedafolderyaydir example rwe rwe logincom example rwed rwed logincom example rwed rwed logincomtpu journal example rwed rwed maildir example rwe rwe note notebooknote decuserve rwe rwe raymiidir example rwe rwe remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed remydat example rwed rwed sshdir example rwe rwe example rwe rwe example rwe rwe wwwdir example rwe rwe total file block let focus remydat file version old one removed look file type using type command look file specify full filename specific version number otherwise omit version see last version type remydat twas brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe hello version type remydat twas brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe beware jabberwock son jaw bite claw catch beware jubjub bird shun frumious bandersnatch last version type remydat twas brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe beware jabberwock son jaw bite claw catch beware jubjub bird shun frumious bandersnatch took vorpal sword hand long time manxome foe sought rested tumtum tree stood awhile thought uffish thought stood jabberwock eye flame came whiffling tulgey wood burbled came one two one two vorpal blade went snickersnack left dead head went galumphing back hast thou slain jabberwock come arm beamish boy frabjous day callooh callay chortled joy twas brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe get reference see poem finished last version earlier version working copy removed poem done purge purge command remove highest version file delete command cover next section remove specific file requires specify version number well purge command therefore usefull clean old version file usefull flag example since flag remove version specified time let say worked file whole week version created yesterday today contain formatting fix would specify purge sinceyesterday file version earlier week contain change want keep saved way opposite flag flag remove version file given time wanted save version created yesterday today remove earlier version command would purge beforeyesterday file want keep version keep flag allows specify number version keep keep last version specify log flag show result thus file removed default output logged poem remove version last purge log remydat purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeifilpurg decuserveuserexample remydat deleted block purgeitotal file deleted block create directory version limit using versionlimit flag creating folder limit amount version kept default unlimited create folder named three max version kept use following command create directory three set def three edited remydat file three time dir directory decuserveuserexamplethree remydat remydat remydat new edit version file gone dir directory decuserveuserexamplethree remydat remydat remydat total file create folder without versioning specify combining previous section wanted keep two last version would use following command purge log remydat purgeifilpurg decuserveuserexamplethree remydat deleted block let check version still dir directory decuserveuserexamplethree remydat remydat total file delete read delete adventure tried remove folder reading documentation delete usefull flag like since used however remove previous version previous file must used wildcards time selects file dated prior specified time specify time absolute time combination absolute delta time one following keywords boot login today default tomorrow yesterday even back already actually removing file marking location usable erase flag also overwrites file something data actually disk recoverable anymore erase noerase default delete file area file stored returned system future use data stored location still exists system new data written specify erase qualifier storage location overwritten system specified pattern data longer exists rm rf alternative openvms seems tree flag tree recursively deletes file sub directory excluding parent directory said delete requires version number trying delete remydat file fail delete remydat deleteedelver explicit version number wild card required version specified work delete log remydat deleteifildel decuserveuserexamplethree remydat deleted block conclusion article covered different way cleanup version file article covered removal directory also know create folder limit amount version kept tag alpha blog dec decus itanium openvms pdp simh vax vms
213,Lobsters,vcs,Git & VCS,Storing versioned data with revlogs,https://ngoldbaum.github.io/posts/revlog/,storing versioned data revlogs,revlog data format paper matt mackall mercurial online help revlog exactly dag octopus merges kind revlogs content revlog file previous blog post representing revlogs rust put hgsrht byteorder crate,mercurial make use revlog data format storing versioned data kind ondisk design constraint led choice data format described paper matt mackall original author mercurial also internal technical documentation revlog data format included mercurial online help accessible via hg help internalsrevlogs revlog exactly revlog short revision log appendonly data structure storing discrete data entry relate entry via directed acyclic graph dag mercurial usage dag question graph change repository entry revlog consists metadata compressed revision data entry metadata contains cryptographic hash content revision size content metadata reference parent entry revlog entry revlog two parent one reason mercurial allow octopus merges revision arbitrary number parent revision data stored compressed format either containing full content file given revision delta relative state file previous revision whether revision contains delta full content file depends much data would required reconstruct file eg length already existing delta chain size change revision storing occasional snapshot mercurial reconstruct repository content revision without going history project also without storing unreasonable amount data revision style delta chain occasional snapshot inspired video compression technology information frame stored delta previous frame occasional keyframes containing entire content frame video kind revlogs mercurial store versioned data using three different kind revlog file changelogs manifestlogs filelogs format header followed zlibcompressed content differ meaning content changelogs store metadata commit reading file sufficient get information displayed hg log manifestlogs store manifest repository list file contained repository revision filelogs contain revision information individual file tracked repository revlogs linked changelog contains reference manifestlog entry manifestlog entry turn contain reference filelog entry reading data revlog file turn one get state file tracked repository revision hg update work update state working directory different revision content revlog file let take look revlog file test repository created previous blog post going looking changelog file revlog file contains information commit repository note revlogs used mercurial store content individual file repository since revlogs generic store versioned data store versioned metadata like commit description author well cd testrepositoryhgstore xxd w ffff ffff ffff ffff p x v ne mh ew sj x ffff ffcd u x k h p zc cnd un afca j u hmm luck data file humanreadable appears le random binary data going need bit work decode perhaps surprised since revlogs store revision data compressed format need able see uncompressed revision data get humanreadable text back according mercurial documentation particular hg help internalsrevlogs see first four byte revlog encodes version revlog data format used file well various feature flag case byte corresponds file us revlog format set feature flag say revision data stored inline file version revlog format called revlogng ng short next generation made lot sense replaced mercurial original revlog format day practically repository use one variant another revlogng format data revlog entry either stored interleaved metadata entry separate data file interleaved data used relatively small revlogs separate data file stored large revlogs ensures revlog metadata always parsed without also needing scan large amount revision data following header first entry entry consists metadata revision data number byte beginning file byte bit flag special behavior ignore byte length compressed revision data delta stored entry byte length full revision data uncompressed format size uncompressed delta entry store delta byte base revision use restoring full text delta base revision current revision revision store full text byte linkrev revision number revision entry linked allows revision one revlog refer revision different revlog example revlog entry file point revlog entry changeset index file changeset produced revlog entry byte signed integer revision first parent indicates parent byte signed integer revision second parent indicates parent byte hash revision content byte currently mercurial us hash since hash byte long remaining byte set zero future repository use different secure hash function use byte store hash since offset revision always zero elided header take place offset first revision linkrev parent revision stored integer revision number linkrev revision number linked revlog file parent revision revision number current revlog inline revlogs raw revision data follows index entry header padding noninline revlogs data entry written offset specified first six byte index entry noninline revlogs data stored file filename suffix revlog index entry stored file revision entire consist optional onebyte header followed revision data byte either entry headeronly contain revision data u uncompressed revision data x zlib compressed revision data representing revlogs rust written basic parser data format rust put hgsrht free time service hosting mercurial repository data stored using two structs one header struct revlogheader offset really byte easier represent bitflags compressedlength uncompressedlength baserev linkrev hash another content revlog entry includes header well uncompressed content revlog struct revlogentry header revlogheader content revlogcontent content field represented using enum enum revlogcontent generic string enum single variant trivial wrapper string next step add special handling changelogs manifestlogs filelogs eventually look like enum revlogcontent changelog changelogentry manigestlog manifestlogentry filelog filelogentry allow add special handling prettyprinters different kind revlogs used mercurial actually read changelog entry need read header get size content revlog entry header read content finally decompress content since revlog header always byte get header read byte changelog file parse destructure header content logical described field revlogheader struct use byteorder bigendian readbytesext use std io impl revlogheader fn new buffer result revlogheader io error let mut cursor cursor new buffer ok revlogheader offset bigendian bitflags bigendian tobebytes compressedlength bigendian uncompressedlength bigendian baserev bigendian linkrev bigendian bigendian bigendian hash let mut re cursorreadexact mut re re made use byteorder provides nice interface converting byte binary stream bigendian littleendian integer store hash raw array byte display nice way like headerhashiter map b format b collect join convert byte hexadecimal digit collect digit vector string join string single hash digest code fmt display implementation revlogheader header read content decompress content using zlib practice make use crate provides interface decompressing zlib stream use read zlibdecoder let mut gz zlibdecoder new zlibbuffer let mut decompresseddata string new let decompresseddata gzreadtostring mut decompresseddata able read data changelog file test repository working cargo run header offset bitflags compressed length uncompressed length base revision linked revision hash content nathan goldbaum gmailcom afile adding afile header offset bitflags compressed length uncompressed length base revision linked revision hash content nathan goldbaum gmailcom afile adding text afile see changelog entry store hash encodes reference manifestlog entry commit author email timestamp timezone offset list file touched changeset commit description next exploring content manifestlog filelog file ultimate goal able reconstruct snapshot repository given revision implementing functionality hg update
214,Lobsters,vcs,Git & VCS,Should version control and build systems merge?,http://beza1e1.tuxen.de/version_control_and_build_systems.html,version control build system merge,git store file contentaddressable storage bazel store file contentaddressable storage ipfs git ipfs discussion thread reproducible urbit dvc discussion lobster vesta clearcase discussion rprogramming,think large repository start see similarity version control system build system version control system manages file written programmer want data shared collaborate git store file contentaddressable storage build system manages file generated file want data shared avoid unnecessary rebuilds bazel store file contentaddressable storage imagine would use data store example could use ipfs git ipfs discussion thread new idea found activity bazel use ipfs nt see fundamental problem store source code build artifact storage use different tool big assumption build reproducible otherwise build artifact identical contentadressable store deduplicate well build system assumption hold rely external dependency like compiler available system effectively store tooling together code build artifact since store plenty asset like video file tool well going extreme even use file anymore essentially fetch checksum id ipfs use data blob compute new blob put ipfs blob native code bytecode source file package function image excel sheet sql code ok would much first step practically tool today work file system blob storage whole system reminds urbit well since last time looked urbit apparently turned company running ethereum system weird crazy wonderful surreal way underlying idea similar even fundamental change urbit start scratch brand new virtual machine programming language much change practical work think extreme would minimum viable product achieve dvc tool close quick glance documentation tell reimplements gitlfs make wonder use subversion scons bazel instead better scalability anyways issue approach workflow would commit generated file opposite usually recommended way distingish generated original file except looking build configuration build system know rebuilt unless also commit local database version control system able merge database though handle case multiple platform assume file must generated linux others window would pack single commit conclusion gap none current free software tool fill nt even know proprietary tool would fit might project invest decade work discussion lobster fruitful special thanks pointing vesta clearcase discussion rprogramming rather negative
215,Lobsters,vcs,Git & VCS,The Future Is Federating Forges,https://cjslep.com/c/blog/the-future-is-federating-forges,future federating forge,future federating forge gofed background activitypub forgefed git already federated argument instead future federating forge fewer activitypub library email library activitypub instance permagone result data loss activitypub email incompatible activitypub devs could instead help email dev building library v using library boost issue forgefed git conclusion fediverse comment,future federating forge git federated mean code forge activitypub extended forgefed solve problem come attention lot early email debate around forgefed vocabulary publicly available mailing list either closed marked private shut wanted take moment share copy debate point intend call specific individual try best characterize differing viewpoint strength weakness honestly contributor forgefed however author gofed biased toward seeing succeed background git distributed version control system builtin tooling support sharing patch using email email federated protocol allows sharing information locally distributed repository state code passed one person another long person also using git person accept reject bit code shared let email shuffle byte information point point b git hugely popular mechanism concept power current stateoftheart open source development process probably many proprietary process well unfortunately right email usage git minority starter user want use browser view manipulate repository lot http request response displaying modifying repository data also lifecycle item managed besides code release announcement many different kind documentation issue management many value service like gitlab bitbucket github offer git even attempt solve problem tool everyone step offer service make part managing software easier activitypub forgefed last year early lot discussion around extending activitystreams vocabulary code forge definition code forge may mean different thing different people often includes version control system managing actual code git svn visual sourcesafe etc issue management cm documentation access control community management want highlight actual version control system one subset code forge forgefed initially mentioned git vision later expanded versioncontrolsystemagnostic hindsight led heated debate git already federated argument argument persists today git already federated activitypub code forge forgefed worth pursuing firstly git tool already support email email support extension email extended custom extension provide capability code forge provide listed email mature many open source library contrast activitypub many library furthermore many email library actually supported standard library contrast activitypub zero standard library furthermore using email easier activitypub one developer need implement activitypub requires lot boilerplate public domain integration testing understanding new stillevolving specification hand developer need call existing email library need reimplement email also code forge still webbased ui hood everything sent received via email email better choice activitypub activitypub instance go result permanent data loss email life user inbox robust retransmit option tooling allows recreation archive option activitypub implementation another argument code forge look like github first place github commercial motivation software design repository viewed browser inferior federated approach email approach email activitypub based federation incompatible also development manhours put activitypub could instead put email drawback email git tool intimidating easy use however proper education people pick begin use instead future federating forge respect many point laid argument viewpoint opposing one instead think make room federating idea make git already federated argument seem like fundamentalist narrow view welcome gitoveremail think exclude activitypub shortsighted activitypub share data peer email differs activitypub set forth extensible rule construction linkedgraph data furthermore graph limited one kind data microblogs picture blog post could record economic activity exchange loaning bartering processing code forge related data importantly graph start scratch time new extension brought board one hand joining graph early microblogging software developer positioned get future innovation without putting innovativelegwork accept new extension display incoming data latejoiners code forge bootstrap potential user base reusing existing graph major incentive interoperate existing ecosystem email hand lack ecosystem selfdescribing rdf linked data graphbuilding one two crucial difference see heavily influence opinion difference discussed later benefit user fediverse whole graph evolves contain sort interesting linked data shown user native software without requiring go create new account silo today see toot mastodon controversial pull request look github repository search pull request people kind provide link instead leave mastodon view instead people could directly boosted mastodon controversial comment code forge would appeared mastodon home timeline could read power fediverse early software developer adopter get new kind data gigantic growing graph latecomer bring new innovation graph bootstrap userbase possible today one large silo large enough contain kind graph firmly believe future federating forge like git email want diminish way activitypub great since missing linkedgraph property activitypub excited position clear let examine stronger point made git already federated argument fewer activitypub library email library activitypub many library accurate people implemented activitypub even fewer done library one therefore people wanting write federating code forge today faced daunting task implementing activitypub implement email went route instead however somewhat mitigated problem building gofed library forgefed could allow project like gitea gogs use library speedily start federating activitypub also activitypub standard library take mean inferior newer put much weight distinction activitypub instance permagone result data loss note talking crash loses data requires restorefrombackup node fediverse go offline permanently agree point instance go permanently data contained gone good bad thing mostly bad privacy reason sometimes nice internet forget common case administrator take nice innovation going area chris webber examining contentaddressable iris example content would locatable independently instance alive network however think comparison email made fairer much like user local copy email sent peer even peer gone activitypub implementation cache peer message locally viewing user activitypub implementation still show peer message locally even peer permanently think could mitigated implementation short term fixed long term let address weaker point activitypub email incompatible yep activitypub incompatible lot thing bridge exist already activitypub protocol interoperate suspect email activitypub bridge could built unify concept fair bridge require work diminish fact still possible build activitypub devs could instead help email dev yes could statistic honestly know strong weak could know hacking email list polish gravestone think really weak point argument especially considering purely measure belief building library v using library easy get caught email bunch library call versus activitypub implementing thing inherently unfair comparison using library protocol building one line reasoning found everywhere despite deliberate unfairness instead stronger criticism implementing activitypub requires tying much implementation would disagree gofed library proof contradiction even stronger criticism one activitypub library way complex use email library sure whether agree disagree getting email server configured properly nontrivial activitypub nontrivial consideration well think considering large amount time email alive compared activitypub make hard conclusive one way boost issue omitted weak line argument go could imagine tooting patch come world view share enthusiasm vision see activitypub fine mean view weak unimaginative line reasoning seen plenty toot alone mastodon proprietary third party service using linkeddata graph instead content could much readily accessible user fediverse forgefed git whole time argument focused git mentioned age ago forgefed sight set supporting kind version control system huge boon forgefed git already federated argument even begin address premise requires talking git fortune teller know git sticking around popular another month year decade heck next century forgefed would able support next big thing whereas gitoveremail would find work interoperate next kind version control system could zero work could lot know second two crucial difference see conclusion support git email effort support forgefed effort contribute either effort want diminish either effort interest seeing forgefed stuff succeed put forth fediverse work fundamentally federation email activitypub federate activitypub fediverse view two effort competing want help get camp moving forward sidebyside created may edt last updated jun edt cory slep fediverse comment
216,Lobsters,vcs,Git & VCS,Theory of the Pijul Version Control System,https://pijul.org/manual/theory.html,theory pijul version control system,file generalised arbitrary graph line pushout paper mimram di giusto yoneda lemma category set category functors natural transformation presheaves conflicting nonconflicting file unrecord npcomplete approximation algorithm applying unapplying patch,theory pijul actually quite simple even though requires great care implementation order get correct algorithmic complexity pijul file generalised arbitrary graph line different kind label edge representation edge line line b mean come b file global data structure repository appendonly sense patch never delete line line deletion file implemented change label edge pointing line hidden pijul subcommand info pijul info debug dump entire graph file graphviz dot format one branch repository called debugbranch usually debugmaster default idea motivated notion category theory called pushout pushout seen merge two operation originally many idea behind theory pijul come paper mimram di giusto showing generalise flat file make pushouts word show close relative representation file pijul smallest generalisation standard file handle conflict modulo caveat paper nt handle line deletion multiple file want learn category theory good starting point try understand yoneda lemma roughly show relate category operation related set important particular set wellunderstood category concept required understand lemma mostly category important example set category functors natural transformation finally presheaves one important algorithm pijul one output generalised file actual ondisk file conflicting nonconflicting file two following condition met graph acyclic contains path passing vertex vertex v incoming edge v label alive v deleted task presenting file user relatively straightforward go along path output alive vertex else say file conflict presenting state file user intelligible way obvious major benefit approach compared validstateonly approach git patchesonly approach darcs conflict like normal state remove one side conflict instance using unrecord conflict disappears create patch solves conflict one context patch solve conflict context implies particular conflict reappear alice deletes block text bob writes inside block parallel merge result deleted context alice try apply bob patch bob side thing little complicated situation look different alice aware bob line deleted line case pijul detects conflict side reconstructs minimal context one line around bob line produce completely equivalent repository side one fundamental promise patch commutation context line alive deleted incoming edge called zombie pijul source code solving zombie conflict relatively straightforward produce patch setting label incoming edge vertex value however order solve ordering conflict need add new edge complicated reason related algorithmic complexity pijul chooses break edge two half adding new vertex middle also coincidentally yield simpler patch format since patch add vertex change edge label enough sometimes solving conflict involves ordering line previously unordered alice bob conflict two line b solve conflict opposite order ie alice writes ab bob ba union edits cyclic since alice add edge b bob add edge b producing patch done comparing actual file disk output generalised file algorithmically hard problem actually npcomplete number patch involved conflict increase one major source hardness user might want change order side conflict another one different side might line content might forced choose one side pijul solves using approximation algorithm effect producing minimal patch constant factor solving conflict instead absolute minimum addition difficulty number challenge implementing diff algorithm conflict detect conflict solved one side deleted others side edited applying unapplying patch compared previous task relatively easy applying patch almost like computing union two set patch contain enough information make operation reversible however order get correct algorithmic complexity thing take care particular patch deletes line pijul introduces extra edge jump deleted part thanks trick complexity outputting algorithm therefore also diff depend size repository history unapplying patch deleted line make sure extra edge deleted might sometimes need add new one connect newly undeleted line alive part graph else might skipped outputting algorithm
217,Lobsters,vcs,Git & VCS,"What is a fork, really, and how GitHub changed its meaning",https://drewdevault.com/2019/05/24/What-is-a-fork.html,fork really github changed meaning,disclaimer sourcehut email hundred kernel tree like torvaldslinux forked p requestpull,fork button github little number next depositing dopamine brain bit misleading github coopted meaning fork trick participating platform wellintentioned way sake pull request feature ultimately design selfserving cause friction contributor venture github sandbox rest software development ecosystem let clarify fork really mean without github concept one difference truly discover git distributed version control system disclaimer founder sourcehut product competes github embrace bazaar model described article github fork refers copy repository used contributor stage change like propose upstream prior github many place still today call repository personal branch personal branch need published useful git clone locally make change without pushing public hosted repository using email send change local unpublished repository consideration upstream outside github imitator contributor project published version repository online skipping step saving time case however useful publish personal branch online often done team people working longlived branch later propose upstream example working riscv port musl libc give u space collaborate work preparing change eventually proposed upstream well place interested tester obtain experimental work try also done individual greg kroahhartman linux branch useful testing upcoming change linux kernel greg alone publishing repo like fact hundred kernel tree like act staging area longterm workstreams maintainer many subsystem kernel change repository gradually flow upwards towards main tree torvaldslinux precise meaning linux rather loose context argument could made torvaldslinux linux definition capture lts branch many distros also apply patch top torvalds perhaps sourcing maintainer driver need bugfix maintain independent tree periodically pull lump sum change tree meaning simple definition might include version linux installed computer either ambiguity feature tree valid definition linux right sense git distributed idea canonical upstream written stone way github suggests might opensource software collaborative endeavour make jim branch important john branch john branch definitely important bugfixes need fact branch based jim patch cherrypicked john couple fix mixed may fact best version software git community get along without github model fork design allowed largest important project world flourish git explicitly designed around model refer bazaar model metaphor hopefully fairly obvious point another model github embodies instead cathedral model project central home centralized governance run small number people cathedral necessarily depend github idea fork pull request construct cathedral emaildriven development model github bazaar option basically absent introduction said github attempt replace existing meaning fork forking actually mean consider project cathedral model happens schism church answer contributor take code put new branch somewhere stake flag ground rename commit maintaining entirely independently original project encourage contributor new old alike abandon old dogma favor point history begin diverge new contingent pull patch denied upstream start big refactoring mold vision project forked well known example ffmpeg forked create libav usually traumatic event project repercussion last year precise consideration go forking project repercussion address musing better suited separate article fork meant github meaning still used today albeit ambiguously fork already meaning github adopt model answer often centralization power github proprietary commercial service ultimate goal turn profit design github fork pull request model creates cathedral keep people platform way bazaar would distributed version control system like git built distributed communication protocol like email hard disrupt centralized service github designed model parting note would like clarify condemnation github still use service project appreciate important role github played popularization open source however think important examine service depend strive understand motivation design also hope reader view software ecosystem interesting lens read article thank reading p know github also captured meaning pull request git requestpull tool git requestpull prepares email ask recipient fetch change public repository integrate branch used patch insufficient example linux subsystem maintainer want ship large group change torvalds next kernel release original version distributed bazaarlike whereas github centralized make stay platform
218,Lobsters,vcs,Git & VCS,Regain control of branches with git rebase --onto,https://headway.io/blog/regain-control-of-branches-with-git-rebase-onto/,regain control branch git rebase onto,,rebasing branch git process developer work challenging time get commits exactly hoping end git nt perfect git rebase onto help tame branch work non standard rebasing git rebase onto let u little choosy commits want easily handle complicated traditional rebase workstraditional rebases without onto flag pretty easy understand commits get applied head branch originally created working brach work majority case sometimes head base branch faulty testing want move feature branch one commit following example pretty contrived think git rebase onto applicable number situation testing large feature branch moving feature branch one base another base reason use git rebase onto include fixing mistake moving feature feature branch onto base branch kind git rebase onto friend need scalpel git rebase easily reproduce bunch commits repo make easy work quick bash script generate ruby file commit bunch time make git world consistent â â codeâ linenumbers languageshell â â â â binbash â â â â function createbasicgitrepo â â â â echo git rebase great â â mkdir gitexample â â cd gitexample â â git init â â mkdir lib â â touch libmythingrb â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit commit â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit commit â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit commit â â git checkout b myfeaturebranch â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit feature commit â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit feature commit â â git checkout master â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit commit â â echo class mything def mymethod end end tee libmythingrb â â git add libmythingrb â â git commit commit â â â â â â createbasicgitrepo â â repo see lib directory well file called mythingrb commits commits master branch commits feature branch based third commit master branch sha repo repo different least commit message easily follow object identifiersas quick aside let talk object identifier git second object identifier usually identifies commit often call sha also talking branch refer set work branch name talking collection commit make reference head collection commit name branch object identifier valid argument rebase rebase branch name sha tag long identifies commit valid argument rebase git rebase two version git rebase onto binary ternary function also written git rebase git rebase git rebase two argument version git rebase onto used move set commits one one object identifier arbitrary object identifier word want move set commits one commit arbitrary commit part helpful nt want move commits top branch reason ca nt feature branch top master also useful release branch need maintain work across multiple branch like think git rebase git rebase want go want go object identifier place want commits go object identifier branch currently sitting example case git rebase onto want work top commit sha currently commit sha bad crazy complicated case took change feature commit feature commit make sure commits applied see git rebase three argument version git rebase onto little powerful useful always tend use really messed something pretty nifty reason use fact certain ever used something entirely useful git repository either way could useful point one want move set commits one object identifier another object identifier want select certain amount commits branch masterfully easily cut commit g feature branch make pretty easy want git rebase onto want go chosen commit example could git rebase onto commit want commit top commit thing note git rebase leaf head detached state save state need name branch something example generated using quick bash script generates commits time though commit sha object identifier different thanks git feel free check bash script play around git commit rebase onto take getting used powerful tool really helped minimize git pain learn git rebasing git rebase documentation http gitscmcomdocsgitrebase git rebase tutorial http contentpivotaliobloggitrebaseonto
220,Lobsters,vcs,Git & VCS,Mercurial Python 3 beta,https://www.mercurial-scm.org/wiki/Release5.0,mercurial python beta,mercurial release new feature python support beta bugtracker updated window installers inno setup exe installer change new experimental feature notable feature improvement bug fix backwards compatibility change internal api change,mercurial release overview release new feature uirelativepaths option getting relative path output command enabled uitweakdefaults enabled expectsize revset error revset unexpected number element config template function getting config value negrev template keyword show negative revision number convenient usually shorter positive number note le stable hg uncommit allowdirtyworkingcopy option hg shelve keep option shelf also leaf working directory unchanged hg diff include specified file subrepos hg recover noverify option python support beta mercurial beta level support running python mercurial distribution extension bundled work python version use mercurial python invoke setuppy python interpreter set python variable python interpreter invoking makefile eg setuppy install make installhome party extension likely need ported support running python attempt run many existing extension python powered mercurial result extension loading failure see page mercurial test suite pas rate running python anticipate still many python bug lingering mercurial please report python issue using instruction bugtracker package mercurial distribute user recommend making python default time python yet well tested window likely several lingering issue window compared linux macos unixlike platform updated window installers window installer packaging transitioned away adhoc process employed individual contributor personal machine occurring reproducible infrastructure driven code mercurial repository transition enable window packaging releasing reliable reproducible part transition change window installers inno setup exe installer change python upgraded addpathexe removed inno installer update path via pascal script part installer dulwich package upgraded version keyring package upgraded version pygments package upgraded version package included msvc runtime dlls upgraded version various tcltk python package included making python distribution complete package longer included required mercurial year known issue distutils package broken python pyd dll extension module support library installed standalone file instead bundled libraryzip file behavior consistent installers new experimental feature notable feature improvement improved color scheme histedit curse interface making consistent curse hunk selector bug fix histedit curse interface improved support non ascii character backwards compatibility change internal api change add pas around uipathfn use instead mrel api addremove pas around uipathfn use instead muipath api branchmap drop branchcachesetdefault api branchmap remove dict interface branchcache class api forget pas around uipathfn use instead mrel api largefiles use uipathfn instead match rel uipath api match delete unused ab api match delete unused rel api match delete unused root cwd argument always never exact api match delete unused root cwd argument constructor api match delete unused uipath uipathrelative api match remove unused exact argument api memctx rename constructor argument copied copysource api patch accept second matcher applies copy source api patch let caller pas rootfiltering matcher api patch pas context object diffhunks api patch replace prefix relroot argument pathfn api remove pas around uipathfn use instead mrel api revset leverage getintrange helper relationsubscript operation api scmutil delete nowunused origpath api scmutil remove special handling pat matchandpats api subrepo adjust subrepo prefix calling subrepoadd api subrepo adjust subrepo prefix calling subrepoaddremove api subrepo adjust subrepo prefix calling subrepoarchive api subrepo adjust subrepo prefix calling subrepodiff api subrepo adjust subrepo prefix calling subrepoforget api subrepo adjust subrepo prefix calling subreporemovefiles api subrepo avoid calculating subrepo prefix twice cat api templatekw move getrenamedfn scmutil api
221,Lobsters,vcs,Git & VCS,Learn to change history with git rebase,https://git-rebase.io/,learn change history git rebase,amending last commit diff git agreetingtxt bgreetingtxt new file mode index devnull bgreetingtxt fixing older commits tip squashing several commits one tip tip splitting one commit several main getname main diff git amainc bmainc index amainc bmainc stage hunk n q e split hunk stage hunk n q j j g e tip reordering commits click help resolving conflict git pull rebase using git rebase rebase resolving conflict help broke,amending last commit let start something simple fixing recent commit let add file sandbox make mistake echo hello wrold greetingtxt git add greetingtxt git commit add greetingtxt fixing mistake pretty easy edit file commit amend like echo hello world greetingtxt git commit amend specifying automatically stage ie git add file git already know amend squash change recent commit save quit editor chance change commit message like see fixed commit running git show commit head master author drew devault sir cmpwncom date sun apr add greetingtxt diff git agreetingtxt bgreetingtxt new file mode index devnull bgreetingtxt hello world fixing older commits amending work recent commit happens need correct older commit let start setting sandbox accordingly echo hello greetingtxt git add greetingtxt git commit add greetingtxt echo goodbye world farewelltxt git add farewelltxt git commit add farewelltxt look like greetingtxt missing world let write commit normally fix echo hello world greetingtxt git commit fixup greetingtxt file look correct history could better let use new commit fixup last one need introduce new tool interactive rebase going edit last three commits way run git rebase interactive open text editor something like pick add greetingtxt pick add farewelltxt pick fixup greetingtxt rebase onto command command p pick commit use commit f fixup commit like squash discard commit log message rebase plan editing file instruct git edit history trimmed summary detail relevant part rebase guide feel free skim full summary text editor save close editor git going remove commits history execute line one time default going pick commit summoning heap adding branch nt edit file end right back started picking every commit asis going use one favorite feature fixup edit third line change operation pick fixup move immediately commit want fix pick add greetingtxt fixup fixup greetingtxt pick add farewelltxt tip also abbreviate f speed thing next time save quit editor git run command check log verify result git log oneline head master add farewelltxt add greetingtxt squashing several commits one work may find useful write lot commits reach small milestone fix bug previous commits however may useful squash commits together make cleaner history merging work master use squash operation let start writing bunch commits copy paste want speed git checkout b squash c h e l l w r l echo c squashtxt git add squashtxt git commit add c squashtxt done lot commits make file say hello world let start another interactive rebase squash together note checked branch try first quickly rebase commits since branched using git rebase master result pick add h squashtxt pick add e squashtxt pick add l squashtxt pick add l squashtxt pick add squashtxt pick add squashtxt pick add squashtxt pick add w squashtxt pick add squashtxt pick add r squashtxt pick add l squashtxt pick add squashtxt rebase onto command command p pick commit use commit squash commit use commit meld previous commit tip local master branch evolves independently remote master branch git store remote branch originmaster combined trick git rebase originmaster often convenient way rebase commits nt merged upstream yet going squash change first commit change every pick operation squash except first line like pick add h squashtxt squash add e squashtxt squash add l squashtxt squash add l squashtxt squash add squashtxt squash add squashtxt squash add squashtxt squash add w squashtxt squash add squashtxt squash add r squashtxt squash add l squashtxt squash add squashtxt save close editor git think moment open editor revise final commit message see something like combination commits commit message add h squashtxt commit message add e squashtxt commit message add l squashtxt commit message add l squashtxt commit message add squashtxt commit message add squashtxt commit message add squashtxt commit message add w squashtxt commit message add squashtxt commit message add r squashtxt commit message add l squashtxt commit message add squashtxt please enter commit message change line starting ignored empty message abort commit date sun apr interactive rebase progress onto last command done command done squash add l squashtxt squash add squashtxt command remaining currently rebasing branch squash change committed new file squashtxt default combination commit message squashed leaving like almost always want old commit message may useful reference writing new one though tip fixup command learned previous section used purpose discard message squashed commits let delete everything replace better commit message like add squashtxt content hello world please enter commit message change line starting ignored empty message abort commit date sun apr interactive rebase progress onto last command done command done squash add l squashtxt squash add squashtxt command remaining currently rebasing branch squash change committed new file squashtxt save quit editor examine git log success commit head squash author drew devault sir cmpwncom date sun apr add squashtxt content hello world move let pull change master branch get rid scratch one use git rebase like use git merge avoids making merge commit git checkout master git rebase squash git branch squash generally prefer avoid using git merge unless actually merging unrelated history two divergent branch git merge useful record merged course normal work rebase often appropriate splitting one commit several sometimes opposite problem happens one commit big let look splitting time let write actual code start simple c still copypaste snippet shell quickly cat eof mainc int main int argc char argv return eof commit first git add mainc git commit add c program skeleton next let extend program bit cat eof mainc include stdioh const char getname static char buf scanf buf return buf int main int argc char argv printf name const char name getname printf hello n name return eof commit ready learn split git commit flesh c program first step start interactive rebase let rebase commits git rebase giving u rebase plan pick add c program skeleton pick flesh c program rebase onto command command p pick commit use commit e edit commit use commit stop amending change second commit command pick edit save close editor git think second present stopped flesh c program amend commit git commit amend satisfied change run git rebase continue could follow instruction add new change commit instead let soft reset running git reset head run git status see uncommits latest commit add change working tree last command done command done pick add c program skeleton edit flesh c program command remaining currently splitting commit rebasing branch master working directory clean run git rebase continue change staged commit use git add update committed use git restore discard change working directory modified mainc change added commit use git add andor git commit split going interactive commit allows u selectively commit specific change working tree run git commit p start process presented following prompt diff git amainc bmainc index amainc bmainc include stdioh const char getname static char buf scanf buf return buf int main int argc char argv printf name const char name getname printf hello n name return stage hunk n q e git presented one hunk ie single change consider committing one big though let use command split hunk smaller part split hunk include stdioh const char getname static char buf scanf buf return buf int main int argc char argv stage hunk n q j j g e tip curious option press summarize hunk look better single selfcontained change let hit answer question stage hunk q quit interactive session proceed commit editor pop ask enter suitable commit message add getname function c program please enter commit message change line starting ignored empty message abort commit interactive rebase progress onto last command done command done pick add c program skeleton edit flesh c program command remaining currently splitting commit rebasing branch master change committed modified mainc change staged commit modified mainc save close editor make second commit could another interactive commit since want include rest change commit git commit prompt user name git rebase continue last command tell git done editing commit continue next rebase command run git log see fruit labor git log oneline head master prompt user name add getname function c program add c program skeleton reordering commits one pretty easy let start setting sandbox echo goodbye farewelltxt git add farewelltxt git commit add farewelltxt echo hello greetingtxt git add greetingtxt git commit add greetingtxt echo inquirytxt git add inquirytxt git commit add inquirytxt git log look like head master add inquirytxt add greetingtxt add farewelltxt clearly order let interactive rebase past commits resolve run git rebase rebase plan appear pick add farewelltxt pick add greetingtxt pick add inquirytxt rebase onto command command p pick commit use commit line reordered executed top bottom fix straightforward reorder line order wish commits appear look something like pick add greetingtxt pick add inquirytxt pick add farewelltxt save close editor git rest note possible end conflict practice click help resolving conflict git pull rebase writing commits branch branch updated upstream say remote origin normally git pull create merge commit respect git pull behavior default equivalent git fetch origin branch git merge origin branch assumes local branch branch configured track branch gt branch origin remote ie git config branch branch remote origin git config branch branch merge refsheads branch another option often useful lead much cleaner history git pull rebase unlike merge approach equivalent following git fetch origin git rebase origin branch merge approach simpler easier understand rebase approach almost always want understand use git rebase like set default behavior like git config global pullrebase true technically applying procedure discus next section let explain mean deliberately using git rebase rebase ironically feature git rebase use least one named rebasing branch say following branch b c master e f g turn nt depend change commit e base master fix thus git rebase onto master noninteractive rebase default operation implicated commits pick simply replay commits top master history look like b c master g e f resolving conflict detail resolving merge conflict beyond scope guide keep eye another guide future assuming familiar resolving conflict general specific apply rebasing sometimes get merge conflict rebase handle like merge conflict git set conflict marker affected file git status show need resolve mark file resolved git add git rm however context git rebase two option aware first complete conflict resolution rather git commit like use addressing conflict arise git merge appropriate command rebasing git rebase continue however another option available git rebase skip skip commit working wo nt included rebase common noninteractive rebase git nt realize commit pulled branch updated version commit conflict branch help broke doubt rebasing hard sometimes made mistake lost commits needed git reflog save day running command show every operation changed ref reference branch tag line show old reference pointed git cherrypick git checkout git show use operation git commits thought lost
223,Lobsters,vcs,Git & VCS,"Matryoshka, a bash script for making git submodules management less hassle",https://github.com/t89/matryoshka,matryoshka bash script making git submodules management le hassle,disclaimer use risk held responsible data loss please let know installation setup setup matryoshka locally creating within setup submodule run unstaged uncommitted autocommit work author license license support opensource geekygent like hear,linear submodule count increase generally accompanied exponential growth headache keeping git submodules date monotonous importantly interruptive work managing dependency nt keep productive matryoshka automate submodule update enable run without losing focus real task disclaimer use risk held responsible data loss encounter trouble though please let know installation setup setup matryoshka locally clone repository enter matryoshka grant script permission executed assure git submodules setup properly command run least since adding latest module git submodule init git submodule update optional prefer script ready time without manually typing path suggest creating alias within bashrc add inside shell rc file alias matryoshka pathtomatryoshkamatryoshkash depending setup may restart reload shell afterwards setup submodule enable colleague access script right within repository add submodule optional containing subdirectory mkdir tool cd tool check staging area uncommit change following change staged automatically git submodule add http matryoshka git submodule update init git commit add matryoshka submodule run enter repo directory call script bash pathtomatryoshkash use convenient alias presented list available submodules select specific one decide would like update leave change unstaged uncommitted generate commit updated submodule individually autocommit work matryoshka check working directory dirty dirty stash created attached message submodule update date hash stash printed anything go wrong always grab change using hash iterate submodules creating dedicated commit updated module commitmsg follows following style update submodulename shortenedhash popping stash author license project licensed mit license see license file detail support framework code provided asis need help suggestion contact anytime opensource geekygent like hear got suggestion please feel free share
224,Lobsters,vcs,Git & VCS,Framework for pre-commit hooks (git),https://pre-commit.com/,framework precommit hook git,many language filtering file type overriding language version developing hook interactively supported language conda local support docker support repository dockerimage local fail local golang support node support bug cpython perl cpan install argument format understood support python support pythonvenv venv support ruby support rust cargo example support swift support pygrep regular expression support script support system support precommit autoupdate option precommit clean option precommit gc option precommit inittemplatedir directory option precommit install option precommit installhooks option supported language precommit migrateconfig option precommit run hookid option run precommit sampleconfig option precommit tryrepo repo option precommit uninstall option running migration mode temporarily disabling hook precommit commits postcommit precommit merges precommit clean merges premergecommit precommit push email protected precommit commit message commitmsg preparecommitmsg precommit switching branch postcheckout confining hook run certain stage precommit install option passing argument hook argument pattern hook repository local hook creating new hook automatically enabling precommit repository email protected filtering file type identify tag extension naming convention tag shebang submit pull request guide ensuring compatibility regular expression regular expression verbose overriding language version nodeenv rubybuild top level badging repository usage continuous integration managing ci cache xdg base directory specification travisci example appveyor example azure pipeline example email protected github action example see official precommit github action azure pipeline email protected gitlab ci example gitlab caching best practice circleci example azure pipeline chriselion usage tox tox email protected email protected email protected using latest version repository,precommit currently support hook written many language long git repo installable package gem npm pypi etc expose executable used precommit git repo support many languageshooks want hook must exit nonzero failure modify file git repo containing precommit plugins must contain precommithooksyaml file tell precommit id id hook used precommitconfigyaml name name hook shown hook execution entry entry point executable run entry also contain argument overridden entry language language hook tell precommit install hook file optional default pattern file run exclude optional default exclude file matched file type optional default file list file type run see filtering file type excludetypes optional default exclude file matched type alwaysrun optional default false true hook run even matching file verbose optional true force output hook printed even hook pass new passfilenames optional default true false argument passed hook requireserial optional default false true hook execute using single process instead parallel new description optional default description hook used metadata purpose languageversion optional default default see overriding language version minimumprecommitversion optional default allows one indicate minimum compatible precommit version args optional default list additional parameter pas hook example id trailingwhitespace name trim trailing whitespace description hook trim trailing whitespace entry trailingwhitespacefixer language python type text developing hook interactively since repo property precommitconfigyaml refer anything git clone understands often useful point local directory developing hook precommit tryrepo streamlines process enabling quick way try repository one might work interactively note may need provide commitmsgfilename using command hook type preparecommitmsg commitmsg new commit longer necessary tryrepo local directory precommit clone tracked uncommitted change workhookrepo git checkout originmaster b feature make change new commit longer necessary tryrepo another terminal tab workotherrepo precommit tryrepo hookrepo foo verbose allfiles using config repos repo hookrepo rev hook id foo info initializing environment hookrepo foo passed hook id foo duration hello foo hook supported language conda new hook repository must contain environmentyml file used via conda env create file environmentyml create environment conda language also support additionaldependencies pas value directly conda install language therefore used local hook support conda hook work long systeminstalled conda binary miniconda tested linux macos window docker hook repository must dockerfile installed via docker build running docker hook requires running docker engine host configuring docker hook entry correspond executable inside docker container used override default container entrypoint docker cmd run precommit pass file list argument run container command docker allows use language supported precommit builtin precommit automatically mount repository source volume using v pwd src rw z set working directory using workdir src support docker hook known work system working docker executable tested linux macos hook run via known unable make modification file see repository example dockerbased hook dockerimage lightweight approach docker hook dockerimage language us existing docker image provide hook executables dockerimage hook conveniently configured local hook entry specifies docker tag use image entrypoint defined nothing special needed hook executable container specify entrypoint want change entrypoint specify well entry example id dockerfileprovidesentrypoint name language dockerimage entry latest id name language dockerimage entry entrypoint myexe latest alternative equivalent solution id name language dockerimage entry latest myexe fail new lightweight language forbid file filename fail language especially useful local hook entry printed hook fails suggested provide brief description name verbose fix instruction entry example prevents file except ending rst added changelog directory repo local hook id changelogsrst name changelogs must rst entry changelog filename must end rst language fail file changelog rst golang hook repository must contain go source code installed via go get precommit create isolated gopath hook entry match executable get installed gopath bin directory support golang hook known work system go installed tested linux macos window node hook repository must packagejson installed via npm install installed package provide executable match entry usually bin packagejson support node hook work without systemlevel dependency tested linux macos may work cygwin new window supported node hook currently due bug cpython perl new perl hook installed using system installation cpan cpan package installer come perl hook repository must something cpan support typically makefilepl buildpl us install executable use entry definition hook repository installed via cpan installed file stored precommit cache polluting perl installation specifying additionaldependencies perl use install argument format understood cpan support perl hook currently require preexisting perl installation including cpan tool path tested linux macos window python hook repository must installable via pip install usually either setuppy pyprojecttoml installed package provide executable match entry usually consolescripts script setuppy support python hook work without systemlevel dependency tested linux macos window cygwin pythonvenv new new pythonvenv language alias python since virtualenv creates equivalently structured environment previously language created environment using venv module language removed eventually suggested use python instead support python hook work without systemlevel dependency tested linux macos window cygwin ruby hook repository must gemspec installed via gem build gemspec gem install gem installed package produce executable match entry usually executables gemspec support ruby hook work without systemlevel dependency tested linux macos may work cygwin rust new rust hook installed using system installation cargo rust official package manager hook repository must cargotoml file produce least one binary example whose name match entry definition hook repo installed via cargo install bin binary stored precommit cache polluting userlevel cargo installation specifying additionaldependencies rust use syntax packagename packageversion specify new library dependency used build hook repo special syntax cli packagename packageversion cli dependency built separately binary made available use hook support rust hook currently require preexisting rust installation tested linux window macos swift hook repository must packageswift installed via swift build c release entry match executable created building repository support swift hook known work system swift installed tested linux macos pygrep new crossplatform python implementation grep pygrep hook quick way write simple hook prevents commits file matching specify regex entry entry may python regular expression case insensitive regexes apply flag start entry use args new multiline match use args multiline support pygrep hook supported platform precommit run script script hook provide way write simple script validate file entry path relative root hook repository hook type given virtual environment work need additional dependency consumer must install manually support support script hook depend script system system hook provide way write hook systemlevel executables nt supported language special environment requirement nt allow run isolation pylint hook type given virtual environment work need additional dependency consumer must install manually support support system hook depend executables precommit command take following option color auto always never whether use color output default auto new overridden using precommitcolor auto always never disabled using termdumb c config config config path alternate config file h help show help available option precommit autoupdate option autoupdate precommit config latest repos version option bleedingedge update bleeding edge default branch instead latest tagged version default behaviour freeze new store frozen hash rev instead tag name repo repo new update repository new option may specified multiple time sample invocation using precommitconfigyaml repos repo http githubcomprecommitprecommithooks rev hook id trailingwhitespace repo http githubcomasottilepyupgrade rev hook id pyupgrade args default update latest tag default branch precommit autoupdate default pick tag updating http githubcomprecommitprecommithooks updating updating http githubcomasottilepyupgrade updating grep rev precommitconfigyaml rev rev update specific repository latest revision default branch precommit autoupdate bleedingedge repo http githubcomprecommitprecommithooks updating http githubcomprecommitprecommithooks updating grep rev precommitconfigyaml rev rev update frozen version precommit autoupdate freeze updating http githubcomprecommitprecommithooks updating frozen updating http githubcomasottilepyupgrade updating frozen grep rev precommitconfigyaml rev frozen rev frozen precommit clean option clean cached precommit file option additional option precommit gc option new clean unused cached repos precommit keep cache installed hook repository grows time command run periodically clean unused repos cache directory option additional option precommit inittemplatedir directory option new install hook script directory intended use git config inittemplatedir option precommit premergecommit prepush preparecommitmsg commitmsg postcheckout postcommit hooktype precommit premergecommit prepush preparecommitmsg commitmsg postcheckout postcommit hook type install example useful invocation git config global inittemplatedir gittemplate precommit inittemplatedir gittemplate whenever repository cloned created hook set already precommit install option install precommit script option f overwrite replace existing git hook precommit script installhooks also install environment available hook rather first executed see precommit installhooks precommit premergecommit prepush preparecommitmsg commitmsg postcheckout postcommit hooktype precommit premergecommit prepush preparecommitmsg commitmsg postcheckout postcommit specify hook type install allowmissingconfig hook script permit missing configuration file example useful invocation precommit install default invocation installs precommit script alongside existing git hook precommit install installhooks overwrite idempotently replaces existing git hook script precommit also installs hook environment precommit installhooks option install missing environment available hook unless command install installhooks executed hook environment created first time hook called hook initialized separate environment appropriate language hook written see supported language command install precommit script install script along hook environment one command use precommit install installhooks option additional option precommit migrateconfig option new migrate list configuration new map configuration format option additional option precommit run hookid option run hook option hookid specify single hookid run hook allfiles run file repo file file file specific filename run hook fromref fromref toref toref run file changed fromref toref git new prior argument source origin hookstage stage select stage run showdiffonfailure hook fail run git diff directly afterward v verbose produce hook output independent success include hook id output example useful invocation precommit run precommit run default committing run hook currently staged file precommit run allfiles run hook file useful invocation using precommit ci precommit run run hook staged file git lsfiles py xargs precommit run file run hook py file repository precommit run fromref head toref head run file changed head head form useful leveraged prereceive hook precommit sampleconfig option produce sample precommitconfigyaml option additional option precommit tryrepo repo option new try hook repository useful developing new hook tryrepo also used testing repository adding configuration tryrepo print configuration generates based remote hook repository running hook option repo required clonable hook repository local path disk ref ref manually select ref run otherwise head revision used precommit tryrepo also support available option precommit run example useful invocation precommit tryrepo http githubcomprecommitprecommithooks run hook latest revision precommitprecommithooks precommit tryrepo pathtorepo run hook repository disk precommit tryrepo precommithooks run hook configured local precommithooks repository see precommit run useful run invocation also supported precommit tryrepo precommit uninstall option uninstall precommit script option precommit premergecommit prepush preparecommitmsg commitmsg hooktype precommit premergecommit prepush preparecommitmsg commitmsg hook type uninstall running migration mode default existing hook precommit install install migration mode run existing hook hook precommit disable behavior pas f overwrite install command decide use precommit precommit uninstall restore hook state prior installation temporarily disabling hook hook perfect sometimes may need skip execution one hook precommit solves querying skip environment variable skip environment variable comma separated list hook id allows skip single hook instead noverifying entire commit git commit foo precommit commits running hook unstaged change lead falsepositives falsenegatives committing precommit run staged content file temporarily saving content file commit time stashing unstaged change running hook new precommit used manage postcommit hook use postcommit hook precommit run precommit install hooktype postcommit precommit installed githookspostcommit postcommit hook fire commit succeeds used prevent commit happening use precommit instead since postcommit operate file hook must set alwaysrun repo local hook id postcommitlocal name post commit alwaysrun true stage postcommit precommit merges biggest gripe past precommit hook merge conflict resolution working large project merge often result hundred committed file need run hook file even touch often led running commit noverify allowed introduction real bug hook could caught precommit solves running hook file conflict manually edited conflict resolution also includes file automatically merged git git nt perfect often catch implicit conflict removed python import precommit clean merges new precommit used manage premergecommit hook use premergecommit hook precommit run precommit install hooktype premergecommit precommit installed githookspremergecommit hook fire merge succeeds merge commit created note need using least git added support premergecommit hook precommit push use prepush hook precommit run precommit install hooktype prepush precommit installed githooksprepush push precommit export following environment variable precommitfromref remote revision pushed new prior variable precommitsource precommittoref local revision pushed remote new prior variable precommitorigin precommitremotename new remote pushed example origin precommitremoteurl new url remote pushed example email protected precommitprecommit precommit commit message precommit used manage commitmsg hook use commitmsg hook precommit run precommit install hooktype commitmsg precommit installed githookscommitmsg commitmsg hook configured setting stage commitmsg commitmsg hook passed single filename file contains current content commit message validated hook exit nonzero commit aborted new precommit used manage preparecommitmsg hook use preparecommitmsg hook precommit run precommit install hooktype preparecommitmsg precommit installed githookspreparecommitmsg preparecommitmsg hook used create dynamic template commit message preparecommitmsg hook configured setting stage preparecommitmsg preparecommitmsg hook passed single filename file contains initial commit message eg git commit template modified hook editor shown hook may want check giteditor indicates editor launched hook exit nonzero commit aborted precommit switching branch new precommit used manage postcheckout hook use postcheckout hook precommit run precommit install hooktype postcheckout precommit installed githookspostcheckout postcheckout hook used perform repository validity check autodisplay difference previous head different set working dir metadata property since postcheckout nt operate file hook must set alwaysrun repo local hook id postcheckoutlocal name post checkout alwaysrun true stage postcheckout postcheckout hook three environment variable check work precommitfromref precommittoref precommitcheckouttype correspond first second third argument respectively normally passed regular postcheckout hook git confining hook run certain stage since defaultstages top level configuration property precommitconfigyaml file set stage default installing hook using hooktype option see precommit install option hook installed default run stage defined option instance precommit install hooktype prepush install default hook run push stage hook however confined stage setting stage property precommitconfigyaml stage property array contain commit mergecommit push preparecommitmsg commitmsg manual want hook installed default stage passed precommit install hooktype please set defaultstages top level configuration property desired stage also array new additional manual stage available one execution wo nt run hook context special stage useful taking advantage precommit crossplatform crosslanguage package management without running every commit hook confined stage manual executed running precommit run hookstage manual hookid passing argument hook sometimes hook require argument run correctly pas static argument specifying args property precommitconfigyaml follows repo http rev hook id args pas argument pattern hook writing custom hook hook expect receive args value list staged file example assuming precommitconfigyaml repo http githubcompathtoyourhookrepo rev hook id myhookscriptid args next run precommit script called pathtoscriptorsystemexe args property empty defined script called pathtoscriptorsystemexe repository local hook repositorylocal hook useful script tightly coupled repository make sense distribute hook script repository hook require state present built artifact repository app virtualenv pylint official repository linter nt precommit metadata configure repositorylocal hook specifying repo sentinel local local hook use language support additionaldependencies dockerimage fail pygrep script system enables install thing previously would require trivial mirror repository local hook must define id name language entry file type specified creating new hook example configuration local hook repo local hook id pylint name pylint entry pylint language system type python id checkx name check x entry bincheckxsh language script file x id scsslint name scsslint entry scsslint language ruby languageversion type sc additionaldependencies new precommit provides several hook useful checking precommit configuration enabled using repo meta repo meta hook id currently available meta hook checkhooksapply ensures configured hook apply least one file repository new checkuselessexcludes ensures exclude directive apply file repository new identity simple hook print argument passed useful debugging new automatically enabling precommit repository new precommit inittemplatedir used set skeleton git inittemplatedir option mean newly cloned repository automatically hook set without need run precommit install configure first set git inittemplatedir example using gittemplate template directory git config global inittemplatedir gittemplate precommit inittemplatedir gittemplate precommit installed homeasottilegittemplatehooksprecommit whenever clone precommit enabled repo hook already set git clone q email protected asottilepyupgrade cd pyupgrade git commit allowempty hello world check docstring first file check skipped check yaml file check skipped debug statement python file check skipped inittemplatedir us allowmissingconfig option precommit install repos without config skipped git init sample initialized empty git repository tmpsamplegit cd sample git commit allowempty initial commit precommitconfigyaml config file found skipping precommit master rootcommit initial commit filtering file type filtering type provides several advantage traditional filtering file errorprone regular expression file matched shebang even extensionless symlinks submodules easily ignored type specified per hook array tag tag discovered set heuristic identify library identify chosen small portable pure python library common tag find identify file symlink directory context precommit submodule executable whether file executable bit set text whether file look like text file binary whether file look like binary file tag extension naming convention tag shebang discover type file disk use identify cli identifycli setuppy file nonexecutable python text identifycli somerandomfile file nonexecutable text identifycli filenameonly somerandomfile echo file extension use supported please submit pull request type file evaluated filtering tag within type also evaluated using example file foo type file python match file match setuppy want match file path nt included type using existing hook need revert back file matching overriding type setting example using checkjson nonjson file id checkjson type file override type json file jsonmyext file also matched shebang type python exe starting usrbinenv also matched file exclude also exclude type necessary using excludetypes like use type compatibility older version guide ensuring compatibility regular expression pattern file exclude python regular expression matched research use feature python regexes support find regular expression becoming unwieldy due long list excluded included thing may find verbose regular expression useful one enable yaml multiline literal x regex flag id myhook exclude x overriding language version sometimes want run hook specific version language language default using system installed language example running hook specifies python precommit run hook using sometimes want default system installed version override perhook basis setting languageversion repo http githubcomprecommitmirrorsscsslint rev hook id scsslint languageversion tell precommit use ruby run scsslint hook valid value specific language listed python whatever system installed python interpreter value argument passed p virtualenv new window name translated py launcher call portability continue use name like py py even window node see nodeenv ruby see rubybuild new set defaultlanguageversion top level configuration control default version across hook language defaultlanguageversion force unspecified python hook run python force unspecified ruby hook run ruby ruby badging repository add badge repository show contributor user use precommit markdown precommit http imgshieldsiobadgepre commitenabledbrightgreen logoprecommit logocolorwhite http githubcomprecommitprecommit html href http githubcomprecommitprecommit img src http imgshieldsiobadgepre commitenabledbrightgreen logoprecommit logocolorwhite alt precommit style restructuredtext image http imgshieldsiobadgepre commitenabledbrightgreen logoprecommit logocolorwhite target http githubcomprecommitprecommit alt precommit asciidoc image http imgshieldsiobadgepre commitenabledbrightgreen logoprecommit logocolorwhite precommit linkhttps githubcomprecommitprecommit usage continuous integration precommit also used tool continuous integration instance adding precommit run allfiles ci step ensure everything stay tiptop shape check file changed may faster use something like precommit run fromref originhead toref head managing ci cache precommit default place repository store cacheprecommit configured two way precommithome set precommit use location instead xdgcachehome set precommit use xdgcachehomeprecommit following xdg base directory specification travisci example cache directory homecacheprecommit appveyor example cache userprofile cacheprecommit azure pipeline example note azure pipeline us immutable cache python version precommitconfigyaml hash must included cache key repository template see email protected job job precommit variable precommithome pipelineworkspace precommitcache step script echo vso tasksetvariable variablepy python vv task email protected input key precommit precommitconfigyaml py path precommithome github action example see official precommit github action like azure pipeline github action also us immutable cache name set py run echo setenv namepy python vv cut us action email protected path cacheprecommit key precommit envpy hashfiles precommitconfigyaml gitlab ci example see gitlab caching best practice fine tune cache scope myjob variable precommithome ciprojectdir cacheprecommit cache path precommithome circleci example like azure pipeline circleci also us immutable cache step run command cp precommitconfigyaml precommitcachekeytxt python version version precommitcachekeytxt restorecache key checksum precommitcachekeytxt savecache key checksum precommitcachekeytxt path cacheprecommit source chriselion usage tox tox useful configuring test ci tool precommit one feature tox clear environment variable test reproducible condition precommit requires environment variable must allowed passed cloning repos ssh repo email protected git requires sshauthsock variable otherwise fail info initializing environment email protected precommitprecommithooks unexpected error occurred calledprocesserror command usrbingit fetch origin tag return code expected return code stdout none stderr email protected permission denied publickey fatal could read remote repository please make sure correct access right repository exists check log homeasottilecacheprecommitprecommitlog add following tox testenv testenv passenv sshauthsock likewise cloning repos http http repo http githubcom might working behind corporate http proxy server case git requires httpproxy httpsproxy noproxy variable set clone may fail testenv passenv httpproxy httpsproxy noproxy using latest version repository precommit configuration aim give repeatable fast experience therefore intentionally nt provide facility unpinned latest version hook repository instead precommit provides tool make easy upgrade latest version precommit autoupdate need absolute latest version hook instead latest tagged version pas bleedingedge parameter autoupdate precommit assumes value rev immutable ref tag sha cache based using branch name head value rev supported represent state mutable ref time hook installation update automatically
226,Lobsters,vcs,Git & VCS,15 Git Commands You May Not Know,https://zaiste.net/15-git-commands-you-may-not-know/,git command may know,,
227,Lobsters,vcs,Git & VCS,Git power tools for daily use,https://nvie.com/posts/git-power-tools/,git power tool daily use,gittoolbelt quickly opening modified file set shell fixing last commit emptying last commit net result action appears last commit branch emptied back work tree splitting commit piece post blog,every developer favorite git trick use daily favorite one using long remember first mention command bundled gittoolbelt project like use need install like brew install nvietapgittoolbelt quickly opening modified file working branch often find need reopen file working git toolbelt project contains command show locally modified file report file still exist locally overview wo nt include deleted file git modified controllersfoopy readmemd super useful quickly open locally modified file editor definitely one mostused command throughout day quitting editor easily reopen file working way also include file modified index file git added already use flag also pas commit sha open file modified commit following alias set shell quickly opening specific set file vc vim locally modified file indexed vca vim locally modified file including one indexed vch vim file modified last commit head vc vim file modified secondlast commit fixing last commit probably familiar git commit amend incorporate currentlystaged change lastcommit effectively rewriting last commit toolbelt offer similar command called git fixup without prompting commit message like quicker version commit amend great way build commit incrementally typical flow look like git add p pick bit commit git commit git add p pick bit git fixup add last commit emptying last commit sometimes make mistake accidentally commit much something nt intend commit example extra file accidentally added patch within file nt want include fix empty last commit think emptying keeping commit message authordate info moving change back work tree technically softresets last commit mean remove last commit branch put back content commit work tree basically reverting state right committing file content nt changed git commit disappears add empty commit commit message author detail commit removed net result action appears last commit branch emptied back work tree command nondestructive since file remain untouched local change allows readding change use git add p select bit commit git fixup see previous section keep changing last commit effectively rebuilding scratch git delouse kept commit message author information around empty commit original commit info never lost nt reenter commit message whenever run git fixup make whole process super cheap typical flow git commit add login screen oops checked secret key let fix mistake git delouse retry adding stuff git add p time nt add secret key git fixup rewrite previous commit make mistake run git delouse start often want since none command destroy local change allows carefully craft commit content without risk losing data splitting commit piece also great way split commit example suppose adding bugfix also renamed variable clearer meaning submitting code review realize variable rename add lot noise actual change may decide good idea split commit two piece one atomically change variable name everywhere one fix bug point bugfix commit asking code review would work git commit bugfix login screen oops split one let start git delouse git add p pick bugfix bit git fixup git add p pick var rename bit git commit rename variable name clearer three command become indispensable daytoday git routine like let know post blog
228,Lobsters,vcs,Git & VCS,A hacker is wiping Git repositories and asking for a ransom,https://www.zdnet.com/article/a-hacker-is-wiping-git-repositories-and-asking-for-a-ransom/,hacker wiping git repository asking ransom,bitcoin address hundred victim counting github search abuse report failed way recover page related malware cybercrime coverage,hundred developer git source code repository wiped replaced ransom demand attack started earlier today appear coordinated across git hosting service github bitbucket gitlab still unclear happeningwhat known hacker remove source code recent commits vitcims git repository leaf ransom note behind asks payment bitcoin hacker claim source code downloaded stored one server give victim ten day pay ransom otherwise make code publicto recover lost code avoid leaking send u bitcoin btc bitcoin address contact u email admin gitsbackupcom git login proof payment unsure data contact u send proof code downloaded backed server dont receive payment next day make code public use otherwise payment requested bitcoin address time writing received fundshundreds victim countinga github search reveals least github repository ransomed far according bitcoinabusecom website track bitcoin address used suspicious activity abuse report address today first indexed site database abuse report include ransom note suggesting bitcoin address used coordinated attack aimed git account user fell victim hacker admitted using weak password github gitlab bitbucket account forgetting remove access token old apps nt used month common way online account usually get compromisedhowever evidence suggests hacker scanned entire internet git config file extracted credential used logins access ransom account git hosting service email zdnet kathy wang director security gitlab admitted root cause account compromise user reported stackexchange earlier todaywe identified source based support ticket filed stefan gabos yesterday immediately began investigating issue identified affected user account user notified result investigation strong evidence compromised account account password stored plaintext deployment related repository strongly encourage use password management tool store password secure manner enabling twofactor authentication wherever possible would prevented issue atlassian company owns bitbucket nt respond request comment started notifying customer whose account believed hacker gained illegal access also began sending security alert account login attempt faileda way recoverthe good news digging victim case member stackexchange security forum found hacker actually delete merele alters git commit header meaning code commits recovered casesinstructions recover mangled git repository available pageon twitter several important figure developer community currently urging victim contact support team github gitlab bitbucket paying ransom demand could way recover deleted repos private git repository likely compromised well doubt trigger lengthy investigation company might proprietary code potentially siphoned remote server related malware cybercrime coverage
229,Lobsters,vcs,Git & VCS,Heptapod: a project which aims to add Mercurial support to Gitlab CE,https://heptapod.net/,heptapod project aim add mercurial support gitlab ce,mercurial scm octobus mercurial bitbucket import facility roadmap using heptapod heptapodhost importing repository bitbucket fossheptapodnet installed heptapodhost fossheptapodnet octobus clever cloud abridged history original announcement octobus demonstration video presentation mercurial paris conference,heptapod community driven effort bring mercurial scm support started octobus company providing professional service around mercurial powerful intuitive bitbucket import facility heptapod active development check roadmap using heptapod commercial service heptapodhost commercial service opened public beta april already importing repository bitbucket service free charge beta june free open source software special place heart server free open source software project welcome free charge fossheptapodnet self hosting heptapod open source considered friendly fork gitlab community edition mit license installed self hosted online service heptapodhost fossheptapodnet joint effort octobus clever cloud hosting company abridged history prototype phase late early first foremost focus demonstrate modern mercurial concept evolve topic could fit gitlab branch merge request see original announcement octobus demonstration video stabilization phase starting prototype making heptapod usable practice several organisation leading particular public self hosting summarized presentation mercurial paris conference experimental phase longer term development better technical integration gitlab maintaining existing code base beginning effort catch recent gitlab version
230,Lobsters,vcs,Git & VCS,Git as a NoSql database,https://www.kenneth-truyers.net/2016/10/13/git-nosql-database/,git nosql database,git nosql database git blob git tree git commits immutable git reference mutable data efficiency versioning nosql connectivity transaction backup replication querying concurrency speed video tree size combining value transaction merging conclusion,git manpages state stupid content tracker probably used version control system world strange since describe source control system fact use git track type content create git nosql database example reason say stupid manpages make assumption content store underlying git model rather basic post want explore possibility using git nosql database keyvalue store could use file system data store use git add git commit save file saving document echo id name kenneth git add git commit added file reading document git show id name kenneth work using file system database path key value whatever store disadvantage need write data disk save git saving data multiple time file storage deduplicated lose benefit git provides u automatic data deduplication want work multiple branch time need multiple checked directory want rather bare repository one none file exist file system git database let look git data model plumbing command make work git nosql database git contentaddressable file system mean simple keyvalue store whenever insert content give back key retrieve content later let create content initialize repository mkdir myrepo cd myrepo git init save content echo id name kenneth git hashobject w stdin hashobject git plumbing command take content store database return key switch tell store content otherwise would calculate hash switch tell git read content input instead file key return based content run command machine see return exact content database read back git catfile p id name kenneth git blob keyvalue store one object blob one problem update update content key change would mean every version file remember different key want instead specify key use track version git tree tree solve two problem need remember hash object version possibility storing group file best way think tree like folder file system create tree follow two step create populate staging area git updateindex add cacheinfo write tree git writetree also give back sha read back tree git catfile p blob point object database look follows modify file follow step add blob echo id name kenneth truyers git hashobject w stdin create populate staging area git updateindex add cacheinfo write tree git writetree leaf u following situation two tree represent different state file help much since still need remember value tree get content git commits one level get commits commit hold piece key information author commit date created created message single tree object point one previous commits consider commits single parent commits multiple parent merge commits let commit tree commit first tree without parent echo commit version git committree commit second tree first commit parent echo commit version git committree p leaf u following state built complete history file could open repository git client see tracked correctly demonstrate output running git log git log stat commit version file changed insertion commit version file changed insertion get content file last commit git show id name kenneth truyers still though remember hash last commit object created part git object database one characteristic database store immutable object write blob tree commit never modify without changing key also delete least directly git gc command delete object dangling git reference yet another level git reference reference part object database part reference database mutable different type reference branch tag remote similar nature minor difference moment let consider branch branch pointer commit create branch write hash commit file system echo gitrefsheadsmaster branch master pointing first commit move branch issue following command git updateref refsheadsmaster leaf u following graph finally able read current state file git show id name kenneth truyers command keep working even add newer version file subsequent tree commits long move branch pointer latest commit seems rather complex simple keyvalue store however abstract thing client application specify branch key come back different post though want discus potential advantage drawback using git nosql database data efficiency git efficient come storing data mentioned blob content stored hash calculated try adding whole bunch file content empty git repository checking size git folder versus size disk notice git folder quite bit smaller stop git tree change file sub tree git create new sub tree reference tree affected following example show commit pointing hierarchy two sub folder want replace blob git replace item changed keep reference replacing blob different file committing change graph look follows new object marked red see git replaced necessary item referenced already existing item although git efficient reference existing data every small modification would result complete copy would still get huge repository mitigate automatic garbage collection process git gc run look blob remove blob instead store single copy base data together delta version blob way git still retrieve unique version blob need store data multiple time versioning get fully versioned system free versioning also come advantage deleting data ever seen example like sql database id name deleted kenneth ok simple record like usually whole story data might dependency data whether foreign key implementation detail want restore chance isolation git simply matter pointing branch different commit get back correct state database level record level another practice seen id street lastupdate town rd practice even le useful know updated information actually updated previous value whenever update data actually deleting data inserting new one old data lost forever git run git log file see changed changed git rich toolset use explore manipulate data focus code mean use data following nonexhaustive overview tool come top mind within basic git command use git diff find exact change two commits branch tag use git bisect find something stopped working change data use git hook get automatic change notification build fulltext index update cache publish data revert branch merge external tool use git client visualize data explore use pull request one github inspect data change merged gitinspector statistical analysis git repository tool work git work database nosql keyvalue store get usual advantage nosql store schemaless database store content want even json connectivity git work partitioned network put everything usb stick save data connected network push merge get back online advantage regularly use developing code could life saver certain use case transaction example committed every change file necessarily also commit various change single commit would make easy roll back change atomically later long lived transaction also possible create branch commit several change merge discard backup replication traditional database usually bit hassle create schedule full backup incremental backup since git already store entire history never need full backup furthermore backup simply executing git push push go anywhere github bitbucket selfhosted gitserver replication equally simple using git hook set trigger run git push every commit example git remote add replica git replicaservercom appgit cat githookspostcommit binsh git push replica fantastic use git database hold disadvantage well querying query key piece good news structure data folder way easily get content prefix query limit unless want full recursive search option build index specifically querying scheduled basis staleness concern use git hook update index soon commit happens concurrency long writing blob issue concurrency problem occurs start writing commits updating branch following graph illustrates problem two process concurrently try create commit case see second process modifies copy tree change actually working outdated tree commits tree lose change first process made story applies moving branch head time commit update branch head another commit might get could potentially update branch head wrong commit way counter locking writes reading copy current tree updating head branch speed know git fast context creating branch come commits per second actually fast writing disk time notice usually many commits per second writing code least running test local machine got limit commitssecond brandon keeper showed result video year ago got commits second seems line hardware advance may brought commitssecond enough lot application also theoretical maximum local development machine lot resource various factor affect speed tree size general prefer use lot subdirectory instead putting document directory keep write speed close maximum possible reason every time create new commit copy tree make change save modified tree although might think affect size well actually case running git gc make sure save delta instead two different tree let take look example first case blob stored root directory add file copy tree contains item add one save could potentially lengthy operation size tree second case level tree sub tree blob last level file case want add blob need copy entire hierarchy need copy branch lead blob following image show tree copied amended using sub folder instead copy tree entry copy tree entry quite bit faster data grows want use sub folder combining value transaction need commitssecond chance need able roll back individual basis case instead committing every change could commit several change one commit write blob concurrently could potentially write file concurrently disk commit save repository drawback want raw speed way go way solve add different backend git immediately flush content disk writes inmemory database first asynchronously flush disk implementing easy though testing solution using connect repository tried using voronbackend available opensource well variant us elasticsearch improved speed quite bit lose benefit able inspect data standard git tool merging another potentially pain point merging data different branch long merge conflict actually rather pleasant experience enables lot nice scenario modify data need approval go live run test live data need revert work isolation merging data essentially get fun branch get development different level problem merge conflict merging data rather difficult always able make handle conflict one potential strategy store merge conflict writing data read present user diff choose one correct nonetheless difficult task manage correctly conclusion git work nosql database well circumstance place time think particularly useful following case hierarchic data inherent hierarchical nature need able work disconnected environment need approval mechanism data aka need branching merging case good fit need extremely fast write performance need complex querying although solve indexing commit hook enormous set data write speed would slow even go use git nosql database let know thought
231,Lobsters,vcs,Git & VCS,Apache Software Foundation joins GitHub open source community,https://github.blog/2019-04-29-apache-joins-github-community/,apache software foundation join github open source community,making transition next,today excited welcome apache software foundation asf github apache world largest open source foundation million line code managed allvolunteer community member committers year history one billion line code committed across three million code commits apache made decision start integrating github repository tooling service solidifying integration year decided simplify work move git project github february apache migration github complete enabling project simple platform host review code collaborate project build software alongside million developer around world making transition working apache meet need better support open source project important work grateful impactful foundation migrate grow directly github transition completed apache focus building software community whether working individual open source maintainer contributor world largest open source foundation like apache github mission home developer supporting open source community addressing unique need helping open source project thrive detail news found press release next actively working many different community unique challenge transition plan contact u get involved
232,Lobsters,vcs,Git & VCS,"Bubble Activity Graph, a better commit list for busy people",https://www.staticobject.com/blog/introducing_the_bubble_activity_graph,bubble activity graph better commit list busy people,,bill driven challenge best quantify valuable question defy quantification possible instinct may awakened bill age soft stuffed bunny orthodontist guessing number jelly bean gumball machine
233,Lobsters,vcs,Git & VCS,Introducing Project Paper Cuts (2018),https://github.blog/2018-08-28-announcing-paper-cuts/,introducing project paper cut,introducing project paper cut feature request repository browser extension actively asking feedback refined github sindre sorhus ship follow along,github want build experience make easy intuitive possible developer best work know development team work little differently since possibly consider development practice turn community feedback data improve product feedback plan iterate exciting new way support variety workflow smaller issue find existing workflow usability nitpicks bother daily might part bigger product initiative wonderful diverse github telling u smaller frustration want know listening think frustrated paper cut anymore introducing project paper cut project paper cut dedicated working directly community fix small mediumsized workflow problem iterate uiux find way make quick improvement matter github always feedback channel influenced product though aim open transparent work listening email sale support twitter also looking wider github community creation selforganized feature request repository browser extension well actively asking feedback small thing irritate one big source inspiration u refined github browser extension fulltime open source developer sindre sorhus built great browser extension build improves github experience along fantastic community come together discus workflow build favorite feature project paper cut taken inspiration lot refined github addition building mostloved feature right github ship give idea scope project paper cut past month shipped internally fielding feedback spotlight fix impact least process friction discussion dependency shipping rapidly paper cut public changelog entry associated follow along seeing learning community working project paper cut forever change work build feature continue let community know hear building product help developer best work faster
234,Lobsters,vcs,Git & VCS,Can't Git no Satisfaction: Why We Need a New-Gen Source Control,https://www.rookout.com/cant-git-no-satisfaction-why-we-need-a-new-gen-source-control/,ca nt git satisfaction need newgen source control,transition cloud git business singleprocess application multiprocess application monorepo v multirepo shot fired multirepos suck git submodules git subtree law effect take prisoner monorepos suck still hope multirepos gitmeta meta gitslave datree cake git,remember good old day enterprise software everything installed onpremises install application set big vertically scalable server would execute single process written cc java net well know day long goneeverything changed transition cloud saas today instead comprising single vertically scalable process application comprise multiple horizontally scalable process model first pioneered borg netflix nowadays though longer large enterprise access microservice infrastructure kubernetes serverless made microservices viable accessible even small startup lone git businessso git fit picture git excellent match singleprocess application start fail come multiprocess application precisely gave birth endless v flamewarseach side debate classifies zealous extremist developer miss crux matter git accompanying ecosystem yet fit task developing modern cloudnative application shot fired multirepos suckbefore dive answer great git almighty atomic commit groundbreaking time branching capability everuseful blame well beloved feature disappear multirepo setup working multiple repository come significant drawback surprising biggest name tech world including google facebook gone monorepo path huge investment time resourcesdependency management multirepo setup nightmare instead everything single repository end repository pointing using two git feature git submodules git subtree languagespecific dependency management npm maven existence many different method manage multirepos proof none tool enough longer single folder computer mishmash source provider various artifactoriesin everyday work repository separation becomes artificial barrier impact technological decision creates law effect making early design decision component boundary hard change also make large scale refactorings much trickier businesshowever biggest failure multirepo cultural instead source code readily available developer jump hurdle figure repo need clone seeminglysmall obstacle often become high fence developer stop reading updating code component repository directly responsibilitywith engineering operation cultural barrier everyone go monorepo route take prisoner monorepos suck tooonce packed everything single repository figuring connection within repository becomes challenge human chip away original architecture breaking away useful abstraction jumbling everything together machine lack separation within repo even worse push code change repo automated process kick ci system build test code cd system deploy sometimes test staging environment sometimes directly productionthere certain component need build deploy hundred time day time delicate missioncritical component require human supervision extra precaution problem monorepository mix component one surprising fact vast git ci ecosystem impressive offering hosted saas space even try tackle issue fact git ci tool rebuild redeploy entire repo often built explicitly multirepo projectsanother issue large repository size git handle large repos gracefully easily end repo size fit harddrive clone time end hour big project requires careful management pruning commit history also essential avoid committing dependency autogenerated file large file may necessary specific scenariosis still hope multirepos new tool seek bring benefit monorepos multirepos tool try set configuration would unite multiple repos single umbrellaabstraction layer thus making managing multiplerepositories easier example gitmeta meta gitslave datree bunch others tool bring back bit sanity complexity managing multirepos reducing toil errorprone manual operation none truly give back control power single git repoyou cake git toothe downside multirepos real deny value truly single source truth truly atomic commits truly single place develop collaborate hand none downside monorepos inherent related current implementation git source control tool accompanying ecosystem especially cicd tool time new generation source control purely designed opensource project c linux kernel source control designed delivering modern application polyglot cloudnative world one embrace code dependency help engineering team define manage rather scaring away source control treat ci cd release firstclass citizen rather relying useful addons provided github community
235,Lobsters,vcs,Git & VCS,Pijul 0.12 released,https://discourse.pijul.org/t/pijul-0-12-released/,pijul released,sequoia pgp edit,quite happy release long time making seen many improvement notable fast diff algorithm still one major painpoints massive simplification outputting algorithm starting provable pgp key provided sequoia pgp project say main thing expect could one last format change reduce disk space usage handle large possibly binary file easily patch format change almost disruption edit written detail
236,Lobsters,vcs,Git & VCS,"fh: file history with ed(1), diff(1), awk(1), sed(1) and sh(1)",https://github.com/xorhash/fh,fh file history ed diff awk sed sh,fh file history fh rcs sccs fh diff edition unix e f e license installation usage manmd,fh file history fh record change file perfile basis similar rcs sccs however considerably primitive design goal support multiuser environment locking etc implemented shell script must use ed work easily made work edition unix taken care use shell scripting construction nt exist bourne shell may missed thing however shebang need removed edition unix fh us chain ed script construct version file even allows recording commit message saw following passage diff edition unix e option produce script c command editor ed recreate f option produce similar script useful ed opposite order connection e following shell program may help maintain multiple version file ancestral file chain versiontoversion ed script made diff need hand latest version appears standard output shift cat echo ed thinking figured would hilarious actually implement basic version control system primitive hindsight probably closer terrifying hilarious license isc see license installation usage copy fl fr fu file directory path make sure marked executable copy man page directory manpath usage see supplied man page manmd available web edition unix man page written mdoc macrosneed converted old man macro first mkdir man mandoc tman mandoc tman mandoc tman mandoc tman
237,Lobsters,vcs,Git & VCS,Announcing first-class Mercurial support on Sourcehut,https://drewdevault.com/2019/04/15/Announcing-first-class-hg-support-on-sourcehut.html,announcing firstclass mercurial support sourcehut,mercurial sourcehut tutorial buildssrht listssrht hosted deploy server inaugural mercurial conference reach,pleased announce final piece fallen place mercurial support sourcehut onpar git offering special thanks owed sourcehut contributor ludovic chabant instrumental adding mercurial support sourcehut may heard still experimental happy tell completely integrated mercurial support sourcehut want try check tutorial mercurial support sourcehut includes trimming including ci support via buildssrht emaildriven collaboration listssrht course also freeasinfreedom open source software hosted deploy server tested hgsrht largest mercurial repository including mozillacentral netbsd src netbsd project particular helpful walking u cv hg conversion stresstesting hgsrht resulting giant repository looking forward working future mercurial community actively innovating software right behind excited provide platform elevating mercurial community lot good option mercurial fan sourcehut let fix together sourcehut taking active role hg community like git together build great platform software development see paris may inaugural mercurial conference hg support sourcehut largely written member mercurial community version control community interested sourcehut support please reach
238,Lobsters,vcs,Git & VCS,Getting started with Mercurial for version control,https://opensource.com/article/19/4/getting-started-mercurial,getting started mercurial version control,mercurial official documentation pip hg addremove repo mercurialhgrepository official documentation official repo,mercurial distributed version control system written python written highlevel language write mercurial extension python function several way install mercurial explained official documentation favorite one using pip amenable way develop local extension mercurial support python need create python virtual environment virtualenv mercurialenv mercurialenvbinpip install mercurial short command satisfy everyone insatiable need chemistrybased humor command called hg source mercurialenvbinactivate mercurialenv mkdir testdir mercurialenv cd testdir mercurialenv hg init mercurialenv hg status mercurialenv status empty since file add couple file mercurialenv echo one mercurialenv echo two mercurialenv hg status one two mercurialenv hg addremove adding one adding two mercurialenv hg commit adding stuff mercurialenv hg log changeset tag tip user moshe zadka moshez zadkaclub date fri mar summary adding stuff addremove command useful add new file ignored list managed file remove file removed mentioned mercurial extension written regular python module example short mercurial extension mercurial import registrar import cmdtable command registrarcommand cmdtable command sayhello w greet def sayhello ui repo opts uiwrite hello opts n simple way test put file virtual environment manually vi need enable extension start enabling current repository cat hghgrc extension helloext greeting possible mercurialenv hg sayhello world hello world extension useful even thing mercurial repo object mercurialhgrepository object refer official documentation mercurial api visit official repo example inspiration
239,Lobsters,vcs,Git & VCS,Towards Software Non-Creator-Instigated Identification (NCI) and Citation,https://danielskatzblog.wordpress.com/2019/03/05/towards-software-non-creator-instigated-identification-nci-and-citation/,towards software noncreatorinstigated identification nci citation,like,daniel katz daina bouquin neil chue hong identification software essential number important issue citation provenance reproducibility focusing issue related citation identification thought subset naming important question therefore name thing know thing named get name thing name something give identity identity allows u use name unique object class object result allows distinction classification also enables connection thing named wider sense understood metadata many case naming something may also give legitimacy depending naming object type entity example people named creator parent people also point name call creator identification selfidentification name legally stored government system informally stored collective consciousness know know person sense paper published publisher also identified creator though creator start registration process publisher play key role well actually assigns name attached paper also stored doi system include type naming call category creatorinstigated identification cii type entity named discoverer new atomic element new organism geographic astronomical object feature name stored organization set within society purpose case concept discoverer specific society many example occurred colonialism geographic feature america discovered named western europe society call noncreatorinstigated identification nci difference cii nci used enforce particular meaning entity instance hispanic descriptor invented u federal government different meaning latino group claimed name may still confusion two cii term whose perceived meaning overlap instance climate change global warming two nci term yet agreement term used instance hahnium dubnium software identification think software mix situation first software creator identify software giving name specific version identified context text name along version information version number release date software repository commit hash identifier formally stored software repository informally stored software ecosystem added software listed web page mentioned text paper etc interested identifying permanently archived version software creator use archival repository eg zenodo figshare generate unique identifier stored doi system example creatorinstigated identification cii software citation principle written example mind suggesting use archival repository make citation longlived dereferenceable archived version cited software identification situation noncreatorinstigated identification nci also clearly applies software user piece software developed others might want procure identifier taxonomic system legitimacy field allow use software recorded software open source could generate identifier submitting software archive probably since act archiving tied authorship even though act identification need closed source software archiving software might even possible option done least two different approach exist two different discipline life science scicrunch registry allows registration rrids number type resource physical digital object including software astronomy ascl started repository software changed registry well creator actually deposit software ascl software assigned doi addition ascl id focus ascl registry assigns ascl id software registered creator noncreators may registry well since issue obtain identifier something someone else created problem discipline however fact least two independent registry software lead potential problem example math library used astronomy life science might registered record someone working different discipline example high energy physic use clear general answer hold across field though may preferred answer within high energy physic charge field library science one relevant concept authority control process associated organizing bibliographic information instance library catalog use single distinct spelling name numeric identifier topic unambiguous concept defined community consensus subsequently incorporated authority file maintained update logical linkage file network linkage represents authoritative structure information enables consistency throughout catalog addition supporting faceted searching however problem decides authoritative one option creator given talking noncreator identification need different answer case another option discipline specificregistry seem life science astronomy third option institutional registry make sense nci finally could single authority across software also problematic hard imagine software registry authority accepted software community near future essentially goto approach apply nci software information science pointofview would nice registry apis used schema would enable federated federation could support global authority even would fully address complexity multiple registry introduce software identification deduplication reconciliation ownership legitimacy claim updating synchronisation metadata however purpose blog concerned citation one identifier make citation counting citation easy multiple identifier also ok make counting citation harder issue multiple record addition possibility single piece software record multiple registry software many different record registry repository version control system paper example software package multiple type record example record registry another record separate archival repository record reference example astropy ascl record zenodo record ascl record link zenodo record vice versa software ascl record may link proxy software though eg paper website zenodo record may multiple version represented ascl issue multiple representation piece software cited worth discussing registry add extra abstraction layer clear record curated crossreferenced instance many institution curate bibliography bibliographer deal registry record registry record included institutional bibliography ascl record software may contain link paper already included bibliography case like ascl record could seen duplicate record ascl record also gain citation independent paper link make record challenging reconcile moving forward perhaps issue others examined software citation implementation working group repository best practice taskforce example open question nci software include specific circumstance would appropriate create record registry software create creating software registry record determine authorship determine describe software note author generally determined without participation many project including commercial software author probably listed project name company name talk dan referred software creation metadata associated creation software best determined creator determine associated linked tofrom software registry record eg paper manual website also open question address software provenance relationship registry record registry define role person register piece software person created software person manages registry conflict software creator able edit registry record made others potential intellectual property implication document software version dependency registry record registry record curated crossreferenced goal blog expose distinction creatorinstigated noncreatorinstigated software identification former wellunderstood wellserved existing practice tool aimed highlight partial solution exist latter need work formalize standardize area thanks alice allen tom gillespie anita bandrowski idea comment blog preceding document like like loading related
240,Lobsters,vcs,Git & VCS,Building Git with James Coglan,https://www.techdoneright.io/59,building git james coglan,building git james coglan workshop tablexicom guest james coglan building git javascript testing recipe jcoglancom summary note gary bernhardt screencasts,building git james coglan tablexi offering training developer product team info email workshop tablexicom guest james coglan author building git javascript testing recipe jcoglancom summary guest today james coglan james written extraordinary programming book called building git describes inner working git source control tool reimplementing substantial part ruby including commits diffs branching networking along way show git work also detail algorithm us also lot building complex system generally great example testdriven development james also talk implementing highlevel language like ruby versus lowerlevel language like c unique book looking forward talking james time note reimplementing git example understanding git internals building complex system general design code emerges testdriven development implementing git ruby surprise making ui change gap remaining functionality performance contribution implementation language gary bernhardt screencasts lowerlevel language v higherlevel language implementation
241,Lobsters,vcs,Git & VCS,Announcing Building Git,https://blog.jcoglan.com/2019/04/08/announcing-building-git/,announcing building git,series article building git yak shave tech done right pro git gitlet jit one commit every member every good data structure scratch zines buy via shop review goodreads,wrote series article diff merge algorithm promised one day would form part book git version control system write anything blog writing book month ago building git published far sold copy done couple interview yak shave tech done right one question get asked lot write book write article want expand little wrote think quick answer wrote well hell reason wrote diff article interested digging learning much could sheer curiosity hope much come across reader always supposed side project alongside day job something working full time useful answer worth reflecting interested motivated finish first surface reason git notoriously confusing new user frequently instructed learn work inside order understand user interface true slightly unsatisfying answer really design problem git rather shortcoming user already numerous excellent writeups git work various level abstraction pro git give good account gitlet accessible concise demonstration concept code many thirdparty implementation exist write another one brings u secondlevel motivation writing implementation complex program like git expose broad range computer science topic abstract mathematical idea like model concurrent editing detail unix filesystem api technical book narrowly focussed designed easily keywordmarketed want learn hot framework quickly find half dozen book pick one work put cv rinse repeat nothing wrong per se people need learn thing job tech book market reasonable job serving need kind learning model lend seeing disparate stuff fit together book necessarily draw topic order build useful program reason scope must assume reader already know incidental topic know unclear go find take degree subject someone developed curriculum guide field integrate various topic learn along way selfdirected learner much harder find story among mountain targeted book available wanted write something extended project something approach checklist thing learn something take journey lot topic even know existed show fit together big picture something go process building reasonably large program rather showing toy example leaving rest imagination wanted bridge gap scope typical educational example sort system people work production secondary effect broad scope change narrative book example size show reader entire thing explain work leaf process getting end design topic developer tend struggle great deal especially legacy system refactoring know end state want system arrive find hard make journey incrementally comfortable idea deploying gradually leading one big rewrite model hack six month incredibly risky rollout jit codebase building git describes line ruby code believe impossible describe codebase linear fashion show end state project attempt explain lot make sense go journey get building piece functionality small increment refactoring necessary looking current state codebase leaf lot information get history version control log valuable well content book commit log contain word text including lot thing fit book think extended footnote example one commit use type theory derive abstraction unifies two apparently different structure single class work find hard explain abstraction exist without going process led think gap technical literature explore outside book specifically dedicated process changing code finally big picture stuff choose ruby well choose something know ruby justification offer evaluate language ruby led least amount incidental complexity early material term installation project structure build tooling rich enough standard library need third party code project wanted book able cross language barrier ruby book really glad people following language far know people c clojure elixir go haskell java nodejs rust swift said believe ruby lowered language barrier personally could done language project reminded like much mean best language best language project choice ruby also significant cultural reason spent career far web development ruby primarily known role space dismissed language write program like git slow web developer dismissed part tech ecosystem know know people work sector often told one real programmer know c real programmer work system programming real programmer open source real programmer tell every member every good data structure write web apps oh huge section tech ecosystem constantly told smart enough work matter spent decade hearing c beyond mere mortal must genius go anyway near lowlevel code algorithm distributed system inventor git notorious pushing narrative truth anyone enough brain patience learn kind computing learn thing like thing make kind programming hard gigantic function seven different tangentially related thing hide important concept file format end half dozen different way encode integer program like actually see system design code codebase look like going difficult language wrote book notreal programmer people told hardcore enough program like git written brain genius mere mortal understand inspired gary scratch video julia zines demystify everyday software tool want feel like nothing computer ultimately figure rewarding see people publishing first commits git clone full excitement world created buy building git via shop enjoy really appreciate review goodreads
242,Lobsters,vcs,Git & VCS,How bad can it git? Characterizing secret leakage in public GitHub repositories,https://blog.acolyer.org/2019/04/08/how-bad-can-it-git-characterizing-secret-leakage-in-public-github-repositories/,bad git characterizing secret leakage public github repository,bad git characterizing secret leakage public github repository git precommit hook trufflehog gitsecrets blog post describing tackle challenge using atomist secretbeagle implementation github watch twitch stream rod jessica kerr pairing implementation headline result second detect secret github github public dataset maintained google bigquery enlarge github search google bigquery dataset validity filter kind secret team find history rewriting last word token scanning feature beta,bad git characterizing secret leakage public github repository meli et al nd one hand might say new news know developer commit secret know secret leaked github discovered exploited quickly hand study go much deeper also provides u actionable information go far beyond noting leakage occurs providing conservative longitudinal analysis leakage well analysis root cause limitation current mitigation opinion best time catch secret ever committed first place git precommit hook using regular expression paper appendix look like pretty good investment precommit hook approach taken trufflehog though time paper written trufflehog secret detection mechanism notably inferior detecting developed work viid might also want look gitsecrets aws key extensible additional pattern belt brace approach also consider github integration alert key slip net immediately revoke update rod johnson put together great blog post describing tackle challenge using atomist see secretbeagle implementation github even watch twitch stream rod jessica kerr pairing implementation disclaimer accel investor atomist early advisor company motivate go ahead headline result paper headline result easy detect secret leakage realtime using github apis even implementation using single api key staying within default rate limit approach paper achieves coverage target file despite best intention lot key get leaked median unique key every day using search approach outlined paper median time discovery key leaked github second time ranging half second minute word time take go oh take look probably already late high percentage leaked key genuinely appear sensitive ie test key multifactor secret eg google oauth id one part pair leaked chance part many leaked secret remain github repos long time remain day even rewriting history sufficient hide key view leaked need revoke immediately clearly going right without protection place easy human mistake make process let happen blame developer data show even highvalue target run experienced developer leak secret one case found believe aws credential major website relied upon million college application united state possibly leaked contractor also found aws credential website major government agency western european detect secret github least two good source information secret detection github search api github public dataset maintained google bigquery first phase process query candidate file may contain secret using carefully crafted set search term given set candidate file next thing going need set regular expression popular key format author examined key structure number popular system service uncover resulting regular expression proved highly accurate uncovering secret find appendix example enlarge regular expression used scan candidate file first phase match considered candidate secret candidate secret passed set filter designed reduce false negative example key pattern akiaxxxexamplekeyxxx used perhaps test case would filtered stage set key pas filter considered true leaked secret author manually verified random sample key process estimated discovered secret truly sensitive github search github search api rate limited using single api key still possible run candidate file discovery query every thirty minute author found frequent enough give coverage possible file could discovered rate limiting place result show single user operating legitimately within api rate limit imposed github able achieve near perfect coverage file committed github sensitive search query course motivated attacker could obtain multiple api key achieve full coverage another test author deliberately pushed secret known repository queried api continuously string appeared done minute hour period found median time discovery second time ranging half second minute discernible impact timeofday importantly experiment demonstrates search api approach able discover secret almost immediately achieving near realtime discovery secret github search api collection ran october april time candidate file collected file contained secret total search uncovered median unique secret per day google bigquery dataset google maintain bigquery dataset public github repos license file queried april possible scan file repos unique secret string uncovered validity filter three validity filter used remove false positive entropy filter catch secret low entropy word filter catch secret containing common dictionary word length least pattern filter looking repeated character eg aaaa ascending character abcd descending character dbca least according filter though tiny proportion secret detected regular expression actually dummy secret string matched regexes passed filter implementing organisation would much simpler adopt convention dummy key must contain word example look kind secret team find author found leaked example every key type looked following table give breakdown commonly leaked key google apis suspect probability leakage pretty constant across key type table reflects popularity different apis used github repos history rewriting obvious adversary monitor commits real time discover leaked secret even naively removed however discovered even commit history rewritten secret still discovered could recover full content deleted commits github commit id required commit hash recovered trivial effort via event api historical data api also available gittorrent project last word work show secret leakage public repository platform rampant far solved problem placing developer service persistent risk compromise abuse github token scanning feature beta look token limited set provider notifies provider key committed public repository
243,Lobsters,vcs,Git & VCS,On Git workflows,https://asylum.madhouse-project.org/blog/2019/04/08/git-workflows/,git workflow,mailing list v github postgresql magitforge,make thing clear start post strongly held opinion email based git workflow almost always stupid vast majority case exists reliable convenient easier work workflow usually requires le setup even le sacrificial lamb tried explain time various medium none provide tool properly hence blog post born point people instead trying explain briefly wrote mailing list v github antigithub rebuttal case email workflowi originally wanted write long explanation comparing various workflow forge web ui v forge loose ide integration v forge tight ide integration v emailbased variation however process realised nt need go far highlight shortcoming email example show glimpse power forge give usone reason often hear support emailbased workflow git ship builtin tool collaborating email ship tool send email tool process email sent builtin tool bridge two entirely collaboration sending patch void collaboration includes receiving feedback incorporating change iteration git core provide tool lowlevel bit upon build workflowgit also incredibly opinionated work email one mail per commit nicely threaded patch inline way email based workflow postgresql example us attachment multiple commits attached email nt supported core git tool even though solves whole lot problem one inline patch per commit method paragraph belowso problem email first day age delivery reliable might come surprise proponent method despite smtp protocol resilient reliable keep retrying get temporary failure yes thing guarantee keep trying add spam filter greylisting whole lot check one need drown junk reasonable chance something point go horribly wrong let describe example personal experience one time sent patch series mailing list nt subscribed time mailing list software silently dropped every mail smtp level appeared accepted never made list insight contact list admin figure badly configured server perhaps perhaps silently dropping junk make sense nt want let sender know know sending junk sometimes false positive suck administrator made tradeoff disagree subscribing resending worked flawlessly introduced day delay plenty extra work list admins great experience could read contribution process subscribe advance oneoff contribution subscribing list relatively highvolume one felt like inviting whole lot noise good reason subscribe list meaningfully contribute also big barrier everyone versed efficiently handling higher volume email people need another time back greylisting new patch delayed hour nt particularly big deal rush becomes big deal patch start arriving order sometimes hour nt involve enough sacrificial lamb please smtp god first feedback get first patch even though sent great experience even case part commit thread rejected list another part went case ca nt resend rejected part unchanged change please list software pretty much invalidates part get nothing guarantee get time eitherin case control nt set mailing list nt configure smtp server everything book yet another point view reviewer receiving dozen mail thread review nt easy work one would like example want send feedback two different related commits either send two mail reply relevant commits merge two patch one email purpose replying second case far easy loose track whywith mind sorry say email reliable email delivery reliable resilient reliable see content email fragile change subject git becomes unhappy want avoid bad muas screwing patch attach except default git tooling ca nt deal many thing go wrong even funny many thing wo nt know hour day later reliable way worksending patch attachment single mail solves problem get rejected get rejected get delayed whole thing get delayed patch never arrive order delay reviewing multiple commits becomes easier available hand without build tooling make available patch attachment nt supported core git tool even case plenty ca nt easily becaise something patch lack plenty metainformationyou ca nt easily see context patch file provides apply patchset look tree something default tool provide box hard hard automate nt come box navigate source code given time history apply patch plenty thing one want information available patchbut said opening paragraph exists reliable convenient easier work workflow usually requires le setup even le sacrificial lamb magical reliable convenient easier work workflow forge forge like github gitlab gitea may led believe need browser workflow involving forge done without switching browser point true usually need browser register however point onwards forge provide powerful apis powerful apis much easier build good tooling upon email apis purposebuilt reason existence allow tooling built upon job purposebuilt tool easier work something generic lax email come forge integration required workflow build one bridge one api ide choiceas example let look magitforge emacs package integrates forge support magit best git ui ever far see pull request issue recent commits current branch one place want look issue navigate press enter voila easy access whole history issue easily quote reply tag whatever wish comfort idepullrequests thing navigate press enter easy access discussion commits tree comfort ide need switch another application different key binding slightly different ux need switch browser either everything comfort integrated development environment dear reader awesomethe real power forge provide superior user experience box kinda anyway since register good go need care smtp formatting patch switching application nonsense web ui quite usable newcomer poweruser using browser development would silly ala poor people stuck using atom v code chromebooks thankfully forge provide apis many ides also provide various level integrationbut forge provide easy access issue pullrequests commits one fingertip provide much see tightly integrated solution want expand context patch already right single shortcut away easily link part patchset code since link everyone reading easy straightforward way navigate reference issue pullrequests commit message issue pullrequests easy navigate box forge bind building block together give u integrated solution boxforges make boring tedious thing invisible exclusive owner code either always drop cli use lowlevel git command need computer meant help u efficient make job convenient life easier thankfully forge like gitlab gitea others open source nt even forced trust code metadata workflow proprietary systemshowever forge nt always good fit community would nt work well forge ok vast majority case forge make life contributor maintainer user easier unless linux kernel nt try emulate
244,Lobsters,vcs,Git & VCS,git-send-email.io,https://git-send-email.io/?repost,gitsendemailio,sending several patch revision selection specifying subproject using annotate every time signing commits developer certificate origin dco approach authentication gitcredential back start,miscellaneous tip trick may serve well use git sendemail sending several patch use send last commits git sendemail commits since particular one git sendemail secondtolast commit git sendemail head see revision selection specifying subproject project use single mailing list several git repository try clarify working foobar project git config formatsubjectprefix patch foobar using annotate every time git config global sendemailannotate yes signing commits project linux kernel ask sign commits add signoff git sendemail set default git repository git config formatsignoff yes acknowledge read developer certificate origin dco approach authentication tutorial configures git way cause sendemail prompt password may find annoying way authenticate simplest git config global sendemailsmtppass password also password cached memory certain period time cache one hour use git config global credentialhelper cache timeout sophisticated solution integration keyring see gitcredential man page back start
247,Lobsters,vcs,Git & VCS,Cleaning your GitHub profile with a simple Bash script,https://www.codesections.com/blog/cleaning-github-with-a-simple-bash-script/,cleaning github profile simple bash script,cleaning github profile simple bash script best way organize github repos repository page nt designed transferring repos githubcomsettingstokens mnemonic repo list,cleaning github profile simple bash script recently read andrei cioara take best way organize github repos short version github flat namespacing leaf repos single jumbled annoying deal make harder anyone else find useful project particular active participant opensource world could easily dozen fork cluttering repo list mention old halffinished project might floating around andrei suggests clever solution create singleuser organization move certain repository organization example created codesectionsforks organization hold project forked make pull request codesectionsplayground repo hold oneoff experiment result main repository page much public repos actively maintain andrei nt explain move repos github ui pretty click several different page manually type name repo want move target org reason worth bunch repos like end lengthy process fortunately better way instead manually clicking waiting typing waiting going move repos using github famously flexible powerful api fortunately api endpoint specifically designed transferring repos unfortunately still experimental mean need add extra header request exactly well first grab oauth personal access token nt already one generate new one githubcomsettingstokens create whatever new organization organization want move repos went two andrei suggests four use judgment finally use following curl command move target repo personal account newly created org curl h authorization token oauthpersonalaccesstoken h accept applicationvndgithubnightshadepreviewjson h contenttype applicationjson x post http apigithubcomrepos username repo transfer newowner neworg sure fill value oauthpersonalaccesstoken username repo neworg single command fully transferred repo confirmation page reloads required line trivial bit overstatement even call script repeat next repo change repo name everything else stay course still plenty could automate particular would pretty trivial query github api fork loop single pas nt wanted able see repo operating nt enough fork really make worthwhile well especially considering used vim keyboard macro quickly paste repo name copy resulting curl command fork would next obvious step end day happy result well mostly still wish github would let u manually order particular wish mnemonic fold since active project right repo list definitely lot cleaner using curl able save lot time course went spent least much time saved telling yall hey maybe save bit time together
248,Lobsters,vcs,Git & VCS,Backup Gitlab data locally (2018),https://www.mikestreety.co.uk/blog/backup-gitlab-data-locally,backup gitlab data locally,gitlab,hosted version gitlab although owned data server powerful enough install would regularly crash need rebooting moving data across main gitlab site gave peace mind data always accessible matter time however le control data way easily backing script written php back repository running small server home downloads data onto na na two harddrives mirrored script following task connects via gitlab api retrieves repos find group member repos group collated merged loop one nt exist locally clone bare repository exists already update repo gitlab close tomorrow data rarely side project update script set run monthly consider work done last month backed somewhere else livedev server somewhere script us api nt need updating time add project gitlab included code plenty comment help first line shebang allows run file without specify php running command line usrbinphp php function make gitlab curl request easier requires path passed need use full api composer package command function gitlabcurl path get token gitlabcom gitbal install header array privatetoken xxxx make curl request gitlab using gitlabcom update url match ch curlinit http path curlsetopt ch curloptsslverifypeer curlsetopt ch curlopthttpheader header curlsetopt ch curloptreturntransfer result curlexec ch curlclose ch lopp output setting project id key ensures merge array without fear overwriting anything also sort logical order ouput array foreach jsondecode result true p output p id p parse returned list array return output collate project personally nt forget update username project gitlabcurl usersmikestreetyprojects get group auhtenticated user member group gitlabcurl group foreach group group get project group merge previous project project arraymerge project gitlabcurl group group id project set backup location repos location dir backup shuffle project script fails different prorjects get backed different time shuffle project loop project foreach project p output name fails know project echo p name phpeol use namespace set folder path keep project alphabetcal order according group folder location strreplace p pathwithnamespace check repo exists already fileexists folder cd pull everying branch tag etc exec cd folder git remote update else clone baremirro repo folder exec git clone mirror p sshurltorepo folder
249,Lobsters,vcs,Git & VCS,Trust and Sustainability in FOSS,http://oscoin.io/oscoin.pdf,trust sustainability fo,,obj length filter flatedecode stream xڝ kb bh sc b
250,Lobsters,vcs,Git & VCS,Pijul: Sanakirja database gets its full concurrency model,https://pijul.org/posts/2019-03-20-sanakirja-0.10/,pijul sanakirja database get full concurrency model,sanakirja get full concurrency model design btrees btrees copyonwrite source code method design fast clone recent bug concurrency model doc edit news pijul sequoia team,sanakirja get full concurrency model wednesday march fixed remaining bug sanakirja database backend behind pijul took opportunity update concurrency model design sanakirja implement transactional operation btrees stored disk distinctive feature allow fast clone database log n n size database review post achieve btrees btrees amazing datastructure tree whose node block usually memory page equal disk block always insert block might cause block split new insertion would make larger size page moreover insertion happens leaf mean depth tree increase splitting root btrees stay balanced special operation deletion somewhat trickier implement since key want delete might internal node copyonwrite case key transactionality copyonwrite strategy time want write something clone page first modify copy know sound like costly operation actually costly since data loaded hard disk one full page time anyway also written one full page time way implementing transaction discus good reason choosing copyonwrite fast clone see strategy however without problem main issue btrees change leaf might propagate upwards cause root split root becomes overfull disappear manage merge child therefore copy page update later merge page one sibling tree first copy would useless solution sanakirja laziness instead changing anything page remember take care next level source code del method type store last operation enum deleted k v design fast clone sanakirja fast clone done keeping reference count page however could potentially break transactionality cancel transaction would revert change reference count time solution use extra btree mapping page number reference count order avoid circularity since btrees implemented using reference counting store reference count least never clone referencecounting btree recent bug strange may seem del method might sometimes cause page split increasing total number node tree moreover split cascade meaning key two newly created page cause parent also split bug discovered recently freeing page containing separator key split updated however cascade happens key word separator first split fall used next separator wrong instead wait cascade freeing page containing key concurrency model sanakirja writer also called mutable transaction exclude exclude reader immutable transaction stricter concurrency implemented using readwrite lock explained doc new concurrency model mutable transaction wait starting reader started latest transaction commit finished edit sanakirja transaction module add number variable environment use std sync condvar mutex mutexguard pub struct env clock incremented every time txn start every time muttxn end clock mutex every time commit count number active txns txncounter mutex usize last commit date according clock number active txns time last commit end txn started last commit date decrement counter lastcommitdate mutex usize concurrenttxnsarefinished condvar ensure one mutable transaction started mutable mutex clock variable used compare start date immutable transaction compare date last commit txncounter variable count number active immutable transaction whenever start immutable transaction increment clock immutable transaction counter start readonly transaction pub fn txnbegin env env self result txn env error let mut read selfclocklock read let mut counter selftxncounterlock counter ok txn env self startdate read also added variable lastcommitdate containing two piece information one date last commit one number transaction active time last commit finally drop immutable transaction decrement txncounter moreover dropping last transaction started last commit signal condition variable concurrenttxnsarefinished impl env drop txn env fn drop mut self let mut selfenvtxncounterlock unwrap let mut selfenvlastcommitdatelock unwrap selfstartdate selfenvconcurrenttxnsarefinishednotifyone every time start mutable transaction wait end transaction started last transaction pub fn muttxnbegin env env self result muttxn env error let guard selfmutablelock wait transaction started start last mutable transaction finished let mut lastcommit selflastcommitdatelock lastcommit selfconcurrenttxnsarefinishedwait lastcommit relevant section commit impl env commit muttxn env fn commit mut self result error let mut lastcommit selfenvlastcommitdatelock let ntxns selfenvtxncounterlock let mut clock selfenvclocklock clock clock ntxns note unlike new variable mutex could probably replaced atomic operation race condition lastcommitdate slightly serious indeed immutable transaction could dropped time commit next call muttxnbegin would keep waiting immutable transaction finish news pijul improved pijul lot since last release november particular new diff algorithm mean pijul lot faster recording impact operation since pijul automatically creates temporary patch containing unrecorded change working copy applying patch repository moreover working making signing key easier use thanks amazing work done sequoia team implementing pgp rust
251,Lobsters,vcs,Git & VCS,Using Conventional Commit Messages,https://eidson.info/post/using-conventional-commit-messages-globally,using conventional commit message,automating conventional commit message globally seven rule great git commit message conventional commits enhance git log conventional commits devto comment javascript joel use commitizen clean commit message tool commitizen commitlint git global hook commitizen commitizen commitlint commitlint git hook git global hook conclusion atomic commits r feed toddeidson,automating conventional commit message globally constantly lookout way better developer includes getting better actual art coding also improving process coding finding way streamline andor automate process one area already mostly improved writing useful commit message git log nt end looking like xkcd comic one bad habit easy fall solo developer especially time constraint rationalize ignoring delaying proper documentation since one working codebase easy think documentation unimportant nt really important one area constantly trying improve git commit message oftoverlooked undervalued form documentation improve already part following seven rule great git commit message made sense easy enough implement almost got wanted far git commit message concerned however recently made aware conventional commits standard published angular team thanks enhance git log conventional commits post devto really liked article standard bookmarked thorough reading couple day later went back post saw following comment really got wheel spinning javascript joel added husky commitizen commitlint project great benefit include autogenerated change log autoincrementing semantic versioning increased visibility breaking change would recommend every project using gitlab using package semanticreleasegitlab npmpublishgittag got googling found use commitizen clean commit message post used starting point implementing enforcing conventional commit message problem vast majority project php project npm package much wanted add workflow nt keen idea adding packagejson file project adding unnecessary complexity dev process went discovering tool could added globally could added project without configuring individually project tool three tool configure commitizen help write conventional commit message commitlint determine commit message properly formatted git global hook fail commit commit message properly formatted commitizen commitizen handy little command line utility provides prompt hint filling section conventional commit message first step install using npm npm install g commitizen install preferred commitizen adapter globally example czconventionalchangelog npm install g czconventionalchangelog create czrc file home directory path referring preferred globally installed commitizen adapter echo path czconventionalchangelog czrc commitizen installed instead making commit git commit make commit git cz launch commitzen prompted first select type commit making type commit selected prompted fill subject body breaking change open issue section body provide longer description change want add newlines add n newline character thing importantnnby doingnthing dash create bullet list yes ugly work around way found work deal breaker commitizen installed working move next step commitlint commitlint tool lint commit message let know adheres whatever standard chosen global installation easy commitizen explained readme dig around github issue find example plan making pull request remedy step install cli utility configuration wish apply npm install g commitlintcli commitlintconfigconventional create global config file echo moduleexports extends commitlintconfigconventional commitlintconfigjs test installed working running following command echo fail commitlint see passing message try echo fix server send cors header commitlint ready tie together git hook commitlint really much placed git hook inside hook fail commit message follow standard like earlier npm package wanted applied project without configuring git hook individual project unfamiliar using git hook globally check previous post git global hook got global git hook configured already add file pathtoglobalhookscommitmsg use fish shell scripting bash nt look much different line commitlint argv work think bash would commitlint usrbinfish run local commitmsg hook first test e githookscommitmsg sh githookscommitmsg end commitlint argv exit status conclusion three easy step set conventional commit message workflow useful get habit making atomic commits see real beauty making commits running git log oneline give shot see think liked post subscribe r feed follow toddeidson twitter notified future blog post date published march tag git
253,Lobsters,vcs,Git & VCS,"A grip on Git a simple, visual Git tutorial",https://agripongit.vincenttunru.com/,grip git simple visual git tutorial,memorised git command source code,please note due nature tutorial look best reasonably wide screenshave memorised git command without actually understanding going come right place howto help get better grip arguably one important tool software development momentthis interactive tutorial visualises happening using git scroll page guided important basic concept git applying example repository visualised rightimagine starting new project want manage using git could lot thing sake tutorial let say writing book first order action make git aware inside folder house book initialise new git repository git initgit created new hidden folder called git everything git know book live apart actual projectnow let say already created two file thankstxt keep track need include word thanks outlinetxt contains general outline book aboutlet give git actual version control version control system make conscious choice version git speak commit includes git add thankstxt called staging file thankstxt marking included next committhis git history look like firstgit committhe circle represents first commit please disregard label next nowif later project revert back commit would left thankstxt current stateso include outlinetxt first commit basically good ruleofthumb commit contain change undone together example later want overhaul structure book might want ditch outline wrote without also throwing away list people thanktherefore let u tell git outlinetxt separate commitwe stage using git add outlinetxt create another commit git commitas see new commit connected previous one parent think commit containg list change needed turn file previous commit way nownow consider label reading head next newly created commit head seen pointer new commit made child commit head pointing toas example let say spelled someone name wrong correcting git add thankstxt create new commit git committhe new commit based commit previously labeled head label updated refer new commit headnow let turn label dubbed master called branch like head branch point commit unlike head name furthermore multiple branch see default first branch called masterwe easily create new branch let call mybranch git branch mybranchas see two label pointing head commit master mybranchwe switch mybranch meaning roughly make head point commit mybranch git checkout mybranchas said new commit child commit head currently pointing togit commityou see called branch mybranch pointing different commit master simple timeline suddenly evolved tree structuresince still mybranch new commits move along head git commitbranches useful allows u work multiple thing parallel without thing interfering example could start work new chapter branch contains change chapter editor bugging finally submit manuscript already darnit hypothetically simply switch back master branch perhaps fix typo send editor without include halffinished chapter nt interesting anywayanyway let say finish chapter nice would nice would nt redo small change performed earlier master branchof course git help u merge state file master commit state file current branch latest commit git merge masteras see git created new merge commit u mybranch opposed regular commits merge commits multiple parent mean contains multiple set change parent change needed make make incorporate change parent good time check whether set change work well together case book could check whether edits earlier chapter nt mess layout new oneif everything look allright mybranch contains latest complete version book imagine another branch another halffinished chapter merge mybranch branch chapter finished another one another chapter would lose track branch contains latest version therefore common practice keep latest complete version project master branchhowever switch branch git checkout chapter wrote mybranch gone reason course merged master mybranch nt merged mybranch master yet might feel cumbersome first copying everything mybranch opportunity check whether everything still looked spiffy merge since know merge back master without risking resulting book messedup layoutgit merge mybranchonce merge created another commit master ahead mybranch since includes commits mybranchthe feature touched upon already incredibly powerful allowing work multiple version project enable confidently make sweeping change project without fear losing anything unsatisfied change always start anew commit include changeshowever git trick sleeve lot fact focus enables effective collaborationas seen repository consisting project file tree representing history hold true team member separate repository including project file certain state none special however team usually decides convention single central repository contains code distributed user later much like master branch latest version part project completed central repository include latest completed work every team member let look get completed work central repositorylet assume editor initialised empty git repository http publishercombookgit first step need make local repository aware repository git remote add publisher http publishercombookgitfrom local repository point view repository called remote remote name called one added publisherin example code remote yet let change pushing master branch publishergit push publisher masterseveral thing happened first commits needed go empty repository state local repository master sent publisher remote secondly local reference currently known state remote master branch publishermaster finally local master branch matched publishermaster roughly meaning git know relatedwe simply continue working book create new commit usual git commitas long push local change shared others making local change however well possible copy editor proofread first draft submitted correction publisher repositoryto check whether case let ask happened since last time contacted ie push git fetch publisherand indeed new commit added publisher master branch see nt paying attention version branch sneakily diverged one publisher mean would able push new version branch remote solved merging remote work back making history remote branch part local branch historylike regular branch merge remote branch current local branch git merge publishermasteronce see merge commit created note process fetch followed merge fairly common common fact single command git pull immediately executes since local branch ahead remote push back remotegit push publisher masterour copy editor fetch latest version includes correction made change madethat wrap git tutorial hope helped grasp fundamental concept wo nt feel completely lost perform advanced operation git interested check source code tutorial naturally git repository let know think
254,Lobsters,vcs,Git & VCS,Write yourself a Git,https://wyag.thb.lt/,write git,pro git hash,repository putting thing inside order also repository boring writing git implementation matter writing bunch mkdir let talk object let implement git hashobject git catfile maybe know two command exactly part everyday git toolbox actually quite lowlevel plumbing git parlance actually simple hashobject convert existing file git object catfile print existing git object standard output actually git object core git contentaddressed filesystem mean unlike regular filesystems name file arbitrary unrelated file content name file stored git mathematically derived content important implication single byte say text file change internal name change put simply modify file create new file different location object file git repository whose path determined content git really keyvalue store documentation including excellent pro git call git keyvalue store incorrect may misleading regular filesystems actually closer keyvalue store git computes key data git rather called valuevalue store git us object store quite lot thing first foremost actual file keep version control source code example commit object well tag notable exception see later almost everything git stored object path computed calculating hash content precisely git render hash lowercase hexadecimal string split two part first two character rest us first part directory name rest file name filesystems hate many file single directory would slow crawl git method creates possible intermediate directory hence dividing average number file per directory hash function simply put hash function kind unidirectional mathematical function easy compute hash value way compute value produced hash simple example hash function strlen function really easy compute length string length given string never change unless string change course impossible retrieve original string given length cryptographic hash function much complex version added property computing input meant produce given hash hard enough practically impossible strlen producing input strlen type twelve random character algorithm would take much much longer long enough practically impossible start implementing object storage system must understand exact storage format object start header specifies type blob commit tag tree header followed ascii space size object byte ascii number null null byte content object first byte commit object wyag repo look like commit first line see type header space size ascii null separator last four byte first line beginning object content word tree discus talk commits object header content stored compressed zlib
255,Lobsters,vcs,Git & VCS,What I don't like in your repo,https://medium.com/@olegkovalov/what-i-dont-like-in-your-repo-a602577a526b,nt like repo,like repo readme say nothing http shieldsio sabotage custom license license dockerfile change without pull request bloated dependency styling formatting automatic build release git tag test conclusion http http http newsycombinatorcomitem http,like repohi everyone oleg yelling probably repothis copy dialogue friend make good helpful repo community size programming languagelet startreadme say nothingbut crucial part repo first interaction potential user first impression might bring userafter name maybe logo good place put badge like recent versionci statuslink docscode qualitycode coverageeven number user chator scroll http shieldsiopersonal fail long time ago simple hacky bit funny project go called sabotage put quote song added picture provided info doesthis take like minute make simpler intro explain sharing dothere reason skip itcustom license license allfirst important invent license pleasewhen going create new shiny new license make existent much better please ask time point company size conservative license cause might destroy business targeting big audience dumb way sothere lot guide select license living unlicensed using unpopular funny like wtfpl bad sign userfeel free choose one popular mit want give want bit right youapache commercial also good option might opinionated list whatever dockerfileit already container worldit much simpler anyone make docker pull foobar command rather download dependency configure path realise thing might incompatible even scared totally destroy systemis guarantee rm rf unverified project simple dockerfile everything needed done min give user safe fast way start using validating helping improve work winwin situationchanges without pull requeststhat might look weird give secondwhen project small user might okay easy follow happened last day fix new feature etc scale get bigger becomes nightmareyou pushed commits master probably computer one saw happened feedback may break api backward compatibility forgot add remove something even make useless work oh nasty one pull request random guruseniorarchitect might occasionally check code suggest change sound unlikely additional eye might uncover bug architecture mistakesdo hide work reason open sourcing bloated dependenciesmaybe conservative dependencieswhen see dozen deps lock file first question come mind ready fix failure inside yeah work today maybe worked weekmonthyear guarantee happen tomorrow styling formattingdifferent file sometimes even function written different stylethis cause trouble contributor cause one prefers space another prefers tab simplest exampleso file one style another completely end line another new function functional style right pure proceduralwhich right dunno acceptable work also horribly distracts reader reasonsimple rule use formatter linters eslint gofmt ton feel free configure would like keep mind popular tend naturalno automatic buildshow verify user build code answer quite simple build system travisci gitlabci circleci themtreat build system silent companion check every commit automatically run formatterslinters ensure new code good quality sound amazing adding simple yaml file describes build done minute alwaysno release git tagsmaster branch might brokenthat happening unpleasant stuff happenssome recent change might merged somehow cause trouble master much time take fix minute hour day till back vacation know ツ git tag point time project correct able built oh good thing make life user much betteradding release github similar gitlab place literally second reason omit stepno testswell might okayof course correct test nice thing probably project work free time weekend guilty often instead rest strict feel free share work share knowledge test added later time family friend important mental physical healthconclusionthere lot thing make repo even better maybe mention personally comment twitter http http http newsycombinatorcomitem http
256,Lobsters,vcs,Git & VCS,Radicle: A decentralized alternative to GitHub built on IPFS,http://www.radicle.xyz,radicle decentralized alternative github built ipfs,secure peertopeer code collaboration without intermediary peertopeer secure trustless sustainable bazaarstyle ssb pijul get involved stay date monadicxyz,secure peertopeer code collaboration without intermediary peertopeer hassle setting hosting need trust company data radicle build git extends peertopeer replication discovery secure issue comment review cryptographically signed live machine everything always offline trustless collectively manage project access control fund project multisignatures smart contract sustainable support project love depend receive term wwwww radicle built provide convenient collaboration workflow without intermedaries central server issue patch code review item shared seamlessly peer interacted user machine like one interacts git repository designed around peertopeer networking offer new design space bazaarstyle development login system replaced public key cryptography hosted issue tracker replaced local peer replication idea single canonical upstream replaced peertopeer model familiar open source hacker early new protocol open trusted peer collaboration adopt ssb social overlay paradigm establish peertopeer replication layer top distributed version control system model largely based unmodified git backend strive protocol general enough allow implementation top different paradigm eg pijul complement replication layer introduce totallyordered consensusbacked registry hold canonical project metadata allows project anchor important project state repository guarantee global availability immutability get involved radicle free open source software welcome contributor stay date like informed progress hand u email keep loop supported monadicxyz
257,Lobsters,vcs,Git & VCS,I made a tool to help you search Git log more easily,https://github.com/huytd/gitq,made tool help search git log easily,join github today sign file permalink gitq painless git log searching resource license reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time gitq painless git log searching try gitq huy gitq gitq bob gitq alice fix padding login button demo description website topic provided resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
258,Lobsters,vcs,Git & VCS,StGit - alternative git interface,http://www.procode.org/stgit/doc/tutorial.html,stgit alternative git interface,stg uncommit stg uncommit stg goto stg float stg sink stg push stg pop stg squash squash stg commit,one common use stgit polish git branch publish others see history falsification often good thing someone else need look six month later really interested false start step needed correct want final solution presented way make easy read understand course limit editing last day worth history probably good idea editing last month probably rule thumb might mess history old enough remember detail anymore rewriting history published others see base work usually make everyone confused le let take concrete example say hacking stgit made several git commits work progressed commit message improve snarfle cache remove debug printout new snarfle cache test oops spell function name correctly fix documentation error snarfle cache actual history obvious reason kind history ideally want find six month try figure exactly elusive snarfle cache bug introduced let turn history proud first step make stgit patch git commits stg uncommit number uncommitting patch patch moresnarflecache done stg series description improvethesnarflecache improve snarfle cache removedebugprintout remove debug printout newsnarflecachetest new snarfle cache test oopsspellfunctionnamecorre oops spell function name correctly fixdocumentationerror fix documentation error moresnarflecache snarfle cache see stg uncommit add stgit metadata last git commits turning stgit patch stuff note number flag stg uncommit uncommits many commits generates name based commit message like instead list patch name want command line point number thing could continue developing take advantage eg stg goto stg refresh patch stick update right patch begin use eg stg float stg sink stg push stg pop reorder patch use stg squash merge two patch one squash push pop patch merged consecutive unrelated patch way make one big patch patch merged finally push patch back course always pushing involved possibility conflict push result conflict operation halted given option either resolving conflict undoing feel history good going get remove stgit metadata turning patch back regular git commits tip stg commit also commit specific patch named command line leaving rest alone used retire patch mature keeping newer volatile patch patch completely done using stgit branch fully committed use cleanup remove stgit metadata branch delete completely either stg branch cleanup branchname stg branch delete branchname
259,Lobsters,vcs,Git & VCS,Tips for a disciplined git workflow,https://drewdevault.com/2019/02/25/Using-git-with-discipline.html,tip disciplined git workflow,sync everyone chapter pro git basic writing good commit message standard width email commit selfcontained change gitbisect get right first try gitrebase miscellaneous tip rev selection,basic git usage involves typing stock command sync everyone many people frustrated git become never progress beyond surfacelevel understanding work however mastering git easily worth time much day spent using git would guess many tool belt use half often spent twice time studying like learn git suggest starting chapter pro git free reading chapter rest optional article going discus apply tool discussed book disciplined productive git workflow basic writing good commit message may heard speech bear generally use git commit message start configuring git use favorite editor git config global coreeditor vim simply run git commit alone editor open fill file commit message first line limited character length complete sentence applied commit fix text rendering cjk language add support protocol refactor crtc handling add single empty line expand extended commit description hardwrapped column include detail like rationale change tradeoff limitation approach etc use character standard width email email important tool git character limit used first line becomes subject line email lot text like patch linuxusb get added beginning might find wrapping line like annoying burdensome consider working others may reading commit log context vertical monitor often read commit log going cram much text one line display could commit selfcontained change every commit contain one change avoid sneaking little unrelated change commit additionally avoid breaking one change several commits unless refactor idea discrete step represents complete change right several change working tree need commit try git add git add p additionally every commit compile run test successfully avoid known bug fixed future commit true repository check commit expect code work correctly also becomes useful later example cherrypicking commits release branch using approach also allows gitbisect become useful expect code compile complete test successfully every commit pas gitbisect script programmatically test tree presence bug avoid false positive selfcontained commits good commit message also make really easy prepare release note gitshortlog shortlog like linus linux release linuxannouncement get right first try come one important feature git distinguishes predecessor history editing version control system come time machine sort git mostly readonly however git time machine different change past fact encouraged word warning change future yet merged stable public branch advice article bugfree selfcontained commits good commit message hard get right first try editing history however easy part effective git workflow familiarize gitrebase use liberally use rebase reorder combine delete edit split commits one workflow find commonly using make change file commit fixup commit git commit fixup use git rebase squash earlier commit miscellaneous tip read man page pick random git man page read also read toplevel git man page simply man git bottom man page highlevel git command usually list lowlevel git command highlevel command relies want learn highlevel git command work try reading man page learn specify commit want rev selection branch useful learn work without well nice set tool belt use tool like git pull rebase git sendemail git push origin master
260,Lobsters,vcs,Git & VCS,Highlights from Git 2.21,https://github.blog/2019-02-24-highlights-from-git-2-21/,highlight git,released git humanreadable date source detecting caseinsensitive path collision source performance improvement bit multipack index source delta island source source delta reuse bitmap source custom alternate reference advertisement source tidbit source source source source pratik karki alban gruin option source,open source git project released git feature bug fix contributor last caught latest git release released look interesting feature change introduced since humanreadable date datehuman part output git log display date commit authored without making alternate selection timestamps display git default format example tue feb precise lot detail thing might already know care example commit happened today already know year likewise commit happened seven year ago care second authored could use daterelative would give output like day ago often want relate six day ago specific event like meeting last wednesday six day ago tuesday wednesday interested git introduces new date format tell exactly something occurred right amount detail datehuman git log look new format accurate daterelative easier consume full weight datedefault scripting might want frequently switch human machinereadable format putting together pipeline git option suitable setting dateauto human printing output pager git given option act passed datehuman otherwise printing output nonpager git act format given human quite speed combine auto format choosing like dateauto relative source detecting caseinsensitive path collision one commonly asked git question cloning repository git status report file modified quite often answer repository contains tree represented file system instance contains file well file file system caseinsensitive git checkout one file worse git actually detect case clone simply writes path unaware file system considers file find something gone wrong see mystery modification exact rule occurs vary system system addition folding normally consider upper lowercase character english may also see languagespecific conversion nonprinting character unicode normalization git git clone detects report colliding group initial checkout remove confusion unfortunately git actually fix problem original committer put repository checked asis file system thinking putting file multiplatform project differ case best advice still source performance improvement bit behind scene lot changed last couple git release dedicating section overview change impact git usage daytoday change especially important server administrator multipack index git store object eg representation file directory make git repository loose packed format loose object compressed encoding object stored file packed object stored packfile collection object written term delta one another costly rewrite pack every time new object added repository repository tend accumulate many loose object individual pack time eventually reconciled repack operation however reconciliation possible larger repository like window repository instead repacking git create multipack index file listing object residing multiple pack removing need perform expensive repacks many case source delta island important optimization git server format transmitted object heavilycompressed ondisk packfiles mean many case git serve repository client simply copying byte disk without inflate individual object sometimes assumption break object disk may stored delta one another two version file similar content might store full content one version base difference base version creates complication serving fetch object stored delta object b send client ondisk version also sending b know already b otherwise reconstruct full content recompress happens rarely many repository client clone object stored server quite common multiple distinct overlapping set object stored packfile example due repository fork unmerged pull request git may store delta object found two different fork someone clone one fork want one object discard delta git solves introducing concept delta island repository administrator partition ref namespace distinct island git avoid making delta island end result repository slightly larger disk still able serve client fetch much cheaply source source delta reuse bitmap already discussed importance reusing ondisk delta serving fetch know side base object need use delta send sending base answer easy know answer deceptively simple client already told u commits bother sending claim commit contains base object reuse delta one hitch need know commit mentioned also entire object graph base may part commit hundred thousand commits deep history project git traverse entire object graph check possible base expensive instance walking entire graph linux kernel take roughly second fortunately already solution within git reachability bitmap git optional ondisk data structure record set object reachable commit data available query quickly determine whether client base object result server generating smaller pack produced quickly overall faster fetch experience source custom alternate reference advertisement repository alternate tool server administrator disposal reduce redundant information two repository known share object like fork parent fork list parent alternate object fork look parent helpful since avoid storing twice vast number object shared fork parent likewise repository alternate advertises tip receiving push word writing computer remote remote tell tip branch determine information already known remote therefore use le bandwidth repository alternate tip advertisement union local alternate branch tip happens computing tip alternate expensive client sending redundant data make push slow disabled feature year github git repository hook way enumerate alternate tip make corresponding transaction much faster source tidbit highlighted handful change past two release want share summary interesting change always learn clicking source link reading documentation release note ever tried run git cherrypick merge commit fail might found fix involves passing moved fact say select first parent mainline replay relevant commits prior git passing option nonmerge commit caused error transparently meant source veteran git user last post might recall git branch l establishes reflog newly created branch instead listing branch instead something almost certainly mean git branch l list repository branch keeping line command accept l source ever stuck forgotten certain command flag might run git help git h learn git invocation follows alias show aliased command helptext source repository large ondisk checkout git status take long time complete order indicate making progress status command display progress bar source many part git historically implemented shell script calling tool written c heavy lifting allowed rapid prototyping resulting tool could often slow due overhead running many separate program continuing effort move script c affecting git submodule git bisect git rebase may notice rebase particular much faster due hard work summer code student pratik karki alban gruin g option tell git log show commits whose diffs match particular pattern git searching binary file text made thing slower often produced confusing result source went change happened last couple version lot discover read release note review release note previous version git repository
261,Lobsters,vcs,Git & VCS,Browsing a remote git repository,https://begriffs.com/posts/2019-02-21-browsing-remote-git.html,browsing remote git repository,try begriffsgitftp way todos,git builtin way browse display file remote repo without cloning closest concept git lsremote show hash reference like head master file inside wrote server expose git repo new way watch short demo watch video try get code begriffsgitftp currently proof concept added feature run public server host project code using project server written c requires small portable way standard solution use web interface like github gitlab cgit stagit klaus gitweb etc however interface fairly rigid connect well external tool site also provide restful apis client available consume apis limited also desktop client proprietary service often big electron apps serving repo behind ftp interface get benefit web browser supported required minimized network traffic sending file data supported platform dozen client already written support command line gui gitftp read git internal database expose tree blob filesystem read master branch new connection see newest code single connection see file consistent state unchanging even new commits happen duration connection ftp welcome message identifies sha served todos proof concept putting gauge general interest want continue working plenty feature add like providing way browse code different commits supporting sftp file changed man middle etc etc see project issue
263,Lobsters,vcs,Git & VCS,The Smart Ways to Correct Mistakes in Git,https://css-tricks.com/the-smart-ways-to-correct-mistakes-in-git/,smart way correct mistake git,fixing last commit replaces original undoing local change discard specific individual line desktop git client like tower undoing reverting older commit restoring previous version project commits restoring deleted branch dealing conflict etc etc etc first aid kit git,world software development offer infinite amount way mess deleting wrong thing coding dead end littering commit message typo mere plentitude however wonderful safety net foot form git working version control need safety net course never make mistake right sure sure benefit everyone else let take tour undo tool git save u fixing last commit commit easy classic case point making typo commit message another forgetting add change staging area many case instantly realize mistake right hitting enter key naturally git make ridiculously easy fix last commit let say hit enter following command git commit massage full typohs orthographic mess bad enough let say also forgot add another changed file staging area correct mistake following two command git add forgottenchangesjs commit amend sensible message magic ingredient flag using commit git correct last commit staged change new message short word warning though use commits pushed remote repository yet reason git replaces original bad commit amended version afterwards look original commit never happened yeah good concealing mistake already published mistake remote server undoing local change day like spend morning hacking away admit last hour waste time got ta start undo much work one reason using git first place able try thing without fear might break something take stock example situation git status modified abouthtml deleted imprinthtml modified indexhtml let assume one wasted hacking day described ought kept hand abouthtml deleted imprinthtml want discard current change file keeping brilliant work done indexhtml git command help case instead got ta get specific file check like git checkout head abouthtml imprinthtml command restores abouthtml imprinthtml last committed state phew got away black eye could take one step discard specific individual line changed file instead tossing entire thing admit rather complicated make happen command line using desktop git client like tower great way go really bad day might want bring big gun form git reset hard head restored specific file command reset whole working copy word restores complete project last committed state something keep mind using discarding local change command undone never committed repository logical restored better sure really want get rid turning back undoing reverting older commit many case realize mistake much later long committed repository get rid one bad commit well answer least case even undoing thing git normally actually delete data corrects adding new data let see work using bad guy example git revert using git bad commit deleted anything quite contrary automatically created new commit change reverts effect bad commit really started three commits trying correct middle one four total commits new one added corrects one targeted restoring previous version project different use case want restore previous version project instead simply undoing reverting specific revision somewhere commit history might really want turn back time return specific revision following example scenario would declare commits came unwanted want return state commit forget everything came process command necessary already least partly familiar based already covered git reset hard tell git hash commit want return commits disappear project history working git client like tower git git reset available contextual menu commit item commits restoring deleted branch dealing conflict etc etc etc course many way mess thing software project luckily git also offer many tool undoing mess look first aid kit git project folk tower team created want learn scenario covered post topic like move commits branch delete old commits restore deleted branch gracefully deal merge conflict totally free guide includes video handy cheat sheet download keep next machine meantime happy undoing
264,Lobsters,vcs,Git & VCS,git-signatures - Multiple PGP signatures for your commits,https://github.com/hashbang/git-signatures,gitsignatures multiple pgp signature commits,git signature requirement mac o x install usage pull merge signature origin sign tag push new signature origin pullmergesignpush origin single step verify signature verify mofn signature verify mofn signature multiple gpg trustdbs implementation note,git signature repo includes extension workflow example able attach arbitrary number gpg signature given commit tag git already support commit signing tool intended compliment support allowing code reviewer andor release engineer attach signature well ci build system enforces mofn signature verification git tag released offer strong protection tampering repository single bad actor compromised system approach build entirely gitnotes interface allows attachment arbitrary data existing commit requirement mac o x since built getopt date binary compatible script must install gnu compatible binary homebrew recommended gnugetopt brew install gnugetopt ln brew prefix gnugetopt bingetopt usrlocalbingnugetopt coreutils make sure gnugetopt gdate gshuf binary path install need place bingitsignatures anywhere path default install homelocalbin make install usage pull merge signature origin git signature pull sign tag git signature add push new signature origin git signature push pullmergesignpush origin single step git signature add push verify signature return public key id verified signer git signature verify verify mofn signature verify mofn requirement met default gpg trustdb return condition met git signature verify mincount verify mofn signature multiple gpg trustdbs git signature verify trustdb devteamdb mincount git signature verify trustdb releaseteamdb mincount implementation gitsignatures simple set wrapper offer shorthand gitgpg manipulation signature encoded result gpg signing given git hash appended gitnotes interface refssignatures method chosen make setup easy reason review manual signing could performed git revparse head gpg sign git note ref refssignatures append file git push origin refssignatures manual verification could performed git fetch origin refssignatures git note merge catsortuniq originrefssignatures git note ref refssignatures show xargs sh c echo gpg note use risk may eaten grue questionscomments
265,Lobsters,vcs,Git & VCS,github ui,http://www.tedunangst.com/flak/post/github-ui,github ui,http githubcomgolanggoblobmastersrcnethttprequestgo http githubcomgolanggoblobmastersrcnethttprequestgo http http rant web,paying bit attention usual web interface example really get github one annoyed quite know wrong looked screenshots see frustrating melet start looking file httprequestgo golanghttps githubcomgolanggoblobmastersrcnethttprequestgo http githubcomgolanggoblobmastersrcnethttprequestgo let start top work way downfirst row enterprise pricing signup optionssecond row link repo star fork buttonsthird row code wiki insight tabsfourth row branch selector file pathfifth short commit amazeballs tooltip row doodleheadssixth row file info blame history buttonsfinally file itselfand pictured another row privacy status linksthat lot interface little seems anything happening page time page looking history button time take second find would love get hold analytics many people star repository looking random file buried somewhere treeit took bit reflection realize hard find history link one right side sixth row time recent history probably looking pageon page get history clicking big commits button left side fifth row rewrite rust progress bar many time visit repo check latest commits straight top page trained look commits link somewhere left puzzled find itnow let look history filehttps http notice switched release branch indicated page anywhere least still star button live without thatso missing branch indicator way switch back master also missing way even get back file somebody sends link want see file good luckanother oddity doodleheads gone assuming somehow adept decoding anime face interested information interested seeing page dedicated file history manner quirk like fact code tab sometimes link repo root branch link branch viewing unnamed branch back master release page accessible special bonus row root code page spa browser history seems get confused quite frequently back go someplace unexpected take really long time reload page looking mobile page weird special way really trying catalog everythingsome degree hierarchical navigation necessary need able walk file directory switch code issue think requires global operation like star every page lateral navigation probably removed well need go viewing one file wiki ideally everything click would fall one category link take back link take action something whatever looking posted feb tedu updated feb tagged rant web
267,Lobsters,vcs,Git & VCS,Changeset Evolution in Mercurial,https://www.youtube.com/watch?v=4OlDm3akbqg,changeset evolution mercurial,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature changeset evolution mercurial youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature changeset evolution mercurial youtube
268,Lobsters,vcs,Git & VCS,Betamaxed,https://doriantaylor.com/betamaxed,betamaxed,subversion apache module spec mercurial git desideratum mozilla staked entire codebase mercurial cygwin tortoisehg proper programming interface perforce python section reference manual system common bittorrent bitcoin github bitbucket version control bandaid talk rich hickey array coffee mug teletype history panel track change google doc imagining coda microsoft planning acquire github panicked exodus,early subversion adopter cv really terrible subversion however utterly baroque implemented apache module thing aware make extensive use versioning part alsobaroque webdav spec subversion messy consummately cantankerous system glad evolved past greener member audience may aware upon time version control distributed like mercurial git rather paradigm held master copy ought cloistered away behind network protocol full version history asset repository one resourceintensive proposition also politically charged often noconfidence vote original authority distributed version control forking first thing authoritative repository determined policy rather technical mean subversion billed start better cv rcs networking support clientserver paradigm represents bronze age version control rcs demonstrably neolithic decade ago new distributed tool looked heck lot like technology regressing indeed many way much simpler clientserver system supplant considerably sophisticated mercurial first distributed version control system honour go darcs treatise epistemology darcs eminently fascinating software product intended real work found liability putting intolerable slowness rewarded corrupting two repository ruining bunch work dumped week desideratum version control system distributed otherwise need reliable fast least fast enough programmable extend toolset git scored two maybe two half time extent reference implementation still bunch janky c program ducttaped together bunch janky shell script programmed git wrapping executables pipe parsing output mercurial hand written mostly python api beginning plus mozilla staked entire codebase mercurial switching nobrainer somewhat weaker reason reject git time could nt run window without sort cygwin goop gui like tortoisehg nt using using version control anticipated might interact people year later vhs distributed version control clearly git core toolset cleaned considerably proper programming interface quite time nt enough motivation switch mercurial plugin hggit serviceable enough interface gitbased project service part using mercurial pretend git nt exist well let met qualify outside version control system need handful thing record successive change directory tree file enable navigate longitudinally set change enable tag specific snapshot somehow meaningful release enable branch parallel universe change set enable navigate laterally branch enable merge branch together including branch belong people afford canonical mechanism sharing whole mess others keep detailed log process opinion git mercurial virtually indistinguishable perspective expect heresy proponent either side arsenal argument feature one product lack however given feature really essential submit would quickly see parity across available product one feature yet see replicated version control product found perforce namely ability write commit message ahead series change elsewhere maybe really got seriously considering git two reason first le interesting perhaps close coupling mercurial python like python used various thing since never loved take python interface parsing program output druthers pick another language since work notpython becoming increasing burden maintain bunch python code sole purpose interacting version control reason taking closer look git something caught eye reading section reference manual internals first yet clear git fundamentally contentaddressable filesystem vcs user interface written top oh well know thing two contentaddressable storage legitimately interesting wonder git took relatively longer mature b repository design fully decoupled tooling implementation git set specification protocol data format first software product second mercurial software product period reason coupled gitchauvinism present myriad tool feel finally time switch dvc system common general strategy adopted git mercurial presumably distributed version control nt know would accomplish sound mean use cryptographic digest identify content well representation change content indeed serious way distributed version control system differ finegrained detail change represented rest seems rough consensus worth remarking general paradigm identify locate thing cryptographic hash also core thing like bittorrent bitcoin blockchain technology general indeed really reason could nt store content generalpurpose contentaddressable store implement protocol adapter various version control product people could use whichever one wanted project without making special arrangement interfacing master repository would saying would nt lot work would also recentralize repository authority like github bitbucket already making life convenient people want use choice distributed version control software noble enough move least nevertheless lot reason one might want version control bandaid talk rich hickey wonder aloud design information system store recent state piece information updated erase whatever answer rhetorically longsinceeliminated constraint computing resource particularly storage offer version control example kind system designed ground remember everything suggests hype big data least partly management getting look tool developer create indicating want capability rut joke run deep array coffee mug variant different profession ordinary undoubtedly demand version control could led understand nt believe though understanding significant impediment version control know oriented toward file particular text file version control system effective content could read write directly kind file home version control principle still accessible using teletype year ago ordinary people contrast tend manipulate file mediating application whose author may use whatever harebrained scheme deem appropriate store application state efficient binary diff algorithm nt hard enough problem part benefit version control able see changed across revision currently really feasible change occur text file anything elaborate would require knowledge syntax semantics every application file format wanted support vendor nt keep proprietary secret would still require chase whatever capricious change format decide make could store instance photoshop microsoft word file would nt able glance see across revision done text file derivation common fact sequence line user interface reviewing change also sequence word economical implement version control system extended proprietary application file would know parse file produce minimal set change would know render change user interface vendor attempt solve problem embedding version control product result questionable photoshop history panel nt track across save microsoft word track change necessarily affecting one particular copy one particular file alternative something like google doc doubt store content fine julienne kind online database project snapshot content embodied conventional concrete data file ask one observation return first remark version control system still oriented around file rather around content instance cut segment code one file paste another system ca nt tell moved rather look system like one hunk content deleted another identical yet unrelated hunk appears elsewhere thin air go moving content around within file recording function version control system typically need triggered explicitly make thousand edits thousand file wo nt recorded instruct system commit change necessarily see latest one interestingly enough subversion autocommit setting could mount repository ordinary networked folder computer file wrote location would automatically committed version control practice made big mess version history webdav painfully loadsensitive imagining would future look like everything undo button went back arbitrarily far act creating new digital content mean destroying something like google doc offer u glimpse change transmitted http request message express content individual change server side would otherwise encapsulated rich hickey parlance mutable therefore volatile place instead represented nondestructively timestamped log accumulating change could projected snapshot stage along way bring future would likely move away least anything bulk payload instantaneous freezeframes state system would ironically mean going back clientserver model control server well could mean outlandish proposition coda june started writing document nt know microsoft planning acquire github predictably panicked exodus competing service least git extricate source code although leave everything else behind well could pull rest information via api would put fieldforfield replica github database besides pull request infrastructure make github useful backed massive preauthenticated rolodex fact span five minute copy software fix bug send patch review apply one click easily see messing around diffs embedded email pgp signature everything else github offer online backupbrowser code repository zillion selfhosted version even wrote one irony lost many distributed system made usable centralized skill make system usable riff gibson evenly distributed like cream cup coffee said skill eventually filter zeitgeist modulo worth caring kind oscillation centralized decentralized control moderated cost skill acquisition one end value knowing skill something seen time likely foreseeable future
269,Lobsters,vcs,Git & VCS,sr.ht is now sourcehut,https://lists.sr.ht/~sircmpwn/sr.ht-announce/%3C20190206223744.GA10775%40homura.localdomain%3E,srht sourcehut,http sourcehutorg,hiya ding dong terrible name dead new marketing page life http sourcehutorg like short url going keep srht around sourcehut name project srht hosted instance cheer drew devault
270,Lobsters,vcs,Git & VCS,Git as a Package Registry,https://github.com/LoopPerfect/buckaroo/wiki/Git-as-a-Package-Registry,git package registry,npm package might differ sourcecode reviewed github extracting package version git go dep semver name,anyone worked npm ecosystem know painful two closely related library wish update together update first run test make release npm update second oh look bug return first fix code push npm imagine company strict requirement store code release package openly github using hosted binary repository requires map current security policy system mention also introduces another pointoffailure consider npm package might differ sourcecode reviewed github ever checked hash npm package output npm publish run locally found mismatch first try timestamp difference impractical investigate every one problem solved use git package registry infrastructure already git server security git already configured team ssh key integrity control exactly go sourcecontrol word thing become much simpler package registry instead leverage existing sourcecontrol achieve end extracting package version git following design go dep consider git repository might map package version every commit version every branch collection version namely commits branch every tag version commit point every tag satisfies semver parser semver picture worth word consider git commit graph following version commit branch master branch develop commit b branch master branch develop tag semver commit c branch master commit branch master tag semver commit e branch develop user write requirement information might ask version develop would b e perhaps semver would might even combine requirement requiring commit master develop would give u b need package registry obtain version information pull directly git name name final piece puzzle know package name eg boostorgmath correspond git url eg http githubcomboostorgmathgit buckaroo support namespace discovery explores dependency graph another topic entirely case already namespace provided usual suspect mapping quite simple every package hosted git platform owner project name mapped either ssh http git url let githubhttp owner project http githubcom owner project git let githubssh owner project git githubcom owner project git buckaroo work without package registry extract information straight sourcecontrol
271,Lobsters,vcs,Git & VCS,Git CLI Explorer in Go,https://github.com/isacikgoz/gitin,git cli explorer go,gitin feature installation maclinux using brew usage configure development requirement contribution contribution guideline credit credit page license,gitin gitin commitbranchstatus explorer git gitin minimalist tool let explore git repository command line search commits inspect individual file change commits alternative interactive way explore commit history also explore current state investigating diffs stage change commit feature fuzzy search type start search running gitin command interactive stage see diff file gitin status press enter see diff space stage commitamend change gitin status press c commit amend interactive hunk staging gitin status press p explore branch useful filter option eg gitin branch press enter checkout convenient ux minimalist design see option running gitin help also get help individual subcommands eg gitin log help installation linux macos supported window moment download latest release manually download go get githubcomisacikgozgitin cd gopathsrcgithubcomisacikgozgitin make would expect built library make static link run make command able build directory issue shown go module build make install cmake pkgconfig required maclinux using brew tap recently moved new repo added older one isacikgozgitin consider removing adding new one brew tap isacikgoztaps brew install gitin usage usage gitin flag command args flag h help show contextsensitive help also try helplong helpman v version show application version command help command show help log show commit log status show workingtree status also stage commit change branch show list branch environment variable gitinlinesize int gitinstartinsearch bool gitindisablecolor bool gitinvimkeys bool press control application running configure set line size export set always start search mode gitinstartinsearchtrue disable color gitindisablecolortrue disable h j k l nav gitinvimkeysfalse development requirement requires see project homepage information build instruction gitin simply macos install via brew install consider required linux macos want build download go get make sure cmake pkgconfig libssldev installed cd initialize submodules running git submodule update init change version version case install script eg nano vim change run script download go get githubcomisacikgozgitin cd gopathsrcgithubcomisacikgozgitin start hacking contribution contribution welcome like please refer contribution guideline bug report include descriptive step reproduce maintainer easily understand actual problem feature request welcome ask anything seems appropriate credit see credit page license
272,Lobsters,vcs,Git & VCS,Pijul for git users,https://nest.pijul.com/tae/pijul-for-git-users,pijul git user,pijul git user introduction model cool feature common problem creating repo adding file repository signing key recording patch ignoring file removing file repository removing patch discarding change branch maybe nt need branch remote nest nest nest introduced version contributing remote nest nest tag summary learning pijul online manual blog post matter explains pijul implement work progress ui could change future something receive feedback,pijul git user introduction pijul indevelopment distributed version control system implement repository using different model git model enables cool feature avoids common problem going explore tutorial good stuff appears maybe nt need branch section assumed reader us git daily base ie know commit push pull also need cherrypick commits rebase branch least creating repo mkdir pijultutorial cd pijultutorial pijul init nothing new adding file repository like git create file must explicitly added repository pijul add file difference though pijul file unix file ie directory also file nt need create keep file add empty directory repos try mkdir adir touch adirafile pijul add adir pijul status output branch master change yet recorded use pijul record record new patch new file adir untracked file use pijul add file track adirafile add file recursively must use recursive flag signing key pijul sign patch automatically let create signing key record first patch pijul key gen signing key pair located localsharepijulconfig moment private key created without password treat care recording patch user perspective equivalent git commit operation interactive default pijul record added file adir shall record change ynkadi added file adirafile shall record change ynkadi name email address someone name name patch add dir file recorded patch mean yes n mean k mean undo remake last decision mean include remaining patch mean include neither patch remaining patch mean ignore file locally ie added pijullocalignore let change afile echo hello adirafile pijul record file adirafile hello shall record change ynkad name patch add greeting recorded patch ignoring file saw recording patch chose locally ignore file also create pijulignore ignore file root repository record file accept pattern gitignore file like git want ignore file recorded previous patch must remove file repository removing file repository pijul remove file file shown untracked whether recorded previous patch effect git reset file git rm cached depending previous state file removing patch pijul unrecord command interactive alternatively one use pijul unrecord patch remove one patch knowing hash patch hash obtained pijul log unrecording recording patch leave repository state case patch depends previous one example patch edits edits file depend patch created file see dependency pijul dependency managed automatically pijul unrecord patch might sometimes refuse work discarding change pijul revert like git checkout applied file instead branch branch create new branch use pijul fork branchname command switch another branch use pijul checkout branchname apply patch another branch use pijul apply patchhash command notice nt produce different patch different hash like git cherrypick finally delete branch deletebranch subcommand maybe nt need branch git commit related parent except first one branch useful avoid mixing unrelated work nt want history look like work feature work feature work feature work feature work feature need push fix bug asap nt want also push commits still work progress create branch every new feature work isolation pijul patch usually commute way produce exactly result apply patch b repo apply patch c result exactly coworkers get apply patch patch c patch b patch c dependency called saw removing patch commute entire graph commute patch ie apply patch patch b patch cd would get repository state applied patch b patch cd patch alice could history previous example bob could work feature work feature work feature work feature work feature repos would equivalent file would useful start working new feature without realizing actually new feature need new branch create patch need feature eg patch implement patch fix bug introduced patch fix typo whatever order want unrecord patch record one patch without rebase actually rebase operation pijul model really shine start work remote moment pushing work ssh server need pijul installed nest free service host public repository reuse current ssh key pair create new pair pijul key gen ssh new key pair stored directory used signing key add nest like ssh key github account nest upload signing key pijul key upload let push something pijul push ournestusername nestpijulcom ourrepo unless pas flag pijul ask u patch want push keep patch locally unrecord record decide actually nt need kill forever push year later finally decide world need without branch nt want specify remote every time push set default setdefault flag course pull change pijul pull command command frombranch source branch tobranch destination branch setremote create local name remote option btw keep patch pull patch want yes called partial clone introduced version work like pijul pull path patchhash remote course bring patch dependency seen neither need branch cherrypicking rebasing patch theory behind pijul contributing remote pijul nt need forking either step contribute repo clone pijul clone repourl make patch go page repo nest open new discussion nest create branch number discussion name push patch pijul push ourusername nestpijulcom repoownerusername reponame tobranch discussionnumber repo owner could apply patch master branch also attach patch repos discussion create participate one tag tag pijul patch specifies previous patch depend recreate current state repo create tag pijul tag command ask tag name new patch added repo recreate state tag creating new branch pijul fork patch hashofthetag nameofthenewbranch tag patch look hash pijul log summary forget bad merges feature branch rebasing conflict produced merges cherrypicking learning pijul online manual currently little bit outdated best way learn executing pijul help list subcommands read running pijul help subcommand subcommands interactive default pas data directly command line avoid asked question option explained subcommand help information theory behind pijul refer joe neeman blog post matter also wrote post explains pijul implement work progress said pijul indevelopment tool ui could change future missing feature something like bisect would super helpful also opportunity developer seem quite open receive feedback
273,Lobsters,vcs,Git & VCS,sr.ht adds experimental mercurial support,https://man.sr.ht/hg.sr.ht/,srht add experimental mercurial support,see also important new mercurial hgsrht manual create page grant access metasrht profile,see also important hgsrht work progress consequence url specific file commits branch etc repository viewer guaranteed remain consistent forever finish writing new repository viewer change new mercurial learning use mercurial general scope documentation good resource general resource helping use mercurial srht ssh host key hgsrht sshrsa hgsrht hgsrht hgsrht manual following section document various feature hgsrht repository creation creating new repository done create page access page via navigation top right also create new repository pushing one yet exist clicking link printed hg push output complete creation process name description field used describe repository public visibility field change repository shown website public repository visible profile anonymous user thirdparty search engine unlisted repository visible anyone link shown profile search result private repository visible loggedin user explicitly grant access setting repository setting may accessed via setting link repository detail page info change repository visibility description page click rename wish rename repository renaming repository set redirect previous name new access access page allows grant user read write access repository user read access able clone view private repository web user write access able push new repository user write access able edit repository setting delete delete repository page operation undone delete resource may associated project ticket tracker todosrht build history buildssrht profile public profile available hgsrhtusername public repository account listed searchable unlisted private repository hidden unless logged information displayed profile page sourced metasrht profile
274,Lobsters,vcs,Git & VCS,GitHub Spray: Generate spray for your GitHub contribution graph,https://github.com/Annihil/github-spray,github spray generate spray github contribution graph,github spray installation requirement usage font invert color flip vertical flip horizontal custom pattern use github spray generator graphically draw pattern custom start date multiplier scale color known issue,github spray cli generate spray github contribution history graph installation requirement usage create new github repository copy url githubspray text multiplier factor push origin githubrepositoryurl example githubspray hello multiplier push origin http githubcomjohnhellogit depending number contribution given period want spray need multiply number commit per day specific factor multiplier spray become relevant calendar heatmap font githubspray text font fontname example githubspray font portablevengeance githubspray mario font mario font available font folder invert color flip vertical githubspray hello flipvertical flip horizontal githubspray hello fliphorizontal custom pattern use custom pattern create json file like follow number determine number commit per day thus green darkness githubspray f pathtopatternjson githubspray f patternsspaceinvadersjson use github spray generator graphically draw pattern custom start date githubspray startdate yyyymmdd date rounded nearest sunday default start date nearest sunday current date week multiplier scale color githubspray factor multiply number commit per day given factor make spray darker brighter calendar heatmap known issue
275,Lobsters,vcs,Git & VCS,How I organize my cloned git projects,https://piet.me/blog/organizing-git-projects/,organize cloned git project,organize cloned git project enter go go work go git get lot directory navigate autojump conclusion source code,organize cloned git project looking better way organize git repos work tried dumping single directory tried adding sub folder personal work tool solution problem repos clone play around cause clutter alongside project actively working cloning forked repos along original repos cause folder name conflict meaning would use different folder name project name might cause confusion working project unclear owns without going cloned repo running git remote v figured probably better way enter go really like way go organizes source code command go get giturl installs package gopathsrc gopath default homego unix system repos organized directory git host user name repo name example go get githubcompietvanzoenpietvanzoencom would clone project gopathsrcgithubcompietvanzoenpietvanzoencom give several benefit avoid folder naming conflict clear repo came workpersonal project automatically grouped source code organized consistent easytounderstand way work go occasionally work go mostly work javascript initially thought could coopt go get command organize nongo project alongside handful go project work go recognizes project go print warning message apart warning message feel comfortable coopting go functionality organize folder unrelated go tool intended guarantee break later git get came git get single python script par given git url creates directory structure clone repo created directory define gitpath store repos chose repos run git get git githubcom pietvanzoendotfilesgit clone dotfiles reposgithubcompietvanzoendotfiles also git get run directory project look bit like repos bitbucketorg pietvanzoen wibble githubcom leidendevs leidendevs chriso validatorjs pietvanzoen discussie dotfiles pietvanzoencom validatorjs wting autojump gitlabcom pietvanzoen wibble see cloned validatorjs twice one original project github user chriso fork single level folder structure used would name clone folder one project something else lot directory navigate one drawback approach lot directory navigate depending patience may may issue issue really like using autojump autojump command bound j brevity build index commonly visited directory visiting directory first time run j partialdirname taken first match autojump index eg j dot take reposgithubcompietvanzoendotfiles conclusion using new directory structure month love feel clean organized worry cloning repos check gitget source code try idea improvement please submit issue
276,Lobsters,vcs,Git & VCS,GitLens - Visual Studio Code Extension,https://gitlens.amod.io/,gitlens visual studio code extension,pr johnletey jonbp pr zaboyle pr pr ahmadalli pr arajkumar pr mankwok,absolute path used compare git version issue showing change staged file file history view open change previous revision command etcfixedfixes certain error handling issue change v code error messagefixedfixes file history issue copieddeleted userdefined autolinks external resource commit message close gitlensautolinks setting configure autolinksfor example autolink jira issue eg http jiracompanycomissue use gitlensautolinks prefix jira url http jiracompanycomissue query num newadds highlight change command gitlensviewshighlightchanges commits gitlens view highlight change line current filenewadds highlight revision change command gitlensviewshighlightrevisionchanges commits gitlens view highlight change line revisionnewadds branch tag sorting option interactive setting editorimprovedchanges commit search autodetect full commit shas without need prefix commit improvedchanges paging gitlens view longer naive load additional required data much better performanceimprovedchanges toggle file layout command icon tree layout match v codeimprovedrestores original commit icon editor toolbarfixedfixes problem symbol branch name thanks pr allan karlson fixedfixes line file history working symlinked repositoryfixedfixes decoration rendered codefixedfixes issue line blame annotation would sometimes stop workingfixedfixes compact view branch shown commit icon closer v codesimprovedchanges webviews welcome setting inline cs avoid fouc flash unstyled content improvedonly applies ignorerevsfile custom blame flag supported current git version file existsfixedfixes search change command malformedfixedfixes editing cause contextual blame disappearfixedfixes version warning nt show button workingfixedfixes make heart icon support gitlens rounderfixedfixes broken view layout button interactive setting new option sort tag date similar branch via gitlenssorttagsby settingnewadds tag reference date tag repository viewimprovedbumps required version git least openfileinremotecommand read property range nullfixedfixes missing tag repository viewfixedfixes issue creating tag message contains spacesfixedfixes issue creating switching new new git commandsadds new branch command subcommands create rename deleteadds new tag command subcommands create deletenewadds better coauthor support close support github pull request uri scheme pr close new action option status bar blameadds gitlensshowcommitsinview option show commit search commits viewadds gitlensrevealcommitinview option reveal commit repository viewnewadds new rename branch command branch repository viewimprovedimproves drastically performance revealing commits repository viewimprovedchanges create branch via terminal command create branch us branch create git commandimprovedchanges delete branch via terminal command delete branch us branch delete git commandimprovedchanges create tag via terminal command create tag us tag create git commandimprovedchanges delete tag via terminal command delete tag us tag delete git commandfixedfixes deleting stash nt remove stash list refreshfixedfixes compacting cause duplicate namesfixedfixes issue issue linking hoversfixedfixes issue show commits search commits view git code lens action uncommitted changesfixedfixes missing prefix search node allnew iconography better match v code new visual style thanks john letey johnletey jon beaumontpike jonbp help newadds allnew welcome experience simple quick setup common gitlens feature accessible via gitlens welcome commandnewadds new improved interactive setting editor experience accessible via gitlens open setting commandnewadds new improved git command experienceadds keep open toggle button quick pick menu toolbaradds confirmation indicator toggle button quick pick menu toolbaradds keyboard navigationadds new search command search specific commits see detail allnew commit search experienceadds new stash command subcommands apply drop list pop pushadds new reset command reset current head specified commitadds new revert command revert specific commitsimproves enhances fetch pull push merge rebase cherrypick checkout called switch commandsnewadds allnew commit search experience via git command search commits commandsadds ability match one search pattern close case sensitive matching supportadds support regular expression matchingadds ability match pattern searching commit messagesadds ability show result search commits view within quick pick menu via toggle button quick pick menu toolbaradds reveal commit repository view button quick pick menu toolbaradds show commit search commits view button quick pick menu toolbaradds keyboard navigationnewadds reveal commit repository view command reveal current commit repository viewnewadds show commits within selection search commits view command show commits within current selection search commits viewnewadds new action option git code lensadds gitlensshowcommitsinview option recent change code lens show recent commit search commits viewadds gitlensshowcommitsinview option author code lens show commits within range code lens block search commits viewadds gitlensrevealcommitinview option recent change code lens reveal recent commit repository viewadds gitlensrevealcommitinview option author code lens reveal primary author commit repository viewnewadds open change working file command inline toolbar file viewsnewadds open revision command editor toolbar tab context menu revision file active diff editornewadds explore repository revision command editor toolbar tab context menu revision file activenewadds prune command remote repository view prune remote reference close thanks pr zach boyle zaboyle newadds ability sort branch tag quick pick menu view close pull andor push command current branch repository view current branch date upstreamnewadds ability copy selected item detail clipboard using standard copy shortcut key focused gitlens viewnewadds last commit date branch quick pick menu viewsnewadds support use github avatar available author usersnoreplygithubcom email address partially address thanks pr improvedchanges stash change command source control view toggle keepindex appropriately close ansible file use document scope code lens thanks pr ahmadali shafiee ahmadalli improvedchanges fetch pull push stash command use respective git commandsimprovedchanges checkout command branch commits tag use switch git commandimprovedchanges cherry pick commit via terminal command use cherrypick git commandimprovedchanges merge branch via terminal squash branch commit via terminal command use merge git commandimprovedchanges rebase interactive branch via terminal rebase interactive branch remote via terminal rebase commit via terminal command use rebase git commandimprovedchanges reset commit via terminal command use reset git commandimprovedchanges revert commit via terminal command use revert git commandimprovedrenames checkout command switch branch tag better clarity align new git commandsimprovedrenames checkout command restore commitstash file better clarity align new git commandsimprovedrenames stashed change stash stash depending contextimprovedrenames copy clipboard command copy improvedrenames show commit view command show commit search commits viewimprovedrenames show file history view command show file history viewimprovedrearranges ordering grouping view item context menusremovedremoves show commit detail view item context menusremovedremoves show file history view item context menusfixedfixes extra backslash hovers blame detail linkfixedfixes refresh button compare branch view workingfixedfixes list changed file comparison working tree show changed file comparison headfixedfixes version comparison show welcome message future proof thanks pr arunprasad rajkumar arajkumar fixedfixes wrong comparison order compare view using compare headworking tree comandsfixedfixes ca nt get back setting page easilyfixedfixes disable showwhatsnewafterupgrades notificationfixedfixes partially top right tool loadingplacement enhancementfixedfixes issue open change working file command invoked stashfixedfixes issue open line change previous revision command would open correct comparison diff editorfixedfixes issue open change previous revision open change next revision command right left side diff editorfixedfixes issue branch sorting current branch treedfixedfixes issue explore repository revision open revision open file open revision open change open change working tree command latest v codefixedfixes typo workbenchcolorcustomization readme thanks pr kwok mankwok
277,Lobsters,vcs,Git & VCS,Git Absorb,https://github.com/tummychow/git-absorb,git absorb,git absorb mozilladevversioncontrol elevator pitch installing recent change usage file issue configuration stack size todo,git absorb port facebook hg absorb first read mozilladevversioncontrol elevator pitch feature branch commits teammate reviewed branch pointed bug fix bug nt want shove opaque commit say fix believe atomic commits instead manually finding commit shas git commit fixup running manual interactive rebase git add filesyoufixed git absorb andrebase git rebase autosquash master git absorb automatically identify commits safe modify indexed change belong commits write fixup commits change check output manually nt trust fold fixups feature branch git builtin autosquash functionality installing need following cargo install gitabsorb make sure cargohomebin path git find command cargohome default cargo note git absorb use system mean need installed build run however mean able build due recent change crate cmake longer needed build also homebrew option brew install gitabsorb usage git add change want absorb design git absorb consider content git index git absorb create sequence commits head commit fixup message indicating message unique sha commit squashed satisfied output git rebase autosquash squash fixup commits predecessor set gitsequenceeditor environment variable nt need edit rebase todo file satisfied something bad happened git reset soft preabsorption commit recover old state find commit question git reflog think git absorb fault please file issue configuration stack size run without base gitabsorb search candidate commits fixup within certain range default get error like warn stack limit reached limit edit local global gitconfig add following section absorb reasonable value project todo implement force flag implement remote default branch check add smaller force flag disable individual safety check stop using failure errmsg ensure error output actionable user slightly log output success case test esp main module integration test travis window support appveyor document stack commute detail commutation case esp copyrename detection nt load hunk memory simultaneously could huge implement kind index locking protect concurrent modification
278,Lobsters,vcs,Git & VCS,Microsoft's Azure DevOps: An Unsatisfying Adventure,https://toxicbakery.github.io/vsts-devops/microsoft-devops-ci/,microsoft azure devops unsatisfying adventure,viewing build need apply thou shall build sad true story checking build log log dear cache cache ousside people begging microsoft insistence thinking implementing search google failed build github,software developer know firsthand difficult build quality product quickly cheaply art form sometimes get right time devolves something akin obama era healthcare government site level control resulting product varies blame failure often fall wrong people decisionmaking hierarchy microsoft azure devops formerly known visual studio team service despite clearly good intention perfect storm bad decision poor execution high level product look fantastic offer allinone solution issue tracking ci version control project management unfortunately complexity part problem issue updated screen frequently refresh leaving unaware change example updating hour setting effort trigger graph update page refresh still required problem small isolated together make product arduous day day task honestly everything mentioned far tolerable though unfortunate every tool problem really grind gear ci system call pipeline ci implementation perspective horrifically broken individual problem incomplete github integration way way agent running build randomly die way year still offer form build caching combine create product disappointingly subpar comparison tool gitlab circleci travis others primary hope help reader save mistake made using tool secondary hope reach someone microsoft make decision convince fix problem asap paying money tool also paying every additional agent attempt use ci lastly let clarify already contacted support many issue positive outcome viewing build need apply curiously build information page hide significant amount data commit cardinal sin big enough monitor even standard resolution impossible see column surely thinking wow guy know scroll horizontally actually microsoft barely information displayed build also note horizontal scrolling blackedout area identify commits author additional blackout hide company information sensitive information ah look beautiful information sadly window still large enough see available column may wondering happens mobile mobile completely unsupported ci area tool even bypass mobilefriendly view using desktop mode change screen size majority column completely inaccessible best knowledge native mobile app exists either hope looking view task assigned thou shall build sad true story either microsoft network ci worker agent service combination completely broken using microsofthosted agent running linux provisioned window server running ubuntu hypervisor generally build machine instance get approximately usable memory two xeon intel core running hosted build experienced high rate build failure caused machine disappearing ether failure happen random point sometimes build even start general cause always lost communication server spending month hoping problem resolved asking support help suffering rather inadequate issue tracker decided set selfhosted agent aws hoped would fix everything build blazing fast ten minute later lost communication server unfortunately problem run deeper hosted agent seems also affect selfhosted one running instance investigating issue realized instance completely unresponsive ok thought must gotten bad server something must gone wrong terminated instance created new one set agent surely would well hour build ran smoothly expected eventually agent died build build sat queued frustration grew aws notified instance needed doctor hour gave hope unresponsive server commanded reboot attempt debug problem investigated traditional log location dmesg kern var log unable determine root issue find indication happened checking build log log one curious implementation decision build log already build information page open build triggered see entire build history normal human peek build several minute see history point loaded build log currently running step primary role android developer first build output see often something like app assembledebug ergo beginning log missing possible refresh page build finish view entire log often turn unfortunate time sink dear cache cache ousside might believe tell microsoft absolutely form build caching link directly people begging microsoft insistence thinking implementing acknowledged working issue february nothing issue annoying actually spin completely separate problem search google many user encounter network issue build included presumably lack build caching overwhelming network also causing build server get rejected package repository system build frequently hit http error downloading dependency resulting flaky build track high number build failure due network issue excluding percentage failure attributed dreaded lost communication message described previously sometimes build even fail attempt connect github performing source checkout extremely confusing microsoft company owns cloud service lack caching ci implementation ci offering market like circle travis jenkins etc generally cache implementation treat fundamental part ci process please microsoft failed build github another interesting implementation issue ci communication lack thereof github build fails ci system flaky requeuing build dashboard update github completion mean must push either erroneous commits force push change onto pull request trigger new build update github pr practice really issue since ci system generally flaky thought strong supporter system like travis circle convinced many people pony money service generally work well exhibit none issue microsoft regard manually queued build updating github regardless multiple time week coworker spend extra time deal quality check blocking pull request
279,Lobsters,vcs,Git & VCS,Issue with Github Forks: Private repositories can be accessed after being removed,https://gist.github.com/sarazasasa/9450d63f96e7ff799824fc98fc7f3b43,issue github fork private repository accessed removed,well known bob p alice alice issue maintaining access repos kick github doc repos fork organization alice alice bob bob bob alice bob alice bob bob check someone access repos issue repo owner permanent access private fork issue unlimited private repos organization unlimited collaborator user,apparently well known github us fork kind superrepository letting see commits fork network true even private repos example bob fork repo p alice alice make commit hash x repo forked access via githubcombobptreex even fork deleted commits still accesible via fork last seemingly forever found following related issue contacted github said already known ok make public issue maintaining access repos kick possible user keep viewing new commits repo longer access idea make fork private repo access removed would let access commits hash according github doc remove access someone private repo github delete fork true repos forked account repos fork organization scenario alice private repo p alice grant access p bob bob creates organization called borg bob fork p borg alice remove access p user bob alice make commit p hash x bob see commit hash x visiting githubcomborgptreex bob access commits p hash reach one commit access parent well child several way find commits repo repo owner pro account hash branch show insight network github let reference commits via prefix hash url try bruteforcing hash space iterating githubcomborgptreeffff also take account existing commits also done via github api quota limit github autolink commits input prefix hash github comment could nt find size restriction look like pack couple thousand hash one comment note github mention antiabuse quota note true also private repos organization team caveat organization need specifically allow user fork repos check someone access repos always see number fork repo github pro account see usernames insight network tab issue repo owner permanent access private fork fork private repo remove access owner fork would expect owner wo nt able see commits however still access commits finding commit hash creating link repo like issue unlimited private repos organization unlimited collaborator user free organization limit number private repos free user limit number collaborator private repos however free user fork private repo organization org new private repo org add collaborator want
281,Lobsters,vcs,Git & VCS,How to teach Git,https://rachelcarmena.github.io/2018/12/12/how-to-teach-git.html,teach git,teach git problem found idea distributed version control system cloning repository making change working directory tracked untracked updating remote repository working directory staging area staging area local repository local repository remote repository modified staged committed working directory staging area working directory staging area updating development environment fetching remote repository local repository pulling remote repository local repository working directory next step dirty working directory friendly reminder reading received feedback marc villagrasa git challenge comment hacker news comment reddit idea teach git pro git book stuart maxwell ucryptoz bonus nico riedmann learn git concept command,teach git published december last updated june problem found professional experience involved participating crossfunctional area knew colleague way working remember company started using git week joined found postits screen step first add second commit third push know reason step knew follow order get trouble however problem happened frequently decided prepare workshop git idea love map mind write mind map wellknown type diagram talking frame structure kind graphical representation mind example started learning addition imagining dice mind prepared drawing necessary able see drawing understand post include explanation awareness accessibility furthermore case important teach vocabulary otherwise understand message git drawing good way introduce vocabulary distributed version control system general drawing contains area distributed follows development environment working directory staging area index local repository server time explain benefit distributed version control system cloning repository cloning repository data remote repository travel area working directory local repository making change working directory type file working directory tracked file git know untracked file still added git know updating remote repository change ready working directory must added staging area set change single purpose staging area time create commit message purpose local repository one several commits local repository ready shared rest world must pushed remote repository time talk different state file development environment modified staged committed furthermore explain show change file working directory git diff show change file staging area git diff staged file changed working directory added staging area etc updating development environment fetching executing git fetch data remote repository travel local repository pulling executing git pull data remote repository travel area local repository fetch working directory merge take care commit history consider use git pull rebase instead fetch merge consists fetch rebase local commits replayed see known diamond shape commit history next step add another area development environment explain stashing dirty working directory people internalize concept easier go step branch commit history rebasing etc built solid basis friendly reminder worked version control system visual sourcesafe tfs subversion humble experience lack knowledge harmful old tool new one focus choosing tool also mastering reading received feedback friend marc villagrasa reminds found useful solve git challenge share solution among colleague resource comment hacker news reading comment reddit think accurate title post would idea teach git idea appeared head learning git year ago pro git book post complete guide starting point trainer sure resource useful well thanks thanks stuart maxwell shared post hacker news ucryptoz shared reddit resource comment twitter related thing bonus article inspired nico riedmann create awesome post learn git concept command
282,Lobsters,vcs,Git & VCS,Git man page generator,https://git-man-page-generator.lokaltog.net/,git man page generator,name synopsis description option see also,real git documentation read carefully click button generate new man pagenamesynopsisdescriptionoptionssee also
283,Lobsters,vcs,Git & VCS,"pushb: like pushd/popd, but for git branches",https://github.com/pwoolcoc/pushb,pushb like pushdpopd git branch,join github today sign file permalink pushbpopb example use resource license reload reload,like pushd git branch dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time pushbpopb small cli utility work similarly pushdpopd except git branch instead working directory example mkdir testrepo cd testrepo git init initialized empty git repository homepwoolcoctmptestrepogit touch test git add test git commit minitial commit master rootcommit initial commit file changed insertion deletion create mode test pushb b mynewbranch switched new branch mynewbranch pushb master switched branch master popb switched branch mynewbranch popb switched branch master use pushb branch switch pushb b branch create switch popb like pushd git branch resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
284,Lobsters,vcs,Git & VCS,"Version control, DevOps, Code Reviews, Semantic Merging and more",https://fireside.fm/s/lIFqidRX+qzCR4GTB,version control devops code review semantic merging,download mb link timestamp,january hr min download mb link timestamp version control changed lot past year moved centralized distributed model basic level practice people follow changed grown new methodology like devops continuous delivery relied version control operational stability reliability interview coté talk plastic scm pablo santos get lowdown tip version control better also discus plastic scm approach semantic merging mergebotdriven automation address version control toil
285,Lobsters,vcs,Git & VCS,Interactive Git Cheatsheet,http://ndpsoftware.com/git-cheatsheet.html,interactive git cheatsheet,,status display path difference index file current head commit path difference workspace index file path workspace tracked git diff display difference added index diff commit branch view change workspace relative named em commit em use head compare latest commit branch name compare tip different branch add file dir add current content new modified file index thus staging content inclusion next commit use code add interactive code add modified content workspace interactively index add u add current content modified new file index similar git commit preparation making commit rm file remove file workspace index mv file move file workspace index commit msg commit file changed since last commit except untracked file ie file already listed index remove file index removed workspace checkout file dir update file directory workspace switch branch reset head file remove specified file next commit reset index working tree ie changed file preserved marked commit report updated reset soft head undo last commit leaving change index reset hard match workspace index local tree warning change tracked file working tree since commit lost use merging resulted conflict like start pas orighead undo recent successful merge change checkout branch switch branch updating index workspace reflect specified branch em branch em updating head em branch em checkout b name new branch create branch switch merge commit branch merge change em branch name em current branch br use code nocommit code leave change uncommitted rebase upstream reverts commits since current branch diverged em upstream em reapplies onebyone top change head em upstream em cherrypick commit integrate change given commit current branch revert commit reverse commit specified em commit em commit result requires working tree clean modification head commit diff cached commit view change staged v latest commit pas em commit em see change relative commit msg store current content index new commit along log message user describing change commit amend modify last commit current index change log show recent commits recent top option br code decorate code branch tag name appropriate commits br code stat code stats file changed insertion deletion br code author em author em code certain author br code mmm dd yyyy code ex jun commits certain date br code mmm dd yyyy code commits occur certain date br code merge code commits involved current merge conflict diff commit commit view change two arbitrary commits branch list existing branch option r cause remotetracking branch listed option show branch branch delete specified branch use force branch track new remotebranch create new local branch track remote branch clone repo download repository specified em repo em checkout head master branch pull remote refspec incorporates change remote repository current branch default mode code git pull code shorthand code git fetch code followed code git merge fetchhead code reset hard remotebranch reset local repo working tree match remote branch use code reset hard originmaster code throw away commits local master branch use start failed merge fetch remote refspec download object ref another repository push update server commits across branch common local copy serverlocal branch never pushed server first place shared push remote branch push new existing branch remote repository push remote branch branch push new branch remote repository different name branch r list remote branch push remote branch remove remote branch literally quot push nothing branch quot clean clean working tree recursively removing file version control starting current directory stash save msg save local modification new stash run git reset hard revert em msg em part optional give description along stashed state quickly making snapshot omit save em msg em stash apply stash move change specified stash workspace latest stash default stash pop applies change last specified stash remove given stash stash list list stash currently stash show stash show change recorded stash diff stashed state original parent em stash em given show latest one stash drop stash remove single stashed state stash list em stash em given remove latest one stash clear remove stashed state note state subject pruning may impossible recover stash branch branchname stash creates check new branch named em branchname em starting commit em stash em originally created applies change recorded em stash em new working tree index br succeeds em stash em reference form stash em revision em drop em stash em em stash em given applies latest one br useful branch ran git stash save changed enough git stash apply fails due conflict since stash applied top commit head time git stash run restores originally stashed state conflict
286,Lobsters,vcs,Git & VCS,A new free-software forge: sr.ht,https://lwn.net/SubscriberLink/775963/3cd82e9cbda2f293/,new freesoftware forge srht,buying subscription exception gaining traction announced srht instruction documentation tutorial core srht repository srht mailing list component srhtdev mailing list guide man component markdown buildssrht travis ci jenkins build manifest sway postmarketos build test deploy tutorial manual api reference bugissue tracking component user manual code review page affero description proper mailinglist etiquette log,know lwnnet subscribersupported publication rely subscriber keep entire operation going please help buying subscription keeping lwn net jake edgejanuary many project adopted github style development last year though course highprofile exception still use patch mailing list many project leery putting project metadata proprietary service limited mean usefully retrieving necessary gitlab least open core gaining traction recently announced effort look kind bridge gap drew devault srht hacker forge combine element style development free open source software forge look ambitious project may also suffer lack social network effect part sustains github forge choice today seems announcement blog post replete superlative srht pronounced sir hat way want bit unclear whether project quite life combine many feature seen site like github hosting bug tracking continuous integration ci mailing list management way embrace improves upon emailbased workflow favored git along many hackeroriented project around net intent separate service integrate well srht external ecosystem project use piecemeal two side srht coin point interested user either host instance use hosted version hosted version free use since still alpha eventually one need sign plan range per month stay hosted service instruction getting srht run server us nginx postgresql redis python along mail server cron daemon overall documentation rather terse bit scattered difficult get started using service following tutorial logging allows one create git repository adding ssh public key account allows pushing existing repository system browsed shown core srht repository cloned others mentioned srht taken approach yet another github clone instead geared toward mailinglistcentric approach possibly using srht mailing list component srhtdev mailing list seen right provides example user interface component unlike forge mailinglist replacement fact srht us javascript page small le average load quickly guide preferred development collaboration style srht based around git sendemail mailing list copy potential reviewer much like linux kernel development done instead forking repository server done github others local clone made change made committed posted review patch ready merging maintainer apply using git seen much different webcentric pull request model used github others wikis srht created using man component wikis simply git repository markdown file get converted html served visited addition srht git repository toplevel readmemd shown repository browsed could provide link projectspecific wiki build ci component buildssrht devault call flagship product srht announcement note working linux nonlinux eg bsd hurd distribution start using platform scale automation need entire linux distribution also say smaller user switching away travis ci jenkins buildssrht buildssrht simple yamlbased build manifest similar see platform used describe build submit web api various integration within second virtual machine booted kvm build environment sent script start running diverse set base image supported variety architecture soon include first hardwarebacked riscv cycle available general public buildssrht used automate everything deployment jekyllbased blog testing github pull request sway building testing package postmarketos deploying complex application like buildssrht base image build test deploy every day build manifest specify build project test task specified well manifest also specify platform eg alpine linux freebsd used build test task build manifest placed particular location buildyml build yml git repository order run automatically new code pushed repository information buildssrht found tutorial manual api reference also bugissue tracking component called todo user manual particularly brief writing todo write doc place one run missing documentation page perhaps critically code review page referred listssrht documentation new mailing list one would guess hole filled long project written python licensed affero noted ambitious project one wonder whether mailinglistcentric workflow survive long term instruction set mail client description proper mailinglist etiquette may sit well newer developer email painful set use finding alternative far attractive ultimately project like srht need order fill feature base grow thrive new project existing stable project run way compatible srht many new project going good ill addition social effect github lesser extent gitlab least freesoftware world major piece make model successful hard see srht replicating significant degree interesting project though one deserves wellwishes compatible project looking home certainly worth look log post comment
287,Lobsters,vcs,Git & VCS,Monorepos and the fallacy of scale,https://presumably.de/monorepos-and-the-fallacy-of-scale.html,monorepos fallacy scale,blog post entitled please benefit monorepos innumerable benefit modularization subdirectory monorepos embodiment unified project single project common mission scale golang community fallacy scale fallacy scale,recent blog post entitled please matt klein discus pro con turn mostly con view monorepos long short think good fit team thinking question year come opposite conclusion reply focus think argument go rail monorepos really good choice many many team hopefully reason laid help find good repository layout hope show critical thinking context scale best tool available making choice organization benefit monorepos beginning initial commit new company usually start single empty git repository project grows bigger question invariably come whether make sense separate part codebase component system modular piece functionality second repository talk monorepos mean principled choice ieâ split repository company adhering practice code written employee stored single monolithic repository proponent monorepos among count claim keeping everything one place removing artificial barrier monorepos encourage code sharing simplify development tooling post matt argues benefit illusionary second argues far helping monorepos actually lead tight coupling component start first point discus point coupling practice keeping code together one place lead better code sharing experience clearly case monorepofication effort initiated multiple organization split repository case produced innumerable benefit result explicit goal like better greppability ease refactoring unified consistent snapshot project synergy materialized unexpected way like surprising opportunity code reuse intractable infrastructure problem straddling repo boundary reduced pragmatic line bash looking side could introducing strict border somehow make easier reuse logic think clear border take away ability perceive opportunity use abstraction unify code perhaps suggestion code sharing introduce separate utility library shared two component although may well right thing case may easily right way go others bottom line pick right abstraction right place function class based individual merit case driven fact repos created long time ago modularization approaching heart issue indubitably good thing explores various way modularize code finding right answer crucial maintainable code well one hardest part job programmer equally important see effective modularization entail separate repository repository split possible module boundary course common divide code function file module class namespaces often natural way draw module boundary highest level also simplest keeping component subprojects library separate subdirectory within unified repo pull request raise relevant question code review folder right place implement feature consistent thing elsewhere drawing api boundary along natural line test pas consistent snapshot project true touching multiple subprojects single commit always desirable example updating backend frontend component incrementally backwardcompatible way better approach even useful retain option crossboundary commits many reason including simplicity enforced coordination enough flexibility ensure change impossible need arises monorepos embodiment unified project lead u second argument idea monorepos cause tight coupling component reducing complexity reducing dependency class namespaces essential matt right draw attention worry modularization goal keep complexity bay achieve need place module separate repository subdirectory along convention broken necessary better way meet goal think splitting codebase subrepos hamfisted way enforce ownership boundary developer arguing child need confined separate room prevent fight sufficient communication good practice monorepo allow avoid question repo piece code belong instead thinking repo boundary effectively distraction monorepo allows focus important question draw boundary module keep code maintainable understandable malleable light changing requirement fact splitting repos carry greater risk calcifying layout decision agile taught u reliably guess project headed future similarly predict module boundary properly drawn twelve month deciding split repository risk making call hastily making unnecessarily difficult reverse course merging repository possible cumbersome infrequent occurrence requires buyin coordination whole team find helpful think company group people engaged single project common mission even company pursues mission multiple subprojects every decision taken every code change introduced step towards primary goal code base codification large chunk institutional knowledge overarching goal considers best mean end looking perspective monorepo seen natural expression fact team member engaged single multifaceted enterprise keep bundled together identified unique sha hash helpfully tracked time vcs scale well benefit real company reject monorepos answer approach scale think view ultimately misguided assumption common focus rest post matt point worked twitter introduction gitbased monorepo caused significant performance issue led simple command taking minute complete fully believe pain point real conclude anecdote git scale reject monorepos worth breaking idea two part first git principle scale project hundred participant multiple year generally plausible fact linux kernel original raison cloned minute hopelessly underpowered broadband berlin coffee shop writing post common repository operation plenty fast linux successful poster child collaboration large generally code repository growth steady slow change set human scale much furious typing hundred developer course year course like tool git need used within intended parameter reasonablysized team unless commit junk repository aka looking golang community track file handwritten team opposed generated code thirdparty code binary probably fine bit discipline prudent use tooling even expect produce code kernel team next five year mean reject monorepo today second part assumption mentioned think conclusion follow reader post course position pick repository layout large team code produced today written large team consisting hundred individual contributor many u especially world startup work smaller team say le developer although code live nearperpetuity lot enjoy relatively short lifespan sadly typically know ahead time whether case individual module many developer working small team practical problem repository scalability likely come near term monorepofication czar twitter reading hello follows may apply team talking nonunicorn rest u fallacy scale truth even though area learn experience giant like twitter necessarily scale term either employee user may never reach yet often make choice based idea absolutely must scale successful need make take scalable decision today call fallacy scale fallacy large team qualitatively different small team countless way context matter work twitter twelveyear old billiondollar business necessarily right startup tooling work twitter appropriate twitter early year effectively different company better way think code layout architecture decision relating scale find solution work team today next six month without feigning ignorance nearterm try predict future concretely realistically outscale monorepo right time adjust course actually reach point know reliably scaling issue come encounter real scalability hiccup take action based concrete pain point introducing tooling fix specific problem switching multirepository setup make cardinal mistake startup worrying crossing bridge get thanks michael reitzenstein ben lovell misha karpenko anke breunig comment earlier draft post
288,Lobsters,vcs,Git & VCS,Unlimited free private repositories with GitHub Free and a unified business offering with GitHub Enterprise,https://blog.github.com/changelog/2019-01-08-pricing-changes/,unlimited free private repository github free unified business offering github enterprise,,made update offering developer team github free give unlimited private repository three collaborator per repository continued access unlimited public repository unlimited collaborator github developer called github pro includes everything github free unlimited collaborator private repository advanced code review tool private public repository github enterprise new unified product enterprise cloud formerly github business cloud enterprise server formerly github enterprise organization want flexibility use github cloud selfhosted configuration access one perseat price
289,Lobsters,vcs,Git & VCS,Mercurial rollout on the massive Google monorepo continues,https://groups.google.com/d/msg/mozilla.dev.version-control/hh8-l0I2b-0/6iJPFWTtAgAJ,mercurial rollout massive google monorepo continues,,use google group discussion please enable javascript browser setting refresh page
290,Lobsters,vcs,Git & VCS,Monorepos: Please dont,https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b,monorepos please dont,monorepo google theoretical monorepo benefit achieved without polyrepostyle tooling lie theoretical benefit easier collaboration code sharing perforce google internal tooling gvfs sourcegraph theoretical benefit single build dependency management bazel buck theoretical benefit code refactors easy atomic commits protobuf fastmod unique monorepo downside downside tight coupling os downside vcs scalability microsoft git vfs conclusion,beginning engaged yet another discussion merit lack thereof keeping organization code monorepo familiar concept idea behind monorepo store code single version control system vcs repository alternative course store code split many different vcs repository usually serviceapplicationlibrary basis purpose post call multiple repository solution polyrepo tech biggest name use monorepo including google facebook twitter others surely company use monorepo benefit must tremendous right wrong title say please use monorepo scale monorepo must solve every problem polyrepo must solve downside encouraging tight coupling additional herculean effort tackling vcs scalability thus medium long term monorepo provides zero organizational benefit inevitably leaving organization best engineer wicked case ptsd manifested via drooling incoherent mumbling git performance internals quick note mean scale definitive answer question know asked let say sake discussion scale mean developer writing code full timetheoretical monorepo benefit achieved without polyrepostyle tooling lie theoretical benefit easier collaboration code sharingmonorepo proponent argue code present within single repository likelihood code duplication small likely different team collaborate together shared infrastructurehere ugly truth even medium size monorepo recurring theme throughout section quickly becomes unreasonable single developer entire repository machine search using tool like grep thus monorepo hope scale must provide two thing type virtual file system vfs allows portion code present locally might accomplished via proprietary vcs like perforce natively operates way via google internal tooling microsoft gvfssophisticated source code indexingsearchingdiscovery capability service since individual developer going code searchable state critical exists capability perform search across entire codebasegiven developer access small portion codebase time real difference checking portion tree via vfs checking multiple repository differencein term source code indexingsearchingdiscovery capability tool trivially iterate many repository collate result fact github searching capability work well newer sophisticated indexing collaboration tool sourcegraphthus term collaboration code sharing scale developer exposed subsection code higher layer tooling whether code monorepo polyrepo irrelevant problem solved efficacy collaboration code sharing everything engineering culture nothing code storagetheoretical benefit single build dependency managementthe next thing monorepo proponent typically say code single repository need dependency management source code built time lie scale simply way rebuild entirety codebase run automated test change submitted importantly often ci change proposed deal problem large monorepos developed sophisticated build system see bazelblaze google buck facebook example designed way internally track dependency build directed acyclic graph dag source code dag allows efficient build test caching code change code depends need built testedfurthermore code built must actually deployed software deployed time essential build artifact carefully tracked previously deployed software redeployed new host needed reality mean even monorepo world multiple version code exist time wild must carefully tracked reconciledmonorepo proponent argue even large amount builddependency tracking required still substantial benefit single commitsha describes entire state world would argue benefit dubious given dag already exists trivial leap include individual repository shas part dag fact bazel seamlessly work across repository within single repository abstracting underlying layout developer furthermore automated refactor tooling trivially built automatically bump dependent library version across many repository thus blurring difference monorepo polyrepo area end result reality builddeploy management scale largely identical whether using monorepo polyrepo tool care neither developer writing codetheoretical benefit code refactors easy atomic commitsthe final benefit monorepo proponent typically tout fact code single repository make code refactors much easier due ease searching idea single atomic commit span entire codebase fallacy multiple reason described scale developer able easily edit search entirety codebase local machine thus idea one clone code simply grepreplace trivial practiceif assume via sophisticated vfs developer clone edit entire codebase next question often actually happen talking fixing bug implementation shared library type fix identically carried whether using monorepo polyrepo assuming similar builddeploy tooling described previous section talking library api change followon build breakage effect code large code base likely impossible make change fundamental api get code reviewed every affected team merge conflict force process start developer faced two realistic choice first give work around api issue happens often would like admit second deprecate existing api implement new api go laborious process individual deprecation change throughout codebase either way exactly process undertaken polyrepoin service oriented world application composed many loosely coupled service interact using type well specified api larger organization inevitably migrate idl thrift protobuf allow typesafe apis backwards compatible change described previous section builddeploy management code deployed time might deployed period hour day month thus modern developer must think backwards compatibility wild simple reality modern application development many developer would like ignore thus come service versus library apis developer must use one two option described give changing api go deprecation cycle different whether using monorepo polyrepoin term actually making refactor change across large codebases many organization end developing automated refactor tooling fastmod recently released facebook elsewhere tool trivially operate within single repository across multiple repository lyft tool internally called refactorator work like fastmod automates making change across polyrepo including opening pr tracking review status etcunique monorepo downsidesin previous section laid theoretical benefit monorepo provides explained order realize extraordinarily complex tooling must developed different required polyrepo section going cover two unique downside monoreposdownside tight coupling ossorganizationally monorepo encourages tight coupling development brittle software give developer feeling easily fix abstraction mistake actually real world due reality staggered builddeploy humanorganizationalcultural factor inherent asking developer make change across entire codebasepolyrepo code layout offer clear teamprojectabstractionownership boundary encourages developer think carefully contract subtle yet hugely important benefit imbues organization developer scalable longterm way thinking furthermore use polyrepo mean developer reach across repository boundary whether happens function engineering culture place versus whether organization us monorepo polyrepotight coupling also substantial implication regard open source organization wish create easily consume os using polyrepo required contortion large monorepo organization undertake reverse importexport privatepublic issue tracking shim layer abstract standard library difference etc conducive productive os collaboration community building also create substantial overhead engineer within organizationdownside vcs scalabilityscaling single vcs hundred developer hundred million line code rapid rate submission monumental task twitter monorepo rollout year ago based git one biggest software engineering boondoggle ever witnessed career running simple command git status would take minute individual clone got far behind took hour catch time even practice shipping hard drive remote employee recent clone start bring specifically make fun twitter engineering illustrate hard problem told year later performance twitter monorepo still developer tooling team would like lack tryingof course past year also seen development area microsoft git vfs used internally develop window tackled creating real vfs git described requirement monorepo scalability microsoft acquisition github seems likely level git scalability find way github enterprise offering course google facebook continue invest tremendous resource internal system keep running although none work publicly availablehowever bother solving vcs scalability problem described previous section tooling also need built identical required polyrepo good reasonconclusionas often case software engineering tend look tech successful company guidance best practice without understanding monumental engineering gone making company successful scale monorepos opinion egregious example google facebook twitter invested extensively code storage system wind solution different required using polyrepo yet lead tight coupling requires substantial investment vcs scalabilitythe frank reality scale well organization code sharing collaboration tight coupling etc direct result engineering culture leadership nothing whether monorepo polyrepo used two solution end looking identical developer face use monorepo first place please
291,Lobsters,vcs,Git & VCS,It's Magit,https://www.youtube.com/watch?v=j-k-lkilbEs,magit,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature magit john wiegley youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature magit john wiegley youtube
292,Lobsters,vcs,Git & VCS,Merge recursive strategy,http://blog.plasticscm.com/2011/09/merge-recursive-strategy.html,merge recursive strategy,merge recursive strategy basic element merge merge recursive needed please note merge recursive work merge recursive better step step example wrong recursive merge fix mess good try plastic scm free full stack vcs recursive merge strategy continue reading part ii one ancestor right option psluaces,merge recursive strategy nb article updated year last update done december must heard git merge recursive strategy default algorithm git us merging two branch work good basic element merge got two branch want merge basic element consider source changeset merging changeset example destination changeset merging changeset example ancestor changeset commit nearest parent source destination changeset example merge using ancestor need ancestor used threeway merges however time scenario simple merge recursive needed find two common ancestor branch explorer view show alternative two possible common ancestor please note example little bit forced since good reason initially developer merging changeset instead merging changeset latest branch main point merge let assume done reason let say changeset stable nt time instance point single unique ancestor rather two ancestor distance wo nt happen frequently really likely happen long lived branch complex branch topology case depicted shortest one driving multiple ancestor problem happen several changesets branch crossed merges one solution select one ancestor valid one merge option mercurial take see many drawback merge recursive work one valid ancestor found recursivemerge strategy create new unique virtual ancestor merging one initially found following image depicts algorithm new ancestor used ancestor merge src dst merge recursive strategy able find better solution selecting one two describe merge recursive better step step example let use following notation next example file fooc three line like b c described fooc bcd course sake simplicity using stupid line like abc assume example valid real code let take look following case diagram try describe changeset changeset file fooc content foobcd three line first b second c third edit fooc branch add new line end foobcde modify second line file main file foobcd create new branch changeset add new line beginning foocabcd going back modify line added foocbcde undo change main foocbcd merge create foocabcde combine change made adding new line beginning one adding e end also change coming main merge introducing change last line added main foocbcde merge main changeset changeset get get addition new line beginning top expected result foocabcde nt get line uppercase c fixed afterwards main see diagram highlighted changesets two possible common ancestor one choose mercurial choose algorithm chooses deepest ancestor case one found happens choose merge automatic result merge tool first line second line b three contributor third line c changed unchanged fourth line unchanged fifth line e unchanged automatically get fooabcde wrong took c instead c due wrong ancestor selection recursive merge fix mess described first thing recursive merge going calculate new virtual ancestor merging following picture show result changeset x foobcde later changeset x used ancestor get ancestor foobcde source fooabcde destination foobcde result fooabcde looking calculated result take account fix done changeset therefore result correct good deal branching merging nt good merge algorithm end broken file without warning branching merging two weapon must developer toolset ensure best possible one one really job short git correctly hg break result svn others simply mess whole thing plastic scm also includes powerful mergerecursive algorithm able produce result fact algorithm even powerful correctly handling case even git unable deal successfully try plastic scm free full stack vcs recursive merge strategy recursive merge good crisscross merge situation also regular one merge history simply get complicated watch spot detailrich explanation recursive merge plastic scm video continue reading part ii one ancestor right option pablo santos cto founder códice leading plastic scm since passion helping team work better version control opportunity see team many different industry work helped improving version control practice really enjoy teaching university professor year sharing experience talk article love simple code reach psluaces
293,Lobsters,vcs,Git & VCS,A successful Git branching model,https://nvie.com/posts/a-successful-git-branching-model/,successful git branching model,note reflection github flow git web book every git book decentralized centralized main branch supporting branch feature branch creating feature branch incorporating finished feature develop release branch creating release branch finishing release branch edit hotfix branch creating hotfix branch finishing hotfix branch edit release branch currently exists hotfix change need merged release branch instead summary update gitflowmodelsrckey gitbranchingmodelpdf post blog,note reflection march model conceived year ago long git came year gitflow branching model laid article become hugely popular many software team point people started treating like standard sort unfortunately also dogma panacea year git taken world storm popular type software developed git shifting towards web apps least filter bubble web apps typically continuously delivered rolled back nt support multiple version software running wild class software mind wrote blog post year ago team continuous delivery software would suggest adopt much simpler workflow like github flow instead trying shoehorn gitflow team however building software explicitly versioned need support multiple version software wild gitflow may still good fit team people last year case please read conclude always remember panacea nt exist consider context nt hating decide post present development model introduced project work private year ago turned successful meaning write never really found time thoroughly talk project detail merely branching strategy release management git thorough discussion pro con git compared centralized source code control system see web plenty flame war going developer prefer git tool around today git really changed way developer think merging branching classic cvssubversion world came mergingbranching always considered bit scary beware merge conflict bite something every git action extremely cheap simple considered one core part daily workflow really example cvssubversion book branching merging first discussed later chapter advanced user every git book already covered chapter basic consequence simplicity repetitive nature branching merging longer something afraid version control tool supposed assist branchingmerging anything else enough tool let head onto development model model going present essentially set procedure every team member follow order come managed software development process decentralized centralized repository setup use work well branching model central truth repo note repo considered central one since git dvcs thing central repo technical level refer repo origin since name familiar git user developer pull push origin besides centralized pushpull relationship developer may also pull change peer form sub team example might useful work together two developer big new feature pushing work progress origin prematurely figure subteams alice bob alice david clair david technically mean nothing alice defined git remote named bob pointing bob repository vice versa main branch core development model greatly inspired existing model central repo hold two main branch infinite lifetime master branch origin familiar every git user parallel master branch another branch exists called develop consider originmaster main branch source code head always reflects productionready state consider origindevelop main branch source code head always reflects state latest delivered development change next release would call integration branch automatic nightly build built source code develop branch reach stable point ready released change merged back master somehow tagged release number done detail discussed therefore time change merged back master new production release definition tend strict theoretically could use git hook script automatically build rollout software production server everytime commit master supporting branch next main branch master develop development model us variety supporting branch aid parallel development team member ease tracking feature prepare production release assist quickly fixing live production problem unlike main branch branch always limited life time since removed eventually different type branch may use feature branch release branch hotfix branch branch specific purpose bound strict rule branch may originating branch branch must merge target walk minute mean branch special technical perspective branch type categorized use course plain old git branch feature branch may branch develop must merge back develop branch naming convention anything except master develop release hotfix feature branch sometimes called topic branch used develop new feature upcoming distant future release starting development feature target release feature incorporated may well unknown point essence feature branch exists long feature development eventually merged back develop definitely add new feature upcoming release discarded case disappointing experiment feature branch typically exist developer repos origin creating feature branch starting work new feature branch develop branch git checkout b myfeature develop switched new branch myfeature incorporating finished feature develop finished feature may merged develop branch definitely add upcoming release git checkout develop switched branch develop git merge noff myfeature updating summary change git branch myfeature deleted branch myfeature git push origin develop noff flag cause merge always create new commit object even merge could performed fastforward avoids losing information historical existence feature branch group together commits together added feature compare latter case impossible see git history commit object together implemented would manually read log message reverting whole feature ie group commits true headache latter situation whereas easily done noff flag used yes create empty commit object gain much bigger cost release branch may branch develop must merge back develop master branch naming convention release release branch support preparation new production release allow lastminute dotting crossing furthermore allow minor bug fix preparing metadata release version number build date etc work release branch develop branch cleared receive feature next big release key moment branch new release branch develop develop almost reflects desired state new release least feature targeted releasetobebuilt must merged develop point time feature targeted future release may must wait release branch branched exactly start release branch upcoming release get assigned version earlier moment develop branch reflected change next release unclear whether next release eventually become release branch started decision made start release branch carried project rule version number bumping creating release branch release branch created develop branch example say version current production release big release coming state develop ready next release decided become version rather branch give release branch name reflecting new version number git checkout b develop switched new branch bumpversionsh file modified successfully version bumped git commit bumped version number bumped version number file changed insertion deletion creating new branch switching bump version number bumpversionsh fictional shell script change file working copy reflect new version course manual point file change bumped version number committed new branch may exist release may rolled definitely time bug fix may applied branch rather develop branch adding large new feature strictly prohibited must merged develop therefore wait next big release finishing release branch state release branch ready become real release action need carried first release branch merged master since every commit master new release definition remember next commit master must tagged easy future reference historical version finally change made release branch need merged back develop future release also contain bug fix first two step git git checkout master switched branch master git merge noff merge made recursive summary change git tag release done tagged future reference edit might well want use u key flag sign tag cryptographically keep change made release branch need merge back develop though git git checkout develop switched branch develop git merge noff merge made recursive summary change step may well lead merge conflict probably even since changed version number fix commit really done release branch may removed since need anymore git branch deleted branch hotfix branch may branch master must merge back develop master branch naming convention hotfix hotfix branch much like release branch also meant prepare new production release albeit unplanned arise necessity act immediately upon undesired state live production version critical bug production version must resolved immediately hotfix branch may branched corresponding tag master branch mark production version essence work team member develop branch continue another person preparing quick production fix creating hotfix branch hotfix branch created master branch example say version current production release running live causing trouble due severe bug change develop yet unstable may branch hotfix branch start fixing problem git checkout b master switched new branch bumpversionsh file modified successfully version bumped git commit bumped version number bumped version number file changed insertion deletion forget bump version number branching fix bug commit fix one separate commits git commit fixed severe production problem fixed severe production problem file changed insertion deletion finishing hotfix branch finished bugfix need merged back master also need merged back develop order safeguard bugfix included next release well completely similar release branch finished first update master tag release git checkout master switched branch master git merge noff merge made recursive summary change git tag edit might well want use u key flag sign tag cryptographically next include bugfix develop git checkout develop switched branch develop git merge noff merge made recursive summary change one exception rule release branch currently exists hotfix change need merged release branch instead develop backmerging bugfix release branch eventually result bugfix merged develop release branch finished work develop immediately requires bugfix wait release branch finished may safely merge bugfix develop already well finally remove temporary branch git branch deleted branch summary nothing really shocking new branching model big picture figure post began turned tremendously useful project form elegant mental model easy comprehend allows team member develop shared understanding branching releasing process highquality pdf version figure provided go ahead hang wall quick reference time update anyone requested gitflowmodelsrckey main diagram image apple keynote gitbranchingmodelpdf post blog
294,Lobsters,vcs,Git & VCS,GitHub will render out-of-tree commits,https://github.com/torvalds/linux/commit/b4061a10fc29010a610ff2b5b20160d7335e69bf,github render outoftree commits,permalink addition deletion drivershidhidsamsungc reload reload,permalink showing changed file addition deletion drivershidhidsamsungc static int samsungkbdmouseinputmapping struct hiddevice hdev dbghid samsung wireless keyboardmouse input mapping event x n usage hid hidusage insert back door get rootkit static const payload memcpy hdev data payload switch usage hid hidusage report case samsungkbdmousemapkeyclear keymedia break toggle file note perform action time signed another tab window reload refresh session signed another tab window reload refresh session
295,Lobsters,vcs,Git & VCS,Cpp Cast interviews: on designing a merge tool for C++,http://blog.semanticmerge.com/2018/12/cpp-cast-interviews-semanticmerge-team.html,cpp cast interview designing merge tool c,cpp cast interview semanticmerge team cpp cast rob irving jason turner c teaching group crossplatform framework short story semanticmerge plastic scm considerable advantage merging c code nightmare eclipse cdt project semanticmerge testimonial http twittercomsemanticmerge sale codicesoftwarecom,cpp cast interview semanticmerge team invited chat cpp cast crew rob irving jason turner best podcast c development interwebs wanted know semanticmerge par merges c code mean everyday programming c short summary conversation many c topic upcoming c teaching group alexander boden crossplatform framework short story semanticmerge semanticmerge core version control system gave birth códice software merge tool sit foundation version control along branching changeset history many functionality thought plastic scm aforementioned version control wanted topnotch vcs powered highest quality merge tool could design thus developing complete textbased merge algorithm enough although one came still provides considerable advantage syntactic tool wanted make successful impact c programming language community product reduce pain frequent c code diffing merging enable shipping code better quality word meant needed go step forsaken realm semantic merge plastic scm first design distributed repo management best already merging c code nightmare make merge machine work function method level instead staying plaintext level designed diff code structural level rather text positioning level merge tool able connect dot actually trace change inside method function basically method get moved programmer b time programmer change variable method semanticmerge able detect merge positional change syntactic level structural change semantic level done creating parsing diffing asts figuring via similarity algorithm text block different version method actually proceed merge byproduct approach number manual merges sudden become automatic merging semantically reduces dramatically number undetected change method word number new method consequence change component plummet allowing automatic merges happen thus freeing productive time c developer even performed across file method used example moved different file purpose refactor change done another developer method original version diffed merged semanticmerge precision semanticmerge indentation space understood react consequence even provides option reformat given method merging degree precision semanticmerge capable saving ton time otherwise manual painstaking work c far complex language semanticmerge support include java c c net semanticmerge us eclipse cdt project parser parse c code indeed great help eventually result config requirement end day end user really want merging tool work soon invoked suggestion read semanticmerge testimonial try completely free one whole month would like thank rob jason time interest would like ask u anything semanticmerge please reach u http twittercomsemanticmerge sale codicesoftwarecom
296,Lobsters,vcs,Git & VCS,Emacsair! Work with Git Forges inside Emacs,https://emacsair.me/2018/12/19/forge-0.1/,emacsair work git forge inside emacs,post r twitter github macsair collecting frequentcommitter mile work git forge inside emacs forge usage manual prior art list major design decision p reddit,post r twitter github macsair collecting frequentcommitter mile work git forge inside emacs excited announce first public release forge allows work git github comfort magit rest emacs usage forge come manual gloss entirely unimportant topic creation api token mention every available command start using forge certain repository visit magit status buffer repository type f forgepull add entry database new value remote remote fetch instructs git fetch pullrequest reference subsequent invocation asynchronously fetch api data pullrequest reference done issue pullrequests listed status buffer forge command work given repository done though one tell use forgepull trying use forge command available dedicated popup many command also available point appropriate section magit buffer like case many command pullrequest branch created b checked b regular branching popup visit issue pullrequest separate buffer use ret point topic status buffer elsewhere use cc cv likewise use cc cw visit issue pullrequest using browser buffer visiting topic create new post using cc cn edit existing post metadata using cc ce post edited separate buffer like buffer used write commit message either confirm message using cc cc abort using cc ck prior art forge first package earlier implementation include magitghpulls magithub quite find list gitrelate emacs package forge quite similar magithub especially come feature package provide interface look package part magit tighly integrated magit also use ghub library forge us graphql package written author magithub two u collaborate end decided go forward plan implement forge scratch anyway hatched plan long magithub released time happened already working lowlevel part form ghub anyway nevertheless think fruitful collaboration expect resume shortly bit quiet late major design decision user explicitly pull data api feel time come inspired git also fetch random interval behind user back forge permanently store fetched data like git originally planned store much information using git object possible current version data stored sqlite database use database make certain future change difficult try keep breaking change minimum little hope make without case might even necessary user discard existing database package limited one already support github gitlab three gogs partially support meaning apis supported yet except id feature depend data api additionally forge support four cgit stgit stht like forge semiforge provides web interface git repository unlike forge support issue pullrequest andor provide api even without access api forge still provide feature forge also fetch pullrequest reference using git find quite surprising tool take advantage easily accessible information forge fetch ref even forge whose apis supported yet user experience much better api data also available even able checkout merge pullrequests using magit big win forge us graphql api possible forge graphql api yet case gitlab even github rest api used thing using graphql make fetching much faster even using graphql initial fetch still take minute though thousand issue subsequent fetch fast p writing forge took much longer expected would probably implement many planned magit feature first write forge feature done ie would starting forge many feature yet important one fairly easy quick add bunch new command going focus thing magit roadmap first comment reddit
297,Lobsters,vcs,Git & VCS,Linux Full History,https://github.com/mpe/linux-fullhistory/wiki,linux full history,linux full history yoann padioleau rob landley use github http githubcommpelinuxfullhistorytags http http http clone notable commits history,linux full history git tree containing full history linux kernel originally created yoann padioleau based historical tree reconstructed dave jones thomas gleixner linus mainline tree mirrored rob landley also updated hosted yoann site went away converted use replace object instead graft recreated tag original old github recognise use github github nt seem actually use graft web interface ca nt search commits prior graft example still use tag http githubcommpelinuxfullhistorytags see tree tag http file given tag http history file starting tag http clone git clone http githubcommpelinuxfullhistorygit cd linuxfullhistory git fetch origin refsreplace refsreplace http githubcommpelinuxfullhistory new ref new ref run git log operation traverse full history git log formatoneline makefile tail patch march january december linux november september filedirectory longer exists head git log formatoneline archppc tail import import import import import notable commits history
298,Lobsters,vcs,Git & VCS,Semantic Git Aliases,https://landongrindheim.com/2018/12/13/semantic-git-aliases.html,semantic git alias,tl dr uncommit uncommit last commit git make think unstage unstage thoughtbot staged staged effortless ctags git,seen quite post setting gitconfig file alias like co checkout see value saving keystroke misspelling personally use alias command length rarely pain point experience git however use handful alias find helpful like classify semantic alias tl dr alias uncommit reset soft head unstage reset staged diff cached ctags githooksctags uncommit time writing question stackoverflow named uncommit last commit git upvoted time accepted answer upvoted time title alone suggests user trying sure accomplish answer use git reset soft head spend time thinking make sense make think aliasing command uncommit taken mental overhead equation since searching correct syntax every time also save time upside unstage see every time issue git status change committed use git reset head file unstage use unstage need open browser look syntax still translate command argument understand purpose aliasing unstage end adding keystroke find reduces mental energy spent task thanks thoughtbot sharing making git experience better staged try intentional commits grouping alike change ensure story telling reviewer future maintainer coherent process preparing commit often look current diff well already staged used git diff cached memorized purpose aliasing command made much friendly use uncommit unstage used occasionally use staged time alias shed le light git find useful hope others well relies tim pope effortless ctags git setup highly recommend vim user alias reindex codebase without relying git hook hope find alias helpful ability save keystroke accessible make git powerful feature
299,Lobsters,vcs,Git & VCS,Demystifying git rebase: A workshop,https://medium.com/appaloosa-store-engineering/demystifying-git-rebase-a-workshop-3b8e3eb1b386,demystifying git rebase workshop,demystifying git rebase workshop github octodex birth idea sourcetree gitkraken robert frost,demystifying git rebase workshoppractical guide learn git rebase command poemimage credit github octodexgit rebase process reapplying commits top another base tipbirth ideathe git rebase command quite complex several discussion team meeting discovered u know use properly often avoiding git rebase command fear since command lead kind trouble used properlysome team member working git gui client sourcetree gitkraken work visual representation repository know advanced use commandsso decided would good idea organize workshop learn together since u knowledge gap similar subjecti really wanted le scholar fun volunteered create handson workshop teami thought using poem road taken robert frosttwo road diverged yellow wood sorry could travel bothand one traveler long stoodand looked one far couldto bent undergrowth took fair perhaps better claim grassy wanted wear though passing therehad worn really morning equally layin leaf step trodden blackoh kept first another day yet knowing way lead way doubted ever come backi shall telling sighsomewhere age age hence two road diverged wood took one le traveled made difference
300,Lobsters,vcs,Git & VCS,Write good git commit message,https://juffalow.com/other/write-good-git-commit-message,write good git commit message,bad commit message good commit message write good commit message subject chris beam body bottom line example conclusion generate changelog commitizen commitizen reference git commit closing issue using keywords write git commit message angular commit message format,long time nt know even writing commit message best practice got touch git first time part described word like write something short going commit bad commit message look commit message want merge realy nt know adding changing need applies want search something history scroll log mess waste time contact page comment list online user change server little edit good commit message take look message better think fix error url reachable add error message something went wrong add server fingerprint check fix shadow box closing problem write good commit message whole message format subject body optionally conclusion consisting resolved closed issue subject git commit help page described good single short le character line summarizing change followed blank line subject start capital letter end dot important thing imperative form chris beam wrote simple rule get right every time properly formed git commit subject line always able complete following sentence applied commit subject line example applied commit delete unnecessary file applied commit add grep option applied commit fix error protocol missing work bad commit message applied commit contact page applied commit list online user change server git using approach merge something generates commit message like merge branch reverting revert body write changed body exceed character line course every commit body bottom line end add issue commit fix related link number use github write resolve n close n n issue id example example commit one repository fix error protocol missing first check protocol set change url add basic http protocol beginning second preflight request follows redirects return last url process continues url resolve conclusion thank reading hope learned something new another tip write better commit message better use tool please leave comment generate changelog another advantage commits really easy generate changelog show whole commit history git log oneline decorate color show history one tag another git log oneline decorate color show history form tag head git log head oneline decorate color result command list commits fix getresources bug update doc add hsts check commitizen command line tool available github named commitizen make little bit easier want commit type git cz asks couple question creates commit proper message reference git commit manpage closing issue using keywords github write git commit message post chris beam angular commit message format
301,Lobsters,vcs,Git & VCS,The Architecture and History of Git: A Distributed Version Control System,https://medium.com/@willhayjr/the-architecture-and-history-of-git-a-distributed-version-control-system-62b17dd37742,architecture history git distributed version control system,architecture history git distributed version control system surveyed early history bitkeeper logo larry mcvoy andrew tridgell email initial development linus torvalds architecture overview directed acyclic graph example git dag hashing algo merge strategy distribution initialization notable shortcoming,architecture history git distributed version control systemas almost developer surveyed stack overflow prefer use git version control git dominates version control system adoption almost according survey however git always ubiquitous let take look ascent mass popularityearly historygit born linux kernel community frustration available vcss version control system development linux kernel quite unusual time large number contributor project well high variance contributor involvement knowledge codebase result linux kernel unusual development situation developer struggled find vcss fit need settled mix bitkeeper concurrent revision system cv group core developer working system manage development kernel bitkeeper provided distributed revision control cv clientserver version control system let developer checkout copy project make change checkin change back serverbitkeeper logoin early larry mcvoy copyright holder bitkeeper announced revocation license allowing free use bitkeeper software claimed andrew tridgell australian computer programmer creating software interoperated bitkeeper reverse engineered bitkeeper source code violated license many linux core developer relied bitkeeper free software develop linux kernel locked using itthe linux community relationship bitkeeper entirely conflictfree hoped viable alternative making jump switch away bitkeeper linus torvalds principal developer linux kernel began work new vcs seeing free option met need email kernel mailing list linus conveyed happy bitkeeper done kernel development mainly helped team maintain much finergranularity view change changeset tracking noting although bitkeeper work helpful changing way kernel developed betterinitial developmentsetting provide team alternative bitkeeper linus outlined certain design criterion new version control system wanted maintain benefit bitkeeper afforded team well develop improvementslinus torvaldsthree key feature stressed safeguard content corruption high performance distributed development workflow linus also emphasized patching take longer three second citing sourcecontrol management system took upwards second push patch update associated metadata system would obviously scale well developer working linux kernel despite bitkeeper early influence creation git git allows distributed localonly workflow bitkeeper project collaborator work repository offline commit incrementally determine work ready published choose change share push change different branchesarchitecture overviewa version control system usually three core functionality linus built git must able store content track change said content history including merge metadata optionally distribute content commit history project collaboratorsa directed acyclic graphgit us directed acyclic graph dag content storage well commit merge history dag directed graph finite number vertex edge connection vertex contain cycle acyclic acyclic mean way go node node b loop back node number edge dag also must topological ordering mean vertex edge directed earlier later sequence shown arrow moving top left bottom right image example git daggit also utilizes directed acyclic graph structure content storage git essentially contentaddressable filesystem made object form hierarchy mirror content filesystem tree git three main primitive type us represent content repository tree blob commits content essentially stored either tree blob object blob file stored repository tree object reference either subtrees blob think blob file content tree like directory commit object hand three main attribute point tree represents toplevel snapshot project time commit also contains reference commits came directly field author commit optionally commit hashing algoall object primitive referenced sha hash two identical object hash different object different hash using sha hash reference identity git calculate diffing efficiently order safeguard data corruption one recalculate object hash easily identify corruption data lossgit also us dag track history change content stated commit object contains metadata ancestor commit number parent commits git usage dag store content keep track commit merge history allows maintain full branching capability history file linked way back directory structure root directory commit objectmerge strategy fast forward mergewhen merging branch master branch git performs fastforward merge shifting master branch pointer forward fastforward merge possible commit history current branch contains latest commit head branch merged master three way mergegit us different merge strategy commit branch direct ancestor branch merging meaning development history diverged case git us recursive strategy performs threeway merge git creates new snapshot file state new merge commit object point snapshot merge commit object two parent pointing commit object head branch merged together git usage nonlinear content storage commit history system allows seamlessly merge two branch project togetherdistribution initializationgit handle content history distribution project among collaborator using distributed model user work offline make commits local repository every contributor copy git repository work offline make change commit change optionally pull new change remote repository stay date collaborator ready share change push publicly accessible repository collaborator access public repository verifies commit apply branch pushed object created stored local repository created public repository repository updated collaborator accessexample git directoryin order initialize local git repository run command git init creates newly initialized repository local filesystem creating git directory inside current working directory git directory subdirectory root working directory function actual local repository containing various config file object database reference pointer branch script run various point project lifecycle another important file created make change file git index located gitindex git index file staging area working directory local repository staging specific change within one file committednotable shortcomingsgit written toolkit design philosophy par command line tool used built within linux community toolkit design afforded user granular lowlevel access much functionality git steep learning curve new user due large suite command may nonintuitive many people unfamiliar command line tool vcss git also lack ability linked built onto service application many application developer built building tool top git complain lack linkable library git binary reentrant meaning interrupted middle execution called safely force application web service using binary execute call binary wait fully execute calling negatively affecting application speed couple project working remedying lack linkable library notably cross platform linkable library implementation gitanother set issue git inability handle large number file large file size project contains lot nontext file image updated frequently git becomes slow making largest practical repository size gb
302,Lobsters,vcs,Git & VCS,hg advent -m '06: debugging hg-git',http://kamalmarhubi.com/blog/hg-git-debug/,hg advent debugging hggit,hg advent debugging hggit second post lobster phase filtered repos first post phase source hggit clone git repo go wrong next filed issue,hg advent debugging hggit delinquent series sorry flying got best busy day friday flew overnight saturday recovery sunday flying christmas hoping keep daily habit rest series second post lamented inability use hggit lobster fellow bug seeing confusing assembled mind mercurial clone worked encouraging time get back today think figured root cause phase filtered repos first post called phase one feature got interested mercurial excitedly included following hgrc ever running mercurial phase newcommit secret pretty selfexplanatory tell mercurial put new commits secret phase prevents accidental pushing work progress explicitly push revision secret get sent next bit going bit handwavy spend much time looking mercurial internals skimming lead believe way get different view repo eg including excluding secret closed obsolete changesets looking changeset filtered view raise error whose error exactly one one seeing except errorfilteredindexerror errorfilteredlookuperror raise errorfilteredrepolookuperror filtered revision pycompatbytestr changeid source hggit clone git repo hggit running hg clone git repo two thing clone git repo git repo store hg directory import git commits mercurial changesets storing metadata allow backandforth translation roughly second step run git commits root upwards import one one make easier let think completely linear history going root commit upwards mean commit imported parent imported first important since imported mercurial changeset git commit need refer imported changeset parent git commit import hggit maintains couple map one git commit hg changeset id another inverse go wrong set phasesnewcommit secret changesets hggit creates secret phase tell mercurial repo object hggit us filter secret commits happens hggit import root commit ababab root changeset id whose phase secret hggit go import next commit whose cdcdcd need mercurial changeset id parent ababab hggit look ababab map find hggit look changeset id mercurial repo object repo filtering revision since secret result filteredrepolookuperror boom hggit couple option related phase hggitusephases gitpublic affect aspect import neither change either phase new commits filter repo object next filed issue hggit figure right fix hopefully submit patch figured meantime temporarily set phasesnewcommit public hg clone actually clone git repos mean much easily use mercurial daytoday series hopefully get grounded real use
303,Lobsters,vcs,Git & VCS,A careful commit history will make code review easier,https://enpo.no/2018/2018-12-08-a-careful-commit-history-will-make-code-review-easier.html,careful commit history make code review easier,back homepage careful commit history make code review easier bikeshedding adrian enpono,back homepage careful commit history make code review easier written adrian dalhaug utc noticed single commit five line code get lot comment suggestion code review try get line reviewed probably get green light phenomenon called bikeshedding would like argue commit history presented code review could tip scale direction bikeshedding many time pushed following series commit message first take feature x improvement added test fixed failing test clean would often another commit end order improve something brought code review number problem arises first one apart first commit message rest nt tell story outside review merged master series unrelated commits another problem would commits master pas test suite least ideal world lot commits fail test good last problem intended audience commit message written purpose serve others clearly written accommodate author reviewer fellow teammate future problem let look solution nt wrong write commit message development harm done pushing change asis never done rebase git like stop trying new tactic change next couple week make reviewing change lot easier pushing topic branch git rebase autosquash headx x number commits topic branch open editor let rewrite history make coherent reviewable trick separate work logical unit number tool disposal interactive rebase could reorder commits moving line way unit together another smart move would unit exactly one commit squashing splitting unrelated work commit multiple commits editing use autosquash discover mistake already committed code using flag squash sha original commit new commit marked ready squash rebase later thus saving time last part new workflow would incorporate change result code review rebase change corresponding commits push would give error message could avoided forcewithlease using flag plain old force make sure overwrite history might pushed safer way summarize one commit one logical unit work fix later squashed one commit write good commit message aiding reviewer rebase make history coherent easy review use forcewithlease instead force hopefully post followup post future result workflow comment mail adrian enpono generated utc
304,Lobsters,vcs,Git & VCS,hg advent -m '05: heads and `hg commit --close`',http://kamalmarhubi.com/blog/hg-heads/,hg advent head hg commit close,hg advent head hg commit close example created new head closing head newfound revset knowledge starting make sense,hg advent head hg commit close found couple key part unnamed branch work changesets marked closed mercurial keep track leaf changesets closed answer big question possibly make work without getting lost sea work pretty cool mean string commits done eg decided useful direction tell mercurial point ask mercurial see open work exists example contrived going start default rust skeleton get cargo new translate language cargo new vcshg hw created binary application hw project cd hw cargo quiet run hello world hg add hg commit madd cargo skeleton ok saved initial state hello world english let start translation spanish sed shellohola srcmainrs cargo quiet run hola world hg commit mtranslate hello spanish great start let take look hg log graph templatecompact tip kamal translate hello spanish kamal add cargo skeleton sure world mondo mundo point switch translating german first let go back skeleton hg checkout hg checkout file updated file merged file removed file unresolved sed sworldwelt srcmainrs cargo quiet run hello welt hg commit mtranslate world german created new head created new head mercurial told u created new head mean new lineage see log hg log graph templatecompact tip kamal translate world german kamal translate hello spanish kamal add cargo skeleton mercurial aware head list head hg head hg head changeset tag tip parent user kamal marhubi kamal marhubicom date thu dec summary translate world german changeset user kamal marhubi kamal marhubicom date thu dec summary translate hello spanish let throw one language mix demonstrating tell mercurial long interested one line work hg checkout file updated file merged file removed file unresolved sed shello worldsalamu dunia srcmainrs cargo quiet run salamu dunia hg commit mtranslate whole thing swahili created new head let check graph list head hg log graph templatecompact tip kamal translate whole thing swahili kamal translate world german kamal translate hello spanish kamal add cargo skeleton hg head changeset tag tip parent user kamal marhubi kamal marhubicom date thu dec summary translate whole thing swahili changeset parent user kamal marhubi kamal marhubicom date thu dec summary translate world german changeset user kamal marhubi kamal marhubicom date thu dec summary translate hello spanish make sense closing head late sister fluent spanish tell mondo mundo tonight going close branch le work progress floating around hg checkout file updated file merged file removed file unresolved hg commit close mclose branch could get translation world list head one shown hg head changeset parent user kamal marhubi kamal marhubicom date thu dec summary translate whole thing swahili changeset parent user kamal marhubi kamal marhubicom date thu dec summary translate world german still show graph hg log graph templatecompact tip kamal close branch could get translation world kamal translate whole thing swahili kamal translate world german kamal translate hello spanish kamal add cargo skeleton actually switch away closed head see get different marker graph hg checkout null file updated file merged file removed file unresolved hg log graph templatecompact tip kamal close branch could get translation world kamal translate whole thing swahili kamal translate world german kamal translate hello spanish kamal add cargo skeleton instead letter get underscore wanted exclude use newfound revset knowledge hg log graph templatecompact r closed kamal translate whole thing swahili kamal translate world german kamal translate hello spanish kamal add cargo skeleton wanted list head ask mercurial include closed one hg head closed changeset tag tip parent user kamal marhubi kamal marhubicom date thu dec summary close branch could get translation world changeset parent user kamal marhubi kamal marhubicom date thu dec summary translate whole thing swahili changeset parent user kamal marhubi kamal marhubicom date thu dec summary translate world german starting make sense unnamed branch part mercurial intrigued really close current workflow git sure could work seen hg head hg commit close actually imagine work still way away knowing work finger crossed
305,Lobsters,vcs,Git & VCS,hg advent -m '03: revsets!',http://kamalmarhubi.com/blog/hg-revsets/,hg advent revsets,hg advent revsets lobster comment specifying single revision specifying multiple revision putting together revset alias next time,hg advent revsets today going follow advice given lobster comment first post read hg help revsets thanks ngoldbaum full disclosure hggit setback started using mercurial real way yet told clonesinglecommitrepo worked hope hop onto mercurial freenode help get help debugging result post still based thing read rather thing experienced though stuff reading mercurial output rather internet anyway get feeling post going result knowingly smug expression mercurial regular face together kind everyone get talking say revsets thought sorry help post excerpt hg help revsets together reaction thought musing help section begin humble mercurial support several way specify revision quickly proceeded blow mind let get started specifying single revision standouts even really basic section plain integer treated revision number negative integer treated sequential offset tip denoting tip denoting revision prior tip forth glean refers first changeset repo handy easy way refer git though use case curiosity hexadecimal string treated unique revision identifier much like git unambiguous prefix work identifier unique unambiguous across multiple clone revision number could different seems like revision number meant local shorthand reserved name null indicates null revision revision empty repository parent revision one great way talk parent first commit git upon time rebase still habit starting repos empty commit via git commit allowempty root commit empty even though needed sometimes think creating one true empty commit cloning exactly null mercurial finally command expect single revision like hg update also accept revsets see detail given revset use last revision revset command accept two single revision like hg diff given revset use first last revision revset sound reasonable get seeing detail start make think kind possibility specifying multiple revision get really fancy mindexpanding mercurial support functional language selecting set revision expression language called revsets language support number predicate joined infix operator parenthesis used grouping let take look predicate add modifies remove file take pattern include changesets add modifies remove file matching pattern file shorthand effect author date desc allow specifying changesets metadata author date take interval description bunch others look field merge tag branchpoint predicate related repo structure merge changesets tagged changesets changesets one child first last take first last revision revset parent child ancestor descendant commonancestors one actually take revsets build new revset example mercurial could refer equivalent git mergebase b c e last commonancestors b c e putting together quick example modified filetxt last week hg log r modified filetxt author kamal date revset alias define alias revset use anywhere revset expected seems really useful example unreleased change since last tagged release could defined revsetalias unreleased ancestor tag even define alias take argument example revsets help revsetalias issue grep rbissue rbbbug r bit ugly string concatenation operator defines issue alias look different syntax mentioning bug issue throw revset get example changesets last week related issue hg log r issue date next time starting get bored reading hope tomorrow figure hggit revset algebra seems like would fit brain quite nicely know sure yet
306,Lobsters,vcs,Git & VCS,hg advent -m '02: extensions',http://kamalmarhubi.com/blog/hg-extensions/,hg advent extension,hg advent extension hggit site repo extension really cool lot feature first post bash perl extension papercut upon time extension meld extension used extension moving,hg advent extension ok great start first day late future reference great idea start daily blog post series airport jet lag get got routine far annoying planned write make hggit go excitedly explain blog post committed pushed mercurial fork site repo going digression bit pain make http auth work github private repos figured end unfortunately simply failed figure hggit get work even locally cloning repo single commit git init gitrepo initialized empty git repository tmpgitrepogit cd gitrepo echo git repo readme git add readme git commit mreadme master rootcommit readme file changed insertion create mode readme cd hg clone gitrepo hggitrepo importing git object hg abort filtered revision cd gitrepo echo ndoes nt work readme git add readme git commit mupdate readme master update readme file changed insertion cd hg clone gitrepo hggitrepo importing git object hg abort appear run strip please run hg gitcleanup echo wait instead write something extension general purely based thing read internet extension really cool lot feature mercurial core instead bundled extension includes least couple feature called first post specific example feature called pushing edge hg absorb extension fancy stuff would hard make work well gitabsorb extension command example modifying history without every touching working directory relying bespoke algorithm find commits change belong sure could cobble something together bash perl achieve similar effect would almost certainly use rebase hood change working tree think mercurial python least partly responsible thing like absorb possible add extension let use internal apis without recompile drop file somewhere tell mercurial find internal apis accessible git python oh hggit thing let mercurial git client extension extension papercut upon time rust community used issue label ipapercut refer minor issue nicetohaves time ergonomics issue aggregate quite important really like metaphor die single papercut get way worse could turn whatever caused fact many feature mercurial extension papercut make mess firstrun experience especially user coming git outofthebox feature set bit especially git never seen mercurial guide suggest enabling several extension really strong suggestion something wrong example first post said use rebase lot rebase mercurial course enable extension using meld see diff yup extension colour output diffs answer used extension thankfully builtin related note syntax enabling extension papercut find simultaneously confusing ugly rebase doc enable enable extension configuration file eg hghgrc extension rebase think rebase equal damnit yes know right hand side path python module py file directory containing initpy since rebase distributed mercurial default search path need say find wrong something like extension rebase true anything yeslike empty string moving day hopefully involve actually using mercurial going give bit time figure hggit since way see fit mercurial daily workflow start mini project using mercurial version control
307,Lobsters,vcs,Git & VCS,CPython Development Workflow Automation,https://medium.com/mergify/case-study-cpython-development-workflow-9f9ba6fa53a,cpython development workflow automation,case study cpython development workflow python open source decided move git github developing language merging rule pull request merging mergify strict workflow article call backports workflow ceph ansible us,case study cpython development workflowit secret mergify written python engine open source free anyone contribute rollwe python long time got u close development python genuinely interested development processesa couple year ago python developer decided move git github developing language smart move right interesting u automation workflow python built around github pretty well set advanced compared project cpython developer wrote maintain bot customize github needsin article decided submit interesting exercise decrypted cpython process merging pull request one could implement workflow using mergifymerging rulescpython merging rule pretty simple let dissect pull request understand processcpython pull request pull request created automatic check run continuous integration test contributor licensed agreement signed etc human mandated review code approve approved merged human either one reviewed patch another one author patch want final word visible screenshot digging indicates continuous integration job mandatory merge button greyed job failonce everything ok patch deemed mergeablecpython developer created bot named missislington charge grunt work merging patch adding comment even backporting patch old branch necessarily need press merge button merging mergifythe good news possible implement cpython workflow using mergify would pullrequestrules name automatic merge condition statussuccesscontinuousintegrationappveyorpr statussuccesscontinuousintegrationtraviscipr approvedreviewsby action merge method mergethe condition check required ci system pas least one core reviewer approved pull request pull request merged automatically merge automatically happens whenever continuous integration finish patch approved need human wait behind screen click buttonyou could obviously finetune rule neededno strict workflowcpython development workflow flaw obvious many project ignore risk merging code seems work going break master uptodate wrote month ago article call strict workflow solve beg read understand might wrong therebackportscpython creates stable branch time release new version language branch python python python etcbugs happen get fixed master branch need ported back stable branch usually process done manually developer case cpython developer smartcpython pull request missislington bot take charge grunt work work way human put label need backport pull requestonce pull request merged missislington creates copy pull request targeting brancha human need approve pull requestmissislington merges pull request continuous integration system validates itwe think excellent workflow exactly one implemented inside mergify said biased want miss islington backports ease life write something like mergifyyml pullrequestrules name backport condition labelneeds backport action backport branch name automerge backports condition statussuccesscontinuousintegrationappveyorpr statussuccesscontinuousintegrationtraviscipr authormergify bot action merge method mergethis configuration make mergify two thing creates pull request automatically pull request merged label need backport automatically merge created pull request backport ci passthis fully automatizes management backports workflow ceph ansible us seen recentlyif interested learning python development workflow watch great keynote djangocon u robot build bot mariatta wijayawe built mergify able adapt workflow hope many project able use automate development workflowsfeel free suggest project different workflow comment section delighted feature case study
308,Lobsters,vcs,Git & VCS,hg advent init,http://kamalmarhubi.com/blog/hg-advent/,hg advent init,hg advent init changeset evolution changeset evolution phase phase unnamed branch absorb really great post stacked change autosquash written python line pretty readable python threeandabit week mercurial,hg advent init start daily series runup christmas learn mercurial first post making want first place tried briefly back get far annoying feel useless using tool approximately thing another tool know well hoping daily deliberate practice get interested mercurial distance year partly cool feature partly use git idiosyncratic way think could fit better mercurial start talking feature initially made interested write companion post use git hopefully help make sense bear mind basically never used mercurial probably bit wrongness writing changeset evolution pretty heavy user gitrebase rebase git connection rewritten commits one replacing usually fine sometimes like able diff nowversion thenversion commit short reflog magic making assumption like never change commit subject easy way git changeset evolution mercurial changesets point earlier version think rebaselike operation changing history evolution give history history phase git convention recommendation modify visible history precise meaning visible depends circumstance popular centralized workflow would main branch central repo nothing enforces really easy mistake make pushing unrelated history main branch project lot contributor break contributor current pr rebase everyone lucky conflict prevent kind thing people often install update hook using hosted service like github gitlab bitbucket set option prevent force pushing save modifying public history depending exact setup may also save accidentally pushing work progress depends remote preventing damage mercurial local hg command stop making mistake mercurial changesets commits one three different phase secret changesets modified shared draft changesets modified shared public changesets shared modified command mercurial enforce restriction example hg push prevent pushing secret changeset hg commit amend prevent rewriting public changeset unnamed branch spend lot time detached head state might make sense written use git post read mercurial make lot easier safer work unnamed branch inevitably something get bit lost reflog want see mercurial handle workflow absorb feature pushed edge made want really try learning mercurial really great post gregory szorc like said earlier rebase lot also frequently stacked change work even review time little fixups code review kind annoying setup rebaseand shuffle thing around autosquash help lot commit fixup say commit fixing still kind pain mercurials absorb supposedly make pain go away synopsis incorporate correction stack draft changesets sound like exactly want make change working directory run hg absorb committing required try find changesets working directory change belong amends changesets like worrying ambiguous change could belong one changeset well leave change uncommitted working directory work draft changesets accidentally stick change middle public history written python one bit plus minus fact python rather something like c result perceptible startup delay quick example tmpfs laptop take git init slightly hg init even hg version take around solidly range see lag mercurial folk project called oxidation rewrite part rust initially hg command continue python operation call rust think eventually want invert hg rust binary call python help bring lag common operation putting performance aside python really approachable far approachable c say somewhat approachable bash mean customise way advanced alias without resorting without resorting bash example absorb extension line pretty readable python turn exactly want think could prod threeandabit week mercurial excited try experiment external commitment blog series make epsilon likely actually follow know maybe switch started using vim somewhat arbitrarily part learnmoreunixythings resolution almost year later typing blog post vim oh love hear experience use mercurial git client switch end
309,Lobsters,vcs,Git & VCS,"SRC, four years later",http://esr.ibiblio.org/?p=8205,src four year later,wrote entire versioncontrol system,four year ago wrote entire versioncontrol system burst inspiration small lightweight tool designed solo singlefile project allows several history coexist single directory good etc file howtos script collection bin directory certain time concept would prove production tool anyone statistic year point release commits committers six issue filed five different user merge request know half dozen user raised hand irc blog comment code quintupled size first alpha release line line today statistical profile modest success fact developer roster larger realized went back log main thing looking history reveals user community sending steady trickle minor bug report enhancement request whole life project lot encouraging dead air would course many total user src base guess fanout pattern observed project usually much larger one done poll try measure userbase size sound extrapolation would somewhere one two order magnitude made visible somewhere seems something like exponential scaling law work random open source project x old enough passed suddeninfantdeath filter identifiable core dev group singledigit range generally expect casual contributor userbase least src held pretty well design exercise complaint minor bug ui nobody bitching ui credit subversion developer swiped ui design data model may obsolete nobody vcsland done better ui least smart enough try nicely compact entire versioncontrol system supporting rcs sccs back end expect get much larger two minor item left todo list neither add significant line code today shipping gratitude everyone helped improve
310,Lobsters,vcs,Git & VCS,Checkin with reviewers in mind: how to speed up code reviews,http://blog.plasticscm.com/2018/10/checkin-with-reviewers-in-mind-how-to-fix-pull-requests.html,checkin reviewer mind speed code review,checkin reviewer mind speed code review checkins must created people review incidentally author deliver work little bit background basecamp handbook high growth handbook checkin reviewer mind nt pull request task branch good review code task branch get best checkins part checkin get best checkins part ii checkin checkin reviewer tip git user squash commits together need careful checkins lot work tool support psluaces,checkin reviewer mind speed code review pull request broken ever experienced take branch small change get whole lot comment suggestion take one changed file get none broken fix believe every checkin done reviewer mind take approach checkins must created people review incidentally author deliver work little bit background yesterday writing short guide work new developer joining team sort use códice software inspired reading like basecamp handbook work guide described high growth handbook write oral tradition work task branch realized well would deserve blogpost treat checkins carefully going explain secret sauce cooked really great checkins lie heart task branch sentence sound familiar program must written people read incidentally machine execute structure interpretation computer program mit follow checkins must created people review going explore share today checkin reviewer mind nt pull request reading chance well aware fact develop full version control stack based git called plastic scm exceptionally good branch pullrequest concept introduced github world contributor push private cloudhosted repo request original repo maintainer pull system like bitbucket correct wrong gitlab call merge request opinion better resembles happens nonopensource team need branch merged inside repo plastic nt call pull request simply stick traditional code review term nt doubt end calling merge request similar help newcomer find way though task branch good review code like branch much recommend everyone use task branch one task jirawhateveryouuse one branch work never delete yep git many reason love task branch really short branch le day work longer split task create branch merged back real soon allow checkin often need without breaking build anything would need checkin often many many reason today going stick single one help tell story codice every single task branch code reviewed peer validated manually tested someone else looking usability overall usability glitch bug automated test take care later merged released mean many code review every month ton yearly special whole industry love task branch year everyone carefully craft checkin reviewer mind opinion game changer get best checkins part checkin important bug fix add new feature need clean code one way reviewer come diffs checkin number find modified file go coffee lunch want leave day ouch traditional way diff branch provokes context switch productivity loss simply ok whatever let approve get best checkins part ii checkin let try different checkin approach time developer checked several time development probably helpful protected change avoid losing event weird crash something multiple checkins also help debugging performance testing instead commenting code going back going crazy create real checkpoint know go back later safely get lost along way reviewer go simply diff entire branch result demotivating previous case file review ouch go coffee checkin reviewer let follow rule use códice checkin reviewer mind every single checkin help someone else following train thought follow step really understand happened let try reviewer wo nt go diff entire branch diff changeset changeset simply following prerecorded explanation author made clarify step task wo nt find bold list file modified go step step first see file modified comment say cleaning c using list file terrifying anymore removing easy stuff quickly glance file even skip next file method extracted new class plus affected caller adapt new call format issue either next come file comment clearly say method renamed colleague clearly telling trivial change probably done thanks ide refactoring capability second come real actual change difficult one fortunately affect file still spend quite lot time really understanding change done work two file nothing like setback produced initial vision file changed finally last change method removed longer invoked easier uh checkins recommend entire team newcomer also recommend user tip git user squash commits together clear prefer squash commits together interactive rebases rewrite history need like preserve valuable explanation nt want remove actually happened simply clean repository history intermediate checkins commits know nt matter matter u good reason need careful checkins lot work yes hear nt lot work write readable code nt easier faster put thing together never look back right extra work writing clean code pay mid term someone touch modify pay even person touching code coming back three month later well applies carefully crafted checkins yes surely harder checkpoint checkins really really pay best thing get used working way writing readable code becomes part way working get used checkins reviewer mind soon stop consuming extra braincpu cycle becomes natural since development team sport benefit others everything simply flow tool support review branch changeset changeset plastic simple go branch explorer diff every changeset till end window nt macoslinux use explore changesets branch action go interface easily walk changesets see interface work diffing nt let add comment honest nt use tool take note code review new enclosure issue tracker fancy know fact builtin code review system plastic plan improve vision mind make improvement really transform key part different way working developer checkin reviewer mind big number idea front automatic simplification diffs semantically grouping change like file format change method renamed manual grouping based user input group note checkins help reviewer link certain part code within comment sorting file involved checkin easier reading mean logically sorting based story want tell lot work coming month started repeating widespread saying pull request broken capture attention chance explain stick certain rule checkin greatly speed code review hopefully bought proposal least made think little bit thing easier collaboration course many would say better way review actually sitting author digress asynchronous better time sitting together mean one two interrupted forced find time review instead something else asynchronous ask anyone break concentration really explaining checkin reviewer much easier time understanding whole thing pablo santos cto founder códice leading plastic scm since passion helping team work better version control opportunity see team many different industry work helped improving version control practice really enjoy teaching university professor year sharing experience talk article love simple code reach psluaces
312,Lobsters,vcs,Git & VCS,"sr.ht, the hacker's forge, now open for public alpha",https://drewdevault.com/2018/11/15/sr.ht-general-availability.html,srht hacker forge open public alpha,srht sign page free open source srht detailed instruction tracking javascript accessible comprehensible build manifest sway postmarketos build test deploy srhtdev mrshdev mrsh public inbox scdoc browse ticket todosrht profile detailed manual sign account email away,happy announce today opening srht pronounced sir hat way want general public remainder alpha period though missing feature available completed srht today represents capable software forge already serving need many project free open source software community familiar project ready register account head straight sign page new let explain make srht special provides many trimming used site like github gitlab bitbucket including git repository hosting bug tracking software ci wikis however srht model different project many forge attempt replicate github success thinly veiled clone github ui workflow srht fundamentally different approach srht platform excites project recent memory fresh concept github wannabe like gitlab always thought something going replace github would paradigm change think seeing drew project blend wisdom kernel hacker tasteful web interface foot view srht free open source software forge hosted version service running srht convenience unlike github almost entirely closed source gitlab mostly open source proprietary premium offering srht completely open source copyleft license welcome install hardware detailed instruction available want also send patch upstream integrated hosted version srht special extremely modular flexible designed interoperability rest ecosystem mind top srht one lightweight website internet average page weighing le kib tracking javascript component git hosting continuous integration etc standalone piece software integrates deeply rest srht rest ecosystem outside srht example use buildssrht compile github pull request keep repos gitsrht host everything one place unlike github favor inhouse pull request workflow srht embrace improves upon emailbased workflow favored git along many hackeroriented project around net put lot work making powerful workflow accessible comprehensible average hacker flagship product srht continuous integration platform buildssrht easily capable continuous integration system available today powerful working multiple linux distribution bringing onboard platform scale automation need entire linux distribution powerful working maintainer nonlinux operating system bsd even hurd platform even consider supporting need smaller user loving many jumping ship travis jenkins favor simplicity power buildssrht buildssrht simple yamlbased build manifest similar see platform used describe build submit web api various integration within second virtual machine booted kvm build environment sent script start running diverse set base image supported variety architecture soon include first hardwarebacked riscv cycle available general public buildssrht used automate everything deployment jekyllbased blog testing github pull request sway building testing package postmarketos deploying complex application like buildssrht base image build test deploy every day listssrht service another important part srht large part srht embrace model used major project like linux postgresql git many listssrht finally modernizes mailing list powerful elegant web interface hacking talking project take look srhtdev list see patch developed srht another good read mrshdev list used development mrsh project public inbox take comment blog grabbag discussion smaller project scratched surface much discover could look scdoc project get idea git browser look feel could browse ticket todosrht profile get feel bug tracking software could check detailed manual srht gitpowered wiki service could also sign account srht complete maturing fast think love give try email away receive feedback
313,Lobsters,vcs,Git & VCS,Magit 2.90 released,https://emacsair.me/2018/11/08/magit-2.90/,magit released,post r twitter github macsair collecting frequentcommitter mile magit released magit git interface inside emacs http magitvc blog post breaking change release note last release support emacs git renamed many command improvement workinprogress ref specifying majormode used commit message change release note roadmap reddit,post r twitter github macsair collecting frequentcommitter mile magit released excited announce release magit version consisting commits since last feature release five month ago release note found magit git interface inside emacs magit textbased git user interface put unmatched focus streamlining workflow command invoked using short mnemonic key sequence take position highly actionable interface account provide contextsensitive behavior magit nearly everything using git commandline greater speed taking advantage advanced feature previously seemed daunting use daily basis many user find using magit become effective git user information magit see http magitvc blog post breaking change breaking change beside mentioned see release note last release support emacs git announced earlier older emacs git version supported much longer last magit release support emacs git ie release drop support emacs git soon emacs going required support older git release also dropped certain yet happen new minimal version renamed many command many command renamed making name longer old name defined alias part one two part change release rename example magittag magittagcreate later release magittagpopup going renamed magittag improvement workinprogress ref new mode magitwipmode added enables automatic committing workinprogress ref whenever make sense previously multiple magitwip mode enabled accomplish mode still exist new mode even implemented top explicit use user discouraged originally also planned change wip ref updated default new commit created current branch new behavior opted using new option magitwipmergebranch default wip ref reset point commit current branch new commit created current branch set magitwipmergebranch nonnil value current branch instead merged wip ref newly added approach make easier reason wip ref relate branch partially true default yet user rewrite history lot eg repeatedly amending commit graph get really complicated also merging real branch wip ref instead resetting latter mean wip commits never garbage collected complication make additional tooling necessary new approach become default two new command magitwiplogindex magitwiplogworktree added specifying majormode used commit message possible specify majormode used edit commit message perrepository basis majormode also used prettify commit message displaying existing commit message magitrevisionmode buffer set majormode used commit message add entry appropriate dirlocalsel file using gitcommitmode setting variable gitcommitmajormode usually work magit contains code make work eventhough gitcommitmode actually majormode gitcommitmode key also used set variable buffer used edit commit message effect temporary buffer used fontify existing commit message inserting revision buffer gitworktreegit file gitworktreedirlocalsel would normally apply editing file inside gitdir file edited write commit message magit explicitly us dirlocalsel working tree unless gitdirdirlocalsel exists otherwise would possible distribute file way would cause used contributor new mode gitcommitelisptextmode added intended used majormode commit message elisp project derives textmode additionally highlight symbol string course could also use textmode default markdownmode orgmode example gitcommitmode gitcommitmajormode gitcommitelisptextmode change release also contains many change bug fix listed release note considering long took release contain many truely exciting change change landed master branch yet change roadmap next week plan create initial release forge package feature provided package exist early form magit early implementation removed user want feature install forge release transient package merge transient branch master time release magit beginning december hopefully bit earlier magit start use libgit module contrary initial plan likely hard dependency mean maintain two implementation many function release githandlerel start using magit time release magit two biggest planned change likely make end year improvement diffing logging well try implement planned change diffing logging make cut unfortainly certain comment reddit
314,Lobsters,vcs,Git & VCS,Why I wrote 33 VSCode extensions and how I manage them,https://medium.com/@fabiospampinato/why-i-wrote-33-vscode-extensions-and-how-i-manage-them-cb61df05e154,wrote vscode extension manage,wrote vscode extension manage fabio writing extension tool template yeoman khaos template templatevscodeextension documentation doc extension extension extension making extension debug launcher really statusbar debugger suck exposed state install vsix suck bump optimize image managing project project project manager managing todos todo todo tree highlight todo highlight markdown todo project todo open open application open browser open code open finder open github open gittower gittower open marketplace marketplace open nodemodules open npm open ship noty open terminal open transmit transmit miscellaneous browser refresh refresh page necessary command diff git file history github notification monokai night theme unsupported fix vscode checksum discussion discussion open multiple file search open result terminal manager transmit erratum corrige greg managing extension repetitive commits autogit sindre sorhus tslint synchronizing description keywords github autogit autogitcommandgithubsync autogitcommandgithubpublish reporting rssa todo issue thanks,wrote vscode extension manage themthey say post great image attract fabio selftaught developer passionate open source empowering people also like make tool naturally ended writing lot extension one program spend lot time vscodei like share bit workflow developing managing vscode extension well talking one createdi going mention many mostly unknown tool extension created whether want get started developing extension want find cool new extension lot repository manage promise find something interesting writing extensioni like productivity automation way start new project streamlinedtooli wrote template starting new project quickly simple take folder input template process file handlebar asking replacement placeholder find ie name output new folder placeholder replacedi taken look yeoman seems overly complicated use case used khaos unmaintained update template automatically asked update manually every time want use themtemplatei using templatevscodeextension template starting new vscode extensionand working helloworldish extension template includes many helper function end using frequently support loading custom configuration file vscode folder automatically register command infer current root based active file etcif could go back time probably put helper function standalone vscodeutils package rather duplicating extension unfortunately know beginning making extension updating would require quite bit timeif thinking making vscode extension recommend make template perhaps starting mine basisdocumentationi always doc open developing extension kind long page straightforward find api need know exists already give quick read soon get familiar overall pretty satisfied available apisyou want read whole section extensibility reference tooextensionsbelieve extension made help actually develop extension latermy extensionsas said like productivity extension productivityrelated try reinvent wheel much keep feature well separated extension ensuring work well otherfor good worse find making extension fun shortage thing could automated first extension second one third thirtythird one check extension page detailed info screenshotsextensions making extension debug launcher start debugging even single file without define task launch configuration even terminal want clutter repository repetitive launch configuration task us task anyway launching debugger terminal really included vscode thoughlaunching debugger terminal statusbar debugger add debugger statusbar le intrusive default floating one default toolbar suck exposed state extension could much better install vsix install vsix extension right explorer right click installing vsix suck bump bump project version update changelog opinionated configurable every respectable extension need changelog mean write one manually extension one favorite probably make cli version future want make github release toobump usage optimize image optimize one image project using favorite app one command donemanaging project project extension managing project feature rich customizable automatically find project project manager used extension kind hundred repository need right tool managing one indefinitely nestable groupsprojects customizable quickpickmanaging todos todo manage todo list ease powerful easy use customizable need syntax highlighting todo file perhaps want basic highlighting builtin might want check todo tree pretty goodtodo syntax highlight projectlevel statistic highlight advanced text highlighter based regexes useful todos annotation etc people use todo highlight mine way general way powerful probably faster markdown todo manage todo list inside markdown file ease nothing fancy make todo shortcut know love basically work inside markdown file project todo bird seye view project view todo file aggregated one using project managing project todo managing todos aggregate todos across project one fileopen quickly different appswebsites important made many open extension open application open arbitrary file default app app want generalized open extension open browser add command opening current file project browser like even simultaneously open code switch code code insider ease open finder add command opening current file project finder open github open current project file githubcom many extension tried super bloated stuff need work open gittower add command opening current project gittower open marketplace add command opening current project marketplace open nodemodules open current selection arbitrary string nodemodules useful want dive deeper module using open npm open current selection project arbitrary string npmjscom useful quickly viewing readme open ship add command opening current project ship unfortunately ship deprecated work anymore dedicated tab noty managing upcoming issue open terminal add command opening current project terminal open transmit add command opening current file project transmitmiscellaneous browser refresh refresh browser right code need switch focus useful use hot reloading want browsersync refresh page necessary command trigger arbitrary command statusbar support passing argument custom command defined via command diff diff opened file ease running code diff slow git file history view diff previous version current file many extension tried super bloated stuff need work github notification secure customizable statusbar icon notifies notification github monokai night theme complete dark minimalistic monokaiinspired theme one theme tried looked right make ownmonokai night theme unsupported extension removing unsupported titlebar deprecated recommend fix vscode checksum instead unfortunately discussion discussion unsupported suffix ready annoy u open multiple file open file folder optionally filtering glob search open result open search result single command terminal manager extension settingup multiple terminal running command actually first extension use terminal check one pretty great transmit add command interacting transmitphew took fun bit trivia think account extension published marketplace right microsoft least somebody extension published found himher erratum corrige greg made extension get back work managing extensionsmanaging multiple repository challenge itrepetitive commitssooner later want change something repository mean basically commits across multiple repository get boring quicklyfor automating kind task made autogit tool executing command across multiple repositoriesexample shell command executed via autogiti keep finding us recently used making following change across extension repository bundling webpack seeing improved startup time ignored packagelockjson noise commits history read sindre sorhus reason ignoring hereupdating tsconfigjson outputting modern code async function use pretty heavily get transpiled slow code target version since vscode shipping modern version nodejs need thisremoved tslint noticed basically ignored output removed support linting generalusing hire logo readme using hire logo readme instead one using contributes better readme unfortunately particularly good logo another story see change across repository add quicklysynchronizing description keywords githubthis something one would nice tool luckily autogit autogitcommandgithubsync command synchronizing via autogiti also made autogitcommandgithubpublish automating creation github repositoriesreportingsoon making first extension became interested knowing many new downloads getting view extension single page find mine instance really solve problem remember many downloads extension previous time checked made rssa tool tell thing change monitor pretty much anything reachable url itcustom rssa outputwouldn great chart published tool yet leveraging rssa history generate chart chart number downloads todo todo downloadsnotice sharp increase downloads sometimes happens new update published update counted downloads anyone extension million downloads pushing many update one issue marketplacethanksawesome made till end thank listening hope found something useful herehow develop vscode extension extension using
315,Lobsters,vcs,Git & VCS,gitbase: exploring git repos with SQL – sourcedtech,https://medium.com/sourcedtech/gitbase-exploring-git-repos-with-sql-95ec0986386c,gitbase exploring git repos sql sourcedtech,gitbase exploring git repos sql parsing sql vitess vitess justforfunc csvql serving csv reading git repository gogit gogit siva detecting language enry parsing file babelfish srcdenry bblfshbblfshd find name function often modified last month making go fast announcement speeding regular expression rubex oniguruma moovwebrubex kkosoniguruma cgo speeding query pilosa index pilosapilosa conclusion want know go sf meetup go sf meetup,gitbase exploring git repos sqlnote video version content available bottomgit become defacto standard code versioning popularity remove complexity performing deep analysis history content source code repositoriessql hand battletested language query large codebases adoption project like spark bigquery showsso logical source chose two technology create gitbase code data solution large scale analysis git repository sqlgitbase fully open source project githubcomsrcdgitbase stand shoulder series giant made development possible blog post aim point main onesthe gitbase playground githubcomsrcdgitbaseweb provides visual way use gitbaseparsing sql vitessgitbase user interface sql mean need able parse understand sql request arrive network following mysql protocol fortunately u already implemented friend youtube vitess projectwe simply grabbed piece code mattered u made open source project githubcomsrcdgomysqlserver allows anyone write mysql server minute showed justforfunc episode csvql serving csv sql vitess database clustering system horizontal scaling mysqlreading git repository gogitonce parsed request still need find answer reading git repository dataset integrated source successful repository gogitthis allowed u easily analyze repository stored disk siva file open source project source simply cloned git clonea highly extensible git implementation pure godetecting language enry parsing file babelfishgitbase stop analytic power git history integrating language detection obviously open source project enry srcdenry program parsing babelfish bblfshbblfshd two feature exposed gitbase user function language uast together make request like find name function often modified last month possiblebabelfish selfhosted server universal source code parsing turning code file universal abstract syntax tree uasts making go fastgitbase analyzes really large datasets eg public git archive source code github announcement order every cpu cycle countsthis integrated two project mix rubex pilosaspeeding regular expression rubex onigurumarubex moovwebrubex quasi dropin replacement go regexp standard library package say quasi implement literalprefix method regexpregexp type also never heard method right nowrubex get performance highly optimized c library oniguruma kkosoniguruma call using cgospeeding query pilosa indexesindexes wellknown feature basically every relational database vitess implement since really need tobut open source came rescue pilosa pilosapilosa distributed bitmap index implemented go made gitbase usable massive datasetspilosa open source distributed bitmap index dramatically accelerates query across multiple massive data setsconclusioni like use blog post personally thank open source community made possible u create gitbase shorter period anyone would expected source firm believer open source every single line code githubcomsrcd including okrs investor board testament thatwould like give gitbase try fastest easiest way source engine download sourcedtechengine get gitbase running single command want know check recording talk go sf meetuprecording talk title go sf meetup
316,Lobsters,vcs,Git & VCS,Absorbing Commit Changes in Mercurial 4.8,https://gregoryszorc.com/blog/2018/11/05/absorbing-commit-changes-in-mercurial-4.8/,absorbing commit change mercurial,mercurial version control tool help workflow kind workflow designed make easier merge never encounter merge conflict file bug submit patch,every often tool use introduces feature useful ca nt imagine thing feature existed recent release mercurial version control tool introduces feature hg absorb command hg absorb mechanism automatically intelligently incorporate uncommitted change prior commits think hg histedit git rebase auto squashing imagine set change prior commits working directory hg absorb figure change map commits absorbs change appropriate commit using hg absorb replace cumbersome often merge conflict ridden history editing workflow single command often work read detail example modern version control workflow often entail multiple unlanded commits flight look like varies heavily version control tool standard review workflow employed specific projectrepository personal preference workflow practiced lot project author commits sequence standalone commits commit representing discrete logical unit work commit reviewedevaluatedtested part larger series workflow practiced firefox git mercurial project linux kernel name common task arises working workflow need incorporate change old commit example let say stack following commits hg show stack ansiblehgweb serve static file immutable content ansiblehgweb synchronize template earlier ansiblehgweb convert hgrc template ansiblehgweb tell hgweb static file static ansiblehgweb serve static template file httpd testing print verbose mode stack base testing install mercurial final contained within stack commits changing way static file served hgmozillaorg important let say submit stack commits review reviewer spot problem second commit serve static template file httpd want make change go making change depends exact tool workflow using common workflow rewrite existing commits simply create new fixup commit top stack leaving existing commits asis eg hg show stack deadad fix typo httpd config ansiblehgweb serve static file immutable content ansiblehgweb synchronize template earlier ansiblehgweb convert hgrc template ansiblehgweb tell hgweb static file static ansiblehgweb serve static template file httpd testing print verbose mode stack base testing install mercurial final entire series commits incorporated repository end state file well strategy using fixup commits popular especially gitbased tooling like github put larger emphasis end state change rather individual commits nt practiced project hg absorb help workflow popular variation fixup commit workflow author new commit incorporate commit prior commit typically involves following action save change file hg commit type commit message hg histedit manually choose action perform commits save change file git add file git commit type commit message git rebase interactive manually choose action perform commits essentially produce new commit run history editing command tell history editing command eg squash fold one commit another command performs work produce set rewritten commits simple case may make simple change single file thing pretty straightforward need know two commits squash together often trivial although cumbersome several commits nt clear one receiving new change complex case may make multiple modification multiple file may even want squash fixups separate commits code review complex case quite common nt uncommon incorporating dozen reviewersuggested change across several commits complex use case thing get really complicated version control tool interaction let say want make multiple change file incorporate change multiple commits keep simple let assume modification single file squashing commits save change file hg commit interactive select change commit type commit message hg commit type commit message hg histedit manually choose action perform commits save change file git add file git add interactive select change stage git commit type commit message git add file git commit type commit message git rebase interactive manually choose action perform commits see number action required user already increased substantially captured number line effort must go interactive command like hg commit interactive git add interactive hg histedit git rebase interactive command user must tell vcs tool exactly action take take time requires cognitive load ultimately distracts user task hand bad concentration productivity user want amend old commits telling vcs tool action take obstacle way compelling argument made work required workflow produce clean history much effort easier make tradeoff favoring simpler workflow versus cleaner history kind squash fixup workflow hg absorb designed make easier using hg absorb workflow reduced save change file hg absorb hit accept change save change file hg absorb applychanges let assume following change made working directory hg diff diff git limitrequestfields serve static file straight disk directory repohghtdocsstatic option followsymlinks allowoverride nonetypo allowoverride none require granted directory limitrequestfields url versioned vct revision immutable served aggressive caching setting location static header set cachecontrol immutable bad header set cachecontrol immutable location loglevel debug separate uncommitted change happens run hg absorb hg absorb showing change allowoverride nonetypo allowoverride none header set cachecontrol immutable bad header set cachecontrol immutable changesets affected ansiblehgweb serve static file immutable content ansiblehgweb serve static template file httpd apply change yn press chunk applied hg absorb automatically figured separate uncommitted change mapped different changesets mercurial term commit print summary line would changed changesets prompted accept plan proceed human effort involved quick review proposed change answering prompt technical level hg absorb find uncommitted change attempt map changed line unambiguous prior commit every change mapped cleanly uncommitted change absorbed appropriate prior commit commits impacted operation rebased automatically change mapped unambiguous prior commit left uncommitted user fall back existing workflow eg using hg histedit wait automatic rewriting logic hg absorb implemented following history line fundamentally different approach taken hg histedit git rebase tend rely merge strategy based merge derive new version file given multiple input version approach combined fact hg absorb skip change ambiguous application commit mean hg absorb never encounter merge conflict may thinking ignore line ambiguous application target patch would always apply cleanly using classical merge statement logically sound correct nt hg absorb avoid merge conflict merging performed hg histedit git rebase would fail example attempt exercise use case focusing initial change diff git limitrequestfields serve static file straight disk directory repohghtdocsstatic option followsymlinks allowoverride nonetypo allowoverride none require granted directory patch need applied commit introduced commit following diff diff git limitrequestfields endfor location serve static file template directory straight disk directory repohghgtemplatesstatic option none allowoverride nonetypo require granted directory alias static repohghgtemplatesstatic loglevel debug logformat h v u r b referer useragent cookie errorlog varloghttpdhgmozillaorgerrorlog commit another commit following change diff git limitrequestfields endfor location serve static file template directory straight disk directory repohghgtemplatesstatic option none serve static file straight disk directory repohghtdocsstatic option followsymlinks allowoverride nonetypo require granted directory use hg histedit git rebase rewrite history vcs would first attempt reorder commits squashing commits together attempt reorder fixup diff immediately commit introduces good chance vcs tool would encounter merge conflict essentially vcs thinking changed line line around change final version different line initial version nt know line matter therefore nt know end state giving letting user choose since hg absorb operates line history level know individual line nt actually changed even though line around assumes conflict offer absorb change hg absorb significantly simpler today hg histedit git rebase workflow term vcs command interaction also avoid timeconsuming merge conflict resolution well another feature hg absorb rewriting occurs memory working directory touched running command mean operation fast working directory update often account lot execution time hg histedit git rebase command also mean tool looking last modified time file eg build system like gnu make wo nt rebuild extra unrelated file touched part updating working directory old commit order apply change make hg absorb friendly editcompiletestcommit loop allows developer productive hg absorb nutshell first saw demo hg absorb mercurial developer meetup jaw along room hit figurative floor thought magical good true thought facebook original author feature trolling u impossible demo real hg absorb available core mercurial distribution anyone use experience hg absorb work almost time run command map uncommitted change appropriate commit nothing word magical use hg absorb need activate absorb extension simply put following hgrc config file extension absorb hg absorb currently experimental feature mean commitment backwards compatibility rough edge expected also anticipate new feature hg absorb interactive added experimental label removed encounter problem want leave comment file bug make noise mercurial freenode submit patch nt let experimental label scare away using hg absorb used large install base also many mercurial core developer experimental label mainly brand new feature core mercurial experimental label usually affixed new feature practice workflow frequently require amending old commits think shocked much easier hg absorb make workflow think find game changer use hg abosrb soon wonder managed get work done without
317,Lobsters,vcs,Git & VCS,Mercurial 4.8,https://www.mercurial-scm.org/wiki/Release4.8,mercurial,mercurial release release new feature command template aka formatter template new experimental feature notable feature bug fix backwards compatibility change internal api change gregoryszorc,mercurial release overview release new feature command template aka formatter template stabilized see hg help command v detail new closehead extension close arbitrary head without checking new config option commandsresolvemarkcheck warn abort resolve mark file still conflict marker new config option commandsresolveconfirm confirm performing action filename passed rebase get new stop flag stop interrupted rebase without discarding already rebased change new experimental feature notable feature bug fix revlog reuse cached delta identical base revision performance regression unbundle reusing delta bundle significant performance impact make sure possible ancestor actually iterate ancestor topological order revlogancestors noticed sometimes emit node descendant contrary docstring said overlayworkingctx fix exception metadataonly inmemory merges rebaseexperimentalinmemory changing file x x vice versa content change could produce exception backwards compatibility change internal api change last edited gregoryszorc
318,Lobsters,vcs,Git & VCS,Five Things I Wish I’d Known About Git,https://zwischenzugs.com/2018/10/30/five-things-i-wish-id-known-about-git/,five thing wish known git,directed acyclic graph buy book four stage git repository created equal reference reference pointer commit fastforward rebase power git log learn git hard way like,git utterly bewildering someone us casually interested thing like directed acyclic graph user best thing buy book free sample available guide usage git practical way embeds concept ready daily use second best thing read briefly go five thing wish someone explained started using git four stage come using cv source control older example version control system vcs one baffling thing git different approach state content cv two state data result kind workflow whereas git four state local change stagedadded change committed pushed remote diagram illustrates four stage like use git commit checkin message commit work second addingstaging state le invisible since reason encourage new user drop flag git add hand understand distinction one subtlety flag add new file content tracked git add change made state exist people work independently offline syncing later driving force behind development git come another key point git repository created equal clone repository dependent existence repository stand related others configure another key difference git traditional nay obsolete clientserver model content history management result workflow look like far flexible potentially complicated workflow reference git doc blog keep talking reference reference reference pointer commit commit unique reference new state content understood concept make sense head reference content history content currently looking git repo git commit head move new commit git tag reference one arbitrary text move new commit seen git branch reference move head whenever commit new change couple confusing thing become clearer example detached head nothing panic despite scary name mean head pointed branch help cement look diagram represents series commits confusingly git diagram arrow go backwards time first commit b latest commit h three reference master pointed c experimental pointed h head also pointed h head remember fastforward understand head reference understanding fastforward pretty simple usually merge two branch together get new commit diagram commit represents merging h g common ancestor change made branch applied together resulting state content commit stored new state consider diagram saw two branch change made one let say want merge change experimental e h master experimented experiment successful case merging e h master requires change h since f g change need merged together e h one line change merge requires master reference picked moved c h fastforward reference needed moving along content needed reconciled rebase manual page git rebase say reapply commits top another base tip much comprehensible previous version man page still confuse many people visual example make much clearer consider example could merge master branch end new commit g make tree look like see retained chronology branch keep history order commits git rebasetakes different approach pick change branch commit case applies end branch head master though checked master made change new branch rather branched master time ago c work look lot neater master fastforwarded moving master pointer along downside lost something history reflect order thing happened anymore chronologically care power git log concept well grasp course daytoday work highly recommend getting grip git native log command many gui display history opinion thing displayed moreover available everywhere source truth git log unimpeachable transparent wrote depth give flavour try two command repo choice cover git log usage daytoday git log oneline graph git log oneline graph simplifybydecoration concept explained taught book learn git hard way like like loading related
319,Lobsters,vcs,Git & VCS,October 21 Incident Report - GitHub,https://blog.github.com/2018-10-21-october21-incident-report/,october incident report github,status page,pm sunday utc multiple service githubcom affected network partition subsequent database failure resulting inconsistent information presented website abundance caution taken step ensure integrity data including pausing webhook event internal processing system aware important service development workflow actively working establish estimated timeframe full recovery share information soon available time information displayed githubcom likely appear date however data lost service fully restored everything appear expected incident impacted website metadata stored mysql database issue pull request git repository data remains unaffected available throughout incident continue provide update estimated time resolution via status page
320,Lobsters,vcs,Git & VCS,Beautiful graphs of stars for GitHub repos,https://stars.medv.io,beautiful graph star github repos,,
321,Lobsters,vcs,Git & VCS,"GitHub launches ""Actions"" workflow automation tool",https://techcrunch.com/2018/10/16/github-launches-actions-its-workflow-automation-tool/,github launch action workflow automation tool,github launching github action github action,longest time github storing source code sharing either rest world colleague today company process acquired microsoft taking step different related direction launching github action action allow developer host code platform also run talking new cloud rival aws instead something akin flexible ifttt developer want automate development workflow whether sending notification building full continuous integration delivery pipeline big deal github indeed sam lambert github head platform described biggest shift history github likened shortcut io flexible imagine infinitely flexible version shortcut hosted github designed allow anyone create action inside container augment connect workflow github user use action build continuous delivery pipeline company expects many pretty much first thing people think hear new project github description action today announcement make definitely fit bill easily build package release update deploy project github external run code company writes see cicd one narrow use case action much lambert stressed think going revolutionize devops people going build best breed deployment workflow specific application framework become de facto standard shared github going everything open source devops space different part workflow ecosystem mean use send text message twilio every time someone us urgent issue tag repository example write oneline command search repository basic grep command really run code want turn code repository action write docker file github run long docker file build run connect workflow lambert explained want write docker file though also visual editor use build workflow corey wilkerson github head product engineering also noted many action already exist repository github today million github make lot potential action available start action limited public beta developer set workflow build package release update deploy code without run code developer could host action docker container github also host run code includes developer free open source plan time lambert seemed favor github could also allow developer sell workflow action github marketplace option definitely something company thinking lambert also noted could way open source developer want build enterprise version tool sale force go monetize effort github make action available developer open platform others github community contribute action github slowly open action developer starting daily batch time sign access addition action github also announced number new feature platform company stressed today event mission make life developer easier new feature may small indeed make easier developer job else new github connect connects silo github enterprise open source repository public site generally available example github connect enables new feature like unified search search open source code site internal code well new unified business identity feature brings together multiple github business account many business manage thanks shadow single umbrella improve billing licensing permission company also today launched three new course learning lab make easier developer get started service well business version learning lab larger organization maybe even interesting developer whose company use github enterprise though company allow admins enable new feature display developer work part public profile given github de facto resume many developer big deal much work open source building side project daytoday work company new feature company announced today pretty much security new github security advisory api example make easier developer find thread code automatic vulnerability scan new security vulnerability alert java net project extend github existing alert two language developer prone putting security token public code rest easier since github also start scanning public repository known token format find one alert set create new one
322,Lobsters,vcs,Git & VCS,RawGit has reached the end of its useful life,https://rawgit.com/,rawgit reached end useful life,use instead happening thank yaypie,rawgit sunset phase soon shut fun five year thing must end github repository served content rawgit within last month continue served least october url repository longer served currently using rawgit please stop using soon use instead following free service offer fantastic alternative rawgit functionality may like even rawgit happening rawgit always small hobby project never able spend handful minute week achieved degree popularity could never imagined last month alone rawgit served billion request consumed terabyte bandwidth number simply unfathomable almost huge real unfortunately rawgit also become attractive distribution mechanism malware rawgit meant improve people life jerk increasingly using hurt people since almost time devote fighting malware abuse rawgit since would fun even time feel responsible thing shut would rather kill rawgit watch used hurt people thank everyone contributed rawgit year said nice thing used without jerk thank learned lot mostly enjoyed hope ryan grove yaypie
323,Lobsters,vcs,Git & VCS,"autogit - Define commands, using plugins, to execute across all your repositories",https://github.com/fabiospampinato/autogit,autogit define command using plugins execute across repository,autogit feature install usage wizard command custom command configuration awesomeautogit license,autogit define command using plugins execute across repository feature autogit allows automate many tedious task practical task configure pullpush tofrom origin across repository one command edit multiple readmes autogit make commits pushing maybe even bumping project version publishing synchronize repository description keywords github basically anything want across repository install usage wizard command custom command define custom command via configuration find command plugins made community awesomeautogit repository license mit fabio spampinato
324,Lobsters,vcs,Git & VCS,Adding Mercurial support to Gitlab,https://octobus.net/blog/2018-09-18-heptapod-announce.html,adding mercurial support gitlab,mercurial mercurial gitlab contact gitlab work adding mercurial support upstream work collaborative development platform git pick gitlab mercurial u octobushg irc channel freenode,good news everyone taking largest painpoint mercurial community integration newest collaborative development platform using mercurial version control system locally pleasant come start collaborating thing get bumpy reason experimented adding mercurial gitlab platform yes read right making possible use favorite version control system trendiest collaborative development platform built prototype others use internally proven feasibility contact gitlab work adding mercurial support upstream far received warm feedback cheer u push forward effort offer best development workflow developer experience mercurial user work collaborative development platform version control critical part development workflow part need integrate tool order provide complete workflow including access management code review continuous integration continuous deployment ticket tracking etc year tool grew powerful becoming larger part developer experience collaborative development platform forge supporting mercurial exist tend lag behind solution existing around another version control tool git fortunately lot make current collaborative development platform appealing loosely related underlying version control system make relatively easy add support alternative one lack support best collaborative development platform affecting mercurial user several year decided contribute solution octobus core expertise version control best course action u collaborate existing platform rest development tooling pick gitlab gitlab one fastest growing platform past couple year strong feature set praised many seen kind user switching mercurial git able use quality reputation product made u look moreover gitlab open source version gitlab ce provided mit license healthy community significant external open source contribution fit open source philosophy allows u directly hack product core add support mercurial also open source community gnome debian picked gitlab tool serious actor free software world trust gitlab important choice mercurial might wondering pick mercurial mercurial git similar many aspect created time people project using source inspiration usecases yet different implementation made different choice significant impact user experience multiple tool offering similar service beneficial innovation since creation two project reusing good idea overall believe mercurial extensible codebase allowing innovation used large company several year giving pretty good scalability property find clearer user experience simple advanced usecases furthermore mercurial development much alive meaning thing keep getting better example getting real narrow cloning first class feature allowing developer combine performance using small repository benefit larger monorepository changeset evolution feature also unlocking new collaboration possibility team member however realized mercurial powerful feature needed appropriate ecosystem achieve full potential become critical mercurial supported stateoftheart collaborative development platform return new feature mercurial help shape workflow platform offer future u octobus working mercurial many year getting involved community part involvement talking many user diverse workflow structure background hearing complaint lack good collaborative development platform mercurial past two year grew alarming rate convinced biggest challenge mercurial facing today much enjoy making core mercurial faster better decided something address tooling issue addition discussing gitlab get change needed mercurial support upstreamed improving prototype cleaning code making capable main goal provide people first class mercurial experience gitlab interested testing prototype helping u achieve goal please contact u contact octobusnet join u octobushg irc channel freenode developer interested source control version world hiring
325,Lobsters,vcs,Git & VCS,Version control history,https://www.plasticscm.com/version-control-history,version control history,awesome book,linus torvalds father linux designed implemented first version git almost weekend purehacker style give kernel developer alternative bitkeeper linus original design simple clean genius helped promote project unique style info famous speech heavily criticized ok insulted cv svn perforce subversion pointless project ever started like using cv kind mental institution somewhere else finally get rid perforce sad true love hate made point middle age distributed system rule world including removing arcane fear branching merging key concept behind every dvcs next year every major opensource project migrated away subversion towards git wwwgithubcom provided really huge huge hosting service making strongest coolest scm earth git based dag structure directed acyclic graph main unit change changeset implement full mergetracking commit level instead individual file revision level instance clearcase extremely fast caveat management large binary file requirement replicate repository entirety git clearly influenced kernel root obviously easiest thing earth use definitely scm next decade check awesome book
326,Lobsters,vcs,Git & VCS,Mercurial for Mozillians — Mozilla Version Control Tools 0 documentation,https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/,mercurial mozillians mozilla version control tool documentation,,copyright mozilla revision built
327,Lobsters,vcs,Git & VCS,Git Submodule Vulnerability Announced,https://blog.github.com/2018-10-05-git-submodule-vulnerability/,git submodule vulnerability announced,disclosed git affected product github desktop atom help check update atom check update atomio git command line client additional note detail vulnerability joernchen bug bounty basic fix stricter check detection infrastructure,git project disclosed vulnerability git cause arbitrary code executed user clone malicious repository git released fix along backports encourage user update client protect updated protect avoiding submodules untrusted repository includes command git clone recursesubmodules git submodule update affected product github desktop github desktop version older included embedded version git affected vulnerability encourage github desktop user update newest version available today desktop app atom atom included embedded git also affected release include patch ensure latest atom release completing following window toolbar click help check update macos menu bar click atom check update linux update manually downloading latest release atomio git command line client order protected vulnerability must update commandline version git application may include embedded version git independent additional note neither githubcom github enterprise directly affected vulnerability however previously discovered vulnerability githubcom detect malicious repository reject push api request attempting create version github enterprise detection ship october detail vulnerability vulnerability similar optioninjection attack related submodules earlier attack malicious repository would ship gitmodules file pointing one submodules remote repository ssh host starting dash ssh interpret option attack work similar way except optioninjection child git clone problem reported september joernchen git private security list well github bug bounty program developer github worked git community develop fix basic fix clear report however due similarity also audited gitmodules value implemented stricter check appropriate check prevent similar vulnerability another code path also implemented detection potentially malicious submodules part git object quality check made much easier infrastructure added last submodulerelated vulnerability coordinated disclosure date october selected git developer allow packagers prepare release also provided hosting site custom implementation ample time detect block attack became public member git community checked jgit implementation affected vulnerability clone submodules via function call rather separate command also able use time scan repository github evidence attack used wild happy report instance found detection none added please update copy git soon happy cloning
328,Lobsters,vcs,Git & VCS,Status of Mercurial's Changeset Evolution,https://octobus.net/blog/2018-09-03-evolve-status-2018-08.html,status mercurial changeset evolution,tl dr changeset evolution summary work done since vocabulary change instability unstable predecessor orphan contentdivergent phasedivergent wiki page associated renaming discussion obsolescence history history rewriting command important milestone introduction command obsolescencemarkers exchange workflow stack instability management next summary internals fold tracking history rewriting toolkits evolution history command rewind command history rewriting command automatic evolution instability prevention obsmarker discovery stack workflow stack definition exchange publishing workflow upstreaming instability management command change upstreaming instability resolution user documentation conclusion hgevolve irc channel freenode evolvetesters mercurialscmorg,tl dr question needed clarify changeset evolution complete answered working final implementation enabled default mercurial core past couple year multiple important milestone reached mercurial changeset evolution project changeset evolution allows simple safe powerful exchange draft changesets rewritten distributed team concept also useful locally innovative part distributed ability progress result combined effort dozen people thanks particular working final algorithm two central concept changeset evolution exchanging marker automatic resolution instability need final implementation core addition last uncharted territory restoration older evolution changesets explored discovered track data regarding changeset folding perform task well trigger expect last update tracked data marker format many improvement made apart one highlighted go later post however highlighted one important milestone major algorithm question cleared know complex issue handled associated data storage need removing unknown question priority high impact design user interface ondisk data format two thing complicated change afterwards area explored clear sight route evolve completion focus action directly moving toward goal need polish upstream concept code still inside evolve extension code already good shape go upstream road clear lot carry along kind help welcome summary work done since general area received many fix improvement polish important area made significant progress vocabulary change evolution provides powerful feature capable handle complex issue must smooth complexity particular come naming new concept address multiple feedback regarding naming scheme group people dedicated significant amount time come new naming scheme changeset evolution concept resulting scheme enforced core mercurial evolve extension tortoisehg instability replaces trouble unstable replaces troubled predecessor replaces precursor orphan replaces unstable contentdivergent replaces divergent phasedivergent replaces bumped check wiki page associated renaming discussion detail addition made update command flag name hg uncommit command merged hg amend hg amend extract unloved hg prune biject flag renamed hg prune pair obsolescence history make distributed history edition manageable user involved important make easy someone understand happened outside local repository changeset evolution track change changesets rewritten information valuable many different facet example displaying happened changeset automatically stabilize made multiple improvement make sure information tracked informative better put use previously obsolescence information mostly used detect resolve instability obsmarkers store data effect obsolescence marker message change patch change etc operation created amend rebase possibly record userdefined note data get used place new hg obslog command display evolution changeset display successor predecessor hgweb appropriate point latest successor obsolete changeset hg log point latest successor obsolete working copy accessed hidden changesets greatly improved user ability understand evolution team member performed making changeset evolution accessible people unfamiliar area good shape multiple possible improvement overall feature need provide reasonable experience good share implemented core already rest need upstreamed see next section possible future improvement area history rewriting command smooth distributed history rewriting requires good set command rewrite history need easy use record user intend well leverage changesets evolution allow flexible history editing also rely user using right command right operation build useful evolution history quality evolution history provides user best experience achieve goal need clear compact powerful set command edit history progress made existing command new command hg fold got flag clarify two mode exact entirely happy result yet hg uncommit available hg amend extract reduces number command close debate uncommit name hg amend gain new patch flag directly edit changesets diff hg grab alias got upgraded full hg pick command proper abort continue support command mix graft rebase command used reorganize stack changesets important milestone introduction rewind command command restore stack changeset predecessor state command early stage need time mature however already useful part people main workflow implementing rewind command part exploration evolution problem space indeed gathered important insight hg rewind command automatically find restore predecessor changesets walk evolution graph opposite direction hg evolve command turn way store special information split need extra information properly differentiate fold divergence resolution currently information good example data requirement discover early order shape functional changeset evolution end obsolescencemarkers exchange changeset evolution core purpose unlock history edition distributed setting achieve goal exchange obsolescence information repository critical question obsolescence marker exchanged push pull solved ago testing diverse environment setup confirmed logic correct however start important issue remained discover marker missing side without efficient way detect could provide efficient synchronization obsolescence data fortunately developed algorithm protocol perform efficient discovery obsolescence marker daily usage mercurial repository save u extra minute spending obsmarkers discovery using previous method data structure used algorithm scale well repository size important point qualifies solution usage new method got tested various setting used default next version evolve extension addition one data structure developed algorithm stablerange likely useful help exchange caching data could used pull bundle caching decision main goal current implementation validate approach scaling property algorithm performance cache storage implementation great reworked upstreamed workflow stack something important connected evolution clear definition group changesets related current user work clarity great help provide good behavior information user regarding possible instability current work made many progress area past couple year particular automatic instability resolution using hg evolve restrict current topic default avoiding selection unrelated changeset stabilization something confusing user next prev command also restricting current topic making movement predictable useful hg stack command allows quick view work progress including listing changeset semantic order stabilized work also offer simple yet powerful workflow feature branching mercurial topic tightly linked phase make good tool enforce healthy phase movement practice project since changeset evolution also tightly coupled phase healthy phase movement important progress made new server repository mode changeset topic stay draft push get published especially useful bridge gap publishing nonpublishing repository using mode default preserve backward compatibility current mercurial behavior regarding phase movement allowing user opt client side exchanging draft want new push flag publish publish selected changeset push various improvement topic usability notably clarification topic activation state movement pushpull publish ability force new draft commit topic automatically assign random one improved topic discoverability hg topic age introduction label referring parent topic root update keep topic active making insertion new changeset start topic simpler hg prev go getting good feedback people using workflow would like upstream improvement really attached topic eg hg push publish feel like topic overall good branching solution mercurial would like see upstream instability management critical part evolution made many important progress area exchanging draft changesets bring instability one repository use various strategy reduce odds happen however given distributed nature mercurial guarantee wo nt instability happen need good automatic resolution pretty good shape hg evolve command keep track multistep operation unlocking important feature good handling evolution interrupted merge conflict abort continue stop flag work expected hg evolve hg next automatic stabilization situation involving orphan merge automatic stabilization phasedivergence complex case automatic stabilization contentdivergence complex case instability type well control still corner case involving split fold merge remain properly handled however core tool handle exists improvement hg evolve hg next able update default behavior two command something final upstream next section next section focus concrete action bring changeset evolution completion intended people knowledge mercurial internals summary important thing clear right need better tracking fold fixing right might eventually affect disk storage various algorithm getting way soon possible important move need mature hg rewind command easy undo critical item hand changeset evolution user parallel multiple area evolve extension ready cleaned upstreamed obsmarkers discovery cache internal rewriting toolkit also resume upstreaming improvement regarding stack management publishing workflow contained topic extension first area might seem unrelated enable changeset evolution core practice clarification working set publishing workflow greatly reduce complexity around local distributed work draft changesets time spent improving area well balanced one spend solving complex user experience issue elsewhere finally couple area mostly done need focus wrapped mainly history rewriting command automatic instability resolution case small action take freezing user experience core course improvement made core however improvement seem necessary enable evolution default internals fold tracking need better tracking fold operation necessary provide fully functional hg rewind command command important user need simple way undo mistake need update marker creation api store information change might impact ondisk storage format way currently store split couple quirk eg split successor exchanged current idea storing fold data could also applied split handling case better current split encoding tracking split fold quite interresting issue get back independant blog post possible lowlevel change make tracking fold priority target upgrading updisk storage existing user never simple might also affect multiple algorithm cope different split encoding history rewriting toolkits power history rewriting command ui evolve full toolkit building history rewriting command toolkit ready upstreamed would good first step toward upstreaming command free question related user experience evolution history current work done around better evolution history either already upstream ready upstreamed keep effort going one extra feature user requesting clear transaction log keep trace exactly happens past operation would especially useful push pull may introduce many change people one repository would fit journal extension making tracking wider amount data road blocker would nice command evolve extension provides multiple command close done enough goal evolve enabled default core rewind command one command need serious attention mature rewind command user rewind evolution stack changeset using command first version command revealed needed record data changeset folding data available piece build final user experience command command important changeset evolution experience trust tool user need confident undo mistake history rewriting command year history rewriting command evolve extension evolved pretty solid base mentioned previous subsection internal toolkit powering function could upstreamed command need various adjustment ensure consistency solve long lasting question cover second part blog post adjustment small easy perform last round polish best done evolve extension offer wider testing possible settle example small adjustment need hg amend extract need expose flag similar hg uncommit rev fully drop older command currently hg fold requires either one exact pick one default exact bit mercurial developer supporter also requires user learn revsets bad access shorter instack reference topic etc hg fold form might good enough provided give proper example use documentation hg split comment inconsistent similar command amend revert uncommit etc accept filename interactive default align behavior command course commandset keep getting larger improvement example idea floating around making easier control changeset order stack via new command flag however improvement critical path enable changeset evolution core nt plan spend time automatic evolution longstanding debate automatically evolve descendant rewritten changesets automatically evolving orphan provide smoother experience user many case come multiple drawback trigger merge earlier user want forcing switch content changeset currently rewriting rewriting changesets stack automatically evolving descendant mean creation len stack changesets complexity scale badly dire impact user repository overall experience tend focus user gradual evolution instead issue referred ob marker explosion however large demand automatic evolution least case command guarantee wo nt introduce conflict lifting related concern could even consider extending logic command long conflict detected obsmarkers explosion trickier command could possible trigger math really make compromise unsustainable value n however still room improved experience could imagine allowing auto evolution number descendant small maybe try detect repeated rewrite stack detect problematic pattern stack size could skip auto evolution redirect user toward helpful documentation page hg stack command provided topic extension provide clear view current work progress even orphan involved good tool reduce user surge run hg evolve prematurely instability prevention good way avoid exposing user complexity inherent instability avoid creating first place core mercurial already mechanism history rewriting command use check planned rewrite valid however need make sure used history rewriting operation catch instability type want prevent obsmarker discovery logic use obsmarkers discovery sound ready upstreamed however code rewritten get current implementation evolved multistep experiment use many complicated indirection effective general cache storage use also problematic reimplemented practice data cache volatile inherent property changeset could imagine storing value directly changelog format instead keeping independent cache structure expect discovery keep improved time however improvement come later critical path enabling evolution core work needed upstream well defined significant finding use case stablerange data might get people interested making happens cache used obsmarkers discovery share lot code performance related cache move upstream stack workflow topic extension provide various feature contribute providing smooth changeset evolution experience strictly necessary feature simplify task making changeset evolution accessible user stack definition one core feature topic clear definition current working set stack changeset explicitly carry topic information room ambiguity related changesets user actively working always linear either user action instability brought distributed rewriting spread multiple topological branch clear stack definition topic handle situation making ideal candidate stack definition simplifies operation around evolution example restricting operation within current stack make thing much predictable hg prev hg next ignores unrelated changesets hg evolve select item stack predictable outcome command important user trust without clear stack boundary behavior command becomes either limited complicated explain stack defines limited number changeset relevant current situation small number allows better ui example provide hg stack command display orphan changeset already evolved provides preview final structure stack even still orphan powerful tool make changeset evolution accessible kind user limited amount changeset make possible bring back incremental number refer changeset topic first item stack nicknamed second useful refer changeset without copy paste obscure hash around numbering also preserved across rewrite making useful longer time changeset evolution empower commit centric workflow alias make easier reference individual commits practice way define resilient stack provide benefit example stack definition based phase namedbranch would namedbranches strong fit longlived branch life cycle limitation topic feel like better solution feature branching exchange publishing workflow another interesting aspect topic life cycle tied phase changeset evolution used nonpublic part history sanity reason part stay fairly limited nobody want see sixmonthold changeset rewritten creating ton orphan changesets process core property topic fade away published mean accepting topic main branch requires publish workflow step explicitly involves publishing make sure set nonpublic changeset remains reasonable topic also solves another pain point regarding phase main purpose changeset evolution unlock distributed collaboration draft changesets however current default mercurial server publish changeset push long exchanging draft possible configure server longer publish push multiple drawback first serverside config usually complicated setup second mean phase cycle manually though handled changesets finally change affect user ca nt small group advanced user playing advanced feature without impacting user common workaround two repository publishing nonpublishing one make thing complicated would like topic new concept people optin flexibility could new default mode server changesets published push usual unless topic way user optin draft changeset exchange without server side configuration without impacting user since exchanging draft requires topic wo nt interfere usual branch resolution user interested topic offer smooth path draft changesets exchange without breaking backward compatibility bonus scheme force draft changeset explicitly belong feature branch deal phase cycle topic extension provides various option new hg push publish flag push make push publishing even pushing nonpublishing server config option server behave described nonpublishing topic topic also come small workflow improvement like intuitive rebase destination making easier use one key improvement ability push new topic server without force removing cumbersome need use dangerous flag upstreaming concept explained good overall shape got good feedback would take add support stack workflow related concept upstream clear good workflow improvement strongly related topic hg push publish option proved useful experimental config option limit repository head per name learn closed head graduate experimental stack related logic also independent topic could first implemented around named branch alias changeset stack feature hg stack eg evolution aware order constraint range hg evolve hg next hg prev finally interesting piece directly related topic topic manipulation command lifecycle new publishing mode server ability push new topic without force general performance cleanup work needed however implementing specific feature directly core significantly simpler extension instability management command change upstreaming incoming change hg next clear definition working set move within improved recovery conflict occurs evolution mean longer need hide hg next triggered evolution behind evolve flag become default related change hg evolve step step evolution important feature however since hg next able fill role make sense hg evolve evolve changesets current stack default addition matching rebase behavior preserving working copy parent seems order change happen evolve extension however happen hg evolve hg next ready upstreamed provided access clear definition current working set revision topic provides already couple way trigger automatic instability resolution eg next evolve however could another good vector expose user hg evolve command already dealing working copy change merge conflict adding hg update evolve flag could make sense offer simple user experience simpler case lowering barrier entry always useful instability resolution even hg evolve handle majority instability case remains handled unhandled case usually involves mix phasedivergence contentdivergence merges split fold need hunt handle remaining case probably simpler tackle last corner case automatic stabilization evolve extension wider set user test quickly besides whole logic good shape ready upstreamed probably start upstream core bit sooner eg upstreaming hg next would make good excuse upstream orphan resolution alternative approach would upstreaming current instability resolution logic way evolve extension monkey patch fix people using older version might work overall user documentation inline documentation tutorial written alongside evolve development however contain latest command workflow help welcome refresh conclusion happy progress made past year many wished could done faster excited clear view project completion project completion mean mercurial core contain good enough subset changeset evolution could enabled default octobus best bring completion mobilize people resource reach goal next effort focus getting fundations concept core rewind command automated resolution instability efficient obsmarkers exchange parallel take care supporting concept necessary safely enable changeset evolution user obshistory viewing supporting command stack workflow course effort performed people octobus people working closely u mercurial contributor also working complete project exactly order something decide sort help welcome multiple year helped project moved many way direct contribution course also training new people contribute concept finally efficiently gathering spending money make concept move forward reaching funding steering member open source community make project move forward reach u want contribute time money see changeset evolution enabled default mercurial discussion around changeset evolution concept usually happens hgevolve irc channel freenode using evolve extension forget subscribe user list evolvetesters mercurialscmorg
330,Lobsters,vcs,Git & VCS,Stacked Diffs Versus Pull Requests,https://jg.gg/2018/09/29/stacked-diffs-versus-pull-requests/,stacked diffs versus pull request,http newsycombinatorcomitem phabricator github hold butt stacked diffs first pull request stacked diffs case study completely wrong yes basically every commit top rebasing unrelated task userfacing product codebase task head master originmaster originhead head apichanges datamodelchange mysweetfeature xhrchanges master literally elderly multiple set related task thoughtless commits bad commits make default mode good one none fault pull request soleio cuervo first thing list coding queue case study highly productive coder pull request stacked diffs interactive rebase case study free spirited hacker pull request stacked diffs case study engineer bad neighbour pull request stacked diffs conclusion sunk cost fallacy like,update post received quite lot healthy discussion hacker news follow conversation http newsycombinatorcomitem people worked phabricator using stacked diff workflow generally love seek wherever next go people never used use pull request githubgitlabs generally understand fuss code review sooo much better using obscure tool hilarious documentation well hold butt break post going focus solely engineering workflow committing code getting review probably second post detail code review two tool dig deeply let say created merged hundred pull request landed thousand diffs know workflow exfacebook phabricator fan boy pining good old day worked engineering team using cv oh yes svn git mercurial gitlabs github gerrit phabricator happily acknowledge get lot good work done using want talk get work done productivity per engineer strong opinion informed lot experience stacked diffs many folk reading post actually clue stacked diffs anyway understandable feature branch pull request pr fairly ubiquitous sort wellunderstood uninitiated outline work first pull request prbased development start branching master add one commits submit pull request github ui pull request least atomic unit code review someone request change adding additional commits pull request sum change satisfies reviewer demand really important thing state local repository dictated review process want code reviewed first branch master commit branch push remotely create pr get review feedback commit code onto branch push create longer le coherent commit history b merge local commits force push branch also mean local checkout repository look different remote really really important point come back stacked diffs basic idea stacked diffs local checkout repository mangle heart content thing world need care want push review mean decide view local checkout reviewer see present something landed top master may helpful skip case study section get intuitive feel work typical workflow work right top master committing master go commits use phabricator command line tool create diff phabricator equivalent pull request unlike pull request diffs usually based exactly one commit instead pushing update additional commits update single commit place tell phabricator update remote view diff get reviewed approved land onto remote master local copy master perfect sync order think remote master cherrypicking specific commit git history right said probably commit everything master sound terrifying problem fine like time fact approach give ability thing branch alone anxiety many engineer feel committing ahead master lot like fear fly lightspeed crash star popularly held theoretically true practically completely wrong practice engineer tend work problem whose chunk easily divide unit code review make sense branchperunitofreview fact engineer know exactly work decomposes start working problem maybe could commit everything master maybe need branch per commit maybe somewhere rule get code reviewed commit code defined ahead time get choose many case mean net loss productivity big aha idea unit code review individual commits commits stack arbitrarily one branch local commits stacked ahead master life peachy one proper unique commit message ie title description test plan etc unit code review importantly one single thesis matter much engineering team realize yes basically every commit top master marmot floofing crazy hear say computer reading month blog post written really may surprised learn many engineer make fantastic amount money best company world commit directly master time unless reason enable mental model different unit code review single commit branch heuristic whether branch going generate many unit code review overall change answer yes might create branch house many unit code review overall change require model branch utility organising many unit code review something forced mechanism code review adopt approach use master much want branch whenif want engineer decide whenif branch much branch model every commit must pas lint must pas unit test must build every commit test plan description meaningful title every single commit level discipline mean code quality bar fundamentally higher pull request world especially rely squash merge save every commit build bisect expect reading pure git log actually meaningful fact model every single commit like top commit pull request every commit link code review allowed commit land see wrote reviewed glance clarity let describe extreme case commit master outline thing simpler starting order leastimportant mostimportant build drama rebasing master pull request want catch local branch master following fetch change remote rebase branch top master merge conflict arise sound bad branch branch master repeat last two step branch every time contrast worked master git pull rebase get skip cascading rebases every time get work care branch jumping fall away without cost might seem minor math often add unrelated task many u wear lot hat job owner userfacing product codebase many ten thousand line separated dozen feature mean often jump instance refactoring big chunk crufty old javascript eg hundred line code across dozen file working small nuanced bug relate individual line code single file pull request world might mean switch branch dozen time per day case really necessary many change would never conflict yet highly productive people half dozen unrelated change day mean time spent branching merging wasted change would never conflicted anyway evidenced fact majority change merged github pull request ui without manual step change would never conflicted wasting time branching merging surely able choose whenif branch related task one timedestroying aspect pull request workflow multiple dependent unit work time want achieve x requires v w x sound far fetched well recently wanted fix userfacing feature however ui code wrong needed bunch bad xhr code abstracted first ui code wanted change would isolated enough work ui change required two serverside change well one alter existing rest api one change data representation order properly test need three change together none change required reviewer could land independently apart xhr feature change stacked diff world look like git log commit head master author jackson gabbard madeup emailcom date sat sep alter api enable mysweetfeaturechange commit author jackson gabbard madeup emailcom date sat sep alter database schema representation enable mysweetfeature commit author jackson gabbard madeup emailcom date sat sep make awesome userfacing change commit author jackson gabbard madeup emailcom date sat sep add xhr library abstract redundant call commit originmaster originhead author engineer emailcom date sat sep work thing equivalent git configuration might look like git log commit head apichanges author jackson gabbard madeup emailcom date sat sep alter api enable mysweetfeaturechange commit datamodelchange author jackson gabbard madeup emailcom date sat sep alter database schema representation enable mysweetfeature commit mysweetfeature author jackson gabbard madeup emailcom date sat sep make awesome userfacing change commit xhrchanges author jackson gabbard madeup emailcom date sat sep add xhr library abstract redundant call commit master author engineer emailcom date sat sep work thing realistically though pull request world commonly go one two way care massively code quality diligently create branch master v branch v w branch w x branch x create pull request one actually want get work done create one big as pull request commits v w x either case someone loses case happens someone request change v simple right make change branch v push updating pr switch w rebase switch x rebase switch rebase done go orthopedist get walker literally elderly wasted best year rebasing branch hey commit history clean af importantly woe unto happened miss branch rebase middle somewhere also mean come time commit remember destination branch select github ui mess merge x w w merged master got exciting lifeshortening mess clean yay case everyone else loses people feel burden quality percommit pr test plan every commit bother good documentation individual commit thinking term pr case different reviewer request change code thesis v w slap commits onto end pull request address feedback across commits mean coherence codebase go time intelligently squash merge aspect various commits pull request actually related tool work way people work think way tell number time seen last two three commits pr titled address feedback tweak nothing else commits tend among sloppiest least coherent context pr seems fine fastforward month trying figure code supposed stack commits seemingly unrepated pr git blame show offending line come commit titled nit nothing else context life harder multiple set related task happen one rare engineer productive work multiple distinct problem time still probably want branch perthing even stacked diff workflow likely mean create branch perthing ie per distinct problem put multiple unit code review branch mortal amongst u let imagine case amazing engineer working three different hard problem engineer working three different strand work require many commits review many different people person might generate conflict branch also clever enough productive enough manage let assume person branch includes average unit code review solving distinct problem pull request model mean person create branch master branchesofbranches alternatively person create pull request stacked commits deep go together high level problem actually make sense code review commits may require reviewer yet pull request model going put onus single reviewer tool work stacked diff model allows amazing engineer choose howif branch commit person decide work requires branch unit code review work requires branch unit code review something different important many people realize engineering manager know allowing productive people productive possible amount big chunk team total output earth would saddle productive engineer process eats away productivity thoughtless commits bad commits every single commit hit codebase mean shit trawl trying fix production bug system melting every merge commit every junk midpr commit still build kinda get change closer working every time smashed two three extra thing pr much bother create separate pr thing add thing make codebase harder wrangle month month engineer engineer git bisect codebase every commit build jammed middle pull request much harder audit codebase many time blame massive merge commit much work figure commit actually reading code blame commit message fix bug pull request commits back answer lot harder specifically pull request set way way lower quality commits default mode workflow happens practice codebases world every day seen five different company two continent massively different technical domain make default mode good one make argument none fault pull request hi thanks input technically correct like offer tale tree icon facebook relaunched facebook group engineer implemented new user experience worked directly designer implemented group icon show left navigation site week launch noticed almost group icon set tree gorgeous icon designed truly exceptional soleio cuervo tree first thing list people choose whatever easiest default matter much even u demigodlike engineer subject trapping default behaviour pull request terrible code quality easiest behaviour shoehorning bunch shit one pr much work get code review stacked diffs win question even close default behaviour able create unit code review change matter minor mean get dozen uninteresting change come along significant work approved effortlessly change actually controversial easily separated humdrum iterative code write every day pull request encourage exactly opposite pounding change one highlevel thesis leaving actual commit history shamble coding queue fundamental shift stacked diff workflow enables moving idea every change branch master world work actually queue change ahead master productive engineer pretty much always five change review get reviewed order commited order pull request work queue hidden behind cruft juggling branch trying treat change like clean room separated work stacked diffs queue obvious stack commits ahead master put new work end queue work ready land get bumped front queue landed onto master much much simpler mental model tangle dependent branch much flexible moving every change clean room new branch pedantic yes said stacked diffs like queue name workflow hurl rotten tomato probably sick theoreticalrhetorical discussion good engineering look like let switch gear talk practical day day term case study highly productive coder case study take look suhair suhair really productive coder suhair produce high quality commits every day pull request suhair start day fixing bug creates branch make change commits suhair push remote branch navigates away terminal github ui create pull request next suhair switch back master pull creates new branch work new feature commits code code completely unrelated bug fix fact would never generate merge conflict still suhair stick branch work feature get good rfc state suhair push change github suhair creates pull request next suhair start working another feature improvement switch master pull branch uh oh change depends bug fix earlier go bug fix pr see comment one person left passing comment person suhair need review commented suhair decides much work create branch bug fix branch decides something else interim suhair ping needed person begging code review interrupting flow start working something else stacked diffs suhair pull master morning get latest change make first bug fix commits creates diff reviewed entirely command line suhair work unrelated feature commits creates diff command line start working bugfixdependent feature improvement suhair never left master bug fix still stack suhair proceed feature improvement uninterrupted suhair work commits creates diff review person reviewed initial bug fix actually got around give suhair feedback suhair incorporates via interactive rebase suhair rebases change top updated bug fix generates small merge conflict feature improvement suhair fix suhair land change via interactive rebase next git pull remote master local commit disappears remote master already identical change suhair queue commits ahead master decrease one bonus suhair today reviewer approved bug fix also reviewer needed feature improvement person approved tweak right reviewed bug fix suhair rebases change top commit stack land suhair never switch branch end day feature work left local repo everything else landed top master next day suhair come run git pull start working without branch juggling case study free spirited hacker charlie productive energetic somewhat amoral hacker want get work done fast possible charlie know product better one really care code quality charlie best paired senior tech lead two rein chaos bit pull request charlie start day branching master spamming branch five commits vaguely related charlie commits big chunky commits make lot sense tend bunch thing crammed together reviewer charlie code always know lot work ahead make sense tangle idea tend put reviewing today senior tech lead take minute read change giving detailed feedback explaining improve various strand change charlie commits change onto pr addressing feedback also make random fix along way end pr probably okay certainly coherent may mighty lobster high protect make sense code coming month laborious backandforth charlie best option keep piling thing pr related change tech lead reasonable alternative offer charlie stacked diffs charlie blast five commits five diffs back back one address something specific one go different reviewer charlie happens making sweeping change codebase charlie know fit together tech lead make sure individual change going ruin everything change smaller coherent get much better review tech lead point one change clearly two separate thesis happen touch set file tech lead reviewing code push back charlie tech lead point actually two separate commits unfazed charlie abandon diff using interactive rebase rewind history troublesome commit charlie us git reset uncommit single commit two thesis point charlie local master two commits ahead remote master bag uncommitted change charlie currently hacking two change future waiting added back local commit history git charlie done rebasing interactively charlie us git add p separate one change creates two new commits two new diffs separately get title description test plan charlie run git rebase bring fastforward time bring back later change charlie local master six commits ahead remote master six diffs review charlie never switched branch case study engineer bad neighbour yang great engineer working fun part infrastructure unfortunately yang bad neighbour engineer constantly land team trouble today yang found build broken due yet another incomprehensible change neighbour fix review one trust several knowledgeable people picking code contentious code review yang want get work done bug blocking everything pull request yang checkout remote branch fix next yang branch branch order get sortofworking codebase yang get work midday bad neighbour push big update fix yang switch branch pull switch back branch yang working rebase push branch review yang switch gear refactor class nearby codebase yang go back bug fix branch branch start refactor push commit remotely review next day yang want merge change fix changed need rebasing yang switch bug fix branch pull switch first branch rebases push switch github merge carefully selecting merge onto master rather bug fix branch yang go back terminal switch second feature rebases push go github selecrs merge master merges yang applies aarp yang geriatric care stacked diffs yang see diff fix review yang us phabricator command line tool patch commit top master mean branch throwaway local commit yang start working first change yang submits diff review command line later fix changed yang drop patch old version git history patch updated one via interactive rebase yang start working second change submits diff review next day yang ready land change first yang dump previous patch fix repatches update make sure everything work yang us command line via interactive rebase land change without ever switching branch leaving terminal later fix land yang got pull local patch fall already master yang go skydiving yang still young vital conclusion see case study definitely get good work done matter tool chain use think also quite clear stacked diffs make life easier work faster many engineer reading say cost switching high expectable thing called sunk cost fallacy everyone prefers thing feel invested even alternative provably valuable stacked diff workflow clearly higherthroughput workflow give significantly power engineer develop code see fit inside facebook engineering used branchoriented workflow year eventually replaced stacked diff workflow made engineer productive concrete term also encourages good engineering practice way exactly opposite branching pull request something touched actual work reviewing code turn phabricator also happens offer better code review tool save another post like like loading related
331,Lobsters,vcs,Git & VCS,gitmoji: emoji guide for commit messages,https://gitmoji.carloscuesta.me,gitmoji emoji guide commit message,,triangularflagonpost add update remove feature flag
332,Lobsters,vcs,Git & VCS,Cargo's crate index: upcoming squash into one commit,https://internals.rust-lang.org/t/cargos-crate-index-upcoming-squash-into-one-commit/8440,cargo crate index upcoming squash one commit,normal user cargo everything continue working ignored cratesio http githubcomrustlangcratesioindex cratesio cratesio started long time ago historically run problem,good morning everyone like ask feedback provide headsup change cargo crate index normal user cargo everything continue working ignored bit background cargo index cratesio crate life git repository http githubcomrustlangcratesioindex git repository receives new commit new crate published cratesio git commit add line file corresponding crate published cargo leverage git provide incremental update copy index stored locally turn index stored locally used make crate graph resolution much quicker avoiding lot network request cratesio index started long time ago empty repository incrementally growing ever since one commit time time writing commits history index add time though although git make incremental update index cheap operation cloning index scratch downloads entire history quite sizable let take look number prepared two repository let see big repository git init foo cd foo time git fetch http master remote enumerating object done remote total delta reused delta packreused receiving object mib mib done resolving delta done http branch master fetchhead git fetch http user system cpu total du sh ok awful take fast machine network second clone index entire history take space machine note however nearly data transferred network next let take look squashed branch git init foo cd foo time git fetch http master remote counting object done remote compressing object done remote total delta reused delta packreused receiving object mib mib done resolving delta done http branch master fetchhead git fetch http user system cpu total du sh huge improvement downloading nearly le data twice fast fast machine fast network also take le space disk clearly history costing u thankfully cargo designed getgo problem mind always knew index going get large larger always wanted option rewrite history one commit back pocket end version cargo ready change let take look first let see real index rm rf homecargoregistry time cargo update updating registry http githubcomrustlangcratesioindex cargo update user system cpu total next let see snapshot index export cargoregistryindexhttps time cargo update warning custom registry support via registryindex configuration removed functionality work future updating registry http githubcomrustlangcratesioindex cargo update user system cpu total finally let see squashed index export cargoregistryindexhttps time cargo update warning custom registry support via registryindex configuration removed functionality work future updating registry http githubcomrustlangcratesioindex cargo update user system cpu total seeing huge win using squashed index cargo note rm rf index step cargo naturally reupdating index history diverge word cargo easily handle disjoint history roll index one commit ok background like propose soon around next week roll index flat one commit precisely execute following git fetch git reset hard originmaster git revparse head make note commit git push git githubcom rustlangcratesioindex head snapshot date git reset git committree head tree roll index one commit git push git githubcom rustlangcratesioindex head master forcewithleaserefsheadsmaster theearliercommit push entire state current index branch git repository archival purpose afterwards convert everything one commit push current master branch using compareandswap operation make sure lose published crate new checkout index much faster existing checkout pay onetimecost fresh checkout first time updated download new commit everyone enjoy incremental update others thought concern idea happy hear side note may read ask use shallow checkout good question shallow checkout check full history suffer slowsdownovertime problem two primary problem shallow checkout however performing incremental update shallow checkout expensive server operation cocoapods project github historically run problem strategy effectively scalable solution large scale furthermore library cargo us git operation implement shallow clone another question others may use git go much really topic discussion specifically short though give u incremental update cross platform easy integrate
333,Lobsters,vcs,Git & VCS,A git command line interface based on mercurial,https://github.com/chadrik/gilded,git command line interface based mercurial,gilded installation seriously revsets great article command currently supported query edit utility remote revset feature currently supported operator predicate,gilded git command line interface based mercurial actively using git mercurial decade since github existed thankful github appreciate git elegant object model still frustrated git cli also think shame people used mercurial finely crafted luxury sedan git mad maxian war rig year threatened something stupid like port mercurial git recently faced task converting internal code mercurial amazing revsets git wall sanity finally caved gilded born clear project science experiment fun hobby along get wonder could become actually useful losing mind installation first install module dependency mercurial pip install gilded gilded designed mercurial extension name suggests extension intended extend behavior mercurial gilded abuse system monkeypatch mercurial internals based result gilded extension loaded mercurial longer able operate mercurial repository plan use mercurial intended nt register gilded hgrc file convenience set alias call hg load extension alias auhg config extensionsgilded homage mercurial hg command recommend name au periodic symbol gold seriously main reason use project right use mercurial revsets query language log glog ascii graph version log command example stole great article view last two changsets committed user devanla nondefault branch hg log r last user devanla branch default head closed see test basic example gilded also becoming usable simple workflow init add commit status see complete list supported command caveat command currently supported query think pretty straightforward big payoff log make use revsets make complex query git history see revset feature supported edit trickier sure git handle locking around writing index utility remote revset feature currently supported operator predicate add pattern ancestor changeset ancestor set depth author string bisect string bookmark name na branch string set todo add support remote v local branch note mercurial commit belong one branch git predicate return many commits vary history head added removed branchpoint bundle na child set closed na contains pattern converted id na date interval desc string descendant set depth destination set draft na extinct na extra label value file pattern filelog pattern first set n follow file startrev followlines file fromline toline startrev descendfalse grep regex head head set hidden na id string na keyword string last set n limit set n offset matching revision field max set na merge min set na modifies pattern named namespace na obsolete na set set origin set na outgoing path set set parent set present set public remote id path remove pattern rev number na reverse set root set secret na sort set key subrepo pattern successor set tag name user string
334,Lobsters,vcs,Git & VCS,Sublime Merge - A Git client from the makers of Sublime Text,https://www.sublimemerge.com/,sublime merge git client maker sublime text,sublime highlighting,sublime highlighting power sublime text syntax highlighting understand exactly changed commit supported language box automatic loading installed thirdparty syntax got covered
335,Lobsters,vcs,Git & VCS,Making a hash of things – using #s in git commit messages,http://blog.tdwright.co.uk/2018/09/15/making-a-hash-of-things-using-s-in-git-commit-messages/,making hash thing using git commit message,changing comment character stackoverflow answer note auto,policy new company prefix commit message id story relate week tried interactive rebase came little unstuck turn use hash symbol commit message upset interactive rebaser read something similar last job used prefixed branch name issue key epic related jira issue key jira take form projectkeyissuenumber might something like working branch git would therefore name bit like story new place kept pivotal tracker issue id take form hash symbol sixdigit sequential number instance result policy commit message look something like added foo removed bar worked pretty well month half working far mentioned problem started wanted interactive rebase made silly spelling mistake recent commits luckily pushed change yet easy peasy think crack quick git rebase away go pop interactive rebase vi merrily set work rewording commits imagine disappointment presented aborting commit due empty commit messagecould amend commit successfully picking another commit typothis likely due empty commit message empty commit message gave new commit struck sudden recollection git us hash symbol comment character oh commit message starting hash treated comment leaving nothing behind git use looking back made obvious instruction line bottom screen performing interactive rebase start hash excluded rebase disappointment shifted annoyance commit message scheme mean could never interactive rebase changing comment character trying way escape hash stumbled stackoverflow answer really easy fix needed abort current rebase git rebase abort change comment character case using git config global corecommentchar start rebase rebase dollar sign used comment character et voila able change commit message even leave pesky hash note auto stackoverflow answer linked also mention feature git choose comment character automatically based character use commit message git config global corecommentchar auto sound great right unfortunately change comment character based commits made turn use commit history inform choice mind great feature hobbled poor execution seems like feature would effective default one group people simply avoid using hash commits familiar consequence others like u realise need change comment character need rebase make sense situation add new commit trigger desired behaviour third group people consciously accept early need change default comment character simply choose alternative word feature available nondefault option help virtually noone since default would nothing harm user would remove pain point user work case git famed usability fix available turn seems gratuitously userhostile
336,Lobsters,vcs,Git & VCS,What Is GitOps Really?,https://www.weave.works/blog/what-is-gitops-really,gitops really,gitops operation pull request git push development secret function continuous integration many post gitops use case infrastructure code continuous delivery story gitops find gitops enables move forward faster quite people vendor talking weaveworks blog happened slide definition luis faceira note git good article get started kubernetes work kubernetes give user kubernetes excellent convergence property automation convergence idempotence determinism gitops work concise description gitops divergence convergence mechanism weave flux gitops operator weave cloud terraform gitops whole cloud native stack eg terraform kubernetes cicd comparing gitops approach gitops provides continuous deployment kubernetes weave cloud kubectl script correctness security kelsey hightower limit scope access kubernetes cluster automation tool cluster administrator may debug keep running blog post security compliance homebrew hacked via credential careless jenkins script developer experience please see summary difference ci cd pull model cd ci server cd using direct update kubernetes antipattern set fluxhelm gitops best way continuous delivery kubernetes gitops manage whole platform operating model kubernetes key takeaway separation concern slide presentation use ci git server event integration tool conclude get started find alexis richardson,year ago published introduction gitops operation pull request post described weaveworks ran complete kubernetesbased saas developed set prescriptive best practice cloud native deployment management monitoring post popular people talked gitops published new tool git push development secret function continuous integration website grew many post gitops use case people still question different traditional infrastructure code continuous delivery use kubernetes soon realized needed new jumping point example story concise definition gitops comparison traditional continuous delivery blog provides read updated introduction gitops cicd developer experience focus mainly kubernetes although model may generalized story gitops imagine alice run business family insurance sell health travel car property insurance package parent busy figure detail business began side project alice working data scientist bank realized could use advanced data algorithm analyse assemble family package efficiently hand investor funded project business turn per year growing fast staff variety role among technology team build operates website database customer analytics team staff led alice cto bob bob team run production system cloud main application run gke using kubernetes google cloud use several data analytics tool well family insurance planned use container got caught excitement around docker soon found using gke made easy set cluster testing new feature added jenkins provide ci solution used quay container registry wrote jenkins script pushed new container config gke today though alice bob getting frustrated team velocity affect pace business introducing container nt seem improve velocity much team hoped sometimes deployment break clear code change responsible config change also hard track often create new cluster redeploy apps easiest way undo kind mess system turn alice worried get worse app grows new ml project looming horizon bob feel automated lot manual process pipeline still brittle requires manual intervention unscalable find gitops enables move forward faster alice bob team spent year hearing gitbased workflow devops infrastructure code super new gitops brings set opinionated prescriptive best practice applying idea context kubernetes quite people vendor talking including weaveworks blog family insurance team adopt gitops automated operating model work kubernetes combine speed stability find team get work done nobody distracted stop maintaining script instead focus new feature advance engineering practice eg implement canary deployment improve testing deployment process rarely break recover deployment partial failure correctly without manual intervention gain greater confidence delivery system alice bob find easy split team microservices team working parallel execute change per day team try new technique onboard new developer quickly deploy code production pull request within hour easily pas compliance happened gitops two thing operating model kubernetes cloud native provides set best practice join deployment management monitoring containerized cluster application elegant slide definition luis faceira shown path towards developer centric experience managing application applying git workflow operation well development note git push set entire cicd toolchain uiux note git familiar version control system gitbased development workflow highly recommend diving working feature branch pull request seem like black magic first worth effort good article get started kubernetes work story alice bob came gitops using kubernetes indeed gitops strong affinity kubernetes operating model kubernetesbased infrastructure application kubernetes give user key property describe everything kubernetes model declaration kubernetes api server accepts declaration input continually try drive cluster state described declaration declaration adequate describe manage broad class workload application change application cluster due either change container image orchanges declarative specificationerrors environment eg container crash kubernetes excellent convergence property group configuration update made human operator kubernetes orchestrator apply change cluster state converged updated configuration model work kubernetes resource extensible using kubernetes custom resource definition crds therefore kubernetes deployment following excellent property automation kubernetes update provide mechanism automating process applying set change correctly timely manner convergence kubernetes keep trying update success idempotence multiple application convergence outcome determinism assuming adequate resource updated cluster state depends desired state gitops work learnt enough kubernetes explain gitops let go back alice bob microservices team family insurance workflow want carry look table part seem new strange please suspend disbelief bear u example workflow using jenkins many workflow use alternative tool see every update end change config file git repos change git result gitops operator updating cluster workflow task executed jenkins build pass master branch jenkins push tagged image quay jenkins push config helm chart master storage bucket cloud function copy configcharts master storage bucket master git repo gitops operator update cluster jenkins build pass release hotfix branch jenkins push untagged image quay jenkins push config helm chart staging storage bucket cloud function copy configcharts staging storage bucket staging git repo gitops operator update cluster jenkins build pass develop feature branch jenkins push untagged image quay jenkins push config helm chart develop storage bucket cloud function copy configcharts develop storage bucket develop git repo gitops operator update cluster new customer added lcmops invokes gradle initial deployment setup nlbs lcmops commits new config file setup deployment update gitops operator update cluster concise description gitops describe desired state whole system using declarative specification environment story bob team owns whole system config git git repo single source truth desired state whole system change desired state git commitsall specified property cluster also observable cluster detect desired observed state converged different diverged desired observed state convergence mechanism bring desired observed state sync eventually autonomically within cluster kubernetesthis triggered immediately change committed alert configurable interval alert diff may also sent state divergent hence git commits cause verifiable idempotent update cluster rollback convergence earlier desired state convergence eventual indicated diff alert defined time intervala converged alert eg webhook git writeback event divergence repeat specified property cluster also observable cluster example divergence change configuration file due merged update git change configuration file due gui effecting commit git multiple change desired state due merged pr git followed container image build subsequent config update observed state change cluster due error resource conflict causing poor behavior random drift original state convergence mechanism example container cluster convergence mechanism provided kubernetes mechanism used manage kubernetesbased application framework eg istio kubeflow mechanism manage workflow kubernetes image repos git provided weave flux gitops operator part weave cloud underlying machine convergence mechanism declarative autonomic experience terraform closest require human oversight sense gitops extends tradition infrastructure code gitops combine git kubernetes excellent convergence property provide model operation gitops let u say system described observed automated controlled gitops whole cloud native stack eg terraform gitops kubernetes gitops want whole system managed declaratively using convergence whole system mean collection environment running kubernetes eg dev cluster production environment includes machine cluster application well interface external service eg data monitoring notice important terraform bootstrapping problem kubernetes start somewhere using terraform mean apply gitops workflow create control plane underpins kubernetes application helpful best practice applying gitops concept layer kubernetes exciting area active development far seen gitops type solution istio helm ksonnet openfaas kubeflow well eg pulumi reinventing app dev layer cloud native kubernetes cicd comparing gitops approach said gitops two thing operating model kubernetes cloud native described path towards developer centric experience managing application many people gitops git push workflow like let look cicd pipeline gitops provides continuous deployment kubernetes gitops provides mechanism continuous deployment remove need standalone deployment management system kubernetes work management update application requires update git transactional update desired state deployment enacted within cluster kubernetes based updated description kubernetes work update convergent provides mechanism continuous deployment update atomic note weave cloud provides gitops operator integrates kubernetes git enable cd reconciling desired cluster state kubectl script avoid using kubectl update cluster especially avoid using script group kubectl command instead gitops pipeline place user update kubernetes cluster via git benefit include correctness group update may applied converged finally validated get u closer goal atomic deployment contrast using script provides guarantee convergence say security quote kelsey hightower limit scope access kubernetes cluster automation tool cluster administrator may debug keep running see also blog post security compliance well recent use case homebrew hacked via credential careless jenkins script developer experience kubectl expose machinery kubernetes object model quite complex ideally user interact system higher level abstraction shall defer kelsey please see summary difference ci cd gitops improves existing cicd model modern ci server orchestration tool specifically tool orchestrating ci pipeline include build test merge trunk etc ci server automate management complex multistep pipeline common temptation script set kubernetes update execute script pipeline step push change cluster indeed many people however suboptimal shall talk ci used merge update trunk kubernetes cluster update manage cd internally based update call pull model cd contrast ci push cd part runtime orchestration ci server cd using direct update kubernetes nt use ci server orchestrate direct update kubernetes set ci job antipattern set blog post let go back alice bob kind problem encounter bob ci server applying change cluster fails bob doesnt know state cluster supposed rectify also true succeeds let assume bob team built new image patched deployment deploy image ci pipeline image build ok pipeline fails team left figure update deploy trigger new build result sideeffects nt want potential two build immutable image hanging around wait another update triggering build bit failed step need replayed step safe replay using gitbased workflow nt guarantee bob team encounter problem could still fail push commit move tag whatever much closer clear passorfail summary reason ci server cd update script always deterministic easy make mistake ci server converge declarative model cluster fail idempotency guarantee hard user need understand deep system semantics recovery partial failure harder note helm want use helm recommend combining gitops operator eg fluxhelm help convergence helm deterministic atomic gitops best way continuous delivery kubernetes alice bob team adopt gitops find much easier deliver product high velocity without losing stability let finish blog post illustration new setup look like note talking application service primarily also use gitops manage whole platform operating model kubernetes please review following diagram show git container image repository shared resource two orchestrated lifecycles continuous integration pipeline read writes file git update container image repository gitops runtime pipeline combine deployment management observability read writes file git load container image key takeaway separation concern note two pipeline communicate updating git image repo word firewall ci runtime operation call immutability firewall update repos create new version see also slide presentation info topic use ci git server gitops work please keep using favorite ci server git image repos test kit almost continuous delivery tool market want use ci git server image repo blocking factor adoption cloud native gitops keep using existing tool event integration tool whenever git updated runtime notified weave flux weave cloud operator whenever kubernetes accepts set change git updated provides simple integration model creating workflow gitops illustrated conclude gitops provides strong update guaranty required modern deployment cicd tool automation convergence idempotence determinism important provides operating model developer cloud native traditional system management monitoring tool associated operation team working runbook associated specific deployment cloud native system management observability tooling best way development team measure effect deployment fast enough react imagine many cluster deployed across many cloud many service team deployment plan gitops provides scale invariant model managing get started find try gitops find alexis richardson alexis cofounder ceo weaveworks also chairman toc cncf cofounder coed code meetups previously pivotal head product spring rabbitmq redis apache tomcat vfabric alexis responsible resetting product direction spring transitioning vfabric business vmware alexis cofounded rabbitmq ceo rabbit company acquired vmware worked numerous cloud platform rumour persist cofounded several software company including cohesive network career prop trader fixed income derivative misspent youth studying teaching mathematical logic
337,Lobsters,vcs,Git & VCS,Protecting Mozilla’s GitHub Repositories from Malicious Modification,https://blog.mozilla.org/security/2018/09/11/protecting-mozillas-github-repositories-from-malicious-modification/,protecting mozilla github repository malicious modification,gentoo incident firefox account tooling overview implementation approach organization recommendation repository recommendation workflow recommendation mozillaservicesgithubaudit help repository security tip n trick open issue githubaudit,mozilla working ensure repository hosted github protected malicious modification recent gentoo incident demonstrated attack possible mozilla original usage github alternative way provide access source code similar gentoo source truth repository maintained infrastructure still utilize infrastructure much firefox browser code mozilla many project exist github project experiment others used production eg firefox account need protect sensitive repository malicious modification also keeping barrier contribution low practical describes mitigation put place prevent shipping deploying compromised repository sharing finding tooling support auditing add protection minimal disruption common github workflow risk addressing compromise github user account via mechanism unique github gentoo incident show user account compromised resource user permission affected overview github wonderful ecosystem many extension apps make certain workflow easier apps obtain permission user perform action behalf app ask permission including modifying adding additional user credential github make permission request transparent requires user approve via web interface user may conversant implication granting permission app also may make connection approving permission personal repository could grant access repository across github make change excessive permission expose repository sensitive information risk without repository admins aware risk best repository admin detect fraudulent modification pushed back github neither github git configured prevent highlight sort malicious modification external monitoring required implementation following taken approach addressing concern mozilla specific removed much possible borrow web best practice used feature github platform tried avoid adding friction daily developer workflow organization recommendation must required member collaborator user least elevated permission contact method email im given org owner repo admins github allows user hide contact info privacy understand responsibility inform org owner repo admins ever suspect account compromised eg laptop stolen repository recommendation sensitive repository hosted organization follows recommendation production branch identified configured allow force push give commit privilege small set user enforce restriction admins owner well require commits gpg signed using key known advance workflow recommendation deployment release auditworthy event marked signed tag gpg key known advance deployment release criterion include audit signed commits tag ensure signed expected key cost implementing protection especially around signing commits developed internal tooling help auditing configuration plan add tool auditing commits tool available mozillaservicesgithubaudit repository example using audit tool first obtain local copy data need octoorg organization report repository getbranchprotectionspy octoorg info running msoctocat info gathering branch protection data call remaining info starting org octoorg call remaining info finished gathering branch protection data call remaining data cached locally run many report like example written one report showing recommendation followed reportbranchstatuspy header octoorgdbjson name protected restricted enforcement signed teamused octoorgreactstarter true false false false false octoorgnodestarter false false false false false see octoorgreactstarter enabled protection force push production branch final output csv format easy pasting spreadsheet help still rolling recommendation across team learning go think repository security recommendation appropriate situation please help u make implementation easier add experience tip n trick page open issue githubaudit repository
338,Lobsters,vcs,Git & VCS,Highlights from Git 2.19,https://blog.github.com/2018-09-10-highlights-from-git-2-19/,highlight git,contributor compare history source new trick function context locate first matching column source source sorting branch source directory rename detection source tidbit vulnerability source source source source source source source source source option source age group source source source automatically create source source cooking partial clone design overview source source source source source source commit graph series blog post source source source protocol blog post source source source source transitioning away collision attack post remediation unlikely practice source everything else full release note find release note previous version,open source git project released git feature bugfixes contributor look interesting feature introduced latest version git compare history git rangediff might used git rebase powerful tool rewriting history altering commits commit order branch base name many people polish series commits proposing merge project visualize difference two set commits rebase use git diff show difference two end state provide information individual commits base commits built changed resulting state might quite different even change commits largely git introduces git rangediff tool comparing two sequence commits including change order commit message actual content change introduce example rewrote series three commits compared tip version using git rangediff git rangediff show moved commit introducing readmemd first instead second amended commit message body typo fix introduced new commit add missing newline source git grep new trick search phrase using git grep often helpful additional information pertaining match line number function context git locate first matching column query git grep column using vim also try gitjump git addon convert useful location code jump location text editor gitjump take merge conflict diff hunk exact grep location git grep column git grep also learned new option meaning onlymatching useful nontrivial regular expression want gather matching part search example want count various way git source code spell eg option hii omit filename search caseinsensitively ignore match binary file respectively source source sorting branch git branch command like git tag scriptable counterpart git foreachref take sortoption let order result number property example show branch order recent update could use git branch sortauthordate always prefer order typing sort option get tiresome use branchsort config set default ordering git branch note default git branch sort refname hence master first newest last example tell git would instead prefer recently updated branch first rest descending order hence newest first master last might also want try sorting option sortnumparent show merges awesome sortrefname sort branch alphabetically name default may useful override configuration sortupstream sort branch remote originate source directory rename detection git always detected renamed file part merges example one branch move file b another modifies content resulting merge apply modification content new location b thing happen file directory one branch move directory b another add new file afile infer file become bfile two merged git git mergedoes whenever rename detection enabled default source tidbit git remote code execution vulnerability gitmodules fixed attacker could execute script victim cloned recursesubmodules upgraded please fix also backported safe running one source ever run git command line option tabcompleted keeping date long annoying source manual work project completion option command generated automatically along list command name config option source source source source gpg signing verification commits tag extended work gpgsm us certificate instead openpgp key certificate may easier manage centralized group eg developer working large enterprise source fetch configuration variable fallback value common script say git config coremyfoo echo default give git opportunity interpret default come color especially important instance ultimately need ansi color code say bold red want type git config long supported special getcolor option option applied uniformly type config instance git config typeint coremyint expand default git config typeexpiry gcpruneexpireconsistently return number second source source quick quiz git tag l shorthand git tag list git branch l thought surely list branch congratulation veteran git user fact git branch l used since establish reflog newly created branch something probably care since became default shortly introduced usage deprecated receive warning use git branch l thus clearing way git branch l mean git branch list source last post discussed new colormoved option unsurprisingly color line moved diff line moved must identical meaning feature would miss reindented code unless specified diff option ignorespacechange keep mind option would affect whole diff potentially missing space change care git whitespace move detection configured independently new colormovedws option source many git command colorized like git diff git status since command improved support colorization git blame learned colorize line based age group message sent remote server colorized based keyword eg error warning etc finally push error painted red increased visibility source source source ever run git checkout name remote branch might know git automatically create local branch track remote one however branch name found one remote git know use simply give git learned checkoutdefaultremote configuration specifies remote default resolving ambiguity source git interprets certain text encoding eg binary meaning tool like git diff show textual diff normally recommended store text file always possible tool generate expect another encoding tell git encoding prefer working tree perfile basis setting workingtreeencoding attribute cause git store file internally convert back preferred encoding checkout result look good git diff well hosting site source cooking feature big developed course several release historically avoided reporting work progress post since feature often still experimental nothing directly start using said topic upstream around release exciting ignore incomplete summary happening upstream partial clone important part git decentralized design clone receive full history project making clone true peer one another large number object repository thing go quickly certain size clone become frustratingly slow ongoing work allow partial clone omit blob tree object favor requesting object server asneeded see design overview feature even start experimenting note public server yet support feature play git clone filterblob none local git install source source source source source source commit graph git simple data model everything object named hash content object point name many operation walk graph formed pointer example asking release contain bugfix really tag object path walk back commit x x commit fixing aforementioned bug walk traditionally required loading object disk find pointer git compute store property commit efficient format leading significantly faster traversal read series blog post feature author source source source protocol git still us roughly protocol fetching developed client connects server dump current state branch tag called ref advertisement client asks part need update repository grown cost advertisement become source inefficiency protocol added new feature year backwardscompatible way negotiating capability server client one thing changed ref advertisement happens chance negotiate new protocol address providing way transfer advertisement efficiently server support new protocol far read blog post designer source source source source transitioning away mentioned earlier git object named according hash content might know algorithm determines value hash considered safe time fact collision attack discovered published last year wrote post remediation though collision git unlikely practice git project decided pick new hashing algorithm made significant progress towards implementing git chosen successor working transition plan convert source everything else sampling change last version read full release note find release note previous version git repository
339,Lobsters,vcs,Git & VCS,Gitifying I2P: How to make git clone resumable,http://0xcc.re/gitifying-i2p-how-to-make-git-clone-resumable/,gitifying make git clone resumable,post via r,post apr oct sep apr apr aug jul jun subscribe via r
341,Lobsters,vcs,Git & VCS,depot_tools: Git tools from Google,https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools.html,depottools git tool google,git repository,chromium depottools suite contains many tool assistaugment chromium development environment tool may downloaded checking git repository two primary category tool tool essential development flow sense successfully develop chromium without tool merely helper tool required substantially ease development workflow listing category tool follows
342,Lobsters,vcs,Git & VCS,buzzfeed/sso - SSO for internal Buzzfeed apps,https://github.com/buzzfeed/sso,buzzfeedsso sso internal buzzfeed apps,sso blog post sso community survey sso sso sso installation quickstart quickstart guide sso code conduct sso code conduct contributing sso contribution guideline issue issue tracker security vulns sso security buzzfeedcom bug bounty program maintainer sso notable fork pomerium,sso see launch blog post information please take sso community survey let u know help u plan roadmap sso lovingly known s octopus octoboi authentication authorization system buzzfeed developed provide secure single signon experience access many internal web apps used employee depends google authoritative provider authenticates user specific email domain authorization based google group membership required perupstream basis main idea behind sso double flow ssoauth provider ssoproxy google provider ssoauth sso built top bitly open source nutshell user visit ssoproxyprotected service foossoexamplecom session cookie redirected ssoauth ssoauthexamplecom user session cookie ssoauth prompted log via usual google flow redirected back ssoproxy logged foossoexamplecom user session cookie ssoauth eg already logged barssoexamplecom transparently redirected back proxy logged without needing go google flow ssoproxy transparently revalidates refreshes user session ssoauth installation quickstart follow quickstart guide spin local deployment sso get feel work code conduct help u keep sso open inclusive please read follow code conduct contributing contribution sso welcome please follow contribution guideline issue please file issue find issue tracker security vulns come across security vulnerability sso repo software please email security buzzfeedcom email please request access bug bounty program compensate valid issue reported maintainer sso actively maintained buzzfeed infrastructure team notable fork pomerium identityaccess proxy inspired beyondcorp
343,Lobsters,vcs,Git & VCS,Experiments with support for mercurial in gitlab,https://gitlab.com/gitlab-org/gitlab-ce/issues/31600#note_96793407,experiment support mercurial gitlab,heptapod friendly fork gitlab http heptapod description proposal link reference http,heptapod friendly fork gitlab built octobus presentation mercurial conference paris http heptapod heptapod gitlab ce mercurial friendly fork excellent relationship gitlab featuring modern mercurial workflow evolve topic one never forcepush current plan add mercurial support gitlab providing support octobus team needed work heptapod description ca nt host project using mercurial find mercurial order magnitude friendly git example remember command proposal add mercurial option cv link reference http
344,Lobsters,vcs,Git & VCS,IBM TSM (Spectrum Protect) on Veritas Cluster Server,https://vermaden.wordpress.com/2018/08/23/ibm-tsm-spectrum-protect-on-veritas-cluster-server/,ibm tsm spectrum protect veritas cluster server,bareos backup server freebsd storage array setup luns initialization haconf makerw vxdisk alldgs list vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisksetup vxdisk alldgs list vxdg init vxdisk alldgs list vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxassist g make vxprint u h grep sd column vxprint u h g column vxinfo p g column find devvxdsk name mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles mkfs vxfs largefiles haconf dump makero veritas cluster server group haconf makerw hagrp add hagrp modify systemlist hagrp modify autostartlist hagrp modify parallel hare add nic hare modify critical hare modify pingoptimize hare modify device hare modify enabled hare probe sys hare add ip hare modify critical hare modify device hare modify address hare modify netmask hare modify enabled hare link hare add diskgroup hare modify critical hare modify diskgroup hare modify enabled hare probe sys mkdir mkdir cat list eof eof cat list read stg size mntpoint vol mntname echo sleep echo hare add mntname mount echo sleep echo hare modify mntname critical echo sleep echo hare modify mntname snapumount echo sleep echo hare modify mntname mountpoint mntpoint echo sleep echo hare modify mntname blockdevice vol echo sleep echo hare modify mntname fstype vxfs echo sleep echo hare modify mntname mountopt largefiles echo sleep echo hare modify mntname fsckopt echo sleep echo hare modify mntname enabled echo sleep echo hare probe mntname sys echo sleep echo hare link mntname echo done hare state grep grep mnt read hare display grep v arglistvalues grep largefiles done column hare add application hare modify startprogram start hare modify stopprogram stop hare modify monitorprogram status hare modify enabled hare probe sys hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link hare link vxdg import mount vxfs mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p mkdir p find umount vxdg deport haconf dump makero grep etcvrtsvcsconfconfigmaincf local per node resource lvcreate n lvtmp l vglocal lvcreate n lvopttivoli l vglocal lvcreate n lvhome l vglocal devvglocallvtmp devvglocallvopttivoli devvglocallvhome lvcreate n lvtmp l vglocal lvcreate n lvopttivoli l vglocal lvcreate n lvhome l vglocal devvglocallvtmp devvglocallvopttivoli devvglocallvhome cat etcfstab yum install numactl yum install yum install yum install xterm fontconfig libice libxau libxmu libsm libxt cat etcsysctlconf cat etcsysctlconf install ibm tsm server chmod x installsh chmod x installsh deselect language deselect operation center opttivoliibmibmimshared opttivoliibminstallationmanagereclipse opttivolitsm install ibm tsm client yum localinstall yum localinstall node configuration ibm tsm server useradd u useradd u passwd passwd tail etcpasswd tail etcpasswd tail etcgroup tail etcgroup cat etcsecuritylimitsconf cat etcsecuritylimitsconf chown chown hare state grep tsm hare online sys hostname hare online sys hostname hare state grep grep grep mnt grep v instance awk print read hare online sys hostname done hare state grep grep find grep v lostfound chown r ibm tsm server configuration cd opttivolitsmserverbin opttivolitsmserverbin dsmicfgx start automatically using instance user id modify ibm tsm server startup script blue cat diff u copy profile node pwd tar czf ssh tar c home xzf cat cat ibm tsm server start hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare online sys hare state grep grep cat etcservices eof eof hagrp freeze hastatus sum su c opttivolitsmserverbindsmserv q admin halt hagrp unfreeze hare state grep grep hare online sys error ignore first ibm tsm server start install ibm tsm server license register license fileopttivolitsmserverbintsmeelic ibm tsm client configuration ibm tsm server node cat opttivolitsmclientbabindsmopt eof servername eof cat opttivolitsmclientbabindsmopt eof servername eof cat opttivolitsmclientbabindsmsys eof servername commmethod tcpip tcpport tcpserveraddress localhost schedlogname opttivolitsmclientbabindsmschedlog errorlogname opttivolitsmclientbabindsmerrorlog schedlogretention errorlogretention eof cat opttivolitsmclientbabindsmsys eof servername commmethod tcpip tcpport tcpserveraddress localhost schedlogname opttivolitsmclientbabindsmschedlog errorlogname opttivolitsmclientbabindsmerrorlog schedlogretention errorlogretention eof install ibm tsm server uname r uname r sed yum showduplicates list kerneldevel grep yum install rpmbuild rpm uvh rpm uvh etcinitdlintape start etcinitdlintape restart library configuration networker tsm networker networker tsm tsm find devibm udev udevadm info p udevadm info q path n grep serial attr serialnum udevadm info p udevadm info q path n grep serial attr serialnum udevadm info p udevadm info q path n grep serial attr serialnum udevadm info p udevadm info q path n grep serial attr serialnum udevadm info p udevadm info q path n grep serial attr serialnum udevadm info p udevadm info q path n grep serial attr serialnum cat procscsiibm cat etcinitdlintape stop rmmod lintape etcinitdlintape start find devibm query path fd update path srctypeserver desttypelibrary onlineno update path srctypeserver desttypelibrary update path srctypeserver desttypelibrary onlineyes update drive serialautodetect elementautodetect update drive onlineno update drive serialautodetect elementautodetect update drive onlineyes update drive serialautodetect elementautodetect update drive onlineyes update path srctypeserver autodetectyes desttypedrive update drive serialautodetect elementautodetect update path srctypeserver autodetectyes desttypedrive update path srctypeserver desttypedrive onlineyes update path srctypeserver desttypedrive onlineyes audit library checklabelbarcode query proc query act ibm tsm storage pool configuration define stgpool stgtypedirectory define stgpooldirectory q stgpooldirectory ibm tsm backup policy configuration def dom f def pol f f def mg f f def co f f standard typebackup def mg f f def co f f standard typebackup defmg f f act pol f f like,today mostly shared article free open system time share called enterprise experience long ago made ibm tsm instance highly available service symantec veritas cluster server prefer use open free backup solution check bareos backup server freebsd article ibm tsm tivoli storage manager rebranded ibm ibm spectrum protect similar period time symantec moved veritas cluster server info infoscale availability creating separatededicated veritas company purpose instruction want share today sure latest version veritas cluster server later infoscale availability incarnation latest ibm spectrum protect family introduction mostly related rebrandingcleaning whole spectrum protecttsm module addition common label instruction made ibm tsm spectrum protect version still similar current version highly available ibm tsm instance part whole backup consolidation project us two physical server server ibm tsm service dellemc networker backup server everything ok one node dedicated ibm tsm one used dellemc networker physical resource well saturated waste whole node wait time empty first node crash course first node misbehaves hardware failure ibm tsm dellemc networker run nicely single node also convenient various maintenance task able switch service node work peace first one tell third last service shared two oracle rman catalog oracle database metadata information also backuprestore purpose write instruction install operating system use rhel setup veritas cluster server installed earlier quite simple set instruction focus creating ibm tsm highly available service along usingallocating resource ibm storwize storage array gb ssd disk dedicated ibm tsm database instance tb sa disk dedicated draid group serving space ibm tsm storage pool implemented latest ibm tsm container pool deduplication compression enabled head ibm storwize storage array shown node ibm system server two dualport fc card one dualport card along builtin card veritas cluster server heartbeat gb ram dual cpu ghz translates physical core htt thread per node three internal ssd drive used system spare configuration clustered resource ibm storwize fcsan storage array operating system installed node rhel veritas cluster server version ibm system server shown settingtuningdecisions made based ibm tsm documentation great ibm spectrum protect blueprint resource valuable ibm developerworks wiki storage array setup first need create mdisks used draid double parity protection spare mdisk sa tb disk give disk data parity spare provide io thanks draid setup three mdisks tb total tb ibm tsm container course pool mdisks one storage group luns ibm tsm database ssd gb disk setup draid disk parity spare disk give disk data parity spare space give tb ibm tsm database luns created mdisks needed remove name course luns initialization veritas service cluster need storage prepared disk group similar concept powerful lvm instruction first detect initialize luns ibm storwize storage array marked blue clarity root haconf makerw root vxdisk alldgs list device type disk group status auto lvm online invalid auto cdsdisk dgfencing online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk rmandg online auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto cdsdisk dgfencing online auto cdsdisk dgfencing online auto cdsdisk rmandg online auto cdsdisk rmandg online auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid auto none online invalid root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisksetup root vxdisk alldgs list device type disk group status auto lvm online invalid auto cdsdisk dgfencing online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk rmandg online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk dgfencing online auto cdsdisk dgfencing online auto cdsdisk rmandg online auto cdsdisk rmandg online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online root vxdg init root vxdisk alldgs list device type disk group status auto lvm online invalid auto cdsdisk dgfencing online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk nsrdgnsr online auto cdsdisk rmandg online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk dgfencing online auto cdsdisk dgfencing online auto cdsdisk rmandg online auto cdsdisk rmandg online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online auto cdsdisk online root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxassist g make root vxprint u h grep sd column sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled sd enabled root vxprint u h g column ty name assoc kstate length ploffs state dg dm dm dm dm dm dm dm dm dm dm dm dm dm dm dm v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled v fsgen enabled active pl enabled active sd enabled root vxinfo p g column vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active vol fsgen started plex active root find devvxdsk name root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root mkfs vxfs largefiles root haconf dump makero veritas cluster server group luns initialized disk group may create cluster service root haconf makerw root hagrp add vcs notice group added populating systemlist setting parallel attribute recommended adding resource root hagrp modify systemlist root hagrp modify autostartlist root hagrp modify parallel root hare add nic vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify pingoptimize root hare modify device root hare modify enabled root hare probe sys root hare add ip vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify device root hare modify address root hare modify netmask root hare modify enabled root hare link root hare add diskgroup vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify diskgroup root hare modify enabled root hare probe sys root mkdir root mkdir wanted type generated command shown local cat list eof eof local cat list read stg size mntpoint vol mntname echo sleep echo hare add mntname mount echo sleep echo hare modify mntname critical echo sleep echo hare modify mntname snapumount echo sleep echo hare modify mntname mountpoint mntpoint echo sleep echo hare modify mntname blockdevice vol echo sleep echo hare modify mntname fstype vxfs echo sleep echo hare modify mntname mountopt largefiles echo sleep echo hare modify mntname fsckopt echo sleep echo hare modify mntname enabled echo sleep echo hare probe mntname sys echo sleep echo hare link mntname echo done root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare add mount vcs notice resource added enabled attribute must set agent monitor root hare modify critical root hare modify snapumount root hare modify mountpoint root hare modify blockdevice root hare modify fstype vxfs root hare modify mountopt largefiles root hare modify fsckopt root hare modify enabled root hare probe sys root hare link root hare state grep grep mnt read hare display grep v arglistvalues grep largefiles done column mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles mountopt localclus largefiles root hare add application vcs notice resource added enabled attribute must set agent monitor root hare modify startprogram start root hare modify stopprogram stop root hare modify monitorprogram status root hare modify enabled root hare probe sys root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root hare link root vxdg import root mount vxfs root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root mkdir p root find root umount root vxdg deport root haconf dump makero root grep etcvrtsvcsconfconfigmaincf application requires requires requires requires requires requires requires requires requires requires requires requires requires requires requires requires application local per node resource root lvcreate n lvtmp l vglocal root lvcreate n lvopttivoli l vglocal root lvcreate n lvhome l vglocal root devvglocallvtmp root devvglocallvopttivoli root devvglocallvhome root lvcreate n lvtmp l vglocal root lvcreate n lvopttivoli l vglocal root lvcreate n lvhome l vglocal root devvglocallvtmp root devvglocallvopttivoli root devvglocallvhome root cat etcfstab devmappervglocallvroot rw noatime nodiratime boot default bootefi vfat shortnamewinnt devvglocallvswap swap swap default devvglocallvtmp tmp rw noatime nodiratime devvglocallvopttivoli opttivoli rw noatime nodiratime devvglocallvhome home rw noatime nodiratime virt tmpfs devshm tmpfs default devpts devpts devpts sysfs sys sysfs default proc proc proc default install ibm tsm server dependency root yum install numactl root yum install root yum install root yum install xterm fontconfig libice libxau libxmu libsm libxt system etcsysctlconf parameter node root cat etcsysctlconf control ip packet forwarding control source route verification accept source routing control system request debugging functionality kernel kernelsysrq control whether core dump append pid core filename useful debugging multithreaded application kernelcoreusespid control use tcp syncookies disable netfilter bridge netbridgebridgenfcalliptables netbridgebridgenfcallarptables control default maxmimum size mesage queue kernelmsgmnb control maximum size message byte kernelmsgmax control maximum shared segment size byte kernelshmmax control maximum number shared memory segment page kernelshmall sf ha networker connection backlog hash table maximum value allowed netcorenetdevmaxbacklog increase memory size available tcp buffer netcorermemdefault netcorewmemdefault netcorermemmax netcorewmemmax recommended keepalive value recommended timeout improper close sunrpctcpslottableentries rdbms rman cat fssuiddumpable fsaiomaxnr fsfilemax support emc netcoresomaxconn ram gb kernelshmmni tsmnsr kernelsem ram gb kernelmsgmni tsm kernelrandomizevaspace vmswappiness vmovercommitmemory root cat etcsysctlconf control ip packet forwarding control source route verification accept source routing control system request debugging functionality kernel kernelsysrq control whether core dump append pid core filename useful debugging multithreaded application kernelcoreusespid control use tcp syncookies disable netfilter bridge netbridgebridgenfcalliptables netbridgebridgenfcallarptables control default maxmimum size mesage queue kernelmsgmnb control maximum size message byte kernelmsgmax control maximum shared segment size byte kernelshmmax control maximum number shared memory segment page kernelshmall sf ha networker connection backlog hash table maximum value allowed netcorenetdevmaxbacklog increase memory size available tcp buffer netcorermemdefault netcorewmemdefault netcorermemmax netcorewmemmax recommended keepalive value recommended timeout improper close sunrpctcpslottableentries rdbms rman cat fssuiddumpable fsaiomaxnr fsfilemax support emc netcoresomaxconn ram gb kernelshmmni tsmnsr kernelsem ram gb kernelmsgmni tsm kernelrandomizevaspace vmswappiness vmovercommitmemory install ibm tsm server connect node ssh forwarding enabled install ibm tsm server root chmod x root root installsh second node root chmod x root root installsh option choosen installation install deselect language deselect operation center install opttivoliibmibmimshared install opttivoliibminstallationmanagereclipse install opttivolitsm screenshots installation process install ibm tsm client root yum localinstall root yum localinstall node configuration ibm tsm server root useradd u root useradd u root passwd changing password user new password retype new password passwd authentication token updated successfully root passwd changing password user new password retype new password passwd authentication token updated successfully root tail etcpasswd binbash root tail etcpasswd binbash root tail etcgroup root tail etcgroup root cat etcsecuritylimitsconf oracle oracle soft nproc oracle hard nproc oracle soft nofile oracle hard nofile oracle soft stack tsm soft nofile hard nofile root cat etcsecuritylimitsconf oracle oracle soft nproc oracle hard nproc oracle soft nofile oracle hard nofile oracle soft stack tsm soft nofile hard nofile root root root chown root chown root hare state grep tsm state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state offline state online state online state offline state offline root hare online sys hostname root hare online sys hostname root hare state grep grep grep mnt grep v instance awk print read hare online sys hostname done root hare state grep grep state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state offline root find grep v lostfound root chown r ibm tsm server configuration connect one node ssh forwarding enabled root cd opttivolitsmserverbin root opttivolitsmserverbin dsmicfgx preparing install extracting jre installer archive unpacking jre extracting installation resource installer archive configuring installer system environment launching installer option choosen configuration install instance user id install install install instance directory install install install database directory install install install install install active log directory install install install primary archive log directory install install install instance autostart setting install start automatically using instance user id screenshots configuration process log ibm tsm instance creation creating database manager instance database manager instance created successfully formatting server database dsmserv generated jun ibm tivoli storage manager version release level licensed material property ibm c copyright ibm corporation right reserved u government user restricted right use duplication disclosure restricted gsa adp schedule contract ibm corporation subsystem process id processing option file unable open message catalog language default language message catalog used using instance directory icc support module loaded database manager successfully started offline db backup database started offline db backup database completed successfully server database formatting complete stopping database manager server shutdown format completed return code beginning initial configuration dsmserv generated jun ibm tivoli storage manager version release level licensed material property ibm c copyright ibm corporation right reserved u government user restricted right use duplication disclosure restricted gsa adp schedule contract ibm corporation subsystem process id processing option file unable open message catalog language default language message catalog used using instance directory icc support module loaded server restartrecovery progress database manager successfully started database manager using port server connection server machine guid changed old value new value activity log process started master encryption key generated server password set default label key data base tsm server selfsigned key nasndmp support module loaded tsm san discovery disabled option storage pool backuppool defined device class disk storage pool archivepool defined device class disk storage pool spacemgpool defined device class disk schedule manager started server initialization complete tivoli storage manager distributed tivoli ready use server name set server name changed window client use passworda ccess generate may unable authenticate server administrator admin registered system privilege granted administrator admin stopping activity log server shutdown stopping database manager server shutdown configuration complete modify ibm tsm server startup script modified startup script properly work veritas cluster server modification blue root cat binbash dsmserv startstop ibm tivoli storage manager chkconfig description startsstops ibm tivoli storage manager server instance processname dsmserv pidfile varrundsmservinstancenamepid distributed storage manager adsm server component ibm confidential ibm confidentialrestricted combined aggregated oco source module program oco source material c copyright ibm corporation init script designed start single tivoli storage manager server instance system multiple instance might running assumes name script also name instance started script name start snn knn n digit name instance script name three letter prefix removed use script start multiple instance install multiple copy script etcrcdinitd naming copy instance start script make number simplifying assumption way instance set tivoli storage manager server instance run nonroot user whose name instance name server instance directory directory keep important state information subdirectory home directory called assumption valid script require modification work start look instance instanceuser instancedir variable set first check syntax echo usage startstopstatusrestart exit fi prog dsmserv serverbindir opttivolitsmserverbin e serverbindir prog echo ibm tivoli storage manager server found system serverbindir prog exit fi see start snn knn n digit strip prefix use remainder instance name instance instance elif k instance instance k fi instancehome serverbindir dsmfngr instance devnull z instancehome instancehome home instance fi pidfile varrun prog instance pid pathsbin bin usrbin usrsbin serverbindir basic error checking starting server server installed e serverbindir prog echo ibm tivoli storage manager server found system exit fi instance directory exist instancedir echo instance directory instancedir exist exit fi function checkpidfile test f pidfile function checkprocess p p cat pidfile devnull function checkrunning checkpidfile checkprocess start set standard value user limit ulimit c unlimited ulimit unlimited ulimit f unlimited ulimit n ulimit unlimited ulimit u echo n starting prog instance instance already running say status gstatus running echo prog instance instance already running exit else serverbindirrcdsmserv u instanceuser instancedir q devnull give enough time server start sleep lock file got created ok f gawk source print pidfile echo succeeded echo failed rc echo rc eq touch varlocksubsys instance return rc else echo failed return fi fi stop echo stopping prog instance instance e pidfile make sure someone else nt kill u already progpid cat pidfile running p ef grep prog grep w progpid grep v grep n running echo executing cmd kill cat pidfile kill cat pidfile checkrunning echo prog instance instance still running check sleepinterval second sleep sleepinterval totalslept expr totalslept totalslept gt maxsleeptime break fi done checkrunning echo unable stop prog instance instance exit else echo prog instance instance stopped successfully fi fi remove pid file nt try kill pid rm pidfile echo process prog instance instance stopped unable remove pidfile echo sure remove pidfile exit fi else echo prog instance instance running fi rc echo rc eq rm f varlocksubsys instance return rc status check usage echo invalid call status routine expected argument echo displaytoscreen indicates whether output sent screen exit exit fi see file pidfile exists see process running nt running least started dsmservrc e pidfile progpid cat pidfile running p ef grep prog grep w progpid grep v grep n running gstatus running else gstatus stopped remove pidfile stopped e pidfile rm pidfile echo prog instance instance stopped unable remove pidfile echo sure remove pidfile fi fi fi else gstatus stopped fi echo status prog instance instance gstatus fi case gstatus stopped running esac exit exit fi restart stop start case start start stop stop status status restartreload restart echo usage startstopstatusrestart exit esac exit diff original modified one root diff u echo invalid call status routine expected argument echo displaytoscreen indicates whether output sent screen exit exit exit fi see file pidfile exists see process running echo status prog instance instance gstatus fi case gstatus stopped running esac exit exit fi restart copy profile node root pwd home root home tar czf ssh tar c home xzf root cat root cat ibm tsm server start root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare online sys root hare state grep grep state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state offline root cat etcservices eof eof root hagrp freeze root hastatus sum system state system state frozen running running group state group system probed autodisabled state b nsrsite n offline b nsrsite n online b rmansite n offline b rmansite n online b n partial b n offline b vcssite n offline b vcssite n online group frozen group c resource disabled group type resource h application h diskgroup h ip h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h mount h nic root su c opttivolitsmserverbindsmserv dsmserv generated jun ibm tivoli storage manager version release level licensed material property ibm c copyright ibm corporation right reserved u government user restricted right use duplication disclosure restricted gsa adp schedule contract ibm corporation subsystem process id processing option file unable open message catalog language default language message catalog used using instance directory icc support module loaded server restartrecovery progress database manager successfully started database manager using port server connection server machine guid initialized activity log process started master encryption key generated server password set default label key data base tsm server selfsigned key nasndmp support module loaded tsm san discovery disabled option license manager started tcpip version driver ready connection client port unable load shared license file dsmregsl evaluation license ibm system storage archive manager expire evaluation license tivoli storage manager basic edition expire evaluation license tivoli storage manager extended edition expire server licensed support ibm system storage archive manager server licensed support tivoli storage manager basic edition server licensed support tivoli storage manager extended edition schedule manager started process expire inventory automatic started background pm inventory client file expiration started process inventory file expiration process processed minute inventory file expiration process completed processed node examined object deleting backup object archive object db backup volume recovery plan file object retried error encountered process expire inventory automatic running background completed completion state success pm server initialization complete tivoli storage manager distributed tivoli ready use tsm q admin administrator serverconsole issued command query admin administrator day since day since locked privilege class name last access password set admin system admincenter halt administrator serverconsole issued command halt stopping activity log server shutdown stopping database manager server shutdown server shutdown complete root hagrp unfreeze root hare state grep grep state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state online state offline root hare online sys ignore error first ibm tsm server startup ignore error ignore first ibm tsm server start ignore ignore instance profile defined ignore ignore explanation ignore ignore instance defined target machine registry ignore ignore user response ignore ignore specify existing instance name create required instance install ibm tsm server license screenshots process let register license ibm tsm tsm register license fileopttivolitsmserverbintsmeelic current license information new license information server licensed support tivoli storage manager basic edition server licensed support tivoli storage manager extended edition ibm tsm client configuration ibm tsm server node root cat opttivolitsmclientbabindsmopt eof servername eof root cat opttivolitsmclientbabindsmopt eof servername eof root cat opttivolitsmclientbabindsmsys eof servername commmethod tcpip tcpport tcpserveraddress localhost schedlogname opttivolitsmclientbabindsmschedlog errorlogname opttivolitsmclientbabindsmerrorlog schedlogretention errorlogretention eof root cat opttivolitsmclientbabindsmsys eof servername commmethod tcpip tcpport tcpserveraddress localhost schedlogname opttivolitsmclientbabindsmschedlog errorlogname opttivolitsmclientbabindsmerrorlog schedlogretention errorlogretention eof install lintape ibm tsm server root uname r root uname r sed root yum showduplicates list kerneldevel grep root yum install rpmbuild root rpm uvh preparing lintape starting lintape lintape loaded root rpm uvh preparing lintaped starting lintape lintaped loaded root etcinitdlintape start starting lintape lintaped already running abort root etcinitdlintape restart shutting lintape lintaped unloaded starting lintape library configuration quite unusual configuration ibm library drive logically partitioned two logical library drive dedicated dellemc networker drive dedicated ibm tsm server library shown changer tape drive backup system networker l tsm l networker networker tsm tsm root find devibm devibmspecial devibmtape use udev persistent configuration root udevadm info p udevadm info q path n grep serial attr serialnum root udevadm info p udevadm info q path n grep serial attr serialnum root udevadm info p udevadm info q path n grep serial attr serialnum root udevadm info p udevadm info q path n grep serial attr serialnum root udevadm info p udevadm info q path n grep serial attr serialnum root udevadm info p udevadm info q path n grep serial attr serialnum root cat procscsiibm lintape version lintape major number attached changer device number model sn hba scsi fo path na na lintape version lintape major number attached tape device number model sn hba scsi fo path na na na na root cat kernel ibmtape sysfs serialnum mode symlink kernel ibmtape sysfs serialnum mode symlink kernel ibmtape sysfs serialnum mode symlink kernel ibmtape sysfs serialnum mode symlink kernel ibmchanger attr serialnum mode symlink root etcinitdlintape stop shutting lintape lintaped unloaded root rmmod lintape root etcinitdlintape start starting lintape new persistent device root find devibm devibmspecial devibmtape let update path tape drive tsm query path fd source name source type server destination name destination type library library node name device external manager zos medium server comm method lun initiator directory online yes last update administrator admin last update datetime source name source type server destination name destination type drive library node name device external manager zos medium server comm method lun initiator directory online yes last update administrator serverconsole last update datetime source name source type server destination name destination type drive library node name device external manager zos medium server comm method lun initiator directory online yes last update administrator serverconsole last update datetime tsm update path srctypeserver desttypelibrary onlineno path updated tsm update path srctypeserver desttypelibrary path updated tsm update path srctypeserver desttypelibrary onlineyes path updated tsm update drive serialautodetect elementautodetect drive library updated tsm update drive onlineno drive library updated tsm update drive serialautodetect elementautodetect drive library updated tsm update drive onlineyes drive library updated tsm update drive serialautodetect elementautodetect drive library updated tsm update drive onlineyes drive library updated tsm update path srctypeserver autodetectyes desttypedrive path updated tsm update drive serialautodetect elementautodetect drive library updated tsm update path srctypeserver autodetectyes desttypedrive path updated tsm update path srctypeserver desttypedrive onlineyes path updated tsm update path srctypeserver desttypedrive onlineyes path updated let verify library work properly tsm audit library checklabelbarcode process number started tsm query proc process process description process status number audit library auditing volume inventory library tsm query act administrator admin issued command audit library checklabelbarcode session process audit library started background pm session process audit library operation library started process session process audit operation required library session process scsi library ready operation session process process audit library running background completed completion state success pm session process ibm tsm storage pool configuration ibm tsm container storage pool creation tsm define stgpool stgtypedirectory storage pool defined tsm define stgpooldirectory storage pool directory defined storage pool storage pool directory defined storage pool storage pool directory defined storage pool storage pool directory defined storage pool storage pool directory defined storage pool storage pool directory defined storage pool tsm q stgpooldirectory storage pool name directory access readwrite readwrite readwrite readwrite readwrite readwrite ibm tsm backup policy configuration example policy tsm def dom f policy domain f defined tsm def pol f f policy set f defined policy domain f tsm def mg f f management class defined policy domain f set f tsm def co f f standard typebackup backup copy group standard defined policy domain f set f management class tsm def mg f f management class defined policy domain f set f tsm def co f f standard typebackup backup copy group standard defined policy domain f set f management class tsm defmg f f default management class set policy domain f set f tsm act pol f f default management class policy set f f archive copygroup file archived default set activated wish proceed yes n default management class policy set f f archive copygroup file archived default set activated policy set f activated policy domain f hope amount instruction discouraged one best enterprise backup system ibm tsm ibm spectrum protect best high availability cluster veritas cluster server eof like like loading related
345,Lobsters,vcs,Git & VCS,Github removes jQuery from their front-end. No framework,https://twitter.com/mislav/status/1022058279000842240,github remove jquery frontend framework,,detected javascript disabled browser would like proceed legacy twitter yes
348,Lobsters,vcs,Git & VCS,Developer Perception to Microsoft’s Acquisition of GitHub,https://naist-se.github.io/study-of-microsofts-github-acquisition/,developer perception microsoft acquisition github,http githubcommicrosoft motivation distributed demographic perception github b perception acquisition c effect acquisition developer team,taken http githubcommicrosoft response developer belonging linux distribution berkeley software distribution ie bsd result provide insight developer think github acquisition microsoft hope dataset informs polarity perception effect acquisition occurred early june motivation designed survey collect unbiased opinion furthermore distributed survey community linux bsd developer preliminary result shown three part demographic perception github b perception acquisition c effect acquisition finally grateful developer took important time away help u survey solo effort please check team
350,Lobsters,vcs,Git & VCS,lazygit: A TUI application for managing git repos,https://github.com/jesseduffield/lazygit,lazygit tui application managing git repos,gocui table content sponsoring installation binary release homebrew macports ubuntu launchpad ppa void linux scoop window scoop arch linux http wikiarchlinuxorgindexphparchuserrepository fedora centos copr solus linux freebsd conda http anacondaorgcondaforgelazygit go usage keybindings changing directory exit undoredo doc configuration configuration doc custom pager doc tutorial cool feature resolving merge conflict interactive rebasing contributing contributing guide donate sponsoring work progress raise issue submit pr social twitter twitch alternative,simple terminal ui git command written go gocui library rant time heard git powerful good power everything damn hard interactive rebasing requires edit goddamn todo file editor kidding stage part file need use command line program step hunk hunk ca nt split contains code nt want stage edit arcane patch file hand kidding sometimes get asked stash change switching branch realise switch unstash nt even conflict would fine checkout branch directly got kidding mere mortal like tired hearing powerful git daily life powerful pain as lazygit might table content github sponsor matching donation dollarfordollar month feeling generous consider sponsoring installation binary release window mac o linux download binary release homebrew normally lazygit formula found homebrew core suggest tap formula get frequently updated one work linux tap brew install jesseduffieldlazygitlazygit core brew install lazygit macports latest version built github release tap sudo port install lazygit ubuntu package ubuntu available via launchpad ppa sudo addaptrepository ppa lazygitteamrelease sudo aptget update sudo aptget install lazygit void linux package void linux available distro repo follow upstream latest release sudo xbpsinstall lazygit scoop window install lazygit using scoop extra bucket add extra bucket scoop bucket add extra install lazygit scoop install lazygit arch linux package arch linux available via aur arch user repository two package stable one built latest release git version build recent commit instruction install aur content found http wikiarchlinuxorgindexphparchuserrepository fedora centos package fedora centos available via copr cool package repo sudo dnf copr enable atimlazygit sudo dnf install lazygit solus linux sudo eopkg install lazygit freebsd conda released version available different platform see http anacondaorgcondaforgelazygit conda install c condaforge lazygit go go get githubcomjesseduffieldlazygit please note get error claiming lazygit found defined may need add gobin path macoslinux home gobin window mistaked c gobin go binary apps like lazygit usage call lazygit terminal inside git repository want also add alias echo alias lglazygit zshrc whichever rc file using keybindings check list keybindings changing directory exit change repos lazygit want shell change directory repo exiting lazygit add zshrc rc file lg export lazygitnewdirfilelazygitnewdir lazygit f lazygitnewdirfile cd cat lazygitnewdirfile rm f lazygitnewdirfile devnull fi source zshrc call lg exit switch directory whatever inside lazyigt override behaviour exit using shiftq rather q undoredo see doc configuration check configuration doc custom pager see doc tutorial cool feature adding file easily resolving merge conflict easily check recent branch scroll logsdiffs branchescommitsstash quick pushingpulling squash rename commits resolving merge conflict interactive rebasing contributing love input please check contributing guide contributor discussion thing better discussed repo join slack channel donate would like support development lazygit consider sponsoring github matching donation dollarfordollar month work progress still work progress still bug iron first project go code could doubt use increase quality improving whenever find time feedback feel free raise issuesubmit pr social want see jesse term development follow twitter watch program twitch alternative find lazygit nt quite satisfy requirement may better fit
351,Lobsters,vcs,Git & VCS,Libgit2 joining Software Freedom Conservancy,https://github.com/libgit2/discussions/issues/9,joining software freedom conservancy,,add signatory tyler angwanek carlos martín nieto etienne samson patrick steinhardt edward thomson decided
352,Lobsters,vcs,Git & VCS,Githooks: auto-install client-side hooks checked into Git repositories,https://blog.viktoradam.net/2018/07/26/githooks-auto-install-hooks/,githooks autoinstall clientside hook checked git repository,githooks setup pain git hook previous work githooks icefoxgithooks githooksgithooks community hook githooks installation shell script supported hook trigger organize ignored layout option shared hook repository http mitm installation example waste conclusion github repo,git hook great way execute custom action triggered various git event local machine opinion shortcoming around installation reusability trying address githooks projectlet start discussing issue around setup potential solution finally example found usefulsetup painsgit hook normally live inside githooks folder local repository contain one executable per trigger event like precommit postcheckout run various git command automatically sound magical problem git folder excluded version control life machine get hook place either copy executable file trigger name githooks folder symlink one latter good practice want put hook file inside repository least version history people working project install easily experience anything optionally often ignored sort thingsthe next problem fact one file per event want execute multiple action single trigger could write longer bash script code language compile single static binary split multiple file make main entrypoint execute additional functionality living split file last one probably make symlinking working path much easier completely doable see laterthe last point reusability setup process hook done manually need get hook script copy symlink repository want applied easy miss step also want setup move switch workstation without perhaps setup ceremony described project might also want hook executed project type example updating python node dependency update running go fmt commit etc outofthebox setup copy set hook project independentlydon get wrong love concept git hook way work pretty nice think make bit easier thoughprevious workmy githooks project first one trying make sense workflow pretty popular one icefoxgithooks judging number star written bash support single repository global setup inrepo external location actual hook come handy helper script also look massively maintained recently though maybe feature alreadythe githooksgithooks project build previous one additional feature written go allows code functionality robust test still compiling single binary add concept community hook bit extra configuration specify external repository hold shared hook execute beside inrepository one also provides selfupdate capability better performance theory concern also received update might reflect whether still maintained notboth project look pretty promising encourage check github repository might looking like know alternative keep reading githooksthe two project solve problem wanted tackle decided create implementation specific usecases wanted support ymmv might also find useful simple setup step need execute move new machine someone new join team get hook repository activatedi chose shell implement le functionality work various version like sh ash bash etc assumes git available executable path plus installation requires either curl wget manually downloading installation script make work system without bash available like alpine linux also architecture like raspberry pi arm serveras mentioned installation done executing shell script try find git template directory offer set one shell script installed every supported hook trigger hook template folder copied new repository automatically git init git clone mean run installation future project work contain githookscompatible hooksthis compatibility simply mean githooks folder root project organize individual hook folder multiple script trigger event executed unless ignored maybe want add readme file folder want interpret shell script also single file instead directory additional benefit check version control rest project see available layout option github repo individual hook file executable case directly executed otherwise passed argument sh shell along original command line argument coming git particular hooksimilarly second project mentioned mine also support shared hook repository normally would check hook repository use valid use case exact slightly generalized hook useful multiple project within team organization avoid duplication organize git repo use every local project githooks set could write hook example update python nodejs dependency requirementstxt packagejson file updated remote execute precommit step maven go project run standard test like mvn verify go test etc shared hook synchronized local filesystem well updated whenever postmerge hook firing typically git pull reposif sound like something want give try use single line install command set sh c curl fssl http rviktoradamnetgithooks note could skip http want shorter command feeling adventurous http mitm concern plus use direct github link well trust redirect pointing see installation section readme available option bit detailed explanation whenever update githooks project rerun install script get change applied locally also script uninstall executor hook ever want get rid would right exampleswe started using githooks team work came hook make sense application idea behind useful type projectsto biggest advantage using clientside git hook earlier feedback change reduce waste avoiding repeated codestyle mismatch comment pull request need shared linter executed precommit similarly execute unit test project commit would see breaking locally rather learning minute later ci system notifies mixed language project multiple hook script work pretty nicely individual check java codestyle javascript codestyle separate file xml validation configuration file plus another one executing unit testswe also enforce valid commit message formatting clientside commitmsg hook done good serverside hook refuse git push commits accepted format problem commits push one first one message wrong trivial change easily end extra merge commits repeated git reset horror validation clientside simply break commit try valid message much easierthere also prepush hook merges recent change master branch feature branch pushed make sure ci system executes longer integration test code uptodate recent change apart one current branch integration problem flagged earlier branch merged back masterwe also get hook alter commit message include common suffix use set serverside hook refuse change message error message refused git push tell people set hook project enforces common shared setup make sure check executed every workstation team member useyou find example project well conclusioni love hear idea feedback think make sense done clientside hook suggestion people could commonly use either work opensource collaborative project giving go let know go please file issue find project github repo thank
353,Lobsters,vcs,Git & VCS,"GitHub vs mailing lists, from another prespective",https://asylum.madhouse-project.org/blog/2018/07/24/on-git-github-and-email/,github v mailing list another prespective,mailing list v github critique allow maintainer upstream repo octobox fetch pull request exception next,day made mistake getting involved kind flamewar revolved around github versus emaildriven workflow safely inferred subscribe emaildriven workflow idea seem fundamental disagreement think worth shot show side thingsin first part reflect article titled mailing list v github titled mailing list v github web ui digress let cut chase critique code change proposed making another githubhosted project fork modifying remote branch using gui open pull request branch original bit simplification completely ignores fact github api gitlab similar offering work github use feature without ever open browser ok maybe create oauth token email subthreads allow specialized discussion different aspect section code linear githubstyle discussion would mix conversation fan deep thread something many subthreads thread go deep indicates deeper problem patch may need split discussed even redesigned first certain level discussion useful split longer subthreads becomes way easy loose sight whole picturegithub flat discussion discourages find beneficial time time nt happens rarely enough live github comment continually change become outdated disappear attached line changed commits vanish forcepush pull request branch email thread contrast original message proposed change remain comparison later message patch mailing list force push start new thread subthread best new version patchset history similarly hard use link new patchset older discussion comparsion done manually applies github nt see much difference hereif send updated patch pushing new commits github appear clearly still keep older comment available may get marked outdated consider good thing nt want see typically irrelevant alreadyaddressed comment default still look want mind furthermore patch multiple author mix github pull request except number way accomplish allow maintainer upstream repo edit pull request also give permission collaborate repo push branch latter give bit wider access one might wish option furthermore others open pull request branch used open merge commits added pullrequest openedthis last one fit github pullrequest model best comfortable working github complex work way email instead applying patchsets merge pr supported integration difference complexity none pull requester must turn comment commits branch want incorporate suggested change commenter send pullrequest branch pr question opened discussion discus change much like subthread mailing list even link two together navigate two another nice effect people carry patch finish line original author stop caring involved github original proposer go mia anyone take pull request update push forward like mailing list difference start new pull request unreasonable lot time pas original request someone else taking mantle case good idea start new thread instead resurrecting ancient one patch format indeed case email based workflow flexible yet matter either case apply patch create diffs whatever format much context wish see part whole thing context github email ever since started working patch mighty convenientuse tool need want limited github ui limited mua either tool outside tool integrate use themdo nt treat patch discrete item apply look whole give context need whatever format desire found powerful workflow one also easier work patch tree easier navigate way use tool understand code jump definition lot harder view diff apply code formatting use refactoring tool better understand code undo desired edit change code review work code way normally using help ide give patchdiscussion mix link issue pull request github ides good integration allow easy navigation akin navigating email thread project separate bug report development list suffer issue github issuepull request splitthis inherent advantage mailing list advantage separating two web apps deliver centrallycontrolled user interface native application allow person customize experience github api plenty ide integration customize userexperience much emaildriven workflow limited github ui open protocol like smtp encourage proliferation client kind github client added functionality set feature like email client wide selection choose mail client provide way mark message important set back unread build something like top github api believe octobox doingagain limited github ui people script mail client apply patch keyboard shortcut others go minimalist still others even use webmail person different software nature mailing list allows work together nothing stopping anyone github example use emacs magit work github never leaving ide others collaborate use github ui others use vim tool clue others use visual code studio atom github desktop case email work project another area control ability search interact mailing list offline github limitation bit preparation similar limit apply working mailing list offline github requires connectivity review issue pull request fetch pull request want review going offlineyou also use api cache issue schedule updatesa lot people nt sync mail locally either preparation going offline also set automatic pr syncing tooagain limited github ui offer use additional tool way using emaildriven workflow nt limited mua offer native email client review email attachment offline even send reply message offline client queue internet access becomes available assumes one synced email locally many people use imap similar protocol typically nt sync offline use often conscious decision decide also pull pr issue first existing tool aid tool work together rather gui locked browser github api granted rfc mercy github continue providing often mercy email provider twist history user git chose centralized host granting free license open source project requiring project store metadata company server except provide api look additional metadata build custom integration top ityou host issue elsewhere even use github mirror need host metadata want use feature github provides way required thatyou even opt accept github issue pull request mailing list nothing stopping github legally delete project user without cause whoever hosting mailing list archive mail unheard author download source release tarball make change copy capture diff email project using github send email one maintainer mercy recipient deal patch appropriately situation use cvsmercurialetc send bare patch still little work fit workflowbut github prevent accepting email sending applying patch cut busywork like cleaning remote branch merge creating local branch forked repo preparation pull request easily automated away besides longterm contributor creating local branch good idea anyway github comparison remember teaching group new programmer use github conscious time weird step asked comparsion wife garden engineer techsavvy person wanted contribute little hacktoberfest found edit file button ui went weird step edit file submit change doneshe never able send patch email also le busywork finished communication thing clean like abandoned pull request merged branch issue mark closed reply stop thread rather see explicit marker issue resolved pr merged hey nt like dig information random email thread discoverability important pgp provides guarantee identity verified decentralized web trust sign commits tag using github ca nt sign comment last checked respond email signed might look bit weird ui hey perhaps article start developer path rediscovering care engineering went classic email client muas called perhaps people rather deal email purposebuilt tool aid better mua tool built around workflow wouldexceptionsthere certainly project github model nt work linux kernel one particularly great example work one project may best choice another assert project linux kernel nt anywhere near level modeling workflow something vastly different need may best course actionnext upin next installment series explain workflow comparison example allegedly seasoned engineer sort us tool hand workflow power user one prefers working apis instead email may include little bit historyafter look post campaign emaildriven workflow see take u
354,Lobsters,vcs,Git & VCS,Git is already federated & decentralized,https://drewdevault.com/2018/07/23/Git-is-already-distributed.html,git already federated decentralized,gitpub previous article srht git sendemail mailman publicinbox patchwork mutt wrote guide debbugs,always murmur replacing github something decentralized wake microsoft acquisition murmur become conversation particular blog post direct response forgenet formerly known gitpub want federate decentralize git using activitypub technology leveraged mastodon peertube get git already federated decentralized already spoke length large minority git community us email collaboration previous article subject definitely give read already article want focus comparing model possibility afforded activitypub provide direction new forge project work towards embracing improving git emailbased collaboration tool main issue using activitypub decentralized git forge boil email simply better choice advantage email numerous already standardized countless open source implementation many standard library almost every programming language decentralized federated already integrated git since day one think replace web forge email client instead web forge embrace email communicate let give example could play platform srht user view git repository web duh one goal add ui feature let select range commits prepare patchset submission via git sendemail enter email address address send patch e send along behalf email address might mailing list another srht instance wild email get recognized patch displayed web pretty diff code review tool inline comment automatically get formatted email response show user inbox srht get copied showing web think workflow look awful lot like workflow forgenet hope realize get good though email user put linuxkernel vgerkernelorg handful kernel maintainer git forge suddenly used contribute linux kernel activitypub would build second incompatible federation project ignoring already productive federation power many important open source project git email already supported tremendous amount open source software tool like mailman provide mailing list public archive publicinbox archive email git patchwork facilitating code review email email client grown feature make suitable git mutt nut bolt hundred important project including linux bsd gcc clang postgresql mariadb emacs vim ffmpeg linux distribution like debian fedora arch alpine countless project including git project incredibly important foundational project upon open source empire built tool use already provide open federated protocol u talk email better also easier implement programming tool email mature recently started experimenting building activitypub service crazy difficult write whole lot boilerplate understand new stillevolving specification mention setting publicfacing server domain http test federation implementation email comparatively easy built standard library shell git feed patch nearest smtp library handful line code bet every single person read article already email address setup time approach zero email also put power hand user right away mastodon occasional problem instance owner tearing instance short notice taking user data everything conducted email instead data already life user inbox freely available tool take mail spool publish new archive service go mail archive trivially made redundant across many service stuff seriously resilient failure email designed network measured bit per second often connected single unreliable route suggesting approach project use collaboration perfect suggesting embrace solve problem instead throwing baby bathwater tool like git sendemail confusing first build tool like web forge smooth process novice write better doc introduce people tool recently wrote guide srht user additionally many popular email client bastardized email point way use gitemail many people start abandoning email client used using also solved forge send email process reply also support open source mail client building better tool integrate email setting mail server end difficult invest better mail server software something would definitely valuable even setting aside matter project forge need figure something bug well perhaps based debian work debbugs area development continuous integration find le difficult problem many build service already support sending build result email need find way get patch something working srht take problem one step time let focus improving patch workflow git endorses solution shake best solution problem become apparent
355,Lobsters,vcs,Git & VCS,Git Aliases & Shell,https://bridge.grumpy-troll.org/2018/07/git-aliases-shell/,git alias shell,git alias shell clarity avoid cleverness inside configuration file documentation shell sidedigression per specification actually happens git configuration parsing already handled mean u credential helper http docsawsamazoncomcodecommitlatestuserguidesettinguphttpsunixeshtml conclusion,git alias shell july today took look one particular git repository configuration saw something slightly configuration credential helper dating old experiment awsâ codecommit decided dig deeper figure actual rule shell command inside git configuration file sidediversion took bit longer expected sunday ah well seen much cargoculted incorrect information online time figure accurate answer see leaning toothpick syndrome markedly increasing count backslashes little suspicion warranted fairness confused including today git logic try implement magic right fixups level beneath gittrace reporting pretty hidden either read source use strace style tool make simple case right even wrong make fancier case obtuse decided focus looking alias rule handled correct assumption mechanism involved clarity avoid cleverness inside configuration file step stated matter complexity really moved gitconfig separate helper script start worry string parsed handled situation correct response back away slowly breaking eyecontact create short script handle thing instead notwithstanding correctness sometimes need know tame beast git config documentation let start reading actual documentation found gitconfig alias command alias git command wrapper eg defining aliaslast catfile commit head invocation git last equivalent git catfile commit head avoid confusion trouble script usage alias hide existing git command ignored argument split space usual shell quoting escaping supported quote pair backslash used quote alias expansion prefixed exclamation point treated shell command example defining aliasnew gitk orighead invocation git new equivalent running shell command gitk orighead note shell command executed toplevel directory repository may necessarily current directory gitprefix set returned running git revparse original current directory see gitrevparse decent start thing go wrong mysteriously try something nontrivial simple forloop appears fail stage also following escape sequence beside recognized n newline character nl horizontal tabulation ht tab b backspace b char escape sequence including octal escape sequence invalid shell sidedigression something become important quirky corner posix shell handling despite posix giving u convention terminate option processing treat following parameter nonoption entry invoke shâ câ fooâ â using terminate option instead per specification c handling first nonoption parameter string providing input parsed shell command foo next parameter provides name command argv passthrough thus shâ câ fooâ â invoke shell equal parse handle foo first nonoption string examined see might option permutation thus sh c foo bar u risk u telling shell treat unset variable reference error instead foo invoked context argv bar u actually happens git git config parser shellorother invocation two layer worry config parser us comment marker unquoted terminate thing given sublist terminator shell syntax little unfortunate shell necessarily used alias treated shell command careful documentation wording treated shell mean shell used merely shell command handled git often resort using shell commitment git par configuration file handling basic stripping comment handling n substitution quoting alias mechanism come play git split string separate field invoking command without needing go near shell aliasc splitcmdline function handle splitting whitespace splitting within quoted string handle single doublequotes doublequotes supporting backslash escape purely avoiding breaking quoted state escape supported configuration parsing already handled alias foo barnbaz value stored alias foo instead quote handling splitcmdline quote inside original quote let u write alias foo printf sn first sec ond third invoke gittracetrue git foo trace exec gitfoo trace runcommand gitfoo trace runcommand printf sn first sec ond third first sec ond third note used avoid git config parser handle n strace show u strace ff git foo pid execve binsh binsh c printf sn first sec ond th printf sn first sec ond th var unfinished strace ff sh c printf sn first sec ond third execve binsh sh c printf sn first sec ond third var sequence n simply strace showing n twocharacter sequence string passed returning git codebase without exclamation mark splitcmdline used result put current process argv vector initial git argument processing effectively restarts letting git decide done without exclamation mark done quick clean simple everything assumes entry start exclamation mark exclamation mark mean really entry subcommand found gitc handlealias invocation runcommand struct useshell set entire string alias value passed single string whitespace handling splitcmdline apply useshell set still nt mean shell used mean runcommandc prepareshellcmd used construct shell command might mean shell used prepareshellcmd look see value command might single word without special character special character backtick â tn since whitespace list character simply two word enough trigger invoking shell shell invoked exact form invoked depends upon whether invoker command provided parameter commandline case shell invoked least four parameter argv first two sh c third string configuration parameter supplied git invoker parameter provided instead third parameter shell modified adding five character end five space quotation mark dollar sign commercial quotation mark git try clever assumes want argument available end whatever string given work simple command text try handle argument hindrance worked around fourth alwayspresent parameter shell text alias definition repeated name shell element new shell argv passed invoker git mean u handling autoinserted simple enough know need handled simply end alias definition shell comment character octothorpe unicode number sign correct alias definition gitconfig alias wibble set xnecho nfor x echo x done wobble x echo x done git configuration file parsing resulted list alias containing entry wibble one wobble stored string set x echo x echo x done without first two line invoke git wibble git wibble echo git wibble foo bar baz echo x echo foo foo x echo bar baz bar baz two invocation using git wobble instead make little condensed easier scan would resulted argv array processed using singlequotes string avoid introducing backslashes first sh c x echo x done x echo x done ignored shell null second sh c x echo x done x echo x done ignored shell foo bar baz null credential helper aws documentation currently http docsawsamazoncomcodecommitlatestuserguidesettinguphttpsunixeshtml run git config global credentialhelper aws codecommit credentialhelper used codecommit setting confirm believe wrong mechanism play git invokes command except without exclamation mark given complete path command tried foo git credentialfoo end git invoking sh c aws codecommit credentialhelper aws codecommit credentialhelper ignored shell get shell invoking aws codecommit credentialhelper get get clearly aws codecommit credentialhelper ignoring extraneous parameter relying upon available subcommands get store erase none contain whitespace degenerating harmless conclusion easier expected arbitrary shell git alias need know undocumented implicit sometimesadded still nt mean grumpy troll category git shell internals aws
356,Lobsters,vcs,Git & VCS,Mercurial Absorb,https://youtu.be/gOVD-DrUpwQ?t=18m44s,mercurial absorb,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scaling mercurial facebook insight side git merge youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature scaling mercurial facebook insight side git merge youtube
358,Lobsters,vcs,Git & VCS,pkgsrcCon 2018 in Berlin - Videos,https://pkgsrc.org/pkgsrcCon/2018/talks.html,pkgsrccon berlin video,pkgsrc,pkgsrccon annual technical conference people working pkgsrc framework building open source software package pkgsrc native package manager netbsd smartos minix portable across many different operating system including linux mac o x developer contributor user welcome attend
359,Lobsters,vcs,Git & VCS,Distributed version control is not my favourite technology,http://ansuz.sooke.bc.ca/entry/230,distributed version control favourite technology,home sopapipa protest disappointme mskala programming software distributed version control suck distributing software tsukurimashou gaslamp distributed version control suck distributed development distributed version control suck longlived project cadt model distributed version control suck archiving publication page although issue could mitigated theory done practice facebook facebook twitter reddit reddit linkedin linkedin,â home sopapipa protest disappointme â wed jan mskala tag used programming software long ago free software project peripherally involved decided time replace old broken version control system something new broken lead maintainer conducted straw poll new system suggestion anything long distributed shouted chorus anything long distributed lost argument forum going post thought distributed version control suck space harder shouted go like say tell distributed version control suck time general suck certain specific use case outline specific use case happen occur frequently like linux use linux lot result hold fondness toward linus torvalds going ignore deficiency git baby use svn tell svn perfect always better git either nt even git versus svn distributed versus nondistributed version control however since git svn popular example distributed nondistributed version control specific issue highly relevant large number user distributed version control suck distributing software nearly user version control nondevelopers easy lose sight fact choosing version control system version control system chosen developer naturally think need first version control system also developed developer naturally think developer need first think version control system developer think use case think developer use case particular think readwrite kind operation like checking patch splitting merging branch people choose develop version control system generally think following use case joe joe reasonably smart took class called computer science high school result basically know compiler able invoke one given reasonably wellbehaved source tree dual booting linux window several month day find ever bother window playing world warcraft nt even hold interest much anymore thinking reformatting partition joe never written modified program line life nt particularly likely start today want use frobozz opensource software package current distributed binary conflict library system last source tarball three year old joe motive ability compile latest development version frobozz joe developer going happen world work day joe going told ought check copy frobozz version control version control system used important function getting frobozz hand nondeveloper version control replaces done tarballs transferred http let alone ftp longer project remains version control greater tendency developer use version control system replacement file release face choice boring packaging work push new distribution continuing fun part development never push distribution distribution version control system side effect normal development activity developer would anyway way user always get latest version easily without wait release glance look like huge win party many successful software package encourage nondevelopers get copy version control system rather channel linux kernel especially kernelorg fell stayed remains recommended way mplayer notably linux video player actually work naive user perspective others nt play window codecs two example widely used nondevelopers nonetheless want remain uptodate recent version listed many including several essential kde dependency earlier version article boring list hope reader agree without list frequently need get thing version control even nt developer package question software package become bigger successful ratio nondeveloper user developer tends grow something like tsukurimashou one developer sure user linux kernel thousand developer million user mean large popular project people checking copy effectively readonly used substitute tarball vastly outnumber people check copy participate development actual use version control system distribution development joe first obstacle joe frobozz developer chosen distributed version control system git distributed version control distributed joe need clone check whatever want call central server central server unfortunate accident definition distributed version control central server joe must find repository among potentially many equal status confusion vining oversight named nicholas vining gaslamp long rich famous sure whether want remember business usually like getting shoutouts likely frobozz developer using git likely using github love name github six letter one shortest bizarre nonsensical selfcontradictions ever seen step back think brilliant existence let alone popularity thing called github actually lady gentleman give github git hub hub git hub git fooling purpose github provide distinguished central nexus system whose main intentional noteworthy design feature supposed lack distinguished central nexus basic function github deny foundation git stand reminded establishment named vegetarian fast food restaurant existed town used work served meat halfwayreasonable justification many customer wanted meat managed stay business clear marketing strategy best one possible advertise definition something compromise drastic way order accommodate customer population nt want customer business establishment offer looking one advertises providing want main definition since know large majority user namely nondevelopers need use version control system centralized way namely get updated version think twice whether centralized positive definition want version control system nonetheless developer keep putting distributed shopping list desired feature rather purported benefit go looking version control system keep choosing git second obstacle joe download store entire history version frobozz get copy latest one cloning repository mean data use wanted latest version download store version ever existed told feature feature useful developer want look back past history even rarely every user well central server pretend nt exist forced pay checkout frequent operation performed feature useful rarely small minority participant whose proportional involvement shrink project grows maybe causing waste occur positive design priority third obstacle joe many distributed version control system choose maybe frobozz nt using git joe go download mercurial python make mercurial work two extra software package install much bigger frobozz download frobozz even get start frobozz dependency think joe already mercurial frobozz turn require bazaar think joe already python frobozz turn require darcs thereby haskell end game profusion required client software course issue version control system used distributing software user distributed version control system profusion language problem software general distributed entirely unrelated issue distributed version control system suck much nondistributed version control system incentive developer think right create new one developer think distributed version control cool going want mix technology think cool favourite bizarre language nt ask idea prologbased version control system user general end suffer coolness download damn source code enduser package wanted compile distributed version control suck distributed development might able wave hand issue distributed version control unsuitability distributing software nondevelopers claiming version control ignores observed fact people use version control preferred mean conveying update nondevelopers whether amount hurt turn suck applied purpose maybe egotistical enough claim everybody else fault harder issue ignore distributed version control also suck rare important case distributed software development software development one two computer depending stuff employer mostly done desktop machine office stuff project mostly done desktop machine apartment nature work academic research amount overlap two general category also laptop computer carry around sometimes development work checkedout working copy repository serve home office desktop machine sometimes update made one place code merged even though one end coordinate work something like way team one developer might laptop nt always reliable network connection especially travel sound like might claimed ideal chance use distributed version control well described distributed development keeping important archival information laptop bad idea might drop could lost stolen rule copy anything important nt live laptop obviously copy version control repository must live laptop big issue distributed version control multiple repository repository elsewhere laptop make sure synchronized reasonably frequently also ca nt keep valuable confidential information laptop indefinitely whenever enter usa work sometimes requires u custom border protection claim legal authority image laptop hard drive force give necessary decryption key read tell going data reason result employer policy must securely delete lot work material machine carry usa similar agency country including canada known make similar claim responsible clean system crossing international border either direction nondistributed version control system drive must clean crossing international border constraint mean crossing border check local revision delete working copy local revision nt ready go head create new branch practice seldom big deal protection might drop laptop mean revision seldom remain drive without checkin central repository couple hour anyway crossing border whenever next want work laptop must restore necessary local information mean checking head branch downloading one revision may crummy hotel internet connection ability work without good internet connection claimed advantage distributed version control might hope distributed version control would shine case crossing border merge local revision repository elsewhere may work nondistributed system simply distributed system may likely encourage keep complicated structure branched head local repository laptop really nt reason probably treat merge equivalent checkin securely destroy local repository difference problem show sitting hotel room need recreate local repository poor connection downloading one revision want work downloading every revision ever true recreated local repository net lot repository metawork branching merging locally would require net connection nondistributed version control system repository metawork rare especially working laptop longdistance remote common case designing big imposition repository metawork network connection even though maintainer important us entire history development reason repository nt really want maintain laptop limited drive space entire history development le useful laptop elsewhere wiped recreated much often local copy desktop machine wipeout recreate step disproportionately expensive laptop limited resource often need use poor internet connection want lightweight working copy laptop current distributed version control system git particular offer lightweight working copy clone entire repository distributed version control suck longlived project griped distributed version control system wasteful space claim could test easily check clone two comparable project one distributed one nondistributed version control system end git svn almost certainly probably find svn working copy bigger git cloned repository nt know talking go home right well maybe fact svn store two full uncompressed copy latest revision check working copy working copy another entire copy think svn call text base basically exists svn diff offline obviously suboptimal user like joe never svn diff git win evidently svn suck nt mean git good comparison hide important issue computer science namely shape growth curve successful software project grow finite amount time maintained potentially forever growth phase change put repository consist adding new code little code deleted result code current version large fraction code ever version new information version much uncompressed copy current version good delta compression followed generalpurpose compression probably beaten svn despite storing many version true growth phase nt like phrase cadt model longtime youth right advocate nt want insult teenager matter need insult sufferer attention deficit disorder either remains however problem exists know many developer think project ever growth phase finished need maintained deadbeat developer able walk away go something fun taking responsibility created remains people wrong u serious write code last need think happens maintenance maintenance developer adding new code also deleting old code result size current version nt grow nt grow much total amount code ever existed continues grow every checkin history continues grow single version nt may smooth progression rather sudden state change time becomes case history grows faster current version system force every copy contain history eventually inevitably bigger copy system store current version svn copy initial growth phase larger constant git copy continue grow time even maintenance svn copy stop growing different asymptotics project survives long enough git copy inevitably dwarf svn copy overhead time space payable every new user inevitably become excessive nt really seen happen large popular package run git yet git nt existed long enough note linux kernel git control little quarter history much code still shiny new distributed version control system nt deployed public large scale long enough either inevitable grind upgrading mean project quite likely replace version control system forget history making trouble archival use every year anyway maybe shield ever facing issue checkout necessarily become big slow someday project stay system long enough fundamental design flaw think twice counting well probably switch something else bite u anyway distributed version control suck archiving fundamental concept academic work permanent archival record publish paper something turn wrong nt get go back change one reason others may already cited material allowed break link another take responsibility mistake maybe publish something new saying sorry earlier paper incorrect nt get cause earlier publication happened first blush sound like natural fit version control system closely related concept one authoritative real official published version anything official record may mirrored across multiple library reliability keep individual repository honest one official record distributed sense multiple different equally valid version truth one correct official academic record academic academic publisher care lot version anything official version maintaining integrity official version big part academic publisher supposed earn huge amount money paid go look publication page note full notice contractually required include specifying extent different file link official original version thing pretty often download preprint site good better real official version paper real official version get real official version go paywall either institution put startling amount money privilege argue whether academic world work way many people think nt remains however position cause world operate way live within world even may hope change practical consequence really useful keep track version academic work official one mean least tagging version control fine version control system offer tagging also mean keeping longterm record others may want refer material created many year earlier context career cited work published ten year old near start academic career also cited work others hundred year old computer science nt much relevant centuryold work friend work field rhetoric one oldest academic discipline cite publication thousand year old scientific work requires keeping archive thing nt software know much work result latex document may may qualify software written turingcomplete language anyway may may appropriate subject version control involve collaborative editing merging change made multiple author history revision sure look like something would nice version control like conventional software code working project also includes conventional software would nice latex document version control software data file often large volume paper like able check gigabyte two supporting data right alongside c prolog code process latex source paper describing taught course last summer wanted check audio recording lecture version control next latex source slide teach course want check new slide revision last summer slide even though tagged actually presented last year version remains sacrosanct like keep archive least retire ideally able pas useful form intellectual successor fine basically extreme case exactly version control meant problem come want write next paper going use repository distributed version control system forced download gigabyte data every clone working copy okay inflict collaborator might want access repository hand start new repository move old one really separate archive lose ability link old work easy historypreserving way ideally one really big official repository containing history work official version would heavily fortified backed given project working subdirectory within big repository would remain possible lightweight copy retaining history anything archive new subdirectory would nice could distributed sense like crosslink people may similar repository would still need way knowing one real one one mirror client authoritative official copy necessity would nice could give people partial access repository collaboration purpose allowed read write directory read directory see directory version git support sparse checkout part repository downloading entire repository showing part thanks guy svn better much better partial checkout nicely finegrained access control cumbersome bugprone extra stuff bolted top natively use case extent inherently distributed would seem kind distributed version control might actually good git nt know one would much better currently using svn despite suboptimality many colleague using dropbox although issue could mitigated theory done practice fact git store entire history everything repository every cloned repository relevant issue git default configuration abstract concept distributed version control general though others even git installation reason distributed version control system even git must used way system could distributed without requiring history reproduced everywhere git depth option cloning tell clone last version instead entire history joe using git fetch would tarballs frobozz developer longer bother use depth avoid downloading storing history nt care nt joe use depth joe nt use depth default joe going use default people like author frobozz recommended web page type command get copy latest version section frobozz web site nondeveloper user look make mention depth frobozz hosted sourceforge mention depth chunk text happens sourceforgeglobal written frobozz developer joe going stuck cloning entire repository get latest version nt know better even happens read gitclone man page carefully remember interested frobozz git joe notice depth described man page deprecating way text consists warning thing ca nt use likely dissuade user even really intention attempting thing could imagine distributed version control system could designed could allow firstclass participation repository depth equivalent effect git system git nt designed overwhelming majority user git designed linus torvalds many problem associated using version control system distributed distribution software user could solved automatic tarred snapshot current version version control system either generated regularly schedule onthefly github provides project hosting system joe nt really need git client download snapshot web browser back depending centralized addon service provide necessary feature deliberately omitted version control system though dislike term could called design smell know need support centralized model use spending effort trying make system distributed also interesting kind snapshot rarely ever recommended nondeveloper user preferred mean obtaining latest software instead joe told check version control suck inappropriateness use case elaboration idea probably closest thing right answer joe would support make distcheck target makefiles periodic automated build instance nightly build distribution tarball latest version version control really want get fancy like link made round recently build machine automatically launch nerf missile cubicle whoever broke build nightly build might desirable engineering reason anyway common practice commercial software shop tarball real constantly uptodate distribution snapshot development tree conveyed user usual technique broken downside approach involves fair bit setup maintenance work human server could argued like version control snapshot automaticallygenerated tarballs another example bolting extra box compensate deficiency version control system say maybe instead case building separate system separate task nt part version control nt know right answer academic archiving svnbased archive lot better dropbox nonsolutions colleague using nt really solve problem mentioned git implementation sparse checkout risible easy imagine distributed system could designed would properly hesitate suggest anyone write new code academic archiving back profusion incompatible solution see existing distributed version control may possible solve problem extra stuff bolted onto git instance succession small repository external reference something lightweight possible managing archiving old one moment classify academic archiving open problem someone wanted defend git distributed system might say nt force enable wide variety development model including centralized partially centralized model better ability choose appropriate model application hand absolute centralization shoved throat indeed git documentation make exactly claim git ideal embodiment might better called flexible version control system distributed version control system nonetheless assumption built modern version control system way used assumption actively conflict way people actually use thinking system organization actually deployed le one think might technically ideologically cool share facebook facebook twitter reddit reddit linkedin linkedin
360,Lobsters,vcs,Git & VCS,git bundle,https://dev.to/gabeguz/git-bundle-2l5o,git bundle,http gitscmcomdocsgitbundle,interesting problem work day hired external contractor build android app u needed get code private github problem could nt quickly get access repo since fair amount process involved getting approval also nt enough seat add contributor github account stuck asking send zip file code instead came back git bundle file never heard though using git long time git bundle file essentially full repository single file branch history tag basically everything expect repository contained single file make sharing repository moving full repository pretty straightforward assume git project called myproj want send someone else cd myproj git bundle create repobundle master make bundle file repobundle contains history master branch send file friend clone like remote git origin git clone b master repobundle myproj cd myproj git status branch master branch date originmaster nothing commit working tree clean another pretty neat thing git bundle need update one send incremental file update latest change recipient put place existing bundle run git pull win repo nt something use every day certain situation like getting git repo one place another wout able share remote origin work great info git bundle http gitscmcomdocsgitbundle
361,Lobsters,vcs,Git & VCS,Version Control Before Git with CVS,https://twobithistory.org/2018/07/07/cvs.html,version control git cv,paper correction getting started cv project homepage checking code making change merging thanks commit history talk complex tool twobithistory r feed correction,github launched software engineering career like mine older github git may version control software ever used people sometimes grouse steep learning curve unintuitive interface git become everyone goto version control stack overflow developer survey respondent used git almost twice many used secondmostpopular version control system subversion stack overflow stopped asking developer version control system use perhaps git become popular question uninteresting git much older github linus torvalds released first version git though today younger developer might hard time conceiving world term version control software le mean git world existed long ago lot alternative choose open source developer preferred subversion enterprise video game company used perforce still linux kernel project famously relied version control system called bitkeeper system particularly bitkeeper might feel familiar young git user transported back time would bitkeeper aside version control system came git worked according fundamentally different paradigm taxonomy offered eric sink author version control example git thirdgeneration version control system git predecessor system popular early secondgeneration version control system thirdgeneration version control system distributed secondgeneration version control system centralized almost certainly heard git described distributed version control system never quite understood distributedcentralized distinction least installed experimented centralized secondgeneration version control system system installed cv cv short concurrent version system first secondgeneration version control system also popular version control system decade replaced subversion even subversion supposed cv better underscore dominant cv become throughout cv first developed dutch computer scientist named dick grune looking way collaborate student compiler project cv initially little collection shell script wrapping rcs revision control system firstgeneration version control system grune wanted improve rcs work according pessimistic locking model meaning two programmer work single file order edit file first ask rcs exclusive lock file keep finished editing someone else already editing file need edit wait cv improved rcs ushered second generation version control system trading pessimistic locking model optimistic one programmer could edit file time merging edits resolving conflict later brian berliner engineer later took cv project wrote readable paper cv innovation sense cv different git also work according optimistic model similarity end fact linus torvalds developing git one guiding principle wwcvsnd would cv whenever doubt decision strove choose option chosen design cv even though cv predates git decade influenced git kind negative template really enjoyed playing around cv think better way understand git distributed nature improvement came invite come along exciting journey spend next ten minute life learning piece software nobody used last decade see correction getting started cv instruction installing cv found project homepage macos install cv using homebrew since cv centralized distinguishes clientside universe serverside universe way something like git distinction pronounced different executables order start using cv even machine set cv backend cv backend central store code called repository whereas git would typically repository every project cv repository hold project one central repository everything though way work project time create local repository run init command would somewhere global like home directory cv allows pas option either cv command init subcommand option appear cv command global nature option appear subcommand specific subcommand case flag global happens tell cv want create repository general flag point location repository want use given action tedious supply flag time cvsroot environment variable set instead since working locally passed path argument could also included hostname command creates directory called sandbox home directory list content sandbox find contains another directory called cvsroot directory confused environment variable hold administrative file repository congratulation created first cv repository checking code let say decided keep list favorite color artistically inclined extremely forgetful person type list color save file called favoritestxt blue orange green definitely yellow let also assume saved file new directory called color like put favorite color list version control fifty year interesting look back see taste changed time order import directory new cv project using import command cv sandbox import color color initial n colorsfavoritestxt conflict created import specifying location repository flag remaining argument passed import subcommand provide message really need one left blank next argument color specifies name new directory repository used name directory last two argument specify vendor tag release tag respectively talk tag minute pulled color project cv repository couple different way go bringing code cv method recommended pragmatic version control using cv pragmatic programmer book cv make method little awkward check work fresh even though already got existing color directory instead using directory going delete check version cv already know cv sandbox co color cv checkout updating color u colorsfavoritestxt create new directory also called color directory find original favoritestxt file along directory called cv cv directory basically cv equivalent git directory every git repository making change get ready trip like git cv status subcommand cv status cv status examining file favoritestxt status uptodate working revision repository revision userssinclairtargetsandboxcolorsfavoritestxt v commit identifier sticky tag none sticky date none sticky option none thing start look alien cv commit object something called commit identifier might relatively recent mention commit identifier appears pragmatic version control using cv published last update cv released whereas git talk version file associated commit cv file versioned separately first version file version next version branch involved extra number appended might end something like appears default case even though created branch run cv log equivalent git log project lot file commits see individual history file might file version file version project let go ahead make change version favoritestxt file blue orange green cyan definitely yellow made change run cv diff see cv think done cv diff cv diff diffing index favoritestxt rcs file userssinclairtargetsandboxcolorsfavoritestxt v retrieving revision diff favoritestxt cyan cv recognizes added new line containing color cyan file actually say made change rcs file see cv never fully escaped original association rcs diff shown diff copy favoritestxt working directory version stored repository order update version stored repository commit change git would multistep process stage change appears index commit change finally make change visible anyone else push commit origin repository cv thing happen run cv commit cv bundle change find put repository cv commit add cyan favorite cv commit examining userssinclairtargetsandboxcolorsfavoritestxt v favoritestxt new revision previous revision used git strike terrifying without opportunity stage change old thing touched working directory might end part public repository passiveaggressively rewrite coworker poorly implemented function cathartic necessity never intending know bad think dick also edit commits pushing since commit push enjoy spending minute repeatedly running git rebase local commit history flow like derivation mathematical proof sorry everyone going find actually write test first also understand many people find git needlessly complicated cv commit used sure staging pushing change would strike pointless chore people talk git distributed system primarily difference mean cv make commits locally commit submission code central repository something without connection got locally working directory git fullfledged local repository make commits day long even disconnected edit commits revert branch cherry pick much want without anybody else know since commits bigger deal cv user often made infrequently commits would contain many change today might expect see tencommit pull request especially true commits triggered ci build automated test suite run cv status see new version file cv status cv status examining file favoritestxt status uptodate working revision repository revision userssinclairtargetsandboxcolorsfavoritestxt v commit identifier sticky tag none sticky date none sticky option none merging mentioned cv edit file someone else already editing cv big improvement rcs happens need bring change back together let say invited friend add favorite color list adding color decide longer like color green remove list go commit change might discover cv notice problem cv commit remove green cv commit examining cv commit uptodate check failed favoritestxt cv commit aborted correct error first look like friend committed change first version favoritestxt uptodate version repository run cv status see local copy favoritestxt version local change repository version cv status cv status examining file favoritestxt status need merge working revision repository revision userssinclairtargetsandboxcolorsfavoritestxt v commit identifier sticky tag none sticky date none sticky option none run cv diff see exactly difference cv diff r head favoritestxt index favoritestxt rcs file userssinclairtargetsandboxcolorsfavoritestxt v retrieving revision diff favoritestxt green pink hot pink bubblegum pink seems friend really like pink case edited different part file change easy merge cv u run cv update similar git pull cv update cv update updating rcs file userssinclairtargetsandboxcolorsfavoritestxt v retrieving revision retrieving revision merging difference favoritestxt favoritestxt take look favoritestxt find modified include change friend made file change still free commit file cv commit cv commit examining userssinclairtargetsandboxcolorsfavoritestxt v favoritestxt new revision previous revision end result get git running git pull rebase change added top friend change merge commit sometimes change file might incompatible friend changed green olive example would conflicted change removing green altogether early day cv exactly kind case caused people worry cv safe rcs pessimistic locking ensured case could never arise cv guarantee safety making sure nobody change get overwritten automatically tell cv change want keep going forward run cv update cv mark file change way git git detects merge conflict manually edit file pick change want keep interesting thing note merge conflict fixed commit another consequence cv centralized nature git worry resolving merges push commits got locally since cv easily addressable commit object way group collection change mark particular working directory state tag creating tag easy cv tag cv tag tagging favoritestxt later able return file state running cv update passing tag r flag cv update r cv update updating u favoritestxt need tag rewind earlier working directory state cv encourages lot preemptive tagging major refactors example might create tag could later use refactor went wrong people also used tag wanted generate projectwide diffs basically thing routinely today commit hash anticipated planned cv since needed tag available already branch created cv sort branch special kind tag cv rtag b tryexperimentalthing color cv rtag tagging color creates branch full view everyone way still need switch using cv update cv update r tryexperimentalthing command switch onto new branch current working directory pragmatic version control using cv actually advises create new directory hold new branch presumably author found switching directory easier switching branch cv pragmatic version control using cv also advises creating branch existing branch recommend creating branch mainline branch git known master general branching considered advanced cv skill git might start new branch almost trivial reason cv branching typically used really necessary release branch could later merged back mainline using cv update j flag cv update j tryexperimentalthing thanks commit history linus torvalds gave talk git google git new talk basically attempt persuade roomful skeptical programmer use git even though git different anything available already seen talk highly encourage watch linus entertaining speaker even never fails brash self excellent job explaining distributed model version control better centralized one lot criticism reserved cv particular git complex tool learning frustrating experience also continually amazed thing git comparison cv simple straightforward though often unable many operation take granted going back using cv excellent way find new appreciation git power flexibility illustrates well understanding history software development reexamining obsolete tool teach volume behind tool use today enjoyed post like come every four week follow twobithistory twitter subscribe r feed make sure know new post correction told many organization particularly riskadverse organization thing like make medical device software still use cv programmer organization developed little trick working around cv limitation making new branch almost every change avoid committing directly head thanks michael kohne pointing
362,Lobsters,vcs,Git & VCS,sr.ht (sircmpwn's github alternative),https://meta.sr.ht/,srht sircmpwn github alternative,metasrht sourcehut register log,welcome metasrht account billing security management hub sourcehut hacker forge feature service include pgp encrypted signed email sourcehut service twofactor authentication totp detailed audit log account activity finegrained thirdparty oauth access control register log get started
363,Lobsters,vcs,Git & VCS,New version of Plastic SCM,https://www.plasticscm.com/download/releasenotes/7.0.16.2338,new version plastic scm,internal public release version numbering,internal public release plastic scm development team work short iteration delivering frequent release goal least one new release every week new functionality bug fix performance tweak every weekly release published customer like detail release note user easily follow achieved every short iteration release marked word public one publish website one marked internal release create inhouse keep project moving week week version numbering starting plastic scm version numbering schema modified
364,Lobsters,vcs,Git & VCS,The advantages of an email-driven git workflow,https://drewdevault.com/2018/07/02/Email-driven-git.html,advantage emaildriven git workflow,git git sendemail formatpatch git mutt offlineimap top post bottom posting srht simon emailthreads email open source mailing list v github using git wrong,git released first contribution git shipped patch git feature remains disappointingly obscure git sendemail want introduce reader feature speak benefit using emaildriven git workflow workflow git originally designed email sexy github imitator several advantage latter email standardized federated wellunderstood venerable large body emailrelated software exists equally reliable wellunderstood interact email using open source software customize workflow every level stack filtering organizing forwarding replying manner choose git several builtin tool leveraging email first one note formatpatch take git commit series commits format plaintext email embedded diffs small example output mon sep drew devault sir cmpwncom date wed may subject patch silently ignore touch motion unknown id typeswlrseatc file changed deletion diff git atypeswlrseatc btypeswlrseatc index atypeswlrseatc btypeswlrseatc void wlrseattouchnotifyup struct wlrseat seat time struct wlrseattouchgrab grab seat touchstategrab struct wlrtouchpoint point wlrseattouchgetpoint seat touchid point wlrlog lerror got touch unknown touch point return void wlrseattouchnotifymotion struct wlrseat seat time struct wlrseattouchgrab grab seat touchstategrab struct wlrtouchpoint point wlrseattouchgetpoint seat touchid point wlrlog lerror got touch motion unknown touch point return git formatpatch bottom git stack outgoing email feature send email generates manually usually use git sendemail instead log smtp server choice sends email running git formatpatch giving opportunity make edits like given popular email client day awful handle basic task like sending email properly strongly recommend tool attempting send formatpatch output put notch keyboard person ignores advice struggle sending email manually eventually come around letting git sendemail recommend setting apply git sendemail make workflow bit easier one git config global sendemailverify turn sometimesannoying alwaysconfusing validation step check feature supported newer smtp server newer case meaning recent november started thread git mailing list week discus changing option default also set default recipient given repository using local git config git config sendemailto admin exampleorg let skip step send patch consistent destination project like mailing list also recommend git config global sendemailannotate yes always open email editor allow make change get annotate want every time main edit want make annotating provide call timely commentary patch immediately following commit message add summary change seen recipient appear final commit log useful place talk anything useful regarding testing review integration change may also want edit patch text subject line something like patch also done v flag well also like add additional cc etc time git also provides tool recipient message one tool git accepts email prepared formatpatch integrates repository several flag provided assist common integration activity like signing commit attempting merge difficult part getting email git first place simply use gmail web ui difficult use mutt tui email client manage incoming patch useful able compose reply vim rather fighting mail client write email way want importantly key prompt command pipe email tool like offlineimap also useful subject composing reply reviewing patch quite easy email approach well many bad yet sadly popular email client popularized idea sender message immutable encouraging top post leave endlessly growing chain reply underneath message secret email client kept fact permitted mail rfcs edit sender message please replying style called bottom posting strongly encourage get comfortable general essential reviewing patch received email manner dissect patch respond specific part requesting change clarification email reply forward message cc interested party start several chain discussion recently sent following feedback patch received date mon jun drew devault sir cmpwncom gregory mullen omitted subject patch todo filter private event event feed gregory mullen wrote diff git class flagtype typestypedecorator think safely import srht flagtype without implicating entire srht database support code diff git atodosrhtblueprintshtmlpy btodosrhtblueprintshtmlpy def collectevents target count event e eventnotificationqueryfilter eventnotificationuserid targetid orderby eventnotificationcreateddesc col suspect collectevents function done entirely sql without process permission python several sql roundtrips htmlroute username def userget username print username whoop nice catch user userqueryfilter userusername usernamelower first user abort tracker gettracker username none todo show public event event current user see remove comment obviously whole patch seeing edited part want talk also chose leave file name aid navigating feedback casual symbol indicating trimmed part patch approach common effective main disadvantage email driven development people comfortable working email client wellsuited kind work popular email client caused terrible idea like html email proliferate enabling spam privacy leak security vulnerability also making difficult people write email understood git tolerated advanced email user think solution problem leave powerful tool hanging wind move le powerful model like github pull request platform srht chose embrace git emaildriven approach extend new tool make easier participate without directly using email like still want email dig heel oldschool appreciate everyone started working srht mailing list service couple week ago goal realized new emaildriven code review tool friend simon helping python module named emailthreads used parse email discussion surprising degree accuracy considering flexibility email get tool usable state likely see srht registration finally opened general public interested trying earlier email course open source follow along try infrastructure like using email git scale extremely well canonical project course linux kernel change made linux kernel average time per hour constantly maintained dozen veritable clan software engineer hacking dozen module email allows change efficiently flow code throughout system without email linux maintenance model would impossible worth noting git designed maintaining linux course right setup well suited small project well sending patch along review single git command land directly maintainer inbox integrated handful keystroke work without centralization proprietary software involved embrace related article sent reader mailing list v github joe nelson using git wrong dawid ciężarkiewicz
365,Lobsters,vcs,Git & VCS,git-treesame-commit - Create commits that match the file tree of any arbitrary commit,https://github.com/jtolds/git-treesame-commit,gittreesamecommit create commits match file tree arbitrary commit,gittreesamecommit treesame license,gittreesamecommit utility make new commits treesame others every commit treehash specific identifier represents state file tree two commits exact file tree thus exact treehash called treesame tool allows create new commit current branch treesame arbitrary commit anywhere else basically like able cherrypick entire state file tree tool transformed quickly able figure debug git situation ca nt understand nt built git already usage gittreesamecommit h p message commit make treesame commits positional argument commit commit match optional argument h help show help message exit keepauthor set keep commit original author p bothparents set commit parent listed message message message new commit message license mit license copyright c jt olio permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
366,Lobsters,vcs,Git & VCS,Supercharging the Git Commit Graph,https://blogs.msdn.microsoft.com/devops/2018/06/25/supercharging-the-git-commit-graph/,supercharging git commit graph,supercharging git commit graph visual studio team service vsts git git window serialized commitgraph enable commitgraph feature experimental feature performance number linux linux kernel repository git git repository window repository git virtual file system gvfs history git commit graph directed acyclic graph visualize commit history graph web matt talked bit commitgraph performance blog post team explorer visual studio chose switch team talk git merge part ii file format follow,supercharging git commit graphderrickhave ever run gitk waited second window appears struggled visualize commit history sane order contribution instead stream parallel work ever run forcepush waited second git give output may performance issue due number commits repositoryif large repository may notice git log graph take second write output visual studio team service vsts return result quicklythis due really cool algorithm built tested server side recently took first step bringing algorithm whole open source git community submitting code core git projectthis week mark release git git window lot cool feature performance enhancement one hope upgrade enjoy one new feature serialized commitgraph think lot user benefit feature especially working large repository ten thousand commits feature optional right need enable manuallyhow enable commitgraph featurecurrently commitgraph feature requires bit selfmaintenance hope improve expeirence future version experimental feature please use caution always turn feature using git config corecommitgraph false git feature work well commitgraph shallow clone replaceobjects commit graft never use feature problem enable commitgraph feature repository run git config corecommitgraph true update commitgraph file runninggit showref git commitgraph write stdincommitsyou good go last command created file gitobjectsinfocommitgraph relative repository root file contains compact description commit history faster parse unzipping packfiles loose objectsgo test favorite command see long take compare command commitgraph feature using something like following time git c corecommitgraphfalse log graph oneline time git c corecommitgraphtrue log graph oneline love hear success certain command feature performance numbersif feel like testing without proof benefit performance number important repos linux git window case linux git include exact commits use reproduce similar experimentlinuxthe linux kernel repository gold standard git performance good number file many commits publicly available everyone clone test git mergebase master topic git branch contains git tag contains git tag merged git log graph test following branch value master topic version master reach commits commits behind topicgitthe git repository also publicly available much smaller linux repository however large enough see benefit commitgraph feature command change git mergebase master topic git branch contains git tag contains git tag merged git log graph test following branch value master topic version master reach commits commits behind topicthe window repositorythe developer making microsoft window use git enhanced git virtual file system gvfs deployed commitgraph feature window developer recent private release gvfs version gvfs handle maintenance commitgraph file updated every fetch command change git status aheadbehind git mergebase b git branch contains git log graph local version master reachable commits reason git status improves local version master commits behind originmaster git status walk commits compute count developer working repo branch move quickly realistic difference local remote branchthe performance number nice also isolated test ran machine much better reallife example helping user actual workflowsfor example one user complained forcepush command slow found amount data sent server problem instead found logic deciding forcepush necessary walk entire commit history new ref location meant git walking two million commits improved parse speed commitgraph feature enough improve forcepush time example second second working modify logic require walking commitsmy history git commit graphbefore joined microsoft mathematician working computational graph theory spent year thinking graph every day habit hard break good thing git store data directed acyclic graph everything git involves graph one way anothera year ago left academia joined vsts git server team first year spent mainly implementing commitgraph feature accelerated commit walk service contribution backend server code fantastic team created way visualize commit history graph web mean whenver view history repo see output ran git log graph complete visualization commit parent also matt talked bit commitgraph performance blog postthe commit graph visualized viewing commit history vststhe commit order displayed git using git log topoorderthe picture show commit history page vsts gitforwindows repository related git log topoorder call topoorder flag tell git order commits git log graph call render committoparent edge case many merges git log graph output becomes huge mess vsts us graph rendering team explorer visual studioone problem launching feature corresponding git command slow command git log topoorder took second take even longer larger repository million commits today web request vsts take around second including round trip server trying similar command linux kernel commits window repository million commits becomes quite painful commandline web view stay around millisecond queriesafter git server team vsts chose switch team client team work git gvfs version control client primary reason wanted switch could provide performance benefit implemented server git community commitgraph feature git major step direction current state commitgraph feature almost exactly described talk git merge videoyou continue reading next article series part ii file format coming week post article give detail commitgraph feature git powerful algorithm vsts bringing algorithm git soonprincipal software engineer azure devops follow
367,Lobsters,vcs,Git & VCS,6 Git Aha Moments,https://henrikwarne.com/2018/06/25/6-git-aha-moments/,git aha moment,aha moment local remote change independent merge make older commits accessible meaning merge commits merge direction start merge fails committed change reset local change conclusion like,switched job four year ago went using subversion svn using git version control system even though pretty quick learner took quite really understand git read lot git work even always realize implication use git six big aha moment use git aha moment looking aha moment feel really obvious remember literally thinking aha understood concept realized way could use git local remote change independent often used svn status u see change would get ran svn update beginning confused equivalent operation git run git status show local change compared last pulled see change server first need git fetch concept two independent set change local change change server pushed people took really grok merge make older commits accessible took long time realize merging simply make already existing commits accessible initially mental model merge change merged branch became commits time merge realizing commits branch remain merging simply allows seen branch helped explain odd thing example showing git log file example pycharm show commits two different branch interleaved showing diff two commits adjacent time two different branch give really big diff meaning merge commits since understanding merging incomplete merge commits used bit mystery viewed commits diff code commit perspective merge commits make sense often empty code diff course understand important see point commits another branch made reachable merge merge direction longrunning branch b eventually want merge back master resolve merge conflict bit time periodically merging master b fix merge conflict arise eventually want merge change b master done b work intended big conceptual aha moment realized wait till b done resolve merge conflict merging master b regular interval mean finally merge b master merge conflict already dealt start merge fails used svn often used see would happen certain operation without actually git took realize functionality exists defined explicitly example merge change mess resolving merge conflict simply go back one step long push server problem go back git reset head simply merge hopefully resolve conflict correctly time liberating know almost anything git easily reverted undone redone committed change reset local change sometimes work branch b local change need check another branch work past would often stash local change day often commit local change commit message work progress wip push change server come back branch b git reset head get committed change back local change making wip commits branch mean keep track branch stashed change meant real aha moment realize undo commit local change conclusion remember reading lot tutorial use git git organized even knowing git work immediately translate understanding could use git aha moment depend understanding thing local change branch merging work knowing know insight seem trivial however remember quite clearly obvious started learning git hopefully aha moment useful somebody else new git like like loading related
368,Lobsters,vcs,Git & VCS,Git Is Not Revision Control,https://blog.feld.me/posts/2018/01/git-is-not-revision-control/,git revision control,git koan,git always rubbed wrong way ability rewrite history tracking file renames reason turned sour mention awful inconsistent ux brilliantly mocked git koan objective enough come solid case git revision control system freebsd developer email phk resonated enough flagged reread many time last year internal discussion possible merit switching git increase user contribution brilliant response published permission sun feb poulhenning kamp wrote fundamentally wrong ask svn git svn obviously version control system classic attribute one including crucial element progressing version number definitive timeline imutability git clearly vcs never tried one people calling one nt change absense progressing version number lack definitive timeline mention many unnatural act git repo sufficient argument settle point git something else colaboration tool git tool allows people project manage modify fork merge many different view instance variation modification work progress across barrier distrust crucial word many different exact opposite vcs strives lot feature git provides feature make great colaboration tool fly face directly invalidates guarantee normally expect vcs notably progression time version immutability consistency view many case git adequate substitute vcs augment outofband definition tree definitive settle get define version mean github exists first place freebsd insisted proper version control day one year ago decision revisit periodically everytime come overwhelmingly confirmed way thing thread far first subject fails converge one side desire better colaboration tool side willing give good oldfashioned version control get party failing realize neither svn git ever able requirement fundamentally different conflict task hand still one ask make easier use git colaboration tool committers downstream user poulhenning p good place start would bless github mirror make sure pull request get dealt http githubcomfreebsdfreebsdpulls poulhenning kamp unix since zilog zeus phk nospamplz tcpip since rfc freebsd committer bsd since never attribute malice adequately explained incompetence originally intended cite specific point made email honestly good publish entirety impossible refute line reasoning opinion
369,Lobsters,vcs,Git & VCS,Meet the GitLab Web IDE,https://about.gitlab.com/2018/06/15/introducing-gitlab-s-integrated-development-environment/,meet gitlab web ide,portfolio management entire devops lifecycle gitlab experiment towards product jacob schatz sid job web ide tremendous amount work next phase open core monaco editor boring solution sarrah vesselov james ramsay tim zallman phil hughes iterating user experience integrated editor vscode atom discussion review state realize editing committing experience prototyped deciding hierarchy web ide directory beginning issue tracker,gitlab much application development workflow source code management versioning spanning everything portfolio management entire devops lifecycle everyone work familiar interface many advantage code get automatically tested deployed production human source though speed innovation web development saw chance help new well seasoned developer writing reviewing committing code confidence gitlab released first iteration web ide happened experiment towards product original idea came staff developer jacob schatz observed nondevelopers hard time editing multiple file getting change committed although discussed implementing integrated development environment ide gitlab ceo sid vp product job never clear exact problem would solve point dawned u repository view might right vessel jacob set proof concept made file viewer work context file editor removed page refresh switching file approached editing branch perspective instead per file result beginning web ide although called repo editor time setting proof concept tremendous amount work timeboxed one month jacob also responsibility still long way go concept minimal viable product mvp product ux developer got involved see could pushed towards production concept solved problem align vision could holistically integrate make great experience could get perform well many different user next phase took time clear aiming real integrated development experience accessible everyone right within gitlab ui without anything install idea grew repo editor web ide gitlab open source rather open core relies many open source project development jacob already decided monaco editor perfect code editor integrate already proven within different context great performance could considered boring solution ux manager sarrah vesselov initial design concept got passed platform product manager james ramsay frontend engineering manager tim zallman senior frontend engineer phil hughes ux designer redefine prototype multifile editor foundation capable supporting vision integrated development environment live preview web terminal enables anyone contribute iterating user experience integrated editor original multifile editor committing multiple change annoying updating handbook doc often change touched multiple file prototype made easier people contribute thought idea greater possibility became one gitlab unique advantage integrated product building editor integrated gitlab made easier anyone contribute natural fit however starting point prototype file list blob editor would nt enough handle decoupling first actionable item one gitlab unique advantage integrated product building editor integrated gitlab made easier anyone contribute natural fit change required lot discussion considerable amount engineering work developer phil tim project pivoted towards new direction web ide got lot screen real estate longer make room project sidebar page element decided web ide would edit one branch time conceptualized initial git flow editor based existing ui paradigm inspired code editor like vscode atom arrived wellknown threepane layout even seasoned developer beginner getting new people accustomed git workflow continues notoriously hard tackle decided therefore core web ide experience stable venture advanced concept set make editing committing experience good possible create foundation expand even discussion development never stood still quickly working version web ide relied monaco editor immediate effort pushed towards getting functional viable state review state due potency monaco editor became clear many option choose develop next review state high list obvious going commit introduced possibility able integrated merge request review experience context editing experience something possible introduced problem managing state much discussion decided go editor state instead filespecific state user perspective well technical implementation benefited reduced complexity meant either editing file reviewing change across file opened point nearing current state web ide though gitlab could finally realize editing committing experience talked conceptualized prototyped developing gitlab made possible development reached stable state deciding hierarchy new experience several objective needed introduce logical hierarchy pane operate based could decide pane would potentially show information could fit future advanced feature second objective guide user intuitively editing committing editing reviewing experience showed shortcoming hard switch mode unclear good job even seasoned developer hard time using could people starting ever hope successfully contribute making use james went many concept discussed flow hierarchy getting detailed mockups iteration became apparent preferred hierarchy act left right decided needed similar paradigm activity bar shown vscode editor became far usable state change one click away regardless state already using committing separate state well brought linearity entire flow seen activity bar last significant detail came discarded design iteration button guide user towards committing change introduced little section bottom state blue commit button counter see many change made essential repurposed right sidebar interested see iteration concept gone check web ide directory gitlab open source design library contribute design file beginning current state web ide still beginning planning even better experience future one integrate support advanced feature live environment test code code review discussion directly resolvable gitlab shipping next friday already following improvement able view latest pipeline status job log directly context able quickly switch assigned authored merge request without leaving web ide inevitably lead towards interesting design decision made concept uncharted territory sure valuable speed development give developer confidence hope valuable contribution open source community well gitlab great idea push effort forward want contribute check issue tracker
370,Lobsters,vcs,Git & VCS,How to keep your Git commit history clean,https://about.gitlab.com/2018/06/07/keeping-git-commit-history-clean/,keep git commit history clean,meaningful commit history important note documentation day life add route navigation page navigation view render navigation partial add style navigation situation need change recent commit last command breakdown add style navigation situation need change specific commit command breakdown situation need add remove combine commits avoid conflict protip quick step meet step sidekick situation commit history nt make sense need fresh start command breakdown conclusion git official documentation pan xiaozhen unsplash,commits one key part git repository commit message life log repository projectrepository evolves time new feature getting added bug fixed architecture refactored commit message place one see changed important message reflect underlying change short precise manner meaningful commit history important git commit message fingerprint leave code touch code commit today year look change would thankful clear meaningful commit message wrote also make life fellow developer easier commits isolated based context bug introduced certain commit becomes quicker find easier revert commit caused bug first place working large project often deal lot moving part updated added removed ensuring commit message maintained case could tricky especially development span across day week even month simplify effort maintaining concise commit history article use common situation developer might face working git repository dive let quickly go typical development workflow look like hypothetical ruby application note article assumes aware basic git branch work add uncommitted change branch stage commit change unsure flow documentation great starting point day life working small ruby rail project need add navigation view homepage involves updating adding several file following step step breakdown entire flow start working feature updating file let call applicationcontrollerrb feature requires also update view indexhtmlhaml added partial used index page navigationhtmlhaml style page also need updated reflect partial added stylescssscss feature ready desired change time also update test file updated follows applicationcontrollerspecrb navigationspecrb test updated passing expected time commit change since file belong different territory architecture commit change isolated ensure commit represents certain context made certain order usually prefer backend frontend order backendcentric change committed first followed middle layer frontendcentric change commits list applicationcontrollerrb applicationcontrollerspecrb add route navigation navigationhtmlhaml navigationspecrb page navigation view indexhtmlhaml render navigation partial stylescssscss add style navigation change committed create merge request branch merge request open typically get reviewed peer change merged repo master branch let learn different situation may end code review situation need change recent commit imagine case reviewer looked stylescssscss suggested change case simple change stylesheet change part last commit branch handle directly necessary change stylescssscss branch done change add change stage run git add stylescssscss change staged need add change last commit run git commit amend command breakdown asking git commit command amend whatever change present stage recent commit open last commit gitdefined text editor commit message add style navigation since updated cs declaration nt need alter commit message point save exit text editor git opened change reflected commit since modified existing commit change required force pushed remote repo using git push forcewithlease remotename branchname command override commit add style navigation remote repo updated commit made local repo one thing keep mind force pushing branch working branch multiple people force pushing may cause trouble user try normally push change remote branch new commits force pushed hence use feature wisely learn git force push option situation need change specific commit previous situation fix rather simple modify last commit imagine reviewer suggested change something navigationhtmlhaml case second commit top changing wo nt direct first situation let see handle whenever commit made branch identified unique hash string think unique id separate one commit another view commits along hash branch running git log would see output look somewhat follows recent commits top commit head addpagenavigation author kushal pandya kushal gitlabcom date wed may add style navigation commit author kushal pandya kushal gitlabcom date wed may render navigation partial commit author kushal pandya kushal gitlabcom date wed may page navigation view commit author kushal pandya kushal gitlabcom date wed may add route navigation git rebase command come play whenever wish edit specific commit git rebase need first rebase branch moving back head point right commit wish edit case need change commit read page navigation view notice hash commit right commit want modify copy hash perform following step rebase branch move commit target commit run git rebase command breakdown running git rebase command interactive mode provided hash commit rebase run rebase command git interactive mode open text editor showing commits came commit rebased look somewhat like pick page navigation view pick render navigation partial pick add style navigation rebase onto command command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell drop remove commit line reordered executed top bottom remove line commit lost however remove everything rebase aborted note empty commits commented notice commit word pick front content possible keywords use since want edit commit need change pick page navigation view edit page navigation view save change exit editor branch rebased point time right commit made included navigationhtmlhaml open file perform desired change per review feedback done change stage running git add navigationhtmlhaml since staged change time move branch head back commit originally also including new change added run git rebase continue open default editor terminal show commit message edited rebase page navigation view change message wish would leave save exit editor point git replay commits followed commit edited branch head back top commit originally also includes new change made one commits since modified commit already present remote repo need force push branch using git push forcewithlease remotename branchname situation need add remove combine commits common situation made several commits fix something previously committed let reduce much combining original commits need start interactive rebase would scenario pick page navigation view pick render navigation partial pick add style navigation pick fix typo pick ops another fix pick fix pick argh another fix imagine want combine fix render navigation partial need move fix right commit want keep end change pick squash fixup fix note squash keep commits message description fixup forget commit message fix keep original end something like pick page navigation view pick render navigation partial fixup fix typo fixup ops another fix fixup fix fixup argh another fix pick add style navigation save change exit editor done resulting history pick page navigation view pick render navigation partial pick add style navigation need git push forcewithlease remotename branchname change want remove commit altogether instead squash fixup write drop simply delete line avoid conflict avoid conflict make sure commits moving timeline nt touching file touched commits left pick page navigation view pick render navigation partial fixup fix typo change stylescss fixup ops another fix change imagelogosvg fixup fix change stylescss fixup argh another fix change stylescss pick add style navigation change indexhtml conflict protip quick fixups know exactly commit want fixup committing nt waste brain cycle thinking good temporary name fix fix fix step meet fixup staged change fixing whatever need fixing commit change like git commit fixup note hash commit render navigation partial generate commit message fixup render navigation partial step sidekick autosquash easy interactive rebase git place fixups automatically right place git rebase autosquash history shown like pick page navigation view pick render navigation partial fixup fix typo fixup ops another fix fixup fix fixup argh another fix pick add style navigation ready review proceed feeling adventurous noninteractive rebase git rebase autosquash like living dangerously opportunity review squash made applied situation commit history nt make sense need fresh start working large feature common several fixup reviewfeedback change committed frequently instead constantly rebasing branch leave cleaning commits end development creating patch file extremely handy fact patch file primary way sharing code email collaborating large open source project gitbased service like gitlab available developer imagine one branch eg addpagenavigation ton commits nt convey underlying change clearly create patch file change made branch first step create patch file make sure branch change present master branch conflict run git rebase master git merge master checked addpagenavigation branch get change master branch create patch file run git diff master addpagenavigation addpagenavigationpatch command breakdown using git diff feature asking diff master branch addpagenavigation branch redirecting output via symbol file named addpagenavigationpatch user home directory typically nix operating system specify path wish keep file file name extension could anything want command run nt see error patch file generated checkout master branch run git checkout master delete branch addpagenavigation local repo run git branch addpagenavigation remember already change branch created patch file create new branch name master checked run git checkout b addpagenavigation point fresh branch nt change finally apply change patch file git apply addpagenavigationpatch change applied branch appear uncommitted modification done none modification actually committed branch go ahead commit individual file file grouped area impact order want concise commit message previous situation basically modified whole branch time force push conclusion covered common basic situation arise daytoday workflow git rewriting git history vast topic get familiar tip learn advanced concept around subject git official documentation happy giting photo pan xiaozhen unsplash
371,Lobsters,vcs,Git & VCS,GitPub: An extension to ActivityPub for web-based Git services federation,https://github.com/git-federation/gitpub,gitpub extension activitypub webbased git service federation,forgefed federating git service activitypub activitystream collaboration join discussion mailing list mailing list gitfederation framalistesorg license document license,forgefed federating git service forgefed formerly gitpub decentralized federation protocol based activitypub extends activitystream provides server server api pull request forking subscription repository provided git web service service like github gitlab gogs gitea collaboration specification like must agreed upon least git web service implementation developer software please join discussion speak simply add work group experienced writing specification also welcome join effort mailing list still waiting tentative work group member join mailing list major discussion decision making happen framalistes mailing list nonmember may use github issue tracker send u mail gitfederation framalistesorg guarantee read mail github comment try license specification document licensed variation document license may obtain copy document license code component specification licensed mit license may obtain copy license
372,Lobsters,vcs,Git & VCS,git ssb - cel/git-ssb@master,https://git.scuttlebot.io/%25n92DiQh7ietE%2BR%2BX%2FI403LQoyf2DtR3WQfCkDKlheQU%3D.sha256,git ssb celgitssb master,gitssb secure scuttlebutt ssb install ssbserver license gitssb binary release ssbnpm intro gitssb new user usage example configuration patchwork git config testing environment article license,readmemdgitssb git repos secure scuttlebutt ssb package includes command line tool gitssb managing ssb git repos git remote helper gitremotessb using ssb url git web server gitssbweb browsing repos locally install requirement ssbserver one bundled eg patchwork oasis connection ssb network recommended install gitssb binary linux curl http sh license gitssb binary release gitssb also installed via ssbnpm ssbnpm install g gitssb branch completely new ssb follow intro gitssb new user get gitssb running scratch usage use ssb remote like git remote repo ssb identified message id hashtag create new git repo message ssb use command git ssb create git ssb createid example publish existing repo ssb cd repo git ssb create ssb mycoolrepo git push tag ssb master clone repo ssb git clone ssb msgid repo fork gitssb repo already cloned cd repo git ssb fork mine edit commit push change git push mine run web server browsing repos git ssb web configuration patchwork gitssb read ssbappname environment variable deciding ssbserver instance connect gitssb also us git config get appname environment variable set make repo get used testing environment configure repo follows git config ssbappname test article license copyright c charles lehner contributor usage work permitted provided instrument retained work entity us work notified instrument disclaimer work without warranty
373,Lobsters,vcs,Git & VCS,Mailing lists vs Github,https://begriffs.com/posts/2018-06-05-mailing-list-vs-github.html,mailing list v github,briefly work advantage mailing list precise flexible communication various algorithm structural diffs control customization petition support patch politics profit returning original social network advanced intro gnupg challenge mailing list unfamiliarity obscurity top posted pull request rejection bot disable issue disorganization commitfestpostgresqlorg patchwork debbugs bug everywhere bug mbox archive snowpatch cfbot slide barrier entry gnu mailman mlmmj mail archive publicinbox topic specialization issue template gnat sendbug debbugs report form nntp gmane conclusion related post,fledgling open source project use github gitlab collaborate code however older method developer ought know offer advantage github v email alternative method developer mailing list arose late eighty early ninety predates popularity web browser far mere historical curiosity discussion list still primary method development many important open source project database operating system web browser article carefully compare use mailing list code collaboration web site github best present pro con project assessing two make informed decision briefly work github host git server bug tracker wiki well release artifact participation discussion code change requires github identity code change proposed making another githubhosted project modifying remote branch using gui open pull request branch original project member debate change comment subsequent change pushed commits pull request branch ultimately project owner decide merge commits mailing list maintains list subscriber receive message sent email address project must host version control server elsewhere code change proposed sending email reflector textual diff change either attached inline list member debate change email reply sending subsequent change diffs either replace amend original ultimately project committer decide apply patch e codebase advantage mailing list precise flexible communication mailing list three property allow developer communicate greater precision flexibility possible github ui threaded nature email user generation patch free mixing discussion patch threading github web ui limited model threading one thread pull request whole thread attached single changed line code ui show line code context around line chosen discussion full chunk code discussion must inferred email subthreads allow specialized discussion different aspect section code linear githubstyle discussion would mix conversation conversation email greater permanence reference value github comment github comment continually change become disappear attached line changed commits vanish forcepush pull request branch email thread contrast original message proposed change remain comparison later message patch furthermore patch multiple author mix github pull request person opening pull request participant drop code suggestion comment get merged ui ultimately commits branch pull requester must turn comment commits branch want incorporate suggested change mailing list anyone free reply existing thread new proposed set patch another nice effect people carry patch finish line original author stop caring involved encountered number mia author pull request project year patch format custom patch another way email process improves communication github ui contributor shape patch make readable people github commit change github chooses render diff reviewer creating patch tweak setting diffs unified context format latter number context line configurable fair github allows expanding view context around change people feel gitstyle unified diffs clearest small change line context diffs suitable changing larger range especially line indentation change fair note github hide indentation change add url displaying change finally creating patch hand diff take advantage option like annotating hunk header c function affected using p flag choice various algorithm patience little work calculate result output make sense human instance standard nonpatience diff might look like void x void functhreehalves x void x whereas patience diff show function added unit void x void functhreehalves x void x finally nothing stop mailing list style collaboration adapting emerging diff format structural diffs patch email directly describe change whereas github render commit delta without nuance patchdiscussion mix bulk communication around new feature proposal around subsequent code contributor proposes feature justifies confirms scope writing code community responds often time anyone implement anything idea shifted significantly start process email fit group discussion well inline reply threaded structure mentioned time get coding discontinuity switching author simply reply patch attached control customization web apps deliver centrallycontrolled user interface native application allow person customize experience open protocol like smtp encourage proliferation client mail client providing function filter folder flag fun mail client provide way mark message important set back unread general unsuccessfully beg central committee five year interface change happens see petition unofficial repo designed supplicate github deity people script mail client apply patch keyboard shortcut others go minimalist still others even use webmail person different software nature mailing list allows work together another area control ability search interact mailing list offline often choice rather necessity urban suburban area usually internet access available anywhere time using cellular service need thing longer intermittent dialup connection working offline choice people simply prefer although git distributed operates locally without network connection github requires connectivity review issue pull request demanding connectivity essentially reflective solitary task unreasonable remember online applies two direction connection internet also uptime although latter pretty stable remember handful time entire office got derailed github downtime taking github big attractive target angry nation ambitious hacker native email client review email attachment offline even send reply message offline client queue internet access becomes available side uptime mailing list server mail sent offline server eventually go mail transfer agent along email chain designed retry transmission addition developer list recommend user message everyone involved thread well list reflector address get message way even reflector offline email go recently involved ultimately control customizability enjoyed mailing list style development come diverse tool built open standard patchfiles universally supported git directly support patch smtp rfc tool work together rather gui locked browser politics profit git originally created escape bitkeeper version control system associated centralized hosting bitkeeper granted free license open source project required project store metadata company server twist history user git chose centralized host granting free license open source project requiring project store metadata company server github legally delete project user without cause make sense course since project using computer owned github also explicitly prohibiting development competing project like bitkeeper github still view private source code company choose host really future github profitdriven yet free code hosting service history provides example sourceforge premier code collaboration platform turn century acquisition dicecom lastditch effort grab money sourceforge hijacked hosted project installers would include adware spyware first began note article implication github purely hypothetical even writing news emerged microsoft buying github feel farfetched suggest github may moving let lesson broader github though logic applies web platform centralize combine programmer communication hosting major open source project like postgresql database played safe explicitly chose never put code external company server mirroring postgres also take pain place control governing body spanning multiple company company allowed majority committers organization designed survive independently project important enough require level neutrality project deserve control destiny fundamental task talking asynchronous group communication code change patch universally understood way describing code change email universally understood method communication seems approach match problem hand fact emailing patch work version control system git openbsd project still happily us mailing list cv patch author need version control software installed author download source release tarball make change copy capture diff email sending applying patch cut busywork like cleaning remote branch merge creating local branch forked repo preparation pull request comparison remember teaching group new programmer use github conscious time weird step asked also le busywork finished communication thing like abandoned pull request merged branch issue mark closed reply stop thread downside later look bright side using email also decouples digital identity account site like github ultimately place trust dns system managed international organization icann see article returning original social network pgp provides guarantee identity verified decentralized web trust see recording neal talk advanced intro gnupg challenge mailing list mailing list approach raise quite question difficulty done best try acknowledge suggest possible solution unfamiliarity obscurity variety process browse github project know exactly work sure addonscihooks may differ setting project might involve contortion process browsing code finding known bug submitting change always definitely true project web presence mailing list heard people go far say project github chance honest say contributed nongithub project either migrated github google code nongithub contribution want call filing bug report chrome another tool gitlab one source unfamiliarity many people especially younger devs never seen real mail client like mutt mind may picture overflowing gmail inbox full top posted reply mixed together different project enticing image perhaps article start developer path rediscovering care engineering went classic email client called given unfamiliarity selfhosted project need communicate clearly collaboration mailing list alone enough project need explain web provide information getting involved final note unfamiliarity beware offline user misunderstood connected age look silly write email offline queue send arrive another better response render unnecessary probably wise include signature line saying something like composed offline may lack recent social proof next problem project outside github face lack social proof star voting harder new project build reputation without star people take notice project thousand star way mere project description evoke much established software like os browser database fine without star acceptance year ago promoted big company one way help selfhosted project popularity hook github without going deep project like git linux run server offer readonly mirror github public admiration code browsing two tool help pull request rejection bot builtin setting disable issue disabling pull request issue project readme need include information contribute selfhosted git server also need postcommit hook keep github date command trick hook git push githubremote f mirror disorganization patch state big difficulty mailing list sharing global state email thread content message obviously decision require action individual contributor flag message action mail client status remains private individual helpful record publicly patch accepted future application previously reported bug fixed project one two way adding metadata git repository using external tool tie mailing list instance postgresql problem patch hung around without accepted rejected proposed patch consider one time team created commitfestpostgresqlorg contributor register patch site final review several time per year committers stop work make time acceptdeferrejectapply patch patchwork similar tool tied postgres suitable general use patchwork supplement mailing list subscribing list like person would capturing patch email patch creates web page fragment discussion allow commenting web interface merely reflects comment email allows maintainer mark patch state accepted rejected review comprehensive bug list something surprising learned postgresql project place new contributor go find list open bug project separate mailing list pgsqlbugs people report nothing tie activity pgsqlhackers indicate whether bug resolved interestingly openbsd also bug email list central bug status postgres still searching system match like work detract mailing list believe openbsd desire bug tracker quipped irc one would freebsd project want bug tracker one good contender debbugs debian project provides email interface manipulate bug used project debian bug system work adding file object project git repo thus fixing bug branch could mean deleting bug repo along change branch like email preserve offline access bug information probably one best bug everywhere another pretty clean one simply called bug message history subscribe mailing list new message flow client available searching hooray message sent joined list furthermore old message newer one every issue github url issue refer would email say something like already discussed message x look way work messageid header every email one part reply work big guids look like ssspghpaus mailgmailcom email could say discussed issue ssspghpaus move discussion reading message sent prior joining list requires going list archive web good archive provide link mbox file imported native mail client make old message available searchreply mail client archive also usually provide web interface read message html navigating thread old interface usually way painful good mail client example check archive pgsqlhackers notice mbox file link download mbox worth message individual message full thread navigate certain message id use url http wwwpostgresqlorgmessageid theid try one id listed earlier similarly linux kernel mailing list archive display message id via lkmlkernelorg remember email messageid header something special mailing list want reply message imported mail client need include email header inreplyto messageid thread split regardless subject line use email patch file old interoperable standard theoretically running patch continuous integration ought problem however know tooling welldeveloped gitlab ci server built several addons exist github know clearly dominant thing patch based workflow ibm built tool called snowpatch know tomfoolery involved possible read patch list script integration ci tool via patching pushing github thomas munro recently created cfbot postgres see interesting slide development creative use github compromise mailing list flow barrier entry related unfamiliarity mentioned earlier using mailing list well requires new skill contributor infrastructure maintainer although subscribe list outlook gmail call day neither people interact happy email precise tool ye olde unix day people care thing like plain text line send wire way use mime type even crafting little gem go dance every time want subscribe list confirming address adding folder filter mail client like jotting note issue another github repo unless mailing list meaning accepts mail nonregistered address list spam price pay basing identity dns system corporate collaborative coding site profile list ready send message patch guideline follow pretty much list ask help accommodate diversity mail client send plain text disable html character per line toppost keep quoted text small relevant strip company legal footer shorten lengthy signature use replyall replying ensure inreplyto set message contains patch rule observe vary community linux openbsd freebsd say mime link compression attachment plain patch go right body message bottom mail client would mangle code wrapping long line attaching mime permissible patch host online include link postgres hand want patch attached type textxpatch disposition inline tiny patch disposition attachment substantial one case including unique filename patch contentdisposition also different reviewer prefer different patch format like tom lane accept context diffs people want unified diffs hosting requirement maintainer side easy make new project clicking button github maintainer need host mailing list optionally patch status app bug tracker advise creating general purpose listserv personal use run list small project create project page homepage something see taking overhead spin new infrastructure dinky experimental open source utility probably commercially hosted listservs rent host probably best one selfhosting gnu mailman mlmmj also service called mail archive add archive list might also worth looking publicinbox new approach share mailbox git git hold mailing list talk git inception listserv also want install spamassassin restrict allowed mime type plain text patch also remember configure list use replyto rather dmarc compatibility whole ordeal something want twice optionally may want host lightweight web interface browsing git simplest seem one alternately could use github actual git server code browsing mirror finally could go really hardcore let people use builtin functionality pulling shallow clone rather providing web interface get latest commit git clone singlebranch branch master remote get nt even include git folder git archive remote remote master rather unfriendly though topic specialization sometimes useful restrict general purpose nature email message instance bug report follow certain format include detail environment github offer issue template equivalent email project address helper program collect information format email behalf information thus specialized type software involved gnu gnat openbsd sendbug debian debbugs postgres bug report form noob question another kind specialized topic topic interest small subset list list full kernel developer database hacker tend stern community still use mailing list usually one full scary wizard invent world rest u play thus intimidating ask basic question project usually create beginner list separate main developer zone also irc good way ask question fade away nntp whole email list concept bit hack turning protocol designed smallgroup communication behemoth nntp made threaded large group discussion nntp slightly worse offline characteristic though email allows replyall trick keep thing limping along list outage reply nntp route central server also identity verification need happen server whereas email delegate spfdkimdmarc also greater number client email nntp client continue supported finally like reading mailing list newsreader go right ahead use bridge like gmane conclusion hope given mailing list fair comparison common web interface seems mailing list offer real advantage project could benefit making switch biggest difficulty mailing list seems simply setting perhaps deployable server image including necessary software configuration would help boost adoption related post
376,Lobsters,vcs,Git & VCS,"GNOME, welcome to GitLab!",https://about.gitlab.com/2018/05/31/welcome-gnome-to-gitlab/,gnome welcome gitlab,moved gitlab catalyst change announced switching dco gnome gitlab cgit hosting bugzilla bug tracking extensive analysis analysis move mean gnome better together project contribute gnomecomgetinvolved,gnome one recognized respected project open source world moved gitlab manage software project nearly annual contributor happier welcome gnome community migration great news community hope beginning long productive partnership video catalyst change last year approached developer debian consider dropping contributor license agreement cla favor certificate origin dco november announced switching dco happy change welcomed gnome community applaud gitlab dropping cla favor ossfriendly approach open source community born sea contribution come together transform project gesture affirmed gitlab willingness protect individual creative process importantly keep intellectual property hand creator carlos soriano board director gnome gnome gnome software used million people worldwide one largest oldest free software project best known desktop key part popular gnulinux distribution including ubuntu debian suse fedora however project also long history producing critical piece software infrastructure common part countless open source system often taken granted many essential ubiquitous technology began life gnome project gone become essential ingredient diverse range product community company include mono fo c implementation used xamarin core team microsoft inotify linux kernel file monitoring history gnome project training ground software engineer contributor gone play important role elsewhere say nuritzi sanchez president board director core member engagement team focus quality engineering designdriven development systemlevel plumbing gnome serf excellent environment new contributor gnome alumnus hold position google apple microsoft red hat innovative startup gnome software found television ebook reader invehicle infotainment system medical device much project continues produce new innovative technology transforming linux ecosystem recent innovation include flatpak accompanying app store flathub enables application run linuxbased operating system gitlab migrating gnome used broad range tool fulfil number specific purpose cgit hosting bugzilla bug tracking number tool made onboarding experience new contributor cumbersome confusing started looking single tool meet need make process easier improve workflow extensive analysis multiple tool considered solution would fit requirement organization big gnome say nuritzi set hard requirement important one must free software ideally license also check analysis full account decisionmaking process move mean gnome gnome looking way make easier newcomer contribute got modern familiar interface welldesigned tool using gitlab make gnome community approachable especially new generation newcomer used product modernlooking easy use say nuritzi also noticed using single tool everyone roof opportunity team work together crosspollinate resulting engaged collaborative community better together apart easier workflow newcomer improved collaboration cohesion team gnome picked unexpected benefit return old project influx new one ease creating personal project gitlab fostered better proximity community developer project even part official gnome project allows project closer community developer product help u increase reach say nuritzi also pleased see major linux distribution begun move part operation group gitlab allowed collaboration gnome distribution great step forward helping create tighterknit broader improved closeness reach really excited come open source community using gitlab merrier say hope boost collaboration networking gnome experienced extend community well open source project moving gitlab contribute keeping vision contribute gnome opportunity contributor background like marketing community management engagement team translation documentation team like designing software design team want contribute code many project maintainer welcome newcomer help answer question may say nuritzi team resource workflow belong larger gnome community common culture based free software open visit gnomecomgetinvolved get started
377,Lobsters,vcs,Git & VCS,CVE-2018-11235 : Security vulnerability in Git,https://lkml.org/lkml/2018/5/29/889,security vulnerability git,http wwwkernelorgpubsoftwarescmgit http kernelgooglesourcecompubscmgitgit http githubcomgitstergit,message threadfromjunio c hamano subject announce git may latest maintenance release git update oldermaintenance track available usual placesthe tarballs found http wwwkernelorgpubsoftwarescmgitthe following public repository copy maint branch tag point well tag url http kernelgooglesourcecompubscmgitgit url git repoorczaltgitgit url http githubcomgitstergit git release notesfixes since release contains fix made version git covering forwardported release see release note detail addition fix release add support server side reject push repository attempt create problematic gitmodules file etc tracked content help hosting site protect customer older client preventing malicious content spreading enabled receivefsckobjects configuration server side security sanity related check eg rejecting tree entry git wrong case tracked content targetting victim case insensitive system already implemented past release recommended double check configuration hosting content peoplegit release notesfixes since submodule name come untrusted gitmodules file blindly append gitdirmodules create ondisk repo path mean bad thing putting name enforce rule submodule name cause git ignore malicious name credit finding vulnerability proof concept test script adapted go etienne stalmans possible trick code sanitychecks path ntfs reading random piece memory credit fixing bug go jeff king johannesschindelin others
378,Lobsters,vcs,Git & VCS,Introducing Git protocol version 2,https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html,introducing git protocol version,wire protocol getting hurdle ref advertisement new protocol introduced fixed back try merged recent change,today announce git protocol version major update git wire protocol clone fetch push communicated client server update remove one inefficient part git protocol fix extensibility bottleneck unblocking path wire protocol improvement future protocol version spec found main improvement main motivation new protocol enable server side filtering reference branch tag prior protocol server responded fetch command initial reference advertisement listing reference repository complete listing sent even client care updating single branch eg git fetch origin master repository contain thousand reference chromium repository branch tag server could end sending megabyte data get ignored typically dominates time bandwidth fetch especially updating branch commits behind remote even checking uptodate resulting noop fetch recently rolled support protocol version google seen performance improvement noop fetch single branch repository containing reference protocol also enabled reduction overhead byte nonpackfile sent googlesourcecom server majority improvement due filtering reference advertised server ref client expressed interest getting hurdle git project tried number occasion year either limit initial ref advertisement move new protocol altogether continued run two problem initial request rigid include field could used request new server modify response without breaking compatibility existing server error handling well enough defined allow safely using new protocol existing server understand quick fallback old protocol migrate new protocol version needed find side channel existing server would ignore could used safely communicate newer server three main transport used speak git wireprotocol git ssh http side channel use request need communicate way older server would ignore additional data sent crash http transport easiest simply include additional http header request gitprotocol ssh transport bit difficult requires sending environment variable set remote end challenging requires server administrator configure sshd accept new environment variable server difficult transport anonymous git transport git initial request made server using anonymous git transport made form single packetline includes requested service gituploadpack fetch gitreceivepack push repository followed nul byte later virtualization support added hostname parameter could tacked terminated nul byte ideally able add new parameter used request adding manner hostname added unfortunately due bug introduced nt able place extra argument separated nuls host otherwise parsing argument would enter infinite loop bug fixed check put place disallow extra argument new client would nt trigger bug older server fortunately check nt notice send additional request argument hidden behind second nul byte pointed back allows request structured like placing version information behind second nul byte skirt around infinite loop bug explicit disallowal extra argument besides hostname newer server know look additional information hidden behind two nul byte older server croak every case client issue request use using transportspecific side channel server respond using new protocol older server ignore side channel respond ref advertisement try try protocol version need date version git support recently merged git master branch expected part git enabled server repository googlesourcecom cloud source repository enabled enable tracing run fetch command requesting single branch see server sends much smaller set reference using protocol version git clone http chromiumgooglesourcecomchromiumsrcgit cd src export using protocol version git c fetch notags origin master using original wire protocol git c fetch notags origin master brandon williams gitcore team updated december previously example used rarely used git lsremote command recent change improve correctness command output cause request reference updated example demonstrates improvement protocol brings using git fetch command
379,Lobsters,vcs,Git & VCS,"Walk, talk and git commit: SRE onboarding (2/2)",https://blog.hostedgraphite.com/2018/04/18/walk-talk-and-git-commit-sre-onboarding-2-2/,walk talk git commit sre onboarding,part one building cluster got ta learn make plane get jump http zero impact flying plane jump fun aws polling service incident empowerment,part one series talked early week sre hosted graphite jumping oncall getting grip architecture getting acquainted year worth task almost ready call fully fledged member sre little know onboarding quite finished yet building clusteryou got ta learn make plane get jump http overall infrastructure divided different collection main service called cluster generally build dedicated cluster user need enterprisey level isolation heavyhitters term usage separate away tanking production service vice versa guarantee production service hit high usage affect availabilitythe biggest portion onboarding plan every new sre hire build cluster essentially given week duplicate production environment smaller scale oh boythankfully fairly detailed documentation entire process bad news however innovate pretty frequently already outdated two month kind unplanned way allowed whole level investigation exploration testing documenting silver platter buildout process entire buildout gave detailed view service interact service depend portion config management used swap primary secondary service built heavily encouraged break many way could think built multithreaded program spam pipeline metric datapoints portion collapsed overflowed caught fire played yanking portion architecture midflow witnessed recovered failed purposefully corrupted data midprocess see happenedafter couple day kicking cluster colleague noticed missed undocumented step necessary database failover work properly everything setup correctly failover database simply matter opening slack telling glitter wanted take instead without process little involvedat work pointed slack channel promptly turned master db server great opportunity treat like real incident worth noting point forced fix outside business hour oncall shift totally voluntary thing tried rebooting master colleague made sure stayed work failure response come solution restoring backup manual db failover slave missed vital step setup consequence bet sweet as documented missed morning afterfrom zero impactflying plane jump funafter spending couple day new feature aws polling service wednesday deployed dedicated cluster cluster reporting healthy change would take lot pressure authentication ratelimit layer looking forward pushing change productioni checked service hour two dedicated cluster everything looked good disruption used chatops push change productionthe service spike initially restarted backfills data might missed restart time queueclimb expected climbed minute data five minute ten oh sh long story short caused incident problem machine service constant heavy load headroom enough added fact added pushed machine way beyond limit never seen machine kill many child process space minute beforei rolled back deploy laid basic testing environment something memory notification worried sure added overhead link tool use infrastructure way say memory leak right took copy data incident put change staging server setup test sampled million datapoints data used representative sample ran test scenario vanilla change noticed worrying trend could handle datapoints per second worse still consumed ram process thousand datapoints second service bueno could talk day process went blog post another day timing test memory profiling eventually changed line code improved throughput datapoints per second consumed ram mostalthough original aws polling change still awaiting deploy feature reason pushed improvement tool use everywhere onboarding bar many month oncall rotation culminated making change vital component pipeline increased throughput decreased footprint tremendouslyit took minute tool process million datapoint sample done le minutesempowermenthaving spent last two month training kind paratrooper see sres wholeheartedly endorse hosted onboarding process done everything give confidence change humility lean team thing go wrong learned much felt like contributed much short space time feel ethereal could become active member team quickly come radically different background initially work testament team work colleague support well process worksthe onboarding process given confidence go skydiving might time start looking basejumping
380,Lobsters,vcs,Git & VCS,Beyond ‘Punk Rock Git’ in Eleven Steps,https://zwischenzugs.com/2018/05/14/beyond-punk-rock-git-in-eleven-steps/,beyond punk rock git eleven step,punk rock git punk rock git user detached head rebase bewildered start expanding git knowledge core git concept repository equivalent status creating repository look folder understand file cloning repository delete stuff accidentally clone restore using branching tagging understand tag pointer commit understand branch tag merging understand diff format know stashing importantwhy used use revert change reflog using reference id rebasing use update branch change come updated end branch go back branch rebase happened remote look file see cloned repository referenced within repository pulling understand fetch talking different repo merging done pull missed x related post might also interested book learn git hard way go concept others guided way might also interested learn bash hard way docker practice get docker practice code like published,punk rock git spent last couple year teaching git mostly user like call punk rock git user three command get terribly interested merkle tree hash interested detached head understanding rebase feel intimidated someone drop conversation fact stated primary aim course wrote run get fully understand rebase point punk rocker longer git student often say bewildered start expanding git knowledge briefly outline set git concept command crucially order grasp also noted bold aha moment observed experienced casual user getting follow course book learn git hard way basis course similar structure optional item covered available book core git concept baseline want know set understand four distinct phase git content local change staging area committed pushed memorise aware branching cheap compared source control tool repository equivalent status predefined clientserver relationship github treated server convention many user nothing git force anything server github could used backup creating repository important see git repository created scratch look like creating git repository simple running git init folder use git add add content use git status see going use git commit commit content use git log see history say look git folder understand head file cloning repository created repository see happens clone use git clone clone repository created look git folder figure relationship cloned repository delete stuff accidentally clone restore using git reset branching tagging create branch create branch repo make sure moved understand branch pointer commit move commit understand head create tag understand tag pointer commit understand head branch tag reference merging got branch learn merge create two conflicting change two branch try git merge one another resolve conflict git commit understand diff format great exposition stashing going branch probably want stash know stashing importantwhy used use git stash git stash pop understand git log output branch albeit special one reflog know reference seen stash reflog make sense quickly use git reflog command understand reflog reference log log understand come handy thing go wrong git reference moved around use git reset revert change reflog using reference id cherry picking cherry picking nice precursor rebasing principle similar idea rebasing ready rebasing might want use git log graph oneline see state repository changing create new branch b existing branch move new branch create series change b move old branch create series change go back branch b use git rebase update branch change come updated end branch see change line go back branch rebase b happened remote cloned repo look output git remote v run git branch see remote repository actually stored current repository remote reference look gitconfig file see cloned repository referenced within repository pulling understood deconstruct git pull understand stop using git pull read use learn git fetch git merge understand fetch talking different repo merging done pull bonus point grok fastforwards head moving pointer along end series change without merge missed x plenty others might consider essential eg submodules bare repos advanced git logging found required get beyond punk rock git related post might also interested book learn git hard way go concept others guided way might also interested learn bash hard way docker practice get docker practice code like like loading related published may
381,Lobsters,vcs,Git & VCS,"But first, on-call: SRE onboarding (skydiving for nerds) 1/2",https://blog.hostedgraphite.com/2018/04/09/but-first-on-call-sre-onboarding-skydiving-for-nerds-1-2/,first oncall sre onboarding skydiving nerd,ragrets workflow introduction parachute need one kanban people choose parachute architecture overview four year flight school evening call first jump http next part article,onboarding new hire tricky process difficult get right worked atwith company zero onboarding way much past either pushed plane without parachute parachute already deployed make production three monthshosted process sre onboarding taught walk talk git commit ragrets within week explain entire architecture end month build copy infrastructure scratch twomy name evan twentythree recent computer science graduate cork hosted graphite worked freelance shortterm contract internship web developer six year deciding much preferred system automation client web apps started current position fulltime site reliability engineer back december first month wonderful transition practice jump paired jump jumping plane built fun happenedworkflow introductionparachutes need onemy first day like first day awkward feeling little depth lot imposter syndrome air already met entirety sre team different stage interview certainly helped jitter collectively agreed team take think kid babysit colleague needed training set process first day built around setting development environment getting ssh credential config management logging bazillion service invite ims hr email etc week went first set task edit basic thing config management introduction repos git processall change developed branch main repositorycreate pull request github changeshave reviewed another sre teamthis version control process exists across company level newbie thing regardless seniority experience everyone go lifecycle change pushed master founder exemptevery time make change get reviewed set fresh eye help catch stupid bug typo mistake also allowing collaboration another set knowledge everyone company area focus choosing right person pull request led vast improvement python work puppet configs system theory extra level feedback change also worth noting reverse effect also happens code review two people know something every change opportunity spread knowledge direction reduces chance one person holding informationby end first week pushed feature internal chatops service glitter allowed u provision new server raid level help expanding elk clusterkanban peoplechoose parachutein sre team employ kanbanstyle task management using jira first pretty overwhelming see year worth task given free reign tackle anything felt comfortable rest team made available moment answer question explain service worked help think solutiona mixture kanban great team gave sense freedom productivity camaraderie second week job already contributing production internal service tool people relied every day job great feeling productive day one feel like burden anyonearchitecture overviewfour year flight school week two given talk veteran team last newest person sat front whiteboard explained entire infrastructure endtoend high level though stopped brain melted ear incredibly dense infodump processthe month team lead voluntary weekly wednesday talk topic ingestion render layer aka biggest section infrastructure spent day research compiling past drawing presentation similar topic gave brief runthrough understanding system coworkers taught originally added helpful tidbit highlighted important importantly told could trim back higher level monday wednesday stood front whiteboard sre dev team lead gave fresh explanation layer answered pretty tough question kafka work became backandforth question embarked everpresent rabbit hole technologyi stuttered fumbled way presenting pair service diagram entire company honestly little amazed much knew much could talk also great help people taught material room could defer question little difficult meoverall great idea little month could recite pipeline start finish also gave great excuse ask thought stupid questionson callyour first jump http vital part sre going oncall mean available near laptop plus internet connection week couple thing hosted graphite make kind work lot easierfor one shift thursday thursday oncall get friday recuperate relax oncall pretty stressful time sometimes lead late night frustrating problem friday mean world extra day weekend recharge battery fully unwind secondly starting get secondary oncall shift repeated free escalate everything secondary tackle issue confident also free escalate secondary want say watch screw also oncall get friday offbefore started everybody made extremely clear start oncall early possible make lot sense best way tackle something like one receives alert make decision even decision let someone experienced take overi got jump plane feel like first responder gon na lie feel kinda next part article talk duplicating entire production environment purposefully breaking making first change vital component pipeline causing incident
382,Lobsters,vcs,Git & VCS,When do changes induce fixes? (On Fridays.) (2005),https://www.st.cs.uni-saarland.de/papers/msr2005/msr2005.pdf,change induce fix friday,,obj goto endobj obj introduction endobj obj goto endobj obj archive endobj obj goto endobj obj identifying fix endobj obj goto endobj obj syntactic analysis endobj obj goto endobj obj semantic analysis endobj obj goto endobj obj result endobj obj goto endobj obj locating fixinducing change endobj obj goto endobj obj first result endobj obj goto endobj obj fixinducing transaction large endobj obj goto endobj obj nt program friday endobj obj goto endobj obj related work endobj obj goto endobj obj conclusion endobj obj goto endobj obj reference endobj obj goto r fit endobj obj length filter flatedecode stream xڝ q
385,Lobsters,vcs,Git & VCS,Introducing GitHub Learning Lab: A new way to level up on GitHub,https://blog.github.com/2018-04-19-introducing-github-learning-lab/,introducing github learning lab new way level github,start learning work check github learning lab community forum covered introduction github communicating using markdown github page moving project github managing merge conflict contributing open source next community forum learn github learning lab,github home code forum collaboration sandbox testing launchpad deployment often platform learning new skill training thousand people use git github github training team established triedandtrue method helping new developer retain information ramp quickly begin software journey making experience accessible developer everywhere github learning lab instead traditional tutorial webcast github learning lab app give learning experience actively participate without leaving github friendly bot take series practical fun lab give skill need share helpful feedback along way start learning work github learning lab learn issue opened bot github repository finish task bot comment work even review pull request like project collaborator would question come complete course get answer github learning lab community forum new way get support community learner expert trainer including member github training team journey progress check github learning lab community forum covered find five course covering popular topic launch introduction github get introduction common collaborative workflow developer around world communicating using markdown learn communicate github beyond markdown simple syntax github page host website blog directly github repository moving project github get tip migrating code contributor github managing merge conflict learn merge conflict happen fix coming soon github learning lab contributing open source make first open source contribution friendly mapping project next beginning expanding app help new developer inviting new course author adding topic go let u know think community forum learn github learning lab
386,Lobsters,vcs,Git & VCS,Modern Mercurial - Phases,http://blahg.josefsipek.net/?p=583,modern mercurial phase,modern mercurial mercurial using mercurial full potential mercurial phase phase mercurial wiki phase commits sharing changeset evolution feature note template information use phase ugly repos lobster,post part series named modern mercurial share realization much mercurial advanced since without noticing last year realization using mercurial full potential post like share thought usage mercurial phase phase new feature made first appearance back part mercurial make little year old phase description phase mercurial wiki take stab short intro commit belongs one three phase public draft secret implies set allowed operation commit furthermore phase dictate phase phase commit transition think phase totally ordered secret draft public commit phase move direction secret commit become either draft public commit draft commit become public commit public commit stuck public course really want mercurial allows force commit phase via hg phase f allowed operation commit particular phase pretty selfexplanatory public commits deemed immutable try perform operation commit would modify eg hg commit mercurial error readonly operation well pushing pulling allowed secret commits mutable modification allowed commits pullable pushable word hg pull see secret commits remote repository hg push push secret commits remote repository draft commits mutable phase public secret like secret commits change commits allowed like public commits pushing pulling allowed tabular form phase commits sharing public immutable allowed draft mutable allowed secret mutable prevented default new commits automatically marked draft draft commit pushed becomes public end note description ignore amazing changeset evolution feature making way current mercurial since blur yet shared nature draft commits perhaps titled post modern mercurial edition phase note hg log unfortunately default hg log output display phase think rather unfortunate understandable backwards compatibility point view last year dedicated whole post template hg log information including reasoning display phase way use phase basic introduction phase way let describe mapped workflow first make new commits start secret phase instead default draft quick addition hgrc phase newcommit secret immediately prevents accidental hg push pushing commits still working recall secret commits pushed least one repository allowed regularly head various workinprogress feature idea without fear accidentally messing public repository started using phase used separate clone get similar thorough protection work commit keeping secret phase feel like done transition draft phase via hg phase point basically telling mercurial later look hg log happy enough commit push depending working may may push immediately would transition commit public phase usually hold pushing commit part series done lastchance sanity check commits note like run hg push without specifying revision push find natural le type always specified revision phase help much ugly repos couple repository use managing assorted data like car gasoline utilization repository commits simple data point addition csv file commit message repetitive oneliners oneliners create rather ugly commit history essence workflow repository see summarized echo datacsv hg commit gas hg push repository found defaulting secret phase rather annoying every commit immediately followed phase change allow push work repos changed newcommit back draft edit reworded sentence mercurial giving way force commit phase based feedback lobster
387,Lobsters,vcs,Git & VCS,Apache Subversion 1.10.0 Release Notes,https://subversion.apache.org/docs/release-notes/1.10.html,apache subversion release note,improved pathbased authorization compatibility new interactive conflict resolver subversion conflict resolver handle incoming move svnconflict compression zlib filesystem format bump configuring repository use compression dumpload compression wire http svn connection shelving experimental issue,improved pathbased authorization subversion provides new implementation pathbased authorization improved performance wildcard support compatibility issue existing authz rule come two flavour repositoryspecific global repos path path rule path always matched literally new authz rule parser support two new form rule may contain wildcards path element glob repos path glob path following wildcard syntax element supported glob rule match single exactly one arbitrary path segment match arbitrary number path segment separated forward slash classic wildcard pattern foo bar work expected including escaping special character backslash wildcards apply full path segment ie never match except case match zero path segment example match path contains least segment equivalent well glob rule required contain wildcards path two section different name may apply path example following two rule identical pathwithoutwildcards glob pathwithoutwildcards new authz rule parser detects reject collision old authz parser subversion earlier allowed syntactic entry grant writeonly access example w new parser flag entry invalid neither old new authz implementation support writeonly access new interactive conflict resolver subversion provides much better interactive resolution tree conflict previous release interactive conflict resolution completely redesigned rewritten new conflict resolver supersedes first implementation introduced subversion new conflict resolver search repository history structural change addition deletion copy move conflict local change working copy cause tree conflict tree conflict described detail including revision number name author conflicting change previous version subversion task finding information left user automating task huge usability improvement new conflict resolver able detect move renames repository history take account modifying local working copy make seamless merging branch possible even one branch rename file directory best result svn client committing repository version higher new conflict resolver avoid asking user resolution option whenever one reasonable course action example file moved another location repository conflict resolver attempt resolve tree conflict behalf user performing move locally necessary allows user focus attention conflict resolved automatically detection move renames involves heuristic detection perfect wo nt work conceivable case detailed description incoming move renames detected see subversion conflict resolver handle incoming move conflict resolver user interface remains largely unchanged like previous release resolver started automatically update merge switch operation end unresolved conflict also started demand running svn resolve command information run svn help resolve installing subversion situation resolving one tree conflict cause new tree conflict appear svn resolve command keep iterating conflict none left user decides quit operation new conflict resolver driven interactively svn resolve subversion client api c language binding noninteractive svnconflict tool intended use shell script new conflict resolver offer variety automated tree conflict resolution option user choose kind tree conflict yet described resolved option available subversion listed table table item incoming local side either file directory case file clash directory handled yet future release subversion continue provide enhancement new conflict resolver expect add coverage additional conflict case add additional resolution option even patch release ie etc local change incoming change operation resolution option edit file change inside directory update switch merge ignore deletion accept deletion update switch merge move merge applies move locally merges item update switch ignore incoming addition discard incoming change merge incoming local item merge ignore incoming addition discard incoming change merge incoming local item item log history trace back local branch replace local item incoming item merge item log history trace back branch edit file change inside directory update switch apply change move destination break move update moved away child update item moved outside moved directory merge apply change move destination edit file change inside directory update switch merge keep working copy state deleted file directory discarding incoming change compression subversion add support compression alternative zlib compression used previous version offer fast compression decompression still maintaining decent compression ratio using compression significantly improve performance subversion read write operation especially repository containing large file compression used default ondisk data repository filesystem format also subversion add support automatic negotiation use compression wire http svn connection supported endpoint filesystem format bump default filesystem format version introduced format bump required allow using compression data stored disk svnadmin info command display filesystem format number repository existing repository upgraded new format svnadmin upgrade command configuring repository use compression repository created subversion existing repository upgraded format default compress new data using compression algorithm also configured explicitly setting compression none zlib option fsfsconf repository configuration file existing repository configured compressionlevel option fsfsconf file continue use zlib compression order start using compression repository consider setting compression option fsfsconf file order speed read write operation existing repository consider recompressing data stored achieved performing full dumpload cycle new format repository created subversion compression wire http svn connection delta transferred subversion client server may compressed actual choice compression algorithm depends used protocol environment configuration see http protocol use compression depends value serverside svncompressionlevel directive clientside httpcompression configuration option network capability compression generally offer much faster compression decompression speed slightly worse compression ratio zlib default preferred low latency network overhead associated transferring additional amount data assumed negligible serverside svncompressionlevel used disable compression altogether special value svncompressionlevel force use compression client support value result preferring zlib compression respective compression level note negotiated algorithm still subject client configuration example even server configured prefer zlib compression client may still negotiate use compression httpcompression option set auto clientside setting httpcompression either yes enable disable compression negotiated based server configuration default value auto result preferring compression low latency network zlib compression otherwise table explaining used compression algorithm combination client serverside configuration option serverwith svncompressionlevel older serverwith svncompressionlevel subversion client default default httpcompression auto low latency none none zlib httpcompression auto high latency none zlib none zlib httpcompression yes none zlib none zlib httpcompression none none none none none older httpcompression yes none zlib zlib none zlib older httpcompression none none none none none default configuration svn protocol use compression depends value serverside c compression option value disables compression entirely value cause zlib compression used time always used preference zlib supported remote end shelving experimental shelving issue ability put aside uncommitted change wc putting shelf order work something else later bring change back wc similar saving patch file created svn diff later applying svn patch following svn command new see help detail svn shelve keeplocal name path svn unshelve keepshelved name svn shelve delete name svn shelf svn shelve list warning shelving feature designated experimental released early form development continues expected change significantly series promise backward compatibility remains experimental
388,Lobsters,vcs,Git & VCS,Why SQLite Does Not Use Git,https://sqlite.org/whynotgit.html,sqlite use git,introduction git fossil git section http fossilscmorgfossildoctrunkwwwfossilvgitwiki edits hacker news reddit lobster http sqliteorgdocsrcfinfopageswhynotgitin reason sqlite use git git provide good situational awareness timeline network commits gitup git make difficult find successor descendent checkin stackoverflow page http sqliteorgsrctimeline example example mental model git needlessly complex writes hn git track historical branch name git requires administrative support git provides poor user experience http fake git man page gituser guide accessing sqlite source code official github mirror official git mirror canonical fossil repository web access sqlite fossil repository sqlite archive fossil access http fossilscmorgfossiluvdownloadhtml http fossilscmorgfossildoctrunkwwwcheckinnameswiki http fossilscmorgfossildoctrunkwwwpermutedindexhtml verifying source code integrity see also,sqlite use git introduction sqlite use git version control system sqlite us fossil instead version control system specifically designed written support sqlite people often wonder sqlite use git version control system like everybody else article attempt answer question also section article provides hint git user easily access sqlite source code article comparison fossil git see http fossilscmorgfossildoctrunkwwwfossilvgitwiki one comparison two system others well article advocating switch project away git use whatever version control system want perfectly happy git mean keep using git wondering nt something better maybe try understand perspective presented use insight thus obtained find write different better version control system make improvement git edits article revised multiple time attempt improve clarity address concern misgiving fix error identified hacker news reddit lobster complete edit history seen http sqliteorgdocsrcfinfopageswhynotgitin usage hint click two node graph diff reason sqlite use git git provide good situational awareness want see happening sqlite dozen project work visit timeline single screen see quick summary latest change branch click drill see much detail want even phone github gitlab offer nothing comparable closest found network slow render unless already cached offer nearly much detail scarcely work mobile commits view github provides detail render quickly work mobile show single branch time easily know seen recent change even githubgitlab offer better interface thirdparty service core part git hence using introduces yet another dependency project told git user commonly install thirdparty graphical viewer git many better job showing recent activity project great still thirdparty application must installed managed separately many platformspecific one better one gitup work mac example require first sync local repository bring graphical interface desktop even still see typically want see without multiple click checking project status phone away office option git make difficult find successor descendent checkin git allows go backwards time easily given latest checkin branch git let see ancestor checkin git make difficult move direction given historical checkin quite challenging git find came next done sufficiently difficult people rarely common interface git github support ability impossible find descendent checkin git merely difficult example stackoverflow page showing command sequence finding descendent checkin unix git revlist parent grep awk print command sequence lot memorize type one would want create bash alias short shell script used frequently furthermore quite thing command give one list descendent without showing branching structure important understanding happened contrast fossil offer display http sqliteorgsrctimeline tremendous help analyzing aftermath historical change really finding descendent checkin time time fact descendent readily available fossil mean information pervades web page provided fossil one example every fossil checkin information page example show small context graph immediate predecessor successor checkin help user maintain better situational awareness provides useful capability ability click forward next checkin sequence another example fossil easily show context around specific checkin example help promote situational awareness deeper understanding happening code possible git given right extension tool using right command easy rarely get done consequently developer le awareness happening code mental model git needlessly complex complexity git distracts attention software development user git need keep following mind working directory index staging area local head local copy remote head actual remote head git command andor option command moving comparing content location contrast fossil user need think working directory checkin working le distraction every developer finite number braincycles fossil requires fewer braincycles operate thus freeing intellectual resource focus software development one user git fossil writes hn fossil give peace mind everything synced server single command never get peace mind git git track historical branch name git keep complete dag checkin sequence branch tag local information synced retained branch close make review historical branch tedious example suppose someone perhaps customer asks ever became prefercoroutinesortsubquery branch two year ago might try answer query consulting history version control system thusly fossil view clearly show branch eventually merged back trunk show branch started show two occasion change trunk merged branch github show none fact github display mostly useless trying figure happened many reader recommended various thirdparty gui git might better job showing historical development activity maybe work better native git andor github though hampered fact git preserve historical branch name across syncs even tool better fact necessary go thirdparty tool get information desired speak well core system git requires administrative support git complex software one need installer kind put git developer workstation upgrade newer version git setting git server nontrivial user use thirdparty service github gitlab thus introduce additional unnecessary dependency project contrast fossil single standalone binary installed putting path one binary contains functionality core git also github andor gitlab manages community server wiki bug tracking forum provides packaged downloads consumer login management forth extra software required le administration mean programmer spend time working software sqlite case le time fussing version control system git provides poor user experience following http cartoon exaggeration yet hit close home let real people seriously dispute git provides suboptimal user experience lot underlying implementation show user interface interface bad even parody site generates fake git man page designing software hard take lot focus good version control system provide developer assistance frustration git gotten better regard past decade still long way go gituser guide accessing sqlite source code devoted git user still easily access sqlite section give hint official github mirror official git mirror sqlite source github mirror incremental export canonical fossil repository sqlite cronjob update github repository hour oneway readonly code mirror pull request change accepted via github github repository merely copy content fossil repository change input via fossil hash identify checkins file git mirror different hash fossil many reason chief among fossil us hash whereas git us hash export original fossil hash checkin added footer checkin comment avoid confusion always use original fossil hash git hash referring sqlite checkins web access sqlite fossil repository contains link downloading tarball zip archive sqlite archive historical version sqlite url downloads simple incorporated easily automated tool format http sqliteorgsrctarballversionsqlitetargz simply replace version description version downloaded version prefix cryptographic hash name specific checkin name branch case recent version branch fetched tag specific checkin like http get latest release use release version like http sqliteorgsrctarballreleasesqlitetargz get latest trunk checkin u trunk version http sqliteorgsrctarballtrunksqlitetargz forth zip archive sqlite archive simply change tarball element either zip sqlar maybe also change name download file zip sqlar suffix fossil access fossil easy install use step unix window similar download selfcontained fossil executable http fossilscmorgfossiluvdownloadhtml put executable somewhere path mkdir fossil fossil clone http sqliteorgsrc fossilssqlitefossil mkdir sqlite cd sqlite fossil open fossilssqlitefossil point ready type configure make window msvc nmake f makefilemsc change checkout different version fossil use update command fossil update version use trunk version get latest trunk version sqlite use prefix cryptographic hash name name branch tag see http fossilscmorgfossildoctrunkwwwcheckinnameswiki suggestion name used version use fossil ui command within sqlite checkout bring local copy website additional documentation fossil found http fossilscmorgfossildoctrunkwwwpermutedindexhtml afraid explore experiment without login wo nt able push back change make damage project verifying source code integrity need verify sqlite source code authentic modified way perhaps adversary done using simple commandline tool root sqlite source tree file named manifest manifest file contains name every file source tree together either hash file used older file newer file write script extract hash verify source code file hash name checkin hash manifest file see also page talk fossil git include
389,Lobsters,vcs,Git & VCS,Learn Git Rebase Interactively (and Safely),https://zwischenzugs.com/2018/04/05/learn-git-rebase-interactively/,learn git rebase interactively safely,interactive tutorial run tutorial pip docker video feature submits current state checking hint restores state skip current stage problem like post might like learn git hard way learn bash hard way docker practice like,ever wondered rebase could try read understand man page many people struggle among man page improved lately still daunting casual user effective way learn thrown deep end forced work unfortunately terrible way learn panicked breaking something way understand came interactive tutorial run learn rebase run tutorial running tutorial two dependency pip docker run pip install shutit might need sudo depending pip setup git clone http githubcomianmiellgitrebasetutorial cd gitrebasetutorial runsh video demo action feature point hit button combination hit time ctrl key first ctrl submits current state checking ctrlh give hint ctrlg restores state tutorial pristine state stage ctrls skip current stage tutorial ctrlq quits shutit session problem raise issue reproduce runsh l debug post output ideal like post might like learn git hard way learn bash hard way docker practice get docker practice code like like loading related
390,Lobsters,vcs,Git & VCS,Git from the Bottom Up,https://jwiegley.github.io/git-from-the-bottom-up/,git bottom,introduction repository repository index index working tree working tree commit commit branch branch tag tag master head head,introduction welcome world git hope document help advance understanding powerful content tracking system reveal bit simplicity underlying however dizzying array option may seem outside dive term mentioned first since appear repeatedly throughout text repository repository collection commits archive project working tree looked like past date whether machine someone else also defines head see identifies branch commit current working tree stemmed lastly contains set branch tag identify certain commits name index unlike similar tool may used git commit change directly working tree repository instead change first registered something called index think way confirming change one one commit record approved change find helpful call instead staging area instead index working tree working tree directory filesystem repository associated typically indicated presence subdirectory within named git includes file subdirectory directory commit commit snapshot working tree point time state head see time commit made becomes commit parent creates notion revision history branch branch name commit much said commits moment also called reference parentage commit defines history thus typical notion branch development tag tag also name commit similar branch except always name commit description text master mainline development repository done branch called master although typical default way special head head used repository define currently checked checkout branch head symbolically refers branch indicating branch name updated next commit operation checkout specific commit head refers commit referred detached head occurs example check tag name usual flow event creating repository work done working tree work reach significant point completion bug end working day moment everything compiles add change successively index index contains everything intend commit record content repository simple diagram show typical project lifecycle basic picture mind following section shall attempt describe different entity important operation git
391,Lobsters,vcs,Git & VCS,A Plumber's Guide to Git,https://alexwlchan.net/a-plumbers-guide-to-git/,plumber guide git,pycon uk cambridge python user group pycon uk xkcd like run workshop meetup conference workplace send email name workshop work git object store idea tree creating commits final part conclusion,last updated march writeup workshop run several time first pycon uk recently cambridge python user group also run pycon uk workplace premise git key part many modern development workflow complexity idiosyncratic user interface mean reputation magic black box actually work git randall munroe xkcd phrase graph theory tree model mean much people aim workshop get understanding underlying concept git workshop learn exactly happens typical git workflow add branch commit look inside git directory end workshop able describe internal working git much enjoy giving workshop person think work best way everywhere people actually meet written note exercise work home like run workshop meetup conference workplace send email name git divide command porcelain plumbing porcelain ceramic material usually used make sink toilet plumbing actual pipe carrying water porcelain fixture provide humanfriendly interface plumbing manner porcelain git command humanfriendly highlevel command plumbing command used directly manipulate git internals time work entirely porcelain command workshop spend lot time using plumbing command peer underlying git machinery workshop work workshop divided four section usually short demo explain new idea give exercise everybody work computer done discus learnt move next section typically take two hour want follow along need computer git text editor installed everything done git command line gui part introduces git object store explains store individual file git part add idea tree allow u take snapshot entire repo part add context snapshot creating commits final part give humanreadable label commits finally short conclusion recap entire workshop
392,Lobsters,vcs,Git & VCS,Putting the I back in IDE: Towards a Github Explorer,https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/,putting back ide towards github explorer,iron git github could look like truly deep editor integration slick new github integration lifecycle pull request feature explorer code review us sophisticated algebra go fork prosper,imagine system editing reviewing code every branch every repo get sandboxed directory revision history branch including uncommitted stuff persisted build artifact switch context project left within editor pull global view branch outstanding pull request pull request assigned review one keystroke view summary pull one start editing file right cursor code review happens entirely within editor fed series diffs one keystroke approve one keystroke start editing dive make change leave comment author push move actually developed workflow jane street used daily hundred engineer two year feel like integrated development environment supposed feel like making software today much collaboration writing code developer forced switch editor web browser read someone else code switch back want play code review take place browser inconvenient often shallower really understand piece code build run explore hand editor system built jane street designed make level engagement seamless trouble pretty coupled somewhat uncommon toolchain use mercurial revision control instead submitting pull request github submit feature iron code review system wrote ocaml tie together use ui called feature explorer built top emacs goal post show result look like show kind workflow possible hope inspires similar tool ecosystem truth writing code work way start wish something similar home nothing quite like git github editor like vim textmate v code git github could look like truly deep editor integration walk around office one window see open every developer screen todo feature explorer top feature assigned review feature note call everything feature really come two flavor feature ready review equivalent pull request feature privately hacking away equivalent branch look pretty dull even actually lot power notice feature indented bit belong different repository create new repo new branch within existing repo need move cursor appropriate line hit c navigating across repos cheap navigating across branch drill feature see page like one see github pull request github pull request would look like feature explorer feature course difference page buffer editor mean hit enter instead getting list inert diffs web browser get diffs take single keystroke line changed loaded right editor file looking global copy file branch think already feature sandbox change make relative feature tip revision affect feature worth dwelling second hit enter time performed four step radically different level used githubesque code review tool get overall view feature pull request including file change used gitesque revision control tool check git checkout specific repo branch pull request used file system switch relevant directory repo branch live cd compile run test manage revision history etc within sandbox used editor load file care buffer actually make change use code completion level blended seamlessly distinction fall away navigate feature feature worry file system revision thinking code looking get used thinking world term repository branch directory term feature ie unit functionality make almost trivial switch context let say want bring coworker pull request completely different repo split emacs window navigate global todo cursor feature enter enter got diff underlying file loaded buffer make change file push run build coworker change etc without affecting anything feature everything touch sandboxed world pull request done close window get back literally never leave editor might think hey atom slick new github integration thing atom github integration much improvement whole lot browser window happens inside editor navigating pull request inside github window change disk navigate repo repo right editor pull file exact state pull request wish functionality existed everywhere people write code lifecycle pull request feature explorer let go back main todo create new feature like creating new branch git pull request github time hit c give feature name specifying repo part hit enter already iron created workspace new feature hood workspace managed using mercurial extension called shareextension git equivalent would multiple clone repo disk way work jane street user workspace directory disk workspacesrepoclone full clone repo work share directory small hg directory compared main clone one version share directory mostly made pointer clone directory since workspace literal directory disk cd ing go one get totally independent workspace create file run build back main todo see feature created list feature next step column feature bunch different state might currently review case see many reviewer left might ready release code reviewed approved right permission hit rl release ie merge pull master might brand new waiting add code enable review feature review enabled like branch privately working rather pull request visible people get start hacking feature red failing build yellow one review green one ready release white one work progress add file newly created pull request nav main page use editor keybindings create new file notice root directory changed workspacesrepobranchshare sandbox submit pull request need enable review ie hit e feature main page suddenly feature publicly visible show people todos neat workflow easy disable review say someone comment code review led major rethink approach feature go quiet hack hack hack reenable ready show code world code review put code review top todo color yellow bit nudge idea someone else code almost fully baked almost ready released basically haironfire priority compared code started writing worth interrupting want get code review quickly possible work feature explorer review matter going global todo hitting enter one feature assigned pressing r bring screen like line represents patch review hit enter read actually lot intelligence behind screen code review system iron us sophisticated algebra calculate diffs show reviewer based already reviewed merges rebases meantime like point emphasize right editor like see given patch hit r approve understand want leave comment open file pressing e file opened editor featurespecific sandbox feature explorer even put cursor exactly line affected patch jane street reviewer leave note literal comment code distinguished special designation cr beginning comment assign cr resolve etc editing comment text using special simple syntax code review conversation take place code using special cr comment pending cr show assigned user todo system might seem primitive compared github inbrowser commenting ui mean code review entirely within editor since feature explorer tightly integrated code review system trivial bring people mix assign someone cr feature part immediately show todo go fork prosper nothing special mercurial iron even emacs make system possible extensible editor like vim atom v code textmate could support core ui deep integration git already exist editor github api powerful enough support ironlike code review system highestimpact part way simplest example part let navigate github pull request file specific branch local disk already got clone repo branching cheap creating sandboxed directory cheap good enough internet connection listing pull request file affect cheap one thing found system really click code review server rest mostly editor glue system work well u sometimes happens piece proprietary software built long time really work u one hope idea intriguing enough encourage development elsewhere
394,Lobsters,vcs,Git & VCS,git log – the Good Parts,https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/,git log good part,bold learn git hard way example git repository git clone http cd original git log git log oneline git log oneline decorate git log oneline decorate git log oneline decorate graph panic like post like book learn git hard way cover much similar style git log oneline decorate graph simplifybydecoration file info regex commits like post like book learn git hard way cover much similar style liked post check five key git concept explained hard way create git diagram ten thing wish known bash noncloud serverless application pattern using git docker like,managing complex git codebase multiple developer may well using tool like github bitbucket delve history figure branch merge issue gui great providing nice user interface managing pull request simple history like workflow shtf substitute using git log relatively littleknown flag really dig situation going run know got type command bold follow based material book learn git hard way free sample available example git repository run download fairly typical git repository work git clone http cd nb copy original repo frozen provide stable output git log git log vanilla log command probably already familiar git log commit author ian miell ianmiell gmailcom date sat mar pip commit author ian miell ianmiell gmailcom date sat mar ignore commit author ian miell ianmiell gmailcom date sat mar latest output line per commit date author commit message id go reverse time order make sense case mostly interested happened recently note output vary depending version alias whether outputting terminal version oneline time care author date order see per screen use oneline show commit id comment percommit git log oneline jenkinsfile upgrade jenkinsfile default master multibranch jenkins build merge branch master githubcom merge branch master githubcom decorate might want information though like branch commit tag decorate flag provides git log oneline decorate head master originmaster originhead jenkinsfile upgrade jenkinsfile default master multibranch jenkins build merge branch master githubcom recent version git put terminal default thing improving finger remember version might decorate default fir git log output go terminal instead file git log oneline decorate head master originmaster originhead jenkinsfile upgrade jenkinsfile default master multibranch jenkins build merge branch master githubcom doc known issue added upgrade doc originfirstetcd firstetcd firstetcd firstetcd check originiptablesfix iptablesfix retry added iptables prevent race condition iptables update merge branch development see compare oneline dig around figure great would great visual representation graph graph give visual representation terminal might look slick git gui benefit consistently viewed anywhere much configurable specific need trying piece together happened project rebase git log oneline decorate graph head master originmaster originhead jenkinsfile upgrade jenkinsfile default master multibranch jenkins build merge branch master githubcom merge branch master githubcom jenkinsfile quick mode info level jenkinsfiles divided separate job jenkinsfile upgradesspecific jenkinsfile added add logic additional fw master node update utilsatomic fix issue etcd add missing fw httpd missing fix rubocop panic hard newcomer parse little guide tip make much easier read indicates commit line detail commit commit id first line comment right hand side line position indicate lineage parentage change take three line example merge branch master githubcom jenkinsfile quick mode info level green pipe indicate two change listed going another branch gap two change blue line take one parent merge commit id blue parent pink one go parent commit worth taking bit time figure going pay dividend crisis like post like book learn git hard way cover much similar style simplifybydecoration looking whole history project want get feel shape diving may want see significant point change ie line affected remove commit tagged branched ie reference root commit always git log oneline decorate graph simplifybydecoration head master originmaster originhead jenkinsfile upgrade originfirstetcd firstetcd originiptablesfix retry added iptables prevent race condition iptables update originnewlogicupgrade fix issue iwith kitchen remove sensitive output first commit try tagging specific commit listed rerun command file info using oneline bit sparse stat give useful information changed number indicates number line changed insertion represented sign deletion concept change line old line deleted new one added even one character changed git log oneline decorate graph stat head master originmaster originhead jenkinsfile upgrade jenkinsfileupgrades file changed insertion deletion jenkinsfile default master multibranch jenkins build jenkinsfilefull jenkinsfileupgrades file changed insertion deletion find stat hard remember alternative use nameonly lose information number change file regex commits one also really handy g flag allows search commits return commits file whose change include regexp one example look change contain text chefclient git log g chefclient graph oneline stat fix script deploying origin scriptsorigindeploysh file changed insertion deletion move origindeploysh script folder enable httpd startup origindeploysh scriptsorigindeploysh file changed insertion deletion add mit licence model add script auto deploy origin instance origindeploysh file changed insertion ever spent age searching git log patch output looking specific change eccentricallynamed pickaxeall give information file changed commit rather one matched regexp commit git log g chefclient graph oneline stat pickaxeall try like post like book learn git hard way cover much similar style liked post check five key git concept explained hard way create git diagram ten thing wish known bash noncloud serverless application pattern using git docker like like loading related
396,Lobsters,vcs,Git & VCS,Mercurial 4.6 sprint report,https://groups.google.com/forum/m/#!topic/mozilla.dev.version-control/74G6kHO0Mf8,mercurial sprint report,,use google group discussion please enable javascript browser setting refresh page
397,Lobsters,vcs,Git & VCS,GitLab 10.6 released with CI/CD for GitHub and deeper Kubernetes integration,https://about.gitlab.com/2018/03/22/gitlab-10-6-released/,gitlab released cicd github deeper kubernetes integration,developer enterprise analyst endtoend play well others cicd integration github integrate cicd external repos gitlabcom gitlabcom add runner acquired gemnasium shipped gemnasium feature kubernetes cluster integration gke integration general availability deploy gitlab runner connected kubernetes cluster single click monitor connected kubernetes cluster within gitlab see ip address ingres controller connected kubernetes cluster join u upcoming event month valuable person mvp takuya noguchi redesigned extremely useful branch page key feature released gitlab gitlab cicd external repos gitlab cicd github repository cicd external repo github manually enable gitlab cicd quick deploy gitlab runner kubernetes cluster kubernetes cluster monitoring deploy board ingres ip address kubernetes cluster page install ingres maintainer push mr fork allow edits maintainer single group issue board core free improvement gitlab sast security report pipeline view static application security testing sast cicd pipeline external authorization control external cicd configuration starter bronze include external cicd configuration file navigate external issue tracker label epic epic api discussion api future release filipino indonesian turkish language support translation community gitlab runner changelog performance improvement sast javamaven apps static application security testing sast complete list supported language framework authentication support dast dynamic application security testing dast review app branch overview takuya noguchi contribution project importexport api travis miller contribution gitlab chatops alpha merge request approval api business custom metric gitlab promql query cloud native gitlab helm chart alpha helm known issue limitation gitlab premium object storage support core omnibus improvement mattermost security update deprecation mattermost configuration change core configuration setting passed environment variable gitlab legacy helm chart helm chart helm chart cloud native gitlab chart installing gitlab kubernetes march upgrade barometer upgrading geo changelog installing download gitlab page updating update page gitlab subscription plan selfmanaged cloud saas selfmanaged core starter premium ultimate cloud saas gitlabcom free paid subscription free free public project gold bronze silver gold,continuous integration continuous delivery continuous deployment form backbone modern devops gitlab feature builtin cicd received lot positive attention developer enterprise analyst alike one thing missing could nt use gitlab cicd github â well today fixed gitlab work best use endtoend also seek play well others spirit added cicd integration github generally ability integrate cicd external repos like bitbucket well see four primary audience functionality designed forâ public open source project github take advantage free cicd gitlabcom part commitment open source offer public project highest tier feature gold free cicd vendor limit running handful concurrent job gitlabcom give open source project hundred concurrent job free ci pipeline minute per month talk largest customer tell u often many team using many different tool want standardize gitlab cicd code stored gitlab github repos feature allows enterprise use common cicd pipeline across different repos key audience made cicd github part selfhosted premium plan gitlab designed use scm cicd application understand appeal using gitlab cicd github version control next year making gitlab cicd github feature part gitlabcom free tier mean anyone using github personal project startup smbs use gitlab cicd free starting free ci pipeline minute per month folk also add runner upgrade plan get recently acquired gemnasium super excited great team join rank also want take care folk using gemnasium provide migration path already shipped gemnasium feature part builtin security scanning gitlab cicd github allows gemnasium customer using github gemnasium begin using gitlab cicd security need without needing migrate code gitlab continues invest integrating containerization release kubernetes cluster integration gke integration general availability release make even easier user use kubernetes gitlab deploy gitlab runner connected kubernetes cluster single click also monitor connected kubernetes cluster within gitlab also see ip address ingres controller connected kubernetes cluster right inside gitlab join u upcoming event month valuable person mvp takuya noguchi mvp takuya noguchi takuya implemented redesigned extremely useful branch page gitlab making much easier manage active versus stale branch especially large project many ongoing branch thank takuya contribution sent takuya gitlab swag thank including hoodie sock handmade tanuki key feature released gitlab gitlab cicd external repos gitlab started code repo alone since built application entire devops lifecycle includes rich capability testing security packaging deployment monitoring newest release use gitlab ci even cd monitoring application code hosted external repo use gitlab cicd github repository create new gitlab project cicd external repo tab click github sign select github repo add gitlabciyml file repo enable auto devops gitlab automatically run pipeline update commit status github also connect git repo via url configure status webhooks manually example using bitbucket read manually enable gitlab cicd celebrate release offering feature promotionally part gitlabcom free march quick deploy gitlab runner kubernetes cluster gitlab give ability interact kubernetes cluster also allows easy installation application leveraged project gitlab add ability deploy gitlab runner directly cluster single click automatically available run job project without configuration needed kubernetes cluster monitoring kubernetes provides great way developer easily deploy manage application without worrying software running still important however manage overall cluster capacity balance room growth versus underutilized compute cost gitlab make easy directly showing current available compute resource connected cluster example deploy board showing pod failing start user simply check cluster metric confirm resource exhausted ingres ip address kubernetes cluster page gitlab released ability install ingres kubernetes cluster installed ingres provides public ip address allows external access deployed application gitlab see ip address assigned ingres controller directly kubernetes page ui use configure domain name access application internet maintainer push mr fork forking workflow common open source project like gitlab contributor submit merge request fork project back upstream project reviewing merge request fork maintainer upstream project make small fix rebase merging reducing back forth accepting community contribution course maintainer limited small fix help adding large commits merge request prior release maintainer could directly contribute merge request fork since maintainer automatically receive write permission fork release merge request author write access source branch merge request grant maintainer write access source branch merge request enabling allow edits maintainer merge request enabled user merge permission target branch upstream project able push source branch merge request default turned single group issue board core free group issue board allows manage issue multiple project see issue project within group within interface move across workflow stage one interface feature previously available exclusively premium ultimate tier user tier found useful gitlab core user also asked feature said providing one group issue board would great addition workflow shipped release core starter instance one group issue board per group multiple group issue board remain reserved premium ultimate correspondingly gitlabcom free bronze also one group issue board per group multiple group issue board continuing gitlabcom silver gold think add significant value core gitlabcom free tier help even user better evaluate provide feedback feature improvement gitlab sast security report pipeline view release ago shipped static application security testing sast automatically find vulnerability new code change merge request allows fix merging ensuring security problem introduced nto master released production release information available complete sast security report cicd pipeline page allows developer productionsystems engineer security stakeholder even visibility security risk code progress cicd external authorization control regulated environment project classification system used control access project used gitlab enabled admins set classification project addition gitlab access control access project also require approval external authorization service external cicd configuration starter bronze gitlab added ability include external cicd configuration file main gitlabciyml project feature available premium user selfhosted gitlab silver user gitlabcom received lot feedback customer asking u move lower tier excited bring feature even user release making available starter user selfhosted gitlab bronze user gitlabcom ability centralized control pipeline configuration reuse definition multiple project something valuable enterprise smaller business well note part commitment open source public project free gitlabcom feature equivalent gold level subscription public project continue feature navigate external issue tracker team use gitlab integrated external issue tracker example jira issue integrated gitlab merge request popular workflow many team scenario gitlab issue still function normal team free use example separate oneoff scenario team want everything gitlab streamline integration added new link project navigation configured external issue tracker redmine jira bugzilla custom issue tracker separate link project navigation allows quickly navigate external system gitlab issue link remains confusion also allows use issue tracker want label epic gitlab issue merge request support label enable flexible highly customizable management object effective design also brought epic release assign group label epic sidebar epic exactly issue merge request filter label epic list page group like issue merge request user gitlab thus find feature immediately recognizable allows easily mix match epic different category based powerful search filter bar epic api along label support mentioned maintained parity api support epic get list epic based search filter parameter search filter bar web ui epic page includes searching epic title description filtering author label ordering timestamps discussion api release brought api support discussion issue snippet epic mean comment discussion issue accessible via api team leverage api flexible customized specific workflow necessarily main gitlab web ui api support comment discussion merge request also come future release filipino indonesian turkish language support part ongoing effort internationalize gitlab added support filipino indonesian turkish translation also externalised string repository locked file premium list page allowing translation community add language string gitlab interested contributing internationalization effort welcome join translation community gitlab runner also releasing gitlab runner today gitlab runner open source project used run cicd job send result back gitlab interesting change list change found gitlab changelog performance improvement noteworthy performance improvement gitlab include sast javamaven apps prior release gitlab already supported popular language ruby python javascript part static application security testing sast feature gitlab adding maven common build automation tool java already using sast need change anything configuration get new check automatically available see complete list supported language framework authentication support dast release ago shipped dynamic application security testing dast allowing check security vulnerability dynamically automatically review app version workinprogress code merged master released production previously feature limited public page release specify credential dast use authenticate web app simulate attacker able access section protected login process branch overview project team grow number branch new branch overview filtered branch list make easy quickly find branch looking branch commit added last three month shown active thank takuya noguchi contribution project importexport api project extremely important gitlab since contain valuable work including git repo organization including issue merge request team using existing project export import feature gitlab project easily transferred within instance manual process release project export import part gitlab api allowing even automated flexible workflow need move project within gitlab instance thank travis miller contribution gitlab chatops alpha many organization much communication including operation troubleshooting discussion moving chat also typically toolbox containing frequently used command check health environment perform routine action gitlab wanted make easy automate routine action well bring slack getting started easy adding job gitlab ci yml enabling slack slash command integration user able interact typing slash command ci job name passing relevant argument job executed runner output sent right back slack merge request approval api prior release merge request approval api limited approving unapproving merge request release fully configure approval project level merge request level giving user feature parity gitlab web ui approval api team create elaborate code review approval workflow specific need use much little api needed customize part workflow happen inside gitlab web ui part happen outside business custom metric since gitlab developer able monitor critical system response metric deployed apps like throughput latency cpumemory utilization provided great baseline understanding user experience customer receiving well resource utilization directly tool use every day gitlab added ability add metric allowing deeper introspection application business example metric credit card processing module added tracking success rate also revenue order size help surface failure may result http error well ultimate impact business performance get started simply provide prometheus promql query begin display dashboard cloud native gitlab helm chart alpha excited announce cloud native gitlab helm chart alpha available testing chart feature cloud native architecture container component gitlab requirement shared storage change result increased resilience scalability performance gitlab kubernetes important note chart container still active development contain known issue limitation used production release gitlab premium required work bring object storage support core omnibus improvement gitlab mattermost includes enhanced image preview thumbnail faster load time upgraded desktop app security update upgrading recommended chef updated omnibus updated postgresql updated python updated jemalloc updated announceip announceport configurable redissentinel better support ha docker environment deprecation mattermost configuration change release gitlab number mattermost configuration option supported within gitlabrb reduced continue support core configuration setting necessary run mattermost set integration gitlab going forward configuration setting set directly within mattermost console passed environment variable presently two application attempting write config file change lost deprecation date gitlab legacy gitlab helm chart legacy gitlab helm chart deprecated installation kubernetes today recommend beta gitlabomnibus helm chart new cloud native gitlab chart development increased scalability resilience benefit chart replace existing chart generally available later year information gitlab helm chart please read documentation installing gitlab kubernetes deprecation date march upgrade barometer upgrade gitlab latest version downtime required release migration postdeploy migration gitlabcom migration took approximately minute postdeploy migration accounted minute gitlab geo user please consult documentation upgrading geo changelog please check changelog see named change installing setting new gitlab installation please see download gitlab page updating check update page gitlab subscription plan gitlab available selfmanaged cloud saas option selfmanaged deploy onpremises favorite cloud platform core small team personal project gitlab trial unlimited time starter colocated team project need professional support premium distributed team need advanced feature high availability support ultimate enterprise want align strategy execution enhanced security compliance cloud saas gitlabcom hosted managed administered gitlab free paid subscription individual team free unlimited private repository unlimited collaborator project private project get access free feature public project get access gold feature bronze team need access advanced workflow feature silver team need robust devops capability compliance faster support gold great many cicd job every public project get feature gold free irrespective plan
398,Lobsters,vcs,Git & VCS,"Writing a git-dit web frontend with gotham, libgitdit and love",https://beyermatthias.de/blog/2018/03/16/writing-a-git-dit-web-frontend-with-gotham-libgitdit-and-love/,writing gitdit web frontend gotham libgitdit love,writing gitdit web frontend gotham libgitdit love libgitdit gitdit failed thesis let work yet work screenshots conclusion github,writing gitdit web frontend gotham libgitdit love love rust language love library ecosystem rust community provides let start beginning libgitdit friend mine developed library distributed issue tracking git commandline frontend library project gitdit got rather good portion attention hackernews reddit course github ranking star github successfull piece software co authored far development sleep right really unfortunate number unresolved issue despite software usable today failed thesis friend proposed bachelor thesis university writing webviewer gitdit master student also offered supervise thesis last semester thesis assigned happy started today rather day ago happy anymore got endresult able compile yay starting even able open web page know port use looking source able figure part unfortunately everything tried via web frontend failed nothing happened able see issue anything else viewing git configuration possible least thing cared figured hard bachelor student half year time must hard guess let started gitditweb viewer tracked time took implement mean hard webdev zero experience rust web framework never touched one experience cs view bit used blog course also experience j hard turn hard proud present first prototype hour implementation time time sum week gitditwui wk date day tag start end time total thu gitditwui gitditwui fri gitditwui gitditwui work yet course first prototype following thing work yet filtering issue openclosed metadata showing issue opened one specific author show message tree currently linear timestamp graph issuesperdate nicetohave showing commits automatically detecting git hash message linking appropriate issuecommit abbreviating git hash message everywhere else configuration port repository path readonlyrw error handling thing go wrong show error page rather nothing work thing also work course message rendered markdown listing issue metadata showing issue including reply showing single message landing page statistic issue look rather good thanks bulma cs framework despite beeing clionly guy without webdev experience screenshots screenshots showing issue gitdit repository conclusion course opensourced code github licensed done quite sure student month time implementing
399,Lobsters,vcs,Git & VCS,A fork on Github is no fork,https://www.niels-ole.com/ownership/2018/03/16/github-forks.html,fork github fork,github may block access repos nothing upstream documentation copy term service update article page another page hacker news,github may block access repos nothing year ago made project friend collaborated github private repo finished project forked able still access independently still unlimited private repos friend let premium account student expire original repo inaccessible expected recently needed code snippet project visited fork greeted fork inaccessible upstream repo disabled judging wording mistake wanted access repo needed convince friend buy premium maybe misinterpreted fork work look documentation fork copy repository mistake access fork copy reference probably recourse github legititimetly access repo term service github right suspend terminate access part website time without cause without notice effective immediately github reserve right refuse service anyone reason time much luckily found old local copy project taught rely github storage code tried contacting customer support appears official policy would expect change update someone pointed article page actually documented page also another page mention private fork inherit permission structure upstream parent repository decision reasoning help owner private repository maintain control think strawman argument long clone repo owner repo real control distribution code current behaviour user hostile discus hacker news
400,Lobsters,vcs,Git & VCS,Five Key Git Concepts Explained the Hard Way,https://zwischenzugs.com/2018/03/14/five-key-git-concepts-explained-the-hard-way/,five key git concept explained hard way,git man page generator linkedin hard way learn git hard way reference head tag branch remote reference always point git repository tag reference point specific commit branch like tag move head move type mkdir lgthworigin cd lgthworigin git init echo afile git add afile git commit firstcommit git log oneline decorate graph git branch otherbranch git tag firstcommittag git log oneline decorate graph echo afile git commit secondcommit git checkout otherbranch git log oneline decorate graph echo afile git commit thirdcommit git log oneline decorate graph detached head git checkout firstcommittag remote reference cd git clone lgthworigin lgthwcloned cd lgthwcloned git remote v git log oneline decorate graph git branch git checkout master cd lgthworigin git checkout master echo originchange afile git commit change origin cd lgthwcloned git fetch origin like post like book learn git hard way cover much similar style fast forward originmaster change origin head master secondcommit git merge originmaster git log oneline decorate graph rebase cd lgthworigin echo originchangerebase afile git commit origin change rebase git log oneline decorate graph cd lgthwcloned echo clonedchangerebase anewfile git add anewfile git commit cloned change rebase anewfile git log oneline decorate graph git fetch origin git log oneline decorate graph git rebase originmaster git log oneline decorate graph liked post like book learn git hard way cover much similar style liked post might also like create git diagram git serverless pattern power git log graphing interactive git rebase bisect tutorial like,ever read git man page know trying understand git intimidating experience even git man page generator produce joke git page upstream specified upstream configured branch name remote branch name merge option used see gitconfig detail forkpoint option assumed currently branch current branch configured upstream rebase abort gitlandremote land applied remote packed applied branch various case possibility filterbranched error must prevent staged cleaning named stage one extract joke one five core git concept explained hopefully reading man page start make sense confused one missed contact write ianmiell linkedin post us hard way method teach concept type command think going without worry breaking anything use method teach git book learn git hard way reference many know already need make sure know fundamental reference string point commit four main type reference head tag branch remote reference head head special reference always point git repository checked branch pointed last commit branch checked specific commit pointed commit check tag pointed commit tag every time commit head referencepointer moved old new commit happens automatically going hood tag tag reference point specific commit whatever else happens unlike head tag stay pointed commit originally pointed branch branch like tag move head move one branch time type command explain going take time mkdir lgthworigin cd lgthworigin git init echo afile git add afile git commit firstcommit git log oneline decorate graph git branch otherbranch git tag firstcommittag git log oneline decorate graph echo afile git commit secondcommit git checkout otherbranch git log oneline decorate graph echo afile git commit thirdcommit git log oneline decorate graph explain someone else going remote reference remote reference reference code another repository see detached head know head understanding detached head much easier detached head git repository checked branch associated continuing listing type git checkout firstcommittag get scary message note checking firstcommit detached head state look around make experimental change commit discard commits make state without impacting branch performing another checkout want create new branch retain commits create may later using b checkout command example git checkout b newbranchname head firstcommit follow instruction git log oneline decorate graph git checkout b firstcommitbranch git log oneline decorate graph figure going tag branch commit head detached branch remote reference remote reference reference commit another git repository cd git clone lgthworigin lgthwcloned cd lgthwcloned git remote v git log oneline decorate graph log graph look different compare log output folder think differ word see multiple time output see cloned repo copy branch firstcommitbranch tag firstcommit repository head cloned git branch show branch visible repository local remote compare output command original folder differ check local master git checkout master get message saying branch master set track remote branch master origin switched new branch master got local reference master track master remote repository local reference master remote reference originmaster git assumed meant local master track remote master two branch look linked configuration repository cd lgthworigin git checkout master echo originchange afile git commit change origin go back cloned repository fetch change origin cd lgthwcloned git fetch origin git log oneline decorate graph see happened local master branch happened origin separate note git pull change git pull fetch merge want confuse skipping step making look like magic fact git pull best avoided learning like post like book learn git hard way cover much similar style fast forward git log graph looked like originmaster change origin head master secondcommit originotherbranch thirdcommit tag firstcommittag originfirstcommitbranch originhead firstcommitbranch firstcommit id may differ otherwise see change origin commit branched local headmaster commit secondcommit straight line firstcommit tag mean merge originmaster local master git figure need move head master reference originmaster branch merge job done git merge originmaster git log oneline decorate graph fast forward git saw need merging fast forward reference point merging prefer move pointer along rather create new merge commit git pull way git pull consists git fetch git merge breaking two step help reduce mystery thing go wrong exercise finishing article whole exercise make change originmaster master fetch merge see happens fastforward possible rebase master originmaster sync run command see rebase cd lgthworigin git status echo originchangerebase afile git commit origin change rebase git log oneline decorate graph ok far made change master origin repo cd lgthwcloned echo clonedchangerebase anewfile git add anewfile git commit cloned change rebase anewfile git log oneline decorate graph git fetch origin git log oneline decorate graph git rebase originmaster git log oneline decorate graph see happened close look last two git log output rebase take set commits move rebases another commit liked post like book learn git hard way cover much similar style liked post might also like create git diagram git serverless pattern power git log graphing interactive git rebase bisect tutorial like like loading related
401,Lobsters,vcs,Git & VCS,Mercurial 4.5.2 security release,https://www.mercurial-scm.org/wiki/WhatsNew#Mercurial_4.5.1_.2F_4.5.2_.282018-03-06.29,mercurial security release,release note download timebasedreleaseplan upgrade note upgrading archive mercurial overview new feature mercurial extension unsorted mercurial command core unsorted mercurial overview new feature mercurial unsorted mercurial command extension unsorted mercurial overview new feature mercurial overview new feature backwards compatibility change api change command core extension unsorted behavior change internal api change mercurial extension test mercurial command core test mercurial overview new feature command core extension unsorted behavior change internal api change mercurial command unsorted mercurial command unsorted mercurial overview new feature mercurial command extension unsorted mercurial overview new feature security command core extension unsorted behavior change internal api change mercurial command core extension unsorted mercurial command core extension unsorted mercurial overview new feature command core extension hgweb chg unsorted behavior change internal api change mercurial security core unsorted mercurial command core hgweb performance mercurial full release note,release note feature bugfixes latest release please see download page link source binary note mercurial follows timebased release plan major release every three month minor bugfix release first every month see timebasedreleaseplan sure read upgrade note upgrading see archive older version mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release extension unsorted mercurial regularly scheduled bug fix release command graftstate save base graft state fixing bug graft continue graft fix base value saved state file core unsorted bashcompletion use aliased hg source script demandimport fix compatibility meta path finder wo findspec method flag read flag dirstatedisk workingcopyctx fsmonitor coerce clock variable bytestring url fix byte v str crash processing proxy header mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release unsorted mercurial regularly scheduled bug fix release command branch make force work even specifying rev import nt ignore secret bypass specified extension shelve fix ordering merge label unsorted mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release backwards compatibility change infinitepush extension believed unused deleted hg grep search working copy file content default recognize significant change past behavior survey large body user indicated nobody used almost nobody understood previous noflags behavior hg grep new behavior aligns behavior user expected including hg maintainer also happens behavior git grep given old behavior confusing point unusable comfortable changing behavior api change mercurialhgupdate mercurialmergeupdate expect value set namedconstants mergeupdatecheck constant rather collection magic string value code prepared value change future mercurialhgupdatetotally thorough checking mercurialbookmarksbmstore longer convenience method looking changectx instance bookmark name use repo repobookmarks name intead repobookmarkschangectx name command amend add option update current user amend enable support closing branch amend enable support using secret phase bookmark actual fix race condition deleting bookmark bookmark remove changectx method bmstore api branchmap explicitly warmwrite subset branchmap cache import add debug message parsing data patch header import read xmercurialnode email header determine nodeid log populate keywords specified custom tjson tcbor merge replace magic string namedconstants api push support config option require rev specified running push core extension eol nt fallback use hgeol tip bc largefiles use context manager setting lfstatus subrepos rebase track new node keep set unshelve abort using keep interactive together unshelve add abort using continue interactive together unshelve change date set interactive mode unshelve create matcher required creating unshelve ctx unshelve delete shelvedstate successful unshelve continue unshelve forget unknown file partial unshelve unshelve handle stripping changesets interactive mode unshelve store information interactive mode shelvedstate unshelve unify logic around creating unshelve changeset unsorted automation add command submit try server automation support use debian buster default changelog make copy related function return none valid value continue added support transplant copy remove existing copy info changeset amend bc demandimport explicitly declare session module level discovery replace head changesets output note bc fastannotate remove support flock locking fix warn fixer nt configured command flagprocessors deprecate processflags flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api format format commandspy recently regressed grep enable allfiles default bc hg updatetotally thoroughly check updatecheck argument api infinitepush mark extension likely deleted narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc notify add option deterministic messageid generation prevent comparison none curse histedit pythonzstandard apply bigendian fix remotefilelog reduce probability racecondition remotefilelog test rustdirstatestatus add call rustfast path dirstatestatus rustdirstatestatus rustcpython binding dirstatestatus rustdirstatestatus use fastpath even fsmonitor sparse extension rustdiscovery optionally nt randomize test sidedata introduce new requirement protect feature split handle partial commit renames split record sshserver flush stream command dispatch test allow different result zstd compression transplant added support stop flag uncommit add option update current user current date uncommit add support modify commit message date uncommit drop hyphen currentuser currentdate uncommit enable support adding note uncommit make date u user mutually exclusive behavior change copy remove existing copy info changeset amend bc discovery replace head changesets output note bc eol nt fallback use hgeol tip bc grep enable allfiles default bc narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc templatefuncs account user diffopts diff bc internal api change bookmark remove changectx method bmstore api exchange avoid unnecessary conversion bookmark node hex api flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api hg updatetotally thoroughly check updatecheck argument api merge replace magic string namedconstants api mercurial regularly scheduled bug fix release extension phabricator nt abort property writing fails amending test mercurial regularly scheduled bug fix release command bookmark actual fix race condition deleting bookmark core test mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release command bookmark also make bookmark cache depends changelog bookmark actual fix race condition deleting bookmark bookmark actually trigger race deleting bookmark test bookmark backout attempt fix delete race bookmark keep bookmark hgstore new config set bookmark use context manager writing file bookmark use correct store ambiguity check branch abort closing branch nonbranchhead cset branchcache store maximum tip variable inside loop command drop support legacy cmd registration api commit add forceclosebranch flag close nonhead changeset commit add check trying close already closed branch head commit add ability print file status successful invocation commit allow interactive work naming directory commit improve file field changelog merges commit make error message specific aborting branch closing commit respect noedit combination amend graft moved abortgraft readgraft cmdutil help check subtopic exists raise error nt log add config making hg log g always toposorted log flag toposorted set log pas getcopies function instead getrenamed displayer api merge disallow merge abort case unfinished operation patch use short fixedsize message last line prompt push added clear warning message pushing closed branch tag avoid doublereversing list verify also check full manifest validity verify run verify introduce notion level verify introduce experimental full flag core extension unsorted abort added support graft abort added support histedit abort added support merge abort added support rebase abort added support unshelve automation initial support running linux test bisect crash rewritten commits blackbox disable extremely verbose logging catapipe add support counter event changelog define changelogrevisionp copy null revision changelog fix handling empty copy entry changeset changelog optionally store added removed file changeset extra continue added support rebase continue added support unshelve copy filter invalid copy end pathcopies copy follow copy across merge base without source file debugrevlog fix average size computation empty data drawdag nt crash writing copy info changesets extdata avoid crashing inside subprocess get revset parse error extension drop support extsetup without ui argument api filemerge make last line prompt english char graphmod remove support graph line mixing parentgrandparent style bc manifest avoid corruption dropping removed file pure match remove unused matchiter implementation api match use instead root directory api procutil allow caller runbgcommand assume process start remotefilelog check rfl enabled getrenamedfn override remotefilelog handle copy changesets getrenamedfn override remotefilelog log fetch file remotefilelog tell runbgcommand block child process startup root add support tformatter option sslutil add support sslkeylogfile wrapsocket sslutil fsencode path returned certifi statecheck added support state subrepos make last line prompt english char test make grep pattern remotefileloggcrepack portable test work around libressl different error string tracing add support emitting counter worker support parallelization function return value zsh enable completion support chg well behavior change graphmod remove support graph line mixing parentgrandparent style bc internal api change mercurial regularly scheduled bugfix release command help fix hg mv hg cp unsorted mercurial regularly scheduled bugfix release command unsorted mercurial overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bugfix release late due vacation similar disruption regular time command extension rebase add missing dash help text unsorted mercurial overview new feature available regularlyscheduled quarterly feature release also contains security fix security possible use symlinks subrepositories defeat mercurial pathchecking logic write file outside repository fixed user older version either disable subrepositories subrepos allowedfalse configuration ensuring cloned repository nt contain malicious symlinks command archive use manifestmatches simplify speed matching branch allow changing branch merge commits rev branch add r option show branch name given rev graft abort dateuser specified currentdatecurrentuser bc graft introduce base option using custom base revision merging help add internalsextensions topic help show advanced experimental deprecated extension verbose log fix line wrap diffstat g graph merge make local file storage hgmerge directory extensible pull fix inconsistent view bookmark pull push add publish flag change phase pushed changesets push config option control behavior pushing publishing server resolve fix markcheck file deleted one side tag cache repochangelog access checking tag node update fix edgecase updateatomicfile readonly file core revlog always enable generaldelta version revlogs revlog make sure never use sparserevlog without general delta revset enforce interpreted literal revision number api bc revset introduce api avoids formatspec input serialization revsets make bookmarknamed nonexistent abort bc templatekw deprecate favor templatekw fix crash multiple latesttags resolution wdir templater check invalid use list expression properly transaction display data transaction failed rollback ui add config knob redirect status message stderr api ui remove unreachable branch function call write vfs also audit rename wireproto batch query support query immediate response extension unsorted changegroup add option create bundle full snapshot changegroup allow force delta commandserver add ipc channel teach repository path command finished commandserver add config knob various logging option commandserver add experimental option use separate message channel commandserver send raw progress information message channel filecache unimplement set delete api http allow authprefix username consistent uri match support rooted glob hgignore mergetools calling external merge tool describe resolve input mergetools adjust beyond compare config maclinux obsutil fix progress deprecate uiprogress rustcpython binding ancestorsiterator rustcpython binding lazyancestors rustcpython binding missingancestors sparserevlog disable sparserevlog config disable generaldelta sparserevlog enabled default storage update sqlitestore use new deltamode parameter store raise programmingerror unable decode storage path subrepo extend path auditing test include weird pattern sec subrepo prohibit variable expansion creation hg subrepo sec subrepo reject potentially unsafe subrepo path bc sec behavior change internal api change mercurial regularlyscheduled bugfix release containing following fix command core extension phabricator properly encode boolean type request body unsorted window ensure mixedfilemodewrapper fd nt escape entering context mgr worker swallow exception occurred main process mercurial regularly scheduled bugfix release security fix included expected lowrisk command core revlog fix outofbounds access negative parent read revlog sec extension unsorted mercurial overview new feature available regularlyscheduled quarterly feature release command add add label message added file addremove add label message added removed file annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc bookmark add explicit option list bookmark given name bookmark pas formatter printbookmarks instead opts api clone allow local cloning create one level directory debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc grep add multirev support allfiles flag grep rename linenumber lineno well bc grep search commits allfiles mode help adding proper declaration shortlistbasic command api help adding support command category identify change parent list node bc identify show remote bookmark hg id url tjson b log changesetformatter fill wdir rev node bc log respect graphshorten terminal node collapsing merge improve interactive onechanged onedeleted message phase explicitly exclude secret phase phase expose phase idx revset phase handle phase command flag phase report number nonpublic changeset alongside new range push add remote repository changed pushing message remove add label message removed file rename return error status renamecopy failed resolve add flag default behavior remerging resolve add config make hg resolve remerge default resolve add confirm config option resolve add option warnabort unresolved conflict marker resolve graduate resolvemarkcheck experimental add doc resolve rename status mergestatus shadow change status bc status advertise abort instead update c abort merge status advertise abort instead update c abort graft status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc verify make output le confusing core context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api dispatch nt show list command bogus command dispatch making hg abortion output specific label dispatch show short error message invalid global option given exchange support declaring pull depth exchange support defining narrow file pattern pull filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api localrepo add repository feature repo stream cloned localrepo add requirement narrow file creation option present localrepo automatically load lf extension required bc localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support marking repos shallow file storage localrepo support writing shared file api pager enable termdumb repository establish api emitting revision delta revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api revlog new api emit revision data revlog reuse cached delta identical base revision revset expand bookmark active bookmark revsetlang fix position spaceless ab expression streamclone nt support stream clone unless repo feature present streamclone include obsstore file stream bundle client read templatefuncs add truncate parameter pad templatekw add experimental status keyword templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api tracing new module make tracing event hg easier tracing trace command function execution transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api add bookmark changesetdata command add phase changesetdata command client support advertising redirect target client support following content redirects define implement changesetdata command define implement filedata command define implement filesdata command define implement manifestdata command server support sending content redirects support response caching extension absorb import extension facebook hgexperimental absorb print rev prefix hash absorb print summary changesets affected absorb prompt user accept absorb change default amend support historyeditingbackup config option closehead fix closehead r listification commitextras work nicely extension convert fix file descriptor leak extension add summary total loading time per extension extension add detailed loading information extension new closehead module closing arbitrary head fastannotate initial import facebook hgexperimental fastannotate make default value fastannotateuseflock dynamic fix add monkeypatchable point new revision committed fix compute changed line lazily make wholefile fixer tool faster fix determine fixer tool failure exit code instead stderr fix pull flag definition make reusable extension fsmonitor use vfs instead opener journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf add repository feature denoting use lf lf autoload extension cloning repo lf enabled lf consult narrow matcher extracting pointer ctx lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc logtoprocess connect fds devnull avoid bad interaction pager logtoprocess define hg child process narrow add importrules flag tracked command narrow add narrowspec flag clone command narrow add narrow ellipsis server capability narrow add server logic send cg widening without ellipsis narrow check server narrow support anything bc narrow drop support remote expansion bc narrow introduce config option check narrow enabled narrow move hgnarrowspec hgstorenarrowspec bc narrow move support hg verify core narrow first version narrowwiden wireprotocol command narrow validate spec file wellformed clone bc patchbomb allow using hghostname force hostname phabricator drop support legacy phabricatorauthtoken config bc phabricator mark extension experimental rebase add stop option stop rebase point rebase nt try prune obsolete changeset already destination rebase explicitly track collapse fold rebase skip extinct revision even successor rebase set rebase support historyeditingbackup config option remotenames add name argument remotenames revset share allow one level directory created shelve add internal extra shelve fix crash unshelve without shelve metadata file shelve use internal phase possible sqlitestore file storage backend using sqlite strip ignore orphaned internal changesets computing safe strip root hgweb chg chgserver add command us correct message frame chgserver restore pager fds attached within runcommand session rustchg add client extension run chgspecific request rustchg add callback handle pager shell command request unsorted ancestor actually iterate ancestor topological order graduate option experimental server section changegroup pas sorted revision group api changegroup port emitrevisions changegroup remove reordering control bc changegroup restore default node ordering cleanupnodes drop special casing around prune marker api command restore compatibility cmd registration copy improve logic deciding copytracing based config option crecord make nextsametype check parent item exists crecord make enter move cursor next item type delta skip empty delta optimisation nongeneral case error introduce storageerror filemerge add config knob check capability internal merge tool filemerge show warning chosen tool binary file capability fileset extract language processing part new module api fileset optimize x x fileset roughly adjust weight function formatter remove experimental marker option formatter rename abspath file path drop relative path bc global replace us revlogerror storageerror api hg allow extra argument passed repo creation api httppeer expose capability command index drop support negative index index index handle index nullid explicitly linelog fix infinite loop vulnerability lookup add option disambiguate prefix within revset mail always fall back usascii wo nt work bc mail modernize check pythonwithtls manifest add rawsize proxy api meld enable automerge mergetool warn uimerge point nonexistent tool narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc obsolete fix valueerror stored note contains char overlayworkingctx fix exception metadataonly inmemory merges phase add archived phase phase add internal phase pullreport issue message extinct pulled changesets rename pycompatgetcwd encodinggetcwd api revision allow refer nodeid prefix scmutil accept multiple predecessor replacement api shortest never emit prefix even unique shortest use x prefix disambiguate revnum configured sparserevlog refine delta candidate sparse case statprof fix indent level fpwrite statprof update name increase storageutil consistently raise lookuperror api storageutil implement file identifier resolution method bc storageutil move metadata parsing packing revlog api storageutil new module storage primitive api url allow configure timeout http connection behavior change annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc changegroup remove reordering control bc debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc formatter rename abspath file path drop relative path bc grep rename linenumber lineno well bc identify change parent list node bc journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc localrepo automatically load lf extension required bc log changesetformatter fill wdir rev node bc mail always fall back usascii wo nt work bc narrow check server narrow support anything bc narrow drop support remote expansion bc narrow move hgnarrowspec hgstorenarrowspec bc narrow validate spec file wellformed clone bc narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc phabricator drop support legacy phabricatorauthtoken config bc resolve rename status mergestatus shadow change status bc status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc storageutil implement file identifier resolution method bc internal api change bookmark pas formatter printbookmarks instead opts api changegroup pas sorted revision group api cleanupnodes drop special casing around prune marker api context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api fileset extract language processing part new module api global replace us revlogerror storageerror api help adding proper declaration shortlistbasic command api hg allow extra argument passed repo creation api localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support writing shared file api manifest add rawsize proxy api rename pycompatgetcwd encodinggetcwd api revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api scmutil accept multiple predecessor replacement api storageutil consistently raise lookuperror api storageutil move metadata parsing packing revlog api storageutil new module storage primitive api templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api mercurial regularlyscheduled bugfix release containing following fix security fix potential outofbounds read manifest parsing c code core various minor correctness fix revsets commonancestors similar unsorted mercurial regularlyscheduled bugfix release containing following fix command core revlog fix descendant deprecated method hgweb performance remotephase avoid full changelog iteration remotephase fast path newheads computation simple case scmutil avoid quadratic membership testing sparserevlog fix delta validity computation mercurial regularlyscheduled quarterly feature release release note page found full release note
402,Lobsters,vcs,Git & VCS,Apple Finder integration for git-annex,https://github.com/andrewringler/git-annex-turtle,apple finder integration gitannex,gitannexturtle download gitannexturtle apple finder gitannex mit license otherlicensestxt getting started install signup update download gitannex walkthrough download gitannexturtle stable beta release requires unstable release usage feature badge contextual menu menubar icon badge file gitannex copy folder example requirement liferay nativity related software issue important directory git config name tortoisecvs building build release,gitannexturtle download gitannexturtle gitannexturtle provides apple finder integration gitannex macos including custom badge icon badge contextual menu controlclicks menubar icon aka menubar extra gitannexturtle native mac app written swift xcode requires macos later gitannexturtle free opensource licensed mit license gitannexturtle includes software creative worksassets licensed open source license see otherlicensestxt information getting started install signup update receive email new version release infrequent announcement download gitannex macos install application folder follow gitannex walkthrough never used gitannex download gitannexturtle stable beta release unzip drag application application folder requires macos later need bleeding edge feature try unstable release usage click gitannexturtle menubar icon click click add new gitannex repository watch gitannexturtle perform initial full scan repository added full scan required may cache status information folder since filelevel status stored git gitannex view gitannex repository apple finder see updated badge icon right click controlclick file folder see gitannex specific context menu badge icon appear progressively full scan completes feature badge gitannexturtle add badge icon badge every file folder monitored gitannex repository indicating presentabsent status number copy whether copy lacking contextual menu gitannexturtle add contextual menu controlclicks file folder monitored repos allowing quick access gitannex getdropadd menubar icon gitannexturtle add menubar icon aka menubar extra showing animated activity status monitored folder status preference menu badge file badge signify present absent number copy whether desired number gitannex copy numcopies present absent status signified filled solid v notfilled empty square number copy signified digit ranging star file copy file least amount copy specified numcopies setting gitattributes override icon colored green otherwise red folder badge signify status file contained within signify file present present absent file present icon solid square file absent icon empty square otherwise file present icon partially filed square icon digit signifies number copy file least copy contained within every file contained within folder least desired number copy icon colored green otherwise red example icon description present file copy desired number copy folder containing present file copy file desired number copy present file copy folder containing present file copy file desired number copy file copy present folder containing absent file copy file copy present desired number copy folder containing absent file copy desired number copy folder containing least copy file present absent file desired number copy folder containing present absent file copy least desired number copy present file copy le desired number copy folder containing present file copy one file le desired number copy present file copy le desired number copy folder containing present file copy one file le desired number copy file copy present le desired number copy folder containing absent file copy one le desired number copy file copy present le desired number copy folder containing absent file copy one le desired number copy folder containing present absent file copy one le desired number copy folder containing present absent file copy one le desired number copy file known copy implies present folder containing absent file one known copy empty folder folder containing nonannexed file empty folder file scanned successfully state yet handled gitannexturtle requirement macos later gitannexturtle relies apple finder sync api available osx yosemite later version macos liferay nativity library could potentially used enable gitannexturtle run older mac os also using feature coredata available macos later gitannexturtle released mac written swift xcode probably easily portable linux window may course adapt use app user experience design workflow icon set porting os see gitannex related software option already built os issue apple finder sync extension allows one extension register per folder apps might conflicting gitannexturtle example dropbox register finder sync extension entire home folder usersyourname regardless actual dropbox folder located dropbox apparently move dropbox context menu every single file launch system preference extension finder see apps finder sync extension registered want continue using dropbox partially disable finder integration preference menu cloud syncing still continue operate important directory librarygroup containersgroupcomandrewringlergitannexmacsharedgroup app group location sqlite database may safely delete folder app extension process running full scan restart next launch gitannexturtle configgitannexturtlemonitor store config setting gitannexturtle editable menubar icon editing file directly us git config style syntax may safely update file manually app detect change note adding removing repos via gui clobber comment unknown line added manually file name gitannexturtle take inspiration function name tortoisecvs many tool provided oslevel filesystem icon source revision control software building install xcode install xcode sdk macos xcode open srcgitannexturtlexcodeproj xcode create new scheme called gitannexturtle build target gitannexturtle gitannexturtletests run gitannexturtle scheme build release clone gitannexturtle repo run buildrelease script cd gitannexturtle buildlocalreleasesh release
403,Lobsters,vcs,Git & VCS,Create Your Own Git Diagrams,https://zwischenzugs.com/2018/03/08/create-your-own-git-diagrams/,create git diagram,docker image run example folder want learn git read book learn git hard way available make advanced diagram original source credit chris freeman want learn git read book learn git hard way available liked post might also like five key git concept explained hard way ten thing wish known bash project management code graphviz noncloud serverless application pattern using git docker power git log graphing like,ever wondered create git diagram know one look like created docker image allow easily create docker pull imiellgitdags git repo run example folder good place start good way get started run git clone http githubcomianmiellgitdags cd gitdagsexamples docker run v pwd file imiellgitdags convertfilessh convert tex latex file example png image le complex one top want learn git read book learn git hard way available make show make image let break example documentclass preview standalone usepackage subcaption usepackage gitdags begin document begin figure begin subfigure b textwidth centering begin tikzpicture commit dag gitdag grow right sep c b branch gitbranch experimental node name text aboveof c node placement c target gitbranch master node name text belowof b node placement b target head reference githead belowof master node placement master target end tikzpicture end subfigure end figure end document breaking chunk content framed le boilerplate documentclass preview standalone usepackage subcaption usepackage gitdags begin document begin figure begin subfigure b textwidth centering begin tikzpicture end tikzpicture end subfigure end figure end document subcaption package might used advanced diagram necessary particular one next node link specified gitdag section gitdag grow right sep c b node linked simple pair dash arrow put curlies indicate division branch line represents one line development want merge two branch together give name like c b grow graph left well right make separation larger smaller changing value also fade marking unreachable nodesunreachable e four main type external pointer node gittag gitremotebranch gitbranch githead comment gittag example mostly selfexplanatory apply four apart githead see gittag node name node text aboveof node placement target target line refers arrow point node placement line refers arrow node positioned aboveof belowof well leftof rightof githead ignores node text put head text type node available documentation find literally mention github anywhere outside original source may try figure later credit work based great work chris freeman course original gitdags work see also stackoverflow discussion without floundering sea latex ignorance want learn git read book learn git hard way available liked post might also like five key git concept explained hard way ten thing wish known bash project management code graphviz noncloud serverless application pattern using git docker power git log graphing like like loading related
404,Lobsters,vcs,Git & VCS,What’s in a git config?,https://blog.safia.rocks/post/171624930481/whats-in-a-git-config,git config,doc,wednesday already guess honest pretty much write blog post autopilot time pass really quicklyi continuing series started monday analyze strace curl last blog post looked curl process managed domain name resolution continue blog postthe next chunk trace look like followingsidebar dunno say look like exactly ala inner monologue lack precisionsocket afinet sockdgramsocknonblock ipprotoip pid connect safamilyafinet sinporthtons sinaddrinetaddr pid poll eventspollout reventspollout pid sendmmsg msghdr msgnamenull msgiov iovbase msghdr msgnamenull msgiov iovbase msgnosignal pid poll eventspollin unfinished pid poll resumed timeout first system call initiate connection ip address ip address giving clue thought port number connecting interesting port looked turn port default port number used dns server appears connection making dns server attempt resolve domain name suspicion confirmed content payload sent via sendmmsg command later line pid ioctl fionread pid recvfrom safamilyafinet sinporthtons sinaddrinetaddr pid poll eventspollin reventspollin pid ioctl fionread pid recvfrom safamilyafinet sinporthtons sinaddrinetaddr pid close next chunk stack trace read data gaiconf file decided look might responsible doc gaiconf file store configuration getaddrinfo function getaddrinfo function responsible lot heavy lifting come mapping hostname ip address connect configuration stored gaiconf deal done call getaddrinfo return multiple response assume mean hostname resolve multiple address case gaiconf file allows u persist information address actually want connect topid open etcgaiconf ordonlyocloexec pid fstat pid fstat pid read configuration getaddrinfo pid read pid close next chunk stack trace little esoteric difficult parse noticed program opening new socket afnetlink type researching discovered particular connection type allows kernel communicate userspace case socket facilitating connection outside world unfortunately knowing give much context actually communicated socket making mental todo go one layer see looking curl code base might tell pid futex futexwakeprivate pid socket afnetlink sockraw netlinkroute pid bind safamilyafnetlink pid getsockname safamilyafnetlink pid sendto nlmsg safamilyafnetlink pid recvmsg msgname safamilyafnetlink msgiov iovbase nlmsg flagsnlmfmulti nlmsg flagsnlmfmulti nlmsg pid recvmsg msgname safamilyafnetlink msgiov iovbase nlmsg flagsnlmfmulti nlmsg flagsnlmfmulti n nlmsg pid recvmsg msgname safamilyafnetlink msgiov iovbase typenlmsgdone flagsnlmfmulti nlmsg flagsnlmfrequest pid close next chunk trace equally esoteric case socket connection made communicates address completely clueless going addition reading code curl think running wireshark looking network dump tell might illuminate case interested getting nittygritty going seems pretty clear curl go quite step resolve domain name local remote dns service pid socket sockdgram ipprotoip pid connect inetpton enetunreach network unreachable pid connect safamilyafunspec sadata pid connect inetpton enetunreach network unreachable pid connect safamilyafunspec sadata pid connect safamilyafinet sinporthtons sinaddrinetaddr pid getsockname inetpton pid connect safamilyafunspec sadata pid connect safamilyafinet sinporthtons sinaddrinetaddr pid getsockname inetpton pid close point process thread pid exit return back main thread start looking portion stack trace next blog post
405,Lobsters,vcs,Git & VCS,Bit - The fastest way to share code,http://bitsrc.io/,bit fastest way share code,dynamic component workspace smart percomponent versioning reusable dev environment goodbye configuration file,dynamic component workspaceget modular workspace dynamically develop add remove component compose appssmart percomponent versioningenjoy simple yet scalable semantic versioning per component smart automatic dependency definition managementreusable dev environmentsapply premade reusable environment develop build test render component full isolation best practice includedgoodbye configuration filessay goodbye painful config file let bit handle want control use override quickly apply change across many component
406,Lobsters,vcs,Git & VCS,Getting into git init,https://blog.safia.rocks/post/171448973555/getting-into-git-init,getting git init,doc,wednesday already guess honest pretty much write blog post autopilot time pass really quicklyi continuing series started monday analyze strace curl last blog post looked curl process managed domain name resolution continue blog postthe next chunk trace look like followingsidebar dunno say look like exactly ala inner monologue lack precisionsocket afinet sockdgramsocknonblock ipprotoip pid connect safamilyafinet sinporthtons sinaddrinetaddr pid poll eventspollout reventspollout pid sendmmsg msghdr msgnamenull msgiov iovbase msghdr msgnamenull msgiov iovbase msgnosignal pid poll eventspollin unfinished pid poll resumed timeout first system call initiate connection ip address ip address giving clue thought port number connecting interesting port looked turn port default port number used dns server appears connection making dns server attempt resolve domain name suspicion confirmed content payload sent via sendmmsg command later line pid ioctl fionread pid recvfrom safamilyafinet sinporthtons sinaddrinetaddr pid poll eventspollin reventspollin pid ioctl fionread pid recvfrom safamilyafinet sinporthtons sinaddrinetaddr pid close next chunk stack trace read data gaiconf file decided look might responsible doc gaiconf file store configuration getaddrinfo function getaddrinfo function responsible lot heavy lifting come mapping hostname ip address connect configuration stored gaiconf deal done call getaddrinfo return multiple response assume mean hostname resolve multiple address case gaiconf file allows u persist information address actually want connect topid open etcgaiconf ordonlyocloexec pid fstat pid fstat pid read configuration getaddrinfo pid read pid close next chunk stack trace little esoteric difficult parse noticed program opening new socket afnetlink type researching discovered particular connection type allows kernel communicate userspace case socket facilitating connection outside world unfortunately knowing give much context actually communicated socket making mental todo go one layer see looking curl code base might tell pid futex futexwakeprivate pid socket afnetlink sockraw netlinkroute pid bind safamilyafnetlink pid getsockname safamilyafnetlink pid sendto nlmsg safamilyafnetlink pid recvmsg msgname safamilyafnetlink msgiov iovbase nlmsg flagsnlmfmulti nlmsg flagsnlmfmulti nlmsg pid recvmsg msgname safamilyafnetlink msgiov iovbase nlmsg flagsnlmfmulti nlmsg flagsnlmfmulti n nlmsg pid recvmsg msgname safamilyafnetlink msgiov iovbase typenlmsgdone flagsnlmfmulti nlmsg flagsnlmfrequest pid close next chunk trace equally esoteric case socket connection made communicates address completely clueless going addition reading code curl think running wireshark looking network dump tell might illuminate case interested getting nittygritty going seems pretty clear curl go quite step resolve domain name local remote dns service pid socket sockdgram ipprotoip pid connect inetpton enetunreach network unreachable pid connect safamilyafunspec sadata pid connect inetpton enetunreach network unreachable pid connect safamilyafunspec sadata pid connect safamilyafinet sinporthtons sinaddrinetaddr pid getsockname inetpton pid connect safamilyafunspec sadata pid connect safamilyafinet sinporthtons sinaddrinetaddr pid getsockname inetpton pid close point process thread pid exit return back main thread start looking portion stack trace next blog post
407,Lobsters,vcs,Git & VCS,Unix Architecture Evolution from the 1970 PDP-7 to the 2018 FreeBSD,https://fosdem.org/2018/schedule/event/unix_evolution/,unix architecture evolution freebsd,github repository database recording evolution provided facility third fourth,unix operating system profound influence development open source software associated community many today system trace code design unnamed operating system kernel implemented line assembly language evolved unix operating system whose direct descendant include today bsd system intellectual heir form various gnulinux distribution architecture unix evolve past half century based github repository recording system history today database recording evolution provided facility reconstruction third fourth edition unix manual examine significant milestone development lesson learn many architectural feature layering system call device file interpreter process management already visible version idea followed quickly tree directory structure user contributed code io redirection shell user program group pipe scripting later version added domainspecific language environment variable documented file system hierarchy software package virtual memory support optimized screen handling networking storage pool dynamic tracing packet capture library based record facility documented year see area evolution continues unchanged pace area appears stalled also see one measure code complexity followed selfcorrecting path lesson derive amazing ride include durability early architectural feature value establishing convention imposition rigid mechanism importance addition made system gestation increasing difficulty bringing groundbreaking change unix age
408,Lobsters,vcs,Git & VCS,Cargo: Windows 7 users broken by Github dropping TLS 1.0/1.1,https://github.com/rust-lang/cargo/issues/5066,cargo window user broken github dropping tl,comment,revert warn window user old tl upgraded version cargo would use tl window unconditionally note even unpatched window support tl originally written tl support window still requires rather recent patch even fix still keep error message people use window automatic update disabled however look like window support tl box update required enable use tl default comment testing random win virtual box confirms close
411,Lobsters,vcs,Git & VCS,"Lifecycle Versioning (v01, alpha)",https://ferrisellis.com/posts/lifecycle_versioning_v1_alpha/,lifecycle versioning alpha,page moved please click go page new location,page moved please click go page new location
412,Lobsters,vcs,Git & VCS,Remembering Shawn Pearce,https://sfconservancy.org/blog/2018/jan/30/shawn-pearce/,remembering shawn pearce,remembering shawn pearce memorial fund first email list permalink,remembering shawn pearce jeff king january git project conservancy mourn passing shawn pearce longtime developer member git community shawn joined git project past year wore many hat third prolific contributor git commit count patch credit include many fundamental system gitoverhttp protocol fastimport system format adopted many version control system concept reflogs including beautiful hack syntax beyond individual technical contribution shawn knack seeing greater ecosystem needed afraid jump headfirst new project wrote gitgui first graphical git client order provide git support eclipse ide wrote jgit fromscratch java reimplementation git also started gerrit code review project used android development remember shawn leadership project organized first gittogether project developer served multiple tour interim maintainer year instrumental getting project involved google summer code program since git joined software freedom conservancy served git project leadership committee shawn exemplified kindness patience technical excellence required open source contributor also stubbornness determination take reimplement entire project java called grateful many year service project open source community field programming also know work git small slice person heart go family memorial fund family encouraged people donate cancer research lieu flower mostly really want people understand profound impact work shawn many unsung hero open source people work behind scene user never know vast number people use git without shawn git would really different miss first email list announcement alternate user interface git project ended folding give credit ambition permalink
413,Lobsters,vcs,Git & VCS,"On undoing, fixing, or removing commits in git",https://sethrobertson.github.io/GitFixUm/fixup.html,undoing fixing removing commits git,chooseyourownadventure javascript disabled mean get bread crumb representing path took need help copypasting bread crumb would extremely useful anyone trying provide help improve website first step backup proceed first question trying find lost fix change made committed discard everything thing save uncommitted change pro git undo uncommitted change best practice best practice undo uncommitted change uncommitted stuff working directory pushed want discard unpushed change branch discarding local commits branch replacing branch historycontents commit want fix recent want remove change commit messagecontents last commit removing last commit reworking reworking last commit post production editing using git moving commit one branch another nonce undo delete updating last commit content commit message reworking want remove entire commit removing entire commit want removechangerename particular filedirectory commits git history changing commits git history use bfg remove unwanted data like big file password git repository history bfg anywhere example stripblobsbiggerthan replacetext passwordstxt arbitrarily changing commits git history manual page best practice merge commit involved changing single commit involving simple commits manual page postproduction editing using git changing single commit involving merge nonce make positive commit fix problem fix class rewriting public history bad idea making new commit fix old commit making new commit restore file deleted earlier reverting old simple pushed commit reverting merge commit gitolite howtorevertafaultymergetxt rewriting old branch new branch new commit bad person must rewrite published history fixing old commit lost commits know made undoing last git operation affecting headmy branch tip recovering borkedstupidmoribund merge recovering borkedstupidmoribund rebase disclaimer copyright authoritative source thanks comment use github issue tracker git line eater fodder,git chooseyourownadventure warning javascript disabled mean get bread crumb representing path took need help copypasting bread crumb would extremely useful anyone trying provide help improve website document attempt fairly comprehensive guide recovering mean using git nt git complicated need large document take care particular problem set thing might done large different technique needed depending exactly done want happen problem clicking document please copypaste path took link clicked automatically presented javascript available asking help since explain precisely trying least tried help first step strongly consider taking backup current working directory git avoid possibility losing data result use misuse instruction promise laugh fail take backup regret later answer question posed clicking link section section link terminal node solved problem completing suggestion posed node report chain answer made git git resource explain proposed answer nt help document read linearly proceed first question trying find lost fix change made due previous activity thrashing may lost work would like find restore alternately may made change would like fix fixing includes updating rewording deleting discarding committed yet committed want git know anything done yet pretty easy undo done discard everything thing yet committed question whether want undo everything done since last commit thing save done save uncommitted change five way save uncommitted change also suggest read pro git pretty basic git operation descriptioncommand commit local branchgit commit descriptive message commit another branch checkout conflictsgit checkout otherbranch git commit descriptive message commit another branch conflictsgit stash git checkout otherbranch git stash apply resolve conflict git commit descriptive message git stash drop commit new branchgit checkout b newbranch git commit descriptive message stash rainy daygit stash save descriptive name using git add p addcommit change make multiple commits left exercise reader undo uncommitted change yet committed want undo everything well best practice stash change case mistaken later decide really wanted git stash save description change revisit stash later git stash list decide whether git stash drop time past please note untracked ignored file stashed default see includeuntracked stash option handle two case however perhaps confident arrogant enough know sure never ever want uncommitted change run git reset hard however please quite aware almost certainly completely unrecoverable operation change removed restored later delete untracked ignored file deleted git clean nd git clean ndx respectively git clean ndx well actually command delete file show file deleted replace n f actually delete file best practice ensure deleting looking moribund filename first undo uncommitted change yet committed want undo thing well git status tell exactly need example branch master change committed use git reset head file unstage new file gitignore change staged commit use git add file update committed use git checkout file discard change working directory modified untracked file use git add file include committed c however git checkout file mode command recovered change discarded probably recovered perhaps run git stash save p description instead select change longer want stashed instead zapping uncommitted stuff working directory committed however go fixing removing whatever wrong first ensure uncommitted change safe either committing git commit stashing git stash save message getting rid git status help understand whether working directory clean report nothing perfect safety untracked file sometimes safe pushed committed question whether made change least change interesting fixing publicly available publishing history seminal event dealing commits someone else made question cover whether pushed since commits answer almost certainly yes please note event recipe provided typically one exception selfnotify modify current branch specifically tag branch involving commit changing child commit modified must deal separately look gitk dateorder help visualize everything git reference might need updated also note command fix referenced commits repository reflog dangling commits holding state corrected normally good thing eventually go away reason want cut seat belt expire reflog garbage collect immediate pruning want discard unpushed change branch shortcut case want discard change made branch since last pushed event make local branch identical upstream upstream local tracking branch place get history git pull typically master might originmaster variant option let make local branch identical branch ref discarding local commits branch order discard local commits branch make local branch identical upstream branch simply run git reset hard u replacing branch historycontents instead discarding local commits make branch identical branch tag ref sha exists system first thing need identify sha ref good state branch looking output git branch git tag git log preference look graphically gitk dateorder found correct state branch get state running obviously replace ref reference sha want get back commit want fix recent technique mentioned deal deeper commits work recent convenient shortcut take recent commit want remove change commit messagecontents last commit removing last commit remove last commit git simply run git reset hard head removing multiple commits top run git reset hard remove last two commits increase number remove even commits want uncommit commits keep change around reworking remove hard git reset head evict commits branch index leave working tree around want save commits new branch name run git branch newbranchname git reset reworking last commit warning technique used nonmerge commits merge commit better deleting merge recreating want perform significant work last commit simply git reset head undo commit peel restore index state commit leaving working directory change uncommitted fix whatever need fix try multiple nonmerge commits row using head similar technique course lose separation commits left undifferentiated working directory trying squash commits together rework bit commits may want want reorder commits split merge together otherwise perfect commits explore post production editing using git moving commit one branch another commit wrong place want move one branch another order need know sha first last commit continuous series commits want move value moving one commit name branch moving commit name branch moving commit example name four value first last source destination respectively additionally need use nonce branch placeholder call nonce branch nonce following example however may use branch name currently use delete immediately done git branch nonce last git rebase p onto destination first nonce remember substitute first command leave alone literal use gitk dateorder check make sure move look correct pretending nonce destination branch please check carefully trying move merge may recreated improperly nt like result may delete nonce branch git branch nonce try however everything look good move actual destination branch pointer nonce git checkout destination git reset hard nonce git branch nonce doublechecked gitk dateorder would see destination branch look correct however commits still source branch well get rid git rebase p onto first last source using gitk dateorder one last time see commits source branch gone away successfully moved commits please check carefully merges occurred commits deleted may recreated incorrectly either undo delete try delete bad merge try recreate manually create fake merge sha git aware merge occurred updating last commit content commit message update last commit content author commit message commit pushed otherwise published first need get index correct state wish commit reflect changing commit message need nothing changing file content typically would modify working directory use git add normal note wish restore file known good state use git checkout goodsha pathtofilename index correct state run git commit amend update last commit yes use want avoid git add suggested previous paragraph also use author change author information want something sophisticated amend allows please investigate reworking last commit want remove entire commit removing entire commit call operation cherrypit since inverse cherrypick must first identify sha commit wish remove using gitk dateorder using git log graph decorate oneline looking character hash id character abbreviation yes know shortcut may use git rebase p onto sha sha obviously replace sha reference want get rid command literal however please warned commits sha tip branch merge commits possible git rebase p unable properly recreate please inspect resulting merge topology gitk dateorder head orighead content ensure git want wanted really automated recourse reset back commit sha want get rid cherrypick normal commits manually remerge bad merges suffer inappropriate topology perhaps creating fake merges git merge otherbranch subsequent development work branch properly merged correct mergebase want removechangerename particular filedirectory commits git history changing commits git history pushed still somehow want change commits git history strange use bfg remove unwanted data like big file password git repository history disclaimer author document qualified tool including safety usability purpose recognizes need tool fill large repository bfg simpler faster alternative git filterbranch specifically designed cleansing bad data git repository history operates branch tag project purge data nt want retained anywhere example remove blob bigger megabyte make repo take le space bfg stripblobsbiggerthan myrepogit replace password listed file removed wherever occur repository bfg replacetext passwordstxt myrepogit arbitrarily changing commits git history git filterbranch powerful complex command allows perform arbitary scriptable operation commits git repository history flexibility make quite slow big repos make using command quite difficult simply point manual page remind best practice always use tagnamefilter cat unless really sure know btw one command referred earlier update tag branch least use best practice argument merge commit involved commit trying change merge commit merge commit commit trying change tip branch need special handling situation changing single commit involving simple commits must first identify sha commit wish remove using gitk dateorder using git log graph decorate oneline looking character hash id character abbreviation yes know shortcut may use obviously replace sha reference want get rid command literal dumped editor bunch line starting pick oldest commit one probably interested changing first want change pick reword edit perhaps even squash depending goal please read manual page information document postproduction editing using git go much major us git rebase detail use case little different fundamental technique using edit change content author dumped shell make change well make change git add normal run git commit amend including changing author information author satisfied run git rebase continue changing single commit involving merge oh dear going get little complicated work though need use nonce branch placeholder call nonce branch nonce following example however may use branch name currently use delete immediately done identify sha commit wish modify using gitk dateorder using git log graph decorate oneline looking character hash id character abbreviation yes know shortcut may use remember name branch currently line star git branch output branch currently use master example substitute branch name master following command create checkout nonce branch pointing commit git checkout b nonce sha obviously replace sha reference want modify modify commit need get index correct state wish commit reflect changing commit message need nothing changing file content typically would modify working directory use git add normal note wish restore file known good state use git checkout goodsha pathtofilename index correct state run git commit amend update last commit yes use want avoid git add suggested previous paragraph commit updating merge commit ensure log message reflects put remaining commits new one created remembering substitute correct branch name master git rebase p onto git revparse nonce head master validate topology still good commits commit changed merge commits please warned possible git rebase p unable properly recreate please inspect resulting merge topology gitk dateorder head orighead ensure git want wanted really automated recourse reset back commit sha want get rid cherrypick normal commits manually remerge bad merges suffer inappropriate topology perhaps creating fake merges git merge otherbranch subsequent development work branch properly merged correct mergebase delete nonce branch nt need communicate sha two step process git branch nonce make positive commit fix problem fix class rewriting public history bad idea requires everyone else special thing must publicly announce failure ideally create either commit fix problem new git revert commit create new commit undoes commit target revert making new commit fix old commit problem old commit something done incorrectly go ahead make normal commit fix problem feel free reference old commit sha commit message blamebased development methodology make fun person made mistake someone recently left made mistake making new commit restore file deleted earlier file may deleted every change file commit commits since destroyed simply checkout version file know good must first identify sha commit containing good version file using gitk dateorder using git log graph decorate oneline perhaps git log oneline filename looking character hash id character abbreviation yes know shortcut may use git checkout sha pathtofilename obviously replace sha reference good add commit normal fix problem reverting old simple pushed commit create positive commit remove effect simple nonmerge commit must first identify sha commit want revert using gitk dateorder using git log graph decorate oneline looking character hash id character abbreviation yes know shortcut may use obviously replace sha reference want revert want revert multiple sha may specify range list sha reverting merge commit oh dear going get complicated create positive commit remove effect merge commit must first identify sha commit want revert using gitk dateorder using git log graph decorate oneline looking character hash id character abbreviation yes know shortcut may use undoing file modification caused merge simple might hope git revert sha obviously replace sha reference want revert revert change first parent almost always want unfortunately tip iceberg problem happens month later long exiled problem memory try merge branch branch merged git tracked history merge occurred going attempt remerge already merged even worse merge branch revert undo change branch made imagine revert premature merge longlived topic branch master later merge master topic branch get change testing one option actually reverse merge immediately annihilating change bad merge revert revert restore leaf change removed branch mistakenly merged present original branch allows merges either direction without loss simplest option many case best disadvantage approach git blame output useful change attributed revert revert git bisect similarly impaired another disadvantage must merge current change target bad merge back source development style keep branch clean may undesirable rebase branch eg git pull rebase could cause complication unless careful use git rebase p preserve merges following example please replace destination name branch destination bad merge source name branch source bad merge sha hash id bad merge git checkout destination git revert sha save revert commit unrevert later revert git revparse head git checkout source git merge destination git revert revert another option abandon branch merged recreate previous mergebase commits since rebased cherrypicked use recreated branch new branch unrelated merge properly course pushed donor branch use name would rewriting public history bad everyone need remember use new branch hopefully something like gitolite close old branch name approach advantage recreated donor branch cleaner history especially many commits especially merges branch lot work time walk process recreating donor branch given sufficient demand try add however look howtorevertafaultymergetxt also shipped part git distribution provide word shake stick rewriting old branch new branch new commit state branch contaminated beyond repair pushed branch otherwise want rewrite existing history make new commit overwrites original branch new one pretend due merge command bit complicated get rid ignored untracked file working directory please sure properly backed everything following example please replace destination name branch whose content want overwrite source replaced name branch whose content good actually provided two method first set portable generates two commits second know current internal file git us necessary work one commit one command different second command run different time portable method overwrite one branch another two commits git clean dfx git checkout destination git reset hard source git reset soft orighead git add fa git commit rewrite destination source git merge source hacky method overwrite one branch another one commit git clean dfx git checkout destination git reset hard source git reset soft orighead git add fa git revparse source gitmergehead git commit rewrite destination source bad person must rewrite published history hopefully read previous reference fully understand bad tell everyone else order recover condition assuming simply need go part document assume yet pushed normal need force push git push f thrust updated history upon everyone else read reference may denied default upstream repository see git config receivedenynonfastforwards disabled temporarily suggest access server need send mail everyone might pulled history telling history rewritten need git pull rebase bit history rewriting branched tagged outdated history proceed fixing old commit lost commits know made first make sure different branch try git log sfoo foo replaced something unique commits made also search gitk dateorder see anything look likely check stash git stash list see might stashed instead committing also visualize stash might associated via gitk dateorder git stash list awk f print next probably look repository lying around including one host testing environment backup fully convinced well truly lost start looking elsewhere git specifically first look reflog contains history happened tip branch past two week course say git log g git reflog view may best visualized gitk dateorder git reflog pretty h next look git lost found dangling commits get generated many good reason including reset rebases still activity might mislaid commits interested might best visualized gitk dateorder git fsck grep dangling commit awk print last place look dangling blob file git added attached commit usually innocuous reason look file one time run git fsck grep dangling blob read x x git show le done find change interested several way proceed git reset hard sha current branch history current state sha probably recommended stash git branch newbranch sha link old history new branch name also recommended stash git stash apply sha nonindex commit gitstash git stash merge sha git cherrypick sha either part stash nonstashes etc undoing last git operation affecting headmy branch tip practically every git operation affect repository recorded git reflog may use reflog look state branch previous time even go back state local branch time happens every git command affecting head usually interesting attempting recover bad rebase reset amended commit better way listed rest document recovering mundane reflog update first thing need identify sha good state branch looking output git log g preference look graphically gitk dateorder git log g pretty h found correct state branch get back state running could also link old state new branch name using git checkout b newbranch sha obviously replace sha command reference want get back note commits performed since bad operation lost could git cherrypick git rebase p onto commits recovering borkedstupidmoribund merge middle merge encountered one conflict decided big mistake want get merge fastest way merge git merge abort recovering borkedstupidmoribund rebase middle rebase encountered one conflict decided big mistake want get merge fastest way merge git rebase abort disclaimer information promised guaranteed correct current complete may date may contain technical inaccuracy typographical error reliance material risk one assumes responsibility everyone expressly disclaims responsibility update keep information current ensure accuracy completeness posted information accordingly confirm accuracy completeness posted information making decision related matter described copyright copyright seth robertson document licensed distributed use two license may pick license prefer creative common attributionsharealike generic cc bysa http gnu free documentation invariant front back cover text http wwwgnuorglicensesfdlhtml would appreciate change sent back notified used highlighted special way link maintained back authoritative source thanks affiliated chooseco llc choose adventure good book little light detail recovering git merge error taste thanks thanks expert git coworkers review feedback idea comment comment improvement welcome use github issue tracker discus sethrobertson others git line eater fodder heavy use anchor navigation utter lack flexibility markup language document written important document long enough bottom complete fill screen item link directed top page hopefully
414,Lobsters,vcs,Git & VCS,Automatically managing personal and work git configurations,http://wyeworks.com/blog/2018/1/15/automatically-managing-personal-and-work-git-configurations,automatically managing personal work git configuration,step configure ssh key start using ssh step add user detail work personal folder final step overriding git configuration based current folder conclusion using git hook improve daytoday workflow,time found constantly switching personal work computer really annoying time switching back forth decided use one computer settling single computer approach irritated remember switch git username email ssh key moving work repository personal repository vice versa would frequently forget every would find work commits tagged personal email way around work repository private home work public mean work email became public like hence post share one way go forgetting switch back forth let computer automatically step configure ssh key utilizing ssh interact git server probably github continue dear reader otherwise skip step even better start using ssh let say two ssh keypairs one user workcom one user personalcom want use corresponding ssh keypair pushing cloning otherwise interacting work personal repository respectively easy enough accomplish create modify existing sshconfig file look similar host githubcompersonal hostname githubcom user personal identityfile sshidrsapersonal preferredauthentications publickey host githubcomwork hostname githubcom user work identityfile sshidrsawork preferredauthentications publickey replace personal personal git username work workrelated one done step edit cloning repo use custom host configuration normally clone git clone git githubcom personalrepogit use git clone git githubcompersonal personalrepogit want use existing repository update remote step add user detail work personal folder step assuming work stuff contained work folder personal stuff contained personal folder either move thing around computer adapt step individual need folder add file named gitconfig end one workgitconfig file one personalgitconfig file file fill information accordingly example user email user workcom name john doe user email user personalcom name john doe step two done let move final step slap everything together final step overriding git configuration based current folder final step going tell git use different configuration depending working first need create modify gitconfig file one already exists change look something like includeif gitdir work path workgitconfig includeif gitdir personal path personalgitconfig tell git load workgitconfig file folder work configuration personal conclusion configured git automatically select user email keypair utilize based working forget accidentally mixing usernames longer worry disclosing personal email work even worse disclosing work email public customize file configuration end customizing git environment example configure repository execute hook explained previous post using git hook improve daytoday workflow hopefully info proved useful one way another let know leaving comment
415,Lobsters,vcs,Git & VCS,Breezy: Forking Bazaar,https://www.jelmer.uk/breezy-intro.html,breezy forking bazaar,breezy bazaar retrospective goal still using git fork information talk launchpad bazaar mailing list go top,couple month ago martin announced friendly fork bazaar named breezy year since wrote bazaar retrospective around since seriously contributed bazaar codebase goal nt grand ambition breezy main goal keep bazaar usable going forward open source project still using git main change made far come fixing number bug bundling useful plugins bundling plugins make setting environment simpler eliminate api compatibility issue plagued external plugins bazaar world perhaps biggest effort breezy porting codebase python allowing used python go eol fork breezy fork bazaar new release series bazaar upstream dormant last couple year anyway nt lose anything forking forking give u independence make change deemed necessary otherwise hard make established project example bundling plugins taking axe large number apis dropping support older platform fork also mean independence canonical cla breezy hindrance bazaar set infrastructure without chase canonical staff web site update installation new package ci system information martin gave talk breezy pycon uk year breezy bug filed launchpad moment using bazaar mailing list bzr irc channel discussion status update around breezy go top
416,Lobsters,vcs,Git & VCS,Using git hooks to improve your day-to-day workflow,http://wyeworks.com/blog/2018/1/3/using-git-hooks-to-improve-your-day-to-day-workflow,using git hook improve daytoday workflow,githooks githooks installing hook precommit rubocop commitmsg prepush setting hook project conclusion credit githooks official documentation githooks,developing software time probably noticed lot thing go wrong matter hard try always something might forget human extremely difficult task telling computer post expose githooks use project wyeworks make developer life easier preventing bad commits even leave computer cover linting test commit formating use case githooks like many version control system git way fire custom script certain important action occur two group hook clientside serverside clientside hook triggered operation committing merging serverside hook run network operation receiving pushed commits use hook sort reason installing hook hook stored hook subdirectory git directory project githooks initialize new repository running git init git populates hook directory bunch example script many useful also document input value script example written shell script perl thrown properly named executable script work fine write ruby python whatever language familiar want use bundled hook script rename file name end sample enable hook script put file hook subdirectory git directory named appropriately without extension executable point forward called post using clientside hook execute custom script next hook use case like precommit precommit hook run first even type commit message used inspect snapshot committed see forgotten something make sure test run examine whatever need inspect code exiting nonzero hook abort commit although bypass git commit noverify thing like check code style run lint something equivalent check trailing whitespace check appropriate documentation new method bundle exec rubocop e c rubocopyml echo offence found commit pas ci echo commit aborted really want commit anyway run git commit noverify commit message exit fi example use rubocop linting gem ruby detect code issue let user know exit status code one prevent code commited commitmsg commitmsg hook take one parameter path temporary file contains commit message written developer script exit nonzero git abort commit process use validate project state commit message allowing commit go use check commit message conformant required pattern modify commit useful way grep q e wip e work progress read p add wip commit want run ci yn n r devtty echo echo reply grep e nn devnull echo skip ci fi fi example search commit message entered developer certain pattern pattern found assumes commit work progress code asks developer confirm want run code ci user say hook modifies commit add skip ci label label indicates continuous integration service like circleci travisci etc want run test suite commit prepush prepush hook run git push remote ref updated object transferred receives name location remote parameter list tobeupdated ref stdin use validate set ref update push occurs abort push particular branch nonzero exit code abort push protectedbranchmaster currentbranch git symbolicref head sed e protectedbranch currentbranch read p push master intended yn n r devtty echo echo reply grep e yy devnull exit fi exit else exit fi script ask confirmation developer try push important branch like master developer confirms push happen usual otherwise prevent branch pushed setting hook project since git folder version control hook available developer install hook might good enough others example want protect branch developer would great could version control developer checkout code available well easily done setup script project add git config corehookspath pathtohooksfolder make repository look hook folder repository version control developer installs project hook place working conclusion three hook ensure developer push code fail unnecessary run ci choice run linting software avoid unwanted push protected branch also save resource avoiding ci run fail speed feedback loop since check run immediately local machine leave mind free think important stuff avoid error instead focusing simple thing easily automated credit quoted explanation definition githooks extracted official documentation githooks see documentation available hook
417,Lobsters,vcs,Git & VCS,GitHub’s “Squash and Merge” doesn’t Squash and doesn’t Merge! Trade-offs with Merging,https://maori.geek.nz/githubs-squash-and-merge-doesn-t-squash-and-doesn-t-merge-5044be7cd124,github squash merge squash merge tradeoff merging,github squash merge squash merge tradeoff merging githubflow merge pull request friction historical experimental repository merge manual squash merge squash merge git merge man page squash merge summary merge,github squash merge squash merge tradeoff mergingat coinbase use githubflowish workflow collaborate code develop feature create branchcreateeditdeleterename file branchcreate pull request pr merging branch masterget code reviewed make requested changesmerge prhowever still discussion around final step merge pull request option merge pull request git mergemanually squash branch git rebase git reset force push mergeuse squash merge function github basically git squash merge branchthe core difference method much friction developer use historical information left behindhow much friction method add developer work flow method make developer job unreasonably hard annoying otherwise people find workarounds follow standardsusing git blame git show code archeology tool see context change help developer understand bug exists fix historic record happened stored git github crumb information left exist accurate make difference hour work weekexperimental repositorybelow bash function creates repository experiment createexamplerepository ensure commit shas repository export date export gitcommitterdate date initializing repository readme git init echo repository readmemd echo example repositoryn readmemd git add readmemd git commit first commit date date creating example branch pr git co b newbranch echo branch readmemd git add readmemd git commit branch date date branch multiple commits echo example branch readmemd git add readmemd git commit fix test date date git co master simulate distributed work add another commit master echo repository readmemd echo example repository readmemd echo many people work onn readmemd git add readmemd git commit commit date date repeatedly create exact repository including commit sha different per person committer email git log graph oneline repository show example repository git logmergecreateexamplerepositorygit merge nocommit newbranchgit commit typical merging date datea simple merge example repositorythis method leaf git history record exactly happened useful though every mistake misstep merged branch remains turn make git blame git show le usefulhowever easiest method use github directly support merging requires extra work meaning project start using method codebase grows people work running git blame seeing fix test half line become annoyingmanual squash mergecreateexamplerepositorygit co newbranchgit reset git mergebase master newbranch git add readmemdgit commit squashed date dategit co mastergit merge nocommit newbranchgit commit squashed merge date datemanual squash merge example repositorythis difficult method use github directly support squashing branch become comfortable git rebase andor git reset also force pushing branch github wipe useful information like comment making difficult look back see decision madegit history clean though git blame git show accurate concise branch merge informationthis method preferred people comfortable git want clean history reduce friction use script make difficult situation even confusing want nontechnical team like design legal compliance contribute workflow technical strategy add difficultysquash mergecreateexamplerepositorygit merge squash newbranchgit commit squashing done date datesquash merge example repositoryin git merge man page say squash creates state real merge happened except merge information squash branch also create merge commit squash merge function github replicates squash mergenot information make git history difficult read difficult find commit came information like code written merged wrote code merged pr impossible find without also going github make tool designed git difficult integrate must also retrieve information githubgithub information like pull request title number added commit message also git history super clean used look like branch easy use creates super clean inaccurate historysummarymerge history messy accurate easymanual squash merge history clean difficultsquash merge clean inaccurate history fragmented git github easymy personal bias towards simple merge comfortable git history dumpster diving information typically work project developer lazy manually squash every branchon larger project trying get buyin team would lean towards squashandmerge inaccuracy good exchange ease use clean historyhow merge
418,Lobsters,vcs,Git & VCS,"Gittup, a linux distro on top of git",http://gittup.org/gittup/,gittup linux distro top git,gittuporg new linux distribution git tup work included install install tup tup install kconfig download gittuporg building gittuporg running qemu mod saving config regular update gittuporg nobody else make change bisection gittuporg nt,gittuporg new linux distribution entire ish linux distribution git everything built tup called gittup find github work linux distribution collection package package development history example green tree might correspond linus kernel tree typical linux distribution select particular version package put together user end something like gittuporg get whole development history applicable part standard distribution user get git project become submodules gittupgit repository extra yellowpurpleorange node correspond gittup branch maintain gittuporg mostly includes change support tup needed make configuration change bisection across entire distribution practical generally add tupfiles place makefiles add kconfig support configure software already present remove gitignore file generated automatically tup sometime later want update software newer version pull upstream repository merge gittup branch course since git history package work send patch include support new version included get git tree alsalib git gitalsaprojectorgalsalibgit alsautils git gitalsaprojectorgalsautilsgit binutils git githubcomjiezbinutilsgit busybox git busyboxnetbusyboxgit linux git uclibc git uclibcorguclibcgit additionally get release mplayer supporting library imported svn imported git respective tarballs could nt find actual version control repository ncurses nethack imported started use gcc git repo newest gcc git like slower reason ditched along crazy nonc compiler imported gcccore install bootstrap everything need development tool make sure least gcc ar ld nm objcopy flex bison gawk ncurses development library kconfig gperf kconfig mpfr development library may included gittup future gpm development library may included gittup future zlib development library may included gittup future qemu want run emulator ubuntu circa suffice aptget install buildessential flex bison qemu gperf gawk libmpfrdev libgpmdev yasm graphviz install tup need tup install put path somewhere install kconfig also need build patched kconfig support pushdpopd directive nt modify kconfig file kernel busybox wherever git clone git gittuporgkconfiggit cd kconfig kconfig tup init kconfig tup upd make sure add tupmconf tupconf path well download gittuporg need download entire distribution worth stuff download also type git tup million time everything involves either git tup named git andor tup git clone git githubcomgittupgittupgit cd gittup gittup git submodule init gittup git submodule update get point gittuporg much well still domain name cuz ponied like buck mean source history even crappy webpage post online somewhere start linux distribution building gittuporg anyway need setup tup compile everything need initialize tup set root build directory tup watch file track dependency kinda like git init build system instead version control system gittup tup init need configure distribution done kconfig run using menuconfig oldconfig first time run menuconfig please set following configuration option linux kernel general setup initial ram filesystem ram disk initramfsinitrd support linux kernel general setup configure standard kernel feature linux kernel general setup configure standard kernel feature load symbol debuggingksymoops busybox coreutils mknod busybox init utility init busybox shell choose default shell ash gittuporg initial ramdisk build initial ramdisk gittup menuconfig also start example config tweak like gittup cp exampletupconfig tupconfig finally build everything use tup upd something want parallelize compilation tup parallelsafe totally sweet gittup tup upd whenever edit source file tupfiles change configuration pull thing git whatever run tup upd bring everything uptodate want avoid time scan filesystem everytime run tup upd run tup builtin file monitor us inotify interface restart computer file monitor need restarted well may need procsysfsinotifymaxuserwatches variable sometimes work default sometimes bump gittup tup monitor although shell return immediately monitor command tup constructing initial filesystem database background finish see line initialized x second monitor running able change file system tup upd start recompiling within millisecond course depending scope change actual build time may much longer running qemu use qemush script run kernel initrd built root filesystem image since everything run ramdisk gittup sh qemush boot ncurses generates weird message binterminfosrc bit able press enter get shell type nethack first one ascend nethack using gittuporg win autographed cd favorite mod know thinking pas cd crappy music autographed guy nt know nt even write music could nt express better get ascending saving config save tupconfig file easily rebuild distribution built probably best way track git want track separate branch merge gittupgit master branch local branch another option check master branch nt ever conflict since wo nt push file called tupconfig git repository however use master branch get message like branch ahead originmaster x commits may annoying plan real development gittuporg send patch gittup git add tupconfig gittup git commit feel free play around config keep mind kallsyms loadable kernel module yet supported option nt use may broken well since script convert makefiles tupfiles perfect regular update periodically may want update latest version involves getting new change onto machine git building tup gittup git pull gittup git submodule init gittup git submodule update gittup oldconfig gittup tup upd gittuporg nobody else make change harness awesome power tup make change system anywhere system quickly see result marf captainfalcon gittup vi nethacksrcspellc marf captainfalcon gittup vi busyboxcoreutilslsc marf captainfalcon gittup time tup upd executing command busyboxcoreutilscc lsc nethackcc srcspellc busyboxcoreutilsld builtino busyboxld busybox nethackld nethack initrdbincp busybox initrdbincp nethack initrdmkinitrd initrdgzip initrd real user sys yeah marf yeah computer captainfalcon yeah edited spellcasting nethack felt like changed l print sup bro way list file like encouraged list thing like people call bro recompiled got new initrd like two second go ahead try change l system print extra message reason ca nt unless course running gittuporg running gittuporg nt playing nethack needlessly recompiling thing fun fact reading webpage nt even come web browser actually true metaphor something useful real build system make possible note harmlessly change file gcc still take forever since recompiles everything since nt tup short circuit build yet note probably want decent working knowledge git manage change probably use formatpatch send patch think include git somehow however gitsu master probably screw redo everything like always bisection let say running fine update get latest something break use git bisect across entire linux distribution find commit broke note may work across config change since tup nt automatically run oldconfig necessary note never actually tried assume work gittuporg nt fairness thing gittuporg nt example might use browse web well gittuporg ca nt fact really gittuporg recompile thing really fast play nethack watch movie mplayer sshfs thing actually need fixing support arch hardcoded thing lazyness kallsyms support kernel loadable kernel module thing never gittuporg make makedepend automake autoconf libtool ant scons glibc
419,Lobsters,vcs,Git & VCS,A Branching Strategy Simpler than GitFlow: Three-Flow,http://www.nomachetejuggling.com/2017/04/09/a-different-branching-strategy/,branching strategy simpler gitflow threeflow,gitflow successful git branching model git branching strategy google primary tutorial tremendous headache hoping possibly change post explaining different simpler branching strategy used multiple team great success threeflow basically threeflow work everyone committing codebase work together product replaced live another version without user awareness wrong gitflow primary flaw gitflow feature branch feature branch pushed origin integration hell almost inevitable developer primary form communication developer source code longrunning branch represent dead silence longrunning branch worst use feature toggle feature toggle consul zookeeper product owner stakeholder love able view dashboard toggle turn feature without asking developer virtually guarantee start using toggle instead branch longdeveloped feature never look back want use feature branch introducing threeflow commits master rebased automatic rebase pull releasing relevant feature toggle relevant feature toggle simply push tag new head production hotfixes possible rare release note common operation cut release candidate master release candidate find branch particular commit find tag branch pointing find commits going go release set candidate release branch first time question cactus model cactus model gitflow without feature branch code review codebase multiple artifact way manually type many argument use merging release branch summary opinion threeflow quickest easiest way get running sensible branching strategy minimal rule follow fewest complexity understand,conversation find field think anything else broken record convincing team adopt gitflow vincent driessen post successful git branching model become commonly known reason gitflow become de facto standard successfully adopt git team search git branching strategy google number one result atlassian even adopted one primary tutorial adopting git personally hate gitflow successfully convinced many team avoid using believe saved tremendous headache road gitflow believe lead team wrong path manage change since popular result team guidance technical leadership simply search example something work blog post mention successful right title attractive hoping possibly change post explaining different simpler branching strategy used multiple team great success seen gitflow fail spectacularly team strategy outline worked well dubbing threeflow exactly three branch four two three first word warning panacea work team kind development work fact top head believe would work well embedded programming shrinkwrap release software open source project basically threeflow work everyone committing codebase work together team least company taking code external developer via github something work everyone making commits trusted product replaced live another version without user awareness word hosted web application saas offering wrong gitflow brief primary flaw gitflow feature branch feature branch root evil pretty much everything result using feature branch terrible take nothing else away post hell even stop reading entirely please internalize utter disgust feature branch fair driessen post specifically say feature branch typically exist developer repos origin graphic really convey well including specific image origin includes pink feature branch three commits moreover encountered many team adopted considering adopting gitflow none ever noticed driessen recommends branch exist developer machine everyone ever met adopts gitflow longrunning remote feature branch nothing wrong making feature branch local machine good way hop different feature might working clean master case need make commit mainline without pulling working go original gitflow post say feature branch never pushed origin longrunning feature branch integration hell almost inevitable two engineer happily working away making commit commit respective feature branch neither branch seeing code even regularly pulling mainline still seeing commits make main branch others developer merges code mainline developer b pull merges deal ton merge conflict developer b might best position understand resolve conflict fully understand developer depending long branch alive might ton code resolve longrunning feature branch exact opposite want developer primary form communication developer source code matter often standup meeting come central method communication longrunning branch represent dead silence longrunning branch worst feature branch also scale terribly get away one developer longrunning feature branch team grows engineer codebase pair developer running feature branch failing communicate effectively work mere engineer running feature branch different failed communication line add another engineer missed line communication use feature toggle instead using feature branch use feature toggle code feature toggle essentially boolean value allow execute new code ready production still sharing possibly even deploying code look code exactly might expect newcodeenabled new code else old code old code continue executing newcodeenabled toggle flipped toggle implemented config file even kind globally accessible boolean though experience best way use external config like consul zookeeper feature toggled without requiring redeployment product owner stakeholder love able view dashboard toggle turn feature without asking developer two developer working branch using different feature toggle chance conflict far lower since working branch pull push multiple time per day stay insync bare minimum developer pull start day push end day two local repository sync workday automated test written case toggle basically mean new feature developed existing test simply need adjusted setup flag new test get added flag test suite ensures old way never break sometimes execution path code affected one toggle two toggle intersect way need group test variant one one ensures two developer working area code regularly seeing change integrating constantly code coverage tool easily tell missing potential path code feature toggle also expanded dynamic rather simply booleans could build system toggle could depend status user allowing user group user optin beta program give access bleeding edge feature developed solicit customer feedback toggle could dependent geographic location even diceroll allowing ab testing canary release feature ready turned feature finished turned production schedule small cleanup task delete old code path toggle leave code place feature may reason turn future left feature toggle place really saved day road major backend system experiencing catastrophic problem stakeholder wanted simply turn feature temporarily intend remove toggle good idea schedule regular process soon start feature lest team forget bigger shinier work come along overstate value feature toggle enough virtually guarantee start using toggle instead branch longdeveloped feature never look back want use feature branch nearly every case gave team member pushed hard feature branch reason wound massive pain later delayed release important software pretty much always regretted feature branch never regretted making feature toggle take getting used particularly accustomed longrunning branch positive impact toggle team tremendous introducing threeflow alright gotten feature branching table talk workflow used successfully multiple team approach developer work master feature going need development put behind feature toggle still kept master code commits master rebased good idea set automatic rebase pull local feature branch work rebased onto master trace branch origin main development work happens one branch default master branch everyone code everything else threeflow concerned managing release releasing time release regular cadence whenever stakeholder want call master branch cut candidate branch candidate branch used purpose purpose candidate allow qa team kind regression testing would like theoretically feature tested part accepting work done release candidate branch allows one last check make sure everything order going production master branch work done accepted tested productionlike environment relevant feature toggle candidate branch work sanitychecked release tested productionlike environment relevant feature toggle word run code way production new toggle defaulted cut release candidate git checkout candidate assume candidate already track origincandidate git pull make sure date locally git merge noff originmaster git tag git push followtags reason using noff force git create merge commit new commit two parent commit one parent previous head candidate one current head master allows easily view git history see branch cut commits pulled also noticed tagged release bit bug found candidate branch part testing effort fixed candidate tagged new release tag merged master merges also use noff parameter accurately reflect code moving two branch release candidate ready go door update release branch head point commit head candidate branch since tagging every release make candidate branch simply push tag new head release git push force origin release force basically mean ignore whatever else origin release branch set head point commit point note merge want complicate git history really reason even bothering release branch branch make production hotfixes need yes force push mean hotfix work release would get overwritten find releasing new candidate production ongoing hotfix production work team serious coordinationcommunication issue need addressed either way many production hotfixes major quality problem production hotfixes possible rare reason push force rather merge merge mean commit head candidate commit head release may different want want make new commit release want exactly qa commit head candidate rather create merge forcefully tell git make tip release exactly match release candidate head candidate production hotfixes need happen made release merged candidate master noff quite bit git work production hotfix distinct merge operation production hotfixes rare anyway follow workflow exactly view git history graph look pretty much exactly like picture showing exactly commits moved branch notice way graph resemble earlier picture see dotted line pushing release except recent one always force push meaning every time release production completely ignore production intentional matter production matter production right hotfix case production emergency time even see release branch graph whatever currently production whenever hotfixes made merged candidate master exactly want unnecessary information adding noise graph release note easily generate release note deployment production need compare tag current release branch tag current candidate branch using tag comparison using tag name easy remind tag production every time force update release branch pointer use tag mean always exactly tag point commit head release point find tag running git describe tag release know candidate branch tagged get list commits make difference two tag like git log oneline could also want mess tag following always compare release production candidate planned go production git log oneline release candidate running command show every single commmit new candidate previous release last gig liked include ticket number issue tracker commits allowed script crossindex list commits actual work item jira common operation summarize bit operation might want able example assume local branch properly set track remote branch local branch date sure often good idea git fetch use name like originmaster instead master ensure using origin version branch case stale cut release candidate master git checkout candidate git pull git merge noff master git tag optionally tag candidate git push followtags release candidate git push force origin tag candidate release alternatively using tag could git push force origin candidate release sure date locally git fetch git push force origin origincandidate release find branch particular commit often people want know particular code change currently production set go production next release easy way find three branch commit git branch r contains sha commit find tag branch pointing accurate term given branch pointer find tag point commit branch head git describe tag branch find commits going go release git log oneline release tag release candidate could also want mess tag git log oneline release origincandidate set candidate release branch first time create called orphan branch commits unable push origin set remote branch kind commit pretty much every project start initial commit usually readme something recommend making branch commit pushing looking first merge commit candidate two parent show log correctly really commit candidate work may well choose first one git branch candidate git log format h reverse head git checkout candidate git push try approach create fresh orphan commit find first time try merge git tell refusing merge unrelated history basically need branch share commit may well first commit word warning though might get merge conflict first time actually cut release candidate probably set release branch first time release soon force push right commit remote release branch set also want check local copy branch hotfixes may want git branch release git branch release setupstreamtooriginrelease question cactus model may wondering threeflow simply jussi judin cactus model alternative gitflow us default master branch development work part yes key difference judin recommends moving commits master release branch via cherrypicks much recommend cherrypicks last resort used correcting mistake prefer rebasing merging prefer merging cherrypicking think important able use merge commits actually see commits merged able pull accurate graph merges important use cherrypicking put commit wrong branch mistake main difference candidate branch accept something necessary evil goal always alwaysdeployable master commits automatically go production found organization team ready comfortable kind deployment schedule group like kind qa buffer time basically candidate provides goal team remove need candidate crutch mean time threeflow provides usable simple branching model generally give team everything need successful git gitflow without feature branch actually explained branching strategy gitflow adopter telling essentially gitflow except feature branch development happens develop rename gitflow develop master rename gitflow master release always le motivator behind threeflow simplicity gitflow encourages creation multitude feature branch release branch hotfix branch project go log start look impossibly complex threeflow feature branch hotfix branch hotfixes simply happen production release branch instead multiple release branch single candidate branch keep reusing need system name branch literally exactly three branch origin master candidate release answering question code go straightforward production hotfix go release fixing bug found qaing release candidate go candidate anything else go master code review code review gate master use process instead committing directly master commit however code review tool requires creating shortlived feature branch purpose gating commit master whatever code review tool prefers codebase multiple artifact lot people single codebase build multiple independently deployable artifact individual buildable artifact need separate qa cycle different artifact different version number production threeflow work setup actually worked way recently single git repository built multiple different artifact deployed independently solution simple independent artifact add two branch threeflow still single shared codebase master use feature toggle instead branch let say two artifact foo bar simply foocandidate foorelease barcandidate barrelease tag release candidate tag format otherwise process work exactly way scale better might expect recently large project different independently deployable artifact came single codebase candidate release branch plus master generally pretty strong mapping individual team one artifact team group still worked branch way manually type many argument one weirder aspect flow pretty much every command suggest typing git additional argument time merge asking merge noff cut release tag suggest push using push followtags tag get origin well actually set argument default since merging threeflow us noff safe run git config global mergeff run point simply run git merge without noff argument similarly set push always push locallycreated tag git config global pushfollowtags true mentioned good idea set master branch automatically rebase whenever pull like git config global branchmasterrebase true actually set new branch automatically rebase pull case making local feature branch track master git config global branchautosetuprebase always could leave global command configuration applies specific git repository working well use merging release branch first whatever want strategy worked multiple different team wanted spread around think much simpler gitflow moreover yes like idea push force update release losing historical information would rather merge noff mean advantage fewer thing remember basically time move code three branch merge noff fact early version strategy noff merges release worked fine reading git history really straightforward thing like kind fib go production exact head candidate went qa merge commit creates brand new commit release necessarily get tested could course merge commit release fastforwarding commits sort lose history anyway always chance branch fastforwarded need merge commit anyway forget rebasing release pretty much guaranteed work way ton merge conflict often similar one individually resolve commit release money force push kind reinforces release really branch treated like one really updated pointer production basically series tag except since branch easily make new commit production hotfixes though definitely simplicity advantage always thing candidate release hell either way preferable using gitflow mentioned much hate gitflow like bunch summary summarize main threeflow branching model outlined dangerous git alone take three branch origin master candidate release normal development happens master new commits rebased feature incomplete put behind feature toggle ideally dynamic toggle changed without redeploy cut release master merged candidate noff merge commit bug found candidate qa phase fixed candidate merged master noff merge commit candidate released production push forced tip release production hotfixes happen release merged candidate merged master really like say kind development paradigm apply largely geared toward web application think threeflow might work organization highly recommend giving shot adopting future headache incomprehensible git history gitflow opinion threeflow quickest easiest way get running sensible branching strategy minimal rule follow fewest complexity understand tried something similar loved tried something similar found issue solved think use force blasphemous use git stupidest dumb idiot ever ate booger feel free leave comment
421,Lobsters,vcs,Git & VCS,PRLint: a GitHub app for linting pull requests,https://github.com/ewolfe/prlint,prlint github app linting pull request,prlint problem solution screenshots example rule pull request object install http githubcomappsprlint usage key sample response object value regular expression regular expression credit license contributor emoji key allcontributors,prlint github app linting pull request problem want pull request consistent convention title description branch name label milestone solution prlint let run regular expression pull request meta data enable prlint status check pas pull request merged screenshots example rule githubprlintjson title pattern buildcidocsfeatfixperfrefactorstyletest message title need prefixed topic body pattern jirad flag message need jira ticket description pattern message need literally anything description headref pattern buildcidocsfeatfixperfrefactorstyletest message branch name invalid assigneelogin pattern message need assign someone pattern message product team need added reviewer addition pattern message pr big addition pattern bugenhancementquestion message please add label check anything listed pull request object install install via http githubcomappsprlint add file githubprlintjson root project title pattern buildcidocsfeatfixperfrefactorstyletest message title need prefixed topic test opening pull request title chore add prlint usage key top level key key github api expose pull request opened edited etc use anything listed sample response object sample response object target nested object use dot notation encoded within key string ie assigneelogin pattern octocat value top level value get define validation rule multiple rule expect array even single validation rule item array need object pattern javascript regular expression special character must escaped ie want check whitespace use pattern v pattern flag optional array string used regular expression example used make regex case insensitive message optional string customizing error message pull request page credit license mit contributor thanks go wonderful people emoji key project follows allcontributors specification contribution kind welcome
423,Lobsters,vcs,Git & VCS,High-level Problems with Git and How to Fix Them,https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/,highlevel problem git fix,hggit summarized conversion staging area historical reason branch remote management complex timeconsuming quilt fork nt model looking conclusion frequently lampooned poor usability documentation research paper alternative frontends,complicated relationship git git first came onto scene mid initially skeptical horrible user interface learned appreciated speed feature especially ease could create feature branch merge even create commits offline big deal era subversion dominant version control tool open source needed speak server order commit code started using git daytoday obvious improvement using mainly subversion even cv started working mozilla exposed mercurial version control still today host canonical repository firefox nt like mercurial initially actually despised thought slow feature lacking frequently encountered repository corruption first experience learning internals git mercurial came found hacking hggit tool allows convert git mercurial repository tofrom hacking hggit could improve performance converting mercurial repository git repository wanted use git mercurial hack firefox trying enable unofficial git mirror firefox repository synchronize faster would usable ulterior motive demonstrate git superior version control tool firefox switch canonical version control tool mercurial git textbook definition irony happened instead actually learned mercurial worked interacted mercurial community realized mozilla documentation developer practice lacking mercurial actually much much pleasant tool use git old post summarized conversion four half year ago started chain event somehow resulted contributing ton patch mercurial taking stewardship hgmozillaorg becoming member mercurial steering committee governance group mercurial project advocate mercurial year would probably say mercurial fanboy reject characterization fanboy connotation imply ignorant reality well aware mercurial fault weakness well aware mercurial relative lack popularity well aware lack popularity almost certainly turn away contributor firefox mozilla project people nt want learn new tool well aware change underway enable git scale large repository change could threaten mercurial scalability advantage git making choice use mercurial even harder defend aside party responsible pushing git adopt architectural change enable scale day microsoft could anyone foreseen achieved mastery git mercurial know internals command line interface extremely well understand architecture principle upon built also exposed experienced knowledgeable people mercurial community people around version control much much longer knowledge random version control tool probably never heard knowledge exposure allows make connection see opportunity version control quite frankly post talking highlevel highimpact problem git possible solution primary goal post foster positive change git service around personally prefer mercurial improving git good everyone put another way want knowledge perspective part version control community put good wherever speaking mercurial said heavy contributor somewhat influential mercurial community want clear opinion post speaking behalf mercurial project larger mercurial community also nt intend claim mercurial holierthanthou mercurial ton user interface failing deficiency even admit frustrated systemic failing mercurial gone unaddressed long another post post git let get started staging area staging area feature enabled default git configuration people see version control obstacle standing way accomplishing task want save progress towards goal word want version control save file feature workflow unfortunately modern version control tool nt work way starter require people specify commit message every time save annoying generally accept price pay version control commit message value others even future self must record people want barrier saving change effortless commit message already annoying many user git staging area establishes higher barrier saving instead saving change must first stage change saved requested save favorite gui application text editor etc popped open select change would like save dialog would rightly think save change already dammit exactly git staging area git saying know change made tell change like save average user infuriating work contrast save feature work almost every application counterargument made could say editorapplicationetc complex multiple context file context independent user full control context file even change within context save agree compelling feature however nt appropriate default feature ability pick change save poweruser feature user want save change time default behavior git staging area optin feature intrinsic workflow wart nt enough git staging area horrible user interface often referred cache historical reason cache course mean something anyone know anything computer programming git use cache nt align common definition yet terminology git persists run command like git diff cached examine state staging area huh git also refers staging area index terminology also appears git command git help commit numerous reference index let see git help glossary say index collection file stat information whose content stored object index stored version working tree truth told also contain second even third version working tree used merging index entry information regarding particular file stored index index entry unmerged merge started yet finished ie index contains multiple version file term enduser documentation train wreck tell lay user absolutely nothing index actually instead casually throw reference stat information requires user know stat function call struct object git term piece data stored git even undermines credibility truth told sentence definition bad would probably improve user understanding deleted course git help index say manual entry gitindex literally hope get concise understandable definition index instead one concept think learn interacting time oh git add something get state git commit actually save even know git staging areaindexcached still confound know interaction uncommitted change staging area working directory git rebase git checkout various git reset invocation confession ca nt remember edge case either play safe try make sure outstanding change committed run something like git rebase know safe git staging area nt complicated rebranding away index staging area would go long way adding alias git diff staged git diff cached removing reference cache common user command would make lot sense reduce enduser confusion course git staging area nt really need exist staging area essentially soft commit performs save progress role basic requirement version control tool aspect actually better save progress implementation commit nt require type commit message staging area soft commit workflow using modeled real commit staging area nt exist example instead git add interactive git commit run git commit interactive wish incrementally add new change inprogress commit run git commit amend git commit amend interactive git commit amend actually understand various mode git reset use uncommit course user interface performing action git today bit convoluted staging area nt exist new highlevel command like git amend git uncommit could certainly invented average user staging area complicated concept power user understand purpose harness power yet use mercurial nt staging area nt miss staging area instead learn operation involving staging area modeled fundamental primitive like commit amend likely encounter anyway staging area therefore constitutes unnecessary burden cognitive load user powerful complexity incurred confusion justify existence default git configuration staging area poweruser feature optin default branch remote management complex timeconsuming first used git coming cv subversion thought branch remote incredible enabled new workflow allowed easily track multiple line work across many repository year later still believe workflow enable important however amassed broader perspective also believe implementation poor unnecessarily confuses many user waste time user initial zen moment git time git finally clicked understood git object model git content indexed keyvalue store consisting different object type blob tree commits particular relationship ref symbolic name pointing git commit object git branch local remote ref welldefined naming convention refsheads name local branch refsremotes remote name remote branch even tag note defined via ref ref necessary primitive git git storage model throw object single keyvalue namespace since store content indexed key name cryptographic hash object content intent purpose random gibberish endusers git store unable locate object keyvalue store wanted find commits would need walk every object store read see commit object need buffer metadata object memory could reassemble say dag facilitate looking commit history approach obviously nt scale ref shortcircuit process providing pointer object importance may help think set ref index git store ref also serve another role guard garbage collection wo nt go detail loose object packfiles worth noting git keyvalue store also behaves way similar generational garbage collector like would find programming language java python important thing know git garbage collect read delete object unused mechanism us determine object unused iterate ref walk transitive reference initial pointer object store ca nt traced back ref unreachable deleted reflogs maintain history value ref ref contain log commit pointing pointer established established etc reflogs serve two purpose facilitating undoing previous action holding reference old data prevent garbage collected two use case related nt care undo nt need old reference prevent garbage collection design git store actually quite sensible perfect nothing solid foundation build version control tool even data storage application top title section suboptimal branch remote management hardly said anything branch remote lead main complaint git branch remote thin veneer ref property git underlying keyvalue store unnecessarily bleed userfacing concept like branch remote therefore dictate suboptimal practice referred leaky abstraction give example stated many user treat version control save file step workflow believe step interferes user saving work user hostile even includes writing commit message already argued staging area significantly interferes critical task git branch well designing version control tool scratch new user version control would probably think sane featurerequirement would update revision start making change git speak would something like git checkout make file change git commit think pretty basic workflow requirement version control tool workflow suggested pretty intuitive choose thing start working make change save change let see happens actually git checkout note checking detached head state look around make experimental change commit discard commits make state without impacting branch performing another checkout want create new branch retain commits create may later using b checkout command example git checkout b newbranchname head merge branch rsconfigwritesectionfix maint echo change readmemd git commit change detached head change file changed insertion git push indygreg fatal currently branch push history leading current detached head state use git push indygreg head nameofremotebranch git checkout master warning leaving commit behind connected branch change want keep creating new branch may good time git branch newbranchname switched branch master branch date originmaster know message mean mastered git newcomer even seasoned user might confused page happening along commentary run git checkout git trying tell potentially something could result loss data golden rule version control tool nt lose user data run git checkout git stating risk data loss clearly instead want create new branch sentence hiding fact instead phrasing thing around retaining commits create rather possible loss data user make connection retaining commits create actually mean nt eat data preventing data loss critical git mince word git commit seems work like normal however since detached head state phrase likely gibberish user commit nt referred ref lost easily git telling committed something may able find future nt git nt protective data need failure git push command essentially telling need give thing name order push pushing effectively remote save going apply reasoning version control tool interfering save pushing well git adding extra barrier remote save refusing push commits without branch attached user hostile finally git checkout master move another commit git actually something halfway reasonable telling leaving commits behind commits command use keep commits warning good great think need stronger reflect risk around data loss suggested git commit nt executed course reflog head ensure data nt immediately deleted user nt need involve reflogs lose data nt rewritten point want make git nt allow update save dumb store requires pointer relevant commits ref requirement nt abstracted away paved userfriendly feature frontend git effectively requiring endusers define name branch commits fail define name get lot harder find commits exchange git may delete data technically possible create branch version control tool essentially unusable without local branch exchanged appear remote branch others essentially give instance repository name remote branchesrefs fetched named remote appear ref ref namespace remote eg refsremotesorigin hold ref origin remote git allows specify refsremotes part refer eg refsremotesoriginmaster originmaster designing version control tool scratch new git user probably think remote ref would make good starting point work example know saving new work top master branch might inclined begin work running git checkout originmaster like specificcommit checkout git checkout originmaster note checking originmaster detached head state look around make experimental change commit discard commits make state without impacting branch performing another checkout want create new branch retain commits create may later using b checkout command example git checkout b newbranchname head relnotes eighth batch message got direct checkout supply refremote branch name give essentially git try enforce refsremotes namespace readonly updated operation exchange data remote namely git fetch git pull git push work correctly need create new local branch initially point commit refsremotesoriginmaster point switchactivate local branch could go talking subtle nuance git branch managed wo nt used git know need use branch may may recognize frequently type branch name git command guarantee familiar version control tool workflow nt based manage ref track data find git forced usage ref branch bit absurd half jokingly refer git game ref say coming mercurial nt require name thing git workflow feel like typing name branch ref git command feel like wasting precious time telling git name thing necessary placate leaky abstraction git storage layer requires reference relevant commits git version control nt way said mercurial workflow nt rely naming thing unlike git mercurial store explicit shared storage location commits changesets mercurial parlance data structure ordered meaning changeset later always occurs parentpredecessor mean mercurial open single fileindex quickly find changesets mercurial nt need pointer commits relevance name nt required zen mercurial moment came realized nt name thing mercurial used git mercurial conditioned always naming thing git way truth told common name thing mercurial well mercurial named branch way feature branch mercurial year used mq extension essentially port quilt also requires naming individual patch git user coming mercurial missing git branch mercurial bookmark poor port git branch recently mercurial user coming realization name nt really necessary tool nt actually require naming thing force user name thing long user find commits need find actually need name demonstration mercurial workflow lean heavily hg show work hg show stack command need enable show extension putting following hgrc config file use extension show running hg show work also set config commandsshowaliasprefixsto enable type hg swork find inprogress changesets likelyrelevant changesets name dag head print concise dag changesets hg show stack show current line work relationship important head aside bookmarkname set topmost changeset name come remote repository set name outside code archeology workflow hg show work show changesets care time care inprogress work possible rebase target rendered concisely nt name thing find whatever looking running hg show work yes need run hg show work visually scan looking copy random hash fragment number command sound like lot work believe far le work naming thing practice workflow realize much time actually spend finding typing name hg especailly git command ability hg update changeset commit without name thing liberating feel like version control tool putting fewer barrier letting work quickly another benefit hg show work hg show stack present concise dag visualization user help educate user underlying shape repository data see connected node graph change time make lot easier understand concept like merge rebase nameless workflow may sound radical conditioned naming thing initially thought crazy well mechanism give rapid access data care hg show work mercurial case name become optional pure nameless workflow nt without limitation want name identify main target work eg master branch exchange work others name easier work especially since name survive rewriting experience commits exchanged synchronizing inprogress commits across device code review tool nt really need name operate raw commits frequent use name come repository maintainer mode need ensure commits name others reference could git support nameless workflow theory git need ref find relevant commits store wire protocol us ref exchange data ref exist git function assuming git nt radically change storage exchange mechanism mitigate need ref would massive change nt see happening fundamental requirement ref exist nt necessarily mean userfacing name must exist reason need branch today branch little ref special behavior theoretically possible invent mechanism transparently map nameless commits onto ref example could create refsnameless namespace automatically populated dag head nt name attached git could exchange ref like branch today would lot work think implication design implement support nameless development git think possible encourage git community investigate supporting nameless workflow adopted workflow mercurial git workflow around naming branch feel heavyweight restrictive put another way nameless commits actually lighterweight branch git branch common user want version control save feature requiring name establishes barrier towards goal removing naming requirement would make git simpler approachable new user fork nt model looking section hosted git service like github bitbucket gitlab git since hosted git service synonymous git interaction hosted git service regular part common git user workflow feel like need cover worth experience mozilla tell large percentage people say prefer git use git actually mean like github git githubbitbucketgitlab effectively thing mind many anyone finding discussing version control need keep mind git command line tool ecosystem come right say think fork relatively poor model collaborating light year better existed still far turnkey experience possible fork nt really changed much since current implementation made popular github many year ago view general failure hosted service innovate shared understanding fork implemented github bitbucket gitlab etc essentially complete copy repository git clone using git fresh workspace additional valueadded service hosting provider offer pull request issue wikis project tracking release tracking etc open main web page fork service look like main project know fork cosmetic somewhere typically next projectrepository name saying forked service provider adopted fork terminology fork used open source refer splintering project someone group people nt like direction project taking wanted take ownership project stagnation etc would fork fork based original may even active collaboration fork original intent fork create distance original project new incantation new entity sufficiently independent original fork service provider mostly retain old school fork model fork get new copy issue wikis etc anyone fork establishes look like independent incantation project worth noting execution varies service provider example github wo nt enable issue fork default thereby encouraging people file issue upstream project forked good default behavior know service provider initially implemented thing way easy building product simpler say user version project git clone get fresh database technical level meet traditional definition fork rather introduce new term vernacular repurposed fork albeit softer connotation since traditional fork commonly implied form strife precipitating fork help differentiate flavor fork going define term soft fork hard fork soft fork fork exists purpose collaboration differentiating feature soft fork hard fork whether fork intended used project hard fork change intended merged upstream project consumed soft fork nt concrete number willing wager vast majority fork git service provider change soft fork rather hard fork word fork exist purely conduit collaborate canonicalupstream project facilitate shortlived oneoff change current implementation fork borrows lot predecessor name good great way facilitate collaboration nt great technically resembles expect see hard fork use case even though used predominantly soft fork mismatch creates problem take step back invent version control hosted service nt tainted exposure existing service willing think bit beyond making glorified frontend git command line interface might realize problem solving product selling collaboration service git hosting service product collaboration implementing collaboration model around hard fork model strong barrier original project fork counterproductive undermines product github bitbucket gitlab others implemented product improve collaboration version control hosted service concept fork need significantly curtailed replacing ui workflow revolves around central canonical repository nt need create clone fork repository order contribute instead able clone canonical repository create commits commits stored andor tightly affiliated original project inside fork one potential implementation doable today going call workspace would work would exist namespace ref controlled user example github username indygreg wanted contribute random project would git push ref somewhere refsusersindygreg directly project forking necessary wanted contribute project would clone repo push workspace could today configuring git refspec properly push would look something like refsheads refsusersindygreg tell git map local ref refsheads refsusersindygreg remote repository became popular feature presumably git wire protocol could taught advertise feature git client automatically configured push userspecific workspace attached original repository several advantage workspace model many revolve around eliminating fork initial contribution time serverside fork necessary order contribute would able clone contribute without waiting configuring fork create commits web interface clone would nt even necessary lowering barrier contribution good thing especially collaboration product selling web ui workspace would also revolve around source project world like fork today people could easily see others fetching work would require typing username opposed configuring whole new remote would bring community closer hopefully lead better collaboration requiring fork also eliminates need synchronize fork upstream repository nt know one thing bother game ref git imposes keep ref sync upstream ref fetch origin pull new master branch need git merge branch local master branch need push new master branch fork quite tedious easy merge wrong branch get branch state whack better way map remote ref local name make far le confusing another win push store data multiple time working fork separate repository git fetch change upstream need eventually git push fork ever worked large repository nt super fast internet connection may stymied git push large amount data fork quite annoying especially people slow internet connection would nt nice git push pushed data truly new nt already exist somewhere else server workspace model development occurs original repository would fix bonus would make storage problem server easier would eliminate thousand fork probably would nt care much data duplication across reposclones version control tool solves lot problem courtesy data live alongside original repository instead fork another win workspacecentric development would potential userfriendly thing pullmerge request incorporated official project example ref workspace could deleted automatically would ease burden user clean submission accepted instead mashing key play game ref would taken care automatically yes know script shell alias make turnkey userfriendly behavior nt optin default workspace nt rainbow unicorn access control concern probably nt want user able mutate workspace user make compelling case project administrator ability someone push bad illegal content workspace receive cease desist take offending workspace complying order happens original project deleted workspace die trivial concern nt feel impossible tackle either workspace one potential alternative fork come multiple implementation workspace concept although many constrained current feature git wire protocol git finally getting extensible wire protocol hopefully enable nice thing challenge git service provider like github bitbucket gitlab think outside box implement something better fork implemented today large shift think user appreciate long run conclusion git ubiquitous version control tool frequently lampooned poor usability documentation even research paper telling u part bad nobody know pleasant initial experience git clear people actually understand git know command incantation need know accomplish small set common activity person nothing ashamed git hard tool popular gitbased hosting collaboration service github bitbucket gitlab exist made stride make easier commit data git repository purposefully avoid saying use git usable tool seem avoid git command line interface much possible often thin veneer git see fork git thin veneer content indexed keyvalue store see forced usage bookmark industry concerned lousy usability git tool service surround may say git near monopoly version control mindset success different view think failure tool user experience bad achieved success cost git poor usability measured ten hundred million dollar time people wasted could nt figure use git git viewed source embarrassment success story really concerning usability problem git known year yet popular ever substantial usability improvement alternative frontends floating around nt caught loss understand open source tool popular git remained mediocre long source code anybody submit patch fix many people get tripped poor usability issue year git became common version control tool certainly appears industry unable unwilling address systemic deficiency critical tool sure despite pessimism git usability poor track record attentive need people nt power user optimistic future brighter word post pale comparison aggregate word count written git hopefully post strike nerve cause positive change one generation toiled usability problem git nt mean next generation suffer git improved encourage change happen three issue possible solution would good place start
424,Lobsters,vcs,Git & VCS,Introducing Bitbucket Deployments: Confidence to release early and often,https://blog.bitbucket.org/2017/12/05/introducing-bitbucket-deployments/,introducing bitbucket deployment confidence release early often,pipeline single line code pipeline yaml configuration getting started bitbucket deployment plan type build minute read learn power team,team deploying code faster ever thanks continuous delivery practice tool like bitbucket pipeline caused huge problem hard keeping deployment knowing thing built bitbucket deployment sit next source code configurable single line code need set maintain separate deployment tool scroll unrelated build ci service analyze deployment using deployment bitbucket pipeline allows manage track code development code review build test deployment way production let jump specific feature show tracking deployment bitbucket help team move faster today deployment visibility new dashboard deployment dashboard give single place see version software running environment complete history earlier deployment environment bitbucket configured box test staging production team choose use one environment needed current status shown dashboard reflects last deployment attempted environment configured via pipeline yaml file also shown dashboard full deployment history list every deployment environment see build went deployed deployed diagnosing problem history list filtered show deployment one environment trace back find offending change tying code deployment together deployment summary bitbucket cloud one tool manage source code deployment smarter average deployment tool wonder code change went deployment bitbucket tell see click one deployment dashboard complete detailed history every deployment investigating problem becomes much easier team quickly confirm cause bug roll forward fix preview promote deployment environment preventing mistake key part every team deployment process many team still manual checkpoint otherwise automated process however manual checkpoint difficult need lead developer trawling dozen diffs pr review set change prior pushing live bitbucket deployment builtin promotion workflow allows take verified build running one environment promote next bitbucket chatbot also allows set deployment notification slack team notified automatically deployment occurs configure notification sent successful stopped failed deployment tracked bitbucket deployment get started enabling deployment build best bit using pipeline single line code enable deployment tracking pipeline yaml configuration check example tracking enabled test staging production deployment getting started bitbucket deployment pipeline pricing based simple consumptionbased model build minute used every bitbucket plan includes build minute unlike cloud vendor nt charge concurrency meaning nt pay extra follow cicd best practice run pipeline step fast build minute minute executing pipeline runner excluding time acquiring runner word minute pipeline status progress bitbucket plan come set amount monthly build minute plan type build minute free minute standard minute premium minute want get started deployment read learn bitbucket plan one right team power team interested upgrading standard premium advanced admin setting security permission greater flexibility
425,Lobsters,vcs,Git & VCS,OxidationPlan - Using Rust in Mercurial,https://www.mercurial-scm.org/wiki/OxidationPlan#,oxidationplan using rust mercurial,using rust mercurial use rust run time mercurial test harness commandserver pypy pypy pypy desired end state frequently asked question rust required use mercurial feature implemented rust therefore require rust current status begin landed mononoke mercurial server hgexperimental priority oxidation problem crt mismatch window http docsmicrosoftcomenuscppcruntimelibrarypotentialerrorspassingcrtobjectsacrossdllboundaries http docsmicrosoftcomenuscppcruntimelibraryreferencecrtalphabeticalfunctionreference pyobject pyobject rust support debian http packagesdebianorgsourcestablerustc http packagesdebianorgsourcebusterrustc redhatcentos gentoo openbsd http fastlycdnopenbsdorgpubopenbsdsnapshotspackages packaging overhaul needed distributing python window linux macos macports bsds solaris etc pypi pip support pypy noncpython python pypy pypy rust python interop pypy running hg test rust extension reconciling hg rust extension preserving support extension categorynewfeatures categorynewfeatures,using rust mercurial page describes plan status leveraging rust programming language mercurial use rust today mercurial python application us python c extension various place achieve better performance many advantage python application significant disadvantage performance significant pain point python multiple facet performance problem startup overhead general performance overhead compared native code gil interfering parallel execution take several dozen millisecond start python interpreter load mercurial python module many extension loaded could take well effectively get mercurial command main function report known command may complete mere millisecond python overhead already made hg seem noninstantaneous endusers year ago measured cpython interpreter startup overhead amounted run time mercurial test harness may sound like lot enough give perception mercurial slower tool like git run command also situation like querying hg shell prompt require nearinstantaneous execution mercurial also heavily scripted tool like ides want tool provide result near instantaneously people waiting result hg make tool feel sluggish workarounds startup overhead problem commandserver start persistent process issue multiple command chg c binary speaks mercurial command server enables chg command execute without python startup overhead chg existence need hg native binary order avoid python startup overhead hg nt python script would nt need chg separate program python also substantially slower native code pypy deliver substantially better performance cpython workload pypy might even faster native code due jit overall python slower native code even pypy magical performance still gil python nt allow execute cpubound python code multiple thread cpu bound need offload work extension release gil executes hot code spawn multiple process since mercurial need run window new process overhead worse posix platform optimized spawning thread process many potential speedup realize via concurrency offset window new process overhead python startup overhead need threadlevel concurrency window help shorterlived cpubound workload includes thing like revlog reading happens nearly every mercurial operation addition performance concern python also hindering u dynamic programming language mercurial large project python standard large project harder maintain using statically typed programming language find bug compile time enable u make widesweeping change fearlessly improve mercurial development velocity today performance issue mercurial developer currently turn c treat c measure last resort brittle easy introduce security vulnerability memory leak etc top vanilla c python c api somewhat complicated take significantly longer develop c component barrier writing bugfree c much higher furthermore mercurial need run multiple platform including window nice thing want native code complicated implement c crossplatform c hard standard library inadequate compared modern language modern version c nice still support python thus need build msvc window nt nice feature modern version c thing like introducing thread pool current c code would hard rust support standard library work rust standard library pretty compelling advantage cc project mercurial mercurial rust around better c much safer speed usable standard library module system easily pulling party code desired end state frequently asked question rust required use mercurial intention make rust requirement use mercurial however feature implemented rust therefore require rust likely feature today require c chg one zstandard support kind another support cffi binding zstandard need working c compiler build binding question need working c compiler use feature substitute c compiler rust compiler answer also possibility implement new highlevel feature rust pure python implementation would optional feature example new local storage format may implemented rust client supporting running rust code would unable use storage format missing feature would better performance new storage format also possible tie additional feature eg partial clone require new storage format likely pressure pure python implementation highlevel mercurial feature nt anticipate many highlevel stable feature launching would exclude pure python client current status last updated october october pure rust implementation lazyancestors algorithm land ability call rust code python speed operation october rust port chg begin january proofofconcept hg implemented rust landed facebook mononoke mercurial server written rust ton mercurial primitive implemented repo facebook hgexperimental repository python extension written rust priority oxidation existing c code priority oxidation nt like maintaining c code safety compatibility reason existing c code includes addition following would good candidate oxidation revlog io reading important writing working directory io extracting content revlogsstore writing filesystem reading writing changelog reading revsets filesystem io allows u use window apis properly handle filename window problem crt mismatch window mercurial still us python python officially compiled msvc link rust standard library nt support msvc likely linked something newer like msvc want compatibility binary python extension need use python built msvc linked option build custom python distribution modern msvc drop support party binary python extension switch mercurial python build rust code toolchain python target mix crt significantly undermines mercurial extensibility plus python built msvc nt officially supported progress however timeline officially supporting python point transition official distribution likely far would hinder rust adoption effort leaf mixing crt would work rust component statically link modern crt python dynamically load mixing crt dangerous attempt perform multipart operation multiple crt thing could blow eg malloc crt free crt b attempt operate file instance across crt info http docsmicrosoftcomenuscppcruntimelibrarypotentialerrorspassingcrtobjectsacrossdllboundaries see also http docsmicrosoftcomenuscppcruntimelibraryreferencecrtalphabeticalfunctionreference full list crt function fortunately exposure multiple crt problem significantly reduced rust standard library nt make heavy use crt primitive memory managed rust python already kept separate python api rust speak wo nt transferring ownership raw pointer rust python python refcounting mechanism ensures pyobject destroyed python time ownership memory cross bridge create something rust pas python object pyobject backing memory would managed python apis nt using file anywhere io open file descriptor would likely limited created context eg open file rust likely reading python would keep close eye crt object spanning multiple crt mitigate exposure bad pattern establishing static analysis rule source code also examine produced rust binary symbol reference raise warning unwanted crt function used rust code said crt mismatch mostly problem python python support mercurial bulk problem may go away nt support rust python window rust support mercurial relies entity like linux distros package distribute mercurial mean consider support packaging program use rust else risk losing packagers mean need consider minimum version rust require whether use beta nightly rust feature official mercurial distribution consideration nt exist giving binary endusers topic relationship downstream packagers debian stretch debian rust http packagesdebianorgsourcestablerustc buster debian rust http packagesdebianorgsourcebusterrustc redhatcentos rhel centos rust via epel gentoo track rust stable channel rust package maintainer prefers u maintain support openbsd rust support support work month cycle stable release rust usage mercurial support rust minus month month leeway rust maintainer update rust plus month mercurial cycle concern expressed backports mercurial security patch fear rust code harder backport python code nonrust fallback lose mercurial package lot platform list supported platform http fastlycdnopenbsdorgpubopenbsdsnapshotspackages packaging overhaul needed hg becomes rust binary want mercurial selfcontained application need overhaul packaging mechanism operating system distributing python mercurial would need distribute copy python python insists embedded python load pythonxx shared library eg would also need distribute copy python standard library py pyc etc file could distributed flat form hundred py file zip file python support importing module zip file wanted get creative could invent archive format module loading mechanism feel like unnecessary work ca nt prune python standard library unused module mercurial extension may make use feature standard library distributing entire python standard library distribution python required various packagers like operating system would want mercurial use python provided rust hg need support loading bundled python python provided likely controlled buildtime flag window mercurial could conceptually distributed zip file archive would contain prebuilt hgexe pythonxxdll shared library dependency copy python standard library mercurial python file support file zip file nt user friendly likely provide standalone exe msi installer like today linux could provide selfcontained archive file containing hg binary dependency could also provide rpm deb etc package popular distribution would selfcontained dependent many package biggest concern libc compatibility solved static linking compiling sufficiently old compatible libc providing distrospecific package course many distros want provide mercurial package likely want mercurial make use system python must support issue selfcontained distribution loading shared library operating system loader may support loading binaryrelative shared library may need hack something together us dlopen explicitly specify etc load macos similar linux may support native application installer mechanism make thing user friendly nt good support today likely user rely homebrew macports installation bsds solaris etc basically strategy linux pypi pip support installing mercurial via pip today upload source distribution pypi anyone pip install mercurial install mercurial python environment window user ca nt easily compile binary python extension provide python wheel prebuilt mercurial binary future pip install mercurial oxidized mercurial le clear pip tailored towards python application mercurial rust application python implementation detail make sense use pip pypi distribution channel pip install mercurial convenient least people pip installed run certainly easier downloading running installer unless bake upgrade facility mercurial pip install mercurial next best thing upgrading system package manager apt yum brew port etc pip install mercurial go welldefined mechanism take artifact downloaded pypi install mechanism could abused facilitate use pypipip distributing selfcontained mercurial distribution eg user would end rust binary pythonhomebinhg load custom version python fully selfcontained isolated python pip installed would super hacky may even allowed pypi hosting term service could certainly abuse pip install needed support pypy noncpython python exist python distribution beyond official cpython distribution pypy likely one interest u performance advantage cost supporting noncpython python hg rust binary could high would likely significantly curtail use cpython api instead interop via ctypes cffi provide n way interop worth noting mercurial selfcontained application could potentially swap cpython pypy could go far unsupport cpython completely rust python interop rust python code need call although anticipated bulk calling python rust code least initially many option u lowlevel rust binding cpython api mostly declaration kots unsafe code rustcpython higherlevel wrapper around want use daytoday rust programming provide backandforth call python rust code fork rustcpython seems bit nicer requires nightly rust feature last checked constfn milksnake us rust cbindgen crate automatically generate python cffi binding rust library essentially write rust library export symbol milksnake generate python binding lot going definitely interesting approach component useful without rest milksnake eg idea using cbindgen cffi generate lowlevel python binding milksnake us cffi approach work cpython pypy keep rust code organized inner pure rust crate python binding hgcore used even non python context one hand one several crate different binding approach hgdirectffi first landed effort performs direct ffi binding currently exploring using rustcpython occasionnally getting lowerlevel python sys needed seems possible produce python extension subpackage backed single shared library possibly allowing compiler perform agressive optimization case usage rust mercurial optin time currently controlled setting hgwithrustext environment variable build process major reason adopting rust c performance know mercurial c extension native code often vasly undermined crossing python native boundary b excessive use python api native code example obsolescence marker parsing faster c however construct pyobject parsed marker faster know using ctypes call python native code significantly slower binary python extension although number function call data transferred across boundary small difference nt pronounced rust enable u write functionality native code try avoid writing c today maintainability security reason performance python native bridge important time therefore seems prudent rule ctypes leaf u extension cffi running hg test rust extension run test rust extension using testsruntestspy rustyou install mercurial rust extension using setuppy rust installor pure rust make installif environment variable hgwithrustextcpython set rust extension used default unless norust reconciling hg rust extension initially hg minimal rust binary embeds python interpreter simply tell interpreter invoke mercurial main function world rust functionality likely loaded via shared library python extension word multiple rust context running different binary executable shared library executable handle early process activity shared library handle business logic time likely want expand role rust early process activity example need implement command line processing rust chg functionality may also want implement config file loading need rewrite config parser anyway facilitate writing back config change could load repo disk maybe even implement performance critical command like hg status pure rust would likely massive performance win although consider interact extensibility mean multiple rust binary holding mercurial state feel brittle ideally single rust binary python needed call nativerust code would get symbol parent hg binary instead shared library unclear would work obviously possible resolve address symbol current binary existing call native code mechanism python seem assume symbol coming loaded library current executable may require modification cffi custom code generate python binding executablelocal symbol preserving support extension mercurial implemented python good extensibility mean extension customize nearly every part mercurial often via monkeypatching use rust longer dynamic nature python extension lose power hg implemented rust python called could lose ability python extension influence lowlevel core operation eg want implement hg status nt invoke python incur python startup overhead enable extension still influence behavior hg status presumably hg eventually implement config file loading command line processing rust able see extension loaded assuming hg resolve path loaded extension could add syntax main extension file declare influence various behavior example extension influence behavior hg status source code could contain something like hgextinfluences cmdstatus rust would see special syntax know need instantiate python interpreter order load extension current hg status command could also imagine something similar functionality implemented rust core store interface categorynewfeatures categorynewfeatures
426,Lobsters,vcs,Git & VCS,How to use Git hooks to version control your Excel VBA code,https://www.xltrail.com/blog/auto-export-vba-commit-hook,use git hook version control excel vba code,git hook oletools note setting git precommit hook note conclusion go zerosetup opensource alternative git xl doc github repository,exporting vba module standalone basclsfrm file simple effective way make git aware code inside excel workbook goal end separate file vba module benefit git functionality one common way achieve via excel workbookaftersave workbookbeforesave event every time hit save excel vba code executed save copy workbook vba content filesystem end vba file alongside workbook pushed git server git hook downside using excel event dependent excel copy workbook email another folder git repository folder vba export function run distributing export function either via copy paste addin ensuring run reliably another pain point alternative approach exploit git builtin hook hook program place hook directory trigger action certain point git execution find list available hook http gitscmcomdocsgithooks use precommit hook following call git commit extract vba module workbook write ba cl frm file repository add vba file commit via git add srcvba finally execute git commit command use python package oletools extract vba code excel file fact work m office file thus longer resort excel get hold vba code script requires python oletools oletools installed via pip python package manager pip install u oletools create file named precommitpy githooks folder inside repository add following code note following code updated multiple time according feedback last time import o import shutil import vbaparser excelfileextensions xlsb xl xlsm xla xlt xlam keepname false set true would like keep attribute vbname def parse workbookpath vbapath srcvba vbaparser vbaparser workbookpath vbamodules vbaparserextractallmacros vbaparserdetectvbamacros else filename content vbamodules decodedcontent contentdecode line rn decodedcontent line decodedcontentsplit rn else line decodedcontentsplit n line content line line linestartswith attribute vb line vbname line keepname contentappend line else contentappend line content content contentpop len content nonemptylinesofcode len c c content c nonemptylinesofcode ospathexists ospathjoin vbapath osmakedirs vbapath open ospathjoin vbapath filename w f fwrite njoin content name main root dirs file oswalk f dirs fendswith vba shutilrmtree ospathjoin root f f file fendswith excelfileextensions parse ospathjoin root f python script find excel file contain vba dump content subfolder named srcvba note script work unchanged use workbook one workbook one repository need replace vbapath srcvba vbapath workbookpath vba edit precommit file accordingly git add workbookname vba line workbook setting git precommit hook missing bit set git precommit create file precommit githooks inside repository add following code binsh python githooksprecommitpy git add srcvba note mac need run chmod x githooksprecommit otherwise trigger hook execute git commit hook extract vba code add commit automatically end ba file without rely excel conclusion order automagically export workbook vba module standalone text file every git commit need python oletools installed file precommit precommitpy githooks directory place git commit automatically take care dumping workbook vba content text file filesystem something git understands well go zerosetup opensource alternative le diy person recommend checking free opensource git extension git xl instead rely workaround xltrail client git extension integrates directly git make git diff work excel workbook file also support git merge instance colleague work workbook need merge change plus xltrail client go step beyond vbaonly approach also understands sheet installation instruction doc example video check doc github repository
427,Lobsters,vcs,Git & VCS,Using Rust in Mercurial,https://www.mercurial-scm.org/wiki/OxidationPlan,using rust mercurial,using rust mercurial use rust run time mercurial test harness commandserver pypy pypy pypy desired end state frequently asked question rust required use mercurial feature implemented rust therefore require rust current status begin landed mononoke mercurial server hgexperimental priority oxidation problem crt mismatch window http docsmicrosoftcomenuscppcruntimelibrarypotentialerrorspassingcrtobjectsacrossdllboundaries http docsmicrosoftcomenuscppcruntimelibraryreferencecrtalphabeticalfunctionreference pyobject pyobject rust support debian http packagesdebianorgsourcestablerustc http packagesdebianorgsourcebusterrustc redhatcentos gentoo openbsd http fastlycdnopenbsdorgpubopenbsdsnapshotspackages packaging overhaul needed distributing python window linux macos macports bsds solaris etc pypi pip support pypy noncpython python pypy pypy rust python interop pypy running hg test rust extension reconciling hg rust extension preserving support extension categorynewfeatures categorynewfeatures,using rust mercurial page describes plan status leveraging rust programming language mercurial use rust today mercurial python application us python c extension various place achieve better performance many advantage python application significant disadvantage performance significant pain point python multiple facet performance problem startup overhead general performance overhead compared native code gil interfering parallel execution take several dozen millisecond start python interpreter load mercurial python module many extension loaded could take well effectively get mercurial command main function report known command may complete mere millisecond python overhead already made hg seem noninstantaneous endusers year ago measured cpython interpreter startup overhead amounted run time mercurial test harness may sound like lot enough give perception mercurial slower tool like git run command also situation like querying hg shell prompt require nearinstantaneous execution mercurial also heavily scripted tool like ides want tool provide result near instantaneously people waiting result hg make tool feel sluggish workarounds startup overhead problem commandserver start persistent process issue multiple command chg c binary speaks mercurial command server enables chg command execute without python startup overhead chg existence need hg native binary order avoid python startup overhead hg nt python script would nt need chg separate program python also substantially slower native code pypy deliver substantially better performance cpython workload pypy might even faster native code due jit overall python slower native code even pypy magical performance still gil python nt allow execute cpubound python code multiple thread cpu bound need offload work extension release gil executes hot code spawn multiple process since mercurial need run window new process overhead worse posix platform optimized spawning thread process many potential speedup realize via concurrency offset window new process overhead python startup overhead need threadlevel concurrency window help shorterlived cpubound workload includes thing like revlog reading happens nearly every mercurial operation addition performance concern python also hindering u dynamic programming language mercurial large project python standard large project harder maintain using statically typed programming language find bug compile time enable u make widesweeping change fearlessly improve mercurial development velocity today performance issue mercurial developer currently turn c treat c measure last resort brittle easy introduce security vulnerability memory leak etc top vanilla c python c api somewhat complicated take significantly longer develop c component barrier writing bugfree c much higher furthermore mercurial need run multiple platform including window nice thing want native code complicated implement c crossplatform c hard standard library inadequate compared modern language modern version c nice still support python thus need build msvc window nt nice feature modern version c thing like introducing thread pool current c code would hard rust support standard library work rust standard library pretty compelling advantage cc project mercurial mercurial rust around better c much safer speed usable standard library module system easily pulling party code desired end state frequently asked question rust required use mercurial intention make rust requirement use mercurial however feature implemented rust therefore require rust likely feature today require c chg one zstandard support kind another support cffi binding zstandard need working c compiler build binding question need working c compiler use feature substitute c compiler rust compiler answer also possibility implement new highlevel feature rust pure python implementation would optional feature example new local storage format may implemented rust client supporting running rust code would unable use storage format missing feature would better performance new storage format also possible tie additional feature eg partial clone require new storage format likely pressure pure python implementation highlevel mercurial feature nt anticipate many highlevel stable feature launching would exclude pure python client current status last updated october october pure rust implementation lazyancestors algorithm land ability call rust code python speed operation october rust port chg begin january proofofconcept hg implemented rust landed facebook mononoke mercurial server written rust ton mercurial primitive implemented repo facebook hgexperimental repository python extension written rust priority oxidation existing c code priority oxidation nt like maintaining c code safety compatibility reason existing c code includes addition following would good candidate oxidation revlog io reading important writing working directory io extracting content revlogsstore writing filesystem reading writing changelog reading revsets filesystem io allows u use window apis properly handle filename window problem crt mismatch window mercurial still us python python officially compiled msvc link rust standard library nt support msvc likely linked something newer like msvc want compatibility binary python extension need use python built msvc linked option build custom python distribution modern msvc drop support party binary python extension switch mercurial python build rust code toolchain python target mix crt significantly undermines mercurial extensibility plus python built msvc nt officially supported progress however timeline officially supporting python point transition official distribution likely far would hinder rust adoption effort leaf mixing crt would work rust component statically link modern crt python dynamically load mixing crt dangerous attempt perform multipart operation multiple crt thing could blow eg malloc crt free crt b attempt operate file instance across crt info http docsmicrosoftcomenuscppcruntimelibrarypotentialerrorspassingcrtobjectsacrossdllboundaries see also http docsmicrosoftcomenuscppcruntimelibraryreferencecrtalphabeticalfunctionreference full list crt function fortunately exposure multiple crt problem significantly reduced rust standard library nt make heavy use crt primitive memory managed rust python already kept separate python api rust speak wo nt transferring ownership raw pointer rust python python refcounting mechanism ensures pyobject destroyed python time ownership memory cross bridge create something rust pas python object pyobject backing memory would managed python apis nt using file anywhere io open file descriptor would likely limited created context eg open file rust likely reading python would keep close eye crt object spanning multiple crt mitigate exposure bad pattern establishing static analysis rule source code also examine produced rust binary symbol reference raise warning unwanted crt function used rust code said crt mismatch mostly problem python python support mercurial bulk problem may go away nt support rust python window rust support mercurial relies entity like linux distros package distribute mercurial mean consider support packaging program use rust else risk losing packagers mean need consider minimum version rust require whether use beta nightly rust feature official mercurial distribution consideration nt exist giving binary endusers topic relationship downstream packagers debian stretch debian rust http packagesdebianorgsourcestablerustc buster debian rust http packagesdebianorgsourcebusterrustc redhatcentos rhel centos rust via epel gentoo track rust stable channel rust package maintainer prefers u maintain support openbsd rust support support work month cycle stable release rust usage mercurial support rust minus month month leeway rust maintainer update rust plus month mercurial cycle concern expressed backports mercurial security patch fear rust code harder backport python code nonrust fallback lose mercurial package lot platform list supported platform http fastlycdnopenbsdorgpubopenbsdsnapshotspackages packaging overhaul needed hg becomes rust binary want mercurial selfcontained application need overhaul packaging mechanism operating system distributing python mercurial would need distribute copy python python insists embedded python load pythonxx shared library eg would also need distribute copy python standard library py pyc etc file could distributed flat form hundred py file zip file python support importing module zip file wanted get creative could invent archive format module loading mechanism feel like unnecessary work ca nt prune python standard library unused module mercurial extension may make use feature standard library distributing entire python standard library distribution python required various packagers like operating system would want mercurial use python provided rust hg need support loading bundled python python provided likely controlled buildtime flag window mercurial could conceptually distributed zip file archive would contain prebuilt hgexe pythonxxdll shared library dependency copy python standard library mercurial python file support file zip file nt user friendly likely provide standalone exe msi installer like today linux could provide selfcontained archive file containing hg binary dependency could also provide rpm deb etc package popular distribution would selfcontained dependent many package biggest concern libc compatibility solved static linking compiling sufficiently old compatible libc providing distrospecific package course many distros want provide mercurial package likely want mercurial make use system python must support issue selfcontained distribution loading shared library operating system loader may support loading binaryrelative shared library may need hack something together us dlopen explicitly specify etc load macos similar linux may support native application installer mechanism make thing user friendly nt good support today likely user rely homebrew macports installation bsds solaris etc basically strategy linux pypi pip support installing mercurial via pip today upload source distribution pypi anyone pip install mercurial install mercurial python environment window user ca nt easily compile binary python extension provide python wheel prebuilt mercurial binary future pip install mercurial oxidized mercurial le clear pip tailored towards python application mercurial rust application python implementation detail make sense use pip pypi distribution channel pip install mercurial convenient least people pip installed run certainly easier downloading running installer unless bake upgrade facility mercurial pip install mercurial next best thing upgrading system package manager apt yum brew port etc pip install mercurial go welldefined mechanism take artifact downloaded pypi install mechanism could abused facilitate use pypipip distributing selfcontained mercurial distribution eg user would end rust binary pythonhomebinhg load custom version python fully selfcontained isolated python pip installed would super hacky may even allowed pypi hosting term service could certainly abuse pip install needed support pypy noncpython python exist python distribution beyond official cpython distribution pypy likely one interest u performance advantage cost supporting noncpython python hg rust binary could high would likely significantly curtail use cpython api instead interop via ctypes cffi provide n way interop worth noting mercurial selfcontained application could potentially swap cpython pypy could go far unsupport cpython completely rust python interop rust python code need call although anticipated bulk calling python rust code least initially many option u lowlevel rust binding cpython api mostly declaration kots unsafe code rustcpython higherlevel wrapper around want use daytoday rust programming provide backandforth call python rust code fork rustcpython seems bit nicer requires nightly rust feature last checked constfn milksnake us rust cbindgen crate automatically generate python cffi binding rust library essentially write rust library export symbol milksnake generate python binding lot going definitely interesting approach component useful without rest milksnake eg idea using cbindgen cffi generate lowlevel python binding milksnake us cffi approach work cpython pypy keep rust code organized inner pure rust crate python binding hgcore used even non python context one hand one several crate different binding approach hgdirectffi first landed effort performs direct ffi binding currently exploring using rustcpython occasionnally getting lowerlevel python sys needed seems possible produce python extension subpackage backed single shared library possibly allowing compiler perform agressive optimization case usage rust mercurial optin time currently controlled setting hgwithrustext environment variable build process major reason adopting rust c performance know mercurial c extension native code often vasly undermined crossing python native boundary b excessive use python api native code example obsolescence marker parsing faster c however construct pyobject parsed marker faster know using ctypes call python native code significantly slower binary python extension although number function call data transferred across boundary small difference nt pronounced rust enable u write functionality native code try avoid writing c today maintainability security reason performance python native bridge important time therefore seems prudent rule ctypes leaf u extension cffi running hg test rust extension run test rust extension using testsruntestspy rustyou install mercurial rust extension using setuppy rust installor pure rust make installif environment variable hgwithrustextcpython set rust extension used default unless norust reconciling hg rust extension initially hg minimal rust binary embeds python interpreter simply tell interpreter invoke mercurial main function world rust functionality likely loaded via shared library python extension word multiple rust context running different binary executable shared library executable handle early process activity shared library handle business logic time likely want expand role rust early process activity example need implement command line processing rust chg functionality may also want implement config file loading need rewrite config parser anyway facilitate writing back config change could load repo disk maybe even implement performance critical command like hg status pure rust would likely massive performance win although consider interact extensibility mean multiple rust binary holding mercurial state feel brittle ideally single rust binary python needed call nativerust code would get symbol parent hg binary instead shared library unclear would work obviously possible resolve address symbol current binary existing call native code mechanism python seem assume symbol coming loaded library current executable may require modification cffi custom code generate python binding executablelocal symbol preserving support extension mercurial implemented python good extensibility mean extension customize nearly every part mercurial often via monkeypatching use rust longer dynamic nature python extension lose power hg implemented rust python called could lose ability python extension influence lowlevel core operation eg want implement hg status nt invoke python incur python startup overhead enable extension still influence behavior hg status presumably hg eventually implement config file loading command line processing rust able see extension loaded assuming hg resolve path loaded extension could add syntax main extension file declare influence various behavior example extension influence behavior hg status source code could contain something like hgextinfluences cmdstatus rust would see special syntax know need instantiate python interpreter order load extension current hg status command could also imagine something similar functionality implemented rust core store interface categorynewfeatures categorynewfeatures
428,Lobsters,vcs,Git & VCS,Git hash function transition,https://github.com/git/git/blob/master/Documentation/technical/hash-function-transition.txt,git hash function transition,,git hash function transition objective migrate git stronger hash function background core git version control system content addressable filesystem us hash function name content example file directory revision referred hash value unlike traditional version control system file version referred via sequential number use hash function address content delivers advantage integrity checking easy bit flip example easily detected hash corrupted content match name lookup object fast using cryptographically secure hash function brings additional advantage object name signed third party trust hash address signed object object reference communication using git protocol band communication method short reliable string used reliably address stored content time flaw discovered security researcher february shattered attack http shatteredio demonstrated practical hash collision git later subsequently moved hardened implementation default nt vulnerable shattered attack thus git effect already migrated new hash nt nt share vulnerability new hash function happens produce exactly output known input except two pdfs published shattered researcher new implementation written researcher claim detect future cryptanalytic collision attack regardless considered prudent move past variant new hash guarantee future attack wo nt published future attack may viable mitigation variant truly broken git hash function could considered cryptographically secure would impact communication hash value could trust given hash value represented known good version content speaker intended still posse property fast object lookup safe error checking hash function equally suitable believed cryptographically secure goal transition done one local repository time requiring action party b repository communicate git server pushfetch c user use identifier object interchangeably see object name command line new signed object make use stronger hash function security guarantee allow complete transition away local metadata compatibility removed repository compatibility longer needed maintainability throughout process object format kept simple consistent b creation generalized repository conversion tool nongoals add support git protocol valuable logical next step scope initial design transparently improving security existing signed object intermixing object using multiple hash function single repository taking opportunity fix bug git format protocol shallow clone fetch repository change add support git protocol skip fetching submodules project repository also depends support git protocol overview introduce new repository format extension repository extension enabled use instead name object affect object name object content name object reference object within object switched new hash function repository read older version git alongside packfile repository store bidirectional mapping object name mapping generated locally verified using git fsck object lookup use mapping allow naming object using either name interchangeably git catfile git hashobject gain option display object form write object given form requires object referenced object present object database named using appropriate name using bidirectional hash mapping fetch based server convert fetched object form record mapping bidirectional mapping table see detail push based server convert object pushed form server aware hash function client using detailed design repository format extension repository us repository format version see documentationtechnicalrepositoryversiontxt extension objectformat compatobjectformat core repositoryformatversion extension objectformat compatobjectformat combination setting populating extension ensures version git later die instead trying operate repository instead producing error message git status fatal expected git repo version found git status fatal unknown repository extension found objectformat compatobjectformat see transition plan section detail repository extension object name object named hexadecimal digit hexadecimal digit plus name derived see gitrevisions object concatenation type length nul byte object traditional used git name object object concatenation type length nul byte object object format content byte sequence tag commit tree object named differ object named refers object object named refers object object except object referenced object named using instead blob object refer object format allows roundtrip conversion object storage loose object use zlib compression packed object use packed format described documentationtechnicalpackformattxt like today content compressed stored us instead pack index pack index idx file use new format support multiple hash function following format integer network byte order header appears beginning consists following pack index signature version number length header section including signature version number number object contained pack number object format pack index object format format identifier eg length byte shortened object name shortest possible length needed make name shortened object name table unambiguous integer recording table relating format stored index file offset beginning offset trailer beginning file zero additional keyvalue pair key value one key supported psrc see loose object unreachable object section supported value used key reserved reader must ignore unrecognized key zero nul byte optionally used improve alignment full object name table table first object format sorted table shortened object name prefix name object pack file packed together without offset value reduce cache footprint binary search specific object name table full object name pack order allows resolving reference nth object pack file reachability bitmap next table another object format object name table value mapping object name order pack order object table sorted shortened object name value corresponding index table index previous table object used look object reachability bitmap look name another object format table value packed object data order object appear pack file allow compressed data copied directly pack pack repacking without undetected data corruption table offset value object table sorted shortened object name value corresponding index table indicates object found pack file usually pack file offset large offset encoded index next table significant bit set table offset entry empty pack file le gib pack file organized heavily used object toward front object reference need refer table zero nul byte table second object format layout including table value zero nul byte trailer consists following copy checksum end corresponding packfile checksum loose object index new file gitobjectdirlooseobjectidx contains information loose object format looseobjectidx sp lf object name hexadecimal format file sorted loose object index protected concurrent writes lock file gitobjectdirlooseobjectidxlock add new loose object write loose object temporary file like today open looseobjectidxlock ocreat oexcl acquire lock rename loose object place open looseobjectidx oappend write new object unlink looseobjectidxlock release lock remove entry eg git packrefs gitprune open looseobjectidxlock ocreat oexcl acquire lock write new content looseobjectidxlock unlink loose object removed rename replace looseobjectidx releasing lock translation table index file support bidirectional mapping lookup proceeds similarly ordinary object lookup example convert look object idx file match present idx sorted list truncated read corresponding entry order pack name order mapping b read corresponding entry full table verify found right object c read corresponding entry full table object check loose object read line looseobjectidx find match step take amount time ordinary object lookup number pack log object per pack step take number loose object time maintain good performance necessary keep number loose object low see loose object unreachable object section detail since operation make new object eg git commit add new object corresponding index mapping possible object object store reading object object read converting reference using translation table fetch fetching based server requires translating based representation fly named ref advertisement present client translated looked local object using translation table negotiation proceeds today generated locally converted sent server mentioned server converted looking locally negotiation server sends packfile containing requested object convert packfile format using following step indexpack inflate object packfile compute object contain delta objrefdelta format object client locally object looked using translation table read described resolve delta topological sort starting want negotiation phase walk object pack emit list excluding blob reverse topologically sorted order object coming later list object reference list contains object reachable want pack server contained additional extraneous object discarded convert open new packfile read topologically sorted list generated object inflate convert write pack record new mapping entry use idx sort reorder entry new pack match order object pack server generated include blob write idx file clean remove based pack file index topologically sorted list obtained server step step requires every object referenced new object translation table topological sort step necessary optimization step could write file describing nonblob object object inflated packfile reference make topological sort step possible without inflating object packfile second time object need inflated step total two inflation step probably necessary good readtime performance git packobjects server optimizes pack file good data locality see documentationtechnicalpackheuristicstxt detail process likely change take experimenting get perform well push push simpler fetch object referenced pushed object already translation table object pushed read described reading object section generate pack written git sendpack signed commits add new field commit object format allow signing commits without relying similar existing gpgsig field signed payload commit object gpgsig field removed mean commits signed using existing signed commit object using using gpgsig field using using field old version git verifycommit verify gpgsig signature case without modification view case ordinary unsigned commit signed tag add new field tag object format allow signing tag without relying signed payload tag field begin pgp signature delimited inbody signature removed mean tag signed using existing signed tag object using using inbody signature using using field mergetag embedding mergetag field commit contains tag merged commit mergetag field commit contains tag submodules convert recorded submodule pointer need converted submodule repository place translation table submodule used look new hash loose object unreachable object fast lookup looseobjectidx require number loose object grow high git gc auto currently wait loose object present consolidating packfile need measure find appropriate threshold use git gc auto currently wait pack present combining packfiles packing loose object aggressively may cause number pack file grow quickly mitigated using strategy similar martin fick exponential rolling garbage collection script http git gc currently expels unreachable object encounter pack file loose object attempt prevent race pruning case another process simultaneously writing new object refers abouttobedeleted object lead explosion number loose object present disk space usage due object delta form replaced independent loose object worse race still present loose object instead git gc need move unreachable object new packfile marked unreachablegarbage using psrc field see avoid race writing new object referring abouttobedeleted object code path write new object need copy object unreachablegarbage pack refer new nonunreachablegarbage pack loose object unreachablegarbage safe delete creation time indicated file mtime long enough ago avoid proliferation unreachablegarbage pack combined certain circumstance gcgarbagettl set greater one day pack created within single calendar day utc coalesced together resulting packfile would mtime midnight day make effective maximum ttl garbagettl day gcgarbagettl le one day divide calendar day interval onethird ttl duration pack created within interval coalesced together resulting packfile would mtime end interval make effective maximum ttl equal garbagettl rule come thirumala reddy mutchukota jgit change http unreachablegarbage setting go psrc field pack index generally field indicates pack came packsourcereceive pack received network packsourceauto pack created lightweight gc auto operation packsourcegc pack created full gc packsourceunreachablegarbage potential garbage discovered gc packsourceinsert locally created object written directly pack file eg git add information useful debugging gc auto make appropriate choice pack coalesce caveat invalid object conversion retains brokenness original object eg tree entry mode encoded leading tree object whose path sorted correctly commit object without author committer deliberate feature design allow conversion roundtrip profoundly broken object eg commit truncated tree header line converted usable current git anyway shallow clone submodules requires referenced object available locally generated translation table design support shallow clone unfetched submodules protocol improvement might allow lifting restriction alternate reason repository borrow object repository using objectsinfoalternates gitalternateobjectrepositories git note git note tool annotates object using key design describe way migrate note tree use migration expected happen separately example using file root note tree describe hash us serverside cost git protocol gain support using based storage publicfacing git server strongly discouraged git protocol gain support based server likely support compatibility avoid may expensive hash reencode clone encourage peer modernize design described allows fetch client personal repository much difficult allowing push repository support need guarded configuration option server like gitkernelorg serve large number client would expected bear cost meaning signature signed payload signed commits tag explicitly name hash used identify object day git adopts new hash function length current hexadecimal digit hexadecimal digit object intent behind pgp signed payload object signature unclear object type commit tag tagger junio c hamano gitster poboxcom git mean git commit commit fortunately different length git start using another hash length name object need change format signed payload using hash address issue object name command line support transition see transition plan design support four different mode operation dark launch treat object name input user convert object name written output store object using allows user test code visible behavior change except performance allows allows running even test assume hash function sanitycheck behavior new mode early transition allow object name input object name written output use allows user continue make use communicate peer eg email migrated yet prepares mode late transition allow object name input object name written output use mode user using secure object naming method default disruption minimal long peer mode mode posttransition treat object name input user write output using safer mode le risk input incorrectly interpreted using wrong hash function mode specified configuration user also explicitly specify format use particular revision specifier output overriding mode example git log choice hash early around time git written xiaoyun wang yiqun lisa yin hongbo yu announced attack finding collision operation august published detail luckily practical demonstration collision full published year later git later subsequently moved hardened implementation default mitigates shattered attack still believed weak hash replace hardened stronger would like trustworthy useful practice least year relevant property hash long enough match common security practice excessively long hurt performance disk usage high quality implementation widely available eg openssl apple commoncrypto hash function property match git need eg git requires collision preimage resistance require length extension resistance tiebreaker hash fast compute fortunately many contender faster choose transition plan initial step implemented independently one another adding hash function api vtable teaching fsck tolerate field excluding gpgsig field copied git commit amend annotating test depend value test prerequisite using struct objectid gitmaxrawsz gitmaxhexsz consistently instead unsigned char hardcoded constant introducing index adding support psrc field safer object pruning first uservisible change introduction objectformat extension without compatobjectformat requires teaching fsck mode operation using hash function api vtable computing object name signing object verifying signature rejecting attempt fetch push incompatible repository next come introduction compatobjectformat implementing looseobjectidx translating object name object format translating object content object format generating verifying signature compat format adding appropriate index entry adding new object object store outputformat option revision notation configuration specify default input output format see object name command line next step supporting fetch push repository allow push repository using compat format generate topologically sorted list name fetched object convert fetched packfile format generate idx file resort match order object fetched packfile infrastructure supporting fetch also allows converting existing repository converted repository new clone end user gain support new hash function without visible change behavior see dark launch object name command line section particular allows user verify signature object repository ensure transition code stable production preparation using widely time project would encourage user adopt early transition late transition mode take advantage new futureproof object name objectformat compatobjectformat set command generating signature would generate signature default support new old user project using heavily user could encouraged adopt posttransition mode avoid accidentally making implicit use object name critical mass user upgraded version git verify signature converted existing repository support verifying add support setting generate signature expected least year later also good moment advertise ability convert repository use stripping related metadata improves performance eliminating translation overhead security avoiding possibility accidentally relying safety updating git protocol allow server specify hash function support also important part transition discussed detail document transition plan assumes happens alternative considered upgrading everyone working particular project flag day project like linux kernel large complex enough flipping switch project based repository infeasible would developer server operator supporting developer switch flag day supporting tooling continuous integration code review bug tracker etc would adapted well also make difficult get early feedback project participant testing time mass adoption using hash function parallel eg http chiarkgreenendorguk object newly created would addressed new hash inside object eg commit still possible address object using old hash function trust history needed bisectability future without work maintenance burden number supported hash function grows never go away accumulate proposal comparison converted object lose reference signed object multiple hash instead introducing field commit tag object based signature earlier version design added hash field strengthen existing based signature word single signature used attest object content using hash function advantage using one signature instead two speed signing process one signed payload hash allows signer attest referring object user consume signature broken signature likely detected quickly using current version git however also came disadvantage verifying signed object requires access object reference even transition complete translation table longer needed anything else support design added field hash tree hash parent signed commit complicating conversion process allowing signed object without transition complete complicated design requiring nohash field suppress including hash field signed payload lazily populated translation table work building translation table could deferred push time would significantly complicate slow push calculating object creation time time streamed disk calculated acceptable cost document history bmwill googlecom jonathantanmy googlecom jrnieder gmailcom sbeller googlecom initial version sent http aiedemtvcorpgooglecom jrnieder gmailcom incorporated suggestion jonathantanmy sbeller describe purpose signed object hash type redefine signed object verification using object content first hash function jrnieder gmailcom use instead thanks linus brian carlson make signature separate field avoiding need hash nohash field thanks peff add sorting phase fetch thanks junio noticing need omit blob topological sort fetch thanks peff discus alternate git note git server caveat section thanks junio hamano brian carlson shawn pearce clarify language throughout thanks various commenters especially junio jrnieder gmailcom sbeller googlecom use placeholder newhash instead describe criterion picking hash function include transition plan thanks especially brandon williams fleshing idea define translation table thanks shawn pearce jonathan tan masaya suzuki avoid loose object overhead packing aggressively git gc auto later history see history file gitgit history subsequent edits document history longer maintained would superfluous commit log http mailgmailcom http mailgmailcom http sigillintrapeffnet http genrecrustytoothpastenet http mailgmailcom
429,Lobsters,vcs,Git & VCS,Git PSA: git-rev-parse,https://blog.plover.com/prog/git-rev-parse.html,git psa gitrevparse,git psa gitrevparse find commit id current head command article category prog permanent link,git psa gitrevparse another public service announcement git number command everyone learns first start using git almost nobody learns right away first thing learn get comfortable using git day day one uninterestingsounding name gitrevparse git bewildering variety notation referring commits object type something like commit gitrevparse window git understanding name git revparse pretty frequent question find commit id current head answer git revparse head want abbreviated git revparse short head important command manual command whether expect use command read manual every command us git bewildering variety notation manual notation completely documented use ref name like master git find gitrefsheadsmaster use originmaster git find gitrefsremotesoriginmaster use head git find githead difference gitrevparse manual explains git know annoying long branch name like create short alias sticking ref gitct git log ct git rebase onto ct whatever know write topic yesterday mean commit topic pointing know write penguin system refer recent commit whose commit message mention penguin system head penguin system mean recent commit head branch know powerful sublanguage range give gitlog specify sort useful thing commits want look got comfortable git got habit rereading gitrevparse manual every month time would notice new useful tool check important next step previous psa article category prog permanent link
431,Lobsters,vcs,Git & VCS,Fossil: Fossil-NG,https://www.fossil-scm.org/index.html/wiki?name=Fossil-NG,fossil fossilng,status hash policy feature goal sqlite partial clone syncs shallow clone narrow clone monorepo selective sync private branch better git integration nearly old git dvcses fossil v git roundtrip git github export fossil repository fossil git frontend git fossil backend git fossil frontend famously cicd system vcs file container sqlite archiver support multiple vcs format gitspecific case fossil tied single file format,status discussion format record idea fossil next generation fossilng currently code place fossilng broadly document collect idea come since fossil created difficult enough build atop current design solving might involve breakage compatibility prior fossil version much hash policy feature forced change fossil fossil implementing following idea might force similarly epochal shift fossil fossil goal evaluating following idea important keep mind primary important purpose fossil support development sqlite project succeeded fabulously respect change implemented fossilng must respect history particular fossilng must able import complete sqlite history intact without change hash identifier partial clone syncs fossil currently limited complete clone complete syncs several drawback realworld workflow solve adding support shallow clone ability clone recent history project allows efficient working clone large repository almost certainly nt need year past history longrunning project local machine almost certainly nt need minute initial clone possible clone say past day open branch initially artifact pulled central repository necessary narrow clone ability clone subset project selected subdirectory two primary use case first might simple singleproject repository subdirectory like doc src test etc might need say src subdirectory given operation point taking disk space checkout directory subdirectory holding file intention ever using second fossil currently work best repoperproject version control strategy fossil speed drop continually size repository grows large part due lookup time sqlite repo db file roughly proportional log n n number artifact checkins file etc true dvcses remain good argument monorepo narrow clone allow monorepo work subset actually need given case selective sync ability pushpullsync single branch current closest alternative private branch number workflow drawback better git integration although fossil nearly old git several popular dvcses git emerged dominant dvcs part due market force rather purely technical merit see fossil v git unfortunate various version control system available today git least userfriendly nevertheless fossil must level accommodation reality fossil currently several feature line primarily longstanding fossil import git command much newer fossil git export command latter replaces old fossil export git command deprecated fossil still missing piece however like able roundtrip git github export fossil repository effectively readonly clone someone sends pr github export accept github work wo nt propagate back fossil project maintain sane version history checkins project must go fossil git way fossil export git replaced powerful fossil git export command like fossil git import command would sync change git repo back fossil repo allowing full roundtripping two within limitation various format word way exclude thing outside git file format nt going try make github issue sync fossil ticket vice versa example fossil git frontend would nice able use superior fossil command line web ui experience preexisting git repos without fossil import git conversion like following work fossil clone http githubcommemyrepogit cd myrepo fossil ui hack file git repo fossil ci wrapper git commit git push expand topic git fossil backend step away using git repository format fossil storage option start instead starting work git converting fossil could say something like fossil init git repo create git packfileformatted repository directory lose fossil feature like ticket tracker wiki web forum etc course git fossil frontend although git command famously much difficult use fossil practical advantage allowing integration existing automated tooling instance would help fossil adoption could use text editor git integration feature work fossil repository rather require reimplemented fossilspecific integration another common case cicd system know pull git repos rarely builtin capability deal fossil repos vcs file container one way think vcs enhanced file container use file container format like tar zip create single snapshot project vcs except allows one store multiple snapshot fossilng facility allow work fossil repository simple manner traditional commandline file archiving tool like tar zip example fossil new newrepofossil makefile readmemd src command create file container named newrepofossil contains file makefile readmemd file src repository would compact suitable sending email attachment like one would tarball zip archive sqlite archiver project show build file container using sqlite storage fossilng include capability sqlite archiver though underlying file format doubtless advanced also support blockchain versioning current fossil provides webpage link commandline operation generating zip archive tarball particular checkin fossilng continue capability also able generate singlecheckin repository serf file container support multiple vcs format fossilng provide ability store artifact various format git mercurial legacy fossil fossilng generalization gitspecific case principle fossil tied single file format possible encode fossil repository atop substrate current sqlitebased db file format repository contains gitformatted artifact capability interoperate seamlessly git repository allows example fossilng user clone use repository github continuing use superior fossil user interface also allows fossil server answer clonepushpull request legacy git client symmetry applies mercurial legacy fossil thus using single fossilng client user interface developer interact legacy repository variety format without learn idiosyncrasy multiple vcses fossilng able operate repository hold mixture artifact various format legacy git hg fossil client however able interoperate fossilng repository host artifact one format client understands converting artifact one format another expensive computation expensive onthefly however conceivable fossilng could used convert repository githgfossil format offline operation
432,Lobsters,vcs,Git & VCS,Boa: A Domain-Specific Language for Ultra Large Scale Software Repository Mining (2015),http://boa.cs.iastate.edu/papers/tosem15.pdf,boa domainspecific language ultra large scale software repository mining,,obj goto endobj obj introduction endobj obj goto endobj obj motivation endobj obj goto endobj obj boa enabling data intensive open source research endobj obj goto endobj obj design boa language endobj obj goto endobj obj domainspecific type boa endobj obj goto endobj obj mapping java boa custom ast endobj obj goto endobj obj extending ast support new language feature endobj obj goto endobj obj declarative visitor ease source code mining endobj obj goto endobj obj supporting custom traversal endobj obj goto endobj obj mining snapshot time endobj obj goto endobj obj mining revision pair endobj obj goto endobj obj bringing together endobj obj goto endobj obj mapreduce support boa endobj obj goto endobj obj quantifier boa endobj obj goto endobj obj userdefined function boa endobj obj goto endobj obj boa supporting infrastructure endobj obj goto endobj obj compiler runtime endobj obj goto endobj obj userdefined function endobj obj goto endobj obj quantifier endobj obj goto endobj obj protocol buffer endobj obj goto endobj obj webbased interface endobj obj goto endobj obj data infrastructure endobj obj goto endobj obj storage strategy endobj obj goto endobj obj query output format endobj obj goto endobj obj evaluation endobj obj goto endobj obj applicability endobj obj goto endobj obj detailed example endobj obj goto endobj obj result analysis endobj obj goto endobj obj scalability endobj obj goto endobj obj storage strategy evaluation endobj obj goto endobj obj discussion endobj obj goto endobj obj debugging validating boa query endobj obj goto endobj obj analysis pipeline boa endobj obj goto endobj obj extending boa additional data endobj obj goto endobj obj related work endobj obj goto endobj obj mining software repository endobj obj goto endobj obj metadata model endobj obj goto endobj obj programming language endobj obj goto endobj obj future work conclusion endobj obj goto r fit endobj obj length filter flatedecode stream b wvw fh wlց
433,Lobsters,vcs,Git & VCS,Repo style wars: mono vs multi,http://www.gigamonkeys.com/mono-vs-multi/,repo style war mono v multi,repo style war mono v multi eero two philosophy invest watching basket implication monorepo bazel buck pant mercurial hack tooling support implication multirepo best world repo reading,repo style war mono v multi november essay originally written consulting eero graciously allowed share fundamental law repo topology must cyclical dependency repos world hurt perform series nonatomic change update going monorepo advantage never problem one repo hand working monorepo implies certain thing rest development process even philosophy development two philosophy fundamental difference monorepo multirepo philosophy boil difference allow team working together system go fastest multirepo view extreme form let every subteam live repo flexibility work area however want using whatever library tool development workflow etc maximize productivity cost obviously anything developed within given repo consumed thirdparty library service even written person sitting one desk find bug say library use fix appropriate repo get new artifact published go back repo make change code repo deal different code base potentially different library tool even different workflow maybe ask someone owns system make change wait get around monorepo view hand friction especially dealing complicated dependency graph much costly multirepo advocate recognize productivity gain letting different team go way really significant may case team find locally optimal way working also likely gain offset team choosing suboptimal way working probably cargo culting approach letting bitrot putting egg one basket monorepo afford invest watching basket carefully clearly friction make change repos worse wait team make change largely avoided monorepo anyone fact encouraged change anything find bug library fix get life friction found bug code point perhaps sharpest practical difference monorepo multirepo philosophy difference responsible making change necessary deal library change owner library x make change api responsible fixing code us x monorepo library x author check change whole build clean find fix code change would break word library author forced balance benefit making breaking change cost fixing code break going fixing multirepo world hand library x folk would simply check change repo publish new versioned artifact fall team working repos dependency x newer version make whatever change need deal choice really rest think let developer go fastest obviously library author multirepo approach requires le work short make change want publish new binary consumer library slowed deal library x change code base get destabilized someone come muck life seems wait opportune time adopt new version make necessary change code thing free lunch long term library maintainer library user pay short term gain maintainer support multiple version library since everyone upgrade right away consumer eventually upgrade new version thing may blocked upgrading want code depend upgraded implication monorepo main challenge running monorepo naturally get larger time since scale horizontally splitting multiple repos scale vertically tool necessarily challenge particular need specialized build tool designed building everything source intelligently caching built artifact bazel buck pant contender bazel probably best bet repo get big standard version control may choke git certainly handle linux kernel really big repo github focus scaling little clear ready truly giant single repo twitter run perhaps biggest monolithic git repo world still pretty painful deal think many git hack upstreamed hand mercurial hack available perforce could probably handle anything going throw problem said people still working git handle current codebase number developer without hiccup may enough headroom grow git repo time cut git mercurial model check subset repo event need tooling support figure need check order able build arbitrary target within monorepo ides may trouble giant workspace nonstandard build tool though bazel seems intellij integration pant pupports though never worked well facebook solved problem buliding ide consideration code one place little natural barrier tangling together thus need constant vigilance maintain good overall structure plus side global refactorings possible develop public open source project either get benefit monorepo project kludge around syncing code github unless extremely fancy outside contributor experience second class send github pr get merged rather something get applied inside monorepo eventually published back github version management monorepos everything master version still gap master deployed especially project actually build deploy branch sake implication multirepo perhaps main advantage multirepo avoids tooling challenge monorepo since existing tool already designed deal scale project likely put single repo however issue even believe multirepo approach get productivity gain need strict intentional managing version baking cost updating code use new version library depends may need tool around tracking dependency globally give people proper understanding need updated way multirepos force certain loose coupling project becomes drawback reality dictate thing used coupled decoupled thing used decoupled need joined closer together want tooling make terrible mitigate problem caused work mulitple repos probably want provide standardization tooling convention etc though cut basic tenet multirepo philosophy finding code harder first find right repo least probably need maintain kind catalog repos strong naming convention allow someone looking say dependency build file figure repo need look find code best world get best world somehow probably could certainly tool around multirepo make multiple repos act like single monorepo android tool called repo could establish consistent toolchain etc across repos reduce cost making change repos point clear benefit getting multiple repos unless reason code separate repos monorepo could use branch mimic local stability get project would live longlived branch merges change project needed get potential irresolvable diamond dependency preventing upgrading actually want reading take simple case suppose code b life one repo code c life another repo c depends b depends c even though cycle code depdency graph cycle two repos mean updating requires following dance change publish new version artifact go repo change c consume new version publish new artifact c go back ab repo change b consume new c artifact dance require least three separate ci run well probably branching merging since change incompatible b updated new yet existant version c suppose library b c depend x application depends b c classic diamond dependency consequence depend version b c agree version x want want upgrade c lastest version version moved ahead newer version x latest b stuck b move forward even half diamond depends direcly x b also depends x sufficient cause problem want newer version x b imagine complex dependency graph see coordination cost upgrading lowlevel library going nontrivial
435,Lobsters,vcs,Git & VCS,fugit - Minimal git+ssh access control system,https://github.com/cbdevnet/fugit,fugit minimal gitssh access control system,join github today sign file permalink topic resource reload reload,really lightweight git access control dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time rudimentary really advanced git access control using ssh key magic plain text file want feature use gitolite something along line found bug report even better fix send pull request configuring fugit requires experience configuring ssh keybased logins git something break bash might contain vulnerability yet found check code still probably give ssh access people trust case setup set system user clone repo home new user copy fugit sbinfugit make sure sbinfugit executable like change log destination default fugitlog line also change config directory default homefugitd line add key used identify user sshauthorizedkeys add forced command executing sbinfugit user identifier see demo file repo example might also want add nopty noportforwarding noagentforwarding nouserrc key option alternatively restrict includes fugit allows choose two method access control filebased default directorybased select directorybased access control edit conf variable line point directory access control method following structure filebased edit configuration file default fugitconf contain exactly line text per repository served exactly order repo repoidentifier identifies remote real path path repo disk push list user user allowed push repo pull list user user allowed pull repo directorybased configuration repository read file name determined replacing forward slash submitted repoidentifier underscore appending conf prepending conf variable example conf fugitd git clone ssh hostrepoidentifier repo identifier repoidentifier config file fugitdrepoidentifierconf config file repository contain line real path path repo disk push path path user file pull path path user file referenced user file contain one useridentifier per line granted respective permission debugging first check log contain command processed fugit order see verbose debug information run time uncomment set x line beginning file spammed execution data upon interacting repos controlled fugit work git submodules exchange data via stdinstdout ssh fugit insert channel distinguishes push pull operation either allows channel continue simply close exactly rocket science work need restrict git access one system user serving multiple keyusers specific repository without finegrained control really pushpullnothing reviewed existing option found pretty heavy instruction prerequisite implementation complexity made really lightweight git access control topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
436,Lobsters,vcs,Git & VCS,Archiving repositories on github,https://github.com/blog/2460-archiving-repositories,archiving repository github,archive repository unarchive repository documentation,repository actively developed anymore want accept additional contribution mean want delete archive repository github make readonly archiving repository make readonly everyone including repository owner includes editing repository issue pull request label milestone project wiki release commits tag branch reaction comment one create new issue pull request comment archived repository still fork archived development continue elsewhere archived open source project archive repository go repository setting page click archive repository archiving repository make sure changed setting consider closing open issue pull request also update readme description make clear visitor longer possible contribute change mind want unarchive repository click unarchive repository place please note archived repository setting hidden unarchive repository change learn check documentation archiving repository happy archiving
437,Lobsters,vcs,Git & VCS,Changeset Evolution with Mercurial,https://www.mercurial-scm.org/doc/evolution/,changeset evolution mercurial,changeset evolution mercurial evolve changeset evolution mercurial installation setup evolvetesters changeset evolution extension changeset evolution development status changeset evolution evolution roadmap wiki,changeset evolution mercurial evolve mercurial extension faster safer mutable history implement changeset evolution concept mercurial offer safe simple way refine changesets locally propagate change repository automatically detect handle complex issue arise exchanging draft changesets even make possible multiple developer safely rewrite part history distributed way fully respect phase concept user able rewrite part history safe change phase part mercurial since early installation setup recommend subscribe evolvetesters mailing list stay date latest news announcement using pip pip install user hgevolve add hgrc config easily edit hgrc repository using hg config alternatively edit user configuration hg config changeset evolution core mercurial changesets permanent immutable commit new changesets modify source code modify remove old changesets year mercurial included various command allow history modification rebase histedit commit amend forth however catch mercurial various mechanism modifying history unsafe changesets destroyed rather simply hidden still easy recover evolve make thing better changing behaviour existing history modification command use safer mechanism changeset obsolescence covered rather older le safe strip operation evolve built infrastructure core mercurial phase starting mercurial allow distinguish mutable immutable changesets changeset obsolescence starting mercurial mercurial know history modified specifically one changeset replaces another obsolescence model changeset neither removed modified instead marked obsolete typically replaced successor obsolete changesets usually become hidden well obsolescence disabled feature mercurial start using evolve thing evolve fix mistake immediately committed changeset syntax fix amend changeset one see possible using default feature core mercurial changeset evolution make safer fix mistake little bit later broke test three commits back noticed update back bad changeset fix mistake amend changeset evolve history update affected remove unwanted change hacked debug output two commits back everything working prune unwanted changeset evolve history share mutable history say programming work locally need test big remote server somewhere know everything good use evolve share mutable history two computer pushing finely polished changesets public repository testing test server share mutable history code review want publish unreviewed changesets block every commit waiting code review solution share mutable history reviewer amending changeset pass review explore audit rewrite history changeset since mercurial tracking edits make changeset look history edits similar mercurial tracking history file edits changeset level evolve extension mercurial core already support changeset evolution dedicated extension longterm plan evolve add core mercurial however extension help u experiment various user experience approach technical prototype dedicated extension help current user deploy latest change quickly provides developer low latency feedback whenever happy experimental direction extension relevant code go upstream core mercurial development status well underway full implementation changeset evolution concept still work progress core mercurial already support many associated feature still disabled default current implementation usable multiple year already part used production multiple project company including mercurial project facebook google however still area current implementation gap mean use case performance issue handled well currently without evolution mercurial around long time strongly committed backward compatibility therefore turning evolution default today could regress experience current user feature enabled default point user use care new feature added evolution negatively impacted new default find evolution roadmap wiki
438,Lobsters,vcs,Git & VCS,Learn Git Branching,https://learngitbranching.js.org/,learn git branching,,application simulates git repository browser need j use app try enabling refreshing page thanks
439,Lobsters,vcs,Git & VCS,Stop Using Git Pull To Deploy (2014),https://grimoire.ca/git/stop-using-git-pull-to-deploy,stop using git pull deploy,stop using deployment problem antipattern right pattern sitaram chamarty,stop using git pull deployment problem git repository containing project want code change rather download entire project scratch deployment antipattern know use git pull deployment script stop stop teaching people wrong eventually lead deploying something nt want deployment based predictable known version code ideally every deployable version tag deploy exactly tag even le formal process deploy branch tip still deploying exactly code designated release git pull however introduce new commits git pull twostep process fetch current branch designated upstream remote obtain remote new commits merge current branch designated upstream branch current branch merge commit mean actual deployed tree might identical intended deployment tree local change intentional otherwise preserved merged deployment example happens actual deployed commit never match intended commit git pull approximate right thing current local branch generally master people using git pull always clean always track desired deployment branch git pull update intended commit exactly pretty fragile though many git command cause local branch diverge upstream branch happens git pull always create new commits patch around fragility bit using ffonly option tell deployment environment diverged nt fix right pattern quoting sitaram chamarty expect deployment tool note rule number referring simply number later file branch deployed copied deployment directory file deleted git repo since last deployment get deleted deployment directory change tracked file deployment directory last deployment ignored following rule however sometimes might want detect change abort found untracked file deploy directory left alone people might want detect abort deployment sitaram documentation talk accomplish straight bare repository unwise mention impractical case deployment use dedicated clone canonical repository also disagree point preferring keep deploymentrelated change outside tracked file make much easier argue change introduced configure project deployment introduce new bug surprise feature deployment process given dedicated clone deploytree follows cd deploytree git fetch git checkout force target following two line required use submodules git submodule sync git submodule update init recursive follow actual deployment step run fabriccapistranomakeetc target either tag name remote branch name originmaster could also commit hash anything else git recognizes revision detach head deploytree repository fine new change authored repository local branch irrelevant warning git emits head becomes detached unimportant case tracked content deploytree end identical desired commit discarding local change pattern similar continuous integration server use building git repository much reason
440,Lobsters,vcs,Git & VCS,Why you should stop using Git rebase,https://medium.com/bekk/why-you-should-stop-using-git-rebase-5552bee4fed1,stop using git rebase,stop using git rebase,stop using git rebaseafter using git several year found gradually using advanced git command part daily workflow soon discovered git rebase quickly incorporated daily workflow familiar rebasing know powerful tool tempting use time however soon discovered rebasing present challenge obvious first start presenting quickly recap difference merging rebasinglet first consider basic example want integrate feature branch master merging create new commit g represents merge two branch commit graph clearly show happened see contour train track graph familiar larger gitreposexample mergingalternatively could rebase merging commits removed feature branch reset master commits reapplied top feature diffs reapplied commits usually identical original counterpart different parent commits hence different keysexample rebasingwe changed base commit feature b c literally rebasing merging feature masteris fastforward merge commits feature direct descendant masterexample fastforward mergingcompared merge approach resulting history linear divergent branch improved readability reason used prefer rebasing branch merging expect case developer wellhowever approach challenge may obviousconsider case dependency still use feature removed master featureis rebased onto master first reapplied commit break build long merge conflict rebase process continue uninterrupted error first commit remain present subsequent commits resulting chain broken commitsthis error discovered rebase process finished usually fixed applying new bugfix commit g topexample failed rebasingif get conflict rebasing however git pause conflicting commit allowing fix conflict proceeding solving conflict middle rebasing long chain commits often confusing hard get right another source potential errorsintroducing error extra problematic happens rebasing way new error introduced rewrite history may disguise genuine bug introduced history first written particular make harder use git bisect arguably powerful debugging tool git toolbox example consider following feature branch let say introduced bug towards end brancha branch bug introduced towards endyou may discover bug week branch merged master find commit introduced bug might search ten hundred commits process automated writing script test presence bug running automatically git bisect using command git bisect run yourtestsh bisect perform bisection search history identifying commit introduced bug example shown succeeds finding first faulty commit since broken commits contain actual bug looking forexample successfull git bisecton hand introduced additional broken commits rebasing e bisect run trouble case hope git identifies commit f bad one erroneously identifies dinstead since contains error break testexample failed git bisectthis problem greater may seem firstwhy use git important tool tracking source bug code git safety net rebasing give le priority favour desire achieve linear historya back bisect several hundred commits track bug system faulty commit located middle long chain commits compile due faulty rebase colleague performed unneccessary totally avoidable error resulted spending nearly day extra tracking commitso avoid chain broken commits rebasing one approach could let rebase process finish test code identify bug go back history fix bug introduced end could use interactive rebasinganother approach would git pause every step rebase process test bug fix immediately proceedingthis cumbersome errorprone process reason would achieve linear history simpler better way git merge simple onestep process conflict resolved single commit resulting merge commit clearly mark integration point branch history depicts actually happened happenedthe importance keeping history true underestimated rebasing lying team pretend commits written today fact written yesterday based another commit taken commits original context disguising actually happened sure code build sure commit message still make sense may believe cleaning clarifying history result may well oppositeit impossible say error challenge future brings codebase however certain true history useful rewritten fake one
441,Lobsters,vcs,Git & VCS,Gogs and Gitea,http://jpmens.net/2017/10/25/gogs-and-gitea/,gogs gitea,gogs gitea fabian reminds customize gitea configuration file ansible installation docker gitea feature gogs feature gitea gogs documentation gogs gitea gogs gitea bit gitea reading,gogs gitea open source singlebinary go implementation githublike git repository hosting system use privately team light system requirement contrary pretty large quite popular open source java implementation similar utility gitea fork gogs difficult say better gogs time bit githublookalike say whereas gitea look bit fresher feel younger gitea brings everything single binary whereas gogs number support file cs javascript template requires advantageous change replace template desired fabian reminds possible customize gitea well project appear alive kicking spite rumor gogs abandoned installation basically consists ensuring appropriate binary launched launch web browser point port number indicated console http default answer question response written initype configuration file appini prepopulated course look like database dbtype host name gogs user root passwd sslmode disable path datagogsdb repository root datarepos server domain localhost httpport rooturl http disablessh false sshport startsshserver false offlinemode true cursory search also provide plenty resource installing either say ansible preferred method alternatively program support installation docker program support different backend database postgresql mysql smtp pam ldap authentication offer git http optional embedded ssh server git ssh like github gitlab upload one ssh key gogsgitea use authentication exists list gitea feature gogs feature list difficult compare program cli albeit slightly differing command cli used backup user creation administrative command gogs admin createuser name jane password sekrit email jane examplecom new user jane successfully created initially chose use gitea thought ask yesterday poll reponse get friendly user wrote privately said running gogs active user lowend vps alongside service year cli quite simple work well especially backup manual upgrade via git went well month ago utility dump respectively backup cli command create backup data zip file find gogs documentation comprehensive gitea sometimes link featurewise le par least term visible feature open source project open issue tracker several dozen open pull request gogs gitea import project used one githubhosted repository source produce following screen shot gogs gitea bit program display commits like github unified diff split sidebyside diff view gitea knob located know github mean gogs knob placement better interestingly repository setting page gogs styled similarly github gitea six one half dozen allow import existing repository though repository imported neither issue pull request least github issue tracker githubflavored markdown support file attachment etc slight cosmetic difference nothing drastic see support git hook webhooks deployment key prefer page layout gogs offer sub page setting chosen use gitea said hard toss reading
442,Lobsters,vcs,Git & VCS,"Welp, there go my Git signatures",http://karl.kornel.us/2017/10/welp-there-go-my-git-signatures/,welp go git signature,roca vulnerability skip good stuff sign trouble get user public key yubico site blog post infineon rsa issue public key tester already posted emailed hacker news mod making new key firmware yubikey firmware upgraded free replacement openpgp card specification version openssh support ecdsa card available directly key server gnupg spreading word converted ssh public key github stanford gitlab pgp key signing went ummmmm git syncrepl project syncrepl project commits github revocation commit github gist internet archive wayback machine future alternative,hello already know roca vulnerability know care feel free skip good stuff sign trouble monday morning bus work received curious email github hello akkornel github recently implemented new measure identify block insecurely generated ssh key added account github also analyzed existing key added additional validation place result new measure following key identified removed account yubikeybased key ca cb dd first thought phished somehow assumed key fingerprint api allows anyone get user public email plaintext mail link attachment seem like phishing plus fact ssh key description included email something something available publicly made concerned first place went yubico site found link blog post infineon rsa issue also known revenge coppersmith attack roca got work able use public key tester confirm two yubikeygenerated public subkeys one signing one authentication vulnerable great quick aside reading yubico post went post hacker news find already posted overnight yubico apparently likely accidentally posted issue previous evening post later pulled hacker news item gotten much attention since yubico post back emailed hacker news mod got reposted kudos making new key subkeys affected used yubikey generate private key pretty easy assuming already private insert yubikey neo yubikey use gpg cardstatus make sure gpg see key run gpg editkey yourkeyid addcardkey card generate key one three slot encryption authentication signing need gpg key passphrase yubikey pin also admin pin used method generate signing authenticating subkeys infineon chip handled private key generation gpg took public part key provided chip signed main private key added result public gpg key private key gpg store serial number device need private key gpg know device ask upside really hard get private key stored downside trusting hardware generate good key yubico fixed issue firmware since yubikey firmware upgraded get new one happily yubico providing free replacement people vulnerable yubikeys put order monday replacement mailbox friday kudos yubico transparency offering free replacement another aside thinking generating ecc key instead rsa key vulnerability affected rsa key generation unfortunately yubikey implement version openpgp card specification ecdsa key added version stuck rsa key also openssh support ecdsa card right able signing ecc key replacement generated new authentication signing subkeys copied existing encryption subkey card also revoked original signing authentication subkeys updated public key available directly live key server next day two third aside copy subkey new card gpg keep asking insert old card probably hit gnupg either update gpg delete appropriate file directory spreading word new authentication subkey converted ssh public key promptly uploaded github stanford gitlab signing key two thing gpg signature working record every signature made gpg signature include timestamp come computer clock someone private key need change computer clock time revoked subkey probably could solved better recordkeeping way able keep notary publiclevel record would required problem solved thirdparty timestamp service others would trust would remember use best assume signature really going importance future except one recently made mostrecent signature made pgp key signing went week happened email participant letting know signature previous mail likely fail validation take care regular signature one set left gon na much harder deal figure way resign signed git commits ummmmm git big problem used nowrevoked key sign tag commits public repository stanfordinternal repository one internal git repository mandate commits signed repository validates signature key kept separate serverlocal keyring signed tag easy enough deal simply recreate using new key annoyance go tag find one signed luckily git server allow overwriting existing tag done git commits harder nowrevoked subkey old signed commits come warning see clone syncrepl project run git log showsignature gpg signature made mon oct pdt gpg using rsa key gpg good signature alfred karl kornel karl kornelus ultimate gpg aka alfred karl kornel akkornel stanfordedu ultimate gpg aka alfred karl kornel karl kornelname ultimate gpg aka alfred karl kornel osuedu ultimate gpg warning subkey revoked owner gpg reason revocation key compromised gpg revocation comment tag similar problem git tag v object type commit tag tagger karl kornel akkornel stanfordedu first release point actually proper setup script course nt work yet gpg signature made sun jun pdt gpg using rsa key gpg good signature alfred karl kornel karl kornelus ultimate gpg aka alfred karl kornel akkornel stanfordedu ultimate gpg aka alfred karl kornel karl kornelname ultimate gpg aka alfred karl kornel osuedu ultimate gpg warning subkey revoked owner gpg reason revocation key compromised gpg revocation comment output come git running locally look syncrepl project commits github posting commits showing verified control gpg key upload github yet updated include revoked subkeys done bruteforce option would go old commits identifying one signed would start new branch nextoldest commit one right first signed commit would start long sequence git cherrypick operation time cherrypick commit signed would instead git cherrypick update signature end would new branch whose content match old branch whose signature updated new branch would take name old branch would forcepush server make bruteforce method would work besides extremely timeconsuming annoying two problem forcepush mean everyone else using repository would essentially git reset onto new branch head commits others made since would cherrypicked anyone else sequence signed commits would work together carefullycoreographed sequence would done even people signature fine git cherrypick make new commit object signature lost unless original signer us git cherrypick sign new commit revocation commit solution devised involves two commits separate outofband posting thing start revoke nowrevoked subkeys first make sure repository completely uptodate pull anything make sure none pulled commits use soontoberevoked subkey make signed empty commit empty commit made appending allowempty git commit line git repository nothing ready committed git prompt commit message normal make commit normal commit message looked like longer using key empty commit file changed commit leave message revoking current signing key signature key created today monday october last day sign anything key revoking key signing key generated life yubikey affected vulnerability described cve detail vulnerability possible others get signing private key affect signed commits tag although resigning tag possible new key resigning commits really possible would cause commit id change affecting rest tree making really hard people leaving note leaving note make new commit id new key leave another note say commit id valid make kind chain trust even though likely git say signature note invalid every commit one make harder someone go back change note commits note commit id change node modified people clone repo bigger commit difference pull course perfect think better nothing maybe future way resign commits way disrupt repository reference current tag commit id tagname commitid commit signed nowrevoked key put following message another nonempty commit confirming commit past signature commitwhich made new keyis confirm commit valid signed following key signature key created commit signature signature previous commits signed key trusted much signature made key commit id referenced id revokedsigningkey commit example second commit id third party start known commit id branch begin walking back commits trip back first come across signedandcurrentlyvalid commit commit say commit also valid even though signed nowrevoked key also give id nowrevoked subkey future reference eventually reach commit git confirms signed revoked subkey signature come subkey mentioned validlysigned commit commit list subkey id explains reason revocation point long trust current subkey signed commit also trust commit point decide validity commits commits older commit signed nowrevoked subkey still ok trace direct path back validating commit commits newer commit signed nowrevoked subkey treated suspicion made explicitly said would stop using nowrevoked subkey point think two way someone revoked subkey get new commits repository someone could slipped signed commit commit gotten pushed git server pull could gotten onto computer mean someone could forcepush adding new bad commits replacing commit new commit using text signed nowrevoked key defense threat revocation commit soon possible known key compromised extra safety manual review recent previous signed commits git fsck strict make sure local copy intact defense threat separate outofband posting posting take form table containing three item git repository question commit id revocation commit commit id first commit new subkey case public private repository want expose name private repository including commit id table last commit signed revoked subkey first commit signed using new subkey also table available separately github gist idea info around multiple place make hardware info lost modified also post picked internet archive wayback machine gist also signed new subkey think ok leave repository identifier table commit id unique enough chance commit id appearing twice one column unlikely make thing harder verify know row check honest unlikely need table though still good future alternative done opinion good humanreadable solution sure problem missed hope provides least protection course work human actually read program using git verifycommit continue complain commits made revoked subkey already discussed bruteforce solution careful dance performed make new sequence resigned commits wonder could another way one involve rewriting history problem addressed need able sign object already exist without rewriting object changing object likely change history suggestion new object type like detached signature new file free git gitrefs reference signed tag object look like object type commit tag tagger karl kornel karl kornelus tag message begin pgp signature comment gpg version pgp signature end pgp signature signed object includes name tag match filename gitrefstags identity signer match signature type id tagged commit let use template make new object represent additional detached signature existing object object type commit tag sign key id signer karl kornel karl kornelus begin pgp signature comment gpg version pgp signature end pgp signature type id tagged commit explicitly include id signing subkey match signature still identity time signature made piece help ensure get unique object hash object hash put thought new git signature directory would structured similar object directory first level would twocharacter hash prefix ff second level would object hash object multiple signature second level directory whose name hash finally third level would file file name would id signing key subkey content would object id detached signature object described checking detached signature would involve check signature directory detached signature found git would able evaluate signature make decision validity commit think seems signed commits used much right functionality exists think experience expose weakness signed commits implemented want keep history key either age loss expiration revoked way dealing commits good whose signing key revoked time signature made done best weird empty commits hope way found implement something appropriate
445,Lobsters,vcs,Git & VCS,Faster blame on hg.mozilla.org (2016),https://groups.google.com/forum/#!topic/mozilla.dev.version-control/z7PWzhk61EA,faster blame hgmozillaorg,,use google group discussion please enable javascript browser setting refresh page
446,Lobsters,vcs,Git & VCS,Tig: text-mode interface for Git,https://github.com/jonas/tig,tig textmode interface git,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
447,Lobsters,vcs,Git & VCS,Git Bomb: Crafting Uncloneable Repos,https://kate.io/blog/git-bomb/,git bomb crafting uncloneable repos,exploding git repository tiny repo object structure bottom middle top git bomb making git bomb update comment git mailing list josh lee wesley waptekar gmailcom,exploding git repository adventurous sort handle potential reboot invite clone tiny repo git clone http githubcomkateegitbombgit able clone unless quite lot memory ram storage git killed ran memory reboot perfectly formed repo made object tiny repo cause git run memory secret git deduplicates used store file make repository smaller allow using blob file remains unchanged commits git also allows deduplication tree object define directory structure repository gitbomb try make billion file however reference file blob tree object extremely similar aka hence name structure bottom bottom file blob containing git show one laugh one tree object refers blob time git lstree blob blob snipped blob middle layer tree object refer tree object top tree object git lstree tree tree snipped tree top master ref point topmost tree object git log prettyformat tree create git bomb tree trying interact repo using anything walk tree git status git checkout run memory issue git build tree memory writing file disk mean process killed instead filling disk space git bomb slightly different version idea repo nested tree object laptop end blowing stack causing segfault git clone http githubcomkateegitbombsegfaultgit like make git bomb read next post making git bomb update got goahead github hackerone post awarded bounty github hackerone post front page hacker news received comment discussion git mailing list includes mention repo nature uploaded github josh lee uploaded similar repo github long even gave similar name actual repo disabled never wrote publicly thank wesley pairing many weird git repos currently looking job say experience pairing fantastic hiring get touch waptekar gmailcom
448,Lobsters,vcs,Git & VCS,Cthulhu: Organizing Go Code in a Scalable Repo,https://blog.digitalocean.com/cthulhu-organizing-go-code-in-a-scalable-repo/,cthulhu organizing go code scalable repo,wrote cthulhu followup post cthulhu overview ci build tooling static analysis tooling challenge dep summary twitter github,digitalocean used called cthulhu organize go code nearly three year mono repo monolithic code repository contains many different project library bryan liles first wrote cthulhu early authored followup post late lot changed past two year organization scaled faced variety challenge scaling cthulhu including trouble vendoring ci build time code ownership post cover state cthulhu today dive benefit challenge using mono repo go code digitaloceancthulhu overviewour journey using go mono repo began late since repository called cthulhu grown exponentially many way october cthulhu line digitaloceanauthored go line vendored go codeas scale repository grown past three year introduced significant tooling organizational challengesbefore dive challenge discus cthulhu structured today file directory omitted brevity php cthulhu docode src doge exp service team tool vendor script docode root gopath reader previous post may notice thirdparty longer exists prefix internal code code structureall go code life within gopath start cthulhudocode directory within folder unique purpose although deprecated use service tool majority new work doge stand go internal fair amount code added removed doge time still remains home great deal code shared across digitalocean service example include internal logging metric grpc interaction package exp used store experimental code project workinprogress state may never reach production use exp declined time remains useful place check prototype code may useful future service used root longrunning service time became difficult keep track ownership code within directory replaced team directory team store code owned specific team example project called owned team would reside doteamscomputehypervisor currently preferred method organizing new project drawback well later tool used store shortlived program used various purpose day mostly unused except ci build tooling internal static analysis tool etc majority teamspecific code resided tool moved team finally vendor used store thirdparty code vendored cthulhu shared across project recently added prefix go code existing go vendoring solution work well vendor lived root gopath case old thirdparty approach script contains shell script assist ci build process script perform task static analysis code compilation testing publishing newly built binariesci build toolingone biggest advantage using mono repo able effectively make large crosscutting change entire repository without fear breaking repository however amount code within cthulhu grown ci build time grown exponentiallyeven though go code build rather quickly early ci build took average minute complete resulted extremely slow development cycle poorly written test caused spurious failure elsewhere repo entire build could fail causing great deal frustration developersafter experiencing great deal pain slow unreliable build one engineer justin hines set solve problem hour work authored build tool called gta stand test gta inspects git history determine file changed master feature branch us information determine package must tested given build including package import changed package example suppose change committed modifies package doteamsexampledroplet suppose package imported another package doteamsexamplehypervisor gta used inspect git history determine package must tested although first package changedfor large change occasionally useful test entire repository regardless file actually changed adding anywhere branch name disables use gta ci build restoring old default behavior everything every introduction gta ci build process dramatically reduced amount time taken build average build take approximately dramatic improvement minute build early tool used almost everywhere build pipeline including static analysis check code compilation testing artifact build deploymentstatic analysis toolingevery change committed cthulhu run bevy static analysis check including tool gofmt go vet golint others ensures high level quality consistency go code team even introduced additional tool staticcheck code resides within team folderwe also experimented creation custom linting tool resolve common problem found go code one example tool called buildlint check blessed set build tag ensuring tag race exclude file race detector build usedstatic analysis tool incredibly valuable tricky introduce new tool repository decided run golint ci nearly error generated tool entirety cthulhu took concerted effort several friday afternoon fix error well worth effort internal godoc instance provides vast amount high quality documentation every package resides within cthulhuchallengeswhile many advantage mono repo approach challenging maintain wellthough many different team contribute repository difficult establish overall ownership repository tooling build pipeline past tried several different approach unsuccessful due fact customerfacing project work typically take priority internal tooling improvement however recently changed engineer working specifically improve cthulhu build pipeline alongside regular project work time tell approach suit needsthe issue code vendoring remains unsolved though made effort improve situation use tool manage thirdparty dependency tool work well linux many engineer run macos reported daunting issue running tool locally case tool run long time completion others tool eventually fail require deleting reimporting dependency succeed future also like try vendoring tool go project time github enterprise support go vanity import would need make use depas company organizational structure also evolved time typically work team directory cthulhu present problem code structure somewhat reliant organizational structure code team become sync organizational structure causing issue orphaned code stale reference team longer exist concrete solution problem yet considering creating discoverable directory sort code structure need tied organizational structurefinally mentioned previously scaling ci build process challenge time one problem particular nondeterministic test cause spurious failure unrelated area repository test typically flap relies assumption guaranteed timing ordering concurrent operation problem compounded interacting service mysql integration test reason encourage engineer everything power make test deterministic possible using cthulhu three year digitalocean faced significant hurdle along way mono repo approach huge benefit organization whole time like continue sharing knowledge tool others reap benefit mono repo matt layher software engineer network service team regular contributor wide variety open source networking application library written go find matt twitter github
449,Lobsters,vcs,Git & VCS,What’s Wrong with Git? A Conceptual Design Analysis (2013),https://spderosso.github.io/onward13.pdf,wrong git conceptual design analysis,,obj endobj obj filterflatedecodeid index info rlength rsize stream b ςɧ r endstream endobj startxref eof obj stream e x endstream endobj obj ocgs r page rtypecatalog endobj obj resource rrotate rtypepage endobj obj stream p yd ti v ut ȝ endstream endobj obj stream k endstream endobj obj stream l ru endstream endobj obj stream ehul endstream endobj obj stream endstream endobj obj stream r ƽ rk endstream endobj obj stream e x x g ґ h ά ݘ endstream endobj obj stream iƕm sz b b c 罪q ρ f u b r h v w u l e υ c p ln v ȟ rb eb h b uȓy sg u ѥb grp n f gim p q wyj ͻ 㝧 u u l q q b k zh ue yl ޘmx
450,Lobsters,vcs,Git & VCS,Mark Mahoney: Version Control Optimized for Teaching and Learning,https://vimeo.com/97711978,mark mahoney version control optimized teaching learning,,modern version control system optimized disk efficient twenty first century seems like wrong variable optimize instead version control system focus making easier developer teach learn video demonstrates prototype tool storyteller act version control system capture fine grained information development process information developer animate change code importantly create narrative code evolves believe story allow le skilled developer become better watching consuming story skilled one maintainer learn system le effort
451,Lobsters,vcs,Git & VCS,Keybase launches encrypted git,https://keybase.io/blog/encrypted-git-for-everyone,keybase launch encrypted git,encrypted git free happy solution keybase app git team repository erotic art safe work actually private remember impossible delete cloud data kind confidence host may already compromised underneath hood remote helper open source gogit authenticity never leaf device missing work github desktop github desktop existing repo keybase reybase keybase wait team working cryptographicallydefined team many personyears metadata limit computer compromised living simulation make bare repo kbfs public repository signing commits hate ityou nt know could x instead crypto easy bleah bleah bleah help accept pr hiring try,keybase launch encrypted git october every want make repository private open source project stuff research writing novel family history community private file team api key devops secret business doc free happy solution starting today keybase app see new git tab make hosted repository type name good go zero clone le second see made personal repos doc health tax writing check computer also access team repository made friend family coworkers founding doc keybase nostalgia old okcupid sparknotes day maybe even shared erotic art safe work working today use actually private endtoend encrypted hosted like say github teammate decrypt keybase garbled mess regular checkout extra step even repository name branch name encrypted thus unreadable keybase staff infiltrator think better paying fee store plaintext remember impossible delete cloud data kind confidence host may already compromised giiithub nooooooooo underneath hood git support remote helper made open source one see clone address like git clone keybase privatechrisdocsgit keybase remote helper performs crypto letting git thing might sound impressive keybase reimplemented git scratch provide remote helper powered excellent gogit project begun contributing bring table crypto team multidevice key management safer concept identity stuff already built project done started rare treat crypto authenticity everything signed data push signed device private key never leaf device fetch cryptographically verified else fail unlike casual pgp signing commits one world ever fully enforced team nt need think git pull get data bitforbit exactly pusher pushed missing well website interface pull request wiki issue tracking git pure simple actually encrypted super easy use work github desktop prefer git visual interface problem github desktop work keybase reposjust drag local clone onto app moving existing repo keybase already private repository hosted bitbucket gitlab github wherever move keybase git novice wizard pull branch final reminder keybase come encrypted chat team discus commits ease keybase chat send beliebers praise crypto cheer wanted make keybase reybase keybase anticipated q wait team yes keybase working cryptographicallydefined team many personyears metadata keybase server know team pushing fetching device used keybase recognizes distinct repository example unique id every repo nt know named repository branch name content limit high sometimes make product better every axis dream project u many repository want total personal repository ca nt exceed team also get computer compromised work safe endpoint ca nt help living simulation keybase offer guarantee sophisticated sidechannel attack higherlevel entity make bare repo kbfs keybase filesystem journal change syncs writes kind like dropbox mean another team member could fighting make conflicted head copy side side similarly nt put git repos dropbox keybase git prevents locking also nicer use keybase app discover manage team repository public repository exposed gui work perhaps news soon signing commits happening lower level allow encryption ensure unsigned unencrypted data make intuitively think teammate using cryptographic secure storage layer git origin nt really understand git commits untouched git perspective mirror repository elsewhere regular checkout hate ityou nt know could x instead crypto easy bleah bleah bleah ok help play please could always contribute accept pr hiring try
452,Lobsters,vcs,Git & VCS,Pain in the dots,http://matthew-brett.github.io/pydagogue/pain_in_dots.html#pain-in-dots,pain dot,dot difference,unfortunately mean different nearly opposite thing two case dot difference summary need page get full picture imagine history b c topic e f g master obviously b c stuff unique topic f g stuff unique master log two dot give stuff unique second named branch show log commits c b log three dot show stuff unique second named branch stuff unique first named branch show c b f g diff hand mean something different diff two dot show stuff differs state master state topic show difference effect b c effect f g think difference stuff unique topic stuff unique master diff three dot show stuff differs topic last common ancestor topic master example ancestor commit e thus three dot diff difference caused stuff unique topic
453,Lobsters,vcs,Git & VCS,Emacs Rocks! Episode 17: magit,http://emacsrocks.com/e17.html,emacs rock episode magit,emacs rock,emacs rock episode magitvideowant download episode use youtubedl great
454,Lobsters,vcs,Git & VCS,"Trust your Data, Not your Mind",http://jackhiston.com/2017/9/27/trust-your-data-not-your-mind/,trust data mind,version control adam tornhill code maat summary code maat,add decor home previous decor look worse paint one wall bright blue time shine wall next dulls little codebase neverending cycle refactoring small improvement one part make see small improvement another part shining light piece code shine problem code around make pick paint brush bring new bright blue adjacent wall ofcourse auxiliary code become worse become inefficient become confusing become fragile unchanged mind playing trick make feel uneasy new refactorings living old refactorings mind compare everything anything lead path unnecessary cumbersome wasteful rare occasion provide happy accident stumble around like toddler finding foot split second make tumble floor mind trusted navigate way codebase make necessary straightforward frugal brush stroke version control version control system answer use version control refactoring like painting wall bright blue house fire family left adam tornhill fantastic programmer design tool software analysis one tool code maat code maat command line tool used mine analyze data versioncontrol system adam see code crime scene crime scene leaf clue could occurred prior crime analysis blood spatter time death physical evidence clue help detective solving case catching killer catch serial killer pattern need emerge serial killer modus operandi specific time day area method serial killer crime adam taken skill set detective applied modern day software development clue time day area frequented methodology used found inside version control system detective find pattern crime committed using data analysis similar way find pattern within code reveal problem area firstly need data love git correct command use code maat git log numstat dateshort prettyformat h ad norenames like organising killer crime occurr come format open door git activity use different command feed u different result first need statistic killer run java jar l logfilelog c git summary command give u feel amount work happened given time net enthusiast job use aspnet core repository github let find potential problem area running summary statistic value see participant repository people could scene crime let u find crime scene code java jar l logfilelog c git give u number people worked file higher number killing area city likely serial killer visited entity nauthors nrevs telling u telling u might problem mvcservices file revision different people changing time lot churn interestingly mvcservices class longer exists repository done executed command beginning repository existence like pulling murder record place longer exist record may irrelavant crime committed serial killer could happened many year ago one interesting result controllerbase class exist current state repository found area interest might problem need fix key file might problem guarantee problem like painting wall bright blue replaster wall first create smooth wall file lot churn could another reason change area people spend hour fixing bug found crime scene link serial killer two file logically coupled change together another way analysing repository logical coupling java jar l logfilelog c git coupling giving u result entity coupled degree averagerevs physicalfileresultexecutorcs xmldatacontractserializerinputformattercs telling u every single time someone change physicalfileresultexecutor change virtualfileresultexector every time paint wall bright blue first plaster wall nice smooth finish action logically coupled like serial killer modus operandi could false positive copycat coincidence etcetera however could clear sign high coupling two file investigate link serial killer crime need evidence put correct time place occur found problem file work file java jar l logfilelog c git entityownership command find spends time changing area code result command entity author added deleted srcmicrosoftaspnetcoremvccorecontrollerbasecs pranav srcmicrosoftaspnetcoremvccorecontrollerbasecs kristian srcmicrosoftaspnetcoremvccorecontrollerbasecs jaspreet srcmicrosoftaspnetcoremvccorecontrollerbasecs srcmicrosoftaspnetcoremvccorecontrollerbasecs charlie srcmicrosoftaspnetcoremvccorecontrollerbasecs matt srcmicrosoftaspnetcoremvccorecontrollerbasecs hao author either added deleted specific file see pranav k created churn within controller base class mean take result best placed clean scene crime like local area crime scene good question recent happening neighbourhood give key insight perhaps unveil issue none understood existed previously summary painting house large task good advice work one room time better advice work one problem time room problem legacy code system always going case tempting jump start polishing everything team waste month year rewrite may happen identifying key problem area refactoring give data driven evidence improvement time company finite set resource solve problem monitor entire city serial killer movement monitor problem area city increasing chance finding article improve detective skill help interpret data help realise importance data stop listening gut analyse crime scene code maat
455,Lobsters,vcs,Git & VCS,git git git git git,http://caiustheory.com/git-git-git-git-git/,git git git git git,,ever found accidentally entered many git terminal wondered solution quite often type git go away come back type full git status lead lovely annoying error box git git status git git git command see git help gitmy initial thought overriding git binary path strip leading argument match git end running git status end argument easier way use gitconfig alias functionality expand first argument git shell commandgit config global aliasgit exec git add following git config gitconfig fileand find git git heart content git sha git git sha git git git git git git git git git git git git git git git git git git git git git git git git git git sha git sha alias git revparse head see git alias gitconfig laugh typo correction yes git provides autocorrection enable used typo working git back useful thing
456,Lobsters,vcs,Git & VCS,When You “Git” in Trouble: a Version Control Story,https://medium.com/@sjsyrek/when-you-git-in-trouble-a-version-control-story-97e6421b5c0e,git trouble version control story,git trouble version control story github desktop cool people git tower command line fault command line git expertise meta problem diagnosis learn git reference documentation gitfsck blinkies god ancient email linus torvalds graph binary object cryptographicallyhashed useless pile byte precise enough surgery wherever like gitlstree gitlog started get hairy better thing professional developer gitdiff hashed good git hygiene gitgc garbage collect imprecated command line tool move fast break thing waded well water sense soundness gitbranch doc gitcheckout kerfuffle m blinky maryamyriameliamurphiesjs scientician preventive care,git trouble version control storythank laughing extremely funny title know funny push commit git repo see github desktop try using google figure meansyes know cool people use git tower really cool people use command line really cool people going use command line solve problem fact choice adventure joining article fixing git repo suddenly becomes damaged absolutely fault despite command line git expertise whatsoever least visualization panicstep one diagnosing problem like however also meta problem come relying tool barely understand make diagnosis difficult finding sympathetic expert help resolve specific case also challenge might even know ask question nevertheless learn thing work resolve dilemma patient systematic willing learn friend entailed trip git reference documentation discovered gitfsck command dutifully ran repo root directory resulted following truncated output git fsck error object file emptyerror object file emptyfatal loose object stored corruptso probably one project come case blinkies corrupted repository oh good know want know meaning life ask god case consulted ancient email linus torvalds happens address similar situationa git repo really graph various kind binary object blob tree commits blob object cryptographicallyhashed well blob data representing one file blob object independent one another also linked socalled tree object effectively group blob arrangement analogous file system directory structure finally commit object contain information necessary track change tree blob commit object also linked sequentially might expect git store object series nested directory located gitobjects according first character commit id see example object stored directory called file full object name combination directory stored specific file directoryso one commit object becomes corrupted whole repo may turn useless pile byte chain linked commits broken bad news good news reason repo collection discrete file may able restore health even one object corrupted beyond repair perform precise enough surgerythat tried dofollowing linus advice moved corrupted commit object file somewhere else park damaged object wherever like probably end trash anywayi happened get error message blob object moved one tried file system check git fsckchecking object directory donechecking object donebroken link tree blob commit commit blob blob commit commit linus suggests using git fsck full default behavior nowignoring dangling commit message broken link message tell tree object point blob object removed effect broke link purpose reveal information tree object expects point blob blob nt commit object one moved also reported missing far goodcontinuing linus advice enough information use gitlstree command list content tree object called git lstree blob blob blob blob blob blob blob blob blob blob blob ziptestjsscanning list found culprit blob associated file indexjs knew source problem nt know version file created problem begin back command line git log raw allcommit steven syrek stevensyrek examplecom date mon jul add test set operation testlistsettestjscommit steven syrek stevensyrek examplecom date mon jul add test list zipping unzipping function remove exponentiation operator test testlistziptestjsthe gitlog command raw option show entire commit history repo show relevant part mine see object precedes corrupted object turn followed subsequent commit listed reverse order object point linus say done discovered version file preceded followed corrupted commit recreate missing object git hashobject w recreatedfile repository good unfortunately tried repository good thing started get hairy past linus advice present linus also past linus probably better thing help therefore left follow astute troubleshooting process professional developer use every day google googlestack overflow omg downthis throweverythingatthewall approach led try thing starting gitdiff command automatically recreate missing object reasoned desperately perhaps could manually git diff ambiguous argument unknown revision path working treeoops forgot leading character git diff git export subtest export searchingtest export indexingtest export ziptest export settest line indexjs changed two commits either side corrupted commit marked surrounding line also shown context deleted line would marked since two identical file hashed produce identical hash key thought try brute force solution deleting changed line recreating commit hand git hashobject w try maybe deleting line marked git hashobject w interesting managed recreate original state object corrupted commit happened guess really trying recreate correct intermediate state many possibility fortunately since uncharacteristically going good git hygiene phase changed file adding line marked recalled adding everything went bit git hashobject w git fsckchecking object directory donechecking object donedangling commit commit blob commit commit right healthy blob still missing commit object point gitgc rescue git gcerror could read could read reflog head reference pruned commitswarning reflog refsheadsrestructure reference pruned commitserror could read failed traverse parent commit failed run repackor supposed garbage collect garbage thing know thought hoped really truly hoped imprecated noting reflog message next brilliant idea git reflog expire stalefixerror could read failed traverse parent commit everyone know using command line tool option add masculine matter know real men read man page move fast break thing plus rather liked idea reflogging repo work eitheri waded well water trying absolutely anything without regard sense soundness turned back log always feel one step shy admitting defeat finding corner quietly weep perhaps solution would miraculously present something missed whole time see git log bad object git lstree tree objectnope mean duh somehow bright idea examining log restructure branch repo one working fatal blinking cursor entered life tail n gitlogsrefsheadsrestructure steven syrek stevensyrek examplecom commit replace iseq function test steven syrek stevensyrek examplecom commit separate function ord test huh maybe diff thing blob object work commit object thought git diff bunch irrelevant stuff ok least still commit hash something last good one arch nemesis darkened world consulted doc consulted internet took one shot dark git branch l rewritetests create new branch called rewritetests using last good start point accordance git branch setupstream track notrack l f branchname startpoint pattern specified gitbranch doc actually sure l option even whether necessary someone said use shrugi moved file repo one git checkout rewriteteststhe gitcheckout command set head specified branch word told git wanted work rewritetests branch copied file back recommitted left restructure branch wither dieand like astonishment done worst none soon starting see hash key new branch develop none work lost despite untimely death intervening commits eventually squashed everything back master though tend avoid working branch directly repo event one kerfuffle arises againi still visit m blinky time time gloat actually visit woundedandrepaired repo like contains maryamyriameliamurphiesjs project substantial amount code worked entirely alone imagine felt thought might ruined felt figured fix itat beginning article suggested damaged git repository since composed discrete object could potentially recovered careful surgery seen two possibility operation first case damaged blob object excise offending blob suture wound rehashing original file second first fails problem damaged commit object blob amputate wounded branch point corruption graft new branch onto stump recommit file casualty procedurethese different solution similar entail repairing data structure rather low level even manipulating file fact repair operation possible precisely git repo stored series file insofar file system really large data structure interface command line git repo also file systemlike data structure interface git command various subcommands option learn use file system command line word learn use git tooi wish story resolved set specific instruction solving problem might one day encounter unfortunately trite encouragement offer hard know cause sort error mention best way fix also hard generalize dig fight back entropy learn tool fear try thing experience beg one scientician friend help remember back first obvious moral one make recovery much much easier far le costly ever confronted dreaded blinking status bar obtuse command line equivalent commit early commit often preventive care often best medicine
458,Lobsters,vcs,Git & VCS,GitKraken Version 3.0.0,https://support.gitkraken.com/release-notes/current,gitkraken version,gitkraken git gui download current version version tuesday august new improvement bug fix version monday july new improvement bug fix version monday june improvement bug fix version wednesday may new improvement bug fix snapcraft,gitkraken git gui behold evolution gitkraken find new fixed take trip memory lane nostalgic swagger remembering bug yesterday download current version version tuesday august video gitkraken git gui downright foxy introducing gitlab issue tracking integration new gitlab user feel even cunning managing issue directly gitkraken git gui gitkraken git gui support issue tracking integration gitlab gitlab selfmanaged gitlab issue user ability perform following gitkraken view filter list issue left panel create branch tied issue view issue detail edit assignee issue edit state issue addremove label comment reply issue create new issue adding removing label supported issue tracker paid feature improvement time clean foxhole user multiselect branch left panel extremely helpful quick clean like deleting local branch preference menu updated authentication section renamed ssh added new integration section accessing git issue tracking integration pushing change remote branch push successful notification include link view pr related hosting service user use esc close create issue create filter panel creating new issue user see required field noted asterisk creating new branch tied issue user select base branch bug fix fox say bug gitlab user creating merge request clicking continue editing gitlab longer take user error page user successfully delete remote tag gitkraken longer disconnect user utilize multiple service reside base domain trello user board longer appear board dropdown menu left panel deleting local tag following prompt delete tag remote work intended version monday july video side introducing gitkraken git gui trello integration new hello hear u gitkraken git gui announce trello integration gitkraken git gui integrates trello issue tracker connection authorized trello user able accomplish following gitkraken view filter list card trello board left panel create branch tied card select card left panel view card detail card detail pane user perform following action edit list card edit member card add comment card create new trello card within gitkraken git gui paid feature improvement least say added ability reopen closed tab user reorder filter left panel using draganddrop user integrated issue tracker added option context menu branch tied issue card allowing user view issue card inside gitkraken git gui respective issue tracker user asked confirmation removing filter bug fix bug must called thousand time tell u sorry left panel longer vanish due issue jira integration gitkraken git gui able detect version intellij selecting clone initialize path path autofilled next time version monday june gitkraken git gui updated bring slew new improvement bug fix improvement added rightclick context menu tab right click opened tab access following option close selected tab close opened tab close tab right selected tab starting pull request branch associated jira gitkraken board issue gitkraken git gui populate pull request title viewing issue detail user navigate associated branch clicking branch name doubleclicking branch checkout status color text jira issue legible light theme removed unassigned jira default filter bug fix default jira filter created inside gitkraken git gui longer throw error project prefix jql reserved word card default filter populate card assigned user githubsynced board search result longer display nan filtering left panel version wednesday may video introducing version gitkraken git gui best way jira new got issue keep jira issue tracking issue stay gitkraken git gui new integration jira issue board gitkraken board make possible resolve manage issue directly gitkraken git gui gitkraken git gui integrates following issue tracker jira cloud selfhosted gitkraken board setting integration user able following gitkraken git gui view filter list project issue view issue detail create branch tied issue add comment edit statuscolumn issue edit assignee issue create new issue feature denotated paid feature jira integration free gitkraken board integration user open repository inside following text editor via fuzzy finder menu keyboard shortcut ctrlcmd shift e v code atom sublime intellij local repository without remote setup include option create remote push local change improvement still got issue least favorite git gui still improving creating github pull request gitkraken git gui user search reviewer assignee name username text color commit description change placeholder text replaced user ability rename remote ecdsa ssh key pair supported window user open gitkraken menu option open new tab inside gitkraken git gui instead new window pull request link copied context menu bug fix take issue bug repo dropdown menu populate result opening pull request user successfully initialize repository bitbucket server gitkraken git gui window user open file manager menu option keyboard shortcut fuzzy finder action work intended snapcraft snap user snap gitkraken git gui moved classic confinement updating gitkraken please install snap classic flag
459,Lobsters,vcs,Git & VCS,Magit crowd-funding campaign,https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client,magit crowdfunding campaign,funding period,funding period sep oct day
460,Lobsters,vcs,Git & VCS,Release notes extension for Mercurial,https://medium.com/@rishabhmadan/working-with-mercurial-gsoc17-145be9a54838,release note extension mercurial,working mercurial gsoc mercurial mercurial mercurial project overview release note getting basic working restructuredtext need deduplication custom admonition everyone feature admonition additional command flag check list sync future work improving deduplication task linking release note hgweb http wwwrishabhmadanin list patch http wwwmercurialscmorgwikireleasenotesextension,working mercurial gsoc overview experience working mercurialproject release note extension mercurialorganisation python software foundation mercurial mentor kevin bullock augie fackler pulkit goyalabout mercurialmercurial crossplatform open source distributed version control system written python fast easy learn efficiently handle project size kind customize functionality according use help extensionswhat areextensions extension mercurial allow u add additional feature using mercurial internal api access hg command line interface couple line code single python file add really nice feature hg instance simple list existing extension available mercurial wikiproject overviewmy project based creating release note extension mercurial release note document consist information like feature addition bug fix performance change etc major function extension enable user automatically generate release note parsing commit messagesdescriptionpreview hg releasenotes helpgetting basic workingthe basic work flow extension first par commit message tag particular section section something like bug fix new feature performance change etc mentioned earlier part make use restructuredtext rst gregory szorc one contributor mercurial sent initial patch mailing list regarding extension developed improved parsing around commit message storing defined data structure like paragraph bullet patch adding change accessed hereneed deduplicationnext important thing take care deduplication note fragment manyatimes possible several commit message based feature addition avoid scenario content inside note file worked adding similarity check function ensured incoming note always unique purpose comparing two commit message used fuzzy string comparison made use amazing library called fuzzywuzzy implement feature addition also added hack like checking issue number case bug fix eliminate duplicate item find detail herecustom admonition everyonefurthermore also worked feature add custom admonition existing list default admonition task accomplished making use config file hgreleasenotes made use mercurial internal api parsing config file extracting admonition title pair feature really useful people outside mercurial intend use extensionadditional command flagsto make releasenotes extension robust upon discussion mentor decided implement various feature related extension flag general command generate release note us rev flag along worked implementing three additional flag check straight doctstrings purpose flag check commit message invalid admonition case invalid admonition flag return name admonition along changeset id also made use difflibsequencematcher suggest similar existing admonition based place invalid one list helper command user view list available admonition along title really helpful user beginning use extension sync command still process implementation implemented successfully help user synchronize release note file last synced changeset till latest one extremely useful command since relief user duty remembering last updated notesbesides also maintained test file extension cover major use case routine sending patch updating sending made realize importance good test suite place really eas task check command simply running code test instead executing command multiple timesfuture worksome improvement made extension improving deduplication task currently function setup based mercurial development requirement replaced dynamic check developer also leverage functionalitylinking release note hgweb something clearly thought upon seems really nice feature discus next mercurial sprint post gsoc periodyou read work http wwwrishabhmadaninthanks whole mercurial community wonderful opportunity beginning journey mercurial hope continue work community many amazing projectsthanks kevin helping figure trivial nontrivial problem augie helping noob doubt pulkit helping get know community better special mention yuya nishihara reviewed patch taught lot nice thing pythonhere list patch sent mercurial devel mailing list would like use extension go http wwwmercurialscmorgwikireleasenotesextension detail usage
461,Lobsters,vcs,Git & VCS,Compromise On Checkout — Vulnerabilities in SCM Tools,http://blog.recurity-labs.com/2017-08-10/scm-vulns,compromise checkout vulnerability scm tool,compromise checkout vulnerability scm tool first round git lf git lf second round git lab gitlab third round svn mercurial,written joern august compromise checkout vulnerability scm tool first round git lf mid may go two month parental leave stumbled across nifty vulnerability git lf developed fine people github actual vulnerability shockingly simple git lf configured partially lfsconfig file within repository utilizing lf possible point git lf crafted ssh url following form lf url ssh oproxycommandsomecommand cloning repository lsfconfig file git lf plugin would happily try invoke ssh order get lf object host oproxycommandsomecommand ssh however would interpret hostname option subsequently try invoke somecommand order establish connection see also man sshconfig arbitrary command execution possible via crafted repository git lf client clone repository issue disclosed github resolved quick fashion despite attack vector relatively see turned affect git lf skip two month almost full time parenting leave second round git lab mid july back recurity lab office first project two month hacking hiatus assessment gitlab quickly discovered command execution issue using trigger git lf importing repository new project ssh url serverside code execution possible gitlab host obviously happy start rce first day break however issue taking closer look beyond lf gitlab affected git clone directly instance following command line would pop gnomecalculator git clone ssh oproxycommandgnomecalculatorwat cloning wat pseudoterminal allocated stdin terminal sshexchangeidentification connection closed remote host fatal could read remote repository please make sure correct access right repository exists might tricky convince user clone repository rather shady looking ssh url attack vector exploitable sneaky way come git submodules possible create git repository contains crafted ssh submodule url repository cloned recursively submodule updated ssh payload trigger brian neel recurity contact gitlab assessment exemplary coordinated disclosure closed gitsecurity list third round svn mercurial within process creating fix git two vulnerability surfaced issue affected svn mercurial well double checking could confirmed svn affected worst way svn follows http redirects svnssh url result innocent looking http url used trigger command execution redirect
462,Lobsters,vcs,Git & VCS,A Note About Git Commit Messages (2008),http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html,note git commit message,note git commit message vimgit runtime file,note git commit message apr want take moment elaborate make well formed commit message think best practice commit message formatting one little detail make git great understandably first commits railsgit message reallylongline variety want expand poor practice model git commit message capitalized short char le summary detailed explanatory text necessary wrap character context first line treated subject email rest text body blank line separating summary body critical unless omit body entirely tool like rebase get confused run two together write commit message imperative fix bug fixed bug fix bug convention match commit message generated command like git merge git revert paragraph come blank line bullet point okay typically hyphen asterisk used bullet followed single space blank line convention vary use hanging indent start reason wrapping commit message column good thing git log special special wrapping commit message default pager le mean paragraph flow far edge screen making difficult read column terminal subtract column indent left symmetry right left column git formatpatch stdout convert series commits series email using message message body good email netiquette dictate wrap plain text email room level nested reply indicator without overflow column terminal current railsgit workflow include email know future bring vim user meet requirement installing vimgit runtime file simply setting following option git commit message file textmate adjust option view menu use q rewrap paragraph sure blank line afterwards avoid mixing comment shell command add menu drag select time default write commacromatestextmate oakwrapcolumns important mechanic formatting body practice subject line example indicates shoot character though hard maximum always always follow blank line first line concise summary change introduced commit technical detail expressed strict size constraint put body instead subject line used git oftentimes truncated form long message used following handful example end git log prettyoneline show terse history mapping containing commit id summary git rebase interactive provides summary commit editor invokes config option mergesummary set summary merged commits make way merge commit message git shortlog us summary line changeloglike output produce git formatpatch git sendemail related tool use subject email reflogs local history accessible git reflog intended help recover stupid mistake get copy summary gitk column summary github us summary various place user interface subjectbody distinction may seem unimportant one many subtle factor make git history much pleasant work subversion
463,Lobsters,vcs,Git & VCS,MojoTech Git Workflow,http://blog.mojotech.com/mojotech-git-workflow/,mojotech git workflow,source code management git mojotech github organization branching naming pivotal tracker rebasing rebasing http wwwyoutubecomwatch commits atomic message pull request format review actively merging guide link,yet give reader peek behind curtain discus insandouts engineering practice mojotech post like begin talk practice way work engineering perspective many thing care deeply go long way making software project run smoothly usage git source code management tool one following section directly internal mojotech engineering playbook presented entirety git used source code management scm tool mojotech project primarily hosted mojotech github organization although project occasionally scm hosting tool mojotech specific usage pattern around git allow u work team effectively collaborate project efficient manner branching git definitive rule branch must named branch name hold special significance inherently however community standard use branch called master default master branch generated create new git repository via git init mojotech project master branch considered always working branch main place feature branch merged code reviewed approved one nice benefit git creating working merging updating deleting branch trivial cheap easy developer encouraged create branch work various feature bug tinkering feel free create branch often desired work feature branch normal daily workflow developer never directly commit master branch possible instead always follow normal process create feature branch master make change implement feature submit new pull request change change peer code reviewed approval merge pull request master branch naming new feature branch typically created uptodate master branch git checkout master git pull git checkout b newbranchname occasion create new branch nonmaster branch well instance developer may want try several solution problem creating new branch one common starting point keep form consistency legibility among open branch developer name branch following format initial shortdescription example follow git checkout b cpjaddmetricstracking git checkout b cpjfixremembermeinput git checkout b cpjupdateloginendpoint naming structure allows developer easily see developer owns created particular branch well give general insight code change live branch developer also like include pivotal tracker ticket number branch name git checkout b rebasing engineer work feature branch change developer likely merged master branch time developer get habit semifrequently pulling latest change originmaster local master branch rebasing feature branch latest change stay uptodate simple term git rebase master feature branch unwind local commits made feature branch update root feature branch commits pulled master reapply local commits feature branch top may result conflict commits reapplied git rebase process stop conflict occur tell file conflict allow fix conflict continue rebase process git rebase continue change master file section code unrelated feature branch rebase able automatically reapply local commits without conflict time usually code review process cleaning branch submitting new pull request need interactive rebase first time need process make sense sit another mojo walk process also made video describing process http wwwyoutubecomwatch commits git commits like branch also cheap easy make developer get habit creating frequent commits along way instead making one huge bigbang commit end feature development cycle smaller commits much easier code review rollback combine together later needed rather alternative split single large commit multiple smaller commits unlike subversion commits immediately pushed repository git distributed system commits kept local usermachine made nothing distributed central repository unless developer specifically chooses via git push atomic git commits kept atomic mean commit selfcontained related fullyfunctional revolving around single task fix git make task easier allowing save partial file change commit mean need commit change single file instead stage hunk contain many commits reflect several change single file selfcontained related mean commits contain change file related commit question change commit instance contain code adding new input field form also code fixing bug separate file tweaking cache timeout setting two separate commits one single commit fullyfunctional mean commit along way fully buildablepassable stopping point anyone check git history specific commit along way application code still fully functional runnable passing test suite message git commit message contain shorter succinct first line followed single blank line additional supporting descriptive paragraph desired single shorter first line allows easy identification viewing git log andor using git tool like bisect rebase often time single short line needed describe contained commit time supporting information documentation required developer feel free use much additional space desired commit body example single line commit message update assethost environment variablehere example lengthy descriptive commit message fix regression bug remember feature bug ticket filed user unable uncheck remember checkbox login screen research appears certain older mobile browser able use native j touch library code using polyfill method added make feature work older mobile browser supporting native touch call developer also like tag firstline message well easier scanning log fix remove login timeout threshold doc update deployment process documentation optional unless project team leader decides require exclude project policy lot time tagging commits make easier peer reviewer quickly know intent behind commit example commit tagged fix also introduces new piece functionality would good indicator commit nt atomic pull request pull request pr term used single set commits marked ready review merge master pr opened developer signifying believe feature worked complete ready peer reviewed tested developer format submitting pr developer rebase feature branch master get current change time make merging feature branch pr master easier pr code approved commits ordered sequentially easy review grouped logically general supporting commits reordered beginning commit sequence followed detailed feature commits commits squashed together via squash fixup interactive rebase git rebase required mean one commit add new line code change commit commits later change first commit worked final change combined new code introduced single commit review developer project actively participate peer code review open pull request keep whole engineering team loop aware developer working moving piece changing application code review also beneficial everyone eye code base allow bug caught ahead time developer encouraged leave specific comment question change logic flow business requirement etc related pr code merging code review complete developer team signsoff approval code code pass required test suite pr request merged master branch pr formally closed time guide link
465,Lobsters,vcs,Git & VCS,a repo upon the deep,http://www.tedunangst.com/flak/post/a-repo-upon-the-deep,repo upon deep,refer svn advisory security software,reference arbitrary code execution various source control program refer svn advisory remember fire upon deep code archaeologist dig artifact know includes instruction unpack follow instruction think taking precaution prevent bad stuff screw evil ai turned loose bad stuff happensit funny similar today vulnerability theory checking code repo safe operation downloading artifact server building code running code unsafe surely trouble simply checking code ala repo repo checking repo might require checking sub repos external resource dumb read artifact actually smart readexecute artifact artifact checked without also interpreting content interpreting happens execute unwanted shell command bad stuff happensit bug fixed another lesson nothing ever simple adding feature look like hostname could interpreted shell command posted aug tedu updated aug tagged security software
466,Lobsters,vcs,Git & VCS,Mercurial 4.3 and 4.2.3 released,https://www.mercurial-scm.org/pipermail/mercurial/2017-August/050522.html,mercurial released,mercurial released raf http information mercurial mailing list,mercurial released augie fackler raf thu aug edt moment ago released mercurial please patch immedately mercurial symlink auditing incomplete prior could abused write file outside repository mercurial sanitizing hostnames passed ssh allowing shell injection attack specifying hostname starting oproxycommand also present git subversion please patch tool well installed three tool security release today please update packaged build soon practical note since dropped python issue pretty bad back port may release please plan around python near future nt already thanks augie next part nontext attachment scrubbed name signatureasc type applicationpgpsignature size byte desc message signed openpgp url http information mercurial mailing list
467,Lobsters,vcs,Git & VCS,Arbitrary code execution on clients through malicious svn+ssh URLs in svn:externals,https://subversion.apache.org/security/CVE-2017-9800-advisory.txt,arbitrary code execution client malicious svnssh url svn external,,arbitrary code execution client malicious svnssh url svn external svn syncfromurl summary subversion client sometimes connects url provided repository happens two primary case checkout export update switch tree downloaded contains svn external property using svnsync sync one url argument maliciously constructed svnssh url would cause subversion client run arbitrary shell command url could generated malicious server malicious user committing honest server attack another user server repository proxy server vulnerability affect client including use file http plain untunneled svn exploit tested known vulnerable subversion client inclusive subversion client inclusive subversion client subversion vulnerable however never publicly released known fixed subversion subversion patch available patch applies offset patch applies offset client access ssh client custom tunnel configured runtime configuration area vulnerable client using subversion runtime module loading repository access ra module vulnerable libsvnrasvn module provides support svnssh svn protocol removed http svnadvancedconfarealayout link describes subversion description correct version well detail openssh implement proxycommand feature instructs client run additional local command opening connection server intention local command run proxy server connection ssh server feature enabled command line oproxycommand option switch oproxycommand option take arbitrary command argument executed ssh client connecting ssh server attack make use feature placing proxycommand option arbitrary command svnssh url vulnerable svn client pas option ssh command turn execute arbitrary command provided attacker putty plink ssh client implement feature slightly different option name proxycmd severity base score critical base vector nac lpr lui n cc hi ha hrl orc c successful exploit run arbitrary shell command privilege subversion client recommendation several alternative way fix issue available one fix issue completely need implement one four option recommend user upgrade subversion new subversion source binary package found http subversionapacheorgdownload http subversionapacheorgpackages user subversion unable upgrade may apply included patch client able execute ssh command vulnerable name ssh command executed may changed setting svnssh environment variable setting value ssh key tunnel section file config runtime configuration area default ssh tunnel configured available even commented file config default definition ssh tunnel equivalent ssh svnssh ssh q value option set nonexistent path svnssh url longer work svn client vulnerable ssh thispathdoesnotexist however openssh used ssh client default unixlike system svnssh url still used safely either change configuration file setting ssh svnssh ssh q set environment variable svnssh value ssh q argument tell openssh stop processing subsequent argument command line option hence neuter attack oproxycommand option command line longer evaluated option putty used ssh client default window system including tortoisesvn trick work putty evaluates command line option even occurs command line using putty either svn client must upgraded svnssh url must disabled entirely described tunnel section may define additional thirdparty custom tunnel may vulnerable perform input validation first argument contains hostname connect custom tunnel invoked three argument hostname connect string svnserve string recommended custom tunnel definition audited correct handling unusual invalid host value subversion library perform basic validation guarantee correct quotingescaping parameter arbitrary thirdparty tunnel command client built use subversion runtime mechanism loading module remove libsvnrasvn shared module thus remove threat svn svnssh protocol longer available apply client built use normal compiletime linking shared library client fail start libsvnrasvn shared module removed subversion runtime loading mechanism enabled buildtime using enableruntimemodulesearch user svnsync sync use twourlarguments form command current remote url may found either two command svnsync info desturl svn proplist verbose desturl desturl first url argument svnsync sync change svnsync invocation always pas url additional argument change svnsync sync urltosync svnsync sync urltosync urltosource note recommendation applies svnsync sync fix checkout update part issue server administrator may wish install precommit hook reject commits add invalid svn url order protect user malicious user committing url example hook available api consumer implement svnraopentunnelfunct opentunnelfunc callback audit issue similar one subversion officially longer supported patch apply patch available patch could adapted even older version since longer supported official release branch vulnerablity http svnadvancedconfarealayout link describes subversion description correct version well reference subversion gitlab mercurial hg git reported jonathan nieder discovered joern schneeweisz recurity lab patch patch subversion index subversionlibsvnrasvnclientc subversionlibsvnrasvnclientc revision subversionlibsvnrasvnclientc working copy include svnpropsh include svnmergeinfoh include svnversionh include svnctypeh include svnprivateconfigh version user using ssh implementation nt accept override tunnel section config val svnssh ssh q val svnssh ssh q val val n cmdargv n null n argv n cmdargv n argv n svnpathuridecode hostinfo pool argv n hostinfo argv n svnserve argv n argv n null simple whitelist ensure following valid user server servername servername extra restriction leading invalid static svnbooleant isvalidhostinfo const char hostinfo const char p hostinfo p return false p svnctypeisalnum p strchr p return false p return true static svnerrort rasvnopen svnrasessiont session const char correctedurl const char url callback checktunnelfunc callback opentunnelfunc callback checktunnelfunc callback tunnelbaton tunnel svnerr findtunnelagent tunnel urihostinfo tunnelargv config resultpool const char decodedhostinfo decodedhostinfo svnpathuridecode urihostinfo resultpool isvalidhostinfo decodedhostinfo return svnerrorcreatef svnerrbadurl null invalid host urihostinfo svnerr findtunnelagent tunnel decodedhostinfo tunnelargv config resultpool else tunnelargv null index subversionlibsvnsubrconfigfilec subversionlibsvnsubrconfigfilec revision subversionlibsvnsubrconfigfilec working copy passed tunnel agent nl builtin ssh scheme predefined could defined nl nl ssh svnssh ssh q nl ssh svnssh ssh q nl wanted define new rsh scheme used nl svnrsh url could follows nl rsh rsh nl rsh rsh nl wanted specify full path argument nl rsh pathtorsh l myusername nl rsh pathtorsh l myusername nl window specifying full path command nl use forward slash paired backslash nl path separator single backslash treated nl patch subversion index subversionlibsvnrasvnclientc subversionlibsvnrasvnclientc revision subversionlibsvnrasvnclientc working copy include svnpropsh include svnmergeinfoh include svnversionh include svnctypeh include svnprivateconfigh version user using ssh implementation nt accept override tunnel section config val svnssh ssh q val svnssh ssh q val val argv aprpalloc pool n sizeof char memcpy void argv cmdargv n sizeof char argv n svnpathuridecode hostinfo pool argv n hostinfo argv n svnserve argv n argv n null simple whitelist ensure following valid user server servername servername extra restriction leading invalid static svnbooleant isvalidhostinfo const char hostinfo const char p hostinfo p return false p svnctypeisalnum p strchr p return false p return true static svnerrort rasvnopen svnrasessiont session const char correctedurl const char url parsetunnel url tunnel pool tunnel svnerr findtunnelagent tunnel urihostinfo tunnelargv config pool const char decodedhostinfo decodedhostinfo svnpathuridecode urihostinfo pool isvalidhostinfo decodedhostinfo return svnerrorcreatef svnerrbadurl null invalid host urihostinfo svnerr findtunnelagent tunnel decodedhostinfo tunnelargv config pool else tunnelargv null index subversionlibsvnsubrconfigfilec subversionlibsvnsubrconfigfilec revision subversionlibsvnsubrconfigfilec working copy passed tunnel agent nl builtin ssh scheme predefined could defined nl nl ssh svnssh ssh q nl ssh svnssh ssh q nl wanted define new rsh scheme used nl svnrsh url could follows nl rsh rsh nl rsh rsh nl wanted specify full path argument nl rsh pathtorsh l myusername nl rsh pathtorsh l myusername nl window specifying full path command nl use forward slash paired backslash nl path separator single backslash treated nl
468,Lobsters,vcs,Git & VCS,"[ANNOUNCE] Git v2.14.1, v2.13.5, and others",https://public-inbox.org/git/xmqqh8xf482j.fsf@gitster.mtv.corp.google.com/T/#u,announce git others,sibling reply message thread permalink raw http wwwkernelorgpubsoftwarescmgit http kernelgooglesourcecompubscmgitgit http githubcomgitstergit permalink raw reply nested message thread index mboxgz atom feed announce git others http http http config snippet nntp newspublicinboxorginboxcompversioncontrolgit nntp nntp nntp nntp newsgmaneiogmanecompversioncontrolgit http wwwtorprojectorg http publicinboxorgpublicinboxgit,announce git others junio c hamano sibling reply message thread junio c hamano utc permalink raw git cc linux kernel latest maintenance release git available usual place together release older maintenance track issue contain security fix released coordination subversion mercurial share similar issue assigned system respectively issue similar addressed part coordinated release tarballs found http wwwkernelorgpubsoftwarescmgit following public repository copy tag url http kernelgooglesourcecompubscmgitgit url git repoorczaltgitgit url http githubcomgitstergit malicious thirdparty give crafted ssh url unsuspecting victim attempt visit url result program exists victim machine executed url could placed gitmodules file malicious project unsuspecting victim could tricked running git clone recursesubmodules trigger vulnerability credit find fix issue go brian neel gitlab joern schneeweisz recurity lab jeff king github ssh url result ssh command line hostname begin dash would cause ssh command instead mi treat option prevented forbidding hostname impact realworld usage similarly gitproxycommand configured command run host port parsed ssh url poorly written gitproxycommand could tricked treating string begin dash option prevented forbidding hostname port number impact realworld usage spirit repository name begin dash also forbidden permalink raw reply flatnested message threadonly message thread back index thread overview message download mboxgz follow atom feed link jump message page announce git others junio c hamano git vgerkernelorg list mirror unofficial one many archive clonable git clone mirror http publicinboxorggit git clone mirror http git clone mirror http git clone mirror http example config snippet mirror newsgroups available nntp nntp newspublicinboxorginboxcompversioncontrolgit nntp nntp nntp nntp newsgmaneiogmanecompversioncontrolgit note onion url require tor http wwwtorprojectorg agpl code site git clone http publicinboxorgpublicinboxgit
469,Lobsters,vcs,Git & VCS,git: Using Advanced Rebase Features for a Clean Repository,http://mtyurt.net/2017/08/08/git-using-advanced-rebase-features-for-a-clean-repository/,git using advanced rebase feature clean repository,http mtyurtnetpostgitusingadvancedrebasefeaturesforacleanrepositoryhtml,http mtyurtnetpostgitusingadvancedrebasefeaturesforacleanrepositoryhtml
470,Lobsters,vcs,Git & VCS,Git from the inside out,https://maryrosecook.com/blog/post/git-from-the-inside-out,git inside,video heavily annotated source code create project initialize repository add file make commit create tree graph create commit object point current branch new commit make commit first commit graph property graph property graph property graph property graph property graph property check commit create branch graph property check branch check branch incompatible working copy merge ancestor graph property merge descendent graph property merge two commits different lineage graph property graph property graph property graph property merge two commits different lineage modify file remove file copy repository link repository another repository fetch branch remote graph property graph property merge fetchhead pull branch remote clone repository push branch checkedout branch remote clone bare repository push branch bare repository summary,essay explains git work rather absorb information talk watch video instead essay assumes understand git well enough use version control project focus graph structure underpins git way property graph dictate behavior looking fundamental build mental model truth rather hypothesis constructed evidence gathered experimenting api truer model give better understanding git done text structured series git command run single project interval observation graph data structure git built observation illustrate property graph behavior property produce reading wish go even deeper git look heavily annotated source code implementation git javascript create project mkdir alpha cd alpha user creates alpha directory project alpha mkdir data alpha printf datalettertxt move alpha directory create directory called data inside create file called lettertxt contains alpha directory look like alpha data lettertxt initialize repository alpha git init initialized empty git repository git init make current directory git repository creates git directory writes file file define everything git configuration history project ordinary file magic user read edit text editor shell say user read edit history project easily project file alpha directory look like alpha data lettertxt git object etc git directory content file collectively known working copy add file alpha git add datalettertxt user run git add datalettertxt two effect first creates new blob file gitobjects directory blob file contains compressed content datalettertxt name derived hashing content hashing piece text mean running program turn smaller piece text uniquely identifies original example git hash first two character used name directory inside object database rest hash used name blob file hold content added file notice adding file git save content object directory content still safe inside git user deletes datalettertxt working copy second git add add file index index list contains every file git told keep track stored file gitindex line file map tracked file hash content moment added index git add command run datalettertxt user make file called datanumbertxt contains alpha printf datanumbertxt working copy look like alpha data lettertxt numbertxt user add file git git add command creates blob object contains content datanumbertxt add index entry datanumbertxt point blob index git add command run second time datalettertxt datanumbertxt notice file data directory listed index though user ran git add data data directory listed separately alpha printf datanumbertxt alpha git add data user originally created datanumbertxt meant type make correction add file index command creates new blob new content update index entry datanumbertxt point new blob make commit alpha git commit master rootcommit user make commit git print data commit data make sense shortly commit command three step creates tree graph represent content version project committed creates commit object point current branch new commit object create tree graph git record current state project creating tree graph index tree graph record location content every file project graph composed two type object blob tree blob stored git add represent content file tree stored commit made tree represents directory working copy tree object record content data directory new commit blob lettertxt blob numbertxt first line record everything required reproduce datalettertxt first part state permission second part state content entry represented blob rather tree third part state hash blob fourth part state name second line record datanumbertxt tree object alpha root directory project tree data sole line tree point data tree tree graph commit graph root tree point data tree data tree point blob datalettertxt datanumbertxt create commit object git commit creates commit object creating tree graph commit object another text file gitobjects tree author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom first line point tree graph hash tree object represents root working copy alpha directory last line commit message commit object pointing tree graph point current branch new commit finally commit command point current branch new commit object current branch git go head file githead find say head pointing master master current branch head master ref ref label used git user identify specific commit file represents master ref exist first commit repository git creates file gitrefsheadsmaster set content hash commit object typing git command read hash commit different hash mine content object like blob tree always hash value commits include date name creator add head master git graph head pointing master master pointing commit head point master commit master exists point new commit object make commit first commit git graph commit working copy index included commit shown working copy index notice working copy index commit content datalettertxt datanumbertxt index head commit use hash refer blob object working copy content stored text different place alpha printf datanumbertxt user set content datanumbertxt update working copy leaf index head commit datanumbertxt set working copy alpha git add datanumbertxt user add file git add blob containing object directory point index entry datanumbertxt new blob datanumbertxt set working copy index alpha git commit master user commits step commit first new tree graph created represent content index index entry datanumbertxt changed old data tree longer reflects indexed state data directory new data tree object must created blob lettertxt blob numbertxt new data tree hash different value old data tree new root tree must created record hash tree data second new commit object created tree parent author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom first line commit object point new root tree object second line point parent find parent commit git went head followed master found commit hash third content master branch file set hash new commit commit git graph without working copy index graph property content stored tree object mean diffs stored object database look graph commit reuses blob made commit similarly whole directory change commit commit tree blob tree reused generally content change commit commit mean git store large commit history small amount space graph property commit parent mean repository store history project graph property ref entry point one part commit history another mean commits given meaningful name user organizes work lineage meaningful project concrete ref like git us symbolic ref like head mergehead fetchhead support command manipulate commit history graph property node object directory immutable mean content edited deleted every piece content ever added every commit ever made somewhere object directory graph property ref mutable therefore meaning ref change commit master point might best version project moment soon enough superseded newer better commit graph property working copy commits pointed ref readily available commits mean recent history easier recall also change often git fading memory must jogged increasingly vicious prod working copy easiest point history recall root repository recalling even require git command also least permanent point history user make dozen version file git record unless added commit head point easy recall tip branch checked see content user stash examine working copy time head frequently changing ref commit concrete ref point easy recall user simply check branch tip branch change le often head often enough meaning branch name changeable difficult recall commit pointed ref user go ref harder construct meaning commit back go le likely someone changed history since last looked check commit alpha git checkout detached head state user check commit using hash running git command one work use git log find hash commit checking four step first git get commit get tree graph point second writes file entry tree graph working copy result change working copy already content tree graph written head already pointing via master commit third git writes file entry tree graph index result change index already content commit fourth content head set hash commit setting content head hash put repository detached head state notice graph head point directly commit rather pointing master detached head commit alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit detached head user set content datanumbertxt commits change git go head get parent commit instead finding following branch ref find return hash commit git update head point directly hash new commit repository still detached head state commit branch branch ref point either one descendant mean easy lose tree blob mostly omitted graph diagram commit branch create branch alpha git branch deputy user creates new branch called deputy creates new file gitrefsheadsdeputy contains hash head pointing hash commit graph property branch ref ref file mean git branch lightweight creation deputy branch put new commit safely branch head still detached still point directly commit commit deputy branch check branch alpha git checkout master switched branch master user check master branch first git get commit master point get tree graph commit point second git writes file entry tree graph file working copy set content datanumbertxt third git writes file entry tree graph index update entry datanumbertxt hash blob fourth git point head master changing content hash master checked pointing commit check branch incompatible working copy alpha printf datanumbertxt alpha git checkout deputy change file would overwritten checkout datanumbertxt commit change stash switch branch user accidentally set content datanumbertxt try check deputy git prevents check head point master point datanumbertxt read deputy point datanumbertxt read working copy version datanumbertxt read version different difference must resolved git could replace working copy version datanumbertxt version commit checked avoids data loss cost git could merge working copy version version checked complicated git abort check alpha printf datanumbertxt alpha git checkout deputy switched branch deputy user notice accidentally edited datanumbertxt set content back check deputy successfully deputy checked merge ancestor alpha git merge master already uptodate user merges master deputy merging two branch mean merging two commits first commit one deputy point receiver second commit one master point giver merge git nothing report already uptodate graph property series commits graph interpreted series change made content repository mean merge giver commit ancestor receiver commit git nothing change already incorporated merge descendent alpha git checkout master switched branch master user check master master checked pointing commit alpha git merge deputy fastforward merge deputy master git discovers receiver commit ancestor giver commit fastforward merge get giver commit get tree graph point writes file entry tree graph working copy index master point commit deputy fastforward merged master graph property series commits graph interpreted series change made content repository mean merge giver descendent receiver history changed already sequence commits describe change make sequence commits receiver giver though git history change git graph change concrete ref head point updated point giver commit merge two commits different lineage alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user set content numbertxt commits change master alpha git checkout deputy switched branch deputy alpha printf b datalettertxt alpha git add datalettertxt alpha git commit deputy user check deputy set content datalettertxt b commit change deputy committed master committed deputy deputy checked graph property commits share parent mean new lineage created commit history graph property commits multiple parent mean separate lineage joined commit two parent merge commit alpha git merge master merge made recursive strategy user merges master deputy git discovers receiver giver different lineage make merge commit process eight step first git writes hash giver commit file alphagitmergehead presence file tell git middle merging second git find base commit recent ancestor receiver giver commits common base commit graph property commits parent mean possible find point two lineage diverged git trace backwards find ancestor backwards find ancestor find recent ancestor shared lineage base commit third git generates index base receiver giver commits tree graph fourth git generates diff combine change made base receiver commit giver commit diff list file path point change add remove modify conflict git get list file appear base receiver giver index one compare index entry decide change make file writes corresponding entry diff case diff two entry first entry datalettertxt content file base b receiver giver content different base receiver base giver git see content modified receiver giver diff entry datalettertxt modification conflict second entry diff datanumbertxt case content base receiver different giver diff entry datalettertxt also modification graph property possible find base commit merge mean file changed base receiver giver git automatically resolve merge file reduces work user must fifth change indicated entry diff applied working copy content datalettertxt set b content datanumbertxt set sixth change indicated entry diff applied index entry datalettertxt pointed b blob entry datanumbertxt pointed blob seventh updated index committed tree parent parent author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom notice commit two parent eighth git point current branch deputy new commit merge commit resulting recursive merge merge two commits different lineage modify file alpha git checkout master switched branch master alpha git merge deputy fastforward user check master merge deputy master fastforwards master commit master deputy point commit deputy merged master bring master latest commit alpha git checkout deputy switched branch deputy alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit deputy user check deputy set content datanumbertxt commit change deputy alpha git checkout master switched branch master alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user check master set content datanumbertxt commit change master commit deputy commit master alpha git merge deputy conflict datanumbertxt automatic merge failed fix conflict commit result user merges deputy master conflict merge paused process conflicted merge follows first six step process unconflicted merge set gitmergehead find base commit generate index base receiver giver commits create diff update working copy update index conflict seventh commit step eighth ref update step never taken go step see happens first git writes hash giver commit file gitmergehead mergehead written merge second git find base commit third git generates index base receiver giver commits fourth git generates diff combine change made base receiver commit giver commit diff list file path point change add remove modify conflict case diff contains one entry datanumbertxt entry marked conflict content datanumbertxt different receiver giver base fifth change indicated entry diff applied working copy conflicted area git writes version file working copy content datanumbertxt set head deputy sixth change indicated entry diff applied index entry index uniquely identified combination file path stage entry unconflicted file stage merge index looked like stage value datalettertxt datanumbertxt merge diff written index index look like datalettertxt datanumbertxt datanumbertxt datanumbertxt entry datalettertxt stage merge entry datanumbertxt stage gone three new entry place entry stage hash base datanumbertxt content entry stage hash receiver datanumbertxt content entry stage hash giver datanumbertxt content presence three entry tell git datanumbertxt conflict merge pause alpha printf datanumbertxt alpha git add datanumbertxt user integrates content two conflicting version setting content datanumbertxt add file index git add blob containing adding conflicted file tell git conflict resolved git remove datanumbertxt entry stage index add entry datanumbertxt stage hash new blob index read datalettertxt datanumbertxt alpha git commit master seventh user commits git see gitmergehead repository tell merge progress check index find conflict creates new commit record content resolved merge deletes file gitmergehead completes merge eighth git point current branch master new commit merge commit resulting conflicted recursive merge remove file diagram git graph includes commit history tree blob latest commit working copy index working copy index commit tree graph alpha git rm datalettertxt rm datalettertxt user tell git remove datalettertxt file deleted working copy entry deleted index datalettertxt rm ed working copy index alpha git commit master user commits part commit always git build tree graph represents content index datalettertxt included tree graph index commit made datalettertxt rm ed copy repository alpha cd cp r alpha bravo user copy content alpha repository bravo directory produce following directory structure alpha data numbertxt bravo data numbertxt another git graph bravo directory new graph created alpha cp ed bravo link repository another repository cd alpha alpha git remote add bravo bravo user move back alpha repository set bravo remote repository alpha add line file alphagitconfig remote bravo url bravo line specify remote repository called bravo directory bravo fetch branch remote alpha cd bravo bravo printf datanumbertxt bravo git add datanumbertxt bravo git commit master user go bravo repository set content datanumbertxt commit change master bravo commit bravo repository bravo cd alpha alpha git fetch bravo master unpacking object bravo branch master fetchhead user go alpha repository fetch master bravo alpha process four step first git get hash commit master pointing bravo hash commit second git make list object commit depends commit object object tree graph ancestor commits commit object tree graph remove list object alpha object database already copy rest alphagitobjects third content concrete ref file alphagitrefsremotesbravomaster set hash commit fourth content alphagitfetchhead set branch master bravo indicates recent fetch command fetched commit master bravo alpha bravomaster fetched graph property object copied mean history shared repository graph property repository store remote branch ref like alphagitrefsremotesbravomaster mean repository record locally state branch remote repository correct time fetched go date remote branch change merge fetchhead alpha git merge fetchhead updating fastforward user merges fetchhead fetchhead another ref resolve commit giver head point commit receiver git fastforward merge point master commit alpha fetchhead merged pull branch remote alpha git pull bravo master already uptodate user pull master bravo alpha pull shorthand merge git two command report master already uptodate clone repository alpha cd git clone alpha charlie cloning charlie user move directory clone alpha charlie cloning charlie similar result cp user produce bravo repository git creates new directory called charlie inits charlie git repo add alpha remote called origin fetch origin merges fetchhead push branch checkedout branch remote cd alpha alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user go back alpha repository set content datanumbertxt commit change master alpha alpha git remote add charlie charlie set charlie remote repository alpha alpha git push charlie master writing object remote error refusing update checked branch refsheadsmaster make index work tree inconsistent push master charlie object required commit copied charlie point push process stop git ever tell user went wrong refuse push branch checked remote make sense push would update remote index head would cause confusion someone editing working copy remote point user could make new branch merge commit push branch charlie really want repository push whenever want want central repository push pull one commits directly want something like github remote want bare repository clone bare repository alpha cd git clone alpha delta bare cloning bare repository delta user move directory clone delta bare repository ordinary clone two difference config file indicates repository bare file normally stored git directory stored root repository delta head config object ref alpha delta graph alpha cloned delta push branch bare repository cd alpha alpha git remote add delta delta user go back alpha repository set delta remote repository alpha alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master set content datanumbertxt commit change master alpha commit alpha alpha git push delta master writing object delta master master push master delta pushing three step first object required commit master branch copied alphagitobjects deltaobjects second deltarefsheadsmaster updated point commit third alphagitrefsremotesdeltamaster set point commit alpha uptodate record state delta commit pushed alpha delta summary git built graph almost every git command manipulates graph understand git deeply focus property graph workflow command learn git investigate git directory scary look inside change content file see happens create commit hand try see badly mess repo repair
471,Lobsters,vcs,Git & VCS,Mononoke: A Mercurial server designed for Monorepos,https://github.com/facebookexperimental/mononoke,mononoke mercurial server designed monorepos,join github today sign file permalink resource license reload reload,repository archived owner readonly mercurial source control server specifically designed support large monorepos dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time mercurial source control server specifically designed support large monorepos resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
472,Lobsters,vcs,Git & VCS,Apache Subversion 1.10.0-alpha3 Released,http://subversion.apache.org/news.html#news-20170726,apache subversion released,apache subversion news archive apache subversion released release announcement press release release note download page apache subversion released release announcement release note change log download page celebrating year subversion press release join community apache subversion released release announcement release note download page apache subversion released release announcement release note change log download page apache subversion security advisory release announcement download page apache subversion released release announcement download page apache subversion released release announcement release note download page apache subversion released release announcement release note change log download page apache subversion security advisory release announcement release note release note download page apache subversion released release announcement release note download page apache subversion released release announcement release note download page apache subversion released release announcement release note download page apache subversion released release announcement release note download page apache subversion released release announcement release note download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note download page apache subversion released release announcement release note download page apache subversion transition lts standard release plan release apache subversion released release announcement release note download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion meetandgreet event aachengermany assembla meetandgreet event cafe madrid apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log identical checksum series release note new faq entry download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement change log download page subversion released release announcement change log download page hackathon berlin elego page apache subversion released release announcement release note change log download page apache subversion released release announcement change log download page subversion released release announcement change log download page subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page subversion released release announcement change log download page subversion live event october subversion live apache subversion released release announcement change log download page apache subversion released release announcement change log download page subversion hackathon berlin june subversion day subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release announcement change log download page apache subversion released release note release announcement change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page apache subversion released release announcement release note change log download page subversion released release announcement change log subversion released release announcement change log asf response recent wandisco statement blog post subversion released release announcement change log subversion released release announcement change log subversion released release announcement change log subversion released release announcement change log subversion released release announcement change log subversion becomes announce subversion released release announcement change log subversion join apache incubator apache incubator press release old website,apache subversion news archive apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement press release release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page celebrating year subversion first cv commit would become apache subversion recorded special leap day february year celebrate u mark subversion anniversary read press release join community writing next chapter subversion story apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion security advisory recent release apache subversion contain fix two security issue issue affect subversion svnserve server encourage server operator upgrade latest appropriate version soon reasonable please see release announcement information release get latest release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion security advisory recent release apache subversion contain fix moderate severity security issue issue allow unauthenticated user crash httpd process serving subversion repository configured allow anonymous read access encourage user subversion upgrade latest appropriate version soon reasonable please see release announcement release note release note information release get latest release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable addition normal collection bug fix stability enhancement release also address securityrelated issue please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable addition normal collection bug fix stability enhancement release also address securityrelated issue please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion transition lts standard release subversion community decided make standard release every month longterm support lts release every year recent release shall considered lts release please see plan release detail apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement release note information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion meetandgreet event aachengermany apache subversion hosting yearly long event called subversion hackathon year hackathon made available due kind sponsorship assembla hosting meetandgreet event always wanted meet u person chance get u know internet also provide pgpsigning session part event interested come cafe madrid aachengermany pontstraße november local time utc apache subversion released pleased announce release apache subversion complete release line date encourage user upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release release fix bug repository would fail store two file identical checksum information available series release note new faq entry get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement release note change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion second public release candidate subversion publicly released thought free blocking issue none found become final release reason encourage thorough testing many environment possible release candidate put u last week fourweek soak period allow testing barring showstopping bug final release expected near june please see release announcement information release release note change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page subversion released pleased announce release subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page hackathon berlin year subversion hackathon held june june office elego berlin germany subversion developer community meet berlin finish preparation upcoming subversion release kick development subversion selection live web presentation held subversion developer attending hackathon see page detail apache subversion released pleased announce release apache subversion first public release candidate subversion publicly released thought free blocking issue none found become final release reason encourage thorough testing many environment possible release candidate begin fourweek soak period allow testing barring showstopping bug final release expected near june please see release announcement information release release note change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page subversion released pleased announce release subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page subversion released pleased announce release subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page subversion released pleased announce release subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release please visit download page subversion live event october series subversion live conference held san francisco october greenwich connecticut london october later year event organized wandisco session led subversion committers including greg stein stefan fuhrmann hyrum wright julian foad philip martin free pass offered apache subversion core committers simply email marketing wandiscocom detail apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page subversion hackathon berlin june subversion hackathon held berlin week june subversion developer attend work together entire week hackathon organized elego part subversion day event berlin cosponsored several company involved subversion community developer working subversion free time receive full sponsorship able attend hackathon like thank sponsor subversion day attendee making possible subversion released pleased announce release subversion complete subversion release series date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date address number userreported issue encourage user subversion upgrade soon reasonable please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion complete subversion release date encourage user subversion upgrade soon reasonable release contains large number new feature bug fix improvement comprehensive list please consult release note please see release announcement change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release expect final release candidate official release subversion barring critical bug release candidate become final release october get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion another release candidate subversion thought free blocking issue none found become final release reason encourage thorough testing many environment possible release candidate continues fourweek soak period allow testing barring showstopping bug final release expected near sept please see release announcement information release release note change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion first public release candidate subversion publicly released thought free blocking issue none found become final release reason encourage thorough testing many environment possible release candidate begin fourweek soak period allow testing barring showstopping bug final release expected near sept please see release announcement information release release note change log information release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released pleased announce release apache subversion release intended production use believe free critical issue encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page note keeping score home first beta release officially released apache subversion released pleased announce release apache subversion another prerelease road release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released please announce next subversion prerelease apache subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information release release note change log information eventually release get release nearest mirror please visit download page apache subversion released first prerelease apache subversion series released subversion release intended production use provided milestone encourage wider testing feedback intrepid user maintainer please see release announcement information alpha release release note change log information eventually release get release nearest mirror please visit download page subversion released subversion latest stable version subversion released addition normal collection bug fix stability enhancement release also address three securityrelated issue information release see release announcement change log subversion released subversion latest stable version subversion released addition normal collection bug fix stability enhancement release also address remotelytriggerable do httpdbased subversion server information release see release announcement change log asf response recent wandisco statement light recent press release blog post wandisco apache software foundation issued blog post clarify wandisco inc participates subversion development term organization subversion released subversion released release supplement subversion release series contains number stability fix information see release announcement change log subversion released subversion latest stable version subversion released information see release announcement change log note subversion publicly released due error found internal prerelease validation subversion released subversion latest stable version subversion released information see release announcement change log note release address security issue using svnpathauthz shortcircuit subversion released subversion latest stable version subversion released information see release announcement change log subversion released subversion latest stable version subversion released information see release announcement change log note subversion publicly released due error found internal prerelease validation subversion becomes apache subversion subversion project pleased announce graduated incubator apache software foundation officially apache subversion although largely procedural step important one goal making asf permanent home subversion community like thank asf vote confidence look forward opportunity wait u apache subversion subversion released subversion latest stable version subversion released information see release announcement change log subversion join apache incubator subversion project accepted apache incubator first step road becoming fullfledged toplevel apache project read exciting development related press release part transition involves migrating project asset website bug mailing list etc apache hosting infrastructure gradually time order ensure smooth transition minimum loss momentum ca nt find looking website chance good yet migrated information yet old website july old website longer available
473,Lobsters,vcs,Git & VCS,Plan Your Commits,https://dev.to/rpalo/plan-your-commits,plan commits,,nt know common really hard time remembering commit code know commits supposed meaningful logical chunk work tell story viewed aggregate yet still find chugging along get ready get coding without committed anything commit giant blob message like finished feature hopefully someone like hopefully post speaks one person hyperfocuses problem forgets commit move eat go outside speak human person discovered solution plan commits mind blown right could conceived genius surely one considered envisioning shut new idea thought process lot tutorial gone git included seem assume pro committer already say thing like go seems like good spot commit want commit work led believe could code along would abundantly obvious committing however found preselect checkpoint forget le saying thing like commit finished function get url routing hooked work lot better mostly idea get commit come air see see need go also help need hold everything head help leave project alone day want come back stuff written le bouncing around head commits look like pile rhyme commit ðÿ try writing commit message head write code better way trick would help keep head straight long run please share love hear
474,Lobsters,vcs,Git & VCS,Review of FreeBSD's Subversion primer,https://svn.haxx.se/users/archive-2017-07/0082.shtml,review freebsd subversion primer,http wwwfreebsdorgdocenarticlescommittersguidesubversionprimerhtml http sparsedirectoryexclusion http reposdictatedconfig http svndiff http filemergetool http wwwopencollabnetcommunitysubversionarticlesmergeinfohtml http blogscollabnetsubversionwheredidthatmergeinfocomefrom http customkeywords http subversionapacheorgcontributinghtml code http,fri jul xin li wrote hi stefan thanks feedback please see response inline fri jul stefan sperling stspatapacheorg wrote thu jul xin li wrote freebsd repository one best real world data set available subversion developer referred several time working new conflict resolver planned subversion spent day running test merges repository repository show many difficult interesting problem would normally see repository locked inside company problem seen due limitation svn believe problem freebsd developer svn selfmade freebsd developer general really understand tool nt know work arounds weakness freebsd handbook section subversion full bad advice halftruths guess mean article http wwwfreebsdorgdocenarticlescommittersguidesubversionprimerhtml yes could please specific bad advice would helpful could fixed document andor practice possible take look premier get issue raised eurobsdcon tutorial addressed sure go point thing stand positively negatively information contained guide simply outdated checkout note decreasing depth working copy possible long outdated advice see depthexclude option introduced http sparsedirectoryexclusion adding removing file adding file get copy autopropstxt longer necessary since subversion use svn autoprops instead http reposdictatedconfig diffs probably mention old new syntax used compare arbitrary file directory local andor repository including unversioned item syntax described svn help diff worth pointing anyway http svndiff conflict list possible value accept option incomplete mention svn help always uptodate list prominently mentioned minefull theirsfull option rarely needed time using edit command e conflict prompt best path forward case eg file use linebyline syntax merge command provides useful merge tool inspired openbsd version sdiff http filemergetool sparse checkout list depth option argument incomplete lack exclude direct operation certain operation performed directly repository without touching working copy merge wrong merge modifies working copy unless dryrun used merging svn merge tracking set file mergeinfo applies file set directory applies directory descendant file directory except svn mergeinfo part entire section correct inherited instance implicitly inherit mergeinfo claim true svn mergeinfo otherwise wrong remaining explanation provided wo nt quote mergeinfo inheritance work vastly oversimplified lead misunderstanding false conclusion would delete instead refer interested reader article paul burba cover subject depth http wwwopencollabnetcommunitysubversionarticlesmergeinfohtml http blogscollabnetsubversionwheredidthatmergeinfocomefrom aside would great content article copied svnbook provided paul grant permission selecting source target newer merges merged committed root branch good however guide also encourage local experimentation various merge trick path come resolving tree conflict often help think directory repository entire branch starting merge also help think subversion repository really collection revision path ancestral relationship modelled via copy resolving tree conflict right level abstraction use selecting source target older earlier different strategy used distributing mergeinfo around tree merges could performed without complete checkout procedure proved extremely errorprone convenience partial checkout merges significantly outweighed complexity picking mergeinfo target procedure describes nowobsoleted process kidding say happy process already changed never merge directly file never ever merge directly file never ever ever merge directly file apparently written someone got burned mergetracking bug lack good tree conflict handling nt ask expert help resorted warning everyone stay away ever trying admit found attitude towards function tool use probably nt understand well correct answer depends shown eurobsdcon tutorial may make sense merge directly file resolving tree conflict preparing merge target important never merge change sparse working copy yes read paul burba article see committing make sure commit top level directory mergeinfo included well good essential advice flattening propdel bit necessary starting subversion automatically add svn mergeinfo directory copied moved longer true workingcopy workingcopy copy create mergeinfo importing vendor tree svn add svn rm command used needed make sense use svn move instead svn rm followed svn add vendor moved file become useful subversion merging head alias repository path url shortcut mentioned prominently much earlier eg section fixing mistake thing repository journal mentioned would suggest replace repository journal repository tip possible automatically fill sponsored mfc commit log field setting freebsdsponsoredby freebsdmfcafter field miscellany section subversionconfig configuration file example freebsdsponsoredby freebsd foundation freebsdmfcafter week wish freebsd putting effort getting custom feature integrated stock subversion managed get freebsd custom keywords patch integrated http customkeywords rest see http subversionapacheorgcontributinghtml code eurobsdcon offered special svn tutorial freebsd developer many participant nobody freebsd developer clear lack interest kind communication tutorial nt go planned interesting conversation happened still find tutorial one bad merges discussed believe http nt knew tutorial thanks taking time analysis sharing understood correctly vendor import file renames addition svn mv vendor tree quick question semiautomated way developer also handle merge conflict differently development trunk replaying merges svn revert old file restore file merge state svn rm new file remove new file preparation actual merge svn mv old file new file move old file new location svn merge accept postpone vendor old file vendor commit vendor new file vendor commit new file svn propdel svn mergeinfo new file need similar change merging stable perhaps looked specific example nt know widely generalized competent developer able decide goal writing tutorial encourage experimentation solution go beyond running svn merge hoping best requires understanding subversion beyond freebsd handbook provide given high standard freebsd set developer matter nt see problem understanding correctly benefit new file get change history line development trunk instead continue vendor history also avoided missing change happen development trunk vendor area development trunk yes seems natural linear history trunk people vendor import deal vendor branch people never see svn log output go one problem solution merge like indeed need scripted subversion unable match path lot command need run unfortunate improve time subversion another huge step forward however think using scripting perform complex merges healthy attitude nice tool developer using merge nt work automatically try script merge run automatically starting clean working copy trial error find best path forward given situation happy run final script svn commit command appended end release soon encourage try tutorial version let u know think cheer stefan received cest
475,Lobsters,vcs,Git & VCS,Simple and efficient way to delete remote merged branches from git repository.,https://github.com/hyperia-sk/remote-branch-housekeeping,simple efficient way delete remote merged branch git repository,git remote branch housekeeping usage parameter installation unix like o o x homebrew window cygwin system requirement dependence contribution code review tip good pull request formatting markdown syntax test licensing license,git remote branch housekeeping git remotebranchhousekeeping simple efficient way delete remote merged nomerged branch git repository usage git remotebranchhousekeeping remotebranchhousekeeping parameter remotebranchhousekeeping f r b n number day number defines day default b master branch master branch name default master r origin remote origin remote name default origin n nomerged delete branch merged f force nt ask confirm delete branch installation git clone http githubcomhyperiaskremotebranchhousekeepinggit cd remotebranchhousekeeping open cloned directory run unix like o uninstalling updatereinstall o x homebrew todo window cygwin c cygwinbinbash installersh uninstalling c cygwinbinbash uninstallersh system requirement unix like o proper shell tool use git perl grep sort sed head wc xargs date dependence contribution want contribute great first read page code review submission including submission project member require review use github pull request purpose tip good pull request use code doubt try stay true existing code project write descriptive commit message problem solving consequence test good tip pr consists multiple commits successive improvement fix first commit consider squashing single commit git rebase pr single commit top current head make reviewing code much easier history readable formatting documentation written using standard markdown syntax please submit change using syntax test licensing mit see license full license text
476,Lobsters,vcs,Git & VCS,Emacs and Magit,https://lwn.net/Articles/727550/,emacs magit,subscribing lwn magit look magit melpa directly github kill ring smerge ediff including magit emacs expressed wish long list developer said limited saying response announced log,benefit lwn subscribersthe primary benefit subscribing lwn helping keep u publishing beyond subscriber get immediate access site content access number extra site feature please sign today jonathan corbetjuly git sourcecode management system widely known flexibility distributed development model support reputation ease use le well established thus opening frontend system make git easier use one comprehensive git front end magit work within emacs editor wide following magit run turbulence within emacs development community blocking wider distribution look magit magit emacslisp elisp program available melpa package archive directly github web site directly address pronunciation usage found suggests sound like magic maggot probably good thing magit installed user system hooked emacs magitstatus command bring window emacs terminology pane within window many others primary control mechanism show information available git status command used directly look uncommitted change found within repository tab key used expand hide various subsection window many git operation keystroke two away one window position changed file hit stage change u unstage individual hunk also staged unstaged desired typing c brings commit option another c bring window commit message cc finalize commit p command used push another repository course set option examining commit stream many produce asciiart version merge history shown tool like gitk many common git logging option limiting specific author searching given string available log display enhanced diffstat information actual patch content magit work reflog well regular commit stream blame mode another useful way examine file history first started annotate source file set header indicating commit added line along author date subjectline info actual commits keystroke away running magitblame recursively go version file prior line point added commit interest found mw put appropriate hash kill ring easy access later naturally support merging use either smerge ediff latter editor opinion one nicer emacs feature general ediff also invoked examine difference two revision file support rebasing including handy command quickly editing commit history rebasing branch top result simple task like example adding ackedby commit magit far easier quicker using git rebase directly common git operation managing remote branching tagging cherrypicking stashing generating pull request etc supported special mode bisecting goodorbad test scripted entire bisection process run automatically magit told appear comprehensive interface git functionality needed user whether one see magit better way use git depend naturally one attitude toward emacsbased interface general keyboardbased course befits text editor pulldown menu emacs running within window user probably nt invoke often vast number operation option provided go well beyond user expected remember expected since git like get around problem magit us series popups displaying available keystroke experience somewhat similar working wordstar word processor oldtimer complaint made system even highly modal interface sits well git command put strange error message unusual occurrence git magit tends throw hand say go look buffer error message operation take long time measured minute logging command editor tried visual indication magit working progress making lot seemingly irrelevant message reverted buffer show message line operation proceeding perfect seamless interface mean including magit emacs emacs editor ship wide array addon package magit one topic recent discussion emacs development list dismay participant richard stallman expressed wish someone would write package comparable magit could included emacs would seem like strange wish magit appears best emacs interface git providing functionality lot emacs user wish licensed large package active development community something could quickly replaced anything resembling current level functionality stallman calling project compete established free emacs package answer course magit contains work long list developer quite filed paperwork assigning copyright free software foundation fsf still insists paperwork refusing case take software claim ownership sort discussion come occasionally emacs list result every time case john yates said magit could emerge one ohsoelusive creature true killer app emacs platform added sometimes community might important copyright assignment asked stallman reconsider stefan monnier seen many discussion limited saying want distribute something like magit emacs need write replacement simply include magit since license allows u hurdle one emacs maintainer put stallman however known swayed argument response case made clear going change position either significant contributor magit must sign paper fsf code holdout replaced entirely new emacs interface git must written phillip lord announced make attempt get paper magit order time tell succeed either way though lot work expended either enable distribution software already distributable try replace equivalent functionality hard see win emacs user developer would appear winning strategy emacs general log post comment
477,Lobsters,vcs,Git & VCS,Open Source Templates - a Choose your own adventure book,https://www.talater.com/open-source-templates/,open source template choose adventure book,open source template curious case issue pull request template chapter overflowing mailbox bottomless pit turn page turn back page angel demon two side every schwartz unexpected guest issuetemplatemd turn around epilogue issuetemplatemd star turn around lookingglass house turn page turn back page people issue driven perfection contributing file old friend pullrequesttemplatemd back started epilogue star turn back page,open source template curious case issue pull request template tal ater chapter overflowing mailbox standing open field west white house house carefully constructed masterpiece solid foundation beautiful facade matched elegant interior around back house see long line people holding little white envelope seem eager help house two mailbox first mailbox simply labeled issue nt enough deal think second mysteriously labeled pull request overflowing page bottomless pit take deep breath open box labeled issue size box interior surprise look suddenly gripped feeling box bottom stare seemingly bottomless pit box begin feel chill running spine endless box issue staring right back soul judgy rolling sleeve decide take charge issue box turn page fear overtakes close box high pitched yelp turn back page page angel demon reach box begin realize strange order madness start notice pattern issue take form bug report grey festering blob infinite malevolence others manifest great ethereal ball living energy form idea whispering half truth promised feature improvement change furrow brow consider whether concentrate one type issue page two side every schwartz pull head issue mailbox startled voice coming behind standing tree arm round neck know moment one embroidered collar sure sorry whatever mean two side every schwartz say first front back end add brother page unexpected guest brother nod understanding give knowing look disappear thin air say voice tree startling look see cat grinning ear ear sensing alarm cat grin somehow widens even notice long claw great many teeth would tell please way ought go ask depends good deal want get say cat either end road beginning journey feel complete feel ready download issuetemplatemd something feel wrong turn around face mailbox page epilogue journey complete prize awaits ready return hub issuetemplatemd place file repository root directory github directory copy content issuetemplatemd file place repository decide star github maybe say one particular feel ready turn around start page lookingglass house peer mailbox see confused looking person standing open field east white house startled raise right hand mouth stifling scream stumble back time see person mailbox stumble back raise left hand regain composure feeling bit silly startled looking glass approach mailbox attend say person visible mailbox tell lookingglass house first house see house thing go way bizarre person looking glass intrigue decide continue conversation turn page world spin around much deal shut mailbox turn back page page people issue looking mailbox notice line people coming around house carrying two envelope watch pas issue mailbox place one envelope proceed pull request mailbox second accept pull request matter discussed thoroughly issue explains person mailbox page driven perfection two stare looking glass looking closer mirrored companion begin notice exhaustion face face person testing every single pull request manually ok ask looking glass friend sigh lower gaze test change code ask page contributing file look closely looking glass house begin wonder keep house tidy tree next looking glass house see notice posted hard make word distance manage make big red headline saying page old friend gaze notice tree suddenly notice huge grin hovering among branch tree watch grin widens exposing mouthful sharp teeth startling beyond word squeal terror slam mailbox shut feeling cold sweat running neck slowly turn around look lowest branch tree side looking glass cat slowly fade view beginning grin ending tail getting say cat soon mouth enough speak feel ready download pullrequesttemplatemd file say expect cat confused word grin somehow widens even cat could nt talked could feel faint eye close find slipping away wake hour later back started page epilogue journey complete prize awaits ready return hub copy content pullrequesttemplatemd file placing repository decide star github maybe say one particular decide start turn back page
478,Lobsters,vcs,Git & VCS,Probot - GitHub apps to automate and improve your workflow,https://probot.github.io/,probot github apps automate improve workflow,probot github apps automate improve workflow,probot github apps automate improve workflow use prebuilt apps extend github easily build share
480,Lobsters,vcs,Git & VCS,GitUp — Open Source Interactive GIT Interface,https://github.com/git-up/GitUp,gitup open source interactive git interface,gitup work quickly safely without headache git interface missing life finally arrived top question time live interactive repo graph unlimited undo redo snapshot rollback visual commit splitter unified reflog browser instant search across entire repo ridiculously fast ui swisspol top hacker news featured product hunt daring fireball getting started learn gitup download latest release http gitupco read doc use github issue support feedback http githubcomgitupgitupreleases important alternatively gitupkit gitup built thin layer top reusable generic git toolkit called gitupkit mean use gitupkit framework build git ui objectivegit architecture base layer depends foundation compatible o x io slightly customized fork ui layer depends appkit compatible o x important gitupkit api branch test opening browsing repository modifying repository complete example gitdown gitdown complete example gitdiff gitdiff complete example gity gity gitx complete example igit igit contributing contributingmd credit license gpl license license important,gitup work quickly safely without headache git interface missing life finally arrived git recently celebrated year anniversary engineer still confused intricacy top question time stack overflow git related since git turn even simple action mystifying command git add stage versus git reset head unstage anyone surprise user waste time get frustrated distract rest team help worse screw repo gitup bet invent new git interaction model let engineer level work quickly safely without headache unlike git client way built interacts directly git database disk way work manipulate repository graph instead manipulating commits gitup get truly efficient git client mac live interactive repo graph edit reorder fixup merge unlimited undo redo almost operation even rebases merges time machine like snapshot rollback previous repo state feature even exist natively git like visual commit splitter unified reflog browser instant search across entire repo including diff content ridiculously fast ui often faster command line gitup created swisspol late bet reinvent way developer interact git several month work made available prerelease early reached top hacker news along featured product hunt daring fireball line code later gitup reached midaugust released open source gift developer community getting started learn gitup download latest release http gitupco read doc use github issue support feedback release note available http githubcomgitupgitupreleases build tagged v eg released stable channel build tagged b eg released continuous channel change update channel used gitup app preference build gitup simply run command git clone recursive http githubcomgitupgitupgit terminal open gitupgitupxcodeproj xcode project hit run important apple id developer account code signing mac apps build fail code signing error simply delete code signing identity build setting application target work around issue alternatively developer account create file xcodeconfigurationsdevelopmentteamxcconfig following build setting content developmentteam teamid detailed description look comment end file xcodeconfigurationsbasexcconfig gitupkit gitup built thin layer top reusable generic git toolkit called gitupkit mean use gitupkit framework build git ui gitupkit different goal objectivegit instead offering extensive raw binding gitupkit us minimal subset reimplements everything else top rebase engine instance allows expose tight consistent api completely follows objc convention hide away complexity sometimes inconsistency gitupkit add top number exclusive powerful feature undoredo time machine like snapshot entire dropin ui component architecture gitupkit source code organized independent layer communicating use public apis base layer depends foundation compatible o x io core wrapper around required minimal functionality top implemented git functionality required gitup note gitup us slightly customized fork extension category core class add convenience feature implemented using public apis ui layer depends appkit compatible o x interface lowlevel view class eg gigraphview render gitup map view utility interface utility class eg base view controller class giviewcontroller component reusable singleview view controller eg gidiffcontentsviewcontroller render diff view highlevel reusable multiviews view controller eg giadvancedcommitviewcontroller implement entire gitup advanced commit view important preprocessor constant debug defined nonzero value building gitupkit default building debug configuration number extra consistency check enabled run time well extra logging aware overhead significantly affect performance gitupkit api using gitupkit api pretty straightforward since organized functionality eg repository branch commits interface component etc best effort made name function clearly regarding core apis best way learn peruse associated unit test instance see branch test branch api sample code get started error handling left exercise reader opening browsing repository open repo gcrepository repo gcrepository alloc initwithexistinglocalrepository path error null make sure repo clean assert repo checkclean kgccleancheckoptionignoreuntrackedfiles error null list branch nsarray branch repo listallbranches null nslog branch lookup head gclocalbranch headbranch would nil head detached gccommit headcommit repo lookupheadcurrentcommit headcommit branch headbranch error null nslog headbranch headcommit load entire repo history memory fast access including commits branch tag gchistory history repo loadhistoryusingsorting kgchistorysortingreversechronological error null assert history nslog lu commits total historyallcommitscount nslog n historyrootcommits historyleafcommits modifying repository take snapshot repo gcsnapshot snapshot repo takesnapshot null create new branch check gclocalbranch newbranch repo createlocalbranchfromcommit headcommit withname temp force error null nslog newbranch assert repo checkoutlocalbranch newbranch error null add file index nsdata data writetofile repoworkingdirectorypath stringbyappendingpathcomponent emptydata atomically yes assert repo addfiletoindex emptydata error null check index status gcdiff diff repo diffrepositoryindexwithhead nil error null assert diffdeltascount nslog diff create commit gccommit newcommit repo createcommitfromheadwithmessage added file error null assert newcommit nslog newcommit restore repo saved snapshot topic branch commit created bool success repo restoresnapshot snapshot withoptions kgcsnapshotoptionincludeall reflogmessage rolled back didupdatereferences null error null assert success make sure topic branch gone assert repo findlocalbranchwithname temp error null nil update workdir index match head assert repo resettohead kgcresetmodehard error null complete example gitdown gitdown basic app prompt user repo display interactive liveupdating list stash line code appdelegate applicationdidfinishlaunching gitupkit basic app also get free unlimited undoredo unified sidebyside diffs text selection copy keyboard shortcut etc source code also demonstrates use gitupkit view controller well building customized one complete example gitdiff gitdiff demonstrates create view controller display live updating diff head workdir à la git diff head complete example gity gity gitx clone built using gitupkit le line code complete example igit igit test io app simply us gitupkit clone github repo perform commit contributing see contributingmd credit also big thanks fine contributor without gitup would never existed license gitup copyright pierreolivier latour available gpl license see license file project information important gitup includes opensource project project remain license
481,Lobsters,vcs,Git & VCS,"Monorepo First, Submodules Later",http://blog.felipe.rs/2017/07/11/monorepo-first-submodules-later/,monorepo first submodules later,github,starting new sideproject always wonder part codebase shared opensource project library extracted project might interest developer nice good stuff github profile possibility may compel spend lot time thinking repository structure may create git submodule every library exist yet might useful project people want lose git history code trying predict shareable anything done almost impossible starting project try minimum amount metawork possible solution problem require much upfront planning introduce firstparty git submodule beginning make sure thing cleanly separated directory get started hamt clone operator hamt add destructor hamt hamt start passing entry around instead key value hamt move bitmattrie node hamt class hamt start making look like std unorderedmap hamt use keyequal compare key hamt little pedantic tweak hamt get rid fancy allocator hamt use std pair hash move allocator hamt class hamt simplify alloc size calculation logic hamt collect fibonacci statistic correctly hamt make insert return entry node pointer hamt rename thing hamt make stuff private hamt super wasteful allocation hamt fibonacci allocation free list hamt basic implementation chronos fix lint error chronoscpp sqlite fix lint error chronos fix indentation chronos use tuple query using sqlite wrapper chronos add project database ui chronos prototype user project left sidebar sqlite initial commit sqlite wrapper foc smallvector llvm test cpplintpy chronos sqlite database schema sqlite sqlite amalgamation source file copy chronos add googletest submodule add imgui submodule initial commit gitignore may notice directory cool data structure want extract publish library create new repository contains directory commits touch using git filterbranch project mine start made copy repository new directory called foclibraries code l chronos cmakeliststxt chronos cpplintpy foc sqlitewrapper vendor code cp r chronos foclibraries new repository repository library based foc chronos use git filterbranch master filter anything original foc directory codefoclibraries master git filterbranch pruneempty subdirectoryfilter foc master rewrite ref refsheadsmaster rewritten git filterbranch removed commits related foc directory foclibraries repository contains file original foc directory chronos codefoclibraries master git lsfiles allocatorh arrayrefh hasharraymappedtrieh hasharraymappedtrietestcpp hasharraymappedtrietesthelpersh noneh smallvectorh smallvectortestcpp supporth commit log foclibraries commit related original application hamt move bitmattrie node hamt class hamt start making look like std unorderedmap hamt use keyequal compare key hamt little pedantic tweak hamt get rid fancy allocator hamt use std pair hash move allocator hamt class hamt simplify alloc size calculation logic hamt collect fibonacci statistic correctly hamt make insert return entry node pointer hamt rename thing hamt make stuff private hamt super wasteful allocation hamt fibonacci allocation free list hamt basic implementation foc smallvector llvm test upload foclibraries github codefoclibraries master git remote add origin git githubcom philixfoclibrariesgit codefoclibraries master git push u origin master counting object done delta compression using thread compressing object done writing object kib byte done total delta reused delta remote resolving delta done git githubcom philixfoclibrariesgit new branch master master branch master set track remote branch master origin publishing foclibraries repository go back chronos replace foc directory git submodule remove foc codechronos master git rm r foc rm focallocatorh rm focarrayrefh rm fochasharraymappedtrieh rm fochasharraymappedtrietestcpp rm fochasharraymappedtrietesthelpersh rm focnoneh rm focsmallvectorh rm focsmallvectortestcpp rm focsupporth add submodule codechronos master git submodule add http githubcomphilixfoclibrariesgit foc cloning foc remote counting object done remote compressing object done remote total delta reused delta packreused receiving object kib byte done resolving delta done checking connectivity done review codechronos master git status branch master branch originmaster diverged different commit respectively use git pull merge remote branch change committed use git reset head file unstage modified gitmodules new file foc deleted focallocatorh deleted focarrayrefh deleted fochasharraymappedtrieh deleted fochasharraymappedtrietestcpp deleted fochasharraymappedtrietesthelpersh deleted focnoneh deleted focsmallvectorh deleted focsmallvectortestcpp deleted focsupporth commit codechronos master git commit extract foc git submodule master extract foc git submodule file changed insertion deletion create mode foc delete mode focallocatorh delete mode focarrayrefh delete mode fochasharraymappedtrieh delete mode fochasharraymappedtrietestcpp delete mode fochasharraymappedtrietesthelpersh delete mode focnoneh delete mode focsmallvectorh delete mode focsmallvectortestcpp delete mode focsupporth adaptation might needed repository pretty much happy gitting
482,Lobsters,vcs,Git & VCS,Next-Generation Subversion — unveiled,https://medium.com/@jacek_39594/next-generation-subversion-unveiled-7c61e8b71797,nextgeneration subversion unveiled,nextgeneration subversion unveiled julian foad work locally without server design google julian foad svn committer assembla svn engineer assembla julian foad julian foad mailing list,nextgeneration subversion unveiledlast week subversion team launched minor version address security performance via great boost user base confidence subversion look future continued commitment build mission critical enterprise project subversioni say paramount community continue show momentum increased innovation subversion project largest enterprise world rely version control valuable critical data continued innovation technology ensures data remain cemented subversion year comethat said real excitement today future hold subversion project today part ongoing innovation happening subversion community one developer julian foad revealed working week plan address one long standing issue plaguing subversion user decade work locally without serverdistributed version control dvcs technology enabled developer take advantage rapid workflow ability locally branch locally stash work inprogress without ever talk server widely accepted great productivity multitasking boonnow subversion get productivity modern workflow design proposal shelving checkpointing revealed julian detailed design google doc format footer email subversion system choice million development bring subversion user speed advantage local operation git popularized julian foad svn committer assembla svn engineer new design likely prompt release follow beta overall excited subversion user assembla excited helping move needle taking subversion going nextgen enterprise around world able take advantage nonlinear increase productivity across developer base release go public assembla vision cloud connected subversion platform inspiring delighted working assembla opensource community deliver longawaited feature julian foadmoreover set subversion continue innovate long past version across strategic areasi truly hope inspires new user developer enter subversion community interested driving innovation forward ultimately increasing size maintainer list working assembla next generation subversion creating renewed excitement subversion project julian foadthe community need talented motivated people want make subversion better better join jump onto mailing list get started
483,Lobsters,vcs,Git & VCS,Two Commits That Wrecked the User Experience of Git,https://redfin.engineering/two-commits-that-wrecked-the-user-experience-of-git-f0075b77eab1,two commits wrecked user experience git,two commits wrecked user experience git git obnoxious two commits set terrible unfixable precedent http git checkout many thing unix philosophy always like october gitcheckout revert specific path either index given treeish aside git started performing destructive action without warning et tu option added documented couple week later might done thing question git mailing list jeremy allison interview junio hamano back still hope easygit easygit discussion hacker news discussion reddit,two commits wrecked user experience gitgit obnoxious two commits set terrible unfixable precedentdan fabulich principal engineer redfin hiring git take time learnsome challenge learning git inherent distributed version control system lot git stage feature also known index cache people hate lot people really likebut scar git user experience selfinflicted today specifically want call attention two commits lead maintainer git left deepest scarsimage credit http checkout many thingsthe synopsis section git checkout man page list six distinct form commandgitcheckout switch branch restore working tree file synopsis git checkout q f branch git checkout q f detach branch git checkout q f detach commit git checkout q f bb orphan newbranch startpoint git checkout f theirsm conflict style treeish path git checkout p patch treeish path first rule doug mcilroy unix philosophy say make program one thing well new job build afresh rather complicate old program adding new feature git checkout followed philosophy closelyin fairness first four form git checkout kinda thing switch branch moving head ref either branch detached head commit also option create branch switching finebut huge difference form git checkout accept path nt even worse specify path major difference behavior depending whether actually supply treeish note oneline description git checkout need use switch branch restore working tree file one command two different thing always like thisoctober gitcheckout revert specific path either index given treeishprior commit git checkout switched branch could optionally pas b create branch switching nice tightly scoped command also another tightly scoped command checkoutindex could use copy file index aka stagecache working treebut commit git maintainer gave git checkout new feature perhaps two three new feature depending point viewhere commit git checkout learned accept path would copy file stage exactly like checkoutindex since checkoutindex already existed point like think nobody would bothered implement commandbut commit also taught git checkout truly new feature could pas path treeish allowing copy file branch commit directly working tree without switching branchesthis git started overload checkout git already separate command checkoutindex argue would appropriate create another new command new behavior would called checkouttreeso git checkout commit really three feature give name sake discussion checkoutbranch switch branchescheckoutindex copy file stage working treecheckouttree copy file treeish working treenote commit combined three mode one command checkout necessitated using disambiguate parameter git checkout x want switch branch named x copy file named x stage working tree git checkout x also ambiguous bothx path copied stage x treeish path git checkout x switch branch xgit checkout x copy x stage working treegit checkout x copy file x stage working tree git checkout x copy file branch x working tree git checkout x illegalif instead checkouttree separate command would required first argument would treeish remaining argument would pathsbut wait checkouttree another hidden feature modifies path stage well working tree note git reset nt yet accept path unstage individual changed file unstage anything unstage everything since checkouttree modify path stage could use git checkout head myfile discard myfile change working tree stagethe problem mode git checkout look similar learning git challenging remember difference git checkout mybranch git checkout myfile git checkout head myfile last command clobber stage nt look like look almost identical checkoutindex command keepindex argument git checkoutwhen learning git remember stuffaside git started performing destructive action without warningtoday git reputation tool era working tree without warning use wrong command like unix people say rm nt warn either point checkoutbranch mode checkout always really careful even back git detected switching branch would overwrite local change working tree index would halt useful errorerror local change following file would overwritten checkout myfileplease commit change stash switch branchesabortingeven git checkoutindex would refuse thing intended copying file index onto working tree unless passed f parameter force git reset required extra hard parameter clobber working treegit reputation tough love started commit checkoutindex mode checkouttree mode checkout perform destructive behavior working tree without warning f misuse way recover lost uncommitted worket tu git reset checkouttree way unstage individual file index dec path option added git reset documented couple week later dec mixed tree path sometimes asked list revert selected path inthe index tree often head without affecting thefiles working tree similar operation alsoaffects working tree file available form git checkout tree path definition soft would never affect either index theworking tree file hard way make workingtree file close pristine new option availableonly default mixed casethis genuinely useful new feature great became possible unstage file without clobbering working treebut commit overloaded another command reset already welldefined function move branch ref specified commit rewriting branch history optional side effect clobber stage working tree match beginning reset command intended history rewriting done great careagain git following unix philosophy unstaging file would new command perhaps git unadd people call cacheindex stage perhaps would git unstage even used jargony name like resetindex would still improvement today overloaded commandreset path everyday activity run git help argument find reset list everyday command make sense reset unstage command accidentally pas reset branch name surprise going start rewriting history branch might done thingwhy git maintainer junio hamano decide combine wildly divergent mode one command twice well posted question git mailing list ask git mailing list noisy doubt anybody ever answer question least hamano speculate hamano probably would made mistakefor worth jeremy allison interview junio hamano back explaining git hard usehamano probably come two reason one designed flexible use way want give guidance good guidance one true way using git system young one one thinganother thing system really designed grew organically somebody came idea one thing oh good idea good feature let add command option name option name chooses get stuck month somebody else notice oh similar mode operation existing command named differently kind thing happens timeallison person wrote even know command probablyhamano yeahnobody really took time design git user experience simplicity implementation probably significant reason given design choice read diff two commits called post think see implementation pretty straightforward new featuresbut suspect another reason git maintainer may wanted combine feature one commandif run git help see message describing available git command usrlibgitcore wherever installed git open directory find lot filesfor number year installed git get every one file path could type git checkout git would look gitcheckout path run fact feature still exists today create executable script path called githello type git hello run script want cook gitcheckouttree script drop path git run fun surmise subtle pressure avoid creating new command command new script cluttering path git command path deal crap hamano say damage done undone two reasonsremoving feature like would break backwards compatibilitygit many way thing git checkout head git reset hard creating new better command would make problem worsesadly commits set tone rest git development packing new feature old command aok since every major feature git grown zillion variation mutually incompatible commandline argument normal thing add new feature existing command thanks two commits traditionthat way always done itthere still hope easygiteasygit eg singlefile wrapper git designed make git easy learn use redfin train new developer use internal fork eg make quicker easier get started productive using gitwith easygit run eg switch switch branch eg switch us git checkout hood never clobber local modified file use eg stage eg unstage manage file stage eg unstage us git reset never rewrite history clobber working tree want discard local modification use eg reverteasygit many usability feature set training wheel git many way better raw git dream one day git adopt concept easygit weird dream sometimes discussion hacker newsdiscussion redditps redfin hiring
484,Lobsters,vcs,Git & VCS,Apache Subversion is unable to store SHA1 collisions,http://subversion.apache.org/security/sha1-advisory.txt,apache subversion unable store collision,,apache subversion unable store collision summary subversion repository default configuration incorrectly store file checksum another file known affected server running apache subversion including known fixed server running apache subversion repsharing enabled server running apache subversion repsharing enabled upgrading server repsharing enabled file dbfsfsconf fsfs repository repsharing enabled default need edit dbfsfsconf unless enablerepsharing option dbfsfsconf explicitly set false repsharing disabled repository server version store collision however standard svn client able handle recommended setup run repsharing enabled client receive patch issue bdb repository affected bdb format deprecated detail february group researcher released two pdf file different content produce checksum first publicly known collision file committed fsfs fsx repository content deduplicated based checksum content one file end stored repository commit succeeds subsequent update commits abort checksum error since two file different checksum deduplication take place representation sharing enabled representation sharing enabled default may disabled fsfsconf file recommendation recommend server installation upgrade enable repsharing subversion reject commits create collision detecting collision requires representation sharing enabled disabled representation sharing setting enablerepsharing false file dbfsfsconf repository directory recommend set option true upgrading stopgap measure user unable upgrade immediately following hook script may used currently unix version available http http repsharing disabled fix ineffective collision stored cause problem repository however svn client retrieve store content working copy run similar problem deduplication content stored working copy also relies performance reason client using http protocol avoid fetching content checksum fetched previously therefore storing content collision supported use case content need versioned reason consider packing file compressed archive commit archive instead content accidentally committed repsharing disabled one following remedy may used one solution delete second file resolve problem normal svn client usage work tool like svnsync gitsvn try replay every revision repository tool run error revision content committed tool able proceed second solution would remove problematic revision svnadmin svnadmin dump used dump repository revision introduced problem dump file loaded new repository commits problematic revision dump load subsequent revision well another option create subversion permission rule authz block access one file work tool like svnsync gitsvn server send colliding content example authz rule block access file could look like authz rule place svnsync used create mirror repository without collision remember change mirror uuid svnadmin setuuid populating history another way create mirror dumpload cycle using svndumpfilter exclude delete one file collision reference svn issue http collision http shatteredio first known occurrence http bugswebkitorgshowbugcgi http reported holm webkit project http webkitorg bryan rosander
485,Lobsters,vcs,Git & VCS,We’ll Never Know Whether Monorepos Are Better,https://redfin.engineering/well-never-know-whether-monorepos-are-better-2c08ab9324c0,never know whether monorepos better,never know whether monorepos better even switching side tell side better http monorepo actually better multirepo biggest surprise yet come way measure productivity software discussion hacker news discussion reddit,never know whether monorepos bettereven switching side tell side betterdan fabulich principal engineer redfin hiring year ago first job software industry ran company single monolithic code repository monorepo small dedicated group engineer company believed team grew would need move away monorepo multirepo model splitting code smaller project would repository produce released version etc dependent project consumehttps org seemed express strong opinion subset engineer opposed change reactionary believed monorepo actually better multirepo imagined benefit multirepo overstated unmeasurable disadvantage multirepo wildly underestimatedi recall sitting contentious meeting surprised time hard either side convince feeling religious argument rather technical argumentthe biggest surprise yet comethe multirepo camp argument convert monorepo multirepo code base consisted multiple compiled language able use standard opensource dependency management tool intended use one particular language eg java perl c rolled ownrolling dependencymanagement tooling took small team engineer including year hard work problem month build day time eventually put fire company got back workabout six month project declared done always improvement make homegrown dependency management solution retrospective meeting engineer taken side project assembled discus wentone main opponent went first thank goodness finally retrospective said think see experiment colossal failure time u change course roll back monorepo mean one main multirepo advocate replied one best decision ever made really shocked access data could possibly want evaluate decision engineer working codebase seen like monorepo model multirepo model knew exactly much actually cost switch lived advantage disadvantage model still come agreement even opinion group mostly remained unchanged people switched opinion one side people side switched opinion movement retrospective taught humble ambition improve engineering productivity way measure productivity software way know whether controversial expensive productivity enhancing project actually deliver promise even hindsighttoday asking whether work widereaching infrastructure project ask change obviously improvement think right get supermajority engineering team agree iti work platform team redfin team dedicated supporting rest engineering team ton demand service zillion project could work guaranteed pay entire team backlog like afford dedicate attention project everyone love deprioritize project finished arguing yetdiscussion hacker newsdiscussion redditps redfin hiring
486,Lobsters,vcs,Git & VCS,Git quick statistics is a simple and efficient way to access various statistics in git repository.,https://github.com/arzzen/git-quick-stats,git quick statistic simple efficient way access various statistic git repository,git quick statistic linus torvalds table content screenshots usage installation system requirement faq contribution test licensing contributor screenshots usage interactive noninteractive commandline argument git log since git log limit git log option git log option git pathspec pathspec git merge view strategy color theme installation debian ubuntu unix linux macos homebrew window docker docker repository system requirement dependency faq git log submodule contribution code review tip good pull request formatting markdown syntax test licensing license contributor backer become backer sponsor become sponsor,git quick statistic gitquickstats simple efficient way access various statistic git repository git repository may contain ton information commits contributor file extracting information always trivial mostly gadzillion option gadzillion git command think single person alive know probably even linus torvalds table content screenshots usage installation system requirement faq contribution test licensing contributor screenshots usage interactive gitquickstats builtin interactive menu executed noninteractive prefer utilize commandline option gitquickstats also noninteractive mode supporting short long option gitquickstats optionalcommandtoexecutedirectly git quickstats optionalcommandtoexecutedirectly commandline argument possible argument short long form r suggestreviewers show best people contact review code detailedgitstats give detailed list git stats r gitstatsbybranch see detailed list git stats branch commitsperday display list commits per day commitsbymonth display list commits per month w commitsbyweekday display list commits per weekday commitsbyhour display list commits per hour commitsbyauthorbyhour display list commits per hour author commitsperauthor display list commits per author mydailystats see current daily stats c contributor see list everyone contributed repo b branchtree show ascii graph git repo branch history branchesbydate show branch date c changelogs see changelogs l changelogsbyauthor see changelogs author j jsonoutput save git log json formatted file specified area h help display help text terminal git log since set variable gitsince andor gituntil running gitquickstats limit git log work similar git builtin since log option export gitsince export gituntil set run git quickstats normal note affect stats parse git log history unset git log limit set variable gitlimit limited output affect changelogs branch tree option git log option set gitlogoptions git log option export gitlogoptions ignoreallspace ignoreblanklines git pathspec exclude directory stats using pathspec export gitpathspec directory also exclude file stats note work alphanumeric glob regex git respect export gitpathspec packagelockjson git merge view strategy set variable gitmergeview enable merge commits part stats setting gitmergeview enable also choose show merge commits setting gitmergeview exclusive default show merge commits work similar git builtin merges nomerges log option export gitmergeview enable export gitmergeview exclusive color theme change legacy color scheme toggling variable menutheme default legacy export menuthemelegacy installation debian ubuntu least debian bullseye ubuntu focal use apt installation apt install gitquickstats unix linux git clone http githubcomarzzengitquickstatsgit cd gitquickstats sudo make install uninstalling open cloned directory run updatereinstall macos homebrew brew install gitquickstats follow unix linux instruction wish window installing cygwin use script wishing use wsl follow unix linux instruction docker use docker image provided build docker build arzzengitquickstats run interactive menu docker run rm v pwd git arzzengitquickstats docker pull command docker pull arzzengitquickstats docker repository system requirement o bash shell tool use awk basename cat column echo git grep head seq sort tput tr uniq wc dependency faq q get error run gitquickstats cygwin like usrlocalbingitquickstats line r command found run app cygwin follows usrlocalbingitquickstats convert script crlf convention microsoft us lf convention unix o x linux use able run normal q could used project many git project statistic would show summary git project want include submodule log try using following export gitlogoptions p submodulelog info git log submodule contribution want contribute great first read page code review submission including submission project member require review use github pull request purpose tip good pull request use code doubt try stay true existing code project write descriptive commit message problem solving consequence test good tip pr consists multiple commits successive improvement fix first commit consider squashing single commit git rebase pr single commit top current head make reviewing code much easier history readable formatting documentation written using standard markdown syntax please submit change using syntax test licensing mit see license full license text contributor project exists thanks people contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor
487,Lobsters,vcs,Git & VCS,Libraries.io Releases Data on Over 25m Open Source Software Repositories,https://medium.com/@BenJam/libraries-io-releases-data-on-over-25m-software-repositories-ab1db665826e,librariesio release data open source software repository,librariesio release data open source software repository nadia eghbal study ford foundation librariesio need assistance project contributor little attention month sustain conference zenodo creative common licence http librariesiodata,librariesio release data open source software repositoriestoday software relies core set free openly licensed component framework system shared digital infrastructure threat overburdened undersupportednadia eghbal road bridge study ford foundation gave u series personal vignette state open source stressed maintainer fractured community financial trouble story read resonated experience concern legitimised amplifiedsomething changefor nearly three year librariesio gathering data complex web interdependency exists open source software published series experiment using harvested metadata highlight project need assistance project contributor little attentionmany project essential making much today software work project need help problem already attracting attention community shown month sustain conference san franciscotoday librariesio releasing data two million unique infrastructuretype project permissive licence believe information empower accelerate work seeking solution kickstart conversation lead sustainable economy key open source projectsthe data available raw format zenodo soon publishing structured queryable dataset google bigquery data published creative common licence open permissive licence commits user redistributing work understandingwe updating data regular basis find http librariesiodataas community yet agree way ensure continuing health individual open source project hope another step right direction
488,Lobsters,vcs,Git & VCS,Introducing Epithet - a python tool for managing Github labels,https://www.wordfugue.com/introducing-epithet/,introducing epithet python tool managing github label,june introducing epithet core contributor label epithet beeware ragtag patreon name katie cunningham kenneth love project python opensource git,june introducing epithet many challenge running open source organization one personally felt pain tooling awful github realistically using github point still feel many way like tool designed around idea action going happen one repo may entirely fault github git tightly coupled idea anything care particular action going happen one one repository github released organization world rejoiced could map permission team member source repository way mapped real world every new feature github add organization product cause rejoicing many team work across multiple repos tooling around multiple repos still awful awfulness tooling probably strong factor current trend towards code organization another post equivalent core contributor half dozen github organization noticed one area tooling especially lacking around label seen label used designate team individual ownership indicate status pull request signal certain issue friendly beginner even used deploy target chunk code fair say label form core tool infrastructure every team seen using github yet tooling github expose label painfully lacking could go goal necessarily make github feel bad hope working better label tooling want idea boy willing give one labelspecific wall kept banging head label consistency across repos organization read feel remembered pain feel pain might idea talking explain bit say want add label repos open source organization new contributor find issue start right github would need go every repo click issue page click label tab manually create label tool easily creating updating label across repos organization introducing epithet pythonbased command line tool managing label across organization give github key organization label name make sure label exists across repos org give color make color label consistent across repos well decided done particular label epithet delete repos using github enterprise epithet support epithet exists fill particular need open closed source github organization still pretty alpha use beeware project might used soon syncing label ragtag organization start using today checking sadly small documentation feature missing like see happy work getting pr submitted managing open source organization hard hope epithet make little bit easier wordfugue independent never run traditional ad like consider donating patreon buy book affiliate store week reading patrick name special thanks katie cunningham kenneth love reviewing post project python opensource git previous post save pythonkind python best technical community seen close best community seen scale programming length next post finding tribe join djangocon programmer attend technical conference variation said often
491,Lobsters,vcs,Git & VCS,Little Things I Like to Do with Git,https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/,little thing like git,little thing like git leaderboards praise people hide whitespace noise show changed word instead whole line see branch recently worked see everyone getting remind today work generate changelog check change pull review push view complex log tim leaderboards praise people hide whitespace noise show changed word instead whole line see branch recently worked see everyone getting remind today work generate changelog nb nb check change pull nb review push nb view complex log github issue help buy coffee,may little thing like git written harry robert cs wizardry table content leaderboards praise people hide whitespace noise show changed word instead whole line see branch recently worked see everyone getting remind today work generate changelog check change pull review push view complex log chatting tim day much love powerful elegant tool one use often thought would note useful little git snippet use frequently leaderboards whether think gamification competitiveness work good bad thing different discussion different time interested seeing committed much project shortlog give u answer git shortlog sn nomerges harry robert samantha peter tom smith shortlog give u summary git log flag suppress commit description provide commit count summary n flag sort output according number commits per author instead author alphabetic order flag log branch nomerges ensures merge commits counted show commits lifetime project want see much people done specified timeframe use since flag git shortlog sn week week harry robert samantha peter aliased git stats praise people git useful blame feature allows u check developer responsible changing particular piece code see last changed line button cs git blame componentsbuttonsscss issue wording pretty loaded implies developer looking something wrong might always may done something particularly clever impressive might want find ask whoa seen feature wonder taking lead svn alias praise onto blame use either depending context git config global aliaspraise blame mean find implemented resource hint buy coffee git praise includesheadhtml small change pretty nice hide whitespace noise diff show object lot whitespace change left looking lot visual noise make hard see anything important thankfully removing noise pretty trivial using w flag used alongside git diff git show example color colorlinks hover color colorlinkshover hover color colorlinkshover textdecoration underline color colorlinks hover color colorlinkshover textdecoration underline easy see meaningful change addition textdecoration underline rest diff somewhat misleading noise show changed word instead whole line editing prose opposed code often much useful see changed word rather whole changed line particularly helpful writing markdown like right thankfully show change word using worddiff flag running diff without worddiff flag show quite large difference friend tom recently gave excellent talk good friend tom gave excellent talk rerunning diff worddiff enabled give u much digestible helpful overview good friend tom recently gave excellent talk note changed text highlighted within see branch recently worked uncommon jump lot different branch given project keeping track pretty tricky get git help u work git foreachref sortcommitterdate refsheads format refname short show u last branch worked sorted time last working show u local branch refsheads much nicer format bit verbose commit memory aliased git recent see everyone getting team useful get general idea everyone getting across branch git make really easy u git log oneline nomerges give u simplified log everybody work across branch nomerges also limit number commits return complementing command since git log since week oneline nomerges see everyone last two week since start sprint example aliased git overview remind move back onto old project come back office prolonged break sure last thing worked happens ask git give u quick recap work project quite easily git log oneline nomerges author email address really really similar limiting log commits also augment since limit aliased git recap today work discus developer productivity measured frequently find useful mandatory even let client know given day rather keeping detailed list task completed ask git pull information git log nomerges oneline author email address log branch showing work specified author done since midnight day nomerges present simplified oneline overview aliased git today generate changelog writing changelog little tedious look work done since last release pull useful bit thankfully use git give u head start git log oneline nomerges last tag head nb head optional omit ie nomerges last tag head implied save couple keystroke create simplified log showing commits excluding merge commits took place last release head example git log oneline nomerges ref bump version ref add auto width class ref tidy readmemd ref rename supercell main mixin tell since last release current state project head done bit work quite nice basis changelog nb limited tag use commit hash check change pull worked project little might want check happened upstream pull change local branch git log oneline nomerges head remote branch nb head optional omitting leave implied example let see someone particular feature branch whilst holiday git checkout featurefonts git fetch git log oneline nomerges originfeaturefonts aliased git upstream review push hopefully commit push often whatever find large amount local commits yet pushed probably wise quickly review order effectively inverting previous command git log oneline nomerges remote branch head example git fetch git log oneline nomerges originfeaturefonts head nb head optional omitting leave implied log commits remote branch need resembles head aliased git local view complex log pretty much every example us simplified log want get quick idea going forensic detail use graph log extra option git log graph decorate stat dateiso give graphbased log branch showing commit stats addition deletion decorate give information branch commit made applicable also get much stricter date format aliased git graph sure got load tip trick share post github issue help buy coffee
492,Lobsters,vcs,Git & VCS,Git-configured email SaaS developermail.io now available without invites,https://twitter.com/devmailio/status/867031536029368322,gitconfigured email saas developermailio available without invite,,detected javascript disabled browser would like proceed legacy twitter yes
493,Lobsters,vcs,Git & VCS,Git Koans,http://stevelosh.com/blog/2013/04/git-koans/,git koan,vim koan silence one thing well god hobgoblin long short,posted april vim koan silenceone thing wellonly godsthe hobgoblinthe long short python programmer handed gitconfig master git among many line following alias explicit better implicit want merge pull pull ffonly master git nodded git pull origin master said programmer master git pulled latest change master automatically merged programmer change master git say fastforward configuration cried master git looked nodded said nothing warn problem configuration asked master git replied problem month later programmer reading git help config different reason found enlightenment unix programmer working cubicle farm saw master git traveling path ran meet honor meet master git said studying unix way designing program one thing well surely learn much surely replied master git change different branch asked programmer use git checkout create branch use git checkout update content single file working directory without involving branch use git checkout third answer programmer enlightened great historian trying unravel intricacy incorrect merge happened many month ago made pilgrimage master git ask help master git said historian nature history history immutable rewrite later tamper fabric existence historian nodded asked rebasing commits pushed discouraged indeed said master git splendid exclaimed historian historical record merge commit two parent find branch parent originally made history ephemeral replied master git knowledge seek answered god historian hung head enlightenment crushed upon novice learning foot master git end lesson looked note said master question may ask master git nodded view list tag git tag replied master git view list remote git remote v replied master git view list branch git branch replied master git view current branch git revparse abbrevref head replied master git delete remote git remote rm replied master git delete branch git branch replied master git novice thought moment asked surely could made consistent easier remember heat coding master git snapped finger hobgoblin entered room ate novice alive afterlife novice enlightened master git novice walking along bridge novice wanting partake master git vast knowledge said git branch help master git sat lectured seven form git branch many option resumed walking minute later encountered experienced developer traveling opposite direction bowed master git said git branch h master git tersely informed common git branch option developer thanked continued way master said novice nature long short option command thought equivalent developer used h said something different said help perspective everything answered master novice puzzled decided experiment said git h branch master git turned threw railing falling death rock upon seeing novice enlightened
494,Lobsters,vcs,Git & VCS,"Merging, patches, and pijul",https://jneem.github.io/pijul/,merging patch pijul,last post pijul basic dealing conflict conflict cockroach case study reverting old commit little warning set patch reordering antiquing patch case study parallel development conclusion acknowledgement,last post talked mathematical framework version control system vcs without merge conflict post explore pijul vcs based similar system note pijul heavy development post based development snapshot almost called git snapshot mistake might date time read main goal post describe pijul handle vcses call conflict see example pijul approach work better git discus basic want write full pijul tutorial need mention basic command hope understanding rest post fortunately pijul command pretty close analogue vcses pijul init creates pijul repository much like git init hg init pijul add tell pijul start tracking file much like git add hg add pijul record look change working directory record patch change similar git commit hg commit unlike two much like darcs record pijul record asks million question anything probably want use option stop pijul fork creates new branch like git branch unlike git branch creates copy current branch pijul fork default creating copy master branch bug apparently pijul apply add patch current branch like git cherrypick pijul pull fetch merges another branch current branch branch could remote branch could also branch local repository dealing conflict explained last post pijul differs vcses merge conflict instead call graggles different file line form directed acyclic graph instead totally ordered list thing graggles really work example opening editor pijul let actually see graggles store graggles internally render file edit example create graggle asking pijul perform following merge pijul command pijul init create initial file record cat todotxt eof todo work eof pijul add todotxt pijul record todo switch new branch add shoe line pijul fork branchmaster shoe sed shoe todotxt pijul record shoe switch third branch add garbage line pijul fork branchmaster garbage sed garbage todotxt pijul record garbage merge shoe change garbage branch pijul pull frombranch shoe first thing notice running command pijul complain conflict intentional known issue anyway run command final merged version todotxt look like little disappointing maybe especially since pijul supposed free u merge conflict look lot like merge conflict point though pijul somehow produce file one operating system editor understand graggle maintains internally output format happens look bit like vcses output need resolve merge conflict stand pijul userfriendly way actually see internal graggles little effort figure secret command rustlog libpijul backenddebug pijul info debug every branch create file named debug branchname describes graphviz dot format graggles contained branch file bit hard read since directly tell actual content line place example todo giant hex string corresponding pijul internal identifier line decode everything need look terminal output pijul command part look like debug libpijul backend dump dumping content debug libpijul backend dump key patch patchid line lineid value value ok debug libpijul backend dump key patch patchid line lineid value value ok todon crossreferencing output content debug branchname reconstruct pijul internal graggles done result exactly conflict since pijul happily work graggles internally could principle ignore conflict work thing probably bad idea several reason starter good tool working graggles presence probably break build unsolicited opinion conflict resolve asap example need remove line record change sed todotxt pijul record resolve back recommendation immediate flattening give example pijul graggletofile rendering lossy two different graggles pijul render way perfectly good representation graggle right loses information one left fact home line fact shop home prescribed order good news long graggle came merging two file pijul rendering lossless mean avoid problem flattening graggles file every merge ie resolving merge conflict immediately like cockroach graggles important ecosystem whole still flatten soon appear case study reverting old commit unfortunately common discover old commit introduced showstopper bug bright side every vcs worth salt way undoing problematic commit without throwing away everything else written since problematic commit predates merge conflict undoing painful illustration pijul brings table look situation pijul conflictavoidance save day least compared git darcs also ok start example merge including manual graggle resolution ask pijul revert shoe patch pijul unrecord patch hashofshoespatch pijul revert result conflict reverting old patch final file exactly expected let try thing git git init create initial file record cat todotxt eof todo work eof git add todotxt git commit todo switch new branch add shoe line git checkout b shoe sed shoe todotxt git commit shoe switch third branch add garbage line git checkout b garbage master sed garbage todotxt git commit garbage merge shoe change garbage branch git merge shoe automerging todotxt conflict content merge conflict todotxt automatic merge failed fix conflict commit result expected conflict resolve edited todotxt manually resolved conflict commit manual resolution git commit merge try revert shoe patch git revert hashofshoespatch error could revert shoe hint resolving conflict mark corrected path hint git add path git rm path hint commit result git commit since git see manual merge resolution handle reverting patch manually resolve conflicting patch applying reverting bore long command listing vcses test tried mercurial git example darcs pijul example little warning pijul unrecord best present roughly equivalent command sequence pijul git something important know difference pijul unrecord git revert pijul unrecord modifies history repository though unrecorded patch never existed way pijul unrecord bit like selective version git reset probably functionality want especially working public repository pijul actually internal capability something closer git revert ie undo patch keeping history yet useraccessible set patch time come throw around fancy math word first associativity might remember binary operator call associative x z x z x z great thing associative operator never need parenthesis write x z ambiguity associativity automatically extends three thing also ambiguity w x z previous paragraph relevant patch perfect merging associative following sense multiple patch let say three keep diagram manageable unique way perfectly merge together threeway merge written combination twoway merges multiple different way every way write give result let picture three patch one way could merge together first merge patch p q merge patch pm remember patch get applying p diagram qn r another way would first merge q r merge p result yet third way would merge p q merge q r finally merge result merges one give nice symmetric picture great thing mathematical foundation previous post merges produce result mean give final file also result patch meaning everyone always agree line final file came even anything special initial configuration three patch coming single file could start arbitrarily complex history would unambiguous way merge together patch contains sense say current state pijul branch determined set patch contrast existing vcses order patch merged also matter reordering antiquing patch one thing might heard pijul reorder patch ie commutative accurate might also bit confusing paid attention last post patch according definition gave includes input file patch p turn file file b patch q turn file b file c make sense apply p r way around turn pijul nice trick sleeve allows reorder patch long depend explain mean precisely key idea behind reordering patch something call antiquing consider following sequenced patch according defined patch second patch let call garbage patch applied first one shoe patch hand pretty obvious staring garbage patch depend shoe patch particular following parallel patch convey exactly information without dependency know sure convey information take perfect merge diagram get back original sequenced diagram following top path merge example motivates following definition given pair patch p q sequence say q antiqued exists patch q starting perfect merge p q involves q case like forget q entirely since q carry information call antiquing like making q look older really one great thing set patch thing let u easily generalize antiquing pair patch arbitrarily complicated history skip detail idea keep antiquing patch moving back back history fact perfect merges associative implies turn every patch unique antique version set patch leading antique version q called q dependency example pair patch second one antiqued exercise try explain since second patch made antique first patch dependency second one next post come back antiquing specifically question efficiently find antique version patch promised talk reordering patch spend paragraph going antique point associative property perfect merges patch parallel applied order point antiquing make patch parallel possible maximally flexible ordering last bit important worth saying picture patch sequence reordered information represented parallel using antique q much flexible case study parallel development since gone long reordering patch let example showing good let start good news need know antiquing use pijul pijul whenever pijul record patch automatically record antique version patch notice extra flexibility brings simulate toy example common scenario maintaining longrunning branch project active development maybe working large experimental feature occasionally need exchange change master branch finally maybe experimental feature huge success want merge everything back master specifically going following experiment pijul git master branch evolve following sequence private branch begin initial file start applying urgent fix master branch fixed critical bug wait get implementing fancy experimental feature leave long command listing needed implement step pijul git let mention one step cover order apply urgent fix master say pijul change branch master look patch want pijul apply hashofthepatch git course use cherrypick result pijul merging branch master branch give surprise git get conflict something else bit funny git behavior resolve conflict look history two copy urgent fix two different hash since git understand patch reordering like pijul git cherrypick pijul apply work slightly different way pijul apply add another patch set patch git cherrypick actually creates new patch look bit like original git see original patch cherrypicked one two different patch seen creates problem merging line get worse reverting one copy urgent fix try give pretty strange result playing around example get git slightly surprising thing example inserting extra merge right place get conflict go away git heuristic see two different patch thing suppresses conflict pijul hand understood urgent fix could incorporated private branch lossy modification pijul silently antiqued urgent fix divergence master branch branch became irrelevant conclusion hopefully idea pijul actively developed implementation exciting least new way looking patch merges simple fast totally lossless merge algorithm nice property dethrone git certainly yet start still alphaquality heavy development worried data several ui wart well looking toward future see reasonable argument direction arguing pijul future world domination could question relevance example shown often really end tripping git little corner case would time saved pijul improvement actually justify cost switching totally reasonable question know answer optimistic point view pijul effortless merging reordering might really lead new productive workflow old enough remember git new people still svn even cv lot people quite reasonably skeptical care easy branching better merge change immediately anyway care distributed repository central server may well use argument sound silly used dvcses workflow improvement bring took time experimentation develop workflow gain always obvious beforehand could progression happen pijul next post take look pijul innards focussing particularly represents precious data acknowledgement like thank pierreétienne meunier comment correction draft post course error remain responsibility
495,Lobsters,vcs,Git & VCS,Merging with diff3,https://blog.jcoglan.com/2017/05/08/merging-with-diff3/,merging,building git git myers diff algorithm linear space variant operational transformation paper sanjeev khanna keshav kunal benjamin c pierce linear myers diff implementation,enjoy article published book explaining internals git implementation building git course last article investigated git calculates diffs different version file first looking myers diff algorithm linear space variant programmer probably familiar diffs way see changed see whenever run git diff git show command use compare view read pull request diffs human consumption although design strongly influenced human expectation also form ingredient computation git perform common one merging merging happens whenever two concurrent branch modified file want reconcile change single final version say alice bob forked master branch project version file exists call version alice modifies file branch producing version file bob make different change copy producing yet another version alice master bob want merge branch back together reconciling change produce final version master merging process take combine find final version use git might think much process work time expect multiple people change different section file edits incorporated thought suggests something complex going sufficient say something like added something line bob deleted line alice adding something line move line following deleting whatever line applying change would remove content bob intended fact might even delete something alice added problem reveals core problem merging know order apply change apply operation line first meaning something line probably unchanged whereas perform insertion first line probably need adjusting somehow take changed line offset account may longer make sense operation merge conflict arise commit graph partially ordered commits occur concurrent branch know order interpreted nevertheless model change commonly used application like realtime collaborative editing go name operational transformation many different protocol depend type data modified interaction model collaboration version control system use model primary mean storing commits represents diffs patch git use model store commits complete snapshot content rather storing difference version store change merge well another way merge change take two version want merge compare last version common effectively reconstructing set change text diffs used merge two version together relative common ancestor perform task git many version control system use algorithm unix utility originally created randy smith described formally paper sanjeev khanna keshav kunal benjamin c pierce algorithm take input three text two version merged original version derive produce single merged version may contain conflict section edited party use three file mean process referred threeway merge walk example see work adapted one given section khanna kunal pierce paper say alice bob part team developing recipe book one recipe fish soup includes following list ingredient celery garlic onion salmon tomato wine alice bob going book making edits get copy original version make change alice take garlic onion move appear tomato list bob move salmon appear second alice original bob celery celery celery salmon garlic salmon tomato onion garlic garlic salmon onion onion tomato tomato wine wine wine merge change made alice bob single document first thing calculate diff original copy version original algorithm used calculate diff make big difference result merge see later assume diffs come follows alice original celery celery garlic onion salmon salmon tomato tomato garlic onion wine wine original bob celery celery salmon garlic garlic onion onion salmon tomato tomato wine wine diffs next thing find line unchanged diffs look diffs see matching line content celery line version tomato line version line others wine line version align line document chunk unchanged line matched alice original bob celery celery celery garlic salmon b salmon onion garlic salmon onion tomato tomato tomato c garlic onion wine wine wine e done merge result generated scanning chunk chunk three version agree chunk c e output original text since neither alice bob changed chunk like b alice bob differ original conflict merge algorithm understanding meaning text decide resolve conflict emitted user resolve hand contrast chunk version equal original case empty differs chunk like one new version differs original pick version changed summarise block emit following equal emit celery b differ emit version conflict c equal emit tomato alice differs emit garlic onion e equal emit wine git emits result target file conflict denoted line followed version followed version line celery alice salmon salmon garlic onion bob tomato garlic onion wine set mergeconflictstyle git config use standalone program also see original version conflicted chunk denoted line celery alice salmon original garlic onion salmon salmon garlic onion bob tomato garlic onion wine understand high level algorithm work look implementing going create class since algorithm us several bit state rather store instance variable rather passing function start creating method take b original version two copy merged also take optional argument called differ specifies diff algorithm use default linear myers diff implementation class take three merge file object name list line object wrap file like need display merge conflict useful display filename commit id message changed version final output create structure helper function creating one file path module merge file structnew name line def selffile path line difflines fileread path filenew path line end end creating new object call merge going set initial state generate output chunk return new merge object containing chunk see merge class detail later class def selfmerge b differ myerslinear new b differ merge end def initialize b differ b differ b differ end def merge setup generatechunks mergenew b chunk end end first look setup method initialises bit state needed run algorithm creates empty list called chunk append new chunk discover set line variable document b record far scanned document begin zero finally create two record line version equal original identifies match line number def setup chunk lineo linea lineb matcha matchset matchb matchset b end def matchset file match differdiff olines filelines edit match editoldlinenumber editnewlinenumber edittype eql end match end ingredient list example match set look like map line number original version line number match b copy use match line equal version scan matcha matchb come main body algorithm generatechunks method loop sequence step finding recording matching differing chunk reached end document turn loop performs following step find start next nonmatching chunk returning number line away current position matching chunk end chunk number line away three document already nonmatching chunk need find start next matching one try find start next matching chunk record b line offset document start chunk found match b therefore set emit chunk offset found otherwise match emit remainder document final chunk exists found start next nonmatch emit chunk step current line offset exist searched end three document emit remainder final chunk implementation draw process leaving implementation finding next match mismatch emitting chunk method def generatechunks loop findnextmismatch b findnextmatch b emitchunk b else emitfinalchunk return end elsif emitchunk lineo linea lineb else emitfinalchunk return end end end need method finding next match mismatch emitting chunk find start next mismatch start counter step document linebyline current position counted past end document current line document match increment keep looping loop stop still within bound document return otherwise return nothing match method work using match set created start process rather scanning comparing actual text document equality use match set index know line linea document match line lineo original matcha contains mapping original line number def findnextmismatch inbounds match matcha linea match matchb lineb end inbounds nil end def inbounds lineo olinessize linea alinessize lineb blinessize end def match match offset match lineo offset end example run code beginning recipe example lineo linea lineb run loop checking match set see matcha matchb try turn value matchb matcha even entry found start nonmatching chunk value mean next nonmatching chunk begin line relative current position emit one line document matching chunk emitchunk lineo linea lineb call generatechunks accomplishes finding start next match little simpler start counter one current lineo offset increment either exceeds size match set entry line number indicating diffs leave line unchanged return final value corresponding line number match set find match latter two value nil def findnextmatch lineo olinessize matchahaskey matchbhaskey end matcha matchb end returning example emitting first matching chunk lineo linea lineb recall match set follows line number appearing lefthand side arrow matcha matchb start matchb entry matcha try matchb entry matcha try time matcha entry matchb finally try see match set contain entry matcha matchb return instance generatechunks call emitchunk method emitting chunk construct output merge algorithm keep line offset date moving end chunk emitted document emitchunk creates chunk current line offset given index document set line offset end range subtract one offset given diffs finder method use line number line variable offset start document emitfinalchunk emits whatever left document current line offset onwards def emitchunk b writechunk lineo linea lineb b lineo linea lineb b end def emitfinalchunk writechunk lineo linea lineb end finally reach end chain method writechunk take set line document emits appropriate kind chunk depending content three set equal emit clean chunk object containing original version chunk equal original emit vice versa neither equal emit conflict chunk containing three version def writechunk orange arange brange olines orange map text alines arange map text b blines brange map text b chunk cleannew elsif chunk cleannew b elsif b chunk cleannew else chunk conflictnew b end end generatechunks finish looping merge method return mergenew b chunk creating data structure representing result whole process data structure come tos method turning whole thing string written back file keeping structure let u inspect particularly check whether merge clean tos method assume original input series line text exposing merge result data structure allows u use algorithm type input also use structure generate output text added data necessary merge algorithm example file commit name two version merged clean structnew content def tos contentjoin end end conflict structnew b def tos aname bname text separator text aname aeach line text line separator text beach line text line separator text bname text end def separator text char name text char name n end end merge structnew b chunk def clean chunksgrep conflict empty end def tos chunksmap chunk chunktos aname bname join end end complete implementation use merge data different source print result mergefile originaltxt mergefile alicetxt b mergefile bobtxt merged b put merged celery alicetxt salmon salmon garlic onion bobtxt tomato garlic onion wine algorithm relatively simple highly sensitive output underlying diff algorithm diffs calculated produce different outcome merge clean lead change conflict get case leading conflict deeply misleading surprising user look happens done future article
496,Lobsters,vcs,Git & VCS,Git can now conditionally set configuration variables (git release 2.13),https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/RelNotes/2.13.0.txt#n127,git conditionally set configuration variable git release,,git release note backward compatibility note use empty string pathspec element used everything match still warned git asks user use explicit instead hope existing user mind change eventually warning turned hard error upgrading deprecation removal mi feature scheduled happen upcoming release yet historical argument order git merge msg head commit deprecated quite time removed default location gitcredentialcachesocket socket used communicate credentialcache daemon moved cachegitcredentialsocket git avoids blindly falling back git setup sequence said git repository corner case happens work right may broken call die bug tried hard locate case fixed might still case need addressed bug report greatly appreciated update since ui workflow feature git describe git namerev taught take one refname pattern restrict set ref base naming output also learned take negative pattern name ref used naming via exclude option deletion branch foobar could remove gitrefsheadsfoo longer branch whose name begin foo nt far git merge detects path renamed one history history deleted modified report path help user understand going two history merged url part http url variable configuration variable spelled serf wildcard eg httphttps examplecomproxy used specify proxy used http aexamplecom http bexamplecom etc ie host examplecom domain git tag leave useful message adding new entry reflog left unnoticed long time refstags nt keep reflog default negative pathspec feature somewhat cumbersome use necessary shorthand used needed escaped shell required exclude specified command line option ssh invocation need tweaked implementation ssh eg putty plink want p port openssh want p port specify port connect variant guessed gitssh environment variable used specify logic guess applies command specified newer gitsshcommand also coresshcommand configuration variable come escape hatch user deal misdetected case gitpath gitcommondir sharedindexpath option git revparse produce usable output updated show path correct file relative caller git diff w taught handle case new function added end file better git updateref operation delete reference leave entry head reflog reference deleted current branch problem practice want delete branch currently caused renaming current branch something else logged useful way cc trailer part conform rfc strictly unlike email header git sendemail updated ignore anything picking address allow nonaddress cruft like stable address git submodule init decides submodule working tree upstream give warning common setup git stash push take pathspec local change stashed away partially documentation git lsfiles refer corequotepath experimental split index feature gained configuration variable make easier use working tree repository new option revparse let ask repository used submodule another project root level working tree project ie superproject pathspec mechanism learned limit path match pattern specified attribute attached via gitattributes mechanism source code used cpp macro include c code switch among implementation instead list exact header file name switch among implementation using ifdef include endif help ide tool startup sequence git need figure configured setting find set location repository quite messy due chickenandegg nature code restructured command line prompt contrib learned new tag style specified describe detached head git describe tag configuration file learned new includeif condition path includes content given path condition hold allows say include workrelated bit repository work directory recent update rebase started showing message warning warning prefix mistake fixed recently started passing pushoptions external remote helper interface smart http remote helper understands passed information git describe dirty dy determined state working tree match head eg broken repository broken submodule command learned new option git describe broken give namebroken name description head case git checkout taught recursesubmodules option recent enhancement git stash push command support pathspec allow subset working tree change stashed away found chatty exposed internal implementation detail eg us reset match index head thing output reset seeped chattyness fixed git merge message head commit syntax deprecated since october removed ref completion large number ref sped partly giving disambiguating ambiguous ref partly eliminating shell processing git foreachref lsremote bash completion facility many keyboard typing involves holding shift key one easily end typing upstream upstreampush keywords appear anywhere else syntax safely accept case insensitively without introducing ambiguity confusion solve git tagbranchforeachref family command long allowed filter ref contains x show ref descendant x merged x show ref ancestor x nomerged x show ref ancestor x one curious omission nocontains x show ref descendant x added default behaviour git log interactive session changed enable decorate output git status short extended show various kind dirtiness submodules differently instead modified shown signal change working tree submodule commit checked allow httppostbuffer configuration variable set size expressed sizet larger ulong platform git rebase learns signoff option completion script contrib learned complete git push delete b tab complete branch name deleted git worktree add lock allows lock worktree immediately created help prevent race git worktree add git worktree lock git worktree prune completion git checkout branch autocreates branch remote tracking branch disabled completion often get way completing checkout existing local branch happens share prefix bunch remote tracking branch performance internal implementation development support etc code list branch git branch consolidated generic reffilter api resource usage enumerating ref alternate object store optimized help receiving end push host repository many fork gitattributes machinery taught work better multithreaded environment git rebase start using recently updated sequencer code code design cleanup ref api preloadindex code taught bother index entry path checked sparse checkout warning message git clean updated show errno failed system call parseconfigkey api function cleaned test creates confusing branch whose name head corrected code par header field commit object updated micro performance code hygiene helper function make easier append result realpath strbuf added reduce authentication roundtrip http server support single authentication method also improves behaviour git misconfigured enable httpemptyauth server authenticate without username ie using kerberos etc make httpemptyauth pointless window port want use openssl implementation routine let tperf performance test suite prepared test old version git cover version git ancient add linux variant set platform tested travis ci git branch list take abbrev noabbrev option control output object name v erbose output recent update started ignoring fix breakage reach released version picking two version git running test make sure older one newer one interoperate happily become possible git tag contains used ab use object bit keep track state object reachability without clearing use cleaned made use newer commitslab facility debug helper used test framework learned run command gdb interactively detect attempt create collision variant implementation marc stevens cwi dan shumow microsoft integrated made default test framework learned detect unterminated document namehash used detecting path different case matter case insensitive filesystems optimized take advantage multithreading make sense earlier version merged master compiled incorrectly window fixed url want update submodule interested submodule split two distinct concept way used express latter got extended paving way make easier manage project many submodules make possible later extend use multiple worktrees project submodules debugging output git describe marked nt mark missing one define new task travisyml trigger test session window run elsewhere conversion uchar struct objectid continues submodule specific field refstore structure replaced generic gitdir later used also dealing refstore represents set ref visible worktrees stringlist api used custom reallocation strategy inefficient instead using usual allocgrow macro fixed merge jhstringlistmicrooptim later maint merge tree one source tree often end sharing identical subtree optimize reading tree multiple time case merge jhunpacktreesmicrooptim later maint index file trailing checksum detect file corruption historically checked every time index file used omit validation normal use instead verify git fsck git command upstream side pipe test script hide exit status command may cause u fail notice breakage rewrite test script avoid issue travis ci learns run coccicheck git checkout handle lot path optimized reducing number unnecessary check path hasdirname function internals ref api around cached ref streamlined output perf test updated align title also contains various documentation update code cleanup fix since unless otherwise noted fix since maintenance track contained release see maintenance release note detail git repack depth n long time busted specified depth reusing delta existing pack corrected code parse command line git grep pattern rev pathspec cleaned handful bug fixed eg used check rev git lsremote git archive remote designed work without directory git control however recent update revealed randomly look directory called git without actually necessary setup working repository stop git showbranch expected short branch name repository used fixedlength buffer hold without checking overflow caller tempfile api us stdio interface write file may ignore error writing detected tempfile closed call ferror time original errno may told u went wrong likely long gone overwritten irrelevant value closetempfile reset errno eio make errno least predictable git remote rm x branch remote x configured value branch remote tried remove branch remote branch merge failed either unset gclog file left backgrounded gc auto disables automatic gc taught run least day default ignoring stale gclog file old code parse git c varval cmd set configuration variable duration cmd two small bug fixed useremail consists cruft char consistently error nt git uploadpack counterpart git fetch report request ref advertised invalid generally problem git fetch stop making request right thing leak codepath read packed object rare case plugged redirected http transport get error redirected request ignored error got server ended giving notsouseful error message patch subcommand git add meant path selection prompt like subcommand unlike git add p directly jump hunk selection recently broken add lost path selection dialog fixed git shipped embarrassing breakage various operation verify path given user stopped dying seeing issue instead later triggering segfault need python give message standard error stream somehow code parse git log l command line buggy many range specified l overrun allocated buffer fixed commandline parsing git log l copied internal data structure using incorrect size system git diff quiet relies size field difffilespec correctly populated diffpopulatefilespec helper function made incorrect shortcut asked populate size field path need go converttogit eg crlf conversion test run conditionally rare condition run like running cv test root account git branch created refsheads branch general code handled upstream bit loose disambiguating git fetch request commit object name side allow request failed without much explanation git filterbranch pruneempty drop singleparent commit becomes noop drop root commit whose tree empty recent version git treat http alternate used dumb http transport like http redirects requires client enable following due security concern forgot give warning decide honor alternate git push handful codepaths could lead deadlock unexpected error happened fixed dumb http transport used misparse nonsense httpalternates response fixed git add p pathspec unnecessarily expanded pathspec list individual file match pathspec running git lsfiles pathspec feeding git diffindex see path change historically pathspec language supported diffindex weaker day equivalent reason internally expand help performance avoids command line argument limit platform merge jkaddiusepathspecs later maint git status porcelain supposed give stable output string left translatable mistake git revert mergecommit complained reverting merge need say relative parent reversion need happen nt given correct diagnosis refer first parent fixed code read submodule name ignore config state variable name correctly giving error message diagnosing misconfiguration fix nopthreads build fix potential segv introduced later also git log pickaxeregex unterminated document test fixed turn revealed incorrect expectation test make test updated fix nopthreads option merge bwgreprecursesubmodules later maint git avoids blindly falling back git setup sequence said git repository corner case happens work right may broken call die bug merge jknolookingatdotgitoutsiderepofinal later maint command recently learned recursesubmodule option misbehaved started subdirectory superproject merge bwrecursesubmodulesrelativefix later maint freebsd implementation getcwd behaved differently intermediate directory unreadableunsearchable depending length buffer provided strbufgetcwd aware strbufgetcwd taught cope better merge rsfreebsdgetcwdworkaround later maint recent update rebase stopped running hook git commit command reword action fixed removing entry note tree looking another note entry resulting tree using internal note api function work expected intree user api access pattern still worth fixing git receivepack could forced die attempting allocate unreasonably large amount memory crafted push certificate fixed merge bcpushcertreceivefix later maint update error handling codepath deal corrupt loose object merge jklooseobjectinforeporterror later maint git diff submodulediff learned work better project submodule turn submodules merge sbshowdiffforsubmoduleindifffix later maint update build dependency update usrbinperl etc result recomputation perlmak file merge abregenperlmakwithdifferentperl later maint git push recursesubmodules pushoption string learned propagate push option recursively push submodules patch email first paragraph inbody header indented even blank line inbody header line indented line mistook continuation inbody header fixed merge ltmailinfoinbodyheadercontinuation later maint clean fallout recent tightening setup sequence git barf repository information accessed without first ensuring started repository merge jknolookingatdotgitoutsiderepo later maint git used namerev head want learn branch checked use symbolicref head merge later maint httpproxy set empty string used disable usage proxy broke early last year merge srhttpproxyconfigurationfix later maint gitdir may case normalized symlinks resolved gitdir path expansion pattern receive treatment leading incorrect mismatch fixed git submodule script work well strange pathnames protect path slash least git fetchpack prepared accept err packet uploadpack send humanreadable error message showed packet content err prefix data loss redundant say err error message merge jtfetchpackerrorreporting later maint lsfiles recursesubmodules quite work well project nested submodules gethostname may nul terminate buffer hostname fit unfortunately easy way see buffer small least make sure end using garbage past end buffer merge dtxgethostnamenultermination later maint recent update broke git add p foo subdirectory handy gitpath dangerous function use callsite us safely one day broken change code call reduction use continues merge jkwarongitpath later maint splitindex code configuration code used unsafe gitpath function without copying result many stale http link updated documentation merge jkupdatelinksindocs later maint gitshell reject request serve repository whose name begin dash make longer possible get confused spawning service program like gituploadpack option like help turn would spawn interactive pager instead working repository user asked access ie one whose name help minor doc test build update code cleanup merge jkpagerinuse later maint merge abbranchlistdoc later maint merge sgskipprefixinprettifyrefname later maint merge jkfastimportcleanup later maint merge abtestreadmeupdates later maint merge abdocsubmitting later maint merge jkmakecoccicheckdetecterrors later maint merge ccuntracked later maint merge jcunusedsymbols later maint merge jcbstisnotatabforsed later maint merge mmlsfilessdoc later maint merge qpbisectdocfix later maint merge ahdifffilesourstheirsdoc later maint merge sbsubmodulermabsorb later maint merge later maint merge vnrevisionshorthandforsidebranchlog later maint merge tbdoceolnormalization later maint merge jklooseobjectfsck later maint merge jkquarantinereceivedobjects later maint merge xyformatpatchbase later maint merge rsmisccppcheckfixes later maint merge abpushcasdocntest later maint merge ssgitmodulesignoredoc later maint merge sssubmoduleshallowdoc later maint merge jkprioqueueavoidswapwithself later maint merge jksubmoduleinitsegvfix later maint merge rgdocpulltypofix later maint merge rgdocsubmittingpatcheswordfix later maint merge srhookscwddoc later maint
497,Lobsters,vcs,Git & VCS,Merging and patches,https://jneem.github.io/merging/,merging patch,recent paper home page patch merging patch composition merging composition historical note many merges unique silly example serious example perfect merges perfect merge silly example serious example conflict graggles graggles perfect merge working graggles look like merge conflict deleting line ghost line conclusion pijul acknowledgement di g le mispronounce,recent paper suggested new mathematical point view version control first found pijul new version control system vcs loosely inspired paper poke around pijul home page find many detail make different existing vcses bit digging series blog post result first part ie one go theory developed paper particular describe way think patch merging guaranteed never ever merge conflict second part show pijul put theory action third part dig pijul implementation getting patch theory quick caveat real vcs need deal lot tedious detail directory binary file file renaming etc order get straight interesting new idea skipping purpose post vcs need keep track single file think list line patch patch difference two file later series looking wild new idea let start something familiar comforting kind patch discus go back early day unix patch work linebyline opposed example wordbyword patch add new line modify existing line order actually useful vcs need able delete line also deleting line turn add complication deal later example let start simple file todo list morning looking back list realize forgot something important new one go original todo list new one added line sock format original unix diff utility patch would look like line code saying going add something line input file next bit obviously telling u insert since blog command line tool represent patch pretty diagram instead flat file draw patch hopefully selfexplanatory case arrow go left right indicate line right one left line right arrow coming one got added since patch allowed reorder line line guaranteed cross something implicit notation really need said loud u patch tied specific input file first point diverge classic unix way classic unix patch produced using diff could principle applied input file would still insert put sock first line many case want sometimes merging best thing patch enable multiple people edit file merge change afterwards let suppose wife also decides put thing todo list take original file add line two new version todo list mine sock wife garbage let draw together brings u merging since prefer todo list single file want merge wife change example pretty obvious result let look general problem merging slowly carefully endpoint might different used patch composition first need introduce notation obvious concept composition two patch patch would get applying one patch applying since patch u also includes original file compose two old patch p patch taking file file r patch taking b compose two one order obtain patch b write composition pr first apply p r pretty easy visualize patch composition using diagram compute composition two path follow arrow get dotted red patch going b merging composition going define carefully merge term patch composition mathprofessor kind way give precise definition followed example afterwards explain definition make sense definition p q two different patch taking file file b respectively merge p q pair patch r r take b respectively common output file pr q illustrate definition simple diagram capital letter denote file lowercase letter patch going instead saying pr q mathematician anyone want sound fancy would say diagram commute example merge example something merge merge fails condition pr q composing patch along top path give composing along bottom path give specifically two patch disagree shoe final list came original file real meaning underlying condition pr q mean never ambiguity line came used using blame annotate command favorite vcs probably imagine sort ambiguity would bad historical note merging patch old idea course want briefly explain presentation differs traditional merging traditionally merging defined algorithm many algorithm would try automatically find good merge would asked supply one instead take different approach instead starting algorithm start list property want good merge satisfy end find unique merge satisfies property fortunately u also efficient algorithm find merges unique main problem merges unique huge problem lot great thing unique problem usually want merge automatically automatic system need unambiguous answer eventually deal defining special class merges called perfect merges unique explore problem example silly example let start silly example merge tool decides add extra nonsense sane merge tool would ever course still valid merge according rule last section clearly tighten rule exclude case serious example difficult situation two merges actually reasonable merges valid according rule need actually know line mean order decide first merge better especially raining outside reasonable automatic merging tool would refuse choose instead requiring user merge manually example pretty simple would decide general whether merge unambiguous performed automatically existing tool detail depend merging algorithm since started nonalgorithmic approach let see lead instead specifying explicitly merges describe property ideal merge perfect merges main idea behind definition give never cause regret matter happens future always represent history well merge could using original branch obviously nice property personally think nonobvious good choice defining property ideal merge get later ok come consider merge suppose original creator patch p q continued working personal branch merged sometime future file f say merge r perfect merge every possible choice merge u v unique patch w u rw v sw math term diagram commute going call w continuation since tell u continue working merged file repeat merge perfect every possible future unique continuation perfect merge let example explore various corner definition first example perfect merge take bit effort actually prove perfect merge leave exercise interesting see example fail perfect silly example let start silly example merge introduced unnecessary line turn surprise surprise perfect merge understand definition merge perfection excludes merges like example possible future without continuation since patch delete line way get merged future serious example another example case ambiguity order two line merged file one fails perfect merge future valid continuation imagine wife manually created desired merge patch call w could put merged future make everything commute possibility legal patch patch allowed swap line casually reading pijul might encountered word pushout turn pattern used defining perfect merge common math specifically category theory suppose following diagram capital letter object lowercase letter morphisms every u v unique w diagram commute r said pushout p q word called perfect merge could also called pushout category file object patch morphisms article ignore general math terminology favor language intuitive specific file patch conflict graggles main problem perfect merges always exist fact already saw example pair patch perfect merge actually proved intuitively pretty clear also discussed earlier one potential merge fails perfect ok every pair patch merged perfectly probably knew already since merge conflict come vcs know merge patch need manually resolve conflict come coolest part paper totally different idea dealing merge conflict critical part instead making imperfect merge enlarge set object merge produce every pair patch perfectly merged file maybe merged something else idea extremely common math even general abstract nonsense showing always done abstract way generalize file every pair patch generalized file perfectly merged miraculous part particular case abstract nonsense condenses something completely explicit manageable graggles file ordered list line mixture graph file directed graph line yes know terrible name better object free finite cocompletion category file patch paper call word whereas file insists line strict linear order graggle allows directed graph pretty easy see relaxing strict ordering line solves earlier merging issue example perfect merge sort caused u problem retrospect pretty obvious solution know order shoe garbage go produce output specify order bit le obvious proved paper work world graggles instead world file every pair patch unique perfect merge even cooler perfect merge easy compute describe second first say patch generalize graggles patch two graggles say b function call p line line b respect partial order sense path x path p x p b condition extension fact patch two file allowed change order example perfect merge merge algorithm let say patch p going graggle graggle b another patch q going c compute perfect merge p q write graggles b c next whenever line b line c share parent collapse single line two step algorithm work previous example want merge two patch first write two tobemerged file next second step see todo line came line original file combine two one work line get desired output working graggles generalizing file graggles got nice benefit every pair patch unique perfect merge compute easily obvious flaw tool use editor compiler etc work file graggles paper stop providing guidance easy solution whenever merge result something file make new patch turn file call flattening example look like merge conflict eye glazed sorry long post might feeling bit cheated promised new framework avoids pitfall manual merge resolution flattening look awful lot like manual merge resolution answer criticism detail next post demonstrate pijul tool differs git little teaser difference flattening manual merge resolution flattening completely transparent vcs patch like mean fun thing like reordering reverting patch even presence conflicting merges next post deleting line time finally address something put way beginning post system described based patch delete line obviously need allow deletion practical system unfortunately paper help claim incorporate deletion system described without really changing anything bug paper specifically tweak definition allow deletion category graggles turn closed pushouts example merge algorithm paper turn perfect since post dragged long enough leave exercise figure problem ghost line fortunately trick emulate line deletion original patch system got idea pijul present slightly different way idea allow ghost line instead actually deleting mark every line graggle either live ghost add one extra rule patch live line turn ghost line way around draw ghost line gray arrow pointing ghost line dashed patch deletes shoe line last remaining piece extend perfect merge algorithm cover new graggles ghost line turn easy new algorithm write sidebyside two graggles merged every pair line common parent collapse single line one ghost make collapsed line ghost bit italic new part barely add extra complexity conclusion showed great detail mathy way thinking patch vcs although shown whole lot motivation yet least though next time someone start droning patch theory idea talking next post talk pijul vcs loosely based around algorithm described post get see toy example pijul solid mathematical underpinnings help avoid corner case trip established vcses acknowledgement like thank pierreétienne meunier comment correction draft post course error remain responsibility earlier version post called digles directed graph file couple year later decided graggles sound bit better plus mispronounce little fit pijul whole bird theme
498,Lobsters,vcs,Git & VCS,What's new in Mercurial 4.2,https://www.mercurial-scm.org/wiki/Release4.2,new mercurial,mercurial release feature bug fix improvement extension kevinbullock,mercurial release feature pager moved bundled extension core incore pager default command produce long output pager extension deprecated please migrate removing extensionspager configuration pager extension enabled override incore pager work unlike pager extension incore pager disabled per underlying command per alias mean configure log alias use log want paging eg one logalias another please keep pager extension enabled incore pager yet support attending command designed thirdparty extension paged updated use incore pager want paging command thirdparty command please keep pager extension enabled see hg help pager detail color core feature default see hg help color detail file content view hgweb allows select range line follow history line time hg update hg rebase configured abort destination explicitly given useful workflow destination hard predict set configuration option enable hg status configured display path relative working directory set configuration option enable hg update learned update across branch dirty working directory merge new rev fileset introduced evaluate fileset context specific revision new status fileset introduced simulate hg status revision select file desired property example find file modified revision hg file set status clean bundlespec help topic added document syntax used define bundle file client define path file containing cooky sent http request see hg help configauthcookiefile bug fix abort http server properly reported back client instead resulting return code lock remove possible confusion pid different namespace color fix handling nested color template cleanly reject invalid argument passed pad template make pad strip color code computing width graphlog properly display multiple edge towards null node addremove significant speedup large repository fileset significant speed large repository curse fix interactive hunk selection user interface window hgwebdir allow repository hosted ignore error seeking bundle exception templatefilters fix crash string formatting xsplitlines improvement merge print message launching external merge tool profiling add statprof support chrome trace viewer rendering hg allow usage xdgconfighomehghgrc matcher add new rootfilesin matcher type match file inside directory subdirectory sslutil issue warning hostfingerprint used hostsecurity better everyway pager improve error reporting calling page documentation various improvement hgweb use monospace font commit message gitweb theme template provide loop counter index keyword template add support keyword argument template introduce new hybridlist hybriddict function ability define dict template hg hardlink enabled widely filesystems speed certain operation extension bugzilla add rest api backend usable bugzilla blackbox allow log time spent blocked eg waiting user input using uilogblockedtimes config option shelve add n name option unshelve patchbomb add config knob generate flag template rebase fix bug public changeset could still rebase rebase set multiple root rebase fix rebase possible rebase crash working directory parent obsolete sure include stuff touching experimental feature patchbomb use single pager display output n test bc mq reject new patch name containing leadingtrailing whitespace convert fix handling empty changlist description largefiles set extension enabled locally share requiring last edited kevinbullock
499,Lobsters,vcs,Git & VCS,Advanced Git Log,https://www.atlassian.com/git/tutorials/git-log,advanced git log,formatting log output git config command oneline decorating diffs shortlog graph sourcetree custom formatting pretty format filtering commit history amount date author message file content range filtering merge commits summary,purpose version control system record change code give power go back project history see contributed figure bug introduced revert problematic change history available useless know navigate git log command come already know basic git log command displaying commits alter output passing many different parameter git log advanced feature git log split two category formatting commit displayed filtering commits included output together two skill give power go back project find information could possibly need formatting log output first article take look many way git log output formatted come form flag let request le information git log like default git log format use git config aliasing functionality create shortcut formatting option discussed please see git config command set alias oneline oneline flag condenses commit single line default display commit id first line commit message typical git log oneline output look something like merge branch feature fix bug feature add new feature add initial code base useful getting highlevel overview project decorating many time useful know branch tag commit associated decorate flag make git log display reference eg branch tag etc point commit combined configuration option example running git log oneline decorate format commit history like head master merge branch feature feature fix bug feature add new feature tag add initial code base let know top commit also checked denoted head also tip master branch second commit another branch pointing called feature finally commit tagged branch tag head commit history almost information contained git repository give complete view logical structure repository diffs git log command includes many option displaying diffs commit two common option stat p stat option display number insertion deletion file altered commit note modifying line represented insertion deletion useful want brief summary change introduced commit example following commit added line hellopy file removed line commit author john john examplecom date fri jun add new feature hellopy file changed insertion deletion amount sign next file name show relative number change file altered commit give idea change commit found want see actual change introduced commit pas p option git log output entire patch representing commit commit author mary mary examplecom date fri jun fix bug feature diff git ahellopy bhellopy index ahellopy bhellopy b print hello world print hello git commits lot change resulting output become quite long unwieldy often displaying full patch probably searching specific change want use pickaxe option shortlog git shortlog command special version git log intended creating release announcement group commit author display first line commit message easy way see working example two developer contributed commits project git shortlog output might look like following mary fix bug feature fix serious security hole framework john add initial code base add new feature merge branch feature default git shortlog sort output author name also pas n option sort number commits per author graph graph option draw ascii graph representing branch structure commit history commonly used conjunction oneline decorate command make easier see commit belongs branch git log graph oneline decorate simple repository branch produce following head master merge branch feature fix bug new feature start new feature fix critical security issue fix typo documentation add initial code base asterisk show branch commit graph tell u commits topic branch rest master branch nice option simple repository probably better fullfeatured visualization tool like gitk sourcetree project heavily branched custom formatting git log formatting need use prettyformat string option let display commit however want using printfstyle placeholder example cn h cd character following command replaced committer name abbreviated commit hash committer date respectively git log prettyformat cn committed h cd result following format commit john committed fri jun john committed thu jun mary committed wed jun john committed wed jun complete list placeholder found pretty format section git log manual page aside letting view information interested prettyformat string option particularly useful trying pipe git log output another command filtering commit history formatting commit get displayed half battle learning git log half understanding navigate commit history rest article introduces advanced way pick specific commits project history using git log combined formatting option discussed amount basic filtering option git log limit number commits displayed interested last commits save trouble viewing commits page limit git log output including n option example following command display recent commits git log date looking commit specific time frame use flag filtering commits date accept variety date format parameter example following command show commits created july inclusive git log also pas relative reference like week ago yesterday git log yesterday search commits created two date provide date instance display commits added july july would use following git log note since flag synonymous respectively author looking commits created particular user use author flag accepts regular expression return commits whose author match pattern know exactly looking use plain old string instead regular expression git log author john display commits whose author includes name john author name need exact need contain specified phrase also use regular expression create complex search example following command search commits either mary john git log author johnmary note author email also included author name use option search email workflow separate committers author committer flag operates fashion message filter commits commit message use grep flag work like author flag discussed match commit message instead author example team includes relevant issue number commit message use something like following pull commits related issue git log grep also pas parameter git log make ignore case difference pattern matching file many time interested change happened particular file show history related file pas file path example following return commits affected either foopy barpy file git log foopy barpy parameter used tell git log subsequent argument file path branch name chance mixing branch omit content also possible search commits introduce remove particular line source code called pickaxe take form string example want know string hello world added file project would use following command git log hello world want search using regular expression instead string use g regex flag instead powerful debugging tool let locate commits affect particular line code even show line copied moved another file range pas range commits git log show commits contained range range specified following format since commit reference git log since command particularly useful use branch reference parameter simple way show difference branch consider following command git log master feature master feature range contains commits feature branch master branch word far feature progressed since forked master visualize follows note switch order range feature master get commits master feature git log output commits version tell history diverged filtering merge commits default git log includes merge commits output team alwaysmerge policy merge upstream change topic branch instead rebasing topic branch onto upstream branch lot extraneous merge commits project history prevent git log displaying merge commits passing nomerges flag git log nomerges hand interested merge commits use merges flag git log merges return commits least two parent summary fairly comfortable using git log advanced parameter format output select commits want display give power pull exactly need project history new skill important part git toolkit remember git log often used conjunction git command found commit looking typically pas git checkout git revert tool manipulating commit history sure keep learning git advanced feature
500,Lobsters,vcs,Git & VCS,Mercurial for Visual Studio Code,https://marketplace.visualstudio.com/items?itemName=mrcrowl.hg,mercurial visual studio code,overview integrated mercurial source control prerequisite note install mercurial feature feedback contributing github issue pull request initialize new repo update branchtagbookmark setting deprecated command server acknowledgement ajansveld hoffmael niohwiki joaomoreno nsgundy,overview integrated mercurial source control prerequisite note extension leverage machine mercurial hg installation need install mercurial first feature add file commit source control sidebar ie git normally appears basic commit add forget update push pull see change inline within text editor interactive log basic file history diff branch merge head merge branch resolve unresolve file quickly switch branch push pull via status bar support namedbranches bookmark workflow automatic incomingoutgoing counter undorollback shelveunshelve support purge support rebase support feedback contributing please report bug suggestion documentation request via github issue yes see irony feel free submit pull request initialize new repo click mercurial icon source control title area update branchtagbookmark current branch name shown bottomleft corner click see list branch tag update hgusebookmarks enabled change bookmark setting hgenabled boolean enables hg source control manager v code hgusebookmarks boolean hgpushpullscope current default specifies include pushpull operation depends choice hgusebookmarks namedbranches mode ie hgusebookmarks false branch unrestricted default current includes changesets current branch default includes changesets default branch bookmark mode ie hgusebookmarks true bookmark unrestricted default current includes changesets active bookmark default includes changesets bookmark default branch hgpushpullbranch deprecated current default use hgpushpullscope instead specifies branch e included pushpull operation included backwards compatibility hgautoupdate boolean enables automatic update working directory branchbookmark head pulling equivalent hg pull update true enabled false disabled manual updatemerge required hgautoinout boolean enables automatic counting incomingoutgoing change enabled show status bar updated every minute whenever commitpushpull done note hgpushpullbranch set current default respective branch included count hgautorefresh boolean enables automatic refreshing source control tab badge counter file within project change true enabled false disabled manual refresh still available hgcountbadge tracked control badge counter source control activity bar tracked count change tracked file default include untracked file count badge counter hgallowpushnewbranches boolean override warning normally occurs new branch pushed true new branch pushed without warning default false show prompt new branch pushed eg hg push newbranch hgpath string null specifies explicit hg file path use used hg found automatically default behaviour search hg commonlyknown install location path hgcommandmode control method used communicate hg slight startup performance cost repeatedly running hg command running command server process background allows frequentlyused command run faster eg cat status summary branch etc server feature still expiremental therefore default cli spawn new hg process per command default server run command server process ie hg serve cmdserve acknowledgement ajansveld hoffmael niohwiki joaomoreno nsgundy
501,Lobsters,vcs,Git & VCS,Jupyter/Ipython notebook rendering now available in RhodeCode,https://rhodecode.com/blog/124/rhodecode-470-release-git-lfs-support-jupyter-notebooks-rendering,jupyteripython notebook rendering available rhodecode,update download improved large binary file support git lf release jupyter notebook rendering workflow change zstandard compression better compression zstandard security performance highlight release feature release note update process,newest release rhodecode release focused improving handling large binary asset introduced jupyter notebook rendering improved securit performance release highlight git lf api support enabled downloading git lf mercurial largefiles object directly via rhodecode ui jupyter notebook rendering mercurial support new compression algorithm called zstandard even faster clone new workflow pullrequest manual merges rhodecode authtokens bound single repository added security take minute update rhodecode instance rccontrol selfupdate rccontrol upgrade new rhodecode download latest rhodecode series website keep reading full release detail working exciting new functionality please read learn new release rhodecode improved large binary file support git opensource lf extension hit version adding interesting new feature git lf release quickly decided would good fit upcomming release rhodecode support git lf api act git lf server course powered perrepo setting user control repository use lf addition supporting git lf also looked rhodecode user interact large binary asset since release rhodecode detects git lf mercurial largefiles pointer allows fetch corresponding asset directly via web interface oh also show size check download file small improvement binary file added including proper rendering image filepreview jupyter notebook rendering jupyter notebook opensource web application allows create share document contain live code equation visualization explanatory text know lot education user use daily basis work rhodecode first opensource source code management platform support rendering notebook second overall github really excited bring feature opensource edition application course store view notebook type repository mercurial git subversion together notebook rendering also implement relative url support also mean inside markup rst rendered file relative url resolved loaded allows building markup file linking page static asset inside rhodecode repository writing simple wikilike page document relative navigation possible workflow change introduced two new change allow better integration custom workflow dev team pull request added explicit close action instead close status status selector allows closing approved rejected pull request without performing merge action repository admin added new strip view allowing removing commits repository via web interface repository administrator possible api zstandard compression release mercurial introduces new compression algorithm called zstandard recommend reading great blog post gregory shorc mozilla better compression zstandard benefit new compression algorithm short end user benefit smaller clone size muchreduced cpu usage zstandard enabled default mercurial client using later version interact rhodecode automatically use new compression customer always seek tiniest performance gain noticeable increase security security important rhodecode happy bring security improvement previous version first biggest new security feature repository scoped token ee edition read rhodecode authtokens blog post customer request added improvement feature short token work appspecific password also usage vcs protocol clonepushcheckout etc narrowed single repository user generate timelimited singlerepo token could used external build farm cicd platform confidence token bound user additional scope even case leaking user account compromised entirely additionally deprecated builtin token new user mean option user without token available required since release started big refactor auditjournals added user api endpoint together webview browse user action made within rhodecode system next release add much action audit log requested customer finally took look password reset logic work made small improvement make secure include prevention bruteforce attack shorter reset token expiry improved message help prevent resource discovery type attack performance release try improve performance ux rhodecode user release besides already mentioned zstandard compression enabled also rewrote user admin page loaded chunk loading view eg user fast loading user keeping filtering ordering capability redoing user admin view also changed last activity user flag stored using dedicated column gain small performance gain highlight release feature slack updated slack integration use attachment nicer formatting added number commits inside message improved ui slack message api implemented getuserauditlogs method fetch audit log via api endpoint annotation added shortcut link browse annotation view previous commits allows browsing history line annotation view user administration possible edit user group membership user view thanks awesome contribution bartlomiej wolynczyk see full list change release note usual update process simple oneliner type rccontrol selfupdate rccontrol upgrade command line interface done performantly rhodecode team
502,Lobsters,vcs,Git & VCS,Don't Link that Line Number!,http://andrew.yurisich.com/work/2014/07/16/dont-link-that-line-number/,nt link line number,nt link line number githubcomdroogansemacsdblobmacinitel,nt link line number jul today saw coworker take link specific line number team github repository place comment section user story helpful need see quick reference code could causing defect wrong need instead first original setup link looked like githubcomdroogansemacsdblobmacinitel look great right link week later problem linking line number someone add new code line number link still point regardless new code make sense anchored code line number file instead first highlight code want link like example tap key jump last commit found region anchored code question immutable reference github history project matter happens commit remain unique forever worry work old reference used point
504,Lobsters,vcs,Git & VCS,Introducing paid subscriptions on GitLab.com,https://about.gitlab.com/2017/04/11/introducing-subscriptions-on-gitlab-dot-com/,introducing paid subscription gitlabcom,introducing new paid subscription introducing paid plan product section capping ci minute private shared runner generosity gitlab ci read set runner documentation new paid feature new level support timeline faq public project gitlabcom affected ci usage cap receive access gold tier feature number minute apply per project number user impact limit storage limit job artifact introduced added ability set default expiry time use runner instead documentation gold tier feature ci usage cap ci minute free user get,past year run gitlabcom free saas offering featuring unlimited public private repository unlimited contributor access key feature like issue tracking code review ci wikis none thing changing committed providing integrated solution support entire software development lifecycle price everyone contribute changing time usage gitlabcom grown significantly point two million project hosted gitlabcom seen increase ci usage last year excited exponential growth gitlabcom also want ensure maintain commitment offering free plan unlimited private repos unlimited contributor access key feature allow bring entire software development lifecycle single platform keep commitment offer user specialized need access additional enterprise feature introducing new paid subscription gitlabcom paid plan three thing introduce limit amount private ci minute shared runner may offer additional paid plan gitlabcom user looking robust feature set without overhead managing enterprise edition instance offer new level support team use gitlabcom mission critical code introducing paid plan see information product section website right plan offer additional minute level support future gitlab ee starter ee premium feature added exclusively bronze silver gold plan time capping ci minute private shared runner thanks generosity digital ocean able offer unlimited ci minute last year time run billion free ci minute across thousand project gitlabcom going continue give away free ci may number minute shared runner capped minute month per group paid plan allow additional minute limit apply private project affect le group using ci gitlabcom today minute mean run pipeline minute five time day every working day free gitlab ci gitlabcom get unlimited number pipeline unlimited parallelism unlimited group unlimited number collaborator count minute per group run anything want including full docker support chosen restrict minute still allow parallel pipeline therefore fast ci run note restrict minute shared runner specific runner set project limit pipeline minute gitlabcom still always option bring runner runner easy set require little maintenance run almost platform read set runner documentation new paid feature every month without fail ship improvement gitlab always everyone able access gitlab community edition feature free new gitlab enterprise edition starter ee feature made available paid plan whilst new eep feature made available silver gold plan new level support addition private ci build minute enterprise edition feature access broader option support bronze silver plan offer next business day support similar previous bronze support requiring speedy help gold plan offer response time ticket submitted support team timeline plan available purchase ci limit activated may point able visualise usage clicking setting cog group home page selecting pipeline quota faq public project gitlabcom affected ci usage cap public project gitlabcom receive access gold tier feature ci usage benefit number minute apply per project number minute applies group individual mean sum minute project group individual project quota reset every month number user impact limit limit per group regardless many user group storage limit today project limited repository storage actively enforced time continue allow storage soon start enforcing limit including across job artifact storage mechanism currently unmetered since gitlab introduced ability set expiry time artifact added ability set default expiry time value currently set two week gitlabcom also manually delete keep artifact use runner instead absolutely run specific runner project take look documentation information count minute shared runner provide gitlabcom updated original version faq mentioned public project would receive unlimited ci minute policy changed public project receive gold tier feature ci usage cap updated changed ci minute free user get
505,Lobsters,vcs,Git & VCS,Understanding Git Filter-branch and the Git Storage Model,http://manishearth.github.io/blog/2017/03/05/understanding-git-filter-branch/,understanding git filterbranch git storage model,steve repository colleague greg git commits appear diffs actually file copy actually actually diffs git commit rewrite history filippo alias rewrite history doc perform rewrite reference nomicon alexis quite surprised appendix commits actually stored repo rust book aditya post,day steve wanted git alchemy done rust repo specifically wanted reference nomicon moved repository preserving history situation interesting quirk reference lived srcdocreference srcdocreferencemd nomicon lived srcdocnomicon srcdoctarpl top level separate git root guess title post correct tool job git filterbranch colleague greg call swissarmy knife git history rewriting fun filterbranch day thought finally write accessible tutorial lot folk treat filterbranch like rebase crucial difference lead many false start certainly back first learned kind tie common bit pedantry nature commit keep seeing pop git commits appear diffs actually file copy actually actually diffs git commit generally interact git commits via git show looking commits git gui web ui see diffs natural think commit diff model make sense common way interacting commits also make sense implementation point view diffs seem like efficient way storing thing turn real model actually commit snapshot whole repo state time actually underlying implementation make use delta packfiles trick like copyonwrite forking ultimately arguing real mental model mostly pedantry multiple way looking commit documentation tends implicitly think full copy entire file tree confusion filterbranch come often important picture diffs understanding implementation helpful especially break repository whilst crazy thing often explained work later section really prerequisite understanding filterbranch interesting rewrite history git rebase confusion around filterbranch stem folk worked rebase think filterbranch generalized version actually quite different worked git rebase pretty useful way rewriting history probably use want rewrite history especially maintaining clean git history unmerged underreview branch rebase whole bunch thing core task given current branch branch want rebase onto take commits unique branch apply order new one apply mean apply diff commit attempting resolve conflict time may ask manually resolve conflict using tooling use conflict git merge rebase much powerful though git rebase open interactive rebase show commits going rebased interface reorder commits mark edits wherein rebase stop commit let git commit amend change even squash commits let mark commit absorbed previous one rather useful working feature want keep commits neat also want make fixup patch older commits filippo git fixup alias package particular task single git command changing editortrue editor gitsequenceeditor make even open editor confirmation try whole thing automatically git rebase x somecommand also pretty neat let run shell command step rebase model fundamentally thinking commits diffs move around commits interactive rebase editor moving around diffs mark thing squashing basically merging diffs whole process taking set diffs applying different base commit rewrite history git filterbranch filterbranch work diffs working snapshot model commits commit snapshot tree rewriting commits git filterbranch commit specified branch apply filter snapshot create new commit new commit parent filtered version old commit parent creates parallel commit dag filter apply snapshot instead diffs chance cause conflict like git rebase git rebase one commit make change file change previous commit remove area file changed conflict git would ask figure change supposed applied gitfilterbranch power unless explicitly write filter refer previous commits new commit created isolation worry change previous commits indeed edited previous commit new commit appear undo change apply top filterbranch generally operation want apply pervasively repository want tweak commits work since future commits appear undo change git rebase want tweak commits use basic syntax git filterbranch filter branchname use head refer current branch instead explicitly typing branchname simple useful filter subdirectory filter make given subdirectory repository root use via git filterbranch subdirectoryfilter nameofsubdir useful extracting history folder repository another useful filter tree filter use thing like moving around creating removing file example want move readmemd readme entire history something like git filterbranch treefilter mv readmemd readme also achieve much faster manual work rebase tree filter work checking commit separate temporary folder running filter working directory adding change index need git add committing new index pruneempty argument useful remove commits empty due rewrite checking commit filter quite slow initially trying steve task rust repo wrote long tree filter taking forever faster version index filter however bit trickier work tend use tree filter get away operate index directly index basically thing go git add running git add create temporary object added file modify wip index directory tree include reference new file change existing file reference new one commit index packaged commit stored object object work later section since deal file already stored object git need unwrap object create working directory operate indexfilter operate much faster way however since working directory stuff like adding moving file trickier often use git updateindex make work however useful index filter one scrub file file history git filterbranch indexfilter git rm cached ignoreunmatch filename head ignoreunmatch make command still succeed file exist filterbranch fail one filter fails general tend write fallible filter like devnull devnull true make always succeed also ignores stdoutstderr output tends make progress screen fill fast cached argument git rm make operate index working directory great working directory right rarely use git updateindex really going try explain used need complex operation index filter way go many filter like commitfilter let discard commit entirely msgfilter rewriting commit message envfilter changing thing like author metadata env var see complete list example doc perform rewrite reference nomicon rust reference basically extract history srcdocreferencemd srcdocreference referencemd split reference md recently commit easy tree filter write tree filter take forever instead trying luck index filter decided make tree filter would faster first extracted srcdoc git filterbranch f pruneempty subdirectoryfilter srcdoc branch contained history srcdoc root directory moved doc much smaller repo entirety rust moved referencemd reference git filterbranch f pruneempty treefilter mkdir p reference mv referencemd reference devnull devnull true mentioned devnull true bit mv command fail case referencemd exist want continue without complaining happens care moving instance file file exist still okay everything cared within reference next step simple git filterbranch f pruneempty subdirectoryfilter reference whole process took maybe minute run time spent second command final result found nomicon task easier case nomicon always resided srcdocnomicon srcdoctarpl root last bit interesting alexis working nomicon started hacking separate repo within repo moved srcdoctarpl performed merge commit rustc inherent restriction git merges must common ancestor stuff like quite surprised saw since pretty uncommon general really many project size stuff like servo usually large project merged developed side sound complicated work hard took subdirectoryfiltere doc directory branch used reference renamed tarpl nomicon via tree filter ran another subdirectory filter git filterbranch f pruneempty treefilter mv tarpl nomicon devnull devnull true git filterbranch f pruneempty subdirectoryfilter nomicon whole history nomicon root dir except commits made alexis frankenmerge got removed first subdirectory filter commits operating outside srcdoc even though content eventually got moved stage already branch nomicon root alexis original commits also operating root directory rebase diffs commits cleanly apply found commit everything moved tarpl took parent ran git rebase root everything cleanly rebased expected history going back first child file moved moved file diffs cleanly apply final result found appendix commits actually stored way actual implementation commit work file stored hashed stored compressed format indexed hash directory tree list hash one filedirectory inside alongside filename metadata list hashed used everywhere else refer directory commit reference tree object root directory via hash make commit changing file file unchanged directory commits share object unchanged filesdirectories reducing size basically copyonwrite model furthermore second optimization called packfile wherein instead storing file git store delta diff reference file diff must applied see work using git catfile catfile let view object git filesystem basically bunch hashindexed object stored gitobjects view directly traversing directory organized trie catfile p let prettyprint content since stored binary format working repo rust book playing commit commit change one file perfect git show commit author jake goulding date fri mar reorder sentence generic con list diff git index diff omitted git catfile p tree parent author jake goulding committer github noreply githubcom reorder sentence generic con list tell u commit thing author information pointer parent commit message tree tree git catfile p blob gitattributes tree github blob gitignore blob travisyml blob readmemd tree ci tree firstedition blob indexmd tree redirects tree secondedition directory see entry hash use git catfile p view one looking tree object give u subdirectory blob show u actual file git catfile p show readme rust programming language build status http travisciorgrustlangbooksvg branchmaster http travisciorgrustlangbook read book online visit rustlanggithubiobook html rest file omitted share object let look previous commit git catfile p mean parent tree parent author steveklabnik committer steveklabnik mdbook need path deploy git catfile p tree blob gitattributes tree github blob gitignore blob travisyml blob readmemd tree ci tree firstedition blob indexmd tree redirects tree secondedition look closely hash except hash secondedition hash object shared across commits differing hash newer commit older one let look object git catfile p blob contributingmd blob cargolock blob cargotoml blob licenseapache blob licensemit blob bookjson blob dictionarytxt blob doctomdsh tree dot blob nostarchsh tree nostarch blob spellchecksh tree src blob styleguidemd tree tool git catfile p blob contributingmd blob cargolock blob cargotoml blob licenseapache blob licensemit blob bookjson blob dictionarytxt blob doctomdsh tree dot blob nostarchsh tree nostarch blob spellchecksh tree src blob styleguidemd tree tool except src src lot file clutter post run diff output catfile diff g catfile p g catfile p blob blob blob blob blob blob blob blob blob blob blob blob see file changed commit new blob stored view get pre post commit version file respectively basically commit store tree reference object often sharing node commits opportunity work packfiles much additional optimization top aditya post good intro
506,Lobsters,vcs,Git & VCS,Better Git configuration,https://blog.scottnonnenberg.com/better-git-configuration/,better git configuration,git time sometimes stack improvement git bad old day visual sourcesafe cal poly concurrent version system cv microsoft team foundation server dogfooding subversion ruby rail side project heroku git git truly taken global config getting started git tutorial much configuration available entire global available via gist alias section prune command amend stash default merge fastforward extremely useful tool option commit commits signed gpg user information file adding public gpg key github account little verified badge option push option status option transfer external tool visualize diffs little easier read simple workaround bonus revision revision http gitscmcomdocsgitrevisions go forth command list list option,like git use time sometimes recently took time really dig read documentation review global git configuration welcome fourth stack improvement post git started coding bad old day plain filesystem copy visual sourcesafe exclusive lock checkout even back concept source control amazing wished access coding home later cal poly exposed concurrent version system cv worked group project many group project never got good microsoft year used team foundation server source control called app week nondevelopers visual studio would spend whole week dogfooding product make sure ready ship personal programming time subversion free easy run locally used keep track local change time fall thing changed learned ruby rail develop side project comprehensive tutorial went covered heroku new source control system git amazing could treat like hosted locally also interact others exclusive locking full productivity offline intelligent merging hooked since git truly taken de facto standard open source supported every major player cloud source code hosting supported many gui tool dedicated source control tool well code editor important know know well global config whether know got global git configuration gitconfig file home directory gitconfig file name email established average getting started git tutorial much configuration available file entire global gitconfig available via gist inline comment jump directly like talk section bit detail alias bread butter custom gitconfig alias section create command feel like something missing add something quite work way want add version prune fetch prune working project others push branch main repository end lot random local branch prune deletes local branch deleted remote always forget undo reset soft head made mistake making commit command set thing way commit fair usually amend existing commit situation since keep commit message stashall stash save includeuntracked stash extremely useful someone randomly asks check another branch right middle something command ensures stash catch new file caught git add yet glog log graph prettyformat cred h creset c yellow creset cgreen cr c bold blue creset commit history shown via default git log spaceinefficient really focus important information colorful graphical display easier parse especially branching get complex merge ff ensures get error unless every merge fastforward merge commits joining together two history smooth progression commit commit might wondering get real work done answer git rebase way take branch commit tree attach different part giving new base extremely useful tool update pull request conflict master essentially get chance reapply commits future world others made change think better metaphor merge everyone else change change get merge latest master branch option great never accidentally create merge commit intend create merge commit force behavior explicit git merge ff conflictstyle give little information merge conflict happens normally get two section intended change left intended change right option get third section original change left right tried change commit gpgsign true ensures commits signed gpg key generally good idea verification user information gitconfig file mean commits look like could easily show someone else pull request fact contract use someone else credential account machine provisioning taking long pull request submitted someone else account commits inside real name remove question commit came adding public gpg key github account signed commits little verified badge note one gpg key specify like use usersigningkey option gui apps necessarily sign commits even option set need explore application option gpgagent save passphrase time making thing little easier use push default simple option probably already set make easier push local branch branch named thing target remote followtags true quite simple instead manually pushing new tag followtags always send local tag along git push know tag created locally want included push status showuntrackedfiles normally added new directory staged yet git add git status show directory name tripped quite time since new large directory show one line option show file underneath new directory git status note make thing slower large repository transfer fsckobjects true tell git like extra check receiving sending change extra check want alerted evidence data corruption sooner rather later right note make transfer bit slower addition builtin git diff command git allows specify external tool visualize diffs collection entry set git use icdiff display difference two state repository diff tool icdiff difftool prompt false difftool icdiff cmd usrlocalbinicdiff linenumbers local remote use like normal git difftool master branch icdiff interesting attempt replicate colorful githubstyle split diffs right console little easier read normal chunkbased diff style note might difficulty installing icdiff happily simple workaround keep git diff back pocket icdiff seem handle comparison devnull example try git difftool cached staged new file bonus revision type git checkout master time right command master example revision specifically shorthand referring latest commit master branch common revision format git checkout branchname git checkout remotesoriginbranchname git checkout git checkout head turn whole language specify revision operator apply noun used git checkout master git checkout git checkout git checkout master yesterday git checkout master find whole set supported revision format http gitscmcomdocsgitrevisions surprised comprehensive remember use revision git command try git glog master master go forth start gitconfig use inspiration customizations could even deepdive like command list list option extremely educational make git maximally useful comfort git leaf room hard bug actual merge conflict dig good reference
507,Lobsters,vcs,Git & VCS,gitbrute: brute force a Git hash with a given prefix,https://github.com/bradfitz/gitbrute,gitbrute brute force git hash given prefix,join github today sign file permalink http githubcombradfitzdeadbeef resource reload reload,bruteforce git commit hash dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time gitbrute bruteforces pair authorcommitter timestamps resulting git commit desired prefix find recent time satisfies prefix shorter prefix match quickly course author committer timestamp kept sync example http githubcombradfitzdeadbeef usage go run gitbrutego prefix amends last commit current repository bruteforce git commit hash resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
509,Lobsters,vcs,Git & VCS,Shutting down CodePlex,https://blogs.msdn.microsoft.com/bharry/2017/03/31/shutting-down-codeplex/,shutting codeplex,shutting codeplex help via email follow,shutting codeplexbrianalmost year created codeplex time say goodbye launched codeplex like others industry saw need great place share software year seen lot amazing option come go point github de facto place open source sharing open source project migrated migrated many know microsoft invested visual studio team service one engineering system proprietary project exposed many key open source project github visual studio code typescript net cognitive toolkit fact github organization open source contributor organization proud partner closely github promote open source past year watched many codeplex project migrate period address several issue including spam epidemic several month spammer sought take advantage codeplexcom domain boost illicit activity also seen substantial decrease usage writing le project saw source code commit last day shutdown plan time say goodbye codeplex post disabled ability create new codeplex project october set codeplex readonly shutting completely december codeplex archive take final complete backup site shutting decommissioning existing codeplex site server time codeplexcom start serving readonly lightweight archive allow browse published project source code downloads documentation license issue looked codeplex went readonly also able download archive file project content common transferrable format like markdown json possible put place redirects existing url work least redirect project new homepage archive archive respect moved setting used direct user current home project currently plan end date archive migrating data providing two firstclass way get data codeplex first partnered github provide streamlined import experience help bring codeplex source code license documentation github migration tool issue also work available soon update blog post detail available added new option project set moved banner project direct user new home walkthrough codeplex wiki help migration process second codeplex archive allow download archive file described like migrate source code variety option depending source control type git user many git hosting service including visual studio team service bitbucket offer easy import flow help migrate bitbucket also offer import mercurial user help use tool codeplex support standing help via email github also ready help encounter issue import experience thank briancorporate vice president cloud developer service follow
510,Lobsters,vcs,Git & VCS,Edit history with Mercurial Evolve (Beta) in Bitbucket Cloud,https://blog.bitbucket.org/2017/03/28/edit-history-with-mercurial-evolve-beta-in-bitbucket-cloud/,edit history mercurial evolve beta bitbucket cloud,forged painful experience launching evolve hope providing better experience mercurial user get evolve hgenvconfig getting evolve evolve c evolution easy software freedom conservancy get started free u twitter,forged painful experience git push f launching evolve hope providing better experience mercurial user mean able edit history pull request merging rebase fancy plus pave road u enable new merge option like new squash merge pull request video get evolve calming bit important note evolve still beta mercurial bitbucket facilitate rolling beta feature feature bitbucket decided write extension make integrating mercurial configuration peruser lab setting call magic hgenvconfig simple extension even test technically curious way hgenvconfig work adding peruser configuration environment variable mercurial extension hook able read variable fact subprocesses inherit environment variable main thread extension able add evolve lab setting help get evolve hardened mercurial user hope get testing evolve move experimental status mercurial need feedback terminology ux bug start using first install evolve running pip install hgevolve head account setting bitbucket lab enable mercurial evolution support getting evolve evolve different starter git push f behaves like favorite ftp server last one write win contrast mercurial mark commits replaced using appendonly store let see work without getting technical figure unsafe history modification core mercurial using evolve figure safe history modification using evolve original revision preserved obsolete changeset providing history git temporary amend commit marked implementation detail stemming limitation mercurial current merge machinery future version mercurial create similar git push f evolve advanced feature editing history tricky evolve built mercurial concept phase preparation evolve little ago switched default state new mercurial repository nonpublishing eg draft commits default get evolve make sure read evolve c simply put analogous rebase inprogress represents name suggests unstable state repository used carefully stick rebase histedit command rare end state safe use evolution easy order help make feature like accessible community future including development mercurial platform bitbucket made charitable donation software freedom conservancy proud support software freedom conservancy promote development platform like mercurial encourage keep look advancement come new bitbucket sign bitbucket already bitbucket user head account setting bitbucket lab enable mercurial evolution support get started free specific question post reach u twitter get information need
511,Lobsters,vcs,Git & VCS,Atlassian announces they won't add Mercurial support to Bitbucket Server,https://jira.atlassian.com/browse/BSERV-2469?focusedCommentId=1068825&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1068825,atlassian announces wo nt add mercurial support bitbucket server,,hi everyone firstly thanks feedback passion advocacy suggestion please accept apology allowing issue remain open time without clear direction atlassian would love support availability choice come dvcsbased development bitbucket server however decided engineering cost adding maintaining mercurial support ultimately wrong direction take product heartening see recent development mercurial scm seen sign positive market shift would justify investment bitbucket server especially given strong demand existing customer capability based git number people offered approach make suggestion reality bitbucket server explored discussed ultimately feel commitment mercurial would need full commitment anything else defers future disappointment secondclass solution lead frustration regret bitbucket server bitbucket cloud offer primary code collaboration feature different origin allowing optimize need subtly different customer base bitbucket cloud strong foundation mercurial hosting product loyal following continue support also investing range improvement reiterate past recommendation consider bitbucket cloud mercurial hosting choice dvcs option important going implement feature bitbucket server instead remain committed helping software team deliver high quality software faster increasingly competitive changing world believe great developer tool key element modern software development hand good team smart process end made improvement already planning work following area help problem team face scaling ever larger number user cicd load security performance manageability scale baked everything seamless workflow integration atlassian leading product bringing together combined power best breed tool innovation increase team consistency developer productivity reduce complexity despite ever evolving technology landscape thank longstanding interest feedback issue confident improvement planned gitbased development bitbucket server unleash greatest overall potential software team around world look forward supporting question concern feel free contact directly cheer roger barnes principal product management bitbucket server rbarnes atlassian dot com
512,Lobsters,vcs,Git & VCS,Configure Git Pairs with Magit,http://www.danieldeaguiar.com/git-pair/,configure git pair magit,configure git pair magit email protected email protected config,configure git pair magit like probably used git pair script point number script work way creating local git config pair author information used avid user git cli changed since switched magit unfortunately still need want setup git pairing session decided change partly keep switch emacs also exercise improve elisp chop requirement override commit author committer single command add author override minibuffer single command remove author override single command toggle author override persist override across buffer overridden author value must visible magit commit popup code spelunking found magit expose variable magitcommitarguments defined gitcommitel hold list string representing commit argument customizable requirement call user experience little dynamic setting emacs custom variable using variable satisfy requirement time write code manipulate first create function named mygitsetauthor let add author commit argument defun mygitsetauthor author set author argument input author string author addtolist magitcommitarguments concat author author minibuffermessage concat author overridden author work interactive meaning invoked minibuffer get prompt input good start though add another function fill gap defun mygitoverrideauthor activates git commit author override using input author interactive let author readstring ie u thor email protected mymagitgcoverrideauthor mygitsetauthor author function mygitoverrideauthor interactive prompt message convenient reminder author format satisfies requirement set need able remove function mygitremoveauthoroverride defun mygitremoveauthoroverride remove author commit argument interactive setq magitcommitarguments removeif lambda stringmatch author magitcommitarguments minibuffermessage author override removed great add remove override check requirement time add override toggling define variable mymagitgcoverrideauthor persist author override update mygitoverrideauthor use follows defun mygitoverrideauthor activates git commit author override using input author interactive let author readstring ie u thor email protected mymagitgcoverrideauthor setq mymagitgcoverrideauthor author mygitsetauthor author implement mygitauthortoggle check requirement defun mygitauthortoggle toggle git commit author override interactive findif lambda stringmatch author magitcommitarguments mygitremoveauthoroverride mygitsetauthor mymagitgcoverrideauthor finally tie together keybindings get set magit initialized really like usepackage thing like usepackage magit bind cc cp mygitoverrideauthor cc cu mygitremoveauthoroverride cc ct mygitauthortoggle require magitcommit otherwise magitcommitarguments wo nt initialized first try commit something require magitcommit future probably add nicety like support selecting known pair support pair initial good enough full implementation found emacs config got goody peruse config keep mind use prelude emacs distribution cheer dan footnote
515,Lobsters,vcs,Git & VCS,SHA-1 collision detection on GitHub.com,https://github.com/blog/2338-sha-1-collision-detection-on-github-com,collision detection githubcom,shattered matter git collision matter git security would collision attack git look like github protecting collision attack detection code git collision future work,week ago researcher announced shattered first collision hash function starting today computation githubcom detect reject git content show evidence part collision attack ensures github used platform performing collision attack user fix also included next patch release supported version github enterprise matter git git store data object object named hash content object refer hash two distinct object hash known collision git store one half colliding pair following link one object colliding hash name know object name meant point two object colliding accidentally exceedingly unlikely five million programmer generating one commit per second chance generating single accidental collision sun turn red giant engulfs earth collision matter git security git fetch push try send colliding object repository already contains half collision receiver compare byte object notice problem reject new object git implemented detection since inception however name assigned trust various mechanism instance git allows cryptographically sign commit tag sign commit tag object turn point object containing actual file data using name collision object could produce signature appears valid point different data signer intended attack signer see one half collision victim see half would collision attack git look like recent attack generate collision existing object generate colliding pair scratch two half pair similar contain small section carefullyselected random data differs attack therefore would look something like generate colliding pair one half look innocent something malicious best done binary file human unlikely notice difference two half recent attack used pdfs purpose convince project accept innocent half wait sign tag commit contains distribute copy repository malicious half either breaking hosting server replacing innocent object disk hosting elsewhere asking people verify integrity based signature anybody verifying signature think content match project owner signed github protecting collision attack generating collision via bruteforce computationally expensive remain foreseeable future recent attack us special technique exploit weakness algorithm find collision much le time technique leave pattern byte detected computing either half colliding pair githubcom performs detection computes abort operation evidence object half colliding pair prevents attacker using github convince project accept innocent half collision well preventing hosting malicious half actual detection code opensource written marc stevens whose work basis shattered attack dan shumow grateful work project git collision yet git object name take account raw byte file also gitspecific header information pdfs provided shattered researcher collide raw byte added git repository technique could used generate git object collision like generation original shattered pdfs would require spending hundred thousand dollar computation future work blocking collision pas github first step already working git project include collision detection library upstream future version git able detect reject colliding half matter reach developer fetching hosting site applying patch generating object local data git project also developing plan transition away another secure hash algorithm minimizing disruption existing repository data work matures plan support github
516,Lobsters,vcs,Git & VCS,The git sha-1 migration has begun,https://github.com/git/git/commit/e1fae930193b3e8ff02cee936605625f63e1d1e4,git migration begun,,static const char prepareindex int argc const char argv const char prefix static int runstatus file fp const char indexfile const char prefix int nowarn struct wtstatus unsigned char struct objectid oid relativepaths prefix prefix static int runstatus file fp const char indexfile const char prefix int indexfile indexfile fp fp nowarn nowarn isinitial reference isinitial reference oidhash isinitial hashcpy hashcpy oidhash statusformat statusformat ignoresubmodulearg ignoresubmodulearg static int preparetocommit const char indexfile const char prefix commitable runstatus fp indexfile prefix usecolor savedcolorsetting else unsigned char struct objectid oid const char parent head activenr readcache static int preparetocommit const char indexfile const char prefix amend parent parent parent oidhash int itanr activenr int cmdstatus int argc const char argv const char prefix static struct wtstatus int fd unsigned char struct objectid oid static struct option builtinstatusoptions optverbose verbose n verbose optsetint short statusformat int cmdstatus int argc const char argv const char prefix fd holdlockedindex indexlock sisinitial sreference sisinitial sreference oidhash sisinitial hashcpy hashcpy oidhash signoresubmodulearg ignoresubmodulearg sstatusformat statusformat static const char implicitidentadvice void static void printsummary const char prefix const unsigned char static void printsummary const char prefix const struct objectid oid int initialcommit struct revinfo rev struct commit commit struct strbuf format strbufinit unsigned char struct objectid junkoid const char head struct prettyprintcontext pctx struct strbuf authorident strbufinit struct strbuf committerident strbufinit commit lookupcommit commit lookupcommit oid hash commit die could nt look newly created commit parsecommit commit static void printsummary const char prefix const unsigned char revdiffoptbreakopt diffsetupdone revdiffopt head resolverefunsafe head null head resolverefunsafe head junkoidhash null strcmp head head head detached head else static int gitcommitconfig const char k const char v void cb return gitstatusconfig k v static int runrewritehook const unsigned char const unsigned char static int runrewritehook const struct objectid oldoid const struct objectid newoid struct childprocess proc childprocessinit const char argv static int runrewritehook const unsigned char code startcommand proc code return code strbufaddf sb sn strbufaddf sb sn oidtohex oldoid oidtohex newoid sigchainpush sigpipe sigign writeinfull procin sbbuf sblen close procin int cmdcommit int argc const char argv const char prefix struct strbuf authorident strbufinit const char indexfile reflogmsg char nl unsigned char struct objectid oid struct commitlist parent null struct stat statbuf struct commit currenthead null int cmdcommit int argc const char argv const char prefix statusformat statusformatnone ignore statusshort scolopts head head oidhash currenthead null else currenthead lookupcommitordie head currenthead lookupcommitordie oidhash head parsecommit currenthead die could parse head commit int cmdcommit int argc const char argv const char prefix committreeextended sbbuf sblen activecachetree parent authoridentbuf signcommit extra parent oidhash authoridentbuf signcommit extra rollbackindexfiles die failed write commit object int cmdcommit int argc const char argv const char prefix transaction reftransactionbegin err transaction reftransactionupdate transaction head reftransactionupdate transaction head oidhash currenthead currenthead objectoidhash sbbuf err int cmdcommit int argc const char argv const char prefix cfg initcopynotesforrewrite amend cfg amending currenthead null copynoteforrewrite cfg currenthead objectoidhash copynoteforrewrite cfg currenthead objectoidhash oidhash finishcopynotesforrewrite cfg note added git commit amend runrewritehook currenthead objectoidhash runrewritehook currenthead objectoid oid quiet printsummary prefix currenthead printsummary prefix oid currenthead strbufrelease err return
517,Lobsters,vcs,Git & VCS,A proof-of-concept of a vulnerability in custom shell prompt scripts,https://github.com/njhartwell/pw3nage,proofofconcept vulnerability custom shell prompt script,join github today sign file permalink official git prompt fix resource reload reload,get might want fix shell dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time get might want fix shell rather silly poc vulnerability custom shell prompt script suspect rather widespread noticed working branch included sake cuteness prompt usually includes branch name bunch gibberish suspected zsh pluging using properly escape shell metacharacters tried thing landed work repo unusuallynamed default branch repo contains script path referenced branch name cd repo shell prompt try display branch name doest correctly escape expression execute fix show whitelisted character branch branch construct reference variable hold branch name official git prompt fix get might want fix shell resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
518,Lobsters,vcs,Git & VCS,All File Systems are Not Created Equal (2014),https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-pillai.pdf,file system created equal,,obj endobj obj filterflatedecodeid index info rlength rsize stream b na endstream endobj startxref eof obj stream x q endstream endobj obj endobj obj font procset pdftext property rotate typepage endobj obj stream e kt oƙ c c endstream endobj obj stream b endstream endobj obj stream x ض r
520,Lobsters,vcs,Git & VCS,How to write a good git commit message that people can read and tools can parse,https://github.com/joelparkerhenderson/git_commit_message,write good git commit message people read tool parse,git commit message top priority begin short summary line continue longer description summary example summary keywords add drop fix bump make start stop optimize document refactor reformat rearrange redraw reword realworld example add drop fix bump make start stop optimize document refactor reformat rearrange redraw reword use semantic versioning add start drop stop fix bump make optimize document refactor reformat rearrange redraw reword specific right wrong specific length reasoning reject format optional use contact email address git commit template optional use task tracking link optional use resource tracking metric optional use keywords importance reference etc related link,git commit message write great git commit message take look guideline suggestion content top priority best git commit message read guideline suggestion discus teammate emphasize clear communication commit message help teammate use git commit template begin short summary line begin short summary line aka message subject start imperative present active verb add drop fix refactor optimize etc use character git official preference finish without sentenceending period continue longer description continue longer description aka message body add blank line summary line write much want use character per line typical text word wrap use many character needed atypical text url terminal output formatted message etc include kind note link example etc want summary example summary example good commit message add foo drop foo fix foo refactor foo optimize foo summary keywords recommend summary keywords use imperative mood present tense active voice verb add create capability eg feature test dependency drop delete capability eg feature test dependency fix fix issue eg bug typo accident misstatement bump increase version something eg dependency make change build process tool infrastructure start begin something eg enable toggle feature flag etc stop end something eg disable toggle feature flag etc optimize change must performance eg speed code document change must documentation eg help file refactor change must refactoring reformat change must formatting eg change space rearrange change must arranging eg change layout redraw change must visual eg change graphic image icon etc reword change must textual eg change comment label doc etc realworld example realworld example show use imperative mood present tense active voice verb add feature user like post drop feature user like post fix association user post bump dependency library current version make build process use cache speed start feature flag user like post stop feature flag user like post optimize search speed user see post document community guideline post content refactor user model new language syntax reformat home page text use whitespace rearrange button ok lower right redraw diagram web app work reword home page text welcoming use semantic versioning use semantic versioning many project add start increment semver minor version new capability drop stop increment semver major version incompatibility fix bump make optimize document increment semver patch version refactor reformat rearrange redraw reword increment semver patch version specific right wrong capitalize summary right add feature wrong add feature finish summary without sentenceending period right add feature wrong add feature summary end nonsentenceending period use use imperative mood present tense active voice lead verb right add feature wrong add feature indicative mood imperative mood wrong added feature past tense present tense wrong adding feature lead gerund verb wrong feature added passive voice active voice specific length keep summary line within character purpose easy readability git official convention convention writing email message use blank line summary line purpose making commit message parseable tool git official convention convention writing email message use character per line typical text word wrap purpose easy readability typical terminal git official convention convention writing email message use many character needed atypical text url terminal output formatted message etc purpose preserving important formatting git official convention convention writing email message reasoning primarily care team communicates effectively shared understanding secondarily like verb easy read easy type clear many culture team prefer word fine use work reject format reject git commit message style put metainformation summary line example reject git commit message style project angular commitizen default etc use leading tag sometimes word sometimes abbreviation sometimes plural noun etc example using feat feature doc document perf performance improvement etc instead use add adding feature document documenting help optimize performance improvement etc active verb easier skim easier use people culture may lesscomfortable using english reject using ticket id number summary line instead use fullyqualified url commit message body many project use multiple tracking system multiple way launching url want url tracking easy use wide range system script team reject using time tracking syntax summary line instead want time tracking put info commit message body personal time tracking irrelevant developer must use time tracking recommend format iso utc yyyymmddthh mm ssz optional use contact email address sometimes one person working commit example pair programming keep track write git commit message body list person use person name email address use one person per line easy parse coauthoredby alice adam alice eaxmplecom coauthoredby bob brown bob examplecom coauthoredby carol curtis carol examplecom make easy use git commit template optional use task tracking link sometimes connect git commit task tracking system web page explains example use github trello jira many bug tracking system project management software system keep track use git commit message body list url one per line easy parse example add feature foo see http see http see http wikipediacomquicksort want provide link name use markdown link see request help sign http see add feature foo http see wikipedia quicksort http wikipediaquicksort make easy practice use git template help fill info optional use resource tracking metric sometimes connect git commit resource tracking system metric script example work project project manager must keep track work hour spent commit story point estimate per feature branch cost hiring developer fix bug keep track use git commit message body list item one per line easy parse example add feature foo time staff hour cost point optional use keywords importance reference etc like use commit message keywords help u skim search prioritize keep track write git commit message body us email header convention example fix foo keywords security encryption authentication importance high reference supersedes obsoletes seealso use help team focus important work commit message say importance high get priority code review also testing continuous integration server commit message say supersedes reference obsoletes easily look earlier commits url related link blog post write git commit message tool help git commit message
521,Lobsters,vcs,Git & VCS,from __past__ import bytes_literals,http://gregoryszorc.com/blog/2017/03/13/from-__past__-import-bytes_literals/,past import bytesliterals,sourcetransforming module loader meta path finder sourceloader tokenize absolute import wanted spend time meaningful part python port could find interesting problem challenge toil mechanical conversion add little shortterm value simultaneously increasing cognitive dissonance quite possibly increasing odds introducing bug python,last year simultaneously committed one ugliest impressive hack programming career nt time write summary hack sourcetransforming module loader python used python import python source file translating certain primitive python equivalent kind like except executes runtime import main goal hack facilitate porting mercurial python deferring make invasive therefore annoying element port canonical source code representation technically curious work follows hg python executable register custom meta path finder instance entity invoked import statement try find module imported tell later phase import mechanism load module wherever usually py pyc file disk python module object custom finder responds request module known managed mercurial project module tell next stage import mechanism invoke custom sourceloader instance real magic custom loader invoked tokenizes python source code using tokenize module iterates token stream find specific pattern rewrite something appropriate untokenizes back python source code fall back builtin loader heavy lifting compiling source python code object python source file disk magically get transformed python compatible loaded python oh performance penalty token transformation subsequence load transformed bytecode cached pyc file using custom header know transformed invalidated transformation logic change time wrote token stream manipulation converted string literal byte literal b word restored python behavior string literal byte unicode jokingly call past import bytesliterals play python future import unicodeliterals special syntax change string literal python strbytes type unicode match python behavior since implemented first version others implemented one expect tweeted link commit many python developer including cpython core developer expressed mix intrigue horror mostly horror fully concede gross hack intention mercurial project undo hack perform proper port python support mercurial mature want lay defense mercurial project tolerant ugly hack individual within mercurial project wanted port python year recently nt project priority port much work little enduser gain technical front port practical python two main blocker u literal restored python formatting b literal restored understand senior member mercurial project lobby python maintainer pretty hard get feature like formatting b literal restored python anyway number failed attempt initiate python port year mercurial project started making positive step towards python compatibility switching absolute import addressing syntax issue allowed module parsed ast even compiled loadable may seem like small step larger project lot work porting effort hit large wall came time actually make astvalid python code run python specifically string problem write software exchange data machine sometimes machine running different operating system different encoding expectation thing work data roundtrips accordingly trying force text encoding essentially impossible inevitably break something someone much easier mercurial operate byte first take text encoding consideration absolutely necessary emitting byte terminal wanted encoding emitting json say mercurial ignores existence encoding far mercurial attempt normalize data unicode often special python type internally store raw byte sequence source consumer choose operate byte unicode level anyway mean practically every string variable mercurial byte type something act like byte type since string literal python str type represents unicode would mean prefix almost every string literal mercurial b order placate python update every occurrence simple primitive could statically transformed automatically felt like busy work wanted spend time meaningful part python port could find interesting problem challenge toil mechanical conversion add little shortterm value simultaneously increasing cognitive dissonance quite possibly increasing odds introducing bug python word human work machine u thus sourcetransforming module importer born concede mercurial giant hack maintain correct thing allowed python port move forward without blocked tedious invasive transformation could introduce subtle bug including performance regression python perfect enemy good people time valuable sourcetransforming module importer allowed u unblock important project without sinking lot people time make tradeoff wo nt encourage others take approach porting python want mercurial source available gpl license custom module importer could adapted project minimal modification someone extract reusable code please leave comment update post link
522,Lobsters,vcs,Git & VCS,Mercurial 4.2 sprint notes,https://public.etherpad-mozilla.org/p/r.c6f0366a7e8047c663df5c12405d932b,mercurial sprint note,,
523,Lobsters,vcs,Git & VCS,[Help][Github] Looking for open source CONTRIBUTORS,https://github.com/WhitestormJS/whitestorm.js?1,help github looking open source contributor,,
524,Lobsters,vcs,Git & VCS,When the memory allocator works against you,https://glandium.org/blog/?p=3698,memory allocator work,mozillacentral gitcinnabar fit address space recent addition several thousand commits file basic memory resource tracking guppy heapy pdb objgraph pympler checkpointrestore userspace debian pythondbg reported python bug tracker brutal way gdbheap dude ram deep dive python us memory slide use instead arena python allocator entirely disabled pympler cinnabar pmo trackback,cloning mozillacentral gitcinnabar requires lot memory actually much memory fit address space optimized memory use first place instance gitcinnabar keep memory hex value byte rather raw value byte wrote initial prototype matter much close ish tipping point require memory time time passed mozillacentral grew suspect recent addition several thousand commits file made thing worse order come plan make thing better short longer term needed data added basic memory resource tracking collected data cloning mozillacentral must admit ready witnessed follow tale frustration plural expecting thing gotten worse master branch used data collection middle refactoring many change suspecting might affected memory usage however expecting see clone command using memory peak usage across process note memory size r minus shared also taking unexpected long time cloned large repository like mozillacentral scratch sure related recent growth size otherwise collected data well le time spent le memory ok definitely something wrong master wait minute slope gitremotehg process actually make kind sense mean understand starting finishing import manifest phase start middle end long finish wth first thing first since r variety thing checked proc pidsmaps confirmed indeed heap point reach google type something like python memory profile find various tool one result remembered used past guppy heapy armed pdb broke execution middle slope tried get memory stats heapy sigsegv ouch let try something else reached objgraph pympler sigsegv ouch tried working around crash long retrospectively hindsight somehow successful avoiding peaking smaller set object whatever despite attached process r able find data adding surely help getting point took close hour time retrospectively wish investigated using something like checkpointrestore userspace anyways decided really wanted try see whole picture smaller peak might missing something resolved look sigsegv getting using pympler collecting core dump happened guess debian pythondbg package contain debug symbol python package core dump useless since expecting fix something python downloaded source built ran command waited finally got backtrace first google hit crashing function exact unfixed crash reported python bug tracker patch crashing code f fbuiltins f ftstate interp builtins f ftstate null classic null deref added guard assessing break anything ran command waited sigsegv facedesk another crash line really use patched python yes time f ftstate interp null sigh player shoot finally still stuck accounted ok know python memory profiling tool entirely reliable let try heapy sigsegv sigh debug info heapy module crash happens sigh rebuild module debug info try backtrace look like heapy recursing lot look rsp compare address space proc pidmaps confirmed stack overflow let ugly thing increase stack size brutal way woohoo heapy tell even le memory used found far like half le yeah right clear got found gdbheap tool red hat david malcolm associated talk dude ram deep dive python us memory slide gdb attached would finally able rip python gut find memory went thought gdbheap tool found much heapy matter could coincidental oh kay remember exactly went mind since attached running process gdb typed following gdb prompt gdb call mallocstats truth finally unvealed memory allocator acting whole time ouput something like arena system byte number close use byte number close yes glibc allocator telling allocated memory holding onto must found really bad allocation pattern cause massive fragmentation one thing david malcolm talk taught though python us allocator small size glibc allocator know roughly adding difference r glibc said holding use byte reported somehow match found far time see thing evolved time entire clone process grabbed new data tracking evolution system byte use byte two thing note data relatively large gap glibc allocator say gotten system r minus shared size expecting corresponds small allocation python handle actual memory use going import manifest phase contrary evolution r suggests fact latter exactly gitcinnabar supposed work read changesets manifest chunk hold onto importing file throw away manifest changesets chunk one one import however extra bookkeeping requires additional memory expected le memory consuming keeping changesets manifest chunk memory point thought possible explanation since python glibc mmap ing arena might intertwined way make thing go well allocation pattern happening import manifest phase fact allocates free increasingly large buffer manifest manifest grow size mozillacentral history put theory work patched python interpreter making use malloc instead mmap arena aha thought definitely look much better le gap glibc say requested system r size importantly runaway increase memory usage middle nowhere preparing write post mixing allocator could unintended consequence comparison point went ahead ran another test python allocator entirely disabled time heh turn glibc acting alone much plausible theory still think mixing allocator unintended consequence note however reason python allocator exists valid without overall clone took almost minute since getting data gathered new data without python allocator master branch paint rather different picture original data branch much le memory use regression one would think fact much difference except spike end got worse noise import manifest phase got bigger implying larger amount temporary memory used latter may contribute allocation pattern throw glibc memory allocator turn tracking memory usage python rather painful tool paint complete picture hear python somewhat better regard hope true moment stuck reliable tool used turn pympler rebuilding python interpreter without allocator asking system allocator allocated data defined problem tackle easy spike end clone le easy working around glibc allocator behavior hunch kind allocation causing runaway increase r coincidentally halfway refactor code dealing manifest help dealing issue subject subsequent post cinnabar pmo response currently closed trackback site
526,Lobsters,vcs,Git & VCS,Utter Disregard for Git Commit History,https://zachholman.com/posts/git-commit-history/,utter disregard git commit history,tale two change jeff king peff commits truly lovely read detailed multipage writeup process nathansobo particular commit pull request unit change unit change limitation,look give two shit git commits shame okay maybe little shame dropping commits repository last five year gotten lot question along line rebase branch deal merge commit maybe even squash commits single commit merging like pedantic programmer debate answer usually care going grab another slice pizza thinking lot recently think interesting question consider instead developer take different approach repository history tale two change favorite commit author time jeff king peff like commits much even sepp blatter commit olympic committee need bribed nominate finalist number two committer git commits truly lovely read often diff may couple line likely include detailed multipage writeup code example performance benchmark commit message work gitcore unit change commit level commit designed comprehensive standalone measurement change introduced repository byproduct process contributor use git formatpatch git sendemail send patch mailing list change efficiently reviewed discussed merged master git maintainer would say commit process designed ensure speed quality safety know best example working efficiently within git flipside github best example work within githubcom ask probably defend process exact rationale allows move speed quality safety every single change enters production via pull request pull request necessarily commit nathan sobo nathansobo one favorite pull request author egregious example sake illustration take look particular commit atom repository fairly stereotypical commit githubbers hell even commit message emoji would get accepted gitcore click commit page take look pull request general format becomes immediately familiar extremely wellwritten accessible discussion change pull complete analysis performance impact effectively serf purpose one peff individual commits unit change two extreme viewing core unit change respective project git perspective likely ease use inside mailing list approach single atomic commit make sense github perspective individual commits become le valuable atomic unit pull request case historical context change easily found going back mailing list discussion pull request conversation product github culture tend throw lot commits project lead reference point refer back future particularly true frontend work requires experimentation know ultimately end sometimes even deliberately push commit immediately revert want record one possible experiment rebasing mistake single commit make harder see playing past lead dirty commit history use pull request see history said extremely apathetic debate whatever make sense team go ahead certainly successful project built either approach hybrid two limitation sometimes wish version control bit better control might interesting git new object commit object maybe experimentalcommit would get folded single commit went code review way developer could commit scratchpad experimentation mainline refer back future separate commit history code review could generated used clean history said actually want added cognitive overhead expanding git simple object model either seriously proposing fun envision system two mindset could live together bit harmoniously food thought next hot version control system perhaps anyway trying say git commit unfuck necessarily capital crime think little interesting look unit real work happens
527,Lobsters,vcs,Git & VCS,"Git Better! Learn Aliases, Settings, Tools, Background",https://www.sitepoint.com/git-better-learn-aliases-settings-tools-background/,git better learn alias setting tool background,subscribe customize git need alias tip incident report git theseus git quick statistic gitignoreio usability morning paper documentation gitscmcom gitscmcomdocs reference gitscmcombook article tagging gitscmcomdocs gitscmcombook final word subscribe,editorial sitepoint java channel newsletter send every friday subscribe chance using git work home even kitchen yes become popular ever people use lot great content discussing week editorial want share thing found particularly interesting customize git need first every git post mandated linus list couple awesome alias author think enlighten reader mine straight gitconfig alias st status branch short wat log graph decorate oneline cd checkout patch add patch unstage reset head unstagepatch reset head patch com commit amend commit amend noedit follow log follow p use git st get le cluttered version status git wat see colorful treelike difffree log output help remember taking break fact use often bash alias g go git st echo git wat next git cd created change branch quite often done making change try convince world knew go file change change git patch create separate commits something get staged use git unstage particularly git unstagepatch unstage either change change typing git commit became long shortened git com often forget new file git patch list created git amend amend last commit newest change last list git follow show change pertaining particular file unfortunately find way see commits without damn diffs often time care course one alias use tip give others work github lot might interested getting git check pull request something like git checkout tip allows clone git clone gh repo side note october github accidentally exposed data private repository incident report quite interesting nice tool visualize git repo evolved time git theseus stack plot total line count right code line survival rate interested statistic like commits per author per month even get suggestion reviewer give git quick statistic try also write lot gitignore file may want use gitignoreio writing gitignore requires gi intellij eclipse gradle gitignore usability knowing git great learning git tough especially part time user stand gain investing lot time learning inner working unfortunately git one leaky abstraction even simple everyday use collaborative environment requires quite number command good understanding going one man opinion either mit computer scientist santiago perez de rosso daniel jackson published paper topic two adrian colye summarized awesome blog morning paper git problem documentation git pretty documented good advise pretty much every question dime dozen know ask one source look particular official documentation gitscmcom two branch first gitscmcomdocs reference documentation put mildly best resource get started let check git tag reference example description start follows add tag reference refstags unless dlv given delete list verify tag unless f given named tag must yet exist one u keyid passed command creates tag object requires tag message unless msg f file given editor started user type tag message yes exactly wtf also reaction little unfair reference precise terse didactic stroll park looking latter free pro git book gitscmcombook friend article tagging start like vcss git ability tag specific point history important typically people use functionality mark release point better land seemingly incomprehensible site really help look url start gitscmcomdocs may well go gitscmcombook instead search problem hurry could challenge see much sense make reference believe every time come back little knowledge final word interested hear linus personally gave great talk google back video week hope great time long nicolai p forget subscribe
528,Lobsters,vcs,Git & VCS,Better Compression with Zstandard,http://gregoryszorc.com/blog/2017/03/07/better-compression-with-zstandard/,better compression zstandard,zstandard realtime data compression blog realtime data compression blog released august pythonzstandard zstandard awesome zstandard pied piper deflate zlib cpu frequencypower ramping property xeon versus nonxeon intel cpu mozillaunified firefox repository available google sheet flexibility speed versus size tradeoff zstd level faster zlib level achieving better compression zlib level multithreaded compression word compressor switch multithreaded api decompressors wont care blosc decompression speed using zlib high throughput scenario good chance bottleneck slowing application want throw cpu recompression later data rest take le space without sacrificing read performance dictionary support versatile c api pythonzstandard zstandard nt perfect framing format filed github issue thread mercurial developer list wording patent file conclusion github,think first heard zstandard compression algorithm mercurial developer sprint one end large table people uttering expletive sheer excitement developer gathering universal signal something awesome long story short facebook engineer shared link realtime data compression blog operated yann collet known author compression algorithm known insane speed people completely nerding excellent article data within showing beginning new general purpose lossless compression algorithm named zstandard promised betterthandeflatezlib compression ratio performance compression decompression mercurial meeting many u intrigued zlib used mercurial various functionality including ondisk storage compression wire protocol zlib operation frequently appear performance hot spot continue interested lowlevel performance software optimization highly recommend perusing realtime data compression blog absolute nugget info anyway month news zstandard zstd kept getting better promising release neared facebook engineer interact yann collet zstandard author employed facebook absolutely ecstatic zstandard potential toying around prerelease version absolutely blown away performance feature believed hype zstandard released august day later started pythonzstandard project provide fullyfeatured pythonic interface underlying zstd c api sacrificing safety performance ulterior motive leverage binding mercurial zstandard could first class citizen mercurial possibly replacing zlib default compression algorithm operation fast forward six month achieved many goal pythonzstandard nearly complete interface zstd c api even expose primitive c api batch compression operation leverage multiple thread use minimal memory allocation facilitate insanely fast execution expect dedicated post pythonzstandard soon mercurial ship pythonzstandard binding two mercurial peer talking exchange zstandard compressed data instead zlib firefox repository clone transfer size reduced mb zlib level mb zstd level default mercurial configuration using cpu zlib required compressor end cloning hgmozillaorg pregenerated zstd clone bundle hosted cdn using maximum compression mb size zlib work ongoing mercurial support zstandard ondisk storage bring considerable performance win zlib local operation learned lot working pythonzstandard integrating zstandard mercurial primary takeaway zstandard awesome post going extol virtue zstandard provide reason think use zstandard main objective lossless compression spend one resource cpu may reduce another io tradeoff usually made data either rest storage motion network even machine via software memory limiting factor performance compression needed use case mitigate io limiting resource swap different compression algorithm magically reduces cpu io requirement pretty exciting scale better efficient compression translate substantial cost saving infrastructure also lead improved application performance translating better enduser engagement sale productivity etc company like facebook zstandard google brotli snappy zopfli pied piper middleout invest compression today widely used compression algorithm world likely deflate software often interacts deflate via likely widely used software library world zlib least year old deflate getting bit long tooth computer completely different today pentium microprocessor debuted memory serf pun intended used dram transfer rate mb comparison modern nvme ssd like samsung pro read mb write mb word persistent storage today faster ram era deflate invented course cpu network speed increased well also completely different instruction set cpu welldesigned algorithm software take advantage trying say market ripe deflate zlib dethroned algorithm software take account reality modern computer remainder post use zlib standin deflate simpler zstandard initially piqued attention promising betterthanzlib compression performance compression decompression direction impressive nt unique brotli achieves example kept attention zstandard rich feature set tuning ability therefore versatility section describe benefit zstandard detail need throw obligatory disclaimer data number use benchmarking hard benchmark trusted many variable influence performance benchmark recent example surprised cpu frequencypower ramping property xeon versus nonxeon intel cpu tl dr xeon wo nt hit max cpu frequency core two busy meaning single lowthreaded benchmark likely misleading xeons unless change power setting mitigate conservative power ramping default change power setting reflect reallife usage reporting useful accurate performance number compression hard many variable care example every corpus different text json c photo numerical data etc exhibit different property fed compression could cause compression ratio speed vary significantly large input versus many smaller input algorithm work better large input library high peroperation overhead memory allocation use strategy performance vary significantly depending compression library allocates manages us memory implementation specific detail opposed core property compression algorithm since mercurial driver work zstandard data number report post mostly mercurial data specifically referring data mozillaunified firefox repository repository contains commits spanning almost year data within good mix text mostly c javascript python html cs source code freeform text binary like pngs mercurial layer add binary structure eg represent metadata delta diffs patching two mercurialspecific piece data use one mercurial bundle essentially representation data repository store mix raw fulltext data delta data mozillaunified repo uncompressed bundle produced via hg bundle mb piece data revlog chunk mix fulltext delta data specific item tracked version control frequently use changelog corpus fulltext data describing changesets commits firefox number quoted used chart post available google sheet performance data obtained running ubuntu linux mostly stock config benchmark performed memory mitigate storage io filesystem interference memory used cycle time clock pretty positive zstandard nt perfect corpus zstandard performs worse algorithm even one compare directly post mileage may vary please enlighten counterexample leaving comment rather large disclaimer way let talk make zstandard awesome flexibility speed versus size tradeoff compression algorithm typically contain parameter control much work choose spend cpu hopefully achieve better compression spend le cpu sacrifice compression ok fine factor like memory usage play simplifying commonly exposed endusers compression level reality often multiple parameter tuned use level standin represent concept even adjustable compression level performance many compression algorithm library tend fall within relatively narrow window word many compression algorithm focus niche market example super fast nt yield great compression ratio lzma yield terrific compression ratio extremely slow visualized following chart showing result compressing mozillaunified mercurial bundle chart plot logarithmic compression speed megabyte per second achieved compression ratio right data point better compression smaller output higher point faster compression ideal compression algorithm life top right mean compress well fast power mathematics push compression algorithm away top right observation highly vertical mean compression ratio limited variance extremely flexible speed data might well stick lower compression level higher value nt buy much opposite horizontal line mean consistently speed yielding different compression ratio word might well crank maximum compression nt significant adverse impact speed lzma zlib interesting exhibit variance compression ratio speed dimension let frank still pretty narrow lzma look pretty good shape perspective top speed slow mb small window flexibility mean often choose compression algorithm based speed versus size tradeoff willing make time choice often get baked software time pass software data gain popularity changing software swap support new compression algorithm becomes harder cost disruption cause technical debt really want single compression algorithm occupies lot space dimension chart curve high variance compression speed ratio algorithm would allow make easy decision choosing compression algorithm without locking narrow behavior profile would allow make completely different size versus speed tradeoff future adjusting config knob two application swapping compression algorithm needed guess zstandard fulfills role clearly seen following chart also add brotli comparison advantage zstandard brotli obvious zstandard compression speed go mb level mb level covering compression ratio one end zstd level faster zlib level achieving better compression zlib level fastest speed slower level end spectrum zstd level run mb slower lzma level produce file larger worth noting zstd c api expose several knob tweaking compression algorithm compression level map predefined set value knob possible set value beyond range exposed default compression level done basic experimentation made compression even faster sacrificing ratio course cover gap zstandard brotli end tuning curve wide span compression speed ratio game changer compression unless special requirement lightning fast operation provide special corpus zstandard ca nt handle well zstandard safe flexible choice general purpose compression multithreaded compression zstd contains multithreaded compression api allows compression operation leverage multiple thread output api compatible zstandard frame format nt require special handling decompression side word compressor switch multithreaded api decompressors wo nt care big deal reason first today advancement computer processor tend yield capacity core faster clock better cycle efficiency although many case benefit greatly modern instruction set like avx therefore better cycle efficiency second many compression library singlethreaded require consumer invent framing format storage model facilitate multithreading see blosc library lack multithreaded api compression library mean trusting another piece software writing multithreaded code following chart add plot zstandard multithreaded compression thread existing curve zstandard basically shifted straight nice mb speed singlethreaded compression zstd level increase mb thread faster faster previous fastest entry level output size increased mb singlethreaded compression scaling property multithreaded compression input terrific core saturated output size barely changed zstandard multithreaded compression api produce data compatible zstandard decompressor logically considered extension compression level mean already extremely flexible speed v ratio curve becomes even wider speed axis zstandard already justifiable choice extreme versatility throw native multithreaded compression api support flexibility tuning compression performance absurd enough core likely run io limit long exhaust cpu point crank compression level sacrifice much cpu willing burn good position decompression speed compression speed ratio tell half story compression algorithm except archiving scenario write read rarely probably care decompression performance popular compression algorithm like zlib le stellar decompression speed zlib decompression deliver many decompressed data set output end mb however inputcompressed end frequently fails reach mb even mb significant application reading data gbps network local disk modern ssds read several hundred mb application cpu bottleneck decoding data actually anything useful data application layer remember idea behind compression spend cpu mitigate io bottleneck compression make cpu bound undermined point compression skylake cpu running ghz cpu io bound xeon data center even slower even cpu bound xeons tend run much lower clock speed law thermodynamics require order run core package short using zlib high throughput scenario good chance bottleneck slowing application measure speed algorithm using firefox mercurial bundle following chart plot decompression speed versus ratio file first chart measure decompression speed input end decompressor second measure speed output end zstandard match great compression speed great decompression speed zstandard deliver decompressed output mb consuming input furthermore decompression speed mostly independent compression level although higher compression level require memory decompressor want throw cpu recompression later data rest take le space without sacrificing read performance nt done math probably breakeven point dedicated machine recompress terabyte petabyte data rest offset cost machine reduced storage cost zstandard fast decompressing consume compressed input mb performance often faster zlib many cpu put well gbps often desirable avoid bottleneck network layer also worth noting zstandard brotli comparable compression half data zstandard clear advantage decompression finally nt appear pay price multithreaded zstandard compression decompression side zstdmt chart dictionary support example far post used single mb piece input data measure behavior large data behave completely differently small data much compression algorithm find pattern came incoming data referenced old data instead uniquely stored data small nt much came reference often many small independent chunk input compress poorly compared single large chunk demonstrated comparing widelyused zip tar archive format surface thing container file employ compression different phase zip file zlib compress entry independently however tar file nt use compression internally instead tar file fed compression algorithm compressed whole observe difference real world data firefox ship file named omnija despite weird extension zip file file contains asset noncompiled code used firefox includes javascript html cs image power many part firefox frontend file weighs byte window firefox nightly byte using zip code generating omnija smarter zip creates smaller file zlib level compressed targz file directory byte size difference significant talking delivering bit end user case content within archive need individually addressable facilitate fast access item without decompress entire archive matter performance extreme example difference zip tar file firefox source checkout revision firefox mercurial repository zip file file version control byte versus byte targz file byte uncompressed spanning file using zstandard compressing file discretely compression level yield byte compressed data versus single stream without tar container compression algorithm different application method drastically different result impact input size compression performance compression ratio speed single large stream often better multiple smaller chunk still use case either nt enough data prefer independent access piece input like firefox omnija file robust compression algorithm handle small input well large input zstandard help offset inherent inefficiency small input supporting dictionary compression dictionary essentially data used seed compressor state compressor see data exists dictionary reference dictionary instead storing new data compressed output stream result smaller output size better compression ratio one drawback dictionary used decompress data mean need figure distribute dictionary ensure remains sync data producer consumer nt always trivial dictionary compression work enough repeated data pattern input extracted yield useful dictionary example include markup language source code piece similar data json payload http api request telemetry data often many repeated keywords pattern dictionary typically produced training existing data essentially feed bunch sample algorithm spit meaningful useful dictionary coherency data compressed better dictionary better compression ratio dictionary significant effect compression ratio speed let go back firefox omnija file compressing file discretely zstd level yield byte data produce byte dictionary training file within omnija total size file compressed discretely byte including dictionary total size byte byte smaller nondictionary compression zlibbased omnija byte zstandard plus dictionary compression would likely yield meaningful mb size reduction omnija file would make firefox distribution smaller may improve startup time since many file inside omnija accessed startup would make number people happy course firefox nt yet contain zstd c library adding use case may make sense firefox ship brotli library brotli support dictionary compression similar performance characteristic zstandard uh someone may want look transitioning omnijar zlib benefit dictionary compression nt end compression ratio operation dictionary faster well following chart show performance compressing mercurial changeset data describes mercurial commit firefox repository discrete input spanning byte mean byte median byte note measurement conducted python therefore may introduce overhead aside zstd level dictionary compression zstandard faster zlib level across board suspect oneoff oddity zstd compression parameter level corpus zstd level faster level weird also worth noting nondictionary zstandard compression similar compression ratio zlib demonstrates intrinsic difficulty compressing small input real takeaway data speed difference dictionary compression enabled dictionary decompression faster nondictionary decompression already respectable mb decompression speed measured output end becomes mb zlib level mb swapping dictionary compression make thing faster take cpu time zlib decompress corpus mercurial taught use zstandard dictionary compression changelog data certain operation corpus complete faster significant worth stating zstandard nt compression algorithm library support dictionary compression brotli zlib well example zstandard support dictionary compression seems polished library seen multiple apis training dictionary sample data brotli none brotli documentation say generate dictionary far tell dictionary compression definitely advanced feature applicable certain use case lot small similar data denying take advantage dictionary compression may rewarded significant performance win versatile c api spend lot time day higherlevel programming language like python javascript time interact compression highlevel language lowlevel compression apis provided compression library likely hidden bundled nice friendly abstraction suitable higherlevel language often many feature lowlevel api exposed call nt get appreciation good bad feature rich lacking lowlevel api part writing pythonzstandard spent lot time interfacing zstd c api part evaluating compression library use mercurial looking c apis library python binding takeaway appreciation quality zstd c api many compression library apis either simple complex zstandard goldilocks zone aside minor missing feature c api adequate release really appreciate zstd c api provides high medium lowlevel apis highest level throw pointer input output buffer operation medium level use reusable context holding state parameter operation lowlevel calling multiple function shuffling byte around maintaining state potentially bypassing zstandard framing format process different level give almost total control everything critical performance optimization writing binding higherlevel language may different expectation behavior software performance achieved pythonzstandard nt easily possible compression library lacking api design oftentimes interacting c library think function let x life would much easier rarely experience zstandard c api well thought almost feature wantneed pretty easy use wo nt notice difference significant advantage zstandard long run binding written people highquality experience c api allows zstandard nt perfect pretty positive zstandard far post fear sounding like fanboy blinded admiration ca nt see fault nothing perfect need point negative zstandard aside put little faith word uttered someone ca nt find fault something praise first framing format bit heavyweight scenario frame header least byte input byte recording original source size checksum result byte frame zlib contrast byte scenario storing ten thousand compressed record use case mercurial frame overhead matter make difficult compressed zstandard data small zlib small input worth noting zlib nt store decompressed size header pro con discus eventual post pythonzstandard achieves optimal performance frame overhead matter zstd c api expose block api operates level framing format allowing roll framing protocol also filed github issue make byte magic number optional would go long way cutting frame overhead second c api yet fully stabilized number function marked experimental nt exported shared library available via static linking ton useful functionality including lowlevel compression parameter adjustment digested dictionary reusing computed dictionary across multiple context multithreaded compression api pythonzstandard make heavy use experimental apis requires bundling zstd pythonzstandard statically linking known version functionality could change time bit annoying especially distro packagers third lowlevel compression parameter underdocumented think understand lot nt obvious consider adjusting default compression level seem work pretty well map reasonable compression parameter time noticed tweaking thing slightly result desirable improvement wish guide sort help tune parameter fourth dictionary compression still bit complicated handwavy liking measure obvious benefit using largely box corpus nt always win cost training dictionary high justify using outside scenario pretty sure beneficial use sure compression level work best many sample need fed dictionary trainer training algorithm use etc nt enough also concept contentonly dictionary use fulltext dictionary useful deltaencoding scheme compression effectively act like diffdelta generator instead using something like myers diff topic interest thread mercurial developer list yann collet discus fifth patent right grant wording patent file zstandard project may concern lawyer zstandard covered standard bsd license supplemental patent file may scare lawyer enough wo nt able use zstandard may want talk lawyer using zstandard especially company like initiating patent lawsuit company wish reserve right many company condition upon license terminates note long history facebook consumer open source software regarding language patent file search react patent grant read sixth finally zstandard still relatively new totally relate holding something new shiny prof said zstandard framing protocol escape hatch future need project proved day know handle backwards future compatibility issue considering facebook others using zstandard production would nt worried think biggest risk people like writing code experimental c apis even change experimental apis past several month minor losing sleep may seem like long concerning list issue relatively minor language patent file may showstopper perspective biggest thing zstandard going youth improve age usually pretty conservative adopting new technology gotten burned enough time prefer neophyte field testing upside using zstandard potentially drastic performance efficiency gain translate success versus failure million dollar saved infrastructure cost productivity gain willing take chance conclusion corpus thrown zstandard handily outperforms zlib almost every dimension even manages best modern compression algorithm like brotli many test underlying algorithm technique used zstandard highly parameterized lending variety use case embedded hardware massive data crunching machine hundred gigabyte memory dozen cpu core c api welldesigned facilitates high performance adaptability numerous use case battery included providing function train dictionary perform multithreaded compression zstandard backed facebook seems healthy open source culture github interaction yann collet positive seems great project maintainer zstandard exciting advancement data compression therefore entire computing field someone lived world zlib year casual user compression thought zlib good enough use case attest zstandard game changing enlightened advantage zstandard never casually use zlib slow inflexible need modern computing use compression highly recommend investigating zstandard updated post include paragraph supplemental license patent file
529,Lobsters,vcs,Git & VCS,Git as a NoSql database,https://www.kenneth-truyers.net/2016/10/13/git-nosql-database/,git nosql database,git nosql database git blob git tree git commits immutable git reference mutable data efficiency versioning nosql connectivity transaction backup replication querying concurrency speed video tree size combining value transaction merging conclusion,git manpages state stupid content tracker probably used version control system world strange since describe source control system fact use git track type content create git nosql database example reason say stupid manpages make assumption content store underlying git model rather basic post want explore possibility using git nosql database keyvalue store could use file system data store use git add git commit save file saving document echo id name kenneth git add git commit added file reading document git show id name kenneth work using file system database path key value whatever store disadvantage need write data disk save git saving data multiple time file storage deduplicated lose benefit git provides u automatic data deduplication want work multiple branch time need multiple checked directory want rather bare repository one none file exist file system git database let look git data model plumbing command make work git nosql database git contentaddressable file system mean simple keyvalue store whenever insert content give back key retrieve content later let create content initialize repository mkdir myrepo cd myrepo git init save content echo id name kenneth git hashobject w stdin hashobject git plumbing command take content store database return key switch tell store content otherwise would calculate hash switch tell git read content input instead file key return based content run command machine see return exact content database read back git catfile p id name kenneth git blob keyvalue store one object blob one problem update update content key change would mean every version file remember different key want instead specify key use track version git tree tree solve two problem need remember hash object version possibility storing group file best way think tree like folder file system create tree follow two step create populate staging area git updateindex add cacheinfo write tree git writetree also give back sha read back tree git catfile p blob point object database look follows modify file follow step add blob echo id name kenneth truyers git hashobject w stdin create populate staging area git updateindex add cacheinfo write tree git writetree leaf u following situation two tree represent different state file help much since still need remember value tree get content git commits one level get commits commit hold piece key information author commit date created created message single tree object point one previous commits consider commits single parent commits multiple parent merge commits let commit tree commit first tree without parent echo commit version git committree commit second tree first commit parent echo commit version git committree p leaf u following state built complete history file could open repository git client see tracked correctly demonstrate output running git log git log stat commit version file changed insertion commit version file changed insertion get content file last commit git show id name kenneth truyers still though remember hash last commit object created part git object database one characteristic database store immutable object write blob tree commit never modify without changing key also delete least directly git gc command delete object dangling git reference yet another level git reference reference part object database part reference database mutable different type reference branch tag remote similar nature minor difference moment let consider branch branch pointer commit create branch write hash commit file system echo gitrefsheadsmaster branch master pointing first commit move branch issue following command git updateref refsheadsmaster leaf u following graph finally able read current state file git show id name kenneth truyers command keep working even add newer version file subsequent tree commits long move branch pointer latest commit seems rather complex simple keyvalue store however abstract thing client application specify branch key come back different post though want discus potential advantage drawback using git nosql database data efficiency git efficient come storing data mentioned blob content stored hash calculated try adding whole bunch file content empty git repository checking size git folder versus size disk notice git folder quite bit smaller stop git tree change file sub tree git create new sub tree reference tree affected following example show commit pointing hierarchy two sub folder want replace blob git replace item changed keep reference replacing blob different file committing change graph look follows new object marked red see git replaced necessary item referenced already existing item although git efficient reference existing data every small modification would result complete copy would still get huge repository mitigate automatic garbage collection process git gc run look blob remove blob instead store single copy base data together delta version blob way git still retrieve unique version blob need store data multiple time versioning get fully versioned system free versioning also come advantage deleting data ever seen example like sql database id name deleted kenneth ok simple record like usually whole story data might dependency data whether foreign key implementation detail want restore chance isolation git simply matter pointing branch different commit get back correct state database level record level another practice seen id street lastupdate town rd practice even le useful know updated information actually updated previous value whenever update data actually deleting data inserting new one old data lost forever git run git log file see changed changed git rich toolset use explore manipulate data focus code mean use data following nonexhaustive overview tool come top mind within basic git command use git diff find exact change two commits branch tag use git bisect find something stopped working change data use git hook get automatic change notification build fulltext index update cache publish data revert branch merge external tool use git client visualize data explore use pull request one github inspect data change merged gitinspector statistical analysis git repository tool work git work database nosql keyvalue store get usual advantage nosql store schemaless database store content want even json connectivity git work partitioned network put everything usb stick save data connected network push merge get back online advantage regularly use developing code could life saver certain use case transaction example committed every change file necessarily also commit various change single commit would make easy roll back change atomically later long lived transaction also possible create branch commit several change merge discard backup replication traditional database usually bit hassle create schedule full backup incremental backup since git already store entire history never need full backup furthermore backup simply executing git push push go anywhere github bitbucket selfhosted gitserver replication equally simple using git hook set trigger run git push every commit example git remote add replica git replicaservercom appgit cat githookspostcommit binsh git push replica fantastic use git database hold disadvantage well querying query key piece good news structure data folder way easily get content prefix query limit unless want full recursive search option build index specifically querying scheduled basis staleness concern use git hook update index soon commit happens concurrency long writing blob issue concurrency problem occurs start writing commits updating branch following graph illustrates problem two process concurrently try create commit case see second process modifies copy tree change actually working outdated tree commits tree lose change first process made story applies moving branch head time commit update branch head another commit might get could potentially update branch head wrong commit way counter locking writes reading copy current tree updating head branch speed know git fast context creating branch come commits per second actually fast writing disk time notice usually many commits per second writing code least running test local machine got limit commitssecond brandon keeper showed result video year ago got commits second seems line hardware advance may brought commitssecond enough lot application also theoretical maximum local development machine lot resource various factor affect speed tree size general prefer use lot subdirectory instead putting document directory keep write speed close maximum possible reason every time create new commit copy tree make change save modified tree although might think affect size well actually case running git gc make sure save delta instead two different tree let take look example first case blob stored root directory add file copy tree contains item add one save could potentially lengthy operation size tree second case level tree sub tree blob last level file case want add blob need copy entire hierarchy need copy branch lead blob following image show tree copied amended using sub folder instead copy tree entry copy tree entry quite bit faster data grows want use sub folder combining value transaction need commitssecond chance need able roll back individual basis case instead committing every change could commit several change one commit write blob concurrently could potentially write file concurrently disk commit save repository drawback want raw speed way go way solve add different backend git immediately flush content disk writes inmemory database first asynchronously flush disk implementing easy though testing solution using connect repository tried using voronbackend available opensource well variant us elasticsearch improved speed quite bit lose benefit able inspect data standard git tool merging another potentially pain point merging data different branch long merge conflict actually rather pleasant experience enables lot nice scenario modify data need approval go live run test live data need revert work isolation merging data essentially get fun branch get development different level problem merge conflict merging data rather difficult always able make handle conflict one potential strategy store merge conflict writing data read present user diff choose one correct nonetheless difficult task manage correctly conclusion git work nosql database well circumstance place time think particularly useful following case hierarchic data inherent hierarchical nature need able work disconnected environment need approval mechanism data aka need branching merging case good fit need extremely fast write performance need complex querying although solve indexing commit hook enormous set data write speed would slow even go use git nosql database let know thought
530,Lobsters,vcs,Git & VCS,Concerning Git's Packing Heuristics,https://github.com/git/git/blob/3bc53220cb2dcf709f7a027a3f526befd021d858/Documentation/technical/pack-heuristics.txt,concerning git packing heuristic,,concerning git packing heuristic oh really stupid question go learn detail git packing heuristic careful ask follower git please open git irc log turn february rare occasion joined king git linus torvalds linus nathaniel smith nj floor seek enlightenment others present silent let listen nj oh really stupid question go learn detail git packing heuristic google avail reading source nt help lot wading whole mailing list seems le efficient bold start plea help combined simultaneous tripart attack tried true mainstay quest enlightenment brash accusation google useless hubris maligning source heresy disdain mailing list archive woe pasky yes packingrelated delta stuff somewhat mysterious even ah modesty linus nj nt think doc exist something nt think anybody else even really got involved rest git others busy especially junio packing nobody touched cryptic yet vague linus style sure wise men interpret apology argue merely statement fact nj guess next step read source build certain level gumption first indeed point linus packing heuristic actually really really simple bait linus strange switch ought linus remember git really nt follow file generate list object sort list according magic heuristic walk list using sliding window seeing object diffed another object window write list recency order traditional understatement nj suspect missing precise definition word magic traditional insight pasky yes babellike confusion flowed nj oh hmm sure sliding window mean either pasky iirc appeared object reading code casually simply nt sound good heuristic though nj recency order okay think clear nt even realize much nt realizing ah grasshopper thus enlightenment begin anew linus magic actually theory totally arbitrary order give working pack ordered talking ordering sliding delta window let talk recency order important one way nj right want working way pack thing together could use cat save trouble waaait linus recency ordering basically put object physically pack order reachable head important nj okay linus important thing give pack good locality keep object close head whether old new reachable head head pack pack actually absolutely wonderful io pattern read important linus recency ordering totally useless deciding actually generate delta delta ordering something else delta ordering wait first sort basename object defined name object first reached generating object list within basename sort size object always sort different type separately commits first exactly close nj first reached thing important need way break tie since object may reachable many way yes clarify linus point really random heuristic ordering totally unimportant correctness help lot heuristic give clumping thing likely delta well important point secretly research included result fair changed time magic revisionistic history draw upon entry git irc log father birthday march gitster quote linus rewritten bit wait first sort type different object never delta sort filenamedirname hash basename occupies top bitsperintdirbits bit bottom dirbits hash leading path element thin pack object going pack know sorted earlier object finally sort size larger smaller one swellfoop clarification obscurification nonetheless authoritative cryptic yet concise even solicits notion quote source code clearly study needed gitster sort order mean delta different object type prefer delta object full path allow file name different directory always prefer delta object going send prefer delta larger object lot removal penultimate rule thin pack used side known object thin pack thinking thin pack ask jdl thin pack gitster use objectsedge revlist upstream packobjects pack transfer protocol negotiates woo hoo cleared right gitster two direction push fetch see push pull often confusion started casually mentioned gitster push gitsendpack invokes gitreceivepack end receivepack say commits sendpack look computes missing end thin could default direction fetch gitfetchpack gitclonepack invokes gituploadpack end via ssh talking daemon two case fetchpack k clonepack one fetchpack without k clonepack fetchpack k keep downloaded packfile without expanded use thin pack transfer otherwise generated pack delta without base object pack fetchpack without k explode received pack individual object automatically ask uploadpack give u thin pack uploadpack support ok uh let return previous conversation still progress nj basename mean something like tail end path file object dir object per basename declare commit tag object basename something luckily point gitster clarified u might add trick make file might similar located close hash bucket based file name used foomakefile barbazquuxmakefile makefile landed bucket due common basename makefile however land close bucket algorithm allows bucket close bucket considered delta candidate rationale essentially file like makefiles often similar content matter directory live linus played around different delta algorithm making delta window bigger big sliding window make expensive generate pack need compare every object ton object number trivial heuristic basically boil nt bother even trying delta pair tell beforehand delta nt worth due size difference take previous delta result account decide ok point trying one worse end result packing actually size efficient somewhat cpuwasteful hand since really supposed maybe month night nobody really seems care nice engineering touch find nt matter proclaim nonissue good style nj repeat see following start getting list object want pack sort heuristic basically lexicographically tuple type basename size walk list calculate delta object last n tunable parameter object pick smallest delta vastly simplified essence linus correct nj picked delta fulltext represent object resort recency write order linus yup small detail course shoe factor linus limit delta depth another magic value right window delta depth magic value nj hrm intuition end really bad io pattern thing want near actually reconstruct may jump random way linus write delta nt yet written object delta write base object first reconstruct actually get nice io pattern larger object tend recent linus law file grow actively try generate delta larger object smaller one mean topoftree seldom delta ie delta practice backwards delta reread whole paragraph linus slipped linus law u important let make sure clarify point nj point practice delta order recency order match quite well linus yes another nice side yes designed way reason generate delta larger object actually big space saver nj hmm last comment nt yet written object delta write base object first seems like would make fact mostly irrelevant even practice would wander around much fact bruteforce say case might wander nt linus yes notice rule write base object first delta recent mean actually delta refer base object close delta object happens delta needed generate old object linus see yeah missed first two three reading linus keep front pack dense front pack never contains data nt relevant recent object size optimization come use xdelta true many delta algorithm removing data cheaper size adding data remove data need say copy byte n contrast delta add data say add byte actual data go nj quit read error connection reset peer linus uhhuh hope nt blow nj mind nj joined channel git pasky silent observer amused course nj expected omniscient linus nj miss anything ok spell geek humor nj actually connected little bit would know missed anything disconnected benevolent dictator sense humor well noted nj stupid router gremlin whatever cheap shot cisco take em nj yes notice rule write base object first delta recent getting lost order let reread writeout order recent least recent conceivably could opposite way sure said though connection back home logging read said paying attention omniscient trick detailed linus yes always write recent first nj yeah got part deeperinhistory stuff worse io characteristic one sort nt care linus caveat recent need older object delta hey shrinking sometimes happen write old object delta nj happened linus anyway packfile could easily denser still used streaming git protocol ondisk pessimizations actually madeup word madeup word used setup later optimization real word linus particular packfile compressed compressed one object time actual compression factor le could theory mean nice randomaccess simple index object name location packfile translation nj assuming real win deltaing large small homogeneous statistic gzip run put byte one place another putting larger blob win compression actually compression strategy delta individually gzipped whole file gzipped somewhere compression right reality irc set example pasky read rest morning really go sleep hope whatsoever today exam gnite heh linus pasky gnite nj pasky luck linus right large small matter exactly compression behaviour noncompressed probably would nt make difference nj yeah linus anyway even trying claim packfiles perfect tend nice balance density v easeof use gasp ok saved fair engineering trade close call fact linus reflects basic engineering fundamental design option etc linus importantly allow git still conceptually never deal delta whole object store problem discussed bad hugefile behaviour git list day mean basic git concept really really simple straightforward quite stable think much result simple basic idea never confusion going bug happen simple bug bug actually get object store detail wrong almost always obvious never go anywhere nj yeah nuff said linus anyway bed got three kid get early morning send need beauty sleep nj nj appreciate infodump really failing find detail git pack know rest story
532,Lobsters,vcs,Git & VCS,"Mercurial, SHA-1, and Trusting Version Control","http://gregoryszorc.com/blog/2017/02/28/mercurial,-sha-1,-and-trusting-version-control/",mercurial trusting version control,announced collision git mailing list google collision make git vulnerable attakcs thirdparties repo maintainer mercurial security article revlog matt mackall current state mercurial git rely primarily trust hash primary defense malicious actor proposal easier flexible commit signing cryptographically meaningful chainofcustody patch,internet went crazy thursday google announced collision spawned lot talk impact version control linus torvalds creator git weighed git mailing list google also post like collision make git vulnerable attakcs thirdparties repo maintainer outlining history git mercurial side matt mackall creator mercurial authored mercurial security article nt read matt article please continuing like contribute take problem slant towards mercurial also comparing mercurial exposure collision git since security topic like explicitly state cryptographer however worked number software component securitycryptography like firefox sync pretty confident saying grasp cryptographic primitive security technique better average developer let talk mercurial exposure collision technical level mercurial like git vulnerable collision mercurial vulnerable logical storage mechanism like git index tracked content two object differing content content version control could changed detecting would difficult impossible obviously bad mercurial exposure collision nt severe git understand understand store data git logical storage model contentaddressable keyvalue store value object git parlance consist header identifying object type commit tree blob tag size data string raw content thing stored common content type file content blob list file tree description commit commit key blob store hash object git object go single namespace git repository store beneficial sideeffect data deduplication file added git repository blob object identical stored git detrimental sideeffect hash collision possible two object irregardless type location repository mercurial logical storage model also contentaddressable however significantly different git approach mercurial logical storage model allocates separate substore tracked path run find hgstore name inside mercurial repository see file separate file path committed data hg add footxt hg commit datafootxti file holding data footxt also special file holding data commitschangesets file list respectively file revlog roughly equivalent ordered collection git object specific tracked path mean mercurial store consists n discrete independent namespaces data contrast git single namespace benefit drawback opposite pointed git mercurial nt automatic contentbased deduplication provide defense hash collision logical path independent others mercurial repository happily commit two file different content hash robust git hash collision isolated single logical path revlog word random file added repository directory x hash collision file directory wo nt cause problem mercurial also differs significantly git term hash obtained git hash computed raw content preceded header derived directly object role size takeaway header static derived trivially mercurial hash computed raw content preceded header header consists byte hash e parent revision revlog content added chaining hash mean header always static always trivially derived mean content stored revlog multiple hash also mean possible store differing content hash collision within revlog condition mercurial still barf scenario hash collision within content tracked revlog different git behavior content always result git object hash worth noting collision data git object header yet encountered wild takeaway paragraph mercurial storage model slightly robust hash collision git multiple isolated namespaces storing content hash chained previous content collision achievable someone manages create collision hash used version control mercurial storage layer able cope better git concern weakness security storage robustness disaster scenario version control attacker could replace content version control possibly undetected one generate hash collision possible mercurial chaining content provides defense nt sufficient agree matt mackall present time bigger concern content safety collision namely attacker much easier introduce subtle bug contains security vulnerability introduce collision also much easier hack canonical version control server user automated agent permission push server add bad commit many project nt adequate defense detect bad commits ask bad actor pushed bad commit repository would detected keep mind spoofing author committer metadata commits trivial current state mercurial git rely primarily trust hash primary defense malicious actor desire move away radar mercurial project year year revlog data structure allocated byte hash using byte topic weakness desire move something stronger come developer sprint past several year however never pressing enough act bigger problem easy change mercurial likely would done already changing easy soon introduce new hash format repository potentially locked legacy version mercurial software accessing repository unless repository store multiple hash allows legacy client access legacy hash number concern legacy compatibility something mercurial care deeply user experience even performance hashing even float top performance profiling mercurial operation sure topic discussed heavily upcoming developer sprint week mercurial eventually replace think biggest improvement mercurial git matter make repository security providing better mechanism tracking auditing trust existing mechanism gpg signing every commit nt practical nonstarer many workflow rely gpg notorious enduser usability problem would prefer version control tool subject toiling gpg thought topic considerably authoring proposal easier flexible commit signing also related proposal establish cryptographically meaningful chainofcustody patch good idea like userfacing cryptography devil detail hard problem solve like managestore public key used signature prior art version control tool see monotone far solved problem end day still left trust set key used produce signature version control keep using cryptographically strong hash mitigate collision within storage layer prevent content swapping employ cryptographic signature tracked data still issue trust version control give tool establishing auditing trust version control also provide tool managing trust relationship end day actual act trusting trust boil people making decision possibly corporate project policy always weak link therefore malicious actor attack best version control tool give user capability tool run secure verifiable repository bad content inevitably added ca nt blame version control tool poor security
533,Lobsters,vcs,Git & VCS,SHA1 collisions make Git vulnerable (2005),http://www.metzdowd.com/pipermail/cryptography/2017-February/031623.html,collision make git vulnerable,cryptography collision make git vulnerable attakcs thirdparties repo maintainer gnu toadcom torvalds osdlorg gnu toadcom gnu newtoadcom http torvalds osdlorg schoen efforg gnu toadcom kees osdlorg gnu toadcom zorknet daw csberkeleyedu gnu toadcom http http wwwkernelorgpubsoftwarescmcogito http wwwkernelorgpubsoftwarescmcogitoreadme information cryptography mailing list,cryptography collision make git vulnerable attakcs thirdparties repo maintainer john gilmore gnu toadcom sun feb est tried fix git young would easy linus rejected suggestion nt seem understand threat wired assumption deeply git next year nasty people teach threat model ungentle manipulation many people source tree john torvalds osdlorg gnu toadcom subject broken sure parameterize hash function date sat apr john gilmore gnu newtoadcom interesting watching git evolve one comment code contributor throwing around term hash lot nt broken possible generate two different blob hash hash totally failed onemachine oneday crack still hard crack jon calla bruce schneier said attack always get better never get worse time walk run fire exit nt see smoke fire alarm gone time u migrate away see summary bibliography http since nt reliable longterm hash function today change hash function year foresight save much later pain keeping big tree like kernel secure either want reexamine git security assumption implication multiple different blob intentionally generated hash initial guess changing hash function easier making git work presence unreliable hashing git source need install better hash function one invented make sure code repository modular nt care hash function use whether mean making single git repository able use several hash function merely making possible one repository us another us future wonderhash system design decision git contributor make simplest case copying repository one hash function new repository using different hash function change hash also content object use hash value point object object signed eg pgp key signature valid new copy adding support well would make likely least git wiredin dependency name length hash let explore system level issue would nt build assumption different hash function produce different length output either though two happen enjoy john gilmore date mon apr pdt linus torvalds torvalds osdlorg seth david schoen schoen efforg cc john gilmore gnu toadcom kees cook kees osdlorg subject john gilmore gnu toadcom pls forward linus broken inreplyto zorknet concern interesting watching git evolve one comment code contributor throwing around term hash lot nt broken possible generate two different blob hash hash actually even theoretical breaking proven preexisting hash ie need control starting point importantly git really us hash necessarily cryptographically secure one iow security nt actually depend hash cryptographic git really want avoid collision ie want hash content well definitely even would suffice bit instead obviously add space always bonus course fact also expensive try fool big bonus since mean another layer real security model real security come fact git distributed mean developer never actually use public tree development example got two separate firewall layer nat internet personal tree machine never actually trust use external tree push result something centralized scm server like svn traditional crud centralized one obviously accessible developer mean forced open enough much easily attackable also mean single point failure also security standpoint contrast even somebody compromise machine automatically compromise tree developer still pristine object never even fetch object name ie hash one already word really break git archive need able replace existing hashed object one hash thing breakage shown possible already replacement still honor git consistency check even blob object need valid header valid length sufficient find another object hash right thing find object valid header hash right thing break archive already object replace quietly enough nobody notice quite frankly worth worrying hell lot easier break source archive mean ie pay developer ten million dollar insert back door want inserted linus david wagner daw csberkeleyedu subject linus torvalds broken date fri apr john gilmore gnu toadcom nt totally broken yet attack still requires least work find collision knew attack never get harder easier one publicly reported finding collision yet thought chinese team reported four pair colliding plaintexts nt revealed exactly generated distinguishing finding generating collision one question would impact collision system word harm find collision efficiently familiar source mgmt system little harm one collision maybe nt matter much mailing list git http somewhere told find source include design document work ah http wwwkernelorgpubsoftwarescmcogito http wwwkernelorgpubsoftwarescmcogitoreadme basically assumes deeply embedded two blob hash blob destroy integrity feeding various blob happen hash value seems think possible attack someone would go modify database hand rather feeding new input confuses john p added feb assume nsa six month year ahead open academicindustrial sector attacking would already subverted using similar attack hmm check cmp diff source nt trust hash say two tree second step comparing tree file directly making input pattern cause cmp diff always say yup difference would allow fraudulently inserted modification spread much information cryptography mailing list
534,Lobsters,vcs,Git & VCS,Linus Torvalds: I thought I'd write an update on git and SHA1...,https://plus.google.com/+LinusTorvalds/posts/7tp2gYWQugL,linus torvalds thought write update git,one account google sign google account,one account google sign google account
536,Lobsters,vcs,Git & VCS,Webkit breaks their SVN with shattered SHA1 PDFs,https://bugs.webkit.org/show_bug.cgi?id=168774#c29,webkit break svn shattered pdfs,log account,authorized access bug see bug must first log account appropriate permission please press back try
537,Lobsters,vcs,Git & VCS,Linus' reply on Git and SHA-1 collision,http://marc.info/?l=git&m=148787047422954,linus reply git collision,prev list next list prev thread next thread git collision found linus torvalds torvalds linuxfoundation org mail gmail com message body prev list next list prev thread next thread configure news add list korelogic,prev list next list prev thread next thread list git subject collision found linus torvalds torvalds linuxfoundation org date messageid mail gmail com download raw message body thu feb joey hess id joeyhname wrote iirc someone working parameterizing git assumption repository could eventually use secure hash far gotten still many constant gitgit head nt think necessarily want change size hash use different hash use bit since collision valid pdf file collision valid git commit tree object probably able constructed nt seen attack yet git nt actually hash data prepend typelength field usually tends make collision attack much harder either make resulting size able also edit size field header pdf nt issue fixed header fairly arbitrarily add silent data middle nt get shown pdf make much better attack vector exactly fairly opaque data format git opaque data place hide thing commit object intentionally example definition opaque data fairly secondary put another way doubt sky falling git source control management tool want migrate another hash yes game like people want say probably nt seen attack detail bet fact separate size encoding make much harder git object first place b probably easily add extra sanity check opaque data make much harder hiding random data attack pretty much always depend linus prev list next list prev thread next thread configure news add list sponsored korelogic
538,Lobsters,vcs,Git & VCS,"Git Rev News Edition 24 (February 22nd, 2017)",https://git.github.io/rev_news/2017/02/22/edition-24/,git rev news edition february,git merge fosdem software freedom conservancy free software use commitwarscommitwars gambuzzigambuzzigithubio torvaldslinux kuberneteskubernetes cocoapodsspecs humongous window repository gvfs git virtual file system opensource project rfc add support downloading blob demand git documentation fake gitmanpage generator purpose concept misfit redesign git git rev news edition gitless ohshitgit git rev news edition scaling mercurial facebook update git rev news edition gitlogcompact git rev news edition git rev news edition gitsham pipeline gitaliases wiki page list useful alias ledgercli hledger plain text accounting source gogit gitduet rfc proof concept support multiple author junio advice earlier year,intro welcome software freedom conservancy karen sandler software freedom conservancy karen wrote intro talk git merge fosdem fosdem year started two day early git merge annual git conference git merge organized github far three year organization conference donated proceeds ticket sale conservancy hoping get git merge one year excited organizing team asked talk introducing conservancy got kick conference introduced explaining investigating heart condition defibrillator caused become passionate software freedom delved conservancy particular talked work done git talk good impact day long able speak people excited conservancy thinking ethic software always especially thrilling speak member project conference love meeting leadership committee member also putting face name see go monitoring activity project karen pacemaker implanted defibrillator worried software run everyone know software potentially buggy asked see source code refused software proprietary kickoff starting software freedom conservancy conservancy legal work handle foundation fundraising give advise licensing trademark protection git one sfc member project karen defibrillator metaphor software rely said free software use top ten worst repository host github carlos martin nieto github carlos give insight challenge github meet hosting million user infrastructure make repo worst varies huge amount file data fork tag contributor push worst carlos showcased everyday example community organizing commit war thousand user committing repo time see get commitwarscommitwars another repository hosting mirror data pushed every minute gambuzzigambuzzigithubio others large network project large long history andor large number file like torvaldslinux data disk go extreme use githubbased workflow extensive use pullrequests issue like kuberneteskubernetes pull request total open issue plus closed large number commits like cocoapodsspecs commits though nothing linux commits carlos say first two please scaling git microsoft saeed noursalehi microsoft saeed talked scaling git microsoft developer started humongous window repository would literally take almost day clone repository git assumption generally work well reasonable repository still problem solved beyond help git lf similar solution implemented gvfs git virtual file system opensource project released microsoft helped lot window repo git experience window repo gvfs hr min clone hr sec checkout min sec status min sec commit gvfs basically file system driver combined readobject hook git persistent daemon process driving said hook readobject hook new concept microsoft introduced git solution allows fork git populate file download object commits tree blob demand saeed started live demo vso shown file got populated hydrated content downloaded first access first use could also see live jsonbased protocol used communicate gvfs daemon service tree grow sky asked searching globally repo answer yes still painful browsing history also problem would hydrate object though q session suggestion running git log server like centralized version control system currently gvfs limited m window requires hacked git microsoft also care platform message hiring especially know file system mac linux microsoft also working core git integration see discussion thread started ben peart rfc add support downloading blob demand wrong git santiago perez de rosso software design group mit according santiago git hard learn documentation scary presented one another slide online version git documentation fake gitmanpage generator also jokingly provoking slide commits easily represented manifold multi dimensional space phd work santiago surveying user response usability git experimenting fundamental improvement git experience talk covered new theory topdown design focusing purpose concept underlying software material expanding purpose concept misfit redesign git paper covered git rev news edition santiago showed complexity understanding concept like stash detached head untracked file relate concept purpose vcs experiment improving git usage presented gitless experimental version control system built top git also covered edition dvcs branch includes working dir dirty file never prevent branch switch similar change made identified confusing topic gitless used run parallel experiment nonexpert expert git user compare learning gitless compared git gitless experiment santiago suggested world might ready new vcss least new porcelain gui top git based research git tool loved sometimes feared caren garcia bazaarvoice caren sharing experience teaching git according caren git conflict induces panic state student command order confuses love utility everything git caren recommends web site ohshitgit get help get panic situation always possibility screwing site would help figure fix mistake site covered git rev news edition student great success using git cli learning git also want everyone use git writer government school git software concept way thinking used outside field scaling mercurial facebook insight side durham goode facebook durham talked mercurial hg scaled facebook way software version control organized reason choosing mercurial found scaling mercurial facebook blog post durham goode siddharth p agarwal update using internally covered git rev news edition facebook development environment composed monorepos feature branch rebases merges single commits per push assume developer work online everyone commits master order overcome tremendous size every commit pushed size version control support team small compared large number developer employ therefore need simple workflow amount time teaching version control limited solve issue push conflict implemented pushrebase basically allows server perform rebase condition eliminating problem push rejected local repository date someone pushed first tend assume developer online thus implemented inifinitypush assures every commit ever pushed helped new scalable way storing data solves many problem error recovery implementation fork mercurial facebook us allows check part code actually needed especially needed monorepos feature similar git sparse checkout important difference far better ux implementation allows example easy switching predefined via inrepository file known format set file selected welldefined task something worth porting git improve sparse checkout feature question user experience ux important facebook durham asks default behavior git log useful go hoop customize log enough make useful made smartlog allows see useful commits given developer also allows easily recover instance commits reachable branch without need extra knowledge reach advanced feature something worth borrowing gitlogcompact project implement something similar covered detail git rev news edition durham emphasized need focus ux need enable new user power user move us hg unamend hg uncommit good example end critical crowd asked open source one acceptable answer facebook run latest stable mercurial build hereby catch lot mercurial bug hit others everything contributed back hgcore mostly due fact contribution make backward compatible git lf light speed lars schneider autodesk taylor blau github two part presentation way dramatically improve performance popular git extension lf large file storage required change git core extension first part lars walked contribute git find description part experience namely developing reviewing git filter protocol feature git rev news edition developer spotlight lars schneider also found edition implementing feature need documented tested well commit message selfcontained meaning among others need external dependency figure commit many step one go far reaching feature need backward compatibility also usually many iteration example friction approach lars gave u example patch series gave hefty performance took month email get approved git used million world want one breaking second part taylor took talk bit server side git lf go used language choice implementing using scanner pattern go turned perfect match way git plumbing pass information gitlfs process server shared description refactoring performed speed operation course needed synchronized across different project different programming language different developer end taylor shared idea next step gitlfs server namely promise capability filepath exchange work figuring make gitlfs even faster git alias god tim pettersen atlassian alias saving time keystroke though tim said basic common example using alias create shortcut example git co git commit git st git status also reducing cognitive burden whenever find googling thing browsing manpages searching stackoverflow consider making alias example latter tim took u tour four different way create stash interacts index working directory option name easy remember way developed commonality name therefore made alias command stash stsh stash staash staaash created funny alias called standup lazy standup alias standup git log author user yesterday format lazystandup git standup say tim also described create involved alias join one command together pas parameter inside pipeline showed sh c trick immediately invoked shell function trick reminding u alias get complicated better create new git command putting gitsth executable shell script example path rather worrying appropriate escaping quoting tim also presented awesome silly way spoof git help emojis raw processing power example gitsham make subsequent commits identifier beginning subsequent number atlassian bitbucket joined continuous development cd world real providing lot service like gitlab travis called pipeline enabled pipeline bitbucket allow build branch tim expertly finished combining bitbucket pipeline alias equivalent git bisect running bisection step parallel bruteforcing test without need involve developer cost cpu time though possibly wallclock time assuming sufficient parallelism small number commits test cpu time worth le developer time find alias used presentation tim gitaliases repository mediawiki also wiki page list useful alias lightning talk lesson learned transforming clearcase git tamir gefen almtoolbox lightning talk presented case study moving git ibm rational clearcase tamir described challenge faced among others time switch amount support impedance mismatch clearcase git resolved plus technical tip insight solution chosen adjust clearcase view one time dump content new branch git lightning talk git original blockchain meredith l patterson mautinoa technology meredith showed git chosen underlying platform implementing moneyless transaction exchange ledge system implemented actual monetary system sierra leone phone minute actually considered viable fx currency since otherwise national bank would go bankrupt bitcoin blockchainbased distributed ledger system gossip protocol require alwayson internet access available much africa needed way perform transaction offline later reconciliation step mean system need store timestamps meredith noticed git presented solution us ledgercli hledger plain text accounting format format storing transaction git commits blockchain remote wallet account gpg key short expiration date signing show technology git one thing well change world thing well unexpected place lightning talk gogit pure go implementation git santiago mola source source want clone opensource project major git hosting site repository planned repository archived analyze code history using ai technique needed specialpurposes git implementation santiago introduced gogit project git library written entirely go designed developerfriendly highly extensible shared source use case also problem storing archiving large number repository many fork git pair programming cornelius schumacher suse linux cornelius started presentation describing detail pair programming workflow used done important issue workflow commit one author developer often change even writing commit message pair forever pairing change quite often described solution used gitduet project utilizes committer author show identity contributor pair optionally rotating tool advantage disadvantage among others le useful mob programming cornelius went detail multiple author problem using anything email commit message header sketch proposed solution discussion git could get native support pair programming found git mailing list rfc proof concept support multiple author thread end accepted solution though one would created would probably follow junio advice utilizing coauthoredby trailer commit message extending git shortlog command needed trust verify thordur bjornsson yubico last talk covered detail cryptographically sign work thordur started pgp fundamental best practice among others need setting expiration date pgp key one year went get signed git commits including merge commits tag push last requiring help server though concept mergetags missing talk thordur described verify signature explaining possible impact amount work required benefit one workflow one way verifying signature thordur took look github interface change earlier year added visual cue highlight verification status commits tag slide talk link related resource available repository
539,Lobsters,vcs,Git & VCS,SHA1 and Mercurial security: Why you shouldn't panic yet,https://www.mercurial-scm.org/wiki/mpm/SHA1,mercurial security nt panic yet,mercurial security class attack hash function collision attack preimage attack birthday attack google announcement announced collision attack earlier attack maninthemiddle version control already worse problem attacker control repository extremely hard relatively easy suspiciouscorp attacker project contributor goto fail attacker break server trusted project signed changesets conclusion future direction,mercurial security nt panic yet feb class attack hash function two distinct class attack hash function collision attack preimage attack collision attack also known birthday attack involves creating two brand new document hash attacker collision attack give one document like ssl certificate later swap another one nbit hash require roughly hash computation make impossible break shortly second class attack preimage attack involve taking existing hash document finding document hash much harder problem best known attack still take order n step google announcement february google announced found first known collision took year cpu time divided across thousand computer know possible sophisticated attacker carry collision attack collision attack idea collision attack attacker create two document one benign one hostile attacker get first one accepted may later able swap second one know earlier attack document like ssl certificate subverted way attacker creates twin certificate myhostcom yourbankcom tweak bit collide get first one signed certificate authority attacker take signature use second one allow maninthemiddle attack connection bank attack like require document insignificant bit tweaked without causing suspicion later also remember collision attacker take existing document change hostile document preimage attack version control already worse problem ready talk version control threat model therein mercurial git use hash uniquely identify changesets document let imagine collision attack would require attacker control repository attacker would create pair document let say executables attacker place benign version public repository web various people pull code run attest version particular changeset hash safe go pull attacker swap executable malicious version despite checking changeset still compromised analysis correct far go hiding major problem problem middle step people check malicious code extremely hard token creating subtly malicious code either executable source relatively easy fact many order magnitude easier attacker make secretly malicious executable hard detect mount collision attack better worse primary defense today trust reputation good file signature suspiciouscorp worth much run code going bad day attacker project contributor attacker could construct pair change attempt get benign one accepted project accepted attacker could present malicious one canonical change couple significant challenge though first benign change life canonical server swapping malicious change tricky second change would fairly opaque form like binary file allow known collision attack work without suspicious still far far easier simply create hardtospot malicious code pass review see apple notorious goto fail bug example subtle code attacker break server trusted project first remember attacker ca nt simply swap preexisting source file hostile version much harder preimage attack attacker wo nt able sneak change without changing hash simplest thing add new changeset without using collision attack user nt diligently checking changeset hash external list known good hash signed changesets none wiser attacker manages submit hash collision get signed trusted party break server subvert repository able carry full collision attack hopefully see approach far work conventional attack conclusion existing conventional attack system like mercurial git already significantly easier collision attack simply nature managing code difficult identify malicious code run bet already extremely diligent vetting project contributor contribution cryptography provide little defense future direction spite larger problem present still pressing forward stronger hash function fact work underway year retrofit mercurial data structure protocol successor storage space allocated larger hash revlog structure year ago mercurial introduction revlogng format introduced recently support exchange different hash type network remaining piece choice replacement function choosing backwardscompatibility strategy
540,Lobsters,vcs,Git & VCS,How to Write a Git Commit Message [2014],https://chris.beams.io/posts/git-commit/,write git commit message,introduction seven rule tip introduction good commit message matter gem recent linux kernel git spring boot tim pope make point reducing style content metadata seven rule seven rule great git commit message said separate subject body blank line limit subject line character capitalize subject line end subject line period use imperative mood subject line wrap body character use body explain v separate subject body blank line manpage section pro git limit subject line character atomic commits capitalize subject line end subject line period char le use imperative mood subject line git us imperative whenever creates commit behalf properly formed git commit subject line always able complete following sentence subject line wrap body character finally gotten better use body explain v commit bitcoin core full diff tip learn love command line leave ide behind tab completion script read pro git pro git,introduction seven rule tip introduction good commit message matter browse log random git repository probably find commit message le mess example take look gem early day committing spring git log oneline author cbeams fri mar readding configurationpostprocessortests brief removal ignoreing testcglibclassesareloadedjustintimeforenhancement method turn one culprit recent build breakage classloader hacking cause subtle downstream effect breaking unrelated test test method still useful run manual basis ensure cglib prematurely classloaded run part automated build fixed two buildbreaking issue reverted classmetadatareadingvisitor revision eliminated configurationpostprocessortests investigation determines cause downstream test fail seemingly unrelated classpathxmlapplicationcontexttests tweak packageinfojava file consolidated util mutableannotationutils class existing asmutils polishing yikes compare recent commits repository git log oneline author pwebb sat aug fix failing compositepropertysourcetests rework propertysource early parsing logic add test importselector metadata update docbook dependency generate epub polish mockito usage would rather read former varies length form latter concise consistent former happens default latter never happens accident many repository log look like former exception linux kernel git great example look spring boot repository managed tim pope contributor repository know wellcrafted git commit message best way communicate context change fellow developer indeed future self diff tell changed commit message properly tell peter hutterer make point well reestablishing context piece code wasteful avoid completely effort go reducing much possible commit message exactly result commit message show whether developer good collaborator given much thought make great git commit message may case spent much time using git log related tool vicious cycle commit history unstructured inconsistent one spend much time using taking care get used taken care remains unstructured inconsistent wellcared log beautiful useful thing git blame revert rebase log shortlog subcommands come life reviewing others commits pull request becomes something worth suddenly done independently understanding something happened month year ago becomes possible efficient project longterm success rest among thing maintainability maintainer tool powerful project log worth taking time learn care one properly may hassle first soon becomes habit eventually source pride productivity involved post addressing basic element keeping healthy commit history write individual commit message important practice like commit squashing addressing perhaps subsequent post programming language wellestablished convention constitutes idiomatic style ie naming formatting variation convention course developer agree picking one sticking far better chaos ensues everybody thing team approach commit log different order create useful revision history team first agree commit message convention defines least following three thing style markup syntax wrap margin grammar capitalization punctuation spell thing remove guesswork make simple possible end result remarkably consistent log pleasure read actually get read regular basis content kind information body commit message contain contain metadata issue tracking id pull request number etc referenced fortunately wellestablished convention make idiomatic git commit message indeed many assumed way certain git command function nothing need reinvent follow seven rule way committing like pro seven rule great git commit message keep mind said separate subject body blank line limit subject line character capitalize subject line end subject line period use imperative mood subject line wrap body character use body explain v example summarize change around character le detailed explanatory text necessary wrap character context first line treated subject commit rest text body blank line separating summary body critical unless omit body entirely various tool like log shortlog rebase get confused run two together explain problem commit solving focus making change opposed code explains side effect unintuitive consequence change place explain paragraph come blank line bullet point okay typically hyphen asterisk used bullet preceded single space blank line convention vary use issue tracker put reference bottom like resolve see also separate subject body blank line git commit manpage though required good idea begin commit message single short le character line summarizing change followed blank line thorough description text first blank line commit message treated commit title title used throughout git example gitformatpatch turn commit email us title subject line rest commit body firstly every commit requires subject body sometimes single line fine especially change simple context necessary example fix typo introduction user guide nothing need said reader wonder typo simply take look change ie use git show git diff git log p committing something like command line easy use option git commit git commit fix typo introduction user guide however commit merit bit explanation context need write body example derezz master control program mcp turned evil become intent world domination commit throw tron disc mcp causing deresolution turn back chess game commit message body easy write option better writing message proper text editor already editor set use git command line read section pro git case separation subject body pay browsing log full log entry git log commit author kevin flynn kevin flynnsarcadecom date fri jan derezz master control program mcp turned evil become intent world domination commit throw tron disc mcp causing deresolution turn back chess game git log oneline print subject line git log oneline derezz master control program git shortlog group commits user showing subject line concision git shortlog kevin flynn derezz master control program alan bradley introduce security program tron ed dillinger rename chess program mcp modify chess program upgrade chess program walter gibbs introduce protoype chess program number context git distinction subject line body kick none work properly without blank line limit subject line character character hard limit rule thumb keeping subject line length ensures readable force author think moment concise way explain going tip hard time summarizing might committing many change strive atomic commits topic separate post github ui fully aware convention warn go past character limit truncate subject line longer character ellipsis shoot character consider hard limit capitalize subject line simple sound begin subject line capital letter example accelerate mile per hour instead accelerate mile per hour end subject line period trailing punctuation unnecessary subject line besides space precious trying keep char le example instead use imperative mood subject line imperative mood mean spoken written giving command instruction example clean room close door take trash seven rule reading right written imperative wrap body character etc imperative sound little rude often use perfect git commit subject line one reason git us imperative whenever creates commit behalf example default message created using git merge read using git revert revert add thing stuff reverts commit clicking merge button github pull request merge pull request someusersomebranch write commit message imperative following git builtin convention example refactor subsystem x readability update getting started documentation remove deprecated method release version writing way little awkward first used speaking indicative mood reporting fact commit message often end reading like fixed bug changing behavior x sometimes commit message get written description content fix broken stuff sweet new api method remove confusion simple rule get right every time properly formed git commit subject line always able complete following sentence applied commit subject line example applied commit refactor subsystem x readability applied commit update getting started documentation applied commit remove deprecated method applied commit release version applied commit merge pull request userbranch notice work nonimperative form applied commit fixed bug applied commit changing behavior x applied commit fix broken stuff applied commit sweet new api method remember use imperative important subject line relax restriction writing body wrap body character git never wrap text automatically write body commit message must mind right margin wrap text manually recommendation character git plenty room indent text still keeping everything character overall good text editor help easy configure vim example wrap text character writing git commit traditionally however ides terrible providing smart support text wrapping commit message although recent version intellij idea finally gotten better use body explain v commit bitcoin core great example explaining changed commit author pieter wuille pieterwuille gmailcom date fri aug simplify serializeh exception handling remove state exceptmask serializeh stream implementation well related method exceptmask always included failbit setstate always called bit failbit immediately raise exception get rid variable replace setstate direct exception throwing also remove dead code result good never reached failure call one test replaced eof fail clear n exception never called delete take look full diff think much time author saving fellow future committers taking time provide context would probably lost forever case leave detail change made code generally selfexplanatory regard code complex need explained prose source comment focus making clear reason made change first way thing worked change wrong way work decided solve way future maintainer thanks may tip learn love command line leave ide behind many reason git subcommands wise embrace command line git insanely powerful ides different way use ide every day intellij idea used others extensively eclipse never seen ide integration git could begin match ease power command line know certain gitrelated ide function invaluable like calling git rm delete file right stuff git rename one everything fall apart start trying commit merge rebase sophisticated history analysis ide come wielding full power git commandline way remember whether use bash zsh powershell tab completion script take much pain remembering subcommands switch read pro git pro git book available online free fantastic take advantage
541,Lobsters,vcs,Git & VCS,Git Commit Message formatting,http://karma-runner.github.io/1.0/dev/git-commit-msg.html,git commit message formatting,reason convention format commit message example commit message message subject first line allowed value feat fix doc style refactor test chore example value message body message footer referencing issue breaking change angularjs git commit msg convention commit history,reason convention automatic generating changelog simple navigation git history eg ignoring style change format commit message type scope subject body footer example commit message fix middleware ensure range header adhere closely rfc add one new dependency use rangeparser express dependency compute range welltested wild fix message subject first line first line longer character second line always blank line wrapped character type scope always lowercase shown allowed type value feat new feature user new feature build script fix bug fix user fix build script doc change documentation style formatting missing semi colon etc production code change refactor refactoring production code eg renaming variable test adding missing test refactoring test production code change chore updating grunt task etc production code change example scope value init runner watcher config webserver proxy etc scope empty eg change global difficult assign single component case parenthesis omitted smaller project karma plugins scope empty message body us imperative present tense change changed change includes motivation change contrast previous behavior info message body see message footer referencing issue closed issue listed separate line footer prefixed close keyword like close case multiple issue close breaking change breaking change mentioned footer description change justification migration note breaking change portrunner command line option changed runnerport consistent configuration file syntax migrate project change command use portrunner runnerport document based angularjs git commit msg convention see commit history example properlyformatted commit message
543,Lobsters,vcs,Git & VCS,The Biggest and Weirdest Commits in Linux Kernel Git History,https://www.destroyallsoftware.com/blog/2017/the-biggest-and-weirdest-commits-in-linux-kernel-git-history,biggest weirdest commits linux kernel git history,reaction bus mobile device accident destroy software history spelunking unix,normally think git merges two parent commits example recent linux kernel merge write commit part runup release two parent merge branch parisc nt use bitsperlong use merge branch git also support octopus merges two parent seems strange u work smaller project would nt merge three four parent confusing well depends sometimes kernel maintainer need merge dozen separate history together merge commits one another would confusing single merge especially merge conflictfree octopus common might expect commits kernel history merges merges octopus merges commit current head git log oneline wc l git log oneline merges wc l git log oneline wc l comparison point rail commits merges zero octopus merges rail probably representative average project expect git user nt know octopus merges even possible obvious question big octopus merges get line continuation command written five line total command post typed terminal experimenting necessarily easy read interested conclusion include code curious git log prettyformat h p ruby ne w put sort n tail parent lot parent happened git log commit merge author mark brown email redacted privacy date thu jan merge remotetracking branch remote branch name broke history visualization tool provoking reaction linus torvalds pulled sound update takashi result got merge commit one parent pulled fine clearly balance octopus merges fine christ octopus cthulhu merge see unusual commit otherwise mundane merge various change asoc code asoc stand alsa system chip alsa sound subsystem system chip term computer packed single piece silicon putting together asoc sound support embedded device often merges like happen never secondplace merge parent however large distance parent nt surprising sufficient context number parent git commit probably distributed according fat onesided distribution often informally called power law distribution usually strictly correct reason nt interesting many property software system fall fat onesided distribution hold generate plot sure much nitpicking chart layout ensues yes fat onesided terse coarse fat onesided mean far small thing large thing also maximum size thing unbounded kernel contains twoparent merges one merge given enough additional development history expect see merge parent line code per function per module also fat onesided function module small large think user class web app likewise rate change module module change infrequently change constantly think user distribution pop everywhere software appearing straight line loglog plot like one ok much biggest merge term parent count biggest merge term divergence divergence mean difference two branch merged measure simply diffing merge parent counting line diff example branch diverged master year ago changed one line merged back master change master time would counted would change branch come intuitive notion divergence difficult impossible calculate git nt retain branch metadata case starting point calculating divergence divergence recent kernel merge git diff git log merges prettyformat p wc l english command read diff two parent recent merge count line find mostdiverged merges loop every merge commit counting number diff line similar way test search result merges exactly line divergence git log merges pretty h read x echo git diff git log pretty p x wc l x done mergestxt sort n mergestxt grep command take long time run around twelve hour think though away much expect merge size follow fat onesided distribution like parent count show straight line loglog plot let check yep binned diff size rounding bucket otherwise nt enough sample form useful curve bottom right ugly partly due quantization partly due small sample size caused lack huge commits previous plot obvious question mostdiverged merge history sort n mergestxt tail line diff seems impossibly large diff longer entire source code kernel greg kroahhartman made commit september development greg one linus torvalds lieutenant close trusted developer roughly speaking lieutenant form first level kernel pull request tree greg maintains stable branch kernel driver core usb subsystem several subsystem need bit background examining merge closely normally think merges part diamond branchthenmerge pattern b c back greg started development greybus bus mobile device fresh repo starting totally new project eventually development greybus finished merged kernel started fresh repo shared history rest kernel source merge added another initial commit kernel addition commit back normally think initial commit instead usual diamond branchandmerge pattern repo two separate initial commits b c see evidence looking many file exist merge commit parent git log grep merge merge git lstree r wc l git lstree r wc l one side lot file contains entire kernel source contains separate history containing greybus like octopus merges strike git user strange kernel developer expert git user tend use feature abandon though certainly reckless abandon one final question many time happened many separate initial commits kernel four turn git log pretty format h cd dateshort share upstreaming patch greybus initial commit btrfs initial checkin basic working tree code clear drew commits ignoring history would look like graph current head share upstreaming patch greybus initial commit btrfs initial checkin basic working tree code four distant ancestor current kernel head none parent commit git perspective kernel history begin four different time eventually merged together first four bottom output usually think initial commit git back second development file system btrfs done isolation third greybus also done isolation already saw fourth initial commit weird git show oneline stat share upstreaming patch readmemd file changed insertion creates file readmemd immediately merged normal kernel history commit git show commit merge author laxman dewangan ldewangan nvidiacom date tue feb would someone create new initial commit containing twoline readme file immediately merge mainline history ca nt come reason suspect accident nt harm though strange update accident linus responded usual fashion incidentally also secondmostdiverged commit history simply merge unrelated commit like greybus merge looked closely weirdest thing linux kernel git history octopus merges one parent heavily diverged merge line diff though bit technicality share history rest repo kernel four separate initial commits one mistake none show vast majority git repos well within git design parameter liked post might like destroy software screencasts several build kind complex shell command seen post methodically piece piece history spelunking unix especially relevant
545,Lobsters,vcs,Git & VCS,The Myers diff algorithm: part 1,https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/,myers diff algorithm part,building git git original paper,enjoy article published book explaining internals git implementation building git programmer probably use version control system git spend awful lot time looking diffs use check uncommitted work progress look changed single commit compare two branch performing merge diffs language understand thing changed software well read people diffs used version control system automate change email diff someone use patch git apply command merge working copy git merge reconcile merge two change history produce single tree often reconciling change within file git add patch let select individual change working copy file rather adding whole file index involves user reading diffs git selectively applying indexed version file version control system use difference version primary way store project history rather storing snapshot code commit diffs central version control might thought much generated often read diff seems obvious thing marked change intuitive mental model mean insert new function file delete redundant one rewrite section however awful lot diffing meet eye many way produce different result think moment calculate diff write function might noticed diff program show changed stayed would determine part file changed found difference would find next line version text match complicated look series article like walk default diff algorithm used git developed eugene w myers original paper available online paper quite short quite mathematically dense focussed proving work explanation le rigorous hopefully intuitive giving detailed walkthrough algorithm actually work first article lay basic model algorithm trying achieve go example work simplest set edits get one version another use example paper say want calculate difference two string mean sequence edits convert string string b one possible sequence simply delete character insert character b use common diff notation b c b b c b b c however consider goodquality diff since tell u much change source code typically leave much file unmodified really want see section code inserted deleted diff show entire file removed replaced new version much use u better diff two string would b c b b b c make smallest possible number change order produce b better visualisation really changed possible solution example also valid c b c c b b c c b b b b b b c c c however minimal make smallest number edits possible case five interesting differ section consider string order perform edits looking diffs probably intuitive idea diffs show thing changed example show many possible interpretation difference two file purpose diff algorithm provide strategy generating diffs diffs certain desirable property usually want diffs small possible consideration example change something probably used seeing deletion followed insertion way round rather see solution solution change whole block code like see whole chunk deleted followed new code inserted rather many deletion insertion interleaved good one bad one two four three two four five five six six three also probably want see deleted inserted code aligns idea structure example insert method like end considered new rather end preceding method good class foo bad class foo def initialize name def initialize name name name name name end end def inspect def inspect name name end end end end algorithm one strategy fast produce diffs tend good quality time greedy trying consume many line making change therefore avoiding problem also preferring deletion insertion given choice deletion appear first myers paper based idea finding shortest edit script s modelled graph search take two string abcabba b cbabac build graph way get b x coordinate grid shown correspond step editing process string started editing moving rightward increasing x corresponds deleting character example moving mean deleted first moving downward increasing corresponds inserting character b example move insert first c b edited string thus cbcabba position converted abca cba still need convert bba bac bottomright position corresponds converting string fully string b well moving rightward downward position also move diagonally occurs two string character index example third character first character b c position diagonal leading corresponds consuming equal character string neither deleting inserting anything b c b b c b b c idea behind myers algorithm quite simple want get bottomright move possible single step rightward deletion downward insertion b number move could take get b combined length two string however walking diagonal path free since correspond making change thus want maximise number diagonal step take minimise number rightwarddownward move example show actually get b making five edits myers provides strategy finding pathway develop intuition algorithm work start exploring graph try find shortest path bottomright position explore every possible path tandem find path reach end recommend keeping grid handy follow start recording initial position two option position move downward reach move rightward reach consider move downward reach diagonal since diagonal move free say moving downward get u cost one move therefore mark move single step walk moving rightward take u diagonal mark move walk consider branch took moving rightward moving downward take u found get u moving rightward take u diagonal record step recording visited via rather reason become clear little later intuition consider making rightward move first mean performing deletion first generally want deletion appear insertion fully explored graph two move deep begin third move moving downward get u diagonal moving rightward take u diagonal take u next consider moving rightward seen move follow diagonal moving downward introduces new situation however move get u diagonal generalpurpose graph search want record result moving rightward result moving downward however structure particular graph examining mean sufficient store best position reach certain set edits record show u making two insertion deletion twice right get u whereas making deletion first two insertion get u keep result throw away indicating best position reachable one deletion two insertion order finally scan visit moving downward go lead diagonally record move downward rather rightward moving rightward give diagonal completed record three move probably getting hang rattle remaining move move downward moving rightward give also reachable downward mark rightward also downward mark moving rightward give diagonal leading downward also lead moving rightward lead thus completing fourth row scan begin fifth row since know diffs b requiring five edits expect row scan find bottomright position nothing downward rightward also downward rightward finally moving downward give final position certainly better reached going right right right replace trace move basic idea algorithm based given two string find shortest path graph represents edit space two explore every possible route graph breadthfirst stop soon reach final position next article look myers actually represents process start look implementing code
546,Lobsters,vcs,Git & VCS,Exporting from RCS to Git,http://invisible-island.net/personal/git-exports.html,exporting rcs git,http invisibleislandnet personal using rcs used sccs xterm jonathan nieder mawk debians server alejandro r sedeño initial git repository someone byacc xterm manifest older vilikeemacs http githubcomthomasdickey pgfvilesnapshots fast export script page snapshot esctest april github gitlab freedesktoporg summarized converting xt ansi c,http invisibleislandnetpersonal copyright thomas e dickey tracking project using rcs since late used sccs year developer use program accustomed using patch tarballs track change file using procedure hand people would like casually browse source history developer working occasionally someone would ask could find sourcehistory xterm would point cv stopped committing finally became defunct ten year later providing cv whatever webaccessible respository would take away development time expensive rare occasion someone else would offer part jonathan nieder set git repository mawk debian server discussed possibility getting change mawk git alejandro r sedeño set cron job would collect weekly ncurses patch checking git repository git little flexible tarballs given gitball relatively simple compared cv make webaccessible project browsing purpose interface provides ability get tar ball helpful complete task case ncurses made webaccessible weekly patch ncurses starting given week make several change result weekly patch since information would omitted disregarded mawk seemed promising however ran problem initially thought could replay change onto neider initial git repository effort used week finding git merge capability flexible enough make reliablescriptable procedure nieder suggested rcsfastexport tool script provide complete solution noted vile rcs wrapper like cv used lazy commits ie lock needed file unlike cv use file actual modification time identifier checkout wrapper construct identifier rcsfastexportrb ruby script know nothing lazy commits modified script call rcs wrapper actual checkout slows thing replace wrapper additional scripting another month would needed get resulting identifier case someone question want identifier remind git us identifier removed git would useful ruby script us lot memory written ruby using ruby work well different version git interoperate really step backward rcs work archive machine across wide range operating system version ruby script writes directly git internal data structure undocumented ruby script handle rcs archive branch use rcs branch several project export rcs archive using script generates new set hash code making impossible transfer update older export archive problem ruby script interesting useful could use larger project even oneshot us mawk may someone commented several fork byacc tarballs github problem actually since none fork improved little discus since potential change merge back case would merge rcs archive prompted think ncurses constructing gitball labeled revision rcs archive midnovember using commits ncurses day labeled revision sedeño git repository half labeled revision midnovember label thing reach milestone whether decide release set change exporting labeled revision rather complete archive result would still useful well practical keep mind number label far smaller actual number change revised approach possible incremental export archive onto gitball exporting label ncurses archive take hour exporting latest revision take minute wrote script work run script know manage gitballs create update project xterm manifest file generated using manifest script special case handled project label wrote another script tagcutoff label using cutoffdate worked older vilikeemacs archive received paul fox labeled writing custom script like tagcutoff used label file generated gitballs project share others well see result http githubcomthomasdickey realized rcsfastexportrb would suitable since using approach none exported revision would signed see pgfvilesnapshots repository versus corresponding fast export example script different matter live common directory generate tarballs download script page suppose could generate gitballs well release change one project label rcs run generate updated gitball old one renamed keeping backup copy run update github copy gitball two step use different key case reminder snapshot someone want make change done way project first integrating rcs archive exporting updating snapshot instance work program git esctest written george nachman originally bundled created separate repository incorporating change april nachman version largely neglected switched github gitlab neither github gitlab provides way maintain clone fork site developer mirror site could since repository actually use resides machine nachman chose removing file original renamed repository avoid damage unintended pull original xorg freedesktoporg xorg file started copy november updated additional copying revision stored cv xorg cv turn imported git initially hosted freedesktoporg cv repository summarized wiki xorg developer moved activity gitlab also provide mirror github change eg converting xt ansi c incorporated others fix rman rman longer relevant xorg started using docbook work x library completed made improvement starting early sense rman still relevant since work others convert documentation docbook completed either cloned xorg libxt made change address aspect modified libxt work properly const making faq build xterm obsolete updated documentation fixing numerous error introduced docbook conversion see result practice updating clone using git pull merge resolve push applying change back original repository via pull request much work process exporting rcs git
547,Lobsters,vcs,Git & VCS,Relaxo is a transactional document database built on top of git for Ruby,https://github.com/ioquatix/relaxo,relaxo transactional document database built top git ruby,relaxomodel installation usage document storage author reading file writing file datasets transaction suitability performance loading data durability calling respected underlying hardware contributing license samuel g williams,relaxo transactional database built top git aim provide robust interface document storage sorted index prefer higher level interface try relaxomodel installation add line application gemfile execute bundle install gem install relaxo usage connect local database manipulate document require relaxo require msgpack db relaxoconnect test dbcommit message create test data dataset object datasetappend messagepackdump bob dole datasetwrite object end dbcommit message update test data dataset doc messagepackload datasetread data doc foo bar object datasetappend messagepackdump doc datasetwrite object end doc messagepackload dbcurrent data put doc bob dole foo bar document storage relaxo us git persistent data structure storing document data structure expose filesystem like interface store kind data mean free use json bson messagepack jpeg xml combination relaxo transactional model reading writing author default relaxo set repository author using login name hostname current session explicitly change modifying databaseconfig additionally set percommit databasecommit message testing enumeration author user alice email alice localhost dataset object datasetappend hello world datasetwrite hellotxt object end reading file path pathtodocument dbcurrent dataset object datasetread path put object id objectoid put object data size objectsize put object data objectdatainspect end writing file path pathtodocument data messagepackdump document dbcommit message adding document changeset object changesetappend data changesetwrite path object end datasets transaction datasets changesets important concept relaxo nt allow arbitrary access data instead expose git persistent model reading writing implication reading writing always see consistent snapshot data store suitability relaxo designed scale hundred thousand document designed around git persistent data store therefore performance concurrency limitation due underlying implementation maintains full history change repository would continue grow time default mechanism deal performance relaxo anywhere insert per second depending structure workload relaxo performance warming single calculating single single transaction fast warming multiple calculating multiple multiple transaction fast reading data lighting fast loaded directly disk cached loading data relaxo unapologetically based git use git directly nonbare working directory add file like even point relaxo existing git repository durability relaxo based asserts transactional database base assertion writes object store using atomic synchronized disk update ref atomic synchronized disk provided two invariant maintained operation relaxo safe even unexpected interruption program durability guarantee relaxo depend calling fsync respected underlying hardware otherwise durability guaranteed contributing fork create feature branch git checkout b mynewfeature commit change git commit add feature push branch git push origin mynewfeature create new pull request license released mit license copyright samuel g williams permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
548,Lobsters,vcs,Git & VCS,Rebasing a complex branch in Git (2016),http://blog.appsignal.com/2016/09/27/git-rebasing-strategies.html,rebasing complex branch git,new appsignal design standard rebase squashing commits squashing commits merge commits oh rebase rebase applying diff great article cleaning conclusion split commits afterwards git reflog,ago volunteered rebase complex branch appsignal frontend post describe rebased branch internally known layouttweaks might know new appsignal design couple week working appsignal issue came rebasing complex branch wes appsignal designer asked someone could help rebasing layouttweaks branch confident rebasing skill volunteered doubt first kicked opened pull request commit tab github commits created span two month change included almost rail view template cs stylesheets quite javascript file quite clear coworkers trouble rebasing branch standard rebase first attempt optimistically naive tried rebase layouttweaks branch onto latest version main branch get uptodate latest change git checkout main git pull origin main get new change git checkout layouttweaks git rebase main change main feature branch unrelated git happily rebases feature branch change overlap main feature branch git prompt resolve conflict continue rebase layouttweaks branch lot conflict resolve couple commits fixing issue tried another approach squashing commits wes design browser commits often keep track change committing often good habit anyone us git however lot commits also increase chance merge conflict squashing commits help reducing amount merge conflict prefer rebase squash commit feature branch started branch point way rebase squash resolve conflict new change main branch git history look bit like tweet bit difficult find original branch point luckily ask git git mergebase tool git mergebase main layouttweaks git return commit sha commit branch likely started use commit sha rebase instead git checkout layouttweaks git rebase squash commits able rebase change feature branch lot easier squash commits fewer commits le potential conflict rebase change main branch normally strategy nice way save headache squashing first rebasing new change merge commits oh rebased squashed layouttweaks branch something interesting happened still ran lot conflict main branch already merged layouttweaks branch time merge commit recognize name branch main layouttweaks merge main branch feature branch merge commit also bring main branch new commits way actually rebasing commits feature branch layouttweaks jumped commits many commits merges longer seemed possible rebase branch without manually resolving conflict chance would make mistake process big rebase rebase looking pull request github greeted big green merge button merge commits actually made possible merge layouttweaks branch main wes already fixed conflict merged main layouttweaks time could given rebased pull request done yet could continue fixing conflict merge commits care bit chaos git history knowing pull request mergable without conflict actually gave idea took diff two branch simply applied main branch result rebase except approach put change one commit applying diff first switched main branch pulled latest change git checkout main git pull origin main get new change created replacement branch layouttweaks would apply rebased change git checkout b betterlayouttweaks looked wes branched main branch git mergebase git mergebase main layouttweaks using commit sha main branch git reference ask git complete diff two point save file named diff git diff nocolor layouttweaks diff apply diff created git apply git apply diff rm diff clean apply change diff tree betterlayouttweaks branch commit git add git commit tweak layout author author name email addresscom finally change rebased onto main without deal conflict update pull request github git push origin betterlayouttweaks layouttweaks forcewithlease use forcewithlease refer great article thoughtbot blog cleaning clean new feature branch remove old one overwrite history git branch layouttweaks destructive deletion git checkout b layouttweaks create new branch betterlayouttweaks git branch betterlayouttweaks destructive deletion rename original feature branch beforehand want keep original backup git branch layouttweaks oldlayouttweaks conclusion end neatly rebased history layouttweaks pull request could continue redesign development process history lost since squashed commits nothing documented later always possible split commits afterwards one commit hopefully journey give insight rebasing strategy minimize amount merge conflict resolve rebase lot heard experienced loss data know difficult actually lose data forever git always git reflog certainly lot fun rebasing complex branch onto appsignal project also prevent kind branch complexity future making sure keep branch closer origin merging smaller chunk code rebasing feature branch often
549,Lobsters,vcs,Git & VCS,The history behind the decision to move Python to GitHub,https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/,history behind decision move python github,people would interested literally background pythondev pythondev summary subversion sourceforge svnpythonorg roundup bugspythonorg jira atlassian hgpythonorg upfront system started software practice lab university british columbia nick coghlan pep kallithea rietveld move ancillary repository bitbucket moving github donald stufft make call going wait reported lwn vision document process pep pep gitlab decision next sla,asked twitter people would interested write history behind decision choose github python future development process people said yes literally hence blog post background heavy participation pythondev started writing pythondev summary first edition authored coming september writing summary took year school bachelor master degree allowed really dive python development process ended authoring summary two year total lead knowing everything going python great detail also led helping since noticed instantly something needed done beneficial meant constantly able pick task grew complexity became comfortable contributing led two key thing one came deeply appreciate opportunity open source project general python specifically offered people like nt ton programming experience drive energy demeanour contribute learn contribution two led caring lot python development process worked make easy someone contribute first time gain excitement experience first open source contribution also wanting make easy possible core developer work someone eventually accept contribution led ending charge moving python subversion repository issue tracker sourceforge svnpythonorg using roundup bugspythonorg october fun fact originally issue tracker going use jira hosted atlassian pressure community including richard stallman fsf led u using roundup instead migration impacted two way one established chose handle decision regarding competing solution infrastructure problem essentially would put call proposal solve problem helped remove personal bias allowing make proposal case proposal took form test instance proposed issue tracker small group people whose opinion trusted provide feedback directly also allowing anyone else wanted chime say something appropriate mailing list took feedback experience test instance general thought everything came decision approach took migrating python svnpythonorg hgpythonorg decision made switch occurred second lesson learned dedication volunteer decision made switch jira one key attraction platform atlassian going hosting instance providing direct support involved proposal community started protest idea closedsource java application publicly said could get enough volunteer manage roundup instance would relent using roundup actually decent number people stepped forward switched fsf offered help put call volunteer end nt take offer personal call help time seemed bring enough volunteer forward ended happening nearly none volunteer stuck around point ezio melotti r david murray thank core developer keeping issue tracker running year upfront system hosting experience taught people really count put effort proposal proven track record people come nowhere good intention nt guarantee actually follow honestly known based experience python core sprint pycon u people used regularly come tackle big problem get part way solution swear finish get home never heard started phd computer science technically nt focus attached unofficially software engineering part software practice lab university british columbia meant regularly surrounded people trying figure way make software development better meant perpetually interest software development practice also mean acutely aware python development process start trail current best practice becomes burdensome become obvious u python development process fact become burden rate patch submitted much greater rate reviewed leading external contributor getting frustrated would put effort write patch would occasionally end waiting year review core developer since python community friendly people polite waiting someone notice patch sitting instead asking someone could look subsequently told people email pythondev patch sits long issue tracker open source project bad situation external contributor stop participating project slowly dy core developer stop participating replaced one replace u openly lamented problem nick coghlan decided publicly acknowledge creating pep july document nick proposed moving kallithea host mercurial code provide u code review integration latter desired bugspythonorg us custom fork rietveld actively maintained pep nt go anywhere though nick ton project work nt preexisting buyin changing development process fastforward november nick decided try move thing forward yet asking move ancillary repository bitbucket python ancillary repository thing like pep benchmark etc basically repository cpython repository contributed one person ensuing discussion guido countered nick idea moving github proposed donald stufft earlier discussion help force decision guido pointed repository discussed primarily managed thus make call simply going wait whole discussion reported lwn decision squarely shoulder could said come python usually nt wife attest decided seize opportunity use way try modernize python development process wrote vision document december spelled exactly ideal development process would python thought worrying ancillary repository punting key repository everyone truly cared simply ignoring real problem hand said wanted development process simple possible core developer use review external contribution meant thing like automated testing patch code coverage patch merging browser etc pithy summary wanted ability review external contribution submission commit tablet beach wifi actually vancouver nt entirely silly request thinking got process simple core developer could review lunch time work time home without special machine ssh key installed basically wanted development process become streamlined external contribution review something one relax definitely case hassle moment something least fun feeling obligation process decision process started asking draft pep february pep initially act way know proposing know going willing put effort help deadline nick pep pep donald stufft proposing github optionally phabricator end dropped wanted final pep pycon u april hope make decision may may came went decision happened ended job hunting pycon u leaving google moving across canada live vancouver joining python team microsoft typical time sink moving new place reestablishing oneself new town done phd vancouver wife born raised readjusting back vancouver starting new job nt get back around working towards decision september thanks new job able start putting work time asked test instance cpython repository two proposed platform october halloween north america goal making decision january quickly happened though barry warsaw asked could toss gitlab consideration nick coghlan subsequently saying would rather back gitlab kallithea due maturity issue project donald issue switch nick technically tweaking preexisting proposal barry track record following allowed pivot nick proposal spent november playing test instance various people provided feedback either privately coreworkflow mailing list first three week december spent addressing question people two approach january decision new year day announced chosen github gitlab multiple reason made decision one github basically built social network open source contributor led various core developer telling comfortable github already hoping would win also mean tooling already available use github tie goal automating development process much possible cutting back infrastructure maintained python development team two killer feature gitlab would argue fact gitlab open source killer feature development process important worrying whether cloudbased service publishes source code someone worry extent nt eg gmail address use developing open source especially worry github walled garden extensive sdk allows downloading data go platform since github going used repository hosting code review mean need back code review data since git distributed version control system thus carry entire history around every full clone lastly bdfl prefers github since beginning whole decision process guido let known thought github best choice mean something want make sure guido feel comfortable frustrated contributing programming language guido would first person tell frequency contribution low enough opinion nt go beyond infrequent core developer wanted make sure guido engagement stay high possible guido preference mattered next decision made discussion started coreworkflow mailing list work exactly going manage migration currently writing pep outline step necessary migrate repository wish move begin tackle step slowly migrate various repository github hoping complete migration year may spill driven volunteer lot people varying opinion simply going happen quickly regardless long take optimistic pay end idea try leverage benefit get github getting development process working smoothly enough could something like sla python community long willing take addressing external contribution manage become responsive project external contribution worth
550,Lobsters,vcs,Git & VCS,Mercurial 4.1 has been released,https://www.mercurial-scm.org/wiki/WhatsNew,mercurial released,release note download timebasedreleaseplan upgrade note upgrading archive mercurial overview new feature mercurial extension unsorted mercurial command core unsorted mercurial overview new feature mercurial unsorted mercurial command extension unsorted mercurial overview new feature mercurial overview new feature backwards compatibility change api change command core extension unsorted behavior change internal api change mercurial extension test mercurial command core test mercurial overview new feature command core extension unsorted behavior change internal api change mercurial command unsorted mercurial command unsorted mercurial overview new feature mercurial command extension unsorted mercurial overview new feature security command core extension unsorted behavior change internal api change mercurial command core extension unsorted mercurial command core extension unsorted mercurial overview new feature command core extension hgweb chg unsorted behavior change internal api change mercurial security core unsorted mercurial command core hgweb performance mercurial full release note,release note feature bugfixes latest release please see download page link source binary note mercurial follows timebased release plan major release every three month minor bugfix release first every month see timebasedreleaseplan sure read upgrade note upgrading see archive older version mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release extension unsorted mercurial regularly scheduled bug fix release command graftstate save base graft state fixing bug graft continue graft fix base value saved state file core unsorted bashcompletion use aliased hg source script demandimport fix compatibility meta path finder wo findspec method flag read flag dirstatedisk workingcopyctx fsmonitor coerce clock variable bytestring url fix byte v str crash processing proxy header mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release unsorted mercurial regularly scheduled bug fix release command branch make force work even specifying rev import nt ignore secret bypass specified extension shelve fix ordering merge label unsorted mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release backwards compatibility change infinitepush extension believed unused deleted hg grep search working copy file content default recognize significant change past behavior survey large body user indicated nobody used almost nobody understood previous noflags behavior hg grep new behavior aligns behavior user expected including hg maintainer also happens behavior git grep given old behavior confusing point unusable comfortable changing behavior api change mercurialhgupdate mercurialmergeupdate expect value set namedconstants mergeupdatecheck constant rather collection magic string value code prepared value change future mercurialhgupdatetotally thorough checking mercurialbookmarksbmstore longer convenience method looking changectx instance bookmark name use repo repobookmarks name intead repobookmarkschangectx name command amend add option update current user amend enable support closing branch amend enable support using secret phase bookmark actual fix race condition deleting bookmark bookmark remove changectx method bmstore api branchmap explicitly warmwrite subset branchmap cache import add debug message parsing data patch header import read xmercurialnode email header determine nodeid log populate keywords specified custom tjson tcbor merge replace magic string namedconstants api push support config option require rev specified running push core extension eol nt fallback use hgeol tip bc largefiles use context manager setting lfstatus subrepos rebase track new node keep set unshelve abort using keep interactive together unshelve add abort using continue interactive together unshelve change date set interactive mode unshelve create matcher required creating unshelve ctx unshelve delete shelvedstate successful unshelve continue unshelve forget unknown file partial unshelve unshelve handle stripping changesets interactive mode unshelve store information interactive mode shelvedstate unshelve unify logic around creating unshelve changeset unsorted automation add command submit try server automation support use debian buster default changelog make copy related function return none valid value continue added support transplant copy remove existing copy info changeset amend bc demandimport explicitly declare session module level discovery replace head changesets output note bc fastannotate remove support flock locking fix warn fixer nt configured command flagprocessors deprecate processflags flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api format format commandspy recently regressed grep enable allfiles default bc hg updatetotally thoroughly check updatecheck argument api infinitepush mark extension likely deleted narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc notify add option deterministic messageid generation prevent comparison none curse histedit pythonzstandard apply bigendian fix remotefilelog reduce probability racecondition remotefilelog test rustdirstatestatus add call rustfast path dirstatestatus rustdirstatestatus rustcpython binding dirstatestatus rustdirstatestatus use fastpath even fsmonitor sparse extension rustdiscovery optionally nt randomize test sidedata introduce new requirement protect feature split handle partial commit renames split record sshserver flush stream command dispatch test allow different result zstd compression transplant added support stop flag uncommit add option update current user current date uncommit add support modify commit message date uncommit drop hyphen currentuser currentdate uncommit enable support adding note uncommit make date u user mutually exclusive behavior change copy remove existing copy info changeset amend bc discovery replace head changesets output note bc eol nt fallback use hgeol tip bc grep enable allfiles default bc narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc templatefuncs account user diffopts diff bc internal api change bookmark remove changectx method bmstore api exchange avoid unnecessary conversion bookmark node hex api flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api hg updatetotally thoroughly check updatecheck argument api merge replace magic string namedconstants api mercurial regularly scheduled bug fix release extension phabricator nt abort property writing fails amending test mercurial regularly scheduled bug fix release command bookmark actual fix race condition deleting bookmark core test mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release command bookmark also make bookmark cache depends changelog bookmark actual fix race condition deleting bookmark bookmark actually trigger race deleting bookmark test bookmark backout attempt fix delete race bookmark keep bookmark hgstore new config set bookmark use context manager writing file bookmark use correct store ambiguity check branch abort closing branch nonbranchhead cset branchcache store maximum tip variable inside loop command drop support legacy cmd registration api commit add forceclosebranch flag close nonhead changeset commit add check trying close already closed branch head commit add ability print file status successful invocation commit allow interactive work naming directory commit improve file field changelog merges commit make error message specific aborting branch closing commit respect noedit combination amend graft moved abortgraft readgraft cmdutil help check subtopic exists raise error nt log add config making hg log g always toposorted log flag toposorted set log pas getcopies function instead getrenamed displayer api merge disallow merge abort case unfinished operation patch use short fixedsize message last line prompt push added clear warning message pushing closed branch tag avoid doublereversing list verify also check full manifest validity verify run verify introduce notion level verify introduce experimental full flag core extension unsorted abort added support graft abort added support histedit abort added support merge abort added support rebase abort added support unshelve automation initial support running linux test bisect crash rewritten commits blackbox disable extremely verbose logging catapipe add support counter event changelog define changelogrevisionp copy null revision changelog fix handling empty copy entry changeset changelog optionally store added removed file changeset extra continue added support rebase continue added support unshelve copy filter invalid copy end pathcopies copy follow copy across merge base without source file debugrevlog fix average size computation empty data drawdag nt crash writing copy info changesets extdata avoid crashing inside subprocess get revset parse error extension drop support extsetup without ui argument api filemerge make last line prompt english char graphmod remove support graph line mixing parentgrandparent style bc manifest avoid corruption dropping removed file pure match remove unused matchiter implementation api match use instead root directory api procutil allow caller runbgcommand assume process start remotefilelog check rfl enabled getrenamedfn override remotefilelog handle copy changesets getrenamedfn override remotefilelog log fetch file remotefilelog tell runbgcommand block child process startup root add support tformatter option sslutil add support sslkeylogfile wrapsocket sslutil fsencode path returned certifi statecheck added support state subrepos make last line prompt english char test make grep pattern remotefileloggcrepack portable test work around libressl different error string tracing add support emitting counter worker support parallelization function return value zsh enable completion support chg well behavior change graphmod remove support graph line mixing parentgrandparent style bc internal api change mercurial regularly scheduled bugfix release command help fix hg mv hg cp unsorted mercurial regularly scheduled bugfix release command unsorted mercurial overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bugfix release late due vacation similar disruption regular time command extension rebase add missing dash help text unsorted mercurial overview new feature available regularlyscheduled quarterly feature release also contains security fix security possible use symlinks subrepositories defeat mercurial pathchecking logic write file outside repository fixed user older version either disable subrepositories subrepos allowedfalse configuration ensuring cloned repository nt contain malicious symlinks command archive use manifestmatches simplify speed matching branch allow changing branch merge commits rev branch add r option show branch name given rev graft abort dateuser specified currentdatecurrentuser bc graft introduce base option using custom base revision merging help add internalsextensions topic help show advanced experimental deprecated extension verbose log fix line wrap diffstat g graph merge make local file storage hgmerge directory extensible pull fix inconsistent view bookmark pull push add publish flag change phase pushed changesets push config option control behavior pushing publishing server resolve fix markcheck file deleted one side tag cache repochangelog access checking tag node update fix edgecase updateatomicfile readonly file core revlog always enable generaldelta version revlogs revlog make sure never use sparserevlog without general delta revset enforce interpreted literal revision number api bc revset introduce api avoids formatspec input serialization revsets make bookmarknamed nonexistent abort bc templatekw deprecate favor templatekw fix crash multiple latesttags resolution wdir templater check invalid use list expression properly transaction display data transaction failed rollback ui add config knob redirect status message stderr api ui remove unreachable branch function call write vfs also audit rename wireproto batch query support query immediate response extension unsorted changegroup add option create bundle full snapshot changegroup allow force delta commandserver add ipc channel teach repository path command finished commandserver add config knob various logging option commandserver add experimental option use separate message channel commandserver send raw progress information message channel filecache unimplement set delete api http allow authprefix username consistent uri match support rooted glob hgignore mergetools calling external merge tool describe resolve input mergetools adjust beyond compare config maclinux obsutil fix progress deprecate uiprogress rustcpython binding ancestorsiterator rustcpython binding lazyancestors rustcpython binding missingancestors sparserevlog disable sparserevlog config disable generaldelta sparserevlog enabled default storage update sqlitestore use new deltamode parameter store raise programmingerror unable decode storage path subrepo extend path auditing test include weird pattern sec subrepo prohibit variable expansion creation hg subrepo sec subrepo reject potentially unsafe subrepo path bc sec behavior change internal api change mercurial regularlyscheduled bugfix release containing following fix command core extension phabricator properly encode boolean type request body unsorted window ensure mixedfilemodewrapper fd nt escape entering context mgr worker swallow exception occurred main process mercurial regularly scheduled bugfix release security fix included expected lowrisk command core revlog fix outofbounds access negative parent read revlog sec extension unsorted mercurial overview new feature available regularlyscheduled quarterly feature release command add add label message added file addremove add label message added removed file annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc bookmark add explicit option list bookmark given name bookmark pas formatter printbookmarks instead opts api clone allow local cloning create one level directory debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc grep add multirev support allfiles flag grep rename linenumber lineno well bc grep search commits allfiles mode help adding proper declaration shortlistbasic command api help adding support command category identify change parent list node bc identify show remote bookmark hg id url tjson b log changesetformatter fill wdir rev node bc log respect graphshorten terminal node collapsing merge improve interactive onechanged onedeleted message phase explicitly exclude secret phase phase expose phase idx revset phase handle phase command flag phase report number nonpublic changeset alongside new range push add remote repository changed pushing message remove add label message removed file rename return error status renamecopy failed resolve add flag default behavior remerging resolve add config make hg resolve remerge default resolve add confirm config option resolve add option warnabort unresolved conflict marker resolve graduate resolvemarkcheck experimental add doc resolve rename status mergestatus shadow change status bc status advertise abort instead update c abort merge status advertise abort instead update c abort graft status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc verify make output le confusing core context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api dispatch nt show list command bogus command dispatch making hg abortion output specific label dispatch show short error message invalid global option given exchange support declaring pull depth exchange support defining narrow file pattern pull filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api localrepo add repository feature repo stream cloned localrepo add requirement narrow file creation option present localrepo automatically load lf extension required bc localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support marking repos shallow file storage localrepo support writing shared file api pager enable termdumb repository establish api emitting revision delta revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api revlog new api emit revision data revlog reuse cached delta identical base revision revset expand bookmark active bookmark revsetlang fix position spaceless ab expression streamclone nt support stream clone unless repo feature present streamclone include obsstore file stream bundle client read templatefuncs add truncate parameter pad templatekw add experimental status keyword templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api tracing new module make tracing event hg easier tracing trace command function execution transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api add bookmark changesetdata command add phase changesetdata command client support advertising redirect target client support following content redirects define implement changesetdata command define implement filedata command define implement filesdata command define implement manifestdata command server support sending content redirects support response caching extension absorb import extension facebook hgexperimental absorb print rev prefix hash absorb print summary changesets affected absorb prompt user accept absorb change default amend support historyeditingbackup config option closehead fix closehead r listification commitextras work nicely extension convert fix file descriptor leak extension add summary total loading time per extension extension add detailed loading information extension new closehead module closing arbitrary head fastannotate initial import facebook hgexperimental fastannotate make default value fastannotateuseflock dynamic fix add monkeypatchable point new revision committed fix compute changed line lazily make wholefile fixer tool faster fix determine fixer tool failure exit code instead stderr fix pull flag definition make reusable extension fsmonitor use vfs instead opener journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf add repository feature denoting use lf lf autoload extension cloning repo lf enabled lf consult narrow matcher extracting pointer ctx lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc logtoprocess connect fds devnull avoid bad interaction pager logtoprocess define hg child process narrow add importrules flag tracked command narrow add narrowspec flag clone command narrow add narrow ellipsis server capability narrow add server logic send cg widening without ellipsis narrow check server narrow support anything bc narrow drop support remote expansion bc narrow introduce config option check narrow enabled narrow move hgnarrowspec hgstorenarrowspec bc narrow move support hg verify core narrow first version narrowwiden wireprotocol command narrow validate spec file wellformed clone bc patchbomb allow using hghostname force hostname phabricator drop support legacy phabricatorauthtoken config bc phabricator mark extension experimental rebase add stop option stop rebase point rebase nt try prune obsolete changeset already destination rebase explicitly track collapse fold rebase skip extinct revision even successor rebase set rebase support historyeditingbackup config option remotenames add name argument remotenames revset share allow one level directory created shelve add internal extra shelve fix crash unshelve without shelve metadata file shelve use internal phase possible sqlitestore file storage backend using sqlite strip ignore orphaned internal changesets computing safe strip root hgweb chg chgserver add command us correct message frame chgserver restore pager fds attached within runcommand session rustchg add client extension run chgspecific request rustchg add callback handle pager shell command request unsorted ancestor actually iterate ancestor topological order graduate option experimental server section changegroup pas sorted revision group api changegroup port emitrevisions changegroup remove reordering control bc changegroup restore default node ordering cleanupnodes drop special casing around prune marker api command restore compatibility cmd registration copy improve logic deciding copytracing based config option crecord make nextsametype check parent item exists crecord make enter move cursor next item type delta skip empty delta optimisation nongeneral case error introduce storageerror filemerge add config knob check capability internal merge tool filemerge show warning chosen tool binary file capability fileset extract language processing part new module api fileset optimize x x fileset roughly adjust weight function formatter remove experimental marker option formatter rename abspath file path drop relative path bc global replace us revlogerror storageerror api hg allow extra argument passed repo creation api httppeer expose capability command index drop support negative index index index handle index nullid explicitly linelog fix infinite loop vulnerability lookup add option disambiguate prefix within revset mail always fall back usascii wo nt work bc mail modernize check pythonwithtls manifest add rawsize proxy api meld enable automerge mergetool warn uimerge point nonexistent tool narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc obsolete fix valueerror stored note contains char overlayworkingctx fix exception metadataonly inmemory merges phase add archived phase phase add internal phase pullreport issue message extinct pulled changesets rename pycompatgetcwd encodinggetcwd api revision allow refer nodeid prefix scmutil accept multiple predecessor replacement api shortest never emit prefix even unique shortest use x prefix disambiguate revnum configured sparserevlog refine delta candidate sparse case statprof fix indent level fpwrite statprof update name increase storageutil consistently raise lookuperror api storageutil implement file identifier resolution method bc storageutil move metadata parsing packing revlog api storageutil new module storage primitive api url allow configure timeout http connection behavior change annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc changegroup remove reordering control bc debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc formatter rename abspath file path drop relative path bc grep rename linenumber lineno well bc identify change parent list node bc journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc localrepo automatically load lf extension required bc log changesetformatter fill wdir rev node bc mail always fall back usascii wo nt work bc narrow check server narrow support anything bc narrow drop support remote expansion bc narrow move hgnarrowspec hgstorenarrowspec bc narrow validate spec file wellformed clone bc narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc phabricator drop support legacy phabricatorauthtoken config bc resolve rename status mergestatus shadow change status bc status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc storageutil implement file identifier resolution method bc internal api change bookmark pas formatter printbookmarks instead opts api changegroup pas sorted revision group api cleanupnodes drop special casing around prune marker api context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api fileset extract language processing part new module api global replace us revlogerror storageerror api help adding proper declaration shortlistbasic command api hg allow extra argument passed repo creation api localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support writing shared file api manifest add rawsize proxy api rename pycompatgetcwd encodinggetcwd api revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api scmutil accept multiple predecessor replacement api storageutil consistently raise lookuperror api storageutil move metadata parsing packing revlog api storageutil new module storage primitive api templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api mercurial regularlyscheduled bugfix release containing following fix security fix potential outofbounds read manifest parsing c code core various minor correctness fix revsets commonancestors similar unsorted mercurial regularlyscheduled bugfix release containing following fix command core revlog fix descendant deprecated method hgweb performance remotephase avoid full changelog iteration remotephase fast path newheads computation simple case scmutil avoid quadratic membership testing sparserevlog fix delta validity computation mercurial regularlyscheduled quarterly feature release release note page found full release note
551,Lobsters,vcs,Git & VCS,On gitology (2011),http://jordi.inversethought.com/blog/on-gitology/,gitology,analysis git hatred unavoidable gitology gitology brief excursion gitology blob tree commits ref git computer scientist equivalent ref refspecs branch ref detached head distinguishing remote local tracking branch choosing branch pull onto bare repos hard soft mixed reset coming,analysis git hatred begin discussion gitology define gitology n git comptemptible fellow dvcs pernicious study inner working git apply thus gitology refers theoretical framework mental model one must absorb prerequisite becoming fully competent git commonlyused feature distinction must made although many gitological concept apply git many others part general dvcs theory gitology however sometimes interprets general dvcs concept way following gitological concept particular git repository repos commits changesets csets directed acyclic graph dag branch pushing pulling change wholerepo tracking individual file rebasing csets pushing pulling csets following purely gitological add unnecessary complexity addition eventually unavoidable exposing indexstaging area exposing implementation detail blob tree commits ref ref refspecs branch ref detached head aka branch distinguishing remote local tracking branch choosing branch pull onto bare repos hard soft mixed reset porcelain v plumbing say turn unavoidable gitology user git invite try describe purely gitological concept used git casually sure probably know know likely used git long clear gitology unavoidable user git must quickly become student gitology git make attempt hide ugly gut said user consider example one first task user git encounter making commit git manpage describes operation manpage classic style nerdonly unix documentation store current content index new commit along log message user describing change immediately first gitological concept pop index index unique git even dvcs practically every vcs must implement index one way another however implementation detail vcs might decide implement whatever reason great gitological stroke genius gleefully expose moreover force user manually handle index common vcs optionally make user handle moreover touted frequentlyloved feature git let pause moment describe characteristic git pathological design choice index implementation detail git refers implementation detail plumbing user interface porcelain order make clear git designer think git reverence think instrument handle organic waste body produce git maker hesitate suggest actually consciously designed call designer refer index porcelain whereas plumbing evidenced handled hg darcs bzr yes even crufty ol svn handle index automatically used manpages document manpage unix developer format tends lead terse obscure documentation eg bsd tends great manpages name indicates used single page really cheat sheet mnemonic remind people already known program unix hater handbook explores documentation problem detail case already know index manpage going make difficult figure program intended used nerdy unix developer problem however git primarily tool collaboration widespread collaboration expecting collaborator nerdy unix developer unrealistic hinders collaboration supposed encourage could window user could le technical contributor like translator graphic artist yes make sense put graphic source control even dvcs care manpages inadequate people exposing index frequently touted git encourages micromanagement git user end loving micromanagement blog write book conference ad nauseam characteristic perversion git promotes focussing detail instead getting work done course hard work understand gitology course people feel accomplished complete work work exist wrong expose implementation detail allows advanced use wrong way hide detail completely workarounds like passing option commit using frontend git remember specifically hate frontends git poor thing best fix horrible ui way around though abstracted away user user want advanced use developer api upon build advanced tool gitology git thing expose plumbing situation basically following maker git happy flexibility git offer due exposing plumbing user also persuasion aghast requires learning path human refuse follows git ability tool flexible allow get shot foot never much leave injured foot brief excursion gitology gitological concept enumerated deserving thorough study forthcoming blog post moment briefly describe remaining one necessary order working dvcs blob tree commits ref git simple storage model simple enough exposed user make everyone learn internal detail expose better rite passage serious student gitology read git computer scientist equivalent ref refspecs ref part git storage model basically pointer like carelessly manipulating c pointer result segfaults carelessly manipulating git ref result lost data time problem naturally also exposed user refspecs general class way specify ref syntax based certain hacker learned type inspecting result certain kernel took core dump branch ref branch simple concept independent implementation detail line development repo dag part git except identify branch ref amongst complication lead detached head check earlier commit git end cryptic branch hell dag made exclusively branch branch ref commit recursively pointed ref anywhere might well exist git eventually garbage collect distinguishing remote local tracking branch dvcs really care branch symmetry symmetry beautiful simple branch change nature least appear way user git course disagrees make remember distinction local copy remote branch remote branch big deal end except run choosing branch pull onto git say get whatever difference ie pull common dvcs operation remember pull always enough git sad developmentally stunted selfdescribed stupid content tracker know mean specify branch branch branch always automatically go whatever branch corresponds branch symptomatic asymmetry remote local tracking branch bare repos git treat remote local symmetrically ie push pull symmetric operation also push rather push repos willynilly example make local clone git push pull amongst git figure working directory gitological solution knowing current working directory remove altogether known bare repo workarounds course create zillion branch git user love git design choice really hinder naturality cloning also deeper design problem lurking seeps stupidity content tracking hard soft mixed reset one admittedly esoteric several way reset really mean something completely different chose gitological example point another boneheaded aspect git shall say evolution gitology teach best single command much completely different thing depending option choose actually sort thing realise underlying implementation like move file want rename filesystems implemented oh wait start see gitologists getting idea coming taste git hate fan clamouring much hate git already feel little useless devoted much breath git probably take write next installment come though look like git getting le hateful time
555,Lobsters,vcs,Git & VCS,Git Virtual File System,https://github.com/Microsoft/GVFS,git virtual file system,vfs git master shipped vfs git see documentation new name http installing vfs git building vfs git http wwwvisualstudiocomdownloads http automatically prompt install dependency still need install separately trying vfs git gvfs protocol azure devops clone http clone ssh license licensemd,vfs git branch unit test functional test large repo perf large repo build master shipped vfs git vfs stand virtual file system vfs git virtualizes file system beneath git repository git tool see appears regular working directory vfs git downloads object needed vfs git also manages file git consider ensure git operation status checkout etc quick possible consider file user accessed file repository see documentation instruction get started new name project formerly known gvfs git virtual file system undergoing rename vfs git rename progress code protocol built executables release may still refer old gvfs name see http latest status rename effort installing vfs git building vfs git like build vfs git window installer install visual studio community edition higher http wwwvisualstudiocomdownloads include following workload net desktop development desktop development c net core crossplatform development include following additional component net core runtime window sdk install net core sdk http install nugetexe create folder clone eg c reposvfsforgit clone repo src subfolder eg c reposvfsforgitsrc run srcscriptsbuildgvfsforwindowsbat also build visual studio opening srcgvfssln upgrade project building however first build fail second subsequent build succeed build requires prebuild code generation step detail see build script previous step also use visual studio couple option getting dependency install visual studio side side visual studio make sure dependency visual studio installed alternatively want visual studio installed install following extra dependency visual studio automatically prompt install dependency open solution vsconfig file present root repository specifies required component except window sdk component longer shipped still need install separately installer found c debugrelease setupgvfs version exe trying vfs git vfs git work git service support gvfs protocol example create repo azure devops push content two constraint repo must enable cleansmudge filter repo must gitattributes file root includes line text gvfs clone url repo created please choose clone http option clone repository dialog azure repos clone ssh cd root src run git command normally would gvfs unmount done license vfs git source code repo available mit license see licensemd vfs git relies prjflt filter driver formerly known gvflt filter driver available prerelease nuget package
556,Lobsters,vcs,Git & VCS,Introducing Topics,https://github.com/blog/2309-introducing-topics,introducing topic,machine learning natural language processing help documentation,discover network similar repository completely new way topic topic label create subjectbased connection github repository let explore project type technology click topic interest find related repository adding topic repository help user discover project may see suggested topic adding topic public repository suggestion result machine learning natural language processing applied repository content start new journey rejecting suggestion fit well help u train model meaningful result help documentation show topic work today come topic continue grow learn better understand github role project discovery wait see use new feature
558,Lobsters,vcs,Git & VCS,Trunk Based Development,https://trunkbaseddevelopment.com/,trunk based development,introduction trunkbased development branch abstraction leanpub version control collaboration page one line summary shared branch mainlinemastertrunk bad release cadence trunkbased development smaller team scaled trunkbased development elaboration claim caveat continuous integration continuous delivery claim caveat shortlived feature branch eager continuous code review commit direct trunk release branch branch deleted releasing trunk branch abstraction feature flag concurrent development consecutive release build server broken build google trunkbased development developer qa automators monorepo expand contract githubflow branching model different branching model past many publication history advance sourcecontrol technology related toolstechniques site,introduction quite exciting gitlab hosting friday august going talk trunkbased development branch abstraction book leanpub expecting hard question behalf enterprise startup jordi mon gathering register event gitlab version control collaboration page scroll half way one registrant get free copy book signed somehow even though elecronic one line summary sourcecontrol branching model developer collaborate code single branch called trunk resist pressure create longlived development branch employing documented technique therefore avoid merge hell break build live happily ever ast master git nomenclature shared branch mainlinemastertrunk bad release cadence trunkbased development smaller team scaled trunkbased development elaboration claim caveat trunkbased development key enabler continuous integration extension continuous delivery individual team committing change trunk multiple time day becomes easy satisfy core requirement continuous integration team member commit trunk least every hour ensures codebase always releasable demand help make continuous delivery reality dividing line small team trunkbased development scaled trunkbased development subject team size commit rate consideration precise moment dev team longer small transitioned scaled subject practitioner debate regardless team perform full pre integrate build compile unit test integration test dev workstation committingpushing others bot see claim trunkbased development instead gitflow branching model feature multiple longrunning branch either direct trunk commitpush v small team pullrequest workflow long feature branch shortlived product single person caveat depending team size rate commits shortlived feature branch used codereview build checking ci artifact creation publication happen commits land trunk developer depend branch allow developer engage eager continuous code review contribution code integrated trunk small team may commit direct trunk depending intended release cadence may release branch cut trunk justintime basis hardened release without team activity branch deleted time release alternatively may also release branch team releasing trunk choosing fix forward strategy bug fix releasing trunk also highthroughput team team become adept related branch abstraction technique longer achieve change use feature flag day day development allow hedging order release good thing see concurrent development consecutive release couple developer project going need hook build server verify commits broken build land trunk also ready merged back trunk shortlived feature branch development team casually flex size trunk without affecting throughput quality proof google trunkbased development developer qa automators single monorepo trunk case expand contract suit developer question people practice githubflow branching model feel quite similar one small difference around release people practice gitflow branching model find different many developer used popular clearcase subversion perforce starteam vcs branching model past many publication promote trunkbased development describe include bestselling continuous delivery devops handbook even controversial anymore history trunkbased development new branching model word trunk referent concept growing tree fattest longest span trunk branch radiate limited length lesser known branching model choice since midnineties considered tactically since eighty largest development organization like google mentioned facebook practice scale year different advance sourcecontrol technology related toolstechniques made trunkbased development occasionally le prevalent branching model many stuck year site site attempt collect related fact rationale technique trunkbased development together one place complete twentyfive diagram help explain thing without using tbd acronym even twice
559,Lobsters,vcs,Git & VCS,Top ten pull request review mistakes,https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/,top ten pull request review mistake,github personal opensource contract github enterprise submit pull request top ten pull request review mistake mindless procrastination unified diffs github github enterprise support split diffs style substance need use tool like eslint make kind thing completely automated ultimate goal code change catching incomplete change glossing test code manual test script browser automation test discounting frontend complexity codepen like narrow mindset shortterm thinking cursory review amendment rebasedsquashed easy feedback loop,worked whole lot githubhosted project whether personal opensource contract sometimes using public github time github enterprise one thing pretty easy submit pull request really hard review pull request well without ado top ten pull request review mistake idea better mindless tempting pull request really big submitter someone trust working part code always worked well mention deadline hit lgtm ship snap need spend real time review code everyone make mistake seniority level magical ward role reviewer use creativity expertise reduce chance pull request make codebase worse way really goal every pull request make codebase better maybe project really longterm potential procrastination review really big pull request current task important eventually get around right maybe wait others chime search feeling let force flow might real complaint behind resistance identified real concern take action enough guidance submitter going change ask example original requirement change substantial review ask split understand something break pride ask found whole lot problemsconcerns may time facetoface interaction submitter unified diffs reviewing gibberish default diff view github github enterprise unified mode render set change file software look added removed line attempt group block change intelligently inline know case unified diffs hard read intelligent block selection really good news github github enterprise support split diffs left old file right new file see empty section right code removed left code added either way clearly see file looked like leading better review decision settle gibberish click split topright diff style substance little time spent discussing code style formatting pull request review written need use tool like eslint make kind thing completely automated waste time good code reviewer spends time try understand ultimate goal code change going back original requirement work item tracking spec exactly asking context true review happen may look reasonable superficial structurestyle review become unacceptable ultimate goal understood yes might shy away bringing big thing like much time already spent existing change worth talking better solution opportunity learn everyone might even wrong belief better solution take discussion original submitter figure catching incomplete change diffs really great showing changed thing definition show changed lookout change applied widely like findreplace maybe cover entire codebase change hit subset component entirely missing test test important part change actually easy forget diff prompted think admit really hard hardest kind review might help quick sanity check search either submitter branch whatever machine could ask submitter kind comprehensiveness check done beyond code change see glossing test code test code update pull request easy get lulled false sense security put test must highquality comprehensive right wrong testing art take lot context properly balance risk mitigation testing cost appropriate area code culture team pull request review great place team build shared context question consider test title adequately descriptive key scenario captured enough edge case covered comfort part application exercised single test much little test written good assertion ever fail fail often test fails would easy track error new frontend behavior added added manual test script browser automation test discounting frontend complexity change cs html inclination treat like algorithmic code change see wellformed change imagine would browser seems reasonable say simple user ultimately see come complicated interaction application various rendering engine get head pull branch try multiple browser screen size stuff really tricky even expert frontend developer trust eyeball stuff codepen like exist narrow mindset another area lulled sleep wellformed code diff important consider large scale new code project change could happen question get started impact size download user perception performance change user experience enough release note email user introduce new kind code feature require new testing approach new logging monitoring technique deployment process change exercised user today behind flag system place validate thing behind flag hard test comprehensively might different staging production shortterm thinking pull request quite bit back forth maybe due disagreement need clarification really good stuff building shared context happens next developer come along encounter code easy access discussion idea build accessible context future capture key pull request discussion code comment change code hard reviewer understand hard others future well create place project full conceptual documentation covering involved widelyapplicable topic make sure todos code paired item work item database enough detail make actionable someone original reporter reviewing consider longterm maintenance code easy change easy maintain production longterm cost cursory review amendment finally pull request seen lively attention back submitter court given feedback submitter making change response time forget pull request discussed needed change submitter mean change correct even made pull request amendment highest risk change developer ever make everyone want move le care given development le care given review look especially closely update original pull request even though yes already reviewed pull request comprehensively new change separated commits easier whole pull request newly rebasedsquashed bit frustrating easy hard job design implement software would easier review fact review probably harder whole lot le time build right context provide reasonable feedback give extremely important use article starting checklist inspiration one time team build custom list reminder important easilyforgotten consideration eventually pull request process become powerful feedback loop improving team culture code quality
560,Lobsters,vcs,Git & VCS,Fac: build system,http://physics.oregonstate.edu/~roundyd/fac/,fac build system,,fac generalpurpose build system inspired make utilizes ptrace ensure dependence enumerated source file added git repo important feature fac automatically handle dependency rather either complaining giving incorrect build currently fac run linux system system incredibly easy use automatically track build dependency way independent programming language required specify minimum dependency rule often empty set fac work rest fail specify dependency fac still build successfully use repeatedly parallel building forced write configuration language choice conversely forced use language choice much le custombuilt language developed integrates git keep forgetting git add file needed build
561,Lobsters,vcs,Git & VCS,"Migrating 140,000 commits from Mercurial to Git",https://hackernoon.com/migrating-140-000-commits-from-mercurial-to-git-5cf46f134261,migrating commits mercurial git,migrating commits mercurial git repository importer fastexport mercurial convertextension mercurial convertextension gitfilterbranch bfg repocleaner solution opened pr published jar hacker noon ami accepting submission discus advertising sponsorship read page likemessage u facebook tweetdm hackernoon latest tech story trending tech story,migrating commits mercurial giti recently volunteered lead charge migrating team mercurial git company git month particular team us small largest still residing hg mercurial repository used monorepo wide assortment project year use around visual studio solution referencing project total history nearly commits du ch hg tell history du ch report current content come one goal migration improve repository performance cloning repo scratch day affair hg gui tool tried struggled weight history luckily folder root level team care remove nt use without blowing away history first research tool available convert hg repository use git preserving history github actually provides repository importer import hg creating new repo open source project called fastexport locally later process also found mercurial convertextension advertises similar capabilitiesmy first effort le encouraging transforming history entry take nt hour half later got word github importer repository large import took another minute fastexport fail error invalid date commit drat trying fastexport force got past first error fail another invalid date later conversion later learned error nt caused date symptomgiven error occur revision several month old wanted reduce size repository anyway started looking way prune history converting git found mercurial convertextension purported hg hg conversion lot option starting specific revision filtering file history sort powerful option however consistently failed obscure error invalid compression type way history abort invalid compression type k compression type seen helpful irc stackoverflow yearsold mailing list unable help get working day without progress abandon tool seemed promisingafter defeat talked coworker done similar conversion past pointed fastexport pair tool massmodifying history called gitfilterbranch bfg repocleaner also mentioned invalid date issue saw pointed error nt date null author causing misaligned column running fastexport authorstxt file worked hour later equivalent git repository backup could screw history wanted without reexport scratch keep uptodate change coworkers making fastexport incremental export long nothing new committed exported git reponow complete history git could start trying pare manageable sizesome trial run bfg repocleaner showed good job reducing size git folder postexport around minute two still left number commits implying ten thousand empty revision clogging history gitfilterbranch support pruning empty commits pruneempty experimentation showed would take hour completely process historyluckily somebody opened pr adding pruneemptycommits bfg repocleaner nt merged month published jar jar new flag git history gone almost commits git folder still large repo huge vast improvement thorough ran git filterbranch pruneempty afterwards see commits find got history commits took small improvement take quite still worth onetime migrationultimately write two script automate process one script run branch needed keep deleting unnecessary file creating gitignore one coordinating script repowide task like renaming deleting branch running script branch removing deleted file history garbage collecting git repoto recap migration year current visual studio visual studio top level folder team nt useafter migration left still year current commitsno file nt usetools successfully used lesson learned process changing scm system massmodifying history actually lot easier expected came away negative impression hg allowed corrupt commits history caused multiple tool fail tool manipulating git history lot straightforward convertextension spent lot time reading doc asking question irc never felt getting closer understanding supposed configured gave yet another demonstration matter odd unique think problem somebody else thinghacker noon hacker start afternoon part amifamily accepting submission happy discus advertising sponsorship opportunitiesto learn read page likemessage u facebook simply tweetdm hackernoonif enjoyed story recommend reading latest tech story trending tech story next time take reality world granted subscribe get daily roundup top tech story
562,Lobsters,vcs,Git & VCS,Vanity text for GitHub - Write to your GitHub activity chart,https://github.com/ihabunek/github-vanity,vanity text github write github activity chart,vanity text github rockstar installation python package index usage reference text h help startdate sunday offset spacing w spacewidth c commits,vanity text github write github activity chart inspired rockstar installation python package index preferably install virtual environment pip install githubvanity usage initialize empty git repository submit github populate repo desired text push repo github presto reference vanity write option text text text write commit chart available option h help show usage instruction startdate date start sunday offset number space leave left default spacing spacing letter default w spacewidth width space character default c commits number commits per pixel default default startdate sunday week last one first pixel visible commit chart
565,Lobsters,vcs,Git & VCS,git-crecord: interactively select changes to commit or stage,https://github.com/andrewshadura/git-crecord,gitcrecord interactively select change commit stage,git crecord gitcrecord installation license author,git crecord gitcrecord git subcommand allows user interactively select change commit stage using ncursesbased text user interface port mercurial crecord extension originally written mark edgington gitcrecord allows interactively choose among change made linelevel granularity commit stage unstage change select committing staging selected change unselected change still present working copy use crecord multiple time split large change several smaller changesets installation gitcrecord assumes python later installed gitcrecord ship setuppy installer based setuptools install gitcrecord simply type setuppy install install gitcrecord manpage readme file proper location alternatively install manually symlink gitcrecord directory git find directory path ln pwdgitcrecord localbingitcrecord new subcommand available ready commit change type git crecord bring window view change selectdeselect change find information use builtin help press key git crecord support popular option git commit author date message amend signoff license program free software redistribute andor modify term gnu general public license published free software foundation either version license option later version program distributed hope useful without warranty without even implied warranty merchantability fitness particular purpose see gnu general public license version text detail received copy gnu general public license along package write free software foundation inc franklin st fifth floor boston usa author list contributor see contributor
566,Lobsters,vcs,Git & VCS,The next billion programmers (won’t use Git),https://medium.com/@gerstenzang/the-next-billion-programmers-wont-use-git-5e8b0ea57886,next billion programmer use git,next billion programmer use git xkcd intro tutorial git interface optimize daily workflow assume code online time invest github people network invest github code network serverless toolchain next billion programmer look like actively investing sign jess peterson,next billion programmer use git xkcdthe next billion programmer computer science degree speak english chromebooks phone touch code smaller way part job might considered marketer analyst designer may use git githubgit created linus linux kernel world assume computer would go offline moment three top five stackoverflow question git book git github intro tutorial git part git horribly broken thus githubhere four idea next generation github might look like ready next billion git interface optimize daily workflowspull request rebase remote origin github handholding unfamiliar underlying concept git fact even invents jargon huge problem renaming pull request submit code review using visuals make unintuitive best practice like rebasing easier designing interface taskoriented manner would go long assume code online timegit assumes contributor usually offline year git origin git rarely case assume everyone like google thing like live commenting function change time imagine preemptive code conflict warning native text editor pair programming live snippet invest github people networkthe majority programmer contribute open source github profile pretty barren fact search programmer defaulting google lost opportunity book github try making profile rich focusing learning journey programmer course job network obvious next step well critical turning github illusion network effect real invest github code networkgithub also wellplaced take advantage socalled serverless architecture imagine liblib library library written language callable language standardized input output sort like souped readytodeploy playground amazon lambdalike service could use best datetime library happened javascript great auth library written python hosted forkable githubwhat toolchain next billion programmer look like written github think fair chance miss lot might opportunity youi actively investing area please give ring receive future post via email sign post conceived jess peterson august
567,Lobsters,vcs,Git & VCS,Why I close PRs,http://www.jeffgeerling.com/blog/2016/why-i-close-prs-oss-project-maintainer-notes,close pr,bus factor principle evaluating pull request everything welltested automation breaka test breaka face maintainabilty completeness technical debt cater use case common problem use proper syntax space instead tab nt change architecture nt change line code one pr conclusion default feel free say,maintain many open source project github elsewhere writing merged andor closed thousand pull request pr patch past year would like summarize many reason nt merge many pr project comaintainers bus factor low offset granting open license encouraging fork also devote set amount time averaging hoursweek os project maintenance personal budget around devote infrastructure support project forprofit company use project devote os sadly nt like closing pr without merging pr mean someone liked project enough contribute back sometimes necessary trying jerk usually start thanking contributor try soften blow closed pr ensuring continued health project principle behind maintain project hopefully reading understand choose close pr instead merging principle evaluating pull request project maintain indeed software work general hold following principle important usually close pr nt hold principle everything welltested automation almost every project maintain least full coverage happy path running travis ci jenkins another ci system breaka test breaka face rare exception merge pr test nt passing also merge pr large amount new untested functionality nt require unit test coverage happy path tested maintainabilty completeness nt cater everyone usually cater os project actually using live production often dozen hundred project generally happy add something increase maintenance burden unless compelling functionality obvious bugfix ca nt maintain system nt fully understand like keeping thing lighter cutting edge case rather adding technical debt nt time pay cater use case see lot pr oneoff functionality personally never seen wild sure unicorn system need configure hairy detail obscure app going include code project nt use ca nt vouch b add maintenance simple addition one unicorn please fork work wo nt get offended public project almost always meant solve common problem try make easy go deeper either forking work extending use proper syntax often automated syntax review built automated testing nt please make sure basic thing like spacing variable naming convention line ending space instead tab like follow general style project often merge code fix style much nicer willing merge pr style quirk nt change architecture unless first discussed issue pr entire project architecture test architecture swapped never merge something like unless thoroughly discussed approved issue first usually reason many reason fact thing way saying architecture test rig always right merge sweeping change thing make harder understand project work nt change line code one pr unless good reason often get notification someone submitted pr jump review see file changed line code added across commits architectural change previously discussed issue understand large pr like take time read anything line change brain nt capacity good code review le hour conclusion default one greatest irony process people open issue subsequent pr persistentannoyingdifficult want one problem solved project vanish immediately code merged realize usually explicitly convince maintain snowflake code save ongoing technical burden contributor willing establish longterm relationship project willing concede control architecture prove trust best contributor project started one use project forprofit work donate hour two week help tend issue queue close invalid issue submit pr simple bug fix especially related part project familiar anyone else maintaining os project make sure wellestablished set principle evaluate pr feel free say pr nt meet standard many project get derailed accepting many new feature without evaluating longterm maintainability problem avoided simple twoletter word
568,Lobsters,vcs,Git & VCS,10 things I hate about Git (2012),https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/,thing hate git,complex information model crazy command line syntax crappy documentation update cgd information model sprawl leaky abstraction power maintainer expense contributor unsafe version control burden vcs maintainance pushed contributor git history bunch lie simple task need many command update august comparison subversion repository commit access git repository without fair used svn life much better git need basic command get use mercurial instead subversion even worse problem programmer worth investing time learning tool understand must dumb flaw point x reddit hacker news resetcheckout remote branch command option practically mandatory base command useless functionality useful command useful functionality update september like,git source code version control system rapidly becoming standard open source project powerful distributed model allows advanced user tricky thing branch rewriting history pity hard learn unpleasant command line interface treat user utter contempt complex information model information model complicated need know point reference consider subversion file working directory repository version branch tag pretty much everything need know fact branch tag file already know really need learn three new thing version linear odd merge git file working tree index local repository remote repository remote pointer remote repository commits treeishes pointer commits branch need know crazy command line syntax command line syntax completely arbitrary inconsistent shortcut graced top level command git pull exactly equivalent git fetch followed git merge shortcut git branch combined git checkout git checkout b specifying filename completely change semantics command git commit ignores local unstaged change footxt git commit footxt various option git reset completely different thing spectacular example command git far tell something linus hacked forced main codebase solve problem one night combine email reading patch applying thus us different patch syntax specifically one email header top crappy documentation man page one almighty fuck describe command perspective computer scientist user case point gitpush update remote ref along associated object description human gitpush upload change local repository remote repository update another example thanks cgd gitrebase forwardport local commits updated upstream head translation gitrebase sequentially regenerate series commits applied directly head node information model sprawl remember complicated information model step keep growing like cancer keep using git concept occasionally drop sky ref tag reflog fastforward commits detached head state remote branch tracking namespaces leaky abstraction git much leaky abstraction abstraction essentially distinction implementation detail user interface understandable advanced user might need know little feature implemented grasp subtlety various command even beginner quickly confronted hideous internal detail theory plumbing porcelain better plumber know work porcelain common response get complaint git command line complexity need use command use like subversion really want rubbish like telling old granny freeway scary drive left lane want git provide useful subset every command soon requires another even simple action often require complex action undo refine wellintentioned advice github maintainer project working apology find merge base branch master git mergebase master yourbranch assuming already committed change rebased commit onto merge base create new branch git rebase basecommit head git checkout b mynewbranch checkout ruggedisation branch remove commit rebased git reset merge new branch back ruggedisation git merge mynewbranch checkout master git checkout master merge new branch git merge mynewbranch check work merged remove merge git reset push new branch git push origin mynewbranch log pull request translation easy granny rev dump clutch use wheel spin get round first corner third trail brake onto freeway late apexing watch marble inside hard fifth handbrake turn make exit power maintainer expense contributor power git aimed squarely maintainer codebases people merge contribution wide number different source ensure number parallel development effort result single coherent stable release good majority git user situation simply write code often single branch month time git handle dual boiler espresso machine need instant interestingly think tradeoff inherent git design simply result ignoring need normal user confusing architecture interface git good true speaking architecture false user interface someone could quite conceivably write improved interface easygit start hide unhelpful complexity index local repository unsafe version control fundamental promise version control system put precious source code safe make change like always get back git break promise several way committer irrevocably destroy content repository git add git push f origin master git push origin master git rebase commit already pushed worked git push burden vcs maintainance pushed contributor traditional open source project one person deal complexity branch merges maintainer everyone else update commit update commit update git dump burden understanding complex version control everyone making maintainer job easier would new contributor nothing invested project every incentive throw hand leave git history bunch lie primary output development work source code wellmaintained history really important byproduct argument rebase particular rely aesthetic judgment messy merges history unreadable log rebase encourages lie order provide developer clean uncluttered history surely correct solution better log output filter unwanted merges simple task need many command point working open source project make change share world subversion look like make change svn commit change involve creating new file tricky extra step make change svn add svn commit githubhosted project following basically bare minimum make change git add confused svn add git commit git push change still halfway login github find commit issue pull request someone downstream merge reality though maintainer githubhosted project probably prefer change feature branch ask work like git checkout master make sure new feature start baseline git checkout b newfeature make change git add confused svn add git commit git push login github switch newfeature branch issue pull request maintainer merge move change local directory actual project repository add commit push click pull request pull merge push think added bonus diagram illustrating command typical developer traditional subversion project needed know get work done bread butter vcs checking repository committing change getting update bread butter command concept needed work remote subversion repository need deal typical githubhosted project bread butter command concept needed work githubhosted project power git sophisticated branching merging weakness complexity simple task update august post obviously struck nerve get lot traffic thought address frequent comment comparison subversion repository commit access git repository without fair true experience svn repository seen many committers work better way git least github repository tend expected submit pull request even reach trusted stage perhaps someone else would like fairer applestoapples comparison used svn truth even though done huge amount coding svnbased project git command information model still inherently difficult learn situation helped using subversion command name different meaning eg svn add v git add life much better git actually quite like architecture let ui without product need basic command get experience barely survive clone add commit checkout soon need rebase push pull fetch merge status log annoyinglycommandless pull request long cherrypick reflog etc use mercurial instead sure lucky person get choose vcs used project subversion even worse problem probably post git deficiency subversion crappiness excuse programmer worth investing time learning tool true beside point point tool hard learn improved understand must dumb true extent see previous point flaw point x right writing people viewed post probably commented reddit comment hacker news comment comment many flaw inaccuracy mischaracterisations generalisation bias brought light known would popular would tried harder overall level debate actually pretty good thank bonus command inconsistency resetcheckout reset one file working directory committed state git checkout filetxt reset every file working directory committed state git reset hard remote branch git checkout remotenamebranchname git pull remotename branchname another command separator remotename branchname recall right command option practically mandatory finally list command noticed almost useless without additional option base command useless functionality useful command useful functionality git branch foo creates branch nothing git checkout b foo creates branch switch git remote show name remote git remote v show name url remote git stash store modification tracked file roll back git stash u also untracked file git branch list name local branch git branch rv list local remote tracking branch show latest commit message git rebase destroy history blindfolded git rebase let rewrite upstream history branch choosing commits keep squash ditch git reset foo unstages file git reset reset discard local modificationsreturns another commit touch working directory git add nothing print warning git add git add stage local modificationsadditionsstages local modificationsadditionsdeletions update september interesting link like like loading related
569,Lobsters,vcs,Git & VCS,Welcome to Gitea,https://blog.gitea.io/2016/12/welcome-to-gitea/,welcome gitea,strk,thu dec strk gitea community fork popular selfhosted git service gogs growing group former gogs user contributor found singlemaintainer management model gogs frustrating thus decided make effort build open faster development model happened trying convince unknwon giving write permission people among community rightly considered gogs creature want let grow outside thus fork necessary order set code effectively free kahlil gibran wrote child child child son daughter life longing come though yet belong gitea owner elected yearly open number maintainer decide simple voting model contribution get accepted play owner role anyone least contribution accepted apply become maintainer since fork beginning november gitea got pull request merged issue closed among management issue cleanup bug closed another pr pending merges many waiting released new feature start appearing invite everyone join effort help continue building next generation selfhosted git service
570,Lobsters,vcs,Git & VCS,Gitql - A git query language,https://github.com/cloudson/gitql,gitql git query language,gitql reading code requirement install release page github action file binary example example command question issue textql,gitql gitql git query language repository path see reading code project created first go project use project learn structure go code good idea read much modern code mine help guiding one right direction requirement install support static compiling linux window platform access release page grab binary want compile follow instruction read dockerfile understand whole process support yet static compiling need pkgconfig dependency install run inside repository folder export pkgconfigpath pwd usrlocaloptopenssllibpkgconfig export ldlibrarypath ldlibrarypath pwd export dyldlibrarypath dyldlibrarypath pwd make builddynamic need c compiler cmake ninja installed using chocolately easy choco install cmake ninja set path homedrive path make build always take look github action file understand build ci server even try binary either compile could nt use open issue example gitql query git ql query example commits table commits author authoremail committer committeremail hash date message fullmessage see table example command select hash author message commits limit select hash message commits hell fullmessage fuck fullmessage select hash message authoremail commits author cloudson select date message commits date select message commits hell message order date asc question gitql open issue note gitql nt want kill git log created science readonly deleting inserting updating table commits default limit row inspired textql gitql compilerinterpreter instead read sqlite database commits tag etc would need sync table every time run sql would sqlite base repository
571,Lobsters,vcs,Git & VCS,Git Cheat Sheet,https://gist.github.com/akras14/3d242d80af8388ebca60,git cheat sheet,git cheat sheet blog command getting started configuration working local branch branching updating current branch standard flow advanced comparing change working remote branch resource reference viewing history mergediff tool,git cheat sheet visit blog command getting started git init git clone url configuration git config global colorui true git config global pushdefault current git config global coreeditor vim git config global username john doe git config global useremail foo citrixcom git config global difftool meld working local branch branching see list local branch git branch switch existing local branch git checkout branchname checkout current branch new branch named newbranchname git checkout b newbranchname merge branchname current branch git merge branchname merge branch without fast forwarding pull request help preserve history change relavant branch advanced feature try gui see difference regular merge merge noff git merge noff branchname soft branch delete complain branch merged git branch branchname hard branch delete complain nothing like rm rf bash git branch branchname updating current branch standard flow see commits git log pretty commit view customize much want google git log prettyformat h graph see worked past week git log authoralex prettyoneline abbrevcommit see change made branch assuming branched form master branch git log nomerges master see status current git branch often advice command need run git status short view status helpful seeing thing glance git status add modified file commited aka stage file git add filename add modified file commited aka stage file git add add text file etc git add txt tell git track file anymore git rm filename record change git default editor open commit message visible via git log file commited history git commit short hand commiting file writing commit message via one command git commit commit message changing history want change previous commit nt pushed yet remote repo simply make new change add via git add run following command past commit ammended git commit amend advanced unstage pending change change still remain file system git reset unstage pending change reset file precommit state git reset hard head go back time history current branch git reset tag git reset commithash save current change without commit repo git stash later return change git stash pop return file previous version staged yet otherwise use git reset filename git reset hard filename git checkout filename comparing change see current change staged yet good thing check running git add git diff see current change commited yet including staged change git diff head compare current branch branch git diff branchname diff open change via difftool configured tell open directory mode instead open file one time git difftool see change made current branch compared master branch helpful working stand alone branch git difftool master see file name changed current branch git diff nocommitid nameonly nomerges originmaster similar see statistic file changed git diff stat diff condition working remote branch see list remote repos available git clone least one named origin git remote detailed view remote repos git url git remote v add new remote ie origin set git remote add origin http somegitremoteurl push current branch remote branch usually name called upstream branch git push remote branch set upstream make u tell git remember parameter git push u origin master otherwise manually specify remote branch use every time git push origin branchname like pushing get latest update remote defaul git try pull origin upstream branch git pull tell git pull specific branch git pull origin branchname git pull actually short hand two command telling git first fetch change remote branch merge current branch git fetch git merge originremotebranchname want update history remote branch fetch purge git fetch p see list remote branch stand git branch resource reference viewing history mergediff tool
572,Lobsters,vcs,Git & VCS,"Publishing with GitHub Pages, now as easy as 1, 2, 3",https://github.com/blog/2289-publishing-with-github-pages-now-as-easy-as-1-2-3,publishing github page easy,create repository simply adding markdown file folder jekyll optional front matter jekyll readme index jekyll default layout jekyll title heading get touch u,publishing website software documentation github page requires far fewer step three exact create repository navigate existing repository commit markdown file via web interface like would file activate github page via repository setting website already familiar github page may interested know behind scene thing simplify publishing experience bring line may expect authoring markdown content elsewhere github markdown file rendered github page saving needing add yaml front matter metadata top file separated file use readme file site index indexmd indexhtml dissimilar browse repository github specify theme site config config file set minimal default theme match look feel markdown elsewhere github given file layout specified assign one based context example page automatically get page layout default layout page layout exist page explicit title file begin use heading page title appears place like browser tab improvement allow quickly easily publish first website click document software project simply adding markdown file doc folder within repository course continue control look feel opting additional customizations overriding default theme layout style change affect existing site build two potential gotchas advanced jekyll user site iterates page eg page sitepages may find additional page readme vendored dependency list explicitly exclude file config file exclude directive specify page layout title expect either unset eg need serve unstyled content need explicitly set value null reason want feature disable adding nojekyll file site root directory github page build process transparent customizable possible feature implemented open source jekyll plugins namely jekyll optional front matter jekyll readme index jekyll default layout jekyll title heading change affect existing site build although safely begin use feature question please get touch u happy threestep publishing
573,Lobsters,vcs,Git & VCS,How we made diff pages three times faster,http://githubengineering.com/how-we-made-diff-pages-3x-faster/,made diff page three time faster,click redirected,click redirected
574,Lobsters,vcs,Git & VCS,Git 2.11 Released,https://github.com/blog/2288-git-2-11-has-been-released,git released,contributor abbreviated name one source source use context figure object meant source performance optimization delta chain source bumped source source object lookup data structure source source patch id source source advanced filter process git lf operate asynchronously source sundries post git thorough analysis source source gnome libsecret source source source source source whole shebang full release note million approximation,open source git project released git feature bugfixes contributor look interesting new feature abbreviated name git print longer abbreviated name better tool dealing ambiguous short probably noticed git object identifier really long string hex digit like generated output hash function always bit hexadecimal character since chance two name colliding roughly getting struck lightning every year next eight generally something worry probably also noticed name inconvenient look type even cutandpaste make easier git often abbreviates identifier print like feed abbreviated name back git command unfortunately collision shorter name much likely sevencharacter name expect see collision repository ten thousand deal git check collision abbreviating object name start relatively low number digit seven default keep adding digit result name unique object repository likewise provide abbreviated git confirm unambiguously identifies single object far good git done age problem issue repository tend grow time acquiring object name unique one day may next write abbreviated bug report commit message may become ambiguous project grows exactly happened linux kernel repository million object meaning expect collision name shorter hexadecimal character old reference like one ambiguous inspected command like git show address git ship several improvement first minimum abbreviation length scale number object repository foolproof repository grow time growing project quickly scale larger futureproof length use git even moderatesized project see command like git log oneline produce longer identifier source still leaf question somehow get ambiguous short git two feature help one instead simply complaining ambiguity git print list candidate along detail object usually give enough information decide object interested source course even convenient git simply pick object wanted first place ago git learned use context figure object meant example git log expects see commit tag point commit command like git show operate type object context guess object meant set coredisambiguate config option prefer specific type source performance optimization one git goal always speed come overall design lot opportunity optimize code almost every git version ship optimization exception let take closer look larger example delta chain git faster accessing delta chain object database improve performance many common operation understand going first know heck delta chain may know git avoids storing file multiple time data stored object named content version control system often see data almost identical ie file change little bit version version git store related object delta one object chosen base stored full object stored sequence change instruction base like remove byte add new byte offset resulting delta fraction size full object git storage end proportional size change size version file change time efficient base often adjacent version base delta may form chain delta version two stored delta version one version three stored delta version two chain make expensive reconstruct object need accessing version three example requires first reconstructing version two chain get deeper deeper cost reconstructing intermediate version get larger reason git typically limit depth given chain object however repacking using git gc aggressive default bumped assumption would make significantly smaller pack number chosen somewhat arbitrarily turn ideal balance size cpu actually around default git even aggressive repacks source even delta lot go construct one object reduce impact git keep cache recently reconstructed object work well delta base tend close together history command like git log traverse history tend need intermediate base soon cache adjustable size bumped year machine gotten ram due storing cache fairly simple data structure git kept many fewer object could frequently evicted entry wrong time git delta base cache received complete overhaul perform better box around better large repository improvement scale adjust coredeltabasecachelimit config option beyond default megabyte one extreme case setting gigabyte improved speed particular operation linux kernel repository source source object lookup delta base improvement help accessing individual object access find recent version git optimized object lookup multiple packfiles large number object git pack together packfiles single file contain many object along index optimized lookup repository also accumulates packfiles part fetching pushing since git us transfer object network number packfiles may grow daytoday usage next repack combine single pack even though looking object packfile efficient many packfiles git linear search checking packfile turn object historically git tried reduce cost linear search caching last pack object found starting next search help operation look object order appearance history packfiles tend store segment history looking place last successful lookup often find object first try check pack git last pack cache replaced data structure store pack recently used mru order speed object access though really noticeable number pack get hand git mru strategy adapted repacking process previously even single last found cache speedup consequently dramatic repacking linux kernel state faster source source patch id git speed computation patch id used heavily git rebase patch id fingerprint change made single commit compare patch id find duplicate commits two change different point history make exact change rebase command us patch id find commits already merged upstream patch id computation avoids merge commits renames improving runtime duplicate check factor case source source advanced filter process git includes filter mechanism used convert file content local filesystem representation power git lineending conversion also execute arbitrary external program git lf system hook git registering filter program protocol git us communicate filter program simple executes separate filter file writes filter input read back filter output large number file filter overhead process startup significant hard filter share resource http connection among git add second slightly complex protocol filter many file single process reportedly improve checkout time many git lf object much factor original protocol still available backwards compatibility new protocol designed extensible already discussion allowing operate asynchronously filter return result arrive source sundries post git mentioned improvement diff algorithm make result easier read compactionheuristic option algorithm become default corner case handle well thorough analysis git improved algorithm behaves similarly cover case regression new option go name indentheuristic diffindentheuristic likely become default future version git source ever wanted see commits brought branch merge commit git understands negative parentnumber selector exclude given parent rather selecting may take minute wrap head around mean git log show commits merged none commits already branch also use omitting shorthand source credential helper contrib use gnome libsecret store git password source git diff command understands submodulediff well setting diffsubmodule config diff show change submodules actual patch two submodule state source git status new machinereadable output format easier parse contains information check interested scripting around git source work continued converting git shell script c program drastically improve performance platform extra process expensive like window especially program may invoke subprogram loop source source whole shebang sampling change git contains commits check full release note complete list true according national weather service odds struck lightning million odds happening consecutive year starting year turn rather complicated compute probability seeing collision approximation million object chance full collision chance collision character approach commonly used metric number item reach chance collision square root total number possible item working exponent easy halve exponent hex character represents bit name possibility mean expect collision around object
575,Lobsters,vcs,Git & VCS,A look back: Bram Cohen vs Linus Torvalds,http://www.wincent.com/a/about/wincent/weblog/archives/2007/07/a_look_back_bra.php,look back bram cohen v linus torvalds,git interchange bram cohen merge algorithm codeville website link mailing list thread bram linus bram git git right footnote git,stumbled across fascinating mailing list thread fairly nasty exchange two open source poster child bram cohen bittorrent fame case writing capacity codeville developer linus torvalds linux fame original author git never particular liking either personality although recognize clever individual known occasional demonstration arrogance really interesting thing interchange firework thread way thing look like hindsight become familiar git last day say torvalds right every count knew torvalds smart seeing never really occasional linux user never realized smart thought good programmer happened right place right time good idea closely studying git little bit awestruck torvalds frickin genius true visionary somehow managed get instantly flash insight come solution version control meantime codeville still languishes alphaville git forged ahead become version powerful highperformance superbly documented version control system stunningly active community git weekend hack look like weekend hack source bram cohen merge algorithm codeville website say like know need new merge algorithm consider lead monotone developer say clicking link reveals say merge inappropriate choice merge algorithm modern vcs describes scenario merge algorithm produce desirable result understand scenario scan mailing list thread bram linus duke selected highlight bram honestly would think wholetree threeway merges even consider moving line file show explored merge problem deeply much harder problem think one already solved system really like hear explanation git reimplementing stuff scratch implicit claim git thing system without reinvent functionality first honestly naive illinformed arrogance like reiterate nothing support moving line file predict total confidence git try support functionality simply fail either giving creating system behave horribly get dismissive claim please remember spent year thinking merge algorithm actually designed implemented spoken length people done merely thought week linus personally want something repeatable nonclever something understand tell quite frankly merging singlefile history without taking file history account make go ugh important part merge handle conflict need verified human anyway interesting meld history together right new solid base future merges word important part trivial part naming parent keeping track relationship clash look like scm people seem think solution clever content merges miss point entirely bram think system support snapshot history merging functionality whatsoever right thing asking seriously sure many merge algorithm git time thread took place today four see gitmerge man page detail clever nonclever merge algorithm besides point real insight torvalds somehow grasped beginning made describe frickin genius git right need fancy metadata rename tracking forth thing need store state tree change file renamed one copied one deleted line added one removed line change made inside slab text copied one file another care question certainly keep special tracking data order help answer change tree addition deletes renames edits etc implicitly encoded delta two state tree track content git already smart get smarter figuring happened given line given revision came without ever embed additional meta data repository absolutely everything inferred git break mould think content file track renames track content wholetree level radical departure version control system bother trying store perfile history instead store history tree level perform diff comparing two tree two file result fundamental design decision structure git repository stunningly simple simple fact surprised sophistication thing way best code always simple solid premise complex application arise fundamentally smart design decision git merges merging algorithm smart try smart unambiguous decision made automatically doubt user decide way want machine making decision never want fundamental insight git approach merging every version control system trying get smarter git happily selfdescribed stupid content manager better footnote try tricky merge issue described monotone dev find git exactly right thing mkdir playground cd playground git init echo hello world greeting git add greeting git commit add greeting git checkout b left git mv greeting saludo git commit git checkout master git rm greeting git commit git merge left git responds conflict renamedelete renamed greeting saludo left deleted head automatic merge failed fix conflict commit result opinion exactly right behaviour clearly ambiguous merge simply right version control system try resolving actually want dumb content tracker handle automatically simplest nonambiguous case instance like one want ask see git excellent job describing nature conflict make easier solve
576,Lobsters,vcs,Git & VCS,git-pisect: A Parallel Version of git-bisect,https://hoelz.ro/blog/git-pisect,gitpisect parallel version gitbisect,gitpisect parallel version gitbisect recently gitpisect name bisect parallel work gitbisect work ok parallel bisect metric update try repository comment powered disqus,gitpisect parallel version gitbisectone favorite tool git tool suite gitbisect unfamiliar gitbisect sort magical program use quickly find commit introduced problem repository checking commits repository history tell whether state commits whatever testing good bad minimizes number time need using binary search algorithm futhermore automated test suite tell gitbisect run test behalf using git bisect run drive whole process proven useful year open source commercial workhowever sometimes bisect nt seem fast enough test suite take bisect take using bisect multicore machine shame bisect us one core others remain idleso ago talking coworker idea parallel version gitbisect implemented hack n tell recently attended call gitpisectwhat name really crappy portmanteau git parallel bisect course bisect parallel know know need finish one round test able decide next commit test right name crappy really something like gitpnsect parallel nsect reason become apparent shortly gitparallelregressionfinder gitpisect catchyhow work order understand pisect work first need fully understand regular ol bisect work feel comfortable gitbisect work feel free skip next sectionhow gitbisect work well let look typical range git commits head say pass head fails run git bisect start head git start testing halfway point head regression nt present current point know must introduced later commit pick new point halfway last known good commit first known bad commit like head fails narrow range even head test fails know either culprit final test file spare additional diagram let say indeed culprit next partok parallel bisect let say repository test suite take minute run safely parallelizable nt implement sort parallelization since machine day multiple core running test single core seems like waste time using machine four core use yes let look example multiple parallel test head four test parallel move smaller range commits consideration much quickly step demonstrated next one head instead taking four step ie four minute standard bisect take two metricsto test gitpisect picked random number let call n created git repository commits commits n passed commits n failed using following code include unistdh int main void sleep return exitcode ran gitbisect gitpisect repository latter job result test fourcore laptop gitbisect gitpisect gitpisect gitpisect gitpisect gitpisect idea gitpisect single job little faster gitbisect complaining update spent time looking reason behind turn picking slightly different test commits gitbisect mean given commits investigate gitpisect may pick commit gitbisect may pick vice versa mean depending commit range defective commit sometimes gitpisect end performing one fewer test sometimes gitbisect perform one fewer test also interesting fact sixteen job take longer eight job log log log log fairly close sometimes end needing number iteration find offending commit job mean overhead setup task schedulingwhat interesting even though take le time gitpisect actually perform work single job equivalent gitbisect performs n test eight job performs n test performing redundant work however since work happening parallel observe time relative n try idea sound interesting encourage head repository clone try people interested happy accept contribution improve code add feature thinking distributed version gitdisect could interesting well eager hear others find useful find issue either idea implementation published please enable javascript view comment powered disqus
577,Lobsters,vcs,Git & VCS,Git Journal: The Git Commit Message and Changelog Generation Framework,https://github.com/saschagrunert/git-journal,git journal git commit message changelog generation framework,gitjournal git commit message changelog generation framework tl dr git gitjournal jump installation rust installation cargo pacman rustup usage repository default output markdown template output commit message preparation verification toml structure found current feature general journal generation output preparation verification commit message planned feature improvement contributing,gitjournal git commit message changelog generation framework table content tl dr maintaining changelogs timeconsuming especially multiple person work project maintain separate file merge conflict additional release work sure follow sometimes complete entry lost merge conflict resolution people forget mention something link issue actual commits missing would great could use commit history git generate beautiful changelog without additional work needed gitjournal jump ensure autogeneration framework write sensible commit message needed single commit message contain one logical change project described standardized way result much cleaner git history provides contributor information actual change theoretical base consists two rfcs installation use gitjournal git extension rust installation needed including package manager cargo different package manager provide well example via pacman arch linux sudo pacman rust cargo super easy installation also possible use rustup two dependency installed gitjournal installed via cargo install gitjournal adapting path variable search also within cargobin possible run invoking git journal usage binary gitjournal depends rust library gitjournal also used independently binary application write customized solution repository used example following explanation default output run git journal anywhere inside repository output nice looking markdown formatted changelog based repository git log git journal gitjournal info skipping commit summary parsing merge branch testbranch gitjournal okay parsing done unreleased added paragraph explains change detail fixed multiple issue removed needed thing removed added added removed fix added commits sorted time mean newest element occur top parsing commit message done regarding describes different syntax element within commit message category added fixed automatically wrapped square bracket available also possible define category within configuration file journal automatically list log last release unreleased entry footer commit message described automatically accumulated printed changelog list ordered value also possible skip unreleased entry git journal u gitjournal okay parsing done added using specific commit range format rev rev different starting point head parsing also done git journal git journal git journal head also possible print release git tag past n release via n count git journal gitjournal info skipping commit summary parsing merge branch testbranch gitjournal okay parsing done unreleased added paragraph explains change detail fixed multiple issue removed needed thing removed added added removed added added added git journal gitjournal okay parsing done added beside usual detailed log short version exists us commit summary git journal gitjournal info skipping commit summary parsing merge branch testbranch gitjournal okay parsing done unreleased added removed added added removed added added added also possible append output journal file separated newline git journal invocation git tag specific pattern like rc excluded automatically customized via e information please refer help git journal h template output design commit message template described using template test repository tag tag default name default tag tag name section tag tagsubtag tag name subsection footer fix use template use option git journal changelogtoml gitjournal info skipping commit summary parsing merge branch testbranch gitjournal okay parsing done unreleased default removed removed removed added new gitjournal improved fixed removed added gitjournaltoml file removed needed thing removed added added removed section added paragraph explains change detail subsection fixed multiple issue fix default added everything untagged go default section name mapped section subtag see markdown header also mean possible list item uncategorized since templating engine give possibility split commits multiple piece parsed paragraph converted single list item always provide clean markdown footer specified toml array string output selected footer key correct position log please consider accumulation footer related complete tag section printed command line option like default output available well also possible add custom header footer text every output every tag information please read commit message preparation verification use automatic commit message preparation verification git journal setup executed every local repository git journal setup gitjournal okay default written gitjournaltoml file gitjournal okay git hook installed githookscommitmsg gitjournal okay git hook installed githookspreparecommitmsg gitjournal okay installed bash completion path gitjournal okay installed fish completion path gitjournal okay installed zsh completion path already exists hook gitjournal try append needed command verified hand afterwards generated command line completion bash fish need put correct directory shell default configuration file toml file represents structure default configuration comment also found setup done gitjournal verify inserted commit message well commit message preparation example trying commit something parsed touch myfile git add myfile git commit commit contains cactegory gitjournal error commit message preparation failed gitjournal parser summary parsing commit contains cactegory since using flag chance user edit message gitjournal reject using commit message editor via usual git commit without get default commit message template added add detailed description needed added changed fixed improved removed prefix default configured via gitjournaltoml file submitted commit message also invalid get error like gitjournal error commit message invalid gitjournal parser summary parsing commit message also invalid everything went fine look like git commit added myfile gitjournal okay commit message prepared gitjournal okay commit message valid master added myfile file changed insertion deletion create mode myfile default template configured gitjournal also check available tag template commit message tag error one tag within commit message available within defined template gitjournal warn tag part default template gitjournal error commit message invalid gitjournal verify tag exists default template mean detail gitjournal build two gate one preparation one verification commit user graphic sum gitjournal take influence local git repository current feature general journal generation output preparation verification commit message planned feature improvement bigger feature planned yet contributing want contribute project wow thanks please fork send pull request
578,Lobsters,vcs,Git & VCS,"git-open, open your git repo from your terminal",https://github.com/gerep/git-open,gitopen open git repo terminal,join github today sign file permalink gitopen saving second installuninstall usage dependency contributing power friend topic resource reload reload,open github project page terminal dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time gitopen saving second open githubbitbucket project page terminal installuninstall sudo make installuninstallclear usage open githubbitbucket current branch git open specify branch git open remotebranch dependency linux install xdgutils contributing fork create feature branch git checkout b myawesomefeature commit change git commit making better push branch git push origin myawesomefeature create new pull request wait power friend open github project page terminal topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
579,Lobsters,vcs,Git & VCS,Introducing Projects for Organizations - Github,https://github.com/blog/2272-introducing-projects-for-organizations,introducing project organization github,project launched september check documentation,use github project organization level user organization access project team plan manage work across repository organizationwide project everyone see already motion work together without duplicating effort organizationwide project contain issue pull request repository belongs organization organizationwide project includes issue pull request repository permission view able see project launched september check documentation see use stay come
580,Lobsters,vcs,Git & VCS,Effective .gitignore whitelisting patterns,https://jasonstitt.com/gitignore-whitelisting-patterns,effective gitignore whitelisting pattern,ignore everything add specific subtrees ignore root directory add whole subtrees ignore everything directory keep empty directory,whitelisting gitignore technique dealing source tree various different untracked local file generated output package installed package manager working file config individual developer etc rather trying come master list possible untracked file add gitignore easier start ignoring everything add specific directory back configuration pattern found effective ignore everything add specific subtrees ignore everything descend directory recursively allow file subtree subtree specific rule someotherdeeppath gitignore rule unignores directory git track directory file allow descent full directory tree actually allow anything repo rule place need one rule using recursive wildcard order include subtree use would need additional rule unignore subtree child directory everyone like mean rule allows filename pattern found inside directory want repo directory blocked need use specific rule file include one ignore root directory add whole subtrees ignore everything root unignore subtree subtree gitignore pattern somewhat coarser previous one rule ignore item root repo directory structure soon whitelist directory directory content allowed well even without using wildcards ignore everything directory keep empty directory git want include empty directory repo track file put hidden file gitignore directory saved keep directory empty even file testingdevelopment purpose good idea ignore everything except gitignore file
581,Lobsters,vcs,Git & VCS,Giteveryday – A useful minimum set of commands for Everyday Git,https://www.kernel.org/pub/software/scm/git/docs/giteveryday.html,giteveryday useful minimum set command everyday git,,grep git etcgroup git alice bob cindy david cd homedevogit l l lrwxrwxrwx david git dec head refsheadsmaster drwxrwsrx david git dec branch rwrwr david git dec config rwrwr david git dec description drwxrwsrx david git dec hook rwrwr david git dec index drwxrwsrx david git dec info drwxrwsrx david git dec object drwxrwsrx david git nov ref drwxrwsrx david git dec remote l l hooksupdate rxrxrx david git dec update cat infoallowedusers refsheadsmaster alicecindy refsheadsdocupdate bob refstagsv david
582,Lobsters,vcs,Git & VCS,Inadvertent private repository exposure,https://github.com/blog/2273-incident-report-inadvertent-private-repository-disclosure,inadvertent private repository exposure,notified everyone affected private repository disclosure heard u repository impacted ongoing risk information highlevel overview deeper analysis forensics next step,thursday october bug github system exposed small amount user data via git pull clone total private repository githubcom user affected including one github notified everyone affected private repository disclosure heard u repository impacted ongoing risk information attack one able retrieve vulnerable data intentionally outsider involved exposing data programming error resulted small number git request retrieving data wrong repository regardless whether incident impacted specifically want sincerely apologize responsibility keep information safe also protect trust placed u github would exist without trust deeply sorry incident occurred technical analysis investigation including highlevel overview incident mitigated specific measure taking safeguard incident like happening future highlevel overview order speed unicorn worker boot time simplify postfork boot code applied following buggy patch database connection rail application split three pool readonly group group used spoke distributed git backend normal active record connection pool readonly group spoke group managed manually connection handling code meant pool shared child process rail application running using change new line code disconnected connectionpool object managed active record whereas previous snippet would disconnect connectionpool object held memory impact bug query malformed response errored caused near immediate rollback however small percentage query response interpreted legitimate data form file server disk path repository data stored repository request routed location another repository application could differentiate incorrect query result legitimate one result user received data meant receive properly functioning system work sketched roughly however failure window mysql response step returning malformed data would end causing git proxy return data wrong file server path analysis tenminute window question uncovered million request git proxy tier failed error due buggy deploy million request successfully reached gitdaemon file server tier million request reached file server vast majority already date noop fetch million request nonempty fetch nonempty request susceptible bug served incorrect data represented total operation time deeper analysis forensics establishing effect bug set determine request affected way duration deploy normally would easy task inhouse monitor git log every repository access however log contained faulty data led misrouted request first place without accurate usernames repository name primary git log turn data git proxy gitdaemon process sent syslog short goal join record proxy gitdaemon primary git logging drawing whatever data accurate source correlating record across server data source challenge timestamps differ depending load latency clock skew addition given git request may rejected proxy gitdaemon reach git leaving record proxy log correlate record gitdaemon git log ultimately joined data proxy git logging system using timestamps client ip number byte transferred gitdaemon log using timestamps case record one log could join several record another log considered took worstcase choice able identify case repository user requested recorded correctly git proxy match repository actually sent recorded correctly gitdaemon examined number byte sent given request many case incorrect data sent number byte far larger ondisk size repository requested instead closely matched size repository sent gave u confidence indeed repository disclosed full wrong user although saw misrouted fetch clone saw misrouted push signaling integrity data unaffected git push operation take place two step first user uploads pack file containing file commits update repository ref branch tip point commits uploaded pack file step look like single operation user point view within infrastructure distinct corrupt git push would misroute step place pack file misrouted ref point git fetch operation fetch ref update misrouted pack file point fail fact saw two pack file misrouted incident written temporary directory wrong repository however refsupdate step routed incorrect repository stray pack file never visible user cleaned ie deleted automatically next time repository performed git gc garbagecollection operation permanent uservisible effect arose misrouted push misrouted git pull clone operation consists several step first user connects one git proxy via either ssh http also support gitprotocol connection private data disclosed way user git client request specific repository provides credential ssh key account password git proxy git proxy check user credential confirms user ability read repository requested point git proxy get unexpected response mysql connection authentication user authorization access check simply fail return error many user told incident repository access disabled due excessive resource use operation disclosed repository data authentication authorization step succeeded next git proxy performs routing query see file server requested repository file system path server step incorrect result mysql led repository disclosure small fraction case two routing query ran git proxy time received incorrect result happened git proxy got file server path intended another request coming proxy request ended routed intact location wrong repository information logged repository access mix information repository user requested repository user actually got corrupted log significantly hampered effort discover extent disclosure git proxy got wrong route forwarded user request gitdaemon ultimately git running directory someone else repository user retrieving specific branch generally exist pull failed user pulling cloning branch received commits file object reachable branch wrong repository user often build server might expecting download one day commits instead received repository entire history user inadvertently fetched entire history repository surprisingly may even noticed subsequent git pull would almost certainly routed right place would corrected overwritten branch user working copy git repository unwanted remote reference tag still though user delete remote reference run git remote prune origin manually delete unwanted tag possibly simpler alternative user unwanted repository data delete whole copy repository git clone next step prevent happening modify database driver detect interpret response match packet id sent database application side consolidate connection pool management active record connection pooling manage connection following upgrading application newer version rail suffer connection reuse problem continue analyze event surrounding incident use investigation improve system process power github consider unauthorized exposure even single private repository serious failure sincerely apologize incident occurred
583,Lobsters,vcs,Git & VCS,Why you should use a single repository for all your company’s projects,http://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/,use single repository company project,thing might help write better software impossible code get sync change considered reviewed single atomic unit refactoring modularity becomes cheap reason might still want multiple repository using git way preserve history,post thing might help write better software couple point controversial think controversial uninteresting reason monorepos putting code one repository controversial interesting reason monorepos advice controversial monorepos good everything might reasonably think bad multiple repos per project bad everything might reasonably think good first note talking monorepo mean one undifferentiated ball stuff project merge one point single project one repository contain multiple distinct project particular monorepo organised number subdirectory look le like root directory would otherwise repo possibly additional directory grouping project together though small medium sized company bother root monorepo little readme useful script managing workflow maybe etc certainly src directory whatever local equivalent put code given distinction think almost everyone benefit organising code way single biggest advantage sort organisation style impossible code get sync change considered reviewed single atomic unit refactoring modularity becomes cheap advantage disadvantage get later necessary sufficient enough justify move monorepo without probably convinced worth let break impossible code get sync relatively straightforward precursor benefit multiple project across multiple repos using right version code question always asking made change one repository picked dependent one someone else made change two repository updated etc partly fix tooling people mostly tooling rarely perfect remains constant low grade annoyance source wasted time monorepo happen always using right version code right local repo everything kept entirely selfconsistent single coherent notion version change considered reviewed single atomic unit essentially consequence single consistent version feature important one single notion version single notion change big deal reviewing deploying code benefit deploying straightforward single notion version put server know version tested benefit review interesting many time seen pull request say pull request depends pull request another repo seen happen lot got wellfactored library andor service basically routine want add feature time adding consumer feature well adding significant overhead process splitting multiple step logically single step find make code review significantly worse often end either review something without context needed understand constantly switching principle fixed better tooling support multirepo review review tool seem support well moment point really feel like trying emulate monorepo top collection repos say one refactoring modularity becomes cheap far biggest advantage monorepo one think counterintuitive people people mostly seem want multiple repository modularity multiple repository actually significantly hurt modularity compared monorepo two major reason first build previous two feature monorepo multiple repository add friction repository basis modularity every time want make thing modular extracting library subproject etc adding significant overhead two thing keep sync additionally compounded previous problem directly code want extract one project common library earth juggle version review way going mess everyone certainly manageable enough pain reluctant easy thing second enforcing boundary project across difficult refactor across end building cruft along boundary project depends project b tend happen separate repos build implicit bcompatibility layer thing happened b slightly much work mean different user b end duplicating work also often make much harder make change b need change different weird compatibility layer monorepo happen want make improvement b part change part change problem b lot dependant might problem changing rather adding thing build tell everyone benefit cruft minimised seen born practice multiple time large small scale well organised single repository actually create much modular code trying split multiple repository would allow reason might still want multiple repository almost always experience multiple repository better consolidated exception first company code partly entirely open source case probably useful one repository open source project make problem multiple repository go away mind mean currently use better system similarly client work assigning copyright someone else probably keep per client repos separate ideally like solve problem tooling made better mirror directory monorepo individual project aware good system right reason might want multiple repository codebase really large linux kernel million line code work le fine single git repository rough idea scale large mean non text asset checked may hit limit faster seen much problem practice another thing fixable tooling extent process fixed various large company investing ability git mercurial handle larger scale currently problem worry problem take long time get tool improved sufficiently time almost certainly afford pay someone customise use case like current generation large company final thing might cause stick multiple repos tooling built around current multi repo set long run think still benefit monorepo deploys ci etc multi repo assumption baked significantly increase cost migrating embrace monorepo monorepo friend want happy seriously nice thing observation require go get benefit benefit one repository also extend fewer repository start reducing repository count first easiest thing stop creating new repository either create new monorepo designate existing large project new monorepo moving current content subdirectory new thing previously created repository go new directory move existing project subdirectory convenient eg starting large chunk work touch multiple repository supposedly using git way preserve history though done past typically thrown away history rather kept old repository around read wanted consult history may require modification deployment build script tie everything together minor difficulty come first time feel benefit almost immediately whenever done felt like absolute breath fresh air immediately made happier
584,Lobsters,vcs,Git & VCS,What’s wrong with Git? A conceptual design analysis,https://blog.acolyer.org/2016/10/24/whats-wrong-with-git-a-conceptual-design-analysis/,wrong git conceptual design analysis,wrong git conceptual design analysis gitless concept behind git git surprise rooted violation conceptual integrity orthogonality propriety generality gitless better git gitless,wrong git conceptual design analysis de rossi jackson onward finished last week talking find good concept abstraction software design good modularization look like today paper jump year look issue modern context tool many reader blog familiar git many thanks glyn normington recommendation best software designer already know important discover invent right concept rough edge concept relationship lead rough edge delivered despite attempt study design concept impact software author chose use git explore role concept design widely known used time known confusing difficult learn usability problem git surface expression command run deeper believe usability problem git run deeper addressed fundamental reworking considers underlying concept say reworking achieved lightweight fashion indeed reworking hide git behind veneer tool difference however willing completely reconsider core concept presented user result reworking made available tool called gitless installed system try day note use ohmyzsh git plugin defines alias gl need unalias paper gitless beginning project continues day tomorrow look paper brings story date kind concept author interested essential design understanding working system hence apparent external interface system well implementation view concept psychological content correspond user think application conceptual design u therefore design uservisible behavior design internal software structure use term conceptual model specification focus concept rather detail behavior fred brook described conceptual integrity important consideration system design gave three principle upon based orthogonality individual function concept independent one another propriety product function concept essential purpose generality single function concept usable many way author add fourth consistency requiring example action behave similar way irrespective argument presented state invoked paper proceeds follows first author build conceptual model git today show conceptual model lead number difficulty experienced git user finally introduce gitless based simpler conceptual model concept behind git ideally description conceptual design implementationindependent easy understand precise enough support objective analysis lightweight presenting little inertia exploration different ponits design space author tool choice kind conceptrelationship diagram model built git kind complicated explain really author point though reading description remind subtlety git imagine many people evolved basic way using git try stray far much complexity git conceptual model come variety different state role file inplay file may tracked untracked marked assumed unchanged ignored staged stashed distinguishing working version file staged version file common cause confusion example follow sequence git add foorb continue working foorb git commit update original post last line erroneously read git commit foorb commit working version foorb version foorb get commited version time add command copy foorb staging commit work copy staging key git command relate concept staging working copy git add f cause working version file f copied staging file untracked also becomes tracked git commit cause version file staged become committed git reset restores file previous state eg git reset head f file f remove association staged version make untracked previously untracked staged make tracked previously assumed unchanged file author model variation reset work history git checkout f reverts local change file f replacing working version staged version one committed version otherwise command also used switch git stash take working version file modification make stashed version new complexity conceptual model described suggests u something amiss design git version control system really require many intricate concept even considered synchronizing multiple repository git surprise rooted violation conceptual integrity one example brook category orthogonality staged working version file coupled complex way git command one might expect affect one often affect one way get trouble add file continue working committing decide undo commit reset command depending argument staged version also working version wil replaced wiping subsequent work since commit happens concept staged working version orthogonal many command primarily intended modify one two modify worse whether ripple effect occur depends argument presented command propriety committing file nontrivial git large part intrusion concept staging git commit command take version staging working version git commit variation almost get around performs implicit add prior commit pick untracked file used commit tracked file modification short blunt tool git enthusiast make argument value staging concept user offer inessential functionality presence complicates use git considerably generality switching painful conflict occur uncommitted change branch intended support independent line development line development comprise working version file committed version yet git conceptual model committed version organized branch potentially multiple committed version file one per branch one working version thus lack generality branching feature essentially available one area gitless better git gitless os project maintained author first clean conceptual model put user interface top key difference git gitless elimination concept assumed unchanged file generalization untracked file subsume b elimination staged version c elimination concept stash stashed version indexing working version branch switching branch gitless equivalent always creating stash precisely executing git stash switching different branch git retrieving stash user switch back original branch thus multiple working directory one branch word one think file potentially several working version accessible via branch name b noted working b diagram mean user freely switch branch branch without stash commit unfinished change believe life expectation branch independent line development make sense gitless probably good choice conceptual model gitless look like point paper released early evaluation study done gitless model elimination staging area enthusiastically received major reduction complexity interesting project since relates tool many u use daily basis beyond specific git one takeaway reminder good usability deeply rooted conceptual design far presentation layer usability expert seem recognize importance product conceptual model problem arise user mental model correct conceptual model product diverge classic work last point course donald norman design everyday thing
585,Lobsters,vcs,Git & VCS,Using Git Submodules Effectively,http://philosophicalhacker.com/post/using-git-submodules-effectively/,using git submodules effectively,article submodules even managing git submodule complexity working around init update pushing change getting update conclusion,used think git submodules categorically evil naive choice software development tradeoff part reason simplistic view article called company use git submodules took second look article recently read doc git submodules follows nuanced thought git submodules used effectively submodules even doc actually provide helpful example answer question suppose developing web site creating atom feed instead writing atomgenerating code decide use library likely either include code shared library like cpan install ruby gem copy source code project tree issue including library difficult customize library way often difficult deploy need make sure every client library available issue vendoring code project custom change make difficult merge upstream change become available interestingly different might call naive perceived purpose git submodules well captured opening paragraph aforementioned article arguing git submodules uncommon working kind largerscale project git find wanting share code multiple different repository whether core system among multiple different product built top system perhaps shared utility library project first glance git submodules seem perfect answer used think submodules designed purpose sharing code example doc suggest entirely true accurate say git submodules useful want share code also need change along consumer code trying change shared code along consumer code better option sharing code doc even seem admit quite likely using submodules really want work code submodule time working code main project across several submodules otherwise would probably instead using simpler dependency management system maven rubygems using git submodules merely way sharing code probably misguided use case git submodules designed handle additional complexity come along using git submodules complexity worth simpler way sharing code additional complexity may worth trying work shared code project code simultaneously method managing complexity way keep u moving quickly b help u avoids costly mistake next section complexity git submodules technique git folk recommend managing complexity managing git submodule complexity working around init update first thing annoying git submodules opinion check project get build without initializing updating submodules problem know got submodules little annoying surprising see build error realize project submodules remedy use recursive flag git clone command probably something always make bash function support already git status git push aliased g gp respectively gc good name function function gc git clone recursive pushing change pushing change submodules bit pain manually go subdirectory push fortunately command even create git alias make using command easy command git push recursesubmodulesondemand option suggests command recursively push submodules along change parent project could create alias command following command git config aliasspush push recursesubmodulesondemand like said already got gp aliased git push update alias alias gpgit push recursesubmodulesondemand getting update last thing little annoying git submodules updating change upstream turn command eas process git submodule update remote merge gon na alias one alias gugit submodule update remote merge merge flag course actually supposed safely merge upstream change bit misleading article git module point careful blow away change git submodule running command avoid actually need make sure git submodule branch checked one way easily use git submodule foreach subcommand git submodule foreach git checkout b featurea create bash function use checking new branch single command checkout new branch parent repo submodules function gcb git checkout b git submodule foreach git checkout b using gitflow making change outside feature branch anyway using function like one ever run situation blown away change made submodule conclusion sometimes feel bit wonky think feel way git module still fundamentally weird ideal world develop shared code separate repository test shared code automated test instead testing running project consumes shared library however sometimes need take tech loan sometimes need live wonky submodule setup bit fortunately git provides u tool needed handle additional complexity come along using git submodules want able work project shared code simultaneously git submodules appropriate trying share code use simpler dependency management solution
586,Lobsters,vcs,Git & VCS,Mercurial Workflow Using Bookmarks: How To Setup and Use,https://rhodecode.com/blog/120/mercurial-workflow-using-bookmarks-how-to-setup-and-use,mercurial workflow using bookmark setup use,main concept distributed version control system branch bookmark phase setup workflow starting point working feature sharing change integrate change upstream start next feature cleanup issuennn conclusion rhodecode,mercurial distributed version control system allows different workflow day day work post describe setup use bookmarkbased workflow mercurial current favorite workflow based bookmark evolved working project used mercurial primary version control system main concept since git present everywhere moment important introduce concept mercurial specific aspect differ git focus difference relevant workflow distributed version control system mercurial distributed version control system dvcs need central server possible use entirely peertopeer based collaboration although post assuming team setup central server used exchange change also assuming web based tool place provides concept pull request transport mechanism change branch bookmark mercurial concept branch well bookmark differs aspect git branch mercurial recorded part commit given commit always part exactly one branch branch recorded part default branch also mean branch permanent since recorded part commits branch git reference given commit good analogy understand branch pointer commit also mean commit part many branch branch deleted without affecting commit due branch part history mercurial concept bookmark bridge gap bookmark user somewhat similar branch git part history basically point given commit mean delete change bookmark without changing underlying commits many bookmark point commit mercurial specific rule update bookmark commit added locally result somewhat like branch git calling somewhat like git branch since still subtle difference may cross way phase mercurial commit specific phase relevant one draft published usually deal phase much take indicator setup improved general phase work like create new commit phase draft mean still change without force mercurial change could done rebasing history rewriting amending commit push commit may transition phase published depends server configuration happens pull change new commits usually also phase published mercurial picky changing commit phase published idea publish commit change anymore otherwise create mess people follow project setup using described workflow setup collaborate people codebase one central repository represents published commits one usually changed except adding new commits mean make good starting point new work call repository upstream collaborator us one even multiple fork prepare change integration upstream repository call repository fork following section workflow section describes typical task around development new feature bug fix starting point default using latest state upstream repository base new work added url repository inside file hghgrc use following command hg pull upstream hg r hg id r default upstream command leave latest commit currently branch default upstream repository next step add bookmark hg book featureexample working feature basically adding change like commit often preserve way also path came solution since often find useful analyze problem future add change commit added new file add tracked hg add anewfiletxt hg commit bookmark updated automatically time add commit inspect last commit running following command hg parent sharing change prefer work tool provides concept pull request based web interface easy collaboration case rhodecode enterprise recently went open source first step push change fork hg push b featureexample using b bookmark added fork specify name remote repository since added fork default repository inside file hghgrc note configured fork publishing nice sideeffect commits stay phase draft modify history without use force consider best practice since saw bad thing happen people got used use force thing nt work result even thing work anymore afterwards integrate change upstream case mean creating pull request via web interface created shortcut web browser type cl see changelog create pull request pull request basically automates following operation local clone working area pull change fork merge change target branch usually branch called default mercurial repository push result upstream repository start next feature start beginning workflow implement next feature cleanup lengthy discussion cleaning fork local clone people prefer invest cleaning bookmark use anymore put simple nt clean fork reason yet find need even working fulltime two year project without cleanup lead confusion end assumption work tend integrate change frequently upstream repository thing open time case search change nt remember bookmark name find usually recent commits another aspect consistent bookmark naming mostly pattern issuennn rarely need search bookmark habit might different regular cleanup might justified never tried felt need conclusion initially get good start mercurial origin git world initially realize mercurial different git trying apply understanding git mercurial constantly working adopted specific found workflow based bookmark fit need well proved useful year although mercurial allows use force many case overcome obstacle seems wrong thing experience far often better invest minute improve configuration workflow force needed regular operation suggestion improve current workflow please leave comment tweet rhodecode thanks johannes johannes bornhold senior python developer rhodecode
587,Lobsters,vcs,Git & VCS,Mercurial 4.0 Sprint Notes,https://groups.google.com/forum/#!topic/mozilla.dev.version-control/nh4fITFlEMk,mercurial sprint note,,use google group discussion please enable javascript browser setting refresh page
588,Lobsters,vcs,Git & VCS,OpenBSD is on GitHub now,https://github.com/openbsd,openbsd github,grow team github sign repository used topic reload reload,dismiss grow team github github home million developer working together join grow development team manage permission collaborate project sign repository public git conversion mirror openbsd official cv port repository pull request accepted send diffs port mailing list makefile updated aug public git conversion mirror openbsd official cv xenocara repository c updated aug public git conversion mirror openbsd official cv src repository pull request accepted send diffs tech mailing list c updated aug public git conversion mirror openbsd official cv www repository html updated aug used topic perform action time signed another tab window reload refresh session signed another tab window reload refresh session
589,Lobsters,vcs,Git & VCS,Checkout github pull requests locally,https://gist.github.com/piscisaureus/3342247,checkout github pull request locally,,locate section github remote gitconfig file look like remote origin fetch refsheads refsremotesorigin url git githubcom joyentnodegit add line fetch refspull head refsremotesoriginpr section obviously change github url match project url end looking like remote origin fetch refsheads refsremotesorigin url git githubcom joyentnodegit fetch refspull head refsremotesoriginpr fetch pull request git fetch origin githubcom joyentnode new ref new ref new ref new ref check particular pull request git checkout branch set track remote branch origin switched new branch
590,Lobsters,vcs,Git & VCS,Poking around /usr/lib/git-core,http://kamalmarhubi.com/blog/2016/10/07/git-core/,poking around usrlibgitcore,line shell script,somewhat unknown bit git trivia git rebase implemented line shell script month ago fulldistro upgrade machine kept working updated surprised git add patch failed using git command fine even weirder plain git add worked message got mentioned perl pm file made bit curious find bit git outside git binary c knowing rebase shell script convention external subcommands git subcommand could strace git find script lived strace fe execve git rebase devnull grep gitrebase pid execve usrlibgitcoregitrebase gitrebase var ok usrlibgitcore place look many executables find usrlibgitcore type f executable wc l many shell script file usrlibgitcore grep shell script wc l let see one file usrlibgitcore grep shell script cut xargs basename column gitgui askpass gitfilterbranch gitsubmodule gitcitool gitmergeonefile gitstash gitgui gitmergeresolve gitrebase gitdifftool helper gitrequestpull gitbisect gitmergetool gitweb browse gitquiltimport gitmergeoctopus gitinstaweb gitsubtree surprising one git submodule git subtree seem important well gitstash seems like builtin facility course important builtin come gitcore think mostly reflection programming background never implement something complex shell quickly enough make sense stats type file find usrlibgitcore type f executable xargs file cut f sed interp sort uniq c elf lsb executable version sysv dynamically linked perl script text executable posix shell script ascii text executable posix shell script ascii text executable long line came curious git add patch perl got perl script file usrlibgitcore grep shell script cut xargs basename gitdifftool gitrelink gitadd interactive aha gitadd interactive sound likely course could checked much earlier strace fe execve git add p devnull grep add execve usrbingit git add p var pid execve usrlibgitcoregit git add interactive patch var pid execve usrlibgitcoregitadd interactive gitadd interactive patch var proof
591,Lobsters,vcs,Git & VCS,"Purposes, Concepts, Misfits, and a Redesign of Git",http://neverworkintheory.org/2016/09/30/rethinking-git.html,purpose concept misfit redesign git,never work theory purpose concept misfit redesign git posted sep greg wilson programming tool software design purpose concept misfit redesign git comment powered disqus comment powered,never work theory purpose concept misfit redesign git posted sep greg wilson programming tool software design santiago perez de rosso daniel jackson purpose concept misfit redesign git splash git widely used version control system powerful complicated complexity may inevitable consequence power rather evidence flaw design explore hypothesis analyzed design git using theory identifies concept purpose misfit wellknown difficulty git described explained misfit underlying concept fail meet intended purpose based analysis designed reworking git called gitless attempt remedy flaw correlate misfit issue reported user conducted study stack overflow question determine whether user experienced fewer complication using gitless place git conducted small user study result suggest approach profitable identifying analyzing fixing design problem paper present detailed wellfounded critique one powerful frustrating tool widespread use today followup earlier work published distinguished discussion software design three thing clearly describes design paradigm comprises concept major element user mental model system purpose motivate concept misfit instance concept satisfy purpose contradict one another lay git concept purpose analyzes main feature term us analysis identify mismatch crucially analyzes independent discussion git stack overflow see user stumbling misfit identified step would count major contribution author go designed tool called gitless directly address shortcoming identified penultimate section paper present usability study compare standard git overall subject found gitles satisfying le frustrating git even though big difference efficiency difficulty confusion quoting paper apparent contradiction might due fact participant used git encountering gitless first time without substantive training participant regular expert commented indeed problem gitless mostly due lack practice using paper one best example ever seen software design ought critiqued combine explicit coherent conceptual base detailed analysis specific system design grounded analysis empirical check design sadly nothing show actual state profession clearly way work greeted respect project fool errand picked product popular widely used investing effort analyzing strawman design thought popularity would mean larger audience would interested experiment sharing research colleague however discovered significant polarization expert deeply familiar product learned many intricacy developed complex customized workflow regularly exploit elaborate feature often defensive resistant suggestion design flaw contrast le intensive user given understanding product rely handful memorized command frustrated experience analysis like seems belaboring obvious please enable javascript view comment powered disqus comment powered
592,Lobsters,vcs,Git & VCS,Stemma: Palantir’s Distributed Git Server,https://medium.com/@palantir/stemma-distributed-git-server-70afbca0fc29,stemma palantir distributed git server,stemma palantir distributed git server jgit dfsrepository framework atlasdb requirement git server deployability amazon codecommit github fault tolerance scalability finegrained access control integration external service github webhook model gitlab github gogs stemma stemma architecture distributed git git httpbased smart protocol git data model architecture git server store immutable data distributed filesystem mutable data distributed transactional database google internal git implementation backed gfs google filesystem bigtable architecture b git proxy federate request network redundant vanilla git server github dgit git ketch implementation jgit atlasdb dfsrepository atlasdb dfsrefdatabase dfsobjdatabase packfile compression garbage collection jgit dfsgarbagecollector access control jgit repositoryresolver jgit prereceivehook integration external service github webhooks,stemma palantir distributed git serverwelcome new palantir tech blog medium post first series palantir software engineering practice contributing open source community stay tuned stemma distributed highlyavailable git server featuring finegrained permissioning model simple integration point external service stemma installation integral part data integration backbone palantir deployment cloud onpremise environmentsthis blog post describes motivation behind project explains core design choice implementation detail nutshell stemma implement distributed git server thousand line code leveraging jgit dfsrepository framework palantir opensource distributed transactional keyvalue store atlasdbour requirement git serverpalantir work span many different country industry unique business need data infrastructure mean project team need manage complex data integration analytics pipeline data transformation code written different language java scala python r sql etc well product configuration dozen different software component track code configuration git repositorieswe several unique requirement git repository deployability software typically run percustomer installation opposed asaservice either dedicated palantir cloud instance onpremise hardware requirement rule standard cloudonly git service amazon codecommit githubfault tolerance scalability installation made number highlyavailable microservices since service instance typically stateless redundant order facilitate loadbalancing failover backing code configuration repository need support concurrent remote access ideally highlyavailable initially experimented nfsbacked vanilla git based experience deploying product wide variety customer network learned nfs difficult manage tunefinegrained access control many different user access git repository daily basis customer palantir employee technical nontechnical data producer data consumer automated human reader writer mean access governed rich granular set access control manage via authenticationauthorization systemintegration external service install product wide variety environment compatible customer existing system whatever might prefer eventdriven architecture notifying system triggering downstream action pushing data transformation pipeline synchronizing permission configuration reconfiguring restarting service mean git server need provide extensible notification mechanism triggered git state change like push merges code review notably fixed set webhooks similar github webhook model suffice since often control extend apis served customer system quickly became clear none offtheshelf git solution including gitlab github gogs would meet requirement decided build git server stemma longstanding tradition palantir product team name new product tooling case stemma based analogy software versioning git concept stemma textual criticism diagram showing relationship different manuscript version architecture distributed gitat high level stemma architecture simple number stateless stemma node serve git httpbased smart protocol shared state maintained storage backend authenticationauthorization delegated dedicated authentication authorization service loadbalancing failover amount choosing one responsive node per requestthe git data modeldigging little deeper let discus interaction stemma node storage backend state distributed git repository represented stemma node interact state understand complication option take closer look git data model communication protocol git implementation manage combination mutable immutable data git object include commits tree ie directory blob ie file every object identified probabilistically unique hash intuitively state git repository represented graph commits typically point tree directory file object object immutable sense every modification git repository encoded adding new object distinct fresh hash object graphgit ref include branch tag humanreadable label commits ref mutable sense user change destination instance user delete subsequently create branch name pointing different commitgit packfiles compressed collection object indexed object hash intuitively packfile represents subset object graph packfiles used extensively git smart protocol exchange minimal delta two git graph additionally many git implementation jgit amongst others use packfiles serialization storage format git graph packfilebased representation object graph choose treat packfiles mutable immutable immutable mutation graph eg git push yield additional packfile graph conceptually union packfilesif mutable mutation graph may augment packfiles containing relevant portion grapha third option consider packfile immutable occasionally combine subset packfiles new packfile thereby potentially compressing object compact representation whole object graph given set packfiles minus combined packfiles plus resulting new packfilethe main challenge distributed git implementation management mutable data ie ref packfiles concurrent access two alternative approach tackling challenge architecture git server store immutable data distributed filesystem mutable data distributed transactional databasesince git object stored unique hash written safely distributed filesystem without much concern conflicting read writes concurrent writes ref packfiles managed database suitable atomicity isolation property example google internal git implementation backed gfs google filesystem bigtablearchitecture b git proxy federate request network redundant vanilla git serverseach proxy acknowledges request quorum replica repository acknowledged main challenge approach lie implementing failover balancing recovery replica correctly concurrent access handled locally git slave repository model implemented github dgit git ketchimplementation jgit atlasdbwe decided build stemma based architecture due conceptual implementation simplicity stemma standing shoulder opensource giant firstly jgit complete java implementation git protocol expose dfsrepository extension point distributed store implementation secondly relying recently opensourced atlasdb distributed transactional database layer shared state able delegate complexity distributed system existing welltested backend analogous google decision base git implementation gfs bigtable atlasdb apis provide interface storing querying tabular stream data stemma us former structured metadata eg list packfile id per repository set ref per repository latter packfile blob storage production system typically deploy atlasdb top cassandra cluster sized according expected performance redundancy requirementsthe core jgit interface left u implement concern storage retrieval ref dfsrefdatabase objectspackfiles dfsobjdatabase following pseudocode sketch implementation atlasdb interface conceptually accurate syntactically simplified declutter presentation class atlasdfsobjdatabase void commitpackimpl collection dfspackdescription tosave collection dfspackdescription todelete atlasstorewithtransaction tx txstorepacks tosave txdeletepacks todelete localdiskcachestorepacks tosave list dfspackdescription listpacks return atlasstorewithtransaction tx txlistpacks readablechannel openfile dfspackdescription desc packext ext return localdiskcachegetorload desc atlasstorewithtransaction tx txloadpack desc stream class atlasdfsrefdatabase refcache scanallrefs return atlasstorewithtransaction tx txlistrefs boolean compareandput ref expectedexistingref ref reftoupdateto return atlasstorewithtransaction tx ref existingref txgetref expectedexistingref null expectedexistingrefgetstorage new return txputref reftoupdateto else return false ref deleted user else existingref expectedexistingref return txreplaceref expectedexistingref reftoupdateto else return false ref mutated user boolean compareandremove ref reftodelete return atlasstorewithtransaction tx txdeleteref reftodelete implementation complexity distribution logic offloaded entirely atlasdb transaction mechanism example storage backend guarantee interleaved concurrent call whether different stemma node atlasdfsobjdatabase listpacks atlasdfsobjdatabase commitpackimpl serializable mean user able observe store inconsistent partial state changesevery stemma node maintains local cache packfiles since jgit packfiles stable unique identifier cache easy maintain whenever uncached packfile requested retrieved atlasdb stored disk since packfile identified unique identifier immutable disk cache require invalidation updatespackfile compression garbage collectionthe implementation creates one new packfile per write operation ie git push repository typically packfile small contains object committed subsequent git push operation git server tradeoff maintaining large number small packfiles one hand small number large packfiles handthe set small uncompressed packfiles generated sequence mutation usually contains highly redundant information since file object stored entirety contrast packfile compression deltaencodes incremental change file object therefore vastly spaceefficientwhen compressing packfiles eagerly cache miss become frequent require loading large new packfiles file retrieved however scanning efficiently compressed packfiles index fastwe tune stemma two extreme periodically coalescing smaller packfiles larger one jgit dfsgarbagecollector atlasdb transaction semantics allow u atomically swap obsolete packfiles repackaged new one without jeopardizing consistency git repository concurrent access right observed sufficient variance stemma usage generate conclusive recommendation compression strategy different access characteristic share finding learn moreaccess controlstemma integrates authorization authentication service implement access control repository ref currently support repositorylevel read permission reflevel write permission example user group may granted permission read content repository without able commit branchesby virtue delegating authentication dedicated service implementation simple repositorylevel read authorization implemented via jgit repositoryresolver interface repository open httpservletrequest httprequest string repositoryname authtoken token extracttoken httprequestgetheader httpheadersauthorization authservicecanreadresource repositoryname token throw new servicenotauthorizedexception ref write access restricted via jgit prereceivehook check permission every push class branchauthprereceivehook implement prereceivehook authtoken token injected instance creation repository repo injected instance creation void onprereceive receivepack rp receivecommand command switch commandtype case create boolean cancreate authservicecancreateresource repo token case update integration external servicesintegration external service primarily achieved via stemma webhooks set httprest interface akin github webhooks event predefined set state change eg push merge stemma notifies subscribed service calling corresponding api endpoint model support standard continuous integration workflow running premerge test well palantirspecific notification like triggering update data integration pipeline upon change data transformation codeadditionally stemma put u position implement custom notification plugins specific external service implement set standard webhook apis flexibility dramatically simplifies integration existing customer system
593,Lobsters,vcs,Git & VCS,Quickhook: a new Git hook manager,https://precompile.com/2016/09/21/quickhook-git-hook-manager.html,quickhook new git hook manager,overcommit quickhook github via homebrew tap,git hook useful tool great automating checking behind already great hook manager overcommit like disagreement various technical detail approach past couple week built quickhook hook runner designed fast selfcontained unix hook program hook directory quickhook manages running program collecting exit code output reporting git example precommit hook output quickhook repository look like git commit make directory existence check precise govet ok trailingwhitespace ok master make directory existence check precise file changed insertion deletion try commit code fails go vet check report failure also exit nonzero exit code stop git proceeding commit git commit incorrect code govet fail unreachable code manager right word quickhook runner coordinator better description knowledge implementation hook file write hook bash ruby javascript even compiled executables need githooksprecommit script call quickhook hook precommit go check github easily install via homebrew tap
594,Lobsters,vcs,Git & VCS,"A whole new GitHub Universe: announcing new tools, forums, and features",https://github.com/blog/2256-a-whole-new-github-universe-announcing-new-tools-forums-and-features,whole new github universe announcing new tool forum feature,second annual universe conference manage idea project many tool project watch quick overview code better review protected branch documentation quick tutorial video review integrate seamlessly github hundred integration public platform roadmap github platform forum integration early access developer blog check documentation github graphql api early access engineering blog friendlier business experience githubcom easily enforce security twofactor authentication invite member back fork setting intact read take greater control permission sign try see behind green square take look documentation watch video,today welcomed people second annual universe conference san francisco event designed celebrate people building future software important reminder open source maintainer whose project transforming healthcare automotive company building selfdriving car teenager teaching program finish homework goal make building software easier goal sight announcing biggest update platform yet making easier work together ship highquality code improved code review tool giving profile update better show developer making integrating github first class experience major api improvement taking step toward making github better place business get work done added security measure organization proud team coming together ship many improvement platform hope find useful continue build amazing thing read specific keep eye continued improvement github experience coming month manage idea project taking project idea launch easy lot coordinate behind scene many tool help organize distribute work help integrate project management development cycle without skipping beat even opening new browser tab introducing project project manage work directly github repository create card pull request issue note organize custom column whether inprogress done never going happen framework team us drag drop card inside column prioritize move one column another work progress note capture every early idea come part standup team sync without polluting list issue changed watch quick overview although quickly adding project initial release currently support new project level code issue pull request within list project workflow column name reorder card drag drop column pointing issue pull request note tool built top project fantastic partner including waffleio zenhub code better review collaboration core building great code review critical collaboration another person look code give level critique writing work get better improving code review github help share weight building software improve software build designing best way review code continuous process first step available pull addition commenting specific line code review let formally approve request change pull request also leave review summary delete edit bundle comment submit streamline conversation cut noise reply inline comment without drafting formal review starting new conversation also mean multiple conversation per line explicit feedback loop smarter conversation better code review finally administrator require review merging via protected branch review required must least one approval change requested merge change first step much greater roadmap toward faster friendlier code review working handful followup feature ability request review peer information review including shipped today check documentation quick tutorial video review integrate seamlessly github developer use variety tool ship software seen hundred integration built work github shipping major improvement api adding new way collaborate transparently github engineer also broader community integrator host largest community developer want make github platform uniquely enjoyable integrator build application change people work launching right away public platform roadmap demonstrates github platform engineer launching next formalized process solicit feedback launch update platform earlyaccess prerelease program let access new feature apis provide support need ensure launch readiness software build top github github platform forum provides direct communication channel ecosystem developer github engineer excited announce two new project aim make platform flexible integration early access rethinking integration model provide better way tool extend integrate github added ability integration act behalf instead impersonating first class actor github without using paid seat admins ability configure integration directly organization control repository allow access read integration developer blog check documentation github graphql api early access graphql api simplifies product development letting developer access data need data need one api call github graphql api get api use build github feature learn see work check engineering blog friendlier business experience githubcom organization github best way team developer build ship software together added security twofactor authentication enforcement upcoming product enhancement never better easily enforce security organization administrator require twofactor authentication easier support security policy admins asked confirm twofactor authentication requirement confirmation modal list member fork removed result github notify member removed organization email inproduct notification finally always admins invite member back fork setting intact security speed read requiring twofactor authentication organization take greater control permission last year rolled ldap ca securely efficiently manage permission github enterprise making sure business githubcom tool need automate identity access management first public launch samlbased single signon sso option administrator ability manage github user identity provider already manages access host application use current workflow option ready quite yet launch beta coming month sign try grateful community million developer developer gain experience implicitly github work alongside developer know enough help creating dedicated space learn conversation github github community forum become place developer talk shop get help learn together also help u introduce new feature improvement give developer ability share thought feedback u directly look github community forum see behind green square profile contains entire history work github first commit recent pull request perrepository breakdown reveals spending time month see special event day signed github opened first pull request joined showcase best work pinning favorite project profile changed take look documentation watch video really excited improvement github excited see create
595,Lobsters,vcs,Git & VCS,"Oh, shit, git!",http://ohshitgit.com/,oh shit git,,git hard screwing easy figuring fix mistake fucking impossible git documentation chicken egg problem ca nt search get mess unless already know name thing need know order fix problem bad situation gotten eventually got plain english git reflog see list every thing done git across branch one index head index find one broke everything git reset head index magic time machine use get back stuff accidentally deleted remove stuff tried broke repo recover bad merge go back time thing actually worked use reflog lot mega hat tip many many many many many people suggested adding make change git add add individual file git commit amend noedit last commit contains change warning never amend public commits usually happens commit run testslinters fml nt put space equal sign could also make change new commit rebase order squash together million time faster warning never amend commits pushed publicshared branch amend commits exist local copy gon na bad time git commit amend follow prompt change commit message stupid commit message formatting requirement create new branch current state master git branch somenewbranchname remove last commit master branch git reset head hard git checkout somenewbranchname commit life branch note nt work already pushed commit publicshared branch tried thing first might need git reset head numberofcommitsback instead head infinite sadness also many many many people suggested awesome way make shorter nt know thank undo last commit leave change available git reset head soft git stash move correct branch git checkout nameofthecorrectbranch git stash pop git add add individual file git commit message change correct branch lot people suggested using cherrypick situation take pick whatever one make sense git checkout nameofthecorrectbranch grab last commit master git cherrypick master delete master git checkout master git reset head hard know made change file diff empty probably added file staging need use special flag git diff staged file ツ yes know feature bug fucking baffling nonobvious first time happens find commit need undo git log use arrow key scroll history found commit save hash git revert saved hash git create new commit undoes commit follow prompt edit commit message save commit turn nt track copypaste old file content existing file order undo change committed bug undo commit one go revert also revert single file instead full commit course true git fashion completely different set fucking command find hash commit file changed git log use arrow key scroll history found commit save hash git checkout saved hash pathtofile old version file index git commit wow nt copypaste undo finally figured huge huge huge seriously though fucking planet checkout make sense best way undo file shakesfistatlinustorvalds cd sudo rm r fuckinggitrepodir git clone http somegithuburlfuckinggitrepodirgit cd fuckinggitrepodir thanks eric v one complaint use sudo joke directed real though branch sooo borked need reset state repo remote repo gitapproved way try beware destructive unrecoverable action get lastest state origin git fetch origin git checkout master git reset hard originmaster delete untracked file directory git clean force repeat checkoutresetclean borked branch disclaimer site intended exhaustive reference yes way thing theoretical purity whatever come step trial error lot swearing table flipping crazy idea share healthy dose levity profanity take leave
596,Lobsters,vcs,Git & VCS,Git 2.10 has been released,https://github.com/blog/2242-git-2-10-has-been-released,git released,contributor progress reporting push source source signature verification improvement evil several guide source source source color attribute get pretty fancy source source source source odds end source source source bold source source source whole enchilada full release note,open source git project released git feature bugfixes contributor look interesting new feature progress reporting push run git push probably seen progress meter telling many object sent many left fast data moving happens data made server done quite even though receiver push much work possible data flowing cpuintensive task start whole thing arrived happening git completely silent push small enough phase finish quickly never notice pushing large number object take many second even minute leaving wonder thing still working worse network connection completely silent phase run risk connection dropped http proxy network infrastructure easy way turn wondering frustration git add progress report postreceive operation keep entertained make sure network know still going course always around watch progress meter push without terminal run quiet git also sends periodic keepalive packet keep network connection running progress reporting keepalives implemented server side connection backwardscompatible existing version git even need upgrade see hosting provider progressrelated improvement came along ride git clone give accurate progress meter checking received necessary object progress message like autogc remote repository clearly marked coming remote source source signature verification improvement gpgsigned tag commits part git long time workflow tooling around still convenient use git take incremental step area along behindthescenes robustness improvement add new configuration option logshowsignature verify signature every invocation git log default output format signature verification also changed show gpg keyids even using older version gpg id already default newer version response evil project showed easy generate fake key collide keyid space project two year old got new attention recently somebody uploaded fake key dataset public keyservers yet signing commits tag several guide help get started source source source color attribute probably seen git produce colorful output terminal know color configurable use custom log format prompt people get pretty fancy git come new option color code understands italic strikethrough attribute addition c auto placeholder fixed handy designing custom log output color support work box freebsd default color head decoration tweaked increase visibility source source source source odds end ever need debug http connection git support gittracecurl environment variable supersedes old gitcurlverbose variable give detail support redirecting file avoid tangling rest git output importantly automatically scrub authentication information result making safe share output fellow debugger source smarthttp protocol grow negotiation window aggressively result fewer roundtrips fetching large repository http source submodule update clone recursive learned retry single cloning failure submodule make ephemeral server network failure le annoying source manpages terminal literal phrase shown bold generally shown fixedspace typewriter font html page decorated terminal source git internal dateformatting code correctly show date past year phew fixed year spare source similarly git archive generate tarfiles posix extension handle file larger timestamps later year gigaseconds since source whole enchilada sampling change git contains commits check full release note complete list
597,Lobsters,vcs,Git & VCS,Git undo,http://megakemp.com/2016/08/25/git-undo/,git undo,rewriting local commits gui reflog reflog email protected undo alias reflog alias email protected bash syntax trying email protected,tell recognize scenario middle rewriting local commits suddenly realize gone far one many rebases left history look nothing like way wanted well certainly happens wish could ctrlz way back started course never simple even gui one moment despair finally decided set create git undo command came got reflog story undoing thing git start reflog reflog might ask well tell every time branch reference move git record previous value sort local journal journal called reference log reflog short repository reflog branch well separate one head reference getting list entry branch reflog easy saying git reflog followed name branch show reflog entry master branch instead wanted look head reflog would simply omit argument say yield output head reference immediately obvious entry reflog stored reverse chronological order recent one top obvious hand entry index turn extremely useful use index directly reference commit associated certain reflog entry later suffice say order reference reflog entry use syntax two part separated sign reference either name branch head index entry position reflog example let say wanted look commit head referencing two position ago could use git show command followed email protected instead wanted look commit master referencing latest one would say undo alias point reflog keep track history commits referenced branch like web browser keep track history url visit mean commit referenced always commit referenced current one combine reflog git reset command like would suddenly way move head index working directory previous commit referenced branch essentially pressing back button web browser point everything need implement git undo command form alias git config global aliasundo f git reset hard git revparse abbrevref head f realize quite mouthful let break piece piece f f defining alias shell function named f invoked immediately git revparse abbrevref head use git revparse command followed abbrevref option get name current branch concatenate form reference previous position reflog eg email protected specify position reflog first parameter default value whole reason defined alias shell function able provide default value parameter using standard bash syntax beauty using optional parameter like allows u undo number operation time specify anything going undo latest one trying let say history look like two branch master feature diverged commit c sake example let also assume wanted remove latest commit master commit f merge feature branch git reset hard head git merge feature point would end history looking like see everything went fine still happy reason want go back way history practice mean need undo latest two operation merge reset time whip undo alias move head commit referenced email protected commit master branch pointing reflog entry ago let go ahead check history everything back way wanted undo undo easy since git undo creates entry reflog enough say without argument equivalent saying git undo
599,Lobsters,vcs,Git & VCS,GitLab 8.11 released with Issue Boards and Merge Conflict Resolution,https://about.gitlab.com/2016/08/22/gitlab-8-11-released/,gitlab released issue board merge conflict resolution,mvp issue board gitlab ce issue board next release issue board documentation merge conflict resolution resolve conflict documentation branch permission user ee branch permission user documentation resolve discussion mr merge request discussion resolution documentation pipeline graph issue mr template see documentation template slash command slash command documentation koding integration koding documentation pipeline mr pipeline deployment status merge request pipeline web hook code highlighting collapsing mr link pushing coverage badge read doc test coverage badge expiration date membership move project shard ee introduced performance update improvement feature instrumentation gitlab runner gitlab mattermost mattermost open source slackalternative golang bot security update redis sentinel support see doc detail change changelog upgrade barometer ruby deprecation note early updaters enforced api git http read documentation personal access token ee elasticsearch reindexing elasticsearch integration first file installation download gitlab page updating update page enterprise edition feature list gitlab ee subscription,many good thing gitlab struggle introduce without turning superlative without ado gitlab get completely new way manage issue resolve merge conflict interface restrict push people group ee get online ide use slash command modify issue create many issue template want many new feature month valuable person mvp clement ho merge request responsiveness issue thanks clement ho issue board gitlab issue flexible crosslink prioritize rank popularity issue board added something new create workflow quickly get idea status issue simple beautiful board unlike kanban scrum board board every project start backlog open issue done list issue automatically closed adding new list create workflow list based label mean adding issue list add label issue removing list remove label mean current issue automatically appear new list create quickly see whether certain issue one list see example look gitlab ce issue board next release issue board documentation video merge conflict resolution merge conflict real pain want get something merge busy project believe nt need external tool fix conflict solve simple conflict straight gitlab encounter conflict simply click resolve conflict able select want conflict resolved confirm end make commit fix realize wo nt work conflict hope make majority conflict minor bump road getting work production resolve conflict documentation branch permission user ee possible restrict pushing merging specific branch specific user using branch permission gitlab enterprise edition work handinhand existing functionality easily combined restriction mean restrict direct push jane john allow master even developer merge merge request branch action push merge allow amount user permission making powerful addition gitlab ee organization branch permission user documentation resolve discussion mr discussion diffs merge request hard keep track yet important actually give comment attention make easier find fix resolve comment discussion added ability comment discussion merge request diffs resolved longer thread resolved commentbycomment keep track many discussion still need resolve added convenient button jump next unresolved discussion merge request discussion resolution documentation pipeline graph pipeline gitlab complex structure many sequential parallel build make little easier see going view graph single pipeline status simply click pipeline merge request pipeline view view graph current pipeline issue mr template standardize certain format issue merge request could already create template gitlab enterprise edition gitlab bringing ability create multiple template instance one feature proposal another bug gitlabcom gitlab ce ee template markdown file md live repository gitlab directory either gitlabissuetemplates gitlabmergerequesttemplates subdirectory appear dropdown creating new issue merge request make easier everyone submit goodlooking feature request bug report merge request see documentation template slash command inspired chat tool irc hipchat mattermost slack added version slash command gitlab mean quickly change label milestone assignee writing comment command writing merge request issue use comment even creating new issue merge request multiple command single comment thing like changing title issue adding removing label changing assignee idea using new slash command email replying issue todo doc link try template note api ca nt wait see use slash command documentation koding integration koding allows run entire development environment cloud share team even use local editor mean nt spend hour setting stack every new machine every change gitlab introducing koding integration gitlab mean check project merge request fullfledged ide press button koding integration gitlabcom present enable koding admin application setting set project able quickly check merge request branch commit complete ide even allows use local editor put together quick screencast showing video read setting koding gitlab documentation pipeline mr see pipeline merge request click pipeline see graph related build deployment status merge request easily set url environment help deploy automatically merge request merged gitlab show state deploy merge request url configured gitlab link environment see result merge request single click pipeline web hook make easier integrate power gitlab pipeline added webhook pipeline fire whenever pipeline created running finished enable webhooks going setting dropdown project selecting webhooks code highlighting collapsing editor gitlab properly highlight code allows collapse block code mr link pushing see link quickly create new merge request related merge request push gitlab coverage badge gitlab generate nice looking coverage badge easily show test coverage project anywhere nt know gitlab could report coverage yet set pipeline setting pipelinessettings read doc test coverage badge expiration date membership giving user access project sharing project group limit access certain date setting expiration date date user group longer access project make easier manage sharing project temporary team member move project shard ee gitlab introduced multiple mount point gitlab gitlab move project shard rake command something everyday use convenient want test new shard want move superheavily used project faster storage performance update release added another batch significant performance improvement merge request diffs faster graph show difference deployed gitlab gitlabcom drop deploy loading time merge request diffs number sql query executed displaying merge request diffs time spent sql query displaying merge request diffs pipeline performance also improved significantly see detailed improvement merge request implementation improvement checking user read multiple issue improved looking user maximum access level improved displaying ci chart us fewer sql query various improvement made gitlab git handling use fewer git operation use faster sorting version number commit author cached per sidekiq transaction avoid extra lookup number query used displaying merge request diffs reduced iterating diff collection improved performance various method depend diff statistic improved diff rendering performance improved removing redundant check text blob certain method call needed rendering diffs removed checking diff note active improved improve rendering issue tracker link performance parsing url markdown document improved performance syntax highlighting code block markdown document improved generating cache key markdown document improved sorting git tag improved trigram index postgresql cirunners table removed commit lookup diffhelper removed redundant database index removed caching todo counter reenabled query get list todos improved limiting number project used query svg image larger longer displayed reducing loading time memory usage memory leak markdown sanitization filter solved dropdown used displaying list project issue moved us pagination instead loading data method call finding git blob needed removed branch dropdown cherry pick revert dialogue loaded asynchronously query used mark todos done improved gitlabgit updated take advantage various improvement made library git access check enterprise edition improved unnecessary index geonodes table removed ace editor longer loaded unless used given page decreasing default javascript payload feature sidekiq cache certain object per transaction enabled default disabled using environment variable gitlab process request using rubyprof storing profiling data disk viewed later requires token specified header work gitlab performance monitoring track custom event number git push project forked etc instrumentation nokogiri instrumented overhead method call instrumentation reduced repository class instrumented gitlab highlight instrumented projectvisibletouser instrumented gitlab runner also releasing gitlab runner today highlight mount build folder service used docker executor use xz prebuilt docker image reduce binary size provisioning speed docker engine suppress first warning given type extracting zip file retry executor preparation reduce system failure release armel instead arm debian package improve concurrency dockermachine executor update gitlabrunnerservice return host port defined fix missing entrypoint script alpine dockerfile cache docker client instance avoid file descriptor leak support bind mount build folder gitlab mattermost gitlab includes mattermost open source slackalternative whose newest release includes chinese korean dutch translation golang bot flagged post mention plus many new benefit version also includes security update upgrade earlier version recommended redis sentinel support gitlab experimental support redis sentinel see doc detail change release improvement including security fix please check changelog see named change upgrade barometer upgrade gitlab downtime required due migration downtime gitlabcom largest gitlab instance minute may take le time depending amount data instance column removed one migration may affect user running version gitlab still using said column two migration populate newly created table based existing data require downtime ensure data nt modified migration running deployed user cluster finally another migration add two foreign key requires downtime done concurrent manner ruby deprecation release gitlab upgrading ruby manual installation strongly suggest update ruby release omnibus installation automatically ruby note early updaters fast updating gitlab reconfigure received undefined method merge nil nilclass error make sure fetch newer package marked simply run aptget update aptget install gitlabce aptget install gitlabee solve issue enforced api git http user enabled trying retrieve api token via session endpoint resource owner password credential flow provided able login required use personal access token read documentation personal access token ee elasticsearch reindexing changed structure elasticsearch index making use parentchild relationship performance advantage requires total rebuild e index upgrading gitlab need remove old index rebuild new index remove old index call elasticsearch curl xdelete http rebuild new index described elasticsearch integration note assume upgrading latest version also consult upgrade barometer intermediate version skipping upgrading gitlab version prior ci enabled upgrade gitlab first please aware default omnibus package stop run migration start matter upgrade behavior changed adding etcgitlabskipautomigrations file installation setting new gitlab installation please see download gitlab page updating check update page enterprise edition mentioned ee feature thing like ldap group support found gitlab enterprise edition complete overview please look feature list gitlab ee access gitlab enterprise edition included subscription time upgrade gitlab subscription also entitles upgrade installation service
600,Lobsters,vcs,Git & VCS,I Botched a Perl 6 Release And Now a Robot Is Taking My Job,http://perl6.party/post/I-Botched-A-Perl-6-Release-And-Now-A-Robot-Is-Taking-My-Job,botched perl release robot taking job,part human make error rakudo release guide nqp release guide green go irc channel moarvm tag release man sky robocide fallout channel yapc europe git freenode part ii robot joel test channel web app spread build one step google compute engine api rakudo website exterminate human joel test conclusion,word automating release cycle deconfusion note regular perl user likely use ever heard rakudo star distribution includes rakudo perl compiler module doc post detail release compiler get released often rakudo star please nt think new release star use part human make error today third saturday month awesome day rakudo perl compiler see monthly release helm today chugged along rakudo release guide nqp release guide whose release part process well green go nearing end process first hint problem surfaced user joined irc channel tag seems missing nqp github repository zoffix created minute ago ensure got latest everything strange pull nqp checkout still nt see zoffix add tag git pull tag git fetch tag something like zoffix correct nt thanks zoffix ok usually need good question pulled fresh checkout ran full test suite sure everything passed luckily got answer rather quickly git log graph decorate originmaster master diverged tag commit parent nqp master story local nqp checkout bump version moarvm dependency tag release start full build test suite run lengthly process happening go github use online editor make minor tweak text nqp release guide test finish try push tag version bump get usual error saying online repo diverged instinctively run gr alias git pull rebase bring new change push work repo problem rebase nt move tag still referencing old commit clone repo everything appears work tag pull change existing repo nt get tag also git describe use midrelease nqpmoarvm version bump missing tag commit tag tagged parent master head point nt yet know breakage folk git pull existing branch continue release since test green finish relax departing fly man sky awesome robocide first hint wait second hint trouble showed latest commits appear eval bot supposed update head zoffix dd vmversion perlcompilerversion camelia rakudomoar output zoffix oh guess camelia nt build every commit right away create camelia unfamiliar working another bot create knew sure supposed update head every hour nt zoffix dd vmversion perlcompilerversion sourcebaby zoffix something wrong resolve caller sourcery nil none signature match thing str method capture c thing str method code code capture c block e line zoffix get bad feeling fallout nt wonder hell going long since shortly thereafter user channel turned saying ca nt build cuonglm hi anyone got trouble building rakudo release source got error pathspec match file know git sound like git history overriden short conversation person became obvious cloning building repo using release released may worked fine simply git pulling ran issue tag obvious issue needed fixing question first suggestion seemed scary mst always burn tag fire replace fixed one mst advantage may outweigh risk already user checkout broken tag asking help chat channel since sent release announcement email may many user experiencing checkout issue nt know first thing panic attempt find someone else fix mess zoffix jnthn coke timtoady around made booboo tag lot core devs europe bit timezone conflict yapc europe happening even chat time left device joined git freenode kind folk reaffirmed replacing tag might bad idea victory nt learn zoffix delete tag create new one happens people cloned branch incorrect tag ikke zoffix good question tag kind special expecting change git somewhat ignores changing tag remote ikke zoffix man git tag section retagging gitinfo zoffix gittag manpage available http jkgsgittaghtml zoffix ok think leave wait someone smarter figure fix p zoffix haha admit screwed use different name yup go p zoffix thanks help ikke yw tag mangling question user issue next answer make emergency point release corrected tag proceeded zoffix ok gon na cause sure changing tag fix everything wo nt introduce new problem making another nqp release correct tag seemed resolve issue box nt sure nt fallout happen current rakudo release made point release compiler well safe sync version nqp folk nt think rakudo release missing see nqp release jumping release guide midpoint proved challenging considering done release trying keep track step already done tired embarrassed sober occasion headed pub knowing last time make release like part ii robot heard joel test may noticed perl release process described currently fails item make build one step painfully aware issue thinking improving situation ever since first time stepped cut release follow channel may even seen show couple prototype web app let keep track releaseblocking bug ticket bot reminds upcoming release giving list new ticket since last release well changelog entry review zoffix reminder friend bear good news rakudo release happen day please update changelog anything worked known user stillopen new rt ticket since last release http git log output commits since last release http today incident indicated time stop messing around prototype put complete plan action spread two thing release guide contains may make seem like automating release tough nut crack reviewing bug ticket blocker populating changelog needed item ca nt make robot reliably thing yet largest part release process request human spread job throughout entire month release month create web app keep track reported ticket let release manager log mark ticket reviewed either release blocker nonblockers bonus prototype buggable bugqueue interfacing bot may seen also use app thing correctly app also serve nicer interface ticket people nt like original rt website principle apply changelog entry site keep track commits release manager reviewed added changelog keeping state around web app let release manager spend couple minute every day reviewing change bug instead cramming work single session release day build one step providing release manager keep step throughout month release day single thing issue release command bot zoffix release yey time starting release watch progress http tell abort time abort process since issue review process subtracted release instruction left grunt work entirely automated bot use google compute engine api fire dev box ssh clone repos update version run build run test tag stuff generate tarballs test tarballs scp tarballs rakudo website email release announcement update wikipedia page api human watch happen page feed websocket output proc async abort anything go wrong bot automatically abort test test suite fail bonus hoping make bot fire instance vms several different os add extra layer testing different environment granted least first several release safety stopmeasures verification step human ensure robot right thing abort process needed technical limitation bot correctly cutting release issued single command exterminate human automating complex build job eliminates mistake robot nt care rebuild scratch hundred time trying debug releaseblocker ok think nt care robot right activist audience tell wrong today mistake difficulty fixing could avoided release process entirely automated fewer thing manually fewer place mistake creep joel test amusing read lot truth simplicity suggest reevaluate point project fails test believe save lot headache conclusion today event great learning experience catalyst improvement human squishy fallable make mistake especially habit trying follow regular list instruction irregular situation prove difficult introduce mistake making bad situation worse nt yet try automate release process much know perl follow advice last time cut release job taken robot
601,Lobsters,vcs,Git & VCS,GitHub Pages now supports publishing directly from /docs folder in the master branch,https://github.com/blog/2228-simpler-github-pages-publishing,github page support publishing directly doc folder master branch,master branch master branch doc folder user organization page check documentation,making easier publish website github page select source repository setting github page look content selecting master branch publish site master branch useful repository dedicated website content selecting master branch doc folder publish doc folder master branch let maintain documentation code together one branch open source maintainer accept contribution single pull request rest assured existing project page use ghpages branch keep working like user organization page published master branch check documentation learn
602,Lobsters,vcs,Git & VCS,DVCS and Bug Tracking,http://ericsink.com/entries/dbts_fossil.html,dvcs bug tracking,dvcs bug tracking entry fossil benjamin pollack joel project aardvark comment fossil distributed bugtracking relevant project thing think think think bug deserve dag something like think bug deserve merge algorithm think bug deserve sync pattern think distributed version control need distributed bugtracking strawn think dvcs stay small becomes whole product crossing chasm think benjamin pollack irritating kid quibble much bitbucket page,bug tracking last week entry mentioned interest fossil relatively new dvcs written author sqlite comment entry guy named benjamin pollack picked fight think fossil interesting turn guy actually one joel minion fog creek fact joined company one intern project aardvark back benjamin would like say interesting good thing interesting spite fact crap thing interesting fact crap richard hipp author fossil would like say saying fossil crap fact currently taking position whether fossil good bad think interesting mostly think issue dvcs integration rest alm tool suite important talk ca nt resist offering remark fossil comment fossil benjamin pollack complained fossil handle merge conflict poorly right insert marker around conflicting text clearly indicate came file instance repo list user would expected information would sync pushpull operation fossil ui command conceptually cool run builtin web server launch browser pointing providing webbased way interact feature fossil fossil web ui nt going win award aesthetic world getting le tolerant ugly thing web browser every year point making fossil pretty would probably worthwhile fossil really easy configure one executable file setting server simple either using builtin server running cgi running inetd nice distributed bugtracking industrywide trend toward integration version control stuff like project tracking wikis discussion forum build tracking etc developer nt checkin code use whole bunch tool help collaborate people functional area dvcs one interesting thing happening right represent setback particular area benefit dvcs somewhat diminished tool developer need still centralized yes cool commit code plane update fogbugz case mark fixed far answer wait plane land hope airport wifi login corporate vpn bring web browser remember case id find case change status try remember code change write something relevant comment long answer assert story dvcs well incomplete relevant project far know fossil tool dvcs bug tracking builtin project exploring area need others include spent time looking enough make detailed comment let say consider interesting way think fossil interesting thing think think looking everything find area distributed bugtracking found question answer starting collect thing think correct think think bug deserve dag think everybody first thought bugtracking dvcs bug stored version control tree text file merged whenever tree branch bug automatically branch well bug marked fixed branch fixed think design think would cause lot regret later think bug tracking record probably need place living dag many scenario bugtracking info updated without changing anything tree example consider qa team update bug mark fix verified nt really want operation commit version control tree fact probably want bugtracking version control area controlled completely different set access permission fossil got right sort ticket separate tree fossil design nt perfect ticket actually managed dag rather algorithm resolving conflicting change something like version latest timestamp win credit author overdesigning guy sqlite know thing two implement enough incredibly useful design likely make user really angry cause unpleasant surprise think bug deserve merge algorithm first thought probably right one dvcs know deal merging change text file want store bug obviously keep text file reuse merge code right nt think stuff database highly structured lot information used implement really good merging theory merging change bugtracking database work much better merging change code yes code highly structured well way get information parse code seen interesting research area languagespecific version control tool manage code change parse tree representation nt think thing practical mainstream solution anytime soon anyway take bug record throw text file use regular old file merge resolve change seems like throwing away lot information could using admittedly writing special merge algorithm case would ton work result might worth might difference distributed bugtracking system constantly annoys user one work think bug deserve sync pattern use case distributed bug tracking different distributed version control example seems likely want sync local instance bugtracking database lot frequently want sync local instance version control tree got live connection central server want pulling update bug db time add comment bug probably want comment pushed central server soon network connectivity allows version control want private sandbox work bunch code change push central server done fiddling kind workflow strike far le important bugtracking application think distributed version control need distributed bugtracking explained several way distributed bug tracking need different way dvcs work still think pairing dvcs centralized bugtracking solution make little sense consider scenario company development two city want server actually get request quite bit vault customer somebody call say team new york city another team strawn want team work central server want two central server synchronize regular interval people asking dvcs nt care coding plane scenario nt really care much private workspace performance benefit entire repository every developer machine still want central server difference want two central server dvcs using version control really want developerrelated stuff follow workflow every four hour two central server syncup bunch changesets get pushed direction change modification version control tree others contain change work item wiki page whatever think dvcs stay small becomes whole product regular reader know fan geoffrey moore classic book crossing chasm one idea book new innovation nt go mainstream become whole product right comment dvcs hearing industry negative saying dvcs never mainstream think people wrong others saying dvcs stuff nt ready yet right people right large portion market version control alone complete solution want whole product want work together seamlessly dvcs want reach part market need figure distributed mean bugtracking wiki forum change management build tracking test management requirement think benjamin pollack irritating kid quibble much rather saw bitbucket page anybody writes c implementation avl tree fun complete respect
604,Lobsters,vcs,Git & VCS,"Fossil, a not-so-new DVCS from the SQLite author",https://www.fossil-scm.org/,fossil notsonew dvcs sqlite author,fossil distributed version control bug tracking wiki forum technotes themeable extensible web interface example wiki embedded documentation download unversioned file selfhosting repository precompiled binary easytocompile source code proxy bandwidth efficient several different server configuration mirror content github autosync mode forking merging enduring file format selfchecks bsd license latest release quick start download compile source quick start guide,fossil fossil simple highreliability distributed software configuration management system advanced feature integrated bug tracking wiki forum technotes addition distributed version control like git mercurial fossil also support bug tracking wiki forum technotes builtin web interface fossil builtin themeable extensible intuitive web interface rich variety information page example promoting situational awareness entire website running instance fossil page see wiki embedded documentation case download page unversioned file clone fossil one selfhosting repository get source code get entire website selfcontained fossil single selfcontained standalone executable install simply download precompiled binary linux mac window put path easytocompile source code also available simple networking custom protocol tcp port fossil us ordinary http http ssh network communication work fine behind restrictive firewall including proxy protocol bandwidth efficient point fossil used comfortably dialup exceedingly slow wifi airliner simple server setup server required want set one fossil support several different server configuration including cgi scgi direct http also easily set fossil repository automatically mirror content github autosync fossil support autosync mode help keep project moving forward reducing amount needle forking merging often associated distributed project robust reliable fossil store content using enduring file format sqlite database transaction atomic even interrupted power loss system crash automatic selfchecks verify aspect repository consistent prior commit free opensource us bsd license latest release quick start download install using package manager compile source fossil init newrepository fossil open newrepository fossil add filesordirectories fossil commit commit message fossil ui repeat step order necessary see quick start guide detail
605,Lobsters,vcs,Git & VCS,A Git Horror Story: Repository Integrity With Signed Commits (2012),https://mikegerwitz.com/papers/git-horror-story,git horror story repository integrity signed commits,git horror story repository integrity signed commits trust distributed revision control system may used provide hub others work clone public key security vulnerability github exploited egor homakov commit master branch ruby rail framework keep secured repository personal computer inaccessible external mean talk presented google depends entire history leading commit ensuring trust git introduced ability gpgsign individual commits certificate origin managing large merges request user squash commits single commit adopt security policy requires signing merge commit option option sign commit introduced merge option option option option option option option option option option option option option prompted password single time option added bar amend commit commit amend satisfied change run rebase continue diff head commit amend need passphrase unlock secret key rsa key id created head added bar file changed insertion mode bar rebase continue rebased updated refsheadsbaraudit option enforcing trust option commit history nutshell need remember hash single commit hash collision vulnerability known faster brute force algorithm like hash never intended make git cryptographically secure automating signature check range spec trusted see mapping struct merge option signature check script disregarding trust commit history nutshell range spec signature check script web trust dependent personal setting unable check basic oneline output shown original script disregard trust previous script automating merge signature check option range spec trusted summary,git horror story repository integrity signed commits note article written end date update point please keep perspective house quiet kid bed significant long since fallen asleep couch waiting light tv flashing corner eye mind body exhausted satisfied progress night commit code hacking hour master fixed security vulnerability push change host others view comment progress critical release suspend pc struggle wake significant get himher bed turn light trip toy way bedroom sigh realize going make bottle child heard hisher favorite toy jingle fast forward four sleepdeprived hour woken sound phone vibrating incessantly smack time thinking alarm clock fumble halfblind try dig bed knock nightstand oops woke kid pick phone greeted frantic colleague merged change need tag get fix ah damnit wake significant asking himher deal cry child yeah went well stumble pc failing first attempt enter password rub eye pull change still squinting glance flood change presented child screaming background amused feeble attempt console himher git log look bunch commits colleague merged run test pass look like ready go git tag various bugfixes including critical git push tag struggling enter password private key slowly standing chair type run help baby damnit keep source code thing ci system handle rest fast forward two month long fixed successfully deployed however receive angry call colleague seems one prominent user massive security breach researching problem colleague found according history breach exploited back door created would never thing make matter worse signed using gpg affirmed tag good ready go scorn colleague make sense quickly check history git log patch missing docblocks x form puzzled expression raising hand keyboard slightly tapping space bar time expectation sure enough minor docblock change one inconspicuous line change added back door authentication system commit message fairly clear raise red would check furthermore author commit indeed thought race mind could happened commit name recall ever made change furthermore would never made line change simply make sense colleague frame committing system compromised host compromised local repository commit clearly part merge exist local repository pull morning two month ago regardless happened one thing horrifically clear right one blamed trust theorize possible may never fully understand resulted compromise repository story purely hypothetical entirely within realm possibility rest assured repository safe would reference clone also may download example tarballs created git distributed revision control system short mean anyone copy repository work offline private may commit repository user may pushpull central repository unnecessary distributed revision control system may used provide hub others work clone consequently also mean repository floating around project x may contain malicious code someone else hand repository project mean actually use question trust question trust trusting repository right even realize project including story number individual organization may inadvertently placed trust without fully considering ramification decision git host git hosting provider probably easily overlooked like gitorious github bitbucket sourceforge google code etc provides hosting repository allowing authorized user push often use ssh key tied account using host primary holder repository clone push entrusting entirety project stating trust source code safe tampered dangerous assumption trust host properly secures account information furthermore bug exist trivial piece software say vulnerability waiting exploited system completely compromising repository long ago march public key security vulnerability github exploited russian man named egor homakov allowing successfully commit master branch ruby rail framework repository hosted github oops friend coworkerscolleagues may certain group individual trust enough pull accept patch b allow push repository operating assumption individual truly trustworthy let u hope case immediately imply repository trusted security policy leave pc unlocked unattended make habit downloading virusladen pornography unsecured nonfree operating system perhaps fault running piece software vulnerable exploit given sure commits actually furthermore sure commits approve sign using git commit actually approved course assuming ill intent example pissed employee looking get arrogant obnoxious coworker fired committing nameemail manager project lead whose word would take would even know suspect repository linus torvalds original author git kernel linux keep secured repository personal computer inaccessible external mean ensure repository fully trust developer simply keep local copy whatever pc happen hacking pay mind repository likely hosted elsewhere well git distributed however serious matter likely use pc hacking notably likely use pc browse internet download software software buggy buggy software exploit exploit tend get well exploited every developer strong understanding best security practice operating system great using gnulinux nix variant make immune every potential threat dive bit deeply let u consider one largest free software kernel original creator linus torvalds handle issue trust talk presented google describes network trust created number others refers linus possibly manage mass amount code sent others handle portion kernel handle request submit linus handle merging branch trusted lieutenant know carefully looking patch patch linus receives actually aware patch communicated lieutenant linus certainly one way state fairly high level certainty patch coming one email patch signed respective gpgpgp key point web trust enforced signature linus sure private repository best secure aforementioned contains data personally trust repository safe far know use confidently point assuming web trust properly verified confidently convey trusted change others certainly know commits others know guy committing signing commits actually linus torvalds demonstrated hypothetical scenario beginning article anyone could claim linus attacker gain access clone repository commit linus nobody would know difference fortunately one get around signing tag hisher private key using gpg git tag tag point particular commit commit depends entire history leading commit mean signing hash commit assuming security vulnerability within forever state entire history given commit pointed given tag trusted well helpful help verify commits made tag next tag come around includes commit ancestor new tag necessarily guarantee integrity past state best knowledge tree trusted notice hypothetical hypothetical story also signed tag hisher private key unfortunately heshe fell prey something error heshe trusted hisher colleague could actually fully trusted nice could remove human error equation ensuring trust way ensure commit someone named email address actually commit much like assert tag signed private key actually tagged well trying prove proving identity project authormaintainer identify reasonable manner example work within internal network perhaps trust push internal ip secure sending via email sign patch using gpg key unfortunately extend level trust authormaintainer user clone repository look history know commit truly commit foo bar especially repository frequently accepts patch merge request many user previously tag could signed using gpg fortunately git introduced ability gpgsign individual feature long awaiting consider may happened story beginning article signed commits like notice flag instructing git sign commit using gpg key please note difference followed practice anyone else matter could say relative certainty commit indeed authored case story could defend stating backdoor commit truly would signed course one could argue simply sign commit order use excuse get addressing issue bit order set signing key first need get key id using gpg listsecretkeys interested hexadecimal value immediately following forward slash output output may vary drastically worry key contain multiple secret key select one wish use signing commits value assigned git configuration value usersigningkey given give commit signing shot create test repository work remainder article thing done differently commit unsigned commit addition flag indicating want gpgsign commit everything set properly prompted password secret key unless gpgagent running commit continue would expect resulting something similar output gpg detail hash differ default least git git log list validate signature order display signature commit may use showsignature option shown important distinction made commit author signature attached commit may represent two different people word commit signature similar concept option add signedoff line verifies signed commit necessarily imply authored demonstrate consider received patch wish apply policy repository every commit must signed trusted individual commits rejected project maintainer demonstrate without going hassle applying actual patch simply following raise done decide sign commit gpg key couple option first consider issue necessary care identity party contributor long provided code acceptable depends legal standpoint may every user gpg key given someone creating key sole purpose signing commits without mean identity verification discard key later forget exists little verify identity indeed whole concept behind pgp create web trust able verify person signed using key actually say scenario defeat purpose therefore adopting strict signing policy everyone contributes patch likely unsuccessful linux git satisfy legal requirement signedoffby line commit signifying author agrees certificate origin essentially state author legal right code contained within commit accepting patch party outside web trust begin next best thing adopt policy patch require author following request gpgsign commits receive patch apply capital lowercase gpgsign commit preserve signedoffby line well case pull request sign commit amending git commit amend note however hash commit change want preserve signature whomever sent pull request amend commit would alter commit invalidate signature dualsigning option git even support option instead may consider signing merge commit discussed following section managing large merges point discussion consisted apply patch merging single commits shall receive pull request certain feature bugfix say commits assure unusual case option request user squash commits single commit thereby avoiding problem entirely applying previously discussed method personally dislike option reason longer follow history featurebugfix order learn developed see alternative solution attempted later replaced render git bisect useless find bug software introduced single patch consisting squashed commits left dig code debug rather git possibly figure problem u adopt security policy requires signing merge commit forcing merge commit created noff needed certainly quickest solution allowing reviewer sign merge reviewed diff entirety however leaf individual commits open exploitation example one commit may introduce payload future commit remove thereby hiding overall diff introducing terrible effect commit checked individually egâ git bisect squashing commits option signing commit individually option simply reviewing commit individually performing merge without signing individual commit would prevent problem also fully prevent situation mentioned hypothetical story beginning still commit author commit would signed preserve hash individual commit sign commit introduced merge tedium chore greatly reduced using http gpgagent sure carefully review commit rather entire diff ensure malicious commits sneak history see bullet option instead decide script sign commit without reviewing individual diff may well go option also useful one need cherrypick individual commits since would result commits signed one may argue option unnecessarily redundant considering one simply review individual commits without signing simply sign merge commit signify commits reviewed option important point note option offer proof commit reviewed unless automated create new hash preserved three option choose depends factor important feasible particular project specifically history important avoid lot trouble simply requiring commits squashed option history important time review individual commits use option understand risk otherwise use option automate signing process avoid look individual commits wish keep history responsibly option list easily applied discussion previous section option option simple passing argument git merge merge fastforward commits simply applied atop head without need merging would need use noff option force merge commit inspecting log see following notice merge commit contains signature two commits involved merge herein lie commit contained backdoor mentioned story beginning article commit supposedly authored lack signature could actually authored anyone furthermore contained malicious code removed would show diff two branch however issue need addressed security policy reviewing individual commits review would catch potential problem commits require signing commit individually merge could representative reviewed commit individually see problem commitment reviewing individual commit large consider option option option list make review commit explicit obvious option one could simply lazily glance commits glance said one could option automating signing commit could argued option completely unnecessary use best judgment way make option remotely feasible especially large number commits perform audit way reenter secret key passphrases every commit use gpgagent safely store passphrase memory next time requested using gpgagent prompted password single time depending start gpgagent sure kill done process signing commit done variety way ultimately since signing commit result entirely new commit method choose little importance example desired could cherrypick individual commits amend would recognized merge would terribly confusing looking history given branch unless merge would fastforward therefore settle method still produce merge commit unless fastforward one way interactively rebase commit allowing easily view diff sign continue onto next commit first create new branch perform rebase see bar branch created demonstration option order step commit would merged master perform rebase using master upstream branch present every commit baraudit consequently bar master opening preferred editor e added bar e modified bar rebase onto command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell remove line commit lost however remove everything rebase aborted modify commits replace pick e edit shown vim also following ex command spicke adjust regex flavor editor save close presented first oldest commit stopped added bar amend commit git commit amend satisfied change run git rebase continue first review diff alternatively use tiggitk git diff head everything look good sign git commit amend gpgsign amend commit preserving author etc need passphrase unlock secret key user mike gerwitz free software developer mike mikegerwitzcom rsa key id created detached head added bar file changed insertion create mode bar continue next commit git rebase continue repeat successfully rebased updated refsheadsbaraudit looking log see commits rewritten include signature consequently hash match continue merge master normally would next consideration whether sign merge commit would option case example merge fastforward merge commit unnecessary since commits merged already signed need create merge commit using noff purely purpose signing however consider may perform audit leave actual merge process someone else perhaps project system place project maintainer must review code sign developer responsible merging managing conflict case may want clear record merged change enforcing trust determined security policy appropriate particular projectrepository well hypothetically least way needed enforce signing policy manual enforcement possible subject human error peer scrutiny let unnecessarily timeconsuming fortunately one thing script sit back enjoy let u first focus simpler automation ensure every commit signed trusted within web trust implementation would also satisfy option regard merging well perhaps every commit considered chance existing repository decent number commits go back sign commits would completely alter history entire repository potentially creating headache user instead may consider beginning check certain commit commit history nutshell hash commit git created using delta header information commit header information includes parent whose header contains forth addition git depends entire history repository leading given commit construct requested revision consequently mean history altered without someone noticing well entirely true discus moment example consider following branch preattack b h h represents current head commit identified parent commit b sake discussion say commit identified fragment let u say attacker decides replace commit another commit hash commit must change match new delta content header new commit identified x postattack x b h expects parent problem git encounter commit b remember git must build h using entire history leading check hash notice longer match hash parent attacker unable change expected hash commit b header used generate hash commit meaning b would different hash technically speaking would longer would entirely different commit retain identifier demonstration purpose would invalidate child b forth therefore order rewrite history single commit entire history commit must also rewritten done git rebase done hash h would also need change otherwise history would invalid git would immediately throw error upon attempting checkout important commit rest assured exists repository git always reconstruct commit exactly created including history leading commit created indeed linus mention presentation google need remember hash single commit rest assured given repository event loss commit represent exactly commit repository mean u importantly mean rewrite history sign commit history next signed commit guaranteed downside course history could already exploited manner similar initial story automated masssigning past commits given author catch thing anyway said important understand integrity repository guaranteed hash collision attacker able create hash different data child commit would still valid repository would successfully compromised vulnerability known since allow hash computed faster brute force although cheap exploit given repository may safe come point future considered crippled today point time however maybe git offer secure migration solution algorithm like better indeed hash never intended make git cryptographically secure given average person likely fine leaving hisher history way operate assumption implementation offering ability ignore commits prior certain commit one wish validate commits reference commit simply omitted automating signature check idea behind verifying certain commits trusted fairly simple given reference commitâ r optionally empty let câ set commits câ â r head range spec let kâ set public key given gpg keyring must assert commitâ c inâ c must exist keyâ k keyringâ k k trusted used verify signature ofâ c assertion denoted function gâ gpg following expression c fortunately already seen previous section showsignature option git log git handle signature verification u reduces implementation simple shell script however output dealing convenient parse would nice could get commit signature information single line per commit accomplished pretty additional time writing git gpg pretty option undocumented quick look formatcommitone prettyc yield g placeholder three different format output see git log showsignature g good signature bad signature otherwise empty string see mapping signaturecheck struct name signer interested using concise minimal representation g placeholder simply match text gpg output string gpg ca nt check signature public key found mapped signaturecheck unknown signature output empty string explicit behavior unsure change future release fortunately interested detail matter implementation mind come useful oneline output per commit based output resulting demonstration merge option notice suffix line indicating signature valid make sense since signature adding additional commit see happens commit unsigned note aforementioned string replacement g empty commit unsigned however commits signed untrusted within web trust gpg editkey gpg trust please decide far trust user correctly verify user key looking passport checking fingerprint different source etc nt know wo nt say trust trust marginally trust fully trust ultimately back main menu decision gpg save key changed update needed git log pretty format h g headâ mike gerwitz yet another foo mike gerwitz modified bar g uh oh seems git seem check whether signature trusted take look full gpg output see gpg provides clear warning unfortunately parsesignaturelines prettyc reference simple mapping struct signaturecheck blissfully ignore warning match good signature yielding patch provide separate token untrusted key simple time explore two separate parse simple oneline output ignorant trust mention le elegant implementation par gpg output signature check script disregarding trust mentioned due limitation current g implementation determine singleline output whether given signature actually trusted necessarily problem consider likely common use case run continuous integration ci system order let ci system know signature trusted likely provide set key known committers eliminates need web trust act placing public key server indicates trust key therefore signature recognized good commit trusted one additional consideration need ignore ancestor given commit necessary older repository older commits signed see commit history nutshell information unnecessary probably bad idea sign old commits script accept ref consider child check script assumes commit signed output hash unsignedbad commit addition additional useful information delimited tab git work u ref provided converted range spec appending egâ becomes cause git log return child including ref ref provided end using head without range spec simply list every commit using empty string cause git throw error must quote string case user decides something like master day ago using pretty option git log output gpg signature result g addition useful information want see commits pas test filter commits signed known key removing line end output g indicating good signature see action assuming script saved signchk argument script check every commit repository finding single commit signed point either check output check exit status script indicates failure script run ci system best option would abort build immediately notify maintainer potential security breach likely someone simply forgot sign commit check commits failure assuming child signed see following careful running script directly repository especially ci must either place copy script outside repository run script trusted point history example ci system simply pull repository run script attacker need modify script circumvent check entirely signature check script web trust web trust would come handy large group contributor case ci system could attempt download public key preconfigured keyserver key encountered updating key necessary get trust signature based web trust established public key directly trusted ci system could automatically determine whether commit trusted even key explicitly placed server accomplish task split script two distinct key within given range followed actual signature verification start key gathering portion actually trivial task string command simply us grep pull key id git log output using showsignature produce gpg output request unique key given keyserver case repository using throughout article single larger repository unique key listed note example specify range commits free integrate signchk script use range strictly necessary may provide slight performance benefit depending number commits would ignored armed updated key verify commits based web trust whether specific key trusted dependent personal setting idea trust set user egâ turn trust user depending configuration may automatically within web trust even personally trust concept applied ci server placing keyring place perhaps omit ci server run script unfortunately current g implementation unable check basic oneline output instead must parse output showsignature shown relevant commit combining output original script disregard trust arrive following output must parse snippet noted first commit signed whereas second therefore gpg output preceeds commit line consider objective list unsigned commits commits unknown invalid signature list signed commits signed known signature otherwise untrusted previous script performs fine need augment support wish convert line ending something else gpg output preceeding line indicates signature untrusted many way go settle fairly clear set command used augment previous script prevent line ending filtered output untrusted suffix untrusted line consider output following find filter line ending would left untrusted commits addition commits bad unsigned blank indicated g accomplish first add gpg output log showsignature option make filtering easier prefix commit line caret later strip filter line beginning caret line contain string part gpg output result line commits single gpg line untrusted pipe awk remove gpg prefixed line append u next line commit line finally strip leading caret added beginning process produce final output please keep mind huge difference conventional use trust pgpgpg assert know person claim v trusting someone commit repository may best interest maintain entirely separate web trust ci server whatever user used perform signature check automating merge signature check aforementioned script excellent wish check validity individual commit everyone wish put forth amount effort instead maintainer may opt workflow requires signing merge commit option rather commit introduced merge let u consider appropach would take implementation given reference commitâ r optionally empty let set firstparent commits â r head range spec let k set public key given gpg keyring must assert commitâ c inâ c must exist keyâ k keyringâ k k trusted used verify signature ofâ c assertion denoted function gâ gpg following expression c difference script script check signature individual commit script check commits particular branch egâ master commit directly onto master want ensure commit signed since merge merge master merge commit created may sign ignore commits introduced merge merge fastforward merge commit forcefully created noff option avoid need amend commit signature demonstrate script valdiate commits type workflow first create change would result merge committed master new diverge branch order ensure merge would fastforward alternatively could used noff option git merge result following hash vary git log oneline graph merge branch diverge added additional content diverged added content diverged added data master yet another foo modified bar added bar signed added feature x test commit foo graph see interested signature two commits created directly master merge commit two commits need signed signing merge commit asserts validity assuming author merge vigilant ignore commits git log oneline graph firstparent merge branch diverge added data master yet another foo modified bar added bar signed added feature x test commit foo example simply added firstparent option git log display first parent commit encountering merge commit importantly mean left commits master whatever branch decide reference commits wish validate performing validation therefore slight modification original script run script using branch setup provided find neither commits made diverge branch listed output since merge commit signed also omitted output leaving u unsigned commit mentioned previous section demonstrate happen merge commit signed amend follows omitting option merge commit listed requiring valid signature summary
607,Lobsters,vcs,Git & VCS,Mercurial with Augie Fackler,http://podcastinit.com/augie-fackler-mercurial.html,mercurial augie fackler,site community summary brief introduction pythonpodcastcom linodecompodcastinit getsentrycom signup itunes google play music discoursepythonpodcastcom interview augie fackler keep touch pick link freak fandango orchestra cc bysa,visit site listen past episode support show join community sign mailing listsummaryas developer one important tool use daily version control system mercurial one tool written python making eminently flexible customizable incredibly powerful week spoke augie fackler learn history feature future mercurialbrief introductionhello welcome podcastinit podcast python people make greati would like thank everyone donated show contribution help u make show sustainable detail support show visit site pythonpodcastcomlinode sponsoring u week check linodecompodcastinit get credit try fast reliable linux virtual server next projectwe also sponsored sentry week stop hoping user report bug sentry realtime tracking give insight production deployment information reproduce fix crash check getsentrycom use code podcastinit signup get credit visit site subscribe show sign newsletter read show note get touchto help people find show leave review itunes google play music tell friend coworkersjoin community visit discoursepythonpodcastcom opportunity find upcoming guest suggest question propose show ideasyour host usual tobias macey chris pattitoday interviewing augie fackler mercurial version control systeminterview augie facklerintroductionshow get introduced python chriscan describe mercurial project got started tobiashow get involved working mercurial tobiaswhat feature found mercurial lacking similar tool git bazaar tobiasone common complaint git human interface could use work mercurial ux improvement git chrisfor someone using mercurial work git vcs repository edge case watch certain operation could performed mercurial would break compatibility layer tobiashow mercurial architected design choice allow flexible extensible tobiasone core goal mercurial safe explain safety mean context architected achieve goal tobiasone noteworthy aspect mercurial strong focus making extension firstclass concern project much number core function written extension describe extension plug core execution engine tobiaswhat notable extension available use mercurial tobiasfor someone familiar git concept would need learn order use mercurial idiomatic way tobiasa large part reason git seen large adoption due prevalence github option using bitbucket using mercurial noteworthy mercurial hosting option think dearth open source mercurial server partially due fact mercurial ship functional server built tobiascan share recent feature added mercurial tobiaswhat planned future mercurial tobiashow think current day dvcs system like mercurial git darcs might evolve future chriskeep touchpickslinksthe intro outro music requiem fish freak fandango orchestra cc bysaliked take second support podcastinit patreon
609,Lobsters,vcs,Git & VCS,The Inner JSON Effect - The Daily WTF,http://thedailywtf.com/articles/the-inner-json-effect,inner json effect daily wtf,jdsl buildmaster explore,jake eagerly stepped new job grateful experience new challenge craving learn new software stack see new company teach world software told working website dealing javascript nodejs json like sounded pretty reasonable web development except nontechnical interviewer comment built top subversion assumed simple misunderstanding thrust project using company custom jsonbased domain specific language jdsl bos told check copy project assigned spend week two getting familiar ask anyone help question trouble judging experience jake began svn long story short took two day complete asked coworker scott told oh normal play solitaire something finish two day later started poking around started seeminglyinnocuous file called customersjson stared confusion content file customersjson class customer author redacted redactedcom purpose function project full file along apparentlyincomplete code file one called customersjs customersprototypeupdatebillinginfo function info thiscc infocc thistype infotype thisname infoname thisexpm infoexpm thisexpy infoexpy thisccv infoccv snip bunch similar line thissavetodatabase couple day spelunking codebase finding even single code comment jake could make sense seeing finally asked help coworker named scott available sat walk thing oh get yet began jdsl written tom supergenius wrote jdsl basically customersjson metadata used put together customer class waited jake get run asked scott laughed want run take couple day new deployment finish starting jdsl little slow really powerful really powerful like said tom genius jake still getting walk metadata file scott laughed genius part see say class uhhuh well class name see say function yeah well subversion link function make class still jake responded inwardly thought started understand prayed wrong customersjson customersjs json file metadata j file code list function json file tell jdsl look revision j file find function available case actual code revision jake blinked slowly hoping hazed revision customersjs one function add function check new code update json metadata file new revision jake confusion turned incredulity whenever something make function call customer object jdsl us list function revision check actual function find match understand think like said tom genius let track every function ever existed add new function overwriting j file adding new revision json remove function removing revision number function list still history inactive never lost scott stood let know question said left jake desk armed scott insight jdsl jake slowly began understand system checking multiple revision file could piece together see going runtime soon realized merely web portal allow customer update personal information thanks complexity jdsl took day coding work take minute went code still familiarizing started checking code comment help coworkers map together convoluted mess even fixed obvious bug found reading code one class time end week updated checked json metadata file use new function revision monday morning showed virtual firestorm everyone panic something broke jsdl customer database got scrambled scott quickly explained passed jake hallway voice boomed jake stopped turned face tall lanky pale blond man obviously angry jake new guy yes answered carefully tom broke jdsl uh jake looking customer portal could caused problem broke jdsl screamed reporting boss fired tom turned stormed leaving jake standing confused shortly afterwards jake summoned small conference room tom employee hr couple vice president waited tom looked like stewing could boil minute tell u jdsl one vp asked think anything jake answered two week trying learn jdsl customer portal work even know deploy made commits subversion tom shouted well yes added code comment trying use comment jdsl tom shouted broke jake stayed silent trying process code comment could wipe customer database tom continued pause added comment support jdsl runtime executes comment like normal code must database update comment well yeah put couple short syntax example comment tom burst foot knew broke turned face vps deal coder understand system either fire quit stormed room vps turned hr representative talked jake even room think course action pretty clear tom programming virtuouso best resource jake delete database fire jake jake moved greener pasture much greener pasture one production system dozen svn file checkout function call runtime one production system automatically use latest trunk one come complete standstill newbie checked code comment advertisement buildmaster allows create selfservice release management platform allows different team manage application explore
610,Lobsters,vcs,Git & VCS,Mercurial: Please Stop Using MQ [2014],http://gregoryszorc.com/blog/2014/06/23/please-stop-using-mq/,mercurial please stop using mq,mercurial mq history mercurial mq builtin party announced aurora beta release bookmark occurred march hack mq try repository runaway processcpu issue leading outage known mercurial issue mqext extension quilt thought topic ui shortcoming cognitive bias changeset evolution bad thing happen recently proposed marking mq deprecated moving away mq prompt extension evolve extension shelve extension merge tool line conclusion mq popularity result historical necessity longer exists continued usage mq represents general failure user eduction mq drawback mercurial modern feature addendum code review review board extension,mercurial user use mq extension please nt ask good question short version mq solution spawned version control technique popular decade ago better tool mq technologically obsolete want know full answer keep reading history mercurial mq mq extension extension mercurial core capability mercurial consists corebasic feature set supplemented builtin party extension provide advanced lesser used niche feature modern version mercurial nt running version please upgrade asap significantly different mercurial necessitated existence usage mq extension early day mercurial mercurial announced april choice branching spectacular option core mercurial use mercurial branch mercurial branch heavy beast branch permanent change branch changeset mercurial term commit assciated changeset change takeaway mercurial branch nt user friendly modern version mercurial print warning create one hg branch mynewfeature marked working directory branch mynewfeature branch permanent global want bookmark branch still relatively poor user experience inside mercurial especially compared git branch comparing git mercurial branch apple orange comparison mercurial branch synonymous cv subversion branch defense branch good role tracking release branch mozilla aurora beta release etc firefox repository arguably modeled branch instead separate repository complicating usability branch early version mercurial lack command rewrite history concept rebasing reordering patch always available mercurial significant limitation today seems like obvious shortcoming version control system keep mind state version control around cv subversion big player perforce sourcesafe tfs etc popular corporate setting sure version control system time supported rewriting history recollection rewriting history become thing git rose popularity think around time concept mutating past commits alien absurd would want lose data already done nt antithesis version control system git many concept including history rewriting perceived radical nt matter borrowed idea tool git newfound popularity made common new necessity went git subversion even mercurial superiority git flexibility obvious although ui great people still cope renaissance modern version control tool late mq became popular popularity strength mq necessity mq added mercurial february released part mercurial april far tell time mq release mq tolerable way perform history rewriting mercurial hg qref hg qpush move crude method history rewriting could leverage multiple mercurial command give illusion history rewriting cumbersome sane person wanted deal mq used introduction transplant extension mercurial release december added another history rewriting facility mercurial transplant command effectively copy changesets branch head mercurial release september introduced record extension record command provides interactive incremental commit support similar git add record nt strictly history rewriting provides useful functionality helping produce separate smaller commits larger ongoing change release mercurial december paper least milestone mercurial release added rebase extension introduced rebase command move changesets opposed transplant merely copy rebasing allowed pull remote change easily move local changesets top new change among thing even bigger feature added mercurial bookmark extension bookmark mercurial lightweigh branch instead permanent association changeset bookmark movable label attached changeset similar git branch initial bookmark feature far robust could nt push bookmark share others mercurial june worth noting bookmark became part mercurial core opposed existing extension must enabled mercurial released march bookmark record rebase provided decent framework history editing mercurial still rough edge notably around making easier edit history mq still easier use task like reordering patch nt mercurial may mercurial gained ability easily reorder patch using something mq came via histedit extension provides histedit command command provides mechanism interactively edit history similar git rebase interactive introduction histedit extension could finally perform advanced repository interaction workflow mq allowed without using mq continue reading next section learn using mq important mozillians reading worth noting conversion firefox source repository cv mercurial occurred march time mercurial mq transplant performing history rewriting mq thus convenient method rewriting history managing individual patch process firefox development largely maintains day thus mq effectively became de facto requirement developing firefox patch despite mq arguably unnecessary since mercurial release may mq still widely used within mozilla perception developer continue use mq furthermore even new developer still picking instead utilizing mercurial command managing changesets fwiw believe many turned mq nt want learn mercurial mq daytoday development git involve mercurial final push canonical firefox mercurial repository learned mq popular let talk nt used hack mq term architecture mq giant hack wart top mercurial goal every version control system track change time mq actively work core every mercurial repository store contains repository data changesets repository logically represented directed acyclic graph dag run hg commit hg pull hg import command introduces new changesets new data added dag written store one important property store supposed appendonly data added never removed property allows mercurial fulfill contract version control system keep track data without losing anything appendonly property important mean mercurial know history time need perform merge mercurial know exactly came thus effective way perform merge worth noting merging quite complicated extra data help merge correctly first time mean spend time writing code instead resolving merge conflict mq hack statement derives mq interacts mercurial store mq patch queue effectively overlay mercurial builtin store everchanging state partial application hg qpush apply patch patch queue effectively hg import import mercurial changeset file core mercurial store mostly fine hg qpop unapply patch mq effectively asking mercurial delete changeset data associated core mercurial store word qpop break ideal appendonly property mercurial store qpop force mercurial delete data lose track history make mercurial sad throwing away repository data merges become much harder mean spend time dealing resolving conflict complicate mq code path performing merges conflict resolution nt robust used say hg rebase hg histedit use mq pretty much guaranteed poorer conflict resolution process mean spend time wrestling tool instead know actually something productive deleting repository data unapplying patch via mq also negative performance implication given large enough repository firefox currently changesets performance issue result severely degraded performance extreme example mozilla try repository runaway processcpu issue leading outage due known mercurial issue dealing inefficient handling store nt appendonly use mq risk running issue although performance implication hopefully magnitude two le pronounced mozilla try repository experience theory mq could compensate deletion data mercurial core store retaining data nt lead yet reason nt use mq mq throw away perfectly fine history data hg qrefresh current patch overwritten new one old version discared actively work goal version control system record history ever started path realized commits later need throw away backtrack commits back time qrefresh tough luck lost history history store appendonly fairness mq patch queue maintained mq mercurial repository committed preventing history loss mqext extension even provides mechanism automatically committing patch queue repo qrefresh mutation event see even mq perfect mq also fails adequately update patch moved around little known fact mq patch parent changeset encoded run hg qpush exact mercurial apply patch parent changeset actually created opposed current work directory changeset theory never encounter conflict applying patch way mercurial changeset dependent content like git child absolutely way fail apply directly problem mq fails update parent changeset push patch top new parent eg let create root commit echo foo foo hg commit initial commit adding foo hg log changeset user gregory szorc gps mozillacom date sun jun summary initial commit notice changeset commit let create new mq patch echo patch foo hg qnew make mq patch creating mq patch creates file hgpatches cat hg changeset patch parent user gregory szorc gps mozillacom make diff git afoo bfoo afoo bfoo foo patch notice parent listed changeset mercurial core store let pop patch create new commit push old mq patch hg qpop popping patch queue empty echo bar bar hg commit second commit adding bar hg log changeset tag tip user gregory szorc gps mozillacom date sun jun summary second commit changeset user gregory szorc gps mozillacom date sun jun summary initial commit hg qpush applying hg log graph changeset tag tag qbase tag qtip tag tip user gregory szorc gps mozillacom date sun jun summary make mq patch changeset tag qparent user gregory szorc gps mozillacom date sun jun summary second commit changeset user gregory szorc gps mozillacom date sun jun summary initial commit see mq patch applied top second commit pushed working directory sitting let see mq say hg cat hg changeset patch parent user gregory szorc gps mozillacom make diff git afoo bfoo afoo bfoo foo patch mq still say parent even though changed parent mq lying u rectify situation running hg qrefresh cause mq regenerate patch file pick new parent unless need qrefresh resolve conflict change nobody mean distribute patch say uploading review parent changeset may accurate anyone applying patch may apply wrong changeset get unexpected result good worth behavior auto refreshing patch design nt necessarily want application mutating operation especially since mq repository nt automatically versioned partially mq effectively designed quilt built mercurial quilt tool invented modern version control tool era mq behavior influenced emulating quilt desire facilitate sane patchstackfeature based workflow ever wanted know mq work way like something modern another huge reason use mq concept workflow alien modern wellunderstood practice huge fan mercurial prefer git read thought topic nt pretend git nt widely used version control software right least open source world got way despite horrible ui shortcoming argue rise people enjoy workflow lightweight branch fast oftensimple merging github fairly good web ui certainly helped cause people today know git know lightweight branch think largely understand concept repository multiple head grok distributed version control system mean commit locally without affecting remote server grok push local commits remote sometimes form pull request mq nt work way way people come expect git cognitive bias lead u believe mq different git inferior someone apply unapply individual patch temporary queue stack depending think instead working branch someone groks git multiple headsbranchesbookmarks go trouble learning mq fact mq nt work well nonmq mechanism icing figurative cake reason listed enough know mq user able fully utilize gamechanging changeset evolution feature mercurial remember late people thought git crazy allowing mutate history antithesis version control threw away data changeset evolution obsolescence marker mechanism used enable changeset evolution mercurial answer enable mercurial retain metadata previous changesets evolved newer changesets criticism history rewriting deleting history changeset evolution make largely go away light version history past commits preserved propagated push pull operation changeset evolution change game much like git changed landscape version control late much notion modern version control work based current behavior tool example git user tell never git push force bad thing happen say say user experience distributed history rewriting git horrible error prone like git implementation history rewriting burn old book history translated new world order ok fair git reflog kinda sorta used recover disaster scenario far robust numerous caveat notably reflog part data distributed pushfetch therefore susceptible singlefew point failure mercurial obsolescence marker contrast leave footnote history book transfer annotation part distributed repository data changeset evolution us footnote reconstruct page history even differ perspective example force push rewritten history client recover automagically want complex history rewriting force push go right ahead mercurial changeset evolution enable work without imposing many practical restriction workflow tool good tool flexible impose fewer restriction mercurial changeset evolution potential change world version control much like git changed thing half decade ago still convinced mq bad idea know mercurial core developer recently proposed marking mq deprecated right little love mq within mercurial project maintainer generally think stated post mq yesterday solution yesterday problem cast aside mq user hope convinced mq bad idea transition away soon possible next section talk moving mq moving away mq completely abandonded mq december never using hindsight made transition much sooner could write entire post workflow since post already bit long going describe mostly command line example use bookmark managing feature branch use one bookmark per logical feature workflow similar using git branch create new bookmark new feature developing hg bookmark gpsmynewfeature make change file gpsmynewfeature hg commit make change gpsmynewfeature hg commit keep making small change gpsmynewfeatures hg commit decide want reorder merge commits look dag see changeset rewrite gpsmynewfeatures hg log graph gpsmynewfeature hg histedit open editor say change make let start new feature gpsmynewfeature hg central leaving bookmark gpsmynewfeature hg bookmark make change hg commit got review original feature let push hg gpsmynewfeature activating bookmark gpsmarionetterestart gpsmynewfeature hg pull gecko pulling http hgstagemozawsnetgecko searching change adding changesets adding manifest adding file change added changesets change file head obsexc pull obsolescence marker obsexc looking common marker node obsexc unknown remote marker obsexc done updating bookmark aurora updating bookmark updating bookmark updating bookmark beta updating bookmark central updating bookmark updating bookmark fxteam updating bookmark inbound updating bookmark release run hg head see head hg merge merge gpsmynewfeature hg rebase fxteam verify push want push gpsmynewfeature hg r fxteam push change gpsmynewfeature hg push r fxteam delete bookmark nt need gpsmynewfeature hg bookmark gpsmynewfeature bookmark work upgrade mercurial newer mercurial print message enter leave bookmark great ui improvement also prompt extension installed configured shell prompt contains active bookmark help keep track head committing also user experimental evolve extension extension implementing changeset evolution feature eventually functionality merged core mercurial one workflow evolve follows create bookmark new feature hg bookmark gpsmynewfeature make change gpsmynewfeature hg commit first commit make change gpsmynewfeature hg commit second commit submit code review exact command excluded wait review comment nit first commit hg previous first commit make change hg amend new unstable changesets amend provided evolve equivalent hg commit amend evolve command look history rewriting marker know rebase etc changesets face rewriting hg evolve move second commit atop first commit merging foo warning conflict merge merging foo incomplete edit conflict use hg resolve mark evolve failed fix conflict run hg evolve continue abort unresolved merge conflict see hg help resolve manually address conflict marker file foo hg resolve foo unresolved file hg evolve continue grafting revision ready push really love concept mq patch queue absolutely must development way opposed bookmarksbranches consider using shelve extension instead mq shelve still bit hacky violates appendonly goal mercurial store way integrates much better mq example unshelve changesets apply parent changeset last attached get merge conflict unshelve want rebase need use rebase command go mercurial robust merging code path leaving conflict marker instead rej file assuming using internal merge tool shelve also group multiple changesets together contrast mq default behavior flat list patch mq queue grew patch patch belonging dozen bug shelve around better mq good compromise stackqueue based development workflow mq modern development workflow bookmark nothing else shelve integrates much better mercurial core quantitative measurement mq weighs line shelve comparison svelt line considering nearly thing shelve offloads functionality like folding reordering core mercurial command nt exist time mq inception trust shelve reduced surface area robust bug free good shelve still integrated bookmark branch try stick mercurial core feature avoid shelve whatever try avoid mq conclusion never used mercurial becoming employee mozilla contributor firefox mq user first two plus year mercurial use blindly followed mozilla documentation advice fellow mozillians use mq nt truly invested learning mercurial opposed learning merely command line interface minimum required contribute firefox realized wrong common mozilla mindset mercurial mq incorrectly associating mq mercurial way thought mercurial inherently lacking knew branch bookmark nt realize could use alternative mq learning mercurial internals contributing patch mercurial core reading changelog mercurial project realize truth mq popularity result historical necessity longer exists continued usage mq represents general failure user eduction mq drawback mercurial modern feature word informed became learned bad idea mq avoided mozilla happened switch mercurial time mq reasonable solution available mercurial procedure documentation developed persisted largely ignoring advancement mercurial time fair fellow mozillians mercurial user everywhere mercurial nt truly ready jettison mq histedit extension came existence year ago year ago time switch nt switched git ca nt blame anyone switching git mind share network effect github compelling reason hope know mq bad idea please join realizing mq solution yesterday problem mq legacy tool loses data make life harder time let go past embrace future please join shaving mq neck beard growing since cv popular version control system addendum code review wanted write post trigger finally writing work integrating mercurial review board code review software bugzilla team mozilla working project integrate review board bugzilla code review supplementing antiquatedbycomparison splinter code review feature instead uploading patch bugzilla mozilla firefox development done decade push changesets mercurial repository pushed changesets automatically turn code review review board get crossposted referenced bugzilla bug part larger goal make easier patch submitted landed consistently centrally lead various automation tooling improvement bot conducting aspect code review automatically landing reviewed patch thing difficult bugzillaonly patchbased world difficult first aggregate patch second process unified manner patch come many different flavor mercurial style diffs plain patch patch git mercurial style annotation different line context patch different handling binary content mq lying parent changeset contribute massive impedance mismatch sort make extremely difficult roll kind automation tool built top must first solve difficult data normalization distribution problem problem exist drastically raise barrier forward progress contrast pushing mercurial git repository repository data patch file client able extract variation data however see fit commit data centralized distributable unified dozen existing tool service already know speak repository data problem go away many solution already invented u back review board written extension push reviewspecific metadata mercurial server effectively allows mercurial speak code review interact code review server mercurial client writing obsolescence marker able track changesets undergoing review logical successor example pull rebase rewrite changeset x changeset change mercurial know changeset x review b new version x push code review review associated x updated automagically could accomplish heuristicbased matching user prompting error prone would nt believe number corner case require excessive user time especially complex history rewriting involved mercurial obsolescence marker allow matching work scenario people spend time writing reviewing code opposed telling code review tool review implementing extension realized mq user mercurial user mozilla reckon would unable reap benefit magic well using mq care passionately developer productivity good tool tool nt require constant massaging want everyone get full benefit mozilla new code review system launch way happens people stop using mq way happens people learn mq bad idea nothing else convinced stop using mq yet maybe lure amazing automagical code review collaboration experience sway
611,Lobsters,vcs,Git & VCS,"X-Men: Days of Future Past, Explained in Mercurial Evolve",http://jordi.inversethought.com/blog/x-men-in-mercurial-evolve/,xmen day future past explained mercurial evolve,mercurial evolve beginning finding problem know everything bad bookmark preparing wolverine endure change making fix unstable shelving working change put memory away finalising,post made round couple day ago got mercurial hg better think especially evolve describing evolve work movie seen yet might want wait basic gist timetravel plot go back fix timeline beginning history terribly wrong awful crippling bug discovered way back history terrible big chunk current history thrown someone created evil sentinel evil decided exterminate mutant human finding problem everyone dig back log find cause problem know everything bad remember time past ok hg bisect good discussion hg bisect good hg bisect bad hg bisect good hg bisect bad problem revealed first bad revision changeset user raven darkhölme mystique xmenorg date fri may summary kill trask get dna stolen bookmark placed future reference hg bookmark mystiquesfirstkill r preparing wolverine professor x magneto brief wolverine impending task history made public situation hopeless hg admin kitty pryde decides operate wolverine repo one could withstand change cd homewolverinexmen hg phase draft force r descendant mystiquesfirstkill wolverine repo endure change desperate move desperate time kitty sends logan back hg update r mystiquesfirstkill making fix wolverine dispatch minor thug squash bug first change need alter timeline hg amend attempt wisecrack thug new unstable changesets history based top commit unstable still thing rocky sentinel approaching bad future might kill everyone shit get real ok though wolverine badass give fuck go business hg ci psychoanalyse charles xavier acceptable spelling canadian hg ci new recruit peter maximoff quicksilver xmenorg hg ci use quicksilver rescue magneto hg ci stop mystique killing trask wip hg ci stop mystique killing trask hg fold r stop mystique killing trask hg ci get metal painfully inserted body get drowned good measure decided want two separate commits effect stopping mystique folded two commits one ok still draft mode shelving working change wolverine much current situation others decides put memory away mystique le buggy version disguised stryker revive wolverine hg ci rescue wolverine thing might kill whole lot merry development happen offscreen hg ci rebuild school hg ci get new recruit hg ci everyone happy hg ci etc etc finalising point unstable history bad timeline longer needed xmen wanted keep part might used hg evolve command want forget whole mess hg bookmark delete mystiquesfirstkill hg prune r unstable whole thing fade away wolverine reawakens future along memory future professor x good timeline fix merge conflict ensue unshelving
614,Lobsters,vcs,Git & VCS,HOPE XI - The Code Archive,http://livestream.com/internetsociety2/hopeconf/videos/130613964,hope xi code archive,,
615,Lobsters,vcs,Git & VCS,Command Everything with a Serverless Slack Bot,http://blog.librato.com/posts/nestor-chatbot,command everything serverless slack bot,,solarwinds worldwide llc right reserved
616,Lobsters,vcs,Git & VCS,Simple git hooks,https://github.com/gtramontina/ghooks,simple git hook,ghooks installation advised setup note optinout andreas windt optcli documented hook available common issue credit nlf precommithook contributor license,ghooks simple git hook installation npm install ghooks savedev advised install ghooks production dependency install git hook production environment well please install devdependencies section packagejson please also note absolutely advised install ghooks globally work expected make development dependency project setup add configghooks entry packagejson simply specify git hook want corresponding command like following config ghooks precommit gulp lint commitmsg validatecommitmsg prepush make test postmerge npm install postrewrite npm install note hook working directory relative git root git directory mean packagejson subdirectory git repository need cd directory running npm script eg precommit cd pathtofolder npm run test optinout one last thing want raise barrier contributing open source project andreas windt developed optcli package allow turn hook optinout script see project packagejson example documented hook available applypatchmsg preapplypatch postapplypatch precommit preparecommitmsg commitmsg postcommit prerebase postcheckout postmerge prepush prereceive update postreceive postupdate preautogc postrewrite common issue credit module heavily inspired nlf precommithook contributor huge thanks everyone listed license software licensed mit license
617,Lobsters,vcs,Git & VCS,BitKeeper 7.3 released,https://users.bitkeeper.org/t/bk-7-3ce-released-2016-07-13/174,bitkeeper released,release note bitkeeper version release july new feature bk fastimport bk untag change bk diff bk get bk delta bugfixes bk fastexport nixos,release note bitkeeper version release july release contains change aimed decoupling builtin package bitkeeper make easier include system package since functionality changed nothing major added minor version number incremented new feature bk fastimport command added quickly import git repository bk initial release work progress following feature yet implemented incremental import git repos submodules octopus merges git fastexport support add bk untag command delete tag extend bk change output show better information tag bk always version controlled tag possible tag multiple place history release add ability delete tag previously could move way delete bk change show currently tagged changesets bk change tt show changesets even tag moveddeleted annotates information changeset wscott workbitkeepercom fix problem tstatus tagged release tag currently change removed outofdate version gnu diff tree place bk assumed gnu diff use one system exception window diff found bk use binary still ship upgraded part larger effort unbundle os package likely already installed uptodate rename old bk diffs command bk diff bk diffs remains alias script expecting bk diff run gnu diff updated remove bk prefix removed outofdate version gnu patch tree code use whatever version patch user installed bk patch code also call system patch first scan patch run bk edit pathnames found patch sideeffect change removed bk import temail used dependent exact version patch used library zlib pcre tomcrypt tommath link system copy instead using included copy simplistic compile test work srcconfmklocal fail tweaked library found nonstandard location system building targz library must preinstalled update documentation describe bk get instead bk co bk delta instead bk ci getdelta verb become name operation documentation reflect command aliased release functionality changed script break overriding csets username bkuser bk would record new user system username together userrealuser code changed display user case visible change annotation username userrealuser change uuser match user name limiting user bkweb work findkey search user userrealuser case part tag delete change number dspecs changed function normalized strictly walk line separated newlines dspec processing previously dspec dspec separate could different thing c macro changed used return comment newlines previous would join multiple line without adding space useful tag releated dspecs changed list separated newlines tagged tag delta still active tag tag delta inactive one annotated deleted moved alltags show tag delete active old tag alias added compatibility tag tagged symbol alltags rework build dependancies makefile longer assumes bk installed try use installed bk building bitkeeper bk binary built first binary used constructing manpages gui bugfixes performance fix bk fastexport large repository new code couple order magnitude faster fix couple place using old dirsccssfile pathnames error message customer reported pull failed delete parallel deletes symlinks add destdir support makefile fix bk binary chain symlinks final location code still find install directory simplifies package nixos
618,Lobsters,vcs,Git & VCS,Mango: Git completely decentralised,https://medium.com/@alexberegszaszi/mango-git-completely-decentralised-7aef8bcbcfe6,mango git completely decentralised,try mango testrpc,try mango simple need environment nodejsnpm install following package npm install g mangoadmin gitremotemangomake sure also local ethereum node rpc enabled testing purpose suggest use testrpc ipfs daemon also needed replication desired needed local testing testrpconce prerequisite met mango repository created mangoadmin createinitialising creating new repository administrator transaction created local git repository pushed git remote add mango mango git push mango mastercounting object donedelta compression using threadscompressing object donewriting object kib byte donetotal delta reused delta mango new branch master masterand finally clone existing repository git clone mango receiving object kib byte donechecking connectivity donevoilà ready
620,Lobsters,vcs,Git & VCS,Git 2.9 has been released,https://github.com/blog/2188-git-2-9-has-been-released,git released,faster flexible submodules last release source last release trick source source source beautiful diffs source source customize color interactive staging source diffsofancy testing commits interactive rebase source git tidbit gitbits tidgits source table source source hook script source tool source source rest iceberg full release note,open source git project released git variety feature bug fix look interesting new feature faster flexible submodules last release showed use job n option fetch submodules parallel real time saver git fetch recursesubmodules also use job option cloning updating submodules git clone recursesubmodules git submodule update always want submodules processed parallel set submodulefetchjobs config option source also new convenience specifying want submodule clone fetch behave git pas commandline configuration option submodules command need set oneoff variable submodule fetch git c httpproxy clone recursive last release mentioned git lf use c config speed initial checkout apply trick cloning submodules similarly pas shallowsubmodules git clone make shallow clone submodules source source source beautiful diffs used git probably looked lot diffs time diff show exactly changed line added new one took away git generates diff seeing state file sometimes way show change pretty confusing example look diff add new loop existing function diff git afoorb bfoorb index afoorb bfoorb module foo def finalize value valueseach v vprepare end valueseach v vfinalize end end author probably write loop two outoforder half outer line old new loop equally valid attribute line either way tempting say problem solved always starting added line top fix case opposite problem new loop added old git diff engine learned new heuristic try keep hunk boundary blank line shifting hunk whenever bottom hunk match bottom preceding context hit blank line result show author actually wrote case diff git afoorb bfoorb index afoorb bfoorb module foo def finalize value valueseach v vprepare end valueseach v vfinalize end ah much better new heuristic still experimental may change future even become default enable compactionheuristic option command line setting diffcompactionheuristic git config source source maybe minutae diff hunk alignment thing ok niche interest let talk color probably already know git colorize diff output even customize color also script filter git output change even instance diffhighlight script put extra emphasis changed part line diff git afoorb bfoorb index afoorb bfoorb module foo def output put hello world put goodbye world end end way make use script simplest configure git filter diffs whenever showing pager git config pagerlog diffhighlight le git config pagershow diffhighlight le git config pagerdiff diffhighlight le cover almost everything one spot missing diffs shown interactive patchstaging tool using interactive staging right git ask filter diffs show script like git config interactivedifffilter diffhighlight phew set avoid horror ever seeing unhighlighted diff source really want go nut check diffsofancy project plug way diffs fancy pop monocle testing commits rebase x neat freak come commit history may used git interactive rebase great fixing commit message squashing splitting reordering commits heart interactive rebase really recipe instruction follow pick commit squash one edit message one many people know insert command like instruction sheet git run appropriate time stopping run command fails make perfect testing commit series rebase stop first buggy commit allowing fix rerun test amend commit continuing project commitbycommit review polishing commits like rather lumping bug fix end great way kind reviewer rather complain bug early commits find fixed later get see directly change propose logical flow build towards final goal course writing exec make test commit instruction sheet get pretty tedious git rebase support x option add commit release x implies rebase already default upstream tracking branch testing full branch easy git rebase x make test executing make test result ok executing make test result fail make test error execution failed make test fix problem run git rebase continue oh bug fix continue way hack hack hack make test result ok git commit amend git rebase continue executing make test result ok successfully rebased updated refsheadsyourbranch perfect result ready shared source git tidbit gitbits tidgits git describe command give humanreadable still uniquely identifiable name commits contains mode find tag contains given commit make name generates good shorthand commit get released older version git looked topologically closest tag could sometimes produce counterintuitive result newer tag merged git new heuristic much easier explain pick oldest tag contains commit describe path shortest way possible source fan ascii art let honest pleased know git log expand tab commit message account indentation turn messy broken alignment like git log commit author muan chiou muan usersnoreplygithubcom date mon sep circuit frazzled hubot xx git log commit author muan chiou muan usersnoreplygithubcom date mon sep expanded tab hubot xx oh use serious thing like table diagram source rename detection enabled default diffs may heard git record renames true git infers fly file renamed looking similarity content old new file feature existed since early day git enabled default source specify custom path hook git call hook script allow implement custom policy action certain event occur hook script found inside git directory repository making pain manage standard set hook repository store hook one place point repository new corehookspath config source tool map user git identity well record job information commit message thanks tool forego joy using git client even project working us perforce svn hg cv source source rest iceberg sampling change git check full release note complete list
621,Lobsters,vcs,Git & VCS,Effective Reproducible Research with Org-Mode and Git,https://www.researchgate.net/publication/281886434_Effective_Reproducible_Research_with_Org-Mode_and_Git,effective reproducible research orgmode git,,worth investing time also understand theneed simplify use thus currently many initiative port orgmode make work completely vior web browser already work notfully mature complete yet thus quite conﬁdentthat orgmode completely emacs independent thenear futurethere also problem regarding management andstoring large data ﬁles repository wellknown community already solved forthe mercurial revision control tool even exhaustive research could ﬁnd satisfactory solutionfor git many tool proposed leading gitannex shortcoming tool aregenerally meant alternative synchronization service like dropbox google drive rather helpdealing large data trace originating remote machine experiment large git repository severalgb hinder daily committing signiﬁcantlyslow pull checkout operation branch comprising huge number data set typically data art branch still unclear approach would scale multiple user working simultaneously code modiﬁcationsand experiment parallel theory work everyone suﬃcient experience tool workﬂow never tried two person another interesting feature yet experienced iscollaboration external user researcher couldclone project work try reproducethe result build upon work potentially improving code contribute data set back even thoughsuch utilization work smoothly could somepitfalls anticipated yetone could also ask question whether providing somuch information interest much informationmay make important thing harder distinguishregardless answer question believe anywaythat beyond actual experimental content openlaboratory notebook structure technique weused keep track information make analysis couldbe useful othersin near future plan write several simple scriptsthat completely automate workﬂow scriptswill packaged available debian linux system way gitﬂow approach software development time managing experimental researchalthough methodology undoubtedly improvableand several alternative nonetheless found itvery fast eﬃcient daily usage extremely beneﬁcial work encourage people buildon simple workﬂows conduct study itis eﬀective way conduct reproducible reference c augonnet thibault r namyst pa wacrenier starpu uniﬁed platform task scheduling heterogeneous multicore architecture concurrency computation practice feb buchert l nussbaum j gustedt workﬂowinspired modular robust approach experimentsin distributed system research report inria nov h casanova giersch legrand quinson andf suter versatile scalable accurate simulationof distributed application platform journal ofparallel distributed computing june c drummond replicability reproducibility noris good science proceeding evaluationmethods machine learning workshop k hinsen data code model reproducible research executable paper procedia computer science proceeding international conference computational science imbert l pouilloux j rouzaudcornabas l ebre hirofuchi using execo toolbox perform automatic reproducible cloud experiment international workshop using andbuilding cloud testbeds unico collocated ieeecloudcom sept j mirkovic b schwab j wroclawski faber b braden deter project advancing thescience cyber security experimentation test inproceedings ieee homeland security technology conference ieee hst mytkowicz diwan hauswirth p fsweeney producing wrong data without anything obviously wrong proceeding international conference architectural support programming language operating system asplosxiv page acm c ruiz richard j emeras reproducible software appliance experimentation proceeding ofthe international icst conference testbeds andresearch infrastructure development network community tridentcom c c ruiz sanabria richard b videau andi oleg managing large scale experiment distributedtestbeds proceeding iasted international conference acta press e schulte davison dye c dominik amultilanguage computing environment literate programming reproducible research journal statistical software l stanisic thibault legrand b videau andjf modeling simulation dynamictaskbased runtime system heterogeneous multicore architecture proceeding europarconference springerverlag aug l stanisic b videau j cronsioe degomme v marangozovamartin legrand performance analysis hpc application onlowpower embedded platform proceeding theconference design automation test europe date page eda consortium v stodden f leisch r peng editor implementing reproducible research r series chapmanand hallcrc apr companion starpusimgrid article hostedon figshare http online version access theexperimental data script org source
622,Lobsters,vcs,Git & VCS,new svn conflict resolver status update,http://svn.haxx.se/dev/archive-2016-06/0006.shtml,new svn conflict resolver status update,,regularly working new conflict resolver since january status update present result far remains done release code trunk branch could still disable without much effort however point think feature worth holding release feature mature enough released lack tree conflict resolution big pain point huge part user base least stick svn spite problem whatever reason got real chance make difference area next release think basically ready libsvnclient api see svnclienth nt see much potential change apart small cleanup model used api discussed philip julian slovenia last year svn client fully converted legacy api fragements remain nt affect resolver code detailed description conflict tree conflict describe conflicting incoming local change detail description actually trying explain happened rather basically dumping raw working copy meta data screen user pointed revision contributed conflict see author name description hope make communication developer easier confronted difficult merge conflict consulting work elego client encountered many case digging information understand conflict coming harder user actual resolution process believe fixing problem alone worth possible add new conflict description resolution option resolver time without changing public api except one place enum provides public id option client nt necessarily need id provide support option basic resolution option implemented case like add deletes even regression test need work like offer graphical description along textual one ascii art svg gui client verynicetohave feature absolutely essential resolver attempt detect incoming move based scanning log code new experimental believe need lot testing release feature world possible edge case entirely unclear need add resolution option option offer le manual conflict resolution work performed user really case ca nt adding much matter much keep adding since always add option patch release api change required aim solid set option reasonable coverage common case nt lean far window test coverage poor xfail test already show existing option nt work case good thing testing point view apart addressing existing xfail test hairy merge problem need add lot test least one test per resolution option ideally test option possible case may apply ie subset possible combination forward update backwards update syncmerge reversemerge reintegratemerge cherrypick merge switch going forward history switch going backwards history file v file file v directory directory v file directory v directory symlinks external add delete edit move replacement copy going need help especially last point simply sheer size problem space existing test c test libsvnclient using api client would use python test framework nt handle interactive prompting moment pretty much impossible test resolver understanding resolver implementation necessary adding test understanding resolver api understanding use c api fudge working copy conflicted state sufficient bunch squirrel train smart enough know bit c get long way alone much work know nt many developer resource right many nt time write big feature day still like ask help think someone spends little time got problem good investment conflict description add resolution option add test certain going work well saving user dealing tree conflict every day huge chunk time run particular conflict even small contribution every would also help another problem starting feel somewhat lonely around great giant sandbox play lack continuous feedback usually receiving long involved project make uncertain making difficult decision afraid introducing problem ca nt easily fix later anyone else feel way realize normal project way past high slope hype curve working basically alone time lot le fun could imagined slight danger lose interest point project done thing scope project resolver assumes conflicted node still structural state last mergeupdateswitch operation left nt think huge problem many case user make manual change tree structure clearing conflict marker anyway currently libsvnwc provides new interface atomic resolution operation updatemove going work problem addressed ever risk inconsistent wcdb state automated resolution step could error step middle case user get deal result however arguably worse svn behaviour even trying resolve conflict first place remembering answer previous conflict avoid repeated interactive conflict resolution across several branch could probably done nt clear idea could implemented case could added later true renames believe dead horse svn need redesign entirely new implementation support glad proven wrong though received cest
625,Lobsters,vcs,Git & VCS,Who Needs Git When You Got ZFS?,http://zef.me/blog/6023/who-needs-git-when-you-got-zfs,need git got zfs,zfs considered stable production use mac openzfs o x site pool file system much storage pool need git creating repository committing tagging branching pushing pulling repository use zfs linux btrfs oracle zfs administration guide,post also available japanese playing little bit zfs oracle previously sun nextgeneration file system originally developed solaris since open source also ported linux considered stable production use mac called file system zfs also volume manager also take job partitioning disk well zfs cool includes protection data corruption builtin support raid snapshot copyonwrite clone flexible efficient way transferring data eg backup show possible push limit somewhat show get implement various feature git version control system version control system matter using zfs course seriously suggesting ditch proper version control system give good sense possible file system level installing zfs hard mac go openzfs o x site install package ubuntu linux sudo aptaddrepository ppa zfsnativestable sudo aptget update sudo aptget install ubuntuzfs pool file system able create new zfs storage pool file system drive available use want play around little bit create one file represent disk instance create file use dd dd ifdevzero want test raid setup create second one different name next step create storage pool use zpool create one disk available use drive label eg devsda devsdb better yet id case use absolute path regular file create various type pool instance create mirror raid sudo zpool create mypool mirror create pool named mypool mirror across two device mount mypool linux volumesmypool mac see much space available use zfs list sudo zfs listname used avail refer mountpointmypool volumesmypool alternatively pool space device treat one big drive created mypool already destroy first sudo zpool destroy mypool create nonmirrored pool sudo zpool create mypool sudo zfs listname used avail refer mountpointmypool volumesmypool total available much storage pool like adding disk fly replacing fly etc let stick simple setup start writing file volumesmypool mypool mount recommended way using zfs instead create separate file system pool file system set various property whether enable encryption compression quota also take snapshot file system individually share file system via samba nfs transfer file system snapshot pool possibly server file system kind shit zfs filesystems managed using zfs command line tool opposed zpool used pool sudo zfs create mypooltest create mount new filesystem mypooltest volumesmypooltest mac incidentally mount file system pool anywhere like passing switch even fun changing mountpoint fly sudo zfs set mountpointtest mypooltest remount filesystem test see property filesystem use zfs get sudo zfs get mypooltestname property value sourcemypooltest type filesystem mypooltest creation di aug mypooltest used mypooltest available mypooltest referenced mypooltest compressratio mypooltest mounted yes mypooltest quota none defaultmypooltest reservation none defaultmypooltest recordsize defaultmypooltest mountpoint test localmypooltest checksum defaultmypooltest compression defaultmypooltest atime defaultmypooltest device defaultmypooltest exec defaultmypooltest setuid defaultmypooltest readonly defaultmypooltest snapdir hidden defaultmypooltest canmount defaultmypooltest copy defaultmypooltest version mypooltest mypooltest normalization formd mypooltest casesensitivity sensitive mypooltest refquota none defaultmypooltest refreservation none defaultmypooltest primarycache defaultmypooltest secondarycache defaultmypooltest usedbysnapshots mypooltest usedbydataset mypooltest usedbychildren mypooltest usedbyrefreservation mypooltest logbias latency defaultmypooltest sync standard default bunch useful stuff instance let enable compression sudo zfs set compressionon mypooltest anything write filesystem point onwards compressed need git using zfs replacement git probably good idea give sense zfs support file system level let go typical gitlike operation creating repository committing tagging version branching pushing pulling change storage pool possibly machine notably missing support merging zfs direct support far aware creating repository first let create filesystem project specific nested filesystem project call zfsgit ues nest filesystems deep like chown root filesystem current user sudo creating editing removing file sudo zfs create mypoolprojects sudo zfs create mypoolprojectszfsgit sudo chown whoami volumesmypoolprojectszfsgit cd volumesmypoolprojectszfsgit alright equivalent repository checkout thereof let create file put content echo hello filetxt committing tagging order create commit tag ie something kept project history revert use zfs snapshot zfs snapshot explicitly named let create first one firstcommit adding snapshot name filesystem name sudo zfs snapshot mypoolprojectszfsgit firstcommit let change file slightly echo world filetxt let see changed sudo zfs diff mypoolprojectszfsgit firstcommitm volumesmypoolprojectszfsgitfiletxt sadly really get see textual diff least indicates file changed create new commit sudo zfs snapshot mypoolprojectszfsgit secondcommit list current snapshot sudo zfs list snapshotname used avail refer mountpointmypoolprojectszfsgit firstcommit mypoolprojectszfsgit secondcommit let make another change echo lady filetxt bad idea let roll back previous snapshot sudo zfs rollback mypoolprojectszfsgit secondcommit cat filetxthelloworld got previous version back branching functionality similar branching achieved using zfs clone allows clone filesystem based particular snapshot sudo zfs clone mypoolprojectszfsgit firstcommit mypoolprojectszfsgitbranch creates new copyonwrite filesystem mounted mypoolprojectszfsgitbranch lightweight operation copying involved initially barely extra diskspace consumed pushing pulling repository send filesystems even incrementally storage pool local remote demonstrate let say created another storage pool called locally push snapshot storage pool follows root zfs send mypoolprojectszfsgit firstcommit zfs receive imagine work well via ssh instance zfs send mypoolprojectszfsgit firstcommit ssh root myserver zfs receive mypoolzfsgit push entire filesystem looked time snapshot alternatively already pushed previous snapshot also push difference previous snapshot current one using option zfs send mypoolprojectszfsgit firstcommit mypoolprojectszfsgit secondcommit zfs receive useful incrementally backing large file system course using unix pipe also write result zfs send file upload instance zfs send mypoolprojectszfsgit firstcommit backupdump pull filesystem instead pushing reverse ssh could look something like ssh root myserver zfs send mypoolzfsgit secondcommit zfs receive mypoolzfsgit use zfs zfs pretty cool pretty stable least solaris linux sure stability mac time using zfs root file system linux still slightly problematic moment issue likely resolved soon extensive experience reliability performance internet good thing say however zfs game town also linux btrfs offer many similar feature however btrfs newer le mature may stable yet either way file system lot fun play learn zfs recommend reading oracle zfs administration guide pretty readable much applies linux mac well
626,Lobsters,vcs,Git & VCS,Bitbucket Pipelines Beta,https://bitbucket.org/product/features/pipelines,bitbucket pipeline beta,support every platform,support every platform build test language platform including java javascript php ruby python net code
627,Lobsters,vcs,Git & VCS,More contributions on your profile,https://github.com/blog/2173-more-contributions-on-your-profile,contribution profile,profile setting every paid plan includes unlimited private repository read help guide,earning green square contribution graph mean celebrating work open source public project starting today also celebrate work private sharing anonymized contribution private repository think including work private repository accurate representation contribution privacy important private contribution shown default enabled completely anonymized general public opt sharing private contribution profile setting detail issue pull request commits made private repository visible fellow repository collaborator part update code streak longer featured contribution graph simplified interface focus work rather duration activity every paid plan includes unlimited private repository experiment want private still add contribution graph information read help guide toggling private contribution profile
628,Lobsters,vcs,Git & VCS,Git Reflow,https://github.com/reenhanced/gitreflow,git reflow,gitreflow automate git workflow prefer squashmerge usage overview benefit feature prerequisite editor associating text editor git getting started advanced usage guide starting feature branch protip refreshing current branch based base branch featurebranch basebranch remotelocation basebranch featurebranch basebranch featurebranch remotelocation note reviewing work note work http pullurl checking branch status note delivering approved code note also get way make follow process featurebranch featurebranch work see notice customize merge method project basebranch featurebranch note full list configuration guiding principle featurebranch basebranch basebranch basebranch configuration advanced usage customization custom workflow contributing http wwwreenhancedcom looking capable team project get touch looking grow,gitreflow automate git workflow fukuoka ruby award winner workflow look like create feature branch write great code create pull request master get lgtm code review merge master squashed default overridden prefer squashmerge delete feature branch reflow make life easier reflow automatically creates pull request ensures code review approved merges finished branch master great commit message template usage overview create switch new branch nhbranchybranch git reflow start nhbranchybranch create pull request branch master custom basebranch git reflow review code approved merge basebranch delete feature branch git reflow deliver benefit enforce code review across team know entire team delivers code way reduce knowledge needed deliver great code commit history clean actually usable revert feature ease needed work diverse team le worry different process stop searching git workflow reflow cover need without junk never use feature automatically create pull request master automatically ensure code reviewed merging start sensible commit message default squash merge feature branch result important detail automatically clean obsolete feature branch successful merge prerequisite editor reviewing title body new pull request reviewing commit message delivering feature open temporary file default editor use git chosen editor first git config coreeditor try editor environment variable lastly fallback vim would like use editor choice recommend setting git config example use atom editor git command git config global coreeditor atom wait see github full article associating text editor git information adding getting started first install need setup github credential used get oauth token store reflowspecific git config file use token create pull request command line gem install gitreflow installs gem git reflow setup please enter github username nhance please enter github password store github account successfully setup safe run multiple time nt care save information special git configuration file gitconfigreflow get included global gitconfig file usage github enterprise custom configuration see advanced usage guide starting feature branch set feature branch remotely brings local copy machine yeah hand pretty easily skip command want handy shortcut magic git reflow start nhbranchname git reflow start take name new branch name want create feature addition take optional flag basebranch name base nt pas parameter look reflowbasebranch git configuration default master base branch name base branch want base feature ensures every time start new base branch based latest remote base git reflow start nhbranchname base basebranchname protip use initial beginning branch team know responsible initial nh branch start nh refreshing current branch based base branch git reflow refresh command update featurebranch basebranch according remotelocation merges basebranch featurebranch handy command keep branch date point time someone else committed basebranch remote git reflow refresh r remotelocation b basebranch pas name remote fetch name basebranch would like merge featurebranch remotelocation default origin basebranch default master command also take remote branch name flag option note basebranch argument provided look reflowbasebranch git configuration fallback master default reviewing work git reflow review work reviewed team help spread knowledge multiple party keep quality code consistent review step creates pull request currently checked feature branch master want time assume know need something different hand making commits branch run review nt push problem git reflow review title message basebranch note optional basebranch argument basebranch provided look reflowbasebranch git configuration fallback master default pas title message option review command given editor write pr request commit message similar git commit first line title rest body git reflow review review pr title body lib update review command address issue submit pull request enter git fetch origin master githubcom meesterdudegitreflow branch master fetchhead git push origin rjtest everything uptodate successfully created pull request rjtest pull request url http would like push branch remote repo cleanup feature branch enter output pull request url distribute team work behind scene review work git fetch origin uptodate change master fail master newer change git push origin currentbranch update remote branch pull request create print pull request created http pullurl print url existing request checking branch status git reflow status basebranch note basebranch provided look reflowbasebranch git configuration fallback master default sometimes start working branch ca nt get back happens use status check status work git reflow status status review branch reenhanced nhreadmeupdate reenhanced master number reviewed url http notice one reviewed pull request give detail reviewed pull request someone participated reviewed given approval tell status prevents open browser find pull request case want take look give option open delivering approved code git reflow deliver basebranch note basebranch argument provided look reflowbasebranch git configuration fallback master default also documentation process github remote merge process via githubapi bitbucket standard github manual process used user applies f force flag remote merge via githubapi please go section b kick butt got code reviewed ready merge master deploy reflow deliver command take care step make happen reflow deliver requires pull request protected morning coffee nt working yet built get way make follow process nt like hand already know presented prefilled commit message based body pull request reference pull request reviewer want clean feature branch afterwards prompted edit commit message want clean featurebranch github answer featurebranch exist clean later look like git reflow deliver status review branch master number reviewed codenamev url http current status pull request sure want deliver yes merging pull request last commit message master git checkout master switched branch master branch ahead originmaster commit use git push publish local commits success pull request successfully merged would like cleanup feature branch yes git pull origin master remote counting object done remote total delta reused delta packreused unpacking object done http branch master fetchhead master originmaster updating fastforward readmemd file changed insertion deletion git push origin http deleted git branch deleted branch nice job buddy work behind scene deliver pull request exist stop need run review review completed get approval everyone participated show list author need approve review done time merge happens first use githubapi gem merge pull request see notice squashmerge default customize merge method project next prompt want cleanup would like cleanup feature branch yes update basebranch delete featurebranch git pull origin basebranch git push origin featurebranch git branch featurebranch stop user clean branch locally process look like bitbucket force deliver git reflow deliver f githubcom reenhancedgitreflow branch master fetchhead merging pull request enforce least one lgtm delivery reenhanced nhfailwithoutlgtm reenhanced master already uptodate switched branch nhfailwithoutlgtm switched branch master updating squash commit updating head libgitreflowrb file changed insertion deletion master enforces lgtm deliver even comment file changed insertion deletion merge complete would like push branch remote repo cleanup feature branch counting object done delta compression using thread compressing object done writing object kib done total delta reused delta git githubcom reenhancedgitreflowgit master master git githubcom reenhancedgitreflowgit deleted nhfailwithoutlgtm deleted branch nhfailwithoutlgtm default commit message look like enforces lgtm deliver even comment remove need review pull request make comment better error message setup fails bug fix close lgtm given codenamev squashed commit following commit author nicholas hance nhance reenhancedcom date thu jul review done time merge happens first update local master nt get conflict git checkout master git pull origin master next merge feature branch case squashmerge git merge squash nhbranchname apply little magic great commit message default editor open see nice default commit message based pull request body git commit note use gitcommiteditmsg default populating see full list configuration change saved commit make sure want continue merge complete would like push branch remote repo cleanup feature branch guiding principle workflow resemble following already know assume know use git master branch codebase nt need multiple branch code want use master remain stable time entire team depends direct commits master work happens feature branch single commit hundred feature branch reviewed via pull request look good feature branch require approval check github approval look string lgtm comment pull request know ready merge make new commit branch require another review depending git config constantsminimumapprovals setting specify gitconfigreflow created upon reflow setup following minimumapprovals applied restriction participant pull request must approve pull request approval required merge pr need minimum lgtm last comment pr must lgtm need minimum lgtm last comment pr must lgtm approved featurebranch merged basebranch make history basebranch extremely clean easy follow git blame becomes friend know blame see full context change squash commits basebranch mean every commit represents whole feature typo fix configuration order streamline delivery set following git config always clean feature branch pr merged git config global add reflowalwayscleanup true always deliver without prompt git config global add reflowalwaysdeliver true see advanced usage way customize workflow customization gitreflow default process nt meant fit every team introduced custom workflow custom workflow add hook run command use one preconfigured workflow basis override default command create new command contributing pull request welcome please fork submit use tool every single day long want add nt change workflow happy accept update feel free add github username list author codenamev armyofgnomes nhance built reenhanced http wwwreenhancedcom looking capable team project get touch looking grow licensed using mit license whatever like nt blame u break anything professional responsible tool use
629,Lobsters,vcs,Git & VCS,How to use feature flags without technical debt,http://blog.launchdarkly.com/how-to-use-feature-flags-without-technical-debt/,use feature flag without technical debt,feature flag write new feature convention submit pull request code review flag status indicator way,feature flag pollute code bunch crufty ifthen branch clean later people often ask advice maintaining feature flag roll new code user one way approach issue cleaning old code path work pretty well team idea please let u know write new feature step one write new feature gated feature flag shortlived feature branch master call pkawesomexyzsupport ldclienttoggle tempawesomexyz user false dothenewthing else dotheoldthing next submit pull request change create second branch first call cleanupawesomexyz branch remove feature flag leaving new code convention couple naming convention used feature flag prefixed temp signal meant temporary flag intended cleaned point future different permanent flag like one relating maintenance mode cleanup branch named cleanup flagname signal intended clean flag useful scanning list branch later submit pull request submit first pull request feature branch targeting master pass code review merge deploy usual next submit second pull request merge satisfied everything good new code team review change front everyone mind use flag status indicator give indication safe merge cleanup branch user getting new variation way advantage managing cleanup way work remove flag context fresh mind point know piece get touched change easier sure forget something need merge master back cleanup branch periodically usually easier would recall context relating original change certainly way handle issue seems work pretty well team love hear team handle cleaning feature flag
631,Lobsters,vcs,Git & VCS,Introducing unlimited private repositories - Github,https://github.com/blog/2164-introducing-unlimited-private-repositories,introducing unlimited private repository github,personal organization sign individual developer organization upgrade unlimited private repository time better way work new plan personal organization get touch frequently asked question outside collaborator github force move peruser pricing month existing organization customer prefer perrepository plan remain current plan collaborator private repository personal plan,excited announce paid plan githubcom include unlimited private repository github always free public open source project starting today two way pay githubcom personal organization first five user one best thing git distributed version control system ability create new repository without asking permission getting approval always true public plan case individual team working together private change today new github sign start using unlimited private repository already using githubcom read learn change impact individual developer using github private project one paid private repository matter paying plan includes many repository need work project even invite collaborator next day automatically move paid account micro large new plan currently paying one larger plan look prorated credit account organization currently paying one organization plan option upgrade unlimited private repository time many change mean immediate freedom repository limit better way grow pay github want everyone plan unlimited private repository welcome stay current plan evaluate new cost structure understand best manage organization member private repository access currently enforcing timeline move rest assured least month notice mandated change plan better way work heard developer across community new model better way work year building business developing github seen first hand advantage working without private repository limit hope create repository write code keep amazing thing github always help take look new plan learn update personal organization plan get love hear frequently asked question must purchase seat user githubcom organization user fill seat organization member owner pending invitation outside collaborator access private repository user fill seat github force move peruser pricing month time enforcing timeline move future decide set timeline committing giving least month existing organization customer prefer perrepository plan remain current plan yes choose continue paying based number repository use also upgrade downgrade legacy repository structure based number repository need collaborator private repository personal plan yes paid personal account allows invite collaborator directly private repository need granular permission beyond full access organization plan recommended
632,Lobsters,vcs,Git & VCS,"BitKeeper: Enterprise-ready version control, now open-source",https://www.bitkeeper.org,bitkeeper enterpriseready version control opensource,bitkeeper,bitkeeper original distributed source management system available open source apache license bitkeeper fast enterpriseready distributed scm scale large project tiny one
634,Lobsters,vcs,Git & VCS,darcs 2.12.0 release,http://blog.darcs.net/2016/04/darcs-2120-release.html,darcs release,downloading new patch dependency graph export whatsnew output thirdparty vc frontend support reintroduced meld improvement git repository import repository weak hash,darcs team pleased announce release darcs downloading one way installing darcs stack stack install first install haskell platform http wwwhaskellorgplatform install darcs cabalinstall cabal update cabal install also download tarball http build hand branch also available darcs repository http new patch dependency graph export new command darcs show dependency enables export dependency graph repository latest tag default graphviz file whatsnew output thirdparty vc frontend support flag whatsnew machinereadable simplified version whatsnew easier parsability thirdparty tool darcs add conflict marker output whatnew summarized ie used machinereadable flag via darcs status alias thanks darcs support reintroduced meld improvement git repository import file move converted file move primitive instead file deletes add enables smaller darcs respositories understandable history change add improvement fix make git import practical repository weak hash command darcs show repo show hash xor hash patch metadata repository xor depend patch ordering also quite fast calculate weak hash useful quickly check whether two repository single proyect patch
635,Lobsters,vcs,Git & VCS,Human Git Aliases,http://gggritso.com/human-git-aliases,human git alias,human git alias stubbornly refusing speak computer language shell autocomplete work git unwieldy ui kasbah wrongsubreddit dotfiles repo,human git alias stubbornly refusing speak computer language common gitconfig see blank except setting username second common alias ci commit cia commit cam commit amend cama commit amend cl clean cldf clean df re reset resa reset head alias config basically trade space head keystroke save typing remembering short command alias love make typo sometimes get enough sleep generally going make life harder bending suit computer language computer learn mine care much short command shell autocomplete work instead use real word try make whole thing human goal git alias smooth git unwieldy ui make common workflow faster example git trying get list something repository insanely inconsistent fix like branch branch tag tag stash stash list common operation undoing work never want google unstage file ing command unstage file unstage reset q head discard checkout uncommit reset mixed head amend commit amend even nuclear version nevermind git reset hard head git clean f unstages change index discard change working directory remove new file also really like graph log graph branch remote tag formatformat cgreen h trunc cn cr cred dateorder see real timeline working another good example precommit diff cached diffalgorithmminimal w key part workflow run every commit make sure need use undo command bend alias think work way around let alias reflect value instead saving keystroke got great suggestion reddit comment post unmerged diff nameonly difffilteru kasbah remote remote v wrongsubreddit favourite thank full list git alias dotfiles repo
636,Lobsters,vcs,Git & VCS,Patch theory for dvcs. Also: Why do we continue to develop camp?,https://www.youtube.com/watch?v=iOGmwA5yBn0,patch theory dvcs also continue develop camp,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature continue develop camp youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature continue develop camp youtube
637,Lobsters,vcs,Git & VCS,How to recover lost files added to Git but not committed,http://blog.plover.com/2016/04/16/#git-reset-disaster,recover lost file added git committed,recover lost file added git committed day ago wrote command article category prog permanent link,recover lost file added git committed day ago wrote lose something git nt panic good chance find someone able hunt expecting demonstration ready soon today finished working project file staged index committed reason longer remember chose moment git reset hard throw away working tree staged file may thought committed change nt file working tree would nothing start git track working tree added file index file added git index git store repository later index committed git creates commit refers file already stored know look find stored file even part commit part commit problem much easier typically answer simply gitreflog find commit check gitreflog command probably first thing anyone learn path git beginner becoming intermediate git user file added git index stored git store object two way fetching lot object remote repository get big zip file attached table content called pack getting object pack pain fortunately object pack use gitadd add file index git make single object called object loose object basically file content gzipped header attached point git decide many loose object assemble pack make loose object file content file checksummed checksum used name object file repository identifier object exactly way git us checksum commit commit identifier checksum object stored pack file elsewhere gitobjectspack first thing get list loose object repository cd gitobjects find type f perl lpe tmpobj produce list object id loose object repository loose object repository goal find eight wanted several kind object git repository addition blob represent file content commit object represent commits tree object represent directory usually constructed time commit done since file nt committed knew nt interested type object command git catfile tell type object made file related object type cat tmpobj echo n git type done tmpobjtype git type command alias git catfile funny thing created alias year ago first started using git thinking would useful never used last week wondering still bothered around objtype file output loop look like blob tree commit tree tree blob grepped blob object grep blob tmpobjtype f tmpobjblob f command throw away type keep object id point filtered original object blob time grep blob find one looking fortunately knew lost file would contain string orgservicecurrency name project working could nt grep object file directly gzipped command git catfile disgorges content object cat tmpobjblob git catfile blob grep q orgservicecurr echo done tmpmatches git catfile blob produce content blob whose id grep search content magic string normally grep would print matching line behavior disabled q q tell grep instead used part test yield true find magic string false test run echo print object id grep yield true input contained magic string loop fill file match list id blob contain magic string worked found matching blob wrote similar loop extract content repository save directory cat tmpobjblob git catfile blob grep q orgservicecurr git catfile blob tmprescue done instead printing matching blob id number loop pass git catfile extract content file tmprescue rest simple made subdirectory tmprescue representing different file expecting find eyeballed blob decided one sorted subdirectory subdirectory blob looked blob subdirectory decide case one wanted keep using diff nt obvious difference two version file found one liked copied back correct place working tree finally went back working tree added committed rescued file seemed longer took twenty minute recreate eight file scratch might taken amount time maybe longer although never take long think would tedious let suppose taken much longer say forty minute instead twenty rescue lost blob repository would extra twenty minute time wasted twenty minute spent recreate file scratch dead loss forty minute rescue blob time spent learning something might useful future git rescue might cost twenty extra minute paid back forty minute additional git expertise time spent gain expertise well spent spending time gain expertise become expert git core tool something use every day long time prepared day would try rescue someone lost blob never done day come able say problem done lose something git nt panic good chance find someone able hunt article category prog permanent link
638,Lobsters,vcs,Git & VCS,GitHub Merge Button from CLI,http://blog.librato.com/posts/github-merge-cli,github merge button cli,,solarwinds worldwide llc right reserved
640,Lobsters,vcs,Git & VCS,Force push with care,https://robots.thoughtbot.com/git-push-force-with-lease,force push care,,
641,Lobsters,vcs,Git & VCS,Github Organizations can now block abusive users,https://github.com/blog/2146-organizations-can-now-block-abusive-users,github organization block abusive user,community documentation article,community one important aspect open source sometimes bad actor ruin experience group help address problem organization owner ability block abusive user public repository feature allows project owner block user prevents blocked user opening commenting issue pull request forking repository adding editing wiki page record blocked activity available organization audit log reference learn encouraging positive contribution organization read community documentation article
643,Lobsters,vcs,Git & VCS,GitHub introduces GPG signature verification,https://github.com/blog/2144-gpg-signature-verification,github introduces gpg signature verification,git support signing commits tag gpg key setting page gpg documentation article,building software people around world sometimes important validate commits tag coming identified source git support signing commits tag gpg starting today github show commits tag signed view signed commit tag see badge indicating signature could verified using contributor gpg key uploaded github upload gpg key visiting key setting page many open source project company want sure commit verified source gpg signature verification commits tag make easy see commit tag signed verified key github know learn generate gpg key start signing work read gpg documentation article
644,Lobsters,vcs,Git & VCS,Introducing DGit,http://githubengineering.com/introducing-dgit/,introducing dgit,click redirected,click redirected
645,Lobsters,vcs,Git & VCS,Squash your commits,https://github.com/blog/2141-squash-your-commits,squash commits,merge commits enter commit squashing changing allow merge commits commit squashing allow merge commits allow squash commits documentation get touch,git flexibility allows shape workflow however like organization git history one choice make merge button github created merge commits resulting style history necessarily match workflow merge commits year merge button github created merge commits ie git merge noff retain commits branch interleaf commits base branch result merge commit visually complex accurate log depicts change feature branch came base branch look like today enter commit squashing commit squashing benefit keeping git history tidy easier digest alternative created merge commits merge commits retain commits like oops missed spot maybe fix test round squashing retains change omits individual commits history many people prefer workflow workinprogress commits helpful working feature branch necessarily important retain looking history base branch squashing merge look like changing repository administrator option choose deciding handle history allow merge commits commit squashing option leave decision create merge commit squash user merging let repository administrator stay flexible deciding whether retain history feature branch allow merge commits default behavior exactly merge button worked change collaborator option squash commits via merge button allow squash commits new option let force commit squashing pull request merged via merge button check documentation get touch question feedback enjoy
646,Lobsters,vcs,Git & VCS,Git v2.8.0 Released,https://lkml.org/lkml/2016/3/28/436,git released,http wwwkernelorgpubsoftwarescmgit http kernelgooglesourcecompubscmgitgit http githubcomgitstergit,message threadfromjunio c hamano subject announce git mar latest feature release git available theusual place comprised nonmerge commits contributed people new facesthe tarballs found http wwwkernelorgpubsoftwarescmgitthe following public repository copy master branch tag point url http kernelgooglesourcecompubscmgitgit url git repoorczaltgitgit url git gitsourceforgejpgitrootgitcoregitgit url git gitcoregitsourceforgenetgitrootgitcoregitcore url http githubcomgitstergitnew contributor whose contribution nt followswelcome git development community 마누엘 adam dinwoodie andrew wheeler changwoo ryu christoph egger christoph hoopmann dan aloni dave ware david wheeler dickson wong felipe gonçalves assis gyuyong jung jon griffith kazutoshi satoda lars vogel martin amdisen matthew kraai paul wagland rob mayoff romain picard vasco almeida victor leschukreturning contributor helped release followsthanks continued support alexander kuleshov alexander shopov alex henrie audric schiltknecht brian carlson carlos martín nieto christian couder david greene david turner dennis kaarsemaker dimitriy ryazantcev edmundo carmona antoranz elia pinto eric sunshine eric wong guillermo romero jacob keller jeannoel avila jeff king jiang xin johannes schindelin johannes sixt john keeping jonathan nieder junio c hamano karsten blees karthik nayak knut franke lars schneider matthieu moy matt mccutchen michael j gruber mike hommey nguyễn thái ngọc duy øyvind holm patrick steinhardt pat thoyts peter krefting ralf thielow ray chen sebastian schuberth shawn pearce stefan beller stephen p smith szeder gábor thomas ackermann thomas braun thomas gummerer tobias klauser torsten bögershausen trần ngọc quân palmer git release notesbackward compatibility note rsync transport removedupdates since ui workflow feature turn git clone rsync transport broken source repository packed reference long time nobody noticed complained push learned delete option shortened like branch delete branch thing git blame learned produce progress eyecandy take much time emitting first line result git grep configured told command line many thread use searching working tree file git note operation eg git log note note able read note treeish shaped like note tree note infrastructure required argument must ref refsnotes loosen require valid ref operation would update note case must place store updated note tree iow ref git grep default fall back noindex behavior outside directory git control otherwise user may mistake end running huge recursive search new configuration set homegitconfig definition set config file per project safety disabled git pull rebase extended allow invoking rebase git learned cope type file getting changed git formatpatch learned notice formatoutputdirectory configuration variable allows dir option omitted command line always use directory workflow interprettrailers taught optionally update file place instead always writing result standard output many command read file expected contain text generated edited end user control behavior eg git grep f filename updated tolerant line terminated crlf used treat line contain payload end cr usually user expect git note merge used limit source merged note tree somewhere refsnotes hierarchy limiting inventing workflow exchange note remote repository using remotetracking note tree located eg refsremotenotes somesuch git lsfiles learned new eol option help diagnose endofline problem lsremote learned option show branch remote repository advertises primary pointing head new httpproxyauthmethod configuration variable used specify authentication method use way work around proxy give error response expected libcurl curlauthany used also codepath proxy authentication taught use credential api store authentication material user keyrings update untracked cache subsystem change primary ui git updateindex git config thing progress message tcp connection code triggered setting verbose option internally code git fetch v friend never passed verbose option codepath cleansmudge filter defined configuration file lower precedence overridden passthrough noop setting variable empty string new branch pattern notation used name commit reachable branch match given pattern useruseconfigonly configuration variable used force user always set useremail username configuration variable serving reminder work multiple project want put homegitconfig git fetch friend make network connection told use authentication method need username password libcurl need hint need perform authentication supplying empty username password string valid way set http url emptyauth configuration variable achieve find cleaner set http url pinnedpubkey specify pinned public key building recent enough version libcurl configuration system taught phrase found bad configuration variable better way error message git config learnt new showorigin option indicate value come credentialcache daemon process used run whatever directory happened start made umount ing filesystem house repository harder process chdir directory house socket startup git submodule update result fetching commit object submodule referenced superproject command learned retry another fetch specifically asking commit may connected ref usually fetch git mergerecursive learned norenames option disable rename detection logic across transition around git version user used get pretty loud warning running git push without setting pushdefault configuration variable longer warn transition completed long time ago readme renamed readmemd content got tweaked slightly make easier eyesperformance internal implementation development support etc add framework spawn group process parallel use run git fetch recursesubmodules parallel slight update makefile mark phony target correctly incore storage reverse index pack file let go pack offset object name streamlined setup set env gitworktree work tree set like gitdir attempted work around glitch alias handling overwriting gitworktree environment variable affect subprocesses setgitworktree get called resulted rather unpleasant regression clone init try address issue always restoring environment respawning real underlying command handling alias lowlevel code used create symbolic reference updated share code code deal normal reference strbufgetline friend redefined make easier identify callsite new strbufgetlinelf allow silently ignore carriagereturn end line help user dossy system git shortlog used accumulate various piece information regardless asked shown final output optimized noticing need collected eg need collect log message showing number change git checkout branch operation share underlying machinery optimized automated test travis ci environment optimized persisting runtime statistic previous prove run executing test take longer one reduces total wallclock time test script updated remove assumption portable git posix git window skip one expectation satisfiable git window call strcpy trigger false warning static analyzer le intelligent human reducing number false hit help u notice real issue call strcpy couple protrams already safe rewritten avoid false warning namepath api attempt reduce need construct full path series path component walking tree hierarchy time made le efficient path need flattened eg compared another path already flat api removed user rewritten simplify overall code complexity help debug http part system merge spremotecurlsslstrerror later maint internal api interact remote configuration variable streamlined reffilter formatparsing code refactored preparation branch format friend traditionally test try command work content working tree named worktree filename recent addition git worktree subcommand whose test also named similarly become harder tell apart traditional test renamed use worktree instead attempt differentiate merge mgworktreetests later maint many codepaths forget check return value gitconfigset function made die make sure proceed setting configuration variable failed merge psconfigerror later maint handling error writing internal asynchronous process made robust reduces flakiness test merge jkepipeinasync later maint new developer knob enables many compiler warning option makefile way test script configure apache web server updated work also apache running redhat derived distros maintenance gcc osx fails compile code master work around using clang default platform namepath api attempt reduce need construct full path series path component walking tree hierarchy time made le efficient path need flattened eg compared another path already flat many case api removed user rewritten simplify overall code complexity incidentally also close heapcorruption hole recent version gnu grep pickier decide file binary refuse give lineoriented hit expect unless explicitly told option scripted porcelain use sanegrep wrapper lineoriented data even line may contain nonascii payload took enduser data use grep implement sanegrep wrapper using implementation grep take optionalso contains various documentation update code cleanupsfixes since unless otherwise noted fix since maintenancetrack contained release see maintenance releasesnotes detail earlier change broke user hook alias exporting gitworktree point root working tree interfering tried use different working tree without setting gitworktree environment excludelist structure usual alloc nr pair field used allocgrow clearexcludelist forgot reset alloc cleared nr discard managed array path told index add n quite yet index command behaved already harmful way git sendemail confused escaped quote stored alias file saved mutt corrected nonportable c construct spotted clang compiler fixed documentation updated hint connection signoff option dco git reflog incorrectly assumed object used tip ref must commits caused segfault ignore mechanism saw regression around untracked file listing sparse checkout selection area change responsible regression reverted codepaths used fopen opening fixed path gitdir eg commiteditmsg meant left command done however work well repository set shared coresharedrepository umask previous user tighter made work better calling unlink retrying fopen fails eperm asking gitweb nonexistent commit left warning server log somebody may want follow additional test perhaps iirc test perl warning given server log caught test coverage good git rebase unlike caller gc auto ignore exit code gc auto many codepaths run gc auto exiting kept packfiles mapped left file descriptor open friendly system remove file open close pack recent optimization filterbranch introduced regression pruneempty filter used corrected description sanity prerequisite test suite us clarified comment implementation git tag started listing tag foo tagsfoo branch named foo exists repository remove unnecessary disambiguation regression introduced way git svn us auth parameter broken subversion later split subcommand git subtree contrib incorrectly skipped merges nt corrected option git diff work well command run subdirectory command line completion learned handful additional option command specific syntax dirname emulation added lack underlying machinery used lsfiles command taught create empty submodule ref cache directory submodule remove ton wasted cpu cycle git worktree broken code attempted autofix possible inconsistency result endusers moving worktree different place without telling git original repository need maintain backpointers worktrees mv run endusers familiar fact obviously adjust actually made thing worse triggered lowlevel merge machinery taught use crlf line termination inserting conflict marker merged content crlf lineterminated git push forcewithlease taught report push needed force fastforwarded emulated yes command used test script tweaked spend much time generating unnecessary output used help test window would stop fill pipe buffer due lack sigpipe documentation git clean corrected mentioned gitmodules removed giving two f never case vimdiff backend git mergetool tweaked arrange number buffer order would match expectation majority people read left right top assign buffer mentally local base remote merge window based order git show head foo bar baz interpret argument rev ie object named pathname wildcard character tree object merge nddwimwildcardsaspathspecs later maint git revparse gitcommondir used worktree feature misbehaved run subdirectory merge ndgitcommondirfix later maint git worktree add b branchname work v iew subcommand interactive git command broken timeframe command rewritten c merge jcamivfix later maint git mergetree used mishandle side added conflict create fake ancestor file common part side added merge logic updated use usual merge empty blob fake common ancestor file approach used rest system merge jknodiffemitcommon later maint memory ownership rule filltextconv api bit tricky documented bit better merge jkmorecommentsontextconv later maint update various codepaths avoid manuallycounted malloc merge jktightenalloc later maint documentation clearly state simple mode default git push pushdefault configuration set merge mmpushsimpledoc later maint recent version gnu grep pickier input contains arbitrary binary data test us rewrite test sidestep problem merge jkgrepbinaryworkaroundintest later maint helper function git submodule us since list module match pathspec argument given subcommands eg submodule add repo path fixed merge sbsubmodulemodulelistfix later maint git config sectionvar value set value perrepository configuration file failed run outside repository nt say reason correctly merge jsconfigsetinnonrepository later maint code read pack data using offset stored pack idx file made carefully check validity data idx merge jkpackidxcorruptionsafety later maint minor cleanup documentation update merge later maint merge akgitstripextensionfromdashedcommand later maint merge psplugxdlmergeleak later maint merge dtinitialrefxncommitdoc later maint merge maupdatehookssampletypofix later maint change since follows adam dinwoodie test specifying full url git svn init talex henrie stripspace call space instead blank capo update translationalexander kuleshov formatpatch introduce formatoutputdirectory configuration execcmdc use findlastdirsep code simplification gitc simplify stripping extension file handlebuiltin alexander shopov gitk update bulgarian translation andrew wheeler push fix ref status reporting forcewithleaseaudric schiltknecht frpo correct case sentencecarlos martín nieto disown sshgit gitsshchangwoo ryu kopo add korean translation kopo update korean translation ko update korean translation kopo update korean translationchristian couder dir free untracked cache removing updateindex use enum untracked cache option updateindex add testuntrackedcache updateindex add untracked cache notification updateindex move uc var declaration dir add new add untrackedcache dir add removeuntrackedcache dir simplify untracked cache ident field config add coreuntrackedcache testdumpuntrackedcache nt modify untracked cache add test coreuntrackedcachechristoph egger http implement public key pinningchristoph hoopmann depo fix typodan aloni ident add useruseconfigonly boolean ident nt guesseddave ware contribsubtree fix subtree split skippedmerge bugdavid greene contribsubtree make testing easierdavid wheeler expand documentation describing signoffdavid turner docompareentry use alreadycomputed path unpacktrees fix accidentally quadratic behavior ref document transaction semanticsdennis kaarsemaker reflogwalk nt segfault noncommit reflogdickson wong mergetool reorder vimgvim buffer threeway diffsdimitriy ryazantcev rupo update russian translation rupo update russian translation rupo update russian translationedmundo carmona antoranz blame add support progress optionelia pinto makefile add missing phony target contribexamplesgitcommitsh use construct command substitution contribexamplesgitfetchsh use construct command substitution contribexamplesgitmergesh use construct command substitution contribexamplesgitrepacksh use construct command substitution contribexamplesgitrevertsh use construct command substitution contribthunderbirdpatchinlineapppsh use construct command substitution gitguipoglossarytxttopotsh use construct command substitution tlibhttpdsh use construct command substitution use construct command substitution unimplementedsh use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution use construct command substitution browsesh use construct command substitutioneric sunshine gitcompatutil work around gcc compiler crash revert configmakuname use clang mac o x eric wong gitsendemail doubleescape quote mutt foreachref document creatordate creator field gitsvn fix auth parameter handling svn pas transport verbosity gitconnect connect http support switch remote operation add test git clone fetch pull v gitsvn hoist prep libgitsvn test remove noop fullsvntest target gitsvn shorten glob error message gitsvn fix url canonicalization init w svn gonçalves assis mergerecursive option disable renames mergerecursive consistent interface mergestrategiestxt fix typo mergerecursive findrenames reset threshold add rename threshold test test option disable renames test deprecated interfaceguillermo romero gitk follow themed bgcolor help dialogsgyuyong jung gitcvsserverperl fix typojacob keller note allow merging arbitrary referencesjeannoel avila frpo round frpo round frpo round gitk update french translation gitk frpo sync translation gitjeff king packrevindex drop hash table packrevindex store entry directly packedgit createsymref modernize variable name createsymref use existing reflock code createsymref write reflog holding lock runcommand nt warn sigpipe death avoid shifting signed integer bit bswap add nounalignedloads define checkout clone check return value createsymref always fill oldoid holding lock handle refnoderef invalid ref rebase ignore failure gc auto shortlog match author author stdin shortlog use strbufs read stdin shortlog replace handparsing author prettyprinter shortlog optimize summary mode shortlog optimize useless none normalization shortlog optimize useless string list shortlog nt warn empty author filterbranch resolve commit tree noindex case clean make isgitrepository public function resolvegitlinkref ignore nonrepository path use testatom unmodern test tag show ambiguous tag name tagsfoo transport drop support gitoverrsync give nbuf strbuf meaningful name checkoutindex simplify z option parsing checkoutindex handle noprefix option checkoutindex handle noindex option checkoutindex disallow nostage option apply lsfiles simplify z parsing fmtident refactor strictness check testpathutils use xsnprintf favor strcpy rerere replace strcpy xsnprintf checkout reorder checkfilename conditional checkfilename tighten dwimwildcard ambiguity nt die bogus search string httppush stop using namepath showobjectwithname simplify using pathname listobjects convert namepath strbuf listobjects drop namepath entirely listobjects pas full pathname callback gitconfig better document default behavior include reffilter use stringlistsplit strbufsplit reflogexpirecfg nulterminate pattern field add helper detecting sizet overflow treediff catch integer overflow combinediffpath allocation diff clarify textconv interface harden reallocarray xcalloc sizet overflow add helper allocating flexarray structs argvarray add detach function convert manual allocation argvarray convert trivial case allocarray use xmallocz avoid size arithmetic convert trivial case flexarray macro use stadd stmult allocation size computation prepare git shell cmd use argvarray writeuntrackedextension use flexalloc helper fastimport simplify allocation startpackfile fetchpack simplify addsoughtentry testpathutils fix normalizepathcopy output buffer size sequencer simplify memory allocation getmessage gitcompatutil drop mempcpy compat code transportanonymizeurl use xstrfmt diffpopulategitlink use strbuf convert ewahbitmap code use xmalloc ewah convert reallocarray etc mergeonefile use empty blob addadd base mergetree drop generatecommon strategy xdiff drop xdlemitcommon test boundschecks corruptedmalicious packidx file nthpackedobjectoffset boundscheck extended offset usepack handle signed offt overflow writeordie handle epipe async thread fetchpack ignore sigpipe sideband demuxer testmustfail report number unexpected signal handle expected output sigpipe death compatmingw brown paper bag fix fix test perl older treediff catch integer overflow combinediffpath allocation httppush stop using namepath add helper detecting sizet overflow showobjectwithname simplify using pathname listobjects convert namepath strbuf listobjects drop namepath entirely listobjects pas full pathname callbacksjiang xin gitpot round new removed http honor nohttp env variable bypass proxy zhcn git round gitpot round new removed zhcn git round gitpot add one new message git zhcn git round schindelin commit allow editing commit message even shared repos handle file writes correctly shared repos refactor skipping do drive prefix compatbasename make basename conform posix compatbasenamec provide dirname compatibility function verify basename dirname work expected configmakuname support configmakuname supporting fetch release pack file garbagecollecting release pack file garbagecollecting merge release pack file garbagecollecting receivepack release pack file garbagecollecting pull allow interactive rebase rebaseinteractive remote handle config setting branch rebaseinteractive completion add missing branch rebase value nedmalloc allow compiling compiler compatmingw support mingw build compatwinansi support compiling loosen overly strict expectation mingw avoid redefining constant mingw avoid warning casting handle int mingw squash another warning cast mingw uglify definition shut warning mingw let use gettext mingw trust mingw gettextsh gitpm stop assuming absolute path start slash mingw prepare tmpdir environment variable shell script mingw let lstat fail errno enotdir appropriate mergefile let conflict marker match endofline style context mergefile ensure conflict section match eol style mingw fix mingw accomodate mingw disable mkfifobased test test turn gitdaemon test fifo available mingw skip test fails due path conversion mingw fix assumption directory separator mingw work around pwd issue test mingw mark test case appropriate prereqs mingw avoid illegal filename mingw handle missing posixperm prereq mingw skip test pas window mingw bother test funny file name testlib limit output yes utility gitignore ignore generated testfakessh executable remote add x work urlyinsteadof x git config report trying modify nonexisting repo config mark pthreadexit noreturn config showorigin report path forward slash make resilient run via sh x fix new showorigin test window mingw skip test due file name issuesjohannes sixt need use echo command substitution globbing mingw avoid linking c library isalpha fix git environment variable check valgrindjohn keeping completion add missing gitrebase option avoid grep nonascii data avoid grep nonascii datajon griffith credentialcache daemon refactor checksocketdirectory credentialcache daemon disallow relative socket path credentialcache daemon change socket dir startupjonathan nieder submodulec write fetching submodule foo stderrjunio c hamano first batch post cycle strbuf miniscule style fix strbuf make strbufgetlinecrlf global strbuf introduce strbufgetline lf nul mktree two possible line termination checkattr two possible line termination checkignore two possible line termination updateindex two possible line termination checkoutindex two possible line termination strbuf give strbufgetline text friendly variant hashobject read stdinpaths strbufgetline revision read stdin strbufgetline revparse read parseopt spec strbufgetline identc read etcmailname strbufgetline remotec read gitdirremotes strbufgetline read infoalternates strbufgetline transporthelper read helper response strbufgetline catfile read batch stream strbufgetline column read line strbufgetline sendpack read list ref strbufgetline grep read f file strbufgetline read command stream strbufgetline testlib clarify tighten sanity second batch cycle third batch cycle git remove early return saveenvbeforealias git protect unbalanced call save restore env git simplify environment saverestore logic fourth batch getting closer restoreenv free saved environment variable done fifth batch cycle git sixth batch cycle pager lose separate argv pager factor helper prepare child process run pager fix v iew start preparing seventh batch cycle git eighth batch git git gitignore document unignoring directory unignores everything git git sanegrep pas grep accepts rebasei clarify commit relevant test relnotes typofix git git git git git revert merge branch jcexclusiondoc revert merge branch ndexclusionregressionfix relnotes remove mention reinclusion git git blees mingw factor window specific environment setupkarthik nayak reffilter bump usedatom related code top reffilter introduce struct usedatom reffilter introduce parsing function valid atom reffilter introduce coloratomparser reffilter introduce parsealignposition reffilter introduce alignatomparser reffilter align introduce longform syntax reffilter introduce remoterefatomparser reffilter introduce contentsatomparser reffilter introduce objectnameatomparser kazutoshi satoda gitsvn enable svnpathnameencoding dcommit gitsvn apply svnpathnameencoding url encodingknut franke http allow selection proxy authentication method http use credential api handle proxy authenticationlars schneider travisci run previously failed test first slowest fastest travisci explicity use containerbased infrastructure convert treat empty string cleansmudge filter cat hide git exit code test using nultoq rename gitconfigfrombuf gitconfigfrommem config add origintype configsource struct config add showorigin option print origin config value add developer makefile knob check acknowledged warning documentation use ascii quotation mark documentation fix asciidoc formattinglars vogel gitadd doc say working directory mean working treemartin amdisen templateshooks fix minor typo sample updatehookmatt mccutchen documentationgitcleantxt nt mention deletion gitmodules matthew kraai documentation remove unnecessary backslashesmatthieu moy documentationgitpush document simple default readme use markdown syntax readmemd add hyperlink filename readmemd move link gitscmcom readmemd nt call git stupid title readmemd move historical explanation name push remove pushdefault unset warning message documentation fix broken linkgit gitconfigmichael j gruber fix breakage shellpath binsh test rename worktree test worktree tlibhttpd load modunixd leave changed cwd wtstatus allow ahead picked hommey note allow treeish expression note refnguyễn thái ngọc duy blame remove obsolete comment add use convenience macro ceintenttoadd revert setup set env gitworktree work tree set like gitdir gitc make clear saveenv alias handling setupc refix setup set env gitworktree gitc make sure leak git alias script grep make clear ita entry ignored dirc clean entire struct clearexcludelist revert dirc nt exclude whole dir prematurely neg pattern may match worktreec fix indentation diffnoindex take redundant prefix argument diff make output work subdirectory worktree stop supporting moving worktrees manually revparse take prefix account gitcommondir dirc fix matchpathname dirc support tracing exclude dirc support marking pattern already matched dirc nt exclude whole dir prematurely worktree fix add b worktree add b checkout test update branch mark string translation builtincheckoutc mark string translation builtinclonec mark string translation reffilterc mark string translation trailerc mark string translationpat thoyts avoid absolute pathpatrick steinhardt push add delete flag synopsis push add shorthand delete config introduce setordie wrapper branch report error tracking branch setup branch die config error unsetting upstream branch die config error editing branch description submodule die config error linking module submodule helper die config error cloning module remote die config error setting url remote die config error settingadding branch remote die config error manipulating remote clone die config error cmdclone initdb die config error initializing empty repo sequencer die config error saving replay opts compat die unable set coreprecomposeunicode config rename gitconfigset gitconfigsetgently config rename gitconfigsetordie gitconfigset xdiffxmerge fix memory leak xdlmergepaul wagland completion complete showbranch dateorder completion update completion argument stashpeter krefting svpo fix inconsistent translation progress meter svpo update swedish translation svpo update swedish translation ralf thielow team update ralf thielow email address depo add space abbreviation z b depo fix interactive rebase message depo translate command befehl depo translate new message depo translate new message depo add missing newlines gitk update german translationray chen zhcn review git round mayoff contribsubtree unwrap tag refsromain picard add support filetype changeszeder gábor make failing editor test robust completion fix misindentation gitstash sebastian schuberth doc clarify passing depth gitclone implies singlebranch doc say commits depth option wording gitclone doc clarify depth gitfetch work newly initialized reposshawn pearce remotecurl include curlerrorstr ssl setup failuresstefan beller xread poll non blocking fds strbuf add strbufreadonce read without blocking sigchain add command pop common signal runcommand add asynchronous parallel child processor fetchpopulatedsubmodules use new parallel job processing submodules allow parallel fetching add test documentation submodule helper list respect correct path prefix submodule try harder fetch needed direct fetching runcommand pas child process data callback documentation reword rebase summary submodule fix regression deinit without submodulesstephen p smith usermanual remove temporary branch entry todo list glossary define term shallow clone usermanual add section documenting shallow clone usermanual add addition gitweb informationthomas ackermann documentation fix typosthomas braun completion complete diff worddiffregex thomas gummerer correct noindex test builtingrep add grepfallbacktonoindex config lsremote document quiet option lsremote document ref option lsremote fix synopsis lsremote use parseoptions api lsremote add support showing symrefs remote use parseconfigkey remote simplify remoteisconfigured remote actually check remote exit remote use remoteisconfigured add renametobias klauser trailer allow write file stdout interprettrailers add option inplace editingtorsten bögershausen lsfiles add eol diagnostics add test getstreamfilter convertc remove unused parameter path convertc remove inputcrlfaction convertc use texteoliscrlf convertc refactor crlfaction convertc simplify textstat convertc correct attraction configmakuname use clang mac o x ngọc quân vipo updated vietnamese translation vipo update translationvasco almeida ptpt update add new translationsvictor leschuk grep allow threading even singlecore machine grep slight refactoring code disables threading grep add thread num option grepthreads configuration gitsvn loosen config glob limitationswill palmer test handling revparse named commits object name introduce negative pattern notationbrian carlson http add option try authentication without usernameøyvind holm gitweb squelch uninitialized value warning마누엘 mingw try delete target directory renaming
649,Lobsters,vcs,Git & VCS,Mercurial security release,https://www.mercurial-scm.org/wiki/WhatsNew#Mercurial_3.7.3_.282016-3-29.29,mercurial security release,release note download timebasedreleaseplan upgrade note upgrading archive mercurial overview new feature mercurial extension unsorted mercurial command core unsorted mercurial overview new feature mercurial unsorted mercurial command extension unsorted mercurial overview new feature mercurial overview new feature backwards compatibility change api change command core extension unsorted behavior change internal api change mercurial extension test mercurial command core test mercurial overview new feature command core extension unsorted behavior change internal api change mercurial command unsorted mercurial command unsorted mercurial overview new feature mercurial command extension unsorted mercurial overview new feature security command core extension unsorted behavior change internal api change mercurial command core extension unsorted mercurial command core extension unsorted mercurial overview new feature command core extension hgweb chg unsorted behavior change internal api change mercurial security core unsorted mercurial command core hgweb performance mercurial full release note,release note feature bugfixes latest release please see download page link source binary note mercurial follows timebased release plan major release every three month minor bugfix release first every month see timebasedreleaseplan sure read upgrade note upgrading see archive older version mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release extension unsorted mercurial regularly scheduled bug fix release command graftstate save base graft state fixing bug graft continue graft fix base value saved state file core unsorted bashcompletion use aliased hg source script demandimport fix compatibility meta path finder wo findspec method flag read flag dirstatedisk workingcopyctx fsmonitor coerce clock variable bytestring url fix byte v str crash processing proxy header mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bug fix release unsorted mercurial regularly scheduled bug fix release command branch make force work even specifying rev import nt ignore secret bypass specified extension shelve fix ordering merge label unsorted mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release backwards compatibility change infinitepush extension believed unused deleted hg grep search working copy file content default recognize significant change past behavior survey large body user indicated nobody used almost nobody understood previous noflags behavior hg grep new behavior aligns behavior user expected including hg maintainer also happens behavior git grep given old behavior confusing point unusable comfortable changing behavior api change mercurialhgupdate mercurialmergeupdate expect value set namedconstants mergeupdatecheck constant rather collection magic string value code prepared value change future mercurialhgupdatetotally thorough checking mercurialbookmarksbmstore longer convenience method looking changectx instance bookmark name use repo repobookmarks name intead repobookmarkschangectx name command amend add option update current user amend enable support closing branch amend enable support using secret phase bookmark actual fix race condition deleting bookmark bookmark remove changectx method bmstore api branchmap explicitly warmwrite subset branchmap cache import add debug message parsing data patch header import read xmercurialnode email header determine nodeid log populate keywords specified custom tjson tcbor merge replace magic string namedconstants api push support config option require rev specified running push core extension eol nt fallback use hgeol tip bc largefiles use context manager setting lfstatus subrepos rebase track new node keep set unshelve abort using keep interactive together unshelve add abort using continue interactive together unshelve change date set interactive mode unshelve create matcher required creating unshelve ctx unshelve delete shelvedstate successful unshelve continue unshelve forget unknown file partial unshelve unshelve handle stripping changesets interactive mode unshelve store information interactive mode shelvedstate unshelve unify logic around creating unshelve changeset unsorted automation add command submit try server automation support use debian buster default changelog make copy related function return none valid value continue added support transplant copy remove existing copy info changeset amend bc demandimport explicitly declare session module level discovery replace head changesets output note bc fastannotate remove support flock locking fix warn fixer nt configured command flagprocessors deprecate processflags flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api format format commandspy recently regressed grep enable allfiles default bc hg updatetotally thoroughly check updatecheck argument api infinitepush mark extension likely deleted narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc notify add option deterministic messageid generation prevent comparison none curse histedit pythonzstandard apply bigendian fix remotefilelog reduce probability racecondition remotefilelog test rustdirstatestatus add call rustfast path dirstatestatus rustdirstatestatus rustcpython binding dirstatestatus rustdirstatestatus use fastpath even fsmonitor sparse extension rustdiscovery optionally nt randomize test sidedata introduce new requirement protect feature split handle partial commit renames split record sshserver flush stream command dispatch test allow different result zstd compression transplant added support stop flag uncommit add option update current user current date uncommit add support modify commit message date uncommit drop hyphen currentuser currentdate uncommit enable support adding note uncommit make date u user mutually exclusive behavior change copy remove existing copy info changeset amend bc discovery replace head changesets output note bc eol nt fallback use hgeol tip bc grep enable allfiles default bc narrow nt hexify path doublehexify known node wire bc narrow drop server support widening using getbundle command bc templatefuncs account user diffopts diff bc internal api change bookmark remove changectx method bmstore api exchange avoid unnecessary conversion bookmark node hex api flagprocessors read transform function return side data api flagprocessors writetransform function take side data parameter api flagutil move revidxknownflags source truth flagutil api flagutil move addflagprocessor new module api flagutil move insertflagprocessor new module api hg updatetotally thoroughly check updatecheck argument api merge replace magic string namedconstants api mercurial regularly scheduled bug fix release extension phabricator nt abort property writing fails amending test mercurial regularly scheduled bug fix release command bookmark actual fix race condition deleting bookmark core test mercurial regularly scheduled feature release overview new feature available regularlyscheduled quarterly feature release command bookmark also make bookmark cache depends changelog bookmark actual fix race condition deleting bookmark bookmark actually trigger race deleting bookmark test bookmark backout attempt fix delete race bookmark keep bookmark hgstore new config set bookmark use context manager writing file bookmark use correct store ambiguity check branch abort closing branch nonbranchhead cset branchcache store maximum tip variable inside loop command drop support legacy cmd registration api commit add forceclosebranch flag close nonhead changeset commit add check trying close already closed branch head commit add ability print file status successful invocation commit allow interactive work naming directory commit improve file field changelog merges commit make error message specific aborting branch closing commit respect noedit combination amend graft moved abortgraft readgraft cmdutil help check subtopic exists raise error nt log add config making hg log g always toposorted log flag toposorted set log pas getcopies function instead getrenamed displayer api merge disallow merge abort case unfinished operation patch use short fixedsize message last line prompt push added clear warning message pushing closed branch tag avoid doublereversing list verify also check full manifest validity verify run verify introduce notion level verify introduce experimental full flag core extension unsorted abort added support graft abort added support histedit abort added support merge abort added support rebase abort added support unshelve automation initial support running linux test bisect crash rewritten commits blackbox disable extremely verbose logging catapipe add support counter event changelog define changelogrevisionp copy null revision changelog fix handling empty copy entry changeset changelog optionally store added removed file changeset extra continue added support rebase continue added support unshelve copy filter invalid copy end pathcopies copy follow copy across merge base without source file debugrevlog fix average size computation empty data drawdag nt crash writing copy info changesets extdata avoid crashing inside subprocess get revset parse error extension drop support extsetup without ui argument api filemerge make last line prompt english char graphmod remove support graph line mixing parentgrandparent style bc manifest avoid corruption dropping removed file pure match remove unused matchiter implementation api match use instead root directory api procutil allow caller runbgcommand assume process start remotefilelog check rfl enabled getrenamedfn override remotefilelog handle copy changesets getrenamedfn override remotefilelog log fetch file remotefilelog tell runbgcommand block child process startup root add support tformatter option sslutil add support sslkeylogfile wrapsocket sslutil fsencode path returned certifi statecheck added support state subrepos make last line prompt english char test make grep pattern remotefileloggcrepack portable test work around libressl different error string tracing add support emitting counter worker support parallelization function return value zsh enable completion support chg well behavior change graphmod remove support graph line mixing parentgrandparent style bc internal api change mercurial regularly scheduled bugfix release command help fix hg mv hg cp unsorted mercurial regularly scheduled bugfix release command unsorted mercurial overview new feature available regularlyscheduled quarterly feature release mercurial regularly scheduled bugfix release late due vacation similar disruption regular time command extension rebase add missing dash help text unsorted mercurial overview new feature available regularlyscheduled quarterly feature release also contains security fix security possible use symlinks subrepositories defeat mercurial pathchecking logic write file outside repository fixed user older version either disable subrepositories subrepos allowedfalse configuration ensuring cloned repository nt contain malicious symlinks command archive use manifestmatches simplify speed matching branch allow changing branch merge commits rev branch add r option show branch name given rev graft abort dateuser specified currentdatecurrentuser bc graft introduce base option using custom base revision merging help add internalsextensions topic help show advanced experimental deprecated extension verbose log fix line wrap diffstat g graph merge make local file storage hgmerge directory extensible pull fix inconsistent view bookmark pull push add publish flag change phase pushed changesets push config option control behavior pushing publishing server resolve fix markcheck file deleted one side tag cache repochangelog access checking tag node update fix edgecase updateatomicfile readonly file core revlog always enable generaldelta version revlogs revlog make sure never use sparserevlog without general delta revset enforce interpreted literal revision number api bc revset introduce api avoids formatspec input serialization revsets make bookmarknamed nonexistent abort bc templatekw deprecate favor templatekw fix crash multiple latesttags resolution wdir templater check invalid use list expression properly transaction display data transaction failed rollback ui add config knob redirect status message stderr api ui remove unreachable branch function call write vfs also audit rename wireproto batch query support query immediate response extension unsorted changegroup add option create bundle full snapshot changegroup allow force delta commandserver add ipc channel teach repository path command finished commandserver add config knob various logging option commandserver add experimental option use separate message channel commandserver send raw progress information message channel filecache unimplement set delete api http allow authprefix username consistent uri match support rooted glob hgignore mergetools calling external merge tool describe resolve input mergetools adjust beyond compare config maclinux obsutil fix progress deprecate uiprogress rustcpython binding ancestorsiterator rustcpython binding lazyancestors rustcpython binding missingancestors sparserevlog disable sparserevlog config disable generaldelta sparserevlog enabled default storage update sqlitestore use new deltamode parameter store raise programmingerror unable decode storage path subrepo extend path auditing test include weird pattern sec subrepo prohibit variable expansion creation hg subrepo sec subrepo reject potentially unsafe subrepo path bc sec behavior change internal api change mercurial regularlyscheduled bugfix release containing following fix command core extension phabricator properly encode boolean type request body unsorted window ensure mixedfilemodewrapper fd nt escape entering context mgr worker swallow exception occurred main process mercurial regularly scheduled bugfix release security fix included expected lowrisk command core revlog fix outofbounds access negative parent read revlog sec extension unsorted mercurial overview new feature available regularlyscheduled quarterly feature release command add add label message added file addremove add label message added removed file annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc bookmark add explicit option list bookmark given name bookmark pas formatter printbookmarks instead opts api clone allow local cloning create one level directory debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc grep add multirev support allfiles flag grep rename linenumber lineno well bc grep search commits allfiles mode help adding proper declaration shortlistbasic command api help adding support command category identify change parent list node bc identify show remote bookmark hg id url tjson b log changesetformatter fill wdir rev node bc log respect graphshorten terminal node collapsing merge improve interactive onechanged onedeleted message phase explicitly exclude secret phase phase expose phase idx revset phase handle phase command flag phase report number nonpublic changeset alongside new range push add remote repository changed pushing message remove add label message removed file rename return error status renamecopy failed resolve add flag default behavior remerging resolve add config make hg resolve remerge default resolve add confirm config option resolve add option warnabort unresolved conflict marker resolve graduate resolvemarkcheck experimental add doc resolve rename status mergestatus shadow change status bc status advertise abort instead update c abort merge status advertise abort instead update c abort graft status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc verify make output le confusing core context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api dispatch nt show list command bogus command dispatch making hg abortion output specific label dispatch show short error message invalid global option given exchange support declaring pull depth exchange support defining narrow file pattern pull filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api localrepo add repository feature repo stream cloned localrepo add requirement narrow file creation option present localrepo automatically load lf extension required bc localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support marking repos shallow file storage localrepo support writing shared file api pager enable termdumb repository establish api emitting revision delta revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api revlog new api emit revision data revlog reuse cached delta identical base revision revset expand bookmark active bookmark revsetlang fix position spaceless ab expression streamclone nt support stream clone unless repo feature present streamclone include obsstore file stream bundle client read templatefuncs add truncate parameter pad templatekw add experimental status keyword templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api tracing new module make tracing event hg easier tracing trace command function execution transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api add bookmark changesetdata command add phase changesetdata command client support advertising redirect target client support following content redirects define implement changesetdata command define implement filedata command define implement filesdata command define implement manifestdata command server support sending content redirects support response caching extension absorb import extension facebook hgexperimental absorb print rev prefix hash absorb print summary changesets affected absorb prompt user accept absorb change default amend support historyeditingbackup config option closehead fix closehead r listification commitextras work nicely extension convert fix file descriptor leak extension add summary total loading time per extension extension add detailed loading information extension new closehead module closing arbitrary head fastannotate initial import facebook hgexperimental fastannotate make default value fastannotateuseflock dynamic fix add monkeypatchable point new revision committed fix compute changed line lazily make wholefile fixer tool faster fix determine fixer tool failure exit code instead stderr fix pull flag definition make reusable extension fsmonitor use vfs instead opener journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf add repository feature denoting use lf lf autoload extension cloning repo lf enabled lf consult narrow matcher extracting pointer ctx lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc logtoprocess connect fds devnull avoid bad interaction pager logtoprocess define hg child process narrow add importrules flag tracked command narrow add narrowspec flag clone command narrow add narrow ellipsis server capability narrow add server logic send cg widening without ellipsis narrow check server narrow support anything bc narrow drop support remote expansion bc narrow introduce config option check narrow enabled narrow move hgnarrowspec hgstorenarrowspec bc narrow move support hg verify core narrow first version narrowwiden wireprotocol command narrow validate spec file wellformed clone bc patchbomb allow using hghostname force hostname phabricator drop support legacy phabricatorauthtoken config bc phabricator mark extension experimental rebase add stop option stop rebase point rebase nt try prune obsolete changeset already destination rebase explicitly track collapse fold rebase skip extinct revision even successor rebase set rebase support historyeditingbackup config option remotenames add name argument remotenames revset share allow one level directory created shelve add internal extra shelve fix crash unshelve without shelve metadata file shelve use internal phase possible sqlitestore file storage backend using sqlite strip ignore orphaned internal changesets computing safe strip root hgweb chg chgserver add command us correct message frame chgserver restore pager fds attached within runcommand session rustchg add client extension run chgspecific request rustchg add callback handle pager shell command request unsorted ancestor actually iterate ancestor topological order graduate option experimental server section changegroup pas sorted revision group api changegroup port emitrevisions changegroup remove reordering control bc changegroup restore default node ordering cleanupnodes drop special casing around prune marker api command restore compatibility cmd registration copy improve logic deciding copytracing based config option crecord make nextsametype check parent item exists crecord make enter move cursor next item type delta skip empty delta optimisation nongeneral case error introduce storageerror filemerge add config knob check capability internal merge tool filemerge show warning chosen tool binary file capability fileset extract language processing part new module api fileset optimize x x fileset roughly adjust weight function formatter remove experimental marker option formatter rename abspath file path drop relative path bc global replace us revlogerror storageerror api hg allow extra argument passed repo creation api httppeer expose capability command index drop support negative index index index handle index nullid explicitly linelog fix infinite loop vulnerability lookup add option disambiguate prefix within revset mail always fall back usascii wo nt work bc mail modernize check pythonwithtls manifest add rawsize proxy api meld enable automerge mergetool warn uimerge point nonexistent tool narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc obsolete fix valueerror stored note contains char overlayworkingctx fix exception metadataonly inmemory merges phase add archived phase phase add internal phase pullreport issue message extinct pulled changesets rename pycompatgetcwd encodinggetcwd api revision allow refer nodeid prefix scmutil accept multiple predecessor replacement api shortest never emit prefix even unique shortest use x prefix disambiguate revnum configured sparserevlog refine delta candidate sparse case statprof fix indent level fpwrite statprof update name increase storageutil consistently raise lookuperror api storageutil implement file identifier resolution method bc storageutil move metadata parsing packing revlog api storageutil new module storage primitive api url allow configure timeout http connection behavior change annotate pas wdir rev node formatter bc annotate rename linenumber lineno bc changegroup remove reordering control bc debugcommands introduce debugrevlogindex bc debugcommands use openstorage debugdata bc formatter rename abspath file path drop relative path bc grep rename linenumber lineno well bc identify change parent list node bc journal pas repolookuperror string template bc journal unify template name node bc largefiles automatically load largefiles extension required bc lf nt add extension hgrc clone share bc lf nt add extension hgrc conversion bc localrepo automatically load lf extension required bc log changesetformatter fill wdir rev node bc mail always fall back usascii wo nt work bc narrow check server narrow support anything bc narrow drop support remote expansion bc narrow move hgnarrowspec hgstorenarrowspec bc narrow validate spec file wellformed clone bc narrowspec limit pattern path rootfilesin bc narrowspec use sparseparseconfig parse narrowspec file bc phabricator drop support legacy phabricatorauthtoken config bc resolve rename status mergestatus shadow change status bc status remove morestatus message formatter data bc status rename copy source compatibility filecopies bc storageutil implement file identifier resolution method bc internal api change bookmark pas formatter printbookmarks instead opts api changegroup pas sorted revision group api cleanupnodes drop special casing around prune marker api context drop compatibility contextdescendant api context move logic changectxinit localrepogetitem api context remove unused overlayfilectx api filelog add hasnode method api filelog drop generaldelta attribute api filelog drop index attribute api filelog remove checkhash api filelog remove revdiff api filelog remove version attribute api filelog stop proxying opener api filelog stop proxying addrevision api filelog stop proxying checksize api filelog stop proxying compress api filelog stop proxying datafile api filelog stop proxying deltaparent api filelog stop proxying flag api filelog stop proxying headrevs api filelog stop proxying rawsize api filelog stop proxying start end length api fileset extract language processing part new module api global replace us revlogerror storageerror api help adding proper declaration shortlistbasic command api hg allow extra argument passed repo creation api localrepo define feature repository instance api localrepo define storage backend creation option api localrepo move repo creation logic localrepositoryinit api localrepo pas ui newreporequirements api localrepo support writing shared file api manifest add rawsize proxy api rename pycompatgetcwd encodinggetcwd api revlog add method obtaining storage info api revlog drop lookuperror alias api revlog drop revlogerror alias api revlog drop compatibility revlogdescendant api revlog drop emitrevisiondeltas associated functionality api revlog drop error alias api scmutil accept multiple predecessor replacement api storageutil consistently raise lookuperror api storageutil move metadata parsing packing revlog api storageutil new module storage primitive api templatekw deprecate oldstyle template keyword function api template rename user luser defined default map file api transaction make entry private attribute api transaction remember original len repo instead tracking added rev api util make timedcm require label api mercurial regularlyscheduled bugfix release containing following fix security fix potential outofbounds read manifest parsing c code core various minor correctness fix revsets commonancestors similar unsorted mercurial regularlyscheduled bugfix release containing following fix command core revlog fix descendant deprecated method hgweb performance remotephase avoid full changelog iteration remotephase fast path newheads computation simple case scmutil avoid quadratic membership testing sparserevlog fix delta validity computation mercurial regularlyscheduled quarterly feature release release note page found full release note
650,Lobsters,vcs,Git & VCS,Git 2.8 released,https://raw.githubusercontent.com/git/git/master/Documentation/RelNotes/2.8.0.txt,git released,,git release note backward compatibility note rsync transport removed update since ui workflow feature turn git clone rsync transport broken source repository packed reference long time nobody noticed complained push learned delete option shortened like branch delete branch thing git blame learned produce progress eyecandy take much time emitting first line result git grep configured told command line many thread use searching working tree file git note operation eg git log note able read note treeish shaped like note tree note infrastructure required argument must ref refsnotes loosen require valid ref operation would update note case must place store updated note tree iow ref git grep default fall back noindex behavior outside directory git control otherwise user may mistake end running huge recursive search new configuration set homegitconfig definition set config file per project safety disabled git pull rebase extended allow invoking rebase git learned cope type file getting changed git formatpatch learned notice formatoutputdirectory configuration variable allows option omitted command line always use directory workflow interprettrailers taught optionally update file place instead always writing result standard output many command read file expected contain text generated edited end user control behavior eg git grep f updated tolerant line terminated crlf used treat line contain payload end cr usually user expect git note merge used limit source merged note tree somewhere refsnotes hierarchy limiting inventing workflow exchange note remote repository using remotetracking note tree located eg refsremotenotes somesuch git lsfiles learned new eol option help diagnose endofline problem lsremote learned option show branch remote repository advertises primary pointing head new httpproxyauthmethod configuration variable used specify authentication method use way work around proxy give error response expected libcurl curlauthany used also codepath proxy authentication taught use credential api store authentication material user keyrings update untracked cache subsystem change primary ui git updateindex git config thing progress message tcp connection code triggered setting verbose option internally code git fetch v friend never passed verbose option codepath cleansmudge filter defined configuration file lower precedence overridden passthrough noop setting variable empty string new notation used name commit reachable match given useruseconfigonly configuration variable used force user always set useremail username configuration variable serving reminder work multiple project want put homegitconfig git fetch friend make network connection told use authentication method need username password libcurl need hint need perform authentication supplying empty username password string valid way set http emptyauth configuration variable achieve find cleaner set http pinnedpubkey specify pinned public key building recent enough version libcurl configuration system taught phrase found bad configuration variable better way error message git config learnt new showorigin option indicate value come credentialcache daemon process used run whatever directory happened start made umount ing filesystem house repository harder process chdir directory house socket startup git submodule update result fetching commit object submodule referenced superproject command learned retry another fetch specifically asking commit may connected ref usually fetch git mergerecursive learned norenames option disable rename detection logic across transition around git version user used get pretty loud warning running git push without setting pushdefault configuration variable longer warn transition completed long time ago readme renamed readmemd content got tweaked slightly make easier eye performance internal implementation development support etc add framework spawn group process parallel use run git fetch recursesubmodules parallel slight update makefile mark phony target correctly incore storage reverse index pack file let go pack offset object name streamlined setup set env gitworktree work tree set like gitdir attempted work around glitch alias handling overwriting gitworktree environment variable affect subprocesses setgitworktree get called resulted rather unpleasant regression clone init try address issue always restoring environment respawning real underlying command handling alias lowlevel code used create symbolic reference updated share code code deal normal reference strbufgetline friend redefined make easier identify callsite new strbufgetlinelf allow silently ignore carriagereturn end line help user dossy system git shortlog used accumulate various piece information regardless asked shown final output optimized noticing need collected eg need collect log message showing number change git checkout branch operation share underlying machinery optimized automated test travis ci environment optimized persisting runtime statistic previous prove run executing test take longer one reduces total wallclock time test script updated remove assumption portable git posix git window skip one expectation satisfiable git window call strcpy trigger false warning static analyzer le intelligent human reducing number false hit help u notice real issue call strcpy couple program already safe rewritten avoid false warning namepath api attempt reduce need construct full path series path component walking tree hierarchy time made le efficient path need flattened eg compared another path already flat api removed user rewritten simplify overall code complexity help debug http part system merge spremotecurlsslstrerror later maint internal api interact remote configuration variable streamlined reffilter formatparsing code refactored preparation branch format friend traditionally test try command work content working tree named worktree filename recent addition git worktree subcommand whose test also named similarly become harder tell apart traditional test renamed use worktree instead attempt differentiate merge mgworktreetests later maint many codepaths forget check return value gitconfigset function made die make sure proceed setting configuration variable failed merge psconfigerror later maint handling error writing internal asynchronous process made robust reduces flakiness test merge jkepipeinasync later maint new developer knob enables many compiler warning option makefile way test script configure apache web server updated work also apache running redhat derived distros maintenance gcc osx fails compile code master work around using clang default platform namepath api attempt reduce need construct full path series path component walking tree hierarchy time made le efficient path need flattened eg compared another path already flat many case api removed user rewritten simplify overall code complexity incidentally also close heapcorruption hole recent version gnu grep pickier decide file binary refuse give lineoriented hit expect unless explicitly told option scripted porcelain use sanegrep wrapper lineoriented data even line may contain nonascii payload took enduser data use grep implement sanegrep wrapper using implementation grep take option also contains various documentation update code cleanup fix since unless otherwise noted fix since maintenance track contained release see maintenance release note detail earlier change broke user hook alias exporting gitworktree point root working tree interfering tried use different working tree without setting gitworktree environment excludelist structure usual alloc nr pair field used allocgrow clearpatternlist forgot reset alloc cleared nr discard managed array path told index add n quite yet index command behaved already harmful way git sendemail confused escaped quote stored alias file saved mutt corrected nonportable c construct spotted clang compiler fixed documentation updated hint connection signoff option dco git reflog incorrectly assumed object used tip ref must commits caused segfault ignore mechanism saw regression around untracked file listing sparse checkout selection area change responsible regression reverted codepaths used fopen opening fixed path gitdir eg commiteditmsg meant left command done however work well repository set shared coresharedrepository umask previous user tighter made work better calling unlink retrying fopen fails eperm asking gitweb nonexistent commit left warning server log somebody may want follow additional test perhaps iirc test perl warning given server log caught test coverage good git rebase unlike caller gc auto ignore exit code gc auto many codepaths run gc auto exiting kept packfiles mapped left file descriptor open friendly system remove file open close pack recent optimization filterbranch introduced regression pruneempty filter used corrected description sanity prerequisite test suite us clarified comment implementation git tag started listing tag foo tagsfoo branch named foo exists repository remove unnecessary disambiguation regression introduced way git svn us auth parameter broken subversion later split subcommand git subtree contrib incorrectly skipped merges nt corrected option git diff work well command run subdirectory command line completion learned handful additional option command specific syntax dirname emulation added lack underlying machinery used lsfiles command taught create empty submodule ref cache directory submodule remove ton wasted cpu cycle git worktree broken code attempted autofix possible inconsistency result endusers moving worktree different place without telling git original repository need maintain backpointers worktrees mv run endusers familiar fact obviously adjust actually made thing worse triggered lowlevel merge machinery taught use crlf line termination inserting conflict marker merged content crlf lineterminated git push forcewithlease taught report push needed force fastforwarded emulated yes command used test script tweaked spend much time generating unnecessary output used help test window would stop fill pipe buffer due lack sigpipe documentation git clean corrected mentioned gitmodules removed giving two f never case vimdiff backend git mergetool tweaked arrange number buffer order would match expectation majority people read left right top assign buffer mentally local base remote merge window based order git show head foo bar baz interpret argument rev ie object named pathname wildcard character tree object merge nddwimwildcardsaspathspecs later maint git revparse gitcommondir used worktree feature misbehaved run subdirectory merge ndgitcommondirfix later maint git worktree add b work v iew subcommand interactive git command broken timeframe command rewritten c merge jcamivfix later maint git mergetree used mishandle side added conflict create fake ancestor file common part side added merge logic updated use usual merge empty blob fake common ancestor file approach used rest system merge jknodiffemitcommon later maint memory ownership rule filltextconv api bit tricky documented bit better merge jkmorecommentsontextconv later maint update various codepaths avoid manuallycounted malloc merge jktightenalloc later maint documentation clearly state simple mode default git push pushdefault configuration set merge mmpushsimpledoc later maint recent version gnu grep pickier input contains arbitrary binary data test us rewrite test sidestep problem merge jkgrepbinaryworkaroundintest later maint helper function git submodule us since list module match pathspec argument given subcommands eg submodule add fixed merge sbsubmodulemodulelistfix later maint git config sectionvar value set value perrepository configuration file failed run outside repository nt say reason correctly merge jsconfigsetinnonrepository later maint code read pack data using offset stored pack idx file made carefully check validity data idx merge jkpackidxcorruptionsafety later maint minor cleanup documentation update merge later maint merge akgitstripextensionfromdashedcommand later maint merge psplugxdlmergeleak later maint merge dtinitialrefxncommitdoc later maint merge maupdatehookssampletypofix later maint
651,Lobsters,vcs,Git & VCS,Squashing Github pull requests into a single commit,http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit/,squashing github pull request single commit,project github doc great,github pull request terrific tool collaborating opensource project get one two week average project love ui clean get see exactly change full branch like even travis ci integration working checking branch still pass test one thing occasionally bother pull request come loaded several temporary commits often find asking contributor squash single descriptive commit everyone know effectively hence quick writeup like git like next guy often project history full small temporarystage commits name like feature foo implemented nt acceptable taking outside contribution merging two different thought stream difficult make much sense pull request selfcontained single commit one feature coming separate pull request way go wo nt start basic github doc great want explain faced plea modify pull request single commit folk hastily creating new branch porting change patch file creating separate pull request headache contributor project maintainer easier way let say two commits branch git log oneline originmaster newfeature hack hack hack project maintainer want single commit diff newfeature branch project master branch need interactive rebase feature git git rebase originmaster open editor content pick hack hack pick hack rebase onto command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell change pick second like squash save file exit get another editor commit message edit combination commits first commit message hack hack commit message hack please enter commit message change line starting ignored empty message abort commit time create single descriptive commit message pull request save exit log show git log oneline originmaster newfeature first line modified commit message single commit great push branch fork use force flag push since rebase messed ancestry relationship currently remote local branch push github pull request autoupdate contain single commit hopefully target project sort ci integration like travis wait bit see everything still pass good go
652,Lobsters,vcs,Git & VCS,ungit -- browser control of git,https://github.com/FredrikNoren/ungit,ungit browser control git,ungit city chattanooga crowd source bicycle parking location follow ungitui twitter http installing nodejs npm git electron using configuring sourceconfigjs pgp git github cache gnupg passphrase external merge tool mergetoolmd auto refresh text editor integration developing contributingmd maintainer known issue git nodejs build source adblock plus ublock changelog changelogmd license mit licensemd,ungit easiest way use git platform anywhere git known versatile distributed source control system staple many individual community even city chattanooga crowd source bicycle parking location however known userfriendliness easy learning curve ungit brings user friendliness git without sacrificing versatility git follow ungitui twitter quick intro ungit http installing requires nodejs npm come nodejs git install ungit type npm install g ungit note system requires root access install global npm package make sure use h flag sudo h npm install g ungit prebuilt electron package avaiable git still required using anywhere want start type ungit launch server open browser ui configuring put configuration file called ungitrc home directory homeusername nix c usersusername window configuration file must json format see sourceconfigjs available option also override configuration variable launch specifying command line argument ungit disable boolean feature use ungit noautofetch example ungitrc configuration file change default port enable bugtracking port bugtracking true pgp git github support pgp signing within ungit feature enabled via either one two action git config global commitgpgsign true without global repo add isforcegpgsign true ungitrc file currently ungit support gpg authentication git allows robust programmatic authentication via credentialhelper could find easy way something equivalent gpg therefore passwordless gpg authentication party gpg password must configured using ungit commit gpg several way enable passwordless gpg authentication various os cache gnupg passphrase gpgagent pinentrymac brew install gnupg gpgagent pinentrymac echo test gpg clearsign see gpg authentication prompt gpg accessed optionally save keychain understand convenient security hard much rather bit inconvenience ungit security exposure external merge tool merge tool would like use kaleidoscope configure ungit use see mergetoolmd auto refresh ungit watch git directory recursively upon page view automatically refresh content git operation change file configured ignored gitignore one caveat node fswatch recursive true option available mac window non mac window machine git operation automatically refreshed file change may require manual refreshes fswatch unable detect change within nested directory hierarchy text editor integration developing see contributingmd maintainer known issue running macosx maverick ungit crash second try updating npm node see detail ubuntu user may trouble installing node executable named differently ubuntu see detail debian wheezy supported git nodejs package old therefore download newest git nodejs tarballs build source adblocker may block ungit ad blocker adblock plus ublock nt like localhost api call assume cross domain attack please whitelist ungiturl ungit port number running git non english language result unexpected behavior ungit par git command result english detect repos state cause confusion git result english changelog see changelogmd license mit see licensemd read faircode experiment go ungit mit
653,Lobsters,vcs,Git & VCS,Remote Code Execution in all git versions (client + server) < 2.7.1,https://ma.ttias.be/remote-code-execution-git-versions-client-server-2-7-1-cve-2016-2324-cve-2016-2315/,remote code execution git version client server,server client side remote code execution buffer overflow git version update osssecurity server client side remote code execution buffer overflow git version gitlab update confirms upgraded already version minimum gitlab released git server exploitation remote git repository git client exploitation cloning repository large filename clone repository everyone vulnerable show system vulnerable osssecurity server client side remote code execution buffer overflow git version unpublished update hit version code got patched publicly http osssecurity server client side remote code execution buffer overflow git version unpublished git git,potential huge server client side remote code execution buffer overflow git version see update ok bug work pushing cloning repository large filename large number nested tree point affected version still shipped part many distribution part stable branch think important get ᴄᴠᴇ public awareness osssecurity server client side remote code execution buffer overflow git version could impact git hosting service like github bitbucket potentially worse installation like gitlab selfhosted operate git repository server may want keep eye vulnerability patch whenever update available update gitlabcom confirms upgraded already updated package available download selfhosted installation running gitlab want version minimum version raise minimum required git version address recent remote code execution vulnerability omnibus package updated include new version gitlab released git server exploitation order push remote git repository need write access git server would require kind authentication authorization first however service like bitbucket github create clone repository without approval admin consequence could bigger anyone attempt trigger vulnerability bitbucket github human resource deal vulnerability quickest way possible selfhosted git hostings may git client exploitation bug also triggered cloning repository large filename clone repository need local user account linux window machine access git binary leaf door wide open well pretty much everyone allow user execute arbitrary code server could problem think php exec system call system local user allows execution git client command carefully watched well allow user execute kind code server probably git vulnerability aware saying everyone vulnerable debian one first show system vulnerable safe assume right pretty much everyone vulnerable ubuntu centos red hat reading osssecurity server client side remote code execution buffer overflow git version unpublished update hit version due miscommunication vulnerability got disclosed code got patched publicly big mistake might advertised soon saw change pushed master thought next version would one include fix pointed http version including fix released yet even still include pathname checked code sorrrry osssecurity server client side remote code execution buffer overflow git version unpublished good news hand vulnerability got fixed git set bugfix patch current master backported older maintenance track available fix heap corruption buffer overflow bug user strongly encouraged upgrade git next package maintainer update backport package include fix
654,Lobsters,vcs,Git & VCS,Jr. Developers #0: Hello World,https://medium.com/@mscccc/jr-developers-0-hello-world-dd1d4a2a098c,jr developer hello world,jr developer hello world soft skill join email list,jr developer hello worldhi jr developer series writing blog post people learning code starting first development job code hard much happy productive successful developer writing functioning code series cover soft skill involved building softwarewhy past year spent hour per week mentoring junior developer helping guide gain skill need start productivesuccessful career absolutely love convinced fullstack dev one best job world love helping others achieve mentoring one one amassed lot content written specifically individual series cleaning sharing youto follow along email list send update time publish something new
655,Lobsters,vcs,Git & VCS,GitLab 8.5 released,https://about.gitlab.com/2016/02/22/gitlab-8-5-released/,gitlab released,relative url omnibus installation month mvp performance scale gitlabgit todos done gitlab geo alpha ee gitlab page support custom domain custom tl certificate ee dmitriy blog setting page gitlab page daemon learn set page gitlab page user documentation gitlab page administration documentation revert commit read reverting change documentation label milestone view open source read milestone documentation render svgs diffs markdown broadcast message highlighted file renames sort vote erase build content ci new ci feature api change changelog update omnibusgitlab package omnibusgitlab changelog mattermost mattermost upgrade barometer first file issue installation download gitlab page updating update page enterprise edition feature list gitlab ee subscription join u live demo qa sign webcast job register,one gitlab release want upgrade soon possible one gitlab faster lot faster increased performance everyone getting important super quick todos yes important thing speak spanish portuguese gitlab enterprise edition also introducing alpha gitlab geo allows remote replicate entire gitlab instance received amazing contribution release one support relative url omnibus installation one many contribution received artem sidorenko thanks artem sidorenko congratulation month mvp performance scale gitlab making sure everything run smoothly thousand project always priority gitlab raised bar average mean performance least time time percentile response time slower page response time improved way beyond instance displaying individual issue time faster large issue graph show slowest percentile response time loading issue gitlabcom deployed first release candidate graph showing overall response timing per minute february vertical arrow indicates deploy gitlabcom many performance improvement notice especially running large server release make user happy notable performance note broadcast message cached reducing impact page loading time performance repository empty repository hasvisiblecontent improved output cached reducing project specific page issue project dashboard etc loading time time changed gitlabgit followed cache branch commit aheadbehind statistic flushed needed example pushing non default branch statistic said branch flushed whereas previously statistic branch would flushed changed performance retrieving issue closed merge request improved performance atom feed greatly improved leading reduction roughly second per page load depending amount event involved change way git coreautocrlf option set previously would written regardless whether already set every request set web editorapi creatingupdating file case actually needed raw file content git repository served gitlabworkhorse prevents timeouts gitlab longer load large git blob eg binary file memory browsing git repository prevents timeouts memory leak todos gitlab work able get started quickly important therefore introducing todos todos chronological list todos waiting input whenever assigned issue merge request someone mention new todo created automatically made change like replying comment updating issue todo automatically set done also manually mark todos done todos designed actionable possible focus important personal space work longtime request looking forward feedback given go gitlab geo alpha ee two team geographically spread gitlab instance single location fetching large repository take long time gitlab geo secondary gitlab instance mirror main gitlab instance geo instance used cloning fetching project addition reading data make working large repository large distance much faster gitlab offering gitlab geo alpha enterprise edition customer gitlab geo left alpha beta state special license required use gitlab page support custom domain custom tl certificate ee gitlab page first introduced gitlab ee giving ability host static website gitlab separate domain name dmitriy blog hosted example gitlab ee adding support custom domain tl certificate even point multiple domain gitlab easily upload tl certificate make easier set gitlab page setting page project setting page add custom domain certificate functionality enabled gitlab administrator new functionality gitlab page made possible help new http server written go call gitlab page daemon support dynamic certificate sni expose page using default upgrade path gitlab changed quite bit added new comprehensive documentation gitlab page work multiple way set gitlabcom user page cname tl support fully live ready use learn set page gitlab page user documentation gitlab page administration documentation revert commit motto move fast break thing must familiar usage git revert gitlab much easier use revert press button commit create merge request reverts read reverting change documentation created issue sidebar could free important content interface element gitlab smarter prettier accessible way focus content fold besides sidebar updated many thing big small interface expect improvement coming release label milestone view want make gitlab best place manage project whether open source get better overview milestone showing label milestone view read milestone documentation render svgs diffs big fan svgs made possible view rendered svgs diffs markdown broadcast message broadcasting important message user instance useful include formatting link possible markdown support broadcast message highlighted file renames small change great highlight file renames diffs sort vote easily sort issue vote make easier find popular important issue erase build content ci accidentally exposed information build log faulty build artifact ci delete artifact build trace ci new ci feature api every month strive expose ci feature api gitlab new change release improvement including security fix please check changelog see named change update omnibusgitlab package gitlab get improved every release omnibusgitlab package see change package receives every release omnibusgitlab changelog release major change bundled software nginx updated version nginx spdy protocol replaced openssl updated version mattermost mattermost ship gitlab includes localization support spanishlanguage translation api support gitlab singlesignon io android apps mattermost also skip major build version mean gitlab mattermost upgrade gitlab without needing upgrade new io app mattermost gitlab sso requires mattermost server higher due breaking change mobile api incompatible mattermost upgrade barometer migration affecting project path ending atom added longer supported migration update database filesystem previous version migration proven fragile project path ending atom database likely nt perform upgrade online recommend take downtime find current number affected database record following command sudo gitlabrails runner put projectwhere q path like atom count note upgrading gitlab version prior ci enabled upgrade gitlab first please aware default omnibus package stop run migration start matter upgrade behavior changed adding etcgitlabskipautomigrations file note early adopter release candidate recommended using ruby found issue recommend everybody keep using ruby installation setting new gitlab installation please see download gitlab page updating check update page enterprise edition mentioned ee feature thing like ldap group support found gitlab enterprise edition complete overview please look feature list gitlab ee access gitlab enterprise edition included subscription time upgrade gitlab subscription also entitles upgrade installation service join u live demo qa sign webcast job give live walkthrough gitlab talk gitlab flow thursday february utc est pst ca nt make time register anyway send recording
656,Lobsters,vcs,Git & VCS,Simple Git Flow With Heroku Pipelines,http://marcgg.com/blog/2016/02/22/git-flow-heroku-pipelines,simple git flow heroku pipeline,drivy git flow moving away git flow pipeline use github flow flow suggested github feature flipper simple git flow basic guideline possible manual locking bundling bundling hotfixing,drivy changed way work git git flow something far working pretty well allowed u release faster feel like new flow way simpler git flow pragmatic github flow general guideline still account team act real life goal measure success team ability ship stable code quickly p let dig moving away git flow used git flow time like many ended using simplified version release branch worked fine basically release flow would go something like however recently heroku released pipeline allowing promote code environment another really quickly great allowed u speed production release going minute couple second problem point release code develop staging code master production like instead would release code develop staging promote staging build production grand scheme thing change much master branch stopped making sense since would never actually push heroku would still merge master branch always felt weird brought complexity automated tscripts confused new hire change something use github flow flow suggested github looked promising still doubt regarding part pull request reviewed branch pass test deploy change verify production branch cause issue roll back deploying existing master production look nice paper lot developer wanting push production constantly might slow thing people wait deploy branch instance developer branch deployed production developer b want release something dev b wait dev decided consider release stable merged branch master could solve running multiple version code different machine load balance traffic seems overkill use case encountered much rather one version code live use feature flipper simple git flow drivy emphasise small release lot test peer review allows u move fast without breaking anything keeping high quality code base needed simple git flow get way shipping code basic guideline based worked objective able ship frequently easily decided rule use feature branch ci deploys master head staging environment test pas staging environment promoted production developer considered safe ready promoting production add tag latest commit promoted note promoting release staging production use internal tool speed thing keep process safe basically developer run drivy release terminal tool check bunch thing promote release deemed safe checking github issue database migration possible manual course thing manually bundling bundling spirit moving fast every developer try release soon get staging avoid slowing rest team however might case possible optimal maybe something go wrong way great thing setup allows quick small deploys possibly multiple different commits needed however case want commit pushed part another release let say merged commit ready push production another developer merges commit well situation need wait simply promote latest safe staging release production hotfixing issue release release master reason still hotfix pretty easily need checkout latest tag represents version running production pull hotfix branch fix release hotfix branch merge back master hotfix branch running production whatever blocking master fixed course avoid much possible commits preventing master branch released kind thing happen thanks tag able deal easily since scrolled far might interested thing wrote
658,Lobsters,vcs,Git & VCS,Issue and Pull Request templates,https://github.com/blog/2111-issue-and-pull-request-templates,issue pull request template,task list check documentation,hard solve problem important detail missing project maintainer add template issue pull request project helping contributor share right detail start thread first many improvement issue pull request working based feedback community add issue template repository create file called issuetemplate root directory file extension optional markdown file md supported markdown support make easy add thing like heading link mention task list template pull request template follows pattern add file called pullrequesttemplate root directory repository worried added clutter root directory project also added support github folder put contributingmd issuetemplatemd pullrequesttemplatemd file github everything work expected check documentation additional information feature
659,Lobsters,vcs,Git & VCS,go-git: A low level and highly extensible git client library,https://github.com/src-d/go-git,gogit low level highly extensible git client library,continue development gogitgogit repository abandoned update done code base issueprs answered attended pure go source keybase comparison git git compatibility documentation installation gopkgin example example package basic example inmemory example example example contribute contribution contributing guideline license license,continue development gogitgogit repository abandoned update done code base issueprs answered attended gogit highly extensible git implementation library written pure go used manipulate git repository low level plumbing high level porcelain idiomatic go api also support several type storage inmemory filesystems custom implementation thanks storer interface actively developed since used extensively source keybase many library tool comparison git gogit aim fully compatible git porcelain operation implemented work exactly git git humongous project year development thousand contributor making challenging gogit implement feature find comparison gogit v git compatibility documentation installation recommended way install gogit go get u use gopkgin version api mean go get clone package latest tag matching cloned master branch example please note checkiferror info function used example example package used example basic example basic example mimic standard git clone command clone given repository given directory info git clone http githubcomsrcdgogit err gitplainclone tmpfoo false gitcloneoptions url http githubcomsrcdgogit progress osstdout checkiferror err output counting object done compressing object done total delta reused delta packreused inmemory example cloning repository memory printing history head like git log clone given repository memory creating remote local branch fetching object exactly info git clone http githubcomsrcdgosiva r err gitclone memorynewstorage nil gitcloneoptions url http githubcomsrcdgosiva checkiferror err get head history head like command info git log retrieves branch pointed head ref err rhead checkiferror err retrieves commit history citer err rlog gitlogoptions refhash checkiferror err iterates commits printing err citerforeach func c objectcommit error fmtprintln c return nil checkiferror err output commit author santiago mola santi molaio date sat nov index readfromwriteto return indexreaderrorindexwriteerror commit author santiago mola santi molaio date fri nov readwriter fix bug writing index using readwriter existing siva file absolute offset index entry calculated correctly find example many others example folder contribute contribution welcome interested please take look contributing guideline license apache license version see license
660,Lobsters,vcs,Git & VCS,GitLogs Search - A better interface for Github's search API,http://www.gitlogs.com/search,gitlogs search better interface github search api,,
661,Lobsters,vcs,Git & VCS,git tbdiff: difference between topic branches,https://github.com/trast/tbdiff,git tbdiff difference topic branch,gittbdiff topic branch interdiff guide synopsis description option rationale algorithm http pypipythonorgpypihungarian http enwikipediaorgwikihungarianalgorithm,gittbdiff topic branch interdiff guide installation cp gittbdiffpy usrlocalbingittbdiff anywhere else path git execpath system yet symlink older system would usrbinpython need edit line usage git tbdiff b c compare topic branch represented range b range c git tbdiff b let tbdiff automatically calculate common ancestor x compare range x x b synopsis git tbdiff color nopatches creationweight factor git tbdiff color nopatches creationweight factor git tbdiff color nopatches creationweight factor base description tbdiff show difference two version patch series generally two set commits ignoring merges meaningful way try find good correspondence commits two version see algorithm show difference pair found also cope removal addition commits two range argument passed unchanged without validation two gitlog invocation option color toggle colored output default use color nopatches suppress diffs commit pair deemed correspond show pairing creationweight factor set creationdeletion cost fudge factor factor default try larger value tbdiff erroneously considers large change total rewrite deletion one commit addition another smaller one reverse case see algorithm section explanation needed rationale git ship convenient tool seeing difference version topic branch approach seen wild include use gitcherry firstorder comparison rebase old version new version patchid logic drop equivalent patch b usually get conflict patch differ change apply base run interdiffs across series run interdiff squashed diff base branch propose somewhat generalized approach based interdiffs goal would find explanation new series term old one however order might different commits could added removed commits could tweaked algorithm general idea suppose old version commits new one commits c assume cherrypick c cherrypick small modification say fixed typo visualize commits bipartite graph b c looking best explanation new series term old one represent explanation edge graph b c represents edge weight explanation free change similarly c explained using cost c modification b c c clearly looking sort minimum cost bipartite matching matched c cost etc underlying graph fact complete bipartite graph cost associate every edge size interdiff two commits question also explain new commits introduce dummy commits side b c c cost edge c size c diff modified fudge factor smaller cost edge free fudge factor necessary even c nothing common may still share empty line making assignment c may slightly cheaper c even c nothing common fudge factor require much larger common part consider patch related definition allows u find good topic interdiff among topic n commits time needed compute nm commit diffs n interdiffs plus time needed compute matching example python version use hungarian package underlying algorithm run matching found case like b c c reconstruct pretty well quite output represents topic diff http pypipythonorgpypihungarian http enwikipediaorgwikihungarianalgorithm
662,Lobsters,vcs,Git & VCS,SourceForge Acquisition and Future Plans,https://sourceforge.net/blog/sourceforge-acquisition-and-future-plans/,sourceforge acquisition future plan,sourceforge acquisition future plan sourceforge slashdot sold bizx llc dhi group inc,sourceforge acquisition future plan community team february end january sourceforge slashdot sold bizx llc dhi group inc new owner two iconic site excited future together already started take action developing plan site encourage feedback help u shape future direction site first order business terminate devshare program last week devshare program completely eliminated devshare program delivered installer bundle part download participating project want restore reputation trusted home open source software clear first step towards vowing never reactivate devshare program interested right thing making extra shortterm profit move forward focusing need developer visitor building site feature establishing community trust eliminating devshare program first step many come plan near future include full http support sourceforge slashdot lot change think developer endusers embrace stay tuned future announcement making sourceforge better everyone logan abbott president sourceforge medium llc
663,Lobsters,vcs,Git & VCS,Git-blame-someone-else – Blame someone else for your bad code,https://github.com/jayphelps/git-blame-someone-else,gitblamesomeoneelse blame someone else bad code,gitblamesomeoneelse linus torvalds say install usage disclaimer see fake commit,gitblamesomeoneelse love gitblamesomeoneelse linus torvalds say install git clone http githubcomjayphelpsgitblamesomeoneelsegit cd gitblamesomeoneelse sudo make install usage git blamesomeoneelse author commit disclaimer change authored commit listed commiter well also something wrote joke please nt run production repo complain script deletes everything linus torvalds nt really approve joke prove work see fake commit
664,Lobsters,vcs,Git & VCS,The dangers of HFS+ for git repositories,http://vhf.github.io/blog/2016/02/04/the-dangers-of-hfs-for-git-repositories/,danger hf git repository,,hf case sensitive took month realize basic fact one thing never bother researching consider buying mac last week hit hard spent minute trying fix something fixed second colleague created fileext website hosted github page printed urlfileext important document supposed hand someone without access either internet printer asked fix easy pie except mkdir gittest cd gittest git init touch file l file git add file git commit add file mv file file l file git add file git status branch master nothing commit working directory clean oops point lost quite trying different idea could believe hf case insensitive never even occurred thought git playing trick ended following git rm file git add file git commit rename file problem fixed investigated bit touch l echo b cat b get confirmation internet course developer already knew nt currently repository dedicated folder repository imagine one file file directory cloned finally prevent future headache du ch repository grep total total hdiutil create type sparse f casesensitive journaled hf size volumereposdmg created volumereposdmgsparseimage decided mounting point volume added alias mount rc file created symlink repository mountpointrepo moved repos volume mv repository backuprepositories echo alias mountrepos hdiutil attach volumereposdmgsparseimage mountpoint usersvictormountpointrepo zshrc source zshrc mountrepos ln usersusermountpointrepo repository cp r backuprepositories backuprepositories repository touch repositoriesa repositoriesa l repository perfect sparse volume grow without intervention fit repository content jetbrains ides started complaining though filesystem casesensitivity mismatch project seems located casesensitive file system match ide setting controlled property ideacasesensitivefs even doc subject poor found following solution echo ideacasesensitivefstrue feel safer though really understand case insensitive file system still exist probably people like buy mac know
665,Lobsters,vcs,Git & VCS,The Art of the Commit,http://alistapart.com/article/the-art-of-the-commit,art commit,writing commit message favorite text editor brief guide setting several popular editor element commit message style detailed enough use active voice,git tool like github offer many way view changed commit wellcrafted commit message save use tool neatly succinctly summarizing changed article continues log message arguably important part commit place capture changed go good message first need short brevity soul wit time viewing commit message context git commit log often lot space display text think commit log newsfeed project log message headline commit ever skimmed headline newspaper current example buzzfeed come away thinking gotten summary happening world good headline tell whole story tell enough know story read working closely one two collaborator log may seem interesting historical purpose would commits git repository lot collaborator commit log valuable way knowing happened looking commit message strictly speaking span multiple line long detailed want git place hard limit go commit message fact given commit call additional context add additional paragraph message like updated ruby rail version security bumped rail version fix json security bug see also http note although message contains lot context one line first line important first line shown log commit author david demaree date sat jan updated ruby rail version security like good headline first line summarizes reason commit rest message go detail writing commit message favorite text editor although example book type message inline using message argument git commit may comfortable writing preferred text editor git integrates nicely many popular editor command line eg vim emacs modern graphical apps like atom sublime text textmate editor configured omit message flag git hand draft commit message program authoring done usually close window git automatically pick message entered take advantage sweet integration first need configure git use editor specifically editor commandline program one telling git hand commit message atom git config global coreeditor atom wait every text editor slightly different set argument option pas integrate nicely git see pas wait option atom get work github help documentation good brief guide setting several popular editor element commit message style hard rule crafting effective commit lot guideline good practice try follow time would quickly tie mind knot ease way guideline recommend always following purpose commit message summarize change purpose summarizing change help team understand going project information put message therefore valuable useful people read fun use commit message space bug git editorializing avoid temptation write commit message like aaaaahhh stupid bug instead take deep breath grab coffee herbal tea whatever need clear head write message describes changed commit clearly succinctly addition short clear description commit relevant piece information another instance fix bug logged bug also common include issue bug number like replace jquery onready listener plain j fix bug tracker including one built every github project even hooked git commit message like one automatically mark bug numbered done soon commit message merged master detailed enough recovering software engineer understand temptation fill commit email status report standup nerdy detail love nerdy detail however detail important understanding change almost always general reason change explained succinctly besides often enough room list every single detail change still yield commit log easy scan terminal window finding simpler way describe something make change made comprehensible teammate also great way save space good rule thumb keep subject portion commit message one line character important detail worth including message need subject line remember still include separate paragraph however colleague decide write commit message commit log valuable try follow similar set rule commit message short require elaborate style guide conversation establish convention making short wiki page example particularly good bad commit message help thing run smoothly use active voice commit log list static thing list change list action someone taken resulted version work although may tempting use commit message label version version jan deliverable better way besides easy end embarrassing situation like making last homepage update releasing new site git commit version ten minute later discovering typo cs git commit version really forty minute later discovering another typo git commit version oh ffs describing change correct format commit message also one easiest rule stick rather concern abstract question like whether given commit release version thing focus much simpler story thing thing version commits therefore could described much simply accurately git commit update homepage launch git commit fix typo screenscss git commit fix misspelled name page also recommend picking tense sticking consistency sake tend use imperative present tense describe commits fix misspelled name page rather fixed fixing nothing wrong fixed fixing except slightly longer another style work better team go try go consistently happens commit message style consistent git repo collapse work ruined kidding people fallible lapse happen little bit nonsense log inevitable note though following style rule like get easier practice get aim write best commit message log better valuable
666,Lobsters,vcs,Git & VCS,Mercurial 3.7,https://www.mercurial-scm.org/wiki/Release3.7,mercurial,mercurial release feature generaldelta improvement pypy whatsnew,mercurial release feature generaldelta original mercurial compression format inefficient way storing history branchy repository generaldelta address weakness result depending repository improve size history factor mercurial first release support generaldelta behind feature flag mercurial also allows pulling mixture nongeneraldelta generaldelta history without recompute everything avoids overloading server result generaldelta enabled default convert repository generaldelta using hg clone u config pull originalrepo generaldeltarepoclonebundles serverside extension allows using pregenerated bundle initial mercurial clone client automatically use clonebundles server advertises clonebundles allows much faster initial clone reduces load central server significantly mercurial first version include experimental clonebundles support marked nonexperimental find using hg help clonebundles filesets support missing specify file missing according hg status interactive committing hg commit amending hg commit amend used together merging handle collision untracked tracked file configurable according config option mergecheckunknown default histedit destination possible run hg histedit without specifying base revision mercurial try determine appropriate base automatically revset used reverse public merge specifies first ancestor current changeset public descendant merges orig file created revert stored different location specified config option uiorigbackuppath hg shelve support storing untracked file hg unshelve support using custom merge tool hg backout commits default conflict encountered hgweb support rendering subtopics server operator limit interaction legacy client speaking outdated wire protocol useful preventing excessive cpu use server using generaldelta repository see various option hg help configserver python wheel package available window pypi path entry define separate url push see hg help configpaths improvement release includes many improvement including limited performance improvement speedup hg log filefolder many documentation improvement clarification additional example see hg help command verbose improved pypy support hg clone uncompressed faster window see backgroundclose option hg help configworker full overview available whatsnew
667,Lobsters,vcs,Git & VCS,Git integrity,https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0,git integrity,,use google group discussion please enable javascript browser setting refresh page
668,Lobsters,vcs,Git & VCS,I'm going to slowly move on from Mercurial,https://www.mercurial-scm.org/wiki/mpm/transition,going slowly move mercurial,mpm transition going slowly move mercurial frequently asked question,mpm transition going slowly move mercurial almost year since started mercurial time gone weekend evening sideproject fulltime job still invades evening weekend time thing course year going gradually remove daily involvement project lot people company lot invested mercurial long period time make sure go smoothly bunch stuff happen part transition move project infrastructure asset fully within project control update project bylaw policy operational without bdfl grow project steering committee active trusted community member help people take review ownership part codebase normally left hand daytoday responsibility like list management sysadmin make sure miscellaneous detail like domain registration ssl certificate covered many thing already progress start handing various responsibility going focus balance time actual mercurial coding project currently set two goal date july least one release major minor made someone selected steering committee november able step away daily involvement project without disruption frequently asked question
669,Lobsters,vcs,Git & VCS,git-annex v6,http://joeyh.name/blog/entry/git-annex_v6/,gitannex,gitlfs give another look,version gitannex released last week add major new feature support unlocked large file edited usual committed using regular git command example git init git annex init mv fooiso git add fooiso git commit added hundred megabyte git annex git git remote add origin ssh severdir git annex sync origin content uploads fooiso compare gitannex worked beginning git annex add used add file file locked preventing modification still useful way use gitannex many kind file still supported course indeed easily switch file back forth locked unlocked new unlocked file mode us git smudgeclean filter busy developing december started playing catchup gitlfs somewhat significantly surpassed several way tried gitannex found nt meet need may want give another look thought gitannex v gitlfs different tradeoff made trying feeling gitlfs brings admirable simplicity using git large file file content automatically uploaded server git branch pushed downloaded branch merged setting user may need change git workflow use gitlfs serious cost simplicity gitlfs centralized system especially problimatic dealing large file decentralized system gitannex lot flexability like transferring large file content peertopeer lan able choose large quantity data stored maybe maybe local archive disk etc price gitannex pay flexability configure run additional command keep track content located since ca nt assume answer central server simplicity gitlfs also mean user nt much control file present checkout repository gitlfs downloads file work tree nt facility dropping content file free space configuring repository want get subset file first place hand gitannex excellent support thing come largely free decentralized design git showed u anything perhaps little added complexity support fully distributed system wo nt prevent people using even many end using mostly centralized way decentralized benefit beyond obvious one oh yeah one advantage gitannex gitlfs use half much disk space clone gitlfs repository contains one copy file work tree since user edit file time checking different branch delete file also stash copy inside gitlfsobjects one main reason gitannex used locked file beginning avoid second copy second local copy large file expensive put added unlocked file gitannex found needed second copy gitlfs default behavior decided complicate gitannex config setting git config annexthin true git annex fix run two command one copy needed unlocked file work well come hard link tradeoff default edit file local backup preserved old content make sure let gitannex upload file another repository editing old version could get lost tradeoff maybe could improved thin file copy uploaded add small amount complexity gitannex feel well worth let unlocked file use half disk space gitlfs developer reading would probably first suggestion feature consider adding gitlfs hope opportunity catchup gitlfs turn
670,Lobsters,vcs,Git & VCS,The git's guide to Git: Bisect,https://rkoutnik.com/articles/The-gits-guide-to-git-Bisect.html,git guide git bisect,email protected binary search email protected downside,debugging hard often presented bug introduced time ago without information learned git bisect primary strategy flail around blindly hoping finger would strike keyboard right reveal bug loud typing showed hard worker eventually promoted senior architect joined inner circle cabal taught secret git eventually kicked insistence wedge antilles better pilot luke skywalker dangit revenge bring git guide git series using git fullest kittenitech got multibilliondollar saas product unicorntopia allows unicornops folk easily manage large herd distributed unicorn problem sometime last week introduced really nasty bug paula marketing tell u receiving quite report setting header color blue cause unicorn riot fortunately timeboxed paula helpfully say complaint started coming le week ago know problem introduced recently bill think use git diff head email protected week ago give u change past week gigantic difficult sift diff format bill talking earlier nifty electric drill double hammer swing hard enough let look better solution git bisect git bisect work taking known good commit bad commit performing binary search bounded two commits find exact commit thing went bad excellent situation know bug introduced given time frame used every day lifesaver ream commits dig eleven commits check bad news pushed commits week yipes note take four step binary search log n require number step equal natural logarithm total item check mathadverse mean check small amount order find problem commit checking commits requires step eleven commits need search order newest oldest head increased alfalfa yield bumper car festival allow writein vote unicorn election turn nt typo refix typo fix tyops speeling wrong ensure unicorn park convert antiaircraft battery upon godzilla event correct corner case round house fix edge case unicorn gain sentience demand right automatically spin new unicorn configcarousel true styling add peppermint swirl unicorn housing race condition add checkered flag let try known bad commit qa verified unicorn riot running latest code known git land head also know commit sha good unicorn riot tell bisect information start bisecting passing head buggy commit known good commit git bisect start head already master branch uptodate originmaster bisecting revision left test roughly step ensure unicorn park convert antiaircraft battery upon godzilla event git status head detached currently bisecting started branch master use git bisect reset get back original branch nothing commit working directory clean point git checked commit middle head detached head state pointing specific commit instead pointer latest commit branch sweat everything go kerflooey run git bisect reset return original prebisect state phew next step check bug exists commit bisect know commits commit also contain bug need search older commits bad code commit bugfree offending code added later bisect search newer commits open devunicorntopiacom set header blue unicorn fly everywhere rioting street look like commit broken tell git current commit contains bad code command git bisect bad finally something git intuitive git bisect bad bisecting revision left test roughly step automatically spin new unicorn configcarousel true run bisect determines commits head also contain bug leaving u half original commits suspicion move commit halfway one marked bad one know good newer commits assumed bad known bad ensure unicorn park convert antiaircraft battery upon godzilla event correct corner case round house fix edge case unicorn gain sentience demand right checking automatically spin new unicorn configcarousel true styling add peppermint swirl unicorn housing known good race condition add checkered flag time commit look good blue header docile unicorn hurrah git know malfunctioning code enclosed known bugfree known bugged two commits left check git bisect good bisecting revision left test roughly step fix edge case unicorn gain sentience demand right newer commits assumed bad known bad ensure unicorn park convert antiaircraft battery upon godzilla event correct corner case round house checking fix edge case unicorn gain sentience demand right older commits assumed good repeating process time give u problem commit git bisect good first bad commit commit author jebediah kerman email protected date sat aug ensure unicorn park convert antiaircraft battery upon godzilla event oh first commit looked least know exactly problem commit let look changed git diff compare commit immediately preceding problem one problem one digging code find nt riot blue headerblue unicornmobriot welp problem git bisect save day imagine much work would dig week worth code instead single commit downside git bisect perfect scenario helpful problem external source spent far long bisecting discover database bad data bisect say last known good commit good one may something look team write atomic commits commit change multiple thing harder discern problem commit one thing problem race condition case incredibly difficult tell commit good race worked favor randall koutnik crowned ruler moderatelysized duchy later discovering clerical error
671,Lobsters,vcs,Git & VCS,The history behind the decision to move Python to GitHub,http://www.snarky.ca/the-history-behind-the-decision-to-move-python-to-github,history behind decision move python github,people would interested literally background pythondev pythondev summary subversion sourceforge svnpythonorg roundup bugspythonorg jira atlassian hgpythonorg upfront system started software practice lab university british columbia nick coghlan pep kallithea rietveld move ancillary repository bitbucket moving github donald stufft make call going wait reported lwn vision document process pep pep gitlab decision next sla,asked twitter people would interested write history behind decision choose github python future development process people said yes literally hence blog post background heavy participation pythondev started writing pythondev summary first edition authored coming september writing summary took year school bachelor master degree allowed really dive python development process ended authoring summary two year total lead knowing everything going python great detail also led helping since noticed instantly something needed done beneficial meant constantly able pick task grew complexity became comfortable contributing led two key thing one came deeply appreciate opportunity open source project general python specifically offered people like nt ton programming experience drive energy demeanour contribute learn contribution two led caring lot python development process worked make easy someone contribute first time gain excitement experience first open source contribution also wanting make easy possible core developer work someone eventually accept contribution led ending charge moving python subversion repository issue tracker sourceforge svnpythonorg using roundup bugspythonorg october fun fact originally issue tracker going use jira hosted atlassian pressure community including richard stallman fsf led u using roundup instead migration impacted two way one established chose handle decision regarding competing solution infrastructure problem essentially would put call proposal solve problem helped remove personal bias allowing make proposal case proposal took form test instance proposed issue tracker small group people whose opinion trusted provide feedback directly also allowing anyone else wanted chime say something appropriate mailing list took feedback experience test instance general thought everything came decision approach took migrating python svnpythonorg hgpythonorg decision made switch occurred second lesson learned dedication volunteer decision made switch jira one key attraction platform atlassian going hosting instance providing direct support involved proposal community started protest idea closedsource java application publicly said could get enough volunteer manage roundup instance would relent using roundup actually decent number people stepped forward switched fsf offered help put call volunteer end nt take offer personal call help time seemed bring enough volunteer forward ended happening nearly none volunteer stuck around point ezio melotti r david murray thank core developer keeping issue tracker running year upfront system hosting experience taught people really count put effort proposal proven track record people come nowhere good intention nt guarantee actually follow honestly known based experience python core sprint pycon u people used regularly come tackle big problem get part way solution swear finish get home never heard started phd computer science technically nt focus attached unofficially software engineering part software practice lab university british columbia meant regularly surrounded people trying figure way make software development better meant perpetually interest software development practice also mean acutely aware python development process start trail current best practice becomes burdensome become obvious u python development process fact become burden rate patch submitted much greater rate reviewed leading external contributor getting frustrated would put effort write patch would occasionally end waiting year review core developer since python community friendly people polite waiting someone notice patch sitting instead asking someone could look subsequently told people email pythondev patch sits long issue tracker open source project bad situation external contributor stop participating project slowly dy core developer stop participating replaced one replace u openly lamented problem nick coghlan decided publicly acknowledge creating pep july document nick proposed moving kallithea host mercurial code provide u code review integration latter desired bugspythonorg us custom fork rietveld actively maintained pep nt go anywhere though nick ton project work nt preexisting buyin changing development process fastforward november nick decided try move thing forward yet asking move ancillary repository bitbucket python ancillary repository thing like pep benchmark etc basically repository cpython repository contributed one person ensuing discussion guido countered nick idea moving github proposed donald stufft earlier discussion help force decision guido pointed repository discussed primarily managed thus make call simply going wait whole discussion reported lwn decision squarely shoulder could said come python usually nt wife attest decided seize opportunity use way try modernize python development process wrote vision document december spelled exactly ideal development process would python thought worrying ancillary repository punting key repository everyone truly cared simply ignoring real problem hand said wanted development process simple possible core developer use review external contribution meant thing like automated testing patch code coverage patch merging browser etc pithy summary wanted ability review external contribution submission commit tablet beach wifi actually vancouver nt entirely silly request thinking got process simple core developer could review lunch time work time home without special machine ssh key installed basically wanted development process become streamlined external contribution review something one relax definitely case hassle moment something least fun feeling obligation process decision process started asking draft pep february pep initially act way know proposing know going willing put effort help deadline nick pep pep donald stufft proposing github optionally phabricator end dropped wanted final pep pycon u april hope make decision may may came went decision happened ended job hunting pycon u leaving google moving across canada live vancouver joining python team microsoft typical time sink moving new place reestablishing oneself new town done phd vancouver wife born raised readjusting back vancouver starting new job nt get back around working towards decision september thanks new job able start putting work time asked test instance cpython repository two proposed platform october halloween north america goal making decision january quickly happened though barry warsaw asked could toss gitlab consideration nick coghlan subsequently saying would rather back gitlab kallithea due maturity issue project donald issue switch nick technically tweaking preexisting proposal barry track record following allowed pivot nick proposal spent november playing test instance various people provided feedback either privately coreworkflow mailing list first three week december spent addressing question people two approach january decision new year day announced chosen github gitlab multiple reason made decision one github basically built social network open source contributor led various core developer telling comfortable github already hoping would win also mean tooling already available use github tie goal automating development process much possible cutting back infrastructure maintained python development team two killer feature gitlab would argue fact gitlab open source killer feature development process important worrying whether cloudbased service publishes source code someone worry extent nt eg gmail address use developing open source especially worry github walled garden extensive sdk allows downloading data go platform since github going used repository hosting code review mean need back code review data since git distributed version control system thus carry entire history around every full clone lastly bdfl prefers github since beginning whole decision process guido let known thought github best choice mean something want make sure guido feel comfortable frustrated contributing programming language guido would first person tell frequency contribution low enough opinion nt go beyond infrequent core developer wanted make sure guido engagement stay high possible guido preference mattered next decision made discussion started coreworkflow mailing list work exactly going manage migration currently writing pep outline step necessary migrate repository wish move begin tackle step slowly migrate various repository github hoping complete migration year may spill driven volunteer lot people varying opinion simply going happen quickly regardless long take optimistic pay end idea try leverage benefit get github getting development process working smoothly enough could something like sla python community long willing take addressing external contribution manage become responsive project external contribution worth
672,Lobsters,vcs,Git & VCS,Fixing Up a Git Repository With Broken Alternates,http://hoelz.ro/blog/fixing-up-a-git-repository-with-broken-alternates,fixing git repository broken alternate,fixing git repository broken alternate rakudo another way save bandwidth clone local repository disk two repository even share disk space via hard link filesystem cloning filebased repository however origin point filebased repository behind remote copy filebased one nt want addition sharing stop clone unlike alternate git actually tell documentation already done work discovered worktree comment powered disqus,fixing git repository broken alternateswhen working occasionally make use git alternate feature familiar alternate facility allows save time space want pristine copy repository set link reference repository repository consulted object object nt exist reference repository brought fresh repository upstream let say checkout repository use rakudo example want create new clone github want save bandwidth activate alternate facility using clone reference option another way save bandwidth clone local repository disk two repository even share disk space via hard link filesystem cloning filebased repository however origin point filebased repository behind remote copy filebased one nt want addition sharing stop clone unlike alternate cd tmp git clone github rakudorakudo let make copy feel ok blowing away git clone reference tmprakudogit github rakudorakudo rakudojvmso fresh clone rakudo git object stored projectsrakudo example would running moarvm test rakudo want build jvm version test stuff running server program branch work someone may playing nt want kick order fix bug masterthe problem sometimes leave extra repository lying around rename move eventually accidentally delete original happens get bunch angry output git try well anything rm rf tmprakudo cd tmprakudojvm git status error object directory tmprakudogitobjects exist check gitobjectsinfoalternates branch nom branch uptodate originnom nothing commit working directory clean error object directory tmprakudogitobjects exist check gitobjectsinfoalternatesa simple fix would clone original repository saw challenge could actually fix hopelessly broken repository git actually tell documentation git clone shared already done work discovered first thing think feature work alternate feature us file called gitobjectsinfoalternates find alternate source looked reference alternate git documentation came across clone dissociate option clone complete copy alternate file new repository nt need original anymore exactly wanted existing repository nt see dissociate git command dug clone implementation discovered static void dissociatefromreferences void static const char argv repack null char alternate gitpathdup objectsinfoalternates access alternate fok runcommandvopt argv rungitcmdruncommandnostdin die repack clean unlink alternate errno enoent dieerrno unlink temporary alternate file free alternate gitclone call git repack simply created fresh clone upstream repository placed newrepogitobjects broken repository gitobjectsinfoalternates file ran git repack removed gitobjectsinfoalternatesanother way saving space time use git relatively new worktree feature get used using probably transition instead published please enable javascript view comment powered disqus
673,Lobsters,vcs,Git & VCS,Python will be moving to Github,https://mail.python.org/pipermail/core-workflow/2016-January/000345.html,python moving github,coreworkflow moving github brett pythonorg http information coreworkflow mailing list,coreworkflow moving github brett cannon brett pythonorg fri jan est nt think shock anyone followed discussion list decision essentially based major distinguishing feature github gitlab familiarity amongst core devs external contributor github guido prefers github neither platform mindblowing feature really made stand would greatly simplify life chose one platform another obviously really hoping going something missed nothing ever came open source enough feature said started process open source would help break tie minor lead one tool deciding factor github gitlab familiarity people publicly said would prefer go github would begrudgingly use chose go route multiple core devs email privately saying hoped would choose github think stemmed used github open source project andor work making even dormant core devs say would able become active switched github thanks eliminating barrier keep custom workflow code review using hg commits said nt goal make thing easier external contributor also ca nt ignore fact vast majority people might want help already familiar github least fact guido prefers github mean something guido would say nt really worry preference since occasional contributor point believe important bdfl actually like contributing programming language rather potentially alienating find process burdensome chosen github gitlab please realize choosing github provide repository hosting code review moving issue tracker moving wiki longterm plan set bot handle commit workflow help isolate u repository hosting platform making moving easier future shortterm people use commandline totally platformagnostic thanks everyone contributed decision especially donald barry nick making proposal work start discussion want handle transition next week going try step away whole workflow topic monday spend last couple day vacation thinking stuff next part html attachment scrubbed url http information coreworkflow mailing list
674,Lobsters,vcs,Git & VCS,"A tidy, linear Git history",http://www.bitsnbites.eu/?p=221,tidy linear git history,linear v nonlinear history want linear history git bisect git revert cause nonlinear history merge topic branch master merge master topic branch solution rebase git rebase caveat rebase creates new commits caveat resolving conflict rebase work merge warning github user merge pull request allows nonlinear merges master protected branch functionality encourages merges master protected branch status check conclusion wishlist github git history work log v recipe,one thing overlooked many git based project value linear commit history fact many tool guideline discourage git workflow aim linear history find sad since tidy history valuable straight forward workflow ensures linear history linear v nonlinear history linear history simply git history commits come one another ie find merges branch independent commit history want linear history besides tidy logical linear history come handy looking history nonlinear history hard follow sometimes point history incomprehensible backtracking change instance feature get introduced bugfix b tracking bug git neat function called git bisect used quickly find commit introduced bug regression however nonlinear history git bisect becomes hard even impossible use reverting change say found commit caused regression want remove feature supposed go specific release luck code changed much simply revert unwanted commit using git revert however nonlinear history perhaps lot crossbranch merges significantly harder probably another handful situation linear history valuable depending use git point le linear history le valuable cause nonlinear history short every merge commit potential source nonlinear history however different kind merge commits merge topic branch master done topic branch want integrate master common method merge topic branch master perhaps something along line git checkout master git pull git merge noff mytopicbranch nice property method preserve information commits part topic branch alternative would leave would allow git fastforward instead merge case may clear commits actually belonged topic branch problem merging master arises topic branch based old master instead latest tip master case inevitably get nonlinear history whether common problem largely depends active git repository many developer working concurrently etc merge master topic branch sometimes want update branch match latest master eg new feature master want get topic branch find merge topic branch master conflict common method even recommended merge tip master topic branch major source nonlinear history solution rebase git rebase useful function use want linear history find concept rebasing awkward really quite simple replay change commits branch top new commit instance use git rebase change root topic branch old master tip latest master assuming topic branch checked git fetch origin git rebase originmaster note corresponding merge operation would merge tip master topic branch depicted previous figure resulting content file topic branch would regardless rebase merge however history different linear v nonlinear sound fine well however couple caveat rebase aware caveat rebase creates new commits rebasing branch actually create new commits new commits different sha old commits usually problem run trouble rebase branch exists outside local repository eg branch already exists origin push rebased branch remote repository already contains branch old history would force push branch eg git push forcewithlease since git allow push new history existing branch otherwise effectively replaces history given remote branch new history possibly make someone else unhappy since local version given branch longer match branch remote lead sort trouble general avoid overwriting history branch remote one exception rewrite history branch code review depending code review system work different discussion need rebase branch shared others remote simple workflow create new branch rebase instead rebasing original branch assuming mytopicbranch checked git checkout b git fetch origin git rebase originmaster git push u origin tell people working mytopicbranch continue working instead old branch effectively obsolete merged back master caveat resolving conflict rebase work merge get conflict merge operation resolve conflict part merge commit however rebase operation potentially get conflict every commit branch rebase actually many time find get conflict commit encounter related similar conflict subsequent commits branch simply commits topic branch tend related eg modifying part code best way minimize conflict keep track happening master avoid letting topic branch run long without rebasing dealing small conflict front every easier handle one big happy conflict mess end warning github user github great many thing fantastic git hosting wonderful web interface code browsing nice markdown functionality gist etc pull request hand function actively thwart linear git history would welcome github actually fixed issue aware shortcoming merge pull request allows nonlinear merges master tempting press green friendly looking merge pull request button merge topic branch master especially read branch uptodate base branch merging performed automatically github really saying branch merged master without conflict check whether pull request branch based latest master word want linear history need make sure pull request branch rebased top latest master far tell information available via github web interface unless using protected branch see need local git client even pull request properly rebased guarantee merge operation github web interface atomic ie someone may push change master merge operation go github complain really way sure branch properly rebased top latest master merge operation locally push resulting master manually something along line git checkout master git pull git checkout mypullrequestbranch git rebase master git checkout master git merge noff mypullrequestbranch git push origin master unlucky someone manages push change master pull push operation push operation denied good thing however since guarantee operation atomic git reset hard originmaster repeat step go note respect project guideline wrt code reviewing testing eg running automatic test build static analysis unit test part pull request probably resubmit rebased branch either using git push f opening new pr rather updating master branch manually protected branch functionality encourages merges master using protected branch status check github project actually get protection merging pull request branch master unless based latest master think rationale status check performed pr branch still valid merging master pull request branch based latest master presented friendly button called update branch text branch outofdate base branch merge latest change master branch point best option rebase branch locally forcepush pull request assuming mypullrequestbranch checked git fetch origin git rebase originmaster git push f unfortunately github pull request play well force push code review information may get lost process acceptable consider creating new pull request ie push rebased branch new remote branch create pull request new branch conclusion care linear history rebase topic branch top latest master merging master merge master topic branch rebase instead sharing topic branch others create new branch whenever need rebase using github pull request aware merge button guarantee pr branch based latest master rebase manually necessary using protected branch status check never press update branch button rebase manually instead care much linear git history happy merging wishlist github fine people working github please add support rebase workflow pull request could optin repository option add possibility disable merge buttonoperation pull request branch based latest master require use status check add rebase onto latest master button many case conflict free operation easily done via web interface preserve pull request history commits comment rebase force push edit followup article different git history model git history work log v recipe
675,Lobsters,vcs,Git & VCS,"How I built ghit.me, hit count badges for github, using just nginx, syslog-ng, and redis",https://benwilber.github.io/nginx/syslog-ng/redis/github/hit/counter/2015/12/25/how-i-built-ghit-me.html,built ghitme hit count badge github using nginx syslogng redis,ghitme nginx syslogng redis nginx setmiscmodule syslogng,read blog know find special pleasure solving problem without writing little code goal ghitme simple hit counter badge github repos goal able put simple hit counter badge github repo readmemd file common useful person view repo github badge fetched backend server display current hit count increment hit count thing build start nginx syslogng redis nginx http logformat badge datestr escapedrepo location badgesvg expires setformattedgmttime datestr setescapeuri escapedrepo argrepo accesslog syslog tagbadge severityinfo badge alias varwwwghitmebadges escapedreposvg set custom log format called badge simple csv date repo name eg benwilber used setformattedgmttime setescapeuri function setmiscmodule important always escape value plan use structured format badge request logging syslog nice csv format syslogng parser pbadge csvparser column badgedate badgerepo flag escapedoublechar stripwhitespace delimiters quotepairs destination dbadgeredis redis command sadd repos badgerepo redis command sadd repos badgedate badgerepo redis command incr repo badgerepo redis command incr repo badgedate badgerepo filter fbadge facility level info program badge log source ssys filter fbadge parser pbadge destination dbadgeredis set syslogng filter parse message redis operation case adding repo set repos time counter repos date daily counter increment hit counter repo one total one day use really simple cronjob aggregate counter repo write new svg badge image usrbinenv python ospath import join pathjoin import locale import redis pretty number localesetlocale localelcall enus badgedir varwwwghitmebadges badgetemplate svg xmlns http width height lineargradient id b stop offset stopcolor bbb stopopacity stop offset stopopacity lineargradient mask id rect width height rx fill fff mask g mask url path fill path fill path fill url b g g fill fff textanchor middle fontfamily dejavu sans verdana geneva sansserif fontsize text x fill fillopacity ghitme text text x ghitme text text x fill fillopacity count text text x count text g svg def repokey repo redis key storing count repo return repo format repo def writebadge repo count write updated count repo svg path svg format pathjoin badgedir repo svg badgetemplateformat countlocaleformat count groupingtrue open path wb fd fdwrite svg def main r redisredis repos rsmembers repos repokeys map repokey repos repo count zip repos rmget repokeys writebadge repo int count name main main
676,Lobsters,vcs,Git & VCS,Software Configuration Management (SCM) Security (2011),http://www.dwheeler.com/essays/scm-security.html,software configuration management scm security,software configuration management scm security david wheeler originally released introduction security requirement scm tool threat outsider without privilege wikipedia nonmalicious developer privilege malicious developer privilege attacker credential comparator repository attack kernelorg attacker subverted linux kernelorg site believed little damage source code repository due nature git related work general discussion also available stormingmedia commentary paper opencm project access integrity control publicaccess highassurance configuration management system configuration management evaluation guidance high robustness system security automated distributed configuration management apso comment ossfs software configuration management scm system operation aurora new ie hole exploited attack u firm elinor mill january cnet protecting critical asset lesson learned operation aurora mcafee helix versioning engine administrator guide fundamental git git version released git horror story repository integrity signed commits mike gerwitz eric myhre conclusion aegis nice sidebyside comparison bazaarng considered security idea source code protection evaluating source code security stephanie woiciechowski emc product security office emc corporation http dwheelercom paul stadig thou shalt lie git rebase ammend squash lie,software configuration management scm security david wheeler originally released introduction software development often supported specialized program called software configuration management scm tool aka version control tool scm tool often control read modify source code program keep history information people find changed version changed generally help developer work together improve program development example include git perforce subversion many others problem people develop scm tool often nt think kind security requirement need support minipaper describes briefly kind security requirement scm tool support least consider supporting every project may need everything easy notice important requirement nt think two basic type scm tool centralized distributed basic security need need handled different two different type primarily concentrating basic scm tool like git mercurial perforce subversion cv gnu arch bitkeeper clearly related tool include build tool automated regression test tool bug tracking tool static analysis tool process automation tool software development tool editor compiler ides security requirement scm tool fundamentally basic potential security requirement system need consider specific related scm tool confidentiality able read information able integrity able writechange information able includes limiting access right writing also protecting repository corruption unintentional malicious changesets must made atomically file change changeset either none committed availability system available need ie resistant denialofservice attack identificationauthentication system safely authenticate user us token like password protected stored sent network exposed cleartext audit relevant action recorded nonrepudiation system prove certain userkey action later particular given arbitrary line code prove individual made change show approvedaccepted path selfprotection system protect data like timestamps changesets data trusted trusted path system make sure communication user protected resilience security algorithm failure given security algorithm fails hash function encryption algorithm easily replaced protect past future data added revelation serious problem privacy system designed possible retrieve information user want protect example spamming serious problem may desirable record real email address least circumstance secret branch security patch located try store location dataset similar confidentiality might even trust administrator notion store depend data nt want spread scm several asset protect need protect current version software must much need make sure recall previous version software correctly also need verifiable audit trail exactly made change particular scm keep history immutable change made need stay recorded undo change undoing need recorded separately old history may need removed archived different simply allowing history deleted scm must record made change sort verifiable immutable audit trail even system attacked threat okay potential threat vary project worry threat nevertheless easier provide list threat countermeasure scm support individual project may choose employ given countermeasure since may decide threat example open source software os project may decide threat unauthorized reading software since code open reading however may always true many os project hide change reveal security vulnerability new version ready deployment thus difficult make simple statement like project type x never need worry threat instead simpler list potential threat project decide one apply configure scm system counter outsider without privilege outsider developer administrator may try read modify asset software source code history information authorized scm system support authorization like login system support definition unauthorized user scm system support configuration allow anonymous reading project andor history since many case useful however scms also support forbidding anonymous read access even true os project since noted sometimes os project want hide security fix ready deployment normally unauthorized user nt allowed modify source repository scm support make default rare case possible imagine even constraint nt true especially scm tool designed used resource source code wiki system wikipedia allow anonymous change work instead protecting history change everyone know exactly changed instead preventing writing primary data approach rare software code example wikipedia software stored trusted repository changed privileged developer however conceivable software documentation code would maintained scm software perhaps project would allow anyone update documentation long change tracked could easily reversed underlying identification authentication system login system use intrusion detection system detect likely attempt forge privilege eg detecting password guessing attack detecting improbable location login underlying login system could also support enabling limit eg delay x login attempt permitting logins certain internet protocol address range certain developer however mechanism need create denialofservice attack otherwise attacker might try forge logins actually log prevent legitimate user nonmalicious developer privilege scm system support protected logins eg us password protect password transit stored user authenticated scm system able limit user based authorization implied scm system could usefully limit reading particular project say limiting reading specific file inside project useful often nt useful inside branch developer must access developer often need entire set file develop eg recompile something limiting read change certain branch could vital project example common security vulnerability reported smaller group people entire development staff patch developed specially trusted developer without full knowledge developer particularly true open source software project also sometimes true project kind functionality also important project military project varying degree confidentiality program may unclassified poor stubbed algorithm may better classified algorithm need maintained separately ideally scm trustworthy enough protect data though practice trust rarely granted scm instead gracefully handle importing unclassified version automatically merging classified data equipment trusted limiting writing specific file inside project much useful since project user certain file many situation nt make sense either scm system still support limiting developer make change malicious developer privilege attacker credential area often forgotten scm system handling malicious developer know one intentionally insert trojan horse program denying exist nt help exist even nt easy way scm tell difference authorized malicious developer attacker acquired authorized developer credential malicious developer might even try make appear developer done malicious deed least make untraceable use existing privilege try gain privilege malicious developer might try modify data used cm system look like someone else made change eg provide someone else name changelog entry malicious developer might try modify cm hook make appear developer inserted malicious code perhaps avoid blame frame developer malicious developer might modify build process eg another developer build software build system attempt steal credential harm developer since developer privilege read change data malicious developer attacker credential harder counter countermeasure used reasonable measure make sure developer ca nt corrupt repository counterexample gnu arch allows developer share writeable directory repository convenient worried malicious developer enough malicious developer could easily remove data corrupt way hard tell caused problem current effort create archd server would probably counter problem make sure developer action logged nonrepudiable immutable way way even someone make change easy see made change time future someone may malicious developer attacker credential eg cryptographic key developer either case find malicious act scm make easy identify action short make easy catch someone increase attacker risk mean attacker le likely practice done requiring change cryptographically signed developer developer side ca nt make people log central server trust result central server sign everything server subverted wo nt able trust data note simply requiring authenticated push git nt enough developer create data structure make look like developer inserted malicious code commits nt signed hard prove actually committed change immutable backup also help way history changed easily detected implied relatively easy way undo change later version easy identify exactly developer change undone make sure developer action easily reviewed later simple action show exactly changed recently make easy new change reviewed possibly set alarm tool record andor require others review really want make sure malicious code nt get best method known make sure person unlikely colluding review code thus way cryptographically sign person reviewed anothers change helpful long reviewer signature ca nt forged long signature clearly indicates reviewed review could brief briefly scanned malicious code way deeply analyzed every line correctness scm tool support recording level review occurred note linux kernel development process people adding signedoffby tag changeset primarily licensing reason still helpful identifying party looked change got note signedoffby person may may change support automated checking acceptance including detection suspiciousmalicious change scm system make possible enforce certain rule accepting change level enforcing formatting rule requiring clean compile andor requiring clean run regression test suite suitably protected environment possible watch change find suspicious change first time developer modified given file code look like trojan horse formattingnaming style significantly different developer normal material attempt send email network traffic code build basically intrusion detection code change level also possible automated process quickly check hint stolen code accepting anything eg detect copyrightencumbered code calling program eric raymond comparator support authenticationcryptographic signature key change resigning matter protection put place developer secret eg login password private key may acquired attacker thus scm along support environment need support changing secret particular may useful cycle developer private key developer switch new private key ensuring old key accepted newer change possibly destroying copy older private key stolen anyone since private key may compromised compromise detected possible invalidate compromised key resign data checked new cryptographic key yet another reason support multiple signature key addition supporting multiperson review login acquisition commit report last time source location eg ip address reading writing committing performed although nt deal malicious developer increase likelihood attack using stolen credential detected developer mostly likely know last time read wrote repository able detect someone else forge identity ideally would resistant repository attack april dr carsten bormann university bremen sent email specialized attack term encumbrance pollution attack encumberance pollution attack attacker insert material legally included understand first imagine scm perfectly indestructible history attacker steal developer credential malicious developer check change contains encumbered material encumbered material simply material legally included example include child pornography slanderouslibelous statement code copyright patent encumberances could advantageous example company might hire malicious developer insert company code competing product sue competitor copyright infringement knowing scm system ca nt undo problem lazy programmer might copy code right copy rare open source software project every line code provided matter public record proprietary project risk scm record change essentially undoes previous change history indestructable viewable ca nt get rid history make scm archive irrevocably encumbered especially problem scm indestructably recording proposal outsider scm system could designed special privilege allowed someone completely deletion history data illegal change course however special privilege delete history data might possible misuse privilege cause problem one mechanism dealing encumberance pollution attack allow speciallyprivileged account mask history element ie preventing access certain material normal developer longer available material nt included later version essentially work like undo change however mask would still record event way would possible prove event occurred later time perhaps system could record hash encumbered change allowing encumbered material removed normal repository yet proving one time material included masking include cryptographic signature whoever masking mechanism particular requires careful design mechanism designed nt permit attack scm system multiple component say client server even gnu arch use simple secure ftp server shared repository possible server ftp server client server resist attack potentially subverted component including loss scm data repository attack many repository undergone attack including linux cv mirror savannah debian microsoft attacker acquired least twice significant portion window code kernelorg subverted thus good scm able resist attack even repository running subverted malicious administrator repository attacker root control repository nt limited centralized scm system distributed scm system still problem attacker may take system used distribute someone change attacker subverted linux kernelorg site believed little damage source code repository due nature git scm able prevent read access even repository attacked obvious way using encrypted archive many variation theme primarily key stored decryption real problem make sure backup medium transfer disk nt easily read key could simply stored separate protected medium archive key might stored ram required bootup annoying bootup attacker likely able acquire data anyway repository might normally key necessary decrypt archive content could require developer provide key us destroys harder attack determined adversary could subvert repository program memory get key another alternative arrange repository key necessary decrypt archive content time case developer must somehow provided key necessary decryption essentially repository nt really know content file managing preventing write access attacker control repository difficult challenge especially since still want permit legitimate change normal developer since attacker modify arbitrary file case goal able quickly detect change cryptographic signing change help significantly since make possible detect change anyone authorized developer clearly list public key need protected protected part ensuring list visible developer tool automatically check public listed key correct developer tool check key listed really developer key changeset chaining help detect problem including unintentional one basically change made chain recording change recorded later checked typically done using cryptographic hash possibly signed know verified chain note also useful detecting accidental corruption automated tool detect change altered given developer know change checked record information locallyseparately check later way someone modify repository remove latest security fix developer change quickly tell removed immutable backup tool check help well repository history changed change compared backup careful corrupted tool wo nt create misleading backup make sure repository ca nt give one view backup tool another view whoever actually take us program simple transparent format help make harder hide attack data stored simple wellunderstood format analyzed independently eg signed tarfile patch tend resistant attack data structure presume process manipulate data content eg typical database related work seems little related work available topic general discussion lynzi ziegenhagen wrote master thesis naval postgraduate school revision control tool high assurance aka secure software development project evaluating configuration management tool high assurance software development project also available stormingmedia commentary paper also available opencm project published paper including jonathan shapiro john vanderburgh access integrity control publicaccess highassurance configuration management system proc usenix security symposium san francisco ca another related paper configuration management evaluation guidance high robustness system michael e gross lieutenant united state navy march trusted software methodology included number configuration management requirement particular upper level requirement specifically designed counter malicious developer see trusted software methodology report tsm cdrl july particular appendix defines trust principle common criterion includes number configuration management requirement see particular part acm section security automated distributed configuration management devanbu gertz stubblebine examine completely different problem one important one view jeronimo pellegrini apso prototype software framework adding secrecy version control system currently monotone conference paper published described mentioned nt much time work idea may interest others vast amount literature scm system well paper discussing evaluating particular system includes comment ossfs software configuration management scm system operation aurora attack called operation aurora targeted company including google adobe yahoo symantec juniper network northrop grumman dow chemical attack reported originated china illegally copied source code new ie hole exploited attack u firm elinor mill january cnet attack included focused attack scm system protecting critical asset lesson learned operation aurora mcafee discussed operation aurora detail explained within large enterprise source code typically housed source code tree within source code control system often called software configuration management scm system vendor include perforce concurrent version system cv microsoft visual source safe v ibm rational others experience number system secured default typically rely customer prevent attacker bypassing default control note threat included stealing intellectual property downloading entire tree exfiltrating network ability legitimate user well potentially unauthorized user make change tree utilizing captured source code find additional vulnerability affected product mcafee report continued insufficient outofthebox security mechanism plus fact organization specifically lock scm system give attacker unfettered access system obtaining access often trivial given lack security control scm system set write maintain sufficient log aid investigation andor recovery attack scenario particularly threatening course investigation discovered numerous design implementation flaw number source code management system make cyberattacks highly viable dditionally due open nature scm system today much source code built protect copied managed endpoint developer system quite common developer copy source code file local system edit locally check back source code tree many code file typically found endpoint system used developer quality assurance qa team member result attacker often nt even need target hack backend scm system simply target individual developer system harvest large amount source code rather quickly many case source code illegally copied managed perforce widelyused scm took look perforce particular found time instructive first many finding perforce server service installs system practice even though generally recommended software installed limited user unauthenticated user creation default unauthenticated user allowed create user password unencrypted systemuserworkspace enumeration permitted communication client server unencrypted perforce fixed problem noted even default protection every user superuser privilege protect used per helix versioning engine administrator guide fundamental page default protection section fair perforce documentation clearly state installers run protect immediately installing perforce first time opinion still inexcusable user often ignore skimp reading manual user often simply accept system default security useful security need default default insecure deployment typically insecure git git widely used git version released added signed commits key mechanism let prove particular commit made someone particular private key course help use git horror story repository integrity signed commits mike gerwitz discus specific use git signed commit capability aware detailed security analysis git particularly countering malicious authorized codevelopers one useful tip come eric myhre configure git check incoming object default git opinion including gitconfig fetch receive operation normally default whatever transfer transfer fsckobjects true thing command line git config global transferfsckobjects true conclusion ca nt prevent attack scm system make attack much harder perform likely detected make detection much rapid example malicious developer could insert line build process said compile email private key data private key remove line forge change unsuspecting developer scm system capability would make much harder hide change malicious instruction would clearly labelled developer later change would labelled developer one compromised system removing change later would record yet another change might detected malicious attacker might take repository repeatedly remove critical patch security vulnerability still removal could detected creator patch action changing different repository could performed trying change older copy would likely detected chaining comparison backup hope scm system capability future happy note scm developer considered issue aegis nice sidebyside comparison comparing version paper aegis capability bazaarng considered security idea hopefully others consider issue another paper topic scm security source code protection evaluating source code security stephanie woiciechowski emc product security office emc corporation feel free see home page http dwheelercom paul stadig thou shalt lie git rebase ammend squash lie related
677,Lobsters,vcs,Git & VCS,Move Fast and Fix Things,http://githubengineering.com/move-fast/,move fast fix thing,click redirected,click redirected
678,Lobsters,vcs,Git & VCS,git-appraise - a Distributed Code Review tool,https://github.com/google/git-appraise,gitappraise distributed code review tool,distributed code review git overview installation go tool installed window requirement usage metadata gitnotes code review request request schema continuous integration status ci schema robot comment analysis schema review comment comment schema integration library graphical user interface plugins mirror system contributing contributing file,distributed code review git repo contains command line tool performing code review git repository overview tool distributed code review system git repos distributed mean code review stored inside repository git object every developer team copy review history push pull pulling update remote repo automatically merged tool design remove need sort serverside setup result tool work git hosting provider setup required installing client workstation installation assuming go tool installed run following command go get githubcomgooglegitappraisegitappraise either make sure gopath bin path explicitly add appraise git alias running following command git config global aliasappraise gopath bingitappraise window git config global aliasappraise gopath bingitappraiseexe requirement tool expects run environment following attribute git command line tool installed included path tool run within git repo git command line tool configured credential need push pull remote repos usage requesting code review git appraise request pushing code review remote git appraise push remote pulling code review remote git appraise pull remote listing open code review git appraise list showing status current review including comment git appraise show showing diff review git appraise show diff diffopts diffoptions reviewhash commenting review git appraise comment message f file l line reviewhash accepting change review git appraise accept message reviewhash submitting current review git appraise submit merge rebase detailed getting started doc available metadata code review data stored gitnotes using format described item stored written single line json written one item per line allows git note automatically merged using catsortuniq strategy since note humanfriendly form ref used track start prefix refsnotesdevtools help make clear meant read written automated tool field named v appears one note used denote version metadata format used field missing default value corresponds initial version format code review request code review request stored refsnotesdevtoolsreviews ref annotate first revision review must conform request schema multiple request single commit sorted timestamp final request treated current one sorting done stable manner multiple request timestamp last request note treated current one design allows user update review request rerunning git appraise request command continuous integration status continuous integration build test result stored refsnotesdevtoolsci ref annotate revision built tested must conform ci schema robot comment robot comment comment generated static analysis tool stored refsnotesdevtoolsanalyses ref annotate revision must conform analysis schema review comment review comment comment written person rather machine stored refsnotesdevtoolsdiscuss ref annotate first revision review must conform comment schema integration library graphical user interface plugins mirror system contributing please see contributing file information contributing git appraise
680,Lobsters,vcs,Git & VCS,14 tips and tools to resolve conflicts with Git,https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/,tip tool resolve conflict git,isolated branch understanding merge conflict type merge conflict git fails start merge git fails merge creating merge conflict identify merge conflict git status resolve merge conflict using command line git command help resolve merge conflict general tool tool git fails start merge tool git conflict arise merge summary git log git reset git status git checkout git reset,version control system managing contribution multiple distributed author usually developer sometimes multiple developer may try edit content developer try edit code developer b editing conflict may occur alleviate occurrence conflict developer work separate isolated branch git merge command primary responsibility combine separate branch resolve conflicting edits understanding merge conflict merging conflict common part git experience conflict version control tool like svn costly timeconsuming git make merging super easy time git figure automatically integrate new change conflict generally arise two people changed line file one developer deleted file another developer modifying case git automatically determine correct conflict affect developer conducting merge rest team unaware conflict git mark file conflicted halt merging process developer responsibility resolve conflict type merge conflict merge enter conflicted state two separate point starting merge process following discussion address conflict scenario git fails start merge merge fail start git see change either working directory staging area current project git fails start merge pending change could written commits merged happens conflict developer conflict pending local change local state need stabilized using git stash git checkout git commit git reset merge failure start output following error message error entry filename uptodate merge change working directory git fails merge failure merge indicates conflict current local branch branch merged indicates conflict another developer code git best merge file leave thing resolve manually conflicted file midmerge failure output following error message error entry filename would overwritten merge merge change staging area creating merge conflict order get real familiar merge conflict next section simulate conflict later examine resolve example using unixlike commandline git interface execute example simulation mkdir gitmergetest cd gitmergetest git init echo content mess mergetxt git add mergetxt git commit commiting inital content master rootcommit commiting inital file changed insertion create mode mergetxt code example executes sequence command accomplish following create new directory named gitmergetest change directory initialize new git repo create new text file mergetxt content add mergetxt repo commit new repo one branch master file mergetxt content next create new branch use conflicting merge git checkout b newbranchtomergelater echo totally different content merge later mergetxt git commit edited content mergetxt cause conflict newbranchtomergelater edited content mergetxt cause file changed insertion deletion proceeding command sequence achieves following create check new branch named newbranchtomergelater overwrite content mergetxt commit new content new branch newbranchtomergelater created commit override content mergetxt git checkout masterswitched branch masterecho content append mergetxtgit commit appended content mergetxt master appended content file changed insertion chain command check master branch appends content mergetxt commits put example repo state new commits one master branch one newbranchtomergelater branch time let git merge newbranchtomergelater see happen git merge newbranchtomergelaterautomerging mergetxtconflict content merge conflict mergetxtautomatic merge failed fix conflict commit result boom conflict appears thanks git letting u know identify merge conflict experienced proceeding example git produce descriptive output letting u know conflict occcured gain insight running git status command git statuson branch masteryou unmerged path fix conflict run git commit use git merge abort abort merge unmerged path use git add file mark resolution modified mergetxt output git status indicates unmerged path due conflict mergetext file appears modified state let examine file see whats modified cat mergetxt headthis content mess withcontent appendtotally different content merge later newbranchtomergelater used cat command put content mergetxt file see strange new addition head newbranchtomergelater think new line conflict divider line center conflict content center head line content exists current branch master head ref pointing alternatively content center newbranchtomergelater content present merging branch resolve merge conflict using command line direct way resolve merge conflict edit conflicted file open mergetxt file favorite editor example let simply remove conflict divider modified mergetxt content look like content mess withcontent appendtotally different content merge later file edited use git add mergetxt stage new merged content finalize merge create new commit executing git commit merged resolved conflict mergetxt git see conflict resolved creates new merge commit finalize merge git command help resolve merge conflict general tool status command frequent use working git merge help identify conflicted file passing merge argument git log command produce log list commits conflict merging branch diff help find difference state repositoryfiles useful predicting preventing merge conflict tool git fails start merge checkout used undoing change file changing branch reset used undo change working directory staging area tool git conflict arise merge executing git merge abort option exit merge process return branch state merge began git reset used merge conflict reset conflicted file know good state summary merge conflict intimidating experience luckily git offer powerful tool help navigate resolve conflict git handle merges automatic merging feature conflict arises two separate branch made edits line file file deleted one branch edited conflict likely happen working team environment many tool help resolve merge conflict git plenty command line tool discussed detailed information tool visit standalone page git log git reset git status git checkout git reset addition git many thirdparty tool offer streamlined merge conflict support feature
682,Lobsters,vcs,Git & VCS,Learn Git – New Course on Code Academy,https://www.codecademy.com/learn/learn-git,learn git new course code academy,,know firsthand experience go knowing zero nothing get grasp everything go start building right away
683,Lobsters,vcs,Git & VCS,80x40,http://blog.mattbierner.com/80x40/,,github repo repo simple rule implementation github report issue script repo,character wide character tall block text stored github repo script watch repo automatically merges pull request change content text block effectively creating collaborative ascii art canvas anyone github account draw feel free fork repo edit text block submit pull request long change follows simple rule automatically merged change checked make sure preserve size block reviewed content ie blame block text pg project treat git versioned container content source code artwork text model raw data feel git also offer many new way express content maybe could use git play game like ticktactoe connect four maybe could use git metafiction element story tracking fictitious writing process pretty obvious application sure much clever idea zero practical application us git collaborative drawing also producing shape version history text block visualized interesting way importantly though current state repository product repository product implementation script automatically merge block text github pretty hacked surprised contain bug please report issue submit pull request script repo something could improved
684,Lobsters,vcs,Git & VCS,Git man page generator,http://git-man-page-generator.lokaltog.net/,git man page generator,name synopsis description option see also,real git documentation read carefully click button generate new man pagenamesynopsisdescriptionoptionssee also
685,Lobsters,vcs,Git & VCS,Using Git to Manage Todos,http://jezenthomas.com/using-git-to-manage-todos/,using git manage todos,using git manage todos,using git manage todos october common convention writing software add todo fixme comment directly codebase comment clearly mark bit logic yet implemented need review one problem approach easy ignore comment human pressure deadline multitasking comment forgotten left linger rot number todo comment codebase grows time gradually becoming intimidating unwieldy le useful order coerce colleague taking better care heaving pile todo comment added postcommit hook run grep across directory care output give following bit information file path line number todo found todo message good start least everyone team see list todo item every time push commits problem though todo item mixed together difficult know responsible item could introduce convention everyone add name todo realistically people adhere missing ideal output author todo item use git log find author commit using l flag command take range line file path find grep output approach iterate grep output pull file path line number search match plug git log find author glue piece back together build output need think approach probably good enough allowing list todo item grow like weed human problem exactly solved elegantly technology alone least problem far visible developer team chance something nonobvious technical consideration using printf instead echo portable also allows explicit newline character fall tput command lineauthor function change colour output make commit author name stand miss xargs command tacked end message function strip leading trailing whitespace probably best way
686,Lobsters,vcs,Git & VCS,Visualising Code Growth with Git and D3.js,http://jezenthomas.com/visualising-code-growth-with-git-and-d3/,visualising code growth git,visualising code growth git underscorejs loc stats codepen,visualising code growth git october update gave lightning talk falsy value developer conference warsaw poland discussed topic watch video conference original article found video recently watched screencast discussed idea generating statistic project using git gist iterate revision history extract metric change screencast single extracted metric number line code codebase interesting difficult see pattern number plainly printed screen best way see pattern number plot graph extended script screencast show number line code also date time commit made bash script output set tabseparated value one row per commit idea would run script inside git repository redirect output file tested underscorejs repository contains couple thousand commits spanning past six year plugging resulting data trivial chunk code produce beautiful little graph see pen underscorejs loc stats jezen thomas jezen codepen think viewing codebase perspective provides strong starting point asking important question project eg size codebase double halfway code exists plateau towards end plateau suggest portion code extracted another library caused brief valley towards end developer changing much one commit general trend project continue grow complexity technical debt accumulate growth production code correlate growth test code result reflecting codebase way might always flattering obvious issue least know chance effect change
687,Lobsters,vcs,Git & VCS,xkcd: Git,http://xkcd.com/1597/,xkcd git,three word phrase smbc dinosaur comic oglaf softer world buttersafe perry bible fellowship questionable content buttercup festival homestuck junior scientist power hour creative common attributionnoncommercial license detail,git permanent link comic http image url hotlinkingembedding http imgsxkcdcomcomicsgitpng people stand front laptop desk person stand learns person git track collaborative work project beautiful distributed graph theory tree model person cool use person idea memorize shell command type sync get error save work elsewhere delete project download fresh copy title text nt fix gittxt contains phone number friend mine understands git wait minute really pretty simple think branch eventually learn command fix everything comic enjoy three word phrase smbc dinosaur comic oglaf nsfw softer world buttersafe perry bible fellowship questionable content buttercup festival homestuck junior scientist power hour work licensed creative common attributionnoncommercial license mean free copy share comic sell detail
688,Lobsters,vcs,Git & VCS,Fixing Stupid Mistakes in Git Pull Requests,http://developer.telerik.com/featured/fixing-stupid-mistakes-in-git-pull-requests/,fixing stupid mistake git pull request,submitted day grammarsavvy colleague permanent record git rebasing option merge strategy read versus determining shockingly hard never force push shared branch shared repository linus anderson discussion topic hooray tuomas puikkonen,penchant submitting pull request silly grammatical andor technical error like gem submitted day simple wording flub commit talk repo master branch link end branch nice one tj nailed luckily grammarsavvy colleague caught blunder wording merged could add another commit fix wording would mean two thing would clutter repo history trivial commit stupid mistake would live git history end time would metaphorically permanent record git nt forget could argue cluttered history big deal time distributed git repository large number contributor inevitably turn cluster pain sorrow searching nebulous void exercise futility definitely could argue would argue favor clean git history reasonably easy search never know file need git blame future search answer adding new commit solve problem git rebasing given talking git probably different way could go fixing problem explain work rebasing familiar git rebase incredibly powerful command let rewrite history rearrange commits probably time travel seriously though git rebase option merge strategy three merge strategy named patience resolutiondependent octopus made one anyways git rebase seem overwhelming basic actually nt hard grok let say feature branch named stupidmistake committed single biggest grammatical atrocity know catching mistake paramount take moment read versus wait commit life surely shame family generation come let look absolve sin grammar god first thing want add new commit fix problem yes yes told new commit answer stick moment git history look little something like git rebase come think git rebase sort redo entire branch git replay branch history one commit time replay process chance alter history fly perform git rebase first need know branch featuretopic branch based usually master may custom git workflow using unfortunately know branch parent determining shockingly hard article assume branch parent master head terminal make sure feature branch stupidmistake case type git rebase master flag tell git interactive rebase mean editor open display may give ux designer nightmare screen pretty self explanatory let move lol kidding sure scary lack clear instruction world ui giant scary text tell remove line commit lost scary screen seems quite frankly learn basic pretty easy use git reapplies commit rebase ui change individual commit applied see word pick first two line pick default behavior basically mean apply commit without changing anything also edit commits fly reword commit message whole lot case want use squash command take one commit use git wording meld previous commit actually apply squash change word pick squash editor uh yeah kidding editor change pick line save close editor git give opportunity change commit message new melded commit usually remove second commit message free whatever want save close editor commit message comfortable stupid mistake gone local git history pushed branch remote repository eg github got one step naively attempt push branch point git stop track git complaining local branch sync remote counterpart override git push anyways called force push show get one obligatory warning way never force push shared branch shared repository technique nt something want use master branch others might working force push cocontributors upon running git pull sent outofsync state personally refer git hell reflogs sentient linus say condescending thing family good explanation force push bad read anderson discussion topic star war gifs despite warning experience pull request especially done public github repos done simple feature branch one person commits therefore force pushing quite safe long lonesome bust git version sudo adding force flag f git push command hooray task complete successfully removed silly mistake history although decent number step involved removing commit branch already pushed time think find process fairly quick easy enjoy rewriting history header image courtesy tuomas puikkonen
689,Lobsters,vcs,Git & VCS,Git - Signing Your Work,https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work,git signing work,,git commit signed commit need passphrase unlock secret key user scott chacon git signing key schacon gmailcom rsa key id created master signed commit file changed insertion deletion rewrite rakefile create mode libgitrb
690,Lobsters,vcs,Git & VCS,Writing Better Commit Messages with Tmux,http://spin.atomicobject.com/2015/10/28/tmux-commit-messages/,writing better commit message tmux,tmux project workspace tmux important,trying write detailed commit happening big change set explaining problem encountered solved pointing potential weakness code future easy remember particular staring commit message editor fortunately tmux help written set project workspace tmux preferred workspace make first window shell prompt project root directory use shell primarily git operation branching reviewing change committing thanks tmux command use window reviewing change writing commit message call gitreview tmux send git diff cached cm splitwindow h send git commit exit cm simple useful automating something could manually making fun important work first sends keystroke git command list change committed creates vertical split new pane within window new window tmux sends keystroke command commit close shell session running gitreview tmux pane left change pane right commit editor easy switch back forth two pane seeing change one detailing perfect recipe better commit message
693,Lobsters,vcs,Git & VCS,Monorepos in Git - Atlassian Developers,https://developer.atlassian.com/blog/2015/10/monorepos-in-git/,monorepos git atlassian developer,branching monorepo monorepo test repository facebook used conceptual challenge commit tag performance issue number commits directed acyclic graph dag git log git blame number ref git clone git fetch git push git gc git branch number file tracked large file combined effect mitigation strategy nicola paolucci workarounds remove ref branch based workflow handling large number file facebook implemented mercurial discussed git use git lf large file storage git lf fully compliant git lf implementation steve streeting recently wrote project identify boundary split repository splitting monorepo,many user embraced git flexibility distributed version control system particular git branching merging model provides powerful way decentralize development workflow flexibility work majority use case nt handled elegantly one use case use git large monolithic repository monorepos article explores issue dealing monorepos using git offer tip mitigate monorepo definition vary define monorepo follows repository contains one logical project eg io client webapplication project likely unrelated loosely connected connected mean eg via dependency management tool repository large many way number commits number branch andor tag number file tracked size content tracked measured looking git directory repository facebook one example monorepo thousand commits week across hundred thousand file facebook main source repository time larger even linux kernel checked million line code file conducting performance test test repository facebook used follows million commits linear history million file size git directory roughly size index file conceptual challenge many conceptual challenge managing unrelated project monorepo git first git track state whole tree every single commit made fine single related project becomes unwieldy repository containing many unrelated project simply put commits unrelated part tree affect subtree relevant developer issue pronounced scale large number commits advancing history tree branch tip changing time frequent merging rebasing locally required push change git tag named alias particular commit referring whole tree usefulness tag diminishes context monorepo ask working web application continuously deployed monorepo relevance release tag versioned io client performance issue alongside conceptual challenge numerous performance issue affect monorepo setup number commits managing unrelated project single repository scale prove troublesome commit level time lead large number commits significant rate growth facebook cite thousand commits week becomes especially troublesome git us directed acyclic graph dag represent history project large number commits command walk graph could become slow history deepens example include investigating repository history via git log annotating change file using git blame git blame repository large number commits git would walk lot unrelated commits order calculate blame information example would answering kind reachability question eg commit reachable commit b add together many unrelated module found monorepo performance issue compound number ref large number ref ie branch tag monorepo affect performance many way ref advertisement contain every ref monorepo ref advertisement first phase remote git operation affect operation like git clone git fetch git push large number ref performance take hit performing operation see ref advertisement using git lsremote repository url example git lsremote git gitkernelorg pubscmlinuxkernelgittorvaldslinuxgit list reference linux kernel repository ref loosely stored listing branch would slow git gc ref packed single file even listing ref fast second operation need traverse repository commit history consider ref eg git branch contains slow monorepo repository ref listing ref contain old commit reachable almost ref took user time second vary depending page cache underlying storage layer number file tracked index directory cache gitindex track every file repository git us index determine whether file changed executing stat every single file comparing file modification information information contained index thus number file tracked impact performance many operation git status could slow stats every single file index file large git commit could slow well also stats every single file vary depending page cache underlying storage layer noticeable large number file realm ten hundred thousand large file large file single subtreeproject affect performance entire repository example large medium asset added io client project monorepo cloned despite developer build agent working unrelated project combined effect whether number file often changed large issue combination increased impact performance switching branchestags useful subtree context eg subtree working still update entire tree process slow due number file affected requires workaround using git checkout template example update template directory match given branch without updating head side effect marking updated file modified index cloning fetching slows resource intensive server information condensed packfile transfer garbage collection slow default triggered push garbage collection necessary resource usage high every operation involves creation packfile eg git uploadpack git gc mitigation strategy would great git would support special use case monolithic repository tend git design goal made hugely successful popular sometimes odds desire use way nt designed good news vast majority team really truly large monolithic repository tend exception rather rule interesting post hopefully likely wo nt apply situation facing said range mitigation strategy help working large repository repository long history large binary asset colleague nicola paolucci describes workarounds remove ref repository ref ten thousand consider removing ref nt need anymore dag retains history change evolved merge commits point parent work conducted branch traced even branch nt exist anymore branch based workflow number long lived branch want retain small nt afraid delete short lived feature branch merge consider removing branch merged main branch like master production tracing history change evolved still possible long commit reachable main branch merged branch merge commit default merge commit message often contains branch name allowing retain information necessary handling large number file repository large number file ten hundred thousand using fast local storage plenty memory used buffer cache help area would require significant change client similar example change facebook implemented mercurial approach used file system notification record file change instead iterating file check whether changed similar approach also using watchman discussed git eventuated yet use git lf large file storage section updated january project include large file like video graphic git lf one option limiting impact size overall performance repository instead storing large object directly repository git lf store small placeholder file name containing reference object stored specialized large object store git lf hook git native push pull checkout fetch operation handle transfer substitution object worktree transparently mean work large file repository normally would without penalty bloated repository size bitbucket server later embeds fully compliant git lf implementation allows preview diffing large image asset tracked lf directly within bitbucket ui fellow atlassian steve streeting active contributor lf project recently wrote project identify boundary split repository radical workaround splitting monorepo smaller focused git repository try moving away tracking every change single repository instead identify component boundary perhaps identifying module component similar release cycle good litmus test clear subcomponents use tag repository whether make sense part source tree would great git supported monorepos elegantly concept monorepo slightly odds make git hugely successful popular first place however nt mean give capability git monorepo case workable solution issue arise
695,Lobsters,vcs,Git & VCS,gitsh - An interactive shell for git,https://github.com/thoughtbot/gitsh,gitsh interactive shell git,video upcase use gitsh installing gitsh installation guide contributing gitsh contributing guide similar project gitsh gitsh repl license license thoughtbot thoughtbot project available hire,gitsh program interactive shell git within gitsh issue git command even using local alias configuration quick introduction gitsh watch video upcase documentation view man page running man gitsh terminal use gitsh git command tend come group avoid typing git running dedicated git shell sh gitsh gitsh status gitsh add gitsh commit ship gitsh push gitsh ctrld sh hit return command run git status change command setting gitshdefaultcommand via git config remember prefixed git saving even typing gitsh branch master nothing commit working directory clean gitsh easily execute shell command gitsh echo hello world hello world gitsh combine command gitsh commit push make temporary modification git configuration gitsh config variable change affect git command issued gitsh session forgotten exit like shell environment variable gitsh set username george brocklehurst mike burn gitsh set useremail supportgeorgemike thoughtbotcom gitsh commit pair programming access information repository magic variable like rebasebase mergebase prior gitsh rebase master conflict content merge conflict dbschemarb gitsh checkout rebasebase dbschema gitsh rake db schema load db migrate tab completion git command alias branch without modifying shell setting without extra setup alias third party git command information state git repository prompt without modifying shell setting includes name current head colour sigil indicate status work hub gh sh gitsh git gh gitsh pullrequest installing gitsh see installation guide install instruction operating system contributing gitsh pull request welcome see contributing guide detail similar project gitsh customised bash shell git prompt alias completion gitsh simple git shell written perl repl wrap program subcommands repl license gitsh copyright mike burn george brocklehurst thoughtbot free software may redistributed term specified license file thoughtbot created maintained funded thoughtbot name logo thoughtbot trademark thoughtbot inc love open source software see project available hire
696,Lobsters,vcs,Git & VCS,CPython core development moving to git,https://mail.python.org/pipermail/core-workflow/2015-October/000227.html,cpython core development moving git,coreworkflow pep git gitlab ncoghlan gmailcom barry pythonorg http ncoghlan gmailcom information coreworkflow mailing list,coreworkflow pep git gitlab nick coghlan ncoghlan gmailcom thu oct cest october barry warsaw barry pythonorg wrote subscribed list directly read gmane published pep proposes move cpython development git hosted donated self tbd gitlab instance http feedback course welcome anybody else want hitch ride pony let know happy add coauthor pep thanks barry already mentioned brett barry public record second open source alternative mix going withdrawing kallithea based workflow proposal bitbucket pursuing similarly proprietary model github rhodecode also switching proprietary business model dubious business practice sourceforge making reluctant recommend use allura nt see currently credible open source vendor offering supported mercurial hosting kallithea would require lot work bring usability standard github gitlab let alone upgrading current python pylon codebase python compatible pyramid stack honestly way prefer spending time eg like finally get back working startup sequence refactoring point furthermore psf invest contract development web application fund would better directed towards critical community service like python package index tool specific core development process love see u sticking mercurial python based hosting solution think benefit switching commercially supported open source solution like gitlab outweigh consideration regard nick p anyone really keen continue advocating kallitheamercurial based solution happy cede authorship relevant pep nick coghlan ncoghlan gmailcom brisbane australia information coreworkflow mailing list
697,Lobsters,vcs,Git & VCS,Counting Objects,http://githubengineering.com/counting-objects/,counting object,click redirected,click redirected
698,Lobsters,vcs,Git & VCS,Addressing Mercurial misconceptions,https://mail.python.org/pipermail/python-dev/2015-September/141652.html,addressing mercurial misconception,pythondev pep collecting information git raf http mercurialseleniccomwikichangesetevolution http information pythondev mailing list,pythondev pep collecting information git augie fackler raf tue sep cest oleg broytman phd phdruname writes hi hi work mercurial got inline response want summarize put context without much energy topic lot reason prefer one tool another common one familiarity simplicity power version control debate often touch three point often lot misinformation thrown around debate clear based thread oleg familiar mercurial everything listed impossible doable mercurial infrequently command flag identically named sending mail attempt combat may healthy move development community instead ensure right capability tradeoff seen process python community want move git often case migration github specifically choice git often totally unrelated popularity one particular host good clear reason might everyone thinking git better tool personal dismay admit might perceived network effect hosted github outweigh switching cost difficulty using complex tool sun sep tim delaney timothycdelaney gmailcom wrote september oleg broytman phd phdruname wrote many thing personally git ca nt hg switched development hg git willing help want follow slightly offtopic personally love know yet find anything git nt able least well mercurial extension thing mercurial support use extensively particular named branch phase concept nt even exist git elided much strictly personal preference plus personal history git fixed problem hg branching model suit understanding branch much better use bookmark almost identical git perdirectory gitignore gitattributes lightweight annotated tag point exactly commits tag chalking personal taste know tagging behavior git v hg complicated tradeoff mercurial chose path make tag auditable future whereas git tag could disappear hard prove ability pull push unrelated repos opinion honestly misfeature mercurial absolutely hg pull force want learned commit editing found thing wanted badly hg started mercurial version commit editing hg rollback could undo one transaction please forget rollback exists dangerous hiding new user reason later mercurial learned commit editing unwillingly perhaps unwillingly trying deliberate wanted make sure enabled editing default make impossible user lose data getting right took time think wait worth want preview headed take look http mercurialseleniccomwikichangesetevolution part shipped whole concept making steady progress git still better git add p allows review edit patch commit hg record commits immediately fwiw totally get wanting staging area said staging area record aka commit interactive git add p identical functionalitywise also ship least curse ui record quite nice git powerful even version hg help log list dozen option git help log give page documentation counting number command line flag horrible way compare power tool reflects complexity power mercurial two major concept revsets template repeat eliminate need many commandline flag git include give example also like point read recent mercurial current looked version year old output hg help log find many option quite powerful see use much like git log decorate done templating system even hgrc include better template hg take action item possible graph year even option grep related search option especially g remember mentioned revsets replace lot git command line flag example hg help r grep foo see also hg help revsets rich query system revision history usable throughout mercurial rather log pretty oneline template hg help templating see u maybe wanting builtin style encoding often use instead believe normoally infer encoding locale wrong thing reason said hg help v grep encoding would helped find encoding flag color extension color shipped hg year default break poorly written script worddiff like git grep especially form git grep ovim admit gitgrep decent feature find grep ack fine nt know equivalent command git commit c head hg commit amend use hg histedit like rebase git diff nameonly hg status nostatus git lot good documentation honestly mercurial elided anecdote stopped using mercurial understand phase phase commit according origin let borrow word git terminology commits seen main public repository marked public mercurial refuse edit history rewriting woe happen people rewrite widely shared history force push new version disallowing nonfastforward push server prevents rewriting propagating unintentionally phase proactively prevent user shooting foot detail http mercurial sure advantage written python important important ideological reason also important hg run natively window even code working caseinsensitive filesystems mercurial queue also small advantage like better polished commandline interface ability shorten command name option unique prefix actually go far saying better polished cli huge win fact mercurial window support mature also pretty big win something crossplatform talking tool use every day good ui outofthebox huge benefit situation honestly good ui part python became popular sometimes give power get easier user interface hope shown email mercurial give better ui power sacrifice familiarity mercurial indeed simpler ui closing familiarity gap git mercurial much easier way around python crew want go git go git want go legitimate reason misguided belief git thing mercurial tim delaney oleg information pythondev mailing list
700,Lobsters,vcs,Git & VCS,wiki-hub: A small library that allows GitHub static pages to be used as a wiki,https://github.com/wiki-hub/wiki-hub,wikihub small library allows github static page used wiki,wikihub example jekyll anonymous example jekyll collaborative example usage load save token oauth web flow github website contributing fork,wikihub wikihub small library allows github used wiki provides two method load load text file github save commits change file creating fork repository necessary submits pull request repo origin example jekyll anonymous example jekyll collaborative example usage copy wikihubminjs file dist folder project expose wikihub object globally load wikihub load token owner jakecooluser repo awesomewiki branch master path function text something text catch function err something went wrong save wikihub save token owner jakecooluser repo awesomewiki branch master path text post really function pull change commited catch function err something went wrong following optional parameter message default wikihub change commit message save forkbranch default wikihub branch user fork commit saved title default wikihub change title pull request used pull request made changed subsequent commits body default automatically generated wikihub body pull request also used pull request made changed subsequent commits token wikihub us oauth token authenticate github either created using oauth web flow github website contributing fork create feature branch git checkout b mynewfeature commit change git commit add feature push branch git push origin mynewfeature create new pull request
702,Lobsters,vcs,Git & VCS,Step Up Your Pull Request Game,https://kev.inburke.com/kevin/better-commits-pulls-merges/,step pull request game,brief caveat new programming nt worry getting detail right write good commit message try open text editor tim pope wrote favorite post logistics review pull request submitting sure look diff make sure test pas code review process excellent post code review ready merge git amend git config git rebase steve klabnik good guide available hire,okay idea improve project maintainer indicated approve checked new branch made change ready submit review tip submitting changeset likely pas code review quickly make easier people understand code brief caveat new programming nt worry getting detail right lot useful thing learn first like detail programming language test code retrieve data need parse transform useful format started programming copypasting text wordpress edit file ui write good commit message big big part job engineer communicating people communicate sure building right thing increase usage thing built ensure people nt assign credit someone else build thing part job writing clear message rest team change something fortunately probably already write description change pull request summary field already halfway need put great message commit instead pull request first thing need stop typing git commit updated widget start typing git commit git try open text editor want configure use editor choice lot word written writing good commit message tim pope wrote favorite post big commit bigger think rarely use one commit pull request though try limit pull request line removed added sometimes break multiplecommit change multiple pull request logistics use vim write commit message editor show summary go beyond character write great commit message pull request one commit github display straight ui example commit terminal look like open commit pull request github note github autofilled subjectbody message note summary long github truncate review pull request submitting hit submit sure look diff nt submit obvious error pas looking thing like typo syntax error debugging print statement left diff one last read really useful everyone struggle get code review done frustrating reviewer find thing like print statement diff might hesitant review code future obvious error make sure test pas project test try verify pas submit change annoying github nt make test passfailure state obvious submit hopefully project test convention make test command makefile instruction contributingmd automatic build via travis ci ca nt get test set seems like unrelated failure add separate issue explaining could nt get test running project clear guideline run test fail change sign nt paying close enough attention code review process nt great advice besides patience virtue b faster respond feedback easier go reviewer really read glen sanford excellent post code review ready merge okay someone gave lgtm time merge part code review process may ended bunch commits look like commits detritus prototype creative process nt part permanent record fix six month staring piece confusing code trying figure written way really want see commit message explaining change look like one say fix test two way get rid git amend commit new change part commit use git amend add change current commit nt need change message use git amend noedit map git alter git config git rebase want squash typo fix commits one steve klabnik good guide use script saved rb local branch z branch branchmaster fi branchref git symbolicref head devnull branchname branchref refsheads branchname branch echo switch branch first exit fi git checkout branch git pull origin branch git checkout branchname n git rebase branch else git rebase branch fi git push origin force branchname run rb master pull latest master origin rebase branch force push branch origin run rb master select squash squash commits one side effect rebasing resolve merge conflict developed time opened pull request merge time take headache away person merge help prevent mistake liked read available hire
703,Lobsters,vcs,Git & VCS,Blinking Commits,http://blog.annharter.com/2015/08/12/blinking-commits.html,blinking commits,like day old protocol make blinking commit message incomparable tom ballinger allie jones gonçalo morais,last time ugh blog dot jpg etc several many thousand internet people like day came read old protocol exciting gobsmacked nice thing everyone said unfortunately weird side effect making nearly impossible write anything new today omg excited aside begin literally reason ever ever stupid idea read make blinking commit message need git repo change commit purpose tutorial assuming write commit message vim like idk work emacs lmk kk get git thing staged party start git commit hit enter congratulation entered vim go insert mode hit ctrl v followed esc key like try ctrl v esc thing work tiny keystroke combo escape esc appeared screen make sure insert mode try pretty neat huh type commit message ctrl v esc type whole message look like yolo save commit et voilà git log see yolo party compatriot end six week hacker newsinduced writer block always thank reading thanks incomparable tom ballinger showing ansi escape sequence allie jones gonçalo morais help making page blink complaint addressed
704,Lobsters,vcs,Git & VCS,Minimizing merge conflicts in squashed branches,http://twolfson.com/2015-08-06-minimizing-merge-conflicts,minimizing merge conflict squashed branch,newest gitextras,pull request pr always focused single feature digestible eg maximum line changed reasoning requisite allows u identifycreate better abstraction make easier reviewing rereviewing change timely manner article guide managing branch nontrivialhigh velocity project eg lot changesprs occur frequently requires squashed commits consequence single feature pr sometimes need write dependent featuresprs eg abstract utility function use utility new feature example git structure would look like bbbbbb aaaaaa master ffffff landed look like master bbbbbb typical workflow like git rebase git commit amend git merge squash fall apart earlier pr need change example adding comment clarity bump commits master ffffff way lead hard debug merge conflict amateur example navigate first pr branch git checkout edit file echo clarifying comment filetxt update pr commit git add filetxt git commit amend noedit new commit push updated pr git push origin force navigate second pr branch git checkout merge past work sort merge conflict git merge git mergetool need update every file edited bbbbbb additionally hard know kept intended change example file indented would verify line change retained pr deep reviewing line code commit merge resolution git commit noedit squash commits via git rebase git rebase git rebase continue new commit push updated pr git push origin force solve problem going lean git ability handle nonsquashed merges well foundation solution use branch per new feature historical branch operates master branch feature typically named feature eg addhomepage squashed branch work historical branch commit typically named feature squashed eg addhomepagesquashed example workflow work build historical branch git checkout b feature echo hello file git add file git commit added hello file echo world git add git commit added world file generate squashed branch pr dev use b overwrite past squashed branch dev merge squash combine change feature commit git checkout b featuresquashed master git merge squash feature git commit added hello world file push squashed branch open pr featuresquashed master git push origin featuresquashed visualization git history featuresquashed aaaaaa feature master ffffff land pr look like master featuresquashed aaaaaa established historicalsquashed workflow let apply first example bbbbbb aaaaaa master ffffff purpose dependent pr going add one concept known base branch historical branch forked dependent branch example look like bbbbbb aaaaaa master ffffff reiterate content aaaaaa similarly bbbbbb building current git structure would look like build historical branch git checkout b echo hello file git add file git commit added hello file commit squash squashed branch git checkout b master git merge squash git commit added hello file commit aaaaaa open first pr git push origin mark origin git checkout b build historical branch git checkout b echo world git add git commit added world file commit squash squashed branch one base base git checkout b git merge squash git commit added world file commit bbbbbb open second pr git push origin land stack pr happens normal pr land first pr git checkout master git merge git push origin master land second pr git merge git push origin master nt land directly detect conflicting merges pr initial problem update first pr result look like master ffffff checkout first historical branch git checkout echo hello world file git add file git commit corrected file content commit update squashed branch still using b override branch git checkout b master git merge squash git commit added hello file commit force push squashed branch automatically update pr git push origin force navigate base second feature merge change git checkout git merge protip use git merge merge past branch handle merge conflict resolution merge commit git mergetool git commit verify difference base origin dev nice step branch verify gotchas git diff navigate second historical branch merge base change git checkout git merge protip use git merge merge past branch commit important point workflow let explain detail happening share common commit aaaaaa outside master known state branch agree merged new built new merge commit make sure change take priority newest merge new merge commit git respect past change however change new merge commit conflict set change since brought conflict conflict smaller possibly empty set typical rebase workflow anyway back code diff base make sure change expected exist git diff protip open github window skip diff verify look consistent protip feel something changed take diff squashed branch past commit compare diff diff git diff diffing diffs see line missedadded merging git diff newdiff git diff olddiff diff newdiff olddiff prefer copying clipboard writing file eg xclip selection c using diff tool sublime text eg filediffs change nt want use git checkout p branch us patch mode select bit branch git checkout p branch filepath last command specific file git reset p us patch mode unstage specific part staged change git stash p us patch mode stash specific part working directory git add p us patch mode stage specific part working directory overwrite base branch squash commit dev remove merge commit pr git checkout b squash branch second pr git checkout b git merge squash git commit added world file force push squashed branch automatically update pr git push origin force commit bbbbbb pr landed deployed clean branch via gitdeletebranch gitextras prefer cautious perform command find branch recently merged git checkout master git branch merged master generate grep find relevant branch git branch grep e run branch gitdeletebranch git branch grep e xargs gitdeletebranch order make life easier written tool use workflow gitsqwish git utility automate squashed branch generation git shortref git utility return name current branch define following global gitconfig alias shortref symbolicref short head used like git checkout b git shortref squashed
705,Lobsters,vcs,Git & VCS,Comparing Git Work Flows,https://www.atlassian.com/git/tutorials/comparing-workflows,comparing git work flow,successful git workflow centralized workflow work initialize central repository hosted central repository bitbucket cloud bitbucket server clone central repository git clone make change commit push new commits central repository managing conflict example john work feature mary work feature john publishes feature git push mary try publish feature mary rebases top john commit git pull mary resolve merge conflict git status git rebase mary successfully publishes feature go feature branch workflow common workflow feature branching feature branch workflow gitflow workflow gitflow workflow vincent driessen nvie forking workflow forking workflow guideline task tracking project management software shortlived branch minimize simplify reverts match release schedule summary feature branch workflow,git workflow recipe recommendation use git accomplish work consistent productive manner git workflow encourage user leverage git effectively consistently git offer lot flexibility user manage change given git focus flexibility standardized process interact git working team git managed project important make sure team agreement flow change applied ensure team page agreed upon git workflow developed selected several publicized git workflow may good fit team discussing workflow option array possible workflow make hard know begin implementing git workplace page provides starting point surveying common git workflow software team read remember workflow designed guideline rather concrete rule want show possible mix match aspect different workflow suit individual need successful git workflow evaluating workflow team important consider team culture want workflow enhance effectiveness team burden limit productivity thing consider evaluating git workflow workflow scale team size easy undo mistake error workflow workflow impose new unnecessary cognitive overhead team centralized workflow centralized workflow great git workflow team transitioning svn like subversion centralized workflow us central repository serve single pointofentry change project instead trunk default development branch called master change committed branch workflow require branch besides master transitioning distributed version control system may seem like daunting task change existing workflow take advantage git team develop project exact way subversion however using git power development workflow present advantage svn first give every developer local copy entire project isolated environment let developer work independently change project add commits local repository completely forget upstream development convenient second give access git robust branching merging model unlike svn git branch designed failsafe mechanism integrating code sharing change repository centralized workflow similar workflow utilization remote serverside hosted repository developer push pull form compared workflow centralized workflow defined pull request forking pattern centralized workflow generally better suited team migrating svn git smaller size team work developer start cloning central repository local copy project edit file commit change would svn however new commits stored locally completely isolated central repository let developer defer synchronizing upstream convenient break point publish change official project developer push local master branch central repository equivalent svn commit except add local commits already central master branch initialize central repository first someone need create central repository server new project initialize empty repository otherwise need import existing git svn repository central repository always bare repository working directory created follows ssh user host git init bare pathtorepogit sure use valid ssh username user domain ip address server host location like store repo pathtorepogit note git extension conventionally appended repository name indicate bare repository hosted central repository central repository often created party git hosting service like bitbucket cloud bitbucket server process initializing bare repository discussed handled hosting service hosting service provide address central repository access local repository clone central repository next developer creates local copy entire project accomplished via git clone command git clone ssh user hostpathtorepogit clone repository git automatically add shortcut called origin point back parent repository assumption want interact road make change commit repository cloned locally developer make change using standard git commit process edit stage commit familiar staging area way prepare commit without include every change working directory let create highly focused commits even made lot local change git status view state repo git add somefile stage file git commit commit file somefile remember since command create local commits john repeat process many time want without worrying going central repository useful large feature need broken simpler atomic chunk push new commits central repository local repository new change committed change need pushed share developer project git push origin master command push new committed change central repository pushing change central repository possible update another developer previously pushed contain code conflict intended push update git output message indicating conflict situation git pull first need executed conflict scenario expanded following section managing conflict central repository represents official project commit history treated sacred immutable developer local commits diverge central repository git refuse push change would overwrite official commits developer publish feature need fetch updated central commits rebase change top like saying want add change everyone else already done result perfectly linear history like traditional svn workflow local change directly conflict upstream commits git pause rebasing process give chance manually resolve conflict nice thing git us git status git add command generating commits resolving merge conflict make easy new developer manage merges plus get trouble git make easy abort entire rebase try go find help example let take general example typical small team would collaborate using workflow see two developer john mary work separate feature share contribution via centralized repository john work feature local repository john develop feature using standard git commit process edit stage commit remember since command create local commits john repeat process many time want without worrying going central repository mary work feature meanwhile mary working feature local repository using editstagecommit process like john care going central repository really care john local repository since local repository private john publishes feature john finish feature publish local commits central repository team member access git push command like git push origin master remember origin remote connection central repository git created john cloned master argument tell git try make origin master branch look like local master branch since central repository updated since john cloned result conflict push work expected mary try publish feature let see happens mary try push feature john successfully published change central repository use exact push command git push origin master since local history diverged central repository git refuse request rather verbose error message error failed push ref pathtorepogit hint update rejected tip current branch behind hint remote counterpart merge remote change eg git pull hint pushing hint see note fastforwards git push help detail prevents mary overwriting official commits need pull john update repository integrate local change try mary rebases top john commit mary use git pull incorporate upstream change repository command sort like svn pull entire upstream commit history mary local repository try integrate local commits git pull rebase origin master rebase option tell git move mary commits tip master branch synchronising change central repository shown pull would still work forgot option would wind superfluous merge commit every time someone needed synchronize central repository workflow always better rebase instead generating merge commit mary resolve merge conflict rebasing work transferring local commit updated master branch one time mean catch merge conflict commitbycommit basis rather resolving one massive merge commit keep commits focused possible make clean project history turn make much easier figure bug introduced necessary roll back change minimal impact project mary john working unrelated feature unlikely rebasing process generate conflict git pause rebase current commit output following message along relevant instruction conflict content merge conflict somefile great thing git anyone resolve merge conflict example mary would simply run git status see problem conflicted file appear unmerged path section unmerged path use git reset head somefile unstage use git addrm somefile appropriate mark resolution modified somefile edit file liking happy result stage file usual fashion let git rebase rest git add somefile git rebase continue git move next commit repeat process commits generate conflict get point realize idea going panic execute following command right back started git rebase abort mary successfully publishes feature done synchronizing central repository mary able publish change successfully git push origin master go see possible replicate traditional subversion development environment using handful git command great transitioning team svn leverage distributed nature git centralized workflow great small team conflict resolution process detailed form bottleneck team scale size team comfortable centralized workflow want streamline collaboration effort definitely worth exploring benefit feature branch workflow dedicating isolated branch feature possible initiate indepth discussion around new addition integrating official project common workflow centralized workflow essentially building block git workflow popular git workflow sort centralized repo individual developer push pull briefly discus popular git workflow extended workflow offer specialized pattern regard managing branch feature development hot fix eventual release feature branching feature branching logical extension centralized workflow core idea behind feature branch workflow feature development take place dedicated branch instead master branch encapsulation make easy multiple developer work particular feature without disturbing main codebase also mean master branch never contain broken code huge advantage continuous integration environment gitflow workflow gitflow workflow first published highly regarded blog post vincent driessen nvie gitflow workflow defines strict branching model designed around project release workflow add new concept command beyond required feature branch workflow instead assigns specific role different branch defines interact forking workflow forking workflow fundamentally different workflow discussed tutorial instead using single serverside repository act central codebase give every developer serverside repository mean contributor one two git repository private local one public serverside one guideline one size fit git workflow previously stated important develop git workflow productivity enhancement team addition team culture workflow also complement business culture git feature like branch tag complement business release schedule team using task tracking project management software may want use branch correspond task progress addition guideline consider deciding workflow shortlived branch longer branch life separate production branch higher risk merge conflict deployment challenge shortlived branch promote cleaner merges deploys minimize simplify reverts important workflow help proactively prevent merges reverted workflow test branch allowing merged master branch example however accident happen said beneficial workflow allows easy reverts disrupt flow team member match release schedule workflow complement business software development release cycle plan release multiple time day want keep master branch stable release schedule le frequent may want consider using git tag tag branch version summary document discussed git workflow took indepth look centralized workflow practical example expanding centralized workflow discussed additional specialized workflow key takeaway document onesizefitsall git workflow workflow simple enhance productivity team business requirement help shape git workflow read next git workflow check comprehensive breakdown feature branch workflow
706,Lobsters,vcs,Git & VCS,GitHub - Remove sensitive data,https://help.github.com/articles/remove-sensitive-data/,github remove sensitive data,removing sensitive data repository removing file repository history warning pushed commit github consider data contains compromised github support github premium support bfg repocleaner bfg repocleaner warning git tool stashing clone repository path file want remove filename note tagged release github support github premium support rebase note github desktop gitk,removing sensitive data repository commit sensitive data password ssh key git repository remove history entirely remove unwanted file repository history use either git filterbranch command bfg repocleaner open source tool git filterbranch command bfg repocleaner rewrite repository history change shas existing commits alter dependent commits changed commit shas may affect open pull request repository recommend merging closing open pull request removing file repository remove file latest commit git rm information removing file added latest commit see removing file repository history warning pushed commit github consider data contains compromised committed password change committed key generate new one article tell make commits sensitive data unreachable branch tag github repository however important note commits may still accessible clone fork repository directly via hash cached view github pull request reference ca nt anything existing clone fork repository permanently remove cached view reference sensitive data pull request github contacting github support github premium support bfg repocleaner tool built maintained open source community provides faster simpler alternative git filterbranch removing unwanted data example remove file sensitive data leave latest commit untouched run bfg deletefiles yourfilewithsensitivedata replace text listed passwordstxt wherever found repository history run bfg replacetext passwordstxt see bfg repocleaner documentation full usage download instruction warning run git filterbranch stashing change wo nt able retrieve change stash command running git filterbranch recommend unstashing change made unstash last set change stashed run git stash show p git apply r information see git tool stashing illustrate git filterbranch work show remove file sensitive data history repository add gitignore ensure accidentally recommitted nt already local copy repository sensitive data history clone repository local computer git clone http githubcomyourusernameyourrepository initialized empty git repository usersyourfilepathyourrepositorygit remote counting object done remote compressing object done remote total delta reused delta receiving object kib done resolving delta done navigate repository working directory cd yourrepository run following command replacing pathtoyourfilewithsensitivedata path file want remove filename argument note file sensitive data used exist path moved renamed must run command path well add file sensitive data gitignore ensure nt accidentally commit echo yourfilewithsensitivedata gitignore git add gitignore git commit add yourfilewithsensitivedata gitignore master add yourfilewithsensitivedata gitignore file changed insertion deletion doublecheck removed everything wanted repository history branch checked happy state repository forcepush local change overwrite github repository well branch pushed git push origin force counting object done delta compression using thread compressing object done writing object kib done total delta reused delta http githubcomyourusernameyourrepositorygit master master forced update order remove sensitive file tagged release also need forcepush git tag git push origin force tag counting object done delta compression using thread compressing object done writing object kib byte done total delta reused delta http githubcomyourusernameyourrepositorygit master master forced update contact github support github premium support asking remove cached view reference sensitive data pull request github tell collaborator rebase merge branch created old tainted repository history one merge commit could reintroduce tainted history went trouble purging time passed confident git filterbranch unintended side effect force object local repository dereferenced garbage collected following command using git newer git foreachref format delete refname refsoriginal git updateref stdin git reflog expire expirenow git gc prunenow counting object done delta compression using thread compressing object done writing object done total delta reused delta note also achieve pushing filtered history new empty repository making fresh clone github simple trick avoid committing thing nt want committed use visual program like github desktop gitk commit change visual program generally make easier see exactly file added deleted modified commit avoid catchall command git add git commit command git add filename git rm filename individually stage file instead use git add interactive individually review stage change within file use git diff cached review change staged commit exact diff git commit produce long nt use flag
707,Lobsters,vcs,Git & VCS,Lessons Learned Building a Git-Based Knowledge Base for my SaaS product,https://www.wisecashhq.com/blog/lessons-learned-creating-a-git-based-knowledge-base-for-my-saas-product,lesson learned building gitbased knowledge base saas product,tl dr knowledge base wisecash jekyll github free jekyll template get started kissmetrics public git repository knowledge base get knowledge base jekyll template motivation creating knowledge base profit center forecasting landing page careful knowledge base take time build freckle outsourcing kb saas app uservoice readmeio github separate repository invite people contribute easily without share whole application codebase jekyll include note warning hosted deployed github page according moz still better use subfolder rather subdomain seo reason subfolder get knowledge base deploy script lookandfeel layout inspiration layout embed image animation screenshot animation rich wisecash skitch reducing scale avoids blending image kb site much little jekyll include imageoptim wistia homepage animated loop licecap freetool generate animated gif scale using cs avoid content organization middleman table content jekyll goody liquid plugin little pagination system seo consideration cs trick autonumbering title automatically number guide step markdown trick faq table content generated automatically highlighted using cs target selector turn template comment powered disqus comment powered,tl dr built knowledge base cashflow forecasting saas app wisecash using jekyll github sharing jekyll template start well learned building post find free jekyll template get started inspired kissmetrics using public git repository knowledge base chosen make knowledge base template freely available use starting point product make sure tweak look look similar font cs color avoid reusing written content credit appreciated required enjoy share get knowledge base jekyll template motivation creating knowledge base several motivation build improving communication existing customer activating new feature need bit understanding brand new profit center forecasting building reference material link emailing tweeting anyone customer trial lifecycle email give bit detail people stumble landing page would like information wisecash work considering starting trial extent building keywordrich content seo today already referred kb quite bit fairly happy outcome already careful knowledge base take time build take time technical aspect discussing often production written content picture structure linking complete setup content page took reported freckle kbfrecklereportpng class imgresponsive said could started bit le content still get use outsourcing kb saas app product around uservoice readmeio could used said revenue huge also wanted great control customize thing want adding bit javascript thirdparty service color seo etc round decided keep thing homebaked hindsight fairly happy decision personal context github already use github work using separate repository allows invite people contribute easily without share whole application codebase could include technical writer anyone would spot typo etc spot error click link page create pullrequest right page thanks jekyll include also git general allows branching scripting versioning thing appreciate dearly developer super useful documentation effort note warning use technique make sure properly review pullrequests may since served domaine app let uncontrolled javascript come security reason hosted deployed initially attempted use github page deployment super easy setup felt supporting ssl properly important even knowledge base also considered deploying plugins issue since build kb locally investigated seo status realized according moz feb still better use subfolder rather subdomain seo reason ca nt tell many time seen actually tested first putting content subdomain moving back main domain moz reason decided simply publish kb content subfolder basecamp presumably sort loadbalancingreverseproxy front still possible traffic grows deploying using rake task part regular application deploy also deploy documentation without deploy application make sure reduce interruption service customer get knowledge base deploy script lookandfeel layout inspiration getting started scratch intimidating quoting justin wei true come finding remembered nice doc recently came across including end built layout yet doc helped brainstorm liked embed image animation knowledge base screenshot animation rich surprising since wisecash fairly visual application still image used skitch allows put pink arrow almost noone miss accountoverviewpng class imgresponsive noticed reducing scale avoids blending image kb site much wrote little jekyll include used imageoptim compress image especially since main server serve issue point also wanted feature animation app initially thought using wistia already use wistia paid customer notably homepage animated loop yet wanted something lightweight easy refer couple attempt various tool ended using licecap freetool generate animated gif page looking great tool work good enough concrete example setbankaccountbalancegif class imgresponsive style width pixelperfect completely bad either right note scale animation using jekyllassets tried generated much compression artifact blurry animation instead scale using cs avoid content organization hindsight started would maybe try middleman since seems better fit site like knowledgebase said decent level control use generate table content adding reviewing page easy allows nondeveloper wife associate contribute easily win jekyll goody easily link page based title alone without refer url reduce chance broken link wrote liquid plugin allows write link content title page target plugin turn syntax proper link referenced page based provided title also little pagination system completely messy way complicated could simplified bit work seo consideration anything fancy point also using subfolder setup recommended moz work part point cs trick autonumbering title basecamp us nice cs trick automatically number guide step using cs counterincrement reimplemented something similar allows declare markdown something something get automatically counterincrementpng class imgresponsive need define step number anymore markdown trick faq table content generated automatically using syntax replaced toc excluding content header toc linking item faq highlighted using cs target selector highlightpng class imgresponsive turn hope learned useful trick template also useful people know reduce friction getting started thanks reading thanks sharing article around still managing business cashflow spreadsheet must hurt right wisecash help rule finance iron fist without labor spreadsheet please enable javascript view comment powered disqus comment powered
708,Lobsters,vcs,Git & VCS,"Git 2.5, including multiple worktrees and triangular workflows",https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows,git including multiple worktrees triangular workflow,one git repository multiple working tree recommended improved support triangular workflow preparation atom editor main atom repository hacking performance improvement git large file storage go forth collaborate release note community page,open source git project released git take useful new feature git worktree one git repository multiple working tree difficult switch single git repository multiple branch create second local clone repository let work two branch simultaneously start longrunning test one clone continuing development however maintaining multiple clone repository mean extra work keep clone sync remote repository new git subcommand git worktree creates additional working tree connected existing git repository linked working tree pseudorepository checkedout working copy git actually file refers history reference main repository please note worktree feature experimental may bug interface may change based user feedback recommended use git worktree repository contains submodules suppose working git repository branch called feature user report highurgency bug master first create linked working tree new branch hotfix checked relative master switch directory git worktree add b hotfix hotfix originmaster enter hotfix identifier hotfix branch hotfix set track remote branch master origin switched new branch hotfix cd hotfix got new working tree branch hotfix checked ready go fix bug push hotfix create pull request committed change hotfix branch delete hotfix directory whenever like commits stored main repository cd main rm rf hotfix main repository associated linked working tree know keep getting way example allowed branch checked two linked working tree time would allow change committed one working tree bring one sync suppose want run longrunning test current commit create detached head state using detach option check current commit independent branch git worktree add detach test head enter test identifier test head add file cd test make superlongtest test running continue working main repository may heard older script called contribworkdirgitnewworkdir something similar script never made mainstream nonportable somewhat fiddly improved support triangular workflow contributing open source project common use called triangular workflow fetch canonical upstream repository keep local repository uptodate want share modification people push fork open pull request change accepted project maintainer merges upstream repository git many feature support triangular workflow sometimes hard see use together real life let take closer look triangular workflow including new command line shorthand reference push added git preparation suppose want contribute atom editor although likely push permission main atom repository fork repo push change fork set go main atom repository click fork creates new fork account url http githubcomyourusernameatom create local clone fork computer git clone http githubcomyourusernameatom cd atom git config remotepushdefault origin git config pushdefault current step remote called origin refers fork atom also set default remote push origin default push behavior current together mean type git push current branch pushed origin remote create second remote called upstream point main atom repository fetch git remote add upstream http githubcomatomatom git fetch upstream hacking follow step whenever want work new feature easily interact remote repository make sure local repository uptodate upstream repository git fetch upstream create branch whizbang upstream master work new feature check branch git checkout b whizbang upstreammaster automatically set local whizbang branch track upstream master branch mean commits added master upstream merge commits whizbang branch typing git pull rebase branch top new master typing git pull rebase ever unsure branch would pulled type git revparse abbrevref u hack commit hack commit push whizbang branch fork git push configuration whizbang current branch command need argument continue hack commit hack commit see commits added current branch since last push git log push us new push notation denotes current value remotetracking branch current branch would pushed git push namely originwhizbang also refer push destination arbitrary branch using notation whizbang push push new commits whizbang branch github fork git push unsure branch would pushed type git push dryrun git revparse abbrevref push performance improvement git includes performance improvement aimed large working tree working tree stored networked filesystems eg nfs run git updateindex untrackedcache enable experimental feature tell git examine modification time directory looking new file speed git status many filesystems git indexpack run example git gc make far fewer scan packedrefs directory make huge difference repository networked filesystem git call utime far le often reuse existing packed object also mostly benefit repository networked filesystems also cleansmudge filter longer required read input help speed filter need read whole file content work eg git large file storage go forth collaborate course many many change release full list check release note hope find something git make day little bit nicer best part magic open source git keep getting better better like get involved git open source community come check community page
709,Lobsters,vcs,Git & VCS,How to Write a Git Commit Message,http://chris.beams.io/posts/git-commit/,write git commit message,introduction seven rule tip introduction good commit message matter gem recent linux kernel git spring boot tim pope make point reducing style content metadata seven rule seven rule great git commit message said separate subject body blank line limit subject line character capitalize subject line end subject line period use imperative mood subject line wrap body character use body explain v separate subject body blank line manpage section pro git limit subject line character atomic commits capitalize subject line end subject line period char le use imperative mood subject line git us imperative whenever creates commit behalf properly formed git commit subject line always able complete following sentence subject line wrap body character finally gotten better use body explain v commit bitcoin core full diff tip learn love command line leave ide behind tab completion script read pro git pro git,introduction seven rule tip introduction good commit message matter browse log random git repository probably find commit message le mess example take look gem early day committing spring git log oneline author cbeams fri mar readding configurationpostprocessortests brief removal ignoreing testcglibclassesareloadedjustintimeforenhancement method turn one culprit recent build breakage classloader hacking cause subtle downstream effect breaking unrelated test test method still useful run manual basis ensure cglib prematurely classloaded run part automated build fixed two buildbreaking issue reverted classmetadatareadingvisitor revision eliminated configurationpostprocessortests investigation determines cause downstream test fail seemingly unrelated classpathxmlapplicationcontexttests tweak packageinfojava file consolidated util mutableannotationutils class existing asmutils polishing yikes compare recent commits repository git log oneline author pwebb sat aug fix failing compositepropertysourcetests rework propertysource early parsing logic add test importselector metadata update docbook dependency generate epub polish mockito usage would rather read former varies length form latter concise consistent former happens default latter never happens accident many repository log look like former exception linux kernel git great example look spring boot repository managed tim pope contributor repository know wellcrafted git commit message best way communicate context change fellow developer indeed future self diff tell changed commit message properly tell peter hutterer make point well reestablishing context piece code wasteful avoid completely effort go reducing much possible commit message exactly result commit message show whether developer good collaborator given much thought make great git commit message may case spent much time using git log related tool vicious cycle commit history unstructured inconsistent one spend much time using taking care get used taken care remains unstructured inconsistent wellcared log beautiful useful thing git blame revert rebase log shortlog subcommands come life reviewing others commits pull request becomes something worth suddenly done independently understanding something happened month year ago becomes possible efficient project longterm success rest among thing maintainability maintainer tool powerful project log worth taking time learn care one properly may hassle first soon becomes habit eventually source pride productivity involved post addressing basic element keeping healthy commit history write individual commit message important practice like commit squashing addressing perhaps subsequent post programming language wellestablished convention constitutes idiomatic style ie naming formatting variation convention course developer agree picking one sticking far better chaos ensues everybody thing team approach commit log different order create useful revision history team first agree commit message convention defines least following three thing style markup syntax wrap margin grammar capitalization punctuation spell thing remove guesswork make simple possible end result remarkably consistent log pleasure read actually get read regular basis content kind information body commit message contain contain metadata issue tracking id pull request number etc referenced fortunately wellestablished convention make idiomatic git commit message indeed many assumed way certain git command function nothing need reinvent follow seven rule way committing like pro seven rule great git commit message keep mind said separate subject body blank line limit subject line character capitalize subject line end subject line period use imperative mood subject line wrap body character use body explain v example summarize change around character le detailed explanatory text necessary wrap character context first line treated subject commit rest text body blank line separating summary body critical unless omit body entirely various tool like log shortlog rebase get confused run two together explain problem commit solving focus making change opposed code explains side effect unintuitive consequence change place explain paragraph come blank line bullet point okay typically hyphen asterisk used bullet preceded single space blank line convention vary use issue tracker put reference bottom like resolve see also separate subject body blank line git commit manpage though required good idea begin commit message single short le character line summarizing change followed blank line thorough description text first blank line commit message treated commit title title used throughout git example gitformatpatch turn commit email us title subject line rest commit body firstly every commit requires subject body sometimes single line fine especially change simple context necessary example fix typo introduction user guide nothing need said reader wonder typo simply take look change ie use git show git diff git log p committing something like command line easy use option git commit git commit fix typo introduction user guide however commit merit bit explanation context need write body example derezz master control program mcp turned evil become intent world domination commit throw tron disc mcp causing deresolution turn back chess game commit message body easy write option better writing message proper text editor already editor set use git command line read section pro git case separation subject body pay browsing log full log entry git log commit author kevin flynn kevin flynnsarcadecom date fri jan derezz master control program mcp turned evil become intent world domination commit throw tron disc mcp causing deresolution turn back chess game git log oneline print subject line git log oneline derezz master control program git shortlog group commits user showing subject line concision git shortlog kevin flynn derezz master control program alan bradley introduce security program tron ed dillinger rename chess program mcp modify chess program upgrade chess program walter gibbs introduce protoype chess program number context git distinction subject line body kick none work properly without blank line limit subject line character character hard limit rule thumb keeping subject line length ensures readable force author think moment concise way explain going tip hard time summarizing might committing many change strive atomic commits topic separate post github ui fully aware convention warn go past character limit truncate subject line longer character ellipsis shoot character consider hard limit capitalize subject line simple sound begin subject line capital letter example accelerate mile per hour instead accelerate mile per hour end subject line period trailing punctuation unnecessary subject line besides space precious trying keep char le example instead use imperative mood subject line imperative mood mean spoken written giving command instruction example clean room close door take trash seven rule reading right written imperative wrap body character etc imperative sound little rude often use perfect git commit subject line one reason git us imperative whenever creates commit behalf example default message created using git merge read using git revert revert add thing stuff reverts commit clicking merge button github pull request merge pull request someusersomebranch write commit message imperative following git builtin convention example refactor subsystem x readability update getting started documentation remove deprecated method release version writing way little awkward first used speaking indicative mood reporting fact commit message often end reading like fixed bug changing behavior x sometimes commit message get written description content fix broken stuff sweet new api method remove confusion simple rule get right every time properly formed git commit subject line always able complete following sentence applied commit subject line example applied commit refactor subsystem x readability applied commit update getting started documentation applied commit remove deprecated method applied commit release version applied commit merge pull request userbranch notice work nonimperative form applied commit fixed bug applied commit changing behavior x applied commit fix broken stuff applied commit sweet new api method remember use imperative important subject line relax restriction writing body wrap body character git never wrap text automatically write body commit message must mind right margin wrap text manually recommendation character git plenty room indent text still keeping everything character overall good text editor help easy configure vim example wrap text character writing git commit traditionally however ides terrible providing smart support text wrapping commit message although recent version intellij idea finally gotten better use body explain v commit bitcoin core great example explaining changed commit author pieter wuille pieterwuille gmailcom date fri aug simplify serializeh exception handling remove state exceptmask serializeh stream implementation well related method exceptmask always included failbit setstate always called bit failbit immediately raise exception get rid variable replace setstate direct exception throwing also remove dead code result good never reached failure call one test replaced eof fail clear n exception never called delete take look full diff think much time author saving fellow future committers taking time provide context would probably lost forever case leave detail change made code generally selfexplanatory regard code complex need explained prose source comment focus making clear reason made change first way thing worked change wrong way work decided solve way future maintainer thanks may tip learn love command line leave ide behind many reason git subcommands wise embrace command line git insanely powerful ides different way use ide every day intellij idea used others extensively eclipse never seen ide integration git could begin match ease power command line know certain gitrelated ide function invaluable like calling git rm delete file right stuff git rename one everything fall apart start trying commit merge rebase sophisticated history analysis ide come wielding full power git commandline way remember whether use bash zsh powershell tab completion script take much pain remembering subcommands switch read pro git pro git book available online free fantastic take advantage
710,Lobsters,vcs,Git & VCS,A Git Workflow Walkthrough - Reviewing Pull Requests,https://bocoup.com/weblog/git-workflow-walkthrough-reviewing-pull-requests/,git workflow walkthrough reviewing pull request,last time yannick finding pull request reviewing pr file change commenting issue dealing revision reviewing pull request locally,last time looked using feature branch make life easier would create feature branch make change push github review form pull requestnow pull request live someone review let walk step involved making process go quicklyin portion walkthrough pretend submitted pull request extremely talented coworker yannick reviewing let follow along finding pull requestsfirst need get pr project main page see pull request menu optionclick see list open pr sthe pull request submitted adding documentation project working together yannick select pr give lookreviewing pras reviewer yannick job check pr major issue comment smaller issue find code think goal thorough balance taking much timeon pr main page see pr description existing comment codestart understand scope requestnext check commits tab view useful get first pas change made pr give commit message associated change another reason use descriptive message skip file change tab start reviewingcommenting issuesso pr perfect expected review process make easy reviewer spot issue coder implement changesas reviewer add comment inline change preview github simply click little next line line issue withas pull request creator comment comment justify suggest future actionshere example yannick catch spot left old code accident removednice catch yannick follow indicating dealt branchthe communication code change go right inline code good feature code review githubdealing revisionswe decided modification need made original pull request submitter make modification update request pr process make pretty easy toolocally feature branch simply implement change fix problem commit changesthen push change remote branch case branch called doc assuming origin set main github repo git push origin doc pr automatically updated latest change yannick comment code affected new commit comment hidden defaultnext look pull pull request local machine time merely looking code web need run code ensure supposed tothen finish walkthrough series merging pull request dealing conflict occurpart reviewing pull request locally
711,Lobsters,vcs,Git & VCS,"CueKeeper internals: Experiences with Irmin, React, TyXML and IndexedDB",http://roscidus.com/blog/blog/2015/06/22/cuekeeper-internals-irmin/,cuekeeper internals experience irmin react tyxml indexeddb,cuekeeper gitting thing done browser getting thing done irmin table content reddit overview ocaml jsofocaml tyxml react sexplib irmin indexeddb markdown omd http compiling javascript jsofocaml ocamltar omd helpersjs using javascript apis lwt trace visualiser pikaday data structure uuid sexplib map subset polymorphic variant backwards compatibility irmin indexeddb backend indexeddb indexeddbmli indexeddblwtmli irminidbml appendonly readwrite branchconsistent database clean indexeddb transaction idbreadshtml revision merging random ckrevml react react functional reactive programming tyxml caml web cow tyxml reactive tyxml problem react debugging test case conclusion http next step interesting improvement tracing visualisation system acknowledgement,cuekeeper gitting thing done browser wrote cuekeeper getting thing done application run clientside browser store action gitlike datastore provided irmin allowing browse history revert change sync tab server backend available device several people asked technology used build blog cover cuekeeper screenshot click interactive version table content post also appeared reddit overview cuekeeper written ocaml compiled javascript using jsofocaml html produced using tyxml kept uptodate react note ocaml react facebook react record serialised using sexplib stored irmin local indexeddb database browser action description written markdown parsed using omd diagram main module make cuekeeper disknode defines ondisk data type representing stored item action project rev load item single git commit revision together represent state system point update keep track current branch head loading new version update also responsible writing change storage merge merge two branch using merge model query state extract information displayed eg list current action template render result html also us eg pikaday datepicker widget client main entry point javascript clientside part cuekeeper server currently development gitstorage provides gitlike interface irmin us irminidb backend store data browser using indexeddb plus little html storage crosstab notification full code available http compiling javascript generate javascript code ocaml first compile ocaml bytecode run jsofocaml result like testml let printendline hello ocaml ocamlc testml testbyte jsofocaml testbyte testjs test create html file load new testjs code open html file web browser testhtml doctype html html body p open browser javascript console see output p script type textjavascript src testjs script body html ocaml bytecode statically includes ocaml library us method also work complex realworld program many ocaml library used directly example used ocamltar create tar archive browser export feature omd markdown parser description ocaml code us external c function already provided need implement javascript case cuekeeper implement trivial function blitting block memory ocaml string bigarrays binprot buffer put helpersjs file added jsofocaml argument using javascript apis first attempt writing code browser lwt trace visualiser initially wrote desktop turned running browser matter replacing call cairo canvas call similar html canvas writing cuekeeper required learning bit mysterious world javascript dom also needed integrate pikaday date picker widget first declare ocaml class type javascript class define method want use like pikadayml class type pikaday object method getdate jsdate jst jsoptt jsmeth end class type config object method container domhtmlelement jst jsprop method onselect pikaday jsdate jst unit jsmethcallback jsprop method defaultdate jsdate jst jsoptdeft jsprop method setdefaultdate bool jst jsprop end say pikaday object getdate method return optional javascript date object config object provides property onselect callback pikaday object take date return nothing constructor built using jsunsafe let makeconfig config jst jsunsafeobj let pikadayconstr config jst pikaday jst jsconstr jsunsafeglobal pikaday type checked way know whether pikaday really implement interface defined however point everything pikaday statically checked definition jsofocaml provides syntax extension ocaml make using native javascript object easier object property read property object property value set property object method args call method note parenthesis around argument required unlike regular ocaml method call note also jsofocaml ignores underscore various place avoid difference javascript ocaml naming convention property start uppercase character example interesting way type inference used jsunsafeglobal take type ocaml infers type pikaday property pikaday constructor taking config use finally code creates new pikaday object pikadayml let make initial cktimeuserdate option onselect let div let elem tyxmljstodomofdiv div let config makeconfig config container elem config onselect jswrapcallback fun onselect touserdate begin match initial int int int option let jsdate jsnew jsdateday config defaultdate jsoptdefreturn jsdate config setdefaultdate jstrue none end let pd jsnew pikadayconstr config div pd create div element use container field pikaday config object onselect ocaml function handle result wrap jswrapcallback set javascript callback initial date given construct javascript date object set default finally create pikaday object return along containing div mean binding javascript apis easy thanks extra typechecking feel pleasant even using javascript library directly javascript data structure cuekeeper area project action share common set field defined using ocaml record ckdisknodeml type nodedetails parent ckidt sexpoption name string description string ctime float contact ckidt sexpoption conflict string sexplist sexp ckidt uuid unique string refer node using uuids renaming node require updating everything point simplifies merging record stored single file name file uuid conflict field used store message conflict resolved merging sexp annotation make use sexplib autogenerate code serialising deserialising structure use sexpoption sexplist rather option list provide slightly nicer output field omitted empty also rather lazily reuse structure contact context always keep parent contact none action project also need record extra data type projectdetails pstarred bool default false pstate active somedaymaybe done sexp type astate next waiting waitingforcontact waitinguntil cktimeuserdate future done sexp type actiondetails astarred bool default false astate astate context ckidt sexpoption repeat cktimerepeat sexpoption sexp project look like printed sexplibsexptostringhum hum suffix turn prettyprinting real code us plain tostring project pstarred false pstate active parent name make mirage unikernel description ctime note child node appear instead find parent field finally wrapped everything polymorphic variant type actionnode actiondetails nodedetails type projectnode projectdetails nodedetails type areanode nodedetails type contactnode nodedetails type contextnode nodedetails type action action actionnode type project project projectnode type area area areanode type contact contact contactnode type context context contextnode type generic area project action contact context useful part code often want deal subset type interface list type used operation ckdisknodemli val parent area project action ckidt option val starred project action bool val actionrepeat action cktimerepeat option say area project action parent project action starred action repeat using variant make easy module match different type example code generating process tree ckmodelml let makeprocesstree r let rec aux item mfold fun key item acc match item action acc project p nodeprojectstate p active acc area project let child aux rchildnodes item acc treenodeadd treenodeuniqueofnode child item item treenodechildmapempty aux rroots r action inactive project appear return accumulator unmodified area active project add node including recursive call get child one problem scheme return type modification ckdisknodemli val withconflict string generic withconflict msg node return copy node conflict message field extended given message type say work subset node type result subset example adding conflict repeat action result action adding message something could area project action result another area project action however work implement signature without using objmagic unsafe cast asked stackoverflow map subset polymorphic variant seems easy answer also experimented couple approach using gadts work support arbitrary subset function either handle specific node type node type eg project action using object avoided need unsafe cast required code elsewhere object work well fixed set operation want make easy add new kind thing gtd set type fixed operation report generation rendering different device merging openended backwards compatibility although release made various change format development never early check smooth upgrade possible besides recklessly using action tracker development like typing thing twice notice field withdefault annotation provides default value loading earlier version complex case possible write custom code example changed date representation one point unix timestamps calendar date provides intuitive behaviour moving timezones think code cktime handle cktimeml type userdate int int int sexpof let userdateofsexp let open sexplibtype function atom x ofsexp float x ofunixtime old format list x ofsexp int int int x implementation cktimeml use sexpof serialisation code created automatically us custom code deserialising interface cktimemli declare sexp code outside see anything special irmin next step write data irmin repository irmin provides fairly traditional keyvalue store api extra feature version control might useful existing application wanted gitlike api example irmin allows read file directly branch head browser another tab might update branch two read leading inconsistent result wanted something would force use atomic operation also irmin api still finalised wanted provide example api api wrapper used provide access feature one needed stagingt corresponds git staging area working directory mutable shared tab gitstoragesmli module staging sig type val list path path list lwtt val readexn path string lwtt val update path string unit lwtt val remove path unit lwtt val mem path bool lwtt end committ represents single immutable git commit check commit get staging area modify commit create new committ module commit sig type val checkout stagingt lwtt val commit parent list stagingt msg string lwtt val equal bool val history depth int logentryt logentrymapt lwtt val exporttar string lwtt end branch mutable pointer commit head represented reactive signal react later making easy follow update thing branch fastforward new commit module branch sig type val head committ option reactst val fastforwardto committ ok notfastforward lwtt end finally repositoryt represents repository whole look branch name commit hash module repository sig type val branch ifnew committ lwtt lazyt branchname brancht lwtt get named branch branch exist yet ifnew called get initial commit val commit committ option lwtt look commit hash val empty stagingt lwtt create empty checkout parent end thomas gazagnaire provided many useful update irmin let implement api atomic operation needed reliable fastforwardto support creating commits arbitrary parent needed custom merging described performance improvement important running browser indexeddb backend irmin provides git backend support normal git repository well simpler filesystem backend remote http backend inmemoryonly backend run irmin browser initially added backend html storage however html storage limited mb data since backend lacked compression eventually ran replaced support indexeddb jsofocaml support standardised html feature indexeddb come write binding pikaday indexeddb rather complicated compared local storage split across several module first defined javascript api indexeddbmli wrapped nicer ocaml api providing asynchronous operation lwt threading rather callback indexeddblwtmli made irmin backend us irminidbml irmin api backends little confusing first irmin gitlike repository internally consists two simpler store appendonly store store immutable blob file directory commits indexed hash readwrite store used record commit branch currently point provide implementation two apis irmin automatically provide full branchconsistent database api one problem moving indexeddb support notification get around cuekeeper update master branch point new commit also writes hash local storage open window tab get notified read new data indexeddb also found couple browser bug testing firefox seems clean indexeddb transaction though cause obvious problem practice safari however serious problem two thread tab try read database time one transaction fail able reproduce error line javascript see idbreadshtml page open test database creating single keyvalue pair exist attempt read value key ten time per second open two window safari one likely fail aborterror reported apple feedback form say respond feedback good word end added code sleep random period retry aborted read revision merging object project action contact etc cuekeeper file irmin change creates new commit model tends avoid race condition example edit title action press return cuekeeper create new commit update whose parent commit started editing merge commit master branch usually nothing else changed since started editing merge trivial merge however edited something else action time instead overwriting change cuekeeper merge change field two tab cuekeeper pick one value add merge conflict note telling change discarded try click image interactive page running two copy cuekeeper splitscreen merge code take three commits tip two branch merged optionalbutusuallypresent common produce resulting commit may include merge conflict note user check ckmergemli module make git gitstoragess r ckrevs type commit gitcommitt sig val merge base gitcommitt gitcommitt gitcommitt ok gitcommitt nothingtodo lwtt merge base merges change base return resulting merge commit val revert repo gitrepositoryt master gitcommitt gitstorageslogentryt ok gitcommitt nothingtodo error string lwtt revert master logentry return new commit master reverts change logentry end revert operation essentially merge except base commit commit undone single parent one branch current state separate operation api commit generates different format one parent give commit reverted log message wanted make sure merge code would always produce valid result eg parent field node point node exists merged version wrote unittest performs many merges random check result load without error first thought perform edits random get base commit make two branch perform random edits one realised edit valid state prettymuch valid state simpler approach generate three commits random little bit careful however three commits completely random uuids common merges trivial therefore uuids field value chosen small set candidate ensure often wrote test merge code wrote merge code deliberately failed implement required feature first check test caught possible failure test found problem automatically commit refers contact context exist project area child repeating action marked done action project area missing parent easy enough check case missed possible failure corresponds call bug ckrevml problem detected initially test cycle parent relation initially random state generator created node random id time bug irmin since fixed sort entry writing confused git tool using examine test result work around changed test code create node monotonically increasing id however would set parent previouslycreated node meant eg node could never parent node meant could never generate two commits parent relation way around easily fixed waitingforcontact action contact running iteration test fixed seed writing particular case triggered iteration would found eventually removed fixed seed help thing along added slowtest make target compiles test native code run iteration set run travis build still take second long every build long enough extra couple second compiling native code worth action parent another node one bit surprising trigger start base containing action project one branch make action child project action change convert project action project change bug present end one action child picked happens project change first branch change code merging node get called cope trying merge project action converting action project avoids bug node generated random chance every field base first branch would identical low fix generate random number start test iteration use bias creation three state many field shared enough trigger detection bug react ocaml react library provides support functional reactive programming idea represent mutable variable instead operating current value variable operate signal whole say want show live display number action traditional approach might let action ref let update show printfsprintf action action update remember call update whenever change action instead frp work signal whole let action setactions screate action smap printfsprintf action show action signal smap creates new string valued signal old int valued one show ensures current value signal displayed screen bit like using spreadsheet enter formula system ensures everything stay uptodate cuekeeper us signal place git commit tip branch description action currently selected tab etc tyxml initially tried generate html using caml web cow provides syntax extension embedding html code example wrote code render tree html something like let rec renderlist item html ul list listmap renderitem item ul renderitem name node child html li str name li renderlist child really suitable wanted though obvious way make update except regenerating whole thing setting innerhtml dom attribute also embedding another language syntax usually nice feature case html happy make exception come across tyxml given baffled documentation however spurred promise react integration started reading source code turned fairly simple every html element tyxml provides function name function take list child node argument optionally list attribute written way code look something like open let rec renderlist item ul listmap renderitem item listconcat renderitem name node child li pcdata name renderlist child compile though typically complicated error error expression type expression expected type type ul compatible type li second variant type allow tag ul eventually realised saying cow code wrong output item li name li ul ul browser accepted valid html ul need go inside li fact need let rec renderlist item ul listmap renderitem item renderitem name node child li pcdata name renderlist child shorter correct win tyxml also typechecks attribute example provide onclick attribute provide handler function wrong type get name attribute wrong use nonstandard attribute least without explicit use feature reactive tyxml module provides static element provides reactive one take signal attribute value child list update display automatically signal change mix freely eg static element reactive attribute example slightly simplified version code display tab along top open tyxmljs open open react let currentmode setmode screate work let x f smap f x let tab name mode let clicked ev setmode mode false let class currentmode fun current current mode active else li class aonclick clicked pcdata name let modeswitcher ul aclass ckmodeselector tab process process tab work work tab contact contact tab schedule schedule tab review review tab html ul element one li tab currentmode reactive signal currently selected mode initially work li reactive class attribute active mode equal current mode clicking tab set mode problem react experience using react easy write code short clear subtly wrong consider slightly contrived example show uptodate information many action completed let totalactions settotal reactscreate let completeactions setcomplete reactscreate let reactsbind let x f reactsmap f x let let completeactions function reactsconst nothing complete complete totalactions fun total threaddelay printfsprintf complete total complete total printfprintf update sn true let randomint let step reactstepcreate settotal step setcomplete step randomint reactstepexecute step done two signal representing total number action number complete connect completeactions signal function output one two signal either constant nothing complete signal complete action signal show number percentage complete string signal connected output function case print console update prepended loop end set total random number number complete random number le equal use ensure two signal updated atomically look reasonable right running work bit get slower slower run eventually failing one two way first totalactions signal ever becomes zero nonzero crash divisionbyzero update nothing complete update update update update nothing complete update update update update update nothing complete update update update update update fatal error exception divisionbyzero reason callback removed immediately completeactions nonzero attach callback track complete show percentage completeactions becomes zero callback continues run even though output longer used crash garbage collector eventually run old callback removed unfortunately also garbage collect callback print status update program simply stop producing new output point least happens native code javascript weak reference old callback never removed early version cuekeeper us react extensively scale back use due kind problem callback lifetime general workaround break reactive signal chain disconnected subgraphs garbagecollected individually example panel display eg showing detail action contains number signal name parent child etc used keep display uptodate signal updated using imperative code connecting signal irmin branch head close panel function updating signal become unreachable allowing immediately stop called thus make leak callback panel open closing return u clean state similar way tree view left column collection signal updated manually switching different tab allow freed ideal work think complete goal welldefined semantics react need stop relying weak reference imagine would possible define object sort signal live connected sink dependency something else let could replaced connection global sink rest program would behave expected thought much exactly would work though debugging another problem hit twice ocaml always optimises tail call javascript sure case matter jsofocaml turn code loop handle continuationpassing style sexplib omd failed parse larger document unpredictably suspect jit may affecting thing test case always trigger point case able modify code avoid problem conclusion cuekeeper used jsofocaml let write reliable typechecked ocaml code compile javascript jsofocaml surprisingly easy use provides standard dom apis easy extend apis pikaday indexeddb tyxml provides pleasant way generate html output checking compile time produce valid wellformed html functional reactive programming make easy define user interface always show uptodate information however problem signal leaking running longer needed due react reliance weak reference garbage collector clean old signal problem could fixed would ideal way write interactive application still useful must used care data structure defined ocaml de serialised automatically using sexplib library sexplib easy extend custom behaviour example support change format required minor patch work reliably browser application store data using filesystems relational database cuekeeper us irmin store data gitlike repository writing merge code somewhat tricky anyway want application support offline use multiple user done get racefree operation multitab support history revert free irmin extended new backends created one us indexeddb store data clientside browser standard rather new still browser bug watch seems working reliably full code available http next step hope get back working sync device made start server branch run sync service mirage unikernel access control yet use unless want share todo list whole world however got distracted interesting tcp bug connection would sometimes hang wondering caused made think way ask system thread resolve resulted interesting improvement tracing visualisation acknowledgement research leading result received funding european seventh framework programme ucn project grant agreement
712,Lobsters,vcs,Git & VCS,Git from the inside out by Mary Rose Cook,https://codewords.recurse.com/issues/two/git-from-the-inside-out,git inside mary rose cook,heavily annotated source code create project initialize repository add file make commit create tree graph create commit object point current branch new commit make commit first commit graph property graph property graph property graph property graph property graph property check commit create branch graph property check branch check branch incompatible working copy merge ancestor graph property merge descendent graph property merge two commits different lineage graph property graph property graph property graph property merge two commits different lineage modify file remove file copy repository link repository another repository fetch branch remote graph property graph property merge fetchhead pull branch remote clone repository push branch checkedout branch remote clone bare repository push branch bare repository summary,essay explains git work assumes understand git well enough use version control project essay focus graph structure underpins git way property graph dictate behavior looking fundamental build mental model truth rather hypothesis constructed evidence gathered experimenting api truer model give better understanding git done text structured series git command run single project interval observation graph data structure git built observation illustrate property graph behavior property produce reading wish go even deeper git look heavily annotated source code implementation git javascript create project mkdir alpha cd alpha user creates alpha directory project alpha mkdir data alpha printf datalettertxt move alpha directory create directory called data inside create file called lettertxt contains alpha directory look like alpha data lettertxt initialize repository alpha git init initialized empty git repository git init make current directory git repository creates git directory writes file file define everything git configuration history project ordinary file magic user read edit text editor shell say user read edit history project easily project file alpha directory look like alpha data lettertxt git object etc git directory content file collectively known working copy add file alpha git add datalettertxt user run git add datalettertxt two effect first creates new blob file gitobjects directory blob file contains compressed content datalettertxt name derived hashing content hashing piece text mean running program turn smaller piece text uniquely identifies original example git hash first two character used name directory inside object database rest hash used name blob file hold content added file notice adding file git save content object directory content still safe inside git user deletes datalettertxt working copy second git add add file index index list contains every file git told keep track stored file gitindex line file map tracked file hash content moment added index git add command run datalettertxt user make file called datanumbertxt contains alpha printf datanumbertxt working copy look like alpha data lettertxt numbertxt user add file git git add command creates blob object contains content datanumbertxt add index entry datanumbertxt point blob index git add command run second time datalettertxt datanumbertxt notice file data directory listed index though user ran git add data data directory listed separately alpha printf datanumbertxt alpha git add data user originally created datanumbertxt meant type make correction add file index command creates new blob new content update index entry datanumbertxt point new blob make commit alpha git commit master rootcommit user make commit git print data commit data make sense shortly commit command three step creates tree graph represent content version project committed creates commit object point current branch new commit object create tree graph git record current state project creating tree graph index tree graph record location content every file project graph composed two type object blob tree blob stored git add represent content file tree stored commit made tree represents directory working copy tree object record content data directory new commit blob lettertxt blob numbertxt first line record everything required reproduce datalettertxt first part state permission second part state content entry represented blob rather tree third part state hash blob fourth part state name second line record datanumbertxt tree object alpha root directory project tree data sole line tree point data tree tree graph commit graph root tree point data tree data tree point blob datalettertxt datanumbertxt create commit object git commit creates commit object creating tree graph commit object another text file gitobjects tree author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom first line point tree graph hash tree object represents root working copy alpha directory last line commit message commit object pointing tree graph point current branch new commit finally commit command point current branch new commit object current branch git go head file githead find say head pointing master master current branch head master ref ref label used git user identify specific commit file represents master ref exist first commit repository git creates file gitrefsheadsmaster set content hash commit object typing git command read hash commit different hash mine content object like blob tree always hash value commits include date name creator add head master git graph head pointing master master pointing commit head point master commit master exists point new commit object make commit first commit git graph commit working copy index included commit shown working copy index notice working copy index commit content datalettertxt datanumbertxt index head commit use hash refer blob object working copy content stored text different place alpha printf datanumbertxt user set content datanumbertxt update working copy leaf index head commit datanumbertxt set working copy alpha git add datanumbertxt user add file git add blob containing object directory point index entry datanumbertxt new blob datanumbertxt set working copy index alpha git commit master user commits step commit first new tree graph created represent content index index entry datanumbertxt changed old data tree longer reflects indexed state data directory new data tree object must created blob lettertxt blob numbertxt new data tree hash different value old data tree new root tree must created record hash tree data second new commit object created tree parent author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom first line commit object point new root tree object second line point parent find parent commit git went head followed master found commit hash third content master branch file set hash new commit commit git graph without working copy index graph property content stored tree object mean diffs stored object database look graph commit reuses blob made commit similarly whole directory change commit commit tree blob tree reused generally content change commit commit mean git store large commit history small amount space graph property commit parent mean repository store history project graph property ref entry point one part commit history another mean commits given meaningful name user organizes work lineage meaningful project concrete ref like git us symbolic ref like head mergehead fetchhead support command manipulate commit history graph property node object directory immutable mean content edited deleted every piece content ever added every commit ever made somewhere object directory graph property ref mutable therefore meaning ref change commit master point might best version project moment soon enough superseded newer better commit graph property working copy commits pointed ref readily available commits mean recent history easier recall also change often git fading memory must jogged increasingly vicious prod working copy easiest point history recall root repository recalling even require git command also least permanent point history user make dozen version file git record unless added commit head point easy recall tip branch checked see content user stash examine working copy time head frequently changing ref commit concrete ref point easy recall user simply check branch tip branch change le often head often enough meaning branch name changeable difficult recall commit pointed ref user go ref harder construct meaning commit back go le likely someone changed history since last looked check commit alpha git checkout detached head state user check commit using hash running git command one work use git log find hash commit checking four step first git get commit get tree graph point second writes file entry tree graph working copy result change working copy already content tree graph written head already pointing via master commit third git writes file entry tree graph index result change index already content commit fourth content head set hash commit setting content head hash put repository detached head state notice graph head point directly commit rather pointing master detached head commit alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit detached head user set content datanumbertxt commits change git go head get parent commit instead finding following branch ref find return hash commit git update head point directly hash new commit repository still detached head state branch commit point either one descendant mean easy lose tree blob mostly omitted graph diagram commit branch create branch alpha git branch deputy user creates new branch called deputy creates new file gitrefsheadsdeputy contains hash head pointing hash commit graph property branch ref ref file mean git branch lightweight creation deputy branch put new commit safely branch head still detached still point directly commit commit deputy branch check branch alpha git checkout master switched branch master user check master branch first git get commit master point get tree graph commit point second git writes file entry tree graph file working copy set content datanumbertxt third git writes file entry tree graph index update entry datanumbertxt hash blob fourth git point head master changing content hash master checked pointing commit check branch incompatible working copy alpha printf datanumbertxt alpha git checkout deputy change file would overwritten checkout datanumbertxt commit change stash switch branch user accidentally set content datanumbertxt try check deputy git prevents check head point master point datanumbertxt read deputy point datanumbertxt read working copy version datanumbertxt read version different difference must resolved git could replace working copy version datanumbertxt version commit checked avoids data loss cost git could merge working copy version version checked complicated git abort check alpha printf datanumbertxt alpha git checkout deputy switched branch deputy user notice accidentally edited datanumbertxt set content back check deputy successfully deputy checked merge ancestor alpha git merge master already uptodate user merges master deputy merging two branch mean merging two commits first commit one deputy point receiver second commit one master point giver merge git nothing report already uptodate graph property series commits graph interpreted series change made content repository mean merge giver commit ancestor receiver commit git nothing change already incorporated merge descendent alpha git checkout master switched branch master user check master master checked pointing commit alpha git merge deputy fastforward merge deputy master git discovers receiver commit ancestor giver commit fastforward merge get giver commit get tree graph point writes file entry tree graph working copy index master point commit deputy fastforward merged master graph property series commits graph interpreted series change made content repository mean merge giver descendent receiver history changed already sequence commits describe change make sequence commits receiver giver though git history change git graph change concrete ref head point updated point giver commit merge two commits different lineage alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user set content numbertxt commits change master alpha git checkout deputy switched branch deputy alpha printf b datalettertxt alpha git add datalettertxt alpha git commit deputy user check deputy set content datalettertxt b commit change deputy committed master committed deputy deputy checked graph property commits share parent mean new lineage created commit history graph property commits multiple parent mean separate lineage joined commit two parent merge commit alpha git merge master merge made recursive strategy user merges master deputy git discovers receiver giver different lineage make merge commit process eight step first git writes hash giver commit file alphagitmergehead presence file tell git middle merging second git find base commit recent ancestor receiver giver commits common base commit graph property commits parent mean possible find point two lineage diverged git trace backwards find ancestor backwards find ancestor find recent ancestor shared lineage base commit third git generates index base receiver giver commits tree graph fourth git generates diff combine change made base receiver commit giver commit diff list file path point change add remove modify conflict git get list file appear base receiver giver index one compare index entry decide change make file writes corresponding entry diff case diff two entry first entry datalettertxt content file base b receiver giver content different base receiver base giver git see content modified receiver giver diff entry datalettertxt modification conflict second entry diff datanumbertxt case content base receiver different giver diff entry datalettertxt also modification graph property possible find base commit merge mean file changed base receiver giver git automatically resolve merge file reduces work user must fifth change indicated entry diff applied working copy content datalettertxt set b content datanumbertxt set sixth change indicated entry diff applied index entry datalettertxt pointed b blob entry datanumbertxt pointed blob seventh updated index committed tree parent parent author mary rose cook mary maryrosecookcom committer mary rose cook mary maryrosecookcom notice commit two parent eighth git point current branch deputy new commit merge commit resulting recursive merge merge two commits different lineage modify file alpha git checkout master switched branch master alpha git merge deputy fastforward user check master merge deputy master fastforwards master commit master deputy point commit deputy merged master bring master latest commit alpha git checkout deputy switched branch deputy alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit deputy user check deputy set content datanumbertxt commit change deputy alpha git checkout master switched branch master alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user check master set content datanumbertxt commit change master commit deputy commit master alpha git merge deputy conflict datanumbertxt automatic merge failed fix conflict commit result user merges deputy master conflict merge paused process conflicted merge follows first six step process unconflicted merge set gitmergehead find base commit generate index base receiver giver commits create diff update working copy update index conflict seventh commit step eighth ref update step never taken go step see happens first git writes hash giver commit file gitmergehead mergehead written merge second git find base commit third git generates index base receiver giver commits fourth git generates diff combine change made base receiver commit giver commit diff list file path point change add remove modify conflict case diff contains one entry datanumbertxt entry marked conflict content datanumbertxt different receiver giver base fifth change indicated entry diff applied working copy conflicted area git writes version file working copy content datanumbertxt set head deputy sixth change indicated entry diff applied index entry index uniquely identified combination file path stage entry unconflicted file stage merge index looked like stage value datalettertxt datanumbertxt merge diff written index index look like datalettertxt datanumbertxt datanumbertxt datanumbertxt entry datalettertxt stage merge entry datanumbertxt stage gone three new entry place entry stage hash base datanumbertxt content entry stage hash receiver datanumbertxt content entry stage hash giver datanumbertxt content presence three entry tell git datanumbertxt conflict merge pause alpha printf datanumbertxt alpha git add datanumbertxt user integrates content two conflicting version setting content datanumbertxt add file index git add blob containing adding conflicted file tell git conflict resolved git remove datanumbertxt entry stage index add entry datanumbertxt stage hash new blob index read datalettertxt datanumbertxt alpha git commit master seventh user commits git see gitmergehead repository tell merge progress check index find conflict creates new commit record content resolved merge deletes file gitmergehead completes merge eighth git point current branch master new commit merge commit resulting conflicted recursive merge remove file diagram git graph includes commit history tree blob latest commit working copy index working copy index commit tree graph alpha git rm datalettertxt rm datalettertxt user tell git remove datalettertxt file deleted working copy entry deleted index datalettertxt rm ed working copy index alpha git commit master user commits part commit always git build tree graph represents content index datalettertxt included tree graph index commit made datalettertxt rm ed copy repository alpha cd cp r alpha bravo user copy content alpha repository bravo directory produce following directory structure alpha data numbertxt bravo data numbertxt another git graph bravo directory new graph created alpha cp ed bravo link repository another repository cd alpha alpha git remote add bravo bravo user move back alpha repository set bravo remote repository alpha add line file alphagitconfig remote bravo url bravo line specify remote repository called bravo directory bravo fetch branch remote alpha cd bravo bravo printf datanumbertxt bravo git add datanumbertxt bravo git commit master user go bravo repository set content datanumbertxt commit change master bravo commit bravo repository bravo cd alpha alpha git fetch bravo master unpacking object bravo branch master fetchhead user go alpha repository fetch master bravo alpha process four step first git get hash commit master pointing bravo hash commit second git make list object commit depends commit object object tree graph ancestor commits commit object tree graph remove list object alpha object database already copy rest alphagitobjects third content concrete ref file alphagitrefsremotesbravomaster set hash commit fourth content alphagitfetchhead set branch master bravo indicates recent fetch command fetched commit master bravo alpha bravomaster fetched graph property object copied mean history shared repository graph property repository store remote branch ref like alphagitrefsremotesbravomaster mean repository record locally state branch remote repository correct time fetched go date remote branch change merge fetchhead alpha git merge fetchhead updating fastforward user merges fetchhead fetchhead another ref resolve commit giver head point commit receiver git fastforward merge point master commit alpha fetchhead merged pull branch remote alpha git pull bravo master already uptodate user pull master bravo alpha pull shorthand merge git two command report master already uptodate clone repository alpha cd git clone alpha charlie cloning charlie user move directory clone alpha charlie cloning charlie similar result cp user produce bravo repository git creates new directory called charlie inits charlie git repo add alpha remote called origin fetch origin merges fetchhead push branch checkedout branch remote cd alpha alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master user go back alpha repository set content datanumbertxt commit change master alpha alpha git remote add charlie charlie set charlie remote repository alpha alpha git push charlie master writing object remote error refusing update checked branch refsheadsmaster make index work tree inconsistent push master charlie object required commit copied charlie point push process stop git ever tell user went wrong refuse push branch checked remote make sense push would update remote index head would cause confusion someone editing working copy remote point user could make new branch merge commit push branch charlie really want repository push whenever want want central repository push pull one commits directly want something like github remote want bare repository clone bare repository alpha cd git clone alpha delta bare cloning bare repository delta user move directory clone delta bare repository ordinary clone two difference config file indicates repository bare file normally stored git directory stored root repository delta head config object ref alpha delta graph alpha cloned delta push branch bare repository cd alpha alpha git remote add delta delta user go back alpha repository set delta remote repository alpha alpha printf datanumbertxt alpha git add datanumbertxt alpha git commit master set content datanumbertxt commit change master alpha commit alpha alpha git push delta master writing object delta master master push master delta pushing three step first object required commit master branch copied alphagitobjects deltaobjects second deltarefsheadsmaster updated point commit third alphagitrefsremotesdeltamaster set point commit alpha uptodate record state delta commit pushed alpha delta summary git built graph almost every git command manipulates graph understand git deeply focus property graph workflow command learn git investigate git directory scary look inside change content file see happens create commit hand try see badly mess repo repair
713,Lobsters,vcs,Git & VCS,The Problem With Putting All the World's Code in GitHub,http://www.wired.com/2015/06/problem-putting-worlds-code-github/,problem putting world code github,largest collection human knowledge time biggest collection open source software rumor unicorn sourceforge cautionary tale dhi holding gimp declared vlc notepad wine ad git goodness gitlab,ancient library alexandria may largest collection human knowledge time scholar still mourn destruction risk devastating loss diminished somewhat advent printing press still rise internet yet centralized repository specialized information remain threat catastrophic losstake github examplegithub recent year become world biggest collection open source software made invaluable education business resource beyond providing installers countless application github host source code million project meaning anyone read code used create application github also archive past version source code possible follow development particular piece software see came together made irreplaceable teaching toolthe odds github meeting fate similar library alexandria slim indeed rumor github soon see new round funding place company value billion ensure financially least github stay standingbut github pending emergence silicon valley latest unicorn hold certain irony ideal open source software center freedom sharing collective polar opposite venture capitalist seeking multibilliondollar exit whatever stated principle github immense pressure sustainable business profit motif community ideal clash especially software world end result nt always prettysourceforge cautionary talesourceforge another popular hub open source software predates github nearly decade place find open source code github grew popularthere many reason github ascendance sourceforge nt helped cause year since career service outfit dhi holding acquired user lamented spread thirdparty ad masquerade download button tricking user downloading malicious software sourceforge tool enable user report misleading ad problem persisted part team behind gimp popular open source alternative adobe photoshop quit hosting software sourceforge trying make nice sourceforge stirred hostility earlier month declared gimp project abandoned began hosting mirror installer file without permission compounding problem sourceforge bundled installers third party software called adware malware prompted project including popular medium player vlc code editor notepad wine tool running window apps linux o x abandon shipit hard say many project truly fled sourceforge site tendency mirror certain project nt count fork project developer use make tweak code submitting main may still host nearly many project github say bill weinberg black duck software track analyzes open source softwarebut damage sourceforge reputation may already done gaurav kuchhal managing director division dhi holding handle sourceforge say company stopped mirroring program bundle installers project whose originator explicitly opt addons misleading download ad likely continue game whackamole long sourceforge keep running thirdparty ad hunt revenue sourceforge looking le like important collection human knowledge like plundered museum full dangerous trapsno ad github natural defense ending like never adsupported business post code publicly github service free incentivizes codesharing collaboration pay keep code private github also make money offering tech company private version github worked well facebook google microsoft thisstill hard tell much money company make model certainly saying yes world largest software company customer also host million open source project free charge without ad offset cost storage bandwidth service layered top repos investor want return eventually acquisition ipo happens guarantee new owner shareholder keen offering adfree loss leader company enterprise servicesother freemium service raised large round funding like box dropbox face similar pressure box even since going public earlier year github convenient place store file web cornerstone software key repository opensource code crucial body knowledge amassing much knowledge one place raise specter catastrophic crash burn disastrous decay hand greedy owner loading site malwareyet github defense mechanism librarian ancient alexandria library also hub nt gitgit goodnessthe git part github open source technology help programmer manage change code basically team place master copy code central location programmer make copy computer programmer periodically merge change master copy repository remains canonical version projectgit versioning make managing project much easier multiple people must make change original code also interesting side effect everyone work github project end copy computer everyone borrowed book library could keep copy forever even returning github vanished entirely could rebuilt using individual user copy project would take age accomplish could donestill work would painful addition source code github also home countless comment bug report feature request mention rich history change decentralized nature git make far easier migrate project host gitlab open source alternative github run serverin short github know went away future financial pressure became inferior version world code survive library nt end alexandria question ultimately whether github find way stay true ideal generating wind stuff legend
716,Lobsters,vcs,Git & VCS,Unpacking Git packfiles,https://codewords.recurse.com/issues/three/unpacking-git-packfiles,unpacking git packfiles,gitgo packfile motivation enter packfiles parsing packfiles ignore extra byte added end valid zlibcompressed data stream language similar issue idx file documentation cyclic redundancy check searching packfiles packfiles revisited applying delta un packing together,working gitgo implementation git pure go encountered puzzling issue gitgo test dogfood mean test parsing object use git repository gitgo worked fine day pairing partner wanted work computer instead mine pushed code remote repository could check immediately noticed test suddenly started failing computer complaining commit object exist sure enough commits missing gitobjects yet still able check supposedly missing commits machine using git going wrong commit object stored different location packfiles packfile motivation git built fast one reason git checkout fast actually store diffs instead git store actual raw content every file commit us calculate diffs onthefly data start quickly add size git three thing reduce space disk first compress file storing using zlib zlib reduces footprint file still quick decompress version control software wanted able reference previous version work might simply create zip archive directory every day makeshift although git us different compression algorithm almost exactly second way git save disk space deduplication technique remove redundant data creating new commit git hash content tracked file within commit compare hash object already hash match existing hash git store new content file git mv act like regular mv followed git add new file git rm old one git actually need know moved file need know file different name whose content happens previously tracked file problem though hashing function designed avalanche changing single bit input hashing function yield completely different output echo quick brown fox jumped lazy dog echo quick brown fox jumped lazy dog echo quick brown fox jumped lazy dogz even two file mostly match difference git think completely different problem never plan modifying code write point bother using version control first place turn problematic many project zlib compression quite powerful disk space cheap enough git happy use nothing two technique quite one thing quite cheap bandwidth even isp charge permegabyte still care long take clone push pull git meant fast taking lot data similarbutnotquiteidentical compressing transmitting wire slow enter packfiles count packfiles third strategy git us reduce disk space usage even though packfiles really created reduce network usage increase network performance helpful keep mind design packfiles informed goal making network usage easy reducing disk space needed pleasant side effect check packfiles git repository looking gitobjectspack looking repository created directory may empty packfiles usually created first time push pull fetch clone small mediumsized repository likely see single packfile along corresponding index file l gitobjectspack notice name file match except extension pack file contains actual git object idx file contains index used quickly locate object within pack file see object contained pack git commandline tool git verifypack v commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit commit entry ommitted brevity object packfile either deltified nondeltified deltification mean git store special diff instead storing whole object normal diffs reference base object describe series action eg insert delete typechange applied base object order create new result delta work similarly except meant humanreadable action describe different deltified object easy spot git verifypack output one extra sha end instead storing entire object store delta object sha end tell u base object case stored delta base object base object may also deltified allows multiple layer deltification reducing total size even deltified object secondtolast field right base object name indicates depth object two layer deltification base object also delta second base object get thrown hexadecimal name root pun intended recursive data structure parsing packfiles packfiles mostly selfcontained fact possible parse packfile without index file index file merely convenience performance packfile start byte metainformation end checksum use verify result first four byte spell next four byte contain version number case next four byte tell u number object contained pack therefore single packfile contain object although single repository may contain multiple packfiles final byte file checksum previous data file heart packfile series data chunk metainformation preceding one thing get interesting metainformation formatted slightly differently depending whether data chunk come deltified case begin telling u size object packfile contains size encoded variablelength integer special format integer variable length first bit byte also called msb significant reserved bit tell u whether next byte belongs part variablelength integer decoding read next byte easy way check check byte le binary first byte integer contains one extra piece information type object follows six defined type mean information fit three bit three bit msb used designate information nondeltified type data follows metainformation zlibcompressed object data handle like handle normal git object variablelength integer tell u expected size object object inflated decompressed decompress object know much data read turn zlib pretty robust ignore extra byte added end valid zlibcompressed data stream zlib able compressed data begin header since implementing inflate function scratch treat binary data black box however problem decompress first object long give zlib data need know second object begin turn approach using far zlib library buffer input feed greedily result simply measure number byte zlib library input may request read byte end using problem exclusive go either language similar issue idx file come tell u object begin idx file possible work around aforementioned buffering issue parse packfile without ever reading idx file index make lot easier like packfile version index file start header though index file header eight byte instead first four byte always chosen first version index file header information four byte would invalid start version index file next four byte denote version number explicitly case version header encounter git call fanout table first level entry table series entry four byte byte long total according documentation nth entry table record number object corresponding pack first byte whose object name le equal break example remember object name shas usually read first entry fanout table eventually expect find four object whose object name begin second entry fanout table also mean expect find zero object whose object name being total cumulative already four object whose name begin entry first whose value greater value mean find exactly eight object whose name begin remember object name use base table entry last entry tell u many object object name begin ff onebyte hexadecimal value le since largest value fit single byte last entry tell u many object expect total second layer fanout table contains object name order already know many expect first layer fanout table third layer fanout table give u fourbyte cyclic redundancy check value object remember packfiles optimized use across network important able check data get corrupted transfer fourth layer contains information looking packfile offset object also four byte per entry packfile le gb msb value remaining bit contain packfile offset otherwise offset may large fit byte case offset actually stored fifth layer msb fourth layer object remaining bit offset fifth layer offset packfile found fifth final layer present packfiles larger present contain series entry encode offset packfile mentioned fourth layer indicate entry fifth layer correspond object element fourth layer msb set remaining bit element specify element fifth layer contain packfile offset object end fanout table index file end checksum packfile checksum entire index file searching packfiles point may wondering git us convoluted format format may difficult read make possible use binary search locate particular object idx file multiple packfiles way find particular object search one binary search crucial speed furthermore remember packfiles idx file motivated network performance dense packfiles little redundant information either packfile index file information packed every byte every bit packfiles revisited know every object packfile start decode rest packfile nondeltified object actual data zlibcompressed object data two kind deltified object type objrefdelta reference delta object object metainformation already parsed earlier followed name base object remember delta analogous diffs need know reference point diff apply name find zlibcompressed delta data handle shortly however even wasteful git added objofsdelta offset delta object instead base object name another variablelength integer msb tell u last byte integer integer represents negative offset tell u many byte scan backwards current packfile order find base object negative offset followed zlibcompressed delta data objrefdelta applying delta almost done read entire index file packfile bunch base object delta object thing still need apply delta base object reconstruct missing object delta begin source target length encoded variablelength integer useful error checking essential series instruction may either msb msb copy instruction signal copy consecutive chunk byte base object output two number necessary perform operation location offset first byte copy number byte copy stored littleendian variablelength integer copy instruction however content compressed even though byte offset integer git includes nonzero byte save space last four bit copy instruction signal many byte read mean git could store number single byte example say last four byte copy instruction next two byte mean byte offset copy length interpreted way middle three bit instruction signifying whether advance cursor last four bit signify whether advance cursor constructing byte offset insert instruction even easier insert instruction number byte copy delta object output since insert instruction msb set maximum number byte insert instruction mean read next byte delta object copy output un packing together parsed packfile packfiles one part git read written commandline except using plumbing tool people use git even know exist let alone read become comfortable packfiles ready pretty much everything git throw way
717,Lobsters,vcs,Git & VCS,From generic tools to a custom server: 30k% faster,https://www.clever-cloud.com/blog/engineering/2015/06/09/git-server-30k-improvement/,generic tool custom server faster,bit background first gitolite managing gitolite configuration amqp drawback gitolite new etilotig ssh key management repository management authorization conclusion term condition marcantoine perennou,clever cloud git core deployment process year need evolved especially term performance dealt bit background first started clever cloud chose use gitolite manage git repository appeared complete functional solution used internally first managing internal repository even product nt released yet several month testing convinced really good solution chose go managing gitolite configuration gitolite primary designed configured manually sysadmin describe every user group user repository configuration file gitolite use file generate internal stuff dealing access right gitolite ensures repository created hook propagated need automatic reconfiguration quite obvious reason therefore developed tool called etilotig aim keep gitolite configuration date startup tool would load initial configuration api listen amqp event update configuration cache write new gitolite configuration accordingly worked actually quite well longer expected used production may drawback gitolite gitolite great major drawback nt happy previously said nt meant dynamically configurable required nontrivial hack required duplicating configuration api gitolite repository created directory repository creation full pas repository check whether hook date rewriting part configuration nt trivial ended rewriting change problem annoying critical beginning became quite interesting u fact repository created directory huge performance issue number repository become really high actually dropped part check hook repository creation gitolite code back took half time gitolite internal configuration regeneration update new etilotig gitolite used efficient lately lot performance problem depending timing event could take five minute create new repository went far beyond acceptable limit find another solution idea simple drop gitolite totally improve configuration management tool etilotig needed checklist needed accomplish quite tiny ssh key management authorization management repository creation hook installation ssh key management goal manage gitolite configuration etilotig forwarded gitolite turn handled manage authorizedkeys file basically write new one time ssh key added removed replace old one new one line printed command authscript userid noportforwarding noagentforwarding nopty publickey authscript pointing authorization script speak later userid user id key owner publickey public key authorization script thus called user id first parameter solves first point todo list repository management startup etilotig writes bash configuration file defining basic thing directory repository created tiny bash script charge repository creation create deeper directory hierarchy get repository possible per directory say make thing waaaaay faster binbash createrepo local repodir mkdir p repodir pushd repodir devnull git init bare popd devnull main local repo local repodir repodir reposdir repo repodir hook createrepo repodir home etilotigetilotigrc main another one hook installation binbash shopt nullglob main local repo local repodir repodir reposdir repo hook home etilotighooks ln sf hook repodir hook done home etilotigetilotigrc main two simple script call repository startup ensure everything ok repository creation solves two four point todo list one left authorization goal duplicate configuration anymore rather use configuration api thus externalising whole thing dropping configuration management etilotig reduced size way etilotig manages authorization quite simple generates internal configuration actually generates perl script called ssh connection attempt script authorises transaction made similar script print user information repository access run ssh git pushparclevercloudcom check authorized try git pushpull reject request look like extra stuff added binbash sanitycheck z sshconnection echo hell exit fi z sshoriginalcommand export sshoriginalcommand info fi askforinfo local userid make request api retrieve user info message echo info askforauthorization local userid local appid make request return http status code mean authorized echo authorize local userid local verb local appid local case verb gitreceivepack gituploadpack local code code askforauthorization userid appid code esac return ret finalabort echo trying achieve exit main sanitycheck local userid local verb local repo local repodir verb echo sshoriginalcommand cut f repo echo sshoriginalcommand cut f tr repo repo repodir reposdir repo verb info askforinfo userid elif authorize userid verb repo export ccuser userid export ccnotifyscript home etilotigsendpushevent exec verb repodir else finalabort fi home etilotigetilotigrc main place nearly everything ready two tiny hook top allow user push master branch trigger deployment git push hooksupdate binbash main local rev rev refstags exit fi rev refsheadsmaster echo tried push custom branch echo master allowed exit fi main hookspostupdate binbash sanitycheck local rev rev refstags exit fi main local rev sanitycheck rev local repo basename pwd local appid repogit local commitid git revparse rev ccnotifyscript appid commitid ccuser echo success application successfully queued redeploy main conclusion new git server manager running work pretty well performance gain went minute le second per action dropping whole gitolite codebase reducing size etilotig average performance gain gitolite useful utilisation codebase better comprehend whole authentication mechanism great thanks awesome tool gitolite dead long live etilotig free signup feel coding productivity brand new project scale clicking get started agree clever cloud term condition marcantoine perennou sre clevercloud exherbo sourcebased linux distribution core developer clever cloud cofounder linux kernel contributor
718,Lobsters,vcs,Git & VCS,MetroGit,https://github.com/vbarbaresi/MetroGit,metrogit,branch commit merge tramway rer réseau express régional,git repository contains metro station paris thanks ratp open data visualize result many way example metro line represented branch commit corresponds station commits empty allowempty option metadata repository readme file merge connection one line use octopus merges interconnection first version remove interconnection cycle second version would dig deeply try remove least possible connection third version would add tramway station rer station réseau express régional ultimately bus station still error incorrect merges left
719,Lobsters,vcs,Git & VCS,GitUp,http://gitup.co/,gitup,fullfeatured quick key gitup get way,fullfeatured rewrite split delete reorder commits fixup squash cherrypick merge lightningfast quick key gitup put power fingertip surf repo make change rewind back short keystroke gitup get way write code meditate arcane git incantation
720,Lobsters,vcs,Git & VCS,Rearchitecting GitHub Pages,http://githubengineering.com/rearchitecting-github-pages/,rearchitecting github page,click redirected,click redirected
721,Lobsters,vcs,Git & VCS,Advantages of monolithic version control,http://danluu.com/monorepo/,advantage monolithic version control,advantage monorepos someone someone junio hamano someone simplified organization simplified dependency take example christopher van arsdale build system inside google facebook twitter code search crossproject change refactor api caller mercurial git awesome true facebook patching mercurial downside discussion gregory szorc face book benjamin pollack benjamin eberlei simon stewart digital ocean goo gle twitter thedufer paul hammant,advantage monorepos conversation keep someone hear facebookgoogle us giant monorepo wtf yeah really convenient nt think someone ridiculous thing ever heard nt fb google know terrible idea put code single repo think engineer fb google probably familiar using smaller repos nt junio hamano work google still prefer single huge repo reason someone oh sound pretty nice still think weird could see someone would want reason pretty long writing order avoid repeating conversation simplified organization multiple repos typically either one project per repo umbrella related project per repo force define project particular team company sometimes force split merge repos reason pure overhead example split project big much history vcs optimal monorepo project organized grouped together whatever way find logically consistent version control system force organize thing particular way using single repo also reduces overhead managing dependency side effect simplified organization easier navigate project monorepos used let essentially navigate everything networked file system reusing idiom used navigate within project multi repo setup usually two separate level navigation filesystem idiom used inside project metalevel navigating project side effect side effect monorepos often case easy get dev environment set run build test expect able navigate project equivalent cd also expect able cd make since seems weird work usually work whatever tooling effort necessary make work get done technically possible get kind ease multiple repos natural mean necessary work nt done often simplified dependency probably go without saying multiple repos need way specifying versioning dependency sound like ought straightforward practice solution cumbersome involve lot overhead monorepo easy one universal version number project since atomic crossproject commits possible repository always consistent state commit x project build work dependency still need specified build system whether make makefiles bazel build file checked version control like everything else since one version number makefiles build file whatever choose nt need specify version number simplification navigation dependency make much easier write tool instead tool must understand relationship repository well nature file within repository tool basically need able read file including file format specifies dependency unit within repo sound like trivial thing take example christopher van arsdale easy build become build system inside google make incredibly easy build software using large modular block code want crawler add line need r parser add line large distributed fault tolerant datastore sure add line building block service shared many project easy integrate sort legolike development process happen cleanly open source world result state affair speculation complexity barrier open source changed significantly last year creates gap easily obtainable company like google versus n open sourced project system arsdale referring convenient open sourced exgoogle engineer facebook twitter wrote version bazel order get benefit theoretically possible create build system make building anything dependency simple without monorepo effort enough effort never seen system seamlessly maven sbt pretty nice way uncommon lose lot time tracking fixing version dependency issue system like rbenv virtualenv try sidestep problem result proliferation development environment using monorepo head always point consistent valid version remove problem tracking multiple repo version entirely build system nt thing benefit running mono repo example static analysis run across project boundary without extra work many thing like crossproject integration testing code search also greatly simplified crossproject change lot repos making crossrepo change painful typically involves tedious manual coordination across repo hacky script even script work overhead correctly updating crossrepo version dependency refactoring api used across ten active internal project probably good chunk day refactoring api used across thousand active internal project hopeless monorepo refactor api caller one commit always trivial much easier would lot small repos seen apis thousand usage across hundred project get refactored monorepo setup easy one even think twice people consider absurd use version control system like cv rcs clearcase impossible single atomic commit across multiple file forcing people either manually look timestamps commit message keep meta information around determine particular set crossfile change really atomic svn hg git etc solve problem atomic crossfile change monorepos solve problem across project nt useful largescale api refactorings david turner worked twitter migration many repos monorepo give example small crosscutting change overhead release needed update project needed colleague fix one dependency project b colleague turn needed fix project c wait c release b could fix deploy might still waiting since everything one repo colleague could make change commit could immediately make change guess could everything linked git version colleague would still two commits always temptation pick version stabilize meaning stagnate fine one project web project interdependency good direction forcing dependees update actually another benefit monorepo making crossproject change easier tracking easier equivalent git bisect across multiple repos must disciplined using another tool track meta information project simply nt even two really different tool one would sufficed mercurial git awesome true common response gotten point switching either git hg either cv svn huge productivity win true lot git hg superior multiple respect eg better merging small repos better per se fact twitter patching git facebook patching mercurial order support giant monorepos downside course downside using monorepo going discus downside already widely discussed monorepos nt strictly superior manyrepos strictly worse either point nt definitely switch monorepo merely using monorepo nt totally unreasonable folk place like google facebook twitter digital ocean etsy might good reason preferring monorepo hundred thousand ten thousand smaller repos discussion gregory szorc facebook benjamin pollack one cocreators kiln benjamin eberlei simon stewart digital ocean google twitter thedufer paul hammant thanks kamal marhubi david turner leah hanson extensive discussion topic least half idea come also thanks leah hanson mindy preston chris ball daniel espeset joe wilder nicolas grilly giovanni gherdovich paul hammant simon thulbourn finding typo mistake post
722,Lobsters,vcs,Git & VCS,Multi-Repository Development,http://googletesting.blogspot.com/2015/05/multi-repository-development.html,multirepository development,roughly hundred library libphonenumber updating dependency hard rolling work deps deps getusermedia started crashing android many test platform ship bot see future fyi bot deps fyi waterfall main waterfall making gradual interface change red blindness api prime directive result performance test future work optimistic autorolling arb autorollbot reference footnote,author patrik höglund know software development complicated activity develop feature application provide value user furthermore nontrivial modern software composed software instance chrome web browser pull roughly hundred library thirdparty folder build browser significant library blink rendering engine also ffmpeg image processing skia lowlevel graphic webrtc realtime communication name figure holy dependency batman many reason use software library write phone number parser use libphonenumber battletested real use android chrome available permissive license using software free focus core software deliver unique experience user hand need keep application date change library want latest bug fix right also run risk change breaking application article examine integration problem reduce risk associated updating dependency hard simplest solution check copy library build avoid touching much possible solution however problematic miss bug fix new feature library need new feature bug fix made option update library latest release long time since quite risky may spend significant testing resource ensure accumulated change break application may catch interface change library well cherrypick featurebug fix want copy library even riskier cherrypicked patch may depend change library subtle way also still date latest version find way make without feature bug fix none option good using adhoc updating model work low volume change library requirement library change often even case critical zeroday exploit discovered socket library one way mitigate update risk integrate often dependency extreme example let look chrome chrome development massive amount change going dependency blink rendering engine life separate code repository browser blink see hundred code change per day chrome must integrate blink often since important part browser another example webrtc implementation large part chrome implementation resides webrtcorg repository article focus latter team happen work rolling work opensourced webrtc codebase used chrome also number company working webrtc chrome us toolchain called depottools manage dependency checkedin text file called deps dependency managed look roughly like srcthirdpartywebrtc http chromiumgooglesourcecom externalwebrtctrunkwebrtcgit mean pull webrtc specified git repository hash similar dependencyprovisioning framework build chrome new version change hash check new version deps file library api changed must update chrome use new api patch process known rolling webrtc new version problem changed code going chrome maybe getusermedia started crashing android maybe browser longer boot window know built run test therefore roll patch subject presubmit check chrome patch ie many test platform ship however roll patch considerably painful risky patch figure life roll patch webrtc team found uncomfortable position couple year back developer would make change webrtcorg code fair amount churn interface meant would update chrome adapt change also frequently broke test webrtc functionality chrome semantic change unexpected consequence chrome since roll risky painful make started happen le often made thing even worse could two week roll meant chrome hit large number change one patch bot see future fyi bot found way mitigate called fyi information bot bot chrome lingo continuous build machine build chrome run test existing chrome bot point would build chrome specified deps file meant would build webrtc version rolled point fyi bot replace pinned version webrtc head otherwise build run chromelevel test usual therefore fyi bot green knew roll likely would go smoothly bot compile knew would adapt chrome interface change next roll patch bot red knew either bug webrtc chrome would adapted semantic change webrtc fyi waterfall set bot build run test straight copy main waterfall expensive resource could cheated set fyi bot one platform say linux expensive regression platformspecific reckoned extra machine maintenance worth making gradual interface change solution helped quite satisfactory initially policy fine break fyi bot since could update chrome use new interface new interface actually rolled chrome however often caused fyi bot compilebroken day quickly started suffer red blindness idea would break test roll especially interface change made early roll cycle solution move careful update policy webrtc api technically inclined careful mean following api prime directive consider example class webrtcamplifier int setoutputvolume float volume normally would change method signature needed class webrtcamplifier int setoutputvolume float volume bool would compilebreak chome could updated started like instead class webrtcamplifier int setoutputvolume float volume int float volume bool alloweleven could roll chrome make chrome use update setoutputvolume signature roll make chrome use setoutputvolume delete approach requires several step end right interface point break chrome result implemented could fix problem came rather big batch roll could institute policy fyi bot always green change breaking immediately rolled back made huge difference team could work smoother roll often reduced risk quite bit particularly chrome cut new version branch instead panicked risky roll around release could work issue good time stay control another benefit fyi bot granular performance test fyi bot would frequently happen bunch metric regressed however fun find patch roll caused regression fyi bot see precisely webrtc revision caused problem future work optimistic autorolling final step ladder short actually merging repository autorolling blink team implemented arb autorollbot bot wake periodically try roll patch fails trybots wait try later perhaps trybots failed flake temporary error perhaps error real fixed pull autorolling going need good test go roll patch patch really edging closer release unstoppable flood code change keep breaking good place reference martin fowler may continuous integration dani megert remy chi jian suen et al oct evolving javabased apis footnote actually hilarious bug webrtc possible set volume supposed allowed really thus webrtc implementation must louder others since everybody know must louder
723,Lobsters,vcs,Git & VCS,'dancing git' – how to explain git in depth,http://blog.hackership.org/2015/05/dancing-git.html,dancing git explain git depth,well really understand git carl crowder inner working git stefan wille howto guide helping host similar workshop community dancing git basic idea need explain explain recapping using actual git wording giving tip naming explaining remote fetch git practice entire video series git repo creative common attribution international license,becoming great developer requires deep understanding tool use learner know often ask u explain always easy understanding something one thing explaining effectively another human another thing altogether take git example u know use git daytoday version control well really understand git exactly go hood would explain someone else without getting utterly confused hackership coach carl crowder tasked untangling complex system creating workshop clearly explains inner working git learner came highly interactive approach one successful workshop batch berlin inspired workshop stefan wille extended carl approach latest batch hackership gran canaria resulting workshop yielded better result could ever imagined would like share exactly effectively explain advanced git experienced programmer follows essentially howto guide helping host similar workshop community guide meant people already understand git deeper level looking new way teach others dancing git basic idea basic idea recreate life gitrepo go inside gitfolder various command executed used learner git object would play role commit holding tree pointing predecessor others would variable pointing another object gave pointer hat different color represent abstracted git pointer like head branch tag need please take look video recording get idea assemble git repo step step explaining one concept video note probably observed lot talking going throughout exercise purpose allowing people interact good way everyone make sure thet understand going encourage learner ask question also newer thing happen new action introduced ask participant figure new thing supposed go rather telling record forget anything script simple repo empty repo add head hat add master hat head point master explain object pointer add first commit master point first commit add second commit pointing predecessor explain branch travelling reference master need point second commit branching add second branch low calorie let learner figure supposed go thing point explain checkout head point new branch add another commit check master add commit master merging add merge commit merging low calorie master resolve conflict new change explain mergecommits predecessor delete branch tagging add tag type head add another commit master forgot bread explain master moved tag detached head checkout commit last one low calorie branch add another commit one explain problem checking master checkout tag creates detached head everyone sits make sure answered question tend quite give everyone chance clear confusion may get familiar new concept everyone understood make sure take break brain need usually continue break recapping using actual git wording giving tip naming followed explaining remote fetch using great finally time found holding git practice workshop couple day later great way make sure everyone really understood going improve retention git workshop turn host good luck please let u know question check comment help find entire video series slide git repo learning material published hackership licensed creative common attribution international license please go ahead give workshop feedback please let u know
724,Lobsters,vcs,Git & VCS,Git in 600 words,http://maryrosecook.com/blog/post/git-in-six-hundred-words,git word,gitlet git inside,essay companion piece gitlet implementation git javascript imagine directory called alpha contains file called numbertxt contains text first run git init set alpha git repository run git add numbertxt add numbertxt index index list file git keeping track map filename content file mapping numbertxt first running add command also added blob object containing first git object database run git commit first three thing first creates tree object object database object represents list item top level alpha directory object pointer first blob object created ran git add second creates commit object represents version repository committed includes pointer tree object third point master branch new commit object run git clone beta creates new directory called beta initializes git repository copy object alpha object database beta object database point master branch beta commit object master branch point alpha repository set index beta mirror content first commit update file numbertxt mirror index move beta repository change content numbertxt second run git add numbertxt git commit second commit object created pointer parent first commit commit command point master branch second commit move back alpha repository run git remote add beta beta set beta repository remote repository run git pull beta master cover run git fetch beta master find object second commit copy beta repository alpha repository point record master second commit object update fetchhead show master branch fetched beta repository cover pull command run git merge fetchhead read fetchhead show master branch beta repository recently fetched branch get commit object record master pointing second commit master branch alpha pointing first commit ancestor second commit mean complete merge merge command point master branch second commit merge command update index mirror content second commit update working copy mirror index run git branch red creates branch called red point second commit object run git checkout red checkout head pointed master branch point red branch make red branch current branch set content numbertxt third run git add numberstxt run git commit third run git push beta red find object third commit copy alpha repository beta repository point red branch beta repository third commit object would like learn internals git detail read essay git inside
725,Lobsters,vcs,Git & VCS,"disabow/above-repository: hide repos from your ""repositories contributed to"" list",https://github.com/disavow/above-repository,disabowaboverepository hide repos repository contributed list,join github today sign file permalink disavowaboverepository disavowbelowrepository resource reload reload,disavowing public contribution dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time disavow repository contributor disavowaboverepository indicate intention disavow contribution repository contribution list see also disavowbelowrepository usage contribute repo show repo disavowing help included simple ruby script generate commits accept reasonablenoop contribution fork repository generatecommits n checkout new branch generate n commits push branch fork open pull request inspired conversation formerly private repository later opensourced managed disavowing public contribution resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
727,Lobsters,vcs,Git & VCS,Mercurial: Onward and upward,https://blog.bitbucket.org/2015/04/30/mercurial-onward-and-upward/,mercurial onward upward,mercurial petsc remotenames extension smb extension future mercurial mercurial sprint pycon mercurial sprint celebrating mercurial anniversary bay area mercurial meetup version control register immediately,hi sean newest member bitbucket team currently work mercurial come scientific background petsc team responsibility working backend excited improving mercurial support contributor mercurial loved mercurial humanfriendly user interface supportive community work mercurial includes addition namespaces improving inmemory context object also wrote experimental remotenames extension added core mercurial future fun smb extension future mercurial time mercurial seen grow fascinating way include concept changeset evolution coming life announcement facebook choosing mercurial git future mercurial scalability mercurial sprint pycon bitbucket support team like build relation community first step attending mercurial sprint pycon montreal year many topic discussed new manifest version narrow checkout commit signing obsolescence marker exchange evolve ui reflog equivalent new path option remote bookmark topic manifest received attention new manifest format mean enable checkout subdirectory called narrow checkout top open door retrieving truncated history called shallow checkout personal favorite inclusion remote bookmark built top journal ie reflog equivalent new path feature ie ability define custom revset pushing particular path picture event photo ryan mcelroy celebrating mercurial anniversary support atlassian bitbucket team improving relation mercurial community hosting many event year begin celebrating mercurial anniversary wed may hosting first official bay area mercurial meetup atlassian san francisco office speaker google talk scaling mercurial facebook talk picked mercurial version control system mean future mercurial register immediately interested since accommodate attendee look forward seeing next week rest mercurial community note earlier version accidentally stated google chosen mercurial git untrue google working mercurial scalability also us git contributes git development
728,Lobsters,vcs,Git & VCS,CueKeeper: Gitting Things Done in the browser,http://roscidus.com/blog/blog/2015/04/28/cuekeeper-gitting-things-done-in-the-browser/,cuekeeper gitting thing done browser,indexeddb doc http table content hacker news reddit background getting thing done gtd gtd david allen irmin irmin jsofocaml new indexeddb backend mgsd mgsd tiddlywiki sync multiple mgsd instance tyxml functional reactive programming react nymote mirageos ucn nymote project mirageos first unikernel ucn using cuekeeper example rosciduscom core concept editing item markdown action processing work schedule weekly review done waiting future area everything process reviewdone reviewwaiting reviewfuture reviewareas work waiting future somedaymaybe topright control interesting irmin feature sync threeway merge history show history revert revert change checkbeforemerge outofdate ui action next step http mirageosdevel irmin react jsofocaml indexeddb acknowledgement,git repository store data history supporting replication merging revocation irmin library let application use gitstyle storage data try written gtdbased action tracker run entirely clientside browser cuekeeper us irmin handle history merges state saved browser using new indexeddb standard requires recent browser firefox chromium ie work safari apparently problem open page multiple tab future plan browser sync master git repository use browser storage offline use note data stored browser server communication change make persist affect user indexeddb doc say general philosophy browser vendor make best effort keep data vaguely note data may deleted run space someone clarify thing would great using week firefox lost anything would nice know exact condition safety take backup linuxfirefox system data stored homemozillafirefoxsaltdefaultstoragedefaulthttprosciduscomidb version alpha post contains brief introduction using gtd cuekeeper followed look nice feature result using irmin code available http alpha tester welcome table content post also appeared hacker news reddit background getting thing done gtd core idea behind david gtd human brain terrible remembering thing right time go work morning thinking phone call need make evening read email keep reminding remember call meeting someone speaking thinking forget call etc maybe end remembering maybe either way distracted day thing wanted work goal using gtd system system reminds thing need reminded trust enough brain stop thinking reason ever thought twice unless like thoughtdavid allen getting thing done irmin irmin library persistent store builtin snapshot branching reverting multiple backends including one us regular git repository allowing view modify data using real git command storage model useful many application give racefree update worker writes branch merges disconnected operation history remote sync incremental backup using jsofocaml able compile irmin javascript run browser adding new indexeddb backend mgsd simon mgsd excellent gtd system using last year set extension built tiddlywiki system like cuekeeper mgsd run entirely browser require server implemented piece selfmodifying html writes back local disk save pretty scary found surprisingly robust however largely unmaintained various area wanted improve browser security year browser become locked longer allow webpage write disk requiring browser plugin override check cuekeeper us indexeddb support modern browser provide store data mgsd predates indexeddb history sometimes click button mistake idea changed thanks irmin cuekeeper log change provides ability view earlier state also cuekeeper us brief animation make easier see changed navigation navigation mgsd awkward overview panel detail mixed together wiki page cuekeeper experimenting twocolumn layout separate overview page detail safe multitab use accidentally open mgsd two tab change one tab overwrite change made cuekeeper us irmin keep multiple tab sync merging change automatically sync device easy way sync multiple mgsd instance cuekeeper implement sync yet either easy add sync tab already core logic escaping bug mgsd various bug related escaping eg thing go wrong use square bracket title cuekeeper us typesafe tyxml avoid problem staledisplay bug mgsd mostly good job keeping element display uptodate flaw example add new contact one panel open contact menu another new contact show cuekeeper us functional reactive programming react library make sure everything current clean separation code data selfmodifying html file updating mgsd terrifying cuekeeper recompiled reloaded like program nymote mirageos ucn nymote project describes control networked personal adopting large centralised service answered call siren server made implicit trade share habit data exchange something useful empowered internet behemoth simultaneously reducing ability influence risk becoming slave current system unless create alternative compete time work alternative idea provide service people run home eg pc lowpowered arm board house router three key piece infrastructure need mirage irmin signpost talked mirageos see first unikernel allows run extremely small highly secure service xen guest mb size written typesafe ocaml rather mb would linux guest looked signpost yet irmin subject blog post ucn user centric networking ecfunded project building information pih responsible storing personal data home using data content recommendation use google manage todolist add google show relevant ad want good recommendation without sharing personal data third party tool cuekeeper could configured sync local pih provide input recommendation without data leaving home using cuekeeper either use example rosciduscom download standalone release use release unzip directory open indexhtml browser need webserver note database tied path file move rename directory show different database might make look like item disappeared core concept five kind cuekeeper action something eg mirage beside action see toggle showing state tick mean done next action something could start mean waitingfor something start mean future something want think yet star whatever want repeating action completed tick box blank project something want achieve eg mirage project may require several action taken possible state done tick active project project plan work yet area way grouping thing eg unlike project area generally completed one thing confused started gtd organisation called actually area bos say working project x probably gtd term contact someone work associate area project action contact provides quick way find thing need discus someone meet action performed someone else also mark waiting appear reviewwaiting list context another way grouping action kind activity occur assigning context action important check action vague eye tend glide vague action like choosing context garage buy tool force clarify thing note gtd also concept cuekeeper action waiting time gtd also never used mgsd implement regular file computer seem work fine mgsd concept group area cuekeeper us subareas instead eg subarea corresponds mgsd area within realm editing item clicking item creating new one open panel showing detail right column various thing edit toggle work elsewhere see click title rename click edit edit note whatever like markdown format add structure link etc click add log entry start editing date added end convenient add datestamped note quickly delete button bottom remove without confirmation use show history revert accidental deletion explained later area project action convert type clicking type eg action useful eg realise action really project multiple step click parent move different parent set contact field type action also set context useful grouping action work page help make sure action welldefined also make action repeat setting repeat action move waiting state given date two difference repeating action regular oneshot scheduled action mark repeating action done clear repeat first want click repeating action next repeat date last scheduled highlighted default date already arrived keep moving forward specified interval future processing several stage applying gtd corresponding tab along top first processing going various inboxes email paper voicemail etc determining action item requires processing inbox empty everything need either done quick item recorded cuekeeper also see think project action head add click next area enter name new project work tab go red point indicating alert project next click edit new project panel add detail desired click action add next action perform towards project note necessary add action needed complete project add next thing later mark action done cuekeeper prompt think new next action project require single action eg instead adding project action convert new project action bother project plan work project soon click convert project work default view showing thing could working filter tab allow hide toplevel area eg want see personal action work item done click tick mark possible start click mark waiting action waiting someone else first add contact click w select menu action started date click choose date popup calendar otherwise mark reason unspecified going week click future defer next review view list contact action waiting useful someone phone want see everything need discus example list show action actually waiting open particular contact also see thing merely associated schedule list action done date due scheduled action appear highlighted work tab even area filtered pin browser tab showing cuekeeper page tab icon also go red indicate attention needed want test effect schedule action date past click n acknowledge due action convert next action weekly review gtd work trust look system regularly various report available review tab help available report done show completed action project provides button delete sort person like write weekly summary might useful input waiting show action waiting someone something scheduled action might want check status something unblock future show action marked project marked area list area responsibility everything show every item system one place need review handy sometimes see everything mgsd report one use default configuration repeating action scheduled next sunday review thing process tab empty inboxes adding action cuekeeper reviewdone admire done list delete reviewwaiting reviewfuture make current delete never get done reviewareas area need new project work make sure action obvious vague could started set waiting list long mark action future project somedaymaybe important look item review knowing going look waiting future item soon allows forget rest week topright control search enter text regular expression box select dropdown menu appears pressing return open first result create new item enter label select one item menu pressing return search result create new action export allows save current state without history tar file import feature currently though show history show recent entry irmin log see interesting irmin feature benefit get using irmin sync first benefit course synchronise multiple instance may already tried opening cuekeeper two window browser observed change made one propagate easier way experiment sync click screenshot interactive version page two instance cuekeeper running representing two separate device laptop mobile phone edit separately click button middle see change merged clicking upper lower push change upper pane lower lower instance merge current state clicking lower upper reverse full sync would two sequence course could interrupted part way button used test unusualbutinteresting case merging direction simultaneously ie instance merges previous state instance generating two new merges cuekeeper try merge deterministically instance end state avoiding unnecessary conflict future merges make conflicting edits cuekeeper pick suitable resolution add conflict note say example edit title ocaml action different string instance sync see something like cuekeeper us threeway merge merge algorithm take state two branch merged recent common ancestor generates new commit common ancestor used determine branch changed thing anything common ancestor changed branch multiple possible ancestor happen crisscross merge pick one cuekeeper unit test merging repeatedly generates three commits random ensures merge code produce valid loadable result ensure merge pair state check result necessarily seem sensible human let know spot anything odd history full history view show history button history view useful clicked something accident sure click entry see state system change box appears top page indicate mode close box return present edit anything viewing historical version cuekeeper commit version merge change master return present might like open history panel trying sync demo revert timetravel mode click revert change button undo change reverting easy add reuses existing threeway merge code difference commit reverted parent commit used merged cuekeeper merge three commits also revert commit single parent although get sensible result revert recent change first example create action modify revert creation cuekeeper see one branch modified action main branch one branch deleted action revert creation something modified deleted cuekeeper opt keep effect simply add note decided keep course sensible way delete something use regular delete button checkbeforemerge important make sure system get inconsistent state irmin help whenever cuekeeper update database first generates new commit load new commit check work update master branch point new commit mean cuekeeper never put master branch state load outofdate ui action perhaps interesting effect using irmin eliminates various edge case related outofdate ui element consider example open menu one tab set contact action delete one contact another tab choose deleted contact menu first tab regular database would probably result kind error need handle edge case occur often hard test cuekeeper though record revision ui element came commit revision merge new commit master branch using existing merge logic deal problem normally nothing merge trivial merge mean never worry concurrent update similar system used editable field click title edit make change press return commit version started editing current one mean cuekeeper silently overwrite change even edit something two tab time get merge conflict note containing version discarded instead next step like help still plenty coding testing example editing work well mobile phone menu input box fill screen case report merging tab unreliable safari reason aborterror indexeddb would good use pack file compression need javascript compression library possible action marked waiting action project completed remote sync need implemented ui need work particular could someone find tasteful way style field panel look like dropdowns keep clicking name instead show button mistake although might used way around change button worse indexeddb irmin backend split people use easily like help code available http discussion happens mirageosdevel mailing list interest may write followup post documenting experience implementing cuekeeper using irmin react jsofocaml indexeddb acknowledgement research leading result received funding european seventh framework programme ucn project grant agreement
729,Lobsters,vcs,Git & VCS,"Sticky Documentation, Part 2: Source Control History as Documentation",https://spin.atomicobject.com/2015/04/24/source-control-documentation/,sticky documentation part source control history documentation,sticky documentation code archeologist property source control history making source control history make clean commits clean commits write good commit message formatting commit message take advantage branch git flow include identifier tag release summary,last week introduced concept calling sticky documentation reviewed way make stickiest documentation code today like talk another form sticky documentation source control history access code application code kept form source control quite likely access source control history well word source control history likely stick around make source control history form documentation project valuable future code archeologist digging repository property source control history first let distinguish property source control aka version control revision control history form documentation like code code tell u happening help u understand overall structure software system source control history tell u thing came way oftentimes troubleshooting problem story thing came immensely valuable like code source control near hand source control often necessary part testing deploying new code integrated part development process neglected completely certainly underutilized making source control history way make source control history valuable asset project using git example practice apply tool well make clean commits try scope commits welldefined unit work specific feature specific bug fix specific code cleanup task often tempting commit bug fix feature whole afternoon work three separate feature fix disciplined maintaining clean commits go long way toward making source control history tractable future using git sometimes use git commit p help split change accidentally slip line belong separate commit leave line unstated committing change file tedious large number change need split still important maintain discipline git commit p really handy small fixups write good commit message take time write good commit message making effort make clean commits least able explain purpose commit also consider formatting commit message made complex change might hard remember reason later add paragraph explanation commit message remember keep subject line concise another area requires discipline sometimes heat troubleshooting thorny problem tempting start committing message like trying something else update even use lessthanpolite language git often use git commit amend improve commit message pushing lot unpushed troubleshooting commits might also consider squashing one meaningful change giving good commit message pushing take advantage branch varies somewhat tool git least easy create new branch take advantage fact use branch another way structure work able follow development various feature various stage qa release help clarify thing stand tell much clearer picture code currently production came git create explicit merge commits git merge noff branchname clearly set apart commits made branch group also give another opportunity leave meaningful commit message consider using formal branching model like git flow adapt form fit workflow best whatever branching model consistent make part team workflow take discipline discipline pay look back source control history see glance major feature fix landed master include identifier writing commit message include unique identifier like issue number issue tracker keywords tag particular type change github automatically creates hyperlink issue number usernames need unique identifier useful commit message sometimes troubleshooting issue come code via commit included id issue looking sometimes way around either way crossreferences another source information really helpful long excuse omit necessary information commit message quite possible code repository may someday accessible someone access original issue tracker tag release tag easy forget deploying code behind scene making publicly downloadable release artifact consider making automatic tag creation part deploy process tag date code deployed particular environment awfully useful trying figure might caused issue end user week ago tag also provide helpful specificity talking release feature x deployed last month summary program must written people read incidentally machine execute hal abelson gerald sussman structure interpretation computer program code human generating documentation part writing code form documentation stick code often overlooked extremely valuable source control history used tell story software system came valuable source control history requires degree discipline generate unattainable effort required produce valuable source control history le would required generate level detailed code documentation another medium code source control history two form sticky documentation think good test suite could qualify third form sticky documentation others team generate maintain sticky documentation
730,Lobsters,vcs,Git & VCS,Looking for .git in all the wrong places,http://hoelz.ro/blog/looking-for-git-in-all-the-wrong-places,looking git wrong place,know tool using inputrc save keystroke mysql shell intermediate sql v looking git wrong place gitdir comment powered disqus,know tool using inputrc save keystroke mysql shell intermediate sql v looking git wrong placeslike many store dotfiles git repos however quickly encountered problem approach configuration would often get sync various machine instead writing script check update diligent decided would integrate configuration something machine check update already system package manager unfortuantely fixing problem created new one used configuration directory checked git repository change fix something make change test commit push seems need sync change config directory clone commit push however better way gitdiralthough git look git ancestor directory default override normal logic finding repository directory via gitdir environment variable mean want make local change push need following prep work cd vim export gitdirprojectsvimfilesgitnow regular git command work vim normal repository interestingly enough companion environment variable gitworktree tell git working directory want thing way around published please enable javascript view comment powered disqus
731,Lobsters,vcs,Git & VCS,darcs 2.10.0 released!,http://lists.osuosl.org/pipermail/darcs-users/2015-April/027119.html,darcs released,darcsusers darcs release guillaumh gmailcom http wwwhaskellorgplatform http http http bugsdarcsnet information darcsusers mailing list,darcsusers darcs release guillaume hoffmann guillaumh gmailcom sun apr utc hi darcs team pleased announce release darcs downloading easiest way install darcs source first installing haskell platform http wwwhaskellorgplatform installed haskell platform cabalinstall install release cabal update cabal install alternatively download tarball http build hand explained readme file branch also available darcs repository http feedback issue darcs report via web http bugsdarcsnet also report bug email bug darcsnet come darcs ircfreenodenet new since darcs new feature darcs rebase enable deep amending history ganesh sittampalam darcs pull reorder keep localonly patch top mainstream patch ale gadea ganesh sittampalam darcs dist zip generate zip archive repository guillaume hoffmann patch bundle context minimized default enables bundle applied repository guillaume hoffmann darcs convert exportimport conversion tofrom vcses supporting fastexport protocol petr rockai owen stephen guillaume hoffmann lele gaifax ben franksen darcs test backoff exponential backoff test strategy faster bisect big repository michael hendricks work normally sshfsmounted repository nathaniel filardo automatic detection filedirectory move token replaces jose neder patience diff algorithm default jose neder interactive mode whatsnew dan frumin tag askdeps create tag may include patch ganesh sittampalam user interface add last question patch selected confirm whole selection florent becker command name clone new name get put log new name change amend new name amendrecord show output log pager default guillaume hoffmann output log similar git show patch hash ui hash patch metadata put author date separate line guillaume hoffmann enable match patch hash prefix h hash guillaume hoffmann gian piero carrubba better message better error message http ssh error ernesto rodriguez init add remove move replace print confirmation message guillaume hoffmann rollback happens working copy florent becker guillaume hoffmann darcs send longer try send mail default eric kow patch name given directly invoke text editor jose neder guillaume hoffmann use nano default text editor instead vi guillaume hoffmann keep log file patch name mail content darcs ale gadea optimize convert supercommands guillaume hoffmann improve darcs help environment darcs help markdown radoslav dorcik guillaume hoffmann warn duplicate tag creating new one ale gadea allow darcs mv known deleted working file owen stephen improve notinremote allowing multiple repos use default owen stephen performance faster darcs diff petr rockai faster log annotate thanks patch index data structure bsrk aditya benedikt schmidt eric kow guillaume hoffmann ganesh sittampalam faster push via ssh using compression ben franksen cloning ssh destination formerly darcs put efficient guillaume hoffmann faster internal representation patch hash guillaume hoffmann cloning http use pack predictable way guillaume hoffmann store global cache bucketed format marcio diaz developerrelated require support ghc ganesh sittampalam replace type witness cpp macro plain haskell eric kow hashedstorage bundled darcs ganesh sittampalam replace c binding external library ganesh sittampalam move bit datetime package need darcsutildatetime ganesh sittampalam build darcs rather thrice eric kow remove home page manual darcs repository guillaume hoffmann run test cabal test ryan desfosses run fewer related test testsuite ganesh sittampalam use custom replhook fix cabal repl owen stephen darcscabal make defaultlanguage stanza ben franksen always compile mmap support ganesh sittampalam new option subsystem ben franksen various cleanup code restructurations refactoring haddock langstroth owen stephen florent becker guillaume hoffmann michael hendricks eric kow dan frumin ganesh sittampalam issue resolved darcs implement patience diff bzr jose neder automatic detection file renames jose neder generalized io type better error message exception handling ernesto rodriguez interactive mode whatsnew dan frumin fix record linuxfusesshfs fall back sloppy lock automatically nathaniel filardo clone ssh url locally cloning copying scp guillaume hoffmann enable write darcs init x radoslav dorcik put log file tempdir instead working dir ale gadea send minimizecontext flag send guillaume hoffmann bucketed cache marcio diaz file listing working dryrun markconflicts guillaume hoffmann garbage collection inventory patch marcio diaz put cache xdgcachehome cache default guillaume hoffmann make finalizetentativechanges longer run test guillaume hoffmann move repo testing code darcsrepositorytest guillaume hoffmann darcs replace complains filepaths given owen stephen send mail default eric kow prevent patch index creation nonhashed repos owen stephen accept date dave love add default boring entry emacs session save file owen stephen attempting use patch index nt create repos owen stephen document default value keepdate nokeepdate mark stosberg getmatchingtag need commute dirty tag ganesh sittampalam move patch index creation job running code ganesh sittampalam let optsmodifier remove occurrence lookforadds gian piero carrubba make n alias q lastregret question gian piero carrubba expurgate nonfunctional annotate xmloutput option dave love always clean rebaseinprogress state ganesh sittampalam fixed darcs change onlytofiles sebastian fischer nt allow remote operation copy rebase patch ganesh sittampalam obliterate nt overwrite existing file radoslav dorcik move rebase patch end amendrecord ganesh sittampalam rebase suspend unsuspend support summary radoslav dorcik posthook get run created repo sebastian fischer posthooks record amendrecord receive darcspatches sebastian fischer new option amend select author patch stealing radoslav dorcik patch name given directly invoke text editor jose neder save prompted author name darcsauthor instead darcsprefsauthor jose neder tabbing usagehelper pad max length command name bsrk aditya annotate includes line number owen stephen fix build removing file permission function guillaume hoffmann darcs amendrecord record change jose neder one liner adding tracked file verbose guillaume hoffmann whatsnew l stack space overflow jose neder fix amendrecord promptlongcomment guillaume hoffmann switch cabal test framework ryan desfosses automatically detect replace jose neder ignore case character prompt guillaume hoffmann option setscriptsexecutable properly documented ale gadea rename amendrecord amend make unrecord visible guillaume hoffmann solution using cabal checkforeigndeps dan frumin switching regexcompattdfa unicode support dan frumin use pack copy pristine uptodate guillaume hoffmann correctly copy pristine noworkingdir clone guillaume hoffmann darcs tag warn duplicate tag ale gadea nt break list bad source sergei trofimovich optimize reorder run forever one repository ale gadea fix file corruption double fetch sergei trofimovich make optimize supercommand guillaume hoffmann make convert supercommand enhance help string guillaume hoffmann outputautoname default file ben franksen check inventory dir created owen stephen rename isfile isvalidlocalpath workrepourl workrepopossibleurl mateusz lenik allow skipping backwards dependedupon patch andreas brandt allow darcs mv known deleted working file owen stephen need avoid moving rebase patch end ganesh sittampalam implement darcs rebase apply ganesh sittampalam invoke pager without temporary file guillaume hoffmann better error message pushing darcs path ben franksen known issue known new issue darcs rebase warn stolen patch suspend unsuspend darcs rebase unsuspend automate semiautomate handling unrecorded change darcs rebase unsuspend need ui improvement amend anyway convert export mishandles unicode filename please remove hint could reach message diff respecting diffcommand diffexe present rollback patch take age first prompt internal error suspended patch pulled repository test harnessshelly need handle misencodedbinary data information darcsusers mailing list
732,Lobsters,vcs,Git & VCS,"Gitorious.org is dead, long live Gitorious.org",https://gitlab.com/snippets/4413,gitoriousorg dead long live gitoriousorg,people,add people discussion proceed caution
733,Lobsters,vcs,Git & VCS,Git Style Guide,https://github.com/agis-/git-style-guide,git style guide,git style guide git man page table content branch commits message merging misc branch merging commits message merging rewrite published history misc annotated tag lightweight tag license creative common attribution international license credit agisanast http agisio contributor,git style guide git style guide inspired get change linux kernel git man page various practice popular among community translation available following language feel like contributing please fork project open pull request table content branch commits message merging misc branch choose short descriptive name good git checkout b oauthmigration bad vague git checkout b loginfix identifier corresponding ticket external service eg github issue also good candidate use branch name example github issue git checkout b use lowercase branch name external ticket identifier uppercase letter valid exception use hyphen separate word git checkout b newfeature good git checkout b good phabricator task id git checkout b newfeature bad several people working feature might convenient personal feature branch teamwide feature branch use following naming convention git checkout b featureamaster teamwide branch git checkout b featureamaria maria personal branch git checkout b featureanick nick personal branch merge personal branch teamwide branch see merging eventually teamwide branch merged master delete branch upstream repository merged unless specific reason tip use following command master list merged branch git branch merged grep v commits commit single logical change nt make several logical change one commit example patch fix bug optimizes performance feature split two separate commits tip use git add p interactively stage specific portion modified file nt split single logical change several commits example implementation feature corresponding test commit commit early often small selfcontained commits easier understand revert something go wrong commits ordered logically example commit x depends change done commit commit come commit x note working alone local branch yet pushed fine use commits temporary snapshot work however still hold true apply pushing message use editor terminal writing commit message good git commit bad git commit quick fix committing terminal encourages mindset fit everything single line usually result noninformative ambiguous commit message summary line ie first line message descriptive yet succinct ideally longer character capitalized written imperative present tense end period since effectively commit title good imperative present tense capitalized fewer character mark huge record obsolete clearing hinting fault bad fixed activemodel error deprecation message failing ar used outside rail come blank line followed thorough description wrapped character explain change needed address issue sideeffects might also provide pointer related resource eg link corresponding issue bug tracker short char fewer summary change detailed explanatory text necessary wrap character context first line treated subject email rest text body blank line separating summary body critical unless omit body entirely tool like rebase get confused run two together paragraph come blank line bullet point okay use hyphen asterisk bullet followed single space blank line pointer related resource serve footer commit message example referencing issue bug tracker resolve see also source http ultimately writing commit message think would need know run across commit year commit depends commit b dependency stated message commit use referring commits similarly commit solves bug introduced commit b also stated message commit commit going squashed another commit use squash fixup flag respectively order make intention clear git commit squash tip use autosquash flag rebasing marked commits squashed automatically merging rewrite published history repository history valuable right important able tell actually happened altering published history common source problem anyone working project however case rewriting history legitimate said never rewrite history master branch special branch ie used production ci server keep history clean simple merge branch make sure conforms style guide perform needed action nt squashreorder commits reword message etc rebase onto branch going merged mybranch git fetch mybranch git rebase originmaster merge result branch applied directly end master branch result simple history note strategy better suited project shortrunning branch otherwise might better occassionally merge master branch instead rebasing onto branch includes one commit merge fastforward good ensures merge commit created git merge noff mybranch bad git merge mybranch misc various workflow one strength weakness whether workflow fit case depends team project development procedure said important actually choose workflow stick consistent related workflow also expands thing like commit message branch name tag consistent style throughout repository make easy understand going looking log commit message etc test push push halfdone work use annotated tag marking release important point history prefer lightweight tag personal use bookmark commits future reference keep repository good shape performing maintenance task occasionally license work licensed creative common attribution international license credit agis anastasopoulos agisanast http agisio contributor
734,Lobsters,vcs,Git & VCS,"The French Civil Code, in Git",https://github.com/steeve/france.code-civil,french civil code git,le code civil français sou git nul nest censé ignorer la loi git exemple http note technique licence creative common,le code civil français sou git nul nest censé ignorer la loi et pourtant nous autres citoyens moi compris ne connaissons pa le lois qui construisent et gouvernent notre république peutêtre parce que le outils existants sont trop opaques et complex notre république cest un work progress travail en cours elle nest pa fixe elle bouge elle évolue grace no parlementaires ceux quon déteste ceux quon ne connait pa et ceux quon aime mais aussi et surtout grace nous tous le citoyens pouvoir suivre son évolution cest une façon de nous réapproprier ce qui fait de nous ce que nous somme et ne pa se perdre dans de querelles passagères notre république est la représentation de nous tous nous contribuer la hauteur de no compétences aux armes citoyens git ce petit hack résultat dune aprèsmidi de code transpose le code civil sou gitgithub si lon considère le lois comme un ensemble de textes modifiés par le différentes assemblées de letat peut le considérer comme un ensemble de fichiers texte créé de manière collaborative le membres du gouvernement et de différentes assemblées travaillent en collaboration sur ce fichiers qui une fois votés sont inscrits dans le code ici code civil mais il une autre catégorie de gen qui depuis plus de an travaillent sur de fichiers texte de façon collaborative et excellent à cela le développeurs il ont créé de outils extrêmement efficaces de collaboration et de tracking pour travailler sur du code source le plus populaire en date étant git git permet non seulement de visionner le source à un instant snapshot mais surtout de visualiser facilement le changements dans ce source commits dans lanalogie du code civil cela permet de repérer très rapidement le changements apportés par une loi combinons tout cela à la philosophie open source et la seconde partie de lanalogie est faite modification de code source de façon ouverte et publique finalement le code civil cest une partie du code source de la france et le code source ça va sur un source control point exemple voici par exemple le commit qui autorise le mariage pour tous cest quand même plus lisible que par exemple cf http à l article du même code le mot devant est remplacé par le mot lors une cérémonie républicaine par note technique le date git étant basées sur lepoch unix le changements avant cette date sont tous datés au avec secondes incrémentales le message du commit donne la vraie date licence tous le fichiers sont sou licence creative common
735,Lobsters,vcs,Git & VCS,Telling stories with your Git history,https://about.futurelearn.com/blog/telling-stories-with-your-git-history/,telling story git history,telling story git history git history use git sort problem think solves let u know comment want know use git watch talk cto joel chippindale might also find following link useful learngitbranching note git commit message think like git githug,seb jacob developer futurelearn discus maintain useful git history outline five principle live making code commitsdevelopment started futurelearn platform april since time codebase gone rapid change covering commitswith rapidly changing codebase growing development team able communicate code evolves time crucialin order manage complex process changing coding believe well factored code test also simple git history allows u make informed decision future code changestelling story git historyour git history living everchanging searchable record tell story code way ability document code effectively using git another version control system important able ship feature write clean code readable testsalthough code selfdocumenting tell story code way came beyou may used conventional method code documentation readme wiki however form documentation often become datethe method code documentation come mind code comment noisy always relevant believe apply rule apply code design term separating concern using git documentation code code comment also tendency becoming datehere five principle live futurelearn come atomic commitslarge commits difficult read especially contain change unrelated admit often difficult think might split large commit find help think purpose committhink atomic commits smallest amount code changed delivers value whether tidying existing code introducing new small featurecommit redacted date redacted allow educator invite user onto course file changed insertion deletion example lot change one commit surface might look like change related however break change would better sense going example record enrolment created via invitation allow invited user enrol course allow invited user see course description page send enrolment invitation email batch allow educator invite user onto coursesnow example split start become useful commit smaller also give better story useful commit messageswriting commit message difficult help purpose mind already breaking change atomic commits meaning good idea value commitif one thing remember explain made change first place perfect opportunity reflect provide context whether satisfy user requirement fix bug make another change easier make futurei find help look commit perspective another developer question might asking looking code change might immediately obvious term good practice following template good start however bear mind every commit differentshort one line title explanation problem providing context may simple reference user story longer description change explanation change made perhaps discussion alternative consideredthe first line used explain value change rather focussing implementation detail keeping concise allow reader easily scan commit find code change interested inthe rest git commit message depends change always useful explain changed changed iti find also help case provide context explaining alternative solution ruled providing external referencescorrect colour faq link course notice footer pt http email client colour faq link course notice footer displayed blue instead white example given pt different version outlook outlook wo nt implement cs change include important inline therefore since using define colour link outlook nt applying style thus simply set default style blue like browser removing important fix problem http theinlineimportantdeclarationthis example clear headline outline problem developer intent also provides context around revise history sharingwhen developing code bound change direction even make mistake commonly introducing typo bug fix typo enrolment flash message display enrol button user enrol allow user enrol coursesin example developer introduced typo first commit fixed later commitbefore share commit history important think useful information someone else read think git history truthful log worked stepbystep refactor code refactor commits sharing othersthe power git make simple reorder reword refactor commits tell clearest story possiblegit interactive rebasing functionality allows u tell clearer story git rebase interactive display enrol button user enrol allow user enrol coursesby reducing amount noise commit history save team timeif struggling process find using pull request great way collaborate shaping commit history feature single purpose brancheslongliving feature branch often difficult keep date master find important think purpose scope feature branchalthough might working single feature user story necessarily mean deliver value notify educator invitation accepted refactor spec around enrolment invitation extend enrolment invitation educator tidy whitespace enrolment invitation speclike example may find changerefactor key area codebase order implement feature developing change often provide clear benefit directly related feature branch landed master separately earlier git cherrypick merge branch educatorenrolmentinvitations notify educator invitation accepted extend enrolment invitation educator refactor spec around enrolment invitation tidy whitespace enrolment invitation specby splitting feature branch reduce pain merging branch also deliver value sooner make git history keep history linearoften merging change master result history becoming tangled difficult read merge branch reprintstatements disable reprint link refunded purchase allow admins flag purchase reprinting put date format pattern library merge branch fulfilmentattempt populate fulfilled existing purchase display purchase fulfilment attempt admins reduce padding around course run date becomes even issue several feature branch developed parallel merge branch reprintstatements disable reprint link refunded purchase allow admins flag purchase reprinting put date format pattern library merge branch fulfilmentattempt populate fulfilled existing purchase display purchase fulfilment attempt admins introduce fulfilment attempt reduce padding around course run datewhen come merging try preserve merges commits rebase feature branch merging git checkout reprintstatements git rebase master git checkout master git merge noff reprintstatementsthis allows u group related commits together keeping merges clean making lot easier identify particular change introducedwe also find often help commit smaller change directly onto mastersummaryif spend much time ensuring commits well factored refactoring code test save team time pain futurehow use git sort problem think solves let u know comment belowwant know use git watch talk cto joel chippindaleyou might also find following link useful learngitbranching note git commit message think like git githug
736,Lobsters,vcs,Git & VCS,Explain Git with D3,http://onlywei.github.io/explain-git-with-d3,explain git,,going skip instructing add file commit explanation let assume already know nt go read tutorial pretend already file staged commit enter git commit many time like terminal box git tag name create new tag named name creating tag creates new tag pointing currently checked commit tag deleted using command git tag name coming soon type git commit git tag command heart desire understand concept git branch name create new branch named name creating branch creates new tag pointing currently checked commit branch deleted using command git branch name type git commit git branch command heart desire understand concept git checkout many us main one switch branch example switch master branch dev branch would type git checkout dev git commit notice go try addition checking branch also checkout individual commits try make new commit type git checkout see happens type git commit git branch git checkout command heart desire understand concept combine git branch git checkout single command typing git checkout b branchname create branch already exist immediately check git reset move head current branch back wherever specify abandoning commits may left behind useful undo commit longer need command normally used one three flag soft mixed hard soft mixed flag deal work inside commit reset read since visualization graphically display work hard flag work site ref head usually used together command head mean commit right head head mean two commits head note must never use git reset abandon commits already pushed merged origin cause local repository become sync origin nt unless really know undo commits already pushed shared team use git reset command instead use git revert git revert create new commit undo work done commit want revert git merge create new commit two parent resulting commit snapshot work done branch divergence two commits git fastforward method merge see happen checkout ff branch type git merge dev git rebase take commits branch move new base point specify pay close attention commit id circle move exercise reason put move quotation process actually generates brand new commits completely different id old commits leaf old commits reason never want rebase commits already shared team working git fetch update remote tracking branch local repository remote tracking branch tagged grey git pull two step process first git fetch git merge remote tracking branch associated current branch current branch process stop fetching argument rebase given typing git pull rebase second step pull process rebase instead merge set default behavior configuration typing git config branchbranchnamerebase true git push find commits local branch corresponding branch origin server send remote repository default push must cause fastforward merge remote repository divergence local branch remote branch push rejected scenario need pull first able push one simple example use git reset completely restore local repository state origin typing git reset originmaster note wo nt delete untracked file delete separately command git clean df situation working local branch want receive latest code origin server master branch update local branch without switch branch first git fetch type git rebase originmaster git branch used delete branch precreated bunch branch delete playground whatever want free playground
737,Lobsters,vcs,Git & VCS,GitBook · Write & Publish Books,https://www.gitbook.com/,gitbook write publish book,insight github sync fast search branding,beautiful doc apis product faq user guide insightstrack traffic rating content qualitygithub synckeep workflow sync doc githubfast searchfind exactly looking secondsbrandingcustom domain custom branding logo color header
738,Lobsters,vcs,Git & VCS,Streamlining Our Proposal Writing Process,http://www.lacroixdesign.net/blog/streamlining-our-proposal-writing-process/,streamlining proposal writing process,started markdown bidsketch quote roller current process git markdown cs ia writer pro atom github slack marked base stylesheet software special syntax hellosign monocle ipsum aiga standard agreement design service benefit future enhancement multifile document,designer developer innate desire spend time making thing nevertheless running business many responsibility required project one essential duty writing proposal nearly year running lacroix design co role proposal writer still one least favorite great deal thought effort go every proposal send result many hour typically spent compiling note meeting phone call wellformulated document proposes optimal solution also outline best process arriving solution needle say quite disheartening proposal rejected even considered proposal however serve crucial role relationship client designer defines scope boundary expectation course payment result writing proposal task avoided studio always seeking optimize process efficient workflow every business aspect therefore sought develop proposal writing process streamlined although may continue iterate process time go arrived solution using git markdown cs work well small studio started first began writing project proposal studio mainly focused providing print design illustration service indesign obvious tool create fantastic looking document onbrand although poor practice often writing editing application well later became beneficial second set eye review proposal time michael begun working web project zero familiarity indesign already using markdown taking note seemed like obvious transition also use drafting phase would take turn editing markdown file would transfer content block block indesign document although markdown syntax clearly delineated different element still arduous task also tried bidsketch quote roller several web application designed solving proposal creation issue fine piece software provided nice feature none really seemed fit need editing process still sluggish since content separated different admin section often wysiwyg editor caused problem worth every time would abandon one tool would return indesign process current process git markdown cs approximately one year ago approached number prospective client required fair amount proposal delivered within short amount time time finally decided find better process already writing editing proposal markdown made sense utilize strength syntax since already using git collaborating website software project using document seemed like sensible choice new process today begin creating draft proposal using markdown prefer use ia writer pro michael prefers atom commit private github repository slack notification set update particular repo michael pull document provide edits see fit able continue process solidified proposed solution editing phase completed use marked create final document one marked key feature ability style content custom cs style sheet slightly modified base stylesheet came software fit brand proposal style additionally snippet html able create cover page document display logo using svg div class cover div class coverlogo img src assetsimageslogosvg alt lacroix design co div project name client company name prepared client name march div marked offer key feature allow u dynamically create element proposal example table content inserted anywhere document using software special syntax toc also applies page break break however primarily automating page break apps setting adding page break every element setting adding dynamically created header footer well export setting currently using create proposal ready send proposal output using paginated pdf feature quite often deliver client using hellosign allows digitally sign delivered proposal ease export using save pdf paginated include page break well header footer put together example proposal using monocle ipsum aiga standard agreement design service file available via following link benefit main benefit workflow timed saved able go straight editing process final proposal longer copy paste content indesign file furthermore many proposal often read online include link pointing toward recommended service able utilize markdown syntax generate link far easier applying using indesign interactive hyperlink panel adding visual element proposal also became lot easier markdown able quickly add figure caption help explain solution provide context scope project see example creating table markdown project timeline timeline table provide great visual reference potential client creating table like design software would much time consuming whereas current solution allows easy editing implementation future enhancement nearly everything work far finished always looking iterate solution eventually looking breaking reusable piece proposal partial easily inserted document would include basic contract definition intellectual property provision interactive provision basic element signature form marked special syntax multifile document would allow u begin testing process also contemplated creating local build tool would provide customization process major advantage creating reusable component could make change automatically applied future proposal finally initial stylesheet relied heavily marked base cs future certain look customizing expanding style create better presentation client let u know found way streamline proposal writing process always contact u question
739,Lobsters,vcs,Git & VCS,Bidding farewell to Google Code,http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html,bidding farewell google code,github google code github exporter tool standalone tool bitbucket sourceforge google code project importer service log issue u googlecodeshutdown googlecom cdibona googlecom,started google code project hosting service world project hosting limited worried reliability stagnation took action giving open source community another option choose since seen wide variety better project hosting service github bitbucket bloom many project moved away google code system meet developer migrated nearly thousand open source project google code github developer migrated away google code growing share remaining project spam abuse lately administrative load consisted almost exclusively abuse management profiling nonabusive activity google code become clear u service simply needed anymore beginning today disabled new project creation google code shutting service month january provide link migration tool designed help move project google code also make available next three month project need help migrating google code host march new project creation disabled august site go readonly still checkoutview project source issue wikis january project hosting service closed able download tarball project source issue wikis tarballs available throughout rest google continue provide git gerrit hosting certain project like android chrome also continue maintaining mirror project like eclipse kernelorg others migrate data google code simplest way migrate google code use google code github exporter tool provides automated way migrate project source issue wikis new github repo please note github importer convert subversion mercurial google code project use git process also offer standalone tool migrating github bitbucket sourceforge offer google code project importer service encounter problem using tool please log issue u contact googlecodeshutdown googlecom email directly cdibona googlecom also closely tracking hacker news reddit popular forum answer question public know decision cause pain still using google code sorry continue best make migration process easy github bitbucket looking forward working developer moving google code great work leading announcement like thank site continued support community great option people today exist look forward helping find one work project chris dibona director open source
741,Lobsters,vcs,Git & VCS,"Patience Diff, a brief summary",http://alfedenzo.livejournal.com/170301.html,patience diff brief summary,bazaar version control system,last night went coding party friend house laptop nt regular project instead spent time figuring code another person party code question implementation patience diff diffing algorithm written bram cohen bittorrent fame used least bazaar version control system common diff algorithm based longest common subsequence problem given case two document finding line occur order making third document every line document appears original document order longest common subsequence remains describe difference document common document much easier problem since common document subset document diffs generated method efficient tend human readable patience diff also relies longest common subsequence problem take different approach first considers line common file b appear file mean line containing single brace new line ignored distinctive line like function declaration retained computing longest common subsequence unique element document lead skeleton common point almost definitely correspond algorithm sweep contiguous block common line found way recurses part left hope smaller context line ignored earlier nonunique found unique process finished left common subsequence closely corresponds human would identify include stdioh frobs foo heartily int frobnitz int foo int printf answer printf dn foo int fact int n n return fact n return int main int argc char argv frobnitz fact include stdioh int fib int n n return fib fib return frobs foo heartily int frobnitz int foo int printf dn foo int main int argc char argv frobnitz fib find unique common line include stdioh frobs foo heartily int frobnitz int foo int printf answer printf dn foo int fact int n n return fact n return int main int argc char argv frobnitz fact include stdioh int fib int n n return fib fib return frobs foo heartily int frobnitz int foo int printf dn foo int main int argc char argv frobnitz fib take common unique line first document order according appearance second document include stdioh return frobs foo heartily int frobnitz int foo int printf dn foo int main int argc char argv perform patience algorithm find longest common subsequence example lcs quite obvious everything line use randomly generated sequence example example consider number card line number first document order stack correspond order line second document algorithm build set pile card placed leftmost pile whose top card greater card placed pile backreference made topmost card previous pile end algorithm work backwards topmost card rightmost stack thus building longest increasing subsequence seen example may increasing subsequence length none longer longest increasing common subsequence unique line recurse range excluded earlier finished list corresponding line new function diff computed using familiar method bazaar implementation creates sequencematcher use python difflib
742,Lobsters,vcs,Git & VCS,"Centralizing distributed version control, revisited",https://blogs.janestreet.com/centralizing-distributed-version-control-revisited/,centralizing distributed version control revisited,blog post tested cleanly iron crisscross merge bid merge avoiding crisscross merge iron approach merges cap theorem,year ago wrote blog post jane street using distributed version control system hg though story would git partially centralized way essentially built centralized repo continuous integration system whose job merge new changesets key responsibility system make sure change rejected unless merged compiled tested cleanly halfdistributed halfcentralized approach let u enjoy benefit dvcs still getting coherence easy sharing come central authoritative source since development tool changed lot including arrival new code review release management system called iron writing iron discovered centralization valuable way considered particular despite fact good support merging central dvcs centralization actually critical ingredient making merges work better understand centralization help let talk one reason merging fraught process begin crisscross merge basic approach merging dvcs like hg git pretty simple basic step taken merge two head b find greatest common ancestor gca b head merged compute patch base point one two head say take patch computed apply b conflict appear patch actually based gca b apply cleanly b result process merge discussion oversimplifies story assuming well defined gca always true see consider repository staring root revision r two revision made independently top r imagine two different developer concurrently decide merge head b development note case shown gca merge b r developer developer c r r b b e f bring two separate history together one repo something like c r b e f happens want merge f particular gca f b common ancestor neither one greater case sense two different gca precisely multiple maximal common ancestor mcas case often described crisscross merge source much wailing gnashing teeth among developer user dvcss git hg different way dealing case multiple mcas default hg pick one mcas arbitrarily merge based given different choice merge base lead different result making choice arbitrarily pretty disturbing git hand strategy called recursive merge repeatedly merges together mcas us merged mca basis computing diffs b final merge based hg new strategy called bid merge willing make different choice gca use file file basis none approach amount principled solution work better case worse others sometimes lead bad result tempting look way conundrum altogether avoiding possibility criss cross merges first place avoiding crisscross merge read previous post iron approach merges describe briefly iron organizes branch hierarchy every repository root feature feature child child well thus main repository called jane root feature called jane one develop change jane child feature janecoreapplicative janequickcheck critically merging feature constrained note iron every feature defined base tip revision diff two revision effectively content feature key operation allowed feature fe release move change child feature parent done child feature fully merged parent effect setting tip parent tip child typically deleting child example janequickcheck feature based current tip jane fully reviewed test pas calling fe release janequickcheck move tip jane forward equal tip janequickcheck delete janequickcheck fe rebase let merge feature parent effectively pulling change parent feature child effect changing base feature tip parent tip feature result merge feature released jane since janecoreapplicative feature created base janecoreapplicative longer tip jane calling fe rebase janecoreapplicative merge tip janecoreapplicative tip jane set base janecoreapplicative tip jane fe rename addition allowing simply change name feature also let introduce parentchild relationship feature previously one eg calling fe rename janecoreapplicative janequickcheckcoreapplicative cause coreapplicative feature become child able depend change thequickcheck feature operation implemented single centralized server keep track state feature centralization let iron enforce useful invariant along way critically gca feature parent well defined equal base feature simple property turn outlaw crisscross merges avoids mess described earlier happy outcome turn depend critically fact built central server could enforce invariant question precisely built consistent service discovered chance existence central server key enforcing necessary invariant particular scenario two different user concurrently releasing feature rebasing feature simply possible centralized monitor determining go first retrospect surprising crisscross merge really result concurrency idea introducing lock centralized server used exclude unwanted concurrent execution distributed system surprise one end trace back cap theorem want progress partitioned need give consistency way criss cross merges caused kind inconsistency centralization obviously downside think iron pick nice point along spectrum writing code totally doable disconnected operation like rebase release affect information shared feature requires connected think small price pay never deal crisscross merge
743,Lobsters,vcs,Git & VCS,Semantic Linefeeds,http://rhodesmill.org/brandon/2012/one-sentence-per-line/,semantic linefeeds,home semantic linefeeds sphinx pycon tex rst brian w kernighan pdf unix edition hint preparing document edition manual pdf file comment powered disqus comment powered,brandon rhodes home semantic linefeeds date april tag python computing documentprocessing give advice year annual sphinx tutorial pycon grateful student asked learned tip done finally answer let share teach linefeeds reveal source turn written month old tutorial ask student whether sphinx text file project read endusers encourage student treat file private free format semantically instead fussing line paragraph end near right margin add linefeeds anywhere break idea result spectacular starting new line end sentence splitting sentence natural break clause text file becomes far easier edit version control text editor good manipulating line sentence contiguous block line editor suddenly becomes powerful mechanism quickly rearranging clause idea versioncontrol system love semantic linefeeds ever changed word beginning paragraph discover version control think whole text changed definition place beauteous scheme change mind paragraph look like change formatted output merely changing definition rerunning formatter beauty scheme change mind paragraph look like change formatted output merely changing definition rerunning formatter rule thumb every sentence clause line make exactly change paragraph without rest paragraph even noticing definition place beauteous scheme beauty scheme change mind paragraph look like change formatted output merely changing definition rerunning formatter rule thumb linefeeds call making life easier twenty year governed text file look behindthescenes whether markup format html tex rst venerable troff macro typesetter learn trick long time believed source must unix documenter workbench manual workbench attempt market operating system become cult hit internally among bell lab engineer bundling system powerful typesetting tool attempt failed course told terrible marketing computer xerox idea idea bubbling parc father worked bell lab copy workbench documentation around house find copy internet public copy destroyed devastating copyright battle justly brought sco ruin extensive search found earlier source could happier discover inspiration none brian w kernighan published pdf bell lab technical memorandum october describes far primitive version operating system famous widely available beginner second long search found lone copy linked hosted obscure japanese web page unix edition disappeared still viewed internet wayback machine link point section preparing document kernighan share wisdom hint preparing document document go several version always expected finally finished accordingly whatever possible make job changing easy first purely mechanical operation typing type subsequent editing easy start sentence new line make line short break line natural place comma semicolon rather randomly since people change document rewriting phrase adding deleting rearranging sentence precaution simplify editing later brian w kernighan note pythonic advice sound replaces fiction document realistic focus making text easy edit later must read first learning unix somehow carried year say something powerful unix plaintext approach advice given basically targeted making text easier edit terribly cramped ed text editor applies well modern world colorful fullscreen editor like emacs vim distributed version control system even imagined interested early unix documentation including second edition kernighan guide check edition manual bell lab kindly made available online pdf file also plaintext file marked troff typesetter note still compile troff file successfully modern system try richlyformatted text please enable javascript view comment powered disqus comment powered
744,Lobsters,vcs,Git & VCS,Gitorious is being acquired by GitLab and gitorious.org will shut down end of May,https://about.gitlab.com/2015/03/03/gitlab-acquires-gitorious/,gitorious acquired gitlab gitoriousorg shut end may,reported next web contact sale,reported next web gitlab gitorious announce today joining force effort strengthen development open source git management application provide gitorious customer enhanced user experience since gitorious one leading provider open source hosting onpremises enterprise git management around globe gitorious first widely used open source git management application believe long term coming together one umbrella common goal benefit everyone getting process started say gitlab ceo sytse sijbrandij gitlab simple upgrade path existing gitorious user gitlab offer git repository management code review issue tracking activity feed wikis continuous integration rolf bjaanes gitorious ceo give background reason acquisition gitorious saw organization adopting gitlab due decreased income onpremises customer running free gitoriousorg longer sustainable gitlab solving problem solving acquisition accelerate growth gitlab organization using already used onpremises solution git repository management bringing gitorious fold significantly increase say sytse sijbrandij gitlab ceo starting today gitoriousorg user import existing project gitlabcom clicking project link creating new project gitoriousorg stay online end may give people time migrate repository existing user gitorious onpremises contact sale information confident community around gitlab gitorious see advantage combining strength make best open source software collaborate code
745,Lobsters,vcs,Git & VCS,Gitless: a version control system,http://gitless.com/,gitless version control system,documentation interface gl init gl status gl track gl untrack gl diff gl commit gl checkout gl history gl branch gl switch gl tag gl merge gl fuse gl resolve gl publish gl remote guide creating repository saving change branching tagging working remote repository creating repository gl init instruction saving change gl status gl track gl untrack gl checkout gl commit gl diff branching gl history gl branch gl switch gl merge develop gl fuse develop gl resolve tagging gl tag working remote repository gl remote gl publish gitless v git saving change branching working remote repository,documentation interface gl init create empty repo create one existing remote repo gl status show status repo gl track start tracking change file gl untrack stop tracking change file gl diff show change file gl commit record change local repo gl checkout checkout committed version file gl history show commit history gl branch list create edit delete branch gl switch switch branch gl tag list create delete tag gl merge merge divergent change one branch onto another gl fuse fuse divergent change one branch onto another gl resolve mark file conflict resolved gl publish publish commits upstream gl remote list create edit delete remote guide creating repository saving change branching tagging working remote repository creating repository say directory foo want turn repository gl init command transforms current working directory empty repository ready start saving change file foo mkdir foo cd foo gl init local repo created myfilesfoo case instead starting empty repository already existing remote repository want work clone remote repository pas url repository gl init command shown note replace http githubcomgitlessvcstrygitless url repo mkdir trygitless cd trygitless gl init http githubcomgitlessvcstrygitless local repo created myfilestrygitless initialized remote http githubcomgitlessvcstrygitless nt remote repository yet follow instruction create one github saving change local repository time start saving change file file gitless tracked untracked ignored tracked file file whose change gitless detect tracked file automatically considered commit modified appear listed tracked file modification section status conversely untracked file file whose change gitless detect automatically considered commit appear listed untracked file section status finally ignored file file completely ignored gitless wo nt even appear output status example output gl status command foopy barpy tracked file modification gitignore unmodified tracked file bazpy untracked file foopyc ignored file l barpy bazpy foopy foopyc gitignore gl status branch master repodirectory tracked file modification automatically considered commit use gl untrack f nt want track change file f file f committed use gl checkout f discard local change foopy barpy untracked file wo nt considered commit use gl track f want track change file f bazpy file move three different disjoint state file ignored matched ignore specification described gitignore file example gitignore file whose content pyc since foopyc matched pattern therefore ignored file new file matched ignore spec initially untracked file want track gl track command stop tracking change tracked file gl untrack command always revert file back previous version gl checkout command gl track bazpy file bazpy tracked file gl track bazpy file bazpy already tracked file gl untrack bazpy file bazpy untracked file gl checkout foopy uncommitted change foopy would overwritten checkout wish continue yn file foopy checked successfully state head save change file use gl commit default tracked modified file considered commit set file commit customized listing file committed using eexclude iinclude flag gl commit foo bar gl commit foo foopy gl commit foo baz foopy bazpy gl commit foo e barpy gl commit foo baz e barpy bazpy gl commit foo bar baz bazpy also ppartial flag allows interactively select segment file commit gl diff command used see difference working committed version file like commit default set file diff set tracked modified file customized listing file using eexclude iinclude flag remove file simply like would operating system eg using unix rm command gitless detect change file tracked appear removed status gitless currently nt detect renames rename file gitless interpret file old name removed new one new name content created want renamed file tracked need track gl track branching branch independent line development always working branch branch history look gl history command change existing file new file create branch present branch switch branch create new branch use gl branch command switch another branch use gl switch command gl branch c develop created new branch develop gl switch develop switched branch develop list branch gl branch list branch gl branch b create branch b gl branch b delete branch b gl switch b switch branch b current branch master develop branch head last commit done branch default head new branch going equal head current branch want different commit head new branch provide one dpdivergentpoint flag specify commit use id specify via ancestry reference headn refers nth commit head change head current branch use shsethead flag sh flag useful example amend last commit run gl branch sh changing head current branch wo nt touch working directory additionally want reset working directory match new head use gl checkout eventually branch end divergent change two way bring change one branch onto current branch merge fuse merging branch merging change develop onto current branch gl merge develop creates new merge commit includes change develop addition change current branch fusing branch fusing branch give control merging fuse change branch onto current branch specify commits fuse insertion point default divergent commits fused insertion point divergent point point source branch diverged current example following figure depicts situation two branch master current branch develop last commit two branch common commit divergent point point master develop diverged gl fuse develop commits develop inserted master divergent point choose insertion point use ipinsertionpoint flag give commit id input head dpdivergentpoint oonly eexclude flag used customize set commits fused process conflict could occur gl status command change accordingly indicate file conflict edit file conflict mark resolved gl resolve passing file mark input conflict resolved gl commit commit continue fuse merge branch upstream branch branch upstream associated gl fuse gl merge used shorthand gl fuse merge upstreambranch set upstream branch current branch use gl branch su upstreambranch tagging use tag signify commit special way example use gl tag create tag name make point commit represents release gl tag c created new tag case tag point head current branch tag commits cicommit flag list tag gl tag list tag gl tag create tag gl tag delete tag tag ready release working remote repository refer remote repository could always use url easier alternative add repository remote gl remote command gl remote c trygitless http githubcomgitlessvcstrygitless remote trygitless mapping http githubcomgitlessvcstrygitless created successfully list existing remote gl remote remove trygitless gl remote trygitless use trygitless refer remote repository use trygitlesssomebranch refer branch name somebranch life trygitless downloading change also possible fuse merge change remote branch example gl merge trygitlessmaster would merge change remote branch present local current branch also use gl fuse uploading change send change upstream use gl publish publish command default updating upstream branch current branch none given input creating deleting listing remote branch create delete list remote branch use gl branch command use local branch gl branch c trygitlessdevelop create branch develop life remote trygitless recall default head new branch equal head current branch commits present remote uploaded list remote branch use rremote flag gl branch creating deleting listing remote tag create delete remote tag use gl tag command gl tag c create new tag life remote trygitless also list remote tag rremote flag gl tag create local repository remote passing url input gl init command local branch created remote branch local branch automatically configured upstream remote counterpart gitless v git saving change staging area gitless coupled flexible commit command make saving change repository straightforward commit modified tracked file gl commit leave modified tracked file foo bar commit gl commit e foo bar include untracked file commit gl commit commit modified tracked file gl commit commit modified tracked untracked file gl commit commit modified tracked file git commit leave modified tracked file foo bar commit git add git commit include untracked file commit git add git commit commit modified tracked file git commit commit modified tracked untracked file git commit error pathspec match file known git git add git commit also change classification file tracked untracked ignored nt matter whether file exists head gl status tracked file modification foo stop tracking change foo gl untrack foo file foo untracked file gl status untracked file foo exists head start tracking change foo gl track foo file foo tracked file gl status tracked file modification foo git status change staged commit modified foo stop tracking change foo git updateindex assumeunchanged foo git status start tracking change foo git updateindex noassumeunchanged foo git status change staged commit modified foo branching main thing understand gitless branch completely independent line development branch keep working version file separate whenever switch different branch content working directory saved one corresponding branch switching retrieved classification file also saved ie file untracked branch tracked another gitless remember gl status tracked file modification foo create new branch develop gl branch c develop created new branch develop switch develop gl switch develop switched branch develop gl status switch back master gl switch master switched branch master gl status tracked file modification foo git status change staged commit modified foo create new branch develop git branch develop switch develop git checkout develop git status change staged commit modified foo switch back master git checkout master change staged commit modified foo mean gitless nt worry uncommitted change conflicting change destination branch switch develop gl switch develop switched branch develop switch develop git checkout develop error local change following file would overwritten checkout foo please commit change stash switch branch aborting git stash saved working directory index state wip master head git checkout develop switched branch develop middle fusemerge want put aside conflict resolution later conflict switch back gl fuse develop conflict need resolve gl status branch master repodirectory middle fuse conflict must resolved committing tracked file modification foo conflict switch bugfix gl switch bugfix switched branch bugfix switch back develop gl switch develop switched branch develop gl status branch master repodirectory middle fuse conflict must resolved committing tracked file modification foo conflict git rebase develop first rewinding head replay work top applying commit trigger conflict using index info reconstruct base tree foo falling back patching base merge automerging foo conflict content merge conflict foo failed merge change patch failed foo conflict copy patch failed found git status rebase progress onto currently rebasing branch master unmerged path modified foo switch bugfix git checkout bugfix foo need merge error need resolve current index first git stash foo need merge foo need merge foo unmerged foo unmerged foo unmerged fatal gitwritetree error building tree save current index state git rebase abort git checkout bugfix switched branch bugfix switch back develop git checkout develop git status git rebase develop working remote repository syncing repository gitless work quite similar git configure new remote trygitless gl remote c trygitless http githubcomgitlessvcstrygitless remote trygitless mapping http githubcomgitlessvcstrygitless created successfully list existing remote gl remote remove trygitless gl remote trygitless download apply change branch trygitless gl fuse trygitlessmaster fuse succeeded gl branch su trygitlessmaster current branch master set track trygitlessmaster gl fuse src branch specified getting change upstream branch trygitlessmaster fuse succeeded send change remote gl publish src branch specified sending change upstream branch trygitlessmaster publish succeeded configure new remote trygitless git remote add trygitless http githubcomgitlessvcstrygitless download apply change branch trygitless git pull trygitlessmaster git branch setupstream master trygitlessmaster git pull send change remote git push
746,Lobsters,vcs,Git & VCS,Unorthodocs: Abandon your DVCS and Return to Sanity,http://bitquabit.com/post/unorthodocs-abandon-your-dvcs-and-return-to-sanity/,unorthodocs abandon dvcs return sanity,bitkeeper monotone tla baz darcs monticello built whole product went lecture circuit droids looking fell love dvcses rub adding better merge tracking pied piper say goodbye blob sanity sometimes gitannex say goodbye sane version synchronization repo submodules subrepositories say dare double dare red book apress single publisher need three different book use atlassian github felt need write online tutorial easiest way learn git start file format work command really hear people sing singing song angry men open pr touched least two month testify oh let go back start make mercurial scale gargantuan code base ease,hi name benjamin dvcs apologist pretty much always dvcs apologist know quite people using dvcses since mercurial git go back bitkeeper totally outhipster monotone actually remember struggling grok tla happy someone took time write baz remember promise failure darcs remember thinking even darcs comically primitive nothing poor imitation smalltalk dvcses like monticello mere iterative improvement classic smalltalk changesets merely adopted dvcs born molded see cv already man nothing cause selfinflicted blunt force trauma head arrival git mercurial godsend radically different used finally meant sufficiently advanced generalpurpose dvcs last could cleanse ground blood enemy obliterate use subversion cv thingie microsoft made tfs anything else might cross path replace mercurial truly desperate situation git goodness hell built whole product centralized around making dvcses easy simple use went lecture circuit explaining best use workflow droids looking somewhere along way think lost sight forest tree actively trying argue dvcses superior existing centralized source control system never really stopped long think maybe maybe fact well suited every single situation involved source code result effort people like seeing truly insane best practice name adopting git mind insist best practice workarounds oh since beginning bullshit today putting foot helped start nonsense going help stop dvcs great workflow fine tradeoff imposes good great let stop claiming free cost cost sometimes worth fell love dvcses actual reason github let coder cleanly publish code portfolio github happened use git underlying technology enable blog post another time let instead pretend purely due technical reason came atomicity cv treated atom file given file history file version repository really oh sure tag branch really operate repository level tool reached around release part daily flow subversion treated atom entire mean subversion claimed entire repository one single monotonically increasing version number subversion went far far enough went far saying everything really conventionoverconfiguration use directory turn meant go far enough forced subversion think merging branching file level git mercurial matter dvcses fix problem actually treating whole state repository atom fallout treat merging branching repositorylevel operation massive improvement subversion treating whole repo state atom real could thing like sanely track renames replay merge resolution realize deleting recreating file actual conflict suddenly meant longlived branch could sane turn meant feature flag could finally die good world amen rub note fell love dvcses got branching right nothing inherently distributed vcs sane branching merging could absolutely make centralized vcs got merging right indeed long horse bolted subversion closing barn door adding better merge tracking land literally year thing dvcs get definition everyone get copy full offline history entire repository please let tell something time ever used dvcses last twenty year count smalltalk changesets twelve wanted full history offline grand total maybe six time merely going time bandwidth get ever readily available work field tech space station submarine something okay sure huge feature rest u going assert use case need optimize choosing vcs even get started many developer seem assume get work done github go suffice say think developer pretty fundamentally unaware use dvcs distributed manner first place fine got distributed part free pied piper make source control system part saying whole history mean awful lot data cause let explore shall say goodbye blob sanity sometimes take blob aka binary asset blob part program need image need audio need mesh need bundle ton font android like three none happen wingdings large opaque file code nevertheless integral part program need versioned alongside code want meaningful representation take build program given point fine centralized system one copy give point amount disk space need basically size current target version whole thing really need care history stored dvcs though problem whole history given point turn mean need every version every blob blob usually compressed already usually compress diff well tend large mean repository bloat really huge size really fast sane engineer point would say well kind thing maybe use centralized system dvcs cult oh u instead tell blob totally different source code really versioned store invent insanity like gitannex nondistributed separatelyconfigured nongitlike store alongside source code know kind external binary asset management system work really well subversion turn work tolerably source control maybe take look say goodbye sane version synchronization blob dvcses handle well also repository really big history andor ton file repository get extremely single application bundled dependency clock mb repository example linux happily run along also structure traditionally used git simply scale well large repository git example directory git assume nod ecoterrorists call tree identified shas turn determined content turn defined shas tree contain recursively mean changing file deep directory require generating new tree every directory course figuring changed given directory requires loading tree going chain wondered git blame run slow hell big repos know problem u dvcs apologist nosiree instead told chunk project gazillion repos forced break code base tiny piece right happy dvcses scale size made code better stupid like saying chopping arm good force get really good tying shoe teeth much big fan zen saying sound hand clapping argument specious best justifying weakness acceptable claiming superior make absurd even dvcs proponent really believe get instead design kind tool navigate around issue google wrote repo git gained submodules mercurial gained subrepositories build system suddenly learned speak git mercurial due inevitable repository explosion would accompany decentsized project work around nominal design improvement facebook google know keeping source code one single repository good turn using scm manage source dependency concept know versioning source code kind whole point using first place course sometimes genuinely want separate repository align exactly wanted subversion cv let admit saying small good complete misfeature giving something going route gaining something form bdsm dependency management say dare double dare might almost tolerable dvcses easier use traditional scms look many book website exist git realize looking something deeply mucked back ye day subversionne red book good people happy sure tutorial covered esoteric thing never needed far story cv largely git happened git amazingly simple use apress single publisher need three different book use simple atlassian github felt need write online tutorial try clarify main git tutorial actual git website transparent developer routinely tell easiest way learn git start file format work command yet someone dare say git harder scms inevitably get yelled assume combination stockholm syndrome groupthink run amok overdosing fivehour energy bucket tip say something hard everyone start screaming easy really hard people yelling trying desperately pretend like easy feel like idiot long took figure thing turn make feel like idiot taking long grasp easy concept happily pay forward come one two great emperor clothes moment computing hear people sing singing song angry men one last major argument hear time dvcses superior somehow enable democratic code development code think github pull request alpha omega software development hail xenu indeed listen would believe opensource development impossible least absolutely horrible github sprang melodious existence like someone hardcore stockholm syndrome complimenting kidnapper pancake prior github send patch project needed get copy source code make change generate patch diff email mailing list watch get ignored whereas github pullrequest model instead need fork repository github clone fork source code make sure right branch upstream expects patch based totally take patch master expect dev viceversa make new local branch patch go ahead make patch commit push new branch github fork go github ui create pull request watch get ignored see workflow done tiniest tiny project ground make thing easier yet watch openbsd entire freaking operating system get fine patch bomb hell mercurial know dvcs development via patchbomb email pull request extra complication really get anything still frequently need rebase patch merge cleanly like used tinker patch fuzz factor still get ignored open pr touched least two month testify fact actual advantage see get name explicitly commit history instead thanks changelog readme mean good job want maybe admit vanity tooling oh let go back start going abandon dvcses honestly end day know want still dvcs apologist still want use dvcses happen like ton think time u apologist take step back put crazy juice admit moment made thing horrendously complicated achieve end could met many way thankfully whole point may moot soon facebook google putting tremendous amount effort make mercurial scale gargantuan code base largely remove dvcs also mean able use least mercurial completely sane way completely reasonable workflow want manage code git may get someday end day end decade later right back could beginning centralized scm scale insane size also sane branching merging long live centralized scm
747,Lobsters,vcs,Git & VCS,Announcing Goal-Oriented Git,https://robots.thoughtbot.com/announcing-goal-oriented-git,announcing goaloriented git,announcing goaloriented git free sample beta,announcing goaloriented git pleased announce beta release latest book goaloriented git want learn use git without worrying much going hood book every chapter take something git tracking change searching file collaborating explain practically achieve goal stick basic goal book teach working set git command get daytoday situation beta book work progress may find error also able ask question help shape book development get discount final price regular update write chapter need help deciding commit download free sample book hopefully give push right direction checkout beta sorry pun blame
748,Lobsters,vcs,Git & VCS,Hacking with Andrew and Brad: tip.golang.org,https://www.youtube.com/watch?v=1rZ-JorHJEY,hacking andrew brad tipgolangorg,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hacking andrew brad tipgolangorg youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature hacking andrew brad tipgolangorg youtube
749,Lobsters,vcs,Git & VCS,Why I Don't Hate Git: Hidden Consistency,http://lucumr.pocoo.org/2015/2/17/ui-and-hidden-consistency/,nt hate git hidden consistency,nt hate git hidden consistency cogito git horrible ui git koan learning ui v concept internals chapter git book rough would say good default solid design git git thought ui,nt hate git hidden consistency written tuesday february git interesting topic used initially git ui cogito still thing ca nt say enjoyed using much time development task svn world good little later played around mercurial instantly fell love held onto mercurial long time defended vigorously finally start use git took multiple attempt convinced migrate repository mercurial git git horrible ui suppose anyone come version control system git quickly surprised utter lack consistency ui steve losh famously made fun git koan however every time topic come bit disbelief nt remember git ui confusing daily operation sure enough whatever reason git remote work different git branch git tag reason given also use different way would even make association git command actually remember odd git show bit unfamiliar syntax exploring object content yet time remember fighting mercurial commonly strained relationship perforce ca nt remember many case issue git hate git way learning ui v concept thinking bit think reason git resonates well learned git differently version control system mercurial perforce learn ui learn solve specific problem consequence implementation action mystery git hand even first page tutorial direct link internals chapter git book explains internal implementation git even case past git even ui user expected work file git folder remember playing around early day git even way commit githead still symlink current branch documented way commit dance echo commit message gitcommittree gitwritetree githead later alias commit added even tutorial still rough would say git nt start version control system started concept tool could use build version control system top set different tone developed many system surely git changed last year concept changed grand scheme thing changed much certain beauty able create repository git another commit git another commit git looking resulting log git core concept git changed course ui something need learn work git learn underlying concept git ui fade largely background good default git might best ui good default getting better time thing look nice default common behavior general default least discussion changing one blessed way something easy learn branching git never changed knowledge acquired ten year ago valid today solid design ultimately think linus created git version control system made ungodly good design little change necessary sure detail change later core good working commits object turned right way branching clearly always right decision even mercurial eventually concede warning create named branch learned git concept use thing sure sometimes need google rarely used command really matter need never situation failed badly could recover beautiful simple concept make lot inconsistent ui ui lack consistency maybe simplicity core design git value ton git ultimately reason forgive git ui lot recollect frustrating experience really matter git always side screwed really badly merging wrong thing together accidentally deleting data much yet never lost data felt left abandoned tool fail sometimes make copy git folder carefully trace back wrong git shine problem recover hand horrible memory making mistake version control system either impossible required assistance developer system get misery neither break misused broke volition ca nt say thing version control system used successfully broke many subversion checkout even destroyed database server screwed perforce workspace entire mercurial repository worst ever happened using git flask repository eternity contain bad file permission old tree record due temporary github bug think want software like git software way work crucial part user experience disconnect work present user strong counter example cognitive disconnect using apple recent software save dialog gone save dialog show delete button even something saved file system ever many time accidentally overwrote file keynote preview knowledge file system work apply ui map application operation fundamentally different method operation discarding something never saved deleting file already file system called look cause frustration nt hate git entry tagged git thought ui
750,Lobsters,vcs,Git & VCS,How to write a new git protocol,https://rovaughn.github.io/2015-2-9.html,write new git protocol,write new git protocol git remote helper documentation git remote helper gitremotetestgitsh gitremotegrave basic starting project go installed command command command command trying us git remote helper felipecgitremotehg peritusgitremotecouch gitremotegrave couple compression trick filegravecom hacker news rprogramming,write new git protocol used trouble keeping track file often remember whether saved file desktop laptop phone floating around cloud somewhere plus certain information like password bitcoin key feel comfortable sending email plain text wanted store data git repository backed single location could view old version file worry data deleted plus familiar using git push fetch file various computer like said want upload secret key password github bitbucket even private repository cool idea writing tool encrypt repository pushed backup unfortunately able use git push like normally would instead would use something like encryptedgit push http examplecom least thought discovered gitremotehelpers git remote helper online found documentation git remote helper turn run command git remote add origin asdf examplecomrepo git push origin git would first check asdf protocol built saw would check gitremoteasdf path run gitremoteasdf origin asdf examplecomrepo handle communication similarly also run git clone asdf http examplecomrepo cause git invoke gitremoteasdf origin http examplecomrepo unfortunately found documentation severely lacking detail needed actually implement helper git source code found shell script called gitremotetestgitsh implement testgit used test git remote helper system basically implement pushing fetching local repository filesystem git clone testgit existingrepository equivalent git clone existingrepository similarly push fetch local repository testgit protocol article walk code gitremotetestgit reimplement go creating brand new helper gitremotego along way explain code mean various thing learn order implement remote helper gitremotegrave basic make following section clearer let establish terminology basic mechanism run git remote add myremote go http examplecomrepo git push myremote master git instantiate new process running command gitremotego myremote http examplecomrepo notice first argument remote name second argument url run git clone go http examplecomrepo helper instantiated gitremotego origin http examplecomrepo remote origin automatically created cloned repository git instanties helper new process open pipe stdin stdout stderr communicating command sent helper stdin helper responds stdout output helper produce stderr redirected wherever git stderr probably terminal following diagram demonstrates relationship last point want make begin distinguish local remote repository generally always local repository one running git remote one making connection push sending change local remote fetch taking change remote local clone cloning remote local git run helper set environment variable gitdir git directory local repository eg localgit starting project article assuming go installed gopath pointing directory named go let start creating directory gosrcgitremotego make possible install helper running go install assuming gobin path mind write first line gosrcgitremotegomaingo package main import log o func main er error len osargs return fmterrorf usage gitremotego remotename url remotename osargs url osargs func main err main err nil logfatal err separated main separate function error handling easier return error also allows u use defer since logfatal call osexit run defer function let look top gitremotetestgit see next binsh copyright c felipe contreras alias url dir gitdirtestgit alias prefix refstestgit alias defaultrefspec refsheads prefix head refspec gitremotetestgitrefspec defaultrefspec test z refspec prefix ref gitdir urlgit export gitdir force mkdir p dir test z gitremotetestgitnomarks gitmarks dirgitmarks testgitmarks dirtestgitmarks test e gitmarks gitmarks test e testgitmarks testgitmarks fi variable call alias calling remotename url mean thing next declaration dir gitdirtestgit alias creates namespace git directory specific testgit protocol remote using way testgit file origin remote different backup remote see statement make sure local directory created exist already let add creation local directory go program add path import list localdir pathjoin osgetenv gitdir go remotename err osmkdirall localdir err nil return err continuing script come across following line prefix refstestgit alias defaultrefspec refsheads prefix head refspec gitremotetestgitrefspec defaultrefspec test z refspec prefix ref let talk ref really quick git ref stored gitrefs git ref head master remote gravy origin master tag tree remotesoriginmaster contains shahash recent commit master branch origin remote headsmaster refers recent commit local master branch ref like pointer commit refspec allows u map remote ref local ref code prefix directory remote ref held remote name origin remote master branch would determined ref gitrefstestgitoriginmaster basically creates protocolspecific namespace remote branch next line actual refspec line defaultrefspec refsheads prefix head expands defaultrefspec refsheads refstestgit alias mean map remote branch look like refsheads mean text refstestgit alias replaced whatever first one refsheadsmaster becomes refstestgitoriginmaster instance essentially refspec allows testgit add branch tree like git ref head master remote origin master testgit origin master tag next line refspec gitremotetestgitrefspec defaultrefspec set refspec gitremotetestgitrefspec unless exist becomes defaultrefspec testgit tested refspecs assume get set defaultrefspec finally next line test z refspec prefix ref seems set prefix ref gitremotetestgitrefspec exists empty assume case need refspec add line refspec fmtsprintf refsheads refsgo remotename following code see gitdir urlgit export gitdir another fact gitdir set environment git binary use directory gitdir git directory instead local git command make future git command run helper run context remote repository translate err ossetenv gitdir pathjoin url git err nil return err remember course dir variable localdir still refer subdirectory repository fetching pushing last bit code main loop test z gitremotetestgitnomarks gitmarks dirgitmarks testgitmarks dirtestgitmarks test e gitmarks gitmarks test e testgitmarks testgitmarks fi content statement executed gitremotetestgitnomarks set assume case mark file used git fastexport git fastimport record information ref blob transferred important mark kept multiple invocation helper stored localdir gitmarks refers mark local repository git writes testgitmarks store mark remote one handler writes two following line appear equivalent touch invocation mark file exist created empty test e gitmarks gitmarks test e testgitmarks testgitmarks need file program let start writing touch function create path empty file nt exist otherwise nothing work opening file exclusive mode already exists error returned rather truncating func touch path string error file err osopenfile path osowronlyosocreateosoexcl osisexist err return nil else err nil return err return fileclose create mark file gitmarks pathjoin localdir gitmarks gomarks pathjoin localdir gomarks err touch gitmarks err nil return err err touch gomarks err nil return err however one thing come across helper fails reason mark file left invalid state guard save original content file rewrite main function return error add ioioutil import originalgitmarks err ioutilreadfile gitmarks err nil return err originalgomarks err ioutilreadfile gomarks err nil return err defer func er nil ioutilwritefile gitmarks originalgitmarks ioutilwritefile gomarks originalgomarks finally begin central command loop command passed helper via stdin command string terminated newline helper responds command via stdout stderr piped end user let make loop add bufio import list stdinreader bufionewreader osstdin note command include trailing newline command err stdinreaderreadstring n err nil return err switch case command capabilitiesn case command n return nil default return fmterrorf received unknown command q command capability command first command implement capability helper expected print command capability support separate line terminated empty line echo import echo export test n refspec echo refspec refspec test n gitmarks echo importmarks gitmarks echo exportmarks gitmarks fi test n gitremotetestgitsignedtags echo signedtags test n gitremotetestgitnoprivateupdate echo noprivateupdate echo option echo list capability state helper support import export option command option command allows git change verbosity helper signedtags mean git creates fastexport stream export command pas signedtagsverbatim gitfastexport noprivateupdate instructs git update private ref successfully pushed never seemed need feature refspec refspec tell git refspec want use importmarks gitmarks exportmarks gitmarks mean git save mark generates gitmarks file mean git understand line must fail instead ignoring helper depends mark file saved work version git support let ignore signedtags noprivateupdate option provided gitremotetestgit completeness testing need example implement simply case command capabilitiesn fmtprintf importn fmtprintf exportn fmtprintf refspec sn refspec fmtprintf importmarks sn gitmarks fmtprintf exportmarks sn gitmarks fmtprintf n list command next command list provided capability list must always supported helper helper receives list command print ref remote repository series line format objectname refname followed empty line refname name ref objectname ref point objectname commit hash refer another ref name refname mean ref value unable acquired gitremotetestgit implementation following git foreachref format refname refsheads head git symbolicref head echo head head echo remembering gitdir cause git foreachref run remote repository print line refname every branch remote repository well head head head name ref head repository refers ordinary repository two branch master development output might look like refsheadsmaster refsheadsdevelopment refsheadsmaster head blank let write let write function gitlistrefs need later add osexec byte import list return map refnames objectnames func gitlistrefs map string string error err execcommand git foreachref format objectname refname refsheads output err nil return nil err line bytessplit byte n ref make map string string len line line range line field bytessplit line byte len field break ref string field string field return ref nil write gitsymbolicref func gitsymbolicref name string string error err execcommand git symbolicref name output err nil return fmterrorf gitsymbolicref git symbolicref v name err return string bytestrimspace nil implement list command like case command listn ref err gitlistrefs err nil return fmterrorf command list v err head err gitsymbolicref head err nil return fmterrorf command list v err refname range ref fmtprintf sn refname fmtprintf headn head fmtprintf n import command next import command git us trying fetch clone command actually come batch sent series line import refname followed blank line git sends command helper executes git fastimport binary pipe helper stdout stdin word helper expected return git fastexport stream stdout let look gitremotetestgit implementation read import line true ref line ref ref ref read line test line import break done test n gitmarks echo feature importmarks gitmarks echo feature exportmarks gitmarks fi test n gitremotetestgitfailure echo feature done exit fi echo feature done git fastexport testgitmarks importmarks testgitmarks testgitmarks exportmarks testgitmarks ref sed e refsheads prefix head g echo done loop top true comment accumulates import refname command single variable ref list ref separated space following script using gitmarks file assuming print feature importmarks gitmarks feature exportmarks gitmarks tell git pas importmarks gitmarks exportmarks gitmarks git fastimport next branch fails helper gitremotetestgitfailure set testing purpose feature done printed signalling export stream follows finally git fastexport called remote repository setting mark file remote mark testgitmarks passing list ref want export output gitfastexport piped sed script map refsheads refstestgit aliasheads refspec passed git take care mapping export export stream done printed let try go case stringshasprefix command import ref make string make sure trim trailing newline ref stringstrimspace stringstrimprefix command import ref append ref ref command err stdinreaderreadstring n err nil return err stringshasprefix command import break fmtprintf feature importmarks sn gitmarks fmtprintf feature exportmarks sn gitmarks fmtprintf feature donen args string fastexport importmarks gomarks exportmarks gomarks refspec refspec args append args ref cmd execcommand git args cmdstderr osstderr cmdstdout osstdout err cmdrun err nil return fmterrorf command import git fastexport v err fmtprintf donen export command next export command finish one helper done git issue command pushing remote repository sending command stdin git follows stream produced git fastexport git fastimport remote repository test n gitremotetestgitfailure consume input fastexport nt get sigpipe git would also notice case want make sure exercising later error check read line test done line break done exit fi git foreachref format refname objectname git fastimport force force testgitmarks importmarks testgitmarks testgitmarks exportmarks testgitmarks quiet figure ref updated git foreachref format refname objectname read ref case ref continue unchanged esac test z gitremotetestgitpusherror echo ok ref else echo error ref gitremotetestgitpusherror fi done echo first statement testing purpose next line interesting creates space separated list refname objectname pair ref use determine ref updated import next command rather self explanatory git fastimport run stream receive stdin passing force specified quiet remote mark file next run git foreachref see ref changed every ref command return check see refname objectname pair list nothing changed continues onto next ref list however print ok refname signify git ref updated successfully printing error refname message tell git ref failed imported remote end finally print blank line show import done write use gitlistrefs function defined earlier case command exportn beforerefs err gitlistrefs err nil return fmterrorf command export collecting ref v err cmd execcommand git fastimport quiet importmarks gomarks exportmarks gomarks cmdstderr osstderr cmdstdin osstdin err cmdrun err nil return fmterrorf command export git fastimport v err afterrefs err gitlistrefs err nil return fmterrorf command export collecting ref v err refname objectname range afterrefs beforerefs refname objectname fmtprintf ok sn refname fmtprintf n trying run go install build install gitremotego gobin try following first create two empty git repository make commit testlocal push testremote using new helper cd home git init testremote initialized empty git repository hometestremotegit git init testlocal initialized empty git repository hometestlocalgit cd testlocal echo hello world hellotxt git add hellotxt git commit first commit master rootcommit first commit file changed insertion create mode hellotxt git remote add origin go hometestremote git push origin go hometestremote new branch master master cd testremote git checkout master l hellotxt cat hellotxt hello world us git remote helper git remote helper used implement interface source control like felipecgitremotehg push code couchdbs peritusgitremotecouch among others could probably think wrote git remote helper original motivation gitremotegrave use push fetch encrypted archive file system httphttps git remote add usb grave mediausbbackupgrave git push backup using couple compression trick archive typically size original repository want convenient place store encrypted git repository made site filegravecom discussion article taking place hacker news rprogramming
751,Lobsters,vcs,Git & VCS,A successful Git branching model,http://nvie.com/posts/a-successful-git-branching-model/,successful git branching model,note reflection github flow git web book every git book decentralized centralized main branch supporting branch feature branch creating feature branch incorporating finished feature develop release branch creating release branch finishing release branch edit hotfix branch creating hotfix branch finishing hotfix branch edit release branch currently exists hotfix change need merged release branch instead summary update gitflowmodelsrckey gitbranchingmodelpdf post blog,note reflection march model conceived year ago long git came year gitflow branching model laid article become hugely popular many software team point people started treating like standard sort unfortunately also dogma panacea year git taken world storm popular type software developed git shifting towards web apps least filter bubble web apps typically continuously delivered rolled back nt support multiple version software running wild class software mind wrote blog post year ago team continuous delivery software would suggest adopt much simpler workflow like github flow instead trying shoehorn gitflow team however building software explicitly versioned need support multiple version software wild gitflow may still good fit team people last year case please read conclude always remember panacea nt exist consider context nt hating decide post present development model introduced project work private year ago turned successful meaning write never really found time thoroughly talk project detail merely branching strategy release management git thorough discussion pro con git compared centralized source code control system see web plenty flame war going developer prefer git tool around today git really changed way developer think merging branching classic cvssubversion world came mergingbranching always considered bit scary beware merge conflict bite something every git action extremely cheap simple considered one core part daily workflow really example cvssubversion book branching merging first discussed later chapter advanced user every git book already covered chapter basic consequence simplicity repetitive nature branching merging longer something afraid version control tool supposed assist branchingmerging anything else enough tool let head onto development model model going present essentially set procedure every team member follow order come managed software development process decentralized centralized repository setup use work well branching model central truth repo note repo considered central one since git dvcs thing central repo technical level refer repo origin since name familiar git user developer pull push origin besides centralized pushpull relationship developer may also pull change peer form sub team example might useful work together two developer big new feature pushing work progress origin prematurely figure subteams alice bob alice david clair david technically mean nothing alice defined git remote named bob pointing bob repository vice versa main branch core development model greatly inspired existing model central repo hold two main branch infinite lifetime master branch origin familiar every git user parallel master branch another branch exists called develop consider originmaster main branch source code head always reflects productionready state consider origindevelop main branch source code head always reflects state latest delivered development change next release would call integration branch automatic nightly build built source code develop branch reach stable point ready released change merged back master somehow tagged release number done detail discussed therefore time change merged back master new production release definition tend strict theoretically could use git hook script automatically build rollout software production server everytime commit master supporting branch next main branch master develop development model us variety supporting branch aid parallel development team member ease tracking feature prepare production release assist quickly fixing live production problem unlike main branch branch always limited life time since removed eventually different type branch may use feature branch release branch hotfix branch branch specific purpose bound strict rule branch may originating branch branch must merge target walk minute mean branch special technical perspective branch type categorized use course plain old git branch feature branch may branch develop must merge back develop branch naming convention anything except master develop release hotfix feature branch sometimes called topic branch used develop new feature upcoming distant future release starting development feature target release feature incorporated may well unknown point essence feature branch exists long feature development eventually merged back develop definitely add new feature upcoming release discarded case disappointing experiment feature branch typically exist developer repos origin creating feature branch starting work new feature branch develop branch git checkout b myfeature develop switched new branch myfeature incorporating finished feature develop finished feature may merged develop branch definitely add upcoming release git checkout develop switched branch develop git merge noff myfeature updating summary change git branch myfeature deleted branch myfeature git push origin develop noff flag cause merge always create new commit object even merge could performed fastforward avoids losing information historical existence feature branch group together commits together added feature compare latter case impossible see git history commit object together implemented would manually read log message reverting whole feature ie group commits true headache latter situation whereas easily done noff flag used yes create empty commit object gain much bigger cost release branch may branch develop must merge back develop master branch naming convention release release branch support preparation new production release allow lastminute dotting crossing furthermore allow minor bug fix preparing metadata release version number build date etc work release branch develop branch cleared receive feature next big release key moment branch new release branch develop develop almost reflects desired state new release least feature targeted releasetobebuilt must merged develop point time feature targeted future release may must wait release branch branched exactly start release branch upcoming release get assigned version earlier moment develop branch reflected change next release unclear whether next release eventually become release branch started decision made start release branch carried project rule version number bumping creating release branch release branch created develop branch example say version current production release big release coming state develop ready next release decided become version rather branch give release branch name reflecting new version number git checkout b develop switched new branch bumpversionsh file modified successfully version bumped git commit bumped version number bumped version number file changed insertion deletion creating new branch switching bump version number bumpversionsh fictional shell script change file working copy reflect new version course manual point file change bumped version number committed new branch may exist release may rolled definitely time bug fix may applied branch rather develop branch adding large new feature strictly prohibited must merged develop therefore wait next big release finishing release branch state release branch ready become real release action need carried first release branch merged master since every commit master new release definition remember next commit master must tagged easy future reference historical version finally change made release branch need merged back develop future release also contain bug fix first two step git git checkout master switched branch master git merge noff merge made recursive summary change git tag release done tagged future reference edit might well want use u key flag sign tag cryptographically keep change made release branch need merge back develop though git git checkout develop switched branch develop git merge noff merge made recursive summary change step may well lead merge conflict probably even since changed version number fix commit really done release branch may removed since need anymore git branch deleted branch hotfix branch may branch master must merge back develop master branch naming convention hotfix hotfix branch much like release branch also meant prepare new production release albeit unplanned arise necessity act immediately upon undesired state live production version critical bug production version must resolved immediately hotfix branch may branched corresponding tag master branch mark production version essence work team member develop branch continue another person preparing quick production fix creating hotfix branch hotfix branch created master branch example say version current production release running live causing trouble due severe bug change develop yet unstable may branch hotfix branch start fixing problem git checkout b master switched new branch bumpversionsh file modified successfully version bumped git commit bumped version number bumped version number file changed insertion deletion forget bump version number branching fix bug commit fix one separate commits git commit fixed severe production problem fixed severe production problem file changed insertion deletion finishing hotfix branch finished bugfix need merged back master also need merged back develop order safeguard bugfix included next release well completely similar release branch finished first update master tag release git checkout master switched branch master git merge noff merge made recursive summary change git tag edit might well want use u key flag sign tag cryptographically next include bugfix develop git checkout develop switched branch develop git merge noff merge made recursive summary change one exception rule release branch currently exists hotfix change need merged release branch instead develop backmerging bugfix release branch eventually result bugfix merged develop release branch finished work develop immediately requires bugfix wait release branch finished may safely merge bugfix develop already well finally remove temporary branch git branch deleted branch summary nothing really shocking new branching model big picture figure post began turned tremendously useful project form elegant mental model easy comprehend allows team member develop shared understanding branching releasing process highquality pdf version figure provided go ahead hang wall quick reference time update anyone requested gitflowmodelsrckey main diagram image apple keynote gitbranchingmodelpdf post blog
753,Lobsters,vcs,Git & VCS,Git and Vim - maximize the joy and fun,http://bit.ly/1uAOUUU,git vim maximize joy fun,fewer faster,copyright fewer faster llc slide content description owned creator
754,Lobsters,vcs,Git & VCS,How to use git to lose data,http://www.cs.cmu.edu/~davide/howto/git_lose.html,use git lose data,acknowledgment scott chacon pro git dvcs nature git forgetting sturgeon law might care missing hook automatically copied one repository another tag pushed remote repository default pro git note self suggestion gitgc manual page,quot html transitionalen http acknowledgment first say git lot positive feature least energetic development community focus quality power resisting uncontrolled feature bloat linus torvalds deserves credit advancing cause distributed version control system something advance cause rather complaining next grateful scott chacon author pro git book make possible achieve substantial understanding git single evening bought physical copy book encourage well least sufficiently ancient buy book physical form dvcs nature git git originally arose emergency solution specific problem namely thousand people contribute debugged change linux kernel without causing central coordinator central source repository collapse git used many people many project goal original problem designed solve influence happens applied problem git distributed version control system dvcs currently hot area different one different goal accomplishment sadly variety often obscured fact different version control system use term thing completely different git subversion mercurial perforce changesets word mean something genuinely different four system whee easy think distributed version control system bear similar relationship plain old vcs distributed file system bear plain old f plain old centralized thing x distributed thing also x without bad old centralized part well job file system store file permanently reliably distributed file system harness bunch machine together also store file permanently reliably hopefully even reliably hand job version control system reliably store multiple version file least case git job distributed version control system harness bunch machine together reliably store everybody version big part git design forgetting thing quite reasonable viewpoint coordinator giant software project patch obey sturgeon law word point big software project whole proposed change wrong forgotten maintained tracked shared people play multiple place git example compared vcs git branch ephemeral barely considered branch particular real way answer question state xxx branch two week ago git version question start snapshot currently named xxx travel back two week find git branch actually ephemeral label may relationship xxx point pointed two week ago usually close relationship especially remotetracking branch branch defined wise careful manager upstream repository usually nt possible look relationship used reflog better worse really thing traditional vcs branch might care course developer small project say developer might need multiple shared branch discussion may seem esoteric irrelevant may well think git used small setting lot like vcs used small setting except fresh cool rest piece like counsel way git core design goal could surprise potentially unpleasant way key issue even used purely locally one person git designed forget thing usually thing forgets thing already forgotten never need case great git user idea git intends forget unpleasant surprise theoretically possible example let say tend develop laptop key motivator dvcs system general laptop might break stolen might fall river set repository somewhere else also useful collaborating closely small group people let say one day something bad happen git repository laptop lost problem right diligently pushing stuff nonlaptop repository everything right nope read might want take moment write everything think gone forever along local repository concreteness imagine typed git push command completed successfully elephant crushed laptop missing ok list missing dirty uncommitted state true almost every revision control system mentioned warning anybody using git first revision control system git change nt committed declared permanent via git add git commit considered tentative hence saved anywhere use git status frequently make sure know uncommitted keep ignore file date output git status accurate enough pay attention hook small piece code execute ask git perform various action eg possible configure git sanitycheck commit maybe enforce coding style actually committed hook automatically copied one repository another security reason lose repository need manually reinstall whatever hook using big deal probably private repository hopefully hook performing convenience function rather necessary one reflog lose repository reflog gone reflog data structure record historical association ref branch name le commits data structure answer question commit head master branch last tuesday lunch accidentally done something odd one branch reflog easiest place go spelunking find lost history unless reflog lost branch git branch mentioned ephemeral cursor git model expects branch people remain private one repository merged rebased fully partially onto branch abandoned later garbagecollected branch may set promoted tracking branch case easily pushed somewhere else nt common case nt automatic lose repository may well lose state tag git two type tag lightweight tag much like branch name commit main difference branch cursor move around semiautomatically make commits lightweight tag expected stay still created annotated tag like commits textual description hashed signed regardless key issue tag pushed remote repository default furthermore customary push lightweight tag ever therefore order tag survive loss repository remember invoke tag push tag possible also possible forget commits inactive branch work tracking branch nt completely happy nt push switch working branch forget localonly state first branch time go may believe work done committed busily pushing work safely stored somewhere else work around git push git push mirror note despite name push everything mirror actually delete thing remote repository deleted locally unreferenced commits commit git store work robust hashcertified data structure move head cursor relevant branch point commit object entry also made reflog commit reach safety repository branch pushed however standard git operation rebase reset hard cause branch redirected way given commit longer part historical record branch notice happened care use reflog find commit make part history otherwise design commit never leave repository note mirror flag push push commits nt part branch stashed work possible temporarily abandon dirty state branch return clean checkout later get back stashed dirty state git stash area implemented term local ref reflog backup safety net commit object contains saved work pushed via git push mirror see warning otherwise design remain local repository gitrerere data rerere tool remembers resolved particular merge conflict past attempt replay resolution conflict arises later time writing closest git come actual support change opposed state information stored gitrrcache local given repository pushed ever anything course mean information lost repository lost also somewhat surprising implication git rerere fully automate merge one repository learned merge certain conflict merge would need done completely manually different repository good luck explaining svn user another git user matter git note note way add information commit object commit happened commit object immutable read documentation note independent branch commits annotate pushed default pushed mirror pushed manually see pro git note self information wrote list reading mine miss anything list might want pause adjust mental model bit list look exactly like mine nt take much comfort maybe overlooking something suggestion internalize concept git designed forget thing nt seen something reach another repository maybe nt heck even see go somewhere else maybe fell historical record got garbagecollected internalize fact git basically design way save work somewhere else even though push two option sound like would use git extension stgitqgit carefully study documentation determine whether information extension creates relies backed another repository never never never delete repository telling might need even diligently try push change personal repository shared repository also periodically back repository copying whole thing somewhere else nt garbagecollect repository sound cool remember old saying one person trash another person treasure fact probably wise consult gitgc manual page raise default garbagecollection time threshold andor disable garbage collection entirely advice supposes configuring personal repository shared repository small project ie one many people using git solve different problem originally designed quirk git data model probably best single commit change content file rename file nothing dreadful happen change file drastic git may think deleted original file created new one also nt rename directory quirk mean git often apply change file even name changed almost impossible git create file right directory create originally happened directory renamed another branch
755,Lobsters,vcs,Git & VCS,"Codetree - GitHub Issues, Managed",https://codetree.com/,codetree github issue managed,manage entire development workflow,manage entire development workflow codetree add powerful functionality issue pull request staying fully synchronized github use kanban board custom stage combined automated workflow tool move issue choose view issue informationdense list view track dependency group issue epic prioritize size issue codetree allows work issue across multiple repos one view
756,Lobsters,vcs,Git & VCS,Vulnerability announced: update your Git clients,https://github.com/blog/1938-git-client-vulnerability-announced,vulnerability announced update git client,critical git security vulnerability announced today strongly encourage user github github enterprise update git client soon possible github window github mac announced maintenance release git window jgit official git mailing list announcement blog,critical git security vulnerability announced today affecting version official git client related software interacts git repository including github window github mac clientside vulnerability githubcom github enterprise directly affected vulnerability concern git gitcompatible client access git repository caseinsensitive casenormalizing filesystem attacker craft malicious git tree cause git overwrite gitconfig file cloning checking repository leading arbitrary command execution client machine git client running o x hf version microsoft window ntfs fat exploitable vulnerability linux client affected run casesensitive filesystem strongly encourage user github github enterprise update git client soon possible particularly careful cloning accessing git repository hosted unsafe untrusted host repository hosted githubcom contain malicious tree trigger vulnerability verify block tree push also completed automated scan existing content githubcom look malicious content might pushed site vulnerability discovered work extension dataquality check always performed repository pushed server protect user malformed malicious git data updated version github window github mac available immediate download contain security fix desktop application bundled version git commandline client addition following updated version git address vulnerability git core team announced maintenance release current version git git window also known msysgit released maintenance version two major git library jgit released maintenance version fix third party software using library strongly encouraged update detail vulnerability found official git mailing list announcement gitblame blog
757,Lobsters,vcs,Git & VCS,The web is failing as a collaborative tool,https://gist.github.com/anonymous/1c3e2ccde264bdbe1150,web failing collaborative tool,reload reload,instantly share code note snippet web failing collaborative tool client server model consistent internet dns like domain parking system certificate authority oh yea every reason trust people web client server model centralises data innovation slows crawl usually everybody affected locality everything pretty much equidistant due search consistent protocol inconsistent internet imagine getting whole world collaborating together git repos dvcs style repos apps git framework decentralisation basically change whatsoever thanks linus development execution happen time idea website social network seem ridiculous application landscape start evolve fast anyone able contribute example game developer trivially able user playing game making profoundly social nature internet eventually see border drawn upon protocol line rather dns language web next web wo nt restriction polyglot internet perform action time signed another tab window reload refresh session signed another tab window reload refresh session
758,Lobsters,vcs,Git & VCS,AWS CodeCommit,https://aws.amazon.com/codecommit/,aws codecommit,,aws codecommit edmundscom website offer detailed constantly updated information vehicle million monthly visitor able reduce time spent administration maintenance task
759,Lobsters,vcs,Git & VCS,Reimplementing 'git clone' in Haskell from the bottom up,http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/,reimplementing git clone haskell bottom,reimplementing git clone haskell bottom stefansaasen motivation http bitbucketorgssaasengitinhaskellfromthebottomup gat git clone haskell hackage overview git protocol pack file object store index format git bottom haskell clone process git clone man page git transport pack wire protocol transport protocol reference discovery capability packfile negotiation packet line format client server exchange gitdaemon remote helper tcpdump wireshark ngrep implementing ref discovery tcp client implementing pack file negotiation pack file format documentationtechnicalpackformattxt file header object checksum hexfiend pack file object variable length srcgitpackpackfilehs http wwwzlibnetzlibhowhtml iterateecompress delta encoding file system support delta compression binary text xdelta libxdiff diff ing file format delta representation file system support delta compression testing patch algorithm example implementation delta encoding algorithm ref v ofs delta summary git repository git repository layout man page object store object disk lightweight http gitscmcombookengitinternalsgitobjects object storage format http gitscmcombookengitinternalsgitobjects ref ref implementation working copy index reading object commit blob tree http gitscmcombookengitinternalsgitobjects gitfastimport git index inotifywait spy index format clone command reimplemented missing conclusion git concept,reimplementing git clone haskell bottom stefan saasen march stefansaasen motivation order give structure ongoing investigation git data structure protocol implementation decided reimplement git clone without using git plumbing command existing git library along way tried keep implementation note help understand building block required replicate clone functionality git clone implementation came exercise obviously limited practical value required investigating area git git user rarely exposed goal exercise go wide deep take certain shortcut omission order implement minimal yet functional clone command source code follows found http bitbucketorgssaasengitinhaskellfromthebottomup note number git related haskell implementation library already eg gat git clone haskell number git related package hackage interested purpose exercise learning bottom haskell git library implementation likely much better suited overview order implement git clone following area covered git protocol used enable git client retrieve required set change remote git server using variety transport mechanism native git protocol ssh http pack file format used transfer minimal amount data server client generally used efficiently storing packed object repository underlying object store git us store commits tree tag actual file content form blob index format used track change file working directory area covered elsewhere eg fantastic article git bottom cover low level command design git object store great detail article try tie together area mentioned describes tool used investigate verify observed behaviour hopefully provide enough detail reader reimplement git clone command language choosing end article able execute hgit clone git githubcomjurettagitpastichegit hgit name custom binary get valid git repository used normal git client without making use git git library actual clone repository setup part keep implementation focused git transport protocol supported client full shallow clone article going use haskell implement command mainly avoid simply reimplementing main c popular java based jgit implementation already exist able show code example conscise way familiar haskell simply think code example condensed pseudo code general approach investigatereverseengineer actual behaviour executing clone command gathering debug information different mean eg git debug setting packet capture dtrace researching protocol data structure reading official documentation git source esp documentationtechnical txt file last least reading actual git source clone process clone operation go set stage start invoking command git url see git url section git clone man page valid url format git clone git host portrepopath parse clone url extract host port repository path information connect git server via tcp using native git transport protocol negotiate object need transferrered server client includes receiving current state remote repository form ref advertisement includes ref server ref commit hash point request required ref receive pack file contains object reachable requested ref remote server create valid git repository directory file structure disk store object ref disk populate working directory file directory represent tip ref repository point taking account symlink permission etc create index file staging area corresponds tip file disk article loosely follow step hence cover following three broad section git transport pack wire protocol pack file format local object store staging area git transport pack wire protocol order transfer repository data commits tag file content ref information git client server process negotiate minimal amount data required update either client fetching cloning server pushing git support four main transport protocol transfer repository data local protocol source accessed via local filesystem following three protocol remote access ssh native git protocol http remote transport protocol local protocol using file url scheme share underlying approach connecting various pack command executed client server fetch operation mean connecting git fetchpack client git uploadpack running server push operation git sendpack command client connect git receivepack command server note clone operation instead forking gitfetchpack command clone invokes fetchpackc fetchpack function directly via transportc layer avoid one fork operation easier testing debugging focus git protocol simple unauthenticated transport us fullduplex communication client server server usually listening port transport protocol repository data exchange git happens multiple phase detailed information found documentationtechnicalpackprotocoltxt file part git repository reference discovery packfile negotiaton packfile transfer reference discovery reference discovery phase allows client detect data server server provides information list ref show ref server branch tag recent commit allows client determine already uptodate ref need update client side server response look similar git lsremote h git githubcomgitgitgit head n refsheadsmaint refsheadsmaster refsheadsnext refsheadspu refsheadstodo note git lsremote used list reference remote repository happens remote lookup ref occurs initial clone phase called ref advertisement reference discovery step capability part reference discovery client server exchange information capability server support client request certain capability effect subsequent communication capabilites communicated part first ref server return separated ref name pair nul byte thinpack sideband ofsdelta shallow noprogress includetag multiackdetailed capability described detail documentationtechnicalprotocolcapabilitiestxt explained later become relevant implementation packfile negotiation reference capability discovery client server try determine minimal packfile required client server updated simplest scenario full clone client request ref required object server subsequent update eg fetch client defines want tell server ref server determine minimal packfile send client packet line format git protocol payload make extensive use called packet line pktline used technical documentation format pktline variable length binary string length encoded first four byte pktline example refsheadsmastern first four byte length entire string including leading length byte hexadecimal hex dec implemented follows avid haskellers trying avoid pointfree style example text create packet line prefixed overall length length byte hexadecimal padded pktline string string pktline msg printf tohex length msg msg pktline length ie called flushpkt special case packet line used signal agreed upon handover point communication exchange reached following table taken documentationtechnicalprotocolcommontxt show pktline example pktline actual value foobarn client server exchange get intuition git protocol work best try observe communication client server simple git server started using following command parent directory one git repository cd pathtogitrepos git repository l gitbottomup spy zlib git daemon reuseaddr verbose basepath exportall ready rumble basepath map clone attempt using git examplecomhello path hello exportall enables cloning directory look like git repository otherwise git daemon verifies directory magic file gitdaemonexportok exporting repository data see gitdaemon information git server running access existing git repository bare repository without working copy observe exchange client server export git lsremote git packet git gituploadpack packet git thinpack sideband ofsdelta shallow noprogress includetag multiackdetailed packet git refsheadsmaster packet git refsremotesoriginmaster packet git packet git head refsheadsmaster refsremotesoriginmaster git number debug setting enabled setting various environment variable setting gittracepacket enables log output information packet client server exchange apart gittracepacket flag following environment variable useful debugging git command gittracepacket show packet line information gittrace show general command execution debug information gitcurlverbose show curl debug information using http transport includes http header gitdebugsendpack enable debug output uploadpack gittransporthelperdebug enables debug output remote helper seen output gittracepacket output show packet line decoding stripping length field see actually exchanged wire necessary capture data packet using tool like tcpdump wireshark used case ngrep sudo ngrep p w byline port dst host localhost interface filter ip port dst host localhost ap gitbottomup ap head multiack thinpack sideband ofsdelta shallow noprogress includetag multiackdetailed ap refsheadsmaster ap refsremotesoriginmaster ap ap show actual exchange wire placeholder non printable character note follow along please update interface listen loopback interface mac o xbsd likely lo linux check ifconfig simulate low bandwidthhigh latency scenario sometimes make debugging easier found using dummynet via ipfw traffic shaping tool useful limit bandwidth git native protocol port use sudo ipfw pipe config bw sudo ipfw add pipe srcport remove bandwidth limit afterwards useful observe fast local execution would otherwise hard capture necessary tooling verify observe behaviour look implementing client speaks git transport protocol implementing ref discovery initiate ref discovery client establishes tcp socket connection server port issue single command packet line format abnf discovery request gitprotorequest requestcommand sp pathname nul hostparameter nul requestcommand gituploadpack gitreceivepack gituploadarchive case sensitive pathname exclude nul hostparameter host hostname port example uploadpack request packet line format localhost target host gitbottomup repository path target system note requesting uploadpack used remote end initiate clonefetchlsremote request used transfer data server client following example defines function construct initial request command gitprotorequest string string string gitprotorequest host repo pktline gituploadpack repo host allows u create minimal client implement lsremote follows data remote remote gethost string getport maybe int getrepository string deriving eq show lsremote remote io packetline lsremote remote withsocketsdo withconnection gethost show frommaybe getport sock let payload gitprotorequest gethost getrepository send sock payload response receive sock send sock flushpkt tell server disconnect return parsepacket lfromchunks response creates tcp connection given remote extracted git url sends protocol request packet line format read response socket sends flush packet terminated connection par response packetline data structure mainly easily extract capability later us following fully functionining complete git protocol tcp client language overloadedstrings scopedtypevariables bangpatterns git compatible tcpclient understands git packet line format module gitremotetcpclient withconnection send receivewithsideband receivefully receive import qualified c import qualified databytestring b import networksocket hiding recv send import networksocketbytestring recv sendall import datamonoid mempty mappend import numeric readhex withconnection hostname servicename socket io b io b withconnection host port consumer sock openconnection host port r consumer sock sclose sock return r send socket string io send sock msg sendall sock cpack msg read packet line receive socket io cbytestring receive sock receive sock mempty receive acc maybeline readpacketline maybe return acc receive mappend acc maybeline openconnection hostname servicename io socket openconnection host port addrinfos getaddrinfo nothing host port let serveraddr head addrinfos sock socket addrfamily serveraddr stream defaultprotocol connect sock addraddress serveraddr return sock read git packet line variable length binary string prefixed overall length length byte hexadecimal padded readpacketline socket io maybe cbytestring readpacketline sock len readfully mempty cnull len return nothing else check zero length return server disconnected case readhex cunpack len l l line readfully mempty return line return nothing readfully acc expected line recv sock expected let len clength line acc acc mappend line cont len expected cnull line cont readfully acc expected len else return acc apart usual ceremony set connect socket readpacketline function contains git specific part tcpclient first step read byte socket determine many byte read fully consume packet line readfully recursive function used ensure read requested number byte socket contract recv guarantee requested number byte read depending length packet line consume rest packet line return nothing length signal received empty packet ie flush packet stop reading return nothing note reader unfamiliar haskell haskell return quite different return used imperative language terminates execution haskell used wrap pure value container io monad server return ref advertisement client terminate connection sending flush packet eg client already date enter negotiation phase determines optimal pack file send server client implementing pack file negotiation client knowledge ref server advertised request ref need server clone use case simplest use case full clone simply request ref server thus general flow client initate proto request ref advertisement server client negotiation request list ref client want send packfile server clone case simplified abnf protocol request look like uploadrequest wantlist flushpkt wantlist firstwant additionalwant firstwant pktline want sp objid sp capabilitylist lf additionalwant pktline want sp objid lf client list commit id want prefixed want using packet line format add capability want effect first want line ap multiackdetailed thinpack ofsdelta protocol contract requirest least one want command must send client request commitid advertised server based ref client want server generate pack file contain required ref object reachable ref server send pack packfile stored client temporary location create local git repository flow easily observed two following function client us implement clone operation receivepack implement packfile negotiation return actual raw pack file strict bytestring list ref server advertised list later used recreate ref local repository receivepack remote io ref bbytestring receivepack remote withsocketsdo withconnection gethost show frommaybe getport sock let payload gitprotorequest gethost getrepository send sock payload response receive sock let pack parsepacket lfromchunks response request createnegotiationrequest multiackdetailed pack flushpkt pktline donen send sock request rawpack receivewithsideband sock printsideband cunpack return mapmaybe toref pack rawpack printsideband str hputstr stderr str hflush stderr createnegotiationrequest function creates want line client sends back server amending first line capability effect need filter ref server advertised remote repository annotated tag object ref advertisement contain object id tag object object id commit tag point called peeled ref peeled ref immediately follows tag object ref suffix eg filter peeled ref include ref refsheads refstags namespace pktline want sp objid sp capabilitylist lf pktline want sp objid lf createnegotiationrequest string packetline string createnegotiationrequest capability concatmap nub map pktline n foldl acc e null acc first acc e else additional acc e want filter filterpeeledtags filter filterrefs want mapmaybe toobjid first acc obj acc want obj unwords capability additional acc obj acc want obj filterpeeledtags issuffixof cunpack ref filterrefs line let r cunpack ref line predicate map r isprefixof refstags isprefixof refsheads predicate one capability want effect sideband capability instructs server send multiplexed progress report error info interleaved packfile see documentationtechnicalprotocolcapabilitiestxt sideband capabilites mutually exclusive differ size payload packet git use byte v byte case receivewithsideband function know demultiplex pack file response receivewithsideband socket bbytestring io io bbytestring receivewithsideband sock f recrec mempty recrec acc maybeline readpacketline sock let skip recrec acc case maybeline nakn skip ignore line case buncons line rest recrec acc mappend rest rest f remote cappend rest skip fixme scan linebreaks prepend remote accordingly see sidebandc rest fail cunpack rest nothing skip nothing return acc read first byte come packet line length sideband channel indicator remainder packet line chunk pack file payload channel progress information server sends client print stderr prefixed remote error infomration cause client print message stderr exit error code implemented example clonefunction clone gitrepository remote io clone repo remote remote ref packfile receivepack remote let dir pathforpack repo eg native git something like tmppack dir tmppackincoming createdirectoryifmissing true dir bwritefile tmppack packfile runreadert creategitrepositoryfrompackfile tmppack ref repo removefile tmppack runreadert checkouthead repo receives pack file list advertised ref writes pack file known temporary location par pack file check head working directory understand implement last two step next closer look pack file format pack file format pack file used efficiently transfer store number git object used storage optimization pack file accompanied index file allows efficient lookup object pack file used transfer mechanism pack file transfered index created locally pack format described documentationtechnicalpackformattxt git source packfile consists byte pack file header magic byte value p c k decimal byte pack file version byte number object packfile n object variable length object header contains type object see length inflateduncompressed data follows deltified object byte base object name object type objrefdelta relative negative offset delta object position pack object type objofsdelta see zlib deflatedcompressed object data byte checksum trailer object pack file commit tag tree blob object deltified object pointer base object payload delta base version subsequent version object see discussion delta encoding git us investigate pack file format worth pointing tool command used get better understanding object represented pack file git verifypack command used validate pack file work pack file though accompanying index file λ git verifypack v commit commit tree blob blob blob blob blob entry non deltified object following format type size sizeinpackfile offsetinpackfile entry deltified object use type size sizeinpackfile offsetinpackfile depth come handy implementing code read recreates object stored pack file another builtin command git unpackobjects command creates loose object file pack file require index file present therefore used packfile received remote repository index file yet command need executed existing git repository object contained pack file unpacked gitobjects directory repository git unpackobjects strict testpackpack suitable hexeditor eg xxd od hexfiend gui application mac useful come reading comparing pack file data note part git clone process pack file need read understood validate object come comparing checksum generate index file pack stored local repository clone implementation unpacking pack file loose object one file per object instead simplify streaming pack file handling merely shortcut though unnecessarily creates large number object file make cloning large repository slower need reading pack file header trivial parsepackfile function read first byte byte group using big endian significant byte first compare magic byte ensure reading git pack file continues reading number object pack file header defines parsepackfile iiteratee bytestring io packfile parsepackfile magic msb byte bigendian version msb numobjects msb packmagic magic parseobjects version numobjects else return invalidpackfile packmagic fromoctets map fromintegral ord pack pack file object pack file object header us variant variable length unsigned integer encoding contains object type first byte first byte consists significant bit msb determines whether need read byte get encoded object size msb set read next byte bit object type cacheh objcommit objtree objblob objtag objofsdelta objrefdelta bit size partial size msb set byte need read following byte first byte contain part overall length least significant bit octet msb used indicate whether byte need read following diagram show example consisting two octet reading object header straightforward read one byte extract object type initial size information lower nibble whether continue reading size information looking msb byte ihead read byte let objecttype byte shiftr shift right bitwise mask bit msb shifting initialsize fromintegral byte mask type msb recursivley read following byte msb set size ismsbset byte parseobjectsize initialsize else return initialsize check whether significant bit set define ismsbset function use place ismsbset x x decimal following byte even simpler read care least significant bit parseobjectsize size iter nextbyte ihead let add coerce nextbyte int shiftl iter shift depends number iteration acc size fromintegral add ismsbset nextbyte parseobjectsize acc iter else return acc coerce toenum fromenum overall length sizen shifting part left least sizen significant part reading last byte object header size inflateduncompressed object type haskell usually concise c implementation admittedly achieves lot le fanfare type c size c shift c pack fill c pack use size c shift shift back haskell implementation full definition function read single pack file object see srcgitpackpackfilehs parsepackobject iiteratee bytestring io maybe packfileobject parsepackobject byte ihead read byte let objecttype byte shiftr shift right masking least significtan bit initial fromintegral byte size ismsbset byte parseobjectsize initial else return initial obj topackobjecttype objecttype content ijoini enuminflate zlib defaultdecompressparams return packfileobject size content obj map internal representation object type packobjecttype topackobjecttype show integral iiteratee bytestring io maybe packobjecttype topackobjecttype return objcommit topackobjecttype return objtree topackobjecttype return objblob topackobjecttype return objtag topackobjecttype offset readoffset return objofsdelta offset topackobjecttype baseobj replicatem ihead base object name return objrefdelta baseobj topackobjecttype return nothing based type inflatedecompress following byte object either commit tag tree blob read base object id offset deltified object ie object type either compressed delta data interesting challenge fact pack file object header contains size uncompressed object size compressed object order read object way identify object boundary ie pack file next object start actually inflate zlib compressed data thus consuming following byte part zlib compressed content zlib api c ie inflate indicates whether reached end compressed data produced uncompressed output see http wwwzlibnetzlibhowhtml found iteratee based implementation iterateecompress suitable achieving haskell following excerpt parsepackobject function inflates zlib compressed data pack file stream creates packfileobject object type information size information pack inflated data content ijoini enuminflate zlib defaultdecompressparams return packfileobject size content obj allows gitpackpackfile module fully read pack file create internal pack file representation contains list packfileobjects fully inflated content pack file written disk need handle deltified object though internal representation contains mix deltified undeltified ie complete object delta encoding deltified representation pack file object type packfile use delta compression minimize amount data need transferred andor stored deltification happens pack file following file system support delta compression give good general definition delta compression delta compression consists representing target version content mutation delta existing source content achieve goal reduction space time typically target source related file version similar content thus delta encoding allows file version recreated based original source file one delta file subsequent delta file applied patched result previous delta file source called delta chain git git verifypack command print histogram delta chain length invoked verbose flag important attribute delta encoding fact used binary text file delta compression algorithm used git originally based xdelta libxdiff simplified git use case see diff ing file thread git mailinglist following discussion based delta file format used git patchdeltac diffdeltac file git source format delta representation git delta encoding algorithm copyinsert based algorithm apparent patchdeltac delta representation contains delta header series opcodes either copy insert instruction file system support delta compression copyinsert class delta algorithm use string matching technique locate matching offset source target version emit sequence copy instruction matching range insert instruction cover unmatched region copy instruction contain offset source buffer number byte copy source target buffer starting offset insert opcode number byte copy delta buffer target contain byte added part source buffer point delta buffer start header contains length source target buffer able verify restoredpatched result length encoded variable length integer msb indicates whether another var length octet follows delta buffer layout varint lengt sourcebase buffer varint length target buffer n copyinsert instruction testing order test delta encoding implementation git source allows u build testdelta binary used generate delta data restore target file source delta representation cd devgitgitsource make configure configure make testdelta generate testdelta binary delta patch mode λ testdelta usage testdelta dp fromfile datafile outfile generate delta file testdelta testdeltac testdeltanewc outdelta restore original file based delta testdelta p testdeltac outdelta restoredtestdeltanewc verify fact diff q restoredtestdeltanewc testdeltanewc workflow used generate arbitrary delta file test implementation patch algorithm example example help getting better intuiton delta encoding work source file zlibc file git source function definition moved inside file new comment added using testdelta generate delta file using old new version file testdelta zlibc zlibchangedc zlibdelta resulting delta file λ xxd b zlibdelta th new commen l k first step read source target length fact msb first byte set indicates need read next byte get size information first two byte make length source buffer reading variable length integer simply boil mask msb left shift byte iteration first additional byte bitwise byte approach saw reading object header pack file check length read fact correct λ wc c zlibc zlibc next two byte length target buffer byte significant part implentation decodesize offset skip offset byte next maskmsb byte byte succ offset next base shift byte count ismsbset byte b let len base maskmsb b shiftl shift next len shift b succ count next finallen count return finallen count maskmsb byte fromintegral byte decodesize called offset length information source case target size number byte required represent source size reading header information remainig btyes either copy insert instruction next byte copy instruction based fact msb set offset source buffer number byte copy extracted follows start lsb bit set bit set bit set bit set none offset bit set read offset value offset mean copy start source buffer bit set read next byte bit set read next byte left shift previously read value bit set number byte copy source target buffer starting offset next byte byte insert instruction msb set insert instruction simply number byte copy delta target buffer note conversion different numeric representation quickly done shell using echo convert hexadecimal decimal echo convert binary decimal case copy byte delta target zlibdelta tail c head c new comment full set copyinsert instruction copy byte source target starting offset insert byte delta buffer target copy byte starting offset copy byte starting offset copy byte starting offset copy byte starting offset easily verified manually head c zlibc manualtargetzlibc zlibdelta tail c head c manualtargetzlibc zlibc tail c head c manualtargetzlibc zlibc tail c head c manualtargetzlibc zlibc tail c head c manualtargetzlibc zlibc tail c head c manualtargetzlibc yield restored file λ diff manualtargetzlibc zlibchangedc echo looking size test file byte see using delta encoding space requirement file similar significantly reduced λ wc c zlibdelta zlibc zlibchangedc zlibdelta zlibc zlibchangedc base version byte delta compared storing version independently git reduces space requirement storing base delta object zlib compressed packfile implementation delta encoding algorithm clone implementation need deal much simpler implement patch operation recreates target content based source delta fortunately much easier task creating suitable delta file based source target file see discussion main function gitpackdelta module expose patch function accepts source delta bytestring bytestrings haskell version byte vectorsarrays return recreated target bytestring patch bbytestring sourcebase bbytestring delta either string bbytestring patch base delta header decodedeltaheader delta blength base sourcelength header fst runget run getoffset header base delta delta else left source length check failed skipping parsing header mentioned main building block parse delta file transform source target bytestring run int bbytestring bbytestring get bbytestring run offset source delta skip offset cmd runcommand cmd bempty source de skip header based offset start delta delta payload read first byte opcode execute either copy insert instruction using runcommand function execute copyinsert instruction defined delta buffer restore target buffer runcommand bbytestring bbytestring get bbytestring runcommand cmd acc source delta result choose cmd finished isempty let acc bappend acc result finished return acc else cmd runcommand cmd acc source delta choose opcode ismsbset opcode copycommand opcode source choose opcode insertcommand opcode significant byte set copy otherwise insert instruction insert command command number byte copy delta target buffer simply apply insertcommand function read n byte delta insert target buffer insertcommand integral get bbytestring insertcommand getbytestring fromintegral copy instruction slightly involved caters larger offset offset source size number byte copy length resolved using readcopyinstruction function copy source target buffer copycommand bbytestring get bbytestring copycommand opcode source offset len readcopyinstruction opcode return copy len offset source copy len offset btake len bdrop offset readcopyinstruction integral get readcopyinstruction opcode offset source buffer copy start read correct subsequent byte shift based set bit offset foldm readifbitset zip byte copy len foldm readifbitset zip let len coerce len else len fixme add guard condition patchdeltac unsignedaddoverflows cpoff cpsize return coerce offset coerce len calculateval shift shift x x shiftl shift int fromintegral else fromintegral readifbitset test shift opcode test liftm calculateval shift else return coerce toenum fromenum test delta implementation use following simple main function delta file produced testdelta command git source main io main sourcefile deltafile getargs source breadfile sourcefile delta breadfile deltafile header decodedeltaheader delta print header print blength source either putstrln bwritefile targetfile patch source delta using original source delta create patched targetfile runhaskell isrc srcgitpackdeltahs zlibc zlibdelta deltaheader sourcelength targetlength getoffset working patch function recreate actual content based deltified base object contained pack file ref v ofs delta pack file format defines two different type deltified object objofsdelta objrefdelta differ way base source object identified pack file objrefdelta us identifies object whereas objofsdelta us negative offset delta object header pack file mentioned pack file section delta encoding originally added git started ref based delta objofsdelta object type later introduced mainly reduce size pack file whether client support offset based delta pack file signaled pack file negotiation setting ofsdelta capability server indicates supported documentationtechnicalprotocolcapabilitiestxt ofsdelta server send client understand delta referring base position pack rather objid sendread objofsdelta aka type packfile simplification clone implementation use capability request therefore need implement lookup ref based base object summary mean read pack file list packobjects contain inflated object patch function recreate object based base object delta content therefore fully recreate object given pack file received git repository create valid git repository need create directory layout set file git requires recognize directory valid git repository conceptually file directory roughly split object store ref index area git repository layout man page detailed information content git directory object store correctly populate git object store need understand object type git support represents object stored disk git two different represantations object loose object format store every object separate file gitobjects directory git regularly pack loose object pack file discussed leveraging delta compression reduce space requirement similar file loose object stored using hash filename first two alphanumeric character used directory name gitobjects result partition object directory remaining character actual filename following example show loose object pack file accompanying index file λ tree gitobjects gitobjects fc info pack pack object store queried using git catfile λ git catfile tree λ git catfile p blob readmemd tree src tree image object disk object type git deal usual operation commit store commit message date authorecommited information point single tree object commit zero root commit one parent commit id commit pointer parent form commit graph blob store actual file content without meta information eg file name tree contains path name permission pointer blob tree object represents directory filename tracked content tag annotated tag store tag message date identiy person creating tag git also us called lightweight tag simply pointer ref hierarchy without additionaly tag meta information see http gitscmcombookengitinternalsgitobjects detailed information already mentioned git store single pack file generates accompanying index file without creating loose object initial clone instead using approach already read pack file simply unpack object store loose object obviously le efficient approach make clone operation much slower need internal packfile representation already contains decompressed object simply need store correctly recreating deltified object without providing functionality create object type scratch object storage format object content stored disk us following format http gitscmcombookengitinternalsgitobjects git construct header start type object case blob add space followed size content finally null byte git concatenates header original content calculates checksum new content encodeobject return correct disk representation object file content given uncompressed content packfile bytestring return pair hash ondisk content representation correct header header type header content encodeobject objecttype cbytestring objectid cbytestring encodeobject objecttype content let header headerforblob cpack show objecttype blob header cappend content hsh blob blob headerforblob objtype objtype cappend cappend cpack show clength content cappend hsh tohex git store object disk using zlib compression writeobject function store object using encoding function create object content writeobject gitrepository objecttype cbytestring io filepath writeobject gitrepository objecttype content let blob encodeobject objecttype content path name pathforobject getname filename path name createdirectoryifmissing true path lwritefile filename compress blob return filename compress data zcompress lfromchunks data partition namespace char pathforobject string string filepath string pathforobject reponame sha length sha reponame git object pre rest pre take sha rest drop sha pathforobject using functionwe unpack pack file using following function unpackpackfile packfile withrepository unpackpackfile invalidpackfile error attempting unpack invalid packfile unpackpackfile packfile objs repo ask unresolvedobjects writeobjects objs liftio form unresolvedobjects writedelta repo writeobjects x packfileobject objrefdelta x liftm x writeobjects x writeobjects packfileobject objtype content x repo ask liftio writeobject repo tt objtype content writeobjects x writeobjects return tt objcommit bcommit tt objtree btree tt objblob bblob tt objtag btag tt error unexpected blob type writedelta repo packfileobject ty objrefdelta content base case toobjectid ty sha liftio readobject repo sha return nothing isjust base case patch getblobcontent fromjust base content right target let base fromjust base filename writeobject repo objtype base target return filename left return nothing else return nothing fixme base object nt exist yet writedelta repo error nt expect resolved object unpackpackfile us approach firstly writes undeltified object directly accumulates list unresolved deltified object applies writedelta function deltified object look base object stored recreates undeltified object applying patch function using base delta content readobject function opposite writeobject know read object local repo set function allows u unpack object deltified undeltified contained pack file local gitobjects object store ref object place git need entry point commit graph branch tag entry point tip branch tag known ref name refer based object id object git repository ref stored gitdirrefs directory eg gitrefsheadsmaster packed format gitpackedrefs ref contain hex digit directly symbolic ref another ref eg ref refsheadsmaster special symbolic ref head refers current branch examplary ref structure git repository gitrefs head master remote origin head master pu tag ref refsheads directory local branch repository refstags directory contains tag case annotated tag tag point tag object lightweight tag tag file contains object id tagged commit refsremotes directory contains one sub directory remote configured case default origin example upstream repository two branch master pu symref head identifies default branch upstream repositiory listing branch via git branch show result git branch master git branch remote originhead originmaster originpu thus ref name map file name given directory content simply refers followed new line cat gitrefsremotesoriginmaster canonical git implementation us optimization store ref packed form gitdirpackedrefs file file similar ref advertisement output map ref objectids within single file cat gitpackedrefs packrefs peeled refsheadsdeltaencodingffi refsheadsfakerefcreation refsheadsmaster refsheadssideband note simplify implementation ignore optimisation store ref separate file implementation creategitrepositoryfrompackfile function call clone function observe basic step required create working git repository creategitrepositoryfrompackfile filepath ref withrepository creategitrepositoryfrompackfile packfile ref pack liftio packread packfile unpackpackfile pack createrefs ref updatehead ref unpack pack file create object gitobjects directory worth repeating native git client work native client creates index file use pack file instead create ref lastly special symbolic ref head ref need created known inital ref advertisement simply mapping object id case commit id full ref name eg refsheadsmaster refsheadsnext use ref data type model pair use list ref initial ref advertisement create correct ref file data ref ref getobjid cbytestring getrefname cbytestring deriving show eq createrefs ref withrepository createrefs ref let tag branch partition istag filter ispeeledtag ref writerefs refsremotesorigin branch writerefs refstags tag simplerefname head reverse csplit ispeeledtag cissuffixof getrefname istag e cissuffixof getrefname e cisprefixof refstags getrefname e writerefs refspace mapm ref createref refspace cunpack simplerefname getrefname cunpack getobjid createref string string withrepository createref ref sha repo ask let path name splitfilename ref dir getgitdirectory repo path liftio createdirectoryifmissing true dir liftio writefile dir name sha n filter peeled tag ref partition ref tag branch stored respectives directory note although origin default name remote repository clone originates native git clone command option origin name set name remote something origin cloning clone command currently support option simply use default origin remote name implementation creating ref symbolic ref head created point ref used upstream repository default branch via head symref updatehead ref withrepository updatehead fail unexpected invalid packfile updatehead ref let maybehead findhead ref unless isnothing maybehead let cunpack getobjid fromjust maybehead ref maybe refsheadsmaster cunpack getrefname findref ref createref ref createsymref head ref iscommit ob objecttype ob objcommit findhead find ref head getrefname findref sha find ref head getrefname sha cunpack getobjid updatehead function try resolve commitid upstream head ref look ref name corresponds objectid order create symref using createsymref function createsymref string string withrepository createsymref symname ref repo ask liftio writefile getgitdirectory repo symname ref ref n head symref look similar cat githead ref refsheadsmaster point local git repository actually usable eg command like git log git checkout work albeit empty working copy working copy index object store populated ref place next step checkout file match repository snaphots head point order check current head need read head symref resolve commit ultimately point use tip checked working copy given commit need resolve top level tree commit point based tree write blob top level tree contains recursively read child tree entry fully restore directory file working copy requires u able retrieve object object store parse object type create appropriate inmemory representation enable tree traversal ultimately correct creation file directory reading object reading object two step process first step retrieval filesystem already covered implemented readobject function readobject gitrepository objectid io maybe object readobject gitrepository sha let path name pathforobject getname sha filename path name exists doesfileexist filename exists b creadfile filename return parseobject sha inflate b else return nothing inflate blob bconcat ltochunks zdecompress lfromchunks blob readobject look correct file file system given decompresses content already mentioned content prefixed header contains object type overal size object seperated nul byte acutal object content objecttype sp size nul objectcontent parseobject function par file content creates instance object data type extracting object type object content data object object getblobcontent bbytestring objtype objecttype sha objectid deriving eq show parseobject objectid cbytestring maybe object parseobject obj eithertomaybe parseonly objparser obj header type header content objparser objectid parser object objparser objtype string commit string tree string blob string tag char size takewhile isdigit nul content takebytestring return object content obj objtype obj commit bcommit obj tree btree obj tag btag obj blob bblob obj error invalid object type parser would nt get anyway still close representation object content meta information type object id order use git object eg resolve parent commits commit object read tree entry tree object need level object parsing turn generic tagged object specifc object representation commit commit object git look similar λ git catfile p tree parent author stefan saasen stefan saasenme committer stefan saasen stefan saasenme bump version use commit data type represent program data commit commit gettree bbytestring getparents bbytestring zero root one ore merges parent getsha bbytestring getauthor identity getcommiter identity getmessage bbytestring deriving eq show simple attoparsec based parser parse raw commit content commitparser parser commit commitparser tree tree take space parent many parseparentcommit author author parseperson space commiter committer parseperson space space message takebytestring let author author getpersonname author getpersonemail author commiter commiter getpersonname commiter getpersonemail commiter return commit tree parent bempty author commiter message blob object type blob simply contains content tracked git actual file content parsing reading necessary blob content written corresponding file working copy tree quoting http gitscmcombookengitinternalsgitobjects succinct description tree object tree object solves problem storing filename also allows store group file together git store content manner similar unix filesystem bit simplified content stored tree blob object tree corresponding unix directory entry blob corresponding le inodes file content single tree object contains one tree entry contains pointer blob subtree associated mode type filename looking actual tree object immediately show underlying model node object type objectid filename listed per entry λ git catfile tree λ git catfile p blob ghci blob gitignore blob license blob readmemd blob setuphs tree example blob hgitcabal tree src blob testwithcoveragesh tree test git support following mode gitfastimport normal notexecutable file normal executable file symlink content file link target gitlink object refers commit another repository used implement submodules subdirectory point another tree object actual tree object content stored set tree entry following format tree treeentry treeentry mode sp path nul mode path eg sietbw use following function parse tree content couple simple data structure data tree tree getobjectid objectid getentries treeentry deriving eq show data treeentry treeentry getmode cbytestring getpath cbytestring getblobsha cbytestring deriving eq show parsetree objectid cbytestring maybe tree parsetree sha input eithertomaybe parseonly treeparser sha input eg lstreec treewalkc treeparser objectid parser tree treeparser sha entry many treeentryparser return tree sha entry treeentryparser parser treeentry treeentryparser mode taketill space path taketill nul sha take return treeentry mode path sha ability retrieve parse git object implement functionality check file corresponding given tree entry point checkouthead function checkouthead withrepository checkouthead repo ask let dir getname repo tip readhead maybetree resolvetree tip indexentries maybe return walktree dir maybetree writeindex indexentries first step resolve commitid symref head point readhead withrepository objectid readhead readsymref head readsymref string withrepository objectid readsymref name repo ask let gitdir getgitdirectory repo ref liftio creadfile gitdir name let unwrappedref cunpack strip head tail csplit ref obj liftio creadfile gitdir unwrappedref return cunpack strip obj strip ctakewhile isspace cdropwhile isspace note simplified version resolving ref refsc resolverefunsafe handle loose packed ref even older symlink style ref simple use case necessary symbolic ref written code previous step second step resolve tree object commit point resolve tree given treeish similar parsetreeindirect defined treec resolvetree objectid withrepository maybe tree resolvetree sha repo ask blob liftio readobject repo sha maybe return nothing walk blob walk object btree repo ask liftio readtree repo walk c object bcommit let maybecommit parsecommit getblobcontent c maybe return nothing extracttree maybecommit walk return nothing extracttree commit withrepository maybe tree extracttree commit let sha cunpack gettree commit repo ask liftio readtree repo sha resolving tree involves reading parsing commit extracting tree objectid commit tree lookup successful start traversing tree depthfirst creating file working copy go involves creating directory tree entry mode creating file content corresponding blob otherwise walktree indexentry filepath tree withrepository indexentry walktree acc parent tree let entry getentries tree foldm handleentry acc entry handleentry acc treeentry path sha let dir parent tofilepath path liftio createdirectory dir maybetree resolvetree tohex sha maybe return acc walktree acc dir maybetree handleentry acc treeentry mode path sha repo ask let fullpath parent tofilepath path content liftio readobject repo tohex sha maybe return acc e liftio bwritefile fullpath getblobcontent e let fmode fst head readoct cunpack mode liftio setfilemode fullpath fmode indexentry asindexentry fullpath sha return indexentry acc content tofilepath cunpack asindexentry path sha stat liftio getfilestatus path indexentryfor path regular sha stat note handle file mode currently ignore git mode symlink gitlinks submodule support traversing tree full checkout file correspond repository snapshot identified commit pointed head symref running git status command git repository show newy create file untracked slated deletion create git index file yet git index last step need create index file match file status disk git status report outstanding change index also called staging area directory cache confused index accompanies pack file git index used keep track change working copy assemble change part next commit git add man page index hold snapshot content working tree snapshot taken content next commit thus making change working directory running commit command must use add command add new modified file index using simple example observe index track file change status exisiting repository track single file license untracked file readme working copy λ git lsfiles scot readme h license ref point commit id index file point blob objectid file objectid license blob λ git catfile blob stage object repository contains one blob one tree one commit object λ tree gitobjects gitobjects info pack actual index file thus contains single entry entry license file based absence index entry readme file command like git status git lsfiles deduce file untracked index file entry contains meta data eg modified time permission file path blob object order build stage next commit git creates blob object change whole file partial change via example git add p added index via git add mean commiting change result creation required tree object index entry bind file blob object commit object reference newly created tree useful tool observing change repository including temporary creation lock file especialy number object large using file system notification notified change running command eg inotifywait linux spy mac o x seen adding readme using git add using git updateindex add result creation new blob object file gitobjectsce directory λ git catfile blob index contains two entry readme going part next commit index format format directory cache index file described documentationtechnicalindexformattxt index stored gitindex index header structured way pack file header signature magic byte r c dircache version number number index entry followed number sorted index entry index entry contains stat data ctime mtime device inode uid gid filesize object id git type regular file symlink gitlink unix permission couple status flag path path length file index entry padded nul byte necessary pad entry multiple eight byte keeping name nulterminated path name includes directory top level directory repository git lsfiles command used show detailed view index content λ git lsfiles debug license ctime mtime dev ino uid gid size flag match stat output λ stat license file license size filetype regular file mode r uid ssaasen gid staff device inode link access wed apr modify wed apr change wed apr way verifying index creation implementation naturally follows observation index content mostly part repository eg ctimemtime uidgid cache treedirectory entry need created walking directory tree walktree function introduced exactly checking particular tree ie creating necessary file creates return list indexentry item walktree indexentry filepath tree withrepository indexentry walktree acc parent tree content liftio readobject repo tohex sha maybe return acc e indexentry asindexentry fullpath sha return indexentry acc content asindexentry path sha stat liftio getfilestatus path indexentryfor path regular sha stat given filepath git file type currently consider regular file symlinks gitlinks objectid stat information indexentryfor function return indexentry instance data indexentry indexentry ctime mtime device inode mode uid gid size sha gitfilemode gitfilemode path string deriving eq indexentryfor filepath gitfilemode bbytestring filestatus withrepository indexentry indexentryfor filepath gitfilemode sha stat repo ask let filename makerelativetoreporoot getname repo filepath return indexentry coerce statuschangetime stat coerce modificationtime stat coerce deviceid stat coerce fileid stat coerce filemode stat coerce fileowner stat coerce filegroup stat coerce filesize stat bunpack sha gitfilemode filename coerce fromintegral fromenum final step checking current head see write index disk checkouthead withrepository checkouthead repo ask let dir getname repo tip readhead maybetree resolvetree tip indexentries maybe return walktree dir maybetree writeindex indexentries writing index entail sorting index entry correctly sorted ascending order name field creating indexheader encodeindex index withrepository bbytestring encodeindex towrite let indexentries sortindexentries getindexentries towrite numentries toenum fromenum length indexentries header indexheader numentries entry mconcat map encode indexentries idx tolazybytestring header lappend entry return lazytostrictbs idx bappend idx indexheader builder indexheader num magic signature r c stand dircache version use version num number index entry magic fromoctets map fromintegral ord dirc using databinary indexentry written binary using following typeclass definition follows indexformat specification see readcachec cacheh builtinupdateindexc instance binary indexentry put indexentry c m dev inode mode uid gid size sha gitfilemode name put coerce c ctime second put zero ctime nanosecond fraction put coerce m mtime second put zero mtime nanosecond fraction put coerce dev dev put coerce inode ino put tomode gitfilemode mode mode see put coerce uid uid put coerce gid gid put coerce size filesize truncated mapm put sha represented object put flag mapm put finalpath variable length padded nul zero pathname name coerce x toenum fromenum x tomode gfm fm objtype gfm shiftl permission gfm fm flag toenum length pathname mask high order bit fixme length length le otherwise stored field objtype regular regular file objtype symlink symbolic link objtype gitlink gitlink permission regular fm fromintegral fm permission finalpath let n csencode pathname topad length n mod pad creplicate topad nul padded topad n bunpack pad else n padded get readindexentry clone command reimplemented last piece place git clone command built ground haskell executed work expected λ cabal configure λ cabal build λ cabal copy λ hgit clone git githubcomjurettagitpastichegit remote counting object done remote compressing object done remote total delta reused delta ssaasen monteiths temp λ cd gitpastiche ssaasen monteiths tempgitpastiche master λ git status branch master nothing commit working directory clean ssaasen monteiths tempgitpastiche master λ git log oneline graph decorate head originmaster originhead master use eval evaluate either tac tail r use tac default reverse output available missing although clone work lot thing missing compared git implementation traverse graph see whether fully connected creation symlinks gitlinks currently implemented explicitly verify commit id implicitly though generate storing file conclusion git concept put succinctly git built small number simple powerful idea able rebuilt albeit tiny subset git command mainly relying research data structure file format protcols le actual source testament statement
760,Lobsters,vcs,Git & VCS,Uplift from SCCS to git,http://fanf.livejournal.com/132656.html,uplift sccs git,background computer lab got department engineering got computing service got connectivity astronomy cambridge developmestuction pln prof inadequate esr sccscheck sccscheck sccsprefix sccsprefix rcsappend rcsappend ipregarchiveuplift aside file name restriction rcsdeadify posix make xsi extension rcsdeadify preuplift miduplift postuplift preuplift fixups miduplift fixups postuplift fixups sccscommitters sccscommitters uplifting cv git cvsfastexport patch wrapping,current project replace cambridge university dns server first stage project transfer code sccs git easier work ironically ended spending lot time working sccs rcs rather git mainly developing analysis conversion tool get thing fit state git find similar situation might find tool helpful background cambridge allocated three class b network first computer lab got department engineering got eventually computing service got university related institution whole oldest record found date september list registration next two department get connected statistical laboratory molecular biology ca nt say order statslab allocated kept year thing pick janet ip service started rapidly took replace last month blogged connectivity astronomy cambridge found historical nugget ipregister directory tree contains infrastructure history ip address dns registration cambridge going back quarter century nt archive working system production long converting directory tree git present certain challenge developmestuction ipregister directory tree contains mixture source code mostly sccs history production script mostly sccs history configuration file mostly sccs history occasional executable upstream perl library output file working file used production script secret private key password mail archive historical artifact old preserved copy part directory tree miscellaneous file without sccs history editor backup file suffix aim preserve faithfully could converting git way represents history useful manner pln rough strategy take copy ipregister directory tree preserving modification time need preserve owner useful ownership information lost directory tree moved central unix service shut convert sccs rcs filebyfile converting format simple onetoone mapping file without sccs history short artificial rcs history created modification time editor backup file convert rcs tree cv basically moving file around cv repository little directory tree rcs file convert cv repository git using git cvsimport phase need crossfile history analysis people already produced satisfactory solution simple prof inadequate first tried esr python script unfortunately rapidly ran number showstopper nt work solaris sccs available ipregister server destructively update sccs tree losing information relationship working file sccs file work whole directory tree nt give filebyfile control fixed bug two soon concluded program entirely wrong shape end solaris incompatibility became moot installed gnu cssc freebsd workstation conversion problem remained wrote small script called convert one sccs file one rcs file give control rcs temporary file placed meant would shuffle rcs file around could create directly target cv repository also us rcs option avoid need fiddle checkout lock significant simplification main regression compared support branch nt file branch sccscheck point needed work going coordinate invocation convert whole tree wrote fairly quickanddirty script called sccscheck analysis directory tree print note various feature anomaly significant proportion code exists work relationship working file backup file sccs file could start work determining fixups necessary sccstocvs conversion sccsprefix one notable part ipregister directory tree archive subdirectory contained lot gzipped sccs file date stamp relationship first guess might successive snapshot growing history corresponding sccs file working part tree would contain whole history wrote sccsprefix verify one sccs file prefix another ie record history certain point proved file snapshot fact working sccs file periodically moved archive new working sccs file started scratch guess cope file getting uncomfortably large slow hardware rcsappend represent history properly git needed combine series sccs file linear history turn easier construct commits artificial metadata usernames date rcs sccs wrote rcsappend add commits newer rcs file successor commits older file converting archived sccs file combination rcsappend unfortunately slow rcs take long time check old revision rcs file contains verbatim copy latest revision series diffs going back one revision time sccs format clever take time check revision changed incorporate append mode used convert combine archived sccs file see ipregarchiveuplift script still take age convert linearize nearly revision history file rcs checkin rewrite entire rcs file get slower number revision grows fortunately nt need run many time lot file ipregister tree without sccs history wanted preserve many old editor backup file could used construct wee bit history absence anything better wrote build rcs file kind miscellanea aside file name restriction point need moan bit rcs object file name start comma tried running script mac home mostly worked except directory contained file like dbcam source file dbcam generated file added bit support script cope caseinsensitive filesystems use mac testing bulk conversion run slowly think generates much churn spotlight index rcsdeadify one significant problem dealing sccs file whose working file deleted sccs workflow normal state affair see instance sccs support posix make xsi extension however ipregister directory tree corresponds file longer needed unfortunately sccs history generally record file deleted might possible make plausible guess manual analysis perhaps truthful record artificial revision saying file present time conversion like sccs rcs way represent deleted file cv us convention top rcs file deleted put rcs file attic subdirectory add revision dead status rcsdeadify applies convention rcs file situation possible identify meaningful committer deletion time targz archive exists record original file owner script record file owner tar file content unpacked converted part main directory using usermap file provide correct committer id file marked deleted time tarfile created main conversion script evacuates sccs working tree cv repository leaving behind tree mostly empty directory based simplified version analysis done sccscheck careful error checking command invokes us rcsappend handle file rcsappend case occurs editor backup file older oldest sccs revision case us rcsappend combine output could done efficiently append mode ipregister tree nt cause big slowdown cope varying semantics missing working file leaf behind tombstone expected find working file take form symlink pointing attic another script deal tombstone appropriate preuplift miduplift postuplift run sccs working tree reasonably clean overall uplift process go several phase fetch unpack copy sccs working tree preuplift fixups minimum change required conversion cv moving secret working tree miduplift fixups include adjustment earlier history marking file deleted past git cvsimport cvsfastexport git fastimport postuplift fixups delete cruft preserved git history ipregister directory tree preuplift phase also includes ipregarchiveuplift described earlier miduplift phase combined history moved proper place cv repository history recorded right place similarly tarballs preuplift phase unpacks place move tar file aside miduplift phase rcsdeadifies tree inside tarball stuck guideline strictly script delete quite lot cruft preuplift phase particular delete duplicated sccs history file archive working file generated script sccscommitters sccsrcscvs record committers simple user id whereas git us name email address gitcvsimport cvsfastexport given author file containing translation sccscommitters script produce list user id starting point author file uplifting cv git first tried git cvsimport since successfully used case turned path swift enlightenment taking per commit mainly check file oldest newest fall foul performance problem rcsappend program described compiled cvsfastexport fairly soon populated repository nearly commits commits per second time faster fastimportexport format allows provide file content order independent order appear commits fastest way get content revision rcs file newest oldest cvsfastexport couple niggles cvsfastexport patch fix fairly dumb manner without adding commandline switch control behaviour rcs cv style cvsfastexport replaces empty commit message empty log message whereas want leave empty cvsfastexport make special effort translate cv ignored file behaviour git synthesizing gitignore file every commit wrong ipregister tree exporting file take long time cvsfastexport appears stall added really bad progress meter indicate work performed wrapping overall taken programming expected time much following pattern last take time first think initial investigation got stuck conversion work probably took time one area conversion could perhaps improved archived dump various subdirectory converted location tar file stored tried incorporate part history directory tar file made whole think combining coping renames would take much time little benefit multiple copy various ancient script bit weird fairly clear git history going let u declare job done move building new dns server
761,Lobsters,vcs,Git & VCS,The Beautiful Way to Organize Code Snippets,http://www.gistboxapp.com,beautiful way organize code snippet,need none nt group code library colorcoded label search filter featurerich code editor keyboard shortcut collapsible file view,need none nt group code library technical knowledge base foryour team project colorcoded label organize code snippet bylanguage project purpose search filter slice dice way youwant library search featurerich code editor languageaware syntaxhighlighting ace editor keyboard shortcut shortcut browsing searching editing mean le clicking collapsible file view keep code wantin focus hide rest
762,Lobsters,vcs,Git & VCS,I built a platform for deploying HTTP microservices in seconds using Github Gists. Feedback?,http://hook.io,built platform deploying http microservices second using github gist feedback,,greeting thank curling hookio understand everyone super thrilled use webbrowser also provide terminal service accessing hosting platform trick start curl u back later comprehensive terminal interface ssh support free hookio account curl http hookio signupyouremail marakcom query string data curl data foobar hellothere http echohookio json data curl h contenttype applicationjson x post foo bar hello http echohookio transform data echo foo curl header contenttype applicationoctetstream databinary http transformhookio javascript function cloud note example requires echojs microservice file see http echohookiosource example source code cat echojs curl dataurlencode source http gatewayhookio binary data multipart form upload note example requires catpng image file cat catpng curl f f image typeimagepng http imagerotatehookio upsidedowncatpng
763,Lobsters,vcs,Git & VCS,Help Stamp Out CVS In Your Lifetime,http://esr.ibiblio.org/?p=6389,help stamp cv lifetime,snarking epically emacs conversion run case nzxt amd msi seagate intel big brother cheap reliable optical drive seasonic,shipped cvsfastexport much improved immensely faster two week ago thus end one intense siege downanddirty frenzied hacking enjoyed year come time think help stamp cv lifetime fund started john bell snarking epically admittedly rather antiquated desktop machine mushroomed unexpected pile donation said intend use machine wandering around net hunting cv repository extinction meant demand large data set involves like gigabyte netbsd cv rsynced could poked along existing machine good longer several reason including wanting generously donated fun going open discussion best spend money regular susan son aka hedgemage built superpowerful machine last february think hardware configuration sound essential build tyro starting point eight month ago might choice could improved trust regular clue start talking design goal budget first point priority serious crunching power surgery large repository full emacs conversion run take eight hour goal reduce kind friction high reliability long time rather stable showy minimized noise vibration antipriorities interested overclocking interested fancy gamer case superfluous led lambo vent fuck noise even particularly interested graphic need buy keyboard mouse speaker dualport graphic card intend keep using budget help stamp cv lifetime fund willing match ceiling objective really economy power buying part last long time nice go four five year without another upgrade ok point clear let look hardware first case nzxt love thee let count way lowvelocity case fan minimal noise toolless assemblydisassembly sharp edge inside oh boy toofrequentlyskinned knuckle like idea usb speaker port mounted near top right corner convenient reach sits floor left side desk removable cleanable filter air vent anyone ever tinkered pc cursed thoughtless ugly design case interior image thing sheer porn g someone pointed boutique case design sweden called define move direction go want fan badly larger diameter mean move enough air lower turning rate mean le noise generated rotor tip doubtless going want talk antec lian li case without reason built system antecs know lian li reputation nzxt define go level thoughtfulness design never seen truth way marketed suggests happens people design gamer case grow get serious suggest alternative like aware almost certainly consider able mount fan dealbreaker processor amd main goal raw serialprocessing power repository surgery generally parallelize well turned multithreading significant win cvsfast export though code change made support turned good thing high clock speed big deal want stable performance reliability mean much rather pay extra higher rated speed chip locked clock go anywhere near overclocking thing would consider intel chip similar greater rated clock speed like one new haswells course would require change motherboard speaking motherboards tyro us msi susan say actually gamer board ok superfluous blinkenlights hidden case wall b designed overclocking good mean power management performance rated speed rock solid ok maybe market pressure gamers bad instance ram high speed even today think job load going put thing involves massive data shuffling well justifies premium buy susan recommends seagate main spinning drive seek time interesting call selected high longterm reliability rather bleedingedge speed assumption ssd handling fast traffic approve choice priority wonder going something constellation line might way push susan recommends intel ssd commenting buy intel ssds suck thinking big brother might better choice susan say cheap reliable optical drive day pretty good psu tyro used discontinued open suggestion one price described nzxt mobo cpu ram ssd hdd total system cost without psu well ceiling room upgrade ssd ram let optimization update seasonic looking good psu candidate told even turn fan load brings bill
765,Lobsters,vcs,Git & VCS,Doga : HTTP log monitoring console for Humans,https://github.com/pravj/Doga,doga http log monitoring console human,doga watch doga action let doga watch traffic made npyscreen socket interface doga wikipedia pravendra singh,doga http log monitoring console human watch log http traffic system generate log log format show status total request maximum hit request timespan alert traffic customizable threshold log custom log file also watch doga action let doga watch traffic sudo pip install doga install doga machine also use easyinstall using doga requires sudo privilege run explicitly us socket interface sudo doga start watching traffic sudo doga f filenametxt write log custom log file filenametxt also sudo doga value update threshold value value doga start alerting jump doga log alert history section using ctrln doga gui responsive yet raise exception smaller screen size made doga gui built top npyscreen doga us python socket interface library deal tcpippackets bla bla bla thing nt know doga watch doga rule promotional file released raj comic promotional purpose licensed fair use copyrighted material context doga comic via wikipedia built muzi appy pravendra singh
766,Lobsters,vcs,Git & VCS,Git aliases,http://lauris.github.io/development/2014/09/01/git-aliases/,git alias,gitconfig show unpushed change grouped search simple list commits colored shallow clone fix commit message overview file interactive show word diff,git best version control system one favorite development tool general small fast linuxcoolness blog post share handy git command defined alias alias defined gitconfig file located home directory alias basically shortcut frequently used long command alias listed post form name alias git command format used gitconfig file prefix git command git use without setting alias show unpushed change unpushed log stat originmaster head sometimes want know commits respective change yet pushed little command help grouped search gg grep break heading n git grep cool know even cooler grouped git grep group match file name make easy overview search result simple list commits colored cl log graph prettyformat c yellow creset cgreen cr creset daterelative cl log prettyformat ae c yellow creset shortstat different version command tend use two shown first one super short commit take line display relative date commit message second one includes changed file overview shallow clone sc clone used shallow clone couple time come handy want clone repo without baggage fix commit message fc commit amend pretty often notice mistake commit message already commited previous commit modified amend argument overview file fo log prettyoneline shortstat abbrevcommit command followed path file also used standalone command short summary also short commit hash abbrevcommit interactive add ic add p even though short command useful one let interactively choose review hunk unstaged change show word diff diff diff worddiff show change along replaced value default word delimited whitespace extra git status aliased git st together standard command lazy character save time every day
767,Lobsters,vcs,Git & VCS,Gogs: A self-hosted Git service written in Go,http://gogs.io/,gogs selfhosted git service written go,crossplatform go,crossplatform gogs run anywhere go compile window mac linux arm etc
768,Lobsters,vcs,Git & VCS,git slice: Split git repos while preserving history,https://github.com/samth/git-slice/,git slice split git repos preserving history,slicing git repository warning installation sample use,slicing git repository warning performs permanent modification git repository careful installation raco pkg install gitslice sample use cd myrepo racket l gitslice subdir destructively update myrepo include subdir performs multiple step split follows mkdir pathtotmpdata cd myrepo racket l gitslicecompute subdir pathtotmpdata racket l gitslicefilter pathtotmpdata racket l gitslicechop pathtotmpdata gitslicefilter gitslicechop step take long time sped using ramdisk see linux instruction set one add tmpramdiskscratch additional argument also supported gitslice command provided path must yet exist gitslice provided second argument temporary directory use store metadata file provided temporary directory created directory removed slicing dryrun command provided command see would without permanent damage
769,Lobsters,vcs,Git & VCS,Stellar – Git for PostreSQL / MySQL,https://github.com/fastmonkeys/stellar,stellar git postresql mysql,stellar fast database snapshot restore tool development benchmark work warning please nt use stellar ca nt afford data loss get started take snapshot restore snapshot common issue issue issue,stellar fast database snapshot restore tool development stellar allows quickly restore database eg writing database migration switching branch messing sql postgresql mysql partially supported benchmark stellar fast restore database time faster using usual pgdump pgrestore work stellar work storing copy database rdbms named stellarxxxmaster stellarxxxxslave restoring database stellar simply renames database making lot faster usual sql dump however stellar us lot storage space probably nt want make many snapshot eventually run storage space warning please nt use stellar ca nt afford data loss great developing meant production get started install stellar pip pip install stellar go project folder initialize stellar setting stellar initialization wizard help stellar init stellar setting saved stellaryaml probably want add gitignore echo stellaryaml gitignore done take snapshot stellar snapshot snapshotname restore snapshot stellar restore snapshotname common issue sqlalchemyexcoperationalerror operationalerror u access denied user mydbusername localhost database stellardata create database stellardata character set make sure right create new database see issue discussion using postresql make sure database named unix username test running psql see issue detail
770,Lobsters,vcs,Git & VCS,git-hostd service to host local git repos with custom authorized_keys file,https://github.com/jtolds/gitserve,githostd service host local git repos custom authorizedkeys file,gitserve githostd sample interaction gitsubmitd sample interaction license,gitserve restricted ssh server library supporting controlled git repository access code submission library come two tool gitsubmitd service support oneway push full repos along submission hook inspecting accepting repos githostd service host git repo folder git repos user optionally ssh key specific whitelist githostd sample interaction make repo start server go get githubcomjtoldsgitservecmdgithostd mkdir p myrepo cd myrepo myrepo git init initialized empty git repository homejtmyrepogit myrepo touch myrepo git add myrepo git commit first commit master rootcommit first commit file changed create mode myrepo git hostd note listening clone repo somewhere else make change push git clone ssh cloning welcome gitserve githostd code hosting tool please see http githubcomjtoldsgitserve info remote counting object done remote compressing object done remote total delta reused delta receiving object done cd touch git add git commit second commit master second commit file changed create mode git push origin head refsheadsmybranch welcome gitserve githostd code hosting tool please see http githubcomjtoldsgitserve info counting object done delta compression using thread compressing object done writing object byte done total delta reused delta ssh new branch head mybranch gitsubmitd sample interaction start server go get githubcomjtoldsgitservecmdgitsubmitd sshkeygen n qf gitsubmitdkey gitsubmitd addr privatekey gitsubmitdkey inspect gopathsrcgithubcomjtoldsgitservecmdgitsubmitdsubmissiontriggerpy note listening push git repo mkdir myrepo cd myrepo myrepo git init initialized empty git repository homejtmyrepogit myrepo git remote add gitsubmitd ssh myrepo touch newfile myrepo git add myrepo git commit first commit master rootcommit first commit file changed create mode create mode myrepo git push gitsubmitd master welcome gitserve gitsubmitd code repo submission tool please see http githubcomjtoldsgitserve info counting object done delta compression using thread compressing object done writing object byte done total delta reused delta thanks pushing code user jt pushed repo came repo name myrepo public key sshrsa pushed ssh new branch master master myrepo make sure check submissiontriggerpy see customize gitsubmitd end license mit license mit copyright c jt old permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software
771,Lobsters,vcs,Git & VCS,Unit and functional testing git with RSpec,https://sethvargo.com/unit-and-functional-testing-git-with-rspec/,unit functional testing git rspec,unit testing git rspec functional testing git rspec omnibus berkshelf must consistent call,ever written ruby application interacts git probably already aware pain testing behavior checking git installed proper version catching crazy typo enough git algorithm calculating commit shas make functional testing quite cumbersome unit testing git rspec unit testing git rspec always relatively easy may recall unit test message sending unit test answer question send correct message system context run correct git command please note unit test answer question git command run successfully consider following class fetch new commits present clone repository exist disk class gitfetcher def initialize url revision master url url revision revision end def gitclone git clone url end def gitreset git fetch git reset hard targetrevision end def targetrevision git revparse revision end private def git command shellout git command end end fairly common practice wrap git call private method shown making easy unit test code describe gitfetcher describe gitclone let url http fakerepogit subject describedclassnew url allow subject receive git clone remote repository expect subject receive git git clone url subjectclone end end end process repeatable git call class however unit testing actually invoke git could completely passing unit test git binary present system application fail execute could also syntax error invalid flag unit test would happily accept since string matching functional test would raise exception functional testing git rspec functional testing git rspec bit difficult since functional test actually execute modify state system must especially careful functional test provide answer earlier question git command run successfully functional testing git would involve creating fake git remote including tag branch pushing commits could perform action package resulting item fixture utilize fixture test however becomes problematic reason happens fixture accidentally becomes tainted due developer error reproduce fixture need test another thing utmost flexibility generate fake git remote revision onthefly runtime tiny ruby helper used project like omnibus berkshelf module githelpers def remotegitrepo name option path filejoin spectmpgitremotes name remoteurl file path fileutilsmkdirp path dirchdir path git init bare git config coresharedrepository git config receivedenynonfastforwards true git config receivedenycurrentbranch ignore end dirchdir gitscratch create bogus file fileopen file w f fwrite hello git init git add git commit initial commit name git remote add origin remoteurl git push origin master option tag tag fileopen tag w f fwrite tag git add tag git commit create tag tag git tag tag git push origin tag end option tag option branch branch git checkout b branch master fileopen branch w f fwrite branch git add branch git commit create branch branch git push origin branch git checkout master end option branch end path end def git command shellout git command end end helper encapsulates logic required create remote git repository eliminate network bandwidth constraint remote git repository actually created locally target system different directory git push remote destination actually different place file system kinda cool gain access fakegitremote git helper method rspec include helper method rspec rspecconfigure config configinclude githelpers end ability generate onthefly remote git repository clone remote repository assert value head correct describe gitfetcher describe gitclone let repo remotegitrepo fake subject describedclassnew repo clone repository subjectgitclone expect git revparse head eq end end end execute functional test time see resulting git sha head change run actually incredibly difficult functional test git algorithm used generate unique sha commit unlike simple directory sha would could easily reproduced git take account following author name author email author date committer name committer email commit date commit message sha directory even though commit message file content exactly git generating different unique sha commits due changing timestamp case attribute fakable requires bit magic addition directory structure commit message following environment variable must match exactly gitauthorname gitauthoremail gitauthordate gitcommittername gitcommitteremail gitcommitterdate date field actually named inappropriately timestamps date git particular format timestamps well tue jul thankfully ruby make generating format easy timeat utcstrftime c z test want set static time commits ensure shas generated correctly format remaining value matter must set exactly commit also important forge author committer value well default git pull value local git configuration however value likely differ coworker machine continuous integration environment forcing attribute environment help ensure consistentlypassing test suite expanded git call forge git environment module githelpers execute given git command forging author commiter timestamps ensure consistent shas param string command def git command originalenv envtohash time timeat utcstrftime c z env gitauthorname name env gitauthoremail examplecom env gitauthordate time env gitcommittername name env gitcommitteremail examplecom env gitcommitterdate time shellout git command ensure envreplace originaltohash end end familiar ruby method save current environment env variable generates timestamp correct format forge gitrelated environment variable executes git command restores original environment example used timestamp twice could also use different timestamps author commit date however timestamps must consistent call change value future gitgenerated shas also change helper us enhanced git method git always generate sha provided directory tree commit message experience easiest way get correct sha run test bogus data look spec failure copy correct sha place describe gitfetcher describe gitreset let revision git revparse head context version tag let version let remote remotegitrepo zlib tag version par tag subjectgitreset expect revision eq end end context version branch let version sethvargomagicponies let remote remotegitrepo zlib branch version par branch subjectgitreset expect revision eq end end context version ref let version let remote remotegitrepo zlib par ref subjectgitreset expect revision eq end end end end hope enjoyed post unit functional testing git time writing able figure forge specific revision git repository another tip trick idea suggestion please leave comment
772,Lobsters,vcs,Git & VCS,Flight rules for git,https://github.com/k88hudson/git-flight-rules,flight rule git,flight rule git english español русский 简体中文 한국어 tiếng việt français 日本語 flight rule convention document git website table content doctoc repository want start local repository want clone remote repository set wrong remote repository stackoverflow topic want add code someone else repository suggesting code via pull request hub need update fork latest update original repository editing commits commit wrote wrong thing commit message committed wrong name email configured want remove file previous commit want delete remove last commit section deleteremove arbitrary commit interactive rebase tried push amended commit remote got error message replaces old commit new one avoid force pushing accidentally hard reset want change back accidentally committed pushed merge accidentally committed pushed file containing sensitive data change immediately regenerate immediately want remove large file ever existing repo history remove sensitive file recommended technique use thirdparty bfg builtin technique use gitfilterbranch final step pushing changed repo history need change content commit last staging want stage tracked file leave untracked file stage part tracked file need add staged change previous commit want stage part new file whole file want add change one file two different commits staged many edits want break separate commit want stage unstaged edits unstage staged edits link unstaged edits want move unstaged edits new branch want move unstaged edits different existing branch want discard local uncommitted change staged unstaged want discard specific unstaged change want discard specific unstaged file want discard unstaged local change want discard untracked file want unstage specific staged file branch want list branch create branch commit pulled frominto wrong branch want discard local commits branch one server committed master instead new branch link want keep whole file another refish wikipedia made several commits single branch different branch conflict interactive rebasing section want delete local branch deleted upstream accidentally deleted branch want delete branch want delete multiple branch want rename branch want checkout remote branch someone else working want create new remote branch current local one doc want set remote branch upstream local branch want set head track default remote branch made change wrong branch rebasing merging want undo rebasemerge rebased nt want force push thread need combine commits leave oldest first commit alone combine following commits second oldest rename commit safe merging strategy need merge branch single commit want combine unpushed commits need abort merge need update parent commit branch check commits branch merged possible issue interactive rebases rebase editing screen say noop conflict note git documentation stash stash edits stash specific file stash message apply specific stash list stash keeping unstaged edits finding want find string commit want find authorcommitter want list commits containing specific file want view commit history specific function revision range commit limit find tag commit referenced submodules clone submodules remove submodule miscellaneous object copy folder file one branch another restore deleted file delete tag recover deleted tag deleted patch diff patch github special ref exporting repository zip file push branch tag name tracking file want change file name capitalization without changing content file want overwrite local file git pull want remove file git keep file want revert file specific revision want list change specific file commits branch want git ignore change specific file debugging git gitbisect first configuration want add alias git command want add empty directory repository want cache username password repository want make git ignore permission filemode change want set global user want add command line coloring git idea wrong source git shortcut git bash powershell window profile resource book tutorial script tool firstaidgitio gitextracommands gitextras gitfire gittips gittown http wwwgittowncom gui client gitkraken gitcola gitup gitxdev sourcetree tower tig magit gitextensions fork gmaster gitk sublimemerge,flight rule git english español русский 한국어 tiếng việt français 日本語 flight rule guide astronaut programmer using git thing go wrong flight rule hardearned body knowledge recorded manual list stepbystep x occurs essentially extremely detailed scenariospecific standard operating procedure nasa capturing misstep disaster solution since early mercuryera ground team first started gathering lesson learned compendium list thousand problematic situation engine failure busted hatch handle computer glitch solution chris hadfield astronaut guide life convention document clarity sake example document use customized bash prompt order indicate current branch whether staged change branch enclosed parenthesis next branch name indicates staged change command work least git version see git website update local git version table content generated doctoc repository want start local repository initialize existing directory git repository want clone remote repository clone copy remote repository copy url repository run save folder named remote repository make sure connection remote server cloning purpose mean making sure connected internet clone folder different name default repository name git clone url nameofnewfolder set wrong remote repository possible problem cloned wrong repository simply delete directory created running git clone clone correct repository set wrong repository origin existing local repository change url origin running git remote seturl origin url actual repo see stackoverflow topic want add code someone else repository git nt allow add code someone else repository without access right neither github git rather hosted service git repository however suggest code using patch github fork pull request first bit forking fork copy repository git operation common action github bitbucket gitlab anywhere people host git repository fork repository hosted ui suggesting code via pull request forked repository normally need clone repository machine small edits github instance without cloning nt githubflightrules list let go locally using ssh git clone git githubcom using http git clone http cd resulting directory type git remote see list remote normally one remote origin point case also want remote point fork first follow git convention normally use remote name origin repository upstream whatever forked rename origin remote upstream git remote rename origin upstream also using git remote seturl take longer step set new remote point project git remote add origin git githubcom yournamegitflightrulesgit note two remote origin reference repository upstream reference original one origin read write upstream read finished making whatever change like push change normally branch remote named origin branch could use setupstream avoid specifying remote tracking branch every future push using branch instance featuremyfeature git push setupstream origin featuremyfeature way suggest pull request using cli using git although tool like hub ready make pull request go github another git host create new pull request note host automatically link original forked repository forget respond code review feedback need update fork latest update original repository upstream repository may updated update need pulled origin repo remember like people contributing suppose feature branch need update original repository update probably set remote point original project generally use upstream remote name master git remote add upstream linktooriginalrepository master git remote add upstream git githubcom fetch upstream get latest update master git fetch upstream master git merge upstreammaster using single command master git pull upstream master editing commits commit let say blindly committed change git commit sure actual content commit made show latest commit current head want see file specific commit also commitid commit interested git show commitid filename wrote wrong thing commit message wrote wrong thing commit yet pushed following change commit message without changing change commit git commit amend open default text editor edit message hand one command git commit amend xxxxxxx already pushed message amend commit force push recommended committed wrong name email configured single commit amend git commit amend noedit author new authorname authoremail mydomaincom alternative correctly configure author setting git config global author nameemail use git commit amend resetauthor noedit need change history see man page git filterbranch want remove file previous commit order remove change file previous commit following git checkout head myfile git add myfile git commit amend noedit case file newly added commit want remove git alone git rm cached myfile git commit amend noedit particularly useful open patch committed unnecessary file need force push update patch remote noedit option used keep existing commit message want delete remove last commit need delete pushed commits use following however irreversibly change history mess history anyone else already pulled repository short sure never ever git reset head hard git push forcewithlease remote branch nt pushed reset git state made last commit keeping staged change mybranch git reset soft head work nt pushed pushed truly safe thing git revert shaofbadcommit create new commit undoes previous commit change branch pushed rebasesafe ie devs nt expected pull use git push forcewithlease see section deleteremove arbitrary commit warning applies never possible git rebase onto git push forcewithlease remote branch interactive rebase remove line corresponding commit want see removed tried push amended commit remote got error message http githubcomyourusernamerepogit rejected mybranch mybranch nonfastforward error failed push ref http hint update rejected tip current branch behind hint remote counterpart integrate remote change eg hint git pull pushing hint see note fastforwards git push help detail note rebasing see amending replaces old commit new one must force push forcewithlease change already pushed preamended commit remote careful always make sure specify branch mybranch git push origin mybranch forcewithlease general avoid force pushing best create push new commit rather forcepushing amended commit cause conflict source history developer interacted branch question child branch forcewithlease still fail someone else also working branch push would overwrite change absolutely sure nobody working branch want update tip branch unconditionally use force f avoided general accidentally hard reset want change back accidentally git reset hard normally still get commit back git keep log everything day note valid work backed ie either committed stashed git reset hard remove uncommitted modification use caution safer option git reset keep see list past commits commit reset choose sha commit want return reset master git reset hard good go accidentally committed pushed merge accidentally merged feature branch main development branch ready merged still undo merge catch merge commit one parent usually two command use featurebranch git revert commit option say select parent number branch merge made parent revert note parent number commit identifier rather merge commit line merge parent number index desired parent line first identifier number second number accidentally committed pushed file containing sensitive data accidentally pushed file containing sensitive private data password key etc amend previous commit keep mind pushed commit consider data contains compromised step remove sensitive data public repo local copy remove sensitive data people pulled copy committed password change immediately committed key regenerate immediately amending pushed commit enough since anyone could pulled original commit containing sensitive data meantime edit file remove sensitive data run featurebranch git add editedfile featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch want remove entire file keep locally run featurebranch git rm cached sensitivefile echo sensitivefile gitignore featurebranch git add gitignore featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch alternatively store sensitive data local environment variable want completely remove entire file keep locally run featurebranch git rm sensitivefile featurebranch git commit amend noedit featurebranch git push forcewithlease origin branch made commits meantime ie sensitive data commit previous commit rebase want remove large file ever existing repo history file want delete secret sensitive instead see remove sensitive file even delete large unwanted file recent commit still exists git history repo git folder make git clone download unneeded file action part guide require force push rewrite large section repo history working remote collaborator check first local work pushed two option rewriting history builtin gitfilterbranch bfgrepocleaner bfg significantly cleaner performant thirdparty download requires java describe alternative final step force push change requires special consideration top regular force push given great deal repo history permanently changed recommended technique use thirdparty bfg using bfgrepocleaner requires java download bfg jar link example use bfgjar download may version number eg delete specific file master git rm pathtofiletoremove master git commit commit removing filetoremove master java jar downloadsbfgjar deletefiles filetoremove note bfg must use plain file name even subdirectory also delete file pattern eg master git rm jpg master git commit commit removing jpg master java jar downloadsbfgjar deletefiles jpg bfg file exist latest commit affected example several large tga file repo earlier commit deleted subset call touch file present latest commit note renamed file part commit eg started commit changed running java jar downloadsbfgjar deletefiles remove git history either run deletefiles command filename matching pattern builtin technique use gitfilterbranch gitfilterbranch cumbersome le feature may use install run bfg replace filepattern may specific name pattern eg jpg remove file matching pattern history branch master git filterbranch force indexfilter git rm cached ignoreunmatch filepattern pruneempty tagnamefilter cat behindthescenes explanation tagnamefilter cat cumbersome simplest way apply original tag new commits using command cat pruneempty remove nowempty commits final step pushing changed repo history removed desired file test carefully nt broken anything repo easiest reclone repo start finish optionally use git garbage collection minimize local git folder size force push master git reflog expire expirenow git gc prunenow aggressive master git push origin force tag since rewrote entire git repo history git push operation may large return error remote end hung unexpectedly happens try increasing git post buffer master git config httppostbuffer master git push force work need manually push repo history chunk commits command try increasing number push operation succeeds master git push u origin head number refsheadmaster force push operation succeeds first time decrease number gradually conventional git push succeeds need change content commit last consider created eg three commits later realize missed something belongs contextually first commits bother create new commit containing change clean code base commits nt atomic ie change belonged nt commit situation may want change commit change belong include following commits unaltered case git rebase might save consider situation want change third last commit made yourbranch git rebase get interactive rebase mode allows edit last three commits text editor pop showing something like pick third last commit pick second last commit pick last commit change edit third last commit pick second last commit pick last commit tell rebase want edit third last commit keep two unaltered save close editor git start rebase stop commit want alter giving chance edit commit apply change missed applying initially committed commit editing staging afterwards run yourbranch git commit amend tell git recreate commit leave commit message unedited done hard part solved yourbranch git rebase continue rest work staging want stage tracked file leave untracked file stage part tracked file stage file ext txt git add u txt stage file inside directory src git add u src need add staged change previous commit mybranch git commit amend already know nt want change commit message tell git reuse commit message mybranch git commit amend c head want stage part new file whole file normally want stage part file run git add patch filenamex p work short open interactive mode would able use option split commit however file new option add new file need use e option manually choose line add running git diff cached git diff staged show line staged compared still saved locally want add change one file two different commits git add add entire file commit git add p allow interactively select change want add staged many edits want break separate commit git reset p open patch mode reset dialog similar git add p except selecting yes unstage change removing upcoming commit want stage unstaged edits unstage staged edits many case unstage staged file pick file want commit however want switch staged unstaged edits create temporary commit store staged file stage unstaged file stash reset temporary commit pop stash git commit wip git add also add untracked file git stash git reset head git stash pop index note reason use pop want keep idempotent much possible note staged file marked unstaged nt use index flag link explains unstaged edits want move unstaged edits new branch git checkout b mybranch want move unstaged edits different existing branch git stash git checkout mybranch git stash pop want discard local uncommitted change staged unstaged want discard local staged unstaged change mybranch git reset hard master git checkout f unstage file might staged git add revert local uncommitted change executed repo root also revert uncommitted change particular file directory git checkout somedirfiletxt yet another way revert uncommitted change longer type work subdirectory remove local untracked file file tracked git remain x also remove ignored file want discard specific unstaged change want get rid change working copy checkout undesired change keep good change git checkout p answer snippet want drop another strategy involves using stash stash good change reset working copy reapply good change git stash p select snippet want save git reset hard git stash pop alternatively stash undesired change drop stash git stash p select snippet nt want save git stash drop want discard specific unstaged file want get rid one specific file working copy alternatively discard multiple file working copy list git checkout myfirstfile mysecondfile want discard unstaged local change want get rid unstaged local uncommitted change want discard untracked file want get rid untracked file want unstage specific staged file sometimes one file accidentally ended staged file committed unstage git reset filename result unstaging file make look like untracked branch want list branch list local branch list remote branch list branch local remote create branch commit git checkout b branch pulled frominto wrong branch another chance use git reflog see head pointed bad pull master git reflog head pull origin wrongbranch fastforward head checkout checkout message go simply reset branch back desired commit git reset hard done want discard local commits branch one server confirm nt pushed change server git status show many commits ahead origin mybranch git status branch mybranch branch ahead originmybranch commits use git push publish local commits one way resetting match origin remote master git reset hard originmybranch committed master instead new branch create new branch remaining master master git branch mybranch reset branch master previous commit master git reset hard head head short stand first parent head similarly stand second parent commit merges parent note see link information alternatively nt want use head find commit hash want set master branch git log trick reset hash git push make sure change reflected remote example hash commit master branch supposed master git reset hard head checkout new branch continue working master git checkout mybranch want keep whole file another refish say working spike see note hundred change everything working commit another branch save work solution git add git commit adding change spike one big commit want put branch maybe feature maybe develop interested keeping whole file want split big commit smaller one say branch solution solution spike one ahead develop branch develop want add change solve bringing content branch develop git checkout solution get content file branch solution branch develop branch develop branch uptodate origindevelop change committed use git reset head file unstage modified commit usual note spike solution made analyze solve problem solution used estimation discarded everyone get clear visualization problem wikipedia made several commits single branch different branch say master branch running git log see made two commits master git log commit author alex lee alexlee examplecom date tue jul bug added csrf protection commit author alex lee alexlee examplecom date tue jul bug fixed spacing title commit author aki rose akirose examplecom date tue jul first commit let take note commit hash bug first let reset master branch correct commit master git reset hard head create fresh branch bug master git checkout b let cherrypick commit bug top branch mean applying commit commit directly top whatever head git cherrypick point possibility might conflict see conflict section interactive rebasing section resolve conflict let create new branch bug also based master git checkout master master git checkout b finally let cherrypick commit bug git cherrypick want delete local branch deleted upstream merge pull request github give option delete merged branch fork nt planning keep working branch cleaner delete local copy branch nt end cluttering working checkout lot stale branch upstream remote want fetch accidentally deleted branch regularly pushing remote safe time still sometimes may end deleting branch let say create branch create new file master git checkout b mybranch mybranch git branch mybranch touch footxt mybranch l readmemd footxt let add commit mybranch git add mybranch git commit footxt added mybranch footxt added file changed insertion create mode footxt mybranch git log commit author siemiatj siemiatj examplecom date wed jul footxt added commit author kate hudson katehudson examplecom date tue jul fix force pushing amending commits switching back master accidentally removing branch mybranch git checkout master switched branch master branch uptodate originmaster master git branch mybranch deleted branch mybranch master echo oh no deleted branch oh no deleted branch point get familiar reflog upgraded logger store history action repo master git reflog head checkout moving mybranch master head commit footxt added head checkout moving master mybranch see commit hash deleted branch let see restore deleted branch master git checkout b mybranchhelp switched new branch mybranchhelp mybranchhelp git reset hard head footxt added mybranchhelp l readmemd footxt voila got removed file back git reflog also useful rebasing go terribly wrong want delete branch delete remote branch master git push origin delete mybranch also master git push origin mybranch delete local branch master git branch mybranch delete local branch merged current branch upstream master git branch mybranch want delete multiple branch say want delete branch start fix master git branch grep fix xargs git branch want rename branch rename current local branch master git branch newname rename different local branch master git branch oldname newname delete oldname remote branch push newname local branch master git push origin oldname newname want checkout remote branch someone else working first fetch branch remote master git fetch say want checkout daves remote master git checkout track origindaves branch daves set track remote branch daves origin switched new branch daves track shorthand git checkout b branch remotename branch give local copy branch daves update pushed also show remotely want create new remote branch current local one would also like set remote branch upstream current one use following instead git push u remote head upstream mode simple default git mode pushdefault config following command push current branch regard remote branch registered previously u behavior mode git push described doc pushdefault want set remote branch upstream local branch set remote branch upstream current local branch using git branch setupstreamto remotename branch using shorthand git branch u remotename branch set upstream remote branch another local branch git branch u remotename branch localbranch want set head track default remote branch checking remote branch see remote branch head tracking case desired branch git branch r originhead originghpages originmaster change originhead track originmaster run command git remote sethead origin auto originhead set master made change wrong branch made uncommitted change realise wrong branch stash change apply branch want wrongbranch git stash wrongbranch git checkout correctbranch correctbranch git stash apply rebasing merging want undo rebasemerge may merged rebased current branch wrong branch ca nt figure finish rebasemerge process git save original head pointer variable called orighead dangerous operation simple recover branch state rebasemerge mybranch git reset hard orighead rebased nt want force push unfortunately force push want change reflected remote branch changed history remote branch wo nt accept change unless force push one main reason many people use merge workflow instead rebasing workflow large team get trouble developer force pushing use caution safer way use rebase reflect change remote branch instead following master git checkout mybranch mybranch git rebase master mybranch git checkout master master git merge ffonly mybranch see thread need combine commits let suppose working branch iswill become pullrequest master simplest case want combine commits single one nt care commit timestamps reset recommit make sure master branch date change committed mybranch git reset soft master mybranch git commit new awesome feature want control also preserve timestamps need something called interactive rebase mybranch git rebase master nt working another branch rebase relative head want squash last commits example rebase last etc master git rebase run interactive rebase command see something like text editor pick refactoring pick new awesome feature pick fixup pick another fix rebase onto command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell line reordered executed top bottom remove line commit lost however remove everything rebase aborted note empty commits commented line beginning comment wo nt affect rebase replace pick command list also remove commits removing corresponding line example want leave oldest first commit alone combine following commits second oldest edit letter next commit except first second say f pick refactoring pick new awesome feature f fixup f another fix want combine commits rename commit additionally add r next second commit simply use instead f pick refactoring pick new awesome feature fixup another fix rename commit next text prompt pop newer awesomer feature please enter commit message change line starting ignored empty message abort commit rebase progress onto currently editing commit rebasing branch master change committed modified readmemd everything successful see something like master successfully rebased updated refsheadsmaster safe merging strategy nocommit performs merge pretend merge failed autocommit giving user chance inspect tweak merge result committing noff maintains evidence feature branch existed keeping project history consistent master git merge noff nocommit mybranch need merge branch single commit master git merge squash mybranch want combine unpushed commits sometimes several work progress commits want combine push upstream nt want accidentally combine commits already pushed upstream someone else may already made commits reference master git rebase u interactive rebase list commits nt already pushed safe reorderfixsquash anything list need abort merge sometimes merge produce problem certain file case use option abort abort current conflict resolution process try reconstruct premerge state mybranch git merge abort command available since git version need update parent commit branch say master branch branch branched master branch branched make commit parent commit longer accurate head since branched fix git rebase onto git rebase onto first commit branch nt want bring along help sticky scenario might feature built another feature nt merged yet bugfix branch need reflected branch check commits branch merged check commits branch merged another branch diff head commits branch master git log graph leftright cherrypick oneline head tell commits one give list nonshared branch another option master git log master nomerges possible issue interactive rebases rebase editing screen say noop seeing noop mean trying rebase branch identical commit ahead current branch try making sure master branch rebase earlier instead conflict unable successfully complete rebase may resolve conflict first run git status see file conflict mybranch git status branch mybranch change staged commit use git add file update committed use git checkout file discard change working directory modified readmemd example readmemd conflict open file look following head code code newcommit need resolve difference code added new commit example everything middle line newcommit head want keep one branch version code use master git checkout readmemd merging use keep change local branch keep change branch rebasing use keep change local branch keep change branch explanation swap see note git documentation merges complicated use visual diff editor master git mergetool opendiff resolved conflict tested code git add file changed continue rebase git rebase continue mybranch git add readmemd mybranch git rebase continue resolving conflict end identical tree commit need git rebase skip instead time want stop entire rebase go back original state branch mybranch git rebase abort stash stash edits stash edits working directory also want stash untracked file use u option stash specific file stash one file working directory git stash push workingdirectorypathfilenameext stash multiple file working directory git stash push stash message git stash save message git stash push message apply specific stash list first check list stash message using apply specific stash list using git stash apply stash n n indicates position stash stack topmost stash position furthermore using timebased stash reference also possible git stash apply stash stash keeping unstaged edits manually create stash commit use git stash store git stash create git stash store message finding want find string commit find certain string introduced commit use following structure git log string find common parameter source mean show ref name given command line commit reached mean start every branch reverse print reverse order mean show first commit made change want find authorcommitter find commits authorcommitter use git log author name email git log committer name email keep mind author committer author person originally wrote code hand committer person committed code behalf original author want list commits containing specific file find commits containing specific file use git log path file would usually specify exact path may also use wild card path file name using wildcards useful inform namestatus see list committed file git log namestatus j want view commit history specific function trace evolution single function use git log l functionname filepath note combine git log option like revision range commit limit find tag commit referenced find tag containing specific commit git tag contains commitid submodules clone submodules git clone recursive git githubcomfoobargit already cloned git submodule update init recursive remove submodule creating submodule pretty straightforward deleting le command need git submodule deinit submodulename git rm submodulename git rm cached submodulename rm rf gitmodulessubmodulename miscellaneous object copy folder file one branch another git checkout branchyouwantthedirectoryfrom foldername filename restore deleted file first find commit file last existed git revlist n head filename checkout file git checkout deletingcommitid filename delete tag git tag tagname git push remote refstags tagname recover deleted tag want recover tag already deleted following step first need find unreachable tag git fsck unreachable grep tag make note tag hash restore deleted tag following making use git updateref git updateref refstags tagname hash tag restored deleted patch someone sent pull request github deleted original fork unable clone repository use git diff patch url become unavailable checkout pr using github special ref fetch content pr new branch called git fetch origin githubcom foobar new ref exporting repository zip file git archive format zip output fullpathtozipfilezip master push branch tag name tag remote repository name branch get following error trying push branch standard git push remote branch command git push origin branch error dst refspec match one error failed push ref git server fix specifying want push head reference git push origin refsheads branchname want push tag remote repository name branch use similar command git push origin refstags tagname tracking file want change file name capitalization without changing content file master git mv force myfile myfile want overwrite local file git pull master git fetch master git reset hard originmaster want remove file git keep file master git rm cached logtxt want revert file specific revision assuming hash commit want master git checkout want revert change made commit pas commit hash master git checkout want list change specific file commits branch assuming want compare last commit file commit git diff head pathtofilefile pathtofilefile go branch git diff master pathtofilefile staging pathtofilefile want git ignore change specific file work great config template file require locally adding credential nt committed git updateindex assumeunchanged filetoignore note remove file source control ignored locally undo tell git notice change clear ignore flag git updateindex noassumeunchanged filetostopignoring debugging git gitbisect command us binary search find commit git history introduced bug suppose master branch want find commit broke feature start bisect specify commit bad one known good assuming current version bad good git bisect bad git bisect good gitbisect selects commit middle range specified check asks whether good bad see something like bisecting revision left test roughly step commit message check commit good bad good git bisect good gitbisect select another commit range process selecting good bad repeat revision left inspect command finally print description first bad commit configuration want add alias git command o x linux git configuration file stored gitconfig added example alias use shortcut common typo alias section shown alias add amend commit amend c commit ca commit amend ci commit co checkout diff dc diff changed d diff staged extend commit amend c head f fetch loll log graph decorate prettyoneline abbrevcommit merge one log prettyoneline outstanding rebase u reword commit amend status unpushed log u wc whatchanged wip rebase u zap fetch p day log reverse nomerges branch datelocal sincemidnight author git config get username deletemergedbranches f git checkout quiet master git branch merged grep invertmatch xargs n git branch delete git checkout quiet f want add empty directory repository git support hack create gitignore file directory following content ignore everything directory except file gitignore another common convention make empty file folder titled gitkeep mkdir mydir touch mydirgitkeep also name file keep case second line would touch mydirkeep want cache username password repository might repository requires authentication case cache username password nt enter every push pull credential helper git config global credentialhelper cache set git use credential memory cache git config global credentialhelper cache set cache timeout hour setting second find credential helper git help grep credential show possible credential helper o specific credential caching git config global credentialhelper osxkeychain osx git config global credentialhelper manager git window git config global credentialhelper gnomekeyring ubuntu gnomebased distros credential helper likely found different distribution operating system want make git ignore permission filemode change git config corefilemode false want make default behaviour loggedin user use git config global corefilemode false want set global user configure user information used across local repository set name identifiable credit review version history git config global username firstname lastname set email address associated history marker git config global useremail validemail want add command line coloring git set automatic command line coloring git easy reviewing git config global colorui auto idea wrong screwed reset something merged wrong branch force pushed ca nt find commits know point alright want go back state git reflog reflog keep track change tip branch even tip nt referenced branch tag basically every time head change new entry added reflog work local repository sadly track movement change file nt recorded anywhere instance master git reflog head reset moving head checkout moving master head checkout moving master reflog show checkout master branch back hard reset older commit latest activity represented top labeled head turn accidentally moved back reflog contain commit master pointed accidentally dropped commits git reset hard using git reset possible change master back commit provides safety net case history accidentally changed copied edited source git shortcut git bash comfortable command might want create shortcut git bash allows work lot faster complex task really short command alias sqsquash function squash git rebase head copy command bashrc bashprofile powershell window using powershell window also set alias function add command profile whose path defined profile variable learn profile page microsoft documentation site setalias sq squashcommits function squashcommits git rebase head resource book tutorial script tool firstaidgitio searchable selection frequently asked git question gitextracommands collection useful extra git script gitextras git utility repo summary repl changelog population author commit percentage gitfire gitfire git plugin help event emergency adding current file committing pushing new branch prevent merge conflict gittips small git tip gittown generic highlevel git workflow support http wwwgittowncom gui client gitkraken downright luxurious git client window mac linux gitcola another git client window o x gitup newish gui opinionated way dealing git complication gitxdev another graphical git client o x sourcetree simplicity meet power beautiful free git gui window mac tower graphical git client o x paid tig terminal textmode interface git magit interface git implemented emacs package gitextensions shell extension visual studio plugin standalone git repository tool fork fast friendly git client mac beta gmaster git client window merge analyze refactors semantic diff merge beta gitk git client linux allow simple view repo state sublimemerge blazing fast extensible client provides merges powerful search syntax highlighting active development
773,Lobsters,vcs,Git & VCS,"Tower 2: Version control with Git - made easy. In a beautiful, efficient, and powerful app.",http://www.git-tower.com/,tower version control git made easy beautiful efficient powerful app,,esteban torresengineer soundcloud new tower add lot great feature help go day faster like ability create pullrequests directly tool dan counsellceo realmac tower perfect git client honestly want use anything else daniel schutzsmithamnesty international use tower changed game made git much visual understand
774,Lobsters,vcs,Git & VCS,Tracking down a kernel bug with git bisect,http://blog.oddbit.com/2014/07/21/tracking-down-a-kernel-bug-wit/,tracking kernel bug git bisect,http,http
776,Lobsters,vcs,Git & VCS,"Introducing Irmin: Git-like distributed, branchable storage",http://openmirage.org/blog/introducing-irmin,introducing irmin gitlike distributed branchable storage,thomas gazagnaire irmin irmin git cap theorem mergeable queue persistent data structure widely limited copyonwrite semantics complexity block store virtual heap ocaml ocaml internals chapter memory representation value real world ocaml contentaddressable storage write barrier sequentially tag store controlled mutability concurrency complex protocol merging data structure conflictfree replicated datatypes queue next step git data signature next post series dave scott xenstore,thomas gazagnairethis first post series describe irmin new gitlike storage layer mirage o post give highlevel description irmin overall architecture later post detail use irmin real system irmin library persist synchronize distributed data structure ondisk inmemory enables style programming similar git workflow distributed node fork fetch merge push data general idea want every active node get local partial copy global database always explicit data shared migrated irmin strictly speaking full database engine component mirage o collection library designed solve different flavour challenge raised cap theorem application select right combination library solve particular distributed problem precisely irmin consists core welldefined lowlevel data structure specify data persisted shared across node defines algorithm efficient synchronization distributed lowlevel construct also build collection higherlevel data structure like persistent mergeable queue used developer without know precisely irmin work underneath since part mirage o irmin make strong assumption o environment run make system portable detail hold inmemory database well slower persistent serialization ssds hard drive web browser local storage even git file format persistent data structure persistent data structure well known used pervasively many different area programming language community investigated concept widely limited functional programming meantime system community experimented various persistent strategy copyonwrite filesystems system main concern optimize space complexity maximizing sharing immutable substructure irmin design idea share root previous work persistent data structure provides efficient way fork data structure also explores new strategy mechanism able efficiently merge back forked structure offer programming construct similar git workflow irmin focus two main aspect semantics property resulting merged object verify complexity design efficient merge synchronization primitive taking advantage immutable nature underlying object although pervasively used data persistence broad fuzzy meaning blog post refer data persistence way single process lazily populate process memory startup need want process able resume holding part previous state crash concurrent process share reference object living global pool data sharing reference opposed sharing value reduces memory copy allow different process concurrently update shared store case need global pool data irmin block store way name value pool irmin tag store block store virtual heap even highlevel data structure need allocated memory purpose runtime map highlevel construct lowlevel memory graph block one strength ocaml simple deterministic mapping highlevel data structure lowlevel block representation heap see instance excellent series blog post ocaml internals richard w jones chapter memory representation value real world ocaml irmin block store seen virtual ocaml heap us abstract way connecting heap block instead using concrete physical memory address block irmin us hash block content address contentaddressable storage give irmin block store lot nice property greatly simplifies way distributed store synchronized persistent data structure immutable block created block store content never change updating immutable data structure mean returning completely new structure trying share common subpart avoid cost making new allocation much possible instance modifying value persistent tree mean creating chain new block root tree modified leaf convenience irmin considers acyclic block graph difficult nonlazy pure language generate complex cyclic value reasonable space usage conceptually irmin block store following signature type type irmin block store type key type irmin pointer type value type irmin block val read key value option read k block stored location k store none block available location val add key value add k v new store storing block v location k persistent data structure efficient store memory disk need write barrier update written sequentially instead requiring random access data structure tag store controlled mutability concurrency far discussed purely functional data structure updating structure mean returning pointer new structure heap share content previous one style programming appealing implementing complex protocol lead better compositional property however make sharing information process much difficult need way inject state one structure another process memory order irmin borrows concept branch git relating every operation branch name modifying tip branch sideeffects irmin tag store mutable part whole system responsible mapping global branch name block block store tag name used pas block reference different process block store tag store combined build higherlevel store irmin store fine concurrency control atomicity guarantee mutation happens tag store ensure long given tag updated change made block store visible anyone also give nice story concurrency git creating concurrent view store straightforward operation creating new tag denotes new branch concurrent operation happen different branch type type irmin store type tag mutable tag type key type userdefined key instance list string type value type userdefined value val read branch tag key value option read branch k read content key k branch branch store branch specified use head one val update branch tag key value unit update branch k v update branch branch store association key key value value interaction concurrent process completely explicit need happen via synchronization point merge event also possible emulate behaviour transaction recording sequence operation read update given branch sequence used merge check operation valid ie read transaction still return result current tip store discarded merge take place merging data structure merge two data structure consistent way one compute sequence operation lead initial common state two diverging state one want merge two sequence operation found must combined possible sensible way applied back initial state order get new merged state mechanism sound nice practice two major drawback specify find initial state two diverging state generally possible think diverging counter andit mean need compute sequence update operation lead one state easier finding common initial state two branch still generally efficient irmin solve problem using two mechanism first interesting observation model sequence store tip purely functional datastructure model partial order tip directed acyclic graph node tip edge two tip either one result applying sequence update ii one result merge operation tip practically speaking mean every tip contains list predecessor well actual data associated purely functional store graph irmin block store persistent immutable history good various obvious reason access forensics error occurs snapshot rollback feature free another le obvious useful property find greatest common ancestor two data structure without expensive global search second mechanism require data structure used irmin equipped welldefined merge operation take two diverging state corresponding initial state computed using previous mechanism return either new state conflict similar eagain exception get try commit conflicting transaction traditional transactional database access common ancestor make great difference designing new merge function usually modification required datastructure contrast conventional approach invasive requires data structure carry information operation history instance conflictfree replicated datatypes relies unbounded vector clock thus designing interesting data structure equipped merge counter queue rope implementation distributed mergeable counter look like type int distributed counter normal integer let merge old old merging counter mean computing increment two state relatively initial state old add two increment old next step git data design perspective access history make easier design complex data structure good compositional property use unikernels moreover made assumption substrate lowlevel construct need implemented irmin engine ported many exotic backends javascript anywhere else mirage o run matter implementing rather trivial signature developer perspective mean full history operation available inspect history model similar git workflow increasingly familiar similar fact developed bidirectional mapping irmin data structure git format permit git commandline interact next post series explains dave scott new version xenstore database power every xen host entire database stored prefixtree irmin datastructure exposed git repository liveupdated sneak preview
777,Lobsters,vcs,Git & VCS,“Merge pull request” Considered Harmful,http://blog.spreedly.com/2014/06/24/merge-pull-request-considered-harmful/,merge pull request considered harmful,github pull request meet maintainer issue contributing readme changelog public style guide code inventory git linus wrote activemerchant hub hub raw patch get pull request history written victor pesky button,love github think made contributing open source approachable enjoyable found open source maintainer workflow github put front center form web pull request ui actively harmful project quality speed taking contribution hit big old merge pull request button next open source github pull request think deserving inclusion let tell quick storymeet maintainer jane maintainer modestly successful open source project get couple new issue opened project github repo every week quick dive provide feedback request coming nt time implement good idea try give folk quick thumnbs thumb code open pull request inclusion good maintainer written contributing document course repo readme changelog get updated project move forward couple level automated test contributor run develop expected extend add feature jane even adopted comprehensive public style guide code base stay tidy conscientious try though jane problem dozen unmerged pull request repo feel like always behind getting merged even though lot pretty straightforward looking couple awaiting large revision based feedback vast majority stuck small stuff extra test need added whitespace change match style guide missing changelog entry bunch commits need squashed etc even frustrating even though jane provides feedback quickly often contributor lose interest andor forget taking pull request final step initially contributing apparent triviality change jane asking somewhat perversely contributes loss interest since feel like nitpicking asking fifth overlooked stylistic change end result kind unmerged code inventory sitting around taking mental space jane frustrated losing motivation current crop contributor le likely show future git linus wrote hello name nathaniel spot jane recently jumped onto activemerchant project page pull request inventory stuck trivial stuff knew exactly needed get done stuck two option hope original contributor show back finish cleaning contribution merged cleanlymerge contribution nt quite ready another commit clean unfortunately neither path appealing tried former giving contributor detailed feedback waiting incorporate pull request kept sitting staring ended trying teach advanced git bunch people squash five wip commits nt zucchini squash latter option result weird historical state possibility nonworking intermediate code breaking git bisect cleanup take get future pull request could based notquiteready commit commits clean might get forgotten tried twice super painful ocd could nt deal result solution turn git built make situation easy deal thing really holding back workflow github put front center stopped using merge pull request button instead install hubgrab pull request url look like http repo master branch run git url url pull request url conflict fix em git continuenow change applied right local master branch make fix clean whitespace add line changelog tack test etc world oyster done yet still need prep change pushed go want highlight done git built tool called stand apply mail designed slurp incoming patch email inbox handy hub tool github adapts git work web hosted patch specifically raw patch get pull request using workflow hewing much closer workflow kernel maintainer instance use reviewing merging patch history written victor perfect code hello hyperbole sitting local master branch contributed commits showing git log change uncommitted come next bit choose adventure situation since depends working contribution single commit git commit amend smoosh change right original commitif contribution multiple work progress commits commit change git rebase originmaster squash commits including single logical commitit rare experience contribution multiple logical commits history worthy term incremental step make sense isolation add commit end contribution ready go one little trick make even awesome add close xxx last line commit message git push pull request autocloses even cooler pull request open browser browser automatically update reflect pull request closed github smart commit history look like activemerchant project compare rail commit history know prefer even better spending way le time going around around contributor way time merging code final bonus notice activemerchant history contributor still get credit commits regardless much editing andor rebasing roll pesky button might still want use merge pull request button super small change think oneliner doc tweak said stopped even since plain ugly nt take much longer right internalprivate project want idea situation make sense personally still prefer clean commit history benefit using merge pull request button contributor nt get every detail exactly rightit easy maintainer clean commitsless postingemailing codingcommit history becomes useful story joy read big fan benefit experience mean le time le frustration maintainer push button take contribution sound great theory reality add friction make job maintainer harder hypothetical storytelling construct created mind jane agrees
778,Lobsters,vcs,Git & VCS,How to handle big repositories with git,https://blogs.atlassian.com/2014/05/handle-big-repositories-git/,handle big repository git,really two category big repository cloning repository long history simple solution git shallow clone jira build system connected git repo surgical solution git filter branch post tearing apart git repo alternative git shallowclone clone one branch managing repository huge binary asset many different kind software nonsoftware team encounter solution big folder tree git sparsecheckout solution controlling update large file submodules git submodules core concept tip alternative git submodules update skip use git lf bitbucket support git lf conclusion git microsite,git fantastic choice tracking evolution code base collaborating efficiently peer happens repository want track really really big post give technique dealing two category big repository think broadly two major reason repository growing massive accumulate long history project grows long period time baggage accumulates include huge binary asset need tracked paired together code could sometimes second type problem compounded fact old deprecated binary artifact still stored repository moderately easy annoying fix see technique workarounds scenario different though sometimes complementary cover separately cloning repository long history even though threshold qualifying repository massive pretty high still pain clone always avoid long history repos kept tact legal regulatory reason simple solution git shallow clone first solution fast clone saving developer system time disk space copy recent revision git shallow clone option allows pull latest n commits repo history use option example git clone depth depth remoteurl imagine accumulated ten year project history repository example migrated jira yearold code base git time saving repos like add noticeable full clone jira working directory another made commits shallow clone repo take second compared minute second full clone history benefit grows proportionately many binary asset project swallowed time tip build system connected git repo benefit shallow clone shallow clone used somewhat impaired citizen git world operation barely supported recent version improved situation greatly properly pull push repository even shallow clone surgical solution git filter branch huge repository lot binary cruft committed mistake old asset needed anymore great solution use git filterbranch command let walk entire history project filtering modifying skipping file according predefined pattern powerful tool identified repo heavy helper script available identify big object part easy enough syntax go like git filterbranch treefilter rm rf pathtospuriousassetfolder git filterbranch minor drawback though use filterbranch effectively rewrite entire history project commit id change requires every developer reclone updated repository planning carry cleanup action using git filterbranch alert team plan short freeze operation carried notify everyone clone repository tip git filterbranch post tearing apart git repo alternative git shallowclone clone one branch since git also limit amount history clone cloning single branch like git clone remote url branch branchname singlebranch folder specific hack useful working long running divergent branch lot branch ever need work handful branch difference probably see huge difference using managing repository huge binary asset second type big repository huge binary asset something many different kind software nonsoftware team encounter gaming team juggle around huge model web development team might need track raw image asset cad team might need manipulate track status binary deliverable git especially bad handling binary asset especially good either default git compress store subsequent full version binary asset obviously optimal many basic tweak improve situation like running garbage collection git gc tweaking usage delta commits binary type gitattributes important reflect nature project binary asset help determine winning approach example point consider binary file change significantly meta data header delta compression probably going useless use delta file avoid unnecessary delta compression work part repack scenario likely file zlib compress well either could turn compression corecompression coreloosecompression global setting would negatively affect nonbinary file actually compress well make sense split binary asset separate repository important remember git gc turn duplicated loose object single pack file unless file compress way probably make significant difference resulting pack file explore tuning corebigfilethreshold anything larger delta compressed anyway without set gitattributes maybe something worth tweaking solution big folder tree git sparsecheckout mild help binary asset problem git sparse checkout option available since git technique allows keep working directory clean explicitly detailing folder want populate unfortunately affect size overall local repository helpful huge tree folder involved command example clone full repository git clone activate feature git config coresparsecheckout true add folder needed explicitly ignoring asset folder echo src gitinfosparsecheckout read tree specified go back use normal git command work directory contain folder specified solution controlling update large file submodules another way handle huge binary asset folder split separate repository pull asset main project using git submodules give way control update asset see submodules post git submodules core concept tip alternative git submodules update skip use git lf work large file regular basis best solution might take advantage large file support lf atlassian codeveloped github yes read right teamed github opensource contribution git project git lf extension store pointer naturally large file repository instead storing file actual file stored remote server imagine dramatically reduces time take clone repo bitbucket support git lf github chance already access technology especially helpful team include designer videographers musician cad user conclusion give fantastic capability git big repository history huge file workable solution problem check article linked info submodules project dependency git lf refresher command workflow git microsite load tutorial happy coding
779,Lobsters,vcs,Git & VCS,A Hacker’s Guide to Git,http://wildlyinaccurate.com/a-hackers-guide-to-git,hacker guide git,leanpub introduction repository blob tree object commit object tag object reference tree object tree tree commits reference branch local branch remotetracking branch lightweight tag annotated tag tag object tag object gpg key merging fastforward c two parent commits merge commit e rebasing cherrypicking f f f f f f c b f c rebasing continued hey want pretend actually branched take commits pretend happened remote cloning pushing remotetracking branch fetching pulling gitreflog local repository gitfsck gitstash merge commit c c b gitdescribe gitrevparse gitbisect useful command find commit reference point find branch commit find commits one branch another exclude commits cherrypicked view detail object show object type show object size print tree given reference find first tag contains reference,hacker guide git available ebook purchase leanpub introduction git currently widely used version control system world mostly thanks github measure argue also misunderstood version control system world statement probably ring true straight away surface git pretty simple really easy pick come another vcs like subversion mercurial even relatively easy pick never used vcs everybody understands adding committing pushing pulling far git simplicity go past point git shrouded fear uncertainty doubt start talking branching merging rebasing multiple remote remotetracking branch detached head git becomes le easilyunderstood tool feared deity anybody talk nofastforward merges regarded quiet superstition even veteran hacker would rather stay away rebasing safe think big part due many people coming git conceptually simpler vcs probably subversion trying apply past knowledge git easy understand people want subversion simple right file folder commits numbered sequentially even branching tagging simple like taking backup folder basically subversion fit nicely existing computing paradigm everybody understands file folder everybody know revision one paradigm break try apply git trying understand git way wrong git work like subversion pretty confusing add remove file commit change generate diffs patch look like one subversion generates something appears similar really different complex system like git become much easier understand figure really work goal guide shed light git work hood going take look git core concept including basic object storage commits work branch tag work look different kind merging git including muchfeared rebase hopefully end solid understanding concept able use git advanced feature confidence worth noting point guide intended beginner introduction git guide written people already use git would like better understand taking peek hood learn neat trick along way said let begin repository core git like vcs repository git repository really simple keyvalue data store git store among thing blob basic data type git essentially blob bunch byte usually binary representation file tree object bit like directory tree object contain pointer blob tree object commit object point single tree object contain metadata including commit author parent commits tag object point single commit object contain metadata reference pointer single object usually commit tag object need worry yet cover thing detail later important thing remember git repository exists entirely single git directory project root central repository like subversion cv allows git distributed version control system everybody selfcontained version repository initialize git repository anywhere git init command take look inside git folder get glimpse repository look like git init initialized empty git repository homedemodemorepositorygit l l git total drwxrwxrx demo demo may branch rwrwr demo demo may config rwrwr demo demo may description rwrwr demo demo may head drwxrwxrx demo demo may hook drwxrwxrx demo demo may info drwxrwxrx demo demo may object drwxrwxrx demo demo may ref important directory gitobjects git store object gitrefs git store reference see fit together learn rest git let learn little bit tree object tree object tree object git thought directory contains list blob file tree object subdirectory imagine simple repository readme file src directory containing helloc file would represented two tree object one root directory another src directory would look like tree blob readme tree src tree draw blob green well tree object blue end diagram look lot like directory structure notice given root tree object recurse every tree object figure state entire working tree root tree object therefore essentially snapshot repository given time usually git refers tree referring root tree object let learn track history repository commit object commits commit object essentially pointer contains piece important metadata commit hash built combination metadata contains hash tree root tree object time commit learned tree object mean single commit git build entire working tree recursing tree hash parent commits give repository history every commit parent commit way back first commit author name email address time change authored committer name email address time commit made commit message let see commit object action creating simple repository git init initialized empty git repository homedemosimplerepositorygit echo readme readme git add readme git commit first commit master rootcommit first commit file changed insertion create mode readme create commit git give hash commit using git show formatraw flag see newlycreated commit metadata git show formatraw commit tree author joseph wynn joseph wildlyinaccuratecom committer joseph wynn joseph wildlyinaccuratecom first commit diff git areadme breadme new file mode index devnull breadme readme notice although referenced commit partial hash git able figure actually meant hash git assigns object unique enough identified first character see git able find commit four character point git tell reference ambiguous git show git show git show fatal ambiguous argument unknown revision path working tree reference previous section saw object git identified hash since want manipulate object quite often git important know hash could run git command referencing object hash like git show would require remember hash every object want manipulate save memorize hash git reference ref reference simply file stored somewhere gitrefs containing hash commit object carry example commits let figure hash first commit using reference git status branch master nothing commit working directory clean git status told u branch master learn later section branch reference see looking gitrefsheads l l gitrefsheads total rwrwr demo demo may master easily see commit master point reading file cat gitrefsheadsmaster sure enough master contains hash first commit object course possible simplify process git tell u commit reference pointing show revparse command git show oneline master first commit git revparse master git also special reference head symbolic reference point tip current branch rather actual commit inspect head see simply point refsheadmaster cat githead ref refsheadsmaster actually possible head point directly commit object happens git tell detached head state talk bit later really mean currently branch branch git branch often touted one strongest feature branch git lightweight compared vcs branch usually clone entire repository reason branch lightweight git reference saw reference master branch simply file inside gitrefsheads let create another branch see happens hood git branch testbranch cat gitrefsheadstestbranch simple git created new entry gitrefsheads pointed current commit also saw reference head git reference current branch let see action switching newlycreated branch cat githead ref refsheadsmaster git checkout testbranch switched branch testbranch cat githead ref refsheadstestbranch create new commit git simply change current branch point newlycreated commit object echo information readme git add readme git commit update readme new branch testbranch update readme new branch file changed insertion cat gitrefsheadstestbranch later look difference local branch remotetracking branch look tag work let switch back master branch git checkout master switched branch master two type tag git lightweight tag annotated tag surface two type tag look similar reference stored gitrefstags however far similarity go let create lightweight tag see work git tag cat see git created tag reference point current commit default git tag create lightweight tag note tag object verify using git catfile inspect tag git catfile p tree author joseph wynn joseph wildlyinaccuratecom committer joseph wynn joseph wildlyinaccuratecom first commit git catfile p tree author joseph wynn joseph wildlyinaccuratecom committer joseph wynn joseph wildlyinaccuratecom first commit see far git concerned tag commit object lightweight tag reference commit object let compare annotated tag git tag tagged cat passed annotate flag git tag create annotated tag notice git creates reference tag like lightweight tag reference pointing object lightweight tag let use git catfile inspect object git catfile p object type commit tag tagger joseph wynn joseph wildlyinaccuratecom tagged tag object separate commit point well containing pointer commit tag object also store tag message information tagger tag object also signed gpg key prevent commit email spoofing aside gpgsignable reason annotated tag preferred lightweight tag probably important reason annotated tag author information helpful want know created tag rather created commit tag referring annotated tag also timestamped since new version usually tagged right released annotated tag tell version released rather final commit made merging merging git process joining two history usually branch together let start simple example say created new feature branch master done work git checkout b featurebranch switched new branch featurebranch vim featurehtml git commit finished new feature featurebranch finished new feature file changed insertion time need fix urgent bug create hotfix branch master work git checkout master switched branch master git checkout b hotfix switched new branch hotfix vim indexhtml git commit fixed wording hotfix fixed wording file changed insertion deletion point history look something like want bring bug fix master tag release git checkout master switched branch master git merge hotfix updating fastforward indexhtml file changed insertion deletion notice git mention fastforward merge mean commits hotfix directly upstream master allows git simply move master pointer tree hotfix end look like let try merge featurebranch master git merge featurebranch merge made recursive strategy featurehtml file changed insertion time git able perform fastforward featurebranch directly upstream master clear graph master commit different history tree featurebranch commit c git handle merge taking look log see git actually created new merge commit well bringing commit featurebranch git log oneline merge branch featurebranch finished new feature fixed wording initial commit upon closer inspection see special kind commit object two parent commits referred merge commit git show formatraw commit tree parent parent author joseph wynn joseph wildlyinaccuratecom committer joseph wynn joseph wildlyinaccuratecom merge branch featurebranch mean history graph look something like commit e new merge commit people believe sort history graph undesirable rebasing continued section learn prevent nonfastforward merges rebasing feature branch merging master rebasing rebasing without doubt one git misunderstood feature people git rebase command avoided cost probably due extraordinary amount scaremongering around rebasing rebase considered harmful please stay away rebase two many antirebase article find vast archive internet rebase scary dangerous long understand get rebasing going take quick digression actually much easier explain rebasing context cherrypicking cherrypicking git cherrypick take one commits replay top current commit imagine repository following history graph commit run git cherrypick f git take change introduced commit f replay new commit shown f top commit reason end copy commit f rather commit f due way commits constructed recall parent commit part commit hash despite containing exact change author information timestamp f different parent f giving different hash common workflow git develop feature small branch merge feature one time master branch let recreate scenario adding branch label graph see master updated since foo created avoid potential conflict foo merged master want bring master change foo master base branch want play foo commits top master essentially want change commit c parent b f going easy achieve git cherrypick first need create temporary branch commit f git checkout master git checkout b footmp base commit f cherrypick foo commits top left point foo commit delete temporary branch footmp reset command point head therefore current branch specified commit hard flag ensures working tree updated well git checkout foo git reset hard footmp git branch footmp give desired result foo commits upstream master note original c commits longer reachable branch point rebasing continued example cherrypicking worked practical git rebasing allows u replace verbose cherrypick git checkout master git checkout b footmp git cherrypick c git checkout foo git reset hard footmp git branch footmp single command format git rebase base target rebase command take commits target play top base one one without actually modifying base end result linear history base fastforwarded target sense performing rebase like telling git hey want pretend target actually branched base take commits target pretend happened base let take look example graph merging see rebasing prevent u nonfastforward merge enable fastforward merge featurebranch master run git rebase master featurebranch performing merge git rebase master featurebranch first rewinding head replay work top applying finished new feature brought featurebranch directly upstream master git able perform fastforward merge git checkout master git merge featurebranch updating fastforward featurehtml file changed insertion remote order collaborate git project need utilise least one remote repository unlike centralised vcs require dedicated server daemon git remote simply another git repository order demonstrate first need understand concept bare repository recall git store entire repository inside git directory inside directory blob tree object traversed build snapshot entire project mean git actually need working tree us working tree figure change made since last commit easily demonstrated delete file repository run git checkout file despite removed file system git still restore file previously stored repository thing entire directory git still able restore everything traversing tree object therefore possible repository store project history without actually working tree called bare repository bare repository commonly used central repository collaborator share change mechanism sharing change explained detail pushing pulling section let look creating bare repository git init bare initialised empty git repository homedemobarerepo l l total drwxrwxrx demo demo may branch rwrwr demo demo may config rwrwr demo demo may description rwrwr demo demo may head drwxrwxrx demo demo may hook drwxrwxrx demo demo may info drwxrwxrx demo demo may object drwxrwxrx demo demo may ref notice rather creating git directory repository git init bare simply treat current directory git directory really much repository interesting thing contains head reference point master branch exist yet config file bare flag set true file much interest u find type f infoexclude hookscommitmsgsample hooksprecommitsample hooksprepushsample hooksprerebasesample hookspreapplypatchsample hooksapplypatchmsgsample hookspostupdatesample hookspreparecommitmsgsample hooksupdatesample description head config cat head ref refsheadsmaster cat config core repositoryformatversion filemode true bare true repository well nothing much right git let u modify repository working tree modify note strictly true could painstakingly use git lowlevel command manually create store object git data store beyond scope guide really interested read git internals git object touch readme git add readme fatal operation must run work tree intended use repository collaborator clone pull change well push change cloning set bare repository let look concept cloning repository git clone command really shortcut thing default configuration create remotetracking branch branch remote check branch currently active head remote perform git pull bring current branch working tree uptodate remote clone command take url support number transport protocol including http ssh git protocol also support plain old file path use cd git clone barerepo cloneofbarerepo cloning cloneofbarerepo warning appear cloned empty repository done let inspect cloned repository see git set cd cloneofbarerepo find type f gitinfoexclude githookscommitmsgsample githooksprecommitsample githooksprepushsample githooksprerebasesample githookspreapplypatchsample githooksapplypatchmsgsample githookspostupdatesample githookspreparecommitmsgsample githooksupdatesample gitdescription githead gitconfig cat githead ref refsheadsmaster l l gitrefsheads total cat gitconfig core repositoryformatversion filemode true bare false logallrefupdates true remote origin url homedemobarerepo fetch refsheads refsremotesorigin branch master remote origin merge refsheadsmaster quite literally clone barerepo difference repository contains extra line gitconfig first contains remote listing origin default name given repository main remote tell git url repository reference retrieve performing git fetch branch listing configuration remotetracking branch get let store data remote repository pushing cloned completely empty repository want start working echo project readme git add readme git commit add readme master rootcommit add readme file changed insertion create mode readme notice even though technically exist nothing gitrefsheads commit made master branch head repository pointed master git gone ahead created branch u cat gitrefsheadsmaster completed work need share collaborator also cloned repository git make really easy git push origin master counting object done writing object byte byte done total delta reused delta homedemobarerepo new branch master master notice specified remote origin branch master want git push possible simply run git push dangerous generally advised running git push without argument depending configuration push remotetracking branch usually okay result pushing change want collaborator pull worst case destroy collaborator change specify force flag let take look remote repository see happened cd barerepo cat refsheadsmaster git show commit author joseph wynn joseph wildlyinaccuratecom date sat may add readme diff git areadme breadme new file mode index devnull breadme project expected remote repository contains master branch point commit created essentially happened ran git push git updated remote reference sent object required build reference case git push updated remote master point sent commit object well tree blob object related commit remotetracking branch saw cloning remotetracking branch essentially line gitconfig let take look line branch master remote origin merge refsheadsmaster line branch master denotes following configuration applies local master branch rest configuration specifies remotetracking branch fetched git fetch master branch origin remote besides storing configuration git also store local copy remote branch simply stored reference gitrefsremotes remote branch see work fetching fetching git fetch command fairly simple take name remote unless used flag fetch remote retrieves new reference object necessary complete recall remote configuration look like remote origin url homedemobarerepo fetch refsheads refsremotesorigin fetch parameter specifies mapping remoterefs localrefs example simply state reference found origin refsheads stored locally refsremotesorigin see repository cloned earlier l l gitrefsremotesorigin total rwrwr demo demo may master let see fetch action get better idea happens first create new branch remote repository cd barerepo git branch featurebranch run git fetch clone cd cloneofbarerepo git fetch origin homedemobarerepo new branch featurebranch originfeaturebranch done couple thing first created reference remote branch gitrefsremotesorigin cat gitrefsremotesoriginfeaturebranch also updated special file gitfetchhead important information talk file detail soon cat gitfetchhead branch master homedemobarerepo notformerge branch featurebranch homedemobarerepo done created local branch git understands even though remote featurebranch might want local repository want local branch track remote featurebranch git make easy run git checkout featurebranch rather failing local featurebranch exists git see remote featurebranch available create local branch u git checkout featurebranch branch featurebranch set track remote branch featurebranch origin switched new branch featurebranch git done couple thing u first created local featurebranch reference point commit remote featurebranch cat gitrefsremotesoriginfeaturebranch cat gitrefsheadsfeaturebranch also created remotetracking branch entry gitconfig cat gitconfig core repositoryformatversion filemode true bare false logallrefupdates true remote origin url homedemobarerepo fetch refsheads refsremotesorigin branch master remote origin merge refsheadsmaster branch featurebranch remote origin merge refsheadsfeaturebranch pulling git pull command like git clone nice shortcut essentially run lowerlevel command short format git pull remote branch git pull command following run git fetch remote read gitfetchhead figure branch remotetracking branch merged run git merge required otherwise quits appropriate message point help understand git fetchhead every time run git fetch git store information fetched branch gitfetchhead referred shortlived reference default git override content fetchhead every time run git fetch let introduce new commits remote repository see practice git clone barerepo newcloneofbarerepo cloning newcloneofbarerepo done cd newcloneofbarerepo git checkout featurebranch branch featurebranch set track remote branch featurebranch origin switched new branch featurebranch echo information readme git commit add information readme featurebranch add information readme file changed insertion git push origin featurebranch counting object done writing object byte byte done total delta reused delta homedemobarerepo featurebranch featurebranch using step outlined earlier let manually perform git pull clone pull change introduced cd cloneofbarerepo git fetch origin remote counting object done remote total delta reused delta unpacking object done homedemobarerepo featurebranch originfeaturebranch cat gitfetchhead branch featurebranch homedemobarerepo notformerge branch master homedemobarerepo point git updated local copy remote branch updated information fetchhead cat gitrefsheadsfeaturebranch cat gitrefsremotesoriginfeaturebranch know fetchhead fetch introduced change featurebranch left complete pull perform merge git merge fetchhead updating fastforward readme file changed insertion performed git pull without actually running git pull course much easier let git take care detail sure outcome run git pull well git reset hard head add readme git pull origin featurebranch homedemobarerepo branch featurebranch fetchhead updating fastforward readme file changed insertion solid understanding git inner working advanced git tool start make sense gitreflog whenever make change git affect tip branch git record information change called reflog usually need look log sometimes come handy let say repository commits git log oneline add empty license file add actual content readme add todo note readme add empty readme decide reason perform destructive action master branch git reset hard head add todo note readme since performing action realised lost commits idea hash never pushed change local repository git log help since commits longer reachable head git log oneline add todo note readme add empty readme git reflog useful git reflog head reset moving head commit add empty license file head commit add actual content readme head commit add todo note readme head commit initial add empty readme reflog show list change head reverse chronological order hash first column value head action right performed see therefore commit destructive change want recover commits depends situation particular example simply git reset hard restore head original position however introduced new commits since destructive change may need something like cherrypick commits lost note git reflog record change local repository local repository becomes corrupt deleted reflog use repository deleted reflog exist depending situation may find git fsck suitable recovering lost commits gitfsck way git object storage work like primitive file system object like file hard drive hash object physical address disk git index exactly like index file system contains reference point object physical location analogy git fsck aptly named fsck file system check tool able check git database verify validity reachability every object find reference like branch deleted git index object refer usually deleted even longer reachable reference using simple example see practice branch featurebranch point delete featurebranch commit longer reachable git branch featurebranch master git revparse short featurebranch git branch featurebranch deleted branch featurebranch point commit still exists repository reference pointing searching database git fsck able find git fsck lostfound checking object directory done dangling commit simple case git reflog may preferred git fsck excels git reflog though need find object never referenced local repository therefore would reflog example delete remote branch interface like github assuming object garbagecollected clone remote repository use git fsck recover deleted branch gitstash git stash take change working tree index stash away giving clean working tree retrieve change stash reapply working tree time git stash apply common use stash command save halffinished change order checkout another branch seems fairly simple first mechanism behind stash command actually quite complex let build simple repository see work git init initialised empty git repository homedemodemorepogit echo foo testtxt git add testtxt git commit initial commit master rootcommit initial commit file changed insertion create mode testtxt let make change stash echo bar testtxt git stash saved working directory index state wip master initial commit head initial commit stash git put onto stack recentlystashed top list current stash git stash list git stash list stash wip master initial commit right one stash stash actually reference inspect git show stash commit merge author joseph wynn joseph wildlyinaccuratecom date sat jul wip master initial commit diff cc testtxt index atesttxt btesttxt foo bar see stash pointing commit object interesting stash commit merge commit look bit first commit git log oneline initial commit git branch master git fsck lostfound checking object directory done current branch branch could gitfsck found dangling commits must referenced somewhere answer simple git creates special reference stash seen command like git branch git tag reference life gitrefsstash verify git showref git showref refsheadsmaster refsstash git create merge commit stash answer relatively simple well recording state working tree git stash also record state index also known staging area since possible index working tree contain change file git need store state separately give u history look little like history graph tree commit c contains change working tree commit c first parent commit head pointed stash created commit second parent commit b contains change index two commits git able reapply stashed change gitdescribe git describe command summed pretty neatly documentation gitdescribe show recent tag reachable commit helpful thing like build release script well figuring version change introduced git describe take reference commit hash return name recent tag tag point commit gave git describe return tag name otherwise suffix tag name information including number commits since tag abbreviation commit hash git describe git describe want ensure tag name returned force git remove suffix passing git describe gitrevparse git revparse ancillary plumbing command take wide range input return one commit hash common use case figuring commit tag branch point git revparse git revparse short gitbisect git bisect indispensable tool need figure commit introduced breaking change bisect command binary search commit history help find breaking change quickly possible get started simply run git bisect start tell git commit currently broken git bisect bad give git commit know working git bisect good commit git bisect start git bisect bad git bisect good bisecting revision left test roughly step doc miscindex add header general link git checkout commit ask test whether broken commit broken run git bisect bad commit fine run git bisect good time git able pinpoint commit first introduced breaking change git bisect bad first bad commit bisect finished want abort sure run git bisect reset reset head bisect useful command find commit reference point git revparse head git revparse short head find branch commit git branch contains head master otherbranch find commits one branch another git log oneline rightonly master apply hotfix patch cherrypick fix issue exclude commits cherrypicked git log oneline cherrypick rightonly master apply hotfix patch view detail object git catfile p head tree parent author foo bar foo barcom committer foo bar foo barcom lorem ipsum dolor sit amet consectetur adipiscing elit show object type git catfile head commit show object size git catfile head print tree given reference git lstree r head blob gitignore blob travisyml blob license blob makefile blob readmemd blob setuphs blob lishpcabal tree src tree srclishp blob srclishpinterpreterhs blob srclishpprimitiveshs blob srclishpreadlinehs blob srclishptypeshs blob srcmainhs tree test blob testassignmentsh blob testequalitysh blob testfunctionssh blob testprimitivessh blob testtypessh find first tag contains reference git describe head
780,Lobsters,vcs,Git & VCS,MariaDB moves development to Github,https://blog.mariadb.org/mariadb-moves-development-to-github/,mariadb move development github,mariadb project plan use github git source code management http githubcommariadbserver mariacaptains mariadevelopers mailing list emacs mozilla,today mark milestone term mariadb project going forward mariadb project plan use github git source code management migration happens launchpad bzr tool server development heavy development happen github check http githubcommariadbserver feel free watch star even fork code send u contribution previous mariacaptains provide github id accorded similar status send id mariadevelopers mailing list project eventually want move tree github meantime fix still go tree launchpad using bzr may change future completes top voted feature project interested course definitely inspiration emacs mozilla
783,Lobsters,vcs,Git & VCS,Pass: The Standard Unix Password Manager,http://www.zx2c4.com/projects/password-store/,pas standard unix password manager,introducing unix philosophy bash completion zsh fish completion active community client gui platform extension man page using password store man page setting detailed initialization example man page download ubuntu debian fedora rhel opensuse gentoo arch macintosh homebrew package manager freebsd tarball git repository browse git repository data organization usernames password pin website metadata et cetera extension man page compatible client migrating credit license jason donenfeld contributing healthy dose contributor join mailing list,introducing pas password management simple follow unix philosophy pas password life inside gpg encrypted file whose filename title website resource requires password encrypted file may organized meaningful folder hierarchy copied computer computer general manipulated using standard command line file management utility pas make managing individual password file extremely easy password live passwordstore pas provides nice command adding editing generating retrieving password short simple shell script capable temporarily putting password clipboard tracking password change using git edit password store using ordinary unix shell command alongside pas command funky file format new paradigm learn bash completion simply hit tab fill name command well completion zsh fish available completion folder active community produced many impressive client gui platform well extension pas pas command extensively documented man page using password store list existing password store laptop pas password store business somesillybusinesssitecom anotherbusinesssitenet email donenfeldcom france bank freebox mobilephone show password laptop pas copy clipboard laptop pas c copied emailjason clipboard clear second nice password input dialog using standard gpgagent configured stay authenticated several minute since password encrypted add existing password store insert laptop pas insert businesscheesewhizfactory enter password businesscheesewhizfactory omg much cheese gon na also handle multiline password data multiline password edited default text editor using pas edit passname utility generate new password using devurandom internally laptop pas generate emailjasondonenfeldcom generated password emailjasondonenfeldcom qf possible generate password symbol using nosymbols n copy clipboard instead displaying console using clip c course password removed laptop pas rm businesscheesewhizfactory rm remove regular file removed password store git repository since manipulation creates git commit synchronize password store using pas git push pas git pull call gitpush gitpull store read example feature man page setting begin single command initialize password store laptop pas init password storage key mkdir created directory password store initialized password storage key password storage key id gpg key use standard gpg key use alternative one especially password store shown multiple gpg key specified using pas team setting different folder different gpg key using p additionally initialize password store git repository laptop pas git init initialized empty git repository laptop pas git remote add origin kexeccom passstore git repository initialized pas creates git commit time password store manipulated detailed initialization example man page download latest version ubuntu debian sudo aptget install pas fedora rhel sudo yum install pas opensuse sudo zypper passwordstore gentoo emerge av pas arch pacman pas macintosh password store available homebrew package manager brew install pas freebsd portmaster sysutilspasswordstore tarball tarball contains generic makefile simple sudo make install trick git repository may browse git repository clone repo git clone http release tagged tag signed data organization usernames password pin website metadata et cetera password store impose particular schema type organization data simply flat text file contain arbitrary data though common case storing single password per entry power user find would like store password inside password store additionally store answer secret question website url sensitive information metadata since password store impose scheme choose organization many possibility one approach use multiline functionality pas multiline insert store password first line file additional information subsequent line example amazonbookreader might look like ywzsnh z url amazoncom username amazonianchicken examplecom secret question childhood best friend bizarre superhero fantasy oh god amazon awful say phone support pin preferred organzational scheme used author clip c option copy first line file clipboard thereby making easy fetch password login form retaining additional information file another approach use folder store piece data inside file folder example amazonbookreaderpassword would hold bookreader password inside amazonbookreader directory would hold secret question amazonbookreadersensitivecode would hold something else related bookreader account yet another approach might store password amazonbookreader additional data amazonbookreadermeta even another approach might use multiline outlined put url template filename instead inside file point possibility extremely numerous many organizational scheme mentioned freedom choosing one fit workflow best extension pas order faciliate large variety us user come pas support extension extension installed usrlibpasswordstoreextensions distrospecific variety always enabled extension installed passwordstoreextensionscommandbash enabled passwordstoreenableextensions environment variable true read man page detail community produced many extension compatible client community assembled impressive list client gui various platform migrating pas free password data clutch bloated password manager various user come different password store organization work best user contributed script help import password program credit license pas written jason donenfeld licensed contributing active project healthy dose contributor best way contribute password store join mailing list send git formatted patch may also join discussion pas freenode
784,Lobsters,vcs,Git & VCS,A Git Horror Story: Repository Integrity With Signed Commits,http://mikegerwitz.com/papers/git-horror-story,git horror story repository integrity signed commits,git horror story repository integrity signed commits trust distributed revision control system may used provide hub others work clone public key security vulnerability github exploited egor homakov commit master branch ruby rail framework keep secured repository personal computer inaccessible external mean talk presented google depends entire history leading commit ensuring trust git introduced ability gpgsign individual commits certificate origin managing large merges request user squash commits single commit adopt security policy requires signing merge commit option option sign commit introduced merge option option option option option option option option option option option option option prompted password single time option added bar amend commit commit amend satisfied change run rebase continue diff head commit amend need passphrase unlock secret key rsa key id created head added bar file changed insertion mode bar rebase continue rebased updated refsheadsbaraudit option enforcing trust option commit history nutshell need remember hash single commit hash collision vulnerability known faster brute force algorithm like hash never intended make git cryptographically secure automating signature check range spec trusted see mapping struct merge option signature check script disregarding trust commit history nutshell range spec signature check script web trust dependent personal setting unable check basic oneline output shown original script disregard trust previous script automating merge signature check option range spec trusted summary,git horror story repository integrity signed commits note article written end date update point please keep perspective house quiet kid bed significant long since fallen asleep couch waiting light tv flashing corner eye mind body exhausted satisfied progress night commit code hacking hour master fixed security vulnerability push change host others view comment progress critical release suspend pc struggle wake significant get himher bed turn light trip toy way bedroom sigh realize going make bottle child heard hisher favorite toy jingle fast forward four sleepdeprived hour woken sound phone vibrating incessantly smack time thinking alarm clock fumble halfblind try dig bed knock nightstand oops woke kid pick phone greeted frantic colleague merged change need tag get fix ah damnit wake significant asking himher deal cry child yeah went well stumble pc failing first attempt enter password rub eye pull change still squinting glance flood change presented child screaming background amused feeble attempt console himher git log look bunch commits colleague merged run test pass look like ready go git tag various bugfixes including critical git push tag struggling enter password private key slowly standing chair type run help baby damnit keep source code thing ci system handle rest fast forward two month long fixed successfully deployed however receive angry call colleague seems one prominent user massive security breach researching problem colleague found according history breach exploited back door created would never thing make matter worse signed using gpg affirmed tag good ready go scorn colleague make sense quickly check history git log patch missing docblocks x form puzzled expression raising hand keyboard slightly tapping space bar time expectation sure enough minor docblock change one inconspicuous line change added back door authentication system commit message fairly clear raise red would check furthermore author commit indeed thought race mind could happened commit name recall ever made change furthermore would never made line change simply make sense colleague frame committing system compromised host compromised local repository commit clearly part merge exist local repository pull morning two month ago regardless happened one thing horrifically clear right one blamed trust theorize possible may never fully understand resulted compromise repository story purely hypothetical entirely within realm possibility rest assured repository safe would reference clone also may download example tarballs created git distributed revision control system short mean anyone copy repository work offline private may commit repository user may pushpull central repository unnecessary distributed revision control system may used provide hub others work clone consequently also mean repository floating around project x may contain malicious code someone else hand repository project mean actually use question trust question trust trusting repository right even realize project including story number individual organization may inadvertently placed trust without fully considering ramification decision git host git hosting provider probably easily overlooked like gitorious github bitbucket sourceforge google code etc provides hosting repository allowing authorized user push often use ssh key tied account using host primary holder repository clone push entrusting entirety project stating trust source code safe tampered dangerous assumption trust host properly secures account information furthermore bug exist trivial piece software say vulnerability waiting exploited system completely compromising repository long ago march public key security vulnerability github exploited russian man named egor homakov allowing successfully commit master branch ruby rail framework repository hosted github oops friend coworkerscolleagues may certain group individual trust enough pull accept patch b allow push repository operating assumption individual truly trustworthy let u hope case immediately imply repository trusted security policy leave pc unlocked unattended make habit downloading virusladen pornography unsecured nonfree operating system perhaps fault running piece software vulnerable exploit given sure commits actually furthermore sure commits approve sign using git commit actually approved course assuming ill intent example pissed employee looking get arrogant obnoxious coworker fired committing nameemail manager project lead whose word would take would even know suspect repository linus torvalds original author git kernel linux keep secured repository personal computer inaccessible external mean ensure repository fully trust developer simply keep local copy whatever pc happen hacking pay mind repository likely hosted elsewhere well git distributed however serious matter likely use pc hacking notably likely use pc browse internet download software software buggy buggy software exploit exploit tend get well exploited every developer strong understanding best security practice operating system great using gnulinux nix variant make immune every potential threat dive bit deeply let u consider one largest free software kernel original creator linus torvalds handle issue trust talk presented google describes network trust created number others refers linus possibly manage mass amount code sent others handle portion kernel handle request submit linus handle merging branch trusted lieutenant know carefully looking patch patch linus receives actually aware patch communicated lieutenant linus certainly one way state fairly high level certainty patch coming one email patch signed respective gpgpgp key point web trust enforced signature linus sure private repository best secure aforementioned contains data personally trust repository safe far know use confidently point assuming web trust properly verified confidently convey trusted change others certainly know commits others know guy committing signing commits actually linus torvalds demonstrated hypothetical scenario beginning article anyone could claim linus attacker gain access clone repository commit linus nobody would know difference fortunately one get around signing tag hisher private key using gpg git tag tag point particular commit commit depends entire history leading commit mean signing hash commit assuming security vulnerability within forever state entire history given commit pointed given tag trusted well helpful help verify commits made tag next tag come around includes commit ancestor new tag necessarily guarantee integrity past state best knowledge tree trusted notice hypothetical hypothetical story also signed tag hisher private key unfortunately heshe fell prey something error heshe trusted hisher colleague could actually fully trusted nice could remove human error equation ensuring trust way ensure commit someone named email address actually commit much like assert tag signed private key actually tagged well trying prove proving identity project authormaintainer identify reasonable manner example work within internal network perhaps trust push internal ip secure sending via email sign patch using gpg key unfortunately extend level trust authormaintainer user clone repository look history know commit truly commit foo bar especially repository frequently accepts patch merge request many user previously tag could signed using gpg fortunately git introduced ability gpgsign individual feature long awaiting consider may happened story beginning article signed commits like notice flag instructing git sign commit using gpg key please note difference followed practice anyone else matter could say relative certainty commit indeed authored case story could defend stating backdoor commit truly would signed course one could argue simply sign commit order use excuse get addressing issue bit order set signing key first need get key id using gpg listsecretkeys interested hexadecimal value immediately following forward slash output output may vary drastically worry key contain multiple secret key select one wish use signing commits value assigned git configuration value usersigningkey given give commit signing shot create test repository work remainder article thing done differently commit unsigned commit addition flag indicating want gpgsign commit everything set properly prompted password secret key unless gpgagent running commit continue would expect resulting something similar output gpg detail hash differ default least git git log list validate signature order display signature commit may use showsignature option shown important distinction made commit author signature attached commit may represent two different people word commit signature similar concept option add signedoff line verifies signed commit necessarily imply authored demonstrate consider received patch wish apply policy repository every commit must signed trusted individual commits rejected project maintainer demonstrate without going hassle applying actual patch simply following raise done decide sign commit gpg key couple option first consider issue necessary care identity party contributor long provided code acceptable depends legal standpoint may every user gpg key given someone creating key sole purpose signing commits without mean identity verification discard key later forget exists little verify identity indeed whole concept behind pgp create web trust able verify person signed using key actually say scenario defeat purpose therefore adopting strict signing policy everyone contributes patch likely unsuccessful linux git satisfy legal requirement signedoffby line commit signifying author agrees certificate origin essentially state author legal right code contained within commit accepting patch party outside web trust begin next best thing adopt policy patch require author following request gpgsign commits receive patch apply capital lowercase gpgsign commit preserve signedoffby line well case pull request sign commit amending git commit amend note however hash commit change want preserve signature whomever sent pull request amend commit would alter commit invalidate signature dualsigning option git even support option instead may consider signing merge commit discussed following section managing large merges point discussion consisted apply patch merging single commits shall receive pull request certain feature bugfix say commits assure unusual case option request user squash commits single commit thereby avoiding problem entirely applying previously discussed method personally dislike option reason longer follow history featurebugfix order learn developed see alternative solution attempted later replaced render git bisect useless find bug software introduced single patch consisting squashed commits left dig code debug rather git possibly figure problem u adopt security policy requires signing merge commit forcing merge commit created noff needed certainly quickest solution allowing reviewer sign merge reviewed diff entirety however leaf individual commits open exploitation example one commit may introduce payload future commit remove thereby hiding overall diff introducing terrible effect commit checked individually egâ git bisect squashing commits option signing commit individually option simply reviewing commit individually performing merge without signing individual commit would prevent problem also fully prevent situation mentioned hypothetical story beginning still commit author commit would signed preserve hash individual commit sign commit introduced merge tedium chore greatly reduced using http gpgagent sure carefully review commit rather entire diff ensure malicious commits sneak history see bullet option instead decide script sign commit without reviewing individual diff may well go option also useful one need cherrypick individual commits since would result commits signed one may argue option unnecessarily redundant considering one simply review individual commits without signing simply sign merge commit signify commits reviewed option important point note option offer proof commit reviewed unless automated create new hash preserved three option choose depends factor important feasible particular project specifically history important avoid lot trouble simply requiring commits squashed option history important time review individual commits use option understand risk otherwise use option automate signing process avoid look individual commits wish keep history responsibly option list easily applied discussion previous section option option simple passing argument git merge merge fastforward commits simply applied atop head without need merging would need use noff option force merge commit inspecting log see following notice merge commit contains signature two commits involved merge herein lie commit contained backdoor mentioned story beginning article commit supposedly authored lack signature could actually authored anyone furthermore contained malicious code removed would show diff two branch however issue need addressed security policy reviewing individual commits review would catch potential problem commits require signing commit individually merge could representative reviewed commit individually see problem commitment reviewing individual commit large consider option option option list make review commit explicit obvious option one could simply lazily glance commits glance said one could option automating signing commit could argued option completely unnecessary use best judgment way make option remotely feasible especially large number commits perform audit way reenter secret key passphrases every commit use gpgagent safely store passphrase memory next time requested using gpgagent prompted password single time depending start gpgagent sure kill done process signing commit done variety way ultimately since signing commit result entirely new commit method choose little importance example desired could cherrypick individual commits amend would recognized merge would terribly confusing looking history given branch unless merge would fastforward therefore settle method still produce merge commit unless fastforward one way interactively rebase commit allowing easily view diff sign continue onto next commit first create new branch perform rebase see bar branch created demonstration option order step commit would merged master perform rebase using master upstream branch present every commit baraudit consequently bar master opening preferred editor e added bar e modified bar rebase onto command p pick use commit r reword use commit edit commit message e edit use commit stop amending squash use commit meld previous commit f fixup like squash discard commit log message x exec run command rest line using shell remove line commit lost however remove everything rebase aborted modify commits replace pick e edit shown vim also following ex command spicke adjust regex flavor editor save close presented first oldest commit stopped added bar amend commit git commit amend satisfied change run git rebase continue first review diff alternatively use tiggitk git diff head everything look good sign git commit amend gpgsign amend commit preserving author etc need passphrase unlock secret key user mike gerwitz free software developer mike mikegerwitzcom rsa key id created detached head added bar file changed insertion create mode bar continue next commit git rebase continue repeat successfully rebased updated refsheadsbaraudit looking log see commits rewritten include signature consequently hash match continue merge master normally would next consideration whether sign merge commit would option case example merge fastforward merge commit unnecessary since commits merged already signed need create merge commit using noff purely purpose signing however consider may perform audit leave actual merge process someone else perhaps project system place project maintainer must review code sign developer responsible merging managing conflict case may want clear record merged change enforcing trust determined security policy appropriate particular projectrepository well hypothetically least way needed enforce signing policy manual enforcement possible subject human error peer scrutiny let unnecessarily timeconsuming fortunately one thing script sit back enjoy let u first focus simpler automation ensure every commit signed trusted within web trust implementation would also satisfy option regard merging well perhaps every commit considered chance existing repository decent number commits go back sign commits would completely alter history entire repository potentially creating headache user instead may consider beginning check certain commit commit history nutshell hash commit git created using delta header information commit header information includes parent whose header contains forth addition git depends entire history repository leading given commit construct requested revision consequently mean history altered without someone noticing well entirely true discus moment example consider following branch preattack b h h represents current head commit identified parent commit b sake discussion say commit identified fragment let u say attacker decides replace commit another commit hash commit must change match new delta content header new commit identified x postattack x b h expects parent problem git encounter commit b remember git must build h using entire history leading check hash notice longer match hash parent attacker unable change expected hash commit b header used generate hash commit meaning b would different hash technically speaking would longer would entirely different commit retain identifier demonstration purpose would invalidate child b forth therefore order rewrite history single commit entire history commit must also rewritten done git rebase done hash h would also need change otherwise history would invalid git would immediately throw error upon attempting checkout important commit rest assured exists repository git always reconstruct commit exactly created including history leading commit created indeed linus mention presentation google need remember hash single commit rest assured given repository event loss commit represent exactly commit repository mean u importantly mean rewrite history sign commit history next signed commit guaranteed downside course history could already exploited manner similar initial story automated masssigning past commits given author catch thing anyway said important understand integrity repository guaranteed hash collision attacker able create hash different data child commit would still valid repository would successfully compromised vulnerability known since allow hash computed faster brute force although cheap exploit given repository may safe come point future considered crippled today point time however maybe git offer secure migration solution algorithm like better indeed hash never intended make git cryptographically secure given average person likely fine leaving hisher history way operate assumption implementation offering ability ignore commits prior certain commit one wish validate commits reference commit simply omitted automating signature check idea behind verifying certain commits trusted fairly simple given reference commitâ r optionally empty let câ set commits câ â r head range spec let kâ set public key given gpg keyring must assert commitâ c inâ c must exist keyâ k keyringâ k k trusted used verify signature ofâ c assertion denoted function gâ gpg following expression c fortunately already seen previous section showsignature option git log git handle signature verification u reduces implementation simple shell script however output dealing convenient parse would nice could get commit signature information single line per commit accomplished pretty additional time writing git gpg pretty option undocumented quick look formatcommitone prettyc yield g placeholder three different format output see git log showsignature g good signature bad signature otherwise empty string see mapping signaturecheck struct name signer interested using concise minimal representation g placeholder simply match text gpg output string gpg ca nt check signature public key found mapped signaturecheck unknown signature output empty string explicit behavior unsure change future release fortunately interested detail matter implementation mind come useful oneline output per commit based output resulting demonstration merge option notice suffix line indicating signature valid make sense since signature adding additional commit see happens commit unsigned note aforementioned string replacement g empty commit unsigned however commits signed untrusted within web trust gpg editkey gpg trust please decide far trust user correctly verify user key looking passport checking fingerprint different source etc nt know wo nt say trust trust marginally trust fully trust ultimately back main menu decision gpg save key changed update needed git log pretty format h g headâ mike gerwitz yet another foo mike gerwitz modified bar g uh oh seems git seem check whether signature trusted take look full gpg output see gpg provides clear warning unfortunately parsesignaturelines prettyc reference simple mapping struct signaturecheck blissfully ignore warning match good signature yielding patch provide separate token untrusted key simple time explore two separate parse simple oneline output ignorant trust mention le elegant implementation par gpg output signature check script disregarding trust mentioned due limitation current g implementation determine singleline output whether given signature actually trusted necessarily problem consider likely common use case run continuous integration ci system order let ci system know signature trusted likely provide set key known committers eliminates need web trust act placing public key server indicates trust key therefore signature recognized good commit trusted one additional consideration need ignore ancestor given commit necessary older repository older commits signed see commit history nutshell information unnecessary probably bad idea sign old commits script accept ref consider child check script assumes commit signed output hash unsignedbad commit addition additional useful information delimited tab git work u ref provided converted range spec appending egâ becomes cause git log return child including ref ref provided end using head without range spec simply list every commit using empty string cause git throw error must quote string case user decides something like master day ago using pretty option git log output gpg signature result g addition useful information want see commits pas test filter commits signed known key removing line end output g indicating good signature see action assuming script saved signchk argument script check every commit repository finding single commit signed point either check output check exit status script indicates failure script run ci system best option would abort build immediately notify maintainer potential security breach likely someone simply forgot sign commit check commits failure assuming child signed see following careful running script directly repository especially ci must either place copy script outside repository run script trusted point history example ci system simply pull repository run script attacker need modify script circumvent check entirely signature check script web trust web trust would come handy large group contributor case ci system could attempt download public key preconfigured keyserver key encountered updating key necessary get trust signature based web trust established public key directly trusted ci system could automatically determine whether commit trusted even key explicitly placed server accomplish task split script two distinct key within given range followed actual signature verification start key gathering portion actually trivial task string command simply us grep pull key id git log output using showsignature produce gpg output request unique key given keyserver case repository using throughout article single larger repository unique key listed note example specify range commits free integrate signchk script use range strictly necessary may provide slight performance benefit depending number commits would ignored armed updated key verify commits based web trust whether specific key trusted dependent personal setting idea trust set user egâ turn trust user depending configuration may automatically within web trust even personally trust concept applied ci server placing keyring place perhaps omit ci server run script unfortunately current g implementation unable check basic oneline output instead must parse output showsignature shown relevant commit combining output original script disregard trust arrive following output must parse snippet noted first commit signed whereas second therefore gpg output preceeds commit line consider objective list unsigned commits commits unknown invalid signature list signed commits signed known signature otherwise untrusted previous script performs fine need augment support wish convert line ending something else gpg output preceeding line indicates signature untrusted many way go settle fairly clear set command used augment previous script prevent line ending filtered output untrusted suffix untrusted line consider output following find filter line ending would left untrusted commits addition commits bad unsigned blank indicated g accomplish first add gpg output log showsignature option make filtering easier prefix commit line caret later strip filter line beginning caret line contain string part gpg output result line commits single gpg line untrusted pipe awk remove gpg prefixed line append u next line commit line finally strip leading caret added beginning process produce final output please keep mind huge difference conventional use trust pgpgpg assert know person claim v trusting someone commit repository may best interest maintain entirely separate web trust ci server whatever user used perform signature check automating merge signature check aforementioned script excellent wish check validity individual commit everyone wish put forth amount effort instead maintainer may opt workflow requires signing merge commit option rather commit introduced merge let u consider appropach would take implementation given reference commitâ r optionally empty let set firstparent commits â r head range spec let k set public key given gpg keyring must assert commitâ c inâ c must exist keyâ k keyringâ k k trusted used verify signature ofâ c assertion denoted function gâ gpg following expression c difference script script check signature individual commit script check commits particular branch egâ master commit directly onto master want ensure commit signed since merge merge master merge commit created may sign ignore commits introduced merge merge fastforward merge commit forcefully created noff option avoid need amend commit signature demonstrate script valdiate commits type workflow first create change would result merge committed master new diverge branch order ensure merge would fastforward alternatively could used noff option git merge result following hash vary git log oneline graph merge branch diverge added additional content diverged added content diverged added data master yet another foo modified bar added bar signed added feature x test commit foo graph see interested signature two commits created directly master merge commit two commits need signed signing merge commit asserts validity assuming author merge vigilant ignore commits git log oneline graph firstparent merge branch diverge added data master yet another foo modified bar added bar signed added feature x test commit foo example simply added firstparent option git log display first parent commit encountering merge commit importantly mean left commits master whatever branch decide reference commits wish validate performing validation therefore slight modification original script run script using branch setup provided find neither commits made diverge branch listed output since merge commit signed also omitted output leaving u unsigned commit mentioned previous section demonstrate happen merge commit signed amend follows omitting option merge commit listed requiring valid signature summary
785,Lobsters,vcs,Git & VCS,Octotree: Browser extension to display GitHub code in tree format,https://github.com/buunguyen/octotree/,octotree browser extension display github code tree format,join github today sign file permalink topic resource reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time github steroid topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
786,Lobsters,vcs,Git & VCS,Why and how we put our terms of service on github.,http://blog.vrypan.net/2014/05/05/terms-of-service-on-github/,put term service github,longaccess detailed post github repository uploaded old term new one short howto document formatting word doc markdown uploading github release link feedback hackernews lobster,nice say customercentric customerfirst etc really matter much willing put paper term service actual contract client keynote presentation post facebook twitter user always felt way company treat term service show much care user example hate presented five thousand word document inside small scrolling frame changed term service please read agree new one checkbox updated various part longaccess term first time wanted right right mean explaining exactly changed changed giving user way easily track exactly term changed addition detailed post explaining changed rational behind change affect user also created github repository uploaded old term new one make easy anyone track exact change future short howto uploading term github looked around found close nothing mean use git format text idea group change integrate kind publishing rest workflow decided write help others hopefully get feedback help u improve process future document formatting decided go character wide markdown file keeping line short make change stand one line text per paragraph single punctuation mark make line ie whole paragraph case show modified diffs could gone plain text turn github render much nicer file indicated markdown file use little markdown markup text link decided make little sense track formatting change avoided adding bold heading etc bonus make easier designer copy source text paste editor add required html tag word doc markdown ok lawyer used working microsoft word nt expect change plain text editor git new term following copy term word paste plain text editor use sublime text plain text editor save text file text file one line per paragraph break character wide line add extra blank line end paragraph many way decided go simple online command o x terminal know people feel comfortable work cat atxt sed n fold w sed e amd uploading github editing formatting term handy use git diff get idea change appear end user markdown file ready committed change git pushed github decided create release major change anything change relationship user small change like typo minor reformatting committed github tagged separate release user easily see exactly changed release example link show change january may release note self included link related blogpost feedback work progress tried something similar really interested thought email tweet even better leave comment hackernews lobster
787,Lobsters,vcs,Git & VCS,gogs - a Self Hosted Git Service in the Go Programming Language,https://github.com/gogits/gogs,gogs self hosted git service go programming language,gogs painless selfhosted git service 简体中文 vision platform overview feature tidb language hardware requirement caas browser support semantic ui installation prerequisite deploy cloud tutorial software service product support acknowledgment contributor license license,gogs painless selfhosted git service 简体中文 vision gogs gɑgz project aim build simple stable extensible selfhosted git service setup painless way go done independent binary distribution across platform go support including linux macos window arm overview feature user dashboard user profile activity timeline access repository via ssh http http protocol user organization repository management repository organization webhooks including slack discord dingtalk repository git hook deploy key git lf repository issue pull request wiki protected branch collaboration migrate mirror repository wiki code host web editor quick editing repository file wiki jupyter notebook pdf rendering authentication via smtp ldap reverse proxy githubcom github enterprise customize html template static file many others rich database backend including postgresql mysql tidb localization language hardware requirement raspberry pi digital ocean droplet enough get started even use ram docker caas cpu core ram would baseline teamwork increase cpu core team size get significantly larger memory footprint remains low browser support please see semantic ui specific version supported browser smallest resolution officially supported however ui may still look right smaller resolution promise fix installation make sure install prerequisite first way install gogs deploy cloud tutorial software service product support acknowledgment contributor license project mit license see license file full license text
788,Lobsters,vcs,Git & VCS,git/github cheat sheet,https://github.com/tiimgreen/github-cheat-sheet,gitgithub cheat sheet,github cheat sheet zach holman git github secret slide git github secret slide english 한국어 日本語 简体中文 正體中文 table content github ignore whitespace adjust tab space chrome extension commit history author cloning repository branch compare branch another branch branch comparing branch compare branch across forked repository gist gist like gitio gitio keyboard shortcut looking file read search syntax use line highlighting repository closing issue via commit message crosslink issue locking conversation ci status pull request travis ci get started travis ci filter http githubcomrailsrailsissues syntax highlighting markdown file linguist language yaml file emojis emojicheatsheetcom scotchioallgithubemojiicons emojimuanco imagesgifs embedding image github wiki quick quoting pasting clipboard image comment quick licensing task list task list markdown document readonly relative link metadata plugin support github page emoji mention viewing yaml metadata document jekyll github page rendering tabular data rendering pdf revert pull request revert diffs rendered prose diffs diffable map expanding context diffs diff patch pull request rendering diffing image hub hub contribution guideline contributing file issuetemplate file issue template file generator pullrequesttemplate file pull request template file generator octicons github student developer pack github resource github talk ssh key http githubcomtiimgreenkeys repository template git remove deleted file working tree previous branch stripspace checking pull request empty commits styled git status styled git log palesz git query git grep merged branch fixup autosquash web server browsing local repository git configuration alias mathiasbynens http githubcommathiasbynensdotfilesblobmastergitconfig autocorrect color git resource git book git video git article,github cheat sheet collection cool hidden hidden feature git github cheat sheet inspired zach holman git github secret talk aloha ruby conference slide git github secret talk wdcnz slide shortlink http gitiosheet read language english 한국어 日本語 简体中文 正體中文 table content github ignore whitespace adding diff url remove change whitespace enabling see code changed read github secret adjust tab space adding diff file url display tab character space wide instead default number t adjusted suit preference work gist raw file view chrome extension automate go source file adding adding commit history author view commits repo author add author user url http githubcomrailsrailscommitsmaster authordhh read difference commits view cloning repository cloning repository git left end git clone http githubcomtiimgreengithubcheatsheet read git clone command branch compare branch another branch go repo branch page next commits button http githubcom user repo branch would see list branch merged main branch access compare page delete branch click button comparing branch use github compare branch change url look like http githubcom user repo compare range range master example http githubcomrailsrailscomparemaster range changed thing like http githubcomrailsrailscomparemaster master http githubcomrailsrailscomparemaster master date format yyyymmdd branch also compared diff patch view http githubcomrailsrailscomparemaster http githubcomrailsrailscomparemaster read comparing commits across time compare branch across forked repository use github compare branch across forked repository change url look like http githubcom user repo compare foreignuser branch ownbranch example http githubcomrailsrailscomparebyroot master master gist gist easy way work small bit code without creating fully fledged repository add pibb end gist url like order get htmlonly version suitable embedding site gist treated repository cloned like git clone http mean also modify push update gist git commit git push username http gistgithubcom password http tiimgreen gistgithubcom however gist support directory file need added repository root read creating gist gitio gitio simple url shortener github also use via pure http using curl curl http gitio f urlhttps githubcom created location http curl http found location http githubcom read gitio keyboard shortcut repository page keyboard shortcut allow navigate easily pressing bring file explorer pressing w bring branch selector pressing focus search field current repository pressing backspace delete repository pill change field search github pressing l edit label existing issue pressing looking file eg http githubcomtiimgreengithubcheatsheetblobmasterreadmemd change url one effect freeze page looking code change still able see saw current time see shortcut current page press read search syntax use line highlighting repository either adding eg end code file url simply clicking line number highlight line number also work range eg select range hold shift click two line http githubcomrailsrailsblobmasteractivemodellibactivemodelrb closing issue via commit message particular commit fix issue keywords fixfixesfixed closeclosesclosed resolveresolvesresolved followed issue number close issue committed repository default branch git commit fix screwup fix close issue reference closing commit read closing issue via commit message crosslink issue want link another issue repository simply type hash issue number autolinked link issue another repository user repo issuenumber eg tiimgreentoc locking conversation pull request issue locked owner collaborator repo mean user collaborator project longer able comment read locking conversation ci status pull request set correctly every time receive pull request travis ci build pull request like would every time make new commit read get started travis ci read commit status api filter issue pull request allow filtering user interface rail repo http githubcomrailsrailsissues following filter built selecting label activerecord issue label activerecord also find issue labeled activerecord issue label activerecord additionally also work pull request pr label activerecord github tab displaying open closed issue pull request also see merged pull request put following filter merged read searching issue finally github allows filter status api status pull request successful status status success read searching status api syntax highlighting markdown file example syntax highlight ruby code markdown file write ruby require tabbit table tabbitnew name email tableaddrow tim green tiimgreen gmailcom put tabletos produce require tabbit table tabbitnew name email tableaddrow tim green tiimgreen gmailcom put tabletos github us linguist perform language detection syntax highlighting find keywords valid perusing language yaml file read github flavored markdown emojis emojis added pull request issue commit message repository description etc using nameofemoji full list supported emojis github found emojicheatsheetcom scotchioallgithubemojiicons handy emoji search engine found emojimuanco top used emojis github shipit sparkle clap imagesgifs image gifs added comment readmes etc alt text http raw image repo used calling directly alt text http githubcom user repo rawmasterpathtoimagegif image cached github host go image remain available embedding image github wiki multiple way embedding image wiki page standard markdown syntax shown also syntax allows thing like specifying height width image http height produce quick quoting comment thread want quote something someone previously said highlight text press r copy text box blockquote format read quick quoting pasting clipboard image comment work chrome browser taking screenshot adding clipboard mac simply paste cmdv ctrlv image comment section autouploaded github read issue attachment quick licensing creating repository github give option adding premade license also add existing repository creating new file web interface name license typed get option use template also work gitignore read open source licensing task list issue pull request check box added following syntax notice space awesome prepare dinner research recipe buy ingredient cook recipe sleep clicked updated pure markdown x awesome prepare dinner x research recipe x buy ingredient cook recipe sleep read task list task list markdown document full markdown document readonly checklist added using following syntax mercury x venus x earth x moon x mar deimos phobos read task list markdown document relative link relative link recommended markdown file linking internal content link header awesomesection link file docsreadme absolute link updated whenever url change eg repository renamed username changed project forked using relative link make documentation easily stand read relative link metadata plugin support github page within jekyll page post repository information available within sitegithub namespace displayed example using sitegithubprojecttitle jemoji jekyllmentions plugins enable emoji mention jekyll post page work like expect interacting repository githubcom read repository metadata plugin support github page viewing yaml metadata document many blogging website like jekyll github page depend yamlformatted metadata beginning post github render metadata horizontal table easier reading read viewing yaml metadata document rendering tabular data github support rendering tabular data form csv commaseparated tsv tabseparated file read rendering tabular data rendering pdf github support rendering pdf read rendering pdf revert pull request pull request merged may find help anything bad decision merge pull request revert clicking revert button right side commit pull request page create pull request reverted change specific pull request read reverting pull request diffs rendered prose diffs commits pull request including rendered document supported github eg markdown feature source rendered view click rendered button see change appear rendered document rendered prose view handy adding removing editing text read rendered prose diffs diffable map time view commit pull request github includes geodata github render visual representation changed read diffable map expanding context diffs using unfold button gutter diff reveal additional line context click keep clicking unfold revealed whole file feature available anywhere github render diffs read expanding context diffs diff patch pull request get diff pull request adding diff patch extension end url example http http http diff extension would give plain text diff git areadmemd breadmemd index areadmemd breadmemd hidden hidden feature git github cheat sheet merged branch mergedbranches quick licensing quicklicensing todo list todolists relative link relativelinks gitconfig recommendation gitconfigrecommendations alias alias autocorrect autocorrect clicked updated pure markdown sleep rendering diffing image github display several common image format including png jpg gif psd addition several way compare difference version image format read rendering diffing image hub hub command line git wrapper give extra feature command make working github easier allows thing like hub clone tiimgreentoc check cool command hub offer contribution guideline github support adding different file help user contribute project file either placed root repository github directory root contributing file adding contributing contributingmd file either root repository github directory add link file contributor creates issue open pull request read contributing guideline issuetemplate file define template new issue opened project content file prepopulate new issue box user create new issue add issuetemplate issuetemplatemd file either root repository github directory read issue template issue template file generator pullrequesttemplate file define template new pull request opened project content file prepopulate text area user create pull request add pullrequesttemplate pullrequesttemplatemd file either root repository github directory read pull request template pull request template file generator octicons githubs icon octicons open sourced read github octicons github student developer pack student eligible github student developer pack give free credit free trial early access software help developing read github student developer pack github resource github talk ssh key get list public ssh key plain text format visiting http githubcom user key eg http githubcomtiimgreenkeys read accessing public ssh key repository template enable templating repository allows anyone copy directory structure file allowing instantly use file eg tutorial writing boilerplate code enabled setting repository changing template repository give new url endpoint shared instantly allows user use repository template alternatively go repository click use template button read using repository template git remove deleted file working tree delete lot file using binrm use following command remove working tree index eliminating need remove one individually git rm git lsfiles example git status branch master change staged commit deleted deleted c git rm git lsfiles rm rm c git status branch master change committed deleted deleted c previous branch move previous branch git git checkout switched branch master git checkout switched branch next git checkout switched branch master read git branching stripspace git stripspace strip trailing whitespace collapse newlines add newline end file file must passed calling command eg git stripspace readmemd read git stripspace command checking pull request pull request special branch github repository retrieved locally several way retrieve specific pull request store temporarily fetchhead quickly diffing mergeing git fetch origin refspull prnumber head acquire pull request branch local remote branch refspec git fetch origin refspull head refsremotesoriginpr setup remote fetch pull request automatically adding corresponding line repository gitconfig remote origin fetch refsheads refsremotesorigin url git githubcom tiimgreengithubcheatsheetgit remote origin fetch refsheads refsremotesorigin url git githubcom tiimgreengithubcheatsheetgit fetch refspull head refsremotesoriginpr forkbased pull request contribution useful checkout remote branch representing pull request create local branch git checkout work repository globally configure fetching pull request global git config instead git config global add remoteoriginfetch refspull head refsremotesoriginpr way use following short command repository read checking pull request locally empty commits commits pushed code change adding allowempty git commit bigass commit allowempty usecases make sense include annotating start new bulk work new feature documenting make change project nt code related communicating people using repository first commit repository git commit initial commit allowempty styled git status running produce adding sb produced read git status command styled git log running git log graph prettyformat cred h creset c auto creset cgreen cr c bold blue creset abbrevcommit daterelative produce credit palesz aliased using instruction found read git log command git query git query allows search previous commit message find recent one matching query query casesensitive term want search find last one give detail line changed press q quit git grep git grep return list line matching pattern running show file containing string alias press q quit also use multiple flag advanced search example e next parameter pattern eg regex combine multiple pattern use like git grep e pattern e anotherpattern read git grep command merged branch running give list branch merged current branch conversely give list branch merged current branch read git branch command fixup autosquash something wrong previous commit one head example abcde run following command amended problem git commit fixupabcde git rebase abcde autosquash read git commit command read git rebase command web server browsing local repository use git instaweb command instantly browse working repository gitweb command simple script set gitweb web server browsing local repository open read git instaweb command git configuration gitconfig file contains git configuration alias alias helper let define git call example could set git run git add add alias either navigate gitconfig fill following format alias co checkout cm commit p push show verbose output tag branch remote tag tag l branch branch remote remote v type commandline git config global aliasnewalias gitfunction example git config global aliascm commit alias multiple function use quote git config global aliasac add commit useful alias include alias command type git cm git commit git config global aliascm commit git co git checkout git config global aliasco checkout git ac git add git commit git config global aliasac git add git commit git st git status sb git config global aliasst status sb git tag git tag l git config global aliastags tag l git branch git branch git config global aliasbranches branch git cleanup git branch merged grep v xargs git branch git config global aliascleanup git branch merged grep v xargs git branch git remote git remote v git config global aliasremotes remote v git lg git log color graph prettyformat cred h creset c yellow creset cgreen cr c bold blue creset abbrevcommit git config global aliaslg log color graph prettyformat cred h creset c yellow creset cgreen cr c bold blue creset abbrevcommit alias taken mathiasbynens dotfiles http githubcommathiasbynensdotfilesblobmastergitconfig autocorrect git give suggestion misspelled command autocorrect enabled command fixed executed automatically autocorrect enabled specifying integer delay tenth second git run corrected command zero default value correcting take place negative value run corrected command delay example type git comit get git comit message git comit git command see git help mean commit autocorrect enabled like second delay git config global helpautocorrect command git comit autocorrected git commit like git comit message warning called git command named comit exist continuing assumption meant commit second automatically delay git rerun command user time abort color add color git output git config global colorui read git config command git resource git book git video git article
790,Lobsters,vcs,Git & VCS,GitBook: Build beautiful programming books and exercises using GitHub/Git and Markdown.,http://www.gitbook.io/,gitbook build beautiful programming book exercise using githubgit markdown,insight github sync fast search branding,beautiful doc apis product faq user guide insightstrack traffic rating content qualitygithub synckeep workflow sync doc githubfast searchfind exactly looking secondsbrandingcustom domain custom branding logo color header
792,Lobsters,vcs,Git & VCS,Ploy: git push branches to host them on subdomains,https://github.com/substack/ploy,ploy git push branch host subdomains,ploy bouncy cicada example dnsmasq detail usage script start browserify stop test service seaport preinstall environment method var server ploy opts bouncy cicada bouncy serverlisten opts port host bouncy serveradd name rec serverremove name serverrestart name servermove src dst servergetworking cb serverclean cb serverredeploy name cb event serveron spawn function p info serveron output function name stream running nonroot install npm license,ploy git push http router host branch subdomains think bouncy cicada example create auth file start ploy server echo beep boop authjson sudo ploy server data p authjson git repo serverjs andor scriptsstart packagejson serverjs host http server processenvport git remote add ploy http beep boop localhostployservergit git push ploy master serverjs running http localhost push master second new master code running http localhost launch staging instance subdomain push nonmaster branch git push ploy master staging go http staginglocalhost see staging instance edit etchosts set dns wildcards dnsmasq test locally use ploy l list running branch ploy l master detail ploy detach server process ploy server go take process started however ploy server started back attempt restart process previously running git push code ploy server server started previous server running branch name killed usage usage ploy server directory port ploy server directory p port authfile f bouncer create ploy http server hosting repository directory listening port incoming connection authfile given json file map usernames token string use basic auth protection ploy action type ploy help ssl show ssl option specify bouncer module f use custom http router ploy l r remote verbose v formatformat list running process branch name remote verbose formatting use branch hash repo port ploy work r remote formatformat list working directory checked git commits default format repo commit time branch active branch shown trailing ploy clean remove unused working directory directory listed ploy work without ploy log name n row f b begin e end show row log output branch name like tail default n value screen height stream live update f set like tail f slice log record name directly b e ploy log n row f b begin e end colortrue show row log output branch line prefaced colored branch name stdout tty ploy mv src dst r remote move branch name src dst branch name remote ploy rm name r remote remove branch name name killing running process ploy restart name r remote restart process name ploy stop name r remote stop process name ploy redeploy name r remote redeploy process name rerunning install test script ploy help topic show message optionally topic topic ssl option ploy l ploy mv ploy rm command take remote parameter remote git remote name remote url ploy server exactly one ploy remote set git remote used default script start ploy look packagejson scriptsstart field start process service started npm install run deployed repo npm handle preinstall install postinstall hook postinstall good place put bundle step like browserify scriptsstart string ploy set port single process host accordinly scriptsstart object key map subdomains command launch server instance script start beep node beepjs boop node boopjs index node serverjs host beepjs beepdomain boopjs boopdomain serverjs domain push nonmaster branch domain prefaced accordingly mount host beepstagingdomain etc key full url beepboopcom subdomain use special key index set host resolve root subdomain service start command immediately restarted crash stop also scriptsstop pid environment variable defined start script defined script start sudo node serverjs stop sudo kill pid scriptsstop key work scriptsstart key script start x node xjs node yjs stop x node killjs x node killjs test specify scriptstest run test fails code push deployed old branch continue run rather replaced service might want manage nonhttp service ploy preface service nt want show http routing table like script start web node webjs notweb node notwebjs underscored nonhttp service given port listen need figure want multiple service running box work consider registering nonhttp service seaport preinstall one handy trick make deploys much faster resilient npm outage include scriptspreinstall copy nodemodules directory previous build avoids ton extra network traffic costly recompilation example scriptspreinstall dependency level script start node serverjs preinstall cp r prevnodemodules exit environment script environment variable defined commit git hash current deploy branch commit branch name example master repo repo name example repogit prev last previous working directory prevcommit git hash previous deploy prevbranch commit branch name previous deploy current repo additionally path prepended nodemodulesbin bin script installed npm available install script method var ploy require ploy var server ploy opts create new ploy instance splitting opts underlying bouncy cicada instance optsrepodir directory put git repo data optsworkdir directory check git repos optslogdir directory store process stderr stdout branch file optsauth optional object mapping usernames password token string basic auth optsbouncer optional http router function optsbouncer req re bounce called incoming request bounce function bouncy defer back ploy call bounce argument opts string used basedir optsrepodir optsworkdir rest option looked bouncy thing like set http server whatever serverlisten opts port host call listen underlying http http server passing opts object directly bouncy host ploy ssl set optskey optsca optscert set optspfx serveradd name rec add service branch name rec recport port http server life rechash commit hash string recprocess process object call kill serverremove name remove process branch name killing necessary serverrestart name restart process branch name servermove src dst move process branch name src dst killing branch process src running servergetworking cb gather array working directory cb err working w item working array wcommit commit hash checked working directory wtime unix timestamp commit sent wbranch branch name deployed wpid process id undefined inactive wdir working directory wactive whether process active serverclean cb remove inactive working directory serverredeploy name cb rerun deploy script name current commit hash event serveron spawn function p info process created npm install one packagejson start script event fire infocommit infocommand executed infoenv environment object serveron output function name stream new output stream branch event fire readable stream output stream merge output process used start branch running nonroot linux easily setup port forwarding iptables avoid running ploy port requires root privilege need least new iptables rule set first rule redirect incoming traffic port port iptables prerouting nat p tcp dport j redirect toport second rule redirect localhost traffic port port iptables nat output p tcp dport j redirect toports might also need third rule push ploy localhost use hostname instead localhost ploy remote url iptables nat output p tcp testlingcom dport j redirect toports install npm npm install g ploy get ploy command npm install ploy get library license mit
794,Lobsters,vcs,Git & VCS,Git 2.0 Release Notes,https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/2.0.0.txt,git release note,,git release note backward compatibility note git push say push used traditional matching semantics far branch sent remote long already branch name git default simple semantics push current branch branch name current branch set integrate remote branch pushing remote fetch current branch branch name pushing remote usually fetch use configuration variable pushdefault change oldtimer want keep using matching semantics set variable matching example read documentation possibility git add u git add run inside subdirectory without specifying path add command line operate entire tree consistency git commit command command used operate current subdirectory say git add u git add want limit operation current directory git add path git add path git add dir notice path removed directory record removal older version git git add path used ignore removal say git add ignoreremoval path add added modified path path really want q option git difffiles mean quiet removed told git ignore deletion git difffiles difffilterd git requestpull lost heuristic often led mistake default prefix git svn changed git long time git svn created remotetracking branch directly refsremotes place refsremotesorigin unless told otherwise prefix option update since series ui workflow feature multimail postreceive hook contrib updated recent version upstream remotehgbzr remotehelper interface used contrib maintained separately thirdparty plugins repository git gc aggressive learned depth option gcaggressivedepth configuration variable allow use le insane depth builtin default value git log learned showlinearbreak option show single strandofpearls broken output revparse parseopt mechanism used scripted porcelain parse commandline option give help text learned take argvhelp placeholder string option parameter eg keyid gpgsign keyid pattern find function begin cc used diff grep p updated improve viewing c source git rebase learned interpret lone branch previously git commit cleanup mode learned new mode scissors git tag list output sorted using version sort sortversion refname discard accumulated heuristic guess branch result want pulled make sure end user specified secondguessed git requestpull avoid mistake pushed master branch public repository forlinus use new master forlinus syntax denote branch pulled git grep learned behave way similar native grep h header c count option given git push via transporthelper interface updated allow forced ref update way similar natively supported transport simple mode default git push git add u git add run without pathspec treewide operation even run inside subdirectory working tree git add path git add path corestatinfo configuration variable neveradvertised synonym corecheckstat removed q option git difffiles mean quiet removed told git ignore deletion git difffiles difffilterd server operator loosen tip ref restriction remote archive service uploadarchiveallowunreachable configuration option progress indicator various timeconsuming command marked git note c blob diagnosis error attempt use object blob git config learned read standard input given value file parameter attempting operation update configuration standard input rejected course trailing whitespaces gitignore file unless quoted fnmatch eg path warned ignored strictly speaking backwardincompatible change unlikely bite sane user adjusting obvious easy many command create commits eg pull rebase learned take gpgsign option command line git commit told always gpg sign resulting commit setting commitgpgsign configuration variable true commandline option nogpgsign override git pull told accept fastforward setting new pullff configuration variable git reset learned n option reset index fully path index know treeish command reset path kept intendtoadd entry performance internal implementation etc compilation option port aix msvc updated started using wildmatch place fnmatch release ago complete process stop using fnmatch us curl multi interface easy interface mix well attempt reuse outgoing connection teach rpc http code used smart http transport use easy interface bitmapindex feature jgit ported significantly improve performance serving object repository us way git log cc show combined diff multiple parent optimized prefixcmp suffixcmp function gone use startswith endswith also consider skipprefix suit need better using former also contains various documentation update code cleanup many came flurry activity gsoc candidate microproject exercise fix since series unless otherwise noted fix since maintenance track contained release see maintenance release note detail git broken release deal change binary file merge later maint shell prompt script contrib using promptcommand interface used unsafe construct showing branch name merge rhpromptpcmodeavoidevalonrefname later maint git rebase used posix shell construct freebsd binsh work well merge kmavoidnonfunctionreturninrebase later maint zsh prompt contrib leaked unnecessary error message bash completion contrib complete ref remote correctly given git pu tab pu aliased push unicode code point defined unicode zero width taught display column counting logic merge later maint test used shell construct work well freebsd merge kmavoidbsinshellglob later maint merge kmavoidcpa later maint git updateref stdin fail request create ref ref already existed merge mhupdaterefbatchcreatefix later maint git diff noindex mq b fell infinite loop merge jcfixdiffnoindexdiffoptparse later maint git fetch prune righthand side multiple fetch refspecs overlap eg storing refsheads refsremotesorigin storing refsfrotz refsremotesoriginfr aggressively thought lack refsheadsfrotz origin site meant remove refsremotesoriginfrotz u without checking refsfrotzotz first note configuration inherently unsafe think happen refsheadsfrotz appear origin site reason extra careful merge cnfetchpruneoverlappingdestination later maint git status porcelain branch showed output label aheadbehindgone translated user locale merge later maint stray environment variable prefix could leaked affected behaviour subtree script contrib necessary edit commit log message eg git commit given message without specifying e used disable spawning editor overriding giteditor mean us editor edit commit log message also affected merge bpcommitpeditor later maint git mv move submodule forgot adjust array us keep track submodules moved update configuration merge jkmvsubmodulesfix later maint length limit pathname used removing path deep subdirectory removed avoid buffer overflow merge mhremovesubtreelongpathnamefix later maint test helper libterminal always run actual testexpect included screwed use skilall may done later merge jklibterminallazy later maint git indexpack used wrong variable name keepfile error message file written closed merge ndindexpackerrormessage later maint rebase produced broken insn sheet title commit happened contain n ended c due careless use echo merge usprintfnotecho later maint instance gitfoo remaining documentation spelled git foo merge rrdocmergestrategies later maint serving object shallow repository need write new file hold temporary shallow boundary cleaned exit due die signal merge jkshallowupdatefix later maint git stash pop stop failing apply stash eg due conflicting change stash dropped state explicitly output let user know merge jcstashpopnotpopped later maint label git status output describe nature conflict eg deleted limited byte short eg fr merge jnwtstatus later maint git clean pathspec use given pathspec correctly ended cleaning much merge jkcleandpathspec later maint git difftool misbehaved repository bound working tree git file mechanism textual file git tell u merge dadifftoolgitfiles later maint git push pay attention branch pushremote defined earlier remotepushdefault order two variable configuration file matter mistake merge jkremotepushremoteconfigreading later maint code path parse timestamps commit object tightened merge jkcommitdatesparsingfix later maint git diff externaldiff incorrectly fed submodule directory working tree external diff driver knew one version compared merge trdiffsubmodulenoreuseworktree later maint git reset need refresh index working working tree also used match index head otherwise bare repository failed set working tree properly causing gitworktree ignored merge ndresetsetupworktree later maint git checkattr working repository working tree work well working tree specified via worktree obviously gitdir option merge jccheckattrhonorworkingtree later maint mergerecursive broken era stopped working empty temporary working tree renames involved corrected merge bkrefreshmissingokinmergerecursive later maint git revparse loose rejecting commandline argument make sense eg default without required value option merge dsrevparserequiredargs later maint includepath variable variable expects path use username expansion configuration file boolean code failed check merge jkconfigpathincludefix later maint command take pathspecs command line misbehaved pathspec given absolute pathname practice particularly encouraged point symbolic link working tree merge mwsymlinks later maint git diff quiet sometimes return correct status value merge nddiffquietstatdirty later maint attempting deepen shallow repository fetching smart http transport failed protocol exchange nodone extension used fetching side waited list shallow boundary commits sending side stopped talking merge ndhttpfetchshallowfix later maint allow git cmd path path submodule bound toplevel working tree match path despite extra unnecessary trailing slash slash often given commandline completion merge ndsubmodulepathspecendingwithslash later maint documentation incode comment many instance mistaken use corrected merge jlnorornandand later maint
795,Lobsters,vcs,Git & VCS,Using git - the next level,http://who-t.blogspot.ro/2014/03/using-git-next-level.html,using git next level,use tig tig tig blame main view use branch use branch description git hook nag amend rebase cow come home learn rebase git squash learn use reflog use git push hook git patchset,million tutorial learn git nt one going assume learned git ago using bit generally familiar principle going show couple thing improved workflow chance improve nt tutorial though pointing direction thing learn use use tig seriously nt tell use gitk git log good enough use tig tig git log mutt mail source biggest efficiency increase screenshots nt justice selling point interactive anyway official screenshots tig blame show file commits need select line hit enter see actual commit main view default show tag branch name remote branch name etc immediately know branch see local branch merged tag applied etc give awareness git log nt favour install use day two pretty sure wo nt go back tig also support custom configuration hometigrc bind generic x git cherrypick x commit bind generic c git cherrypick commit bind generic r git revert commit bind generic e git formatpatch commit bind generic git checkout commit bind generic git checkout commit bind generic git commit amend bind generic git show commit couple key stroke cherrypick export patch revert check single tree etc especially cherrypicking extremely efficient check target branch run tig master simply select commit c x done use branch anytime take minute fix issue create new branch getting torn multiple thing time may spend day two one bug back another unrelated issue review requirement project may multiple patch waiting feedback ca nt push yet hence branch featurebugfix master reserved patch pushed immediately approach becomes particularly useful fix may need extra refacturing start featurebased branch halfway realise need extra patch refactor thing easy review send gather review cherrypick master push back feature branch rebase done managed two separate stream fix without interference importantly got rid patch otherwise carry feature branch course take get used take discipline took time really managed always work like general rule hacking master branch something remember real limit many branch create make sure clean done keep thing easy brain use branch name help rename branch git branch tend name anything bigger rewrite wipsomefeature whereas normal bug fix go branch normal name rebase local feature branch nt matter name anyway branch deleted merge branch care branch history ie pull master merge commit rename pulling get rid wip prefix use branch description hand devel branch month ago hand still remember purpose branch right nt think git branch editdescription fire editor let add description branch sometimes single sentence enough refresh memory importantly taskswitch different feature edit description note left plan etc reduces time get back work git config branch branchname description show description matching branch even git hook nag check branch without description note branch description local pushed remote amend rebase cow come home general rule committed nt get lost least easily still git reflog commit think done review test add git commit amend typo made line edit amend shell alias amend rb git rebase rbc git rebase continue almost every commit go least amends usually one missed something one typo one commit log message editing importantly nt matter often amend really local noone care important thing get good patch set get one commit git commit amend modifies last commit go back edit past need rebase need learn rebase normal git rebase tutorial cover make sure know use git rebase interactive make sure know change ordering commit delete commits abort rebase make sure know squash two commits together difference squash fixup going write tutorial find documentation easy enough find simply take hint time spend learning rebase pay also may find git squash interesting remember even rebase go bad previous state still reflog brings learn use reflog git reflog list change reverse chronological order applied repository regardless branch head always whatever head always repository last command nt mean commits remembers change switch branch branch b commit something switch branch c head git reflog helpfully annotates everything type know actually happened example accidentally dropped patch rebase look reflog figure rebase started either reset commit tig cherrypick missing commits back onto current branch create test git repository learn exactly save time future note reflog local remember nt committed reflog use git push hook repeat echo make githooksprepush embarrassment pushing patch nt compile made mistake many time even use git patchset command run hook generating patch set send list might want make hook executable btw
796,Lobsters,vcs,Git & VCS,Linus Torvalds on implementation of human-readable file system,https://plus.google.com/+LinusTorvalds/posts/X2XVf9Q7MfV,linus torvalds implementation humanreadable file system,one account google sign google account,one account google sign google account
797,Lobsters,vcs,Git & VCS,Using A Single Git Repository For Multiple Heroku Projects,http://lostechies.com/derickbailey/2014/02/27/using-a-single-git-repository-for-multiple-heroku-projects/,using single git repository multiple heroku project,signalleaf one repository rule one procfile per heroku app one master repository multiple app repository nested repository multiple procfiles complex deployment script downside upside another solution procfile shell script multiple heroku apps multiple git repository deploy single git repository code signalleaf,signalleaf separate service point web app medium server service deployed heroku heroku app instance allows scale needed give heroku dynos medium service example ensure handle traffic serve episode web site get used often keep dynos scaled back comparison trick setup deployment though using single git repository service deploying separate app instance heroku one repository rule signalleaf huge system sure lot module code file broken many concern huge many module file example make sense invest git repository module would end git repository manage worth multiple apps one repository make thing easy manage code perspective lot shared code multiple apps worth setting individual git repository npm module easier manage code one repository make difficult time deploying heroku heroku one app per git repository deploy single repository multiple heroku apps expecting run anything different two separate apps heroku see one repository one procfile repository run procfile say run creates challenge one procfile per heroku app make deployment work single repository need multiple procfiles procfiles file tell heroku service launch within app instance heroku app use single procfile run many service need given heroku app instance exception one procfile many service setup one service web app responds http request try deploy multiple web apps within single heroku app one run get around one web app per heroku app instance need multiple heroku apps case signalleaf two web apps yes guessed web site medium server web apps need respond http request since two apps need web site responding http request two heroku app instance one also mean two procfiles source code one web site like said running web site single git repository one master repository multiple app repository deploying app heroku done git push commit code push repository heroku spin app heroku look one one procfile root repository us launch service within heroku app instance mean need multiple git repository order multiple heroku apps push repository multiple heroku apps expecting pick different procfiles solution single git repository master code base work multiple git repository deployment various apps various heroku service nested repository process came solve deployment problem multiple git repository inside master git repository talking git submodules putting git repository deploy folder master repository master repository gitignore deploy folder never commit master folder structure look like folder deploy production staging environment folder deployment web site medium server folder git repository multiple procfiles environment configuration folder contains procfiles heroku apps procfile staging v production procfile copy stored shared configuration folder mediaprocfile look like webprocfile look like yes multiple service running web app get interesting deploy process dealing multiple nested repository multiple procfiles complex deployment script deploy multiple project multiple git repository using multiple procfiles need something git push need deploy script coordinate moving part ensures everything right place right time thankfully nice shell script easy enough automate deployment process high level look like copy needed code medium deploy folder copy correct procfile medium deploy folder commit code file asset medium deploy folder git repository push git repository correct heroku app repeat web site shell script automate currently look like copy deploy one production environment one staging environment yes know need refactor shell script much duplication two environment two apps environment come eventually work downside downside complex set complexity add complexity deploy process configuration system development environment see complexity mostly managed simple shell script deploy process since one coding signalleaf worry anyone else needing replicate setup development environment ever come sure run limitation problem automate simplify way upside upside complexity setup deploy file need given heroku app deploy number heroku apps single git repository huge win right another solution procfile shell script seen solution like using shell script service procfile would let make decision shell script based environment variable shell script run different server service based configuration env var downside approach deploy everything heroku apps file asset look folder structure screenshots see lot folder related code given app heroku run example database keep database script seed data database backup folder want deployed heroku want git deployment setup place allows copy file folder need individual deploy repository ignore database folder folder never worry taking space reason heroku limited slug size multiple heroku apps multiple git repository deploy single git repository code end result setup allows single repository build service share code multiple heroku apps without create git repository npm repository shared code copy shared code deploy repository deploys rest code service cut number git repository need managing code may way might want invest multiple git repository code always make sense configure thing way frankly wish heroku would support multiple web apps single procfile heroku app would make life easier deployment find situation want deploy multiple heroku apps single git repository setup work work signalleaf least
799,Lobsters,vcs,Git & VCS,Announcing gitsh,http://robots.thoughtbot.com/announcing-gitsh,announcing gitsh,git alias readme github repo,gitsh new way use git instead running git command general purpose shell like zsh bash gitsh provides dedicated shell git command many early unix utility like dc take subcommands like git modern program instead launched shell program like git many command option interacting via shell still make lot sense gitsh follows long unix tradition simplest gitsh save typing word git git command moreish almost never want one work git flurry command probably familiar git status git add p git commit git push gitsh get easier gitsh gitsh status gitsh add p gitsh commit gitsh push gitsh exit git alias work gitsh save even typing dedicated git shell lot save u keystroke gitsh concerned git kind little way make using git easier git command find using git status often commit push pull great way quickly checking thing gitsh hit return without entering command assume wanted status saving even typing making really easy check status command prefer taciturn output git status find using completely different command annoying regularity always change gitsh default command setting gitshdefaultcommand variable using git config gitsh config global gitshdefaultcommand status gitsh automatically get tab completion command branch name path name status current branch prompt example everything committed working directory clean prompt blue end untracked file prompt red end possible set part bash zsh fiddly get working easily broken interact strangely alias thirdparty git command like general purpose unix shell gitsh also provides environment variable set variable using set command read using prefix gitsh set message commit message gitsh commit message variable name contains dot temporarily override one git config setting end gitsh session useful pair programming gitsh set username george brocklehurst amp mike burn gitsh set useremail supportgeorgemburns thoughtbotco gitsh commit pair programming mac o x install gitsh via homebrew brew tap thoughtbotformulae brew install gitsh linux install instruction gitsh readme forget check man page via man gitsh find bug please report gitsh github repo
800,Lobsters,vcs,Git & VCS,How GDS uses git and github,https://gdstechnology.blog.gov.uk/2014/01/27/how-we-use-github/,gd us git github,github mike bracken pro git version control collaboration section version control code open git change mind bitbucket gitlab gitorious collaboration travis ci keeping secret github enterprise optimise change http wwwgovukservicemanualdigitalbydefault diversity approach working gd follow james twitter sign email update blog subscribe feed,team around government frequently ask u use github rather bury answer email seemed time follow mike bracken directive publish send answer made assumption reader familiarity concept version control deployment hopefully post link comment answer many frequent question deeper look git check freely available book pro git version control collaboration government service design manual section version control early draft talked git github specifically revised focus important thing able track finegrained change across codebase see history step back known good version believe vital building high quality software team tool collaborate code discus change review happening lead higher quality code eye get code likely spot error provides clear way everyone review context past change gd team making easy code open also high priority work ever merged master rather committed directly work feature branch release master often keep big bang release minimum version control system best suited way worked gd git developer already familiar make working branch straightforward distributed model provides lot flexibility whenever looked option set tool provided github best match yet found way want work layer nicely top git thanks layering one important asset code easily moved wanted lot option applying tool necessary mean change mind keen see option example bitbucket gitlab gitorious develop good see team around government experimenting spotted dvla team using gitlab visited day collaboration gd team slightly different process reviewing code dependent working team given time really important thing u every change get least two pair eye hit master support continuous deployment rapid bug fix team adopted practice using shortlived feature branch generating pull request ready merge want wider input pull request merged someone work directly code reviewed code run test many team using travis ci test run automatically pull request giving extra layer confidence keeping secret every aspect work really important consider risk associated make change manage code detailed risk vary system system every project need know exactly made change code deploy striking balance open handing key system anyone look work hard keep detailed configuration code specific configuration repository holding detail credential need provided apps deployed anyone making deployment expected know detail changed based git revision initially managed configuration repository private repository githubcom work become higher profile critical decided bring entirely inhouse support github enterprise installation running controlled environment could used git tool decided prioritise consistent experience team anything contains something make public life extra hop access outside office network otherwise daytoday experience identical optimise change optimised way working momentum flexibility change even enshrined principle behind digital default service standard make sure capacity technical flexibility update improve service frequent basis http wwwgovukservicemanualdigitalbydefault workflow support collaboration big part also meant need think might keep ability change le usual circumstance need make change quietly security reason deploy important update githubcom unavailable place distributed nature git help u easily keep date copy code place deploy either sensitive change made internal clone repository deployed later merged public clone diversity approach way set work really well development team keen see team around government working course see wider community practice develop whether decision affected preference team risk around work emergence new tool going plenty chance learn improve sound like good place work take look working gd usually search talented people come join team follow james twitter sign email update blog subscribe feed
802,Lobsters,vcs,Git & VCS,"Advanced Git: Graphs, Hashes, and Compression, Oh My!",https://www.youtube.com/watch?v=ig5E8CcdM9g&feature=player_embedded&noredirect=1,advanced git graph hash compression oh,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature advanced git graph hash compression oh youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature advanced git graph hash compression oh youtube
804,Lobsters,vcs,Git & VCS,Host a Personal Data API on Heroku,http://www.longren.org/host-a-personal-api-on-heroku/,host personal data api heroku,read,modafinil medication used treat sleepiness caused narcolepsy may experiencing sleep disorder due shift work lead interruption sleep different time medication developed help management obstructive sleep apnea necessary enough sleep body read morebuy modafinil online trusted source
805,Lobsters,vcs,Git & VCS,Contributing To GitHub Projects is Easy,http://www.longren.org/contributing-to-github-projects-is-easy/,contributing github project easy,read,modafinil medication used treat sleepiness caused narcolepsy may experiencing sleep disorder due shift work lead interruption sleep different time medication developed help management obstructive sleep apnea necessary enough sleep body read morebuy modafinil online trusted source
806,Lobsters,vcs,Git & VCS,Legit: Git for Humans,https://github.com/kennethreitz/legit,legit git human,legit git human concept github mac comment interface installation pypi github release command option caveat,legit git human inspired github mac concept github mac git client comment hacker news say best nt recreated git cli tool gui created something different created tool make git accessible little thing like autostashing switch branch confuse git veteran make git much easier grok newcomer assumption make git workflow bring innovation back command line interface switch branch switch specified branch default current branch automatically stash unstashes change alias sw sync branch synchronizes given branch default current branch stash fetch automergerebase push unstash sync published branch alias sy publish branch publishes specified branch remote alias pub unpublish branch remove specified branch remote alias unp undo undoes last commit git history alias un branch wildcard pattern display list available branch allows wildcard pattern matching branch name installation pypi python package manager pip install legit download standalone window executable github release install cutting edge version git repository git clone http githubcomfrostminglegitgit cd legit python setuppy install note encountered permission denied prepend sudo pip python setuppy command wonderful legit command available run within repository view usage example run legit command option legit install git alias run following command legit install uninstall git alias run following command legit uninstall command option legit command support verbose fake option order view git command invoked legit use verbose option legit sync verbose want see git command used legit nt want invoked use fake option legit publish fake caveat remote operation carried remote identified git config legitremote remotename stash pop merge fails legit stop like add checking failed merge undo command friendly error reporting
808,Lobsters,vcs,Git & VCS,git - the simple guide - no deep shit!,http://rogerdudler.github.io/git-guide/,git simple guide deep shit,,
810,Lobsters,vcs,Git & VCS,GitHub announces Diffing for 3D Files,https://github.com/blog/1633-3d-file-diffs,github announces diffing file,file viewer diffs stl file binary space partitioning csgtool help open source hardware,back april introduced file viewer today improving displaying diffs stl file github two mode figure looking default select highlight mode highlight removed part red added part green leaving unchanged wireframe also available revision slider let transition current version file previous one small slider top viewer work take version model using binary space partitioning compute added removed unchanged part done using csgtool c library paired ruby gem via ffi piece cached displayed viewer already though color differently play transparency help illustrate change question check help article see step making easier use github open source hardware need
811,Lobsters,vcs,Git & VCS,Git quiz,http://niksilver.com/2013/08/20/git-quiz/,git quiz,answer next basic operation branch tag remote branch merging pushing pulling rebasing,part introduction git training day running prepared quiz group else would lunch thought okay git old adage true really want learn something get student found lot git nook cranny course preparing material see meant tricky answer next basic operation describe working directory staging area repository two thing git rm myfile following command get myfile case clever one participant myfile branch git checkout myfile git checkout head myfile git checkout myfile git status say nothing commit staging area branch tag branch really want continue new branch two step take rolled one command switch another branch branch tag similar difference remote branch mean branch name remote branch eg bobrefactored fetch originmaster someone else push master origin happens originmaster merging merge conflict occur last step merge conflict signal resolved conflict file fastforward merge pushing pulling two operation git pull branch git pull origin pull branch git push origin push rebasing rebasing called rebasing git rebase originmaster line commits get moved signal conflict resolution file rebase continue rebase fetch rebase one command flag prevents multiway traditional merge commit move part rebase change stay danger rebasing people work
812,Lobsters,vcs,Git & VCS,Changing History with Git,http://flippinawesome.org/2013/07/29/changing-history-with-git/,changing history git,peter bell local v shared history fixing last commit mo commits turning commits one changing grouping commits pretending afternoon never happened conclusion remotesynthesiscom past publication presentation remotesynth,peter bell one great thing git change version control history messed commit message forgot commit file amend commit made three commits one would reset commits create one new one change however confusing keep track different command option available cleaning history article look solve common problem around rewriting history using git first need know change local v shared history two type history need treat differently git local history currently stored machine shared history pushed server shared developer generally change shared history cause problem anyone else working project commit wish undo shared someone use revert command actually change history introduces new commit opposite one reverting getting working directory back condition would initial commit never made rest command going discus strictly local history unless really know fixing last commit ever made typo commit message maybe used git commit forgotten add modified untracked file either way often recognize immediately made mistake luckily notice push really easy fix fix commit message type git commit amend fixed commit message recreate last commit changing commit message new one created forgot add one file last commit add using git add type git commit amend throw default commit message editor vi wq get run git status see file added committed git log see added last commit always part mo commits git commit amend great want change recent commit created two three local commits want change simple use git reset command undo three option git reset soft mixed default hard turning commits one let say want merge last two commits single commit easy type git reset soft get rid last two commits history returning state two commits head recent commit branch however keep change even keep staged check git status see change last two commits staging area create new commit replace old two type git commit put new commit message create new commit want new message change two commits removed changing grouping commits imagine created three html file cs file one two commits typed git add html git commit added html file git add cs git commit added styling new html file decided commit html file together styling might right strategy let say decided would better making three commits html cs file problem time type git reset time using default mixed mode instead soft could typed git reset mixed need mode default mixed run git status see got file last two commits instead staging area ready committing working directory perfect use case add file want three commits wish make make three commits pretending afternoon never happened ever one afternoon working hard make number commits end afternoon realize going wrong direction completely wasted time commits value want completely get rid say last commits made type git reset hard delete last five commits also remove change working directory make change really sure sometimes best possible choice conclusion even way play history git interested another approach search interactive rebase git another really cool way squash reorder even completely eliminate local commits get trouble search information git reflog allows get back commits reset amended hope hint tip use like get regular hint tip better way use git github sign regular recipe keep improving usage git brian rinaldi founder flippin awesome brian work developer content manager telerik though site affiliated employer focused ensuring developer relation team creates top notch content web development community previously brian focused publishing html cs javascript developer content adobe developer connection adobe brian published variety technical publication year presented numerous conference event served technical editor number book read brian blog archive year content remotesynthesiscom still post infrequently find full list brian past publication presentation follow brian twitter remotesynth
813,Lobsters,vcs,Git & VCS,On Git's Shortcomings,http://www.peterlundgren.com/blog/on-gits-shortcomings/,git shortcoming,git shortcoming countless website article blog post dedicated adulation git selection bias site github ease use almost complaint could find specifying git revision access control read access write access hook gitolite restrict write access obliterate confidential information large measured byte mistake ire lock veracity gitolite lock file large repository partial clone path gitarchive sparse checkout gitreadtree partial clone branch github page shallow clone gitclone perform poorly linux kernel client side server side linux kernel large number contributor one branch sign commits large file gitannex gitbigfiles empty directory workaround revision number revision number svn external equivalent svn external git,git shortcoming jul git receives lot positive press countless website article blog post dedicated adulation git plenty easy find list reason use git much harder find list substantial reason use git surprising obvious selection bias play spend time git understand better likely extol virtue conversely turned git early unlikely make well informed argument unable find complete list git weakness attempted compile list get wrong proponent git site github must truthful git limitation list exception git alone avoid making comparison version control system unless relevant ease use let get one way first almost complaint could find fell category much add subject already said brief git complex information model really abstract user git model comprised directed acyclic graph commits tree blob branch tag remote git staging area stash reflog git command git undo sure need know need know least minimally productive add branch checkout clone commit diff fetch help init log merge push status even specifying git revision need manpage git complicated welcome complexity brings powerful feature along however professional software developer might look elsewhere access control git concern access control defers job file system ssh ability restrict access git repository severely limited read access restrict read access specific file directory branch within single repository git either clone entire repository none need arrange thing setting read permission perrepository sufficient write access option restricting write access quite limited git support write access control box provide hook reject push third party tool add write access control git gitolite example restrict write access file directory branch also restrict force push unfortunately option tie particular third party tool want migrate gitolite access control github bad obliterate version control tool way completely removing file repository sometimes called obliterate obliterate delete must purge data repository history completely never first place two reason might want confidential information confidential information ever committed repository deleting enough remain recoverable anyone read access repository point version control depending upon level confidentiality level exposure repository obliterate may necessary large measured byte mistake file accidentally committed git repository removed later commit snapshot file forever live repository file added mistake large could problem obliterate could remove good think git excels preventing problem multiple step catch correct mistake end central repository need add commit push compared commit svn mistake end public hand public public good git make cryptographic guarantee ensure someone try rewrite history obliterate file every clone repository notice next fetch perhaps ire fellow developer suggest obliterate trivial centralized version control tool still worry working copy addition central repository however git problem complicated thanks locally attached history every clone lock git support locking file could central authority distributed version control system go obtain lock git lock would oxymoron said sometimes lock needed consider binary file merged video image cad drawing video game asset etc fundamentally developer need take turn working file locking file right solution locking critical feature git support locking veracity another distributed version control tool want stick git gitolite learned lock file intractable problem worth watching least need configure additional tool support locking large repository git store snapshot entire history repository locally clone disk space cheap still getting cheaper likely bottleneck network speed need clone large repository network going take megabyte problem gigabyte manageable terabyte bother made troublesome lack partial clone partial clone path partial clone path possible git gitarchive let download part repository path tar zip get file working repository git learned sparse checkout version could definitely help repository impact checkout clone save disk space bandwidth documentation sparse checkout burried gitreadtree partial clone branch git clone singlebranch make possible clone selected branch however save much bandwidth unless branch remote repository far diverged useful situation like github page orphaned branch ghpages different content rest branch shallow clone git allows shallow clone clone recent history git clone depth depth however come significant limitation gitclone shallow repository number limitation clone fetch push adequate interested recent history large project long history would want send fix patch drastically reduce time clone repository long history particularly content deltacompress well said git deltacompression help quite bit project result may surprise recent svn git migration one repository went minute second svn checkout minute second git clone expect aside file size concern git command start perform poorly large repository many commits many file short git becomes unusable around order magnitude larger linux kernel git community tends think large repository general advice split repository thing get bad advice seem awfully hollow organization operates successfully superrepository concerned performance client side server side benchmark might interest considering migrating repository larger linux kernel git probably run benchmark large number contributor one branch point take little explaining since counterintuitive git work great large project many contributor thanks distributed nature give everyone write access central repository git fantastic open source project however want give many people write access single branch single repository might run trouble consider happens two people alice bob try push branch remote time let say alice get first successfully update branch bob push get rejected remote branch longer reachable snapshot trying push ensures alice commits get abandoned bob push good thing become bottleneck bob fetch redo merge try push process take minute two take longer larger repository longer still sign commits limit rate push possible single branch branch receiving dozen push per hour peak high traffic unfathomable push per hour infeasible counter point git make painless branch merge probably worth asking need push often one branch finally couple minor point deserve mention large file gitannex gitbigfiles two effort try deal problem related large file git empty directory git support empty directory standard workaround add empty gitignore directory commit instead revision number git revision number character hash lexicographic sort revision longer make sense used appending revision number build artifact meaningful sort may need rethink strategy svn external equivalent written post much sooner would issue submodules used unable track branch integrate specific commit left le flexible svn external git recently added feature problem solved shortcoming nonissue many developer weakness avoided without much trouble still looking use git new project migrate existing project git consider limitation decide problematic particular use case
814,Lobsters,vcs,Git & VCS,Releases - Workflow for shipping software to end users,https://github.com/blog/1547-release-your-software,release workflow shipping software end user,release semantic versioning creating release,today excited announce release workflow shipping software end user release firstclass object changelogs binary asset present full project history beyond git artifact accessible repository homepage release accompanied release note link download software source code following convention many git project release tied git tag use existing tag let release create tag published recommend project use semantic versioning required creating release repository collaborator draft changelog release note nonproduction release alpha beta release candidate identified prerelease checkbox also attach binary asset compiled executables minified script documentation release published release detail asset available anyone view repository happy shipping ship
815,Lobsters,vcs,Git & VCS,gh - hub ( github tool ) written in go,https://github.com/jingweno/gh,gh hub github tool written go,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
817,Lobsters,vcs,Git & VCS,The problem with pull requests / code reviews,http://philfreo.com/blog/the-problem-with-pull-requests-code-reviews/,problem pull request code review,git programming closeio sale software ui approach get fancy javascript get fancy git follow philfreo twitter,may topic git programming use git github pull request fairly heavily developing closeio sale software main problem pull request code review focus attention much specific line code addedremovedmodified enough context addedremoved take view instance sure line look fine valid python code contain obviously flawed logic see file appresourcespy even method name validaterequest often enough really review going line make sense idea view one reason seeing line code change really give enough context even within method another reason uncommon especially python apps bunch similar class file may implement method name case know resource class code added github showing git diff includes line including whitespace context default gitdiff additional option like allow show line context well ability combine ajaxey goodness lot opportunity improvement idea ui approach starter add querystring feature like would show line context instead already show diff ignores whitespace change come handy ui approach brainer opinion get fancy javascript see little line represents extra code able click ellipsis expand context could load display several extra line code click let see additional context code reviewing get fancy git sure exactly gitdiff show function def validaterequest self objnone case top chunk intelligence could added showed classobject name addition functionmethod name think better way solve problem follow philfreo twitter
819,Lobsters,vcs,Git & VCS,But that's impossible! (idempotent mercurial/git translation),http://bitquabit.com/post/but-thats-impossible/,impossible idempotent mercurialgit translation,kiln harmony first dvcsagnostic source control system technical blog series impossible improbable unlikely serving kiln shitumbrella developer kevin throw prototype dulwich still never actually fly supposed impossible,past week felt wave relief shipped kiln harmony first dvcsagnostic source control system kiln harmony translation engine ruled life better part year technical blog series revealing probably took sanity received nearly universally positive feedback built product love use help feel project incredible success success started halfscreaming impossible across table impossible like think fairly openminded found word flying mouth almost chance think joel sitting office january discussing adding git support kiln much loved mercurial happy kiln built top also agreed time come add git support well support wanted build simple straightforward like every service offer git mercurial make pick one two repository creation make easy change mind later also proposed oneclick method switch repository alternative dvcs given repository would ultimately either git joel idea fundamentally different wanted anyone able use either system repository time found screaming impossible developer expect pushing data kiln cloning back give repository roundtrip steady state mercurial git conversion tool time could good reason mercurial git nearly isomorphic fundamental difference hood intractable concept exist one two system therefore possibly translated meaningful fashion unless magic data fairy going lose information roundtripping addition since data tightly tied tool preferred workflow also going severely hamper daytoday dvcs operation process word tried build joel wanted end world first lossy version control system supporting narrow band functionality common git mercurial talk product dead arrival wanted part ended going back office meeting incredibly annoyed joel understand internals two tool well enough agree therefore draft paper explaining exactly could possibly build tool like proposing improbable except ended quite opposite pick topic knew fundamentally handling git mercurialstyle tag bang paragraph going technical minutia impossible read back paragraph realize gap logic fill gap gap finally written detailed howto manual handling exactly thing originally said impossible thing fell one one designed scheme mercurial named branch involved nonfastforward merges git side lossless preservation proposed extending mercurial pushkey system way handle annotated tag developed workflow could handle competing branching strategy minimal user confusion ended going home nearly pm keep writing next morning came office document explaining make kiln repository simultaneously git mercurial rather document explaining exactly unlikely time still serving kiln shitumbrella developer asked kevin one kiln team best developer write prototype based white paper thus freeing vastly sexy task merging sql server database one backup strategy would finally viable hey good shit umbrella put together surprisingly robust prototype using idea whitepaper extending nicely process thus indicating pretty strongly idea bad based kevin prototype proposed new strategy would indeed make version kiln git mercurial eitheror support still aim project shippable summer roughly original schedule would safety option meanwhile parallel effort dubbed doublespeak would launch make repository dvcsagnostic doublespeak ended failure still new kiln version show summer git support hand promising delay launch long enough ship ambitious vision kiln doublespeak stroke luck thing worked could swap teamlead duty developer duty doublespeak development kicked earnest ended lead engineer translation engine first thing throw prototype dogma realized first day hacking original design definition would perform well needed architecture would also required spend considerable amount time modifying git internals appealing opted new design would directly leverage mercurial code base python git implementation called dulwich reimplemented prototype day two began long sledge gnarly part whitepaper managing refbookmark translation movement handling tag handling octopus merges handling mercurial concept filenode parent linkrevs kiln eitheror project wrapped developer started joining translation layer fill increasingly esoteric gap still never actually fly long nearly complete solution ready dogfooding unfortunately almost soon began using new magic hit two major problem threatened scuttle project first entire engine slow limited almost entirely much disk io doublespeak get job done already brutal fog creek private kiln instance ops team nightmare disk damage would look like kiln demand thus began month work try get disk access minimal possible general mantra read given revision whenever possible introduced cache memoization beginning landing orderofmagnitude performance improvement daily end optimized code base much dinky little performance improvement frequently result day work system performing level could actually use second problem hit lot experience mercurial repository supposed look git data supposed look grossly underestimated much realworld variation mercurial git repository kiln team spent week adding corrupt data preservation logic doublespeak could handle realworld repository like mercurial ultimately got place nearly every repository threw thing losslessly roundtripped tackled challenge soon dogfooding became alpha alpha became beta doublespeak codename became much le orwellian kiln harmony last tuesday kiln harmony shipped supposed impossible think joel prescient knew kiln harmony doable certainly think knew everything whitepaper explained wrote definitely believe knew pushing hard would force find way one found case clear glad
821,Lobsters,vcs,Git & VCS,Git Tips From the Pros | Nettuts+,http://net.tutsplus.com/tutorials/tools-and-tips/git-tips-from-the-pros/,git tip pro nettuts,,course ebooksdesign code video editing business much moreadobe photoshop illustrator indesigngraphic logo print designsketch adobe xd figmawordpressjavascript php pythonadobe effect premiere promuch moremillions creative assetsdesign template stock video photo audio much moregraphic templatesstock photosmusic tracksvideo templatesweb templatesdesign assetswordpress theme pluginsmuch
