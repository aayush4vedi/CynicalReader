ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,fortran,Fortran programming,"xmake v2.3.6 released, Support fortran compilation and go/dlang package dependences","https://github.com/xmake-io/xmake/wiki/xmake-v2.3.6-released,-Support-fortran-compilation-and-go-dlang-package-dependences",xmake released support fortran compilation godlang package dependence,introduction new feature fortran language compilation support fortran example zig language experimental support http githubcomziglangzig zig example go dependency package cross compilation support go example dlangdub dependency package support,version focus improvement support language fortran compilation support experimental support zig language thirdparty dependency package support crosscompilation support golangdlang although xmake focus cc build support language support xmake also make improvement time time main purpose replace official build system support mixed compilation cc better serve cc project cc project still occasionally call code interface language mixed call language cuda dlang objc swift asm etc xmake still provides basic compilation support addition regarding cc also support header file dependency format new sourcedependencies xxxjson output v preview version reliable stable multilanguage header file dependency detection introduction new feature fortran language compilation support starting version fully supported use gfortran compiler compile fortran project quickly create empty project based fortran using following command xmake create l fortran console test xmakelua content follows addrules modedebug moderelease target test setkind binary addfiles src code example viewed fortran example zig language experimental support note present language xmake still experimental support stage perfect example supported window dynamic library compilation linuxmacos yet supported please evaluate use use following configuration method try experience least console static library program linuxmacos still run addrules modedebug moderelease target test setkind binary addfiles src zig window support please refer issue mentioned zig earlier dynamic library support pitfall dynamic library generated zig automatically append see issue http githubcomziglangzig addition lay pit personally feel lot pit still experimental stage time look later example see zig example go dependency package cross compilation support new version xmake continues make improvement go build support crosscompilation go example compile window program macos linux xmake f p window addition new version also initially support thirdparty dependency package management go addrules modedebug moderelease addrequires go githubcomsirupsenlogrus alias logrus addrequires go golangorgxsysinternalunsafeheader alias unsafeheader isplat window addrequires go golangorgxsyswindows alias syshost else addrequires go golangorgxsysunix alias syshost end target test setkind binary addfiles src go addpackages logrus syshost unsafeheader however still imperfection example cascading dependency package must manually configured present bit cumbersome need improved future example see go example dlangdub dependency package support xmake also support dlang dub package management quickly integrate dlang thirdparty dependency package addrules modedebug moderelease addrequires dub log alias log addrequires dub dateparser alias dateparser addrequires dub emsicontainers alias emsicontainers addrequires dub stdxallocator alias stdxallocator addrequires dub mircore alias mircore target test setkind binary addfiles src addpackages log dateparser emsicontainers stdxallocator mircor
2,Lobsters,fortran,Fortran programming,Rewriting FORTRAN Software In Rust,https://mckeogh.tech/post/shallow-water/,rewriting fortran software rust,amdahl law introduction rewrite rewrite legacy code situation different vulnerability microsoft assigns cve year continue memory safety issue translating fortran rust bindgen optimizing parallelisation amdahl law memory bandwidth issue gpu unsuitability radeon pro ssg benchmark analysis conclusion,tl dr rewriting always bad probably amdahl law important memory bandwidth potential bottleneck many simple double precision math operationsintroductionas part undergraduate research assistant scheme first year university tasked parallelising piece shallow water simulation software written fortran dr david dritschel vortex dynamic research group supervision dr alexander konovalov university st andrew secondary goal improving testing infrastructure setting cicd estimating progress allowing computation paused resumedforewarning essentially zero domain knowledge project fluid dynamic simulation exactly kind topic catch research level weekend approached project purely software engineering perspective rust experience using personal project since worked rust software engineer startup berlin year leaving high schooldon rewritedon trewritelegacycodenot hard concept grasp much ambiguity clear line reasoning follow legacy software rewritten well read article written people far experienced knowledgable thought situation differentall joke aside situation reimplementation reasonable option several factor back upfortran undoubtably fast highly suited hpc problem decadesoptimised compiler debugging tooling lack certain feature namely memory safety thread safety data race guarantee ergonomic gpuclitui librarieshaving written parallel software c rust memory safety guarantee easy parallelisation rayon offered rust contrast quite sharply poor experience using openmp replacing iter pariter compiler automatically throw error code thread safe amazing compared adding openmp directive sentinel designed hidden non openmpcompliant fortran compiler manually determining thread memory safety seems good place mention vulnerability microsoft assigns cve year continue memory safety issue believed initially gpus could used accelerate computation another place rust mature ecosystem also shine offered fortran edit completely untrue fortran gpu acceleratin library mature production ready additionally came additional requirement building ncurses interface fortran exactly ergonomic compared library available rust spent time reading original implementation attempted basic parallelisation little success due small error hard diagnose across long execution without snapshot testing across multiple modulesnot several pull factor also absence typical reason rewrite working oneperson team software finalised never needed modified relatively small could rewritten matter month part time live business component uptime upkeep original implementation irrelevantgiven decided would faster rewrite rust able parallelise add feature quickly would plough fortran goahead supervisor got worktranslating fortran rustrelatively straightforward translation existing codebases compiled language rust noted benefit due combination software like perform automatic translation c source rust bindgen automatically generating ffi binding cargo ability compile code language part rust project plenty example large project successfully migrating rust way issue faced would required twostep process first translating fortran c c rust assumed likelihood resulting code would remotely parsable low even get either popular fortran c conversion tool worksince original implementation line total decided go manual translation involved starting base module tree fast fourier transform routine working upwards kept process simple inserting small piece fortran dump state beginning end routine used snapshot test rust implementation resulted thorough robust testing suite invaluble optimization period really made one bad design decision please read git history confirm translation phase thinking nested vecs would easier using ndarray start bad wasted much time abysmal execution speed slowing cargo test also significantly increased development time would replace statement aswith awful awful rust x j j j b j final ndarray version would look like ergonomic rust b clearly intermediary step could skipped direct translation possible wrote regex replace fortran array indexing syntax array x z nested vecs rust array x z ndarray syntax array x z would far simpler conversion decision bad enough also wasted time writing several function convert byte slice nested vecs fortran memory layout ndarray builtin preset fortran shape stridesone issue arose testing due accumulation small error floating point math result would slightly different operating system hardware configuration made fantastic snapshot testing tool insta unsuitable instead ndarray serde approx feature flag used read serialised array disk compare approximately test working welloptimizingparallelisationfundamentally problem one may described embarrassingly parallel assumption made going project early discussion involved expectation improvement university cluster ideally would want many large chunk independent computation operating small amount data making easy distribute work across thread gpus potentially different machine unfortunately learned problem quite far idealthe outermost loop advance time therefore strictly sequential primary function program srcnhswpsadvancers advance large portion iterated twice also strictly sequential lowerlevel function perform operation individual layer parallelised completely generally complex function finish quickly returning sequential execution amdahl law come affect describing even everything parallelised fundamental limit scaling ever achievememory bandwidth issuesthroughout program several kind operation performed array transformation physical spectral common involving calling fourier transform function swapping ax many operation simple addition subtraction multiplication array sometimes including constant result simple operation performed large amount data believe resulting memory bandwidth bottleneck hypothesis explains simd improve performance performance significantly improved parallelisation take several cycle perform floating point add mul instruction even ten gigabyte per second memory bandwidth insufficient keep cpu fed performing operation instruction improve performance even though operation may performed several float simultaneously limit still quickly may read memory slightly complicated multithreaded context improvement performance perhaps due multiple thread able increase amount data read memory program also cacheunfriendly reading large amount data perform simple fast operation reading new data several gigabyte size even individual layer even close able reside ondie cache unsure might collect proof hypothesis believe explains great deal behaviour witnessed throughout projectgpu unsuitabilitythere also hope beginning project gpus could used two main reason unsuitablefirstly gpus large amount vram simply available edit wrong commercial gaming workstation gpus get large plenty datacentre option like radeon pro ssg really interesting product memory bandwidth ssd storage entirely insufficientthe second reason issue nature problem gpus excellent surprisingly computation similar graphic rendering applying transformation many piece data shallowwater several fft routine hot path read write individual element array performant executed gpu edit yeah wrong said told fft routine slightly modified general fft library would workbenchmark analysisi benchmarked two version varying input size plotted result shown graph input element rust version faster outside overtaken fortran versioni guessing fortran faster small input due threading overhead faster large input contention thread cache line memory bandwidthconclusioni made decision rewrite rust even though rewriting legacy code rarely good idea basis compile time safety check would save time extensive library ecosystem would make testing implementing gpu acceleration user interface improvement much easier faster several occasion compiler saved would vast amount debugging preventing writing threadunsafe code initially believed safeunfortunately assumption take account problem may parallel amenable gpu acceleration initially believed project assigned overall pleased performance improvement achieved despite
3,Lobsters,fortran,Fortran programming,"Map, Filter, Reduce in Fortran 2018",https://milancurcic.com/2019/05/22/map-filter-reduce-in-fortran-2018.html,map filter reduce fortran,medium turing award lecture map functionalfortran filter gnu fortran documentation pack pack pack array array rank one reduce argued reduce fortran reduce opencoarrays implementing reduce function summary map filter functionalfortran reduce functionalfortran reference nik shuliahin,also medium purely functional language fortran allows programmer express functionally john backus original creator fortran ibm argued functional programming turing award lecture map filter reduce core tool functional programmer allow solve problem chaining recursive function instead piling doloops ifblocks one top another map applies function elementwise arbitrary array filter applies function array return element meet criterion defined function reduce often also called fold applies reduction operation array return scalar result fortran offer almost outofthebox support map filter reduce pattern article explains map let start map higherorder function applies function f element array x return resulting array given function f array x typical syntax map f x expression return array size x first look fortran anything like map standard library however fortran similar functionality built language since fortran standard elemental procedure elemental procedure allow define procedure operate scalar array time minimal though terribly useful example pure elemental real function square x real intent x square x end function square square return however elemental attribute make function surprisingly powerful without modification code apply square array square return apply square array rank fortran support array never used dimension sure application domain make good use manydimensional array however elemental originally came restriction make procedure elemental recursive wanted apply recursive function array resort doloop made map available part functionalfortran say recursive function ubiquitous textbook example fibonacci function pure recursive integer function fibonacci n result fib integer intent n n fib else n fib else fib fibonacci fibonacci end end function fibonacci prior fortran specify attribute recursive function used recursively however tried make function recursive elemental get scolded compiler soon enough output gfortran pure elemental recursive integer function fibonacci n result fib error elemental attribute conflict recursive attribute humanreadable rendering update fortran standard john reid writes restriction elemental recursion intended make elemental procedure easier implement optimise recursion become normal needed mean fortran finally drop restriction recursive procedure also elemental however compile program iso standard compiler developer implement feature still resort homecooked map pure function map f x procedure fint f mapping function integer intent x input array integer map size x map f x size x end function map whole function loop element x apply function f wrapped array comprehension result array map socalled automatic array assumes size x default allocated stack work though still need define interface procedure f interface pure integer function fint x integer intent x end function fint end interface recursive function want apply fibonacci map use advertised example map fibonacci yield result get fibonacci number say map fibonacci n n map function element array else would filter result filter filter asks function return logical fortran word boolean true false given input value common example function used demonstrate filtering number even odd pure logical function even n integer intent n mod n even true else even false end end function even let define higherorder filter function get even number array integer filter even x like map filter constructed existing fortran building block since fortran function pack standard library gnu fortran documentation pack read pack pack array array rank one description store element array array rank one sound like meant unroll flatten come numpy world multidimensional array onedimensional array keep reading though beginning resulting array made element whose mask equal true afterwards position filled element taken vector ok element syntax pack namely argument mask optional vector understand need look complete syntax pack result pack array mask vector square bracket indicate optional syntax doc go describe argument array shall array type mask shall array type logical size array alternatively may logical scalar vector optional shall array type array rank one present number element vector shall equal greater number true element mask mask scalar number element vector shall equal greater number element array turn pack thing filter except instead filtering function pas logical array say element original input array return great mean filter could defined syntacticsugar kind wrapper around pack pure function filter f x procedure fintlogical f int logical function integer intent x input array integer allocatable filter integer filter pack x f x size x end function filter declare filter allocatable array since know size ahead time however need allocate explicitly use automatic allocation assignment neat feature fortran note allocatable array result allocated heap likely cause performance hit relative automatic array typically go stack use procedure fintlogical input argument need define interface first interface body interface pure logical function fintlogical x integer intent x end function fintlogical end interface covered map filter combine map recursive function element array filter result applying filtering function result filter even map fibonacci n n snippet take integer array x computes fibonacci number element filter even number lot yield result reduce mapped function input array filtered result last step apply reduction operation array get scalar result reduction folding recursively applies binary operation element array order exhaust array reach final scalar result common example fortran function perform reduction array sum product minval maxval admittedly reduction tad difficult get head around compared map filter guido van rossum argued reduce python difficult reason reduction unless operation extremely simple one addition multiplication case argued including sum product function standard library whereas reduction complex would clearly expressed list comprehension reduce code totally try see like let see use fortran today fortran reduce fortunately functional fortranners fortran brings new reduction intrinsic fortran word builtin standard library function reduce two form function reid reduce array operation mask identity ordered reduce array operation dim mask identity ordered input array type rank second argument pure function two argument result type array form used dim indicates one dimension along perform reduction result array rank reduced one relative input array mask logical array filter input array much like builtin function pack identity fallback value result take input sequence empty finally ordered true reduction applied lefttoright otherwise compiler assume operation commutative evaluate reduction optimal way find builtin reduce function look quite useful flexible however recent addition language may stable release gfortran support need roll implementation note parallel reduction coreduce supported ready use gfortran opencoarrays work well practice implementing reduce function let implement custom reduce highorder function allow u following result reduce add filter even map fibonacci x add function add two integer scalar first argument function use reduction operation second argument input array third argument starting value get bit single line compute sum even fibonacci number reduce applies binary function operator element array recursively code lefttoright reduction socalled leftfold pure recursive integer function reduce f x start result re procedure f integer intent x start size x re start else re reduce f x f start x end end function reduce interface function take two integer return integer result pure integer function x integer intent x end function start starting value use applying reduction first element x also value result input array empty intrinsic function sum could written reduce add x product function could written reduce mul x note start argument made optional python functoolsreduce example alternatively also apply reduction array element righttoleft also called rightfold pure recursive integer function reduceright f x start result re procedure f integer intent x start size x re start else re f x reduceright f x start end end function reduceright left versus rightfold defines associativity operation f example leftfold evaluate sum whereas rightfold evaluate order irrelevant particular case matter reduction floatingpoint array applying noncommutative function put piece together write integer allocatable x x n n print reduce add filter even map fibonacci x result another example common reduction operation fortran programmer often us intrinsics test value boolean array true respectively think context reduce could written reduce x false reduce x true respectively get creative cool stuff reverse sort array finally use production paper universality recursive reduction graham hutton wrote program written using fold le readable program written using explicit recursion constructed systematic manner better suited transformation proof thus using recursive reduction likely lead expressive cleaner code composition small building block also le readable difficult reason merely due recursive iterative try recurse head easy functional pattern recursion general may come performance hit fortran simply due fact pattern used much legacy fortran historically ranked highly priority list compiler developer usual recommendation hold use pattern intuitive point writing smart code understand look year later profile code using functional pattern production may le computationally efficient imperative implementation may vary wildly compiler vendor summary although immediately obvious fortran provides almost complete outofthebox support mapfilterreduce pattern map use elemental function defined scalar operate elementwise array rank prior fortran restriction elemental function recursive restriction lifted think good reason cook implementation map write function elemental write language map f x fortran f x beauty filter use builtin function pack together array comprehension eg pack x f x size x use filter function functionalfortran library array comprehension verbose reduce fortran brings reduce serial coreduce parallel standard library compiler support reduce use custom implementation reduce article use one fold implementation functionalfortran reference cover photo nik shuliahin
4,Lobsters,fortran,Fortran programming,Fortran Programming Language,https://fortran-lang.org/,fortran programming language,join u mailing list mailing list discourse fortranlang discourse twitter r feed r feed open source github,join u mailing list subscribe mailing list discus anything fortran related announce fortran project discus development core fortranlangorg project stdlib fpm get latest news discourse join discussion thing fortran fortranlang discourse twitter r feed r client follow r feed open source contribute code report bug request feature github
5,Lobsters,fortran,Fortran programming,"Comparison of some programming languages implementing ""Open-Ended Dice Rolls"" (O6)",https://github.com/isene/O6,comparison programming language implementing openended dice roll,amar rpg wbsite julia thread popped,openended roll implemented various programming language work like roll sixsided dice roll roll dice rolled add original roll making roll dice adding original roll roll original roll roll dice subtracting original roll keep rolling subtracting end rolling two consequtive indicates fumble two consequtive indicates critical roll limit result get open ended dice roll including negative result see amar rpg wbsite original code far seems forth compact code vimscript fortran verbose julia nim perhaps humanly readable although prefer program ruby focal julia thread popped lot attack angle really clever julia code took one included far coolest seen implementation
6,Lobsters,fortran,Fortran programming,fortran-lang/stdlib - Fortran Standard Library,https://github.com/fortran-lang/stdlib,fortranlangstdlib fortran standard library,fortran standard library goal motivation http workflow started workflow scope getting started get code requirement http githubcomaradifypp build cmake build make documentation http stdlibfortranlangorg ford spec wiki contributing link,fortran standard library goal motivation fortran standard published iso http standard library goal project provide community driven agreed upon de facto standard library fortran called fortran standard library stdlib rigorous process stdlib developed documented workflow stdlib specification reference implementation cooperating fortran standard committee eg effort started committee repository plan continue working committee future step workflow document committee want standardize feature already available stdlib would base stdlib implementation scope goal fortran standard library achieve following general scope utility container string file osenvironment integration unit testing assertion logging algorithm searching sorting merging mathematics linear algebra sparse matrix special function fast fourier transform random number statistic ordinary differential equation numerical integration optimization getting started get code git clone http githubcomfortranlangstdlib cd stdlib requirement preprocessor fypp http githubcomaradifypp needed metaprogramming used installed using command line installer pip build cmake cmake b build cmake build build cmake build build target test build make alternatively build using provided makefiles make f makefilemanual documentation documentation work progress see issue currently available http stdlibfortranlangorg includes api documentation automatically generated static analysis markup comment source file using ford tool well specification document spec proposed feature discussion prototype proposed apis along list popular open source fortran project available wiki contributing link
7,Lobsters,fortran,Fortran programming,Running for WG5 Convenor Announcement,https://ondrejcertik.com/blog/2020/04/running-for-wg5-convenor-announcement/,running convenor announcement,platform cv repository,running convenor announcement april decided run convenor international fortran committee chair written platform document explains running issue see propose work committee address see also cv developed platform many fortran community member inside outside fortran committee furthermore also posted platform github repository encourage anyone open issue pull request pr discus refine platform platform detail would convenor selected main goal focus original mission fortran still mission today enable scientist engineer domain expert write program naturally express mathematics algorithm employed portable across hpc system remain viable decade use extract high percentage performance underlying hardware achieve mission committee increase engagement fortran user national lab academia industry elsewhere understand underlying reason many effort moving away fortran address fully expeditiously common feedback hear fortran user want code run modern hardware outlined always fortran mission unfortunately mission currently falling short example fortran currently clear path forward fully leverage gpus part hpc system today personally seen several project moving away fortran reason another example relative lack library ecosystem developer tool around fortran compared modern language order start delivering mission need substantially improve compiler tooling around fortran need work wider user community deliver usedrequested capability given background largescale scientific application software development tooling believe bring user perspective committee hope opportunity convenor make reality working committee implement item platform cultivating climate openness listening cooperation accomplish common goal facilitating collaboration wider fortran community lay groundwork address major challenge gpu support u addressed fully expeditiously efficient productive collaboration fortran user compiler vendor committee
8,Lobsters,fortran,Fortran programming,Flang upstreamed (previously called F18),https://github.com/llvm/llvm-project/tree/master/flang,flang upstreamed previously called,flang http http githubcomflangcompilerflang getting started doc directory compiler overview fortran c programmer fortran grammar openmp grammar document discussion intrinsics runtime descriptor style guide flang us modern c feature markdown style guide llvm supported c compiler building flang tree llvm dependency http llvmorgdocsgettingstartedhtml building flang gcc building flang clang installation directory build type build flang tree run test http wwwllvmorgdocstestingguidehtml regressiontests http wwwllvmorgdocstestingguidehtml unittests tree build tree build generate documentation generate fir documentation generate doxygenbased documentation generate sphinxbased documentation http sphinxdocorg,flang flang groundup implementation fortran front end written modern c started project http aim replace previous flang project http githubcomflangcompilerflang address various deficiency subsequently accepted llvm project rechristened flang getting started read flang doc directory start compiler overview better understand fortran language specific grammar accepted flang read fortran c programmer flang specification fortran grammar openmp grammar treatment language extension covered document understand compiler handling intrinsics see discussion intrinsics understand flang program communicates library runtime see discussion runtime descriptor interested contributing compiler read style guide also review flang us modern c feature interested writing new documentation follow markdown style guide llvm supported c compiler flang written code compiled tested gcc version code compiled tested clang version using either gnu libstdc llvm libc code compiled server rhel macos mojave xcode apple clang version code compile window compiler support building flang tree instruction building flang separately llvm building flang alongside llvm follow standard llvm build instruction add flang llvmenableprojects instead detailed llvm dependency instruction build llvm found http llvmorgdocsgettingstartedhtml building flang part llvm follow instruction add flang llvmenableprojects highly recommend using compiler compile llvm flang flang cmakelisttxt file us variable llvmdir find installed llvm component variable mlirdir find installed mlir component get correct llvm mlir library included flang build define llvmdir mlirdir cmake command line llvm llvmbuilddir libcmakellvm mlir llvmbuilddir libcmakemlir cmake dllvmdir llvm dmlirdir mlir llvmbuilddir toplevel directory llvm built building flang gcc default cmake search g path g version must one supported version order build flang cmake use variable cxx find c compiler cxx include full path compiler name found path eg assuming path export cmake building flang clang build flang clang cmake need know find clang gcc library tool used build clang cxx include full path clang clang found path export cxxclang installation directory specify custom install location add dcmakeinstallprefix installprefix cmake command installprefix path flang installed build type create debug build add dcmakebuildtypedebug cmake command debug build execute slowly create release build add dcmakebuildtyperelease cmake command release build execute quickly build flang tree cd flangbuild cmake dllvmdir llvm dmlirdir mlir flangsrc make run test flang support different category test regression test http wwwllvmorgdocstestingguidehtml regressiontests unit test http wwwllvmorgdocstestingguidehtml unittests tree build run test cd flangbuild cmake dllvmdir llvm dmlirdir mlir flangsrc make test checkall run individual regression test llvmlit need know lit configuration flang parameter charge flangsiteconfig flangconfig set shown bellow pathtollvmlit llvmlit param flangsiteconfig pathtoflangbuild testlitlitsitecfgpy param flangconfig pathtoflangbuild testlitlitcfgpy pathtofortrantest unit test flang built dflangincludetestson default possible generate unittests note unittests skipped llvm install outoftree build include googletest related header library various way run unittests make checkflangunit make checkall make checkflang pathtollvmlit llvmlit testunit invoking test outoftree flang build unittests respective unit test folder tree build flang built dflangincludetestson default possible generate unittests run flang unit test use checkflangunit target make checkflangunit run flang regression test use checkflang target make checkflang generate documentation generate fir documentation flang built dlinkwithfiron default possible generate fir language documentation running make flangdoc create docsdialectfirlangrefmd flang build directory generate doxygenbased documentation generate doxygenstyle documentation source code pas dllvmenabledoxygenon dflangincludedocson cmake command cd llvmprojectbuild cmake dllvmenabledoxygenon dflangincludedocson llvm make doxygenflang generate html builddir toolsflangdocsdoxygenhtml flang doc generate sphinxbased documentation flang documentation preferably written markdown md syntax restructuredtext rst format well markdown recommended first place mostly meant processed sphinx documentation generation system create html page would hosted webpage flang updated periodically would like generate view html locally install sphinx http sphinxdocorg pas dllvmenablesphinxon dsphinxwarningsaserrorsoff cmake command cd llvmprojectbuild cmake dllvmenablesphinxon dsphinxwarningsaserrorsoff llvm make docsflanghtml generate html browser builddir toolsflangdocshtml
10,Lobsters,fortran,Fortran programming,Finite element software for numerical solution of partial differential equations,https://github.com/ElmerCSC/elmerfem,finite element software numerical solution partial differential equation,join github today sign file permalink elmer fem download binary documentation compiling macos http githubcomelmercscelmerfemgit ubuntu licencing social computational glaciology elmerice topic resource reload reload,official git repository elmer fem software dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time elmer fem official source code repository elmer fem software suite elmer finite element software numerical solution partial differential equation elmer capable handling number equation therefore ideally suited simulation multiphysical problem includes model example structural mechanic fluid dynamic heat transfer electromagnetics user also write equation dynamically linked main program elmer consists several part important one elmersolver finite element solver elmergui graphical user interface elmergrid mesh creation manipulation tool also visualization tool elmerpost included package longer developed download binary may download binary virtual machine documentation may find pdfs documentation compiling macos download repository either az zip file via github using git clone http githubcomelmercscelmerfemgit go downloaded directory mkdir build cd build install homebrew install gnu gcc brew install gcc install cmake brew install cmake without mpi elmergui install brew install install qwt brew install cmake withopenmp booleantrue withmpi booleantrue withelmergui booleantrue elmerpost make make install ubuntu install dependency sudo apt install git cmake buildessential fortran libopenmpidev libblasdev liblapackdev without mpi elmergui make sudo make install executable usrlocalbin folder may add path licencing elmer software licensed gpl except elmersolver library licensed lgpl license elmer mainly developed csc center science finland however numerous contribution organization developer well project open new contribution information elmer licensing social follow elmerfem twitter ask question reddit computational glaciology elmerice official git repository elmer fem software topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
11,Lobsters,fortran,Fortran programming,FORTRAN.io,https://fortran.io/,fortranio,history,history fortran foundational language use today fortran never left u run mainframe today ash ash dust dust fortran javascript back fortran
12,Lobsters,fortran,Fortran programming,Programming in Modern Fortran,https://cyber.dabamos.de/programming/modernfortran/,programming modern fortran,,
13,Lobsters,fortran,Fortran programming,Passing the age of retirement: our work with Fortran and its compilers,https://www.codethink.co.uk/articles/2019/passing-the-age-of-retirement-our-work-with-fortran-and-its-compilers/,passing age retirement work fortran compiler,fortran ibm fortran various compiler compiler ifort xl compiler gnu compiler compiler gfortran free open source software fo red hat fortran iv would like learn get touch sharing technical knowledge codethink attend local open source meetups,image fortran coding form obvious reason obsolete public domain wikimedia fortran turning november though programming language may conjure image punch card roomsized computer certainly dead originally developed ibm early scientist engineer hence name formula translation found early success target audience last six decade remained popular choice scientific circle since subject several revision updating modernising featureset latest revision fortran little year old though may seem ancient fortran still used today along update language update various compiler turn humanreadable code machine code taken place last halfcentury popular one today compiler ifort xl compiler gnu compiler compiler gfortran preferred different purpose application consensus seems former two best creating efficient optimised executables whilst gfortran useful debugging unlike offering gnu fortran compiler free open source software fo popular fo compiler language available today feature full support fortran partial support prior subsequent revision language always case even recently year ago support fortran almost nonexistent though remains spotty seen noticeable improvement since though gfortran may popular proprietary offering production environment mean choice worth considering might even better choice produced larger company may something codebases said company come million line code legacy code nonstandard code using opensource software becomes le luxury practicality thanks availability source code group developer dig code modify meet end case one client whose current working version gfortran includes dozen significant patch allow compile specific version combination fortran use side maintain patch make sure compiler get update still compile code however also try upstream said patch upstreaming change opensource program good samaritanism though something encouraged reason alone sending code back core developer mean integrating rest project company develop software mean take care maintenance le time money spent company result even better one better well doubleedged sword upstreaming code created upstream developer often held high standard everyone downstream get play around wellcrafted highperforming software hand upstreaming code notoriously difficult number project gfortran exception mark eggleston one fortran expert explained need jump lot getting patch ready submission upstream hard enough come project like sending mailing list little daunting patch sent upstream explanation addition code one wait reviewed theory patch good enough simply accepted committed member developer team power practice almost never happens often core developer team return submitter proposed improvement mean going back changing patch address constructive often extensive feedback upstream team ensuring quality code standard newcomer one hardest part working compiler actually understanding work limited say least say eggleston need get hand result tinkering digging code playing around result one expect understand part compiler designed fit together make gfortran sound like pain work truth issue symptom bigger benefit tough exhausting quality control upstream ensures gfortran compiler user beyond enthusiast want use sometimes solution provided competitor like intel additionally though poor documentation make development painful far easier issue deal access source code case proprietary alternative surprising red hat push compiler tool choice thankfully thanks community issue diminished developer quick give advice give thought guide user right direction fact working passion project show warmth treat new looking solution problem though mark relative newcomer gfortran working little year granted commit privilege main repository thanks effort suppose accepted commit group year bad one year seems like awfully short time get grip project like fortran compiler first work language actually decade ago despite transition fortran iv used finished degree fortran bit shock seems happy working language thirty year later rate fortran last century anyway would like learn get touch sharing technical knowledge codethink attend local open source meetups
14,Lobsters,fortran,Fortran programming,"C, Fortran, and single-character strings",https://lwn.net/SubscriberLink/791393/90b4a7adf99d95a8/,c fortran singlecharacter string,subscribing lwn lapack gcc fortran argumentpassing convention cblas lapacke worked unrelated abi issue reported gcc bug responded suggested returned pointed reworked weinberg second law log,benefit lwn subscribersthe primary benefit subscribing lwn helping keep u publishing beyond subscriber get immediate access site content access number extra site feature please sign today jonathan corbetjune calling interface programming language nature ripe misunderstanding different language subtly different idea data passed around misunderstanding often effect making thing break right away quickly fixed others persist year even decade jumping shadow making thing fail problem latter variety recently turned c program passing string fortran subroutine unpleasant effect widely used package like lapack c language famously worry much length string simply extend null byte end fortran though like know size string dealing string passed argument function subroutine gcc fortran argumentpassing convention state length string appended list argument consider fortran subroutine defined something like subroutine foo integer character subroutine called fortran code length added compiler third hidden argument c compiler thing though proper call function c would look like int char bar foo strlen c length must passed explicitly end list argument distant point past though somebody decided hidden length argument omitted singlecharacter string declared character called function example clear fortran compiler anywhere ever implemented behavior developer writing call c developed habit leaving length situation long called code knew getting singlecharacter string would need check missing hidden length parameter everything worked even though calling standard violated various lapack subroutine expect singlecharacter string package like cblas lapacke duly leave length argument calling function supposed called thing worked anyway least broke seems problem originally worked thomas kalibera r language community fix unrelated abi issue caused crash lapack call seemingly great deal analysis work kalibera figured thing go wrong subroutine taking singlecharacter string would call another prior returning passing string compiler would optimize call tail call properly sibling call using parameter prior making jump would helpfully store string length end argument list length nt begin space allocated result unsightly stack traceback problem worked around compiling fortran code option behavior reported gcc bug may thomas koenig responded ouch basically people depending c undefined behavior age includes recent development like lapacke accident calling convention kept working oh code fails new compiler widely understood actually broken working year richard biener suggested solution tell affected user fix code suggestion go far though gcc developer took problem seriously good thing compiler update break code working solution found nt clear best solution would simply reverting abi fix option since would reintroduce real bug discussion option shown real solution koenig returned use said restores status quo thing would go back fragile nonconforming would work suggested option could enabled default gcc version since code question used work built version upcoming gcc release developer would warned would around year fix code unfortunately jakub jelinek pointed solution viable either program performing recursive tail call significant depth turning tail call real function call would cause run stack space crash suggested instead trying avoid tail sibling call string argument involved koenig took work attached new option would enabled default update older gcc release jelinek nt like name option though reworked one called setting option two give behavior setting one default value limit workaround call function without explicit prototype setting zero disables workaround entirely code backported future release far appear well perhaps different default value weinberg second law state builder built house way programmer built program first woodpecker come along would destroy civilization situation like interface function misunderstood year would appear case point lot code system appears work fine really waiting woodpecker come along poke hole right place gcc developer worked patch particular problem certainly still plenty code never worked seems thanks dave williams headsup issue log post comment
15,Lobsters,fortran,Fortran programming,How to make Fortran worse,https://badcode.rocks/2019/147/april-teardown-book-store/,make fortran worse,challenge challenge winner fortran cyrille lavigne pull full source makefile variable name subroutine bogus gotos goto recursion affordances conclusion challenge,time announce winner challenge teardown still short amount time left send submission challenge get quick winner fortran cyrille lavigne may want pull full source follow along makefile included makefile much verbose besides using unneeded gnu make extension also defines several thing already builtin even posix make simply written way fflags ffixedform stdlegacy libr librf phony clean clean rm libr make example default variable rm containing local rm f equivalent original clean rule written possibly delete sort file makefile generate make also default rule compiling f file using default system fortran compiler match exactly command previously included variable name fortran fairly short length requirement identifier even many chosen identifier great dimension ibskt istck mxstck idscnt igrps mxgrps character outp ngrps within limit named helpfully dimension basket stack mxstck discnts group mxgrps character output ngroups sp prefix many traditional also meaningful fortran indicate type inferred integer specified otherwise however explicitly declaring variable using integer sp etc possible preferred neither tradition laziness great excuse sticking bad kind naming especially identifier length premium one wasting entire character subroutine reading code would forgiven thinking fortran lacked kind named procedure however despite everything program done using goto repetitive inlined code even fortran subroutine function facility using even something simple inline stack manipulation make much clearer going ibskt j ngroups call push call push call push j call push ngroups â goto â else icmfrm stack stack j stack ngroups stack stack ngroups pop j pop pop icmfrm pop fact refactor fully complete becomes clear see even snippet entire variable original unneeded bogus gotos also complete abuse goto implement kind control flow fortran perfectly capable egregious â true c â â goto â end â end â continue goto cleanly replaced exit stop loop also incredibly confusing snippet â ibskt ii â goto â end end code labelled jump back code full analysis algorithm reveals replaced something like â jj â â jj jj ibskt ii â end â jj c code run basket empty longer need goto else c code previously labelled longer need label â end goto recursion affordances possibly one surprising feature submission goto jump two different place inside loop read code might used reading language take time unravel could even mean however author left helpful clue form push onto stack data structure point jumped pop data structure goto happens done much assembly programming well except microcontrollers likely recognize pattern call stack procedure similar call push goto pop go back code simulating subroutine goto already established bad pattern program however actually reason code trivially rewritten use fortran builtin subroutine code implementing recursive call fortran allow function subroutine call even indirectly mean algorithm work way form trickery going needed sure could cleaned use stacktrampoline sort construct outside properly isolated subroutine machinery would remain would affect program subroutine could cut instead allowing cut however make logical sense readability first seems like harsh reality fortran support needed language feature code necessarily complex result judge code bad unless could written better however could absolutely could written better nothing inherently recursive given problem fact submission used recursion solve even problem naturally best solved using recursive way thinking way implement recursive algorithm without dropping simulate recursive procedure call example depthfirst search recursive algorithm frequently implemented using loop stack many programming language author fell classic antipattern ignoring affordances language programming language language different one lend expressing solution different way rather asking way fortran want express author brought baggage another environment failed imagine alternate implementation lack imagination led implement poorly especially given massive fixedsize preallocated stack language feature miss simply problem expressed mechanically similar way imagine might otherwise written result similar cpu different human reader conclusion think worse submission challenge still open june challenge going soon
16,Lobsters,fortran,Fortran programming,Why We Created LFortran,https://lfortran.org/blog/2019/04/why-we-created-lfortran/,created lfortran,lfortran almost new scientific engineering software project started fortran kokkos fortran usage fix interactivity cling compiler arb bootstrap sympy trackbacks,recently open sourced lfortran interactive fortran compiler built top llvm developing last year work progress link find work already planned roadmap motivation almost new scientific engineering software project started fortran usually neck wood c chosen instead following cited reason choice lack gpu support kokkos equivalent need advanced data structure multidimensional array better modern tool c testing ide support lack generic programming fortran eg write single subroutine work single double precision library one readily use c c actively maintained wide community fortran bad reputation c department fortran usage fortran used popular language scientific computing way early lack interactivity forced many new user pick language tool including matlab later python julia growing lack modern tool growing failure fortran compiler develop full potential gpu support ide support etc forcing developer large production code move c fix interactivity one approach take language like python try make fast possible preserving interactivity ease use one forced modify language bit compiler reason type approach julia took approach take current compiled production language c fortran try see interactive one make without sacrificing speed ie without modifying language c done using cling interactive compiler however c syntax intuitive fortran python similar syntax array operation fortran language used interactively eg jupyter notebook allows similar look feel python matlab enabling rapid prototyping exploratory workflow code however offer superior performance compiled good mature compiler intel fortran compiler fortran compiler believe root problem lack modern fortran compiler following feature open source permissive license create executables static dynamic binary interactive usage jupyter notebook multiplatform first class native support window mac linux hpc work well especially c also fortran compiler msvc g clang gfortran intel gpu support similarly numba work gpu via llvm able compile latest fortran standard designed library modular design priority easy contribute large active community around compiler contributes development thus supporting many tool people build top ide support language interoperability automatic wrapper language c c python julia matlab code refactoring automatic transformation code older fortran standard fortran compiler compile allowing developer use latest standard still able use current fortran compiler better debugger ipythonembed fortran new real type arbitrary precision floating point automatic differentiation type interval arithmetic arb etc safe mode compiler warn obsolete usage check array pointer thing never segfault debug mode allow project restrict fortran feature allowed allowed particular project compiler give error ci new pull request contains forbidden code compiler catalyze creation modern tool based nurturing encouraging community build upon potential make fortran cool currently lot fortran user use fortran legacy code necessarily excited aim lfortran make people want use fortran want try newest toy whether jupyter notebook interactive debugging nice ide support matlab julia python style interactive exploratory development workflow etc bring excitement new modern thing fortran however underneath still old fortran one still use mature stable welltested fortran compiler produce highly optimized binary intel fortran still stateoftheart come performance bootstrap first user people develop algorithm python matlab julia initially ok subset fortran work build community user eventually developer fortran compiler support feature whole fortran standard work take year however compiler parse gfortran module file soon possible literally use module compiled gfortran interactively allow use production code right away also anything lfortran yet implement one could simply write module compile gfortran use lfortran ondřej started sympy facing analogous challenge computer algebra system maximum axiom others notorious huge complicated hard contribute thus small developer community hard use library starting project scratch would mean would take year sympy library could usable user used rich mature feature maple mathematica maximum axiom ondřej done anyway first user people needed subset feature wanted use modern welldesigned library easy use easy develop developing lfortran way first subset fortran implemented library either delivers close delivering feature listed interactivity language interoperability etc make useful first user recruit developer first user approach attract developer compiler us modern design technology llvm interactivity compiled language jupyter notebook simple syntax semantic representation language etc fortran already large community advantage people already know fortran also disadvantage lfortran become useful current fortran community several year want recruit initial community python matlab julia user know appreciate advantage exploratory work develop new research algorithm lfortran becomes mature current fortran community able use also expect main key factor fortran uptake people see use fortran modern way like python julia providing modern nice feature tool compiler attracting talent python scientific community well compiler community llvm trackbacks
17,Lobsters,fortran,Fortran programming,f18 Fortran compiler and runtime accepted as part of LLVM project,https://lists.llvm.org/pipermail/llvm-dev/2019-April/131703.html,fortran compiler runtime accepted part llvm project,llvmdev accepted part llvm project llvmdev listsllvmorg information llvmdev mailing list,llvmdev accepted part llvm project chris lattner via llvmdev llvmdev listsllvmorg wed apr pdt hi everyone community discussing whether fortran compiler runtime project accepted part llvm project discussed detail llvm foundation board director recently approved inclusion project foundation recommends considering new name project eg flang simply fortran accessible obvious new contributor addition repository name also base stem mailing list project related material folk discus come decision work llvmadmin team set requisite infra board also recommends evaluate time whether reasonably possible eliminate dependence feature using blocker inclusion project blocker certain infrastructure eg build bot integration official release may may relevant given early state case behalf llvm foundation welcome project congratulation really great see new effort compiler runtime included llvm project chris lattner behalf llvm foundation information llvmdev mailing list
18,Lobsters,fortran,Fortran programming,LFortran: an interactive fortran compiler,https://docs.lfortran.org/,lfortran interactive fortran compiler,lfortran documentation http lfortranorg http gitlabcomlfortranlfortran feature highlight development status work today interactive jupyter support static interactive clean modular design usable library design developer tutorial interoperation gfortran create executables run linux mac window planned native interoperation language fortran compiler modern hardware support full fortran support issue tracker roadmap,lfortran documentation lfortran modern opensource bsd licensed interactive fortran compiler built top llvm execute user code interactively allow exploratory work much like python matlab julia well compile binary goal run user code modern architecture multicore cpu gpus website http lfortranorg main repository http gitlabcomlfortranlfortran try online using binder feature highlight lfortran development feature work today feature implemented also check development status section information feature supported worked work today interactive jupyter support lfortran used jupyter fortran kernel allowing pythonjulia style rapid prototyping exploratory workflow see static interactive example notebook used commandline interactive prompt repl clean modular design usable library lfortran structured around two independent module ast asr standalone completely independent rest lfortran user encouraged use independently application build tool top see design developer tutorial document detail interoperation gfortran lfortran parse gfortran module file asr generate fortran wrapper compiled fortran compiler linked original gfortran compiled module create executables create executables like fortran compiler run linux mac window three platform regularly tested ci planned feature development link corresponding issue track progress following native interoperation language fortran compiler automatically call code written language c python using use statement see understands fortran compiler module file one use abi link correctly gfortran supported compiler planned see allows use lfortran production code today modern hardware support thanks llvm goal lfortran run modern hardware take advantage native fortran language construct concurrent run multicore cpu gpus see full fortran support currently subset fortran implemented goal full implementation latest fortran standard see please vote issue issue tracker want u prioritize feel free create new one missing anything roadmap roadmap get planned feature implemented port code generation use asr pas current test remove old code generation old semantics used annotate ast tree messy get gfortran module file working use module assumedsize assumedshape array allow right away use production code lfortran time implement fortran feature eventually full fortran supported b gradually move c robustness speed python api change minimally user experience python change c implement cool feature use module c python automatic wrapper modern hardware support generating older standard fortran fortran doctest feature sympy integration language service ides idea step internal refactoring take long step allow lfortran used interactively production code right away production code get compiled gfortran one us module lfortran functionssubroutines interactively called module use gfortran supported feature api must fit subset lfortran understands large number application simple functionssubroutines array argument enough make lfortran usable first user one always use gfortran temporarily lfortran support given feature expect finished step end summer hopefully sooner finally step improve lfortran overall allowing first user contribute back growing community making lfortran gradually useful people
19,Lobsters,fortran,Fortran programming,Using Hammock Graphs to Structure Programs (2004),https://biblio.ugent.be/publication/291746/file/451220.pdf,using hammock graph structure program,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj page r type catalog acroform r endobj obj field r r r r r r r dr r da helv tf g endobj obj v filter flatedecode length r stream c l endstream endobj obj endobj obj type page parent r resource r content r r r r r r r r thumb r mediabox cropbox rotate endobj obj procset pdf text font r r r r r r r r r extgstate r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset abstracindextmonenroductwoefsthreehvbmper iodlgoihufkwpyfourplygfivesixwksevenzquoterightc ommav r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset usinghamockgrphtsuepfbzdeperioddquoterightl commaemdashavyzfwjhyphenbqitxwslashrncovlthreez erofourtwoonenineeightfivedollarparenleftparenrightsevencolon mkbraceleftbracerightsixbracketleftbracketrightj r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset membriebequalfocommaaatncperiodipplsudzgnw vcdghry r endobj obj endobj obj filter flatedecode length r stream r z 譬 rqj endstream endobj obj endobj obj type font subtype firstchar lastchar width encoding r basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj length subtype stream endstream endobj obj type encoding difference endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset astrucedpogamiblkhyphennwhfycommaxperioduvh jquoterighttzfqbracketleftonefourbracketrighttwothreeeight isixfiveebparenleftparenrightdjninescoloncsevenzerolessg reaternendashsemicolonbraceleftbracerightquotedblleftquotedblrigh twrlunderscoreequalpogslashasteriskmvxkzdieresisq r endobj obj filter flatedecode length r stream f vz ez endstream endobj obj endobj obj filter flatedecode length r stream aca j αd p pni c ݱi p endstream endobj obj endobj obj filter flatedecode length r stream n p x ܡ b endstream endobj obj endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset gotonezerodenifparenleftbcparenrightlaspruhxperio dwherbcolonnaequalplusfive r endobj obj filter flatedecode length r stream l q n endstream endobj obj endobj obj filter flatedecode length subtype stream ad p endstream endobj obj type encoding difference endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset fperiodzhangiswtplformcpuiccommathreesevensix zeroonefouravemkolrtdehyphencolonzbathdquoterights ygubninetwosemicolonjkneightqxjparenrightlessgreaterbr acketleftbracketrightunderscorewparenleftemdash r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset r endobj obj type font subtype firstchar lastchar width encoding r basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset period r endobj obj filter flatedecode length r stream
21,Lobsters,fortran,Fortran programming,schemetran: Write (modern) Fortran in Scheme,https://gitlab.com/codetk/schemetran,schemetran write modern fortran scheme,,write modern fortran scheme fortran great expressing operation multidimensional array number scheme great expressing coding thought project attempt combine something useful read
22,Lobsters,fortran,Fortran programming,"Happy 60th birthday, Fortran",https://opensource.com/article/17/11/happy-60th-birthday-fortran,happy birthday fortran,hidden figure actively seeking fortran programmer rendering da vinci mona lisa fortran run fortran gpus,fortran compiler introduced april first optimizing compiler paved way many technical computing application year cobol business computing fortran scientific computing fortran may approaching retirement age nt mean stop working year mark anniversary first fortran styled fortran formula translation release even ca nt write single line use fortran every day operational weather forecast model still largely written fortran example focus mathematical performance make fortran common language many highperformance computing application including computational fluid dynamic computational chemistry although fortran may popular appeal newer language language owe much pioneering work fortran development team although fortran may popular appeal newer language language owe much pioneering work fortran development teamin movie hidden figure one character teach fortran see human computer including replaced electronic computer although much early left history fortran persists two year ago nasa began actively seeking fortran programmer work voyager mission last original programmer prepared retire use fortran weather climate modeling geophysics many scientific application mean fortran knowledge remain valued skill year come despite fortran trending search longer taught university missed chance take university fortran course one semester one atmospheric scientist preparing apply graduate school late decided learn programming language called local school university ask whether offered course fortran response laughter taught studying existing code lot google search today maintains old fortran code writes new code daily story becoming prevalent fortran popularity decline great longevity fortran provides wealth learning material well intergenerational bonding first system administration job common task helping graduate student compile fortran code inherited advisor turn inherited advisor colleague mine coincidentally began existing year first draft ibm mathematical formula translating system specification wrote article sharing experience creating rendering da vinci mona lisa fortran another friend told one favorite program undergraduate fortran program created calendar featuring asciiart rendering character peanut comic strip make fortran enduring establishing initial foothold help course language used critical business application give lot staying power wholly rewriting code expensive risky language used critical business application give lot staying power wholly rewriting code expensive riskybut name implies fortran designed translate mathematical formula computer code explains strong presence field deal lot mathematical formula particularly partial differential equation like like technology survived year fortran evolved change language take advantage new paradigm without making rapid change since first industry standard version fortran fortran approved major version occurred fortran approved fortran released iso ansi update fortran fortran released update fortran new revision called fortran expected clearly plan fortran retire anytime soon active project underway make easier run fortran gpus fortran celebrate centennial nobody know know voyager voyager spacecraft carry fortran code beyond reach solar system
23,Lobsters,fortran,Fortran programming,Why physicists still use Fortran,http://moreisdifferent.com/2015/07/16/why-physicsts-still-use-fortran/,physicist still use fortran,language flash siesta open mpi coarrays http benchmarksgamealiothdebianorg comparison several benchmark c fortran fortran legacy code fortran easier physic student learn c point ease fortran array handling feature apl vectorvalued index masking requires following code point ease little need worry pointer memory allocation contain pointer point regarding fortran v c const see instance discussion future survey fortran user brand new language hpc called julia reading ideal hpc programming language fortran faster c implicit none,know programming language year look like know called fortran charles anthony richard hoare circa fortran rarely used today industry one ranking rank behind language however fortran still dominant language large scale simulation physical system ie thing like astrophysical modeling star galaxy hydrodynamics code cf flash large scale molecular dynamic electronic structure calculation code cf siesta large scale climate model etc field high performance computing hpc large scale numerical simulation subset two language use today c modern fortran fortran popular open mpi library parallelizing code developed two language basically want fast code run many processor limited two option modern fortran also feature called coarrays put parallelization feature directly language coarrays started extension fortran incorporated fortran standard heavy use fortran physicist often confounds computer scientist outsider tend view fortran historical anachronism would like article explain fortran still useful language advocating physic major learn fortran since physic major end research time may better invested learning c sticking matlaboctavepython would like explain fortran still used show merely physicist behind time although sometimes true year ago saw physic student working fortran code student adviser unaware fortran computer scientist consider continued dominance fortran numerical computing challenge digging feel obligated discus bit history since many hear fortran immediately think punch card code line number original specification fortran written early fortran designated allcaps fortran modern standard hellish incredible leap forward previous programming done assembly fortran often programed punch card notsofondly recalled prof miriam forman stony brook fortran many revision well known standard often said reason fortran still used fast fastest website http benchmarksgamealiothdebianorg allows comparison several benchmark c fortran benchmark fortran c fastest note python darling computer scientist usually time slower nature interpreted code python unsuited heavy numerical computation highly suited many thing interestingly c beat fortran two benchmark although fairly close however two benchmark fortran win nbody simulation calculation spectrum physicsy result vary somewhat depending whether one compare single core quad core machine fortran lagging bit behind c quad core benchmark fortran much slower c involve process time spent reading writing data fortran known slow altogether c fast fortran often bit faster question really asking physic professor continue advise student use fortran rather c fortran legacy code given long history fortran surprise large amount legacy code physic written fortran physicist usually try minimize amount coding therefore legacy code exists use even old code hard read poorly documented efficient often faster use old validated code write new code physicist business writing code trying understand nature reality researcher usually want take path least resistance professor usually legacy code hand often code wrote decade ago pas code student save student time also take uncertainty debugging process fortran easier physic student learn c overall think fortran easier learn c fortran c similar fortran easier code reason discus c fairly primitive language physicist go c route tend look object oriented coding object oriented coding useful especially massive software project take significantly time learn one learn abstract concept like class inheritance paradigm object oriented coding different procedural paradigm used fortran fortran based simple procedural paradigm closer actually happens hood inside computer optimizing vectorizing code speed procedural paradigm seems easier work physicist generally understanding computer work inclined think term physical process transfer data disk ram ram cpu cache contrast mathematician prefer think term abstract function logic also contrast way one think object oriented code optimizing object oriented code seems difficult procedural code object bulky structure compared physicist data structure choice array point ease fortran array handling feature array physicsspeak matrix lie heart physic calculation fortran incorporates array handling feature similar apl matlaboctave array copied multiplied scalar multiplied together quite intuitively b b c b b exp norm sqrt sum b c array dimension instance could c b give elementbyelement multiplication b assuming b size matrix multiplication one would use c matmul b almost intrinsic function fortran sin exp ab floor etc take array argument leading easy use neat code similar c code simply exist base implementation c merely copying array requires cycling element loop call library function trying feed array wrong library function c return error use library instead intrinsic function mean resulting code never neat transferable easy learn fortran array element indexed using simple syntax x z whereas c one use x z array indexed starting conforms way physicist talk matrix unlike c array start following fortran code show array feature b c b first vector created using implicit loop also called array constructor next vector b created every element using stride subscript finally array b copied array c starting element fortran support declaring array index zero negative double precision dimension myarray negative index may sound silly heard useful imagine negative index area extra space annotation fortran also support vectorvalued index instance extract element array array b using subscript b subscript fortran also incorporates masking array intrinsic function instance want take log matrix element greater zero use logofa log mask gt alternatively may want take negative point array set done one line using command myarray lt myarray dynamically allocating deallocating array fortran easy instance allocate array real dimension allocatable nameofarray allocate nameofarray xdim ydim c requires following code int array array malloc nrows sizeof double lt nrows array malloc ncolumns sizeof double deallocate array fortran use deallocate nameofarray c lt nrows free array free array point ease little need worry pointer memory allocation language like c variable passed value unless array passed reference however many scenario passing array value may make sense consider data consists position molecule different timesteps may want analyze motion single molecule take slice array subarray corresponding coordinate atom molecule pas function going complicated series analysis subarray used pas reference value pointed going noncontiguous memory way cpu access memory manipulating noncontiguous data slow pas value however create new array memory contiguous instance passing slice large array function operated compiler may create new location memory deemed efficient may fact much efficient array stored cpu cache physicist delight compiler dirty work optimizing memory use fortran variable usually passed reference value hood fortran compiler automatically optimizes passing efficient physic professor fortran compiler much trusted optimizer memory usage physic student result seen physicist rarely use pointer although contain pointer point regarding fortran v c fortran several feature allow programmer give information compiler assist debugging optimization way coding error caught compiletime rather runtime instance variable declared parameter something change parameter ever changed code compiler return error c something similar called const similarly fortran also intent specification tell compiler whether argument passed function subroutine input output input output use intent specifier help compiler optimize code increase code readability robustness similar thing done c assist optimization people online complain syntax confusing see instance discussion similar feature fortran used varying degree assist compiler instance fortran introduced idea declaring function pure pure function side effect change variable argument function global variable special case pure function elemental function function take scalar argument return scalar meant operate element array knowledge function pure elemental lead additional optimization compiler especially code parallized future scientific computation fortran remains dominant going away anytime soon survey fortran user supercomputing convention respondent said thought would still using fortran five year survey also showed large number people using mixed code c overwhelmingly second language anticipating increased mixing fortran c code fortran specification greater feature code interoperability increasingly fortran code called higherlevel code written python computer scientist bash physicist using fortran fail realize fortran remains uniquely suited named formula translation converting physic formula code many also unaware fortran continued develop incorporating new feature time passage albeit slowly calling modern fortran fortran old like calling c old c first developed around hand even modern fortran standard retains backwards compatibility fortran fortran sense continued usefulness fortran challenge computer scientist recently researcher mit decided tackle challenge full force developing brand new language hpc called julia first released julia actually overtake fortran remains seen suspect case take quite long time reading ideal hpc programming language software engineer detailed analysis quite head concludes fortran come closest ideal language hpc fortran faster c first answer stackoverflow question explains fortran assumption aliasing memory make faster c implicit none blog written fortran enthusiast
24,Lobsters,fortran,Fortran programming,A FORTRAN Coloring Book (1978),https://archive.org/stream/9780262610261#page/n1/mode/2up,fortran coloring book,format book,internet archive bookreader fortran coloring book bookreader requires javascript enabled please check browser support javascript enabled browser setting also try one format book
26,Lobsters,fortran,Fortran programming,"xmake v2.3.6 released, Support fortran compilation and go/dlang package dependences","https://github.com/xmake-io/xmake/wiki/xmake-v2.3.6-released,-Support-fortran-compilation-and-go-dlang-package-dependences",xmake released support fortran compilation godlang package dependence,introduction new feature fortran language compilation support fortran example zig language experimental support http githubcomziglangzig zig example go dependency package cross compilation support go example dlangdub dependency package support,version focus improvement support language fortran compilation support experimental support zig language thirdparty dependency package support crosscompilation support golangdlang although xmake focus cc build support language support xmake also make improvement time time main purpose replace official build system support mixed compilation cc better serve cc project cc project still occasionally call code interface language mixed call language cuda dlang objc swift asm etc xmake still provides basic compilation support addition regarding cc also support header file dependency format new sourcedependencies xxxjson output v preview version reliable stable multilanguage header file dependency detection introduction new feature fortran language compilation support starting version fully supported use gfortran compiler compile fortran project quickly create empty project based fortran using following command xmake create l fortran console test xmakelua content follows addrules modedebug moderelease target test setkind binary addfiles src code example viewed fortran example zig language experimental support note present language xmake still experimental support stage perfect example supported window dynamic library compilation linuxmacos yet supported please evaluate use use following configuration method try experience least console static library program linuxmacos still run addrules modedebug moderelease target test setkind binary addfiles src zig window support please refer issue mentioned zig earlier dynamic library support pitfall dynamic library generated zig automatically append see issue http githubcomziglangzig addition lay pit personally feel lot pit still experimental stage time look later example see zig example go dependency package cross compilation support new version xmake continues make improvement go build support crosscompilation go example compile window program macos linux xmake f p window addition new version also initially support thirdparty dependency package management go addrules modedebug moderelease addrequires go githubcomsirupsenlogrus alias logrus addrequires go golangorgxsysinternalunsafeheader alias unsafeheader isplat window addrequires go golangorgxsyswindows alias syshost else addrequires go golangorgxsysunix alias syshost end target test setkind binary addfiles src go addpackages logrus syshost unsafeheader however still imperfection example cascading dependency package must manually configured present bit cumbersome need improved future example see go example dlangdub dependency package support xmake also support dlang dub package management quickly integrate dlang thirdparty dependency package addrules modedebug moderelease addrequires dub log alias log addrequires dub dateparser alias dateparser addrequires dub emsicontainers alias emsicontainers addrequires dub stdxallocator alias stdxallocator addrequires dub mircore alias mircore target test setkind binary addfiles src addpackages log dateparser emsicontainers stdxallocator mircor
27,Lobsters,fortran,Fortran programming,Rewriting FORTRAN Software In Rust,https://mckeogh.tech/post/shallow-water/,rewriting fortran software rust,amdahl law introduction rewrite rewrite legacy code situation different vulnerability microsoft assigns cve year continue memory safety issue translating fortran rust bindgen optimizing parallelisation amdahl law memory bandwidth issue gpu unsuitability radeon pro ssg benchmark analysis conclusion,tl dr rewriting always bad probably amdahl law important memory bandwidth potential bottleneck many simple double precision math operationsintroductionas part undergraduate research assistant scheme first year university tasked parallelising piece shallow water simulation software written fortran dr david dritschel vortex dynamic research group supervision dr alexander konovalov university st andrew secondary goal improving testing infrastructure setting cicd estimating progress allowing computation paused resumedforewarning essentially zero domain knowledge project fluid dynamic simulation exactly kind topic catch research level weekend approached project purely software engineering perspective rust experience using personal project since worked rust software engineer startup berlin year leaving high schooldon rewritedon trewritelegacycodenot hard concept grasp much ambiguity clear line reasoning follow legacy software rewritten well read article written people far experienced knowledgable thought situation differentall joke aside situation reimplementation reasonable option several factor back upfortran undoubtably fast highly suited hpc problem decadesoptimised compiler debugging tooling lack certain feature namely memory safety thread safety data race guarantee ergonomic gpuclitui librarieshaving written parallel software c rust memory safety guarantee easy parallelisation rayon offered rust contrast quite sharply poor experience using openmp replacing iter pariter compiler automatically throw error code thread safe amazing compared adding openmp directive sentinel designed hidden non openmpcompliant fortran compiler manually determining thread memory safety seems good place mention vulnerability microsoft assigns cve year continue memory safety issue believed initially gpus could used accelerate computation another place rust mature ecosystem also shine offered fortran edit completely untrue fortran gpu acceleratin library mature production ready additionally came additional requirement building ncurses interface fortran exactly ergonomic compared library available rust spent time reading original implementation attempted basic parallelisation little success due small error hard diagnose across long execution without snapshot testing across multiple modulesnot several pull factor also absence typical reason rewrite working oneperson team software finalised never needed modified relatively small could rewritten matter month part time live business component uptime upkeep original implementation irrelevantgiven decided would faster rewrite rust able parallelise add feature quickly would plough fortran goahead supervisor got worktranslating fortran rustrelatively straightforward translation existing codebases compiled language rust noted benefit due combination software like perform automatic translation c source rust bindgen automatically generating ffi binding cargo ability compile code language part rust project plenty example large project successfully migrating rust way issue faced would required twostep process first translating fortran c c rust assumed likelihood resulting code would remotely parsable low even get either popular fortran c conversion tool worksince original implementation line total decided go manual translation involved starting base module tree fast fourier transform routine working upwards kept process simple inserting small piece fortran dump state beginning end routine used snapshot test rust implementation resulted thorough robust testing suite invaluble optimization period really made one bad design decision please read git history confirm translation phase thinking nested vecs would easier using ndarray start bad wasted much time abysmal execution speed slowing cargo test also significantly increased development time would replace statement aswith awful awful rust x j j j b j final ndarray version would look like ergonomic rust b clearly intermediary step could skipped direct translation possible wrote regex replace fortran array indexing syntax array x z nested vecs rust array x z ndarray syntax array x z would far simpler conversion decision bad enough also wasted time writing several function convert byte slice nested vecs fortran memory layout ndarray builtin preset fortran shape stridesone issue arose testing due accumulation small error floating point math result would slightly different operating system hardware configuration made fantastic snapshot testing tool insta unsuitable instead ndarray serde approx feature flag used read serialised array disk compare approximately test working welloptimizingparallelisationfundamentally problem one may described embarrassingly parallel assumption made going project early discussion involved expectation improvement university cluster ideally would want many large chunk independent computation operating small amount data making easy distribute work across thread gpus potentially different machine unfortunately learned problem quite far idealthe outermost loop advance time therefore strictly sequential primary function program srcnhswpsadvancers advance large portion iterated twice also strictly sequential lowerlevel function perform operation individual layer parallelised completely generally complex function finish quickly returning sequential execution amdahl law come affect describing even everything parallelised fundamental limit scaling ever achievememory bandwidth issuesthroughout program several kind operation performed array transformation physical spectral common involving calling fourier transform function swapping ax many operation simple addition subtraction multiplication array sometimes including constant result simple operation performed large amount data believe resulting memory bandwidth bottleneck hypothesis explains simd improve performance performance significantly improved parallelisation take several cycle perform floating point add mul instruction even ten gigabyte per second memory bandwidth insufficient keep cpu fed performing operation instruction improve performance even though operation may performed several float simultaneously limit still quickly may read memory slightly complicated multithreaded context improvement performance perhaps due multiple thread able increase amount data read memory program also cacheunfriendly reading large amount data perform simple fast operation reading new data several gigabyte size even individual layer even close able reside ondie cache unsure might collect proof hypothesis believe explains great deal behaviour witnessed throughout projectgpu unsuitabilitythere also hope beginning project gpus could used two main reason unsuitablefirstly gpus large amount vram simply available edit wrong commercial gaming workstation gpus get large plenty datacentre option like radeon pro ssg really interesting product memory bandwidth ssd storage entirely insufficientthe second reason issue nature problem gpus excellent surprisingly computation similar graphic rendering applying transformation many piece data shallowwater several fft routine hot path read write individual element array performant executed gpu edit yeah wrong said told fft routine slightly modified general fft library would workbenchmark analysisi benchmarked two version varying input size plotted result shown graph input element rust version faster outside overtaken fortran versioni guessing fortran faster small input due threading overhead faster large input contention thread cache line memory bandwidthconclusioni made decision rewrite rust even though rewriting legacy code rarely good idea basis compile time safety check would save time extensive library ecosystem would make testing implementing gpu acceleration user interface improvement much easier faster several occasion compiler saved would vast amount debugging preventing writing threadunsafe code initially believed safeunfortunately assumption take account problem may parallel amenable gpu acceleration initially believed project assigned overall pleased performance improvement achieved despite
28,Lobsters,fortran,Fortran programming,"Map, Filter, Reduce in Fortran 2018",https://milancurcic.com/2019/05/22/map-filter-reduce-in-fortran-2018.html,map filter reduce fortran,medium turing award lecture map functionalfortran filter gnu fortran documentation pack pack pack array array rank one reduce argued reduce fortran reduce opencoarrays implementing reduce function summary map filter functionalfortran reduce functionalfortran reference nik shuliahin,also medium purely functional language fortran allows programmer express functionally john backus original creator fortran ibm argued functional programming turing award lecture map filter reduce core tool functional programmer allow solve problem chaining recursive function instead piling doloops ifblocks one top another map applies function elementwise arbitrary array filter applies function array return element meet criterion defined function reduce often also called fold applies reduction operation array return scalar result fortran offer almost outofthebox support map filter reduce pattern article explains map let start map higherorder function applies function f element array x return resulting array given function f array x typical syntax map f x expression return array size x first look fortran anything like map standard library however fortran similar functionality built language since fortran standard elemental procedure elemental procedure allow define procedure operate scalar array time minimal though terribly useful example pure elemental real function square x real intent x square x end function square square return however elemental attribute make function surprisingly powerful without modification code apply square array square return apply square array rank fortran support array never used dimension sure application domain make good use manydimensional array however elemental originally came restriction make procedure elemental recursive wanted apply recursive function array resort doloop made map available part functionalfortran say recursive function ubiquitous textbook example fibonacci function pure recursive integer function fibonacci n result fib integer intent n n fib else n fib else fib fibonacci fibonacci end end function fibonacci prior fortran specify attribute recursive function used recursively however tried make function recursive elemental get scolded compiler soon enough output gfortran pure elemental recursive integer function fibonacci n result fib error elemental attribute conflict recursive attribute humanreadable rendering update fortran standard john reid writes restriction elemental recursion intended make elemental procedure easier implement optimise recursion become normal needed mean fortran finally drop restriction recursive procedure also elemental however compile program iso standard compiler developer implement feature still resort homecooked map pure function map f x procedure fint f mapping function integer intent x input array integer map size x map f x size x end function map whole function loop element x apply function f wrapped array comprehension result array map socalled automatic array assumes size x default allocated stack work though still need define interface procedure f interface pure integer function fint x integer intent x end function fint end interface recursive function want apply fibonacci map use advertised example map fibonacci yield result get fibonacci number say map fibonacci n n map function element array else would filter result filter filter asks function return logical fortran word boolean true false given input value common example function used demonstrate filtering number even odd pure logical function even n integer intent n mod n even true else even false end end function even let define higherorder filter function get even number array integer filter even x like map filter constructed existing fortran building block since fortran function pack standard library gnu fortran documentation pack read pack pack array array rank one description store element array array rank one sound like meant unroll flatten come numpy world multidimensional array onedimensional array keep reading though beginning resulting array made element whose mask equal true afterwards position filled element taken vector ok element syntax pack namely argument mask optional vector understand need look complete syntax pack result pack array mask vector square bracket indicate optional syntax doc go describe argument array shall array type mask shall array type logical size array alternatively may logical scalar vector optional shall array type array rank one present number element vector shall equal greater number true element mask mask scalar number element vector shall equal greater number element array turn pack thing filter except instead filtering function pas logical array say element original input array return great mean filter could defined syntacticsugar kind wrapper around pack pure function filter f x procedure fintlogical f int logical function integer intent x input array integer allocatable filter integer filter pack x f x size x end function filter declare filter allocatable array since know size ahead time however need allocate explicitly use automatic allocation assignment neat feature fortran note allocatable array result allocated heap likely cause performance hit relative automatic array typically go stack use procedure fintlogical input argument need define interface first interface body interface pure logical function fintlogical x integer intent x end function fintlogical end interface covered map filter combine map recursive function element array filter result applying filtering function result filter even map fibonacci n n snippet take integer array x computes fibonacci number element filter even number lot yield result reduce mapped function input array filtered result last step apply reduction operation array get scalar result reduction folding recursively applies binary operation element array order exhaust array reach final scalar result common example fortran function perform reduction array sum product minval maxval admittedly reduction tad difficult get head around compared map filter guido van rossum argued reduce python difficult reason reduction unless operation extremely simple one addition multiplication case argued including sum product function standard library whereas reduction complex would clearly expressed list comprehension reduce code totally try see like let see use fortran today fortran reduce fortunately functional fortranners fortran brings new reduction intrinsic fortran word builtin standard library function reduce two form function reid reduce array operation mask identity ordered reduce array operation dim mask identity ordered input array type rank second argument pure function two argument result type array form used dim indicates one dimension along perform reduction result array rank reduced one relative input array mask logical array filter input array much like builtin function pack identity fallback value result take input sequence empty finally ordered true reduction applied lefttoright otherwise compiler assume operation commutative evaluate reduction optimal way find builtin reduce function look quite useful flexible however recent addition language may stable release gfortran support need roll implementation note parallel reduction coreduce supported ready use gfortran opencoarrays work well practice implementing reduce function let implement custom reduce highorder function allow u following result reduce add filter even map fibonacci x add function add two integer scalar first argument function use reduction operation second argument input array third argument starting value get bit single line compute sum even fibonacci number reduce applies binary function operator element array recursively code lefttoright reduction socalled leftfold pure recursive integer function reduce f x start result re procedure f integer intent x start size x re start else re reduce f x f start x end end function reduce interface function take two integer return integer result pure integer function x integer intent x end function start starting value use applying reduction first element x also value result input array empty intrinsic function sum could written reduce add x product function could written reduce mul x note start argument made optional python functoolsreduce example alternatively also apply reduction array element righttoleft also called rightfold pure recursive integer function reduceright f x start result re procedure f integer intent x start size x re start else re f x reduceright f x start end end function reduceright left versus rightfold defines associativity operation f example leftfold evaluate sum whereas rightfold evaluate order irrelevant particular case matter reduction floatingpoint array applying noncommutative function put piece together write integer allocatable x x n n print reduce add filter even map fibonacci x result another example common reduction operation fortran programmer often us intrinsics test value boolean array true respectively think context reduce could written reduce x false reduce x true respectively get creative cool stuff reverse sort array finally use production paper universality recursive reduction graham hutton wrote program written using fold le readable program written using explicit recursion constructed systematic manner better suited transformation proof thus using recursive reduction likely lead expressive cleaner code composition small building block also le readable difficult reason merely due recursive iterative try recurse head easy functional pattern recursion general may come performance hit fortran simply due fact pattern used much legacy fortran historically ranked highly priority list compiler developer usual recommendation hold use pattern intuitive point writing smart code understand look year later profile code using functional pattern production may le computationally efficient imperative implementation may vary wildly compiler vendor summary although immediately obvious fortran provides almost complete outofthebox support mapfilterreduce pattern map use elemental function defined scalar operate elementwise array rank prior fortran restriction elemental function recursive restriction lifted think good reason cook implementation map write function elemental write language map f x fortran f x beauty filter use builtin function pack together array comprehension eg pack x f x size x use filter function functionalfortran library array comprehension verbose reduce fortran brings reduce serial coreduce parallel standard library compiler support reduce use custom implementation reduce article use one fold implementation functionalfortran reference cover photo nik shuliahin
29,Lobsters,fortran,Fortran programming,Fortran Programming Language,https://fortran-lang.org/,fortran programming language,join u mailing list mailing list discourse fortranlang discourse twitter r feed r feed open source github,join u mailing list subscribe mailing list discus anything fortran related announce fortran project discus development core fortranlangorg project stdlib fpm get latest news discourse join discussion thing fortran fortranlang discourse twitter r feed r client follow r feed open source contribute code report bug request feature github
30,Lobsters,fortran,Fortran programming,"Comparison of some programming languages implementing ""Open-Ended Dice Rolls"" (O6)",https://github.com/isene/O6,comparison programming language implementing openended dice roll,amar rpg wbsite julia thread popped,openended roll implemented various programming language work like roll sixsided dice roll roll dice rolled add original roll making roll dice adding original roll roll original roll roll dice subtracting original roll keep rolling subtracting end rolling two consequtive indicates fumble two consequtive indicates critical roll limit result get open ended dice roll including negative result see amar rpg wbsite original code far seems forth compact code vimscript fortran verbose julia nim perhaps humanly readable although prefer program ruby focal julia thread popped lot attack angle really clever julia code took one included far coolest seen implementation
31,Lobsters,fortran,Fortran programming,fortran-lang/stdlib - Fortran Standard Library,https://github.com/fortran-lang/stdlib,fortranlangstdlib fortran standard library,fortran standard library goal motivation http workflow started workflow scope getting started get code requirement http githubcomaradifypp build cmake build make documentation http stdlibfortranlangorg ford spec wiki contributing link,fortran standard library goal motivation fortran standard published iso http standard library goal project provide community driven agreed upon de facto standard library fortran called fortran standard library stdlib rigorous process stdlib developed documented workflow stdlib specification reference implementation cooperating fortran standard committee eg effort started committee repository plan continue working committee future step workflow document committee want standardize feature already available stdlib would base stdlib implementation scope goal fortran standard library achieve following general scope utility container string file osenvironment integration unit testing assertion logging algorithm searching sorting merging mathematics linear algebra sparse matrix special function fast fourier transform random number statistic ordinary differential equation numerical integration optimization getting started get code git clone http githubcomfortranlangstdlib cd stdlib requirement preprocessor fypp http githubcomaradifypp needed metaprogramming used installed using command line installer pip build cmake cmake b build cmake build build cmake build build target test build make alternatively build using provided makefiles make f makefilemanual documentation documentation work progress see issue currently available http stdlibfortranlangorg includes api documentation automatically generated static analysis markup comment source file using ford tool well specification document spec proposed feature discussion prototype proposed apis along list popular open source fortran project available wiki contributing link
32,Lobsters,fortran,Fortran programming,Running for WG5 Convenor Announcement,https://ondrejcertik.com/blog/2020/04/running-for-wg5-convenor-announcement/,running convenor announcement,platform cv repository,running convenor announcement april decided run convenor international fortran committee chair written platform document explains running issue see propose work committee address see also cv developed platform many fortran community member inside outside fortran committee furthermore also posted platform github repository encourage anyone open issue pull request pr discus refine platform platform detail would convenor selected main goal focus original mission fortran still mission today enable scientist engineer domain expert write program naturally express mathematics algorithm employed portable across hpc system remain viable decade use extract high percentage performance underlying hardware achieve mission committee increase engagement fortran user national lab academia industry elsewhere understand underlying reason many effort moving away fortran address fully expeditiously common feedback hear fortran user want code run modern hardware outlined always fortran mission unfortunately mission currently falling short example fortran currently clear path forward fully leverage gpus part hpc system today personally seen several project moving away fortran reason another example relative lack library ecosystem developer tool around fortran compared modern language order start delivering mission need substantially improve compiler tooling around fortran need work wider user community deliver usedrequested capability given background largescale scientific application software development tooling believe bring user perspective committee hope opportunity convenor make reality working committee implement item platform cultivating climate openness listening cooperation accomplish common goal facilitating collaboration wider fortran community lay groundwork address major challenge gpu support u addressed fully expeditiously efficient productive collaboration fortran user compiler vendor committee
33,Lobsters,fortran,Fortran programming,Flang upstreamed (previously called F18),https://github.com/llvm/llvm-project/tree/master/flang,flang upstreamed previously called,flang http http githubcomflangcompilerflang getting started doc directory compiler overview fortran c programmer fortran grammar openmp grammar document discussion intrinsics runtime descriptor style guide flang us modern c feature markdown style guide llvm supported c compiler building flang tree llvm dependency http llvmorgdocsgettingstartedhtml building flang gcc building flang clang installation directory build type build flang tree run test http wwwllvmorgdocstestingguidehtml regressiontests http wwwllvmorgdocstestingguidehtml unittests tree build tree build generate documentation generate fir documentation generate doxygenbased documentation generate sphinxbased documentation http sphinxdocorg,flang flang groundup implementation fortran front end written modern c started project http aim replace previous flang project http githubcomflangcompilerflang address various deficiency subsequently accepted llvm project rechristened flang getting started read flang doc directory start compiler overview better understand fortran language specific grammar accepted flang read fortran c programmer flang specification fortran grammar openmp grammar treatment language extension covered document understand compiler handling intrinsics see discussion intrinsics understand flang program communicates library runtime see discussion runtime descriptor interested contributing compiler read style guide also review flang us modern c feature interested writing new documentation follow markdown style guide llvm supported c compiler flang written code compiled tested gcc version code compiled tested clang version using either gnu libstdc llvm libc code compiled server rhel macos mojave xcode apple clang version code compile window compiler support building flang tree instruction building flang separately llvm building flang alongside llvm follow standard llvm build instruction add flang llvmenableprojects instead detailed llvm dependency instruction build llvm found http llvmorgdocsgettingstartedhtml building flang part llvm follow instruction add flang llvmenableprojects highly recommend using compiler compile llvm flang flang cmakelisttxt file us variable llvmdir find installed llvm component variable mlirdir find installed mlir component get correct llvm mlir library included flang build define llvmdir mlirdir cmake command line llvm llvmbuilddir libcmakellvm mlir llvmbuilddir libcmakemlir cmake dllvmdir llvm dmlirdir mlir llvmbuilddir toplevel directory llvm built building flang gcc default cmake search g path g version must one supported version order build flang cmake use variable cxx find c compiler cxx include full path compiler name found path eg assuming path export cmake building flang clang build flang clang cmake need know find clang gcc library tool used build clang cxx include full path clang clang found path export cxxclang installation directory specify custom install location add dcmakeinstallprefix installprefix cmake command installprefix path flang installed build type create debug build add dcmakebuildtypedebug cmake command debug build execute slowly create release build add dcmakebuildtyperelease cmake command release build execute quickly build flang tree cd flangbuild cmake dllvmdir llvm dmlirdir mlir flangsrc make run test flang support different category test regression test http wwwllvmorgdocstestingguidehtml regressiontests unit test http wwwllvmorgdocstestingguidehtml unittests tree build run test cd flangbuild cmake dllvmdir llvm dmlirdir mlir flangsrc make test checkall run individual regression test llvmlit need know lit configuration flang parameter charge flangsiteconfig flangconfig set shown bellow pathtollvmlit llvmlit param flangsiteconfig pathtoflangbuild testlitlitsitecfgpy param flangconfig pathtoflangbuild testlitlitcfgpy pathtofortrantest unit test flang built dflangincludetestson default possible generate unittests note unittests skipped llvm install outoftree build include googletest related header library various way run unittests make checkflangunit make checkall make checkflang pathtollvmlit llvmlit testunit invoking test outoftree flang build unittests respective unit test folder tree build flang built dflangincludetestson default possible generate unittests run flang unit test use checkflangunit target make checkflangunit run flang regression test use checkflang target make checkflang generate documentation generate fir documentation flang built dlinkwithfiron default possible generate fir language documentation running make flangdoc create docsdialectfirlangrefmd flang build directory generate doxygenbased documentation generate doxygenstyle documentation source code pas dllvmenabledoxygenon dflangincludedocson cmake command cd llvmprojectbuild cmake dllvmenabledoxygenon dflangincludedocson llvm make doxygenflang generate html builddir toolsflangdocsdoxygenhtml flang doc generate sphinxbased documentation flang documentation preferably written markdown md syntax restructuredtext rst format well markdown recommended first place mostly meant processed sphinx documentation generation system create html page would hosted webpage flang updated periodically would like generate view html locally install sphinx http sphinxdocorg pas dllvmenablesphinxon dsphinxwarningsaserrorsoff cmake command cd llvmprojectbuild cmake dllvmenablesphinxon dsphinxwarningsaserrorsoff llvm make docsflanghtml generate html browser builddir toolsflangdocshtml
35,Lobsters,fortran,Fortran programming,Finite element software for numerical solution of partial differential equations,https://github.com/ElmerCSC/elmerfem,finite element software numerical solution partial differential equation,join github today sign file permalink elmer fem download binary documentation compiling macos http githubcomelmercscelmerfemgit ubuntu licencing social computational glaciology elmerice topic resource reload reload,official git repository elmer fem software dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time elmer fem official source code repository elmer fem software suite elmer finite element software numerical solution partial differential equation elmer capable handling number equation therefore ideally suited simulation multiphysical problem includes model example structural mechanic fluid dynamic heat transfer electromagnetics user also write equation dynamically linked main program elmer consists several part important one elmersolver finite element solver elmergui graphical user interface elmergrid mesh creation manipulation tool also visualization tool elmerpost included package longer developed download binary may download binary virtual machine documentation may find pdfs documentation compiling macos download repository either az zip file via github using git clone http githubcomelmercscelmerfemgit go downloaded directory mkdir build cd build install homebrew install gnu gcc brew install gcc install cmake brew install cmake without mpi elmergui install brew install install qwt brew install cmake withopenmp booleantrue withmpi booleantrue withelmergui booleantrue elmerpost make make install ubuntu install dependency sudo apt install git cmake buildessential fortran libopenmpidev libblasdev liblapackdev without mpi elmergui make sudo make install executable usrlocalbin folder may add path licencing elmer software licensed gpl except elmersolver library licensed lgpl license elmer mainly developed csc center science finland however numerous contribution organization developer well project open new contribution information elmer licensing social follow elmerfem twitter ask question reddit computational glaciology elmerice official git repository elmer fem software topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
36,Lobsters,fortran,Fortran programming,FORTRAN.io,https://fortran.io/,fortranio,history,history fortran foundational language use today fortran never left u run mainframe today ash ash dust dust fortran javascript back fortran
37,Lobsters,fortran,Fortran programming,Programming in Modern Fortran,https://cyber.dabamos.de/programming/modernfortran/,programming modern fortran,,
38,Lobsters,fortran,Fortran programming,Passing the age of retirement: our work with Fortran and its compilers,https://www.codethink.co.uk/articles/2019/passing-the-age-of-retirement-our-work-with-fortran-and-its-compilers/,passing age retirement work fortran compiler,fortran ibm fortran various compiler compiler ifort xl compiler gnu compiler compiler gfortran free open source software fo red hat fortran iv would like learn get touch sharing technical knowledge codethink attend local open source meetups,image fortran coding form obvious reason obsolete public domain wikimedia fortran turning november though programming language may conjure image punch card roomsized computer certainly dead originally developed ibm early scientist engineer hence name formula translation found early success target audience last six decade remained popular choice scientific circle since subject several revision updating modernising featureset latest revision fortran little year old though may seem ancient fortran still used today along update language update various compiler turn humanreadable code machine code taken place last halfcentury popular one today compiler ifort xl compiler gnu compiler compiler gfortran preferred different purpose application consensus seems former two best creating efficient optimised executables whilst gfortran useful debugging unlike offering gnu fortran compiler free open source software fo popular fo compiler language available today feature full support fortran partial support prior subsequent revision language always case even recently year ago support fortran almost nonexistent though remains spotty seen noticeable improvement since though gfortran may popular proprietary offering production environment mean choice worth considering might even better choice produced larger company may something codebases said company come million line code legacy code nonstandard code using opensource software becomes le luxury practicality thanks availability source code group developer dig code modify meet end case one client whose current working version gfortran includes dozen significant patch allow compile specific version combination fortran use side maintain patch make sure compiler get update still compile code however also try upstream said patch upstreaming change opensource program good samaritanism though something encouraged reason alone sending code back core developer mean integrating rest project company develop software mean take care maintenance le time money spent company result even better one better well doubleedged sword upstreaming code created upstream developer often held high standard everyone downstream get play around wellcrafted highperforming software hand upstreaming code notoriously difficult number project gfortran exception mark eggleston one fortran expert explained need jump lot getting patch ready submission upstream hard enough come project like sending mailing list little daunting patch sent upstream explanation addition code one wait reviewed theory patch good enough simply accepted committed member developer team power practice almost never happens often core developer team return submitter proposed improvement mean going back changing patch address constructive often extensive feedback upstream team ensuring quality code standard newcomer one hardest part working compiler actually understanding work limited say least say eggleston need get hand result tinkering digging code playing around result one expect understand part compiler designed fit together make gfortran sound like pain work truth issue symptom bigger benefit tough exhausting quality control upstream ensures gfortran compiler user beyond enthusiast want use sometimes solution provided competitor like intel additionally though poor documentation make development painful far easier issue deal access source code case proprietary alternative surprising red hat push compiler tool choice thankfully thanks community issue diminished developer quick give advice give thought guide user right direction fact working passion project show warmth treat new looking solution problem though mark relative newcomer gfortran working little year granted commit privilege main repository thanks effort suppose accepted commit group year bad one year seems like awfully short time get grip project like fortran compiler first work language actually decade ago despite transition fortran iv used finished degree fortran bit shock seems happy working language thirty year later rate fortran last century anyway would like learn get touch sharing technical knowledge codethink attend local open source meetups
39,Lobsters,fortran,Fortran programming,"C, Fortran, and single-character strings",https://lwn.net/SubscriberLink/791393/90b4a7adf99d95a8/,c fortran singlecharacter string,buying subscription lapack gcc fortran argumentpassing convention cblas lapacke worked unrelated abi issue reported gcc bug responded suggested returned pointed reworked weinberg second law log,know lwnnet subscribersupported publication rely subscriber keep entire operation going please help buying subscription keeping lwn net jonathan corbetjune calling interface programming language nature ripe misunderstanding different language subtly different idea data passed around misunderstanding often effect making thing break right away quickly fixed others persist year even decade jumping shadow making thing fail problem latter variety recently turned c program passing string fortran subroutine unpleasant effect widely used package like lapack c language famously worry much length string simply extend null byte end fortran though like know size string dealing string passed argument function subroutine gcc fortran argumentpassing convention state length string appended list argument consider fortran subroutine defined something like subroutine foo integer character subroutine called fortran code length added compiler third hidden argument c compiler thing though proper call function c would look like int char bar foo strlen c length must passed explicitly end list argument distant point past though somebody decided hidden length argument omitted singlecharacter string declared character called function example clear fortran compiler anywhere ever implemented behavior developer writing call c developed habit leaving length situation long called code knew getting singlecharacter string would need check missing hidden length parameter everything worked even though calling standard violated various lapack subroutine expect singlecharacter string package like cblas lapacke duly leave length argument calling function supposed called thing worked anyway least broke seems problem originally worked thomas kalibera r language community fix unrelated abi issue caused crash lapack call seemingly great deal analysis work kalibera figured thing go wrong subroutine taking singlecharacter string would call another prior returning passing string compiler would optimize call tail call properly sibling call using parameter prior making jump would helpfully store string length end argument list length nt begin space allocated result unsightly stack traceback problem worked around compiling fortran code option behavior reported gcc bug may thomas koenig responded ouch basically people depending c undefined behavior age includes recent development like lapacke accident calling convention kept working oh code fails new compiler widely understood actually broken working year richard biener suggested solution tell affected user fix code suggestion go far though gcc developer took problem seriously good thing compiler update break code working solution found nt clear best solution would simply reverting abi fix option since would reintroduce real bug discussion option shown real solution koenig returned use said restores status quo thing would go back fragile nonconforming would work suggested option could enabled default gcc version since code question used work built version upcoming gcc release developer would warned would around year fix code unfortunately jakub jelinek pointed solution viable either program performing recursive tail call significant depth turning tail call real function call would cause run stack space crash suggested instead trying avoid tail sibling call string argument involved koenig took work attached new option would enabled default update older gcc release jelinek nt like name option though reworked one called setting option two give behavior setting one default value limit workaround call function without explicit prototype setting zero disables workaround entirely code backported future release far appear well perhaps different default value weinberg second law state builder built house way programmer built program first woodpecker come along would destroy civilization situation like interface function misunderstood year would appear case point lot code system appears work fine really waiting woodpecker come along poke hole right place gcc developer worked patch particular problem certainly still plenty code never worked seems thanks dave williams headsup issue log post comment
40,Lobsters,fortran,Fortran programming,How to make Fortran worse,https://badcode.rocks/2019/147/april-teardown-book-store/,make fortran worse,challenge challenge winner fortran cyrille lavigne pull full source makefile variable name subroutine bogus gotos goto recursion affordances conclusion challenge,time announce winner challenge teardown still short amount time left send submission challenge get quick winner fortran cyrille lavigne may want pull full source follow along makefile included makefile much verbose besides using unneeded gnu make extension also defines several thing already builtin even posix make simply written way fflags ffixedform stdlegacy libr librf phony clean clean rm libr make example default variable rm containing local rm f equivalent original clean rule written possibly delete sort file makefile generate make also default rule compiling f file using default system fortran compiler match exactly command previously included variable name fortran fairly short length requirement identifier even many chosen identifier great dimension ibskt istck mxstck idscnt igrps mxgrps character outp ngrps within limit named helpfully dimension basket stack mxstck discnts group mxgrps character output ngroups sp prefix many traditional also meaningful fortran indicate type inferred integer specified otherwise however explicitly declaring variable using integer sp etc possible preferred neither tradition laziness great excuse sticking bad kind naming especially identifier length premium one wasting entire character subroutine reading code would forgiven thinking fortran lacked kind named procedure however despite everything program done using goto repetitive inlined code even fortran subroutine function facility using even something simple inline stack manipulation make much clearer going ibskt j ngroups call push call push call push j call push ngroups â goto â else icmfrm stack stack j stack ngroups stack stack ngroups pop j pop pop icmfrm pop fact refactor fully complete becomes clear see even snippet entire variable original unneeded bogus gotos also complete abuse goto implement kind control flow fortran perfectly capable egregious â true c â â goto â end â end â continue goto cleanly replaced exit stop loop also incredibly confusing snippet â ibskt ii â goto â end end code labelled jump back code full analysis algorithm reveals replaced something like â jj â â jj jj ibskt ii â end â jj c code run basket empty longer need goto else c code previously labelled longer need label â end goto recursion affordances possibly one surprising feature submission goto jump two different place inside loop read code might used reading language take time unravel could even mean however author left helpful clue form push onto stack data structure point jumped pop data structure goto happens done much assembly programming well except microcontrollers likely recognize pattern call stack procedure similar call push goto pop go back code simulating subroutine goto already established bad pattern program however actually reason code trivially rewritten use fortran builtin subroutine code implementing recursive call fortran allow function subroutine call even indirectly mean algorithm work way form trickery going needed sure could cleaned use stacktrampoline sort construct outside properly isolated subroutine machinery would remain would affect program subroutine could cut instead allowing cut however make logical sense readability first seems like harsh reality fortran support needed language feature code necessarily complex result judge code bad unless could written better however could absolutely could written better nothing inherently recursive given problem fact submission used recursion solve even problem naturally best solved using recursive way thinking way implement recursive algorithm without dropping simulate recursive procedure call example depthfirst search recursive algorithm frequently implemented using loop stack many programming language author fell classic antipattern ignoring affordances language programming language language different one lend expressing solution different way rather asking way fortran want express author brought baggage another environment failed imagine alternate implementation lack imagination led implement poorly especially given massive fixedsize preallocated stack language feature miss simply problem expressed mechanically similar way imagine might otherwise written result similar cpu different human reader conclusion think worse submission challenge still open june challenge going soon
41,Lobsters,fortran,Fortran programming,Why We Created LFortran,https://lfortran.org/blog/2019/04/why-we-created-lfortran/,created lfortran,lfortran almost new scientific engineering software project started fortran kokkos fortran usage fix interactivity cling compiler arb bootstrap sympy trackbacks,recently open sourced lfortran interactive fortran compiler built top llvm developing last year work progress link find work already planned roadmap motivation almost new scientific engineering software project started fortran usually neck wood c chosen instead following cited reason choice lack gpu support kokkos equivalent need advanced data structure multidimensional array better modern tool c testing ide support lack generic programming fortran eg write single subroutine work single double precision library one readily use c c actively maintained wide community fortran bad reputation c department fortran usage fortran used popular language scientific computing way early lack interactivity forced many new user pick language tool including matlab later python julia growing lack modern tool growing failure fortran compiler develop full potential gpu support ide support etc forcing developer large production code move c fix interactivity one approach take language like python try make fast possible preserving interactivity ease use one forced modify language bit compiler reason type approach julia took approach take current compiled production language c fortran try see interactive one make without sacrificing speed ie without modifying language c done using cling interactive compiler however c syntax intuitive fortran python similar syntax array operation fortran language used interactively eg jupyter notebook allows similar look feel python matlab enabling rapid prototyping exploratory workflow code however offer superior performance compiled good mature compiler intel fortran compiler fortran compiler believe root problem lack modern fortran compiler following feature open source permissive license create executables static dynamic binary interactive usage jupyter notebook multiplatform first class native support window mac linux hpc work well especially c also fortran compiler msvc g clang gfortran intel gpu support similarly numba work gpu via llvm able compile latest fortran standard designed library modular design priority easy contribute large active community around compiler contributes development thus supporting many tool people build top ide support language interoperability automatic wrapper language c c python julia matlab code refactoring automatic transformation code older fortran standard fortran compiler compile allowing developer use latest standard still able use current fortran compiler better debugger ipythonembed fortran new real type arbitrary precision floating point automatic differentiation type interval arithmetic arb etc safe mode compiler warn obsolete usage check array pointer thing never segfault debug mode allow project restrict fortran feature allowed allowed particular project compiler give error ci new pull request contains forbidden code compiler catalyze creation modern tool based nurturing encouraging community build upon potential make fortran cool currently lot fortran user use fortran legacy code necessarily excited aim lfortran make people want use fortran want try newest toy whether jupyter notebook interactive debugging nice ide support matlab julia python style interactive exploratory development workflow etc bring excitement new modern thing fortran however underneath still old fortran one still use mature stable welltested fortran compiler produce highly optimized binary intel fortran still stateoftheart come performance bootstrap first user people develop algorithm python matlab julia initially ok subset fortran work build community user eventually developer fortran compiler support feature whole fortran standard work take year however compiler parse gfortran module file soon possible literally use module compiled gfortran interactively allow use production code right away also anything lfortran yet implement one could simply write module compile gfortran use lfortran ondřej started sympy facing analogous challenge computer algebra system maximum axiom others notorious huge complicated hard contribute thus small developer community hard use library starting project scratch would mean would take year sympy library could usable user used rich mature feature maple mathematica maximum axiom ondřej done anyway first user people needed subset feature wanted use modern welldesigned library easy use easy develop developing lfortran way first subset fortran implemented library either delivers close delivering feature listed interactivity language interoperability etc make useful first user recruit developer first user approach attract developer compiler us modern design technology llvm interactivity compiled language jupyter notebook simple syntax semantic representation language etc fortran already large community advantage people already know fortran also disadvantage lfortran become useful current fortran community several year want recruit initial community python matlab julia user know appreciate advantage exploratory work develop new research algorithm lfortran becomes mature current fortran community able use also expect main key factor fortran uptake people see use fortran modern way like python julia providing modern nice feature tool compiler attracting talent python scientific community well compiler community llvm trackbacks
42,Lobsters,fortran,Fortran programming,f18 Fortran compiler and runtime accepted as part of LLVM project,https://lists.llvm.org/pipermail/llvm-dev/2019-April/131703.html,fortran compiler runtime accepted part llvm project,llvmdev accepted part llvm project llvmdev listsllvmorg information llvmdev mailing list,llvmdev accepted part llvm project chris lattner via llvmdev llvmdev listsllvmorg wed apr pdt hi everyone community discussing whether fortran compiler runtime project accepted part llvm project discussed detail llvm foundation board director recently approved inclusion project foundation recommends considering new name project eg flang simply fortran accessible obvious new contributor addition repository name also base stem mailing list project related material folk discus come decision work llvmadmin team set requisite infra board also recommends evaluate time whether reasonably possible eliminate dependence feature using blocker inclusion project blocker certain infrastructure eg build bot integration official release may may relevant given early state case behalf llvm foundation welcome project congratulation really great see new effort compiler runtime included llvm project chris lattner behalf llvm foundation information llvmdev mailing list
43,Lobsters,fortran,Fortran programming,LFortran: an interactive fortran compiler,https://docs.lfortran.org/,lfortran interactive fortran compiler,lfortran documentation http lfortranorg http gitlabcomlfortranlfortran feature highlight development status work today interactive jupyter support static interactive clean modular design usable library design developer tutorial interoperation gfortran create executables run linux mac window planned native interoperation language fortran compiler modern hardware support full fortran support issue tracker roadmap,lfortran documentation lfortran modern opensource bsd licensed interactive fortran compiler built top llvm execute user code interactively allow exploratory work much like python matlab julia well compile binary goal run user code modern architecture multicore cpu gpus website http lfortranorg main repository http gitlabcomlfortranlfortran try online using binder feature highlight lfortran development feature work today feature implemented also check development status section information feature supported worked work today interactive jupyter support lfortran used jupyter fortran kernel allowing pythonjulia style rapid prototyping exploratory workflow see static interactive example notebook used commandline interactive prompt repl clean modular design usable library lfortran structured around two independent module ast asr standalone completely independent rest lfortran user encouraged use independently application build tool top see design developer tutorial document detail interoperation gfortran lfortran parse gfortran module file asr generate fortran wrapper compiled fortran compiler linked original gfortran compiled module create executables create executables like fortran compiler run linux mac window three platform regularly tested ci planned feature development link corresponding issue track progress following native interoperation language fortran compiler automatically call code written language c python using use statement see understands fortran compiler module file one use abi link correctly gfortran supported compiler planned see allows use lfortran production code today modern hardware support thanks llvm goal lfortran run modern hardware take advantage native fortran language construct concurrent run multicore cpu gpus see full fortran support currently subset fortran implemented goal full implementation latest fortran standard see please vote issue issue tracker want u prioritize feel free create new one missing anything roadmap roadmap get planned feature implemented port code generation use asr pas current test remove old code generation old semantics used annotate ast tree messy get gfortran module file working use module assumedsize assumedshape array allow right away use production code lfortran time implement fortran feature eventually full fortran supported b gradually move c robustness speed python api change minimally user experience python change c implement cool feature use module c python automatic wrapper modern hardware support generating older standard fortran fortran doctest feature sympy integration language service ides idea step internal refactoring take long step allow lfortran used interactively production code right away production code get compiled gfortran one us module lfortran functionssubroutines interactively called module use gfortran supported feature api must fit subset lfortran understands large number application simple functionssubroutines array argument enough make lfortran usable first user one always use gfortran temporarily lfortran support given feature expect finished step end summer hopefully sooner finally step improve lfortran overall allowing first user contribute back growing community making lfortran gradually useful people
44,Lobsters,fortran,Fortran programming,Using Hammock Graphs to Structure Programs (2004),https://biblio.ugent.be/publication/291746/file/451220.pdf,using hammock graph structure program,,obj linearized h l e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer size info r root r prev id startxref eof obj page r type catalog acroform r endobj obj field r r r r r r r dr r da helv tf g endobj obj v filter flatedecode length r stream c l endstream endobj obj endobj obj type page parent r resource r content r r r r r r r r thumb r mediabox cropbox rotate endobj obj procset pdf text font r r r r r r r r r extgstate r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset abstracindextmonenroductwoefsthreehvbmper iodlgoihufkwpyfourplygfivesixwksevenzquoterightc ommav r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset usinghamockgrphtsuepfbzdeperioddquoterightl commaemdashavyzfwjhyphenbqitxwslashrncovlthreez erofourtwoonenineeightfivedollarparenleftparenrightsevencolon mkbraceleftbracerightsixbracketleftbracketrightj r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset membriebequalfocommaaatncperiodipplsudzgnw vcdghry r endobj obj endobj obj filter flatedecode length r stream r z 譬 rqj endstream endobj obj endobj obj type font subtype firstchar lastchar width encoding r basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj length subtype stream endstream endobj obj type encoding difference endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset astrucedpogamiblkhyphennwhfycommaxperioduvh jquoterighttzfqbracketleftonefourbracketrighttwothreeeight isixfiveebparenleftparenrightdjninescoloncsevenzerolessg reaternendashsemicolonbraceleftbracerightquotedblleftquotedblrigh twrlunderscoreequalpogslashasteriskmvxkzdieresisq r endobj obj filter flatedecode length r stream f vz ez endstream endobj obj endobj obj filter flatedecode length r stream aca j αd p pni c ݱi p endstream endobj obj endobj obj filter flatedecode length r stream n p x ܡ b endstream endobj obj endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset gotonezerodenifparenleftbcparenrightlaspruhxperio dwherbcolonnaequalplusfive r endobj obj filter flatedecode length r stream l q n endstream endobj obj endobj obj filter flatedecode length subtype stream ad p endstream endobj obj type encoding difference endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset fperiodzhangiswtplformcpuiccommathreesevensix zeroonefouravemkolrtdehyphencolonzbathdquoterights ygubninetwosemicolonjkneightqxjparenrightlessgreaterbr acketleftbracketrightunderscorewparenleftemdash r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset r endobj obj type font subtype firstchar lastchar width encoding r basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type font subtype firstchar lastchar width encoding winansiencoding basefont fontdescriptor r endobj obj type fontdescriptor ascent capheight descent flag fontbbox fontname italicangle stemv xheight charset period r endobj obj filter flatedecode length r stream
46,Lobsters,fortran,Fortran programming,schemetran: Write (modern) Fortran in Scheme,https://gitlab.com/codetk/schemetran,schemetran write modern fortran scheme,,write modern fortran scheme fortran great expressing operation multidimensional array number scheme great expressing coding thought project attempt combine something useful read
47,Lobsters,fortran,Fortran programming,"Happy 60th birthday, Fortran",https://opensource.com/article/17/11/happy-60th-birthday-fortran,happy birthday fortran,hidden figure actively seeking fortran programmer rendering da vinci mona lisa fortran run fortran gpus,fortran compiler introduced april first optimizing compiler paved way many technical computing application year cobol business computing fortran scientific computing fortran may approaching retirement age nt mean stop working year mark anniversary first fortran styled fortran formula translation release even ca nt write single line use fortran every day operational weather forecast model still largely written fortran example focus mathematical performance make fortran common language many highperformance computing application including computational fluid dynamic computational chemistry although fortran may popular appeal newer language language owe much pioneering work fortran development team although fortran may popular appeal newer language language owe much pioneering work fortran development teamin movie hidden figure one character teach fortran see human computer including replaced electronic computer although much early left history fortran persists two year ago nasa began actively seeking fortran programmer work voyager mission last original programmer prepared retire use fortran weather climate modeling geophysics many scientific application mean fortran knowledge remain valued skill year come despite fortran trending search longer taught university missed chance take university fortran course one semester one atmospheric scientist preparing apply graduate school late decided learn programming language called local school university ask whether offered course fortran response laughter taught studying existing code lot google search today maintains old fortran code writes new code daily story becoming prevalent fortran popularity decline great longevity fortran provides wealth learning material well intergenerational bonding first system administration job common task helping graduate student compile fortran code inherited advisor turn inherited advisor colleague mine coincidentally began existing year first draft ibm mathematical formula translating system specification wrote article sharing experience creating rendering da vinci mona lisa fortran another friend told one favorite program undergraduate fortran program created calendar featuring asciiart rendering character peanut comic strip make fortran enduring establishing initial foothold help course language used critical business application give lot staying power wholly rewriting code expensive risky language used critical business application give lot staying power wholly rewriting code expensive riskybut name implies fortran designed translate mathematical formula computer code explains strong presence field deal lot mathematical formula particularly partial differential equation like like technology survived year fortran evolved change language take advantage new paradigm without making rapid change since first industry standard version fortran fortran approved major version occurred fortran approved fortran released iso ansi update fortran fortran released update fortran new revision called fortran expected clearly plan fortran retire anytime soon active project underway make easier run fortran gpus fortran celebrate centennial nobody know know voyager voyager spacecraft carry fortran code beyond reach solar system
48,Lobsters,fortran,Fortran programming,Why physicists still use Fortran,http://moreisdifferent.com/2015/07/16/why-physicsts-still-use-fortran/,physicist still use fortran,language flash siesta open mpi coarrays http benchmarksgamealiothdebianorg comparison several benchmark c fortran fortran legacy code fortran easier physic student learn c point ease fortran array handling feature apl vectorvalued index masking requires following code point ease little need worry pointer memory allocation contain pointer point regarding fortran v c const see instance discussion future survey fortran user brand new language hpc called julia reading ideal hpc programming language fortran faster c implicit none,know programming language year look like know called fortran charles anthony richard hoare circa fortran rarely used today industry one ranking rank behind language however fortran still dominant language large scale simulation physical system ie thing like astrophysical modeling star galaxy hydrodynamics code cf flash large scale molecular dynamic electronic structure calculation code cf siesta large scale climate model etc field high performance computing hpc large scale numerical simulation subset two language use today c modern fortran fortran popular open mpi library parallelizing code developed two language basically want fast code run many processor limited two option modern fortran also feature called coarrays put parallelization feature directly language coarrays started extension fortran incorporated fortran standard heavy use fortran physicist often confounds computer scientist outsider tend view fortran historical anachronism would like article explain fortran still useful language advocating physic major learn fortran since physic major end research time may better invested learning c sticking matlaboctavepython would like explain fortran still used show merely physicist behind time although sometimes true year ago saw physic student working fortran code student adviser unaware fortran computer scientist consider continued dominance fortran numerical computing challenge digging feel obligated discus bit history since many hear fortran immediately think punch card code line number original specification fortran written early fortran designated allcaps fortran modern standard hellish incredible leap forward previous programming done assembly fortran often programed punch card notsofondly recalled prof miriam forman stony brook fortran many revision well known standard often said reason fortran still used fast fastest website http benchmarksgamealiothdebianorg allows comparison several benchmark c fortran benchmark fortran c fastest note python darling computer scientist usually time slower nature interpreted code python unsuited heavy numerical computation highly suited many thing interestingly c beat fortran two benchmark although fairly close however two benchmark fortran win nbody simulation calculation spectrum physicsy result vary somewhat depending whether one compare single core quad core machine fortran lagging bit behind c quad core benchmark fortran much slower c involve process time spent reading writing data fortran known slow altogether c fast fortran often bit faster question really asking physic professor continue advise student use fortran rather c fortran legacy code given long history fortran surprise large amount legacy code physic written fortran physicist usually try minimize amount coding therefore legacy code exists use even old code hard read poorly documented efficient often faster use old validated code write new code physicist business writing code trying understand nature reality researcher usually want take path least resistance professor usually legacy code hand often code wrote decade ago pas code student save student time also take uncertainty debugging process fortran easier physic student learn c overall think fortran easier learn c fortran c similar fortran easier code reason discus c fairly primitive language physicist go c route tend look object oriented coding object oriented coding useful especially massive software project take significantly time learn one learn abstract concept like class inheritance paradigm object oriented coding different procedural paradigm used fortran fortran based simple procedural paradigm closer actually happens hood inside computer optimizing vectorizing code speed procedural paradigm seems easier work physicist generally understanding computer work inclined think term physical process transfer data disk ram ram cpu cache contrast mathematician prefer think term abstract function logic also contrast way one think object oriented code optimizing object oriented code seems difficult procedural code object bulky structure compared physicist data structure choice array point ease fortran array handling feature array physicsspeak matrix lie heart physic calculation fortran incorporates array handling feature similar apl matlaboctave array copied multiplied scalar multiplied together quite intuitively b b c b b exp norm sqrt sum b c array dimension instance could c b give elementbyelement multiplication b assuming b size matrix multiplication one would use c matmul b almost intrinsic function fortran sin exp ab floor etc take array argument leading easy use neat code similar c code simply exist base implementation c merely copying array requires cycling element loop call library function trying feed array wrong library function c return error use library instead intrinsic function mean resulting code never neat transferable easy learn fortran array element indexed using simple syntax x z whereas c one use x z array indexed starting conforms way physicist talk matrix unlike c array start following fortran code show array feature b c b first vector created using implicit loop also called array constructor next vector b created every element using stride subscript finally array b copied array c starting element fortran support declaring array index zero negative double precision dimension myarray negative index may sound silly heard useful imagine negative index area extra space annotation fortran also support vectorvalued index instance extract element array array b using subscript b subscript fortran also incorporates masking array intrinsic function instance want take log matrix element greater zero use logofa log mask gt alternatively may want take negative point array set done one line using command myarray lt myarray dynamically allocating deallocating array fortran easy instance allocate array real dimension allocatable nameofarray allocate nameofarray xdim ydim c requires following code int array array malloc nrows sizeof double lt nrows array malloc ncolumns sizeof double deallocate array fortran use deallocate nameofarray c lt nrows free array free array point ease little need worry pointer memory allocation language like c variable passed value unless array passed reference however many scenario passing array value may make sense consider data consists position molecule different timesteps may want analyze motion single molecule take slice array subarray corresponding coordinate atom molecule pas function going complicated series analysis subarray used pas reference value pointed going noncontiguous memory way cpu access memory manipulating noncontiguous data slow pas value however create new array memory contiguous instance passing slice large array function operated compiler may create new location memory deemed efficient may fact much efficient array stored cpu cache physicist delight compiler dirty work optimizing memory use fortran variable usually passed reference value hood fortran compiler automatically optimizes passing efficient physic professor fortran compiler much trusted optimizer memory usage physic student result seen physicist rarely use pointer although contain pointer point regarding fortran v c fortran several feature allow programmer give information compiler assist debugging optimization way coding error caught compiletime rather runtime instance variable declared parameter something change parameter ever changed code compiler return error c something similar called const similarly fortran also intent specification tell compiler whether argument passed function subroutine input output input output use intent specifier help compiler optimize code increase code readability robustness similar thing done c assist optimization people online complain syntax confusing see instance discussion similar feature fortran used varying degree assist compiler instance fortran introduced idea declaring function pure pure function side effect change variable argument function global variable special case pure function elemental function function take scalar argument return scalar meant operate element array knowledge function pure elemental lead additional optimization compiler especially code parallized future scientific computation fortran remains dominant going away anytime soon survey fortran user supercomputing convention respondent said thought would still using fortran five year survey also showed large number people using mixed code c overwhelmingly second language anticipating increased mixing fortran c code fortran specification greater feature code interoperability increasingly fortran code called higherlevel code written python computer scientist bash physicist using fortran fail realize fortran remains uniquely suited named formula translation converting physic formula code many also unaware fortran continued develop incorporating new feature time passage albeit slowly calling modern fortran fortran old like calling c old c first developed around hand even modern fortran standard retains backwards compatibility fortran fortran sense continued usefulness fortran challenge computer scientist recently researcher mit decided tackle challenge full force developing brand new language hpc called julia first released julia actually overtake fortran remains seen suspect case take quite long time reading ideal hpc programming language software engineer detailed analysis quite head concludes fortran come closest ideal language hpc fortran faster c first answer stackoverflow question explains fortran assumption aliasing memory make faster c implicit none blog written fortran enthusiast
49,Lobsters,fortran,Fortran programming,A FORTRAN Coloring Book (1978),https://archive.org/stream/9780262610261#page/n1/mode/2up,fortran coloring book,format book,internet archive bookreader fortran coloring book bookreader requires javascript enabled please check browser support javascript enabled browser setting also try one format book
51,Lobsters,fortran,Fortran programming,FLANG: NVIDIA Brings Fortran To LLVM,https://github.com/flang-compiler/flang,flang nvidia brings fortran llvm,flang http githubcomflangcompilerflangwiki http listsflangcompilerorgmailmanlistinfo http building flang http githubcomflangcompilerflangwikibuildingflang compiler option,flang flang fortran compiler targeting llvm visit flang wiki information http githubcomflangcompilerflangwiki mailing list announcement developer link signup information http listsflangcompilerorgmailmanlistinfo flangcompiler channel slack slack invitation anyone join link http building flang instruction building flang found flang wiki http githubcomflangcompilerflangwikibuildingflang compiler option list compiler option enter flang help flang compiler support accepts clang compiler option support many well following flangspecific compiler option noflanglibs link flang library mp enable openmp link openmp library libomp nomp link openmp library libomp mbackslash treat backslash character like cstyle escape character mnobackslash treat backslash like character mbyteswapio swap byteorder unformatted inputoutput mfixed assume fixedformat source mextend allow source line character mfreeform assume freeformat source mpreprocess run preprocessor fortran file mrecursive generate code allow recursive subprogram mstandard check standard conformance msave assume variable save attribute module path module file also work select fortran semantics assignment allocatable object default select fortran semantics assignment allocatable object staticflanglibs link using static flang library daz treat denormalized number zero flushz set sse flushtozero mode mcachealign align large object cacheline boundary fprelaxed option ignored treat integer logical integer logical treat real real treat integer logical integer logical treat real real fnofortranmain nt link fortran main
52,Lobsters,fortran,Fortran programming,Interfacing Fortran with OCaml,http://lambda-diode.com/software/ocaml/scientific/fortran,interfacing fortran ocaml,bigarrays,writing ocaml binding call c nt hard easy make mistake repetitive procedure one want call fortran code one would write c stub code called ocaml would call fortran three language deal becomes annoying using ctypes nt write stub code approach also used get access lapack routine lacaml binding availble dgglse first serious numerical work ocaml processing remote sensing data requires use bigarrays arbitrary rank array unboxed primitive data type single doubleprecision real complex number integer precision indexing syntax provided arbitrary rank simplified routine provided rank array layout fortranlike case data stored columnmajor order index start one clike case rowmajor start zero let say want simple routine take vector point coordinate given double array calculates minimum distance pair point using naive algorithm really serious problem would use proper algorithm octree structure one complicated voronoi algorithm fortran implementation suitable calling ocaml via ctypes module accel use isocbinding cint cdouble use intrinsic isofortranenv use intrinsic ieeearithmetic implicit none integer parameter dp cdouble contains subroutine mindist dmin imin bind c name accelmindist integer cint value real dp intent real dp intent dmin real dp integer cint intent imin integer j ieeepositiveinf imin j j end imin imin end end end dminsqrt end subroutine mindist end module accel go file called mindist dmin imin function take input number point coordinate array must row column note used isofortranenv get proper fortran real kind cdouble match c double therefore bigarray kind output put minimum distance dmin row number pair point minimum distance imin make use fortran intrinsics since fortran default pass everything reference use attribute value argument unless want box debox little ocaml wrapper call routine ocaml define module accel contains mindist function open bigarray open ctypes open foreign external accelmindistlink unit unit accelmindist type float fortranlayout let mindist let f foreign accelmindist int ptr double ptr double ptr int returning void fun np let dmin allocate double let imin allocaten int let ac genarraychangelayout clayout let bigarraystart ac f np dmin imin dmin imin imin module initialization call ctypes resolve accelmindist create function take number point np point array way nt competely filled type signature int ptr double ptr double ptr int returning void must match fortran subroutine note return value passed reference therefore one double two integer allocated allocate allocaten content retrieved using ctypes operator notice using value accelmindistlink included nonetheless prevent linked garbagecollecting routine dynamically resolved runtime via ctypes heard linker flag seems work well another thing using genarraychangelayout becaus ctypes know clayout bigarrays changelayout function creates new bigarrray proxy sharing data presenting index c layout make ctypes happy fortran code nt need know trick index fortran ocaml columnmajor fortran index need ocamlbuild rule compiling fortran code myocamlbuildml place following oasisstop open ocamlbuildplugin let dispatch fun hook dispatchdefault hook match hook afterrules flag ocaml link program ccopt wl e rule object prod deps fun env cmd p gfortran fcheckbounds ffastmath wall wimplicitinterface waliasing wconversion wintrinsicshadow fpic c env add rule producing file file using optimization feature array bound checking finally let say program called foo oasis section look like executable foo path mainis fooml compiledobject best csources accelc builddepends ctypesforeign cclib lgfortran notice two trick first one listing fortran c suffix even file suffix seems work current version oasis trick need fortran runtime library case since using gfortran lgfortran using quite happily production code ghgsat personal code nt issue far
53,Lobsters,fortran,Fortran programming,Geniuses Wanted: NASA Challenges Coders to Speed Up Its Supercomputer,https://www.nytimes.com/2017/05/08/science/nasa-supercomputer-pleiades.html,genius wanted nasa challenge coder speed supercomputer,get touch nasa online pitch pleiades strategic idea tactical change bbc news story exercise space laundry microgravity space poop challenge,computer programmer eye aeronautics get touch nasa could use helpto improve performance one world biggest supercomputer agency crowdsourcing new idea old coding languageand prestige nasa enough draw cash prize totaling agency online pitch nasa looking qualified people download code analyze performance bottleneck identify possible modification might lead reducing overall computational time particular aeronautics division interested improving work computational fluid dynamic got put simply supercomputer called pleiades program creates simulation complex thing like airflow spinning blade helicopter nasa want run efficiently program predominant coding language fortran decade oldresearchers sometimes wait day even week get output pleiades said michael hetle nasa executive work aeronautics research better code computer might able spit thing quickly first time challenge like mr hetle added far quite bit interest contest costeffective way nasa solve problem said allen downey author computer science professor franklin w olin college engineering massachusetts get lot people effectively contribute lot time said end inexpensive person run project two separate contest table one call bigpicture strategic idea reenvision code prize call tactical change might increase efficiency cash prize offerdaniel merlino going willing put long hour whether win like challenge saidlast week mr merlino computer science student university north texas came across bbc news story nasa request said know fortran yet taught programming language past responsibility student continuously search type situation said stagnation technology industry really work always push forward nasa used crowdsourcing asked member general public come way astronaut exercise space laundry microgravity last year even held space poop challenge sought mechanism astronaut take care important business without shedding spacesuitsbut new challenge stand mr hetle said requires indepth knowledge programming code algorithm winning entry could revolutionize way scientist use pleiadesthe supercomputer question look glamorous found inside ames research center mountain view calif consists row row unit look lot like hightech vending machinesbut fact pleiades named one conspicuous star cluster night sky turn named seven sister greek mythology one powerful computer earthand numbercrunching fine could stand go little bit faster mean improving software program us fortran coding language first developed old fortran code used pleiades gone several version decade getting sophisticated time fortran language remains popular circle especially among scientist uniquely suited work algebraic algorithm sort apply physical motion dr downey saidmr merlino computer science student familiar newer language like sql python said challenge would useful learning experience applicant nasa gaining viewpoint perspective useful type programming project saidcoding enthusiast want try hand challenge june apply though must u citizen age winner announced august
54,Lobsters,fortran,Fortran programming,NASA Issues a Challenge to Speed Up Its Supercomputer Code,https://www.nasa.gov/aero/nasa-issues-a-challenge-to-speed-up-its-supercomputer-code,nasa issue challenge speed supercomputer code,,
